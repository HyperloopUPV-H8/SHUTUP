
TUD_A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000208a0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08020b70  08020b70  00030b70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000034  08020dec  08020dec  00030dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000030  08020e20  08020e20  00030e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08020e50  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000010dc  2400007c  08020ecc  0004007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001158  08020ecc  00041158  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c7f8f  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000b1ea  00000000  00000000  00108039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000057d8  00000000  00000000  00113228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005910  00000000  00000000  00118a00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003fc9b  00000000  00000000  0011e310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003c9d1  00000000  00000000  0015dfab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001d741b  00000000  00000000  0019a97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00371d97  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00019c14  00000000  00000000  00371de8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020b58 	.word	0x08020b58

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08020b58 	.word	0x08020b58

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
 8000324:	2300      	movs	r3, #0
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f805 	bl	8000366 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    }
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f9e2 	bl	8000764 <_ZNSaIP8AnalogInED1Ev>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f9c5 	bl	8000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffeb 	bl	80003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f9f5 	bl	80007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f9d3 	bl	80007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffeb 	bl	80003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 fa04 	bl	8000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f9e2 	bl	8000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffeb 	bl	8000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_ZN8AnalogIn5startEv>:

vector<AnalogIn*> AnalogIn::all_analog_ins;
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;

void AnalogIn::start() {
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d004      	beq.n	80004a2 <_ZN8AnalogIn5startEv+0x2a>
		HAL_TIM_Base_Start(timer);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4618      	mov	r0, r3
 800049e:	f01e f83d 	bl	801e51c <HAL_TIM_Base_Start>
	}

	if(adc->State == 1){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d014      	beq.n	80004e0 <_ZN8AnalogIn5startEv+0x68>
		HAL_ADC_Start_DMA(adc,(uint32_t*) adcs[adc].data, adcs[adc].data_size);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004c0:	f000 f9de 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004c4:	4603      	mov	r3, r0
 80004c6:	1d1d      	adds	r5, r3, #4
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004ce:	f000 f9d7 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004d2:	4603      	mov	r3, r0
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4629      	mov	r1, r5
 80004da:	4620      	mov	r0, r4
 80004dc:	f015 fb62 	bl	8015ba4 <HAL_ADC_Start_DMA>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}
 80004e8:	240000a4 	.word	0x240000a4

080004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>:

AnalogIn::AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer, Pin* pin) : adc(adc), timer(timer) {
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b08e      	sub	sp, #56	; 0x38
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
	AnalogIn::all_analog_ins.push_back(this);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800050e:	4619      	mov	r1, r3
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb4>)
 8000512:	f000 fa13 	bl	800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>
	AnalogIn::analog_in_from_pin[pin] = this;
 8000516:	68fc      	ldr	r4, [r7, #12]
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4821      	ldr	r0, [pc, #132]	; (80005a4 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb8>)
 800051e:	f000 fa1f 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8000522:	4603      	mov	r3, r0
 8000524:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_INPUT;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2201      	movs	r2, #1
 800052a:	719a      	strb	r2, [r3, #6]

	if(adcs.count(adc) == 0) {
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	4619      	mov	r1, r3
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000534:	f000 fa72 	bl	8000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d011      	beq.n	800056c <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0x80>
		ADC adc_struct;
		adc_struct.data_size = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
		adcs[adc] = adc_struct;
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4619      	mov	r1, r3
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000554:	f000 f994 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000558:	4603      	mov	r3, r0
 800055a:	461d      	mov	r5, r3
 800055c:	f107 0410 	add.w	r4, r7, #16
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	602b      	str	r3, [r5, #0]
	}

	adc_index = adcs[adc].data_size;
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000574:	f000 f984 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000578:	4603      	mov	r3, r0
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	611a      	str	r2, [r3, #16]
	adcs[adc].data_size += 1;
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000588:	f000 f97a 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 800058c:	4603      	mov	r3, r0
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	3201      	adds	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4618      	mov	r0, r3
 8000598:	3738      	adds	r7, #56	; 0x38
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	24000098 	.word	0x24000098
 80005a4:	240000bc 	.word	0x240000bc
 80005a8:	240000a4 	.word	0x240000a4
 80005ac:	00000000 	.word	0x00000000

080005b0 <_ZN8AnalogIn6updateEv>:

float AnalogIn::update() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <_ZN8AnalogIn6updateEv+0x68>)
 80005be:	f000 f95f 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005d6:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000608 <_ZN8AnalogIn6updateEv+0x58>
 80005da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005de:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000610 <_ZN8AnalogIn6updateEv+0x60>
 80005e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	edc3 7a05 	vstr	s15, [r3, #20]
	return voltage;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000000 	.word	0x00000000
 800060c:	40efffe0 	.word	0x40efffe0
 8000610:	66666666 	.word	0x66666666
 8000614:	400a6666 	.word	0x400a6666
 8000618:	240000a4 	.word	0x240000a4

0800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffed 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8000642:	4603      	mov	r3, r0
 8000644:	681c      	ldr	r4, [r3, #0]
 8000646:	6838      	ldr	r0, [r7, #0]
 8000648:	f7ff ffe8 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800064c:	4603      	mov	r3, r0
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429c      	cmp	r4, r3
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	++_M_current;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	return *this;
 8000674:	687b      	ldr	r3, [r7, #4]
      }
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <_ZN8AnalogIn20start_all_analog_insEv>:

void AnalogIn::start_all_analog_ins(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZN8AnalogIn20start_all_analog_insEv+0x5c>)
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f9dc 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f9e7 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 80006b6:	4603      	mov	r3, r0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	463a      	mov	r2, r7
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb6 	bl	8000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <_ZN8AnalogIn20start_all_analog_insEv+0x54>
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffd4 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 80006da:	4603      	mov	r3, r0
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60bb      	str	r3, [r7, #8]
		analog_in->start();
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	f7ff fec9 	bl	8000478 <_ZN8AnalogIn5startEv>
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffba 	bl	8000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>
 80006ee:	e7e4      	b.n	80006ba <_ZN8AnalogIn20start_all_analog_insEv+0x1e>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	24000098 	.word	0x24000098

080006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>:

void AnalogIn::interrupt_all_analog_ins(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000708:	f000 f9cd 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800070c:	4602      	mov	r2, r0
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4293      	cmp	r3, r2
 8000712:	bf34      	ite	cc
 8000714:	2301      	movcc	r3, #1
 8000716:	2300      	movcs	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x3c>
		AnalogIn::all_analog_ins[i]->update();
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000722:	f000 f9d0 	bl	8000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>
 8000726:	4603      	mov	r3, r0
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <_ZN8AnalogIn6updateEv>
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e7e6      	b.n	8000706 <_ZN8AnalogIn24interrupt_all_analog_insEv+0xa>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24000098 	.word	0x24000098

08000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f9ca 	bl	8000ae6 <_ZNSaIP8AnalogInEC1Ev>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9d2 	bl	8000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZNSaIP8AnalogInED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000792:	461a      	mov	r2, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f9c6 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fdf8 	bl	8000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f9c9 	bl	8000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9d1 	bl	8000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdbe 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>:
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f9df 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f9bb 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fde9 	bl	80003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f9d6 	bl	8000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f9de 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd89 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>:
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f9ec 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f9c8 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdda 	bl	800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f9e1 	bl	8000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>
 8000892:	4603      	mov	r3, r0
 8000894:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9eb 	bl	8000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9ee 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d114      	bne.n	80008e0 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x60>
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9fc 	bl	8000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa02 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4621      	mov	r1, r4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fa08 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x64>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x66>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01b      	beq.n	8000922 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80008ea:	687c      	ldr	r4, [r7, #4]
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fa19 	bl	8000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa04 	bl	8000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000908:	f107 0218 	add.w	r2, r7, #24
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xb8>)
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	4620      	mov	r0, r4
 800091a:	f000 fa18 	bl	8000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800091e:	4603      	mov	r3, r0
 8000920:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9d1 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 800092c:	4603      	mov	r3, r0
 800092e:	3304      	adds	r3, #4
      }
 8000930:	4618      	mov	r0, r3
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	08020d70 	.word	0x08020d70

0800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f000 fa3f 	bl	8000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fa45 	bl	8000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fa69 	bl	8000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8000972:	4603      	mov	r3, r0
 8000974:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 fa73 	bl	8000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa76 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa84 	bl	8000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa8a 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 80009aa:	4603      	mov	r3, r0
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4621      	mov	r1, r4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa90 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01b      	beq.n	8000a02 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009ca:	687c      	ldr	r4, [r7, #4]
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 faa1 	bl	8000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa8c 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80009f6:	6979      	ldr	r1, [r7, #20]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 faa0 	bl	8000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa59 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	3304      	adds	r3, #4
      }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3724      	adds	r7, #36	; 0x24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	08020d70 	.word	0x08020d70

08000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fac5 	bl	8000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fafe 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb05 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x3e>
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x40>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb04 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 faf3 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	109b      	asrs	r3, r3, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
      }
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_ZNSaIP8AnalogInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fad7 	bl	80010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	{ }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 faba 	bl	80010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>
      }
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 face 	bl	80010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
      { }
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d012      	beq.n	8000bb0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 fabe 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fff0 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 fac2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000ba0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fac9 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000bae:	e7e9      	b.n	8000b84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
	}
    }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fac0 	bl	800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
      { }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d012      	beq.n	8000c34 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f000 fab0 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fff0 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000c1e:	6838      	ldr	r0, [r7, #0]
 8000c20:	f000 fab4 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000c24:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fabb 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000c32:	e7e9      	b.n	8000c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 faaf 	bl	80011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fab9 	bl	80011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>:
      key_comp() const
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 faa9 	bl	8001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>
 8000cc4:	bf00      	nop
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}

08000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 faa6 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	bf34      	ite	cc
 8000cfe:	2301      	movcc	r3, #1
 8000d00:	2300      	movcs	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
      }
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fa92 	bl	8001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa82 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d62:	4604      	mov	r4, r0
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 fa89 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d6e:	f000 fa90 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d72:	4603      	mov	r3, r0
 8000d74:	462a      	mov	r2, r5
 8000d76:	4621      	mov	r1, r4
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fa95 	bl	80012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8000d7e:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f000 fbe3 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f107 0010 	add.w	r0, r7, #16
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	f000 faad 	bl	80012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>

	    if (__res.second)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000d9a:	6939      	ldr	r1, [r7, #16]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 fbe6 	bl	8001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e00b      	b.n	8000dc2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>

	    _M_drop_node(__z);
 8000daa:	69f9      	ldr	r1, [r7, #28]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f9c5 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fc18 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}

08000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d011      	beq.n	8000e1a <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685d      	ldr	r5, [r3, #4]
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f000 fc06 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4629      	mov	r1, r5
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f000 fc20 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	1d1a      	adds	r2, r3, #4
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e00c      	b.n	8000e34 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe32 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 8000e20:	4604      	mov	r4, r0
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f000 fbf3 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fc20 	bl	8001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fc99 	bl	800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>
 8000e3a:	4603      	mov	r3, r0
#endif
      }
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fca5 	bl	80017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fcaf 	bl	80017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fc9f 	bl	80017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8000eb4:	bf00      	nop
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc9c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZNKSt4lessIP3PinEclES1_S1_>:
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	bf34      	ite	cc
 8000eee:	2301      	movcc	r3, #1
 8000ef0:	2300      	movcs	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
      }
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc88 	bl	8001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f3e:	b5b0      	push	{r4, r5, r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f98a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000f52:	4604      	mov	r4, r0
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f000 fc74 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f5e:	f000 f998 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000f62:	4603      	mov	r3, r0
 8000f64:	462a      	mov	r2, r5
 8000f66:	4621      	mov	r1, r4
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fc75 	bl	8001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8000f6e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	f000 fdc3 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	f000 fc8d 	bl	800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 fdc6 	bl	8001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e00b      	b.n	8000fb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8000f9a:	69f9      	ldr	r1, [r7, #28]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f901 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdf8 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
      }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}

08000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000fba:	b5b0      	push	{r4, r5, r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fdfa 	bl	8001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fe02 	bl	8001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fe08 	bl	8001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f828 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82f 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000ffc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001002:	687c      	ldr	r4, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe22 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001010:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4629      	mov	r1, r5
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fe66 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f807 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x76>
 800102e:	68bb      	ldr	r3, [r7, #8]
    }
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe0e 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80010d0:	f7ff f926 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f01f fa9a 	bl	8020614 <_ZdlPv>
	    return;
 80010e0:	e005      	b.n	80010ee <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f001 fa62 	bl	80025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fd9e 	bl	8001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fdaf 	bl	8001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fd91 	bl	8001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fda2 	bl	8001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fcf1 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80011d6:	4604      	mov	r4, r0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fda4 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 80011de:	4602      	mov	r2, r0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4621      	mov	r1, r4
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fdaa 	bl	8001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1d1a      	adds	r2, r3, #4
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9f2 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>:
      key_comp() const
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr()
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fdb3 	bl	8001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fdb0 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fd8f 	bl	8001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>
 80012bc:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff ffd1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80012c4:	4604      	mov	r4, r0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffd8 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff ffdf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80012d4:	4603      	mov	r3, r0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	462b      	mov	r3, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fd8c 	bl	8001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80012e4:	697b      	ldr	r3, [r7, #20]
	}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}

080012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012ee:	b5b0      	push	{r4, r5, r7, lr}
 80012f0:	b08c      	sub	sp, #48	; 0x30
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fda9 	bl	8001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>
 8001304:	4603      	mov	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001308:	69bc      	ldr	r4, [r7, #24]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f000 fd0b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001310:	4603      	mov	r3, r0
 8001312:	429c      	cmp	r4, r3
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d032      	beq.n	8001386 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x98>
	  if (size() > 0
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 fda9 	bl	8001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>
 8001326:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001328:	2b00      	cmp	r3, #0
 800132a:	d015      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 800132c:	68bc      	ldr	r4, [r7, #8]
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 fdae 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001334:	4603      	mov	r3, r0
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fc8b 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800133e:	4603      	mov	r3, r0
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fcce 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6c>
 8001358:	2300      	movs	r3, #0
	  if (size() > 0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f000 fd94 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fd99 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001376:	e0e5      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fda8 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8001384:	e0de      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001386:	68bc      	ldr	r4, [r7, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681d      	ldr	r5, [r3, #0]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc60 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001394:	4603      	mov	r3, r0
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4629      	mov	r1, r5
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fca4 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x16e>
	  iterator __before = __pos;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80013ac:	69bc      	ldr	r4, [r7, #24]
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 fe1a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429c      	cmp	r4, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 fe0e 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013cc:	4604      	mov	r4, r0
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f000 fe0a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fe10 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80013e0:	e0b0      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80013e2:	68bc      	ldr	r4, [r7, #8]
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe22 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc2e 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fc71 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe7b 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	f107 0214 	add.w	r2, r7, #20
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fd37 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800143a:	e083      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800143c:	f107 0218 	add.w	r2, r7, #24
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fdda 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800144c:	e07a      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd3d 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800145a:	e073      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800145c:	68bc      	ldr	r4, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fbf7 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001466:	4603      	mov	r3, r0
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fc3a 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d059      	beq.n	8001530 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x242>
	  iterator __after = __pos;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001480:	69bc      	ldr	r4, [r7, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 fd04 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001488:	4603      	mov	r3, r0
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	429c      	cmp	r4, r3
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 fcf6 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fcfb 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80014b2:	e047      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80014b4:	68bc      	ldr	r4, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681d      	ldr	r5, [r3, #0]
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fdc8 	bl	8002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fbc3 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80014ce:	4603      	mov	r3, r0
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4629      	mov	r1, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fc07 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01f      	beq.n	8001522 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe11 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014fe:	f107 0218 	add.w	r2, r7, #24
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fccd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800150e:	e019      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fd70 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001520:	e010      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcd3 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800152e:	e009      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fd99 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fda4 	bl	80020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 800155a:	4602      	mov	r2, r0
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdab 	bl	80020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>
 8001568:	4603      	mov	r3, r0
      }
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001572:	b5b0      	push	{r4, r5, r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fbcd 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4293      	cmp	r3, r2
 8001592:	d012      	beq.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001594:	68fc      	ldr	r4, [r7, #12]
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7ff ffd8 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800159c:	4603      	mov	r3, r0
 800159e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb57 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fb9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4e>
 80015be:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80015c0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80015c6:	7df8      	ldrb	r0, [r7, #23]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	f01f f892 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f805 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80015e6:	693b      	ldr	r3, [r7, #16]
    }
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}

080015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7ff ffed 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001634:	4603      	mov	r3, r0
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	2004      	movs	r0, #4
 800163e:	f7fe fe77 	bl	8000330 <_ZnwjPv>
 8001642:	4603      	mov	r3, r0
 8001644:	601c      	str	r4, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffd7 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff ffdd 	bl	8001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8001682:	2101      	movs	r1, #1
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fd26 	bl	80020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff f9e3 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd59 	bl	8002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80016b2:	4603      	mov	r3, r0
 80016b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd67 	bl	800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>
 80016c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80016c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	18d5      	adds	r5, r2, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff9c 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ffb6 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff96 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd71 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80016fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4621      	mov	r1, r4
 8001702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001704:	f000 fd57 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001708:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3304      	adds	r3, #4
 800170e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff81 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800171a:	4603      	mov	r3, r0
 800171c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fd5c 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8001726:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd42 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001732:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001734:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8001740:	461a      	mov	r2, r3
 8001742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001744:	f7ff f9ef 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	441a      	add	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
    }
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	08020b70 	.word	0x08020b70

0800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff f985 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd43 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>
 800178a:	4603      	mov	r3, r0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff75 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 8001798:	4603      	mov	r3, r0
      }
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fa45 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80017b2:	4604      	mov	r4, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fd44 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fd4a 	bl	800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f9dc 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80017fa:	bf00      	nop
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr()
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3310      	adds	r3, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd53 	bl	80022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd50 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fd45 	bl	80022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800186c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff fcf9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001874:	4604      	mov	r4, r0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffe3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800187c:	4605      	mov	r5, r0
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7ff fd07 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001884:	4603      	mov	r3, r0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	462b      	mov	r3, r5
 800188a:	4622      	mov	r2, r4
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd42 	bl	8002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001894:	697b      	ldr	r3, [r7, #20]
	}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}

0800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800189e:	b5b0      	push	{r4, r5, r7, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd5f 	bl	8002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80018b8:	69bc      	ldr	r4, [r7, #24]
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 fcc1 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	429c      	cmp	r4, r3
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f000 fd5f 	bl	8002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 80018d6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 80018dc:	68bc      	ldr	r4, [r7, #8]
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 fd64 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd6b 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff faee 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8001908:	2300      	movs	r3, #0
	  if (size() > 0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 fd4a 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001918:	4602      	mov	r2, r0
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fac1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001926:	e0e5      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fd54 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001934:	e0de      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681d      	ldr	r5, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd40 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001944:	4603      	mov	r3, r0
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4629      	mov	r1, r5
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff fac4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d059      	beq.n	8001a0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800195c:	69bc      	ldr	r4, [r7, #24]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fdc6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001964:	4603      	mov	r3, r0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429c      	cmp	r4, r3
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 fdba 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800197c:	4604      	mov	r4, r0
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fdb6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4621      	mov	r1, r4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fb38 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001990:	e0b0      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001992:	68bc      	ldr	r4, [r7, #8]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fdb5 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd0e 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa91 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbd7 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	f107 0214 	add.w	r2, r7, #20
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa5f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80019ea:	e083      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 80019ec:	f107 0218 	add.w	r2, r7, #24
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb02 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80019fc:	e07a      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fce9 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001a0a:	e073      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001a0c:	68bc      	ldr	r4, [r7, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fcd7 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a16:	4603      	mov	r3, r0
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fa5a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d059      	beq.n	8001ae0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001a30:	69bc      	ldr	r4, [r7, #24]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 fcba 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fcac 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fa23 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001a62:	e047      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001a64:	68bc      	ldr	r4, [r7, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd5b 	bl	800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fca3 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fa27 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01f      	beq.n	8001ad2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb6d 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9f5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001abe:	e019      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa98 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001ad0:	e010      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fc7f 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001ade:	e009      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fac1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fd21 	bl	800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd28 	bl	8002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>
 8001b18:	4603      	mov	r3, r0
      }
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b22:	b5b0      	push	{r4, r5, r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fb83 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b44:	68fc      	ldr	r4, [r7, #12]
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff ffd8 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fc37 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b56:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9bb 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001b6e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b70:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001b76:	7df8      	ldrb	r0, [r7, #23]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	f01e fdba 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f805 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8001b96:	693b      	ldr	r3, [r7, #16]
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
      }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01d      	beq.n	8001c3e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c02:	68fc      	ldr	r4, [r7, #12]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fca1 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff f868 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f000 fca8 	bl	8002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8001c30:	60b8      	str	r0, [r7, #8]
 8001c32:	e7e3      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001c34:	68b8      	ldr	r0, [r7, #8]
 8001c36:	f000 fcaf 	bl	8002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8001c3a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001c3c:	e7de      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f811 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001c4a:	697b      	ldr	r3, [r7, #20]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fc75 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fc9a 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f7ff fac5 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fc9c 	bl	80025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>
      }
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fc85 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc96 	bl	80025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fca9 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd8c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f000 fcab 	bl	8002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fc94 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2201      	movs	r2, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fca5 	bl	8002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d3e:	b590      	push	{r4, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d52:	68fc      	ldr	r4, [r7, #12]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff fbf9 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ffc0 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f9d2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d80:	60b8      	str	r0, [r7, #8]
 8001d82:	e7e3      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f7ff f9c1 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d8c:	e7de      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc2b 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001d9a:	697b      	ldr	r3, [r7, #20]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fc7a 	bl	80026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbf3 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fc65 	bl	80026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2038      	movs	r0, #56	; 0x38
 8001e12:	f7fe fa8d 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fbd9 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f7ff fa04 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001e24:	4605      	mov	r5, r0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fa1d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff fa24 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e34:	4680      	mov	r8, r0
 8001e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e38:	f7ff fa2b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4643      	mov	r3, r8
 8001e42:	4632      	mov	r2, r6
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 fc95 	bl	8002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbc1 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fc76 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fe69 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff1b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001f04:	68bc      	ldr	r4, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb1d 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001f12:	4603      	mov	r3, r0
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe fee5 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x66>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8f7 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001f36:	4603      	mov	r3, r0
 8001f38:	e004      	b.n	8001f44 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x70>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8e5 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001f42:	4603      	mov	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001f46:	e7d8      	b.n	8001efa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb4d 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01d      	beq.n	8001f9a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f000 fc30 	bl	80027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	f107 021c 	add.w	r2, r7, #28
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fe8a 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001f7e:	f107 0214 	add.w	r2, r7, #20
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fc2c 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001f8e:	e027      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f84c 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f9a:	68bc      	ldr	r4, [r7, #8]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe58 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe fe9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fc0e 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001fca:	e009      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	f107 0220 	add.w	r2, r7, #32
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f84b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f000 fbce 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002012:	4603      	mov	r3, r0
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002020:	4603      	mov	r3, r0
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f01e fb56 	bl	80206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
	return *this;
 800204a:	687b      	ldr	r3, [r7, #4]
      }
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f01e fb43 	bl	80206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
	return *this;
 800206c:	687b      	ldr	r3, [r7, #4]
      }
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fb93 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr() const
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3310      	adds	r3, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fbb2 	bl	8002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fba4 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 80020e8:	4604      	mov	r4, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fcdb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	1ae2      	subs	r2, r4, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf34      	ite	cc
 80020fa:	2301      	movcc	r3, #1
 80020fc:	2300      	movcs	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f01e fb53 	bl	80207b0 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fccb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002110:	4604      	mov	r4, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7fe fcc7 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002118:	4603      	mov	r3, r0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb93 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800212c:	4603      	mov	r3, r0
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4423      	add	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe fcb6 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4293      	cmp	r3, r2
 8002140:	d306      	bcc.n	8002150 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb74 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4293      	cmp	r3, r2
 800214e:	d904      	bls.n	800215a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x84>
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb6d 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x86>
 800215a:	697b      	ldr	r3, [r7, #20]
      }
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fa54 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8002174:	4603      	mov	r3, r0
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7fe fa4f 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800217e:	4603      	mov	r3, r0
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ae3      	subs	r3, r4, r3
 8002184:	109b      	asrs	r3, r3, #2
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x1e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb69 	bl	800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x20>
 80021ac:	2300      	movs	r3, #0
      }
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80021c4:	f88d 4000 	strb.w	r4, [sp]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb73 	bl	80028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80021d4:	4603      	mov	r3, r0
      }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}

080021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb75 	bl	80028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>
    }
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	425b      	negs	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff25 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800226e:	68fc      	ldr	r4, [r7, #12]
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f7ff fc43 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8002276:	4603      	mov	r3, r0
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4620      	mov	r0, r4
 8002282:	f7fe fe2a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7fe ff78 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800229c:	60b8      	str	r0, [r7, #8]
 800229e:	e7e3      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f7fe ff67 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80022a6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80022a8:	e7de      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fc75 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80022b6:	697b      	ldr	r3, [r7, #20]
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb28 	bl	800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f99b 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002304:	4603      	mov	r3, r0
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fb13 	bl	8002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4619      	mov	r1, r3
 800232c:	2018      	movs	r0, #24
 800232e:	f7fd ffff 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f981 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002338:	4604      	mov	r4, r0
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f7ff fa64 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8002340:	4605      	mov	r5, r0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe ff8f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002348:	4606      	mov	r6, r0
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fa79 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002350:	4680      	mov	r8, r0
 8002352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002354:	f7fe ff9d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002358:	4603      	mov	r3, r0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4643      	mov	r3, r8
 800235e:	4632      	mov	r2, r6
 8002360:	4629      	mov	r1, r5
 8002362:	4620      	mov	r0, r4
 8002364:	f000 fb43 	bl	80029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc0b 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3310      	adds	r3, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fb95 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f7fe fc27 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f7ff ff25 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800240c:	68bc      	ldr	r4, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb71 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4629      	mov	r1, r5
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fd59 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800242e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fea7 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800243e:	4603      	mov	r3, r0
 8002440:	e004      	b.n	800244c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe95 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800244a:	4603      	mov	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800244e:	e7d8      	b.n	8002402 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fba1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f000 fadd 	bl	8002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800246c:	4603      	mov	r3, r0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	f107 021c 	add.w	r2, r7, #28
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fcfe 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8002486:	f107 0214 	add.w	r2, r7, #20
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4619      	mov	r1, r3
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fad9 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 8002496:	e027      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f833 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80024a2:	68bc      	ldr	r4, [r7, #8]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff8c 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80024ac:	4603      	mov	r3, r0
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7fe fd0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80024c2:	f107 0214 	add.w	r2, r7, #20
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fabb 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 80024d2:	e009      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	f107 0220 	add.w	r2, r7, #32
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fdc7 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}

080024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	330c      	adds	r3, #12
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f01e f8eb 	bl	80206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
	return *this;
 8002520:	687b      	ldr	r3, [r7, #4]
      }
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f01e f8d8 	bl	80206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
	return *this;
 8002542:	687b      	ldr	r3, [r7, #4]
      }
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr() const
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa8e 	bl	8002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>:
      operator()(const _Pair& __x) const
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4619      	mov	r1, r3
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f01e f828 	bl	8020618 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f000 fa4f 	bl	8002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>
	}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002614:	f7fd fe84 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800261e:	69b8      	ldr	r0, [r7, #24]
 8002620:	f01d fff8 	bl	8020614 <_ZdlPv>
	    return;
 8002624:	e005      	b.n	8002632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f000 fb70 	bl	8002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f000 fa23 	bl	8002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>
	}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002680:	f7fd fe4e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f01d ffc2 	bl	8020614 <_ZdlPv>
	    return;
 8002690:	e005      	b.n	800269e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	69f8      	ldr	r0, [r7, #28]
 8002698:	f000 fb4c 	bl	8002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() noexcept
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80026ce:	f7fd fe27 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f01d ff9a 	bl	802061c <_Znwj>
 80026e8:	4603      	mov	r3, r0
 80026ea:	e006      	b.n	80026fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb31 	bl	8002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>
 80026f6:	4603      	mov	r3, r0
 80026f8:	bf00      	nop
      { return __a.allocate(__n); }
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9d1 	bl	8002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002722:	b5b0      	push	{r4, r5, r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fd98 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fda0 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800273c:	4602      	mov	r2, r0
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffdc 	bl	8002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>
 800274a:	f107 0418 	add.w	r4, r7, #24
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f7fe fd9f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4619      	mov	r1, r3
 8002758:	2028      	movs	r0, #40	; 0x28
 800275a:	f7fd fde9 	bl	8000330 <_ZnwjPv>
 800275e:	4605      	mov	r5, r0
 8002760:	7f3b      	ldrb	r3, [r7, #28]
 8002762:	4622      	mov	r2, r4
 8002764:	7d39      	ldrb	r1, [r7, #20]
 8002766:	4628      	mov	r0, r5
 8002768:	f000 f9dc 	bl	8002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 800276c:	462b      	mov	r3, r5
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}

08002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002776:	b5b0      	push	{r4, r5, r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fd6e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800278a:	4604      	mov	r4, r0
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe fd75 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002792:	4605      	mov	r5, r0
 8002794:	6a38      	ldr	r0, [r7, #32]
 8002796:	f7fe fd7c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800279a:	4603      	mov	r3, r0
 800279c:	462a      	mov	r2, r5
 800279e:	4621      	mov	r1, r4
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff ffbe 	bl	8002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}

080027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff0a 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f000 f9aa 	bl	8002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>
 80027f8:	4603      	mov	r3, r0
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffd4 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002806:	4603      	mov	r3, r0
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f99e 	bl	8002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8002826:	4603      	mov	r3, r0
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f9c2 	bl	8002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9a4 	bl	8002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d201      	bcs.n	800286c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	e000      	b.n	800286e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800286c:	687b      	ldr	r3, [r7, #4]
    }
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800288c:	f7fd fd48 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f01d febe 	bl	802061c <_Znwj>
 80028a0:	4603      	mov	r3, r0
 80028a2:	e006      	b.n	80028b2 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fab0 	bl	8002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	bf00      	nop
      { return __a.allocate(__n); }
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f983 	bl	8002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80028d4:	4603      	mov	r3, r0
      }
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZSt10destroy_atIP8AnalogInEvPT_>:
    destroy_at(_Tp* __location)
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80028fc:	f7fd fd10 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f983 	bl	8002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>
 800290e:	e003      	b.n	8002918 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f996 	bl	8002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>
    }
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() noexcept
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8002946:	f7fd fceb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4618      	mov	r0, r3
 800295c:	f01d fe5e 	bl	802061c <_Znwj>
 8002960:	4603      	mov	r3, r0
 8002962:	e006      	b.n	8002972 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 faae 	bl	8002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>
 800296e:	4603      	mov	r3, r0
 8002970:	bf00      	nop
      { return __a.allocate(__n); }
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>:
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f965 	bl	8002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800299a:	b5b0      	push	{r4, r5, r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f7fe fc5c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe ff47 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ffdc 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80029c2:	f107 0418 	add.w	r4, r7, #24
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f7fe fc63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4619      	mov	r1, r3
 80029d0:	2008      	movs	r0, #8
 80029d2:	f7fd fcad 	bl	8000330 <_ZnwjPv>
 80029d6:	4605      	mov	r5, r0
 80029d8:	7f3b      	ldrb	r3, [r7, #28]
 80029da:	4622      	mov	r2, r4
 80029dc:	7d39      	ldrb	r1, [r7, #20]
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f96c 	bl	8002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80029e4:	462b      	mov	r3, r5
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}

080029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80029ee:	b5b0      	push	{r4, r5, r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe fc32 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a02:	4604      	mov	r4, r0
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7fe ff1c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f7fe fc40 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	462a      	mov	r2, r5
 8002a16:	4621      	mov	r1, r4
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7ff ffbe 	bl	800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}

08002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8b1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002a54:	68b8      	ldr	r0, [r7, #8]
 8002a56:	f000 f945 	bl	8002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fea3 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f939 	bl	8002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>:
    destroy_at(_Tp* __location)
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
    }
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>:
    destroy_at(_Tp* __location)
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    }
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002ac4:	687c      	ldr	r4, [r7, #4]
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 f968 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f971 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff f96f 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002af6:	68b8      	ldr	r0, [r7, #8]
 8002af8:	f000 f968 	bl	8002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f959 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002b04:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f01d fed5 	bl	80208c4 <memset>
      { }
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	7239      	strb	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002b32:	463a      	mov	r2, r7
 8002b34:	f88d 4000 	strb.w	r4, [sp]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ffd3 	bl	8002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}

08002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() const noexcept
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002b80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002b98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002b9c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffea 	bl	8002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f917 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	681b      	ldr	r3, [r3, #0]
      }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002bda:	b5b0      	push	{r4, r5, r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f92f 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f92b 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f927 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f92c 	bl	8002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002c0a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00a      	beq.n	8002c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f939 	bl	8002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f940 	bl	8002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>
	  for (; __first != __last; ++__first)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e7f0      	b.n	8002c1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0xa>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002c64:	687c      	ldr	r4, [r7, #4]
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f000 f951 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f95a 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fb2d 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f000 f951 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f942 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ca4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
      { }
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	7239      	strb	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002cca:	463a      	mov	r2, r7
 8002ccc:	f88d 4000 	strb.w	r4, [sp]
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ffd7 	bl	8002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}

08002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() const noexcept
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4619      	mov	r1, r3
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f01d fc75 	bl	8020618 <_ZdlPvj>
      }
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68b8      	ldr	r0, [r7, #8]
 8002d4e:	f01d fc63 	bl	8020618 <_ZdlPvj>
      }
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8f7 	bl	8002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf8c      	ite	hi
 8002d72:	2301      	movhi	r3, #1
 8002d74:	2300      	movls	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002d7c:	f01d fd15 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01d fc46 	bl	802061c <_Znwj>
 8002d90:	4603      	mov	r3, r0
 8002d92:	bf00      	nop
      }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8e4 	bl	8002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8d8 	bl	8002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d201      	bcs.n	8002e00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	e000      	b.n	8002e02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002e00:	687b      	ldr	r3, [r7, #4]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf8c      	ite	hi
 8002e28:	2301      	movhi	r3, #1
 8002e2a:	2300      	movls	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002e32:	f01d fcba 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f01d fbee 	bl	802061c <_Znwj>
 8002e40:	4603      	mov	r3, r0
 8002e42:	bf00      	nop
      }
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	109b      	asrs	r3, r3, #2
 8002e78:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd06      	ble.n	8002e8e <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f01d fd01 	bl	8020890 <memmove>
      return __result + __count;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>:
    _Destroy(_Tp* __pointer)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd0e 	bl	80028de <_ZSt10destroy_atIP8AnalogInEvPT_>
    }
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f870 	bl	8002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf8c      	ite	hi
 8002ee4:	2301      	movhi	r3, #1
 8002ee6:	2300      	movls	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002eee:	f01d fc5c 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f01d fb8d 	bl	802061c <_Znwj>
 8002f02:	4603      	mov	r3, r0
 8002f04:	bf00      	nop
      }
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f85d 	bl	8002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f851 	bl	8002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	02492492 	.word	0x02492492

08002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff01 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv+0x18>)
      }
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	05555555 	.word	0x05555555

08002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff88 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fc1f 	bl	8000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>:
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fbdd 	bl	80007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_Z41__static_initialization_and_destruction_0ii>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10d      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003056:	480f      	ldr	r0, [pc, #60]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003058:	f7fd f9b4 	bl	80003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800305c:	480e      	ldr	r0, [pc, #56]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800305e:	f7fd f9d7 	bl	8000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003064:	f7fd f9fa 	bl	800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800307a:	f7ff ffc5 	bl	8003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003080:	f7ff ffcf 	bl	8003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003086:	f000 f80b 	bl	80030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24000098 	.word	0x24000098
 8003098:	240000a4 	.word	0x240000a4
 800309c:	240000bc 	.word	0x240000bc

080030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f893 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80030b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030ba:	461a      	mov	r2, r3
 80030bc:	4629      	mov	r1, r5
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff f898 	bl	80021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>
      }
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fb57 	bl	800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}

080030d6 <_GLOBAL__sub_I__ZN8AnalogIn14all_analog_insE>:
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
 80030da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff ffac 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_GLOBAL__sub_D__ZN8AnalogIn14all_analog_insE>:
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff ffa4 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f980 	bl	8003404 <_ZNSaIP9AnalogOutED1Ev>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f963 	bl	80033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>:
      vector() = default;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ffeb 	bl	800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f993 	bl	8003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f971 	bl	800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ffeb 	bl	800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/AnalogOut.hpp"

vector<AnalogOut*> AnalogOut::all_analog_outs;
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;

AnalogOut::AnalogOut(float max_voltage,TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6178      	str	r0, [r7, #20]
 8003198:	ed87 0a04 	vstr	s0, [r7, #16]
 800319c:	60f9      	str	r1, [r7, #12]
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
		: timer(timer), channel(channel), max_voltage(max_voltage) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
	AnalogOut::all_analog_outs.push_back(this);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x5c>)
 80031c8:	f000 f975 	bl	80034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>
	AnalogOut::pin_to_analog_out[pin] = this;
 80031cc:	697c      	ldr	r4, [r7, #20]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x60>)
 80031d4:	f000 f980 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80031d8:	4603      	mov	r3, r0
 80031da:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_OUTPUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2205      	movs	r2, #5
 80031e0:	719a      	strb	r2, [r3, #6]
}
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3724      	adds	r7, #36	; 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	240000d4 	.word	0x240000d4
 80031f0:	240000e0 	.word	0x240000e0

080031f4 <_ZN9AnalogOut11set_voltageEf>:

void AnalogOut::set_voltage(float current_voltage){
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	ed87 0a00 	vstr	s0, [r7]
	uint32_t arr = (uint32_t) (current_voltage / max_voltage * timer->Instance->ARR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a04 	vldr	s15, [r3, #16]
 8003206:	edd7 6a00 	vldr	s13, [r7]
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	60fb      	str	r3, [r7, #12]

	switch(channel){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b14      	cmp	r3, #20
 8003232:	d851      	bhi.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <_ZN9AnalogOut11set_voltageEf+0x48>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003291 	.word	0x08003291
 8003240:	080032d9 	.word	0x080032d9
 8003244:	080032d9 	.word	0x080032d9
 8003248:	080032d9 	.word	0x080032d9
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080032d9 	.word	0x080032d9
 8003254:	080032d9 	.word	0x080032d9
 8003258:	080032d9 	.word	0x080032d9
 800325c:	080032a9 	.word	0x080032a9
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032cd 	.word	0x080032cd
		case(TIM_CHANNEL_1):
				timer->Instance->CCR1 = arr; break;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
 800329a:	e01d      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_2):
				timer->Instance->CCR2 = arr; break;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	e017      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_3):
				timer->Instance->CCR3 = arr; break;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b2:	e011      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_4):
				timer->Instance->CCR4 = arr; break;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
 80032be:	e00b      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_5):
				timer->Instance->CCR5 = arr; break;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ca:	e005      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_6):
				timer->Instance->CCR6 = arr; break;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d6:	bf00      	nop
	}
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN9AnalogOut5startEv>:

void AnalogOut::start(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f01b faa4 	bl	801e844 <HAL_TIM_PWM_Start>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800331a:	b590      	push	{r4, r7, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffed 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800332a:	4603      	mov	r3, r0
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ffe8 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003334:	4603      	mov	r3, r0
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429c      	cmp	r4, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}

0800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
	return *this;
 800335c:	687b      	ldr	r3, [r7, #4]
      }
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN9AnalogOut21start_all_analog_outsEv>:

void AnalogOut::stop(){
	HAL_TIM_PWM_Stop(timer, channel);
}

void AnalogOut::start_all_analog_outs(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
	for(auto analog_out: all_analog_outs)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_ZN9AnalogOut21start_all_analog_outsEv+0x5c>)
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f900 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 8003394:	4603      	mov	r3, r0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f90b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	463a      	mov	r2, r7
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ffb6 	bl	800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <_ZN9AnalogOut21start_all_analog_outsEv+0x54>
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffd4 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
		analog_out->start();
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff ff8b 	bl	80032e4 <_ZN9AnalogOut5startEv>
	for(auto analog_out: all_analog_outs)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffba 	bl	800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>
 80033d6:	e7e4      	b.n	80033a2 <_ZN9AnalogOut21start_all_analog_outsEv+0x1e>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	240000d4 	.word	0x240000d4

080033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8f2 	bl	80035d6 <_ZNSaIP9AnalogOutEC1Ev>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8fa 	bl	80035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZNSaIP9AnalogOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003432:	461a      	mov	r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ee 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5a 	bl	80030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8f1 	bl	800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fbc3 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fc ff6e 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>:
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8fc 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8d8 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe4b 	bl	8003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f000 f8f2 	bl	80036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8f8 	bl	80036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91d 	bl	8003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80034ea:	4603      	mov	r3, r0
 80034ec:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f927 	bl	8003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f107 020c 	add.w	r2, r7, #12
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f92a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f938 	bl	8003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f93e 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003522:	4603      	mov	r3, r0
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4621      	mov	r1, r4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fcd4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003542:	687c      	ldr	r4, [r7, #4]
 8003544:	f107 0208 	add.w	r2, r7, #8
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f933 	bl	80037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fcd0 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003560:	f107 0218 	add.w	r2, r7, #24
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	4620      	mov	r0, r4
 8003572:	f000 f932 	bl	80037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8003576:	4603      	mov	r3, r0
 8003578:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f90d 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003584:	4603      	mov	r3, r0
 8003586:	3304      	adds	r3, #4
      }
 8003588:	4618      	mov	r0, r3
 800358a:	3724      	adds	r7, #36	; 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	08020d70 	.word	0x08020d70

08003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f956 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f945 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSaIP9AnalogOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f949 	bl	8003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
	{ }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	if (__p)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f92c 	bl	800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>
      }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f940 	bl	80038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f000 f93b 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fff0 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f000 f93f 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800367a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f946 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003688:	e7e9      	b.n	800365e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d011      	beq.n	80036fa <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036d6:	687c      	ldr	r4, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685d      	ldr	r5, [r3, #4]
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 f928 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4629      	mov	r1, r5
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f942 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e00c      	b.n	8003714 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff5a 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003700:	4604      	mov	r4, r0
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f000 f915 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4621      	mov	r1, r4
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f942 	bl	8003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9bb 	bl	8003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>
 800371a:	4603      	mov	r3, r0
      }
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}

08003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9c7 	bl	8003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9d1 	bl	8003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8003752:	4603      	mov	r3, r0
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f9c1 	bl	8003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8003794:	bf00      	nop
 8003796:	4620      	mov	r0, r4
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9be 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037da:	b5b0      	push	{r4, r5, r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80037ee:	4604      	mov	r4, r0
 80037f0:	6838      	ldr	r0, [r7, #0]
 80037f2:	f7fe f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80037f6:	4605      	mov	r5, r0
 80037f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fa:	f7fd fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037fe:	4603      	mov	r3, r0
 8003800:	462a      	mov	r2, r5
 8003802:	4621      	mov	r1, r4
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f99f 	bl	8003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800380a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f000 faed 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003812:	4603      	mov	r3, r0
 8003814:	f107 0010 	add.w	r0, r7, #16
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	f000 f9b7 	bl	8003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8003826:	6939      	ldr	r1, [r7, #16]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 faf0 	bl	8003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8003832:	4603      	mov	r3, r0
 8003834:	e00b      	b.n	800384e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f869 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb22 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 800384c:	69bb      	ldr	r3, [r7, #24]
      }
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}

08003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80038a4:	f7fc fd3c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f01c feb0 	bl	8020614 <_ZdlPv>
	    return;
 80038b4:	e005      	b.n	80038c2 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69f8      	ldr	r0, [r7, #28]
 80038bc:	f000 fd64 	bl	8004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fac6 	bl	8003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fad7 	bl	8003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f7ff ffed 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003958:	4603      	mov	r3, r0
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	2004      	movs	r0, #4
 8003962:	f7fc fce5 	bl	8000330 <_ZnwjPv>
 8003966:	4603      	mov	r3, r0
 8003968:	601c      	str	r4, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffd7 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003984:	4603      	mov	r3, r0
 8003986:	4619      	mov	r1, r3
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff ffdd 	bl	8003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faa7 	bl	8003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>
 80039ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fde9 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	f107 0214 	add.w	r2, r7, #20
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fada 	bl	8003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80039d6:	4603      	mov	r3, r0
 80039d8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fae8 	bl	8003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>
 80039e4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80039ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff9c 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4629      	mov	r1, r5
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ffb6 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc78 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a14:	4603      	mov	r3, r0
 8003a16:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf2 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	4621      	mov	r1, r4
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f000 fad8 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a2c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3304      	adds	r3, #4
 8003a32:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fc63 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fadd 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 fac3 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a56:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003a58:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003a64:	461a      	mov	r2, r3
 8003a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a68:	f7ff fdd5 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
    }
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08020b8c 	.word	0x08020b8c

08003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd8b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fac4 	bl	8004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fc57 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 8003abc:	4603      	mov	r3, r0
      }
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fdde 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fac5 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 facb 	bl	8004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9c2 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003b1e:	bf00      	nop
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr()
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fad4 	bl	80040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fad1 	bl	80040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8003b5c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7fd fb81 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b64:	4604      	mov	r4, r0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fe6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7fd fb8f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b74:	4603      	mov	r3, r0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	462b      	mov	r3, r5
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 face 	bl	8004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8003b84:	697b      	ldr	r3, [r7, #20]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}

08003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b08c      	sub	sp, #48	; 0x30
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faeb 	bl	800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ba8:	69bc      	ldr	r4, [r7, #24]
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fa5c 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8003bc0:	68b8      	ldr	r0, [r7, #8]
 8003bc2:	f000 faeb 	bl	800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8003bc6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bcc:	68bc      	ldr	r4, [r7, #8]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	f000 faf0 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 faf7 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bde:	4603      	mov	r3, r0
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8003bf8:	2300      	movs	r3, #0
	  if (size() > 0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 fad6 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fe f949 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003c16:	e0e5      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fae0 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003c24:	e0de      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003c26:	68bc      	ldr	r4, [r7, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681d      	ldr	r5, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 facc 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c34:	4603      	mov	r3, r0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f94c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d059      	beq.n	8003cfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003c4c:	69bc      	ldr	r4, [r7, #24]
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f000 fb52 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f000 fb46 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f000 fb42 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fe f9c0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003c80:	e0b0      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003c82:	68bc      	ldr	r4, [r7, #8]
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb41 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa9a 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7fd f919 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe15 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	f107 0214 	add.w	r2, r7, #20
 8003cce:	f107 0320 	add.w	r3, r7, #32
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fe f8e7 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003cda:	e083      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8003cdc:	f107 0218 	add.w	r2, r7, #24
 8003ce0:	f107 0318 	add.w	r3, r7, #24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe f98a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cec:	e07a      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa75 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003cfa:	e073      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003cfc:	68bc      	ldr	r4, [r7, #8]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa63 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d06:	4603      	mov	r3, r0
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd f8e2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d059      	beq.n	8003dd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003d20:	69bc      	ldr	r4, [r7, #24]
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 fa46 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f000 fa38 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe f8ab 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003d52:	e047      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003d54:	68bc      	ldr	r4, [r7, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fae7 	bl	8004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa2f 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4629      	mov	r1, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fd f8af 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fdab 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	f107 0218 	add.w	r2, r7, #24
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe f87d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003dae:	e019      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fe f920 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003dc0:	e010      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa0b 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003dce:	e009      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7fe f949 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}

08003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 faad 	bl	8004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fab4 	bl	8004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>
 8003e08:	4603      	mov	r3, r0
      }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e12:	b5b0      	push	{r4, r5, r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d119      	bne.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f91e 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d012      	beq.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e34:	68fc      	ldr	r4, [r7, #12]
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7ff ffd8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9c3 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e46:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd f843 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8003e5e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e60:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003e66:	7df8      	ldrb	r0, [r7, #23]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	f01c fc42 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f805 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003e86:	693b      	ldr	r3, [r7, #16]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003eae:	b590      	push	{r4, r7, lr}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa74 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f7ff fe33 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fa76 	bl	80043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa5f 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2201      	movs	r2, #1
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa70 	bl	80043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa82 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa8f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	1ae2      	subs	r2, r4, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf34      	ite	cc
 8003f20:	2301      	movcc	r3, #1
 8003f22:	2300      	movcs	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f01c fc40 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa7f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa7b 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	f107 0208 	add.w	r2, r7, #8
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc80 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8003f52:	4603      	mov	r3, r0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4423      	add	r3, r4
 8003f58:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa6a 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d306      	bcc.n	8003f76 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa52 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d904      	bls.n	8003f80 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa4b 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e000      	b.n	8003f82 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003f80:	697b      	ldr	r3, [r7, #20]
      }
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}

08003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff f9b5 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	681c      	ldr	r4, [r3, #0]
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f7ff f9b0 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1ae3      	subs	r3, r4, r3
 8003faa:	109b      	asrs	r3, r3, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd90      	pop	{r4, r7, pc}

08003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x1e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa43 	bl	8004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e000      	b.n	8003fd4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x20>
 8003fd2:	2300      	movs	r3, #0
      }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003fea:	f88d 4000 	strb.w	r4, [sp]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fa4d 	bl	8004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8003ffa:	4603      	mov	r3, r0
      }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}

08004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fa4f 	bl	80044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	425b      	negs	r3, r3
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	f107 020c 	add.w	r2, r7, #12
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fbfc 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004094:	68fc      	ldr	r4, [r7, #12]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7ff fea8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800409c:	4603      	mov	r3, r0
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc ff17 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f7ff fc1b 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80040c2:	60b8      	str	r0, [r7, #8]
 80040c4:	e7e3      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7ff fc0a 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80040cc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80040ce:	e7de      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff feda 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80040dc:	697b      	ldr	r3, [r7, #20]
    }
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}

080040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa02 	bl	80044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f94d 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800410c:	4603      	mov	r3, r0
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f9fc 	bl	800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>
 8004116:	4603      	mov	r3, r0
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	2018      	movs	r0, #24
 8004136:	f7fc f8fb 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f933 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8004140:	4604      	mov	r4, r0
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7ff fcf2 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8004148:	4605      	mov	r5, r0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f88b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004150:	4606      	mov	r6, r0
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f7fd fb75 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004158:	4680      	mov	r8, r0
 800415a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415c:	f7fd f899 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004160:	4603      	mov	r3, r0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4643      	mov	r3, r8
 8004166:	4632      	mov	r2, r6
 8004168:	4629      	mov	r1, r5
 800416a:	4620      	mov	r0, r4
 800416c:	f000 fa1c 	bl	80045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fe7f 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3310      	adds	r3, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe09 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f7ff fa4e 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f7ff ff34 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004214:	68bc      	ldr	r4, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fde5 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8004222:	4603      	mov	r3, r0
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f7fc fe55 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fb59 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004246:	4603      	mov	r3, r0
 8004248:	e004      	b.n	8004254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb47 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004252:	4603      	mov	r3, r0
 8004254:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004256:	e7d8      	b.n	800420a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe15 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 f9b6 	bl	80045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8004274:	4603      	mov	r3, r0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	f107 021c 	add.w	r2, r7, #28
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fa6a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800428e:	f107 0214 	add.w	r2, r7, #20
 8004292:	f107 0318 	add.w	r3, r7, #24
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9b2 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 800429e:	e027      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f833 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80042aa:	68bc      	ldr	r4, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff8c 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042b4:	4603      	mov	r3, r0
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fe0b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80042ca:	f107 0214 	add.w	r2, r7, #20
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f994 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 80042da:	e009      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	f107 0220 	add.w	r2, r7, #32
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7fd fec3 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}

080042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	330c      	adds	r3, #12
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f01c f9e7 	bl	80206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
	return *this;
 8004328:	687b      	ldr	r3, [r7, #4]
      }
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f01c f9d4 	bl	80206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	return *this;
 800434a:	687b      	ldr	r3, [r7, #4]
      }
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr() const
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f967 	bl	8004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4619      	mov	r1, r3
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f01c f93c 	bl	8020618 <_ZdlPvj>
      }
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f000 f940 	bl	800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>
	}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80043ec:	f7fb ff98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 80043f6:	69b8      	ldr	r0, [r7, #24]
 80043f8:	f01c f90c 	bl	8020614 <_ZdlPv>
	    return;
 80043fc:	e005      	b.n	800440a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69f8      	ldr	r0, [r7, #28]
 8004404:	f000 f9e1 	bl	80047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f945 	bl	80046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f927 	bl	8004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	109b      	asrs	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004466:	f7fb ff5b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f01c f8d1 	bl	802061c <_Znwj>
 800447a:	4603      	mov	r3, r0
 800447c:	e006      	b.n	800448c <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9b3 	bl	80047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>
 8004488:	4603      	mov	r3, r0
 800448a:	bf00      	nop
      { return __a.allocate(__n); }
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f90a 	bl	80046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044ae:	4603      	mov	r3, r0
      }
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>:
    destroy_at(_Tp* __location)
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    }
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80044d6:	f7fb ff23 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f90a 	bl	80046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>
 80044e8:	e003      	b.n	80044f2 <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x26>
	__destroy(__first, __last);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91d 	bl	800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>
    }
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() noexcept
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004520:	f7fb fefe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f01c f871 	bl	802061c <_Znwj>
 800453a:	4603      	mov	r3, r0
 800453c:	e006      	b.n	800454c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9b1 	bl	80048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>
 8004548:	4603      	mov	r3, r0
 800454a:	bf00      	nop
      { return __a.allocate(__n); }
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7fc fe7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fd f96a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800456e:	4602      	mov	r2, r0
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f9ff 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800457c:	f107 0418 	add.w	r4, r7, #24
 8004580:	6838      	ldr	r0, [r7, #0]
 8004582:	f7fc fe86 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4619      	mov	r1, r3
 800458a:	2008      	movs	r0, #8
 800458c:	f7fb fed0 	bl	8000330 <_ZnwjPv>
 8004590:	4605      	mov	r5, r0
 8004592:	7f3b      	ldrb	r3, [r7, #28]
 8004594:	4622      	mov	r2, r4
 8004596:	7d39      	ldrb	r1, [r7, #20]
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f8ec 	bl	8004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800459e:	462b      	mov	r3, r5
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}

080045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fe55 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80045bc:	4604      	mov	r4, r0
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fd f93f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80045c4:	4605      	mov	r5, r0
 80045c6:	6a38      	ldr	r0, [r7, #32]
 80045c8:	f7fc fe63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80045cc:	4603      	mov	r3, r0
 80045ce:	462a      	mov	r2, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7ff ffbe 	bl	8004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}

080045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc4c 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f000 f8c5 	bl	800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8004614:	4603      	mov	r3, r0
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe f8c6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004622:	4603      	mov	r3, r0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8b9 	bl	80047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>:
    destroy_at(_Tp* __location)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    }
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8004668:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004680:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8004684:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffea 	bl	8004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>
 800468c:	4603      	mov	r3, r0
 800468e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004690:	f107 0208 	add.w	r2, r7, #8
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fba3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80046a0:	4603      	mov	r3, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
      }
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80046c2:	b5b0      	push	{r4, r5, r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046d6:	4604      	mov	r4, r0
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f8a7 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046de:	4605      	mov	r5, r0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8a3 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4629      	mov	r1, r5
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f8a8 	bl	8004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80046f2:	4603      	mov	r3, r0
    }
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}

080046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d00a      	beq.n	8004724 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8b5 	bl	800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8bc 	bl	8004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>
	  for (; __first != __last; ++__first)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e7f0      	b.n	8004706 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0xa>
	}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f7fe fbf4 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004756:	4603      	mov	r3, r0
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fbe5 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800475e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
      { }
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	7239      	strb	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004784:	463a      	mov	r2, r7
 8004786:	f88d 4000 	strb.w	r4, [sp]
 800478a:	462b      	mov	r3, r5
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ffd7 	bl	8004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}

0800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4619      	mov	r1, r3
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f01b ff18 	bl	8020618 <_ZdlPvj>
      }
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f877 	bl	80048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4293      	cmp	r3, r2
 8004806:	bf8c      	ite	hi
 8004808:	2301      	movhi	r3, #1
 800480a:	2300      	movls	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004812:	f01b ffca 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f01b fefe 	bl	802061c <_Znwj>
 8004820:	4603      	mov	r3, r0
 8004822:	bf00      	nop
      }
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>:
    __niter_base(_Iterator __it)
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	109b      	asrs	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd06      	ble.n	800486e <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f01c f811 	bl	8020890 <memmove>
      return __result + __count;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe0b 	bl	80044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>
    }
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f826 	bl	8004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf8c      	ite	hi
 80048c4:	2301      	movhi	r3, #1
 80048c6:	2300      	movls	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048ce:	f01b ff6c 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4618      	mov	r0, r3
 80048de:	f01b fe9d 	bl	802061c <_Znwj>
 80048e2:	4603      	mov	r3, r0
 80048e4:	bf00      	nop
      }
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80048f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv+0x18>)
      }
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	05555555 	.word	0x05555555

08004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fdac 	bl	800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <_Z41__static_initialization_and_destruction_0ii>:
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10a      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004956:	4293      	cmp	r3, r2
 8004958:	d105      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800495c:	f7fe fbe4 	bl	8003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;
 8004960:	480b      	ldr	r0, [pc, #44]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004962:	f7fe fc07 	bl	8003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004972:	4293      	cmp	r3, r2
 8004974:	d105      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004976:	4806      	ldr	r0, [pc, #24]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004978:	f7ff ffd4 	bl	8004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800497e:	f000 f809 	bl	8004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	240000d4 	.word	0x240000d4
 8004990:	240000e0 	.word	0x240000e0

08004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb2c 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80049ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ae:	461a      	mov	r2, r3
 80049b0:	4629      	mov	r1, r5
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fb31 	bl	800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>
      }
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd2d 	bl	800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <_GLOBAL__sub_I__ZN9AnalogOut15all_analog_outsE>:
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7ff ffb4 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049d8:	bd80      	pop	{r7, pc}

080049da <_GLOBAL__sub_D__ZN9AnalogOut15all_analog_outsE>:
 80049da:	b580      	push	{r7, lr}
 80049dc:	af00      	add	r7, sp, #0
 80049de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff ffac 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80049ea:	b580      	push	{r7, lr}
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	f01b feff 	bl	80207f0 <abort>

080049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffed 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f7ff ffe8 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a22:	4603      	mov	r3, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429c      	cmp	r4, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}

08004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	return *this;
 8004a4a:	687b      	ldr	r3, [r7, #4]
      }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZN6Packet5parseEPh>:
            return;
        else
            build(rest...);
    }

    void parse(uint8_t* ptr){
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
        uint8_t* ptr_temp = ptr;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3308      	adds	r3, #8
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f000 fb34 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f000 fb3f 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	f107 020c 	add.w	r2, r7, #12
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ffb0 	bl	8004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <_ZN6Packet5parseEPh+0x80>
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ffcd 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
            field -> parse(ptr_temp);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	4798      	blx	r3
            ptr_temp += field->get_size();
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	4798      	blx	r3
 8004adc:	4602      	mov	r2, r0
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffa5 	bl	8004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>
 8004aee:	e7d3      	b.n	8004a98 <_ZN6Packet5parseEPh+0x28>
        }
    }
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN6Packet14process_packetEtPh>:
            field -> unparse(ptr_temp);
            ptr_temp += field->get_size();
        }
    }

    static void process_packet(uint16_t id, uint8_t* data) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	80fb      	strh	r3, [r7, #6]
        for(auto& entry : all_packets){
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <_ZN6Packet14process_packetEtPh+0x8c>)
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 fb13 	bl	8005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 fb1b 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb1e 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f083 0301 	eor.w	r3, r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <_ZN6Packet14process_packetEtPh+0x82>
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fb38 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8004b42:	6138      	str	r0, [r7, #16]
        	if(entry.second -> id == id){
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	889b      	ldrh	r3, [r3, #4]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
                entry.second->parse(data);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff8a 	bl	8004a70 <_ZN6Packet5parseEPh>
                if(entry.second->callback != nullptr)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
					entry.second->callback();
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	4798      	blx	r3
        for(auto& entry : all_packets){
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb0c 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8004b78:	e7d0      	b.n	8004b1c <_ZN6Packet14process_packetEtPh+0x24>
        	}
        }
    }
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	240001d4 	.word	0x240001d4

08004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>:
#include "Mini-STLIB/Can.hpp"

Can::Can(FDCAN_HandleTypeDef* hdcan) : hdcan(hdcan) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	Can::all_cans.push_back(this);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <_ZN3CanC1EP19FDCAN_HandleTypeDef+0x2c>)
 8004ba4:	f000 fb13 	bl	80051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>
}
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	240000f8 	.word	0x240000f8

08004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffed 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004bde:	4603      	mov	r3, r0
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f7ff ffe8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}

08004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	return *this;
 8004c10:	687b      	ldr	r3, [r7, #4]
      }
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <_ZN3Can14start_all_cansEv>:

void Can::start_all_cans() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
	for(auto can : Can::all_cans)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <_ZN3Can14start_all_cansEv+0x5c>)
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fad4 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fadf 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004c52:	4603      	mov	r3, r0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	463a      	mov	r2, r7
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ffb6 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <_ZN3Can14start_all_cansEv+0x54>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffd4 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
		can->start();
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f80b 	bl	8004c98 <_ZN3Can5startEv>
	for(auto can : Can::all_cans)
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ffba 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8004c8a:	e7e4      	b.n	8004c56 <_ZN3Can14start_all_cansEv+0x1e>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	240000f8 	.word	0x240000f8

08004c98 <_ZN3Can5startEv>:

void Can::start(){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	HAL_FDCAN_Start(hdcan);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f014 ff01 	bl	8019aac <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(hdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f015 f8ee 	bl	8019e94 <HAL_FDCAN_ActivateNotification>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN3Can12send_messageEtPhm>:

void Can::send_message(uint16_t id, uint8_t* data, uint32_t size) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f939 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 faa5 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03c      	beq.n	8004d68 <_ZN3Can12send_messageEtPhm+0xa8>
		TxHeader.Identifier = id;
 8004cee:	897a      	ldrh	r2, [r7, #10]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fab2 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d0c:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1a:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i = 0; i < size; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90d      	bls.n	8004d56 <_ZN3Can12send_messageEtPhm+0x96>
			TxData[i] = data[i];
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	3350      	adds	r3, #80	; 0x50
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e7ed      	b.n	8004d32 <_ZN3Can12send_messageEtPhm+0x72>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3350      	adds	r3, #80	; 0x50
 8004d62:	461a      	mov	r2, r3
 8004d64:	f014 fecd 	bl	8019b02 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN3Can12send_messageEtm>:

void Can::send_message(uint16_t id, uint32_t size) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f8e2 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa4e 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <_ZN3Can12send_messageEtm+0x7e>
		TxHeader.Identifier = id;
 8004d9c:	897a      	ldrh	r2, [r7, #10]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa5b 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dba:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc8:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1d19      	adds	r1, r3, #4
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	461a      	mov	r2, r3
 8004dea:	f014 fe8a 	bl	8019b02 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3Can18send_error_messageEtPKc>:

void Can::send_error_message(uint16_t id, const char* str){
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	817b      	strh	r3, [r7, #10]
	size_t message_size = strlen(str);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fa83 	bl	8000310 <strlen>
 8004e0a:	6238      	str	r0, [r7, #32]
	optional<uint32_t> dlc = get_dlc_from_size(message_size);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f89b 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa07 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04d      	beq.n	8004ec6 <_ZN3Can18send_error_messageEtPKc+0xd0>
		size_t str_size = strlen(str);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fa70 	bl	8000310 <strlen>
 8004e30:	61f8      	str	r0, [r7, #28]
		TxHeader.Identifier = id;
 8004e32:	897a      	ldrh	r2, [r7, #10]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa10 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e50:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e5e:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
		TxData[0] = ERROR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		memset(TxData + 1, ' ', MAX_MESSAGE_SIZE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3350      	adds	r3, #80	; 0x50
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	2120      	movs	r1, #32
 8004e84:	4618      	mov	r0, r3
 8004e86:	f01b fd1d 	bl	80208c4 <memset>
		for(int i = 1; i <= str_size; i++)
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d30e      	bcc.n	8004eb4 <_ZN3Can18send_error_messageEtPKc+0xbe>
			TxData[i] = (uint8_t) str[i-1];
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3350      	adds	r3, #80	; 0x50
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i <= str_size; i++)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	e7ec      	b.n	8004e8e <_ZN3Can18send_error_messageEtPKc+0x98>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3350      	adds	r3, #80	; 0x50
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f014 fe1e 	bl	8019b02 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ffed 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	681c      	ldr	r4, [r3, #0]
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f7ff ffe8 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004efe:	4603      	mov	r3, r0
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429c      	cmp	r4, r3
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd90      	pop	{r4, r7, pc}

08004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f103 0208 	add.w	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
	return *this;
 8004f28:	687b      	ldr	r3, [r7, #4]
      }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <_ZN3Can17get_dlc_from_sizeEm>:
		packet->unparse(TxData);
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
	}
}

optional<uint32_t> Can::get_dlc_from_size(uint32_t size){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	for(const auto DLC : Can::DLCS){
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <_ZN3Can17get_dlc_from_sizeEm+0x88>)
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f62:	f000 f993 	bl	800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>
 8004f66:	4603      	mov	r3, r0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6c:	f000 f99e 	bl	80052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f107 0214 	add.w	r2, r7, #20
 8004f78:	f107 0318 	add.w	r3, r7, #24
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff ffb0 	bl	8004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01d      	beq.n	8004fcc <_ZN3Can17get_dlc_from_sizeEm+0x7c>
 8004f90:	f107 0318 	add.w	r3, r7, #24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ffce 	bl	8004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	f107 031c 	add.w	r3, r7, #28
 8004fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fa4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(DLC.size >= size)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d807      	bhi.n	8004fc0 <_ZN3Can17get_dlc_from_sizeEm+0x70>
			return DLC.code;
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f988 	bl	80052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>
 8004fbe:	e006      	b.n	8004fce <_ZN3Can17get_dlc_from_sizeEm+0x7e>
	for(const auto DLC : Can::DLCS){
 8004fc0:	f107 0318 	add.w	r3, r7, #24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffa5 	bl	8004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>
 8004fca:	e7d3      	b.n	8004f74 <_ZN3Can17get_dlc_from_sizeEm+0x24>
	}
}
 8004fcc:	bf00      	nop
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	24000104 	.word	0x24000104

08004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>:

void Can::message_received_all_cans(FDCAN_HandleTypeDef* hfdcan,uint32_t RxFifo0ITs){
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	for(auto can : Can::all_cans)
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x74>)
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f000 f900 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	6978      	ldr	r0, [r7, #20]
 8004ff6:	f000 f90b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	f107 0208 	add.w	r2, r7, #8
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fde0 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800500e:	4603      	mov	r3, r0
 8005010:	f083 0301 	eor.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x6c>
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fdfd 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005024:	4603      	mov	r3, r0
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]
		if(can->hdcan == hfdcan)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d103      	bne.n	800503c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x60>
			can->message_received(RxFifo0ITs);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f000 f80c 	bl	8005054 <_ZN3Can16message_receivedEm>
	for(auto can : Can::all_cans)
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fddc 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8005046:	e7da      	b.n	8004ffe <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x22>
}
 8005048:	bf00      	nop
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	240000f8 	.word	0x240000f8

08005054 <_ZN3Can16message_receivedEm>:

void Can::message_received(uint32_t RxFifo0ITs) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01a      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
		if(HAL_FDCAN_GetRxMessage(hdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3390      	adds	r3, #144	; 0x90
 8005076:	2140      	movs	r1, #64	; 0x40
 8005078:	f014 fd9e 	bl	8019bb8 <HAL_FDCAN_GetRxMessage>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf0c      	ite	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	2300      	movne	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
			Packet::process_packet(RxHeader.Identifier, RxData);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3390      	adds	r3, #144	; 0x90
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7ff fd2d 	bl	8004af8 <_ZN6Packet14process_packetEtPh>
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f931 	bl	8005316 <_ZNSaIP3CanED1Ev>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f914 	bl	80052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>:
      vector() = default;
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ffeb 	bl	80050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f107 030c 	add.w	r3, r7, #12
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f97e 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f96d 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f970 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8005144:	4603      	mov	r3, r0
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f974 	bl	8005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800515e:	4603      	mov	r3, r0
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f01b faa5 	bl	80206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	return *this;
 80051a8:	687b      	ldr	r3, [r7, #4]
      }
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f952 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f000 f953 	bl	8005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>
 80051de:	4603      	mov	r3, r0
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f959 	bl	800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f97c 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	f107 030c 	add.w	r3, r7, #12
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f96b 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <_ZNKSt8optionalImEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f805 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005240:	4603      	mov	r3, r0
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <_ZNRSt8optionalImE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ffed 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005270:	4603      	mov	r3, r0
	  ? this->_M_get()
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <_ZNRSt8optionalImE5valueEv+0x1e>
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f951 	bl	800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>
 800527c:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800527e:	e001      	b.n	8005284 <_ZNRSt8optionalImE5valueEv+0x22>
 8005280:	f7ff fbb3 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f94b 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	1d1a      	adds	r2, r3, #4
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f93a 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>:
	optional(_Up&& __t)
 80052ce:	b5b0      	push	{r4, r5, r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 80052d8:	687c      	ldr	r4, [r7, #4]
 80052da:	6838      	ldr	r0, [r7, #0]
 80052dc:	f000 f93c 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	4629      	mov	r1, r5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 f952 	bl	8005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}

080052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f95b 	bl	80055ba <_ZNSaIP3CanEC1Ev>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f963 	bl	80055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_ZNSaIP3CanED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005344:	461a      	mov	r2, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f957 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      }
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fea9 	bl	80050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZNSaI3DLCEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f95a 	bl	8005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZNSaI3DLCED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	1d38      	adds	r0, r7, #4
 8005396:	e880 0006 	stmia.w	r0, {r1, r2}
 800539a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f954 	bl	800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 80053a6:	1d3b      	adds	r3, r7, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f978 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80053ae:	4604      	mov	r4, r0
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f97f 	bl	80056b6 <_ZNKSt16initializer_listI3DLCE3endEv>
 80053b8:	4602      	mov	r2, r0
 80053ba:	462b      	mov	r3, r5
 80053bc:	4621      	mov	r1, r4
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f99f 	bl	8005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bdb0      	pop	{r4, r5, r7, pc}

080053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80053ce:	b5b0      	push	{r4, r5, r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f9c7 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 80053e6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053e8:	461a      	mov	r2, r3
 80053ea:	4629      	mov	r1, r5
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f9cc 	bl	800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>
      }
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f939 	bl	800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bdb0      	pop	{r4, r5, r7, pc}

08005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	f107 030c 	add.w	r3, r7, #12
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f9b5 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f9a4 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr()
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f9a5 	bl	80057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 800547a:	4603      	mov	r3, r0
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800549a:	b5b0      	push	{r4, r5, r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d011      	beq.n	80054d4 <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80054b0:	687c      	ldr	r4, [r7, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685d      	ldr	r5, [r3, #4]
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f000 f990 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054bc:	4603      	mov	r3, r0
 80054be:	461a      	mov	r2, r3
 80054c0:	4629      	mov	r1, r5
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 f9aa 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e00c      	b.n	80054ee <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fe9b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 80054da:	4604      	mov	r4, r0
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f000 f97d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	4621      	mov	r1, r4
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9a9 	bl	8005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa22 	bl	8005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>
 80054f4:	4603      	mov	r3, r0
      }
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}

080054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa20 	bl	800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>
 800552e:	4603      	mov	r3, r0
      }
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800556e:	b590      	push	{r4, r7, lr}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	7239      	strb	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4621      	mov	r1, r4
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa11 	bl	80059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}

08005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	7239      	strb	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800559c:	68fc      	ldr	r4, [r7, #12]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffda 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	4629      	mov	r1, r5
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff ffdf 	bl	800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdb0      	pop	{r4, r5, r7, pc}

080055ba <_ZNSaIP3CanEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa08 	bl	80059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
	{ }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
	if (__p)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f9eb 	bl	80059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>
      }
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fe99 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f9e5 	bl	8005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8005684:	461a      	mov	r2, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9e2 	bl	8005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>
      }
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ffd1 	bl	8005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZNKSt16initializer_listI3DLCE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <_ZNKSt16initializer_listI3DLCE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ffed 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80056c4:	4604      	mov	r4, r0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9d5 	bl	8005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>
 80056cc:	4603      	mov	r3, r0
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4423      	add	r3, r4
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd90      	pop	{r4, r7, pc}

080056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80056da:	b5b0      	push	{r4, r5, r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80056e4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f9d0 	bl	8005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80056ee:	462a      	mov	r2, r5
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f9d5 	bl	8005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80056f8:	4603      	mov	r3, r0
    }
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdb0      	pop	{r4, r5, r7, pc}

08005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005702:	b590      	push	{r4, r7, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	68b8      	ldr	r0, [r7, #8]
 8005714:	f7ff ffe1 	bl	80056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8005718:	4603      	mov	r3, r0
 800571a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800571c:	68fc      	ldr	r4, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f827 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f000 f9ca 	bl	8005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>
 8005730:	4603      	mov	r3, r0
 8005732:	4619      	mov	r1, r3
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f9ed 	bl	8005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f80d 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 800575a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800575c:	4622      	mov	r2, r4
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f000 f9eb 	bl	8005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8005766:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f9e0 	bl	8005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>
    }
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() noexcept
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f9dc 	bl	8005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80057f2:	b590      	push	{r4, r7, lr}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80057fc:	6838      	ldr	r0, [r7, #0]
 80057fe:	f7ff ffed 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005802:	4603      	mov	r3, r0
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4619      	mov	r1, r3
 800580a:	2004      	movs	r0, #4
 800580c:	f7fa fd90 	bl	8000330 <_ZnwjPv>
 8005810:	4603      	mov	r3, r0
 8005812:	601c      	str	r4, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ffd7 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 800582e:	4603      	mov	r3, r0
 8005830:	4619      	mov	r1, r3
 8005832:	68b8      	ldr	r0, [r7, #8]
 8005834:	f7ff ffdd 	bl	80057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800584c:	4a39      	ldr	r2, [pc, #228]	; (8005934 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800584e:	2101      	movs	r1, #1
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9a5 	bl	8005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>
 8005856:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fcc3 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 800586a:	4603      	mov	r3, r0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	f107 0214 	add.w	r2, r7, #20
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f9d8 	bl	8005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800587e:	4603      	mov	r3, r0
 8005880:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f9e6 	bl	8005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>
 800588c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8005892:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	18d5      	adds	r5, r2, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff9d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	4629      	mov	r1, r5
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ffb7 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f97e 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058bc:	4603      	mov	r3, r0
 80058be:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f9f0 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058c8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	4621      	mov	r1, r4
 80058ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d0:	f000 f9d6 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058d4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3304      	adds	r3, #4
 80058da:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff f969 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058e6:	4603      	mov	r3, r0
 80058e8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f9db 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f9c1 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058fe:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8005900:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800590c:	461a      	mov	r2, r3
 800590e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005910:	f7ff fe73 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	441a      	add	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
    }
 800592c:	bf00      	nop
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}
 8005934:	08020ba8 	.word	0x08020ba8

08005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fc65 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f9c2 	bl	8005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>
 8005956:	4603      	mov	r3, r0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f95d 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005964:	4603      	mov	r3, r0
      }
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>:
      _M_get() noexcept
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	7239      	strb	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fde1 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8005996:	4603      	mov	r3, r0
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]
	    { }
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	7239      	strb	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80059b4:	68fc      	ldr	r4, [r7, #12]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fdce 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	4629      	mov	r1, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff ffde 	bl	8005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	711a      	strb	r2, [r3, #4]
	{ }
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}

080059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>:
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005a06:	f7fa fc8b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8005a10:	69b8      	ldr	r0, [r7, #24]
 8005a12:	f01a fdff 	bl	8020614 <_ZdlPv>
	    return;
 8005a16:	e005      	b.n	8005a24 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	69f8      	ldr	r0, [r7, #28]
 8005a1e:	f000 faa4 	bl	8005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f967 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f971 	bl	8005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f971 	bl	8005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>
      }
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>:
      size() const noexcept { return _M_len; }
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	10db      	asrs	r3, r3, #3
    }
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f919 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f961 	bl	8005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	bf8c      	ite	hi
 8005aec:	2301      	movhi	r3, #1
 8005aee:	2300      	movls	r3, #0
 8005af0:	b2dc      	uxtb	r4, r3
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fc3d 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d002      	beq.n	8005b06 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8005b00:	4803      	ldr	r0, [pc, #12]	; (8005b10 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8005b02:	f01a fe55 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	return __n;
 8005b06:	687b      	ldr	r3, [r7, #4]
      }
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd90      	pop	{r4, r7, pc}
 8005b10:	08020bc4 	.word	0x08020bc4

08005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x1e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f956 	bl	8005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	e000      	b.n	8005b34 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x20>
 8005b32:	2300      	movs	r3, #0
      }
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f963 	bl	8005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005b68:	f7fa fbda 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <_ZSt8_DestroyIP3DLCEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f962 	bl	8005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>
 8005b7a:	e003      	b.n	8005b84 <_ZSt8_DestroyIP3DLCEvT_S2_+0x26>
	__destroy(__first, __last);
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f975 	bl	8005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>
    }
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() noexcept
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f969 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f976 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	1ae2      	subs	r2, r4, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bf34      	ite	cc
 8005bc4:	2301      	movcc	r3, #1
 8005bc6:	2300      	movcs	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f01a fdee 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f966 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f962 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005be2:	4603      	mov	r3, r0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	f107 0208 	add.w	r2, r7, #8
 8005bea:	f107 0310 	add.w	r3, r7, #16
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fc fe2e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4423      	add	r3, r4
 8005bfc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f951 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c04:	4602      	mov	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d306      	bcc.n	8005c1a <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f939 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d904      	bls.n	8005c24 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x84>
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f932 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c20:	4603      	mov	r3, r0
 8005c22:	e000      	b.n	8005c26 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x86>
 8005c24:	697b      	ldr	r3, [r7, #20]
      }
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}

08005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005c2e:	b590      	push	{r4, r7, lr}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe ffbd 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	681c      	ldr	r4, [r3, #0]
 8005c42:	6838      	ldr	r0, [r7, #0]
 8005c44:	f7fe ffb8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1ae3      	subs	r3, r4, r3
 8005c4e:	109b      	asrs	r3, r3, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd90      	pop	{r4, r7, pc}

08005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x1e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f92a 	bl	8005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>
 8005c72:	4603      	mov	r3, r0
 8005c74:	e000      	b.n	8005c78 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x20>
 8005c76:	2300      	movs	r3, #0
      }
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005c8e:	f88d 4000 	strb.w	r4, [sp]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f934 	bl	8005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005c9e:	4603      	mov	r3, r0
      }
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f936 	bl	8005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>
    }
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	425b      	negs	r3, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	f107 020c 	add.w	r2, r7, #12
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fbfe 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZNSaI3DLCEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f935 	bl	8005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
	{ }
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005d68:	f7fa fada 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f01a fc4e 	bl	8020614 <_ZdlPv>
	    return;
 8005d78:	e005      	b.n	8005d86 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	69f8      	ldr	r0, [r7, #28]
 8005d80:	f000 f9a5 	bl	80060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005d96:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005dae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005db2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ffea 	bl	8005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005dbe:	f107 0208 	add.w	r2, r7, #8
 8005dc2:	f107 030c 	add.w	r3, r7, #12
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd f80c 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	681b      	ldr	r3, [r3, #0]
      }
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005dec:	f7fa fa98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f01a fc0e 	bl	802061c <_Znwj>
 8005e00:	4603      	mov	r3, r0
 8005e02:	e006      	b.n	8005e12 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005e04:	2200      	movs	r2, #0
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f96f 	bl	80060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	bf00      	nop
      { return __a.allocate(__n); }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f8b6 	bl	8005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>
 8005e34:	4603      	mov	r3, r0
    }
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00a      	beq.n	8005e66 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8b5 	bl	8005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f8bc 	bl	8005fd6 <_ZSt8_DestroyI3DLCEvPT_>
	  for (; __first != __last; ++__first)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3308      	adds	r3, #8
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e7f0      	b.n	8005e48 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0xa>
	}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f8d2 	bl	8006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f8b4 	bl	8006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	109b      	asrs	r3, r3, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005ed8:	f7fa fa22 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f01a fb98 	bl	802061c <_Znwj>
 8005eec:	4603      	mov	r3, r0
 8005eee:	e006      	b.n	8005efe <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f93a 	bl	800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>
 8005efa:	4603      	mov	r3, r0
 8005efc:	bf00      	nop
      { return __a.allocate(__n); }
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f897 	bl	800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005f20:	4603      	mov	r3, r0
      }
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZSt10destroy_atIP3CanEvPT_>:
    destroy_at(_Tp* __location)
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
    }
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005f48:	f7fa f9ea 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <_ZSt8_DestroyIPP3CanEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f897 	bl	8006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>
 8005f5a:	e003      	b.n	8005f64 <_ZSt8_DestroyIPP3CanEvT_S3_+0x26>
	__destroy(__first, __last);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8aa 	bl	80060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>
    }
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68b8      	ldr	r0, [r7, #8]
 8005f7e:	f01a fb4b 	bl	8020618 <_ZdlPvj>
      }
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8ba 	bl	800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <_ZSt8_DestroyI3DLCEvPT_>:
    _Destroy(_Tp* __pointer)
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8bb 	bl	800615a <_ZSt10destroy_atI3DLCEvPT_>
    }
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005ff4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800600c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006010:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffea 	bl	8005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>
 8006018:	4603      	mov	r3, r0
 800601a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800601c:	f107 0208 	add.w	r2, r7, #8
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7fc fedd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800602c:	4603      	mov	r3, r0
 800602e:	681b      	ldr	r3, [r3, #0]
      }
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800604e:	b5b0      	push	{r4, r5, r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f8a5 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006062:	4604      	mov	r4, r0
 8006064:	68b8      	ldr	r0, [r7, #8]
 8006066:	f000 f8a1 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 800606a:	4605      	mov	r5, r0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f89d 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006072:	4602      	mov	r2, r0
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4629      	mov	r1, r5
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f8a2 	bl	80061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800607e:	4603      	mov	r3, r0
    }
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bdb0      	pop	{r4, r5, r7, pc}

08006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d00a      	beq.n	80060b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8af 	bl	80061fe <_ZSt11__addressofIP3CanEPT_RS2_>
 80060a0:	4603      	mov	r3, r0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f8b6 	bl	8006214 <_ZSt8_DestroyIP3CanEvPT_>
	  for (; __first != __last; ++__first)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e7f0      	b.n	8006092 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0xa>
	}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4619      	mov	r1, r3
 80060e0:	68b8      	ldr	r0, [r7, #8]
 80060e2:	f01a fa99 	bl	8020618 <_ZdlPvj>
      }
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f896 	bl	800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>
 80060fe:	4602      	mov	r2, r0
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4293      	cmp	r3, r2
 8006104:	bf8c      	ite	hi
 8006106:	2301      	movhi	r3, #1
 8006108:	2300      	movls	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006110:	f01a fb4b 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4618      	mov	r0, r3
 800611a:	f01a fa7f 	bl	802061c <_Znwj>
 800611e:	4603      	mov	r3, r0
 8006120:	bf00      	nop
      }
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800612a:	b590      	push	{r4, r7, lr}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f883 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 800613c:	4604      	mov	r4, r0
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f000 f87f 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 8006144:	4603      	mov	r3, r0
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4619      	mov	r1, r3
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f884 	bl	8006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006150:	4603      	mov	r3, r0
    }
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}

0800615a <_ZSt10destroy_atI3DLCEvPT_>:
    destroy_at(_Tp* __location)
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
    }
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f88f 	bl	800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4293      	cmp	r3, r2
 8006186:	bf8c      	ite	hi
 8006188:	2301      	movhi	r3, #1
 800618a:	2300      	movls	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006192:	f01a fb0a 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f01a fa3e 	bl	802061c <_Znwj>
 80061a0:	4603      	mov	r3, r0
 80061a2:	bf00      	nop
      }
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <_ZSt12__niter_baseIPP3CanET_S3_>:
    __niter_base(_Iterator __it)
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	109b      	asrs	r3, r3, #2
 80061d8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd06      	ble.n	80061ee <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	461a      	mov	r2, r3
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f01a fb51 	bl	8020890 <memmove>
      return __result + __count;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
    }
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <_ZSt11__addressofIP3CanEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZSt8_DestroyIP3CanEvPT_>:
    _Destroy(_Tp* __pointer)
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fe84 	bl	8005f2a <_ZSt10destroy_atIP3CanEvPT_>
    }
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006232:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <_ZSt12__miter_baseIPK3DLCET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
    { return __it; }
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f826 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 800626a:	4604      	mov	r4, r0
 800626c:	68b8      	ldr	r0, [r7, #8]
 800626e:	f000 f822 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 8006272:	4605      	mov	r5, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f828 	bl	80062cc <_ZSt12__niter_baseIP3DLCET_S2_>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f82d 	bl	80062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006288:	4602      	mov	r2, r0
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f837 	bl	8006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>
 8006294:	4603      	mov	r3, r0
    }
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bdb0      	pop	{r4, r5, r7, pc}

0800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062a6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>:
    __niter_base(_Iterator __it)
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <_ZSt12__niter_baseIP3DLCET_S2_>:
    __niter_base(_Iterator __it)
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f811 	bl	800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 80062f8:	4603      	mov	r3, r0
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8006326:	f7f9 fffb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x24>
	  __copy_m(__first, __last, __result);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f80d 	bl	8006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>
 800633a:	4603      	mov	r3, r0
 800633c:	e006      	b.n	800634c <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f82b 	bl	800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>
 8006348:	4603      	mov	r3, r0
 800634a:	bf00      	nop
    }
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	10db      	asrs	r3, r3, #3
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	dd0f      	ble.n	8006390 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x3c>
	      *__result = *__first;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006378:	e883 0003 	stmia.w	r3, {r0, r1}
	      ++__first;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3308      	adds	r3, #8
 8006380:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3308      	adds	r3, #8
 8006386:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3b01      	subs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e7ec      	b.n	800636a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x16>
	  return __result;
 8006390:	687b      	ldr	r3, [r7, #4]
	}
 8006392:	4618      	mov	r0, r3
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	10db      	asrs	r3, r3, #3
 80063b2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	461a      	mov	r2, r3
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f01a fa64 	bl	8020890 <memmove>
	  return __result + _Num;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4413      	add	r3, r2
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_Z41__static_initialization_and_destruction_0ii>:
		{20, FDCAN_DLC_BYTES_20},
		{24, FDCAN_DLC_BYTES_24},
		{32, FDCAN_DLC_BYTES_32},
		{48, FDCAN_DLC_BYTES_48},
		{64, FDCAN_DLC_BYTES_64}
};
 80063d8:	b580      	push	{r7, lr}
 80063da:	b0a6      	sub	sp, #152	; 0x98
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d126      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d121      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
vector<Can*> Can::all_cans;
 80063f2:	481a      	ldr	r0, [pc, #104]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80063f4:	f7fe fe70 	bl	80050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>
const vector<DLC> Can::DLCS = {
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80063fa:	f107 0314 	add.w	r3, r7, #20
 80063fe:	4611      	mov	r1, r2
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	4618      	mov	r0, r3
 8006404:	f01a fa36 	bl	8020874 <memcpy>
 8006408:	f107 0314 	add.w	r3, r7, #20
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	2310      	movs	r3, #16
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe ffa1 	bl	800535e <_ZNSaI3DLCEC1Ev>
 800641c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006420:	f107 020c 	add.w	r2, r7, #12
 8006424:	ca06      	ldmia	r2, {r1, r2}
 8006426:	480f      	ldr	r0, [pc, #60]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006428:	f7fe ffb0 	bl	800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 800642c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe ffa0 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006442:	4293      	cmp	r3, r2
 8006444:	d105      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006446:	4807      	ldr	r0, [pc, #28]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006448:	f7fe ffc1 	bl	80053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>
vector<Can*> Can::all_cans;
 800644c:	4803      	ldr	r0, [pc, #12]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800644e:	f000 f80b 	bl	8006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>
};
 8006452:	bf00      	nop
 8006454:	3798      	adds	r7, #152	; 0x98
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	240000f8 	.word	0x240000f8
 8006460:	08020bf8 	.word	0x08020bf8
 8006464:	24000104 	.word	0x24000104

08006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681c      	ldr	r4, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fc14 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8006480:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006482:	461a      	mov	r2, r3
 8006484:	4629      	mov	r1, r5
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff fc19 	bl	8005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>
      }
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe ff4c 	bl	800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bdb0      	pop	{r4, r5, r7, pc}

0800649e <_GLOBAL__sub_I__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 800649e:	b580      	push	{r7, lr}
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7ff ff96 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_GLOBAL__sub_D__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064ae:	b580      	push	{r7, lr}
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064b6:	2000      	movs	r0, #0
 80064b8:	f7ff ff8e 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f89e 	bl	8006608 <_ZNSaIP9DigitalInED1Ev>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f881 	bl	80065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>:
      vector() = default;
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff ffeb 	bl	80064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8b1 	bl	800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f88f 	bl	8006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ffeb 	bl	8006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <_ZN9DigitalInC1EP3Pin>:
#include <Mini-STLIB/DigitalIn.hpp>

vector<DigitalIn*> DigitalIn::all_digital_ins;
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;

DigitalIn::DigitalIn(Pin* pin) : pin(pin) {
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	721a      	strb	r2, [r3, #8]
	DigitalIn::all_digital_ins.push_back(this);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4619      	mov	r1, r3
 8006578:	4809      	ldr	r0, [pc, #36]	; (80065a0 <_ZN9DigitalInC1EP3Pin+0x48>)
 800657a:	f000 f89e 	bl	80066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>
	DigitalIn::pin_to_digital_in[pin] = this;
 800657e:	687c      	ldr	r4, [r7, #4]
 8006580:	463b      	mov	r3, r7
 8006582:	4619      	mov	r1, r3
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <_ZN9DigitalInC1EP3Pin+0x4c>)
 8006586:	f000 f8a9 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800658a:	4603      	mov	r3, r0
 800658c:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_INPUT;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	719a      	strb	r2, [r3, #6]
}
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	24000110 	.word	0x24000110
 80065a4:	2400011c 	.word	0x2400011c

080065a8 <_ZN9DigitalIn9get_valueEv>:

DigitalIn::DigitalInState DigitalIn::get_value(){
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	GPIO_PinState hal_state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	889b      	ldrh	r3, [r3, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f014 fb98 	bl	801acf4 <HAL_GPIO_ReadPin>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
	if(hal_state == GPIO_PIN_SET)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d103      	bne.n	80065d6 <_ZN9DigitalIn9get_valueEv+0x2e>
		state = DigitalIn::HIGH;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	721a      	strb	r2, [r3, #8]
 80065d4:	e002      	b.n	80065dc <_ZN9DigitalIn9get_valueEv+0x34>
	else
		state = DigitalIn::LOW;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	721a      	strb	r2, [r3, #8]
	return state;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7a1b      	ldrb	r3, [r3, #8]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8d1 	bl	8006798 <_ZNSaIP9DigitalInEC1Ev>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f8d9 	bl	80067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZNSaIP9DigitalInED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8006636:	461a      	mov	r2, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8cd 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff3c 	bl	80064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8d0 	bl	80067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4618      	mov	r0, r3
 8006662:	f7fa fac1 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 fe6c 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>:
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8db 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800669e:	4603      	mov	r3, r0
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8b7 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff2d 	bl	800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f000 f8d1 	bl	800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8d7 	bl	8006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b08b      	sub	sp, #44	; 0x2c
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f8fc 	bl	80068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80066ee:	4603      	mov	r3, r0
 80066f0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f906 	bl	8006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80066f8:	4603      	mov	r3, r0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	f107 020c 	add.w	r2, r7, #12
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f909 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d114      	bne.n	800673c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f917 	bl	8006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681c      	ldr	r4, [r3, #0]
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f91d 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006726:	4603      	mov	r3, r0
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	4621      	mov	r1, r4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fa fbd2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01b      	beq.n	800677e <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006746:	687c      	ldr	r4, [r7, #4]
 8006748:	f107 0208 	add.w	r2, r7, #8
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f912 	bl	800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8006758:	f107 0318 	add.w	r3, r7, #24
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fa fbce 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006764:	f107 0218 	add.w	r2, r7, #24
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	4a08      	ldr	r2, [pc, #32]	; (8006794 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	4620      	mov	r0, r4
 8006776:	f000 f911 	bl	800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 800677a:	4603      	mov	r3, r0
 800677c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f8ec 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006788:	4603      	mov	r3, r0
 800678a:	3304      	adds	r3, #4
      }
 800678c:	4618      	mov	r0, r3
 800678e:	3724      	adds	r7, #36	; 0x24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd90      	pop	{r4, r7, pc}
 8006794:	08020d70 	.word	0x08020d70

08006798 <_ZNSaIP9DigitalInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f939 	bl	8006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
	{ }
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
	if (__p)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f91c 	bl	8006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>
      }
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f930 	bl	8006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8006826:	6838      	ldr	r0, [r7, #0]
 8006828:	f000 f92b 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800682c:	4603      	mov	r3, r0
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fff0 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8006836:	6838      	ldr	r0, [r7, #0]
 8006838:	f000 f92f 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800683c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f936 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800684a:	e7e9      	b.n	8006820 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8006882:	b5b0      	push	{r4, r5, r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d011      	beq.n	80068bc <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006898:	687c      	ldr	r4, [r7, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685d      	ldr	r5, [r3, #4]
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f000 f918 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	4629      	mov	r1, r5
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f932 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	1d1a      	adds	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	e00c      	b.n	80068d6 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f93b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 80068c2:	4604      	mov	r4, r0
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f000 f905 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	4621      	mov	r1, r4
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f943 	bl	8006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9bc 	bl	8006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>
 80068dc:	4603      	mov	r3, r0
      }
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bdb0      	pop	{r4, r5, r7, pc}

080068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f9c8 	bl	8006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 80068fa:	4603      	mov	r3, r0
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f9d2 	bl	8006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8006914:	4603      	mov	r3, r0
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8006946:	b590      	push	{r4, r7, lr}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9c2 	bl	8006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8006956:	bf00      	nop
 8006958:	4620      	mov	r0, r4
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 f9bf 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006972:	4603      	mov	r3, r0
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800699c:	b5b0      	push	{r4, r5, r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fa fc5b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80069b0:	4604      	mov	r4, r0
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f7fa ff45 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80069b8:	4605      	mov	r5, r0
 80069ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069bc:	f7fa fc69 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80069c0:	4603      	mov	r3, r0
 80069c2:	462a      	mov	r2, r5
 80069c4:	4621      	mov	r1, r4
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f9a0 	bl	8006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 80069cc:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80069ce:	69f8      	ldr	r0, [r7, #28]
 80069d0:	f000 faee 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f107 0010 	add.w	r0, r7, #16
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	f000 f9b8 	bl	8006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80069e8:	6939      	ldr	r1, [r7, #16]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 faf1 	bl	8006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e00b      	b.n	8006a10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f859 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	f107 0318 	add.w	r3, r7, #24
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fb23 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
      }
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bdb0      	pop	{r4, r5, r7, pc}

08006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b088      	sub	sp, #32
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006a46:	f7f9 fc6b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8006a50:	69b8      	ldr	r0, [r7, #24]
 8006a52:	f019 fddf 	bl	8020614 <_ZdlPv>
	    return;
 8006a56:	e005      	b.n	8006a64 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	69b9      	ldr	r1, [r7, #24]
 8006a5c:	69f8      	ldr	r0, [r7, #28]
 8006a5e:	f000 fdac 	bl	80075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fad7 	bl	8007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fae8 	bl	800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006aea:	b590      	push	{r4, r7, lr}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f7ff ffed 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006afa:	4603      	mov	r3, r0
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	2004      	movs	r0, #4
 8006b04:	f7f9 fc14 	bl	8000330 <_ZnwjPv>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	601c      	str	r4, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd90      	pop	{r4, r7, pc}

08006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ffd7 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b26:	4603      	mov	r3, r0
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7ff ffdd 	bl	8006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fab8 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006b5c:	b5b0      	push	{r4, r5, r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006b68:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fab7 	bl	80070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>
 8006b72:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 faf4 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 8006b86:	4603      	mov	r3, r0
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	f107 0214 	add.w	r2, r7, #20
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fafa 	bl	800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fb08 	bl	80071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>
 8006ba8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006bae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	18d5      	adds	r5, r2, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ff8b 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff ffa5 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fb18 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fb1d 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006be4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	4621      	mov	r1, r4
 8006bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bec:	f000 faf8 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006bf0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006bf8:	f107 0308 	add.w	r3, r7, #8
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb03 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c02:	4603      	mov	r3, r0
 8006c04:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fb08 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c0e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fae3 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c1a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8006c1c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c2c:	f7ff fdd4 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	609a      	str	r2, [r3, #8]
    }
 8006c48:	bf00      	nop
 8006c4a:	3730      	adds	r7, #48	; 0x30
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c50:	08020c78 	.word	0x08020c78

08006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff6b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 faef 	bl	8007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>
 8006c72:	4603      	mov	r3, r0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fb01 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 8006c80:	4603      	mov	r3, r0
      }
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8006c8a:	b590      	push	{r4, r7, lr}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff fddd 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fafc 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb02 	bl	80072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd90      	pop	{r4, r7, pc}

08006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f9c2 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8006ce2:	bf00      	nop
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr()
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fb0b 	bl	8007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006d0c:	b5b0      	push	{r4, r5, r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fb08 	bl	8007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8006d20:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006d22:	68b8      	ldr	r0, [r7, #8]
 8006d24:	f7fa fa9f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fa fd89 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d30:	4605      	mov	r5, r0
 8006d32:	6838      	ldr	r0, [r7, #0]
 8006d34:	f7fa faad 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4622      	mov	r2, r4
 8006d40:	6979      	ldr	r1, [r7, #20]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fb05 	bl	8007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8006d48:	697b      	ldr	r3, [r7, #20]
	}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bdb0      	pop	{r4, r5, r7, pc}

08006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006d52:	b5b0      	push	{r4, r5, r7, lr}
 8006d54:	b08c      	sub	sp, #48	; 0x30
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fb22 	bl	80073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006d6c:	69bc      	ldr	r4, [r7, #24]
 8006d6e:	68b8      	ldr	r0, [r7, #8]
 8006d70:	f000 fa93 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006d74:	4603      	mov	r3, r0
 8006d76:	429c      	cmp	r4, r3
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d032      	beq.n	8006dea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f000 fb22 	bl	80073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8006d8a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006d90:	68bc      	ldr	r4, [r7, #8]
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f000 fb27 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fb2e 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006da2:	4603      	mov	r3, r0
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7fa f894 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8006dbc:	2300      	movs	r3, #0
	  if (size() > 0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f000 fb0d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	f107 031c 	add.w	r3, r7, #28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7fb f867 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006dda:	e0e5      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fb17 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006de8:	e0de      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006dea:	68bc      	ldr	r4, [r7, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681d      	ldr	r5, [r3, #0]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fb03 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7fa f86a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d059      	beq.n	8006ec0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006e10:	69bc      	ldr	r4, [r7, #24]
 8006e12:	68b8      	ldr	r0, [r7, #8]
 8006e14:	f000 fb89 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 fb7d 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e30:	4604      	mov	r4, r0
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f000 fb79 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7fb f8de 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006e44:	e0b0      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006e46:	68bc      	ldr	r4, [r7, #8]
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb78 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
 8006e52:	4603      	mov	r3, r0
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fad1 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7fa f837 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01f      	beq.n	8006eb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fe04 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	f107 0214 	add.w	r2, r7, #20
 8006e92:	f107 0320 	add.w	r3, r7, #32
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7fb f805 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006e9e:	e083      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8006ea0:	f107 0218 	add.w	r2, r7, #24
 8006ea4:	f107 0318 	add.w	r3, r7, #24
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7fb f8a8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006eb0:	e07a      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 faac 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006ebe:	e073      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006ec0:	68bc      	ldr	r4, [r7, #8]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fa9a 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7fa f800 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d059      	beq.n	8006f94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006ee4:	69bc      	ldr	r4, [r7, #24]
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	f000 fa7d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006eec:	4603      	mov	r3, r0
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8006efe:	2300      	movs	r3, #0
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f000 fa6f 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7fa ffc9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f16:	e047      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006f18:	68bc      	ldr	r4, [r7, #8]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fb1e 	bl	8007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fa66 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f32:	4603      	mov	r3, r0
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7f9 ffcd 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01f      	beq.n	8006f86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fd9a 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	f107 0218 	add.w	r2, r7, #24
 8006f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fa ff9b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f72:	e019      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8006f74:	f107 0210 	add.w	r2, r7, #16
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7fb f83e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006f84:	e010      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fa42 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006f92:	e009      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006f9c:	f107 0318 	add.w	r3, r7, #24
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fb f867 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	3730      	adds	r7, #48	; 0x30
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdb0      	pop	{r4, r5, r7, pc}

08006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fae4 	bl	8007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 faeb 	bl	80075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>
 8006fcc:	4603      	mov	r3, r0
      }
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006fd6:	b5b0      	push	{r4, r5, r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f955 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d012      	beq.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8006ff8:	68fc      	ldr	r4, [r7, #12]
 8006ffa:	6838      	ldr	r0, [r7, #0]
 8006ffc:	f7ff ffd8 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007000:	4603      	mov	r3, r0
 8007002:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9fa 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800700a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f7f9 ff61 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8007022:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8007024:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800702a:	7df8      	ldrb	r0, [r7, #23]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	f019 fb60 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f805 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800704a:	693b      	ldr	r3, [r7, #16]
    }
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bdb0      	pop	{r4, r5, r7, pc}

08007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8007072:	b590      	push	{r4, r7, lr}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 faab 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007082:	4604      	mov	r4, r0
 8007084:	6838      	ldr	r0, [r7, #0]
 8007086:	f7ff fe33 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800708a:	4603      	mov	r3, r0
 800708c:	4619      	mov	r1, r3
 800708e:	4620      	mov	r0, r4
 8007090:	f000 faad 	bl	80075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bd90      	pop	{r4, r7, pc}

0800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa96 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2201      	movs	r2, #1
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 faa7 	bl	8007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 faa9 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 80070f2:	4604      	mov	r4, r0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fab6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 80070fa:	4603      	mov	r3, r0
 80070fc:	1ae2      	subs	r2, r4, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	bf34      	ite	cc
 8007104:	2301      	movcc	r3, #1
 8007106:	2300      	movcs	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f019 fb4e 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 faa6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800711a:	4604      	mov	r4, r0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 faa2 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007122:	4603      	mov	r3, r0
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7fb fb8e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8007136:	4603      	mov	r3, r0
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4423      	add	r3, r4
 800713c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fa91 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007144:	4602      	mov	r2, r0
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4293      	cmp	r3, r2
 800714a:	d306      	bcc.n	800715a <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fa79 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4293      	cmp	r3, r2
 8007158:	d904      	bls.n	8007164 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x84>
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fa72 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007160:	4603      	mov	r3, r0
 8007162:	e000      	b.n	8007166 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007164:	697b      	ldr	r3, [r7, #20]
      }
 8007166:	4618      	mov	r0, r3
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd90      	pop	{r4, r7, pc}

0800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff ff9e 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800718e:	b590      	push	{r4, r7, lr}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f835 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800719e:	4603      	mov	r3, r0
 80071a0:	681c      	ldr	r4, [r3, #0]
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f000 f830 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071a8:	4603      	mov	r3, r0
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	1ae3      	subs	r3, r4, r3
 80071ae:	109b      	asrs	r3, r3, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x1e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa5a 	bl	8007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>
 80071d2:	4603      	mov	r3, r0
 80071d4:	e000      	b.n	80071d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x20>
 80071d6:	2300      	movs	r3, #0
      }
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80071ee:	f88d 4000 	strb.w	r4, [sp]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fa64 	bl	80076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80071fe:	4603      	mov	r3, r0
      }
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bd90      	pop	{r4, r7, pc}

08007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fa5b 	bl	80076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>
    }
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	425b      	negs	r3, r3
 8007264:	4413      	add	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	f107 020c 	add.w	r2, r7, #12
 800726c:	f107 0308 	add.w	r3, r7, #8
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff ff24 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80072b2:	b590      	push	{r4, r7, lr}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01d      	beq.n	8007302 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80072c6:	68fc      	ldr	r4, [r7, #12]
 80072c8:	68b8      	ldr	r0, [r7, #8]
 80072ca:	f7ff fe71 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80072ce:	4603      	mov	r3, r0
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	4620      	mov	r0, r4
 80072da:	f7f9 fdfe 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80072de:	4603      	mov	r3, r0
 80072e0:	f083 0301 	eor.w	r3, r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f7ff fbd3 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80072f4:	60b8      	str	r0, [r7, #8]
 80072f6:	e7e3      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80072f8:	68b8      	ldr	r0, [r7, #8]
 80072fa:	f7ff fbc2 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80072fe:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8007300:	e7de      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fea3 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800730e:	697b      	ldr	r3, [r7, #20]
    }
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}

08007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() noexcept
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa02 	bl	800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007326:	4603      	mov	r3, r0
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f94d 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800733e:	4603      	mov	r3, r0
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f9fc 	bl	8007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>
 8007348:	4603      	mov	r3, r0
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4619      	mov	r1, r3
 8007366:	2018      	movs	r0, #24
 8007368:	f7f8 ffe2 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f933 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007372:	4604      	mov	r4, r0
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f7ff fcbb 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800737a:	4605      	mov	r5, r0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7f9 ff72 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8007382:	4606      	mov	r6, r0
 8007384:	6838      	ldr	r0, [r7, #0]
 8007386:	f7fa fa5c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800738a:	4680      	mov	r8, r0
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f7f9 ff80 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007392:	4603      	mov	r3, r0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4643      	mov	r3, r8
 8007398:	4632      	mov	r2, r6
 800739a:	4629      	mov	r1, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fa1c 	bl	80077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fe48 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fdd2 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800740c:	4603      	mov	r3, r0
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007416:	b5b0      	push	{r4, r5, r7, lr}
 8007418:	b08a      	sub	sp, #40	; 0x28
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff fa16 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007428:	4603      	mov	r3, r0
 800742a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f7ff ff34 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007432:	4603      	mov	r3, r0
 8007434:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d023      	beq.n	800748a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007446:	68bc      	ldr	r4, [r7, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681d      	ldr	r5, [r3, #0]
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fdae 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007454:	4603      	mov	r3, r0
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	4629      	mov	r1, r5
 800745c:	4620      	mov	r0, r4
 800745e:	f7f9 fd3c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8007468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fb11 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007478:	4603      	mov	r3, r0
 800747a:	e004      	b.n	8007486 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff faff 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007484:	4603      	mov	r3, r0
 8007486:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8007488:	e7d8      	b.n	800743c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fdde 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01d      	beq.n	80074dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 80074a0:	68b8      	ldr	r0, [r7, #8]
 80074a2:	f000 f9b6 	bl	8007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 80074a6:	4603      	mov	r3, r0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	f107 021c 	add.w	r2, r7, #28
 80074ae:	f107 0310 	add.w	r3, r7, #16
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fa32 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 80074c0:	f107 0214 	add.w	r2, r7, #20
 80074c4:	f107 0318 	add.w	r3, r7, #24
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f9b2 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 80074d0:	e027      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f833 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80074dc:	68bc      	ldr	r4, [r7, #8]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff8c 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80074e6:	4603      	mov	r3, r0
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7f9 fcf2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80074fc:	f107 0214 	add.w	r2, r7, #20
 8007500:	f107 0318 	add.w	r3, r7, #24
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f994 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 800750c:	e009      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800750e:	2300      	movs	r3, #0
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	f107 0220 	add.w	r2, r7, #32
 8007516:	f107 0310 	add.w	r3, r7, #16
 800751a:	4619      	mov	r1, r3
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7fa fdaa 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	3728      	adds	r7, #40	; 0x28
 8007526:	46bd      	mov	sp, r7
 8007528:	bdb0      	pop	{r4, r5, r7, pc}

0800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	330c      	adds	r3, #12
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f019 f8ce 	bl	80206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007554:	4602      	mov	r2, r0
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	return *this;
 800755a:	687b      	ldr	r3, [r7, #4]
      }
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f019 f8bb 	bl	80206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8007576:	4602      	mov	r2, r0
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]
	return *this;
 800757c:	687b      	ldr	r3, [r7, #4]
      }
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr() const
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3310      	adds	r3, #16
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f967 	bl	8007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8007598:	4603      	mov	r3, r0
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>:
      operator()(const _Pair& __x) const
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4619      	mov	r1, r3
 80075cc:	68b8      	ldr	r0, [r7, #8]
 80075ce:	f019 f823 	bl	8020618 <_ZdlPvj>
      }
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f000 f940 	bl	800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>
	}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007606:	b580      	push	{r7, lr}
 8007608:	b088      	sub	sp, #32
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800761e:	f7f8 fe7f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8007628:	69b8      	ldr	r0, [r7, #24]
 800762a:	f018 fff3 	bl	8020614 <_ZdlPv>
	    return;
 800762e:	e005      	b.n	800763c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69f8      	ldr	r0, [r7, #28]
 8007636:	f000 f9e1 	bl	80079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f945 	bl	80078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007654:	4603      	mov	r3, r0
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f927 	bl	80078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>
 800765c:	4603      	mov	r3, r0
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	109b      	asrs	r3, r3, #2
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007698:	f7f8 fe42 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d006      	beq.n	80076b0 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f018 ffb8 	bl	802061c <_Znwj>
 80076ac:	4603      	mov	r3, r0
 80076ae:	e006      	b.n	80076be <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80076b0:	2200      	movs	r2, #0
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f9b3 	bl	8007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>
 80076ba:	4603      	mov	r3, r0
 80076bc:	bf00      	nop
      { return __a.allocate(__n); }
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f90a 	bl	80078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80076e0:	4603      	mov	r3, r0
      }
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZSt10destroy_atIP9DigitalInEvPT_>:
    destroy_at(_Tp* __location)
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
    }
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8007708:	f7f8 fe0a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f90a 	bl	800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>
 800771a:	e003      	b.n	8007724 <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x26>
	__destroy(__first, __last);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f91d 	bl	800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>
    }
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() noexcept
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007752:	f7f8 fde5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4618      	mov	r0, r3
 8007768:	f018 ff58 	bl	802061c <_Znwj>
 800776c:	4603      	mov	r3, r0
 800776e:	e006      	b.n	800777e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f9b1 	bl	8007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>
 800777a:	4603      	mov	r3, r0
 800777c:	bf00      	nop
      { return __a.allocate(__n); }
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8007786:	b5b0      	push	{r4, r5, r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8007794:	68b8      	ldr	r0, [r7, #8]
 8007796:	f7f9 fd66 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa f851 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077a0:	4602      	mov	r2, r0
 80077a2:	f107 0318 	add.w	r3, r7, #24
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fb f8e6 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80077ae:	f107 0418 	add.w	r4, r7, #24
 80077b2:	6838      	ldr	r0, [r7, #0]
 80077b4:	f7f9 fd6d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4619      	mov	r1, r3
 80077bc:	2008      	movs	r0, #8
 80077be:	f7f8 fdb7 	bl	8000330 <_ZnwjPv>
 80077c2:	4605      	mov	r5, r0
 80077c4:	7f3b      	ldrb	r3, [r7, #28]
 80077c6:	4622      	mov	r2, r4
 80077c8:	7d39      	ldrb	r1, [r7, #20]
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f8ec 	bl	80079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80077d0:	462b      	mov	r3, r5
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}

080077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80077da:	b5b0      	push	{r4, r5, r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7f9 fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80077ee:	4604      	mov	r4, r0
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	f7fa f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077f6:	4605      	mov	r5, r0
 80077f8:	6a38      	ldr	r0, [r7, #32]
 80077fa:	f7f9 fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077fe:	4603      	mov	r3, r0
 8007800:	462a      	mov	r2, r5
 8007802:	4621      	mov	r1, r4
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	f7ff ffbe 	bl	8007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bdb0      	pop	{r4, r5, r7, pc}

08007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	4611      	mov	r1, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fc15 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 f8c5 	bl	80079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007846:	4603      	mov	r3, r0
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fa ffad 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007854:	4603      	mov	r3, r0
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8b9 	bl	80079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007874:	4603      	mov	r3, r0
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>:
    destroy_at(_Tp* __location)
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
    }
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800789a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80078b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80078b6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ffea 	bl	8007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>
 80078be:	4603      	mov	r3, r0
 80078c0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80078c2:	f107 0208 	add.w	r2, r7, #8
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fb fa8a 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80078d2:	4603      	mov	r3, r0
 80078d4:	681b      	ldr	r3, [r3, #0]
      }
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80078f4:	b5b0      	push	{r4, r5, r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f8ab 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007908:	4604      	mov	r4, r0
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	f000 f8a7 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007910:	4605      	mov	r5, r0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8a3 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007918:	4602      	mov	r2, r0
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4629      	mov	r1, r5
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f8a8 	bl	8007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007924:	4603      	mov	r3, r0
    }
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bdb0      	pop	{r4, r5, r7, pc}

0800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d00a      	beq.n	8007956 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8b5 	bl	8007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>
 8007946:	4603      	mov	r3, r0
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f8bc 	bl	8007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>
	  for (; __first != __last; ++__first)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	e7f0      	b.n	8007938 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0xa>
	}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f7fb fadb 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007988:	4603      	mov	r3, r0
 800798a:	4618      	mov	r0, r3
 800798c:	f7fb facc 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8007990:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
      { }
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	7239      	strb	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80079b6:	463a      	mov	r2, r7
 80079b8:	f88d 4000 	strb.w	r4, [sp]
 80079bc:	462b      	mov	r3, r5
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff ffd7 	bl	8007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bdb0      	pop	{r4, r5, r7, pc}

080079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() const noexcept
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	4413      	add	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4619      	mov	r1, r3
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f018 fdff 	bl	8020618 <_ZdlPvj>
      }
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f877 	bl	8007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bf8c      	ite	hi
 8007a3a:	2301      	movhi	r3, #1
 8007a3c:	2300      	movls	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007a44:	f018 feb1 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f018 fde5 	bl	802061c <_Znwj>
 8007a52:	4603      	mov	r3, r0
 8007a54:	bf00      	nop
      }
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>:
    __niter_base(_Iterator __it)
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	109b      	asrs	r3, r3, #2
 8007a8a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd06      	ble.n	8007aa0 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	461a      	mov	r2, r3
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f018 fef8 	bl	8020890 <memmove>
      return __result + __count;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>:
    _Destroy(_Tp* __pointer)
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fe0b 	bl	80076ea <_ZSt10destroy_atIP9DigitalInEvPT_>
    }
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f825 	bl	8007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4293      	cmp	r3, r2
 8007af4:	bf8c      	ite	hi
 8007af6:	2301      	movhi	r3, #1
 8007af8:	2300      	movls	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007b00:	f018 fe53 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f018 fd84 	bl	802061c <_Znwj>
 8007b14:	4603      	mov	r3, r0
 8007b16:	bf00      	nop
      }
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b40:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv+0x18>)
      }
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	05555555 	.word	0x05555555

08007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fd96 	bl	8006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <_Z41__static_initialization_and_destruction_0ii>:
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10a      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d105      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007b8a:	480c      	ldr	r0, [pc, #48]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b8c:	f7fe fcb0 	bl	80064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;
 8007b90:	480b      	ldr	r0, [pc, #44]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007b92:	f7fe fcd3 	bl	800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d105      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007ba6:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007ba8:	f7ff ffd4 	bl	8007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bac:	4803      	ldr	r0, [pc, #12]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bae:	f000 f809 	bl	8007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	24000110 	.word	0x24000110
 8007bc0:	2400011c 	.word	0x2400011c

08007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007bc4:	b5b0      	push	{r4, r5, r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681c      	ldr	r4, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fb21 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007bdc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bde:	461a      	mov	r2, r3
 8007be0:	4629      	mov	r1, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fb26 	bl	8007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>
      }
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fd17 	bl	800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bdb0      	pop	{r4, r5, r7, pc}

08007bfa <_GLOBAL__sub_I__ZN9DigitalIn15all_digital_insE>:
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c02:	2001      	movs	r0, #1
 8007c04:	f7ff ffb4 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <_GLOBAL__sub_D__ZN9DigitalIn15all_digital_insE>:
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7ff ffac 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8b6 	bl	8007d94 <_ZNSaIP10DigitalOutED1Ev>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f899 	bl	8007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>:
      vector() = default;
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ffeb 	bl	8007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8c9 	bl	8007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 f8a7 	bl	8007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ffeb 	bl	8007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <_ZN10DigitalOutC1EP3Pin>:
#include <Mini-STLIB/DigitalOut.hpp>

vector<DigitalOut*> DigitalOut::all_digital_outs;
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;

DigitalOut::DigitalOut(Pin* pin) : pin(pin) {
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
	DigitalOut::all_digital_outs.push_back(this);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4809      	ldr	r0, [pc, #36]	; (8007cfc <_ZN10DigitalOutC1EP3Pin+0x48>)
 8007cd6:	f000 f8b6 	bl	8007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>
	DigitalOut::pin_to_digital_out[pin] = this;
 8007cda:	687c      	ldr	r4, [r7, #4]
 8007cdc:	463b      	mov	r3, r7
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4807      	ldr	r0, [pc, #28]	; (8007d00 <_ZN10DigitalOutC1EP3Pin+0x4c>)
 8007ce2:	f000 f8c1 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_OUTPUT;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2204      	movs	r2, #4
 8007cee:	719a      	strb	r2, [r3, #6]
}
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd90      	pop	{r4, r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	24000134 	.word	0x24000134
 8007d00:	24000140 	.word	0x24000140

08007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>:

void DigitalOut::set_to(DigitalOutState state){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
	if(state == HIGH)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d103      	bne.n	8007d1e <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x1a>
		turn_high();
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f808 	bl	8007d2c <_ZN10DigitalOut9turn_highEv>
	else
		turn_low();
}
 8007d1c:	e002      	b.n	8007d24 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x20>
		turn_low();
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f816 	bl	8007d50 <_ZN10DigitalOut8turn_lowEv>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZN10DigitalOut9turn_highEv>:

void DigitalOut::turn_high(){
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	889b      	ldrh	r3, [r3, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	4619      	mov	r1, r3
 8007d44:	f012 ffee 	bl	801ad24 <HAL_GPIO_WritePin>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN10DigitalOut8turn_lowEv>:

void DigitalOut::turn_low(){
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	889b      	ldrh	r3, [r3, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	4619      	mov	r1, r3
 8007d68:	f012 ffdc 	bl	801ad24 <HAL_GPIO_WritePin>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8d1 	bl	8007f24 <_ZNSaIP10DigitalOutEC1Ev>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f8d9 	bl	8007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZNSaIP10DigitalOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8cd 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff ff24 	bl	8007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8d0 	bl	8007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f8 fefb 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7f8 faa6 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>:
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8db 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8b7 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ff15 	bl	8007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007e50:	6838      	ldr	r0, [r7, #0]
 8007e52:	f000 f8d1 	bl	8007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8d7 	bl	800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b08b      	sub	sp, #44	; 0x2c
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8fc 	bl	8008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f906 	bl	8008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8007e84:	4603      	mov	r3, r0
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	f107 020c 	add.w	r2, r7, #12
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f909 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d114      	bne.n	8007ec8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f917 	bl	80080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681c      	ldr	r4, [r3, #0]
 8007ea8:	f107 0308 	add.w	r3, r7, #8
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 f91d 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f9 f80c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01b      	beq.n	8007f0a <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ed2:	687c      	ldr	r4, [r7, #4]
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 f912 	bl	8008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8007ee4:	f107 0318 	add.w	r3, r7, #24
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7f9 f808 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ef0:	f107 0218 	add.w	r2, r7, #24
 8007ef4:	f107 031c 	add.w	r3, r7, #28
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f911 	bl	8008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8007f06:	4603      	mov	r3, r0
 8007f08:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f8ec 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007f14:	4603      	mov	r3, r0
 8007f16:	3304      	adds	r3, #4
      }
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3724      	adds	r7, #36	; 0x24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}
 8007f20:	08020d70 	.word	0x08020d70

08007f24 <_ZNSaIP10DigitalOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f939 	bl	80081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
	{ }
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
	if (__p)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f91c 	bl	80081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>
      }
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f930 	bl	80081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8007fb2:	6838      	ldr	r0, [r7, #0]
 8007fb4:	f000 f92b 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fff0 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8007fc2:	6838      	ldr	r0, [r7, #0]
 8007fc4:	f000 f92f 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007fc8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f936 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007fd6:	e7e9      	b.n	8007fac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800800e:	b5b0      	push	{r4, r5, r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	d011      	beq.n	8008048 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008024:	687c      	ldr	r4, [r7, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685d      	ldr	r5, [r3, #4]
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f000 f918 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	4629      	mov	r1, r5
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f932 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	1d1a      	adds	r2, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e00c      	b.n	8008062 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f93b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800804e:	4604      	mov	r4, r0
 8008050:	6838      	ldr	r0, [r7, #0]
 8008052:	f000 f905 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	4621      	mov	r1, r4
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f943 	bl	80082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9bc 	bl	80083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>
 8008068:	4603      	mov	r3, r0
      }
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}

08008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f9c8 	bl	8008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8008086:	4603      	mov	r3, r0
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f9d2 	bl	8008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 80080d2:	b590      	push	{r4, r7, lr}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f9c2 	bl	8008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 80080e2:	bf00      	nop
 80080e4:	4620      	mov	r0, r4
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd90      	pop	{r4, r7, pc}

080080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f9bf 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 80080fe:	4603      	mov	r3, r0
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008128:	b5b0      	push	{r4, r5, r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7f9 f895 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800813c:	4604      	mov	r4, r0
 800813e:	6838      	ldr	r0, [r7, #0]
 8008140:	f7f9 fb7f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008144:	4605      	mov	r5, r0
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f7f9 f8a3 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800814c:	4603      	mov	r3, r0
 800814e:	462a      	mov	r2, r5
 8008150:	4621      	mov	r1, r4
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f9a0 	bl	8008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8008158:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800815a:	69f8      	ldr	r0, [r7, #28]
 800815c:	f000 faee 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008160:	4603      	mov	r3, r0
 8008162:	f107 0010 	add.w	r0, r7, #16
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	f000 f9b8 	bl	80084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8008174:	6939      	ldr	r1, [r7, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 faf1 	bl	8008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8008180:	4603      	mov	r3, r0
 8008182:	e00b      	b.n	800819c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8008184:	69f9      	ldr	r1, [r7, #28]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f859 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fb23 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800819a:	69bb      	ldr	r3, [r7, #24]
      }
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bdb0      	pop	{r4, r5, r7, pc}

080081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b088      	sub	sp, #32
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80081d2:	f7f8 f8a5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80081dc:	69b8      	ldr	r0, [r7, #24]
 80081de:	f018 fa19 	bl	8020614 <_ZdlPv>
	    return;
 80081e2:	e005      	b.n	80081f0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	69f8      	ldr	r0, [r7, #28]
 80081ea:	f000 fdac 	bl	8008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fad7 	bl	80087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fae8 	bl	8008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008276:	b590      	push	{r4, r7, lr}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008280:	6838      	ldr	r0, [r7, #0]
 8008282:	f7ff ffed 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008286:	4603      	mov	r3, r0
 8008288:	681c      	ldr	r4, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4619      	mov	r1, r3
 800828e:	2004      	movs	r0, #4
 8008290:	f7f8 f84e 	bl	8000330 <_ZnwjPv>
 8008294:	4603      	mov	r3, r0
 8008296:	601c      	str	r4, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bd90      	pop	{r4, r7, pc}

080082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ffd7 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4619      	mov	r1, r3
 80082b6:	68b8      	ldr	r0, [r7, #8]
 80082b8:	f7ff ffdd 	bl	8008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80082bc:	bf00      	nop
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1d1a      	adds	r2, r3, #4
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fab8 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80082e8:	b5b0      	push	{r4, r5, r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80082f4:	4a39      	ldr	r2, [pc, #228]	; (80083dc <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80082f6:	2101      	movs	r1, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fab7 	bl	800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>
 80082fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 faf4 	bl	80088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>
 8008312:	4603      	mov	r3, r0
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	f107 0214 	add.w	r2, r7, #20
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fafa 	bl	800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008326:	4603      	mov	r3, r0
 8008328:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fb08 	bl	8008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>
 8008334:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800833a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	18d5      	adds	r5, r2, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff8b 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	4629      	mov	r1, r5
 8008350:	4620      	mov	r0, r4
 8008352:	f7ff ffa5 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fb18 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008364:	4603      	mov	r3, r0
 8008366:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fb1d 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008370:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	4621      	mov	r1, r4
 8008376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008378:	f000 faf8 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800837c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3304      	adds	r3, #4
 8008382:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008384:	f107 0308 	add.w	r3, r7, #8
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fb03 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800838e:	4603      	mov	r3, r0
 8008390:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fb08 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 800839a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fae3 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083a6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80083a8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80083b4:	461a      	mov	r2, r3
 80083b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b8:	f7ff fdd4 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	441a      	add	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
    }
 80083d4:	bf00      	nop
 80083d6:	3730      	adds	r7, #48	; 0x30
 80083d8:	46bd      	mov	sp, r7
 80083da:	bdb0      	pop	{r4, r5, r7, pc}
 80083dc:	08020c94 	.word	0x08020c94

080083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff6b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 faef 	bl	80089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>
 80083fe:	4603      	mov	r3, r0
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fb01 	bl	8008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>
 800840c:	4603      	mov	r3, r0
      }
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff fddd 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008426:	4604      	mov	r4, r0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fafc 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800842e:	4602      	mov	r2, r0
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	4621      	mov	r1, r4
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fb02 	bl	8008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800843a:	4603      	mov	r3, r0
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f9c2 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800846e:	bf00      	nop
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr()
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3310      	adds	r3, #16
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fb0b 	bl	8008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 800848e:	4603      	mov	r3, r0
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8008498:	b5b0      	push	{r4, r5, r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fb08 	bl	8008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 80084ac:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80084ae:	68b8      	ldr	r0, [r7, #8]
 80084b0:	f7f8 fed9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80084b4:	4604      	mov	r4, r0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 f9c3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80084bc:	4605      	mov	r5, r0
 80084be:	6838      	ldr	r0, [r7, #0]
 80084c0:	f7f8 fee7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80084c4:	4603      	mov	r3, r0
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462b      	mov	r3, r5
 80084ca:	4622      	mov	r2, r4
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fb05 	bl	8008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 80084d4:	697b      	ldr	r3, [r7, #20]
	}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}

080084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80084de:	b5b0      	push	{r4, r5, r7, lr}
 80084e0:	b08c      	sub	sp, #48	; 0x30
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb22 	bl	8008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80084f8:	69bc      	ldr	r4, [r7, #24]
 80084fa:	68b8      	ldr	r0, [r7, #8]
 80084fc:	f000 fa93 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008500:	4603      	mov	r3, r0
 8008502:	429c      	cmp	r4, r3
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d032      	beq.n	8008576 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8008510:	68b8      	ldr	r0, [r7, #8]
 8008512:	f000 fb22 	bl	8008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8008516:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008518:	2b00      	cmp	r3, #0
 800851a:	d015      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800851c:	68bc      	ldr	r4, [r7, #8]
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	f000 fb27 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008524:	4603      	mov	r3, r0
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fb2e 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800852e:	4603      	mov	r3, r0
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	4620      	mov	r0, r4
 800853a:	f7f8 fcce 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8008548:	2300      	movs	r3, #0
	  if (size() > 0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	68b8      	ldr	r0, [r7, #8]
 8008554:	f000 fb0d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008558:	4602      	mov	r2, r0
 800855a:	f107 031c 	add.w	r3, r7, #28
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7f9 fca1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008566:	e0e5      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fb17 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8008574:	e0de      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8008576:	68bc      	ldr	r4, [r7, #8]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb03 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008584:	4603      	mov	r3, r0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	4629      	mov	r1, r5
 800858c:	4620      	mov	r0, r4
 800858e:	f7f8 fca4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d059      	beq.n	800864c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800859c:	69bc      	ldr	r4, [r7, #24]
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	f000 fb89 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085a4:	4603      	mov	r3, r0
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429c      	cmp	r4, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f000 fb7d 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085bc:	4604      	mov	r4, r0
 80085be:	68b8      	ldr	r0, [r7, #8]
 80085c0:	f000 fb79 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	4621      	mov	r1, r4
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7f9 fd18 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80085d0:	e0b0      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80085d2:	68bc      	ldr	r4, [r7, #8]
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fb78 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fad1 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80085e8:	4603      	mov	r3, r0
 80085ea:	6819      	ldr	r1, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7f8 fc71 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01f      	beq.n	800863e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff fe04 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8008616:	2300      	movs	r3, #0
 8008618:	623b      	str	r3, [r7, #32]
 800861a:	f107 0214 	add.w	r2, r7, #20
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7f9 fc3f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800862a:	e083      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800862c:	f107 0218 	add.w	r2, r7, #24
 8008630:	f107 0318 	add.w	r3, r7, #24
 8008634:	4619      	mov	r1, r3
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7f9 fce2 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800863c:	e07a      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 faac 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800864a:	e073      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800864c:	68bc      	ldr	r4, [r7, #8]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fa9a 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008656:	4603      	mov	r3, r0
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	4620      	mov	r0, r4
 8008662:	f7f8 fc3a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d059      	beq.n	8008720 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8008670:	69bc      	ldr	r4, [r7, #24]
 8008672:	68b8      	ldr	r0, [r7, #8]
 8008674:	f000 fa7d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008678:	4603      	mov	r3, r0
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429c      	cmp	r4, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800868a:	2300      	movs	r3, #0
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	68b8      	ldr	r0, [r7, #8]
 8008690:	f000 fa6f 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008694:	4602      	mov	r2, r0
 8008696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7f9 fc03 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086a2:	e047      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80086a4:	68bc      	ldr	r4, [r7, #8]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681d      	ldr	r5, [r3, #0]
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fb1e 	bl	8008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fa66 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80086be:	4603      	mov	r3, r0
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	4629      	mov	r1, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7f8 fc07 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01f      	beq.n	8008712 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fd9a 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80086ea:	2300      	movs	r3, #0
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ee:	f107 0218 	add.w	r2, r7, #24
 80086f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086f6:	4619      	mov	r1, r3
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7f9 fbd5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086fe:	e019      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8008700:	f107 0210 	add.w	r2, r7, #16
 8008704:	f107 0310 	add.w	r3, r7, #16
 8008708:	4619      	mov	r1, r3
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7f9 fc78 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008710:	e010      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fa42 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800871e:	e009      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008724:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008728:	f107 0318 	add.w	r3, r7, #24
 800872c:	4619      	mov	r1, r3
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7f9 fca1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	3730      	adds	r7, #48	; 0x30
 8008738:	46bd      	mov	sp, r7
 800873a:	bdb0      	pop	{r4, r5, r7, pc}

0800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fae4 	bl	8008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800874a:	4602      	mov	r2, r0
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f000 faeb 	bl	8008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>
 8008758:	4603      	mov	r3, r0
      }
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008762:	b5b0      	push	{r4, r5, r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d119      	bne.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f955 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800877c:	4602      	mov	r2, r0
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4293      	cmp	r3, r2
 8008782:	d012      	beq.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8008784:	68fc      	ldr	r4, [r7, #12]
 8008786:	6838      	ldr	r0, [r7, #0]
 8008788:	f7ff ffd8 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800878c:	4603      	mov	r3, r0
 800878e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9fa 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008796:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	4629      	mov	r1, r5
 800879e:	4620      	mov	r0, r4
 80087a0:	f7f8 fb9b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 80087ae:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087b0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80087b6:	7df8      	ldrb	r0, [r7, #23]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	f017 ff9a 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80087ca:	f107 0310 	add.w	r3, r7, #16
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f805 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 80087d6:	693b      	ldr	r3, [r7, #16]
    }
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bdb0      	pop	{r4, r5, r7, pc}

080087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80087fe:	b590      	push	{r4, r7, lr}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 faab 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800880e:	4604      	mov	r4, r0
 8008810:	6838      	ldr	r0, [r7, #0]
 8008812:	f7ff fe33 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008816:	4603      	mov	r3, r0
 8008818:	4619      	mov	r1, r3
 800881a:	4620      	mov	r0, r4
 800881c:	f000 faad 	bl	8008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bd90      	pop	{r4, r7, pc}

08008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa96 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008838:	4603      	mov	r3, r0
 800883a:	2201      	movs	r2, #1
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 faa7 	bl	8008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 faa9 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800887e:	4604      	mov	r4, r0
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fab6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 8008886:	4603      	mov	r3, r0
 8008888:	1ae2      	subs	r2, r4, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	bf34      	ite	cc
 8008890:	2301      	movcc	r3, #1
 8008892:	2300      	movcs	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f017 ff88 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 faa6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088a6:	4604      	mov	r4, r0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 faa2 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088ae:	4603      	mov	r3, r0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	f107 0208 	add.w	r2, r7, #8
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7f9 ffc8 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 80088c2:	4603      	mov	r3, r0
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4423      	add	r3, r4
 80088c8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fa91 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088d0:	4602      	mov	r2, r0
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d306      	bcc.n	80088e6 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fa79 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088de:	4602      	mov	r2, r0
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d904      	bls.n	80088f0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fa72 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	e000      	b.n	80088f2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 80088f0:	697b      	ldr	r3, [r7, #20]
      }
 80088f2:	4618      	mov	r0, r3
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}

080088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ff9e 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800891a:	b590      	push	{r4, r7, lr}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f835 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800892a:	4603      	mov	r3, r0
 800892c:	681c      	ldr	r4, [r3, #0]
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f000 f830 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008934:	4603      	mov	r3, r0
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	1ae3      	subs	r3, r4, r3
 800893a:	109b      	asrs	r3, r3, #2
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}

08008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x1e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fa5a 	bl	8008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>
 800895e:	4603      	mov	r3, r0
 8008960:	e000      	b.n	8008964 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x20>
 8008962:	2300      	movs	r3, #0
      }
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b087      	sub	sp, #28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800897a:	f88d 4000 	strb.w	r4, [sp]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fa64 	bl	8008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800898a:	4603      	mov	r3, r0
      }
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	bd90      	pop	{r4, r7, pc}

08008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fa5b 	bl	8008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>
    }
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	425b      	negs	r3, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	f107 020c 	add.w	r2, r7, #12
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff ff24 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008a3e:	b590      	push	{r4, r7, lr}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01d      	beq.n	8008a8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008a52:	68fc      	ldr	r4, [r7, #12]
 8008a54:	68b8      	ldr	r0, [r7, #8]
 8008a56:	f7ff fe71 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	4620      	mov	r0, r4
 8008a66:	f7f8 fa38 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f083 0301 	eor.w	r3, r3, #1
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d006      	beq.n	8008a84 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f7ff fbd3 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008a80:	60b8      	str	r0, [r7, #8]
 8008a82:	e7e3      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff fbc2 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008a8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008a8c:	e7de      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fea3 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008a9a:	697b      	ldr	r3, [r7, #20]
    }
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}

08008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa02 	bl	8008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f94d 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2101      	movs	r1, #1
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f9fc 	bl	8008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8008ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4619      	mov	r1, r3
 8008af2:	2018      	movs	r0, #24
 8008af4:	f7f7 fc1c 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f933 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008afe:	4604      	mov	r4, r0
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	f7ff fcbb 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008b06:	4605      	mov	r5, r0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7f8 fbac 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	6838      	ldr	r0, [r7, #0]
 8008b12:	f7f8 fe96 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008b16:	4680      	mov	r8, r0
 8008b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1a:	f7f8 fbba 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4643      	mov	r3, r8
 8008b24:	4632      	mov	r2, r6
 8008b26:	4629      	mov	r1, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fa1c 	bl	8008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fe48 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3310      	adds	r3, #16
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fdd2 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008ba2:	b5b0      	push	{r4, r5, r7, lr}
 8008ba4:	b08a      	sub	sp, #40	; 0x28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008bae:	68b8      	ldr	r0, [r7, #8]
 8008bb0:	f7ff fa16 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f7ff ff34 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d023      	beq.n	8008c16 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8008bd2:	68bc      	ldr	r4, [r7, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681d      	ldr	r5, [r3, #0]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fdae 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008be0:	4603      	mov	r3, r0
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	4629      	mov	r1, r5
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7f8 f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d005      	beq.n	8008c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fb11 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008c04:	4603      	mov	r3, r0
 8008c06:	e004      	b.n	8008c12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff faff 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008c10:	4603      	mov	r3, r0
 8008c12:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008c14:	e7d8      	b.n	8008bc8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fdde 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01d      	beq.n	8008c68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f000 f9b6 	bl	8008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8008c32:	4603      	mov	r3, r0
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	f107 021c 	add.w	r2, r7, #28
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fa32 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8008c4c:	f107 0214 	add.w	r2, r7, #20
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f9b2 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c5c:	e027      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8008c5e:	f107 0310 	add.w	r3, r7, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f833 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8008c68:	68bc      	ldr	r4, [r7, #8]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ff8c 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008c72:	4603      	mov	r3, r0
 8008c74:	6819      	ldr	r1, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7f8 f92c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d008      	beq.n	8008c9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8008c88:	f107 0214 	add.w	r2, r7, #20
 8008c8c:	f107 0318 	add.w	r3, r7, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f994 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c98:	e009      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	f107 0220 	add.w	r2, r7, #32
 8008ca2:	f107 0310 	add.w	r3, r7, #16
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7f9 f9e4 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	3728      	adds	r7, #40	; 0x28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bdb0      	pop	{r4, r5, r7, pc}

08008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f017 fd08 	bl	80206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
	return *this;
 8008ce6:	687b      	ldr	r3, [r7, #4]
      }
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f017 fcf5 	bl	80206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008d02:	4602      	mov	r2, r0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
	return *this;
 8008d08:	687b      	ldr	r3, [r7, #4]
      }
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr() const
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3310      	adds	r3, #16
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f967 	bl	8008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4619      	mov	r1, r3
 8008d58:	68b8      	ldr	r0, [r7, #8]
 8008d5a:	f017 fc5d 	bl	8020618 <_ZdlPvj>
      }
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8008d84:	6838      	ldr	r0, [r7, #0]
 8008d86:	f000 f940 	bl	800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>
	}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008daa:	f7f7 fab9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8008db4:	69b8      	ldr	r0, [r7, #24]
 8008db6:	f017 fc2d 	bl	8020614 <_ZdlPv>
	    return;
 8008dba:	e005      	b.n	8008dc8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	69b9      	ldr	r1, [r7, #24]
 8008dc0:	69f8      	ldr	r0, [r7, #28]
 8008dc2:	f000 f9e1 	bl	8009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f945 	bl	800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f927 	bl	8009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>
 8008de8:	4603      	mov	r3, r0
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	109b      	asrs	r3, r3, #2
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008e24:	f7f7 fa7c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d006      	beq.n	8008e3c <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f017 fbf2 	bl	802061c <_Znwj>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e006      	b.n	8008e4a <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f9b3 	bl	80091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>
 8008e46:	4603      	mov	r3, r0
 8008e48:	bf00      	nop
      { return __a.allocate(__n); }
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f90a 	bl	8009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008e6c:	4603      	mov	r3, r0
      }
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>:
    destroy_at(_Tp* __location)
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
    }
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8008e94:	f7f7 fa44 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f90a 	bl	80090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>
 8008ea6:	e003      	b.n	8008eb0 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x26>
	__destroy(__first, __last);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f91d 	bl	80090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>
    }
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() noexcept
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008ede:	f7f7 fa1f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	4413      	add	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f017 fb92 	bl	802061c <_Znwj>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	e006      	b.n	8008f0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008efc:	2200      	movs	r2, #0
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f9b1 	bl	8009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	bf00      	nop
      { return __a.allocate(__n); }
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008f12:	b5b0      	push	{r4, r5, r7, lr}
 8008f14:	b088      	sub	sp, #32
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f7f8 f9a0 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f8 fc8b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f107 0318 	add.w	r3, r7, #24
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f9 fd20 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 8008f3a:	f107 0418 	add.w	r4, r7, #24
 8008f3e:	6838      	ldr	r0, [r7, #0]
 8008f40:	f7f8 f9a7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4619      	mov	r1, r3
 8008f48:	2008      	movs	r0, #8
 8008f4a:	f7f7 f9f1 	bl	8000330 <_ZnwjPv>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	7f3b      	ldrb	r3, [r7, #28]
 8008f52:	4622      	mov	r2, r4
 8008f54:	7d39      	ldrb	r1, [r7, #20]
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f8ec 	bl	8009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bdb0      	pop	{r4, r5, r7, pc}

08008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008f66:	b5b0      	push	{r4, r5, r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7f8 f976 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	6838      	ldr	r0, [r7, #0]
 8008f7e:	f7f8 fc60 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f82:	4605      	mov	r5, r0
 8008f84:	6a38      	ldr	r0, [r7, #32]
 8008f86:	f7f8 f984 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4621      	mov	r1, r4
 8008f90:	68b8      	ldr	r0, [r7, #8]
 8008f92:	f7ff ffbe 	bl	8008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bdb0      	pop	{r4, r5, r7, pc}

08008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fc15 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f000 f8c5 	bl	800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7f9 fbe7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8b9 	bl	8009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8009000:	4603      	mov	r3, r0
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>:
    destroy_at(_Tp* __location)
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
    }
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009026:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800903e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009042:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ffea 	bl	800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>
 800904a:	4603      	mov	r3, r0
 800904c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800904e:	f107 0208 	add.w	r2, r7, #8
 8009052:	f107 030c 	add.w	r3, r7, #12
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7f9 fec4 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800905e:	4603      	mov	r3, r0
 8009060:	681b      	ldr	r3, [r3, #0]
      }
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009080:	b5b0      	push	{r4, r5, r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 f8ab 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 8009094:	4604      	mov	r4, r0
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f000 f8a7 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 800909c:	4605      	mov	r5, r0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f8a3 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090a4:	4602      	mov	r2, r0
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	4629      	mov	r1, r5
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f8a8 	bl	8009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80090b0:	4603      	mov	r3, r0
    }
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bdb0      	pop	{r4, r5, r7, pc}

080090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d00a      	beq.n	80090e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8b5 	bl	800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>
 80090d2:	4603      	mov	r3, r0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8bc 	bl	8009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>
	  for (; __first != __last; ++__first)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3304      	adds	r3, #4
 80090de:	607b      	str	r3, [r7, #4]
 80090e0:	e7f0      	b.n	80090c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0xa>
	}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800910e:	68b8      	ldr	r0, [r7, #8]
 8009110:	f7f9 ff15 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009114:	4603      	mov	r3, r0
 8009116:	4618      	mov	r0, r3
 8009118:	f7f9 ff06 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800911c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
      { }
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	7239      	strb	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8009142:	463a      	mov	r2, r7
 8009144:	f88d 4000 	strb.w	r4, [sp]
 8009148:	462b      	mov	r3, r5
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff ffd7 	bl	8009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bdb0      	pop	{r4, r5, r7, pc}

0800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() const noexcept
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4413      	add	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	4619      	mov	r1, r3
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f017 fa39 	bl	8020618 <_ZdlPvj>
      }
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f877 	bl	80092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>
 80091be:	4602      	mov	r2, r0
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bf8c      	ite	hi
 80091c6:	2301      	movhi	r3, #1
 80091c8:	2300      	movls	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80091d0:	f017 faeb 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4618      	mov	r0, r3
 80091da:	f017 fa1f 	bl	802061c <_Znwj>
 80091de:	4603      	mov	r3, r0
 80091e0:	bf00      	nop
      }
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>:
    __niter_base(_Iterator __it)
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	109b      	asrs	r3, r3, #2
 8009216:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd06      	ble.n	800922c <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	461a      	mov	r2, r3
 8009224:	68f9      	ldr	r1, [r7, #12]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f017 fb32 	bl	8020890 <memmove>
      return __result + __count;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
    }
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff fe0b 	bl	8008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>
    }
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f825 	bl	80092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>
 800927a:	4602      	mov	r2, r0
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4293      	cmp	r3, r2
 8009280:	bf8c      	ite	hi
 8009282:	2301      	movhi	r3, #1
 8009284:	2300      	movls	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800928c:	f017 fa8d 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	4618      	mov	r0, r3
 800929c:	f017 f9be 	bl	802061c <_Znwj>
 80092a0:	4603      	mov	r3, r0
 80092a2:	bf00      	nop
      }
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv+0x18>)
      }
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	05555555 	.word	0x05555555

080092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fd96 	bl	8007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <_Z41__static_initialization_and_destruction_0ii>:
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10a      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009312:	4293      	cmp	r3, r2
 8009314:	d105      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009316:	480c      	ldr	r0, [pc, #48]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009318:	f7fe fc98 	bl	8007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800931e:	f7fe fcbb 	bl	8007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800932e:	4293      	cmp	r3, r2
 8009330:	d105      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009334:	f7ff ffd4 	bl	80092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009338:	4803      	ldr	r0, [pc, #12]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800933a:	f000 f809 	bl	8009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	24000134 	.word	0x24000134
 800934c:	24000140 	.word	0x24000140

08009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009350:	b5b0      	push	{r4, r5, r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681c      	ldr	r4, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fb21 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8009368:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800936a:	461a      	mov	r2, r3
 800936c:	4629      	mov	r1, r5
 800936e:	4620      	mov	r0, r4
 8009370:	f7ff fb26 	bl	80089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>
      }
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd17 	bl	8007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bdb0      	pop	{r4, r5, r7, pc}

08009386 <_GLOBAL__sub_I__ZN10DigitalOut16all_digital_outsE>:
 8009386:	b580      	push	{r7, lr}
 8009388:	af00      	add	r7, sp, #0
 800938a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800938e:	2001      	movs	r0, #1
 8009390:	f7ff ffb4 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 8009394:	bd80      	pop	{r7, pc}

08009396 <_GLOBAL__sub_D__ZN10DigitalOut16all_digital_outsE>:
 8009396:	b580      	push	{r7, lr}
 8009398:	af00      	add	r7, sp, #0
 800939a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800939e:	2000      	movs	r0, #0
 80093a0:	f7ff ffac 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f9cc 	bl	800974c <_ZNSaIP12InputCaptureED1Ev>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f9af 	bl	800972c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>:
      vector() = default;
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ffeb 	bl	80093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f9df 	bl	80097be <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f9bd 	bl	8009794 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ffeb 	bl	800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <_ZN13MovingAverageILm15EfEC1Ev>:
#include "Mini-STLIB/DataStructures/RingBuffer.hpp"
#include <stdint.h>
#include <cmath>

template<uint32_t BUFFER_SIZE, class BUFFER_TYPE>
class MovingAverage{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 f9d8 	bl	80097fe <_ZN10RingBufferILm15EfEC1Ev>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/InputCapture.hpp"

vector<InputCapture*> InputCapture::all_input_captures;
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;

InputCapture::InputCapture(TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8009458:	b590      	push	{r4, r7, lr}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
: timer(timer), channel(channel), pin(pin) {
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f04f 32ff 	mov.w	r2, #4294967295
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f04f 32ff 	mov.w	r2, #4294967295
 800947c:	609a      	str	r2, [r3, #8]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	60da      	str	r2, [r3, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3310      	adds	r3, #16
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff ffd7 	bl	800943e <_ZN13MovingAverageILm15EfEC1Ev>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	335c      	adds	r3, #92	; 0x5c
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff ffd2 	bl	800943e <_ZN13MovingAverageILm15EfEC1Ev>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	all_input_captures.push_back(this);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	4619      	mov	r1, r3
 80094c4:	4809      	ldr	r0, [pc, #36]	; (80094ec <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x94>)
 80094c6:	f000 f9c0 	bl	800984a <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>
	pin_to_input_capture[pin] = this;
 80094ca:	68fc      	ldr	r4, [r7, #12]
 80094cc:	463b      	mov	r3, r7
 80094ce:	4619      	mov	r1, r3
 80094d0:	4807      	ldr	r0, [pc, #28]	; (80094f0 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x98>)
 80094d2:	f000 f9cb 	bl	800986c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80094d6:	4603      	mov	r3, r0
 80094d8:	601c      	str	r4, [r3, #0]
	pin->mode = INPUT_CAPTURE;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2202      	movs	r2, #2
 80094de:	719a      	strb	r2, [r3, #6]
}
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4618      	mov	r0, r3
 80094e4:	371c      	adds	r7, #28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd90      	pop	{r4, r7, pc}
 80094ea:	bf00      	nop
 80094ec:	24000158 	.word	0x24000158
 80094f0:	24000164 	.word	0x24000164
 80094f4:	00000000 	.word	0x00000000

080094f8 <_ZN12InputCapture9interruptEv>:
	if(channel == TIM_CHANNEL_4)
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_4;
	return false;
}

void InputCapture::interrupt() {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	if(timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009506:	7f1b      	ldrb	r3, [r3, #28]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d133      	bne.n	8009574 <_ZN12InputCapture9interruptEv+0x7c>
		freq_count = HAL_TIM_ReadCapturedValue(timer, TIM_CHANNEL_1);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009512:	2100      	movs	r1, #0
 8009514:	4618      	mov	r0, r3
 8009516:	f016 f94b 	bl	801f7b0 <HAL_TIM_ReadCapturedValue>
 800951a:	4602      	mov	r2, r0
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		if(freq_count != 0){
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009528:	2b00      	cmp	r3, #0
 800952a:	d023      	beq.n	8009574 <_ZN12InputCapture9interruptEv+0x7c>
			duty_count = HAL_TIM_ReadCapturedValue(timer, TIM_CHANNEL_2);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009532:	2104      	movs	r1, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f016 f93b 	bl	801f7b0 <HAL_TIM_ReadCapturedValue>
 800953a:	4602      	mov	r2, r0
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			duty = ((double) duty_count) / freq_count * 100;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009548:	ee07 3a90 	vmov	s15, r3
 800954c:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009556:	ee07 3a90 	vmov	s15, r3
 800955a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800955e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8009562:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8009580 <_ZN12InputCapture9interruptEv+0x88>
 8009566:	ee27 7b06 	vmul.f64	d7, d7, d6
 800956a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0
		}

	}
}
 8009574:	bf00      	nop
 8009576:	3708      	adds	r7, #8
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	f3af 8000 	nop.w
 8009580:	00000000 	.word	0x00000000
 8009584:	40590000 	.word	0x40590000

08009588 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4618      	mov	r0, r3
 8009594:	370c      	adds	r7, #12
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800959e:	b590      	push	{r4, r7, lr}
 80095a0:	b083      	sub	sp, #12
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
 80095a6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f7ff ffed 	bl	8009588 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80095ae:	4603      	mov	r3, r0
 80095b0:	681c      	ldr	r4, [r3, #0]
 80095b2:	6838      	ldr	r0, [r7, #0]
 80095b4:	f7ff ffe8 	bl	8009588 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80095b8:	4603      	mov	r3, r0
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	429c      	cmp	r4, r3
 80095be:	bf0c      	ite	eq
 80095c0:	2301      	moveq	r3, #1
 80095c2:	2300      	movne	r3, #0
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	4618      	mov	r0, r3
 80095c8:	370c      	adds	r7, #12
 80095ca:	46bd      	mov	sp, r7
 80095cc:	bd90      	pop	{r4, r7, pc}

080095ce <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
	++_M_current;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	1d1a      	adds	r2, r3, #4
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	601a      	str	r2, [r3, #0]
	return *this;
 80095e0:	687b      	ldr	r3, [r7, #4]
      }
 80095e2:	4618      	mov	r0, r3
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80095ee:	b480      	push	{r7}
 80095f0:	b083      	sub	sp, #12
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr
	...

08009608 <_ZN12InputCapture24start_all_input_capturesEv>:

void InputCapture::start_all_input_captures(){
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
	for(auto input_capture : InputCapture::all_input_captures)
 800960e:	4b15      	ldr	r3, [pc, #84]	; (8009664 <_ZN12InputCapture24start_all_input_capturesEv+0x5c>)
 8009610:	60fb      	str	r3, [r7, #12]
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 f988 	bl	8009928 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009618:	4603      	mov	r3, r0
 800961a:	607b      	str	r3, [r7, #4]
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 f993 	bl	8009948 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009622:	4603      	mov	r3, r0
 8009624:	603b      	str	r3, [r7, #0]
 8009626:	463a      	mov	r2, r7
 8009628:	1d3b      	adds	r3, r7, #4
 800962a:	4611      	mov	r1, r2
 800962c:	4618      	mov	r0, r3
 800962e:	f7ff ffb6 	bl	800959e <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8009632:	4603      	mov	r3, r0
 8009634:	f083 0301 	eor.w	r3, r3, #1
 8009638:	b2db      	uxtb	r3, r3
 800963a:	2b00      	cmp	r3, #0
 800963c:	d00e      	beq.n	800965c <_ZN12InputCapture24start_all_input_capturesEv+0x54>
 800963e:	1d3b      	adds	r3, r7, #4
 8009640:	4618      	mov	r0, r3
 8009642:	f7ff ffd4 	bl	80095ee <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 8009646:	4603      	mov	r3, r0
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	60bb      	str	r3, [r7, #8]
		input_capture->start();
 800964c:	68b8      	ldr	r0, [r7, #8]
 800964e:	f000 f847 	bl	80096e0 <_ZN12InputCapture5startEv>
	for(auto input_capture : InputCapture::all_input_captures)
 8009652:	1d3b      	adds	r3, r7, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7ff ffba 	bl	80095ce <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 800965a:	e7e4      	b.n	8009626 <_ZN12InputCapture24start_all_input_capturesEv+0x1e>
}
 800965c:	bf00      	nop
 800965e:	3710      	adds	r7, #16
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	24000158 	.word	0x24000158

08009668 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>:

void InputCapture::interrupt_of_all_input_captures(TIM_HandleTypeDef* timer){
 8009668:	b580      	push	{r7, lr}
 800966a:	b086      	sub	sp, #24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
	for(auto input_capture : InputCapture::all_input_captures){
 8009670:	4b1a      	ldr	r3, [pc, #104]	; (80096dc <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x74>)
 8009672:	617b      	str	r3, [r7, #20]
 8009674:	6978      	ldr	r0, [r7, #20]
 8009676:	f000 f957 	bl	8009928 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 800967a:	4603      	mov	r3, r0
 800967c:	60fb      	str	r3, [r7, #12]
 800967e:	6978      	ldr	r0, [r7, #20]
 8009680:	f000 f962 	bl	8009948 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009684:	4603      	mov	r3, r0
 8009686:	60bb      	str	r3, [r7, #8]
 8009688:	f107 0208 	add.w	r2, r7, #8
 800968c:	f107 030c 	add.w	r3, r7, #12
 8009690:	4611      	mov	r1, r2
 8009692:	4618      	mov	r0, r3
 8009694:	f7ff ff83 	bl	800959e <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8009698:	4603      	mov	r3, r0
 800969a:	f083 0301 	eor.w	r3, r3, #1
 800969e:	b2db      	uxtb	r3, r3
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d016      	beq.n	80096d2 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x6a>
 80096a4:	f107 030c 	add.w	r3, r7, #12
 80096a8:	4618      	mov	r0, r3
 80096aa:	f7ff ffa0 	bl	80095ee <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 80096ae:	4603      	mov	r3, r0
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	613b      	str	r3, [r7, #16]
		if(input_capture->timer == timer)
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	429a      	cmp	r2, r3
 80096be:	d102      	bne.n	80096c6 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x5e>
			input_capture->interrupt();
 80096c0:	6938      	ldr	r0, [r7, #16]
 80096c2:	f7ff ff19 	bl	80094f8 <_ZN12InputCapture9interruptEv>
	for(auto input_capture : InputCapture::all_input_captures){
 80096c6:	f107 030c 	add.w	r3, r7, #12
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff ff7f 	bl	80095ce <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 80096d0:	e7da      	b.n	8009688 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x20>
	}
}
 80096d2:	bf00      	nop
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	24000158 	.word	0x24000158

080096e0 <_ZN12InputCapture5startEv>:

void InputCapture::reset(){
}

void InputCapture::start(){
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_IT(timer, TIM_CHANNEL_1);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096ee:	2100      	movs	r1, #0
 80096f0:	4618      	mov	r0, r3
 80096f2:	f015 fb37 	bl	801ed64 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(timer, TIM_CHANNEL_2);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096fc:	2104      	movs	r1, #4
 80096fe:	4618      	mov	r0, r3
 8009700:	f015 fa1e 	bl	801eb40 <HAL_TIM_IC_Start>
}
 8009704:	bf00      	nop
 8009706:	3708      	adds	r7, #8
 8009708:	46bd      	mov	sp, r7
 800970a:	bd80      	pop	{r7, pc}

0800970c <_ZN12InputCapture8get_dutyEv>:

void InputCapture::stop(){
}

float InputCapture::get_duty(){
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
	return duty;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800971a:	ee07 3a90 	vmov	s15, r3
}
 800971e:	eeb0 0a67 	vmov.f32	s0, s15
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800972c:	b580      	push	{r7, lr}
 800972e:	b082      	sub	sp, #8
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 f918 	bl	800996a <_ZNSaIP12InputCaptureEC1Ev>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4618      	mov	r0, r3
 800973e:	f000 f920 	bl	8009982 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4618      	mov	r0, r3
 8009746:	3708      	adds	r7, #8
 8009748:	46bd      	mov	sp, r7
 800974a:	bd80      	pop	{r7, pc}

0800974c <_ZNSaIP12InputCaptureED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	4618      	mov	r0, r3
 8009758:	370c      	adds	r7, #12
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8009762:	b580      	push	{r7, lr}
 8009764:	b082      	sub	sp, #8
 8009766:	af00      	add	r7, sp, #0
 8009768:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	689a      	ldr	r2, [r3, #8]
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	1ad3      	subs	r3, r2, r3
 8009778:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800977a:	461a      	mov	r2, r3
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f914 	bl	80099aa <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      }
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	4618      	mov	r0, r3
 8009786:	f7ff fe0e 	bl	80093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4618      	mov	r0, r3
 800978e:	3708      	adds	r7, #8
 8009790:	46bd      	mov	sp, r7
 8009792:	bd80      	pop	{r7, pc}

08009794 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800979c:	6878      	ldr	r0, [r7, #4]
 800979e:	f000 f917 	bl	80099d0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4618      	mov	r0, r3
 80097a6:	f7f7 fa1f 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	3304      	adds	r3, #4
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7f6 fdca 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>:
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 f922 	bl	8009a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80097e2:	4603      	mov	r3, r0
 80097e4:	4619      	mov	r1, r3
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 f8fe 	bl	80099e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff fdff 	bl	80093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	4618      	mov	r0, r3
 80097f8:	3708      	adds	r7, #8
 80097fa:	46bd      	mov	sp, r7
 80097fc:	bd80      	pop	{r7, pc}

080097fe <_ZN10RingBufferILm15EfEC1Ev>:
		return value;
	}

public:

	RingBuffer(){
 80097fe:	b480      	push	{r7}
 8009800:	b085      	sub	sp, #20
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	2200      	movs	r2, #0
 800980a:	601a      	str	r2, [r3, #0]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	605a      	str	r2, [r3, #4]
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	2b0e      	cmp	r3, #14
 8009820:	dc0c      	bgt.n	800983c <_ZN10RingBufferILm15EfEC1Ev+0x3e>
			buffer[i] = 0;
 8009822:	687a      	ldr	r2, [r7, #4]
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	3302      	adds	r3, #2
 8009828:	009b      	lsls	r3, r3, #2
 800982a:	4413      	add	r3, r2
 800982c:	3304      	adds	r3, #4
 800982e:	f04f 0200 	mov.w	r2, #0
 8009832:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3301      	adds	r3, #1
 8009838:	60fb      	str	r3, [r7, #12]
 800983a:	e7ef      	b.n	800981c <_ZN10RingBufferILm15EfEC1Ev+0x1e>
		}
	}
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4618      	mov	r0, r3
 8009840:	3714      	adds	r7, #20
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr

0800984a <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8009854:	6838      	ldr	r0, [r7, #0]
 8009856:	f000 f8f2 	bl	8009a3e <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>
 800985a:	4603      	mov	r3, r0
 800985c:	4619      	mov	r1, r3
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f8f8 	bl	8009a54 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8009864:	bf00      	nop
 8009866:	3708      	adds	r7, #8
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 800986c:	b590      	push	{r4, r7, lr}
 800986e:	b08b      	sub	sp, #44	; 0x2c
 8009870:	af02      	add	r7, sp, #8
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8009876:	6839      	ldr	r1, [r7, #0]
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f91d 	bl	8009ab8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 800987e:	4603      	mov	r3, r0
 8009880:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f000 f927 	bl	8009ad6 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8009888:	4603      	mov	r3, r0
 800988a:	60fb      	str	r3, [r7, #12]
 800988c:	f107 020c 	add.w	r2, r7, #12
 8009890:	f107 0308 	add.w	r3, r7, #8
 8009894:	4611      	mov	r1, r2
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f92a 	bl	8009af0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800989c:	4603      	mov	r3, r0
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d114      	bne.n	80098cc <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	f000 f938 	bl	8009b18 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	681c      	ldr	r4, [r3, #0]
 80098ac:	f107 0308 	add.w	r3, r7, #8
 80098b0:	4618      	mov	r0, r3
 80098b2:	f000 f93e 	bl	8009b32 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 80098b6:	4603      	mov	r3, r0
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	f107 0310 	add.w	r3, r7, #16
 80098be:	4621      	mov	r1, r4
 80098c0:	4618      	mov	r0, r3
 80098c2:	f7f7 fb0a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80098c6:	4603      	mov	r3, r0
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d001      	beq.n	80098d0 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e000      	b.n	80098d2 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80098d0:	2300      	movs	r3, #0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d01b      	beq.n	800990e <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80098d6:	687c      	ldr	r4, [r7, #4]
 80098d8:	f107 0208 	add.w	r2, r7, #8
 80098dc:	f107 0314 	add.w	r3, r7, #20
 80098e0:	4611      	mov	r1, r2
 80098e2:	4618      	mov	r0, r3
 80098e4:	f000 f933 	bl	8009b4e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80098e8:	f107 0318 	add.w	r3, r7, #24
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7f7 fb06 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80098f4:	f107 0218 	add.w	r2, r7, #24
 80098f8:	f107 031c 	add.w	r3, r7, #28
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	4613      	mov	r3, r2
 8009900:	4a08      	ldr	r2, [pc, #32]	; (8009924 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8009902:	6979      	ldr	r1, [r7, #20]
 8009904:	4620      	mov	r0, r4
 8009906:	f000 f932 	bl	8009b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 800990a:	4603      	mov	r3, r0
 800990c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800990e:	f107 0308 	add.w	r3, r7, #8
 8009912:	4618      	mov	r0, r3
 8009914:	f000 f90d 	bl	8009b32 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009918:	4603      	mov	r3, r0
 800991a:	3304      	adds	r3, #4
      }
 800991c:	4618      	mov	r0, r3
 800991e:	3724      	adds	r7, #36	; 0x24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd90      	pop	{r4, r7, pc}
 8009924:	08020d70 	.word	0x08020d70

08009928 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	f107 030c 	add.w	r3, r7, #12
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f000 f956 	bl	8009bea <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	4618      	mov	r0, r3
 8009942:	3710      	adds	r7, #16
 8009944:	46bd      	mov	sp, r7
 8009946:	bd80      	pop	{r7, pc}

08009948 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009948:	b580      	push	{r7, lr}
 800994a:	b084      	sub	sp, #16
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	1d1a      	adds	r2, r3, #4
 8009954:	f107 030c 	add.w	r3, r7, #12
 8009958:	4611      	mov	r1, r2
 800995a:	4618      	mov	r0, r3
 800995c:	f000 f945 	bl	8009bea <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}

0800996a <_ZNSaIP12InputCaptureEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800996a:	b580      	push	{r7, lr}
 800996c:	b082      	sub	sp, #8
 800996e:	af00      	add	r7, sp, #0
 8009970:	6078      	str	r0, [r7, #4]
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 f949 	bl	8009c0a <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	605a      	str	r2, [r3, #4]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	609a      	str	r2, [r3, #8]
	{ }
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b084      	sub	sp, #16
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	60f8      	str	r0, [r7, #12]
 80099b2:	60b9      	str	r1, [r7, #8]
 80099b4:	607a      	str	r2, [r7, #4]
	if (__p)
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d005      	beq.n	80099c8 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	68b9      	ldr	r1, [r7, #8]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f000 f92c 	bl	8009c20 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>
      }
 80099c8:	bf00      	nop
 80099ca:	3710      	adds	r7, #16
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}

080099d0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f940 	bl	8009c5e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4618      	mov	r0, r3
 80099e2:	3708      	adds	r7, #8
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}

080099e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d012      	beq.n	8009a1e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 80099f8:	6838      	ldr	r0, [r7, #0]
 80099fa:	f000 f93b 	bl	8009c74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80099fe:	4603      	mov	r3, r0
 8009a00:	4619      	mov	r1, r3
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f7ff fff0 	bl	80099e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8009a08:	6838      	ldr	r0, [r7, #0]
 8009a0a:	f000 f93f 	bl	8009c8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009a0e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f946 	bl	8009ca4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009a1c:	e7e9      	b.n	80099f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8009a1e:	bf00      	nop
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009a26:	b480      	push	{r7}
 8009a28:	b083      	sub	sp, #12
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	4618      	mov	r0, r3
 8009a34:	370c      	adds	r7, #12
 8009a36:	46bd      	mov	sp, r7
 8009a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3c:	4770      	bx	lr

08009a3e <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8009a54:	b5b0      	push	{r4, r5, r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d011      	beq.n	8009a8e <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009a6a:	687c      	ldr	r4, [r7, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685d      	ldr	r5, [r3, #4]
 8009a70:	6838      	ldr	r0, [r7, #0]
 8009a72:	f000 f928 	bl	8009cc6 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009a76:	4603      	mov	r3, r0
 8009a78:	461a      	mov	r2, r3
 8009a7a:	4629      	mov	r1, r5
 8009a7c:	4620      	mov	r0, r4
 8009a7e:	f000 f942 	bl	8009d06 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	1d1a      	adds	r2, r3, #4
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	605a      	str	r2, [r3, #4]
 8009a8c:	e00c      	b.n	8009aa8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009a8e:	6878      	ldr	r0, [r7, #4]
 8009a90:	f7ff ff5a 	bl	8009948 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009a94:	4604      	mov	r4, r0
 8009a96:	6838      	ldr	r0, [r7, #0]
 8009a98:	f000 f915 	bl	8009cc6 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	6878      	ldr	r0, [r7, #4]
 8009aa4:	f000 f942 	bl	8009d2c <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f000 f9bb 	bl	8009e24 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>
 8009aae:	4603      	mov	r3, r0
      }
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3708      	adds	r7, #8
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bdb0      	pop	{r4, r5, r7, pc}

08009ab8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]
 8009ac0:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f000 f9c7 	bl	8009e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8009acc:	4603      	mov	r3, r0
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}

08009ad6 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009ad6:	b580      	push	{r7, lr}
 8009ad8:	b082      	sub	sp, #8
 8009ada:	af00      	add	r7, sp, #0
 8009adc:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	f000 f9d1 	bl	8009e88 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	429a      	cmp	r2, r3
 8009b04:	bf0c      	ite	eq
 8009b06:	2301      	moveq	r3, #1
 8009b08:	2300      	movne	r3, #0
 8009b0a:	b2db      	uxtb	r3, r3
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8009b18:	b590      	push	{r4, r7, lr}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f000 f9c1 	bl	8009eaa <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8009b28:	bf00      	nop
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	370c      	adds	r7, #12
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd90      	pop	{r4, r7, pc}

08009b32 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009b32:	b580      	push	{r7, lr}
 8009b34:	b082      	sub	sp, #8
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f000 f9be 	bl	8009ec0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 8009b44:	4603      	mov	r3, r0
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8009b4e:	b480      	push	{r7}
 8009b50:	b083      	sub	sp, #12
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8009b58:	683b      	ldr	r3, [r7, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	601a      	str	r2, [r3, #0]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4618      	mov	r0, r3
 8009b64:	370c      	adds	r7, #12
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009b6e:	b5b0      	push	{r4, r5, r7, lr}
 8009b70:	b088      	sub	sp, #32
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607a      	str	r2, [r7, #4]
 8009b7a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f7f7 fb72 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009b82:	4604      	mov	r4, r0
 8009b84:	6838      	ldr	r0, [r7, #0]
 8009b86:	f7f7 fe5c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b8e:	f7f7 fb80 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009b92:	4603      	mov	r3, r0
 8009b94:	462a      	mov	r2, r5
 8009b96:	4621      	mov	r1, r4
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 f99f 	bl	8009edc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8009b9e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8009ba0:	69f8      	ldr	r0, [r7, #28]
 8009ba2:	f000 faed 	bl	800a180 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	f107 0010 	add.w	r0, r7, #16
 8009bac:	68ba      	ldr	r2, [r7, #8]
 8009bae:	68f9      	ldr	r1, [r7, #12]
 8009bb0:	f000 f9b7 	bl	8009f22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d007      	beq.n	8009bca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8009bba:	6939      	ldr	r1, [r7, #16]
 8009bbc:	697a      	ldr	r2, [r7, #20]
 8009bbe:	69fb      	ldr	r3, [r7, #28]
 8009bc0:	68f8      	ldr	r0, [r7, #12]
 8009bc2:	f000 faf0 	bl	800a1a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	e00b      	b.n	8009be2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8009bca:	69f9      	ldr	r1, [r7, #28]
 8009bcc:	68f8      	ldr	r0, [r7, #12]
 8009bce:	f000 f869 	bl	8009ca4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8009bd2:	693a      	ldr	r2, [r7, #16]
 8009bd4:	f107 0318 	add.w	r3, r7, #24
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 fb22 	bl	800a224 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009be0:	69bb      	ldr	r3, [r7, #24]
      }
 8009be2:	4618      	mov	r0, r3
 8009be4:	3720      	adds	r7, #32
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bdb0      	pop	{r4, r5, r7, pc}

08009bea <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	4618      	mov	r0, r3
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009c0a:	b480      	push	{r7}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	4618      	mov	r0, r3
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	61fb      	str	r3, [r7, #28]
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	61bb      	str	r3, [r7, #24]
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009c38:	f7f6 fb72 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8009c3c:	4603      	mov	r3, r0
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d003      	beq.n	8009c4a <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009c42:	69b8      	ldr	r0, [r7, #24]
 8009c44:	f016 fce6 	bl	8020614 <_ZdlPv>
	    return;
 8009c48:	e005      	b.n	8009c56 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8009c4a:	697a      	ldr	r2, [r7, #20]
 8009c4c:	69b9      	ldr	r1, [r7, #24]
 8009c4e:	69f8      	ldr	r0, [r7, #28]
 8009c50:	f000 fd64 	bl	800a71c <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	3720      	adds	r7, #32
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}

08009c5e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009c5e:	b480      	push	{r7}
 8009c60:	b083      	sub	sp, #12
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009c74:	b480      	push	{r7}
 8009c76:	b083      	sub	sp, #12
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	370c      	adds	r7, #12
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca2:	4770      	bx	lr

08009ca4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b082      	sub	sp, #8
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8009cae:	6839      	ldr	r1, [r7, #0]
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fac6 	bl	800a242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 fad7 	bl	800a26c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8009cbe:	bf00      	nop
 8009cc0:	3708      	adds	r7, #8
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}

08009cc6 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009cdc:	b590      	push	{r4, r7, lr}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009ce6:	6838      	ldr	r0, [r7, #0]
 8009ce8:	f7ff ffed 	bl	8009cc6 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009cec:	4603      	mov	r3, r0
 8009cee:	681c      	ldr	r4, [r3, #0]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4619      	mov	r1, r3
 8009cf4:	2004      	movs	r0, #4
 8009cf6:	f7f6 fb1b 	bl	8000330 <_ZnwjPv>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	601c      	str	r4, [r3, #0]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd90      	pop	{r4, r7, pc}

08009d06 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009d06:	b580      	push	{r7, lr}
 8009d08:	b084      	sub	sp, #16
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	60f8      	str	r0, [r7, #12]
 8009d0e:	60b9      	str	r1, [r7, #8]
 8009d10:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f7ff ffd7 	bl	8009cc6 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	68b8      	ldr	r0, [r7, #8]
 8009d1e:	f7ff ffdd 	bl	8009cdc <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8009d22:	bf00      	nop
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
	...

08009d2c <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009d2c:	b5b0      	push	{r4, r5, r7, lr}
 8009d2e:	b08c      	sub	sp, #48	; 0x30
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009d38:	4a39      	ldr	r2, [pc, #228]	; (8009e20 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	68f8      	ldr	r0, [r7, #12]
 8009d3e:	f000 faa7 	bl	800a290 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>
 8009d42:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	685b      	ldr	r3, [r3, #4]
 8009d4e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	f7ff fde9 	bl	8009928 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009d56:	4603      	mov	r3, r0
 8009d58:	617b      	str	r3, [r7, #20]
 8009d5a:	f107 0214 	add.w	r2, r7, #20
 8009d5e:	f107 0308 	add.w	r3, r7, #8
 8009d62:	4611      	mov	r1, r2
 8009d64:	4618      	mov	r0, r3
 8009d66:	f000 fada 	bl	800a31e <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d72:	4618      	mov	r0, r3
 8009d74:	f000 fae8 	bl	800a348 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>
 8009d78:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009d7a:	69fb      	ldr	r3, [r7, #28]
 8009d7c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009d7e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009d84:	69fa      	ldr	r2, [r7, #28]
 8009d86:	18d5      	adds	r5, r2, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f7ff ff9c 	bl	8009cc6 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	461a      	mov	r2, r3
 8009d92:	4629      	mov	r1, r5
 8009d94:	4620      	mov	r0, r4
 8009d96:	f7ff ffb6 	bl	8009d06 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009d9e:	f107 0308 	add.w	r3, r7, #8
 8009da2:	4618      	mov	r0, r3
 8009da4:	f7ff fbf0 	bl	8009588 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009da8:	4603      	mov	r3, r0
 8009daa:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 faf2 	bl	800a398 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009db4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009db6:	69fa      	ldr	r2, [r7, #28]
 8009db8:	4621      	mov	r1, r4
 8009dba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009dbc:	f000 fad8 	bl	800a370 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009dc0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	3304      	adds	r3, #4
 8009dc6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009dc8:	f107 0308 	add.w	r3, r7, #8
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff fbdb 	bl	8009588 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f000 fadd 	bl	800a398 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009dde:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009de0:	69ba      	ldr	r2, [r7, #24]
 8009de2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009de4:	4620      	mov	r0, r4
 8009de6:	f000 fac3 	bl	800a370 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009dea:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8009dec:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	689a      	ldr	r2, [r3, #8]
 8009df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009df4:	1ad3      	subs	r3, r2, r3
 8009df6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8009df8:	461a      	mov	r2, r3
 8009dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dfc:	f7ff fdd5 	bl	80099aa <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	69fa      	ldr	r2, [r7, #28]
 8009e04:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	441a      	add	r2, r3
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	609a      	str	r2, [r3, #8]
    }
 8009e18:	bf00      	nop
 8009e1a:	3730      	adds	r7, #48	; 0x30
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8009e20:	08020cb0 	.word	0x08020cb0

08009e24 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f7ff fd8b 	bl	8009948 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009e32:	4603      	mov	r3, r0
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	f107 030c 	add.w	r3, r7, #12
 8009e3a:	2101      	movs	r1, #1
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 fac4 	bl	800a3ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>
 8009e42:	4603      	mov	r3, r0
 8009e44:	60bb      	str	r3, [r7, #8]
 8009e46:	f107 0308 	add.w	r3, r7, #8
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff fbcf 	bl	80095ee <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 8009e50:	4603      	mov	r3, r0
      }
 8009e52:	4618      	mov	r0, r3
 8009e54:	3710      	adds	r7, #16
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8009e5a:	b590      	push	{r4, r7, lr}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f7ff fdde 	bl	8009a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8009e6a:	4604      	mov	r4, r0
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 fac5 	bl	800a3fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8009e72:	4602      	mov	r2, r0
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	4621      	mov	r1, r4
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 facb 	bl	800a414 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	4618      	mov	r0, r3
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd90      	pop	{r4, r7, pc}

08009e88 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	1d1a      	adds	r2, r3, #4
 8009e94:	f107 030c 	add.w	r3, r7, #12
 8009e98:	4611      	mov	r1, r2
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f9c2 	bl	800a224 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8009eb2:	bf00      	nop
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	370c      	adds	r7, #12
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr()
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b082      	sub	sp, #8
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	3310      	adds	r3, #16
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 fad4 	bl	800a47a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3708      	adds	r7, #8
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009edc:	b5b0      	push	{r4, r5, r7, lr}
 8009ede:	b088      	sub	sp, #32
 8009ee0:	af02      	add	r7, sp, #8
 8009ee2:	60f8      	str	r0, [r7, #12]
 8009ee4:	60b9      	str	r1, [r7, #8]
 8009ee6:	607a      	str	r2, [r7, #4]
 8009ee8:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fad1 	bl	800a492 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8009ef0:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8009ef2:	68b8      	ldr	r0, [r7, #8]
 8009ef4:	f7f7 f9b7 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009ef8:	4604      	mov	r4, r0
 8009efa:	6878      	ldr	r0, [r7, #4]
 8009efc:	f7f7 fca1 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009f00:	4605      	mov	r5, r0
 8009f02:	6838      	ldr	r0, [r7, #0]
 8009f04:	f7f7 f9c5 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	462b      	mov	r3, r5
 8009f0e:	4622      	mov	r2, r4
 8009f10:	6979      	ldr	r1, [r7, #20]
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 face 	bl	800a4b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8009f18:	697b      	ldr	r3, [r7, #20]
	}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bdb0      	pop	{r4, r5, r7, pc}

08009f22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009f22:	b5b0      	push	{r4, r5, r7, lr}
 8009f24:	b08c      	sub	sp, #48	; 0x30
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
 8009f2e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8009f30:	1d3b      	adds	r3, r7, #4
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 faeb 	bl	800a50e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8009f3c:	69bc      	ldr	r4, [r7, #24]
 8009f3e:	68b8      	ldr	r0, [r7, #8]
 8009f40:	f000 fa5c 	bl	800a3fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8009f44:	4603      	mov	r3, r0
 8009f46:	429c      	cmp	r4, r3
 8009f48:	bf0c      	ite	eq
 8009f4a:	2301      	moveq	r3, #1
 8009f4c:	2300      	movne	r3, #0
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d032      	beq.n	8009fba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8009f54:	68b8      	ldr	r0, [r7, #8]
 8009f56:	f000 faeb 	bl	800a530 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8009f5a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d015      	beq.n	8009f8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8009f60:	68bc      	ldr	r4, [r7, #8]
 8009f62:	68b8      	ldr	r0, [r7, #8]
 8009f64:	f000 faf0 	bl	800a548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	f000 faf7 	bl	800a560 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009f72:	4603      	mov	r3, r0
 8009f74:	6819      	ldr	r1, [r3, #0]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	4620      	mov	r0, r4
 8009f7e:	f7f6 ffac 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e000      	b.n	8009f8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8009f8c:	2300      	movs	r3, #0
	  if (size() > 0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00c      	beq.n	8009fac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8009f92:	2300      	movs	r3, #0
 8009f94:	61fb      	str	r3, [r7, #28]
 8009f96:	68b8      	ldr	r0, [r7, #8]
 8009f98:	f000 fad6 	bl	800a548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8009f9c:	4602      	mov	r2, r0
 8009f9e:	f107 031c 	add.w	r3, r7, #28
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f7f7 ff7f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8009faa:	e0e5      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	68b9      	ldr	r1, [r7, #8]
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f000 fae0 	bl	800a578 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8009fb8:	e0de      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8009fba:	68bc      	ldr	r4, [r7, #8]
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681d      	ldr	r5, [r3, #0]
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	f000 facc 	bl	800a560 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	4629      	mov	r1, r5
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	f7f6 ff82 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d059      	beq.n	800a090 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8009fe0:	69bc      	ldr	r4, [r7, #24]
 8009fe2:	68b8      	ldr	r0, [r7, #8]
 8009fe4:	f000 fb52 	bl	800a68c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	429c      	cmp	r4, r3
 8009fee:	bf0c      	ite	eq
 8009ff0:	2301      	moveq	r3, #1
 8009ff2:	2300      	movne	r3, #0
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d00d      	beq.n	800a016 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8009ffa:	68b8      	ldr	r0, [r7, #8]
 8009ffc:	f000 fb46 	bl	800a68c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a000:	4604      	mov	r4, r0
 800a002:	68b8      	ldr	r0, [r7, #8]
 800a004:	f000 fb42 	bl	800a68c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a008:	4603      	mov	r3, r0
 800a00a:	461a      	mov	r2, r3
 800a00c:	4621      	mov	r1, r4
 800a00e:	68f8      	ldr	r0, [r7, #12]
 800a010:	f7f7 fff6 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a014:	e0b0      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800a016:	68bc      	ldr	r4, [r7, #8]
 800a018:	f107 0314 	add.w	r3, r7, #20
 800a01c:	4618      	mov	r0, r3
 800a01e:	f000 fb41 	bl	800a6a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
 800a022:	4603      	mov	r3, r0
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fa9a 	bl	800a560 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a02c:	4603      	mov	r3, r0
 800a02e:	6819      	ldr	r1, [r3, #0]
 800a030:	683b      	ldr	r3, [r7, #0]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	461a      	mov	r2, r3
 800a036:	4620      	mov	r0, r4
 800a038:	f7f6 ff4f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a03c:	4603      	mov	r3, r0
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d01f      	beq.n	800a082 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	4618      	mov	r0, r3
 800a046:	f7ff fe15 	bl	8009c74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	bf0c      	ite	eq
 800a050:	2301      	moveq	r3, #1
 800a052:	2300      	movne	r3, #0
 800a054:	b2db      	uxtb	r3, r3
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 800a05a:	2300      	movs	r3, #0
 800a05c:	623b      	str	r3, [r7, #32]
 800a05e:	f107 0214 	add.w	r2, r7, #20
 800a062:	f107 0320 	add.w	r3, r7, #32
 800a066:	4619      	mov	r1, r3
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f7f7 ff1d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a06e:	e083      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800a070:	f107 0218 	add.w	r2, r7, #24
 800a074:	f107 0318 	add.w	r3, r7, #24
 800a078:	4619      	mov	r1, r3
 800a07a:	68f8      	ldr	r0, [r7, #12]
 800a07c:	f7f7 ffc0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a080:	e07a      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	683a      	ldr	r2, [r7, #0]
 800a086:	68b9      	ldr	r1, [r7, #8]
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 fa75 	bl	800a578 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a08e:	e073      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800a090:	68bc      	ldr	r4, [r7, #8]
 800a092:	69bb      	ldr	r3, [r7, #24]
 800a094:	4618      	mov	r0, r3
 800a096:	f000 fa63 	bl	800a560 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a09a:	4603      	mov	r3, r0
 800a09c:	6819      	ldr	r1, [r3, #0]
 800a09e:	683b      	ldr	r3, [r7, #0]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	4620      	mov	r0, r4
 800a0a6:	f7f6 ff18 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d059      	beq.n	800a164 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800a0b4:	69bc      	ldr	r4, [r7, #24]
 800a0b6:	68b8      	ldr	r0, [r7, #8]
 800a0b8:	f000 fa46 	bl	800a548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a0bc:	4603      	mov	r3, r0
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	429c      	cmp	r4, r3
 800a0c2:	bf0c      	ite	eq
 800a0c4:	2301      	moveq	r3, #1
 800a0c6:	2300      	movne	r3, #0
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d00c      	beq.n	800a0e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800a0d2:	68b8      	ldr	r0, [r7, #8]
 800a0d4:	f000 fa38 	bl	800a548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a0d8:	4602      	mov	r2, r0
 800a0da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a0de:	4619      	mov	r1, r3
 800a0e0:	68f8      	ldr	r0, [r7, #12]
 800a0e2:	f7f7 fee1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a0e6:	e047      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800a0e8:	68bc      	ldr	r4, [r7, #8]
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	681d      	ldr	r5, [r3, #0]
 800a0ee:	f107 0310 	add.w	r3, r7, #16
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	f000 fae7 	bl	800a6c6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f000 fa2f 	bl	800a560 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a102:	4603      	mov	r3, r0
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	461a      	mov	r2, r3
 800a108:	4629      	mov	r1, r5
 800a10a:	4620      	mov	r0, r4
 800a10c:	f7f6 fee5 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a110:	4603      	mov	r3, r0
 800a112:	2b00      	cmp	r3, #0
 800a114:	d01f      	beq.n	800a156 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 800a116:	69bb      	ldr	r3, [r7, #24]
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff fdab 	bl	8009c74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	bf0c      	ite	eq
 800a124:	2301      	moveq	r3, #1
 800a126:	2300      	movne	r3, #0
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00a      	beq.n	800a144 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800a12e:	2300      	movs	r3, #0
 800a130:	62bb      	str	r3, [r7, #40]	; 0x28
 800a132:	f107 0218 	add.w	r2, r7, #24
 800a136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a13a:	4619      	mov	r1, r3
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7f7 feb3 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a142:	e019      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 800a144:	f107 0210 	add.w	r2, r7, #16
 800a148:	f107 0310 	add.w	r3, r7, #16
 800a14c:	4619      	mov	r1, r3
 800a14e:	68f8      	ldr	r0, [r7, #12]
 800a150:	f7f7 ff56 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a154:	e010      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	683a      	ldr	r2, [r7, #0]
 800a15a:	68b9      	ldr	r1, [r7, #8]
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 fa0b 	bl	800a578 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a162:	e009      	b.n	800a178 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 800a164:	2300      	movs	r3, #0
 800a166:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a168:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a16c:	f107 0318 	add.w	r3, r7, #24
 800a170:	4619      	mov	r1, r3
 800a172:	68f8      	ldr	r0, [r7, #12]
 800a174:	f7f7 ff7f 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	3730      	adds	r7, #48	; 0x30
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bdb0      	pop	{r4, r5, r7, pc}

0800a180 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800a180:	b580      	push	{r7, lr}
 800a182:	b084      	sub	sp, #16
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 faad 	bl	800a6e8 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a18e:	4602      	mov	r2, r0
 800a190:	f107 030c 	add.w	r3, r7, #12
 800a194:	4611      	mov	r1, r2
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fab4 	bl	800a704 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>
 800a19c:	4603      	mov	r3, r0
      }
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a1a6:	b5b0      	push	{r4, r5, r7, lr}
 800a1a8:	b086      	sub	sp, #24
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	60f8      	str	r0, [r7, #12]
 800a1ae:	60b9      	str	r1, [r7, #8]
 800a1b0:	607a      	str	r2, [r7, #4]
 800a1b2:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d119      	bne.n	800a1ee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 f91e 	bl	800a3fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d012      	beq.n	800a1ee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 800a1c8:	68fc      	ldr	r4, [r7, #12]
 800a1ca:	6838      	ldr	r0, [r7, #0]
 800a1cc:	f7ff ffd8 	bl	800a180 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 f9c3 	bl	800a560 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a1da:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	4629      	mov	r1, r5
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f7f6 fe79 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	e000      	b.n	800a1f4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 800a1f2:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a1f4:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800a1fa:	7df8      	ldrb	r0, [r7, #23]
 800a1fc:	687a      	ldr	r2, [r7, #4]
 800a1fe:	6839      	ldr	r1, [r7, #0]
 800a200:	f016 fa78 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	695b      	ldr	r3, [r3, #20]
 800a208:	1c5a      	adds	r2, r3, #1
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800a20e:	f107 0310 	add.w	r3, r7, #16
 800a212:	6839      	ldr	r1, [r7, #0]
 800a214:	4618      	mov	r0, r3
 800a216:	f000 f805 	bl	800a224 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a21a:	693b      	ldr	r3, [r7, #16]
    }
 800a21c:	4618      	mov	r0, r3
 800a21e:	3718      	adds	r7, #24
 800a220:	46bd      	mov	sp, r7
 800a222:	bdb0      	pop	{r4, r5, r7, pc}

0800a224 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
 800a22c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	683a      	ldr	r2, [r7, #0]
 800a232:	601a      	str	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4618      	mov	r0, r3
 800a238:	370c      	adds	r7, #12
 800a23a:	46bd      	mov	sp, r7
 800a23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a240:	4770      	bx	lr

0800a242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a242:	b590      	push	{r4, r7, lr}
 800a244:	b083      	sub	sp, #12
 800a246:	af00      	add	r7, sp, #0
 800a248:	6078      	str	r0, [r7, #4]
 800a24a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a24c:	6878      	ldr	r0, [r7, #4]
 800a24e:	f000 fa74 	bl	800a73a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a252:	4604      	mov	r4, r0
 800a254:	6838      	ldr	r0, [r7, #0]
 800a256:	f7ff fe33 	bl	8009ec0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a25a:	4603      	mov	r3, r0
 800a25c:	4619      	mov	r1, r3
 800a25e:	4620      	mov	r0, r4
 800a260:	f000 fa76 	bl	800a750 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>
      }
 800a264:	bf00      	nop
 800a266:	370c      	adds	r7, #12
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd90      	pop	{r4, r7, pc}

0800a26c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 fa5f 	bl	800a73a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2201      	movs	r2, #1
 800a280:	6839      	ldr	r1, [r7, #0]
 800a282:	4618      	mov	r0, r3
 800a284:	f000 fa70 	bl	800a768 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>
 800a288:	bf00      	nop
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}

0800a290 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a290:	b590      	push	{r4, r7, lr}
 800a292:	b087      	sub	sp, #28
 800a294:	af00      	add	r7, sp, #0
 800a296:	60f8      	str	r0, [r7, #12]
 800a298:	60b9      	str	r1, [r7, #8]
 800a29a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a29c:	68f8      	ldr	r0, [r7, #12]
 800a29e:	f000 fa82 	bl	800a7a6 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a2a2:	4604      	mov	r4, r0
 800a2a4:	68f8      	ldr	r0, [r7, #12]
 800a2a6:	f000 fa8f 	bl	800a7c8 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	1ae2      	subs	r2, r4, r3
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	bf34      	ite	cc
 800a2b4:	2301      	movcc	r3, #1
 800a2b6:	2300      	movcs	r3, #0
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d002      	beq.n	800a2c4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f016 fa76 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a2c4:	68f8      	ldr	r0, [r7, #12]
 800a2c6:	f000 fa7f 	bl	800a7c8 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	68f8      	ldr	r0, [r7, #12]
 800a2ce:	f000 fa7b 	bl	800a7c8 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	613b      	str	r3, [r7, #16]
 800a2d6:	f107 0208 	add.w	r2, r7, #8
 800a2da:	f107 0310 	add.w	r3, r7, #16
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7f8 fab6 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4423      	add	r3, r4
 800a2ec:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a2ee:	68f8      	ldr	r0, [r7, #12]
 800a2f0:	f000 fa6a 	bl	800a7c8 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d306      	bcc.n	800a30a <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800a2fc:	68f8      	ldr	r0, [r7, #12]
 800a2fe:	f000 fa52 	bl	800a7a6 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a302:	4602      	mov	r2, r0
 800a304:	697b      	ldr	r3, [r7, #20]
 800a306:	4293      	cmp	r3, r2
 800a308:	d904      	bls.n	800a314 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x84>
 800a30a:	68f8      	ldr	r0, [r7, #12]
 800a30c:	f000 fa4b 	bl	800a7a6 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a310:	4603      	mov	r3, r0
 800a312:	e000      	b.n	800a316 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x86>
 800a314:	697b      	ldr	r3, [r7, #20]
      }
 800a316:	4618      	mov	r0, r3
 800a318:	371c      	adds	r7, #28
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd90      	pop	{r4, r7, pc}

0800a31e <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a31e:	b590      	push	{r4, r7, lr}
 800a320:	b083      	sub	sp, #12
 800a322:	af00      	add	r7, sp, #0
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a328:	6878      	ldr	r0, [r7, #4]
 800a32a:	f7ff f92d 	bl	8009588 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a32e:	4603      	mov	r3, r0
 800a330:	681c      	ldr	r4, [r3, #0]
 800a332:	6838      	ldr	r0, [r7, #0]
 800a334:	f7ff f928 	bl	8009588 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a338:	4603      	mov	r3, r0
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	1ae3      	subs	r3, r4, r3
 800a33e:	109b      	asrs	r3, r3, #2
 800a340:	4618      	mov	r0, r3
 800a342:	370c      	adds	r7, #12
 800a344:	46bd      	mov	sp, r7
 800a346:	bd90      	pop	{r4, r7, pc}

0800a348 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d006      	beq.n	800a366 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x1e>
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	6839      	ldr	r1, [r7, #0]
 800a35c:	4618      	mov	r0, r3
 800a35e:	f000 fa43 	bl	800a7e8 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>
 800a362:	4603      	mov	r3, r0
 800a364:	e000      	b.n	800a368 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x20>
 800a366:	2300      	movs	r3, #0
      }
 800a368:	4618      	mov	r0, r3
 800a36a:	3708      	adds	r7, #8
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a370:	b590      	push	{r4, r7, lr}
 800a372:	b087      	sub	sp, #28
 800a374:	af02      	add	r7, sp, #8
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a37e:	f88d 4000 	strb.w	r4, [sp]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	68b9      	ldr	r1, [r7, #8]
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 fa4d 	bl	800a828 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800a38e:	4603      	mov	r3, r0
      }
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	bd90      	pop	{r4, r7, pc}

0800a398 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a3ba:	68b9      	ldr	r1, [r7, #8]
 800a3bc:	68f8      	ldr	r0, [r7, #12]
 800a3be:	f000 fa4f 	bl	800a860 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>
    }
 800a3c2:	bf00      	nop
 800a3c4:	3710      	adds	r7, #16
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}

0800a3ca <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a3ca:	b580      	push	{r7, lr}
 800a3cc:	b084      	sub	sp, #16
 800a3ce:	af00      	add	r7, sp, #0
 800a3d0:	6078      	str	r0, [r7, #4]
 800a3d2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	425b      	negs	r3, r3
 800a3de:	4413      	add	r3, r2
 800a3e0:	60fb      	str	r3, [r7, #12]
 800a3e2:	f107 020c 	add.w	r2, r7, #12
 800a3e6:	f107 0308 	add.w	r3, r7, #8
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff fbfc 	bl	8009bea <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3304      	adds	r3, #4
 800a408:	4618      	mov	r0, r3
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a414:	b590      	push	{r4, r7, lr}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d01d      	beq.n	800a464 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800a428:	68fc      	ldr	r4, [r7, #12]
 800a42a:	68b8      	ldr	r0, [r7, #8]
 800a42c:	f7ff fea8 	bl	800a180 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a430:	4603      	mov	r3, r0
 800a432:	6819      	ldr	r1, [r3, #0]
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	4620      	mov	r0, r4
 800a43c:	f7f6 fd4d 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a440:	4603      	mov	r3, r0
 800a442:	f083 0301 	eor.w	r3, r3, #1
 800a446:	b2db      	uxtb	r3, r3
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d006      	beq.n	800a45a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	607b      	str	r3, [r7, #4]
 800a450:	68b8      	ldr	r0, [r7, #8]
 800a452:	f7ff fc1b 	bl	8009c8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a456:	60b8      	str	r0, [r7, #8]
 800a458:	e7e3      	b.n	800a422 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 800a45a:	68b8      	ldr	r0, [r7, #8]
 800a45c:	f7ff fc0a 	bl	8009c74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a460:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800a462:	e7de      	b.n	800a422 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 800a464:	f107 0314 	add.w	r3, r7, #20
 800a468:	6879      	ldr	r1, [r7, #4]
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7ff feda 	bl	800a224 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a470:	697b      	ldr	r3, [r7, #20]
    }
 800a472:	4618      	mov	r0, r3
 800a474:	371c      	adds	r7, #28
 800a476:	46bd      	mov	sp, r7
 800a478:	bd90      	pop	{r4, r7, pc}

0800a47a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() noexcept
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b082      	sub	sp, #8
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f000 fa02 	bl	800a88c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800a488:	4603      	mov	r3, r0
 800a48a:	4618      	mov	r0, r3
 800a48c:	3708      	adds	r7, #8
 800a48e:	46bd      	mov	sp, r7
 800a490:	bd80      	pop	{r7, pc}

0800a492 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800a492:	b580      	push	{r7, lr}
 800a494:	b082      	sub	sp, #8
 800a496:	af00      	add	r7, sp, #0
 800a498:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f000 f94d 	bl	800a73a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2101      	movs	r1, #1
 800a4a4:	4618      	mov	r0, r3
 800a4a6:	f000 f9fc 	bl	800a8a2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3708      	adds	r7, #8
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a4b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b8:	b086      	sub	sp, #24
 800a4ba:	af02      	add	r7, sp, #8
 800a4bc:	60f8      	str	r0, [r7, #12]
 800a4be:	60b9      	str	r1, [r7, #8]
 800a4c0:	607a      	str	r2, [r7, #4]
 800a4c2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	4619      	mov	r1, r3
 800a4c8:	2018      	movs	r0, #24
 800a4ca:	f7f5 ff31 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a4ce:	68f8      	ldr	r0, [r7, #12]
 800a4d0:	f000 f933 	bl	800a73a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	68b8      	ldr	r0, [r7, #8]
 800a4d8:	f7ff fcf2 	bl	8009ec0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a4dc:	4605      	mov	r5, r0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7f6 fec1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a4e4:	4606      	mov	r6, r0
 800a4e6:	6838      	ldr	r0, [r7, #0]
 800a4e8:	f7f7 f9ab 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a4ec:	4680      	mov	r8, r0
 800a4ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f0:	f7f6 fecf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	4643      	mov	r3, r8
 800a4fa:	4632      	mov	r2, r6
 800a4fc:	4629      	mov	r1, r5
 800a4fe:	4620      	mov	r0, r4
 800a500:	f000 fa1c 	bl	800a93c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 800a504:	bf00      	nop
 800a506:	3710      	adds	r7, #16
 800a508:	46bd      	mov	sp, r7
 800a50a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a50e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800a50e:	b580      	push	{r7, lr}
 800a510:	b084      	sub	sp, #16
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	f107 030c 	add.w	r3, r7, #12
 800a51e:	4611      	mov	r1, r2
 800a520:	4618      	mov	r0, r3
 800a522:	f7ff fe7f 	bl	800a224 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	695b      	ldr	r3, [r3, #20]
 800a53c:	4618      	mov	r0, r3
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800a548:	b480      	push	{r7}
 800a54a:	b083      	sub	sp, #12
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3310      	adds	r3, #16
 800a554:	4618      	mov	r0, r3
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800a560:	b580      	push	{r7, lr}
 800a562:	b082      	sub	sp, #8
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff fe09 	bl	800a180 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a56e:	4603      	mov	r3, r0
 800a570:	4618      	mov	r0, r3
 800a572:	3708      	adds	r7, #8
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a578:	b5b0      	push	{r4, r5, r7, lr}
 800a57a:	b08a      	sub	sp, #40	; 0x28
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	60f8      	str	r0, [r7, #12]
 800a580:	60b9      	str	r1, [r7, #8]
 800a582:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800a584:	68b8      	ldr	r0, [r7, #8]
 800a586:	f7ff fa4e 	bl	8009a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a58a:	4603      	mov	r3, r0
 800a58c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800a58e:	68b8      	ldr	r0, [r7, #8]
 800a590:	f7ff ff34 	bl	800a3fc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a594:	4603      	mov	r3, r0
 800a596:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800a598:	2301      	movs	r3, #1
 800a59a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800a59e:	69bb      	ldr	r3, [r7, #24]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d023      	beq.n	800a5ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 800a5a4:	69bb      	ldr	r3, [r7, #24]
 800a5a6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800a5a8:	68bc      	ldr	r4, [r7, #8]
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681d      	ldr	r5, [r3, #0]
 800a5ae:	69bb      	ldr	r3, [r7, #24]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff fde5 	bl	800a180 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	4629      	mov	r1, r5
 800a5be:	4620      	mov	r0, r4
 800a5c0:	f7f6 fc8b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a5c4:	4603      	mov	r3, r0
 800a5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800a5ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d005      	beq.n	800a5de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800a5d2:	69bb      	ldr	r3, [r7, #24]
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7ff fb59 	bl	8009c8c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	e004      	b.n	800a5e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff fb47 	bl	8009c74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800a5ea:	e7d8      	b.n	800a59e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800a5ec:	697a      	ldr	r2, [r7, #20]
 800a5ee:	f107 0310 	add.w	r3, r7, #16
 800a5f2:	4611      	mov	r1, r2
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	f7ff fe15 	bl	800a224 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800a5fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d01d      	beq.n	800a63e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800a602:	68b8      	ldr	r0, [r7, #8]
 800a604:	f000 f9b6 	bl	800a974 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800a608:	4603      	mov	r3, r0
 800a60a:	61fb      	str	r3, [r7, #28]
 800a60c:	f107 021c 	add.w	r2, r7, #28
 800a610:	f107 0310 	add.w	r3, r7, #16
 800a614:	4611      	mov	r1, r2
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fa6a 	bl	8009af0 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800a61c:	4603      	mov	r3, r0
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d008      	beq.n	800a634 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800a622:	f107 0214 	add.w	r2, r7, #20
 800a626:	f107 0318 	add.w	r3, r7, #24
 800a62a:	4619      	mov	r1, r3
 800a62c:	68f8      	ldr	r0, [r7, #12]
 800a62e:	f000 f9b2 	bl	800a996 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a632:	e027      	b.n	800a684 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 800a634:	f107 0310 	add.w	r3, r7, #16
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 f833 	bl	800a6a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800a63e:	68bc      	ldr	r4, [r7, #8]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff ff8c 	bl	800a560 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a648:	4603      	mov	r3, r0
 800a64a:	6819      	ldr	r1, [r3, #0]
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	461a      	mov	r2, r3
 800a652:	4620      	mov	r0, r4
 800a654:	f7f6 fc41 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d008      	beq.n	800a670 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800a65e:	f107 0214 	add.w	r2, r7, #20
 800a662:	f107 0318 	add.w	r3, r7, #24
 800a666:	4619      	mov	r1, r3
 800a668:	68f8      	ldr	r0, [r7, #12]
 800a66a:	f000 f994 	bl	800a996 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a66e:	e009      	b.n	800a684 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800a670:	2300      	movs	r3, #0
 800a672:	623b      	str	r3, [r7, #32]
 800a674:	f107 0220 	add.w	r2, r7, #32
 800a678:	f107 0310 	add.w	r3, r7, #16
 800a67c:	4619      	mov	r1, r3
 800a67e:	68f8      	ldr	r0, [r7, #12]
 800a680:	f7f7 fcf9 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a684:	68f8      	ldr	r0, [r7, #12]
 800a686:	3728      	adds	r7, #40	; 0x28
 800a688:	46bd      	mov	sp, r7
 800a68a:	bdb0      	pop	{r4, r5, r7, pc}

0800a68c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800a68c:	b480      	push	{r7}
 800a68e:	b083      	sub	sp, #12
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	330c      	adds	r3, #12
 800a698:	4618      	mov	r0, r3
 800a69a:	370c      	adds	r7, #12
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b082      	sub	sp, #8
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f016 f81d 	bl	80206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	601a      	str	r2, [r3, #0]
	return *this;
 800a6bc:	687b      	ldr	r3, [r7, #4]
      }
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3708      	adds	r7, #8
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b082      	sub	sp, #8
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f016 f80a 	bl	80206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	601a      	str	r2, [r3, #0]
	return *this;
 800a6de:	687b      	ldr	r3, [r7, #4]
      }
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr() const
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	3310      	adds	r3, #16
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 f967 	bl	800a9c8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>:
      operator()(const _Pair& __x) const
 800a704:	b480      	push	{r7}
 800a706:	b083      	sub	sp, #12
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	4618      	mov	r0, r3
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	009b      	lsls	r3, r3, #2
 800a72c:	4619      	mov	r1, r3
 800a72e:	68b8      	ldr	r0, [r7, #8]
 800a730:	f015 ff72 	bl	8020618 <_ZdlPvj>
      }
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a73a:	b480      	push	{r7}
 800a73c:	b083      	sub	sp, #12
 800a73e:	af00      	add	r7, sp, #0
 800a740:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a750:	b580      	push	{r7, lr}
 800a752:	b082      	sub	sp, #8
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a75a:	6838      	ldr	r0, [r7, #0]
 800a75c:	f000 f940 	bl	800a9e0 <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>
	}
 800a760:	bf00      	nop
 800a762:	3708      	adds	r7, #8
 800a764:	46bd      	mov	sp, r7
 800a766:	bd80      	pop	{r7, pc}

0800a768 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a768:	b580      	push	{r7, lr}
 800a76a:	b088      	sub	sp, #32
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	60f8      	str	r0, [r7, #12]
 800a770:	60b9      	str	r1, [r7, #8]
 800a772:	607a      	str	r2, [r7, #4]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	61fb      	str	r3, [r7, #28]
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	61bb      	str	r3, [r7, #24]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a780:	f7f5 fdce 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d003      	beq.n	800a792 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800a78a:	69b8      	ldr	r0, [r7, #24]
 800a78c:	f015 ff42 	bl	8020614 <_ZdlPv>
	    return;
 800a790:	e005      	b.n	800a79e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a792:	697a      	ldr	r2, [r7, #20]
 800a794:	69b9      	ldr	r1, [r7, #24]
 800a796:	69f8      	ldr	r0, [r7, #28]
 800a798:	f000 f9e1 	bl	800ab5e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800a79c:	bf00      	nop
 800a79e:	bf00      	nop
 800a7a0:	3720      	adds	r7, #32
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}

0800a7a6 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a7a6:	b580      	push	{r7, lr}
 800a7a8:	b082      	sub	sp, #8
 800a7aa:	af00      	add	r7, sp, #0
 800a7ac:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 f945 	bl	800aa40 <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	f000 f927 	bl	800aa0c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>
 800a7be:	4603      	mov	r3, r0
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	685a      	ldr	r2, [r3, #4]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	109b      	asrs	r3, r3, #2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a7fa:	f7f5 fd91 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a7fe:	4603      	mov	r3, r0
 800a800:	2b00      	cmp	r3, #0
 800a802:	d006      	beq.n	800a812 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	4618      	mov	r0, r3
 800a80a:	f015 ff07 	bl	802061c <_Znwj>
 800a80e:	4603      	mov	r3, r0
 800a810:	e006      	b.n	800a820 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a812:	2200      	movs	r2, #0
 800a814:	68b9      	ldr	r1, [r7, #8]
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f000 f9b3 	bl	800ab82 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>
 800a81c:	4603      	mov	r3, r0
 800a81e:	bf00      	nop
      { return __a.allocate(__n); }
 800a820:	4618      	mov	r0, r3
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}

0800a828 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	60b9      	str	r1, [r7, #8]
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	687a      	ldr	r2, [r7, #4]
 800a83a:	68b9      	ldr	r1, [r7, #8]
 800a83c:	68f8      	ldr	r0, [r7, #12]
 800a83e:	f000 f90a 	bl	800aa56 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 800a842:	4603      	mov	r3, r0
      }
 800a844:	4618      	mov	r0, r3
 800a846:	3710      	adds	r7, #16
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}

0800a84c <_ZSt10destroy_atIP12InputCaptureEvPT_>:
    destroy_at(_Tp* __location)
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
    }
 800a854:	bf00      	nop
 800a856:	370c      	adds	r7, #12
 800a858:	46bd      	mov	sp, r7
 800a85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a85e:	4770      	bx	lr

0800a860 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a860:	b580      	push	{r7, lr}
 800a862:	b082      	sub	sp, #8
 800a864:	af00      	add	r7, sp, #0
 800a866:	6078      	str	r0, [r7, #4]
 800a868:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a86a:	f7f5 fd59 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d004      	beq.n	800a87e <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a874:	6839      	ldr	r1, [r7, #0]
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f90a 	bl	800aa90 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>
 800a87c:	e003      	b.n	800a886 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x26>
	__destroy(__first, __last);
 800a87e:	6839      	ldr	r1, [r7, #0]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 f91d 	bl	800aac0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>
    }
 800a886:	3708      	adds	r7, #8
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() noexcept
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	4618      	mov	r0, r3
 800a898:	370c      	adds	r7, #12
 800a89a:	46bd      	mov	sp, r7
 800a89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a0:	4770      	bx	lr

0800a8a2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
 800a8aa:	6039      	str	r1, [r7, #0]
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a8b4:	f7f5 fd34 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d009      	beq.n	800a8d2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a8be:	68ba      	ldr	r2, [r7, #8]
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	4413      	add	r3, r2
 800a8c6:	00db      	lsls	r3, r3, #3
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f015 fea7 	bl	802061c <_Znwj>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	e006      	b.n	800a8e0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f000 f9b1 	bl	800ac3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	bf00      	nop
      { return __a.allocate(__n); }
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a8e8:	b5b0      	push	{r4, r5, r7, lr}
 800a8ea:	b088      	sub	sp, #32
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	60f8      	str	r0, [r7, #12]
 800a8f0:	60b9      	str	r1, [r7, #8]
 800a8f2:	607a      	str	r2, [r7, #4]
 800a8f4:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a8f6:	68b8      	ldr	r0, [r7, #8]
 800a8f8:	f7f6 fcb5 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a8fc:	6878      	ldr	r0, [r7, #4]
 800a8fe:	f7f6 ffa0 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a902:	4602      	mov	r2, r0
 800a904:	f107 0318 	add.w	r3, r7, #24
 800a908:	4611      	mov	r1, r2
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7f8 f835 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800a910:	f107 0418 	add.w	r4, r7, #24
 800a914:	6838      	ldr	r0, [r7, #0]
 800a916:	f7f6 fcbc 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	4619      	mov	r1, r3
 800a91e:	2008      	movs	r0, #8
 800a920:	f7f5 fd06 	bl	8000330 <_ZnwjPv>
 800a924:	4605      	mov	r5, r0
 800a926:	7f3b      	ldrb	r3, [r7, #28]
 800a928:	4622      	mov	r2, r4
 800a92a:	7d39      	ldrb	r1, [r7, #20]
 800a92c:	4628      	mov	r0, r5
 800a92e:	f000 f8ec 	bl	800ab0a <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800a932:	462b      	mov	r3, r5
 800a934:	4618      	mov	r0, r3
 800a936:	3720      	adds	r7, #32
 800a938:	46bd      	mov	sp, r7
 800a93a:	bdb0      	pop	{r4, r5, r7, pc}

0800a93c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a93c:	b5b0      	push	{r4, r5, r7, lr}
 800a93e:	b084      	sub	sp, #16
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7f6 fc8b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a950:	4604      	mov	r4, r0
 800a952:	6838      	ldr	r0, [r7, #0]
 800a954:	f7f6 ff75 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a958:	4605      	mov	r5, r0
 800a95a:	6a38      	ldr	r0, [r7, #32]
 800a95c:	f7f6 fc99 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a960:	4603      	mov	r3, r0
 800a962:	462a      	mov	r2, r5
 800a964:	4621      	mov	r1, r4
 800a966:	68b8      	ldr	r0, [r7, #8]
 800a968:	f7ff ffbe 	bl	800a8e8 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800a96c:	bf00      	nop
 800a96e:	3710      	adds	r7, #16
 800a970:	46bd      	mov	sp, r7
 800a972:	bdb0      	pop	{r4, r5, r7, pc}

0800a974 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a974:	b580      	push	{r7, lr}
 800a976:	b084      	sub	sp, #16
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68da      	ldr	r2, [r3, #12]
 800a980:	f107 030c 	add.w	r3, r7, #12
 800a984:	4611      	mov	r1, r2
 800a986:	4618      	mov	r0, r3
 800a988:	f7ff fc4c 	bl	800a224 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4618      	mov	r0, r3
 800a990:	3710      	adds	r7, #16
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}

0800a996 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800a996:	b580      	push	{r7, lr}
 800a998:	b084      	sub	sp, #16
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	60f8      	str	r0, [r7, #12]
 800a99e:	60b9      	str	r1, [r7, #8]
 800a9a0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800a9a2:	68b8      	ldr	r0, [r7, #8]
 800a9a4:	f000 f8c5 	bl	800ab32 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	681a      	ldr	r2, [r3, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	601a      	str	r2, [r3, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f7f7 fefc 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	605a      	str	r2, [r3, #4]
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	3710      	adds	r7, #16
 800a9c4:	46bd      	mov	sp, r7
 800a9c6:	bd80      	pop	{r7, pc}

0800a9c8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f8b9 	bl	800ab48 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	4618      	mov	r0, r3
 800a9da:	3708      	adds	r7, #8
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>:
    destroy_at(_Tp* __location)
 800a9e0:	b480      	push	{r7}
 800a9e2:	b083      	sub	sp, #12
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
    }
 800a9e8:	bf00      	nop
 800a9ea:	370c      	adds	r7, #12
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9f2:	4770      	bx	lr

0800a9f4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800a9f4:	b480      	push	{r7}
 800a9f6:	b083      	sub	sp, #12
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800a9fc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800aa00:	4618      	mov	r0, r3
 800aa02:	370c      	adds	r7, #12
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800aa14:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800aa18:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f7ff ffea 	bl	800a9f4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>
 800aa20:	4603      	mov	r3, r0
 800aa22:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800aa24:	f107 0208 	add.w	r2, r7, #8
 800aa28:	f107 030c 	add.w	r3, r7, #12
 800aa2c:	4611      	mov	r1, r2
 800aa2e:	4618      	mov	r0, r3
 800aa30:	f7f8 f9d9 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800aa34:	4603      	mov	r3, r0
 800aa36:	681b      	ldr	r3, [r3, #0]
      }
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3710      	adds	r7, #16
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800aa40:	b480      	push	{r7}
 800aa42:	b083      	sub	sp, #12
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	370c      	adds	r7, #12
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa54:	4770      	bx	lr

0800aa56 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800aa56:	b5b0      	push	{r4, r5, r7, lr}
 800aa58:	b084      	sub	sp, #16
 800aa5a:	af00      	add	r7, sp, #0
 800aa5c:	60f8      	str	r0, [r7, #12]
 800aa5e:	60b9      	str	r1, [r7, #8]
 800aa60:	607a      	str	r2, [r7, #4]
 800aa62:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 f8ab 	bl	800abc0 <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800aa6a:	4604      	mov	r4, r0
 800aa6c:	68b8      	ldr	r0, [r7, #8]
 800aa6e:	f000 f8a7 	bl	800abc0 <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800aa72:	4605      	mov	r5, r0
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 f8a3 	bl	800abc0 <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800aa7a:	4602      	mov	r2, r0
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	4629      	mov	r1, r5
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 f8a8 	bl	800abd6 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800aa86:	4603      	mov	r3, r0
    }
 800aa88:	4618      	mov	r0, r3
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bdb0      	pop	{r4, r5, r7, pc}

0800aa90 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b082      	sub	sp, #8
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800aa9a:	687a      	ldr	r2, [r7, #4]
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	429a      	cmp	r2, r3
 800aaa0:	d00a      	beq.n	800aab8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f8b5 	bl	800ac12 <_ZSt11__addressofIP12InputCaptureEPT_RS2_>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 f8bc 	bl	800ac28 <_ZSt8_DestroyIP12InputCaptureEvPT_>
	  for (; __first != __last; ++__first)
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	3304      	adds	r3, #4
 800aab4:	607b      	str	r3, [r7, #4]
 800aab6:	e7f0      	b.n	800aa9a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0xa>
	}
 800aab8:	bf00      	nop
 800aaba:	3708      	adds	r7, #8
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800aac0:	b480      	push	{r7}
 800aac2:	b083      	sub	sp, #12
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	6039      	str	r1, [r7, #0]
 800aaca:	bf00      	nop
 800aacc:	370c      	adds	r7, #12
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800aad6:	b580      	push	{r7, lr}
 800aad8:	b084      	sub	sp, #16
 800aada:	af00      	add	r7, sp, #0
 800aadc:	60f8      	str	r0, [r7, #12]
 800aade:	60b9      	str	r1, [r7, #8]
 800aae0:	607a      	str	r2, [r7, #4]
 800aae2:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800aae4:	68b8      	ldr	r0, [r7, #8]
 800aae6:	f7f8 fa2a 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800aaea:	4603      	mov	r3, r0
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7f8 fa1b 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800aaf2:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	601a      	str	r2, [r3, #0]
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	2200      	movs	r2, #0
 800aafe:	605a      	str	r2, [r3, #4]
      { }
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	4618      	mov	r0, r3
 800ab04:	3710      	adds	r7, #16
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}

0800ab0a <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 800ab0a:	b5b0      	push	{r4, r5, r7, lr}
 800ab0c:	b086      	sub	sp, #24
 800ab0e:	af02      	add	r7, sp, #8
 800ab10:	60f8      	str	r0, [r7, #12]
 800ab12:	7239      	strb	r1, [r7, #8]
 800ab14:	607a      	str	r2, [r7, #4]
 800ab16:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800ab18:	463a      	mov	r2, r7
 800ab1a:	f88d 4000 	strb.w	r4, [sp]
 800ab1e:	462b      	mov	r3, r5
 800ab20:	6879      	ldr	r1, [r7, #4]
 800ab22:	68f8      	ldr	r0, [r7, #12]
 800ab24:	f7ff ffd7 	bl	800aad6 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	3710      	adds	r7, #16
 800ab2e:	46bd      	mov	sp, r7
 800ab30:	bdb0      	pop	{r4, r5, r7, pc}

0800ab32 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ab32:	b480      	push	{r7}
 800ab34:	b083      	sub	sp, #12
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	370c      	adds	r7, #12
 800ab40:	46bd      	mov	sp, r7
 800ab42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab46:	4770      	bx	lr

0800ab48 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() const noexcept
 800ab48:	b480      	push	{r7}
 800ab4a:	b083      	sub	sp, #12
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b084      	sub	sp, #16
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	60b9      	str	r1, [r7, #8]
 800ab68:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	005b      	lsls	r3, r3, #1
 800ab70:	4413      	add	r3, r2
 800ab72:	00db      	lsls	r3, r3, #3
 800ab74:	4619      	mov	r1, r3
 800ab76:	68b8      	ldr	r0, [r7, #8]
 800ab78:	f015 fd4e 	bl	8020618 <_ZdlPvj>
      }
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ab8e:	68f8      	ldr	r0, [r7, #12]
 800ab90:	f000 f877 	bl	800ac82 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 800ab94:	4602      	mov	r2, r0
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	bf8c      	ite	hi
 800ab9c:	2301      	movhi	r3, #1
 800ab9e:	2300      	movls	r3, #0
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800aba6:	f015 fe00 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	4618      	mov	r0, r3
 800abb0:	f015 fd34 	bl	802061c <_Znwj>
 800abb4:	4603      	mov	r3, r0
 800abb6:	bf00      	nop
      }
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <_ZSt12__niter_baseIPP12InputCaptureET_S3_>:
    __niter_base(_Iterator __it)
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4618      	mov	r0, r3
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd4:	4770      	bx	lr

0800abd6 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b086      	sub	sp, #24
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	607a      	str	r2, [r7, #4]
 800abe2:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1ad3      	subs	r3, r2, r3
 800abea:	109b      	asrs	r3, r3, #2
 800abec:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	dd06      	ble.n	800ac02 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	461a      	mov	r2, r3
 800abfa:	68f9      	ldr	r1, [r7, #12]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f015 fe47 	bl	8020890 <memmove>
      return __result + __count;
 800ac02:	697b      	ldr	r3, [r7, #20]
 800ac04:	009b      	lsls	r3, r3, #2
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	4413      	add	r3, r2
    }
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3718      	adds	r7, #24
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <_ZSt11__addressofIP12InputCaptureEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <_ZSt8_DestroyIP12InputCaptureEvPT_>:
    _Destroy(_Tp* __pointer)
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b082      	sub	sp, #8
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f7ff fe0b 	bl	800a84c <_ZSt10destroy_atIP12InputCaptureEvPT_>
    }
 800ac36:	bf00      	nop
 800ac38:	3708      	adds	r7, #8
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 f826 	bl	800ac9c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>
 800ac50:	4602      	mov	r2, r0
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	4293      	cmp	r3, r2
 800ac56:	bf8c      	ite	hi
 800ac58:	2301      	movhi	r3, #1
 800ac5a:	2300      	movls	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ac62:	f015 fda2 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac66:	68ba      	ldr	r2, [r7, #8]
 800ac68:	4613      	mov	r3, r2
 800ac6a:	005b      	lsls	r3, r3, #1
 800ac6c:	4413      	add	r3, r2
 800ac6e:	00db      	lsls	r3, r3, #3
 800ac70:	4618      	mov	r0, r3
 800ac72:	f015 fcd3 	bl	802061c <_Znwj>
 800ac76:	4603      	mov	r3, r0
 800ac78:	bf00      	nop
      }
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3710      	adds	r7, #16
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	bd80      	pop	{r7, pc}

0800ac82 <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ac82:	b480      	push	{r7}
 800ac84:	b083      	sub	sp, #12
 800ac86:	af00      	add	r7, sp, #0
 800ac88:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ac8a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800ac8e:	4618      	mov	r0, r3
 800ac90:	370c      	adds	r7, #12
 800ac92:	46bd      	mov	sp, r7
 800ac94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac98:	4770      	bx	lr
	...

0800ac9c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800aca4:	4b03      	ldr	r3, [pc, #12]	; (800acb4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv+0x18>)
      }
 800aca6:	4618      	mov	r0, r3
 800aca8:	370c      	adds	r7, #12
 800acaa:	46bd      	mov	sp, r7
 800acac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb0:	4770      	bx	lr
 800acb2:	bf00      	nop
 800acb4:	05555555 	.word	0x05555555

0800acb8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 800acb8:	b580      	push	{r7, lr}
 800acba:	b082      	sub	sp, #8
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fd86 	bl	80097d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	4618      	mov	r0, r3
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
	...

0800acd4 <_Z41__static_initialization_and_destruction_0ii>:
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b082      	sub	sp, #8
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	2b01      	cmp	r3, #1
 800ace2:	d10a      	bne.n	800acfa <_Z41__static_initialization_and_destruction_0ii+0x26>
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800acea:	4293      	cmp	r3, r2
 800acec:	d105      	bne.n	800acfa <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<InputCapture*> InputCapture::all_input_captures;
 800acee:	480c      	ldr	r0, [pc, #48]	; (800ad20 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800acf0:	f7fe fb72 	bl	80093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;
 800acf4:	480b      	ldr	r0, [pc, #44]	; (800ad24 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800acf6:	f7fe fb95 	bl	8009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d10a      	bne.n	800ad16 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad06:	4293      	cmp	r3, r2
 800ad08:	d105      	bne.n	800ad16 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800ad0a:	4806      	ldr	r0, [pc, #24]	; (800ad24 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ad0c:	f7ff ffd4 	bl	800acb8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<InputCapture*> InputCapture::all_input_captures;
 800ad10:	4803      	ldr	r0, [pc, #12]	; (800ad20 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ad12:	f000 f809 	bl	800ad28 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>
}
 800ad16:	bf00      	nop
 800ad18:	3708      	adds	r7, #8
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	24000158 	.word	0x24000158
 800ad24:	24000164 	.word	0x24000164

0800ad28 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800ad28:	b5b0      	push	{r4, r5, r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681c      	ldr	r4, [r3, #0]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4618      	mov	r0, r3
 800ad3c:	f7ff fb2c 	bl	800a398 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800ad40:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad42:	461a      	mov	r2, r3
 800ad44:	4629      	mov	r1, r5
 800ad46:	4620      	mov	r0, r4
 800ad48:	f7ff fb31 	bl	800a3ae <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      }
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fd07 	bl	8009762 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4618      	mov	r0, r3
 800ad58:	3708      	adds	r7, #8
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ad5e <_GLOBAL__sub_I__ZN12InputCapture18all_input_capturesE>:
 800ad5e:	b580      	push	{r7, lr}
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ad66:	2001      	movs	r0, #1
 800ad68:	f7ff ffb4 	bl	800acd4 <_Z41__static_initialization_and_destruction_0ii>
 800ad6c:	bd80      	pop	{r7, pc}

0800ad6e <_GLOBAL__sub_D__ZN12InputCapture18all_input_capturesE>:
 800ad6e:	b580      	push	{r7, lr}
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ad76:	2000      	movs	r0, #0
 800ad78:	f7ff ffac 	bl	800acd4 <_Z41__static_initialization_and_destruction_0ii>
 800ad7c:	bd80      	pop	{r7, pc}

0800ad7e <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ad7e:	b580      	push	{r7, lr}
 800ad80:	b082      	sub	sp, #8
 800ad82:	af00      	add	r7, sp, #0
 800ad84:	6078      	str	r0, [r7, #4]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 f83c 	bl	800ae04 <_ZNSaIP6StreamED1Ev>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}

0800ad96 <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 f81f 	bl	800ade4 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	4618      	mov	r0, r3
 800adaa:	3708      	adds	r7, #8
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}

0800adb0 <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>:
      vector() = default;
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b082      	sub	sp, #8
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4618      	mov	r0, r3
 800adbc:	f7ff ffeb 	bl	800ad96 <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4618      	mov	r0, r3
 800adc4:	3708      	adds	r7, #8
 800adc6:	46bd      	mov	sp, r7
 800adc8:	bd80      	pop	{r7, pc}

0800adca <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>:
 800adca:	b580      	push	{r7, lr}
 800adcc:	b082      	sub	sp, #8
 800adce:	af00      	add	r7, sp, #0
 800add0:	6078      	str	r0, [r7, #4]
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4618      	mov	r0, r3
 800add6:	f000 f88c 	bl	800aef2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	4618      	mov	r0, r3
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f8ce 	bl	800af8e <_ZNSaIP6StreamEC1Ev>
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 f8d6 	bl	800afa6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	4618      	mov	r0, r3
 800adfe:	3708      	adds	r7, #8
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <_ZNSaIP6StreamED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ae04:	b480      	push	{r7}
 800ae06:	b083      	sub	sp, #12
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	370c      	adds	r7, #12
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	689a      	ldr	r2, [r3, #8]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	1ad3      	subs	r3, r2, r3
 800ae30:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800ae32:	461a      	mov	r2, r3
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 f8ca 	bl	800afce <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      }
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7ff ff9e 	bl	800ad7e <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	4618      	mov	r0, r3
 800ae46:	3708      	adds	r7, #8
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd80      	pop	{r7, pc}

0800ae4c <_ZNSaISt4pairIK9PrecisionmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800ae4c:	b580      	push	{r7, lr}
 800ae4e:	b082      	sub	sp, #8
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	6078      	str	r0, [r7, #4]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f000 f8cd 	bl	800aff4 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3708      	adds	r7, #8
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}

0800ae64 <_ZNSaISt4pairIK9PrecisionmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ae64:	b480      	push	{r7}
 800ae66:	b083      	sub	sp, #12
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	6078      	str	r0, [r7, #4]
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	370c      	adds	r7, #12
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 800ae7a:	b5b0      	push	{r4, r5, r7, lr}
 800ae7c:	b086      	sub	sp, #24
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	60f8      	str	r0, [r7, #12]
 800ae82:	1d38      	adds	r0, r7, #4
 800ae84:	e880 0006 	stmia.w	r0, {r1, r2}
 800ae88:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800ae8a:	68fc      	ldr	r4, [r7, #12]
 800ae8c:	f107 0314 	add.w	r3, r7, #20
 800ae90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae92:	4618      	mov	r0, r3
 800ae94:	f000 f8b9 	bl	800b00a <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>
 800ae98:	f107 0314 	add.w	r3, r7, #20
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	6839      	ldr	r1, [r7, #0]
 800aea0:	4620      	mov	r0, r4
 800aea2:	f000 f8c0 	bl	800b026 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>
 800aea6:	f107 0314 	add.w	r3, r7, #20
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff ffda 	bl	800ae64 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800aeb0:	68fc      	ldr	r4, [r7, #12]
 800aeb2:	1d3b      	adds	r3, r7, #4
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f000 f8d4 	bl	800b062 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800aeba:	4605      	mov	r5, r0
 800aebc:	1d3b      	adds	r3, r7, #4
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 f8db 	bl	800b07a <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>
 800aec4:	4603      	mov	r3, r0
 800aec6:	461a      	mov	r2, r3
 800aec8:	4629      	mov	r1, r5
 800aeca:	4620      	mov	r0, r4
 800aecc:	f000 f8e7 	bl	800b09e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	4618      	mov	r0, r3
 800aed4:	3718      	adds	r7, #24
 800aed6:	46bd      	mov	sp, r7
 800aed8:	bdb0      	pop	{r4, r5, r7, pc}

0800aeda <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f907 	bl	800b0f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	4618      	mov	r0, r3
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}

0800aef2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800aef2:	b580      	push	{r7, lr}
 800aef4:	b082      	sub	sp, #8
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f925 	bl	800b14a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800af00:	4603      	mov	r3, r0
 800af02:	4619      	mov	r1, r3
 800af04:	6878      	ldr	r0, [r7, #4]
 800af06:	f000 f901 	bl	800b10c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7ff ffe4 	bl	800aeda <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4618      	mov	r0, r3
 800af16:	3708      	adds	r7, #8
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}

0800af1c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681a      	ldr	r2, [r3, #0]
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	429a      	cmp	r2, r3
 800af30:	bf0c      	ite	eq
 800af32:	2301      	moveq	r3, #1
 800af34:	2300      	movne	r3, #0
 800af36:	b2db      	uxtb	r3, r3
 800af38:	4618      	mov	r0, r3
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800af44:	b480      	push	{r7}
 800af46:	b085      	sub	sp, #20
 800af48:	af00      	add	r7, sp, #0
 800af4a:	60f8      	str	r0, [r7, #12]
 800af4c:	60b9      	str	r1, [r7, #8]
 800af4e:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800af50:	68bb      	ldr	r3, [r7, #8]
 800af52:	781a      	ldrb	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	781b      	ldrb	r3, [r3, #0]
 800af58:	429a      	cmp	r2, r3
 800af5a:	bf34      	ite	cc
 800af5c:	2301      	movcc	r3, #1
 800af5e:	2300      	movcs	r3, #0
 800af60:	b2db      	uxtb	r3, r3
 800af62:	4618      	mov	r0, r3
 800af64:	3714      	adds	r7, #20
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr

0800af6e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800af6e:	b480      	push	{r7}
 800af70:	b083      	sub	sp, #12
 800af72:	af00      	add	r7, sp, #0
 800af74:	6078      	str	r0, [r7, #4]
 800af76:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	601a      	str	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	4618      	mov	r0, r3
 800af84:	370c      	adds	r7, #12
 800af86:	46bd      	mov	sp, r7
 800af88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <_ZNSaIP6StreamEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800af8e:	b580      	push	{r7, lr}
 800af90:	b082      	sub	sp, #8
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f000 fa58 	bl	800b44c <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	4618      	mov	r0, r3
 800afa0:	3708      	adds	r7, #8
 800afa2:	46bd      	mov	sp, r7
 800afa4:	bd80      	pop	{r7, pc}

0800afa6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800afa6:	b480      	push	{r7}
 800afa8:	b083      	sub	sp, #12
 800afaa:	af00      	add	r7, sp, #0
 800afac:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2200      	movs	r2, #0
 800afb2:	601a      	str	r2, [r3, #0]
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2200      	movs	r2, #0
 800afb8:	605a      	str	r2, [r3, #4]
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2200      	movs	r2, #0
 800afbe:	609a      	str	r2, [r3, #8]
	{ }
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4618      	mov	r0, r3
 800afc4:	370c      	adds	r7, #12
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr

0800afce <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	60f8      	str	r0, [r7, #12]
 800afd6:	60b9      	str	r1, [r7, #8]
 800afd8:	607a      	str	r2, [r7, #4]
	if (__p)
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d005      	beq.n	800afec <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	68b9      	ldr	r1, [r7, #8]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f000 fa3b 	bl	800b462 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>
      }
 800afec:	bf00      	nop
 800afee:	3710      	adds	r7, #16
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	4618      	mov	r0, r3
 800b000:	370c      	adds	r7, #12
 800b002:	46bd      	mov	sp, r7
 800b004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b008:	4770      	bx	lr

0800b00a <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b082      	sub	sp, #8
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b014:	6839      	ldr	r1, [r7, #0]
 800b016:	6878      	ldr	r0, [r7, #4]
 800b018:	f000 fa42 	bl	800b4a0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	4618      	mov	r0, r3
 800b020:	3708      	adds	r7, #8
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}

0800b026 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 800b026:	b590      	push	{r4, r7, lr}
 800b028:	b087      	sub	sp, #28
 800b02a:	af00      	add	r7, sp, #0
 800b02c:	60f8      	str	r0, [r7, #12]
 800b02e:	60b9      	str	r1, [r7, #8]
 800b030:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800b032:	68fc      	ldr	r4, [r7, #12]
 800b034:	f107 0314 	add.w	r3, r7, #20
 800b038:	6879      	ldr	r1, [r7, #4]
 800b03a:	4618      	mov	r0, r3
 800b03c:	f000 fa3c 	bl	800b4b8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>
 800b040:	f107 0314 	add.w	r3, r7, #20
 800b044:	461a      	mov	r2, r3
 800b046:	68b9      	ldr	r1, [r7, #8]
 800b048:	4620      	mov	r0, r4
 800b04a:	f000 fa42 	bl	800b4d2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 800b04e:	f107 0314 	add.w	r3, r7, #20
 800b052:	4618      	mov	r0, r3
 800b054:	f000 f84f 	bl	800b0f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	4618      	mov	r0, r3
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd90      	pop	{r4, r7, pc}

0800b062 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4618      	mov	r0, r3
 800b070:	370c      	adds	r7, #12
 800b072:	46bd      	mov	sp, r7
 800b074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b078:	4770      	bx	lr

0800b07a <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800b07a:	b590      	push	{r4, r7, lr}
 800b07c:	b083      	sub	sp, #12
 800b07e:	af00      	add	r7, sp, #0
 800b080:	6078      	str	r0, [r7, #4]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f7ff ffed 	bl	800b062 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800b088:	4604      	mov	r4, r0
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fa3e 	bl	800b50c <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>
 800b090:	4603      	mov	r3, r0
 800b092:	00db      	lsls	r3, r3, #3
 800b094:	4423      	add	r3, r4
 800b096:	4618      	mov	r0, r3
 800b098:	370c      	adds	r7, #12
 800b09a:	46bd      	mov	sp, r7
 800b09c:	bd90      	pop	{r4, r7, pc}

0800b09e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800b09e:	b580      	push	{r7, lr}
 800b0a0:	b088      	sub	sp, #32
 800b0a2:	af00      	add	r7, sp, #0
 800b0a4:	60f8      	str	r0, [r7, #12]
 800b0a6:	60b9      	str	r1, [r7, #8]
 800b0a8:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800b0aa:	f107 0314 	add.w	r3, r7, #20
 800b0ae:	68f9      	ldr	r1, [r7, #12]
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	f000 fa37 	bl	800b524 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 800b0b6:	68ba      	ldr	r2, [r7, #8]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d017      	beq.n	800b0ee <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800b0be:	68f8      	ldr	r0, [r7, #12]
 800b0c0:	f000 f84f 	bl	800b162 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 800b0c4:	4603      	mov	r3, r0
 800b0c6:	61fb      	str	r3, [r7, #28]
 800b0c8:	f107 021c 	add.w	r2, r7, #28
 800b0cc:	f107 0318 	add.w	r3, r7, #24
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7ff ff4b 	bl	800af6e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 800b0d8:	f107 0314 	add.w	r3, r7, #20
 800b0dc:	68ba      	ldr	r2, [r7, #8]
 800b0de:	69b9      	ldr	r1, [r7, #24]
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f000 fa2e 	bl	800b542 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	3308      	adds	r3, #8
 800b0ea:	60bb      	str	r3, [r7, #8]
 800b0ec:	e7e3      	b.n	800b0b6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800b0ee:	bf00      	nop
 800b0f0:	3720      	adds	r7, #32
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b0f6:	b480      	push	{r7}
 800b0f8:	b083      	sub	sp, #12
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	4618      	mov	r0, r3
 800b102:	370c      	adds	r7, #12
 800b104:	46bd      	mov	sp, r7
 800b106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10a:	4770      	bx	lr

0800b10c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b084      	sub	sp, #16
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	2b00      	cmp	r3, #0
 800b11a:	d012      	beq.n	800b142 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 800b11c:	6838      	ldr	r0, [r7, #0]
 800b11e:	f000 fa43 	bl	800b5a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b122:	4603      	mov	r3, r0
 800b124:	4619      	mov	r1, r3
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff fff0 	bl	800b10c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800b12c:	6838      	ldr	r0, [r7, #0]
 800b12e:	f000 fa47 	bl	800b5c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b132:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800b134:	6839      	ldr	r1, [r7, #0]
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f968 	bl	800b40c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800b140:	e7e9      	b.n	800b116 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 800b142:	bf00      	nop
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800b14a:	b480      	push	{r7}
 800b14c:	b083      	sub	sp, #12
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	4618      	mov	r0, r3
 800b158:	370c      	adds	r7, #12
 800b15a:	46bd      	mov	sp, r7
 800b15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b160:	4770      	bx	lr

0800b162 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	1d1a      	adds	r2, r3, #4
 800b16e:	f107 030c 	add.w	r3, r7, #12
 800b172:	4611      	mov	r1, r2
 800b174:	4618      	mov	r0, r3
 800b176:	f000 f95a 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	4618      	mov	r0, r3
 800b17e:	3710      	adds	r7, #16
 800b180:	46bd      	mov	sp, r7
 800b182:	bd80      	pop	{r7, pc}

0800b184 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr()
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3310      	adds	r3, #16
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fa2d 	bl	800b5f0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b196:	4603      	mov	r3, r0
 800b198:	4618      	mov	r0, r3
 800b19a:	3708      	adds	r7, #8
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b1a0:	b590      	push	{r4, r7, lr}
 800b1a2:	b08d      	sub	sp, #52	; 0x34
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800b1ae:	1d3b      	adds	r3, r7, #4
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	f000 fa3a 	bl	800b62a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800b1ba:	69bc      	ldr	r4, [r7, #24]
 800b1bc:	68b8      	ldr	r0, [r7, #8]
 800b1be:	f000 fa0b 	bl	800b5d8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	429c      	cmp	r4, r3
 800b1c6:	bf0c      	ite	eq
 800b1c8:	2301      	moveq	r3, #1
 800b1ca:	2300      	movne	r3, #0
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d030      	beq.n	800b234 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x94>
	  if (size() > 0
 800b1d2:	68b8      	ldr	r0, [r7, #8]
 800b1d4:	f000 fa3a 	bl	800b64c <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>
 800b1d8:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d013      	beq.n	800b206 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b1de:	68bc      	ldr	r4, [r7, #8]
 800b1e0:	68b8      	ldr	r0, [r7, #8]
 800b1e2:	f000 fa3f 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	f000 fa46 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b1f0:	4603      	mov	r3, r0
 800b1f2:	683a      	ldr	r2, [r7, #0]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4620      	mov	r0, r4
 800b1f8:	f7ff fea4 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b202:	2301      	movs	r3, #1
 800b204:	e000      	b.n	800b208 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x68>
 800b206:	2300      	movs	r3, #0
	  if (size() > 0
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00c      	beq.n	800b226 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800b20c:	2300      	movs	r3, #0
 800b20e:	61fb      	str	r3, [r7, #28]
 800b210:	68b8      	ldr	r0, [r7, #8]
 800b212:	f000 fa27 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b216:	4602      	mov	r2, r0
 800b218:	f107 031c 	add.w	r3, r7, #28
 800b21c:	4619      	mov	r1, r3
 800b21e:	68f8      	ldr	r0, [r7, #12]
 800b220:	f7f6 fe42 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b224:	e0db      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	683a      	ldr	r2, [r7, #0]
 800b22a:	68b9      	ldr	r1, [r7, #8]
 800b22c:	4618      	mov	r0, r3
 800b22e:	f000 fa31 	bl	800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b232:	e0d4      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800b234:	68bc      	ldr	r4, [r7, #8]
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fa1f 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b23e:	4603      	mov	r3, r0
 800b240:	461a      	mov	r2, r3
 800b242:	6839      	ldr	r1, [r7, #0]
 800b244:	4620      	mov	r0, r4
 800b246:	f7ff fe7d 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b24a:	4603      	mov	r3, r0
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d057      	beq.n	800b300 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x160>
	  iterator __before = __pos;
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800b254:	69bc      	ldr	r4, [r7, #24]
 800b256:	68b8      	ldr	r0, [r7, #8]
 800b258:	f000 faa1 	bl	800b79e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b25c:	4603      	mov	r3, r0
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	429c      	cmp	r4, r3
 800b262:	bf0c      	ite	eq
 800b264:	2301      	moveq	r3, #1
 800b266:	2300      	movne	r3, #0
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d00d      	beq.n	800b28a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800b26e:	68b8      	ldr	r0, [r7, #8]
 800b270:	f000 fa95 	bl	800b79e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b274:	4604      	mov	r4, r0
 800b276:	68b8      	ldr	r0, [r7, #8]
 800b278:	f000 fa91 	bl	800b79e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b27c:	4603      	mov	r3, r0
 800b27e:	461a      	mov	r2, r3
 800b280:	4621      	mov	r1, r4
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f7f6 febc 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b288:	e0a9      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800b28a:	68bc      	ldr	r4, [r7, #8]
 800b28c:	f107 0314 	add.w	r3, r7, #20
 800b290:	4618      	mov	r0, r3
 800b292:	f000 fa90 	bl	800b7b6 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
 800b296:	4603      	mov	r3, r0
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4618      	mov	r0, r3
 800b29c:	f000 f9ee 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	683a      	ldr	r2, [r7, #0]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4620      	mov	r0, r4
 800b2a8:	f7ff fe4c 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d01f      	beq.n	800b2f2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 f977 	bl	800b5a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bf0c      	ite	eq
 800b2c0:	2301      	moveq	r3, #1
 800b2c2:	2300      	movne	r3, #0
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d00a      	beq.n	800b2e0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	623b      	str	r3, [r7, #32]
 800b2ce:	f107 0214 	add.w	r2, r7, #20
 800b2d2:	f107 0320 	add.w	r3, r7, #32
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7f6 fde5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b2de:	e07e      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800b2e0:	f107 0218 	add.w	r2, r7, #24
 800b2e4:	f107 0318 	add.w	r3, r7, #24
 800b2e8:	4619      	mov	r1, r3
 800b2ea:	68f8      	ldr	r0, [r7, #12]
 800b2ec:	f7f6 fe88 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b2f0:	e075      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	68b9      	ldr	r1, [r7, #8]
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f000 f9cb 	bl	800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b2fe:	e06e      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800b300:	68bc      	ldr	r4, [r7, #8]
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	4618      	mov	r0, r3
 800b306:	f000 f9b9 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b30a:	4603      	mov	r3, r0
 800b30c:	683a      	ldr	r2, [r7, #0]
 800b30e:	4619      	mov	r1, r3
 800b310:	4620      	mov	r0, r4
 800b312:	f7ff fe17 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b316:	4603      	mov	r3, r0
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d056      	beq.n	800b3ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x22a>
	  iterator __after = __pos;
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800b320:	69bc      	ldr	r4, [r7, #24]
 800b322:	68b8      	ldr	r0, [r7, #8]
 800b324:	f000 f99e 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b328:	4603      	mov	r3, r0
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	429c      	cmp	r4, r3
 800b32e:	bf0c      	ite	eq
 800b330:	2301      	moveq	r3, #1
 800b332:	2300      	movne	r3, #0
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b00      	cmp	r3, #0
 800b338:	d00c      	beq.n	800b354 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800b33a:	2300      	movs	r3, #0
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
 800b33e:	68b8      	ldr	r0, [r7, #8]
 800b340:	f000 f990 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b344:	4602      	mov	r2, r0
 800b346:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b34a:	4619      	mov	r1, r3
 800b34c:	68f8      	ldr	r0, [r7, #12]
 800b34e:	f7f6 fdab 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b352:	e044      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800b354:	68bc      	ldr	r4, [r7, #8]
 800b356:	f107 0310 	add.w	r3, r7, #16
 800b35a:	4618      	mov	r0, r3
 800b35c:	f000 fa3c 	bl	800b7d8 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>
 800b360:	4603      	mov	r3, r0
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4618      	mov	r0, r3
 800b366:	f000 f989 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b36a:	4603      	mov	r3, r0
 800b36c:	461a      	mov	r2, r3
 800b36e:	6839      	ldr	r1, [r7, #0]
 800b370:	4620      	mov	r0, r4
 800b372:	f7ff fde7 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d01f      	beq.n	800b3bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800b37c:	69bb      	ldr	r3, [r7, #24]
 800b37e:	4618      	mov	r0, r3
 800b380:	f000 f912 	bl	800b5a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b384:	4603      	mov	r3, r0
 800b386:	2b00      	cmp	r3, #0
 800b388:	bf0c      	ite	eq
 800b38a:	2301      	moveq	r3, #1
 800b38c:	2300      	movne	r3, #0
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00a      	beq.n	800b3aa <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800b394:	2300      	movs	r3, #0
 800b396:	62bb      	str	r3, [r7, #40]	; 0x28
 800b398:	f107 0218 	add.w	r2, r7, #24
 800b39c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b3a0:	4619      	mov	r1, r3
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	f7f6 fd80 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b3a8:	e019      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800b3aa:	f107 0210 	add.w	r2, r7, #16
 800b3ae:	f107 0310 	add.w	r3, r7, #16
 800b3b2:	4619      	mov	r1, r3
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7f6 fe23 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b3ba:	e010      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	683a      	ldr	r2, [r7, #0]
 800b3c0:	68b9      	ldr	r1, [r7, #8]
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f000 f966 	bl	800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b3c8:	e009      	b.n	800b3de <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3ce:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b3d2:	f107 0318 	add.w	r3, r7, #24
 800b3d6:	4619      	mov	r1, r3
 800b3d8:	68f8      	ldr	r0, [r7, #12]
 800b3da:	f7f6 fe4c 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	3734      	adds	r7, #52	; 0x34
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd90      	pop	{r4, r7, pc}

0800b3e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 800b3e6:	b580      	push	{r7, lr}
 800b3e8:	b084      	sub	sp, #16
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f000 fa03 	bl	800b7fa <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	f107 030c 	add.w	r3, r7, #12
 800b3fa:	4611      	mov	r1, r2
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	f000 fa0a 	bl	800b816 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b402:	4603      	mov	r3, r0
      }
 800b404:	4618      	mov	r0, r3
 800b406:	3710      	adds	r7, #16
 800b408:	46bd      	mov	sp, r7
 800b40a:	bd80      	pop	{r7, pc}

0800b40c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b082      	sub	sp, #8
 800b410:	af00      	add	r7, sp, #0
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800b416:	6839      	ldr	r1, [r7, #0]
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f000 fa08 	bl	800b82e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fa19 	bl	800b858 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 800b426:	bf00      	nop
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b42e:	b480      	push	{r7}
 800b430:	b083      	sub	sp, #12
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
 800b436:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	683a      	ldr	r2, [r7, #0]
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	4618      	mov	r0, r3
 800b442:	370c      	adds	r7, #12
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>:
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	4618      	mov	r0, r3
 800b458:	370c      	adds	r7, #12
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr

0800b462 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b462:	b580      	push	{r7, lr}
 800b464:	b088      	sub	sp, #32
 800b466:	af00      	add	r7, sp, #0
 800b468:	60f8      	str	r0, [r7, #12]
 800b46a:	60b9      	str	r1, [r7, #8]
 800b46c:	607a      	str	r2, [r7, #4]
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	61fb      	str	r3, [r7, #28]
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	61bb      	str	r3, [r7, #24]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b47a:	f7f4 ff51 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b47e:	4603      	mov	r3, r0
 800b480:	2b00      	cmp	r3, #0
 800b482:	d003      	beq.n	800b48c <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b484:	69b8      	ldr	r0, [r7, #24]
 800b486:	f015 f8c5 	bl	8020614 <_ZdlPv>
	    return;
 800b48a:	e005      	b.n	800b498 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	69b9      	ldr	r1, [r7, #24]
 800b490:	69f8      	ldr	r0, [r7, #28]
 800b492:	f000 fb4a 	bl	800bb2a <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b496:	bf00      	nop
 800b498:	bf00      	nop
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}

0800b4a0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
 800b4a8:	6039      	str	r1, [r7, #0]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	370c      	adds	r7, #12
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b6:	4770      	bx	lr

0800b4b8 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
 800b4c0:	6039      	str	r1, [r7, #0]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 f9f3 	bl	800b8ae <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}

0800b4d2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800b4d2:	b580      	push	{r7, lr}
 800b4d4:	b084      	sub	sp, #16
 800b4d6:	af00      	add	r7, sp, #0
 800b4d8:	60f8      	str	r0, [r7, #12]
 800b4da:	60b9      	str	r1, [r7, #8]
 800b4dc:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f000 f9f0 	bl	800b8c4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f9f6 	bl	800b8da <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	68b9      	ldr	r1, [r7, #8]
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	f000 f9ff 	bl	800b8f6 <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3304      	adds	r3, #4
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	f7f4 ff23 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	4618      	mov	r0, r3
 800b506:	3710      	adds	r7, #16
 800b508:	46bd      	mov	sp, r7
 800b50a:	bd80      	pop	{r7, pc}

0800b50c <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800b50c:	b480      	push	{r7}
 800b50e:	b083      	sub	sp, #12
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	4618      	mov	r0, r3
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 800b524:	b480      	push	{r7}
 800b526:	b083      	sub	sp, #12
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	683a      	ldr	r2, [r7, #0]
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	4618      	mov	r0, r3
 800b538:	370c      	adds	r7, #12
 800b53a:	46bd      	mov	sp, r7
 800b53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b540:	4770      	bx	lr

0800b542 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b542:	b5b0      	push	{r4, r5, r7, lr}
 800b544:	b08a      	sub	sp, #40	; 0x28
 800b546:	af02      	add	r7, sp, #8
 800b548:	60f8      	str	r0, [r7, #12]
 800b54a:	60b9      	str	r1, [r7, #8]
 800b54c:	607a      	str	r2, [r7, #4]
 800b54e:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800b550:	f107 0318 	add.w	r3, r7, #24
 800b554:	6879      	ldr	r1, [r7, #4]
 800b556:	4618      	mov	r0, r3
 800b558:	f000 f95d 	bl	800b816 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b55c:	4603      	mov	r3, r0
 800b55e:	f107 0010 	add.w	r0, r7, #16
 800b562:	68ba      	ldr	r2, [r7, #8]
 800b564:	68f9      	ldr	r1, [r7, #12]
 800b566:	f7ff fe1b 	bl	800b1a0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
      if (__res.second)
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d00f      	beq.n	800b590 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800b570:	693c      	ldr	r4, [r7, #16]
 800b572:	697d      	ldr	r5, [r7, #20]
 800b574:	6878      	ldr	r0, [r7, #4]
 800b576:	f000 f9ca 	bl	800b90e <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b57a:	4602      	mov	r2, r0
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	4613      	mov	r3, r2
 800b582:	462a      	mov	r2, r5
 800b584:	4621      	mov	r1, r4
 800b586:	68f8      	ldr	r0, [r7, #12]
 800b588:	f000 f9cc 	bl	800b924 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 800b58c:	4603      	mov	r3, r0
			  __node_gen);
 800b58e:	e007      	b.n	800b5a0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800b590:	693a      	ldr	r2, [r7, #16]
 800b592:	f107 031c 	add.w	r3, r7, #28
 800b596:	4611      	mov	r1, r2
 800b598:	4618      	mov	r0, r3
 800b59a:	f7ff ff48 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b59e:	69fb      	ldr	r3, [r7, #28]
    }
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	3720      	adds	r7, #32
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	bdb0      	pop	{r4, r5, r7, pc}

0800b5a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	689b      	ldr	r3, [r3, #8]
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	370c      	adds	r7, #12
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b5f0:	b580      	push	{r7, lr}
 800b5f2:	b082      	sub	sp, #8
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 f9dc 	bl	800b9b6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800b5fe:	4603      	mov	r3, r0
 800b600:	4618      	mov	r0, r3
 800b602:	3708      	adds	r7, #8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800b608:	b580      	push	{r7, lr}
 800b60a:	b082      	sub	sp, #8
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f9db 	bl	800b9cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b616:	4603      	mov	r3, r0
 800b618:	2101      	movs	r1, #1
 800b61a:	4618      	mov	r0, r3
 800b61c:	f000 f9e1 	bl	800b9e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>
 800b620:	4603      	mov	r3, r0
 800b622:	4618      	mov	r0, r3
 800b624:	3708      	adds	r7, #8
 800b626:	46bd      	mov	sp, r7
 800b628:	bd80      	pop	{r7, pc}

0800b62a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b084      	sub	sp, #16
 800b62e:	af00      	add	r7, sp, #0
 800b630:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681a      	ldr	r2, [r3, #0]
 800b636:	f107 030c 	add.w	r3, r7, #12
 800b63a:	4611      	mov	r1, r2
 800b63c:	4618      	mov	r0, r3
 800b63e:	f7ff fef6 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	4618      	mov	r0, r3
 800b65a:	370c      	adds	r7, #12
 800b65c:	46bd      	mov	sp, r7
 800b65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b662:	4770      	bx	lr

0800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	3310      	adds	r3, #16
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f7ff feae 	bl	800b3e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b68a:	4603      	mov	r3, r0
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b694:	b590      	push	{r4, r7, lr}
 800b696:	b08b      	sub	sp, #44	; 0x2c
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800b6a0:	68b8      	ldr	r0, [r7, #8]
 800b6a2:	f7ff fd52 	bl	800b14a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800b6aa:	68b8      	ldr	r0, [r7, #8]
 800b6ac:	f7ff ff94 	bl	800b5d8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800b6b4:	2301      	movs	r3, #1
 800b6b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d020      	beq.n	800b702 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800b6c4:	68bc      	ldr	r4, [r7, #8]
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7ff fe8c 	bl	800b3e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	461a      	mov	r2, r3
 800b6d2:	6879      	ldr	r1, [r7, #4]
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	f7ff fc35 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b6e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d005      	beq.n	800b6f4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
 800b6e8:	69bb      	ldr	r3, [r7, #24]
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	f7ff ff68 	bl	800b5c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	e004      	b.n	800b6fe <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6a>
 800b6f4:	69bb      	ldr	r3, [r7, #24]
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f7ff ff56 	bl	800b5a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800b700:	e7db      	b.n	800b6ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800b702:	697a      	ldr	r2, [r7, #20]
 800b704:	f107 0310 	add.w	r3, r7, #16
 800b708:	4611      	mov	r1, r2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7ff fe8f 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800b710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b714:	2b00      	cmp	r3, #0
 800b716:	d01d      	beq.n	800b754 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 800b718:	68b8      	ldr	r0, [r7, #8]
 800b71a:	f000 f985 	bl	800ba28 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>
 800b71e:	4603      	mov	r3, r0
 800b720:	61fb      	str	r3, [r7, #28]
 800b722:	f107 021c 	add.w	r2, r7, #28
 800b726:	f107 0310 	add.w	r3, r7, #16
 800b72a:	4611      	mov	r1, r2
 800b72c:	4618      	mov	r0, r3
 800b72e:	f7ff fbf5 	bl	800af1c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800b732:	4603      	mov	r3, r0
 800b734:	2b00      	cmp	r3, #0
 800b736:	d008      	beq.n	800b74a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800b738:	f107 0214 	add.w	r2, r7, #20
 800b73c:	f107 0318 	add.w	r3, r7, #24
 800b740:	4619      	mov	r1, r3
 800b742:	68f8      	ldr	r0, [r7, #12]
 800b744:	f000 f981 	bl	800ba4a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b748:	e025      	b.n	800b796 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800b74a:	f107 0310 	add.w	r3, r7, #16
 800b74e:	4618      	mov	r0, r3
 800b750:	f000 f831 	bl	800b7b6 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800b754:	68bc      	ldr	r4, [r7, #8]
 800b756:	693b      	ldr	r3, [r7, #16]
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff ff8f 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b75e:	4603      	mov	r3, r0
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	4619      	mov	r1, r3
 800b764:	4620      	mov	r0, r4
 800b766:	f7ff fbed 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b76a:	4603      	mov	r3, r0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d008      	beq.n	800b782 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800b770:	f107 0214 	add.w	r2, r7, #20
 800b774:	f107 0318 	add.w	r3, r7, #24
 800b778:	4619      	mov	r1, r3
 800b77a:	68f8      	ldr	r0, [r7, #12]
 800b77c:	f000 f965 	bl	800ba4a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b780:	e009      	b.n	800b796 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800b782:	2300      	movs	r3, #0
 800b784:	623b      	str	r3, [r7, #32]
 800b786:	f107 0220 	add.w	r2, r7, #32
 800b78a:	f107 0310 	add.w	r3, r7, #16
 800b78e:	4619      	mov	r1, r3
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f7f6 fc70 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b796:	68f8      	ldr	r0, [r7, #12]
 800b798:	372c      	adds	r7, #44	; 0x2c
 800b79a:	46bd      	mov	sp, r7
 800b79c:	bd90      	pop	{r4, r7, pc}

0800b79e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800b79e:	b480      	push	{r7}
 800b7a0:	b083      	sub	sp, #12
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	330c      	adds	r3, #12
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	370c      	adds	r7, #12
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800b7b6:	b580      	push	{r7, lr}
 800b7b8:	b082      	sub	sp, #8
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f014 ff94 	bl	80206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800b7c8:	4602      	mov	r2, r0
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	601a      	str	r2, [r3, #0]
	return *this;
 800b7ce:	687b      	ldr	r3, [r7, #4]
      }
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	f014 ff81 	bl	80206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	601a      	str	r2, [r3, #0]
	return *this;
 800b7f0:	687b      	ldr	r3, [r7, #4]
      }
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr() const
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b082      	sub	sp, #8
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	3310      	adds	r3, #16
 800b806:	4618      	mov	r0, r3
 800b808:	f000 f938 	bl	800ba7c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b80c:	4603      	mov	r3, r0
 800b80e:	4618      	mov	r0, r3
 800b810:	3708      	adds	r7, #8
 800b812:	46bd      	mov	sp, r7
 800b814:	bd80      	pop	{r7, pc}

0800b816 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>:
      operator()(const _Pair& __x) const
 800b816:	b480      	push	{r7}
 800b818:	b083      	sub	sp, #12
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
 800b81e:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	4618      	mov	r0, r3
 800b824:	370c      	adds	r7, #12
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b82e:	b590      	push	{r4, r7, lr}
 800b830:	b083      	sub	sp, #12
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
 800b836:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800b838:	6878      	ldr	r0, [r7, #4]
 800b83a:	f000 f8c7 	bl	800b9cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b83e:	4604      	mov	r4, r0
 800b840:	6838      	ldr	r0, [r7, #0]
 800b842:	f7ff fc9f 	bl	800b184 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b846:	4603      	mov	r3, r0
 800b848:	4619      	mov	r1, r3
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 f922 	bl	800ba94 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>
      }
 800b850:	bf00      	nop
 800b852:	370c      	adds	r7, #12
 800b854:	46bd      	mov	sp, r7
 800b856:	bd90      	pop	{r4, r7, pc}

0800b858 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	6078      	str	r0, [r7, #4]
 800b860:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 f8b2 	bl	800b9cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b868:	4603      	mov	r3, r0
 800b86a:	2201      	movs	r2, #1
 800b86c:	6839      	ldr	r1, [r7, #0]
 800b86e:	4618      	mov	r0, r3
 800b870:	f000 f91c 	bl	800baac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>
 800b874:	bf00      	nop
 800b876:	3708      	adds	r7, #8
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b87c:	b480      	push	{r7}
 800b87e:	b083      	sub	sp, #12
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4618      	mov	r0, r3
 800b888:	370c      	adds	r7, #12
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b892:	b580      	push	{r7, lr}
 800b894:	b084      	sub	sp, #16
 800b896:	af00      	add	r7, sp, #0
 800b898:	60f8      	str	r0, [r7, #12]
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b89e:	68b9      	ldr	r1, [r7, #8]
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 f92c 	bl	800bafe <_ZSt8_DestroyIPP6StreamEvT_S3_>
    }
 800b8a6:	bf00      	nop
 800b8a8:	3710      	adds	r7, #16
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b8ae:	b480      	push	{r7}
 800b8b0:	b083      	sub	sp, #12
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4618      	mov	r0, r3
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	370c      	adds	r7, #12
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr

0800b8da <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b8da:	b580      	push	{r7, lr}
 800b8dc:	b082      	sub	sp, #8
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 f92e 	bl	800bb48 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3708      	adds	r7, #8
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}

0800b8f6 <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800b8f6:	b480      	push	{r7}
 800b8f8:	b083      	sub	sp, #12
 800b8fa:	af00      	add	r7, sp, #0
 800b8fc:	6078      	str	r0, [r7, #4]
 800b8fe:	6039      	str	r1, [r7, #0]
      { }
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	4618      	mov	r0, r3
 800b904:	370c      	adds	r7, #12
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b90e:	b480      	push	{r7}
 800b910:	b083      	sub	sp, #12
 800b912:	af00      	add	r7, sp, #0
 800b914:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	4618      	mov	r0, r3
 800b91a:	370c      	adds	r7, #12
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b924:	b5b0      	push	{r4, r5, r7, lr}
 800b926:	b088      	sub	sp, #32
 800b928:	af00      	add	r7, sp, #0
 800b92a:	60f8      	str	r0, [r7, #12]
 800b92c:	60b9      	str	r1, [r7, #8]
 800b92e:	607a      	str	r2, [r7, #4]
 800b930:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b932:	68bb      	ldr	r3, [r7, #8]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d11a      	bne.n	800b96e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800b938:	68f8      	ldr	r0, [r7, #12]
 800b93a:	f7ff fe4d 	bl	800b5d8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b93e:	4602      	mov	r2, r0
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4293      	cmp	r3, r2
 800b944:	d013      	beq.n	800b96e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b946:	68fc      	ldr	r4, [r7, #12]
 800b948:	f107 0310 	add.w	r3, r7, #16
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	4618      	mov	r0, r3
 800b950:	f7ff ff61 	bl	800b816 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b954:	4605      	mov	r5, r0
 800b956:	6878      	ldr	r0, [r7, #4]
 800b958:	f7ff fe90 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b95c:	4603      	mov	r3, r0
 800b95e:	461a      	mov	r2, r3
 800b960:	4629      	mov	r1, r5
 800b962:	4620      	mov	r0, r4
 800b964:	f7ff faee 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b968:	4603      	mov	r3, r0
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d001      	beq.n	800b972 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 800b96e:	2301      	movs	r3, #1
 800b970:	e000      	b.n	800b974 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 800b972:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800b974:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800b976:	6838      	ldr	r0, [r7, #0]
 800b978:	f7ff ffc9 	bl	800b90e <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b97c:	4603      	mov	r3, r0
 800b97e:	4619      	mov	r1, r3
 800b980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b982:	f000 f8ed 	bl	800bb60 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 800b986:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800b98c:	7ff8      	ldrb	r0, [r7, #31]
 800b98e:	687a      	ldr	r2, [r7, #4]
 800b990:	69b9      	ldr	r1, [r7, #24]
 800b992:	f014 feaf 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	695b      	ldr	r3, [r3, #20]
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800b9a0:	f107 0314 	add.w	r3, r7, #20
 800b9a4:	69b9      	ldr	r1, [r7, #24]
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	f7ff fd41 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b9ac:	697b      	ldr	r3, [r7, #20]
      }
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3720      	adds	r7, #32
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bdb0      	pop	{r4, r5, r7, pc}

0800b9b6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() noexcept
 800b9b6:	b480      	push	{r7}
 800b9b8:	b083      	sub	sp, #12
 800b9ba:	af00      	add	r7, sp, #0
 800b9bc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	370c      	adds	r7, #12
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800b9cc:	b480      	push	{r7}
 800b9ce:	b083      	sub	sp, #12
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	370c      	adds	r7, #12
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e0:	4770      	bx	lr

0800b9e2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b084      	sub	sp, #16
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800b9f4:	f7f4 fc94 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b9f8:	4603      	mov	r3, r0
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d009      	beq.n	800ba12 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800b9fe:	68ba      	ldr	r2, [r7, #8]
 800ba00:	4613      	mov	r3, r2
 800ba02:	005b      	lsls	r3, r3, #1
 800ba04:	4413      	add	r3, r2
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f014 fe07 	bl	802061c <_Znwj>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	e006      	b.n	800ba20 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ba12:	2200      	movs	r2, #0
 800ba14:	68b9      	ldr	r1, [r7, #8]
 800ba16:	68f8      	ldr	r0, [r7, #12]
 800ba18:	f000 f910 	bl	800bc3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>
 800ba1c:	4603      	mov	r3, r0
 800ba1e:	bf00      	nop
      { return __a.allocate(__n); }
 800ba20:	4618      	mov	r0, r3
 800ba22:	3710      	adds	r7, #16
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd80      	pop	{r7, pc}

0800ba28 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	68da      	ldr	r2, [r3, #12]
 800ba34:	f107 030c 	add.w	r3, r7, #12
 800ba38:	4611      	mov	r1, r2
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7ff fcf7 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	4618      	mov	r0, r3
 800ba44:	3710      	adds	r7, #16
 800ba46:	46bd      	mov	sp, r7
 800ba48:	bd80      	pop	{r7, pc}

0800ba4a <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800ba4a:	b580      	push	{r7, lr}
 800ba4c:	b084      	sub	sp, #16
 800ba4e:	af00      	add	r7, sp, #0
 800ba50:	60f8      	str	r0, [r7, #12]
 800ba52:	60b9      	str	r1, [r7, #8]
 800ba54:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800ba56:	68b8      	ldr	r0, [r7, #8]
 800ba58:	f000 f896 	bl	800bb88 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ba5c:	4603      	mov	r3, r0
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	f7f6 fea2 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	681a      	ldr	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	605a      	str	r2, [r3, #4]
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	4618      	mov	r0, r3
 800ba76:	3710      	adds	r7, #16
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	bd80      	pop	{r7, pc}

0800ba7c <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b082      	sub	sp, #8
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f88a 	bl	800bb9e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b082      	sub	sp, #8
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
 800ba9c:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800ba9e:	6838      	ldr	r0, [r7, #0]
 800baa0:	f000 f888 	bl	800bbb4 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>
	}
 800baa4:	bf00      	nop
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}

0800baac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800baac:	b580      	push	{r7, lr}
 800baae:	b088      	sub	sp, #32
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	60f8      	str	r0, [r7, #12]
 800bab4:	60b9      	str	r1, [r7, #8]
 800bab6:	607a      	str	r2, [r7, #4]
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	61fb      	str	r3, [r7, #28]
 800babc:	68bb      	ldr	r3, [r7, #8]
 800babe:	61bb      	str	r3, [r7, #24]
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800bac4:	f7f4 fc2c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d003      	beq.n	800bad6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800bace:	69b8      	ldr	r0, [r7, #24]
 800bad0:	f014 fda0 	bl	8020614 <_ZdlPv>
	    return;
 800bad4:	e005      	b.n	800bae2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	69b9      	ldr	r1, [r7, #24]
 800bada:	69f8      	ldr	r0, [r7, #28]
 800badc:	f000 f8d0 	bl	800bc80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 800bae0:	bf00      	nop
 800bae2:	bf00      	nop
 800bae4:	3720      	adds	r7, #32
 800bae6:	46bd      	mov	sp, r7
 800bae8:	bd80      	pop	{r7, pc}

0800baea <_ZSt10destroy_atIP6StreamEvPT_>:
    destroy_at(_Tp* __location)
 800baea:	b480      	push	{r7}
 800baec:	b083      	sub	sp, #12
 800baee:	af00      	add	r7, sp, #0
 800baf0:	6078      	str	r0, [r7, #4]
    }
 800baf2:	bf00      	nop
 800baf4:	370c      	adds	r7, #12
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <_ZSt8_DestroyIPP6StreamEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b082      	sub	sp, #8
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
 800bb06:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800bb08:	f7f4 fc0a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d004      	beq.n	800bb1c <_ZSt8_DestroyIPP6StreamEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800bb12:	6839      	ldr	r1, [r7, #0]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f857 	bl	800bbc8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>
 800bb1a:	e003      	b.n	800bb24 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x26>
	__destroy(__first, __last);
 800bb1c:	6839      	ldr	r1, [r7, #0]
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 f86a 	bl	800bbf8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>
    }
 800bb24:	3708      	adds	r7, #8
 800bb26:	46bd      	mov	sp, r7
 800bb28:	bd80      	pop	{r7, pc}

0800bb2a <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b084      	sub	sp, #16
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	60f8      	str	r0, [r7, #12]
 800bb32:	60b9      	str	r1, [r7, #8]
 800bb34:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	68b8      	ldr	r0, [r7, #8]
 800bb3e:	f014 fd6b 	bl	8020618 <_ZdlPvj>
      }
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}

0800bb48 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800bb48:	b480      	push	{r7}
 800bb4a:	b083      	sub	sp, #12
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	6039      	str	r1, [r7, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr

0800bb60 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800bb60:	b590      	push	{r4, r7, lr}
 800bb62:	b083      	sub	sp, #12
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
 800bb68:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681c      	ldr	r4, [r3, #0]
 800bb6e:	6838      	ldr	r0, [r7, #0]
 800bb70:	f7ff fecd 	bl	800b90e <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bb74:	4603      	mov	r3, r0
 800bb76:	4619      	mov	r1, r3
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f000 f848 	bl	800bc0e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd90      	pop	{r4, r7, pc}

0800bb88 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bb88:	b480      	push	{r7}
 800bb8a:	b083      	sub	sp, #12
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	4618      	mov	r0, r3
 800bb94:	370c      	adds	r7, #12
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr

0800bb9e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() const noexcept
 800bb9e:	b480      	push	{r7}
 800bba0:	b083      	sub	sp, #12
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	4618      	mov	r0, r3
 800bbaa:	370c      	adds	r7, #12
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr

0800bbb4 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>:
    destroy_at(_Tp* __location)
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
    }
 800bbbc:	bf00      	nop
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr

0800bbc8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
 800bbd0:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d00a      	beq.n	800bbf0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f862 	bl	800bca4 <_ZSt11__addressofIP6StreamEPT_RS2_>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	f000 f869 	bl	800bcba <_ZSt8_DestroyIP6StreamEvPT_>
	  for (; __first != __last; ++__first)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	3304      	adds	r3, #4
 800bbec:	607b      	str	r3, [r7, #4]
 800bbee:	e7f0      	b.n	800bbd2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0xa>
	}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
 800bc02:	bf00      	nop
 800bc04:	370c      	adds	r7, #12
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800bc0e:	b580      	push	{r7, lr}
 800bc10:	b084      	sub	sp, #16
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
 800bc16:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff fcf5 	bl	800b608 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 800bc1e:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800bc20:	6838      	ldr	r0, [r7, #0]
 800bc22:	f7ff fe74 	bl	800b90e <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bc26:	4603      	mov	r3, r0
 800bc28:	461a      	mov	r2, r3
 800bc2a:	68f9      	ldr	r1, [r7, #12]
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 f84f 	bl	800bcd0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800bc32:	68fb      	ldr	r3, [r7, #12]
	}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3710      	adds	r7, #16
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	60f8      	str	r0, [r7, #12]
 800bc44:	60b9      	str	r1, [r7, #8]
 800bc46:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800bc48:	68f8      	ldr	r0, [r7, #12]
 800bc4a:	f000 f861 	bl	800bd10 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>
 800bc4e:	4602      	mov	r2, r0
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	4293      	cmp	r3, r2
 800bc54:	bf8c      	ite	hi
 800bc56:	2301      	movhi	r3, #1
 800bc58:	2300      	movls	r3, #0
 800bc5a:	b2db      	uxtb	r3, r3
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bc60:	f014 fda3 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	4613      	mov	r3, r2
 800bc68:	005b      	lsls	r3, r3, #1
 800bc6a:	4413      	add	r3, r2
 800bc6c:	00db      	lsls	r3, r3, #3
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f014 fcd4 	bl	802061c <_Znwj>
 800bc74:	4603      	mov	r3, r0
 800bc76:	bf00      	nop
      }
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3710      	adds	r7, #16
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd80      	pop	{r7, pc}

0800bc80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	005b      	lsls	r3, r3, #1
 800bc92:	4413      	add	r3, r2
 800bc94:	00db      	lsls	r3, r3, #3
 800bc96:	4619      	mov	r1, r3
 800bc98:	68b8      	ldr	r0, [r7, #8]
 800bc9a:	f014 fcbd 	bl	8020618 <_ZdlPvj>
      }
 800bc9e:	3710      	adds	r7, #16
 800bca0:	46bd      	mov	sp, r7
 800bca2:	bd80      	pop	{r7, pc}

0800bca4 <_ZSt11__addressofIP6StreamEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bca4:	b480      	push	{r7}
 800bca6:	b083      	sub	sp, #12
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	370c      	adds	r7, #12
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb8:	4770      	bx	lr

0800bcba <_ZSt8_DestroyIP6StreamEvPT_>:
    _Destroy(_Tp* __pointer)
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b082      	sub	sp, #8
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f7ff ff11 	bl	800baea <_ZSt10destroy_atIP6StreamEvPT_>
    }
 800bcc8:	bf00      	nop
 800bcca:	3708      	adds	r7, #8
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800bcd0:	b5b0      	push	{r4, r5, r7, lr}
 800bcd2:	b084      	sub	sp, #16
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	60f8      	str	r0, [r7, #12]
 800bcd8:	60b9      	str	r1, [r7, #8]
 800bcda:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	4619      	mov	r1, r3
 800bce0:	2018      	movs	r0, #24
 800bce2:	f7f4 fb25 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f7ff fe70 	bl	800b9cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800bcec:	4604      	mov	r4, r0
 800bcee:	68b8      	ldr	r0, [r7, #8]
 800bcf0:	f7ff fa48 	bl	800b184 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800bcf4:	4605      	mov	r5, r0
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f7ff fe09 	bl	800b90e <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	461a      	mov	r2, r3
 800bd00:	4629      	mov	r1, r5
 800bd02:	4620      	mov	r0, r4
 800bd04:	f000 f82c 	bl	800bd60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bdb0      	pop	{r4, r5, r7, pc}

0800bd10 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800bd10:	b480      	push	{r7}
 800bd12:	b083      	sub	sp, #12
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800bd18:	4b03      	ldr	r3, [pc, #12]	; (800bd28 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv+0x18>)
      }
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	370c      	adds	r7, #12
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	05555555 	.word	0x05555555

0800bd2c <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800bd2c:	b5b0      	push	{r4, r5, r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800bd36:	6838      	ldr	r0, [r7, #0]
 800bd38:	f7ff fde9 	bl	800b90e <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bd3c:	4605      	mov	r5, r0
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4619      	mov	r1, r3
 800bd42:	2008      	movs	r0, #8
 800bd44:	f7f4 faf4 	bl	8000330 <_ZnwjPv>
 800bd48:	4604      	mov	r4, r0
 800bd4a:	4623      	mov	r3, r4
 800bd4c:	462a      	mov	r2, r5
 800bd4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd52:	e883 0003 	stmia.w	r3, {r0, r1}
 800bd56:	4623      	mov	r3, r4
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3708      	adds	r7, #8
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bdb0      	pop	{r4, r5, r7, pc}

0800bd60 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f7ff fdce 	bl	800b90e <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bd72:	4603      	mov	r3, r0
 800bd74:	4619      	mov	r1, r3
 800bd76:	68b8      	ldr	r0, [r7, #8]
 800bd78:	f7ff ffd8 	bl	800bd2c <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>
	}
 800bd7c:	bf00      	nop
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}

0800bd84 <_Z41__static_initialization_and_destruction_0ii>:
uint8_t Stream::current_id = 0b1000000;
Precision StreamMessage::precision_mode = _8_bits;
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
																{_16_bits, 65535},
																{_24_bits, 16777215},
																{_32_bits, 4294967295} };
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b090      	sub	sp, #64	; 0x40
 800bd88:	af02      	add	r7, sp, #8
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d13e      	bne.n	800be12 <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d139      	bne.n	800be12 <_Z41__static_initialization_and_destruction_0ii+0x8e>
vector<Stream*> Stream::streams;
 800bd9e:	4826      	ldr	r0, [pc, #152]	; (800be38 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800bda0:	f7ff f806 	bl	800adb0 <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
 800bda4:	f107 0310 	add.w	r3, r7, #16
 800bda8:	2220      	movs	r2, #32
 800bdaa:	2100      	movs	r1, #0
 800bdac:	4618      	mov	r0, r3
 800bdae:	f014 fd89 	bl	80208c4 <memset>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	743b      	strb	r3, [r7, #16]
 800bdb6:	23ff      	movs	r3, #255	; 0xff
 800bdb8:	617b      	str	r3, [r7, #20]
 800bdba:	2302      	movs	r3, #2
 800bdbc:	763b      	strb	r3, [r7, #24]
 800bdbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdc2:	61fb      	str	r3, [r7, #28]
 800bdc4:	2303      	movs	r3, #3
 800bdc6:	f887 3020 	strb.w	r3, [r7, #32]
 800bdca:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bdce:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd0:	2304      	movs	r3, #4
 800bdd2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800bdd6:	f04f 33ff 	mov.w	r3, #4294967295
 800bdda:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bddc:	f107 0310 	add.w	r3, r7, #16
 800bde0:	60bb      	str	r3, [r7, #8]
 800bde2:	2304      	movs	r3, #4
 800bde4:	60fb      	str	r3, [r7, #12]
 800bde6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bdea:	4618      	mov	r0, r3
 800bdec:	f7ff f82e 	bl	800ae4c <_ZNSaISt4pairIK9PrecisionmEEC1Ev>
 800bdf0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800bdf4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bdf8:	9300      	str	r3, [sp, #0]
 800bdfa:	4613      	mov	r3, r2
 800bdfc:	f107 0208 	add.w	r2, r7, #8
 800be00:	ca06      	ldmia	r2, {r1, r2}
 800be02:	480e      	ldr	r0, [pc, #56]	; (800be3c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800be04:	f7ff f839 	bl	800ae7a <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800be08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800be0c:	4618      	mov	r0, r3
 800be0e:	f7ff f829 	bl	800ae64 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be1e:	4293      	cmp	r3, r2
 800be20:	d105      	bne.n	800be2e <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800be22:	4806      	ldr	r0, [pc, #24]	; (800be3c <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800be24:	f7fe ffd1 	bl	800adca <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>
vector<Stream*> Stream::streams;
 800be28:	4803      	ldr	r0, [pc, #12]	; (800be38 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800be2a:	f000 f809 	bl	800be40 <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>
																{_32_bits, 4294967295} };
 800be2e:	bf00      	nop
 800be30:	3738      	adds	r7, #56	; 0x38
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
 800be36:	bf00      	nop
 800be38:	2400017c 	.word	0x2400017c
 800be3c:	24000188 	.word	0x24000188

0800be40 <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800be40:	b5b0      	push	{r4, r5, r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	681c      	ldr	r4, [r3, #0]
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	4618      	mov	r0, r3
 800be54:	f7ff fd12 	bl	800b87c <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 800be58:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be5a:	461a      	mov	r2, r3
 800be5c:	4629      	mov	r1, r5
 800be5e:	4620      	mov	r0, r4
 800be60:	f7ff fd17 	bl	800b892 <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>
      }
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	4618      	mov	r0, r3
 800be68:	f7fe ffd7 	bl	800ae1a <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bdb0      	pop	{r4, r5, r7, pc}

0800be76 <_GLOBAL__sub_I__ZN6Stream7streamsE>:
 800be76:	b580      	push	{r7, lr}
 800be78:	af00      	add	r7, sp, #0
 800be7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800be7e:	2001      	movs	r0, #1
 800be80:	f7ff ff80 	bl	800bd84 <_Z41__static_initialization_and_destruction_0ii>
 800be84:	bd80      	pop	{r7, pc}

0800be86 <_GLOBAL__sub_D__ZN6Stream7streamsE>:
 800be86:	b580      	push	{r7, lr}
 800be88:	af00      	add	r7, sp, #0
 800be8a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800be8e:	2000      	movs	r0, #0
 800be90:	f7ff ff78 	bl	800bd84 <_Z41__static_initialization_and_destruction_0ii>
 800be94:	bd80      	pop	{r7, pc}

0800be96 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800be96:	b580      	push	{r7, lr}
 800be98:	b082      	sub	sp, #8
 800be9a:	af00      	add	r7, sp, #0
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	6878      	ldr	r0, [r7, #4]
 800bea0:	f000 f82f 	bl	800bf02 <_ZNSaIP5TimerED1Ev>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4618      	mov	r0, r3
 800bea8:	3708      	adds	r7, #8
 800beaa:	46bd      	mov	sp, r7
 800beac:	bd80      	pop	{r7, pc}

0800beae <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800beae:	b580      	push	{r7, lr}
 800beb0:	b082      	sub	sp, #8
 800beb2:	af00      	add	r7, sp, #0
 800beb4:	6078      	str	r0, [r7, #4]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	4618      	mov	r0, r3
 800beba:	f000 f812 	bl	800bee2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	4618      	mov	r0, r3
 800bec2:	3708      	adds	r7, #8
 800bec4:	46bd      	mov	sp, r7
 800bec6:	bd80      	pop	{r7, pc}

0800bec8 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>:
      vector() = default;
 800bec8:	b580      	push	{r7, lr}
 800beca:	b082      	sub	sp, #8
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7ff ffeb 	bl	800beae <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4618      	mov	r0, r3
 800bedc:	3708      	adds	r7, #8
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b082      	sub	sp, #8
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f000 f82d 	bl	800bf4a <_ZNSaIP5TimerEC1Ev>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	4618      	mov	r0, r3
 800bef4:	f000 f835 	bl	800bf62 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	4618      	mov	r0, r3
 800befc:	3708      	adds	r7, #8
 800befe:	46bd      	mov	sp, r7
 800bf00:	bd80      	pop	{r7, pc}

0800bf02 <_ZNSaIP5TimerED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bf02:	b480      	push	{r7}
 800bf04:	b083      	sub	sp, #12
 800bf06:	af00      	add	r7, sp, #0
 800bf08:	6078      	str	r0, [r7, #4]
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	370c      	adds	r7, #12
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	689a      	ldr	r2, [r3, #8]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	1ad3      	subs	r3, r2, r3
 800bf2e:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800bf30:	461a      	mov	r2, r3
 800bf32:	6878      	ldr	r0, [r7, #4]
 800bf34:	f000 f829 	bl	800bf8a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	f7ff ffab 	bl	800be96 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <_ZNSaIP5TimerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b082      	sub	sp, #8
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 f82c 	bl	800bfb0 <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3708      	adds	r7, #8
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800bf62:	b480      	push	{r7}
 800bf64:	b083      	sub	sp, #12
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	601a      	str	r2, [r3, #0]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2200      	movs	r2, #0
 800bf74:	605a      	str	r2, [r3, #4]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	609a      	str	r2, [r3, #8]
	{ }
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	4618      	mov	r0, r3
 800bf80:	370c      	adds	r7, #12
 800bf82:	46bd      	mov	sp, r7
 800bf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf88:	4770      	bx	lr

0800bf8a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800bf8a:	b580      	push	{r7, lr}
 800bf8c:	b084      	sub	sp, #16
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	60f8      	str	r0, [r7, #12]
 800bf92:	60b9      	str	r1, [r7, #8]
 800bf94:	607a      	str	r2, [r7, #4]
	if (__p)
 800bf96:	68bb      	ldr	r3, [r7, #8]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d005      	beq.n	800bfa8 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	68b9      	ldr	r1, [r7, #8]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 f80f 	bl	800bfc6 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>
      }
 800bfa8:	bf00      	nop
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc4:	4770      	bx	lr

0800bfc6 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bfc6:	b580      	push	{r7, lr}
 800bfc8:	b088      	sub	sp, #32
 800bfca:	af00      	add	r7, sp, #0
 800bfcc:	60f8      	str	r0, [r7, #12]
 800bfce:	60b9      	str	r1, [r7, #8]
 800bfd0:	607a      	str	r2, [r7, #4]
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	61fb      	str	r3, [r7, #28]
 800bfd6:	68bb      	ldr	r3, [r7, #8]
 800bfd8:	61bb      	str	r3, [r7, #24]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800bfde:	f7f4 f99f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d003      	beq.n	800bff0 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800bfe8:	69b8      	ldr	r0, [r7, #24]
 800bfea:	f014 fb13 	bl	8020614 <_ZdlPv>
	    return;
 800bfee:	e005      	b.n	800bffc <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800bff0:	697a      	ldr	r2, [r7, #20]
 800bff2:	69b9      	ldr	r1, [r7, #24]
 800bff4:	69f8      	ldr	r0, [r7, #28]
 800bff6:	f000 f83e 	bl	800c076 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800bffa:	bf00      	nop
 800bffc:	bf00      	nop
 800bffe:	3720      	adds	r7, #32
 800c000:	46bd      	mov	sp, r7
 800c002:	bd80      	pop	{r7, pc}

0800c004 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c004:	b480      	push	{r7}
 800c006:	b083      	sub	sp, #12
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	4618      	mov	r0, r3
 800c010:	370c      	adds	r7, #12
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c01a:	b580      	push	{r7, lr}
 800c01c:	b084      	sub	sp, #16
 800c01e:	af00      	add	r7, sp, #0
 800c020:	60f8      	str	r0, [r7, #12]
 800c022:	60b9      	str	r1, [r7, #8]
 800c024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c026:	68b9      	ldr	r1, [r7, #8]
 800c028:	68f8      	ldr	r0, [r7, #12]
 800c02a:	f000 f80e 	bl	800c04a <_ZSt8_DestroyIPP5TimerEvT_S3_>
    }
 800c02e:	bf00      	nop
 800c030:	3710      	adds	r7, #16
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}

0800c036 <_ZSt10destroy_atIP5TimerEvPT_>:
    destroy_at(_Tp* __location)
 800c036:	b480      	push	{r7}
 800c038:	b083      	sub	sp, #12
 800c03a:	af00      	add	r7, sp, #0
 800c03c:	6078      	str	r0, [r7, #4]
    }
 800c03e:	bf00      	nop
 800c040:	370c      	adds	r7, #12
 800c042:	46bd      	mov	sp, r7
 800c044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c048:	4770      	bx	lr

0800c04a <_ZSt8_DestroyIPP5TimerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c04a:	b580      	push	{r7, lr}
 800c04c:	b082      	sub	sp, #8
 800c04e:	af00      	add	r7, sp, #0
 800c050:	6078      	str	r0, [r7, #4]
 800c052:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c054:	f7f4 f964 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d004      	beq.n	800c068 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c05e:	6839      	ldr	r1, [r7, #0]
 800c060:	6878      	ldr	r0, [r7, #4]
 800c062:	f000 f817 	bl	800c094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>
 800c066:	e003      	b.n	800c070 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x26>
	__destroy(__first, __last);
 800c068:	6839      	ldr	r1, [r7, #0]
 800c06a:	6878      	ldr	r0, [r7, #4]
 800c06c:	f000 f82a 	bl	800c0c4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>
    }
 800c070:	3708      	adds	r7, #8
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800c076:	b580      	push	{r7, lr}
 800c078:	b084      	sub	sp, #16
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	60f8      	str	r0, [r7, #12]
 800c07e:	60b9      	str	r1, [r7, #8]
 800c080:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4619      	mov	r1, r3
 800c088:	68b8      	ldr	r0, [r7, #8]
 800c08a:	f014 fac5 	bl	8020618 <_ZdlPvj>
      }
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	429a      	cmp	r2, r3
 800c0a4:	d00a      	beq.n	800c0bc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800c0a6:	6878      	ldr	r0, [r7, #4]
 800c0a8:	f000 f817 	bl	800c0da <_ZSt11__addressofIP5TimerEPT_RS2_>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f000 f81e 	bl	800c0f0 <_ZSt8_DestroyIP5TimerEvPT_>
	  for (; __first != __last; ++__first)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	607b      	str	r3, [r7, #4]
 800c0ba:	e7f0      	b.n	800c09e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0xa>
	}
 800c0bc:	bf00      	nop
 800c0be:	3708      	adds	r7, #8
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
 800c0ce:	bf00      	nop
 800c0d0:	370c      	adds	r7, #12
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d8:	4770      	bx	lr

0800c0da <_ZSt11__addressofIP5TimerEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c0da:	b480      	push	{r7}
 800c0dc:	b083      	sub	sp, #12
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	370c      	adds	r7, #12
 800c0e8:	46bd      	mov	sp, r7
 800c0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ee:	4770      	bx	lr

0800c0f0 <_ZSt8_DestroyIP5TimerEvPT_>:
    _Destroy(_Tp* __pointer)
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b082      	sub	sp, #8
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c0f8:	6878      	ldr	r0, [r7, #4]
 800c0fa:	f7ff ff9c 	bl	800c036 <_ZSt10destroy_atIP5TimerEvPT_>
    }
 800c0fe:	bf00      	nop
 800c100:	3708      	adds	r7, #8
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
	...

0800c108 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Timer.hpp"

vector<Timer*> Timer::all_timers;
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
 800c110:	6039      	str	r1, [r7, #0]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2b01      	cmp	r3, #1
 800c116:	d107      	bne.n	800c128 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c11e:	4293      	cmp	r3, r2
 800c120:	d102      	bne.n	800c128 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c122:	4809      	ldr	r0, [pc, #36]	; (800c148 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c124:	f7ff fed0 	bl	800bec8 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d107      	bne.n	800c13e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c134:	4293      	cmp	r3, r2
 800c136:	d102      	bne.n	800c13e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c138:	4803      	ldr	r0, [pc, #12]	; (800c148 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c13a:	f000 f807 	bl	800c14c <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>
 800c13e:	bf00      	nop
 800c140:	3708      	adds	r7, #8
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	240001a0 	.word	0x240001a0

0800c14c <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c14c:	b5b0      	push	{r4, r5, r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681c      	ldr	r4, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	4618      	mov	r0, r3
 800c160:	f7ff ff50 	bl	800c004 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c164:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c166:	461a      	mov	r2, r3
 800c168:	4629      	mov	r1, r5
 800c16a:	4620      	mov	r0, r4
 800c16c:	f7ff ff55 	bl	800c01a <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>
      }
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	4618      	mov	r0, r3
 800c174:	f7ff fed0 	bl	800bf18 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4618      	mov	r0, r3
 800c17c:	3708      	adds	r7, #8
 800c17e:	46bd      	mov	sp, r7
 800c180:	bdb0      	pop	{r4, r5, r7, pc}

0800c182 <_GLOBAL__sub_I__ZN5Timer10all_timersE>:
 800c182:	b580      	push	{r7, lr}
 800c184:	af00      	add	r7, sp, #0
 800c186:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c18a:	2001      	movs	r0, #1
 800c18c:	f7ff ffbc 	bl	800c108 <_Z41__static_initialization_and_destruction_0ii>
 800c190:	bd80      	pop	{r7, pc}

0800c192 <_GLOBAL__sub_D__ZN5Timer10all_timersE>:
 800c192:	b580      	push	{r7, lr}
 800c194:	af00      	add	r7, sp, #0
 800c196:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c19a:	2000      	movs	r0, #0
 800c19c:	f7ff ffb4 	bl	800c108 <_Z41__static_initialization_and_destruction_0ii>
 800c1a0:	bd80      	pop	{r7, pc}

0800c1a2 <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>:

class HALTimer {
public:
	IRQn_Type IRQn;
	TIM_HandleTypeDef* tim;
	HALTimer(TIM_HandleTypeDef* tim, IRQn_Type IRQn) : IRQn(IRQn), tim(tim) {  }
 800c1a2:	b480      	push	{r7}
 800c1a4:	b085      	sub	sp, #20
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	60f8      	str	r0, [r7, #12]
 800c1aa:	60b9      	str	r1, [r7, #8]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	80fb      	strh	r3, [r7, #6]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	88fa      	ldrh	r2, [r7, #6]
 800c1b4:	801a      	strh	r2, [r3, #0]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	605a      	str	r2, [r3, #4]
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3714      	adds	r7, #20
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c8:	4770      	bx	lr
	...

0800c1cc <_Z41__static_initialization_and_destruction_0ii>:

HALTimer _tim1(&htim1, TIM1_TRG_COM_IRQn);
HALTimer _tim2(&htim2, TIM2_IRQn);
HALTimer _tim3(&htim3, TIM3_IRQn);
HALTimer _tim4(&htim4, TIM4_IRQn);
HALTimer _tim8(&htim8, TIM8_TRG_COM_TIM14_IRQn);
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b01      	cmp	r3, #1
 800c1da:	d11d      	bne.n	800c218 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1e2:	4293      	cmp	r3, r2
 800c1e4:	d118      	bne.n	800c218 <_Z41__static_initialization_and_destruction_0ii+0x4c>
HALTimer _tim1(&htim1, TIM1_TRG_COM_IRQn);
 800c1e6:	221a      	movs	r2, #26
 800c1e8:	490d      	ldr	r1, [pc, #52]	; (800c220 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800c1ea:	480e      	ldr	r0, [pc, #56]	; (800c224 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c1ec:	f7ff ffd9 	bl	800c1a2 <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
HALTimer _tim2(&htim2, TIM2_IRQn);
 800c1f0:	221c      	movs	r2, #28
 800c1f2:	490d      	ldr	r1, [pc, #52]	; (800c228 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c1f4:	480d      	ldr	r0, [pc, #52]	; (800c22c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c1f6:	f7ff ffd4 	bl	800c1a2 <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
HALTimer _tim3(&htim3, TIM3_IRQn);
 800c1fa:	221d      	movs	r2, #29
 800c1fc:	490c      	ldr	r1, [pc, #48]	; (800c230 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800c1fe:	480d      	ldr	r0, [pc, #52]	; (800c234 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800c200:	f7ff ffcf 	bl	800c1a2 <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
HALTimer _tim4(&htim4, TIM4_IRQn);
 800c204:	221e      	movs	r2, #30
 800c206:	490c      	ldr	r1, [pc, #48]	; (800c238 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800c208:	480c      	ldr	r0, [pc, #48]	; (800c23c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800c20a:	f7ff ffca 	bl	800c1a2 <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
HALTimer _tim8(&htim8, TIM8_TRG_COM_TIM14_IRQn);
 800c20e:	222d      	movs	r2, #45	; 0x2d
 800c210:	490b      	ldr	r1, [pc, #44]	; (800c240 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800c212:	480c      	ldr	r0, [pc, #48]	; (800c244 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800c214:	f7ff ffc5 	bl	800c1a2 <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
 800c218:	bf00      	nop
 800c21a:	3708      	adds	r7, #8
 800c21c:	46bd      	mov	sp, r7
 800c21e:	bd80      	pop	{r7, pc}
 800c220:	24000c7c 	.word	0x24000c7c
 800c224:	240001ac 	.word	0x240001ac
 800c228:	24000cc8 	.word	0x24000cc8
 800c22c:	240001b4 	.word	0x240001b4
 800c230:	24000d14 	.word	0x24000d14
 800c234:	240001bc 	.word	0x240001bc
 800c238:	24000d60 	.word	0x24000d60
 800c23c:	240001c4 	.word	0x240001c4
 800c240:	24000e90 	.word	0x24000e90
 800c244:	240001cc 	.word	0x240001cc

0800c248 <_GLOBAL__sub_I__tim1>:
 800c248:	b580      	push	{r7, lr}
 800c24a:	af00      	add	r7, sp, #0
 800c24c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c250:	2001      	movs	r0, #1
 800c252:	f7ff ffbb 	bl	800c1cc <_Z41__static_initialization_and_destruction_0ii>
 800c256:	bd80      	pop	{r7, pc}

0800c258 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800c258:	b580      	push	{r7, lr}
 800c25a:	b082      	sub	sp, #8
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f000 f834 	bl	800c2ce <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	4618      	mov	r0, r3
 800c26a:	3708      	adds	r7, #8
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 800c270:	b580      	push	{r7, lr}
 800c272:	b082      	sub	sp, #8
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 f812 	bl	800c2a4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	4618      	mov	r0, r3
 800c284:	3708      	adds	r7, #8
 800c286:	46bd      	mov	sp, r7
 800c288:	bd80      	pop	{r7, pc}

0800c28a <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>:
      map() = default;
 800c28a:	b580      	push	{r7, lr}
 800c28c:	b082      	sub	sp, #8
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4618      	mov	r0, r3
 800c296:	f7ff ffeb 	bl	800c270 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	4618      	mov	r0, r3
 800c29e:	3708      	adds	r7, #8
 800c2a0:	46bd      	mov	sp, r7
 800c2a2:	bd80      	pop	{r7, pc}

0800c2a4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800c2a4:	b580      	push	{r7, lr}
 800c2a6:	b082      	sub	sp, #8
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	f000 f82e 	bl	800c30e <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	4618      	mov	r0, r3
 800c2b6:	f000 f836 	bl	800c326 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	3304      	adds	r3, #4
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7f4 f842 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3708      	adds	r7, #8
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c2ce:	b480      	push	{r7}
 800c2d0:	b083      	sub	sp, #12
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	6078      	str	r0, [r7, #4]
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4618      	mov	r0, r3
 800c2da:	370c      	adds	r7, #12
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b082      	sub	sp, #8
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 f844 	bl	800c37a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	4619      	mov	r1, r3
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f820 	bl	800c33c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4618      	mov	r0, r3
 800c300:	f7ff ffaa 	bl	800c258 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4618      	mov	r0, r3
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}

0800c30e <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c30e:	b580      	push	{r7, lr}
 800c310:	b082      	sub	sp, #8
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f83b 	bl	800c392 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4618      	mov	r0, r3
 800c320:	3708      	adds	r7, #8
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>:
      _Rb_tree_key_compare()
 800c326:	b480      	push	{r7}
 800c328:	b083      	sub	sp, #12
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	6078      	str	r0, [r7, #4]
      { }
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	4618      	mov	r0, r3
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr

0800c33c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c33c:	b580      	push	{r7, lr}
 800c33e:	b084      	sub	sp, #16
 800c340:	af00      	add	r7, sp, #0
 800c342:	6078      	str	r0, [r7, #4]
 800c344:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d012      	beq.n	800c372 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800c34c:	6838      	ldr	r0, [r7, #0]
 800c34e:	f000 f82b 	bl	800c3a8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c352:	4603      	mov	r3, r0
 800c354:	4619      	mov	r1, r3
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f7ff fff0 	bl	800c33c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800c35c:	6838      	ldr	r0, [r7, #0]
 800c35e:	f000 f82f 	bl	800c3c0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c362:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c364:	6839      	ldr	r1, [r7, #0]
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f000 f836 	bl	800c3d8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c370:	e7e9      	b.n	800c346 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800c372:	bf00      	nop
 800c374:	3710      	adds	r7, #16
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c37a:	b480      	push	{r7}
 800c37c:	b083      	sub	sp, #12
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	689b      	ldr	r3, [r3, #8]
 800c386:	4618      	mov	r0, r3
 800c388:	370c      	adds	r7, #12
 800c38a:	46bd      	mov	sp, r7
 800c38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c390:	4770      	bx	lr

0800c392 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c392:	b480      	push	{r7}
 800c394:	b083      	sub	sp, #12
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	68db      	ldr	r3, [r3, #12]
 800c3b4:	4618      	mov	r0, r3
 800c3b6:	370c      	adds	r7, #12
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c3c0:	b480      	push	{r7}
 800c3c2:	b083      	sub	sp, #12
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	689b      	ldr	r3, [r3, #8]
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr

0800c3d8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800c3e2:	6839      	ldr	r1, [r7, #0]
 800c3e4:	6878      	ldr	r0, [r7, #4]
 800c3e6:	f000 f808 	bl	800c3fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 800c3ea:	6839      	ldr	r1, [r7, #0]
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	f000 f819 	bl	800c424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 800c3f2:	bf00      	nop
 800c3f4:	3708      	adds	r7, #8
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	bd80      	pop	{r7, pc}

0800c3fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c3fa:	b590      	push	{r4, r7, lr}
 800c3fc:	b083      	sub	sp, #12
 800c3fe:	af00      	add	r7, sp, #0
 800c400:	6078      	str	r0, [r7, #4]
 800c402:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 f81f 	bl	800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c40a:	4604      	mov	r4, r0
 800c40c:	6838      	ldr	r0, [r7, #0]
 800c40e:	f7f9 f82b 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 800c412:	4603      	mov	r3, r0
 800c414:	4619      	mov	r1, r3
 800c416:	4620      	mov	r0, r4
 800c418:	f000 f821 	bl	800c45e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>
      }
 800c41c:	bf00      	nop
 800c41e:	370c      	adds	r7, #12
 800c420:	46bd      	mov	sp, r7
 800c422:	bd90      	pop	{r4, r7, pc}

0800c424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c424:	b580      	push	{r7, lr}
 800c426:	b082      	sub	sp, #8
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 f80a 	bl	800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c434:	4603      	mov	r3, r0
 800c436:	2201      	movs	r2, #1
 800c438:	6839      	ldr	r1, [r7, #0]
 800c43a:	4618      	mov	r0, r3
 800c43c:	f000 f81b 	bl	800c476 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>
 800c440:	bf00      	nop
 800c442:	3708      	adds	r7, #8
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	4618      	mov	r0, r3
 800c454:	370c      	adds	r7, #12
 800c456:	46bd      	mov	sp, r7
 800c458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c45c:	4770      	bx	lr

0800c45e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c45e:	b580      	push	{r7, lr}
 800c460:	b082      	sub	sp, #8
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800c468:	6838      	ldr	r0, [r7, #0]
 800c46a:	f000 f823 	bl	800c4b4 <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>
	}
 800c46e:	bf00      	nop
 800c470:	3708      	adds	r7, #8
 800c472:	46bd      	mov	sp, r7
 800c474:	bd80      	pop	{r7, pc}

0800c476 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c476:	b580      	push	{r7, lr}
 800c478:	b088      	sub	sp, #32
 800c47a:	af00      	add	r7, sp, #0
 800c47c:	60f8      	str	r0, [r7, #12]
 800c47e:	60b9      	str	r1, [r7, #8]
 800c480:	607a      	str	r2, [r7, #4]
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	61fb      	str	r3, [r7, #28]
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	61bb      	str	r3, [r7, #24]
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c48e:	f7f3 ff47 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c492:	4603      	mov	r3, r0
 800c494:	2b00      	cmp	r3, #0
 800c496:	d003      	beq.n	800c4a0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800c498:	69b8      	ldr	r0, [r7, #24]
 800c49a:	f014 f8bb 	bl	8020614 <_ZdlPv>
	    return;
 800c49e:	e005      	b.n	800c4ac <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c4a0:	697a      	ldr	r2, [r7, #20]
 800c4a2:	69b9      	ldr	r1, [r7, #24]
 800c4a4:	69f8      	ldr	r0, [r7, #28]
 800c4a6:	f000 f80f 	bl	800c4c8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800c4aa:	bf00      	nop
 800c4ac:	bf00      	nop
 800c4ae:	3720      	adds	r7, #32
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>:
    destroy_at(_Tp* __location)
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
    }
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	60f8      	str	r0, [r7, #12]
 800c4d0:	60b9      	str	r1, [r7, #8]
 800c4d2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	4613      	mov	r3, r2
 800c4d8:	005b      	lsls	r3, r3, #1
 800c4da:	4413      	add	r3, r2
 800c4dc:	00db      	lsls	r3, r3, #3
 800c4de:	4619      	mov	r1, r3
 800c4e0:	68b8      	ldr	r0, [r7, #8]
 800c4e2:	f014 f899 	bl	8020618 <_ZdlPvj>
      }
 800c4e6:	3710      	adds	r7, #16
 800c4e8:	46bd      	mov	sp, r7
 800c4ea:	bd80      	pop	{r7, pc}

0800c4ec <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>:
      ~map() = default;
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b082      	sub	sp, #8
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f7ff fef4 	bl	800c2e4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	4618      	mov	r0, r3
 800c500:	3708      	adds	r7, #8
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
	...

0800c508 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Models/Packet.hpp"

map<uint16_t, Packet*> Packet::all_packets;
 800c508:	b580      	push	{r7, lr}
 800c50a:	b082      	sub	sp, #8
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b01      	cmp	r3, #1
 800c516:	d107      	bne.n	800c528 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c51e:	4293      	cmp	r3, r2
 800c520:	d102      	bne.n	800c528 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c522:	4809      	ldr	r0, [pc, #36]	; (800c548 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c524:	f7ff feb1 	bl	800c28a <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d107      	bne.n	800c53e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c52e:	683b      	ldr	r3, [r7, #0]
 800c530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c534:	4293      	cmp	r3, r2
 800c536:	d102      	bne.n	800c53e <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c538:	4803      	ldr	r0, [pc, #12]	; (800c548 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c53a:	f7ff ffd7 	bl	800c4ec <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>
 800c53e:	bf00      	nop
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
 800c546:	bf00      	nop
 800c548:	240001d4 	.word	0x240001d4

0800c54c <_GLOBAL__sub_I__ZN6Packet11all_packetsE>:
 800c54c:	b580      	push	{r7, lr}
 800c54e:	af00      	add	r7, sp, #0
 800c550:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c554:	2001      	movs	r0, #1
 800c556:	f7ff ffd7 	bl	800c508 <_Z41__static_initialization_and_destruction_0ii>
 800c55a:	bd80      	pop	{r7, pc}

0800c55c <_GLOBAL__sub_D__ZN6Packet11all_packetsE>:
 800c55c:	b580      	push	{r7, lr}
 800c55e:	af00      	add	r7, sp, #0
 800c560:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c564:	2000      	movs	r0, #0
 800c566:	f7ff ffcf 	bl	800c508 <_Z41__static_initialization_and_destruction_0ii>
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f86f 	bl	800c658 <_ZNSaIP3PinED1Ev>
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	4618      	mov	r0, r3
 800c57e:	3708      	adds	r7, #8
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800c584:	b580      	push	{r7, lr}
 800c586:	b082      	sub	sp, #8
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4618      	mov	r0, r3
 800c590:	f000 f852 	bl	800c638 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4618      	mov	r0, r3
 800c598:	3708      	adds	r7, #8
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>:
      vector() = default;
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b082      	sub	sp, #8
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	f7ff ffeb 	bl	800c584 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>:
#include "Mini-STLIB/Models/Pin.hpp"

vector<Pin*> Pin::all_pins;

Pin::Pin(GPIO_TypeDef* port, uint16_t pin) : port(port), pin(pin) {
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b086      	sub	sp, #24
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	60f8      	str	r0, [r7, #12]
 800c5c0:	60b9      	str	r1, [r7, #8]
 800c5c2:	4613      	mov	r3, r2
 800c5c4:	80fb      	strh	r3, [r7, #6]
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	68ba      	ldr	r2, [r7, #8]
 800c5ca:	601a      	str	r2, [r3, #0]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	88fa      	ldrh	r2, [r7, #6]
 800c5d0:	809a      	strh	r2, [r3, #4]
	Pin::all_pins.push_back(this);
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	617b      	str	r3, [r7, #20]
 800c5d6:	f107 0314 	add.w	r3, r7, #20
 800c5da:	4619      	mov	r1, r3
 800c5dc:	4803      	ldr	r0, [pc, #12]	; (800c5ec <_ZN3PinC1EP12GPIO_TypeDeft+0x34>)
 800c5de:	f000 f85f 	bl	800c6a0 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>
}
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3718      	adds	r7, #24
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	240001ec 	.word	0x240001ec

0800c5f0 <_ZN3Pin15get_pin_from_idEt>:

optional<Pin*> Pin::get_pin_from_id(uint16_t id){
 800c5f0:	b590      	push	{r4, r7, lr}
 800c5f2:	b083      	sub	sp, #12
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
 800c5f8:	460b      	mov	r3, r1
 800c5fa:	807b      	strh	r3, [r7, #2]
	if(id < Pin::all_pins.size())
 800c5fc:	887c      	ldrh	r4, [r7, #2]
 800c5fe:	480d      	ldr	r0, [pc, #52]	; (800c634 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c600:	f000 f85f 	bl	800c6c2 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800c604:	4603      	mov	r3, r0
 800c606:	429c      	cmp	r4, r3
 800c608:	bf34      	ite	cc
 800c60a:	2301      	movcc	r3, #1
 800c60c:	2300      	movcs	r3, #0
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00a      	beq.n	800c62a <_ZN3Pin15get_pin_from_idEt+0x3a>
		return Pin::all_pins[id];
 800c614:	887b      	ldrh	r3, [r7, #2]
 800c616:	4619      	mov	r1, r3
 800c618:	4806      	ldr	r0, [pc, #24]	; (800c634 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c61a:	f000 f862 	bl	800c6e2 <_ZNSt6vectorIP3PinSaIS1_EEixEj>
 800c61e:	4603      	mov	r3, r0
 800c620:	4619      	mov	r1, r3
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f86d 	bl	800c702 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>
 800c628:	e000      	b.n	800c62c <_ZN3Pin15get_pin_from_idEt+0x3c>
}
 800c62a:	bf00      	nop
 800c62c:	6878      	ldr	r0, [r7, #4]
 800c62e:	370c      	adds	r7, #12
 800c630:	46bd      	mov	sp, r7
 800c632:	bd90      	pop	{r4, r7, pc}
 800c634:	240001ec 	.word	0x240001ec

0800c638 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c640:	6878      	ldr	r0, [r7, #4]
 800c642:	f000 f872 	bl	800c72a <_ZNSaIP3PinEC1Ev>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 f87a 	bl	800c742 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4618      	mov	r0, r3
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}

0800c658 <_ZNSaIP3PinED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c658:	b480      	push	{r7}
 800c65a:	b083      	sub	sp, #12
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c66e:	b580      	push	{r7, lr}
 800c670:	b082      	sub	sp, #8
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	689a      	ldr	r2, [r3, #8]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c686:	461a      	mov	r2, r3
 800c688:	6878      	ldr	r0, [r7, #4]
 800c68a:	f000 f86e 	bl	800c76a <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	4618      	mov	r0, r3
 800c692:	f7ff ff6b 	bl	800c56c <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4618      	mov	r0, r3
 800c69a:	3708      	adds	r7, #8
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
 800c6a8:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c6aa:	6838      	ldr	r0, [r7, #0]
 800c6ac:	f000 f870 	bl	800c790 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	4619      	mov	r1, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 f876 	bl	800c7a6 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800c6ba:	bf00      	nop
 800c6bc:	3708      	adds	r7, #8
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}

0800c6c2 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c6c2:	b480      	push	{r7}
 800c6c4:	b083      	sub	sp, #12
 800c6c6:	af00      	add	r7, sp, #0
 800c6c8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	685a      	ldr	r2, [r3, #4]
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	1ad3      	subs	r3, r2, r3
 800c6d4:	109b      	asrs	r3, r3, #2
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e0:	4770      	bx	lr

0800c6e2 <_ZNSt6vectorIP3PinSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c6e2:	b480      	push	{r7}
 800c6e4:	b083      	sub	sp, #12
 800c6e6:	af00      	add	r7, sp, #0
 800c6e8:	6078      	str	r0, [r7, #4]
 800c6ea:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681a      	ldr	r2, [r3, #0]
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	4413      	add	r3, r2
      }
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	370c      	adds	r7, #12
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr

0800c702 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800c702:	b5b0      	push	{r4, r5, r7, lr}
 800c704:	b082      	sub	sp, #8
 800c706:	af00      	add	r7, sp, #0
 800c708:	6078      	str	r0, [r7, #4]
 800c70a:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800c70c:	687c      	ldr	r4, [r7, #4]
 800c70e:	6838      	ldr	r0, [r7, #0]
 800c710:	f000 f87b 	bl	800c80a <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c714:	4603      	mov	r3, r0
 800c716:	461a      	mov	r2, r3
 800c718:	4629      	mov	r1, r5
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 f891 	bl	800c842 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	4618      	mov	r0, r3
 800c724:	3708      	adds	r7, #8
 800c726:	46bd      	mov	sp, r7
 800c728:	bdb0      	pop	{r4, r5, r7, pc}

0800c72a <_ZNSaIP3PinEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c72a:	b580      	push	{r7, lr}
 800c72c:	b082      	sub	sp, #8
 800c72e:	af00      	add	r7, sp, #0
 800c730:	6078      	str	r0, [r7, #4]
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 f89a 	bl	800c86c <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	4618      	mov	r0, r3
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c742:	b480      	push	{r7}
 800c744:	b083      	sub	sp, #12
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	2200      	movs	r2, #0
 800c74e:	601a      	str	r2, [r3, #0]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	2200      	movs	r2, #0
 800c754:	605a      	str	r2, [r3, #4]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2200      	movs	r2, #0
 800c75a:	609a      	str	r2, [r3, #8]
	{ }
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4618      	mov	r0, r3
 800c760:	370c      	adds	r7, #12
 800c762:	46bd      	mov	sp, r7
 800c764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c768:	4770      	bx	lr

0800c76a <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b084      	sub	sp, #16
 800c76e:	af00      	add	r7, sp, #0
 800c770:	60f8      	str	r0, [r7, #12]
 800c772:	60b9      	str	r1, [r7, #8]
 800c774:	607a      	str	r2, [r7, #4]
	if (__p)
 800c776:	68bb      	ldr	r3, [r7, #8]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d005      	beq.n	800c788 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	687a      	ldr	r2, [r7, #4]
 800c780:	68b9      	ldr	r1, [r7, #8]
 800c782:	4618      	mov	r0, r3
 800c784:	f000 f87d 	bl	800c882 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>
      }
 800c788:	bf00      	nop
 800c78a:	3710      	adds	r7, #16
 800c78c:	46bd      	mov	sp, r7
 800c78e:	bd80      	pop	{r7, pc}

0800c790 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	4618      	mov	r0, r3
 800c79c:	370c      	adds	r7, #12
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a4:	4770      	bx	lr

0800c7a6 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c7a6:	b5b0      	push	{r4, r5, r7, lr}
 800c7a8:	b082      	sub	sp, #8
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
 800c7ae:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685a      	ldr	r2, [r3, #4]
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	689b      	ldr	r3, [r3, #8]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d011      	beq.n	800c7e0 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c7bc:	687c      	ldr	r4, [r7, #4]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	685d      	ldr	r5, [r3, #4]
 800c7c2:	6838      	ldr	r0, [r7, #0]
 800c7c4:	f000 f87c 	bl	800c8c0 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	4629      	mov	r1, r5
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f000 f896 	bl	800c900 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	1d1a      	adds	r2, r3, #4
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	605a      	str	r2, [r3, #4]
 800c7de:	e00c      	b.n	800c7fa <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c7e0:	6878      	ldr	r0, [r7, #4]
 800c7e2:	f000 f89f 	bl	800c924 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800c7e6:	4604      	mov	r4, r0
 800c7e8:	6838      	ldr	r0, [r7, #0]
 800c7ea:	f000 f869 	bl	800c8c0 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	461a      	mov	r2, r3
 800c7f2:	4621      	mov	r1, r4
 800c7f4:	6878      	ldr	r0, [r7, #4]
 800c7f6:	f000 f8a7 	bl	800c948 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 f920 	bl	800ca40 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>
 800c800:	4603      	mov	r3, r0
      }
 800c802:	4618      	mov	r0, r3
 800c804:	3708      	adds	r7, #8
 800c806:	46bd      	mov	sp, r7
 800c808:	bdb0      	pop	{r4, r5, r7, pc}

0800c80a <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c80a:	b480      	push	{r7}
 800c80c:	b083      	sub	sp, #12
 800c80e:	af00      	add	r7, sp, #0
 800c810:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	4618      	mov	r0, r3
 800c816:	370c      	adds	r7, #12
 800c818:	46bd      	mov	sp, r7
 800c81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81e:	4770      	bx	lr

0800c820 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800c820:	b590      	push	{r4, r7, lr}
 800c822:	b085      	sub	sp, #20
 800c824:	af00      	add	r7, sp, #0
 800c826:	60f8      	str	r0, [r7, #12]
 800c828:	7239      	strb	r1, [r7, #8]
 800c82a:	607a      	str	r2, [r7, #4]
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	687a      	ldr	r2, [r7, #4]
 800c830:	4621      	mov	r1, r4
 800c832:	4618      	mov	r0, r3
 800c834:	f000 f931 	bl	800ca9a <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	4618      	mov	r0, r3
 800c83c:	3714      	adds	r7, #20
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd90      	pop	{r4, r7, pc}

0800c842 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800c842:	b5b0      	push	{r4, r5, r7, lr}
 800c844:	b084      	sub	sp, #16
 800c846:	af00      	add	r7, sp, #0
 800c848:	60f8      	str	r0, [r7, #12]
 800c84a:	7239      	strb	r1, [r7, #8]
 800c84c:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800c84e:	68fc      	ldr	r4, [r7, #12]
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff ffda 	bl	800c80a <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c856:	4603      	mov	r3, r0
 800c858:	461a      	mov	r2, r3
 800c85a:	4629      	mov	r1, r5
 800c85c:	4620      	mov	r0, r4
 800c85e:	f7ff ffdf 	bl	800c820 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	4618      	mov	r0, r3
 800c866:	3710      	adds	r7, #16
 800c868:	46bd      	mov	sp, r7
 800c86a:	bdb0      	pop	{r4, r5, r7, pc}

0800c86c <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c86c:	b480      	push	{r7}
 800c86e:	b083      	sub	sp, #12
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	4618      	mov	r0, r3
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c882:	b580      	push	{r7, lr}
 800c884:	b088      	sub	sp, #32
 800c886:	af00      	add	r7, sp, #0
 800c888:	60f8      	str	r0, [r7, #12]
 800c88a:	60b9      	str	r1, [r7, #8]
 800c88c:	607a      	str	r2, [r7, #4]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	61fb      	str	r3, [r7, #28]
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	61bb      	str	r3, [r7, #24]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c89a:	f7f3 fd41 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d003      	beq.n	800c8ac <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c8a4:	69b8      	ldr	r0, [r7, #24]
 800c8a6:	f013 feb5 	bl	8020614 <_ZdlPv>
	    return;
 800c8aa:	e005      	b.n	800c8b8 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c8ac:	697a      	ldr	r2, [r7, #20]
 800c8ae:	69b9      	ldr	r1, [r7, #24]
 800c8b0:	69f8      	ldr	r0, [r7, #28]
 800c8b2:	f000 f9f7 	bl	800cca4 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c8b6:	bf00      	nop
 800c8b8:	bf00      	nop
 800c8ba:	3720      	adds	r7, #32
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	bd80      	pop	{r7, pc}

0800c8c0 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c8c0:	b480      	push	{r7}
 800c8c2:	b083      	sub	sp, #12
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	370c      	adds	r7, #12
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d4:	4770      	bx	lr

0800c8d6 <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800c8d6:	b590      	push	{r4, r7, lr}
 800c8d8:	b083      	sub	sp, #12
 800c8da:	af00      	add	r7, sp, #0
 800c8dc:	6078      	str	r0, [r7, #4]
 800c8de:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800c8e0:	6838      	ldr	r0, [r7, #0]
 800c8e2:	f7ff ffed 	bl	800c8c0 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c8e6:	4603      	mov	r3, r0
 800c8e8:	681c      	ldr	r4, [r3, #0]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4619      	mov	r1, r3
 800c8ee:	2004      	movs	r0, #4
 800c8f0:	f7f3 fd1e 	bl	8000330 <_ZnwjPv>
 800c8f4:	4603      	mov	r3, r0
 800c8f6:	601c      	str	r4, [r3, #0]
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	bd90      	pop	{r4, r7, pc}

0800c900 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	60b9      	str	r1, [r7, #8]
 800c90a:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f7ff ffd7 	bl	800c8c0 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c912:	4603      	mov	r3, r0
 800c914:	4619      	mov	r1, r3
 800c916:	68b8      	ldr	r0, [r7, #8]
 800c918:	f7ff ffdd 	bl	800c8d6 <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800c91c:	bf00      	nop
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	1d1a      	adds	r2, r3, #4
 800c930:	f107 030c 	add.w	r3, r7, #12
 800c934:	4611      	mov	r1, r2
 800c936:	4618      	mov	r0, r3
 800c938:	f000 f8c7 	bl	800caca <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	4618      	mov	r0, r3
 800c940:	3710      	adds	r7, #16
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}
	...

0800c948 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c948:	b5b0      	push	{r4, r5, r7, lr}
 800c94a:	b08c      	sub	sp, #48	; 0x30
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	60f8      	str	r0, [r7, #12]
 800c950:	60b9      	str	r1, [r7, #8]
 800c952:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c954:	4a39      	ldr	r2, [pc, #228]	; (800ca3c <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800c956:	2101      	movs	r1, #1
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f000 f8c6 	bl	800caea <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>
 800c95e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	685b      	ldr	r3, [r3, #4]
 800c96a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	f000 f903 	bl	800cb78 <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>
 800c972:	4603      	mov	r3, r0
 800c974:	617b      	str	r3, [r7, #20]
 800c976:	f107 0214 	add.w	r2, r7, #20
 800c97a:	f107 0308 	add.w	r3, r7, #8
 800c97e:	4611      	mov	r1, r2
 800c980:	4618      	mov	r0, r3
 800c982:	f000 f909 	bl	800cb98 <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c986:	4603      	mov	r3, r0
 800c988:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c98e:	4618      	mov	r0, r3
 800c990:	f000 f917 	bl	800cbc2 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>
 800c994:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800c99a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c99c:	6a3b      	ldr	r3, [r7, #32]
 800c99e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c9a0:	69fa      	ldr	r2, [r7, #28]
 800c9a2:	18d5      	adds	r5, r2, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7ff ff8b 	bl	800c8c0 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c9aa:	4603      	mov	r3, r0
 800c9ac:	461a      	mov	r2, r3
 800c9ae:	4629      	mov	r1, r5
 800c9b0:	4620      	mov	r0, r4
 800c9b2:	f7ff ffa5 	bl	800c900 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c9ba:	f107 0308 	add.w	r3, r7, #8
 800c9be:	4618      	mov	r0, r3
 800c9c0:	f000 f927 	bl	800cc12 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800c9c4:	4603      	mov	r3, r0
 800c9c6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 f92c 	bl	800cc28 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800c9d0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c9d2:	69fa      	ldr	r2, [r7, #28]
 800c9d4:	4621      	mov	r1, r4
 800c9d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9d8:	f000 f907 	bl	800cbea <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c9dc:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	3304      	adds	r3, #4
 800c9e2:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c9e4:	f107 0308 	add.w	r3, r7, #8
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	f000 f912 	bl	800cc12 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f000 f917 	bl	800cc28 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800c9fa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c9fc:	69ba      	ldr	r2, [r7, #24]
 800c9fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca00:	4620      	mov	r0, r4
 800ca02:	f000 f8f2 	bl	800cbea <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800ca06:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800ca08:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	689a      	ldr	r2, [r3, #8]
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800ca14:	461a      	mov	r2, r3
 800ca16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca18:	f7ff fea7 	bl	800c76a <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	69fa      	ldr	r2, [r7, #28]
 800ca20:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	69ba      	ldr	r2, [r7, #24]
 800ca26:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ca28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2a:	009b      	lsls	r3, r3, #2
 800ca2c:	69fa      	ldr	r2, [r7, #28]
 800ca2e:	441a      	add	r2, r3
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	609a      	str	r2, [r3, #8]
    }
 800ca34:	bf00      	nop
 800ca36:	3730      	adds	r7, #48	; 0x30
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	bdb0      	pop	{r4, r5, r7, pc}
 800ca3c:	08020ccc 	.word	0x08020ccc

0800ca40 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800ca48:	6878      	ldr	r0, [r7, #4]
 800ca4a:	f7ff ff6b 	bl	800c924 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	60fb      	str	r3, [r7, #12]
 800ca52:	f107 030c 	add.w	r3, r7, #12
 800ca56:	2101      	movs	r1, #1
 800ca58:	4618      	mov	r0, r3
 800ca5a:	f000 f8fe 	bl	800cc5a <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	60bb      	str	r3, [r7, #8]
 800ca62:	f107 0308 	add.w	r3, r7, #8
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 f910 	bl	800cc8c <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>
 800ca6c:	4603      	mov	r3, r0
      }
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	60f8      	str	r0, [r7, #12]
 800ca7e:	7239      	strb	r1, [r7, #8]
 800ca80:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7ff fec1 	bl	800c80a <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	681a      	ldr	r2, [r3, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	601a      	str	r2, [r3, #0]
	    { }
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4618      	mov	r0, r3
 800ca94:	3710      	adds	r7, #16
 800ca96:	46bd      	mov	sp, r7
 800ca98:	bd80      	pop	{r7, pc}

0800ca9a <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 800ca9a:	b5b0      	push	{r4, r5, r7, lr}
 800ca9c:	b084      	sub	sp, #16
 800ca9e:	af00      	add	r7, sp, #0
 800caa0:	60f8      	str	r0, [r7, #12]
 800caa2:	7239      	strb	r1, [r7, #8]
 800caa4:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 800caa6:	68fc      	ldr	r4, [r7, #12]
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f7ff feae 	bl	800c80a <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800caae:	4603      	mov	r3, r0
 800cab0:	461a      	mov	r2, r3
 800cab2:	4629      	mov	r1, r5
 800cab4:	4620      	mov	r0, r4
 800cab6:	f7ff ffde 	bl	800ca76 <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2201      	movs	r2, #1
 800cabe:	711a      	strb	r2, [r3, #4]
	{ }
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	4618      	mov	r0, r3
 800cac4:	3710      	adds	r7, #16
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bdb0      	pop	{r4, r5, r7, pc}

0800caca <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800caca:	b480      	push	{r7}
 800cacc:	b083      	sub	sp, #12
 800cace:	af00      	add	r7, sp, #0
 800cad0:	6078      	str	r0, [r7, #4]
 800cad2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	601a      	str	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	4618      	mov	r0, r3
 800cae0:	370c      	adds	r7, #12
 800cae2:	46bd      	mov	sp, r7
 800cae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae8:	4770      	bx	lr

0800caea <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800caea:	b590      	push	{r4, r7, lr}
 800caec:	b087      	sub	sp, #28
 800caee:	af00      	add	r7, sp, #0
 800caf0:	60f8      	str	r0, [r7, #12]
 800caf2:	60b9      	str	r1, [r7, #8]
 800caf4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f000 f8e3 	bl	800ccc2 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cafc:	4604      	mov	r4, r0
 800cafe:	68f8      	ldr	r0, [r7, #12]
 800cb00:	f7ff fddf 	bl	800c6c2 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb04:	4603      	mov	r3, r0
 800cb06:	1ae2      	subs	r2, r4, r3
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	bf34      	ite	cc
 800cb0e:	2301      	movcc	r3, #1
 800cb10:	2300      	movcs	r3, #0
 800cb12:	b2db      	uxtb	r3, r3
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d002      	beq.n	800cb1e <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f013 fe49 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cb1e:	68f8      	ldr	r0, [r7, #12]
 800cb20:	f7ff fdcf 	bl	800c6c2 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb24:	4604      	mov	r4, r0
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7ff fdcb 	bl	800c6c2 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb2c:	4603      	mov	r3, r0
 800cb2e:	613b      	str	r3, [r7, #16]
 800cb30:	f107 0208 	add.w	r2, r7, #8
 800cb34:	f107 0310 	add.w	r3, r7, #16
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7f5 fe89 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800cb40:	4603      	mov	r3, r0
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	4423      	add	r3, r4
 800cb46:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cb48:	68f8      	ldr	r0, [r7, #12]
 800cb4a:	f7ff fdba 	bl	800c6c2 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb4e:	4602      	mov	r2, r0
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d306      	bcc.n	800cb64 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800cb56:	68f8      	ldr	r0, [r7, #12]
 800cb58:	f000 f8b3 	bl	800ccc2 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb5c:	4602      	mov	r2, r0
 800cb5e:	697b      	ldr	r3, [r7, #20]
 800cb60:	4293      	cmp	r3, r2
 800cb62:	d904      	bls.n	800cb6e <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x84>
 800cb64:	68f8      	ldr	r0, [r7, #12]
 800cb66:	f000 f8ac 	bl	800ccc2 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	e000      	b.n	800cb70 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x86>
 800cb6e:	697b      	ldr	r3, [r7, #20]
      }
 800cb70:	4618      	mov	r0, r3
 800cb72:	371c      	adds	r7, #28
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd90      	pop	{r4, r7, pc}

0800cb78 <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800cb80:	687a      	ldr	r2, [r7, #4]
 800cb82:	f107 030c 	add.w	r3, r7, #12
 800cb86:	4611      	mov	r1, r2
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7ff ff9e 	bl	800caca <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	4618      	mov	r0, r3
 800cb92:	3710      	adds	r7, #16
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cb98:	b590      	push	{r4, r7, lr}
 800cb9a:	b083      	sub	sp, #12
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f000 f835 	bl	800cc12 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cba8:	4603      	mov	r3, r0
 800cbaa:	681c      	ldr	r4, [r3, #0]
 800cbac:	6838      	ldr	r0, [r7, #0]
 800cbae:	f000 f830 	bl	800cc12 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	1ae3      	subs	r3, r4, r3
 800cbb8:	109b      	asrs	r3, r3, #2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	370c      	adds	r7, #12
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd90      	pop	{r4, r7, pc}

0800cbc2 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b082      	sub	sp, #8
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
 800cbca:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d006      	beq.n	800cbe0 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x1e>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6839      	ldr	r1, [r7, #0]
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	f000 f884 	bl	800cce4 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>
 800cbdc:	4603      	mov	r3, r0
 800cbde:	e000      	b.n	800cbe2 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x20>
 800cbe0:	2300      	movs	r3, #0
      }
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	3708      	adds	r7, #8
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd80      	pop	{r7, pc}

0800cbea <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cbea:	b590      	push	{r4, r7, lr}
 800cbec:	b087      	sub	sp, #28
 800cbee:	af02      	add	r7, sp, #8
 800cbf0:	60f8      	str	r0, [r7, #12]
 800cbf2:	60b9      	str	r1, [r7, #8]
 800cbf4:	607a      	str	r2, [r7, #4]
 800cbf6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cbf8:	f88d 4000 	strb.w	r4, [sp]
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	68b9      	ldr	r1, [r7, #8]
 800cc02:	68f8      	ldr	r0, [r7, #12]
 800cc04:	f000 f88e 	bl	800cd24 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800cc08:	4603      	mov	r3, r0
      }
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd90      	pop	{r4, r7, pc}

0800cc12 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cc12:	b480      	push	{r7}
 800cc14:	b083      	sub	sp, #12
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	370c      	adds	r7, #12
 800cc20:	46bd      	mov	sp, r7
 800cc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc26:	4770      	bx	lr

0800cc28 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800cc28:	b480      	push	{r7}
 800cc2a:	b083      	sub	sp, #12
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	4618      	mov	r0, r3
 800cc34:	370c      	adds	r7, #12
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800cc3e:	b580      	push	{r7, lr}
 800cc40:	b084      	sub	sp, #16
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	60f8      	str	r0, [r7, #12]
 800cc46:	60b9      	str	r1, [r7, #8]
 800cc48:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800cc4a:	68b9      	ldr	r1, [r7, #8]
 800cc4c:	68f8      	ldr	r0, [r7, #12]
 800cc4e:	f000 f885 	bl	800cd5c <_ZSt8_DestroyIPP3PinEvT_S3_>
    }
 800cc52:	bf00      	nop
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681a      	ldr	r2, [r3, #0]
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	009b      	lsls	r3, r3, #2
 800cc6c:	425b      	negs	r3, r3
 800cc6e:	4413      	add	r3, r2
 800cc70:	60fb      	str	r3, [r7, #12]
 800cc72:	f107 020c 	add.w	r2, r7, #12
 800cc76:	f107 0308 	add.w	r3, r7, #8
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff ff24 	bl	800caca <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	4618      	mov	r0, r3
 800cc86:	3710      	adds	r7, #16
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	681b      	ldr	r3, [r3, #0]
 800cc98:	4618      	mov	r0, r3
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	009b      	lsls	r3, r3, #2
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	68b8      	ldr	r0, [r7, #8]
 800ccb8:	f013 fcae 	bl	8020618 <_ZdlPvj>
      }
 800ccbc:	3710      	adds	r7, #16
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	bd80      	pop	{r7, pc}

0800ccc2 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ccc2:	b580      	push	{r7, lr}
 800ccc4:	b082      	sub	sp, #8
 800ccc6:	af00      	add	r7, sp, #0
 800ccc8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	4618      	mov	r0, r3
 800ccce:	f000 f881 	bl	800cdd4 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	f000 f863 	bl	800cda0 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}

0800cce4 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b084      	sub	sp, #16
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	60fb      	str	r3, [r7, #12]
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ccf6:	f7f3 fb13 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d006      	beq.n	800cd0e <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cd00:	68bb      	ldr	r3, [r7, #8]
 800cd02:	009b      	lsls	r3, r3, #2
 800cd04:	4618      	mov	r0, r3
 800cd06:	f013 fc89 	bl	802061c <_Znwj>
 800cd0a:	4603      	mov	r3, r0
 800cd0c:	e006      	b.n	800cd1c <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800cd0e:	2200      	movs	r2, #0
 800cd10:	68b9      	ldr	r1, [r7, #8]
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f8a9 	bl	800ce6a <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	bf00      	nop
      { return __a.allocate(__n); }
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3710      	adds	r7, #16
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}

0800cd24 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	60f8      	str	r0, [r7, #12]
 800cd2c:	60b9      	str	r1, [r7, #8]
 800cd2e:	607a      	str	r2, [r7, #4]
 800cd30:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	68b9      	ldr	r1, [r7, #8]
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f000 f856 	bl	800cdea <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cd3e:	4603      	mov	r3, r0
      }
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <_ZSt10destroy_atIP3PinEvPT_>:
    destroy_at(_Tp* __location)
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
    }
 800cd50:	bf00      	nop
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr

0800cd5c <_ZSt8_DestroyIPP3PinEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b082      	sub	sp, #8
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800cd66:	f7f3 fadb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cd6a:	4603      	mov	r3, r0
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d004      	beq.n	800cd7a <_ZSt8_DestroyIPP3PinEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800cd70:	6839      	ldr	r1, [r7, #0]
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f856 	bl	800ce24 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>
 800cd78:	e003      	b.n	800cd82 <_ZSt8_DestroyIPP3PinEvT_S3_+0x26>
	__destroy(__first, __last);
 800cd7a:	6839      	ldr	r1, [r7, #0]
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 f869 	bl	800ce54 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>
    }
 800cd82:	3708      	adds	r7, #8
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}

0800cd88 <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800cd88:	b480      	push	{r7}
 800cd8a:	b083      	sub	sp, #12
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800cd90:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800cd94:	4618      	mov	r0, r3
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b084      	sub	sp, #16
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cda8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cdac:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f7ff ffea 	bl	800cd88 <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>
 800cdb4:	4603      	mov	r3, r0
 800cdb6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cdb8:	f107 0208 	add.w	r2, r7, #8
 800cdbc:	f107 030c 	add.w	r3, r7, #12
 800cdc0:	4611      	mov	r1, r2
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7f6 f80f 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	681b      	ldr	r3, [r3, #0]
      }
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800cdd4:	b480      	push	{r7}
 800cdd6:	b083      	sub	sp, #12
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	4618      	mov	r0, r3
 800cde0:	370c      	adds	r7, #12
 800cde2:	46bd      	mov	sp, r7
 800cde4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde8:	4770      	bx	lr

0800cdea <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800cdea:	b5b0      	push	{r4, r5, r7, lr}
 800cdec:	b084      	sub	sp, #16
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	60f8      	str	r0, [r7, #12]
 800cdf2:	60b9      	str	r1, [r7, #8]
 800cdf4:	607a      	str	r2, [r7, #4]
 800cdf6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800cdf8:	68f8      	ldr	r0, [r7, #12]
 800cdfa:	f000 f855 	bl	800cea8 <_ZSt12__niter_baseIPP3PinET_S3_>
 800cdfe:	4604      	mov	r4, r0
 800ce00:	68b8      	ldr	r0, [r7, #8]
 800ce02:	f000 f851 	bl	800cea8 <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce06:	4605      	mov	r5, r0
 800ce08:	6878      	ldr	r0, [r7, #4]
 800ce0a:	f000 f84d 	bl	800cea8 <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	4629      	mov	r1, r5
 800ce14:	4620      	mov	r0, r4
 800ce16:	f000 f852 	bl	800cebe <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ce1a:	4603      	mov	r3, r0
    }
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	3710      	adds	r7, #16
 800ce20:	46bd      	mov	sp, r7
 800ce22:	bdb0      	pop	{r4, r5, r7, pc}

0800ce24 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ce24:	b580      	push	{r7, lr}
 800ce26:	b082      	sub	sp, #8
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
 800ce2c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d00a      	beq.n	800ce4c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	f000 f85f 	bl	800cefa <_ZSt11__addressofIP3PinEPT_RS2_>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f000 f866 	bl	800cf10 <_ZSt8_DestroyIP3PinEvPT_>
	  for (; __first != __last; ++__first)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	3304      	adds	r3, #4
 800ce48:	607b      	str	r3, [r7, #4]
 800ce4a:	e7f0      	b.n	800ce2e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0xa>
	}
 800ce4c:	bf00      	nop
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ce54:	b480      	push	{r7}
 800ce56:	b083      	sub	sp, #12
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
 800ce5e:	bf00      	nop
 800ce60:	370c      	adds	r7, #12
 800ce62:	46bd      	mov	sp, r7
 800ce64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce68:	4770      	bx	lr

0800ce6a <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b084      	sub	sp, #16
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	60f8      	str	r0, [r7, #12]
 800ce72:	60b9      	str	r1, [r7, #8]
 800ce74:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ce76:	68f8      	ldr	r0, [r7, #12]
 800ce78:	f000 f855 	bl	800cf26 <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>
 800ce7c:	4602      	mov	r2, r0
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	4293      	cmp	r3, r2
 800ce82:	bf8c      	ite	hi
 800ce84:	2301      	movhi	r3, #1
 800ce86:	2300      	movls	r3, #0
 800ce88:	b2db      	uxtb	r3, r3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ce8e:	f013 fc8c 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	009b      	lsls	r3, r3, #2
 800ce96:	4618      	mov	r0, r3
 800ce98:	f013 fbc0 	bl	802061c <_Znwj>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	bf00      	nop
      }
 800cea0:	4618      	mov	r0, r3
 800cea2:	3710      	adds	r7, #16
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}

0800cea8 <_ZSt12__niter_baseIPP3PinET_S3_>:
    __niter_base(_Iterator __it)
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr

0800cebe <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800cebe:	b580      	push	{r7, lr}
 800cec0:	b086      	sub	sp, #24
 800cec2:	af00      	add	r7, sp, #0
 800cec4:	60f8      	str	r0, [r7, #12]
 800cec6:	60b9      	str	r1, [r7, #8]
 800cec8:	607a      	str	r2, [r7, #4]
 800ceca:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800cecc:	68ba      	ldr	r2, [r7, #8]
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	1ad3      	subs	r3, r2, r3
 800ced2:	109b      	asrs	r3, r3, #2
 800ced4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	dd06      	ble.n	800ceea <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	461a      	mov	r2, r3
 800cee2:	68f9      	ldr	r1, [r7, #12]
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f013 fcd3 	bl	8020890 <memmove>
      return __result + __count;
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	687a      	ldr	r2, [r7, #4]
 800cef0:	4413      	add	r3, r2
    }
 800cef2:	4618      	mov	r0, r3
 800cef4:	3718      	adds	r7, #24
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <_ZSt11__addressofIP3PinEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cefa:	b480      	push	{r7}
 800cefc:	b083      	sub	sp, #12
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	4618      	mov	r0, r3
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <_ZSt8_DestroyIP3PinEvPT_>:
    _Destroy(_Tp* __pointer)
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b082      	sub	sp, #8
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800cf18:	6878      	ldr	r0, [r7, #4]
 800cf1a:	f7ff ff15 	bl	800cd48 <_ZSt10destroy_atIP3PinEvPT_>
    }
 800cf1e:	bf00      	nop
 800cf20:	3708      	adds	r7, #8
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cf26:	b480      	push	{r7}
 800cf28:	b083      	sub	sp, #12
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cf2e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800cf32:	4618      	mov	r0, r3
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
	...

0800cf40 <_Z41__static_initialization_and_destruction_0ii>:
Pin PF10(GPIOF, GPIO_PIN_10);
Pin PF11(GPIOF, GPIO_PIN_11);
Pin PF12(GPIOF, GPIO_PIN_12);
Pin PF13(GPIOF, GPIO_PIN_13);
Pin PF14(GPIOF, GPIO_PIN_14);
Pin PF15(GPIOF, GPIO_PIN_15);
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
 800cf48:	6039      	str	r1, [r7, #0]
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2b01      	cmp	r3, #1
 800cf4e:	f040 82ad 	bne.w	800d4ac <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf58:	4293      	cmp	r3, r2
 800cf5a:	f040 82a7 	bne.w	800d4ac <_Z41__static_initialization_and_destruction_0ii+0x56c>
vector<Pin*> Pin::all_pins;
 800cf5e:	48ba      	ldr	r0, [pc, #744]	; (800d248 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800cf60:	f7ff fb1d 	bl	800c59e <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>
Pin PA0(GPIOA, GPIO_PIN_0);
 800cf64:	2201      	movs	r2, #1
 800cf66:	49b9      	ldr	r1, [pc, #740]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf68:	48b9      	ldr	r0, [pc, #740]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800cf6a:	f7ff fb25 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA1(GPIOA, GPIO_PIN_1);
 800cf6e:	2202      	movs	r2, #2
 800cf70:	49b6      	ldr	r1, [pc, #728]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf72:	48b8      	ldr	r0, [pc, #736]	; (800d254 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800cf74:	f7ff fb20 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA2(GPIOA, GPIO_PIN_2);
 800cf78:	2204      	movs	r2, #4
 800cf7a:	49b4      	ldr	r1, [pc, #720]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf7c:	48b6      	ldr	r0, [pc, #728]	; (800d258 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800cf7e:	f7ff fb1b 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA3(GPIOA, GPIO_PIN_3);
 800cf82:	2208      	movs	r2, #8
 800cf84:	49b1      	ldr	r1, [pc, #708]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf86:	48b5      	ldr	r0, [pc, #724]	; (800d25c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800cf88:	f7ff fb16 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA4(GPIOA, GPIO_PIN_4);
 800cf8c:	2210      	movs	r2, #16
 800cf8e:	49af      	ldr	r1, [pc, #700]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf90:	48b3      	ldr	r0, [pc, #716]	; (800d260 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800cf92:	f7ff fb11 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA5(GPIOA, GPIO_PIN_5);
 800cf96:	2220      	movs	r2, #32
 800cf98:	49ac      	ldr	r1, [pc, #688]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf9a:	48b2      	ldr	r0, [pc, #712]	; (800d264 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800cf9c:	f7ff fb0c 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA6(GPIOA, GPIO_PIN_6);
 800cfa0:	2240      	movs	r2, #64	; 0x40
 800cfa2:	49aa      	ldr	r1, [pc, #680]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfa4:	48b0      	ldr	r0, [pc, #704]	; (800d268 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800cfa6:	f7ff fb07 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA7(GPIOA, GPIO_PIN_7);
 800cfaa:	2280      	movs	r2, #128	; 0x80
 800cfac:	49a7      	ldr	r1, [pc, #668]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfae:	48af      	ldr	r0, [pc, #700]	; (800d26c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800cfb0:	f7ff fb02 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA8(GPIOA, GPIO_PIN_8);
 800cfb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfb8:	49a4      	ldr	r1, [pc, #656]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfba:	48ad      	ldr	r0, [pc, #692]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800cfbc:	f7ff fafc 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA9(GPIOA, GPIO_PIN_9);
 800cfc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfc4:	49a1      	ldr	r1, [pc, #644]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfc6:	48ab      	ldr	r0, [pc, #684]	; (800d274 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800cfc8:	f7ff faf6 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA10(GPIOA, GPIO_PIN_10);
 800cfcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cfd0:	499e      	ldr	r1, [pc, #632]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfd2:	48a9      	ldr	r0, [pc, #676]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800cfd4:	f7ff faf0 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA11(GPIOA, GPIO_PIN_11);
 800cfd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfdc:	499b      	ldr	r1, [pc, #620]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfde:	48a7      	ldr	r0, [pc, #668]	; (800d27c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800cfe0:	f7ff faea 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA12(GPIOA, GPIO_PIN_12);
 800cfe4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cfe8:	4998      	ldr	r1, [pc, #608]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfea:	48a5      	ldr	r0, [pc, #660]	; (800d280 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800cfec:	f7ff fae4 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA13(GPIOA, GPIO_PIN_13);
 800cff0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cff4:	4995      	ldr	r1, [pc, #596]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cff6:	48a3      	ldr	r0, [pc, #652]	; (800d284 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800cff8:	f7ff fade 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA14(GPIOA, GPIO_PIN_14);
 800cffc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d000:	4992      	ldr	r1, [pc, #584]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d002:	48a1      	ldr	r0, [pc, #644]	; (800d288 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800d004:	f7ff fad8 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA15(GPIOA, GPIO_PIN_15);
 800d008:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d00c:	498f      	ldr	r1, [pc, #572]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d00e:	489f      	ldr	r0, [pc, #636]	; (800d28c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800d010:	f7ff fad2 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB0(GPIOB, GPIO_PIN_0);
 800d014:	2201      	movs	r2, #1
 800d016:	499e      	ldr	r1, [pc, #632]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d018:	489e      	ldr	r0, [pc, #632]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800d01a:	f7ff facd 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB1(GPIOB, GPIO_PIN_1);
 800d01e:	2202      	movs	r2, #2
 800d020:	499b      	ldr	r1, [pc, #620]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d022:	489d      	ldr	r0, [pc, #628]	; (800d298 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800d024:	f7ff fac8 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB2(GPIOB, GPIO_PIN_2);
 800d028:	2204      	movs	r2, #4
 800d02a:	4999      	ldr	r1, [pc, #612]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d02c:	489b      	ldr	r0, [pc, #620]	; (800d29c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800d02e:	f7ff fac3 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB3(GPIOB, GPIO_PIN_3);
 800d032:	2208      	movs	r2, #8
 800d034:	4996      	ldr	r1, [pc, #600]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d036:	489a      	ldr	r0, [pc, #616]	; (800d2a0 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800d038:	f7ff fabe 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB4(GPIOB, GPIO_PIN_4);
 800d03c:	2210      	movs	r2, #16
 800d03e:	4994      	ldr	r1, [pc, #592]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d040:	4898      	ldr	r0, [pc, #608]	; (800d2a4 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800d042:	f7ff fab9 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB5(GPIOB, GPIO_PIN_5);
 800d046:	2220      	movs	r2, #32
 800d048:	4991      	ldr	r1, [pc, #580]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d04a:	4897      	ldr	r0, [pc, #604]	; (800d2a8 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800d04c:	f7ff fab4 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB6(GPIOB, GPIO_PIN_6);
 800d050:	2240      	movs	r2, #64	; 0x40
 800d052:	498f      	ldr	r1, [pc, #572]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d054:	4895      	ldr	r0, [pc, #596]	; (800d2ac <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800d056:	f7ff faaf 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB7(GPIOB, GPIO_PIN_7);
 800d05a:	2280      	movs	r2, #128	; 0x80
 800d05c:	498c      	ldr	r1, [pc, #560]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d05e:	4894      	ldr	r0, [pc, #592]	; (800d2b0 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800d060:	f7ff faaa 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB8(GPIOB, GPIO_PIN_8);
 800d064:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d068:	4989      	ldr	r1, [pc, #548]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d06a:	4892      	ldr	r0, [pc, #584]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800d06c:	f7ff faa4 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB9(GPIOB, GPIO_PIN_9);
 800d070:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d074:	4986      	ldr	r1, [pc, #536]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d076:	4890      	ldr	r0, [pc, #576]	; (800d2b8 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800d078:	f7ff fa9e 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB10(GPIOB, GPIO_PIN_10);
 800d07c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d080:	4983      	ldr	r1, [pc, #524]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d082:	488e      	ldr	r0, [pc, #568]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800d084:	f7ff fa98 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB11(GPIOB, GPIO_PIN_11);
 800d088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d08c:	4980      	ldr	r1, [pc, #512]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d08e:	488c      	ldr	r0, [pc, #560]	; (800d2c0 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800d090:	f7ff fa92 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB12(GPIOB, GPIO_PIN_12);
 800d094:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d098:	497d      	ldr	r1, [pc, #500]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d09a:	488a      	ldr	r0, [pc, #552]	; (800d2c4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800d09c:	f7ff fa8c 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB13(GPIOB, GPIO_PIN_13);
 800d0a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d0a4:	497a      	ldr	r1, [pc, #488]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0a6:	4888      	ldr	r0, [pc, #544]	; (800d2c8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800d0a8:	f7ff fa86 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB14(GPIOB, GPIO_PIN_14);
 800d0ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d0b0:	4977      	ldr	r1, [pc, #476]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0b2:	4886      	ldr	r0, [pc, #536]	; (800d2cc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800d0b4:	f7ff fa80 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB15(GPIOB, GPIO_PIN_15);
 800d0b8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d0bc:	4974      	ldr	r1, [pc, #464]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0be:	4884      	ldr	r0, [pc, #528]	; (800d2d0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800d0c0:	f7ff fa7a 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC0(GPIOC, GPIO_PIN_0);
 800d0c4:	2201      	movs	r2, #1
 800d0c6:	4983      	ldr	r1, [pc, #524]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0c8:	4883      	ldr	r0, [pc, #524]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800d0ca:	f7ff fa75 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC1(GPIOC, GPIO_PIN_1);
 800d0ce:	2202      	movs	r2, #2
 800d0d0:	4980      	ldr	r1, [pc, #512]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0d2:	4882      	ldr	r0, [pc, #520]	; (800d2dc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800d0d4:	f7ff fa70 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC2(GPIOC, GPIO_PIN_2);
 800d0d8:	2204      	movs	r2, #4
 800d0da:	497e      	ldr	r1, [pc, #504]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0dc:	4880      	ldr	r0, [pc, #512]	; (800d2e0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800d0de:	f7ff fa6b 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC3(GPIOC, GPIO_PIN_3);
 800d0e2:	2208      	movs	r2, #8
 800d0e4:	497b      	ldr	r1, [pc, #492]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0e6:	487f      	ldr	r0, [pc, #508]	; (800d2e4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800d0e8:	f7ff fa66 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC4(GPIOC, GPIO_PIN_4);
 800d0ec:	2210      	movs	r2, #16
 800d0ee:	4979      	ldr	r1, [pc, #484]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0f0:	487d      	ldr	r0, [pc, #500]	; (800d2e8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800d0f2:	f7ff fa61 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC5(GPIOC, GPIO_PIN_5);
 800d0f6:	2220      	movs	r2, #32
 800d0f8:	4976      	ldr	r1, [pc, #472]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0fa:	487c      	ldr	r0, [pc, #496]	; (800d2ec <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800d0fc:	f7ff fa5c 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC6(GPIOC, GPIO_PIN_6);
 800d100:	2240      	movs	r2, #64	; 0x40
 800d102:	4974      	ldr	r1, [pc, #464]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d104:	487a      	ldr	r0, [pc, #488]	; (800d2f0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800d106:	f7ff fa57 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC7(GPIOC, GPIO_PIN_7);
 800d10a:	2280      	movs	r2, #128	; 0x80
 800d10c:	4971      	ldr	r1, [pc, #452]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d10e:	4879      	ldr	r0, [pc, #484]	; (800d2f4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800d110:	f7ff fa52 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC8(GPIOC, GPIO_PIN_8);
 800d114:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d118:	496e      	ldr	r1, [pc, #440]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d11a:	4877      	ldr	r0, [pc, #476]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800d11c:	f7ff fa4c 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC9(GPIOC, GPIO_PIN_9);
 800d120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d124:	496b      	ldr	r1, [pc, #428]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d126:	4875      	ldr	r0, [pc, #468]	; (800d2fc <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800d128:	f7ff fa46 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC10(GPIOC, GPIO_PIN_10);
 800d12c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d130:	4968      	ldr	r1, [pc, #416]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d132:	4873      	ldr	r0, [pc, #460]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800d134:	f7ff fa40 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC11(GPIOC, GPIO_PIN_11);
 800d138:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d13c:	4965      	ldr	r1, [pc, #404]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d13e:	4871      	ldr	r0, [pc, #452]	; (800d304 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800d140:	f7ff fa3a 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC12(GPIOC, GPIO_PIN_12);
 800d144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d148:	4962      	ldr	r1, [pc, #392]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d14a:	486f      	ldr	r0, [pc, #444]	; (800d308 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800d14c:	f7ff fa34 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC13(GPIOC, GPIO_PIN_13);
 800d150:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d154:	495f      	ldr	r1, [pc, #380]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d156:	486d      	ldr	r0, [pc, #436]	; (800d30c <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800d158:	f7ff fa2e 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC14(GPIOC, GPIO_PIN_14);
 800d15c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d160:	495c      	ldr	r1, [pc, #368]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d162:	486b      	ldr	r0, [pc, #428]	; (800d310 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800d164:	f7ff fa28 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC15(GPIOC, GPIO_PIN_15);
 800d168:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d16c:	4959      	ldr	r1, [pc, #356]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d16e:	4869      	ldr	r0, [pc, #420]	; (800d314 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800d170:	f7ff fa22 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD0(GPIOD, GPIO_PIN_0);
 800d174:	2201      	movs	r2, #1
 800d176:	4968      	ldr	r1, [pc, #416]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d178:	4868      	ldr	r0, [pc, #416]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800d17a:	f7ff fa1d 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD1(GPIOD, GPIO_PIN_1);
 800d17e:	2202      	movs	r2, #2
 800d180:	4965      	ldr	r1, [pc, #404]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d182:	4867      	ldr	r0, [pc, #412]	; (800d320 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800d184:	f7ff fa18 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD2(GPIOD, GPIO_PIN_2);
 800d188:	2204      	movs	r2, #4
 800d18a:	4963      	ldr	r1, [pc, #396]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d18c:	4865      	ldr	r0, [pc, #404]	; (800d324 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800d18e:	f7ff fa13 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD3(GPIOD, GPIO_PIN_3);
 800d192:	2208      	movs	r2, #8
 800d194:	4960      	ldr	r1, [pc, #384]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d196:	4864      	ldr	r0, [pc, #400]	; (800d328 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800d198:	f7ff fa0e 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD4(GPIOD, GPIO_PIN_4);
 800d19c:	2210      	movs	r2, #16
 800d19e:	495e      	ldr	r1, [pc, #376]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1a0:	4862      	ldr	r0, [pc, #392]	; (800d32c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800d1a2:	f7ff fa09 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD5(GPIOD, GPIO_PIN_5);
 800d1a6:	2220      	movs	r2, #32
 800d1a8:	495b      	ldr	r1, [pc, #364]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1aa:	4861      	ldr	r0, [pc, #388]	; (800d330 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800d1ac:	f7ff fa04 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD6(GPIOD, GPIO_PIN_6);
 800d1b0:	2240      	movs	r2, #64	; 0x40
 800d1b2:	4959      	ldr	r1, [pc, #356]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1b4:	485f      	ldr	r0, [pc, #380]	; (800d334 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800d1b6:	f7ff f9ff 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD7(GPIOD, GPIO_PIN_7);
 800d1ba:	2280      	movs	r2, #128	; 0x80
 800d1bc:	4956      	ldr	r1, [pc, #344]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1be:	485e      	ldr	r0, [pc, #376]	; (800d338 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800d1c0:	f7ff f9fa 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD8(GPIOD, GPIO_PIN_8);
 800d1c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1c8:	4953      	ldr	r1, [pc, #332]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ca:	485c      	ldr	r0, [pc, #368]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800d1cc:	f7ff f9f4 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD9(GPIOD, GPIO_PIN_9);
 800d1d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1d4:	4950      	ldr	r1, [pc, #320]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1d6:	485a      	ldr	r0, [pc, #360]	; (800d340 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800d1d8:	f7ff f9ee 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD10(GPIOD, GPIO_PIN_10);
 800d1dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1e0:	494d      	ldr	r1, [pc, #308]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1e2:	4858      	ldr	r0, [pc, #352]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800d1e4:	f7ff f9e8 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD11(GPIOD, GPIO_PIN_11);
 800d1e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1ec:	494a      	ldr	r1, [pc, #296]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ee:	4856      	ldr	r0, [pc, #344]	; (800d348 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800d1f0:	f7ff f9e2 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD12(GPIOD, GPIO_PIN_12);
 800d1f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d1f8:	4947      	ldr	r1, [pc, #284]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1fa:	4854      	ldr	r0, [pc, #336]	; (800d34c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800d1fc:	f7ff f9dc 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD13(GPIOD, GPIO_PIN_13);
 800d200:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d204:	4944      	ldr	r1, [pc, #272]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d206:	4852      	ldr	r0, [pc, #328]	; (800d350 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800d208:	f7ff f9d6 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD14(GPIOD, GPIO_PIN_14);
 800d20c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d210:	4941      	ldr	r1, [pc, #260]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d212:	4850      	ldr	r0, [pc, #320]	; (800d354 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800d214:	f7ff f9d0 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD15(GPIOD, GPIO_PIN_15);
 800d218:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d21c:	493e      	ldr	r1, [pc, #248]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d21e:	484e      	ldr	r0, [pc, #312]	; (800d358 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800d220:	f7ff f9ca 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE0(GPIOE, GPIO_PIN_0);
 800d224:	2201      	movs	r2, #1
 800d226:	494d      	ldr	r1, [pc, #308]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d228:	484d      	ldr	r0, [pc, #308]	; (800d360 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800d22a:	f7ff f9c5 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE1(GPIOE, GPIO_PIN_1);
 800d22e:	2202      	movs	r2, #2
 800d230:	494a      	ldr	r1, [pc, #296]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d232:	484c      	ldr	r0, [pc, #304]	; (800d364 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800d234:	f7ff f9c0 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE2(GPIOE, GPIO_PIN_2);
 800d238:	2204      	movs	r2, #4
 800d23a:	4948      	ldr	r1, [pc, #288]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d23c:	484a      	ldr	r0, [pc, #296]	; (800d368 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800d23e:	f7ff f9bb 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE3(GPIOE, GPIO_PIN_3);
 800d242:	2208      	movs	r2, #8
 800d244:	e092      	b.n	800d36c <_Z41__static_initialization_and_destruction_0ii+0x42c>
 800d246:	bf00      	nop
 800d248:	240001ec 	.word	0x240001ec
 800d24c:	58020000 	.word	0x58020000
 800d250:	240001f8 	.word	0x240001f8
 800d254:	24000200 	.word	0x24000200
 800d258:	24000208 	.word	0x24000208
 800d25c:	24000210 	.word	0x24000210
 800d260:	24000218 	.word	0x24000218
 800d264:	24000220 	.word	0x24000220
 800d268:	24000228 	.word	0x24000228
 800d26c:	24000230 	.word	0x24000230
 800d270:	24000238 	.word	0x24000238
 800d274:	24000240 	.word	0x24000240
 800d278:	24000248 	.word	0x24000248
 800d27c:	24000250 	.word	0x24000250
 800d280:	24000258 	.word	0x24000258
 800d284:	24000260 	.word	0x24000260
 800d288:	24000268 	.word	0x24000268
 800d28c:	24000270 	.word	0x24000270
 800d290:	58020400 	.word	0x58020400
 800d294:	24000278 	.word	0x24000278
 800d298:	24000280 	.word	0x24000280
 800d29c:	24000288 	.word	0x24000288
 800d2a0:	24000290 	.word	0x24000290
 800d2a4:	24000298 	.word	0x24000298
 800d2a8:	240002a0 	.word	0x240002a0
 800d2ac:	240002a8 	.word	0x240002a8
 800d2b0:	240002b0 	.word	0x240002b0
 800d2b4:	240002b8 	.word	0x240002b8
 800d2b8:	240002c0 	.word	0x240002c0
 800d2bc:	240002c8 	.word	0x240002c8
 800d2c0:	240002d0 	.word	0x240002d0
 800d2c4:	240002d8 	.word	0x240002d8
 800d2c8:	240002e0 	.word	0x240002e0
 800d2cc:	240002e8 	.word	0x240002e8
 800d2d0:	240002f0 	.word	0x240002f0
 800d2d4:	58020800 	.word	0x58020800
 800d2d8:	240002f8 	.word	0x240002f8
 800d2dc:	24000300 	.word	0x24000300
 800d2e0:	24000308 	.word	0x24000308
 800d2e4:	24000310 	.word	0x24000310
 800d2e8:	24000318 	.word	0x24000318
 800d2ec:	24000320 	.word	0x24000320
 800d2f0:	24000328 	.word	0x24000328
 800d2f4:	24000330 	.word	0x24000330
 800d2f8:	24000338 	.word	0x24000338
 800d2fc:	24000340 	.word	0x24000340
 800d300:	24000348 	.word	0x24000348
 800d304:	24000350 	.word	0x24000350
 800d308:	24000358 	.word	0x24000358
 800d30c:	24000360 	.word	0x24000360
 800d310:	24000368 	.word	0x24000368
 800d314:	24000370 	.word	0x24000370
 800d318:	58020c00 	.word	0x58020c00
 800d31c:	24000378 	.word	0x24000378
 800d320:	24000380 	.word	0x24000380
 800d324:	24000388 	.word	0x24000388
 800d328:	24000390 	.word	0x24000390
 800d32c:	24000398 	.word	0x24000398
 800d330:	240003a0 	.word	0x240003a0
 800d334:	240003a8 	.word	0x240003a8
 800d338:	240003b0 	.word	0x240003b0
 800d33c:	240003b8 	.word	0x240003b8
 800d340:	240003c0 	.word	0x240003c0
 800d344:	240003c8 	.word	0x240003c8
 800d348:	240003d0 	.word	0x240003d0
 800d34c:	240003d8 	.word	0x240003d8
 800d350:	240003e0 	.word	0x240003e0
 800d354:	240003e8 	.word	0x240003e8
 800d358:	240003f0 	.word	0x240003f0
 800d35c:	58021000 	.word	0x58021000
 800d360:	240003f8 	.word	0x240003f8
 800d364:	24000400 	.word	0x24000400
 800d368:	24000408 	.word	0x24000408
 800d36c:	4957      	ldr	r1, [pc, #348]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d36e:	4858      	ldr	r0, [pc, #352]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800d370:	f7ff f922 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE4(GPIOE, GPIO_PIN_4);
 800d374:	2210      	movs	r2, #16
 800d376:	4955      	ldr	r1, [pc, #340]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d378:	4856      	ldr	r0, [pc, #344]	; (800d4d4 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 800d37a:	f7ff f91d 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE5(GPIOE, GPIO_PIN_5);
 800d37e:	2220      	movs	r2, #32
 800d380:	4952      	ldr	r1, [pc, #328]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d382:	4855      	ldr	r0, [pc, #340]	; (800d4d8 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800d384:	f7ff f918 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE6(GPIOE, GPIO_PIN_6);
 800d388:	2240      	movs	r2, #64	; 0x40
 800d38a:	4950      	ldr	r1, [pc, #320]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d38c:	4853      	ldr	r0, [pc, #332]	; (800d4dc <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800d38e:	f7ff f913 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE7(GPIOE, GPIO_PIN_7);
 800d392:	2280      	movs	r2, #128	; 0x80
 800d394:	494d      	ldr	r1, [pc, #308]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d396:	4852      	ldr	r0, [pc, #328]	; (800d4e0 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 800d398:	f7ff f90e 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE8(GPIOE, GPIO_PIN_8);
 800d39c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3a0:	494a      	ldr	r1, [pc, #296]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3a2:	4850      	ldr	r0, [pc, #320]	; (800d4e4 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 800d3a4:	f7ff f908 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE9(GPIOE, GPIO_PIN_9);
 800d3a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3ac:	4947      	ldr	r1, [pc, #284]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ae:	484e      	ldr	r0, [pc, #312]	; (800d4e8 <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 800d3b0:	f7ff f902 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE10(GPIOE, GPIO_PIN_10);
 800d3b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d3b8:	4944      	ldr	r1, [pc, #272]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ba:	484c      	ldr	r0, [pc, #304]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 800d3bc:	f7ff f8fc 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE11(GPIOE, GPIO_PIN_11);
 800d3c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3c4:	4941      	ldr	r1, [pc, #260]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3c6:	484a      	ldr	r0, [pc, #296]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 800d3c8:	f7ff f8f6 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE12(GPIOE, GPIO_PIN_12);
 800d3cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3d0:	493e      	ldr	r1, [pc, #248]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3d2:	4848      	ldr	r0, [pc, #288]	; (800d4f4 <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 800d3d4:	f7ff f8f0 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE13(GPIOE, GPIO_PIN_13);
 800d3d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d3dc:	493b      	ldr	r1, [pc, #236]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3de:	4846      	ldr	r0, [pc, #280]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 800d3e0:	f7ff f8ea 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE14(GPIOE, GPIO_PIN_14);
 800d3e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d3e8:	4938      	ldr	r1, [pc, #224]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ea:	4844      	ldr	r0, [pc, #272]	; (800d4fc <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800d3ec:	f7ff f8e4 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE15(GPIOE, GPIO_PIN_15);
 800d3f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d3f4:	4935      	ldr	r1, [pc, #212]	; (800d4cc <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3f6:	4842      	ldr	r0, [pc, #264]	; (800d500 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800d3f8:	f7ff f8de 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF0(GPIOF, GPIO_PIN_0);
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	4941      	ldr	r1, [pc, #260]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d400:	4841      	ldr	r0, [pc, #260]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800d402:	f7ff f8d9 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF1(GPIOF, GPIO_PIN_1);
 800d406:	2202      	movs	r2, #2
 800d408:	493e      	ldr	r1, [pc, #248]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d40a:	4840      	ldr	r0, [pc, #256]	; (800d50c <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d40c:	f7ff f8d4 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF2(GPIOF, GPIO_PIN_2);
 800d410:	2204      	movs	r2, #4
 800d412:	493c      	ldr	r1, [pc, #240]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d414:	483e      	ldr	r0, [pc, #248]	; (800d510 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800d416:	f7ff f8cf 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF3(GPIOF, GPIO_PIN_3);
 800d41a:	2208      	movs	r2, #8
 800d41c:	4939      	ldr	r1, [pc, #228]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d41e:	483d      	ldr	r0, [pc, #244]	; (800d514 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d420:	f7ff f8ca 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF4(GPIOF, GPIO_PIN_4);
 800d424:	2210      	movs	r2, #16
 800d426:	4937      	ldr	r1, [pc, #220]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d428:	483b      	ldr	r0, [pc, #236]	; (800d518 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800d42a:	f7ff f8c5 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF5(GPIOF, GPIO_PIN_5);
 800d42e:	2220      	movs	r2, #32
 800d430:	4934      	ldr	r1, [pc, #208]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d432:	483a      	ldr	r0, [pc, #232]	; (800d51c <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800d434:	f7ff f8c0 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF6(GPIOF, GPIO_PIN_6);
 800d438:	2240      	movs	r2, #64	; 0x40
 800d43a:	4932      	ldr	r1, [pc, #200]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d43c:	4838      	ldr	r0, [pc, #224]	; (800d520 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800d43e:	f7ff f8bb 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF7(GPIOF, GPIO_PIN_7);
 800d442:	2280      	movs	r2, #128	; 0x80
 800d444:	492f      	ldr	r1, [pc, #188]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d446:	4837      	ldr	r0, [pc, #220]	; (800d524 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800d448:	f7ff f8b6 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF8(GPIOF, GPIO_PIN_8);
 800d44c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d450:	492c      	ldr	r1, [pc, #176]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d452:	4835      	ldr	r0, [pc, #212]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800d454:	f7ff f8b0 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF9(GPIOF, GPIO_PIN_9);
 800d458:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d45c:	4929      	ldr	r1, [pc, #164]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d45e:	4833      	ldr	r0, [pc, #204]	; (800d52c <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800d460:	f7ff f8aa 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF10(GPIOF, GPIO_PIN_10);
 800d464:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d468:	4926      	ldr	r1, [pc, #152]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d46a:	4831      	ldr	r0, [pc, #196]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800d46c:	f7ff f8a4 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF11(GPIOF, GPIO_PIN_11);
 800d470:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d474:	4923      	ldr	r1, [pc, #140]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d476:	482f      	ldr	r0, [pc, #188]	; (800d534 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800d478:	f7ff f89e 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF12(GPIOF, GPIO_PIN_12);
 800d47c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d480:	4920      	ldr	r1, [pc, #128]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d482:	482d      	ldr	r0, [pc, #180]	; (800d538 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800d484:	f7ff f898 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF13(GPIOF, GPIO_PIN_13);
 800d488:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d48c:	491d      	ldr	r1, [pc, #116]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d48e:	482b      	ldr	r0, [pc, #172]	; (800d53c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800d490:	f7ff f892 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF14(GPIOF, GPIO_PIN_14);
 800d494:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d498:	491a      	ldr	r1, [pc, #104]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d49a:	4829      	ldr	r0, [pc, #164]	; (800d540 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800d49c:	f7ff f88c 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d4a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d4a4:	4917      	ldr	r1, [pc, #92]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4a6:	4827      	ldr	r0, [pc, #156]	; (800d544 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800d4a8:	f7ff f886 	bl	800c5b8 <_ZN3PinC1EP12GPIO_TypeDeft>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d107      	bne.n	800d4c2 <_Z41__static_initialization_and_destruction_0ii+0x582>
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4b8:	4293      	cmp	r3, r2
 800d4ba:	d102      	bne.n	800d4c2 <_Z41__static_initialization_and_destruction_0ii+0x582>
vector<Pin*> Pin::all_pins;
 800d4bc:	4822      	ldr	r0, [pc, #136]	; (800d548 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800d4be:	f000 f845 	bl	800d54c <_ZNSt6vectorIP3PinSaIS1_EED1Ev>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d4c2:	bf00      	nop
 800d4c4:	3708      	adds	r7, #8
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}
 800d4ca:	bf00      	nop
 800d4cc:	58021000 	.word	0x58021000
 800d4d0:	24000410 	.word	0x24000410
 800d4d4:	24000418 	.word	0x24000418
 800d4d8:	24000420 	.word	0x24000420
 800d4dc:	24000428 	.word	0x24000428
 800d4e0:	24000430 	.word	0x24000430
 800d4e4:	24000438 	.word	0x24000438
 800d4e8:	24000440 	.word	0x24000440
 800d4ec:	24000448 	.word	0x24000448
 800d4f0:	24000450 	.word	0x24000450
 800d4f4:	24000458 	.word	0x24000458
 800d4f8:	24000460 	.word	0x24000460
 800d4fc:	24000468 	.word	0x24000468
 800d500:	24000470 	.word	0x24000470
 800d504:	58021400 	.word	0x58021400
 800d508:	24000478 	.word	0x24000478
 800d50c:	24000480 	.word	0x24000480
 800d510:	24000488 	.word	0x24000488
 800d514:	24000490 	.word	0x24000490
 800d518:	24000498 	.word	0x24000498
 800d51c:	240004a0 	.word	0x240004a0
 800d520:	240004a8 	.word	0x240004a8
 800d524:	240004b0 	.word	0x240004b0
 800d528:	240004b8 	.word	0x240004b8
 800d52c:	240004c0 	.word	0x240004c0
 800d530:	240004c8 	.word	0x240004c8
 800d534:	240004d0 	.word	0x240004d0
 800d538:	240004d8 	.word	0x240004d8
 800d53c:	240004e0 	.word	0x240004e0
 800d540:	240004e8 	.word	0x240004e8
 800d544:	240004f0 	.word	0x240004f0
 800d548:	240001ec 	.word	0x240001ec

0800d54c <_ZNSt6vectorIP3PinSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d54c:	b5b0      	push	{r4, r5, r7, lr}
 800d54e:	b082      	sub	sp, #8
 800d550:	af00      	add	r7, sp, #0
 800d552:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681c      	ldr	r4, [r3, #0]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	4618      	mov	r0, r3
 800d560:	f7ff fb62 	bl	800cc28 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800d564:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d566:	461a      	mov	r2, r3
 800d568:	4629      	mov	r1, r5
 800d56a:	4620      	mov	r0, r4
 800d56c:	f7ff fb67 	bl	800cc3e <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>
      }
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	4618      	mov	r0, r3
 800d574:	f7ff f87b 	bl	800c66e <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bdb0      	pop	{r4, r5, r7, pc}

0800d582 <_GLOBAL__sub_I__ZN3Pin8all_pinsE>:
 800d582:	b580      	push	{r7, lr}
 800d584:	af00      	add	r7, sp, #0
 800d586:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d58a:	2001      	movs	r0, #1
 800d58c:	f7ff fcd8 	bl	800cf40 <_Z41__static_initialization_and_destruction_0ii>
 800d590:	bd80      	pop	{r7, pc}

0800d592 <_GLOBAL__sub_D__ZN3Pin8all_pinsE>:
 800d592:	b580      	push	{r7, lr}
 800d594:	af00      	add	r7, sp, #0
 800d596:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d59a:	2000      	movs	r0, #0
 800d59c:	f7ff fcd0 	bl	800cf40 <_Z41__static_initialization_and_destruction_0ii>
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800d5a2:	b480      	push	{r7}
 800d5a4:	b083      	sub	sp, #12
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	370c      	adds	r7, #12
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b6:	4770      	bx	lr

0800d5b8 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800d5b8:	b480      	push	{r7}
 800d5ba:	b083      	sub	sp, #12
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	370c      	adds	r7, #12
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5cc:	4770      	bx	lr

0800d5ce <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2200      	movs	r2, #0
 800d5da:	609a      	str	r2, [r3, #8]
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	4618      	mov	r0, r3
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b082      	sub	sp, #8
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	689b      	ldr	r3, [r3, #8]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d005      	beq.n	800d606 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	6879      	ldr	r1, [r7, #4]
 800d602:	2203      	movs	r2, #3
 800d604:	4798      	blx	r3
    }
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	4618      	mov	r0, r3
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800d610:	b480      	push	{r7}
 800d612:	b083      	sub	sp, #12
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	689b      	ldr	r3, [r3, #8]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	bf0c      	ite	eq
 800d620:	2301      	moveq	r3, #1
 800d622:	2300      	movne	r3, #0
 800d624:	b2db      	uxtb	r3, r3
 800d626:	4618      	mov	r0, r3
 800d628:	370c      	adds	r7, #12
 800d62a:	46bd      	mov	sp, r7
 800d62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d630:	4770      	bx	lr

0800d632 <_ZN5Timer3minEff>:
	OPERATION_MODE current_operation_mode;
	UNITS current_units;
	uint32_t current_value;
	function<void()> current_func;

	float min(float n1, float n2){
 800d632:	b480      	push	{r7}
 800d634:	b085      	sub	sp, #20
 800d636:	af00      	add	r7, sp, #0
 800d638:	60f8      	str	r0, [r7, #12]
 800d63a:	ed87 0a02 	vstr	s0, [r7, #8]
 800d63e:	edc7 0a01 	vstr	s1, [r7, #4]
		if(n1 < n2)
 800d642:	ed97 7a02 	vldr	s14, [r7, #8]
 800d646:	edd7 7a01 	vldr	s15, [r7, #4]
 800d64a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d64e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d652:	d501      	bpl.n	800d658 <_ZN5Timer3minEff+0x26>
			return n1;
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	e000      	b.n	800d65a <_ZN5Timer3minEff+0x28>
		return n2;
 800d658:	687b      	ldr	r3, [r7, #4]
	}
 800d65a:	ee07 3a90 	vmov	s15, r3
 800d65e:	eeb0 0a67 	vmov.f32	s0, s15
 800d662:	3714      	adds	r7, #20
 800d664:	46bd      	mov	sp, r7
 800d666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66a:	4770      	bx	lr

0800d66c <_ZN5Timer9interruptEv>:

	void interrupt() {
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b082      	sub	sp, #8
 800d670:	af00      	add	r7, sp, #0
 800d672:	6078      	str	r0, [r7, #4]
		switch(current_operation_mode) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d002      	beq.n	800d682 <_ZN5Timer9interruptEv+0x16>
 800d67c:	2b01      	cmp	r3, #1
 800d67e:	d003      	beq.n	800d688 <_ZN5Timer9interruptEv+0x1c>
			reset();
		case CYCLIC:
			current_func();
			break;
		}
	}
 800d680:	e008      	b.n	800d694 <_ZN5Timer9interruptEv+0x28>
			reset();
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f96a 	bl	800d95c <_ZN5Timer5resetEv>
			current_func();
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3308      	adds	r3, #8
 800d68c:	4618      	mov	r0, r3
 800d68e:	f002 fba0 	bl	800fdd2 <_ZNKSt8functionIFvvEEclEv>
			break;
 800d692:	bf00      	nop
	}
 800d694:	bf00      	nop
 800d696:	3708      	adds	r7, #8
 800d698:	46bd      	mov	sp, r7
 800d69a:	bd80      	pop	{r7, pc}

0800d69c <_ZN5Timer10to_secondsENS_5UNITSE>:

	static uint32_t to_seconds(UNITS units){
 800d69c:	b480      	push	{r7}
 800d69e:	b083      	sub	sp, #12
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	4603      	mov	r3, r0
 800d6a4:	71fb      	strb	r3, [r7, #7]
		if(units == SECONDS)
 800d6a6:	79fb      	ldrb	r3, [r7, #7]
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d101      	bne.n	800d6b0 <_ZN5Timer10to_secondsENS_5UNITSE+0x14>
			return 1;
 800d6ac:	2301      	movs	r3, #1
 800d6ae:	e010      	b.n	800d6d2 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MILLISECONDS)
 800d6b0:	79fb      	ldrb	r3, [r7, #7]
 800d6b2:	2b01      	cmp	r3, #1
 800d6b4:	d102      	bne.n	800d6bc <_ZN5Timer10to_secondsENS_5UNITSE+0x20>
			return 1000;
 800d6b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6ba:	e00a      	b.n	800d6d2 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MICROSEONDS)
 800d6bc:	79fb      	ldrb	r3, [r7, #7]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d101      	bne.n	800d6c6 <_ZN5Timer10to_secondsENS_5UNITSE+0x2a>
			return 1000000;
 800d6c2:	4b07      	ldr	r3, [pc, #28]	; (800d6e0 <_ZN5Timer10to_secondsENS_5UNITSE+0x44>)
 800d6c4:	e005      	b.n	800d6d2 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == NANOSECONDS)
 800d6c6:	79fb      	ldrb	r3, [r7, #7]
 800d6c8:	2b03      	cmp	r3, #3
 800d6ca:	d101      	bne.n	800d6d0 <_ZN5Timer10to_secondsENS_5UNITSE+0x34>
			return 1000000000;
 800d6cc:	4b05      	ldr	r3, [pc, #20]	; (800d6e4 <_ZN5Timer10to_secondsENS_5UNITSE+0x48>)
 800d6ce:	e000      	b.n	800d6d2 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		return 0;
 800d6d0:	2300      	movs	r3, #0
	}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	370c      	adds	r7, #12
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	000f4240 	.word	0x000f4240
 800d6e4:	3b9aca00 	.word	0x3b9aca00

0800d6e8 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b082      	sub	sp, #8
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	4618      	mov	r0, r3
 800d6f4:	f7ff ff79 	bl	800d5ea <_ZNSt14_Function_baseD1Ev>
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}
	...

0800d704 <_ZN5TimerC1EP17TIM_HandleTypeDef>:

public:
	TIM_HandleTypeDef* timer;
	uint32_t frequency;

	Timer(TIM_HandleTypeDef* timer) : timer(timer){
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	3308      	adds	r3, #8
 800d712:	4618      	mov	r0, r3
 800d714:	f002 fb73 	bl	800fdfe <_ZNSt8functionIFvvEEC1Ev>
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	683a      	ldr	r2, [r7, #0]
 800d71c:	619a      	str	r2, [r3, #24]
		Timer::all_timers.push_back(this);
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	60fb      	str	r3, [r7, #12]
 800d722:	f107 030c 	add.w	r3, r7, #12
 800d726:	4619      	mov	r1, r3
 800d728:	4803      	ldr	r0, [pc, #12]	; (800d738 <_ZN5TimerC1EP17TIM_HandleTypeDef+0x34>)
 800d72a:	f002 fb75 	bl	800fe18 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>
	}
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	4618      	mov	r0, r3
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}
 800d738:	240001a0 	.word	0x240001a0

0800d73c <_ZN5Timer10set_periodEmNS_5UNITSE>:

	void set_period(uint32_t time, UNITS units){
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b08a      	sub	sp, #40	; 0x28
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	4613      	mov	r3, r2
 800d748:	71fb      	strb	r3, [r7, #7]
		timer->Instance->CNT = 0;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	699b      	ldr	r3, [r3, #24]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2200      	movs	r2, #0
 800d752:	625a      	str	r2, [r3, #36]	; 0x24
		float target_freq = to_seconds(units) / time;
 800d754:	79fb      	ldrb	r3, [r7, #7]
 800d756:	4618      	mov	r0, r3
 800d758:	f7ff ffa0 	bl	800d69c <_ZN5Timer10to_secondsENS_5UNITSE>
 800d75c:	4602      	mov	r2, r0
 800d75e:	68bb      	ldr	r3, [r7, #8]
 800d760:	fbb2 f3f3 	udiv	r3, r2, r3
 800d764:	ee07 3a90 	vmov	s15, r3
 800d768:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d76c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d770:	eddf 6a27 	vldr	s13, [pc, #156]	; 800d810 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d774:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d778:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d77c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d780:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d784:	edc7 7a08 	vstr	s15, [r7, #32]
		float actual_psc = min(ideal_psc, 65536.0);
 800d788:	eddf 0a22 	vldr	s1, [pc, #136]	; 800d814 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d78c:	ed97 0a08 	vldr	s0, [r7, #32]
 800d790:	68f8      	ldr	r0, [r7, #12]
 800d792:	f7ff ff4e 	bl	800d632 <_ZN5Timer3minEff>
 800d796:	ed87 0a07 	vstr	s0, [r7, #28]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d79a:	edd7 7a07 	vldr	s15, [r7, #28]
 800d79e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7a2:	ee17 2a90 	vmov	r2, s15
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	699b      	ldr	r3, [r3, #24]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	3a01      	subs	r2, #1
 800d7ae:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	699b      	ldr	r3, [r3, #24]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	ee07 3a90 	vmov	s15, r3
 800d7be:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d7c2:	eddf 6a13 	vldr	s13, [pc, #76]	; 800d810 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d7c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ca:	edc7 7a06 	vstr	s15, [r7, #24]
		float ideal_arr = current_psc_freq / target_freq;
 800d7ce:	edd7 6a06 	vldr	s13, [r7, #24]
 800d7d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d7d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7da:	edc7 7a05 	vstr	s15, [r7, #20]
		float actual_arr = min(ideal_arr, 65536.0);
 800d7de:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d814 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d7e2:	ed97 0a05 	vldr	s0, [r7, #20]
 800d7e6:	68f8      	ldr	r0, [r7, #12]
 800d7e8:	f7ff ff23 	bl	800d632 <_ZN5Timer3minEff>
 800d7ec:	ed87 0a04 	vstr	s0, [r7, #16]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d7f0:	edd7 7a04 	vldr	s15, [r7, #16]
 800d7f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7f8:	ee17 2a90 	vmov	r2, s15
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	699b      	ldr	r3, [r3, #24]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	3a01      	subs	r2, #1
 800d804:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d806:	bf00      	nop
 800d808:	3728      	adds	r7, #40	; 0x28
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	4d832156 	.word	0x4d832156
 800d814:	47800000 	.word	0x47800000

0800d818 <_ZN5Timer13set_frequencyEm>:

	void set_frequency(uint32_t target_freq){
 800d818:	b580      	push	{r7, lr}
 800d81a:	b088      	sub	sp, #32
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
		timer->Instance->CNT = 0;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	699b      	ldr	r3, [r3, #24]
 800d826:	681b      	ldr	r3, [r3, #0]
 800d828:	2200      	movs	r2, #0
 800d82a:	625a      	str	r2, [r3, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	ee07 3a90 	vmov	s15, r3
 800d832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d836:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d8d8 <_ZN5Timer13set_frequencyEm+0xc0>
 800d83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d83e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d842:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d846:	edc7 7a07 	vstr	s15, [r7, #28]
		float actual_psc = min(ideal_psc, 65536.0);
 800d84a:	eddf 0a24 	vldr	s1, [pc, #144]	; 800d8dc <_ZN5Timer13set_frequencyEm+0xc4>
 800d84e:	ed97 0a07 	vldr	s0, [r7, #28]
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f7ff feed 	bl	800d632 <_ZN5Timer3minEff>
 800d858:	ed87 0a06 	vstr	s0, [r7, #24]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d85c:	edd7 7a06 	vldr	s15, [r7, #24]
 800d860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d864:	ee17 2a90 	vmov	r2, s15
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	699b      	ldr	r3, [r3, #24]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	3a01      	subs	r2, #1
 800d870:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	699b      	ldr	r3, [r3, #24]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87a:	3301      	adds	r3, #1
 800d87c:	ee07 3a90 	vmov	s15, r3
 800d880:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d884:	eddf 6a14 	vldr	s13, [pc, #80]	; 800d8d8 <_ZN5Timer13set_frequencyEm+0xc0>
 800d888:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d88c:	edc7 7a05 	vstr	s15, [r7, #20]
		float ideal_arr = current_psc_freq / target_freq;
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	ee07 3a90 	vmov	s15, r3
 800d896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d89a:	edd7 6a05 	vldr	s13, [r7, #20]
 800d89e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8a2:	edc7 7a04 	vstr	s15, [r7, #16]
		float actual_arr = min(ideal_arr, 65536.0);
 800d8a6:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d8dc <_ZN5Timer13set_frequencyEm+0xc4>
 800d8aa:	ed97 0a04 	vldr	s0, [r7, #16]
 800d8ae:	6878      	ldr	r0, [r7, #4]
 800d8b0:	f7ff febf 	bl	800d632 <_ZN5Timer3minEff>
 800d8b4:	ed87 0a03 	vstr	s0, [r7, #12]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d8b8:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8c0:	ee17 2a90 	vmov	r2, s15
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	699b      	ldr	r3, [r3, #24]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	3a01      	subs	r2, #1
 800d8cc:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d8ce:	bf00      	nop
 800d8d0:	3720      	adds	r7, #32
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}
 800d8d6:	bf00      	nop
 800d8d8:	4d832156 	.word	0x4d832156
 800d8dc:	47800000 	.word	0x47800000

0800d8e0 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>:

	void execute_every(function<void()> func, uint32_t time, UNITS units){
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	60b9      	str	r1, [r7, #8]
 800d8ea:	607a      	str	r2, [r7, #4]
 800d8ec:	70fb      	strb	r3, [r7, #3]
		current_operation_mode = CYCLIC;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2201      	movs	r2, #1
 800d8f2:	701a      	strb	r2, [r3, #0]
		current_units = units;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	78fa      	ldrb	r2, [r7, #3]
 800d8f8:	705a      	strb	r2, [r3, #1]
		current_func = func;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3308      	adds	r3, #8
 800d8fe:	68b9      	ldr	r1, [r7, #8]
 800d900:	4618      	mov	r0, r3
 800d902:	f002 fa9a 	bl	800fe3a <_ZNSt8functionIFvvEEaSERKS1_>
		set_period(time, units);
 800d906:	78fb      	ldrb	r3, [r7, #3]
 800d908:	461a      	mov	r2, r3
 800d90a:	6879      	ldr	r1, [r7, #4]
 800d90c:	68f8      	ldr	r0, [r7, #12]
 800d90e:	f7ff ff15 	bl	800d73c <_ZN5Timer10set_periodEmNS_5UNITSE>
		HAL_TIM_Base_Start_IT(timer);
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	699b      	ldr	r3, [r3, #24]
 800d916:	4618      	mov	r0, r3
 800d918:	f010 fe7e 	bl	801e618 <HAL_TIM_Base_Start_IT>
	}
 800d91c:	bf00      	nop
 800d91e:	3710      	adds	r7, #16
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <_ZN5Timer10execute_atESt8functionIFvvEEm>:

	void execute_at(function<void()> func, uint32_t target_freq){
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	607a      	str	r2, [r7, #4]
		current_operation_mode = CYCLIC;
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	2201      	movs	r2, #1
 800d934:	701a      	strb	r2, [r3, #0]
		current_func = func;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	3308      	adds	r3, #8
 800d93a:	68b9      	ldr	r1, [r7, #8]
 800d93c:	4618      	mov	r0, r3
 800d93e:	f002 fa7c 	bl	800fe3a <_ZNSt8functionIFvvEEaSERKS1_>
		set_frequency(target_freq);
 800d942:	6879      	ldr	r1, [r7, #4]
 800d944:	68f8      	ldr	r0, [r7, #12]
 800d946:	f7ff ff67 	bl	800d818 <_ZN5Timer13set_frequencyEm>
		HAL_TIM_Base_Start_IT(timer);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	699b      	ldr	r3, [r3, #24]
 800d94e:	4618      	mov	r0, r3
 800d950:	f010 fe62 	bl	801e618 <HAL_TIM_Base_Start_IT>
	}
 800d954:	bf00      	nop
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <_ZN5Timer5resetEv>:

	void reset(){
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	699b      	ldr	r3, [r3, #24]
 800d968:	4618      	mov	r0, r3
 800d96a:	f010 fedb 	bl	801e724 <HAL_TIM_Base_Stop_IT>
		current_operation_mode = NONE;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2200      	movs	r2, #0
 800d972:	701a      	strb	r2, [r3, #0]
	}
 800d974:	bf00      	nop
 800d976:	3708      	adds	r7, #8
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	4618      	mov	r0, r3
 800d988:	370c      	adds	r7, #12
 800d98a:	46bd      	mov	sp, r7
 800d98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d990:	4770      	bx	lr

0800d992 <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800d992:	b590      	push	{r4, r7, lr}
 800d994:	b083      	sub	sp, #12
 800d996:	af00      	add	r7, sp, #0
 800d998:	6078      	str	r0, [r7, #4]
 800d99a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7ff ffed 	bl	800d97c <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	681c      	ldr	r4, [r3, #0]
 800d9a6:	6838      	ldr	r0, [r7, #0]
 800d9a8:	f7ff ffe8 	bl	800d97c <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	429c      	cmp	r4, r3
 800d9b2:	bf0c      	ite	eq
 800d9b4:	2301      	moveq	r3, #1
 800d9b6:	2300      	movne	r3, #0
 800d9b8:	b2db      	uxtb	r3, r3
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	370c      	adds	r7, #12
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd90      	pop	{r4, r7, pc}

0800d9c2 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d9c2:	b480      	push	{r7}
 800d9c4:	b083      	sub	sp, #12
 800d9c6:	af00      	add	r7, sp, #0
 800d9c8:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	1d1a      	adds	r2, r3, #4
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	601a      	str	r2, [r3, #0]
	return *this;
 800d9d4:	687b      	ldr	r3, [r7, #4]
      }
 800d9d6:	4618      	mov	r0, r3
 800d9d8:	370c      	adds	r7, #12
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e0:	4770      	bx	lr

0800d9e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800d9e2:	b480      	push	{r7}
 800d9e4:	b083      	sub	sp, #12
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	370c      	adds	r7, #12
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
	...

0800d9fc <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>:

	void start_interrupt(){
		HAL_TIM_Base_Start_IT(timer);
	}

	static void interrupt_all_timers(TIM_HandleTypeDef* timer){
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b086      	sub	sp, #24
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
		for(auto software_timer : Timer::all_timers){
 800da04:	4b19      	ldr	r3, [pc, #100]	; (800da6c <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x70>)
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	6978      	ldr	r0, [r7, #20]
 800da0a:	f002 fa31 	bl	800fe70 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 800da0e:	4603      	mov	r3, r0
 800da10:	60fb      	str	r3, [r7, #12]
 800da12:	6978      	ldr	r0, [r7, #20]
 800da14:	f002 fa3c 	bl	800fe90 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 800da18:	4603      	mov	r3, r0
 800da1a:	60bb      	str	r3, [r7, #8]
 800da1c:	f107 0208 	add.w	r2, r7, #8
 800da20:	f107 030c 	add.w	r3, r7, #12
 800da24:	4611      	mov	r1, r2
 800da26:	4618      	mov	r0, r3
 800da28:	f7ff ffb3 	bl	800d992 <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800da2c:	4603      	mov	r3, r0
 800da2e:	f083 0301 	eor.w	r3, r3, #1
 800da32:	b2db      	uxtb	r3, r3
 800da34:	2b00      	cmp	r3, #0
 800da36:	d015      	beq.n	800da64 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x68>
 800da38:	f107 030c 	add.w	r3, r7, #12
 800da3c:	4618      	mov	r0, r3
 800da3e:	f7ff ffd0 	bl	800d9e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 800da42:	4603      	mov	r3, r0
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	613b      	str	r3, [r7, #16]
			if(software_timer->timer == timer)
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	699b      	ldr	r3, [r3, #24]
 800da4c:	687a      	ldr	r2, [r7, #4]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d102      	bne.n	800da58 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x5c>
				software_timer->interrupt();
 800da52:	6938      	ldr	r0, [r7, #16]
 800da54:	f7ff fe0a 	bl	800d66c <_ZN5Timer9interruptEv>
		for(auto software_timer : Timer::all_timers){
 800da58:	f107 030c 	add.w	r3, r7, #12
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7ff ffb0 	bl	800d9c2 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>
 800da62:	e7db      	b.n	800da1c <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x20>
		}
	}
 800da64:	bf00      	nop
 800da66:	3718      	adds	r7, #24
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	240001a0 	.word	0x240001a0

0800da70 <_ZN13StreamMessageC1EPfff>:
	size_t size;
	float min, max;
	void* ptr;
	bool  do_scale;

	StreamMessage(float* ptr, float min, float max) : ptr(ptr), min(min), max(max){
 800da70:	b480      	push	{r7}
 800da72:	b085      	sub	sp, #20
 800da74:	af00      	add	r7, sp, #0
 800da76:	60f8      	str	r0, [r7, #12]
 800da78:	60b9      	str	r1, [r7, #8]
 800da7a:	ed87 0a01 	vstr	s0, [r7, #4]
 800da7e:	edc7 0a00 	vstr	s1, [r7]
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	2200      	movs	r2, #0
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	687a      	ldr	r2, [r7, #4]
 800da8c:	609a      	str	r2, [r3, #8]
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	683a      	ldr	r2, [r7, #0]
 800da92:	60da      	str	r2, [r3, #12]
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	68ba      	ldr	r2, [r7, #8]
 800da98:	611a      	str	r2, [r3, #16]
		do_scale = true;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2201      	movs	r2, #1
 800da9e:	751a      	strb	r2, [r3, #20]
		size = precision_mode;
 800daa0:	4b05      	ldr	r3, [pc, #20]	; (800dab8 <_ZN13StreamMessageC1EPfff+0x48>)
 800daa2:	781b      	ldrb	r3, [r3, #0]
 800daa4:	461a      	mov	r2, r3
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	605a      	str	r2, [r3, #4]
	}
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	4618      	mov	r0, r3
 800daae:	3714      	adds	r7, #20
 800dab0:	46bd      	mov	sp, r7
 800dab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab6:	4770      	bx	lr
 800dab8:	24000001 	.word	0x24000001

0800dabc <_ZN13StreamMessageC1EPh>:

	StreamMessage(uint8_t* ptr) : ptr(ptr){
 800dabc:	b480      	push	{r7}
 800dabe:	b083      	sub	sp, #12
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	6078      	str	r0, [r7, #4]
 800dac4:	6039      	str	r1, [r7, #0]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2200      	movs	r2, #0
 800daca:	601a      	str	r2, [r3, #0]
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	683a      	ldr	r2, [r7, #0]
 800dad0:	611a      	str	r2, [r3, #16]
		do_scale = false;
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	2200      	movs	r2, #0
 800dad6:	751a      	strb	r2, [r3, #20]
		size = 1;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2201      	movs	r2, #1
 800dadc:	605a      	str	r2, [r3, #4]
	}
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4618      	mov	r0, r3
 800dae2:	370c      	adds	r7, #12
 800dae4:	46bd      	mov	sp, r7
 800dae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daea:	4770      	bx	lr

0800daec <_ZN13StreamMessage7unparseEPh>:

	void unparse(uint8_t* d) {
 800daec:	b580      	push	{r7, lr}
 800daee:	b086      	sub	sp, #24
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
		if(do_scale){
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	7d1b      	ldrb	r3, [r3, #20]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d03f      	beq.n	800db7e <_ZN13StreamMessage7unparseEPh+0x92>
			if(ic != nullptr)
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	2b00      	cmp	r3, #0
 800db04:	d004      	beq.n	800db10 <_ZN13StreamMessage7unparseEPh+0x24>
				ic->get_duty();
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4618      	mov	r0, r3
 800db0c:	f7fb fdfe 	bl	800970c <_ZN12InputCapture8get_dutyEv>
			float scale = (*((float*) ptr) - min) / (max - min);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	691b      	ldr	r3, [r3, #16]
 800db14:	ed93 7a00 	vldr	s14, [r3]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	edd3 7a02 	vldr	s15, [r3, #8]
 800db1e:	ee77 6a67 	vsub.f32	s13, s14, s15
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	ed93 7a03 	vldr	s14, [r3, #12]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	edd3 7a02 	vldr	s15, [r3, #8]
 800db2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db36:	edc7 7a05 	vstr	s15, [r7, #20]
			uint32_t data = (uint32_t) (scale * precision_max[(Precision) size]);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	685b      	ldr	r3, [r3, #4]
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	74fb      	strb	r3, [r7, #19]
 800db42:	f107 0313 	add.w	r3, r7, #19
 800db46:	4619      	mov	r1, r3
 800db48:	4813      	ldr	r0, [pc, #76]	; (800db98 <_ZN13StreamMessage7unparseEPh+0xac>)
 800db4a:	f002 f9b3 	bl	800feb4 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>
 800db4e:	4603      	mov	r3, r0
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	ee07 3a90 	vmov	s15, r3
 800db56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db5a:	edd7 7a05 	vldr	s15, [r7, #20]
 800db5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db66:	ee17 3a90 	vmov	r3, s15
 800db6a:	60fb      	str	r3, [r7, #12]
			memcpy(d, &data, size);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685a      	ldr	r2, [r3, #4]
 800db70:	f107 030c 	add.w	r3, r7, #12
 800db74:	4619      	mov	r1, r3
 800db76:	6838      	ldr	r0, [r7, #0]
 800db78:	f012 fe7c 	bl	8020874 <memcpy>
		}else{
			memcpy(d, ptr, size);
		}
	}
 800db7c:	e007      	b.n	800db8e <_ZN13StreamMessage7unparseEPh+0xa2>
			memcpy(d, ptr, size);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6919      	ldr	r1, [r3, #16]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	685b      	ldr	r3, [r3, #4]
 800db86:	461a      	mov	r2, r3
 800db88:	6838      	ldr	r0, [r7, #0]
 800db8a:	f012 fe73 	bl	8020874 <memcpy>
	}
 800db8e:	bf00      	nop
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}
 800db96:	bf00      	nop
 800db98:	24000188 	.word	0x24000188

0800db9c <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>:

	static StreamMessage* FromAnalogIn(AnalogIn* in){
 800db9c:	b590      	push	{r4, r7, lr}
 800db9e:	b083      	sub	sp, #12
 800dba0:	af00      	add	r7, sp, #0
 800dba2:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->voltage, 0, 3.3);
 800dba4:	2018      	movs	r0, #24
 800dba6:	f012 fd39 	bl	802061c <_Znwj>
 800dbaa:	4603      	mov	r3, r0
 800dbac:	461c      	mov	r4, r3
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	3314      	adds	r3, #20
 800dbb2:	eddf 0a06 	vldr	s1, [pc, #24]	; 800dbcc <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x30>
 800dbb6:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800dbd0 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x34>
 800dbba:	4619      	mov	r1, r3
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	f7ff ff57 	bl	800da70 <_ZN13StreamMessageC1EPfff>
 800dbc2:	4623      	mov	r3, r4
	}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	370c      	adds	r7, #12
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd90      	pop	{r4, r7, pc}
 800dbcc:	40533333 	.word	0x40533333
 800dbd0:	00000000 	.word	0x00000000

0800dbd4 <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>:

	static StreamMessage* FromDigigalIn(DigitalIn* in){
 800dbd4:	b590      	push	{r4, r7, lr}
 800dbd6:	b083      	sub	sp, #12
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	6078      	str	r0, [r7, #4]
		return new StreamMessage((uint8_t*) &in->state);
 800dbdc:	2018      	movs	r0, #24
 800dbde:	f012 fd1d 	bl	802061c <_Znwj>
 800dbe2:	4603      	mov	r3, r0
 800dbe4:	461c      	mov	r4, r3
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	3308      	adds	r3, #8
 800dbea:	4619      	mov	r1, r3
 800dbec:	4620      	mov	r0, r4
 800dbee:	f7ff ff65 	bl	800dabc <_ZN13StreamMessageC1EPh>
 800dbf2:	4623      	mov	r3, r4
	}
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	370c      	adds	r7, #12
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd90      	pop	{r4, r7, pc}

0800dbfc <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>:

	static StreamMessage* FromInputCapture(InputCapture* in){
 800dbfc:	b590      	push	{r4, r7, lr}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
		StreamMessage* sm = new StreamMessage(&in->duty, 0, 100);
 800dc04:	2018      	movs	r0, #24
 800dc06:	f012 fd09 	bl	802061c <_Znwj>
 800dc0a:	4603      	mov	r3, r0
 800dc0c:	461c      	mov	r4, r3
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	33c0      	adds	r3, #192	; 0xc0
 800dc12:	eddf 0a08 	vldr	s1, [pc, #32]	; 800dc34 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x38>
 800dc16:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dc38 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x3c>
 800dc1a:	4619      	mov	r1, r3
 800dc1c:	4620      	mov	r0, r4
 800dc1e:	f7ff ff27 	bl	800da70 <_ZN13StreamMessageC1EPfff>
 800dc22:	60fc      	str	r4, [r7, #12]
		sm->ic = in;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	601a      	str	r2, [r3, #0]
		return sm;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
	}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3714      	adds	r7, #20
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd90      	pop	{r4, r7, pc}
 800dc34:	42c80000 	.word	0x42c80000
 800dc38:	00000000 	.word	0x00000000

0800dc3c <_ZN13StreamMessage7FromPinEP3Pin>:

	static optional<StreamMessage*> FromPin(Pin* pin){
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
 800dc44:	6039      	str	r1, [r7, #0]
		if(pin->mode == ANALOG_INPUT)
 800dc46:	683b      	ldr	r3, [r7, #0]
 800dc48:	799b      	ldrb	r3, [r3, #6]
 800dc4a:	2b01      	cmp	r3, #1
 800dc4c:	d112      	bne.n	800dc74 <_ZN13StreamMessage7FromPinEP3Pin+0x38>
			return FromAnalogIn(AnalogIn::analog_in_from_pin[pin]);
 800dc4e:	463b      	mov	r3, r7
 800dc50:	4619      	mov	r1, r3
 800dc52:	4822      	ldr	r0, [pc, #136]	; (800dcdc <_ZN13StreamMessage7FromPinEP3Pin+0xa0>)
 800dc54:	f7f2 fe84 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dc58:	4603      	mov	r3, r0
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	f7ff ff9d 	bl	800db9c <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>
 800dc62:	4603      	mov	r3, r0
 800dc64:	60fb      	str	r3, [r7, #12]
 800dc66:	f107 030c 	add.w	r3, r7, #12
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f002 f981 	bl	800ff74 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
		if(pin->mode == DIGITAL_INPUT)
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
		if(pin->mode == INPUT_CAPTURE)
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
	}
 800dc72:	e02e      	b.n	800dcd2 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == DIGITAL_INPUT)
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	799b      	ldrb	r3, [r3, #6]
 800dc78:	2b03      	cmp	r3, #3
 800dc7a:	d112      	bne.n	800dca2 <_ZN13StreamMessage7FromPinEP3Pin+0x66>
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
 800dc7c:	463b      	mov	r3, r7
 800dc7e:	4619      	mov	r1, r3
 800dc80:	4817      	ldr	r0, [pc, #92]	; (800dce0 <_ZN13StreamMessage7FromPinEP3Pin+0xa4>)
 800dc82:	f7f8 fd2b 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dc86:	4603      	mov	r3, r0
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f7ff ffa2 	bl	800dbd4 <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>
 800dc90:	4603      	mov	r3, r0
 800dc92:	613b      	str	r3, [r7, #16]
 800dc94:	f107 0310 	add.w	r3, r7, #16
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f002 f96a 	bl	800ff74 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dca0:	e017      	b.n	800dcd2 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == INPUT_CAPTURE)
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	799b      	ldrb	r3, [r3, #6]
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d112      	bne.n	800dcd0 <_ZN13StreamMessage7FromPinEP3Pin+0x94>
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
 800dcaa:	463b      	mov	r3, r7
 800dcac:	4619      	mov	r1, r3
 800dcae:	480d      	ldr	r0, [pc, #52]	; (800dce4 <_ZN13StreamMessage7FromPinEP3Pin+0xa8>)
 800dcb0:	f7fb fddc 	bl	800986c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	4618      	mov	r0, r3
 800dcba:	f7ff ff9f 	bl	800dbfc <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	617b      	str	r3, [r7, #20]
 800dcc2:	f107 0314 	add.w	r3, r7, #20
 800dcc6:	4619      	mov	r1, r3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f002 f953 	bl	800ff74 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dcce:	e000      	b.n	800dcd2 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
 800dcd0:	bf00      	nop
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	3718      	adds	r7, #24
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	bd80      	pop	{r7, pc}
 800dcda:	bf00      	nop
 800dcdc:	240000bc 	.word	0x240000bc
 800dce0:	2400011c 	.word	0x2400011c
 800dce4:	24000164 	.word	0x24000164

0800dce8 <_ZN13StreamMessage18set_precision_modeEh>:

	static bool set_precision_mode(uint8_t precision){
 800dce8:	b480      	push	{r7}
 800dcea:	b083      	sub	sp, #12
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	4603      	mov	r3, r0
 800dcf0:	71fb      	strb	r3, [r7, #7]
		if(precision < 0 || precision > 4)
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	2b04      	cmp	r3, #4
 800dcf6:	d901      	bls.n	800dcfc <_ZN13StreamMessage18set_precision_modeEh+0x14>
			return false;
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	e003      	b.n	800dd04 <_ZN13StreamMessage18set_precision_modeEh+0x1c>
		precision_mode = (Precision) precision;
 800dcfc:	4a04      	ldr	r2, [pc, #16]	; (800dd10 <_ZN13StreamMessage18set_precision_modeEh+0x28>)
 800dcfe:	79fb      	ldrb	r3, [r7, #7]
 800dd00:	7013      	strb	r3, [r2, #0]
		return true;
 800dd02:	2301      	movs	r3, #1
	}
 800dd04:	4618      	mov	r0, r3
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	24000001 	.word	0x24000001

0800dd14 <_ZN6Stream12is_availableEjj>:
	unsigned int size = 0;
	uint8_t id;
	Timer* timer;
	Can* can;

	bool is_available(unsigned int frequency, unsigned int size){
 800dd14:	b480      	push	{r7}
 800dd16:	b087      	sub	sp, #28
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60f8      	str	r0, [r7, #12]
 800dd1c:	60b9      	str	r1, [r7, #8]
 800dd1e:	607a      	str	r2, [r7, #4]
		bool is_occupied		= this ->state == OCCUPIED;
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	bf0c      	ite	eq
 800dd28:	2301      	moveq	r3, #1
 800dd2a:	2300      	movne	r3, #0
 800dd2c:	75fb      	strb	r3, [r7, #23]
		bool is_full			= (this->size + size) > 64 ;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	695a      	ldr	r2, [r3, #20]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	4413      	add	r3, r2
 800dd36:	2b40      	cmp	r3, #64	; 0x40
 800dd38:	bf8c      	ite	hi
 800dd3a:	2301      	movhi	r3, #1
 800dd3c:	2300      	movls	r3, #0
 800dd3e:	75bb      	strb	r3, [r7, #22]
		bool frequencies_match	= this->frequency == frequency;
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	429a      	cmp	r2, r3
 800dd48:	bf0c      	ite	eq
 800dd4a:	2301      	moveq	r3, #1
 800dd4c:	2300      	movne	r3, #0
 800dd4e:	757b      	strb	r3, [r7, #21]
		return !is_occupied || (frequencies_match && !is_full);
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
 800dd52:	f083 0301 	eor.w	r3, r3, #1
 800dd56:	b2db      	uxtb	r3, r3
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d108      	bne.n	800dd6e <_ZN6Stream12is_availableEjj+0x5a>
 800dd5c:	7d7b      	ldrb	r3, [r7, #21]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d007      	beq.n	800dd72 <_ZN6Stream12is_availableEjj+0x5e>
 800dd62:	7dbb      	ldrb	r3, [r7, #22]
 800dd64:	f083 0301 	eor.w	r3, r3, #1
 800dd68:	b2db      	uxtb	r3, r3
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d001      	beq.n	800dd72 <_ZN6Stream12is_availableEjj+0x5e>
 800dd6e:	2301      	movs	r3, #1
 800dd70:	e000      	b.n	800dd74 <_ZN6Stream12is_availableEjj+0x60>
 800dd72:	2300      	movs	r3, #0
	}
 800dd74:	4618      	mov	r0, r3
 800dd76:	371c      	adds	r7, #28
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd7e:	4770      	bx	lr

0800dd80 <_ZN6Stream16send_ok_responseEht>:

	void send_ok_response(uint8_t offset, uint16_t response_code){
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	460b      	mov	r3, r1
 800dd8a:	70fb      	strb	r3, [r7, #3]
 800dd8c:	4613      	mov	r3, r2
 800dd8e:	803b      	strh	r3, [r7, #0]
		can->TxData[0] = Can::Ok;
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a1b      	ldr	r3, [r3, #32]
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		can->TxData[1] = id;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	687a      	ldr	r2, [r7, #4]
 800dda0:	7e12      	ldrb	r2, [r2, #24]
 800dda2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		can->TxData[2] = offset;
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6a1b      	ldr	r3, [r3, #32]
 800ddaa:	78fa      	ldrb	r2, [r7, #3]
 800ddac:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		can->send_message(response_code, 3);
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	6a1b      	ldr	r3, [r3, #32]
 800ddb4:	8839      	ldrh	r1, [r7, #0]
 800ddb6:	2203      	movs	r2, #3
 800ddb8:	4618      	mov	r0, r3
 800ddba:	f7f6 ffd9 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800ddbe:	bf00      	nop
 800ddc0:	3708      	adds	r7, #8
 800ddc2:	46bd      	mov	sp, r7
 800ddc4:	bd80      	pop	{r7, pc}

0800ddc6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ddc6:	b580      	push	{r7, lr}
 800ddc8:	b082      	sub	sp, #8
 800ddca:	af00      	add	r7, sp, #0
 800ddcc:	6078      	str	r0, [r7, #4]
 800ddce:	6878      	ldr	r0, [r7, #4]
 800ddd0:	f002 f904 	bl	800ffdc <_ZNSaIP13StreamMessageED1Ev>
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3708      	adds	r7, #8
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}

0800ddde <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800ddde:	b580      	push	{r7, lr}
 800dde0:	b082      	sub	sp, #8
 800dde2:	af00      	add	r7, sp, #0
 800dde4:	6078      	str	r0, [r7, #4]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f002 f8e7 	bl	800ffbc <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	4618      	mov	r0, r3
 800ddf2:	3708      	adds	r7, #8
 800ddf4:	46bd      	mov	sp, r7
 800ddf6:	bd80      	pop	{r7, pc}

0800ddf8 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>:
      vector() = default;
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4618      	mov	r0, r3
 800de04:	f7ff ffeb 	bl	800ddde <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	4618      	mov	r0, r3
 800de0c:	3708      	adds	r7, #8
 800de0e:	46bd      	mov	sp, r7
 800de10:	bd80      	pop	{r7, pc}
	...

0800de14 <_ZN6StreamC1EP5TimerP3Can>:
		return true;
	}

public:

	Stream(Timer* timer, Can* can) : timer(timer), can(can) {
 800de14:	b580      	push	{r7, lr}
 800de16:	b086      	sub	sp, #24
 800de18:	af00      	add	r7, sp, #0
 800de1a:	60f8      	str	r0, [r7, #12]
 800de1c:	60b9      	str	r1, [r7, #8]
 800de1e:	607a      	str	r2, [r7, #4]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	2200      	movs	r2, #0
 800de24:	701a      	strb	r2, [r3, #0]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	3308      	adds	r3, #8
 800de2a:	4618      	mov	r0, r3
 800de2c:	f7ff ffe4 	bl	800ddf8 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2200      	movs	r2, #0
 800de34:	615a      	str	r2, [r3, #20]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	68ba      	ldr	r2, [r7, #8]
 800de3a:	61da      	str	r2, [r3, #28]
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	687a      	ldr	r2, [r7, #4]
 800de40:	621a      	str	r2, [r3, #32]
		Stream::streams.push_back(this);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	617b      	str	r3, [r7, #20]
 800de46:	f107 0314 	add.w	r3, r7, #20
 800de4a:	4619      	mov	r1, r3
 800de4c:	4808      	ldr	r0, [pc, #32]	; (800de70 <_ZN6StreamC1EP5TimerP3Can+0x5c>)
 800de4e:	f002 f904 	bl	801005a <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>
		id = current_id;
 800de52:	4b08      	ldr	r3, [pc, #32]	; (800de74 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de54:	781a      	ldrb	r2, [r3, #0]
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	761a      	strb	r2, [r3, #24]
		current_id ++;
 800de5a:	4b06      	ldr	r3, [pc, #24]	; (800de74 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	3301      	adds	r3, #1
 800de60:	b2da      	uxtb	r2, r3
 800de62:	4b04      	ldr	r3, [pc, #16]	; (800de74 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de64:	701a      	strb	r2, [r3, #0]
	}
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	4618      	mov	r0, r3
 800de6a:	3718      	adds	r7, #24
 800de6c:	46bd      	mov	sp, r7
 800de6e:	bd80      	pop	{r7, pc}
 800de70:	2400017c 	.word	0x2400017c
 800de74:	24000000 	.word	0x24000000

0800de78 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800de78:	b480      	push	{r7}
 800de7a:	b083      	sub	sp, #12
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	4618      	mov	r0, r3
 800de84:	370c      	adds	r7, #12
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr

0800de8e <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800de8e:	b590      	push	{r4, r7, lr}
 800de90:	b083      	sub	sp, #12
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
 800de96:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f7ff ffed 	bl	800de78 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800de9e:	4603      	mov	r3, r0
 800dea0:	681c      	ldr	r4, [r3, #0]
 800dea2:	6838      	ldr	r0, [r7, #0]
 800dea4:	f7ff ffe8 	bl	800de78 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800dea8:	4603      	mov	r3, r0
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	429c      	cmp	r4, r3
 800deae:	bf0c      	ite	eq
 800deb0:	2301      	moveq	r3, #1
 800deb2:	2300      	movne	r3, #0
 800deb4:	b2db      	uxtb	r3, r3
 800deb6:	4618      	mov	r0, r3
 800deb8:	370c      	adds	r7, #12
 800deba:	46bd      	mov	sp, r7
 800debc:	bd90      	pop	{r4, r7, pc}

0800debe <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800debe:	b480      	push	{r7}
 800dec0:	b083      	sub	sp, #12
 800dec2:	af00      	add	r7, sp, #0
 800dec4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	1d1a      	adds	r2, r3, #4
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	601a      	str	r2, [r3, #0]
	return *this;
 800ded0:	687b      	ldr	r3, [r7, #4]
      }
 800ded2:	4618      	mov	r0, r3
 800ded4:	370c      	adds	r7, #12
 800ded6:	46bd      	mov	sp, r7
 800ded8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dedc:	4770      	bx	lr

0800dede <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800dede:	b480      	push	{r7}
 800dee0:	b083      	sub	sp, #12
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	681b      	ldr	r3, [r3, #0]
 800deea:	4618      	mov	r0, r3
 800deec:	370c      	adds	r7, #12
 800deee:	46bd      	mov	sp, r7
 800def0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def4:	4770      	bx	lr

0800def6 <_ZN6Stream17send_all_messagesEv>:

	void send_all_messages(){
 800def6:	b580      	push	{r7, lr}
 800def8:	b088      	sub	sp, #32
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
		unsigned int current_position = 0;
 800defe:	2300      	movs	r3, #0
 800df00:	61fb      	str	r3, [r7, #28]
		memset(can->TxData, 255, Can::MAX_MESSAGE_SIZE);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	6a1b      	ldr	r3, [r3, #32]
 800df06:	3350      	adds	r3, #80	; 0x50
 800df08:	2240      	movs	r2, #64	; 0x40
 800df0a:	21ff      	movs	r1, #255	; 0xff
 800df0c:	4618      	mov	r0, r3
 800df0e:	f012 fcd9 	bl	80208c4 <memset>
		for(auto message : messages){
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	3308      	adds	r3, #8
 800df16:	61bb      	str	r3, [r7, #24]
 800df18:	69b8      	ldr	r0, [r7, #24]
 800df1a:	f002 f8af 	bl	801007c <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800df1e:	4603      	mov	r3, r0
 800df20:	613b      	str	r3, [r7, #16]
 800df22:	69b8      	ldr	r0, [r7, #24]
 800df24:	f002 f8ba 	bl	801009c <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 800df28:	4603      	mov	r3, r0
 800df2a:	60fb      	str	r3, [r7, #12]
 800df2c:	f107 020c 	add.w	r2, r7, #12
 800df30:	f107 0310 	add.w	r3, r7, #16
 800df34:	4611      	mov	r1, r2
 800df36:	4618      	mov	r0, r3
 800df38:	f7ff ffa9 	bl	800de8e <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800df3c:	4603      	mov	r3, r0
 800df3e:	f083 0301 	eor.w	r3, r3, #1
 800df42:	b2db      	uxtb	r3, r3
 800df44:	2b00      	cmp	r3, #0
 800df46:	d01b      	beq.n	800df80 <_ZN6Stream17send_all_messagesEv+0x8a>
 800df48:	f107 0310 	add.w	r3, r7, #16
 800df4c:	4618      	mov	r0, r3
 800df4e:	f7ff ffc6 	bl	800dede <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>
 800df52:	4603      	mov	r3, r0
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	617b      	str	r3, [r7, #20]
			message->unparse(&can->TxData[current_position]);
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6a1a      	ldr	r2, [r3, #32]
 800df5c:	69fb      	ldr	r3, [r7, #28]
 800df5e:	3350      	adds	r3, #80	; 0x50
 800df60:	4413      	add	r3, r2
 800df62:	4619      	mov	r1, r3
 800df64:	6978      	ldr	r0, [r7, #20]
 800df66:	f7ff fdc1 	bl	800daec <_ZN13StreamMessage7unparseEPh>
			current_position += message->size;
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	69fa      	ldr	r2, [r7, #28]
 800df70:	4413      	add	r3, r2
 800df72:	61fb      	str	r3, [r7, #28]
		for(auto message : messages){
 800df74:	f107 0310 	add.w	r3, r7, #16
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff ffa0 	bl	800debe <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>
 800df7e:	e7d5      	b.n	800df2c <_ZN6Stream17send_all_messagesEv+0x36>
		}
		can->send_message(id, this->size);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	6a18      	ldr	r0, [r3, #32]
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	7e1b      	ldrb	r3, [r3, #24]
 800df88:	b299      	uxth	r1, r3
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	695b      	ldr	r3, [r3, #20]
 800df8e:	461a      	mov	r2, r3
 800df90:	f7f6 feee 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800df94:	bf00      	nop
 800df96:	3720      	adds	r7, #32
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>:

	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
		messages.push_back(message);
		if(state == FREE){
			state = OCCUPIED;
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b082      	sub	sp, #8
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	681b      	ldr	r3, [r3, #0]
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	f7ff ffa4 	bl	800def6 <_ZN6Stream17send_all_messagesEv>
 800dfae:	bf00      	nop
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}

0800dfb6 <_ZN6Stream11add_messageEmP13StreamMessaget>:
	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
 800dfb6:	b590      	push	{r4, r7, lr}
 800dfb8:	b089      	sub	sp, #36	; 0x24
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	60f8      	str	r0, [r7, #12]
 800dfbe:	60b9      	str	r1, [r7, #8]
 800dfc0:	607a      	str	r2, [r7, #4]
 800dfc2:	807b      	strh	r3, [r7, #2]
		messages.push_back(message);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	1d3a      	adds	r2, r7, #4
 800dfca:	4611      	mov	r1, r2
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f002 f876 	bl	80100be <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>
		if(state == FREE){
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	781b      	ldrb	r3, [r3, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d117      	bne.n	800e00a <_ZN6Stream11add_messageEmP13StreamMessaget+0x54>
			state = OCCUPIED;
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	2201      	movs	r2, #1
 800dfde:	701a      	strb	r2, [r3, #0]
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	69dc      	ldr	r4, [r3, #28]
 800dfe4:	68fa      	ldr	r2, [r7, #12]
 800dfe6:	f107 0310 	add.w	r3, r7, #16
 800dfea:	4611      	mov	r1, r2
 800dfec:	4618      	mov	r0, r3
 800dfee:	f002 f88b 	bl	8010108 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>
 800dff2:	f107 0310 	add.w	r3, r7, #16
 800dff6:	68ba      	ldr	r2, [r7, #8]
 800dff8:	4619      	mov	r1, r3
 800dffa:	4620      	mov	r0, r4
 800dffc:	f7ff fc92 	bl	800d924 <_ZN5Timer10execute_atESt8functionIFvvEEm>
 800e000:	f107 0310 	add.w	r3, r7, #16
 800e004:	4618      	mov	r0, r3
 800e006:	f7ff fb6f 	bl	800d6e8 <_ZNSt8functionIFvvEED1Ev>
		};
		this -> frequency = frequency;
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	68ba      	ldr	r2, [r7, #8]
 800e00e:	605a      	str	r2, [r3, #4]
		send_ok_response(size, response_code);
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	695b      	ldr	r3, [r3, #20]
 800e014:	b2db      	uxtb	r3, r3
 800e016:	887a      	ldrh	r2, [r7, #2]
 800e018:	4619      	mov	r1, r3
 800e01a:	68f8      	ldr	r0, [r7, #12]
 800e01c:	f7ff feb0 	bl	800dd80 <_ZN6Stream16send_ok_responseEht>
 		size += message->size;
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	695a      	ldr	r2, [r3, #20]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	685b      	ldr	r3, [r3, #4]
 800e028:	441a      	add	r2, r3
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	615a      	str	r2, [r3, #20]
	}
 800e02e:	bf00      	nop
 800e030:	3724      	adds	r7, #36	; 0x24
 800e032:	46bd      	mov	sp, r7
 800e034:	bd90      	pop	{r4, r7, pc}

0800e036 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e036:	b480      	push	{r7}
 800e038:	b083      	sub	sp, #12
 800e03a:	af00      	add	r7, sp, #0
 800e03c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	791b      	ldrb	r3, [r3, #4]
 800e042:	4618      	mov	r0, r3
 800e044:	370c      	adds	r7, #12
 800e046:	46bd      	mov	sp, r7
 800e048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04c:	4770      	bx	lr

0800e04e <_ZNRSt8optionalIP13StreamMessageE5valueEv>:
      value()&
 800e04e:	b580      	push	{r7, lr}
 800e050:	b082      	sub	sp, #8
 800e052:	af00      	add	r7, sp, #0
 800e054:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f7ff ffed 	bl	800e036 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e05c:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d004      	beq.n	800e06c <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x1e>
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f002 f886 	bl	8010174 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e068:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e06a:	e001      	b.n	800e070 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x22>
 800e06c:	f7f6 fcbd 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e070:	4618      	mov	r0, r3
 800e072:	3708      	adds	r7, #8
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}

0800e078 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e078:	b480      	push	{r7}
 800e07a:	b083      	sub	sp, #12
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	4618      	mov	r0, r3
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e08e:	b590      	push	{r4, r7, lr}
 800e090:	b083      	sub	sp, #12
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
 800e096:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f7ff ffed 	bl	800e078 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	681c      	ldr	r4, [r3, #0]
 800e0a2:	6838      	ldr	r0, [r7, #0]
 800e0a4:	f7ff ffe8 	bl	800e078 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	429c      	cmp	r4, r3
 800e0ae:	bf0c      	ite	eq
 800e0b0:	2301      	moveq	r3, #1
 800e0b2:	2300      	movne	r3, #0
 800e0b4:	b2db      	uxtb	r3, r3
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	370c      	adds	r7, #12
 800e0ba:	46bd      	mov	sp, r7
 800e0bc:	bd90      	pop	{r4, r7, pc}

0800e0be <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e0be:	b480      	push	{r7}
 800e0c0:	b083      	sub	sp, #12
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	1d1a      	adds	r2, r3, #4
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	601a      	str	r2, [r3, #0]
	return *this;
 800e0d0:	687b      	ldr	r3, [r7, #4]
      }
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e0de:	b480      	push	{r7}
 800e0e0:	b083      	sub	sp, #12
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	370c      	adds	r7, #12
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f4:	4770      	bx	lr
	...

0800e0f8 <_ZN6Stream10add_streamEjP3Pint>:

	static bool add_stream(unsigned int frequency, Pin* pin, uint16_t response_code) {
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	b08c      	sub	sp, #48	; 0x30
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	4613      	mov	r3, r2
 800e104:	80fb      	strh	r3, [r7, #6]
		optional<StreamMessage*> message_optional = StreamMessage::FromPin(pin);
 800e106:	f107 031c 	add.w	r3, r7, #28
 800e10a:	68b9      	ldr	r1, [r7, #8]
 800e10c:	4618      	mov	r0, r3
 800e10e:	f7ff fd95 	bl	800dc3c <_ZN13StreamMessage7FromPinEP3Pin>
		if(message_optional){
 800e112:	f107 031c 	add.w	r3, r7, #28
 800e116:	4618      	mov	r0, r3
 800e118:	f002 f820 	bl	801015c <_ZNKSt8optionalIP13StreamMessageEcvbEv>
 800e11c:	4603      	mov	r3, r0
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d041      	beq.n	800e1a6 <_ZN6Stream10add_streamEjP3Pint+0xae>
			StreamMessage* message = message_optional.value();
 800e122:	f107 031c 	add.w	r3, r7, #28
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff ff91 	bl	800e04e <_ZNRSt8optionalIP13StreamMessageE5valueEv>
 800e12c:	4603      	mov	r3, r0
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(auto s : streams){
 800e132:	4b1f      	ldr	r3, [pc, #124]	; (800e1b0 <_ZN6Stream10add_streamEjP3Pint+0xb8>)
 800e134:	62bb      	str	r3, [r7, #40]	; 0x28
 800e136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e138:	f002 f829 	bl	801018e <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800e13c:	4603      	mov	r3, r0
 800e13e:	61bb      	str	r3, [r7, #24]
 800e140:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e142:	f002 f834 	bl	80101ae <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800e146:	4603      	mov	r3, r0
 800e148:	617b      	str	r3, [r7, #20]
 800e14a:	f107 0214 	add.w	r2, r7, #20
 800e14e:	f107 0318 	add.w	r3, r7, #24
 800e152:	4611      	mov	r1, r2
 800e154:	4618      	mov	r0, r3
 800e156:	f7ff ff9a 	bl	800e08e <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e15a:	4603      	mov	r3, r0
 800e15c:	f083 0301 	eor.w	r3, r3, #1
 800e160:	b2db      	uxtb	r3, r3
 800e162:	2b00      	cmp	r3, #0
 800e164:	d01f      	beq.n	800e1a6 <_ZN6Stream10add_streamEjP3Pint+0xae>
 800e166:	f107 0318 	add.w	r3, r7, #24
 800e16a:	4618      	mov	r0, r3
 800e16c:	f7ff ffb7 	bl	800e0de <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800e170:	4603      	mov	r3, r0
 800e172:	681b      	ldr	r3, [r3, #0]
 800e174:	627b      	str	r3, [r7, #36]	; 0x24
				if(s->is_available(frequency, message->size)){
 800e176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e178:	685b      	ldr	r3, [r3, #4]
 800e17a:	461a      	mov	r2, r3
 800e17c:	68f9      	ldr	r1, [r7, #12]
 800e17e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e180:	f7ff fdc8 	bl	800dd14 <_ZN6Stream12is_availableEjj>
 800e184:	4603      	mov	r3, r0
 800e186:	2b00      	cmp	r3, #0
 800e188:	d007      	beq.n	800e19a <_ZN6Stream10add_streamEjP3Pint+0xa2>
					s->add_message(frequency, message, response_code);
 800e18a:	88fb      	ldrh	r3, [r7, #6]
 800e18c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e18e:	68f9      	ldr	r1, [r7, #12]
 800e190:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e192:	f7ff ff10 	bl	800dfb6 <_ZN6Stream11add_messageEmP13StreamMessaget>
					return true;
 800e196:	2301      	movs	r3, #1
 800e198:	e006      	b.n	800e1a8 <_ZN6Stream10add_streamEjP3Pint+0xb0>
			for(auto s : streams){
 800e19a:	f107 0318 	add.w	r3, r7, #24
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7ff ff8d 	bl	800e0be <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800e1a4:	e7d1      	b.n	800e14a <_ZN6Stream10add_streamEjP3Pint+0x52>
				}
			}
		}
		return false;
 800e1a6:	2300      	movs	r3, #0
	}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3730      	adds	r7, #48	; 0x30
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}
 800e1b0:	2400017c 	.word	0x2400017c

0800e1b4 <_Z5startv>:
Stream stream1(&timer_14, &main_can);
Stream stream2(&timer_15, &main_can);
Stream stream3(&timer_16, &main_can);
Stream stream4(&timer_17, &main_can);

void start() {
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	af00      	add	r7, sp, #0
	InputCapture::start_all_input_captures();
 800e1b8:	f7fb fa26 	bl	8009608 <_ZN12InputCapture24start_all_input_capturesEv>
	AnalogOut::start_all_analog_outs();
 800e1bc:	f7f5 f8e2 	bl	8003384 <_ZN9AnalogOut21start_all_analog_outsEv>
	AnalogIn::start_all_analog_ins();
 800e1c0:	f7f2 fa6c 	bl	800069c <_ZN8AnalogIn20start_all_analog_insEv>
	Can::start_all_cans();
 800e1c4:	f7f6 fd38 	bl	8004c38 <_ZN3Can14start_all_cansEv>
}
 800e1c8:	bf00      	nop
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <HAL_TIM_IC_CaptureCallback>:

// INTERRUPTIONS

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
	InputCapture::interrupt_of_all_input_captures(timer);
 800e1d4:	6878      	ldr	r0, [r7, #4]
 800e1d6:	f7fb fa47 	bl	8009668 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>
}
 800e1da:	bf00      	nop
 800e1dc:	3708      	adds	r7, #8
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b082      	sub	sp, #8
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
	AnalogIn::interrupt_all_analog_ins();
 800e1ea:	f7f2 fa87 	bl	80006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>
}
 800e1ee:	bf00      	nop
 800e1f0:	3708      	adds	r7, #8
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}

0800e1f6 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 800e1f6:	b580      	push	{r7, lr}
 800e1f8:	b082      	sub	sp, #8
 800e1fa:	af00      	add	r7, sp, #0
 800e1fc:	6078      	str	r0, [r7, #4]
	Timer::interrupt_all_timers(tim);
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f7ff fbfc 	bl	800d9fc <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>
}
 800e204:	bf00      	nop
 800e206:	3708      	adds	r7, #8
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800e216:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e21a:	4805      	ldr	r0, [pc, #20]	; (800e230 <HAL_FDCAN_RxFifo0Callback+0x24>)
 800e21c:	f00c fd9b 	bl	801ad56 <HAL_GPIO_TogglePin>
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
 800e220:	6839      	ldr	r1, [r7, #0]
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f7f6 feda 	bl	8004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>
}
 800e228:	bf00      	nop
 800e22a:	3708      	adds	r7, #8
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	58021800 	.word	0x58021800

0800e234 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	791b      	ldrb	r3, [r3, #4]
 800e240:	4618      	mov	r0, r3
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <_ZNRSt8optionalIP3PinE5valueEv>:
      value()&
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b082      	sub	sp, #8
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e254:	6878      	ldr	r0, [r7, #4]
 800e256:	f7ff ffed 	bl	800e234 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e25a:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d004      	beq.n	800e26a <_ZNRSt8optionalIP3PinE5valueEv+0x1e>
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f002 f895 	bl	8010390 <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e266:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e268:	e001      	b.n	800e26e <_ZNRSt8optionalIP3PinE5valueEv+0x22>
 800e26a:	f7f6 fbbe 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e26e:	4618      	mov	r0, r3
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
	...

0800e278 <_Z23read_analog_in_callbackv>:

// MESSAGE CALLBACKS

void read_analog_in_callback(){
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e27e:	4b14      	ldr	r3, [pc, #80]	; (800e2d0 <_Z23read_analog_in_callbackv+0x58>)
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	b29a      	uxth	r2, r3
 800e284:	1d3b      	adds	r3, r7, #4
 800e286:	4611      	mov	r1, r2
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe f9b1 	bl	800c5f0 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e28e:	1d3b      	adds	r3, r7, #4
 800e290:	4618      	mov	r0, r3
 800e292:	f002 f871 	bl	8010378 <_ZNKSt8optionalIP3PinEcvbEv>
 800e296:	4603      	mov	r3, r0
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d016      	beq.n	800e2ca <_Z23read_analog_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e29c:	1d3b      	adds	r3, r7, #4
 800e29e:	4618      	mov	r0, r3
 800e2a0:	f7ff ffd4 	bl	800e24c <_ZNRSt8optionalIP3PinE5valueEv>
 800e2a4:	4603      	mov	r3, r0
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	603b      	str	r3, [r7, #0]
		AnalogIn* in = AnalogIn::analog_in_from_pin[pin];
 800e2aa:	463b      	mov	r3, r7
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	4809      	ldr	r0, [pc, #36]	; (800e2d4 <_Z23read_analog_in_callbackv+0x5c>)
 800e2b0:	f7f2 fb56 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_ANALOG_IN_REPLY, (uint8_t*) &in->voltage, sizeof(float));
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	f103 0214 	add.w	r2, r3, #20
 800e2c0:	2304      	movs	r3, #4
 800e2c2:	215d      	movs	r1, #93	; 0x5d
 800e2c4:	4804      	ldr	r0, [pc, #16]	; (800e2d8 <_Z23read_analog_in_callbackv+0x60>)
 800e2c6:	f7f6 fcfb 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e2ca:	3710      	adds	r7, #16
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	bd80      	pop	{r7, pc}
 800e2d0:	24000960 	.word	0x24000960
 800e2d4:	240000bc 	.word	0x240000bc
 800e2d8:	24000890 	.word	0x24000890

0800e2dc <_Z24read_digital_in_callbackv>:

void read_digital_in_callback(){
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b084      	sub	sp, #16
 800e2e0:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e2e2:	4b14      	ldr	r3, [pc, #80]	; (800e334 <_Z24read_digital_in_callbackv+0x58>)
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	b29a      	uxth	r2, r3
 800e2e8:	1d3b      	adds	r3, r7, #4
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	f7fe f97f 	bl	800c5f0 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e2f2:	1d3b      	adds	r3, r7, #4
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	f002 f83f 	bl	8010378 <_ZNKSt8optionalIP3PinEcvbEv>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d016      	beq.n	800e32e <_Z24read_digital_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e300:	1d3b      	adds	r3, r7, #4
 800e302:	4618      	mov	r0, r3
 800e304:	f7ff ffa2 	bl	800e24c <_ZNRSt8optionalIP3PinE5valueEv>
 800e308:	4603      	mov	r3, r0
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	603b      	str	r3, [r7, #0]
		DigitalIn* in = DigitalIn::pin_to_digital_in[pin];
 800e30e:	463b      	mov	r3, r7
 800e310:	4619      	mov	r1, r3
 800e312:	4809      	ldr	r0, [pc, #36]	; (800e338 <_Z24read_digital_in_callbackv+0x5c>)
 800e314:	f7f8 f9e2 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e318:	4603      	mov	r3, r0
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_DIGITAL_IN_REPLY, (uint8_t*) &in->state, sizeof(uint8_t));
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	f103 0208 	add.w	r2, r3, #8
 800e324:	2301      	movs	r3, #1
 800e326:	215e      	movs	r1, #94	; 0x5e
 800e328:	4804      	ldr	r0, [pc, #16]	; (800e33c <_Z24read_digital_in_callbackv+0x60>)
 800e32a:	f7f6 fcc9 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e32e:	3710      	adds	r7, #16
 800e330:	46bd      	mov	sp, r7
 800e332:	bd80      	pop	{r7, pc}
 800e334:	24000960 	.word	0x24000960
 800e338:	2400011c 	.word	0x2400011c
 800e33c:	24000890 	.word	0x24000890

0800e340 <_Z27read_input_capture_callbackv>:

int MSG_INDEX = 0;
void read_input_capture_callback(){
 800e340:	b580      	push	{r7, lr}
 800e342:	b084      	sub	sp, #16
 800e344:	af00      	add	r7, sp, #0
	MSG_INDEX += 1;
 800e346:	4b18      	ldr	r3, [pc, #96]	; (800e3a8 <_Z27read_input_capture_callbackv+0x68>)
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	3301      	adds	r3, #1
 800e34c:	4a16      	ldr	r2, [pc, #88]	; (800e3a8 <_Z27read_input_capture_callbackv+0x68>)
 800e34e:	6013      	str	r3, [r2, #0]
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e350:	4b16      	ldr	r3, [pc, #88]	; (800e3ac <_Z27read_input_capture_callbackv+0x6c>)
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	b29a      	uxth	r2, r3
 800e356:	1d3b      	adds	r3, r7, #4
 800e358:	4611      	mov	r1, r2
 800e35a:	4618      	mov	r0, r3
 800e35c:	f7fe f948 	bl	800c5f0 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e360:	1d3b      	adds	r3, r7, #4
 800e362:	4618      	mov	r0, r3
 800e364:	f002 f808 	bl	8010378 <_ZNKSt8optionalIP3PinEcvbEv>
 800e368:	4603      	mov	r3, r0
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d019      	beq.n	800e3a2 <_Z27read_input_capture_callbackv+0x62>
		Pin* pin = pin_optional.value();
 800e36e:	1d3b      	adds	r3, r7, #4
 800e370:	4618      	mov	r0, r3
 800e372:	f7ff ff6b 	bl	800e24c <_ZNRSt8optionalIP3PinE5valueEv>
 800e376:	4603      	mov	r3, r0
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	603b      	str	r3, [r7, #0]
		InputCapture* in = InputCapture::pin_to_input_capture[pin];
 800e37c:	463b      	mov	r3, r7
 800e37e:	4619      	mov	r1, r3
 800e380:	480b      	ldr	r0, [pc, #44]	; (800e3b0 <_Z27read_input_capture_callbackv+0x70>)
 800e382:	f7fb fa73 	bl	800986c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e386:	4603      	mov	r3, r0
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	60fb      	str	r3, [r7, #12]
		in->get_duty();
 800e38c:	68f8      	ldr	r0, [r7, #12]
 800e38e:	f7fb f9bd 	bl	800970c <_ZN12InputCapture8get_dutyEv>
		main_can.send_message(ID_READ_INPUT_CAPTURE_REPLY, (uint8_t*) &in->duty, sizeof(float));
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800e398:	2304      	movs	r3, #4
 800e39a:	215c      	movs	r1, #92	; 0x5c
 800e39c:	4805      	ldr	r0, [pc, #20]	; (800e3b4 <_Z27read_input_capture_callbackv+0x74>)
 800e39e:	f7f6 fc8f 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e3a2:	3710      	adds	r7, #16
 800e3a4:	46bd      	mov	sp, r7
 800e3a6:	bd80      	pop	{r7, pc}
 800e3a8:	24000af0 	.word	0x24000af0
 800e3ac:	24000960 	.word	0x24000960
 800e3b0:	24000164 	.word	0x24000164
 800e3b4:	24000890 	.word	0x24000890

0800e3b8 <_Z29stream_input_capture_callbackv>:
		if(pin->mode == INPUT_CAPTURE)
			id = ID_STREAM_INPUT_CAPTURE_REPLY;
	}
}

void stream_input_capture_callback(){
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e3be:	4b10      	ldr	r3, [pc, #64]	; (800e400 <_Z29stream_input_capture_callbackv+0x48>)
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	b29a      	uxth	r2, r3
 800e3c4:	1d3b      	adds	r3, r7, #4
 800e3c6:	4611      	mov	r1, r2
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	f7fe f911 	bl	800c5f0 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e3ce:	1d3b      	adds	r3, r7, #4
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	f001 ffd1 	bl	8010378 <_ZNKSt8optionalIP3PinEcvbEv>
 800e3d6:	4603      	mov	r3, r0
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d00d      	beq.n	800e3f8 <_Z29stream_input_capture_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e3dc:	1d3b      	adds	r3, r7, #4
 800e3de:	4618      	mov	r0, r3
 800e3e0:	f7ff ff34 	bl	800e24c <_ZNRSt8optionalIP3PinE5valueEv>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_INPUT_CAPTURE_REPLY);
 800e3ea:	4b06      	ldr	r3, [pc, #24]	; (800e404 <_Z29stream_input_capture_callbackv+0x4c>)
 800e3ec:	881b      	ldrh	r3, [r3, #0]
 800e3ee:	225f      	movs	r2, #95	; 0x5f
 800e3f0:	68f9      	ldr	r1, [r7, #12]
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7ff fe80 	bl	800e0f8 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e3f8:	bf00      	nop
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}
 800e400:	24000968 	.word	0x24000968
 800e404:	2400096a 	.word	0x2400096a

0800e408 <_Z25strean_analog_in_callbackv>:

void strean_analog_in_callback(){
 800e408:	b580      	push	{r7, lr}
 800e40a:	b084      	sub	sp, #16
 800e40c:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e40e:	4b10      	ldr	r3, [pc, #64]	; (800e450 <_Z25strean_analog_in_callbackv+0x48>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	b29a      	uxth	r2, r3
 800e414:	1d3b      	adds	r3, r7, #4
 800e416:	4611      	mov	r1, r2
 800e418:	4618      	mov	r0, r3
 800e41a:	f7fe f8e9 	bl	800c5f0 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e41e:	1d3b      	adds	r3, r7, #4
 800e420:	4618      	mov	r0, r3
 800e422:	f001 ffa9 	bl	8010378 <_ZNKSt8optionalIP3PinEcvbEv>
 800e426:	4603      	mov	r3, r0
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d00d      	beq.n	800e448 <_Z25strean_analog_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e42c:	1d3b      	adds	r3, r7, #4
 800e42e:	4618      	mov	r0, r3
 800e430:	f7ff ff0c 	bl	800e24c <_ZNRSt8optionalIP3PinE5valueEv>
 800e434:	4603      	mov	r3, r0
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_ANALOG_IN_REPLY);
 800e43a:	4b06      	ldr	r3, [pc, #24]	; (800e454 <_Z25strean_analog_in_callbackv+0x4c>)
 800e43c:	881b      	ldrh	r3, [r3, #0]
 800e43e:	2260      	movs	r2, #96	; 0x60
 800e440:	68f9      	ldr	r1, [r7, #12]
 800e442:	4618      	mov	r0, r3
 800e444:	f7ff fe58 	bl	800e0f8 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e448:	bf00      	nop
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	24000968 	.word	0x24000968
 800e454:	2400096a 	.word	0x2400096a

0800e458 <_Z26stream_digital_in_callbackv>:

void stream_digital_in_callback(){
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e45e:	4b10      	ldr	r3, [pc, #64]	; (800e4a0 <_Z26stream_digital_in_callbackv+0x48>)
 800e460:	781b      	ldrb	r3, [r3, #0]
 800e462:	b29a      	uxth	r2, r3
 800e464:	1d3b      	adds	r3, r7, #4
 800e466:	4611      	mov	r1, r2
 800e468:	4618      	mov	r0, r3
 800e46a:	f7fe f8c1 	bl	800c5f0 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e46e:	1d3b      	adds	r3, r7, #4
 800e470:	4618      	mov	r0, r3
 800e472:	f001 ff81 	bl	8010378 <_ZNKSt8optionalIP3PinEcvbEv>
 800e476:	4603      	mov	r3, r0
 800e478:	2b00      	cmp	r3, #0
 800e47a:	d00d      	beq.n	800e498 <_Z26stream_digital_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e47c:	1d3b      	adds	r3, r7, #4
 800e47e:	4618      	mov	r0, r3
 800e480:	f7ff fee4 	bl	800e24c <_ZNRSt8optionalIP3PinE5valueEv>
 800e484:	4603      	mov	r3, r0
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_DIGITAL_IN_REPLY);
 800e48a:	4b06      	ldr	r3, [pc, #24]	; (800e4a4 <_Z26stream_digital_in_callbackv+0x4c>)
 800e48c:	881b      	ldrh	r3, [r3, #0]
 800e48e:	2261      	movs	r2, #97	; 0x61
 800e490:	68f9      	ldr	r1, [r7, #12]
 800e492:	4618      	mov	r0, r3
 800e494:	f7ff fe30 	bl	800e0f8 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e498:	bf00      	nop
 800e49a:	3710      	adds	r7, #16
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	24000968 	.word	0x24000968
 800e4a4:	2400096a 	.word	0x2400096a

0800e4a8 <_Z19write_once_callbackv>:


void write_once_callback(){
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b086      	sub	sp, #24
 800e4ac:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(write_once_pin);
 800e4ae:	4b2f      	ldr	r3, [pc, #188]	; (800e56c <_Z19write_once_callbackv+0xc4>)
 800e4b0:	781b      	ldrb	r3, [r3, #0]
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	f107 0308 	add.w	r3, r7, #8
 800e4b8:	4611      	mov	r1, r2
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7fe f898 	bl	800c5f0 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e4c0:	f107 0308 	add.w	r3, r7, #8
 800e4c4:	4618      	mov	r0, r3
 800e4c6:	f001 ff57 	bl	8010378 <_ZNKSt8optionalIP3PinEcvbEv>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d04a      	beq.n	800e566 <_Z19write_once_callbackv+0xbe>
		Pin* pin = pin_optional.value();
 800e4d0:	f107 0308 	add.w	r3, r7, #8
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7ff feb9 	bl	800e24c <_ZNRSt8optionalIP3PinE5valueEv>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	607b      	str	r3, [r7, #4]

		if(pin->mode == DIGITAL_OUTPUT && DigitalOut::pin_to_digital_out.contains(pin)) {
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	799b      	ldrb	r3, [r3, #6]
 800e4e4:	2b04      	cmp	r3, #4
 800e4e6:	d109      	bne.n	800e4fc <_Z19write_once_callbackv+0x54>
 800e4e8:	1d3b      	adds	r3, r7, #4
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4820      	ldr	r0, [pc, #128]	; (800e570 <_Z19write_once_callbackv+0xc8>)
 800e4ee:	f001 ff5c 	bl	80103aa <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d001      	beq.n	800e4fc <_Z19write_once_callbackv+0x54>
 800e4f8:	2301      	movs	r3, #1
 800e4fa:	e000      	b.n	800e4fe <_Z19write_once_callbackv+0x56>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00f      	beq.n	800e522 <_Z19write_once_callbackv+0x7a>
			DigitalOut* out = DigitalOut::pin_to_digital_out[pin];
 800e502:	1d3b      	adds	r3, r7, #4
 800e504:	4619      	mov	r1, r3
 800e506:	481a      	ldr	r0, [pc, #104]	; (800e570 <_Z19write_once_callbackv+0xc8>)
 800e508:	f7f9 fcae 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e50c:	4603      	mov	r3, r0
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	613b      	str	r3, [r7, #16]
			out->set_to((DigitalOut::DigitalOutState) write_once_value);
 800e512:	4b18      	ldr	r3, [pc, #96]	; (800e574 <_Z19write_once_callbackv+0xcc>)
 800e514:	681b      	ldr	r3, [r3, #0]
 800e516:	b2db      	uxtb	r3, r3
 800e518:	4619      	mov	r1, r3
 800e51a:	6938      	ldr	r0, [r7, #16]
 800e51c:	f7f9 fbf2 	bl	8007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>
			return;
 800e520:	e021      	b.n	800e566 <_Z19write_once_callbackv+0xbe>
		}

		if(pin->mode == ANALOG_OUTPUT && AnalogOut::pin_to_analog_out.contains(pin)) {
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	799b      	ldrb	r3, [r3, #6]
 800e526:	2b05      	cmp	r3, #5
 800e528:	d109      	bne.n	800e53e <_Z19write_once_callbackv+0x96>
 800e52a:	1d3b      	adds	r3, r7, #4
 800e52c:	4619      	mov	r1, r3
 800e52e:	4812      	ldr	r0, [pc, #72]	; (800e578 <_Z19write_once_callbackv+0xd0>)
 800e530:	f001 ff5d 	bl	80103ee <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e534:	4603      	mov	r3, r0
 800e536:	2b00      	cmp	r3, #0
 800e538:	d001      	beq.n	800e53e <_Z19write_once_callbackv+0x96>
 800e53a:	2301      	movs	r3, #1
 800e53c:	e000      	b.n	800e540 <_Z19write_once_callbackv+0x98>
 800e53e:	2300      	movs	r3, #0
 800e540:	2b00      	cmp	r3, #0
 800e542:	d010      	beq.n	800e566 <_Z19write_once_callbackv+0xbe>
			AnalogOut* out = AnalogOut::pin_to_analog_out[pin];
 800e544:	1d3b      	adds	r3, r7, #4
 800e546:	4619      	mov	r1, r3
 800e548:	480b      	ldr	r0, [pc, #44]	; (800e578 <_Z19write_once_callbackv+0xd0>)
 800e54a:	f7f4 ffc5 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e54e:	4603      	mov	r3, r0
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	617b      	str	r3, [r7, #20]
			out->set_voltage(*((float*) &write_once_value));
 800e554:	4b07      	ldr	r3, [pc, #28]	; (800e574 <_Z19write_once_callbackv+0xcc>)
 800e556:	edd3 7a00 	vldr	s15, [r3]
 800e55a:	eeb0 0a67 	vmov.f32	s0, s15
 800e55e:	6978      	ldr	r0, [r7, #20]
 800e560:	f7f4 fe48 	bl	80031f4 <_ZN9AnalogOut11set_voltageEf>
			return;
 800e564:	bf00      	nop
		}
	}
}
 800e566:	3718      	adds	r7, #24
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	24000961 	.word	0x24000961
 800e570:	24000140 	.word	0x24000140
 800e574:	24000964 	.word	0x24000964
 800e578:	240000e0 	.word	0x240000e0

0800e57c <_Z22set_precision_callbackv>:

void set_precision_callback() {
 800e57c:	b580      	push	{r7, lr}
 800e57e:	af00      	add	r7, sp, #0
	if(StreamMessage::set_precision_mode(set_precision_value)){
 800e580:	4b0b      	ldr	r3, [pc, #44]	; (800e5b0 <_Z22set_precision_callbackv+0x34>)
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	4618      	mov	r0, r3
 800e586:	f7ff fbaf 	bl	800dce8 <_ZN13StreamMessage18set_precision_modeEh>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d009      	beq.n	800e5a4 <_Z22set_precision_callbackv+0x28>
		main_can.TxData[0] = 0;
 800e590:	4b08      	ldr	r3, [pc, #32]	; (800e5b4 <_Z22set_precision_callbackv+0x38>)
 800e592:	2200      	movs	r2, #0
 800e594:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		main_can.send_message(ID_SET_PRECISION,1);
 800e598:	2201      	movs	r2, #1
 800e59a:	2159      	movs	r1, #89	; 0x59
 800e59c:	4805      	ldr	r0, [pc, #20]	; (800e5b4 <_Z22set_precision_callbackv+0x38>)
 800e59e:	f7f6 fbe7 	bl	8004d70 <_ZN3Can12send_messageEtm>
		return;
 800e5a2:	e004      	b.n	800e5ae <_Z22set_precision_callbackv+0x32>
	}
	main_can.send_error_message(ID_INFO_MESSAGE, "Error: cannot change precision");
 800e5a4:	4a04      	ldr	r2, [pc, #16]	; (800e5b8 <_Z22set_precision_callbackv+0x3c>)
 800e5a6:	215b      	movs	r1, #91	; 0x5b
 800e5a8:	4802      	ldr	r0, [pc, #8]	; (800e5b4 <_Z22set_precision_callbackv+0x38>)
 800e5aa:	f7f6 fc24 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e5ae:	bd80      	pop	{r7, pc}
 800e5b0:	2400096c 	.word	0x2400096c
 800e5b4:	24000890 	.word	0x24000890
 800e5b8:	08020ce8 	.word	0x08020ce8

0800e5bc <_Z22cancel_stream_callbackv>:

void cancel_stream_callback(){
 800e5bc:	b580      	push	{r7, lr}
 800e5be:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800e5c0:	f008 ffaf 	bl	8017522 <HAL_NVIC_SystemReset>
}
 800e5c4:	bf00      	nop
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <_ZZN8TUDTests5setupEvENKUlvE_clEv>:

	static void setup(){
		start();

		// ANALOG OUT
		timer_7.execute_every([](){
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
//			for(auto analog_out : AnalogOut::all_analog_outs)
//				analog_out->set_voltage(sin(sin_index / 1000.0 * 3.1415) * 1.65 + 1.65);
//			sin_index ++;
			//main_can.send_ok_message();
		}, 1000, Timer::MICROSEONDS);
 800e5d0:	bf00      	nop
 800e5d2:	370c      	adds	r7, #12
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5da:	4770      	bx	lr

0800e5dc <_ZZN8TUDTests5setupEvENKUlvE0_clEv>:

		// GPIO IN
		timer_13.execute_every([](){
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
			for(auto in : DigitalIn::all_digital_ins)
 800e5e4:	4b17      	ldr	r3, [pc, #92]	; (800e644 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x68>)
 800e5e6:	617b      	str	r3, [r7, #20]
 800e5e8:	6978      	ldr	r0, [r7, #20]
 800e5ea:	f7f8 fdc0 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	60fb      	str	r3, [r7, #12]
 800e5f2:	6978      	ldr	r0, [r7, #20]
 800e5f4:	f7f8 faa0 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 800e5f8:	4603      	mov	r3, r0
 800e5fa:	60bb      	str	r3, [r7, #8]
 800e5fc:	f107 0208 	add.w	r2, r7, #8
 800e600:	f107 030c 	add.w	r3, r7, #12
 800e604:	4611      	mov	r1, r2
 800e606:	4618      	mov	r0, r3
 800e608:	f000 f81e 	bl	800e648 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e60c:	4603      	mov	r3, r0
 800e60e:	f083 0301 	eor.w	r3, r3, #1
 800e612:	b2db      	uxtb	r3, r3
 800e614:	2b00      	cmp	r3, #0
 800e616:	d010      	beq.n	800e63a <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x5e>
 800e618:	f107 030c 	add.w	r3, r7, #12
 800e61c:	4618      	mov	r0, r3
 800e61e:	f7f8 fe30 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 800e622:	4603      	mov	r3, r0
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	613b      	str	r3, [r7, #16]
				in->get_value();
 800e628:	6938      	ldr	r0, [r7, #16]
 800e62a:	f7f7 ffbd 	bl	80065a8 <_ZN9DigitalIn9get_valueEv>
			for(auto in : DigitalIn::all_digital_ins)
 800e62e:	f107 030c 	add.w	r3, r7, #12
 800e632:	4618      	mov	r0, r3
 800e634:	f000 f820 	bl	800e678 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>
 800e638:	e7e0      	b.n	800e5fc <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x20>
		}, 1000, Timer::MICROSEONDS);
 800e63a:	bf00      	nop
 800e63c:	3718      	adds	r7, #24
 800e63e:	46bd      	mov	sp, r7
 800e640:	bd80      	pop	{r7, pc}
 800e642:	bf00      	nop
 800e644:	24000110 	.word	0x24000110

0800e648 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e648:	b590      	push	{r4, r7, lr}
 800e64a:	b083      	sub	sp, #12
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e652:	6878      	ldr	r0, [r7, #4]
 800e654:	f7f8 fdd8 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e658:	4603      	mov	r3, r0
 800e65a:	681c      	ldr	r4, [r3, #0]
 800e65c:	6838      	ldr	r0, [r7, #0]
 800e65e:	f7f8 fdd3 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e662:	4603      	mov	r3, r0
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	429c      	cmp	r4, r3
 800e668:	bf0c      	ite	eq
 800e66a:	2301      	moveq	r3, #1
 800e66c:	2300      	movne	r3, #0
 800e66e:	b2db      	uxtb	r3, r3
 800e670:	4618      	mov	r0, r3
 800e672:	370c      	adds	r7, #12
 800e674:	46bd      	mov	sp, r7
 800e676:	bd90      	pop	{r4, r7, pc}

0800e678 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e678:	b480      	push	{r7}
 800e67a:	b083      	sub	sp, #12
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	1d1a      	adds	r2, r3, #4
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	601a      	str	r2, [r3, #0]
	return *this;
 800e68a:	687b      	ldr	r3, [r7, #4]
      }
 800e68c:	4618      	mov	r0, r3
 800e68e:	370c      	adds	r7, #12
 800e690:	46bd      	mov	sp, r7
 800e692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e696:	4770      	bx	lr

0800e698 <_ZN8TUDTests5setupEv>:
	static void setup(){
 800e698:	b5b0      	push	{r4, r5, r7, lr}
 800e69a:	b088      	sub	sp, #32
 800e69c:	af00      	add	r7, sp, #0
		start();
 800e69e:	f7ff fd89 	bl	800e1b4 <_Z5startv>
		timer_7.execute_every([](){
 800e6a2:	463b      	mov	r3, r7
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f001 fec4 	bl	8010434 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>
 800e6ac:	4639      	mov	r1, r7
 800e6ae:	2302      	movs	r3, #2
 800e6b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6b4:	480e      	ldr	r0, [pc, #56]	; (800e6f0 <_ZN8TUDTests5setupEv+0x58>)
 800e6b6:	f7ff f913 	bl	800d8e0 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e6ba:	463b      	mov	r3, r7
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7ff f813 	bl	800d6e8 <_ZNSt8functionIFvvEED1Ev>
		timer_13.execute_every([](){
 800e6c2:	f107 0310 	add.w	r3, r7, #16
 800e6c6:	4621      	mov	r1, r4
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f001 fedd 	bl	8010488 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>
 800e6ce:	f107 0110 	add.w	r1, r7, #16
 800e6d2:	2302      	movs	r3, #2
 800e6d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6d8:	4806      	ldr	r0, [pc, #24]	; (800e6f4 <_ZN8TUDTests5setupEv+0x5c>)
 800e6da:	f7ff f901 	bl	800d8e0 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e6de:	f107 0310 	add.w	r3, r7, #16
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f7ff f800 	bl	800d6e8 <_ZNSt8functionIFvvEED1Ev>
	}
 800e6e8:	bf00      	nop
 800e6ea:	3720      	adds	r7, #32
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bdb0      	pop	{r4, r5, r7, pc}
 800e6f0:	240007d0 	.word	0x240007d0
 800e6f4:	240007f0 	.word	0x240007f0

0800e6f8 <_ZN8TUDTests4loopEv>:

	static void loop() {
 800e6f8:	b480      	push	{r7}
 800e6fa:	af00      	add	r7, sp, #0
//		HAL_Delay(2000);
//
//		for(auto base : DigitalOut::all_digital_outs)
//			base->turn_low();
//		HAL_Delay(2000);
	}
 800e6fc:	bf00      	nop
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr

0800e706 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e706:	b580      	push	{r7, lr}
 800e708:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800e70a:	f006 fcc5 	bl	8015098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e70e:	f000 f82f 	bl	800e770 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800e712:	f000 f8b5 	bl	800e880 <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e716:	f001 fa1b 	bl	800fb50 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800e71a:	f001 f9f9 	bl	800fb10 <_ZL11MX_DMA_Initv>
  MX_TIM12_Init();
 800e71e:	f000 fef9 	bl	800f514 <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 800e722:	f001 f875 	bl	800f810 <_ZL13MX_TIM23_Initv>
  MX_TIM1_Init();
 800e726:	f000 f9d5 	bl	800ead4 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800e72a:	f000 fa93 	bl	800ec54 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800e72e:	f000 fb4f 	bl	800edd0 <_ZL12MX_TIM3_Initv>
  MX_TIM24_Init();
 800e732:	f001 f92d 	bl	800f990 <_ZL13MX_TIM24_Initv>
  MX_FDCAN1_Init();
 800e736:	f000 f963 	bl	800ea00 <_ZL14MX_FDCAN1_Initv>
  MX_TIM4_Init();
 800e73a:	f000 fc03 	bl	800ef44 <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 800e73e:	f000 f8d7 	bl	800e8f0 <_ZL12MX_ADC1_Initv>
  MX_TIM8_Init();
 800e742:	f000 fde9 	bl	800f318 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 800e746:	f000 fd67 	bl	800f218 <_ZL12MX_TIM6_Initv>
  MX_TIM5_Init();
 800e74a:	f000 fcb5 	bl	800f0b8 <_ZL12MX_TIM5_Initv>
  MX_TIM7_Init();
 800e74e:	f000 fda3 	bl	800f298 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 800e752:	f000 ff55 	bl	800f600 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 800e756:	f000 ff7b 	bl	800f650 <_ZL13MX_TIM14_Initv>
  MX_TIM15_Init();
 800e75a:	f000 ffa1 	bl	800f6a0 <_ZL13MX_TIM15_Initv>
  MX_TIM16_Init();
 800e75e:	f000 ffff 	bl	800f760 <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 800e762:	f001 f829 	bl	800f7b8 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  TUDTests::setup();
 800e766:	f7ff ff97 	bl	800e698 <_ZN8TUDTests5setupEv>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		TUDTests::loop();
 800e76a:	f7ff ffc5 	bl	800e6f8 <_ZN8TUDTests4loopEv>
 800e76e:	e7fc      	b.n	800e76a <main+0x64>

0800e770 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b09c      	sub	sp, #112	; 0x70
 800e774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e77a:	224c      	movs	r2, #76	; 0x4c
 800e77c:	2100      	movs	r1, #0
 800e77e:	4618      	mov	r0, r3
 800e780:	f012 f8a0 	bl	80208c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e784:	1d3b      	adds	r3, r7, #4
 800e786:	2220      	movs	r2, #32
 800e788:	2100      	movs	r1, #0
 800e78a:	4618      	mov	r0, r3
 800e78c:	f012 f89a 	bl	80208c4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800e790:	2002      	movs	r0, #2
 800e792:	f00c fafb 	bl	801ad8c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800e796:	2300      	movs	r3, #0
 800e798:	603b      	str	r3, [r7, #0]
 800e79a:	4b37      	ldr	r3, [pc, #220]	; (800e878 <_Z18SystemClock_Configv+0x108>)
 800e79c:	699b      	ldr	r3, [r3, #24]
 800e79e:	4a36      	ldr	r2, [pc, #216]	; (800e878 <_Z18SystemClock_Configv+0x108>)
 800e7a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800e7a4:	6193      	str	r3, [r2, #24]
 800e7a6:	4b34      	ldr	r3, [pc, #208]	; (800e878 <_Z18SystemClock_Configv+0x108>)
 800e7a8:	699b      	ldr	r3, [r3, #24]
 800e7aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e7ae:	603b      	str	r3, [r7, #0]
 800e7b0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800e7b2:	4b31      	ldr	r3, [pc, #196]	; (800e878 <_Z18SystemClock_Configv+0x108>)
 800e7b4:	699b      	ldr	r3, [r3, #24]
 800e7b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7be:	bf14      	ite	ne
 800e7c0:	2301      	movne	r3, #1
 800e7c2:	2300      	moveq	r3, #0
 800e7c4:	b2db      	uxtb	r3, r3
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d000      	beq.n	800e7cc <_Z18SystemClock_Configv+0x5c>
 800e7ca:	e7f2      	b.n	800e7b2 <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800e7cc:	4b2b      	ldr	r3, [pc, #172]	; (800e87c <_Z18SystemClock_Configv+0x10c>)
 800e7ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7d0:	f023 0303 	bic.w	r3, r3, #3
 800e7d4:	4a29      	ldr	r2, [pc, #164]	; (800e87c <_Z18SystemClock_Configv+0x10c>)
 800e7d6:	f043 0302 	orr.w	r3, r3, #2
 800e7da:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e7dc:	2301      	movs	r3, #1
 800e7de:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e7e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800e7e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e7ea:	2302      	movs	r3, #2
 800e7ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e7ee:	2304      	movs	r3, #4
 800e7f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800e7f2:	f240 1313 	movw	r3, #275	; 0x113
 800e7f6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e7fc:	2304      	movs	r3, #4
 800e7fe:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e800:	2302      	movs	r3, #2
 800e802:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800e804:	2304      	movs	r3, #4
 800e806:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800e808:	2300      	movs	r3, #0
 800e80a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800e80c:	2300      	movs	r3, #0
 800e80e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e814:	4618      	mov	r0, r3
 800e816:	f00c faf3 	bl	801ae00 <HAL_RCC_OscConfig>
 800e81a:	4603      	mov	r3, r0
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	bf14      	ite	ne
 800e820:	2301      	movne	r3, #1
 800e822:	2300      	moveq	r3, #0
 800e824:	b2db      	uxtb	r3, r3
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 800e82a:	f001 facd 	bl	800fdc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e82e:	233f      	movs	r3, #63	; 0x3f
 800e830:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e832:	2303      	movs	r3, #3
 800e834:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800e836:	2300      	movs	r3, #0
 800e838:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800e83a:	2308      	movs	r3, #8
 800e83c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800e83e:	2340      	movs	r3, #64	; 0x40
 800e840:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800e842:	2340      	movs	r3, #64	; 0x40
 800e844:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800e846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e84a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800e84c:	2340      	movs	r3, #64	; 0x40
 800e84e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e850:	1d3b      	adds	r3, r7, #4
 800e852:	2103      	movs	r1, #3
 800e854:	4618      	mov	r0, r3
 800e856:	f00c fead 	bl	801b5b4 <HAL_RCC_ClockConfig>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	bf14      	ite	ne
 800e860:	2301      	movne	r3, #1
 800e862:	2300      	moveq	r3, #0
 800e864:	b2db      	uxtb	r3, r3
 800e866:	2b00      	cmp	r3, #0
 800e868:	d001      	beq.n	800e86e <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800e86a:	f001 faad 	bl	800fdc8 <Error_Handler>
  }
}
 800e86e:	bf00      	nop
 800e870:	3770      	adds	r7, #112	; 0x70
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}
 800e876:	bf00      	nop
 800e878:	58024800 	.word	0x58024800
 800e87c:	58024400 	.word	0x58024400

0800e880 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b0ae      	sub	sp, #184	; 0xb8
 800e884:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e886:	463b      	mov	r3, r7
 800e888:	22b8      	movs	r2, #184	; 0xb8
 800e88a:	2100      	movs	r1, #0
 800e88c:	4618      	mov	r0, r3
 800e88e:	f012 f819 	bl	80208c4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 800e892:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 800e896:	f04f 0300 	mov.w	r3, #0
 800e89a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 30;
 800e8a2:	231e      	movs	r3, #30
 800e8a4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800e8a6:	2304      	movs	r3, #4
 800e8a8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800e8aa:	2304      	movs	r3, #4
 800e8ac:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800e8b2:	23c0      	movs	r3, #192	; 0xc0
 800e8b4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800e8b6:	2300      	movs	r3, #0
 800e8b8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800e8be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e8c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e8ca:	463b      	mov	r3, r7
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f00d f9e7 	bl	801bca0 <HAL_RCCEx_PeriphCLKConfig>
 800e8d2:	4603      	mov	r3, r0
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	bf14      	ite	ne
 800e8d8:	2301      	movne	r3, #1
 800e8da:	2300      	moveq	r3, #0
 800e8dc:	b2db      	uxtb	r3, r3
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d001      	beq.n	800e8e6 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800e8e2:	f001 fa71 	bl	800fdc8 <Error_Handler>
  }
}
 800e8e6:	bf00      	nop
 800e8e8:	37b8      	adds	r7, #184	; 0xb8
 800e8ea:	46bd      	mov	sp, r7
 800e8ec:	bd80      	pop	{r7, pc}
	...

0800e8f0 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e8f0:	b580      	push	{r7, lr}
 800e8f2:	b08c      	sub	sp, #48	; 0x30
 800e8f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800e8f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	601a      	str	r2, [r3, #0]
 800e8fe:	605a      	str	r2, [r3, #4]
 800e900:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e902:	463b      	mov	r3, r7
 800e904:	2224      	movs	r2, #36	; 0x24
 800e906:	2100      	movs	r1, #0
 800e908:	4618      	mov	r0, r3
 800e90a:	f011 ffdb 	bl	80208c4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800e90e:	4b39      	ldr	r3, [pc, #228]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e910:	4a39      	ldr	r2, [pc, #228]	; (800e9f8 <_ZL12MX_ADC1_Initv+0x108>)
 800e912:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800e914:	4b37      	ldr	r3, [pc, #220]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e916:	2200      	movs	r2, #0
 800e918:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800e91a:	4b36      	ldr	r3, [pc, #216]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e91c:	2200      	movs	r2, #0
 800e91e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e920:	4b34      	ldr	r3, [pc, #208]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e922:	2200      	movs	r2, #0
 800e924:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800e926:	4b33      	ldr	r3, [pc, #204]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e928:	2208      	movs	r2, #8
 800e92a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e92c:	4b31      	ldr	r3, [pc, #196]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e92e:	2200      	movs	r2, #0
 800e930:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e932:	4b30      	ldr	r3, [pc, #192]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e934:	2200      	movs	r2, #0
 800e936:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800e938:	4b2e      	ldr	r3, [pc, #184]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e93a:	2201      	movs	r2, #1
 800e93c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e93e:	4b2d      	ldr	r3, [pc, #180]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e940:	2200      	movs	r2, #0
 800e942:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800e946:	4b2b      	ldr	r3, [pc, #172]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e948:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800e94c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e94e:	4b29      	ldr	r3, [pc, #164]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e950:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e954:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800e956:	4b27      	ldr	r3, [pc, #156]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e958:	2203      	movs	r2, #3
 800e95a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800e95c:	4b25      	ldr	r3, [pc, #148]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e95e:	2200      	movs	r2, #0
 800e960:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800e962:	4b24      	ldr	r3, [pc, #144]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e964:	2200      	movs	r2, #0
 800e966:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800e968:	4b22      	ldr	r3, [pc, #136]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e96a:	2200      	movs	r2, #0
 800e96c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e970:	4820      	ldr	r0, [pc, #128]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e972:	f006 ff0f 	bl	8015794 <HAL_ADC_Init>
 800e976:	4603      	mov	r3, r0
 800e978:	2b00      	cmp	r3, #0
 800e97a:	bf14      	ite	ne
 800e97c:	2301      	movne	r3, #1
 800e97e:	2300      	moveq	r3, #0
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b00      	cmp	r3, #0
 800e984:	d001      	beq.n	800e98a <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 800e986:	f001 fa1f 	bl	800fdc8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800e98a:	2300      	movs	r3, #0
 800e98c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800e98e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e992:	4619      	mov	r1, r3
 800e994:	4817      	ldr	r0, [pc, #92]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e996:	f008 fbc9 	bl	801712c <HAL_ADCEx_MultiModeConfigChannel>
 800e99a:	4603      	mov	r3, r0
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	bf14      	ite	ne
 800e9a0:	2301      	movne	r3, #1
 800e9a2:	2300      	moveq	r3, #0
 800e9a4:	b2db      	uxtb	r3, r3
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d001      	beq.n	800e9ae <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 800e9aa:	f001 fa0d 	bl	800fdc8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800e9ae:	4b13      	ldr	r3, [pc, #76]	; (800e9fc <_ZL12MX_ADC1_Initv+0x10c>)
 800e9b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e9b2:	2306      	movs	r3, #6
 800e9b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800e9b6:	2300      	movs	r3, #0
 800e9b8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e9ba:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e9be:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e9c0:	2304      	movs	r3, #4
 800e9c2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e9ce:	463b      	mov	r3, r7
 800e9d0:	4619      	mov	r1, r3
 800e9d2:	4808      	ldr	r0, [pc, #32]	; (800e9f4 <_ZL12MX_ADC1_Initv+0x104>)
 800e9d4:	f007 fc1a 	bl	801620c <HAL_ADC_ConfigChannel>
 800e9d8:	4603      	mov	r3, r0
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	bf14      	ite	ne
 800e9de:	2301      	movne	r3, #1
 800e9e0:	2300      	moveq	r3, #0
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800e9e8:	f001 f9ee 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800e9ec:	bf00      	nop
 800e9ee:	3730      	adds	r7, #48	; 0x30
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	24000af4 	.word	0x24000af4
 800e9f8:	40022000 	.word	0x40022000
 800e9fc:	0c900008 	.word	0x0c900008

0800ea00 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800ea04:	4b31      	ldr	r3, [pc, #196]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea06:	4a32      	ldr	r2, [pc, #200]	; (800ead0 <_ZL14MX_FDCAN1_Initv+0xd0>)
 800ea08:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800ea0a:	4b30      	ldr	r3, [pc, #192]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea0c:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ea10:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800ea12:	4b2e      	ldr	r3, [pc, #184]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea14:	2200      	movs	r2, #0
 800ea16:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800ea18:	4b2c      	ldr	r3, [pc, #176]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea1a:	2200      	movs	r2, #0
 800ea1c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800ea1e:	4b2b      	ldr	r3, [pc, #172]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea20:	2200      	movs	r2, #0
 800ea22:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800ea24:	4b29      	ldr	r3, [pc, #164]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea26:	2200      	movs	r2, #0
 800ea28:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 800ea2a:	4b28      	ldr	r3, [pc, #160]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea2c:	2203      	movs	r2, #3
 800ea2e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800ea30:	4b26      	ldr	r3, [pc, #152]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea32:	2202      	movs	r2, #2
 800ea34:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 800ea36:	4b25      	ldr	r3, [pc, #148]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea38:	220f      	movs	r2, #15
 800ea3a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 800ea3c:	4b23      	ldr	r3, [pc, #140]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea3e:	2204      	movs	r2, #4
 800ea40:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 3;
 800ea42:	4b22      	ldr	r3, [pc, #136]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea44:	2203      	movs	r2, #3
 800ea46:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800ea48:	4b20      	ldr	r3, [pc, #128]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 800ea4e:	4b1f      	ldr	r3, [pc, #124]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea50:	2203      	movs	r2, #3
 800ea52:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800ea54:	4b1d      	ldr	r3, [pc, #116]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea56:	2201      	movs	r2, #1
 800ea58:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800ea5a:	4b1c      	ldr	r3, [pc, #112]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800ea60:	4b1a      	ldr	r3, [pc, #104]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea62:	2200      	movs	r2, #0
 800ea64:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800ea66:	4b19      	ldr	r3, [pc, #100]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea68:	2200      	movs	r2, #0
 800ea6a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800ea6c:	4b17      	ldr	r3, [pc, #92]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea6e:	2220      	movs	r2, #32
 800ea70:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800ea72:	4b16      	ldr	r3, [pc, #88]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea74:	2212      	movs	r2, #18
 800ea76:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800ea78:	4b14      	ldr	r3, [pc, #80]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea7a:	2200      	movs	r2, #0
 800ea7c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800ea7e:	4b13      	ldr	r3, [pc, #76]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea80:	2204      	movs	r2, #4
 800ea82:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800ea84:	4b11      	ldr	r3, [pc, #68]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea86:	2200      	movs	r2, #0
 800ea88:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800ea8a:	4b10      	ldr	r3, [pc, #64]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea8c:	2204      	movs	r2, #4
 800ea8e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800ea90:	4b0e      	ldr	r3, [pc, #56]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800ea96:	4b0d      	ldr	r3, [pc, #52]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800ea9c:	4b0b      	ldr	r3, [pc, #44]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea9e:	2220      	movs	r2, #32
 800eaa0:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800eaa2:	4b0a      	ldr	r3, [pc, #40]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaa4:	2200      	movs	r2, #0
 800eaa6:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800eaa8:	4b08      	ldr	r3, [pc, #32]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaaa:	2212      	movs	r2, #18
 800eaac:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800eaae:	4807      	ldr	r0, [pc, #28]	; (800eacc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eab0:	f00a fe1e 	bl	80196f0 <HAL_FDCAN_Init>
 800eab4:	4603      	mov	r3, r0
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	bf14      	ite	ne
 800eaba:	2301      	movne	r3, #1
 800eabc:	2300      	moveq	r3, #0
 800eabe:	b2db      	uxtb	r3, r3
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d001      	beq.n	800eac8 <_ZL14MX_FDCAN1_Initv+0xc8>
  {
    Error_Handler();
 800eac4:	f001 f980 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800eac8:	bf00      	nop
 800eaca:	bd80      	pop	{r7, pc}
 800eacc:	24000bdc 	.word	0x24000bdc
 800ead0:	4000a000 	.word	0x4000a000

0800ead4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800ead4:	b580      	push	{r7, lr}
 800ead6:	b08c      	sub	sp, #48	; 0x30
 800ead8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eada:	f107 0320 	add.w	r3, r7, #32
 800eade:	2200      	movs	r2, #0
 800eae0:	601a      	str	r2, [r3, #0]
 800eae2:	605a      	str	r2, [r3, #4]
 800eae4:	609a      	str	r2, [r3, #8]
 800eae6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eae8:	f107 0314 	add.w	r3, r7, #20
 800eaec:	2200      	movs	r2, #0
 800eaee:	601a      	str	r2, [r3, #0]
 800eaf0:	605a      	str	r2, [r3, #4]
 800eaf2:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800eaf4:	1d3b      	adds	r3, r7, #4
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	601a      	str	r2, [r3, #0]
 800eafa:	605a      	str	r2, [r3, #4]
 800eafc:	609a      	str	r2, [r3, #8]
 800eafe:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800eb00:	4b52      	ldr	r3, [pc, #328]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb02:	4a53      	ldr	r2, [pc, #332]	; (800ec50 <_ZL12MX_TIM1_Initv+0x17c>)
 800eb04:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800eb06:	4b51      	ldr	r3, [pc, #324]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb0c:	4b4f      	ldr	r3, [pc, #316]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb0e:	2200      	movs	r2, #0
 800eb10:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 27500 - 1;
 800eb12:	4b4e      	ldr	r3, [pc, #312]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb14:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800eb18:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eb1a:	4b4c      	ldr	r3, [pc, #304]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800eb20:	4b4a      	ldr	r3, [pc, #296]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eb26:	4b49      	ldr	r3, [pc, #292]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb28:	2200      	movs	r2, #0
 800eb2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800eb2c:	4847      	ldr	r0, [pc, #284]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb2e:	f00f fc9d 	bl	801e46c <HAL_TIM_Base_Init>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	bf14      	ite	ne
 800eb38:	2301      	movne	r3, #1
 800eb3a:	2300      	moveq	r3, #0
 800eb3c:	b2db      	uxtb	r3, r3
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d001      	beq.n	800eb46 <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 800eb42:	f001 f941 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800eb46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb4a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800eb4c:	f107 0320 	add.w	r3, r7, #32
 800eb50:	4619      	mov	r1, r3
 800eb52:	483e      	ldr	r0, [pc, #248]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb54:	f010 fd34 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	bf14      	ite	ne
 800eb5e:	2301      	movne	r3, #1
 800eb60:	2300      	moveq	r3, #0
 800eb62:	b2db      	uxtb	r3, r3
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d001      	beq.n	800eb6c <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 800eb68:	f001 f92e 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800eb6c:	4837      	ldr	r0, [pc, #220]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb6e:	f00f ff85 	bl	801ea7c <HAL_TIM_IC_Init>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	bf14      	ite	ne
 800eb78:	2301      	movne	r3, #1
 800eb7a:	2300      	moveq	r3, #0
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800eb82:	f001 f921 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eb86:	2300      	movs	r3, #0
 800eb88:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eb8e:	2300      	movs	r3, #0
 800eb90:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800eb92:	f107 0314 	add.w	r3, r7, #20
 800eb96:	4619      	mov	r1, r3
 800eb98:	482c      	ldr	r0, [pc, #176]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800eb9a:	f011 fbe1 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800eb9e:	4603      	mov	r3, r0
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	bf14      	ite	ne
 800eba4:	2301      	movne	r3, #1
 800eba6:	2300      	moveq	r3, #0
 800eba8:	b2db      	uxtb	r3, r3
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d001      	beq.n	800ebb2 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800ebae:	f001 f90b 	bl	800fdc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ebb2:	230a      	movs	r3, #10
 800ebb4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ebb6:	2301      	movs	r3, #1
 800ebb8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ebba:	2300      	movs	r3, #0
 800ebbc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ebc2:	1d3b      	adds	r3, r7, #4
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4820      	ldr	r0, [pc, #128]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800ebca:	f010 fb48 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ebce:	4603      	mov	r3, r0
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	bf14      	ite	ne
 800ebd4:	2301      	movne	r3, #1
 800ebd6:	2300      	moveq	r3, #0
 800ebd8:	b2db      	uxtb	r3, r3
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d001      	beq.n	800ebe2 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800ebde:	f001 f8f3 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ebe2:	1d3b      	adds	r3, r7, #4
 800ebe4:	2204      	movs	r2, #4
 800ebe6:	4619      	mov	r1, r3
 800ebe8:	4818      	ldr	r0, [pc, #96]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800ebea:	f010 fb38 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ebee:	4603      	mov	r3, r0
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	bf14      	ite	ne
 800ebf4:	2301      	movne	r3, #1
 800ebf6:	2300      	moveq	r3, #0
 800ebf8:	b2db      	uxtb	r3, r3
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d001      	beq.n	800ec02 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800ebfe:	f001 f8e3 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ec02:	1d3b      	adds	r3, r7, #4
 800ec04:	2208      	movs	r2, #8
 800ec06:	4619      	mov	r1, r3
 800ec08:	4810      	ldr	r0, [pc, #64]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800ec0a:	f010 fb28 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	bf14      	ite	ne
 800ec14:	2301      	movne	r3, #1
 800ec16:	2300      	moveq	r3, #0
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d001      	beq.n	800ec22 <_ZL12MX_TIM1_Initv+0x14e>
  {
    Error_Handler();
 800ec1e:	f001 f8d3 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800ec22:	1d3b      	adds	r3, r7, #4
 800ec24:	220c      	movs	r2, #12
 800ec26:	4619      	mov	r1, r3
 800ec28:	4808      	ldr	r0, [pc, #32]	; (800ec4c <_ZL12MX_TIM1_Initv+0x178>)
 800ec2a:	f010 fb18 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ec2e:	4603      	mov	r3, r0
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	bf14      	ite	ne
 800ec34:	2301      	movne	r3, #1
 800ec36:	2300      	moveq	r3, #0
 800ec38:	b2db      	uxtb	r3, r3
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d001      	beq.n	800ec42 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800ec3e:	f001 f8c3 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ec42:	bf00      	nop
 800ec44:	3730      	adds	r7, #48	; 0x30
 800ec46:	46bd      	mov	sp, r7
 800ec48:	bd80      	pop	{r7, pc}
 800ec4a:	bf00      	nop
 800ec4c:	24000c7c 	.word	0x24000c7c
 800ec50:	40010000 	.word	0x40010000

0800ec54 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b08c      	sub	sp, #48	; 0x30
 800ec58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ec5a:	f107 0320 	add.w	r3, r7, #32
 800ec5e:	2200      	movs	r2, #0
 800ec60:	601a      	str	r2, [r3, #0]
 800ec62:	605a      	str	r2, [r3, #4]
 800ec64:	609a      	str	r2, [r3, #8]
 800ec66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ec68:	f107 0314 	add.w	r3, r7, #20
 800ec6c:	2200      	movs	r2, #0
 800ec6e:	601a      	str	r2, [r3, #0]
 800ec70:	605a      	str	r2, [r3, #4]
 800ec72:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ec74:	1d3b      	adds	r3, r7, #4
 800ec76:	2200      	movs	r2, #0
 800ec78:	601a      	str	r2, [r3, #0]
 800ec7a:	605a      	str	r2, [r3, #4]
 800ec7c:	609a      	str	r2, [r3, #8]
 800ec7e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ec80:	4b52      	ldr	r3, [pc, #328]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ec82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ec86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ec88:	4b50      	ldr	r3, [pc, #320]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ec8e:	4b4f      	ldr	r3, [pc, #316]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ec90:	2200      	movs	r2, #0
 800ec92:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800ec94:	4b4d      	ldr	r3, [pc, #308]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ec96:	f04f 32ff 	mov.w	r2, #4294967295
 800ec9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ec9c:	4b4b      	ldr	r3, [pc, #300]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eca2:	4b4a      	ldr	r3, [pc, #296]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800eca8:	4848      	ldr	r0, [pc, #288]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ecaa:	f00f fbdf 	bl	801e46c <HAL_TIM_Base_Init>
 800ecae:	4603      	mov	r3, r0
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	bf14      	ite	ne
 800ecb4:	2301      	movne	r3, #1
 800ecb6:	2300      	moveq	r3, #0
 800ecb8:	b2db      	uxtb	r3, r3
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d001      	beq.n	800ecc2 <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 800ecbe:	f001 f883 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ecc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecc6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ecc8:	f107 0320 	add.w	r3, r7, #32
 800eccc:	4619      	mov	r1, r3
 800ecce:	483f      	ldr	r0, [pc, #252]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ecd0:	f010 fc76 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800ecd4:	4603      	mov	r3, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	bf14      	ite	ne
 800ecda:	2301      	movne	r3, #1
 800ecdc:	2300      	moveq	r3, #0
 800ecde:	b2db      	uxtb	r3, r3
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d001      	beq.n	800ece8 <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 800ece4:	f001 f870 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800ece8:	4838      	ldr	r0, [pc, #224]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ecea:	f00f fec7 	bl	801ea7c <HAL_TIM_IC_Init>
 800ecee:	4603      	mov	r3, r0
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	bf14      	ite	ne
 800ecf4:	2301      	movne	r3, #1
 800ecf6:	2300      	moveq	r3, #0
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800ecfe:	f001 f863 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ed02:	2300      	movs	r3, #0
 800ed04:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ed06:	2300      	movs	r3, #0
 800ed08:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ed0a:	f107 0314 	add.w	r3, r7, #20
 800ed0e:	4619      	mov	r1, r3
 800ed10:	482e      	ldr	r0, [pc, #184]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ed12:	f011 fb25 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800ed16:	4603      	mov	r3, r0
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	bf14      	ite	ne
 800ed1c:	2301      	movne	r3, #1
 800ed1e:	2300      	moveq	r3, #0
 800ed20:	b2db      	uxtb	r3, r3
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d001      	beq.n	800ed2a <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800ed26:	f001 f84f 	bl	800fdc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ed2a:	230a      	movs	r3, #10
 800ed2c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ed2e:	2301      	movs	r3, #1
 800ed30:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ed32:	2300      	movs	r3, #0
 800ed34:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ed36:	2300      	movs	r3, #0
 800ed38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ed3a:	1d3b      	adds	r3, r7, #4
 800ed3c:	2200      	movs	r2, #0
 800ed3e:	4619      	mov	r1, r3
 800ed40:	4822      	ldr	r0, [pc, #136]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ed42:	f010 fa8c 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ed46:	4603      	mov	r3, r0
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	bf14      	ite	ne
 800ed4c:	2301      	movne	r3, #1
 800ed4e:	2300      	moveq	r3, #0
 800ed50:	b2db      	uxtb	r3, r3
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d001      	beq.n	800ed5a <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 800ed56:	f001 f837 	bl	800fdc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ed5e:	1d3b      	adds	r3, r7, #4
 800ed60:	2204      	movs	r2, #4
 800ed62:	4619      	mov	r1, r3
 800ed64:	4819      	ldr	r0, [pc, #100]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ed66:	f010 fa7a 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	bf14      	ite	ne
 800ed70:	2301      	movne	r3, #1
 800ed72:	2300      	moveq	r3, #0
 800ed74:	b2db      	uxtb	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d001      	beq.n	800ed7e <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 800ed7a:	f001 f825 	bl	800fdc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ed7e:	230a      	movs	r3, #10
 800ed80:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ed82:	1d3b      	adds	r3, r7, #4
 800ed84:	2208      	movs	r2, #8
 800ed86:	4619      	mov	r1, r3
 800ed88:	4810      	ldr	r0, [pc, #64]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800ed8a:	f010 fa68 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	bf14      	ite	ne
 800ed94:	2301      	movne	r3, #1
 800ed96:	2300      	moveq	r3, #0
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d001      	beq.n	800eda2 <_ZL12MX_TIM2_Initv+0x14e>
  {
    Error_Handler();
 800ed9e:	f001 f813 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800eda2:	1d3b      	adds	r3, r7, #4
 800eda4:	220c      	movs	r2, #12
 800eda6:	4619      	mov	r1, r3
 800eda8:	4808      	ldr	r0, [pc, #32]	; (800edcc <_ZL12MX_TIM2_Initv+0x178>)
 800edaa:	f010 fa58 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800edae:	4603      	mov	r3, r0
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	bf14      	ite	ne
 800edb4:	2301      	movne	r3, #1
 800edb6:	2300      	moveq	r3, #0
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <_ZL12MX_TIM2_Initv+0x16e>
  {
    Error_Handler();
 800edbe:	f001 f803 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800edc2:	bf00      	nop
 800edc4:	3730      	adds	r7, #48	; 0x30
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop
 800edcc:	24000cc8 	.word	0x24000cc8

0800edd0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800edd0:	b580      	push	{r7, lr}
 800edd2:	b08c      	sub	sp, #48	; 0x30
 800edd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800edd6:	f107 0320 	add.w	r3, r7, #32
 800edda:	2200      	movs	r2, #0
 800eddc:	601a      	str	r2, [r3, #0]
 800edde:	605a      	str	r2, [r3, #4]
 800ede0:	609a      	str	r2, [r3, #8]
 800ede2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ede4:	f107 0314 	add.w	r3, r7, #20
 800ede8:	2200      	movs	r2, #0
 800edea:	601a      	str	r2, [r3, #0]
 800edec:	605a      	str	r2, [r3, #4]
 800edee:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800edf0:	1d3b      	adds	r3, r7, #4
 800edf2:	2200      	movs	r2, #0
 800edf4:	601a      	str	r2, [r3, #0]
 800edf6:	605a      	str	r2, [r3, #4]
 800edf8:	609a      	str	r2, [r3, #8]
 800edfa:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800edfc:	4b4f      	ldr	r3, [pc, #316]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800edfe:	4a50      	ldr	r2, [pc, #320]	; (800ef40 <_ZL12MX_TIM3_Initv+0x170>)
 800ee00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ee02:	4b4e      	ldr	r3, [pc, #312]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee04:	2200      	movs	r2, #0
 800ee06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ee08:	4b4c      	ldr	r3, [pc, #304]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 27500 - 1;
 800ee0e:	4b4b      	ldr	r3, [pc, #300]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee10:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800ee14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ee16:	4b49      	ldr	r3, [pc, #292]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ee1c:	4b47      	ldr	r3, [pc, #284]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee1e:	2200      	movs	r2, #0
 800ee20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ee22:	4846      	ldr	r0, [pc, #280]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee24:	f00f fb22 	bl	801e46c <HAL_TIM_Base_Init>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	bf14      	ite	ne
 800ee2e:	2301      	movne	r3, #1
 800ee30:	2300      	moveq	r3, #0
 800ee32:	b2db      	uxtb	r3, r3
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d001      	beq.n	800ee3c <_ZL12MX_TIM3_Initv+0x6c>
  {
    Error_Handler();
 800ee38:	f000 ffc6 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ee3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee40:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ee42:	f107 0320 	add.w	r3, r7, #32
 800ee46:	4619      	mov	r1, r3
 800ee48:	483c      	ldr	r0, [pc, #240]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee4a:	f010 fbb9 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	bf14      	ite	ne
 800ee54:	2301      	movne	r3, #1
 800ee56:	2300      	moveq	r3, #0
 800ee58:	b2db      	uxtb	r3, r3
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d001      	beq.n	800ee62 <_ZL12MX_TIM3_Initv+0x92>
  {
    Error_Handler();
 800ee5e:	f000 ffb3 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800ee62:	4836      	ldr	r0, [pc, #216]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee64:	f00f fe0a 	bl	801ea7c <HAL_TIM_IC_Init>
 800ee68:	4603      	mov	r3, r0
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	bf14      	ite	ne
 800ee6e:	2301      	movne	r3, #1
 800ee70:	2300      	moveq	r3, #0
 800ee72:	b2db      	uxtb	r3, r3
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d001      	beq.n	800ee7c <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800ee78:	f000 ffa6 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ee80:	2300      	movs	r3, #0
 800ee82:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ee84:	f107 0314 	add.w	r3, r7, #20
 800ee88:	4619      	mov	r1, r3
 800ee8a:	482c      	ldr	r0, [pc, #176]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ee8c:	f011 fa68 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800ee90:	4603      	mov	r3, r0
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	bf14      	ite	ne
 800ee96:	2301      	movne	r3, #1
 800ee98:	2300      	moveq	r3, #0
 800ee9a:	b2db      	uxtb	r3, r3
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <_ZL12MX_TIM3_Initv+0xd4>
  {
    Error_Handler();
 800eea0:	f000 ff92 	bl	800fdc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800eea4:	230a      	movs	r3, #10
 800eea6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800eea8:	2301      	movs	r3, #1
 800eeaa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800eeac:	2300      	movs	r3, #0
 800eeae:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800eeb4:	1d3b      	adds	r3, r7, #4
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	4619      	mov	r1, r3
 800eeba:	4820      	ldr	r0, [pc, #128]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800eebc:	f010 f9cf 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	bf14      	ite	ne
 800eec6:	2301      	movne	r3, #1
 800eec8:	2300      	moveq	r3, #0
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d001      	beq.n	800eed4 <_ZL12MX_TIM3_Initv+0x104>
  {
    Error_Handler();
 800eed0:	f000 ff7a 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800eed4:	1d3b      	adds	r3, r7, #4
 800eed6:	2204      	movs	r2, #4
 800eed8:	4619      	mov	r1, r3
 800eeda:	4818      	ldr	r0, [pc, #96]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800eedc:	f010 f9bf 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800eee0:	4603      	mov	r3, r0
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	bf14      	ite	ne
 800eee6:	2301      	movne	r3, #1
 800eee8:	2300      	moveq	r3, #0
 800eeea:	b2db      	uxtb	r3, r3
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	d001      	beq.n	800eef4 <_ZL12MX_TIM3_Initv+0x124>
  {
    Error_Handler();
 800eef0:	f000 ff6a 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800eef4:	1d3b      	adds	r3, r7, #4
 800eef6:	2208      	movs	r2, #8
 800eef8:	4619      	mov	r1, r3
 800eefa:	4810      	ldr	r0, [pc, #64]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800eefc:	f010 f9af 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	bf14      	ite	ne
 800ef06:	2301      	movne	r3, #1
 800ef08:	2300      	moveq	r3, #0
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 800ef10:	f000 ff5a 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800ef14:	1d3b      	adds	r3, r7, #4
 800ef16:	220c      	movs	r2, #12
 800ef18:	4619      	mov	r1, r3
 800ef1a:	4808      	ldr	r0, [pc, #32]	; (800ef3c <_ZL12MX_TIM3_Initv+0x16c>)
 800ef1c:	f010 f99f 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800ef20:	4603      	mov	r3, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	bf14      	ite	ne
 800ef26:	2301      	movne	r3, #1
 800ef28:	2300      	moveq	r3, #0
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b00      	cmp	r3, #0
 800ef2e:	d001      	beq.n	800ef34 <_ZL12MX_TIM3_Initv+0x164>
  {
    Error_Handler();
 800ef30:	f000 ff4a 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ef34:	bf00      	nop
 800ef36:	3730      	adds	r7, #48	; 0x30
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	24000d14 	.word	0x24000d14
 800ef40:	40000400 	.word	0x40000400

0800ef44 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b08c      	sub	sp, #48	; 0x30
 800ef48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ef4a:	f107 0320 	add.w	r3, r7, #32
 800ef4e:	2200      	movs	r2, #0
 800ef50:	601a      	str	r2, [r3, #0]
 800ef52:	605a      	str	r2, [r3, #4]
 800ef54:	609a      	str	r2, [r3, #8]
 800ef56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ef58:	f107 0314 	add.w	r3, r7, #20
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	601a      	str	r2, [r3, #0]
 800ef60:	605a      	str	r2, [r3, #4]
 800ef62:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ef64:	1d3b      	adds	r3, r7, #4
 800ef66:	2200      	movs	r2, #0
 800ef68:	601a      	str	r2, [r3, #0]
 800ef6a:	605a      	str	r2, [r3, #4]
 800ef6c:	609a      	str	r2, [r3, #8]
 800ef6e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ef70:	4b4f      	ldr	r3, [pc, #316]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef72:	4a50      	ldr	r2, [pc, #320]	; (800f0b4 <_ZL12MX_TIM4_Initv+0x170>)
 800ef74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ef76:	4b4e      	ldr	r3, [pc, #312]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ef7c:	4b4c      	ldr	r3, [pc, #304]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef7e:	2200      	movs	r2, #0
 800ef80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27500 - 1;
 800ef82:	4b4b      	ldr	r3, [pc, #300]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef84:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800ef88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ef8a:	4b49      	ldr	r3, [pc, #292]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ef90:	4b47      	ldr	r3, [pc, #284]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800ef96:	4846      	ldr	r0, [pc, #280]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef98:	f00f fa68 	bl	801e46c <HAL_TIM_Base_Init>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	bf14      	ite	ne
 800efa2:	2301      	movne	r3, #1
 800efa4:	2300      	moveq	r3, #0
 800efa6:	b2db      	uxtb	r3, r3
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d001      	beq.n	800efb0 <_ZL12MX_TIM4_Initv+0x6c>
  {
    Error_Handler();
 800efac:	f000 ff0c 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800efb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800efb6:	f107 0320 	add.w	r3, r7, #32
 800efba:	4619      	mov	r1, r3
 800efbc:	483c      	ldr	r0, [pc, #240]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800efbe:	f010 faff 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800efc2:	4603      	mov	r3, r0
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	bf14      	ite	ne
 800efc8:	2301      	movne	r3, #1
 800efca:	2300      	moveq	r3, #0
 800efcc:	b2db      	uxtb	r3, r3
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d001      	beq.n	800efd6 <_ZL12MX_TIM4_Initv+0x92>
  {
    Error_Handler();
 800efd2:	f000 fef9 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800efd6:	4836      	ldr	r0, [pc, #216]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800efd8:	f00f fd50 	bl	801ea7c <HAL_TIM_IC_Init>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	bf14      	ite	ne
 800efe2:	2301      	movne	r3, #1
 800efe4:	2300      	moveq	r3, #0
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	d001      	beq.n	800eff0 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800efec:	f000 feec 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eff0:	2300      	movs	r3, #0
 800eff2:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eff4:	2300      	movs	r3, #0
 800eff6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800eff8:	f107 0314 	add.w	r3, r7, #20
 800effc:	4619      	mov	r1, r3
 800effe:	482c      	ldr	r0, [pc, #176]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800f000:	f011 f9ae 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800f004:	4603      	mov	r3, r0
 800f006:	2b00      	cmp	r3, #0
 800f008:	bf14      	ite	ne
 800f00a:	2301      	movne	r3, #1
 800f00c:	2300      	moveq	r3, #0
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	2b00      	cmp	r3, #0
 800f012:	d001      	beq.n	800f018 <_ZL12MX_TIM4_Initv+0xd4>
  {
    Error_Handler();
 800f014:	f000 fed8 	bl	800fdc8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f018:	230a      	movs	r3, #10
 800f01a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f01c:	2301      	movs	r3, #1
 800f01e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f020:	2300      	movs	r3, #0
 800f022:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800f024:	2300      	movs	r3, #0
 800f026:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f028:	1d3b      	adds	r3, r7, #4
 800f02a:	2200      	movs	r2, #0
 800f02c:	4619      	mov	r1, r3
 800f02e:	4820      	ldr	r0, [pc, #128]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800f030:	f010 f915 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800f034:	4603      	mov	r3, r0
 800f036:	2b00      	cmp	r3, #0
 800f038:	bf14      	ite	ne
 800f03a:	2301      	movne	r3, #1
 800f03c:	2300      	moveq	r3, #0
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	2b00      	cmp	r3, #0
 800f042:	d001      	beq.n	800f048 <_ZL12MX_TIM4_Initv+0x104>
  {
    Error_Handler();
 800f044:	f000 fec0 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f048:	1d3b      	adds	r3, r7, #4
 800f04a:	2204      	movs	r2, #4
 800f04c:	4619      	mov	r1, r3
 800f04e:	4818      	ldr	r0, [pc, #96]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800f050:	f010 f905 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	bf14      	ite	ne
 800f05a:	2301      	movne	r3, #1
 800f05c:	2300      	moveq	r3, #0
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	2b00      	cmp	r3, #0
 800f062:	d001      	beq.n	800f068 <_ZL12MX_TIM4_Initv+0x124>
  {
    Error_Handler();
 800f064:	f000 feb0 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f068:	1d3b      	adds	r3, r7, #4
 800f06a:	2208      	movs	r2, #8
 800f06c:	4619      	mov	r1, r3
 800f06e:	4810      	ldr	r0, [pc, #64]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800f070:	f010 f8f5 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800f074:	4603      	mov	r3, r0
 800f076:	2b00      	cmp	r3, #0
 800f078:	bf14      	ite	ne
 800f07a:	2301      	movne	r3, #1
 800f07c:	2300      	moveq	r3, #0
 800f07e:	b2db      	uxtb	r3, r3
 800f080:	2b00      	cmp	r3, #0
 800f082:	d001      	beq.n	800f088 <_ZL12MX_TIM4_Initv+0x144>
  {
    Error_Handler();
 800f084:	f000 fea0 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800f088:	1d3b      	adds	r3, r7, #4
 800f08a:	220c      	movs	r2, #12
 800f08c:	4619      	mov	r1, r3
 800f08e:	4808      	ldr	r0, [pc, #32]	; (800f0b0 <_ZL12MX_TIM4_Initv+0x16c>)
 800f090:	f010 f8e5 	bl	801f25e <HAL_TIM_IC_ConfigChannel>
 800f094:	4603      	mov	r3, r0
 800f096:	2b00      	cmp	r3, #0
 800f098:	bf14      	ite	ne
 800f09a:	2301      	movne	r3, #1
 800f09c:	2300      	moveq	r3, #0
 800f09e:	b2db      	uxtb	r3, r3
 800f0a0:	2b00      	cmp	r3, #0
 800f0a2:	d001      	beq.n	800f0a8 <_ZL12MX_TIM4_Initv+0x164>
  {
    Error_Handler();
 800f0a4:	f000 fe90 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f0a8:	bf00      	nop
 800f0aa:	3730      	adds	r7, #48	; 0x30
 800f0ac:	46bd      	mov	sp, r7
 800f0ae:	bd80      	pop	{r7, pc}
 800f0b0:	24000d60 	.word	0x24000d60
 800f0b4:	40000800 	.word	0x40000800

0800f0b8 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b08e      	sub	sp, #56	; 0x38
 800f0bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f0be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	601a      	str	r2, [r3, #0]
 800f0c6:	605a      	str	r2, [r3, #4]
 800f0c8:	609a      	str	r2, [r3, #8]
 800f0ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f0cc:	f107 031c 	add.w	r3, r7, #28
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	605a      	str	r2, [r3, #4]
 800f0d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f0d8:	463b      	mov	r3, r7
 800f0da:	2200      	movs	r2, #0
 800f0dc:	601a      	str	r2, [r3, #0]
 800f0de:	605a      	str	r2, [r3, #4]
 800f0e0:	609a      	str	r2, [r3, #8]
 800f0e2:	60da      	str	r2, [r3, #12]
 800f0e4:	611a      	str	r2, [r3, #16]
 800f0e6:	615a      	str	r2, [r3, #20]
 800f0e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f0ea:	4b49      	ldr	r3, [pc, #292]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f0ec:	4a49      	ldr	r2, [pc, #292]	; (800f214 <_ZL12MX_TIM5_Initv+0x15c>)
 800f0ee:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f0f0:	4b47      	ldr	r3, [pc, #284]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f0f6:	4b46      	ldr	r3, [pc, #280]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 27500 - 1;
 800f0fc:	4b44      	ldr	r3, [pc, #272]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f0fe:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f102:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f104:	4b42      	ldr	r3, [pc, #264]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f106:	2200      	movs	r2, #0
 800f108:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f10a:	4b41      	ldr	r3, [pc, #260]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f110:	483f      	ldr	r0, [pc, #252]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f112:	f00f f9ab 	bl	801e46c <HAL_TIM_Base_Init>
 800f116:	4603      	mov	r3, r0
 800f118:	2b00      	cmp	r3, #0
 800f11a:	bf14      	ite	ne
 800f11c:	2301      	movne	r3, #1
 800f11e:	2300      	moveq	r3, #0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800f126:	f000 fe4f 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f12a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f12e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f134:	4619      	mov	r1, r3
 800f136:	4836      	ldr	r0, [pc, #216]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f138:	f010 fa42 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800f13c:	4603      	mov	r3, r0
 800f13e:	2b00      	cmp	r3, #0
 800f140:	bf14      	ite	ne
 800f142:	2301      	movne	r3, #1
 800f144:	2300      	moveq	r3, #0
 800f146:	b2db      	uxtb	r3, r3
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d001      	beq.n	800f150 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800f14c:	f000 fe3c 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f150:	482f      	ldr	r0, [pc, #188]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f152:	f00f fb16 	bl	801e782 <HAL_TIM_PWM_Init>
 800f156:	4603      	mov	r3, r0
 800f158:	2b00      	cmp	r3, #0
 800f15a:	bf14      	ite	ne
 800f15c:	2301      	movne	r3, #1
 800f15e:	2300      	moveq	r3, #0
 800f160:	b2db      	uxtb	r3, r3
 800f162:	2b00      	cmp	r3, #0
 800f164:	d001      	beq.n	800f16a <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800f166:	f000 fe2f 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f16a:	2300      	movs	r3, #0
 800f16c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f16e:	2300      	movs	r3, #0
 800f170:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f172:	f107 031c 	add.w	r3, r7, #28
 800f176:	4619      	mov	r1, r3
 800f178:	4825      	ldr	r0, [pc, #148]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f17a:	f011 f8f1 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800f17e:	4603      	mov	r3, r0
 800f180:	2b00      	cmp	r3, #0
 800f182:	bf14      	ite	ne
 800f184:	2301      	movne	r3, #1
 800f186:	2300      	moveq	r3, #0
 800f188:	b2db      	uxtb	r3, r3
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800f18e:	f000 fe1b 	bl	800fdc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f192:	2360      	movs	r3, #96	; 0x60
 800f194:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f196:	2300      	movs	r3, #0
 800f198:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f19a:	2300      	movs	r3, #0
 800f19c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f19e:	2300      	movs	r3, #0
 800f1a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f1a2:	463b      	mov	r3, r7
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	4619      	mov	r1, r3
 800f1a8:	4819      	ldr	r0, [pc, #100]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f1aa:	f010 f8f5 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	bf14      	ite	ne
 800f1b4:	2301      	movne	r3, #1
 800f1b6:	2300      	moveq	r3, #0
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800f1be:	f000 fe03 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f1c2:	463b      	mov	r3, r7
 800f1c4:	2208      	movs	r2, #8
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	4811      	ldr	r0, [pc, #68]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f1ca:	f010 f8e5 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	bf14      	ite	ne
 800f1d4:	2301      	movne	r3, #1
 800f1d6:	2300      	moveq	r3, #0
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d001      	beq.n	800f1e2 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800f1de:	f000 fdf3 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f1e2:	463b      	mov	r3, r7
 800f1e4:	220c      	movs	r2, #12
 800f1e6:	4619      	mov	r1, r3
 800f1e8:	4809      	ldr	r0, [pc, #36]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f1ea:	f010 f8d5 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	bf14      	ite	ne
 800f1f4:	2301      	movne	r3, #1
 800f1f6:	2300      	moveq	r3, #0
 800f1f8:	b2db      	uxtb	r3, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	d001      	beq.n	800f202 <_ZL12MX_TIM5_Initv+0x14a>
  {
    Error_Handler();
 800f1fe:	f000 fde3 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f202:	4803      	ldr	r0, [pc, #12]	; (800f210 <_ZL12MX_TIM5_Initv+0x158>)
 800f204:	f005 fc82 	bl	8014b0c <HAL_TIM_MspPostInit>

}
 800f208:	bf00      	nop
 800f20a:	3738      	adds	r7, #56	; 0x38
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}
 800f210:	24000dac 	.word	0x24000dac
 800f214:	40000c00 	.word	0x40000c00

0800f218 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800f218:	b580      	push	{r7, lr}
 800f21a:	b084      	sub	sp, #16
 800f21c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f21e:	1d3b      	adds	r3, r7, #4
 800f220:	2200      	movs	r2, #0
 800f222:	601a      	str	r2, [r3, #0]
 800f224:	605a      	str	r2, [r3, #4]
 800f226:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f228:	4b19      	ldr	r3, [pc, #100]	; (800f290 <_ZL12MX_TIM6_Initv+0x78>)
 800f22a:	4a1a      	ldr	r2, [pc, #104]	; (800f294 <_ZL12MX_TIM6_Initv+0x7c>)
 800f22c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275 -1;
 800f22e:	4b18      	ldr	r3, [pc, #96]	; (800f290 <_ZL12MX_TIM6_Initv+0x78>)
 800f230:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f234:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f236:	4b16      	ldr	r3, [pc, #88]	; (800f290 <_ZL12MX_TIM6_Initv+0x78>)
 800f238:	2200      	movs	r2, #0
 800f23a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800f23c:	4b14      	ldr	r3, [pc, #80]	; (800f290 <_ZL12MX_TIM6_Initv+0x78>)
 800f23e:	22c7      	movs	r2, #199	; 0xc7
 800f240:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f242:	4b13      	ldr	r3, [pc, #76]	; (800f290 <_ZL12MX_TIM6_Initv+0x78>)
 800f244:	2200      	movs	r2, #0
 800f246:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f248:	4811      	ldr	r0, [pc, #68]	; (800f290 <_ZL12MX_TIM6_Initv+0x78>)
 800f24a:	f00f f90f 	bl	801e46c <HAL_TIM_Base_Init>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	bf14      	ite	ne
 800f254:	2301      	movne	r3, #1
 800f256:	2300      	moveq	r3, #0
 800f258:	b2db      	uxtb	r3, r3
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d001      	beq.n	800f262 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800f25e:	f000 fdb3 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f262:	2320      	movs	r3, #32
 800f264:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f266:	2300      	movs	r3, #0
 800f268:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f26a:	1d3b      	adds	r3, r7, #4
 800f26c:	4619      	mov	r1, r3
 800f26e:	4808      	ldr	r0, [pc, #32]	; (800f290 <_ZL12MX_TIM6_Initv+0x78>)
 800f270:	f011 f876 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800f274:	4603      	mov	r3, r0
 800f276:	2b00      	cmp	r3, #0
 800f278:	bf14      	ite	ne
 800f27a:	2301      	movne	r3, #1
 800f27c:	2300      	moveq	r3, #0
 800f27e:	b2db      	uxtb	r3, r3
 800f280:	2b00      	cmp	r3, #0
 800f282:	d001      	beq.n	800f288 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800f284:	f000 fda0 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f288:	bf00      	nop
 800f28a:	3710      	adds	r7, #16
 800f28c:	46bd      	mov	sp, r7
 800f28e:	bd80      	pop	{r7, pc}
 800f290:	24000df8 	.word	0x24000df8
 800f294:	40001000 	.word	0x40001000

0800f298 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f29e:	1d3b      	adds	r3, r7, #4
 800f2a0:	2200      	movs	r2, #0
 800f2a2:	601a      	str	r2, [r3, #0]
 800f2a4:	605a      	str	r2, [r3, #4]
 800f2a6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800f2a8:	4b19      	ldr	r3, [pc, #100]	; (800f310 <_ZL12MX_TIM7_Initv+0x78>)
 800f2aa:	4a1a      	ldr	r2, [pc, #104]	; (800f314 <_ZL12MX_TIM7_Initv+0x7c>)
 800f2ac:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800f2ae:	4b18      	ldr	r3, [pc, #96]	; (800f310 <_ZL12MX_TIM7_Initv+0x78>)
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f2b4:	4b16      	ldr	r3, [pc, #88]	; (800f310 <_ZL12MX_TIM7_Initv+0x78>)
 800f2b6:	2200      	movs	r2, #0
 800f2b8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800f2ba:	4b15      	ldr	r3, [pc, #84]	; (800f310 <_ZL12MX_TIM7_Initv+0x78>)
 800f2bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2c0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f2c2:	4b13      	ldr	r3, [pc, #76]	; (800f310 <_ZL12MX_TIM7_Initv+0x78>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800f2c8:	4811      	ldr	r0, [pc, #68]	; (800f310 <_ZL12MX_TIM7_Initv+0x78>)
 800f2ca:	f00f f8cf 	bl	801e46c <HAL_TIM_Base_Init>
 800f2ce:	4603      	mov	r3, r0
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	bf14      	ite	ne
 800f2d4:	2301      	movne	r3, #1
 800f2d6:	2300      	moveq	r3, #0
 800f2d8:	b2db      	uxtb	r3, r3
 800f2da:	2b00      	cmp	r3, #0
 800f2dc:	d001      	beq.n	800f2e2 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800f2de:	f000 fd73 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f2e2:	2300      	movs	r3, #0
 800f2e4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800f2ea:	1d3b      	adds	r3, r7, #4
 800f2ec:	4619      	mov	r1, r3
 800f2ee:	4808      	ldr	r0, [pc, #32]	; (800f310 <_ZL12MX_TIM7_Initv+0x78>)
 800f2f0:	f011 f836 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	bf14      	ite	ne
 800f2fa:	2301      	movne	r3, #1
 800f2fc:	2300      	moveq	r3, #0
 800f2fe:	b2db      	uxtb	r3, r3
 800f300:	2b00      	cmp	r3, #0
 800f302:	d001      	beq.n	800f308 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800f304:	f000 fd60 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800f308:	bf00      	nop
 800f30a:	3710      	adds	r7, #16
 800f30c:	46bd      	mov	sp, r7
 800f30e:	bd80      	pop	{r7, pc}
 800f310:	24000e44 	.word	0x24000e44
 800f314:	40001400 	.word	0x40001400

0800f318 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b09c      	sub	sp, #112	; 0x70
 800f31c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f31e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f322:	2200      	movs	r2, #0
 800f324:	601a      	str	r2, [r3, #0]
 800f326:	605a      	str	r2, [r3, #4]
 800f328:	609a      	str	r2, [r3, #8]
 800f32a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f32c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f330:	2200      	movs	r2, #0
 800f332:	601a      	str	r2, [r3, #0]
 800f334:	605a      	str	r2, [r3, #4]
 800f336:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f338:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f33c:	2200      	movs	r2, #0
 800f33e:	601a      	str	r2, [r3, #0]
 800f340:	605a      	str	r2, [r3, #4]
 800f342:	609a      	str	r2, [r3, #8]
 800f344:	60da      	str	r2, [r3, #12]
 800f346:	611a      	str	r2, [r3, #16]
 800f348:	615a      	str	r2, [r3, #20]
 800f34a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f34c:	1d3b      	adds	r3, r7, #4
 800f34e:	2234      	movs	r2, #52	; 0x34
 800f350:	2100      	movs	r1, #0
 800f352:	4618      	mov	r0, r3
 800f354:	f011 fab6 	bl	80208c4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f358:	4b6c      	ldr	r3, [pc, #432]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f35a:	4a6d      	ldr	r2, [pc, #436]	; (800f510 <_ZL12MX_TIM8_Initv+0x1f8>)
 800f35c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800f35e:	4b6b      	ldr	r3, [pc, #428]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f360:	2200      	movs	r2, #0
 800f362:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f364:	4b69      	ldr	r3, [pc, #420]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f366:	2200      	movs	r2, #0
 800f368:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27500 - 1;
 800f36a:	4b68      	ldr	r3, [pc, #416]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f36c:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f370:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f372:	4b66      	ldr	r3, [pc, #408]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f374:	2200      	movs	r2, #0
 800f376:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f378:	4b64      	ldr	r3, [pc, #400]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f37a:	2200      	movs	r2, #0
 800f37c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f37e:	4b63      	ldr	r3, [pc, #396]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f380:	2200      	movs	r2, #0
 800f382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f384:	4861      	ldr	r0, [pc, #388]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f386:	f00f f871 	bl	801e46c <HAL_TIM_Base_Init>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	bf14      	ite	ne
 800f390:	2301      	movne	r3, #1
 800f392:	2300      	moveq	r3, #0
 800f394:	b2db      	uxtb	r3, r3
 800f396:	2b00      	cmp	r3, #0
 800f398:	d001      	beq.n	800f39e <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 800f39a:	f000 fd15 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f39e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f3a2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f3a4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f3a8:	4619      	mov	r1, r3
 800f3aa:	4858      	ldr	r0, [pc, #352]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f3ac:	f010 f908 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800f3b0:	4603      	mov	r3, r0
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	bf14      	ite	ne
 800f3b6:	2301      	movne	r3, #1
 800f3b8:	2300      	moveq	r3, #0
 800f3ba:	b2db      	uxtb	r3, r3
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d001      	beq.n	800f3c4 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800f3c0:	f000 fd02 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f3c4:	4851      	ldr	r0, [pc, #324]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f3c6:	f00f f9dc 	bl	801e782 <HAL_TIM_PWM_Init>
 800f3ca:	4603      	mov	r3, r0
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	bf14      	ite	ne
 800f3d0:	2301      	movne	r3, #1
 800f3d2:	2300      	moveq	r3, #0
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d001      	beq.n	800f3de <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 800f3da:	f000 fcf5 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f3de:	2300      	movs	r3, #0
 800f3e0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f3e2:	2300      	movs	r3, #0
 800f3e4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f3ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f3ee:	4619      	mov	r1, r3
 800f3f0:	4846      	ldr	r0, [pc, #280]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f3f2:	f010 ffb5 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	bf14      	ite	ne
 800f3fc:	2301      	movne	r3, #1
 800f3fe:	2300      	moveq	r3, #0
 800f400:	b2db      	uxtb	r3, r3
 800f402:	2b00      	cmp	r3, #0
 800f404:	d001      	beq.n	800f40a <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 800f406:	f000 fcdf 	bl	800fdc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f40a:	2360      	movs	r3, #96	; 0x60
 800f40c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800f40e:	2300      	movs	r3, #0
 800f410:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f412:	2300      	movs	r3, #0
 800f414:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f416:	2300      	movs	r3, #0
 800f418:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f41a:	2300      	movs	r3, #0
 800f41c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f41e:	2300      	movs	r3, #0
 800f420:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f422:	2300      	movs	r3, #0
 800f424:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f426:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f42a:	2200      	movs	r2, #0
 800f42c:	4619      	mov	r1, r3
 800f42e:	4837      	ldr	r0, [pc, #220]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f430:	f00f ffb2 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f434:	4603      	mov	r3, r0
 800f436:	2b00      	cmp	r3, #0
 800f438:	bf14      	ite	ne
 800f43a:	2301      	movne	r3, #1
 800f43c:	2300      	moveq	r3, #0
 800f43e:	b2db      	uxtb	r3, r3
 800f440:	2b00      	cmp	r3, #0
 800f442:	d001      	beq.n	800f448 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 800f444:	f000 fcc0 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f448:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f44c:	2204      	movs	r2, #4
 800f44e:	4619      	mov	r1, r3
 800f450:	482e      	ldr	r0, [pc, #184]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f452:	f00f ffa1 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f456:	4603      	mov	r3, r0
 800f458:	2b00      	cmp	r3, #0
 800f45a:	bf14      	ite	ne
 800f45c:	2301      	movne	r3, #1
 800f45e:	2300      	moveq	r3, #0
 800f460:	b2db      	uxtb	r3, r3
 800f462:	2b00      	cmp	r3, #0
 800f464:	d001      	beq.n	800f46a <_ZL12MX_TIM8_Initv+0x152>
  {
    Error_Handler();
 800f466:	f000 fcaf 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f46a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f46e:	2208      	movs	r2, #8
 800f470:	4619      	mov	r1, r3
 800f472:	4826      	ldr	r0, [pc, #152]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f474:	f00f ff90 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f478:	4603      	mov	r3, r0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	bf14      	ite	ne
 800f47e:	2301      	movne	r3, #1
 800f480:	2300      	moveq	r3, #0
 800f482:	b2db      	uxtb	r3, r3
 800f484:	2b00      	cmp	r3, #0
 800f486:	d001      	beq.n	800f48c <_ZL12MX_TIM8_Initv+0x174>
  {
    Error_Handler();
 800f488:	f000 fc9e 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f48c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f490:	220c      	movs	r2, #12
 800f492:	4619      	mov	r1, r3
 800f494:	481d      	ldr	r0, [pc, #116]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f496:	f00f ff7f 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f49a:	4603      	mov	r3, r0
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	bf14      	ite	ne
 800f4a0:	2301      	movne	r3, #1
 800f4a2:	2300      	moveq	r3, #0
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d001      	beq.n	800f4ae <_ZL12MX_TIM8_Initv+0x196>
  {
    Error_Handler();
 800f4aa:	f000 fc8d 	bl	800fdc8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f4c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f4d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f4d4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f4de:	1d3b      	adds	r3, r7, #4
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	480a      	ldr	r0, [pc, #40]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f4e4:	f010 ffd8 	bl	8020498 <HAL_TIMEx_ConfigBreakDeadTime>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	bf14      	ite	ne
 800f4ee:	2301      	movne	r3, #1
 800f4f0:	2300      	moveq	r3, #0
 800f4f2:	b2db      	uxtb	r3, r3
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d001      	beq.n	800f4fc <_ZL12MX_TIM8_Initv+0x1e4>
  {
    Error_Handler();
 800f4f8:	f000 fc66 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f4fc:	4803      	ldr	r0, [pc, #12]	; (800f50c <_ZL12MX_TIM8_Initv+0x1f4>)
 800f4fe:	f005 fb05 	bl	8014b0c <HAL_TIM_MspPostInit>

}
 800f502:	bf00      	nop
 800f504:	3770      	adds	r7, #112	; 0x70
 800f506:	46bd      	mov	sp, r7
 800f508:	bd80      	pop	{r7, pc}
 800f50a:	bf00      	nop
 800f50c:	24000e90 	.word	0x24000e90
 800f510:	40010400 	.word	0x40010400

0800f514 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b08c      	sub	sp, #48	; 0x30
 800f518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f51a:	f107 0320 	add.w	r3, r7, #32
 800f51e:	2200      	movs	r2, #0
 800f520:	601a      	str	r2, [r3, #0]
 800f522:	605a      	str	r2, [r3, #4]
 800f524:	609a      	str	r2, [r3, #8]
 800f526:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f528:	1d3b      	adds	r3, r7, #4
 800f52a:	2200      	movs	r2, #0
 800f52c:	601a      	str	r2, [r3, #0]
 800f52e:	605a      	str	r2, [r3, #4]
 800f530:	609a      	str	r2, [r3, #8]
 800f532:	60da      	str	r2, [r3, #12]
 800f534:	611a      	str	r2, [r3, #16]
 800f536:	615a      	str	r2, [r3, #20]
 800f538:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800f53a:	4b2f      	ldr	r3, [pc, #188]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f53c:	4a2f      	ldr	r2, [pc, #188]	; (800f5fc <_ZL13MX_TIM12_Initv+0xe8>)
 800f53e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800f540:	4b2d      	ldr	r3, [pc, #180]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f542:	2200      	movs	r2, #0
 800f544:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f546:	4b2c      	ldr	r3, [pc, #176]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f548:	2200      	movs	r2, #0
 800f54a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 27500 - 1;
 800f54c:	4b2a      	ldr	r3, [pc, #168]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f54e:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f552:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f554:	4b28      	ldr	r3, [pc, #160]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f556:	2200      	movs	r2, #0
 800f558:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f55a:	4b27      	ldr	r3, [pc, #156]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800f560:	4825      	ldr	r0, [pc, #148]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f562:	f00e ff83 	bl	801e46c <HAL_TIM_Base_Init>
 800f566:	4603      	mov	r3, r0
 800f568:	2b00      	cmp	r3, #0
 800f56a:	bf14      	ite	ne
 800f56c:	2301      	movne	r3, #1
 800f56e:	2300      	moveq	r3, #0
 800f570:	b2db      	uxtb	r3, r3
 800f572:	2b00      	cmp	r3, #0
 800f574:	d001      	beq.n	800f57a <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 800f576:	f000 fc27 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f57a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f57e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800f580:	f107 0320 	add.w	r3, r7, #32
 800f584:	4619      	mov	r1, r3
 800f586:	481c      	ldr	r0, [pc, #112]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f588:	f010 f81a 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800f58c:	4603      	mov	r3, r0
 800f58e:	2b00      	cmp	r3, #0
 800f590:	bf14      	ite	ne
 800f592:	2301      	movne	r3, #1
 800f594:	2300      	moveq	r3, #0
 800f596:	b2db      	uxtb	r3, r3
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d001      	beq.n	800f5a0 <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 800f59c:	f000 fc14 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800f5a0:	4815      	ldr	r0, [pc, #84]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f5a2:	f00f f8ee 	bl	801e782 <HAL_TIM_PWM_Init>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	bf14      	ite	ne
 800f5ac:	2301      	movne	r3, #1
 800f5ae:	2300      	moveq	r3, #0
 800f5b0:	b2db      	uxtb	r3, r3
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d001      	beq.n	800f5ba <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 800f5b6:	f000 fc07 	bl	800fdc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f5ba:	2360      	movs	r3, #96	; 0x60
 800f5bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f5ca:	1d3b      	adds	r3, r7, #4
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	4619      	mov	r1, r3
 800f5d0:	4809      	ldr	r0, [pc, #36]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f5d2:	f00f fee1 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f5d6:	4603      	mov	r3, r0
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	bf14      	ite	ne
 800f5dc:	2301      	movne	r3, #1
 800f5de:	2300      	moveq	r3, #0
 800f5e0:	b2db      	uxtb	r3, r3
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d001      	beq.n	800f5ea <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 800f5e6:	f000 fbef 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800f5ea:	4803      	ldr	r0, [pc, #12]	; (800f5f8 <_ZL13MX_TIM12_Initv+0xe4>)
 800f5ec:	f005 fa8e 	bl	8014b0c <HAL_TIM_MspPostInit>

}
 800f5f0:	bf00      	nop
 800f5f2:	3730      	adds	r7, #48	; 0x30
 800f5f4:	46bd      	mov	sp, r7
 800f5f6:	bd80      	pop	{r7, pc}
 800f5f8:	24000edc 	.word	0x24000edc
 800f5fc:	40001800 	.word	0x40001800

0800f600 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800f604:	4b10      	ldr	r3, [pc, #64]	; (800f648 <_ZL13MX_TIM13_Initv+0x48>)
 800f606:	4a11      	ldr	r2, [pc, #68]	; (800f64c <_ZL13MX_TIM13_Initv+0x4c>)
 800f608:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800f60a:	4b0f      	ldr	r3, [pc, #60]	; (800f648 <_ZL13MX_TIM13_Initv+0x48>)
 800f60c:	2200      	movs	r2, #0
 800f60e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f610:	4b0d      	ldr	r3, [pc, #52]	; (800f648 <_ZL13MX_TIM13_Initv+0x48>)
 800f612:	2200      	movs	r2, #0
 800f614:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800f616:	4b0c      	ldr	r3, [pc, #48]	; (800f648 <_ZL13MX_TIM13_Initv+0x48>)
 800f618:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f61c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f61e:	4b0a      	ldr	r3, [pc, #40]	; (800f648 <_ZL13MX_TIM13_Initv+0x48>)
 800f620:	2200      	movs	r2, #0
 800f622:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f624:	4b08      	ldr	r3, [pc, #32]	; (800f648 <_ZL13MX_TIM13_Initv+0x48>)
 800f626:	2200      	movs	r2, #0
 800f628:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800f62a:	4807      	ldr	r0, [pc, #28]	; (800f648 <_ZL13MX_TIM13_Initv+0x48>)
 800f62c:	f00e ff1e 	bl	801e46c <HAL_TIM_Base_Init>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	bf14      	ite	ne
 800f636:	2301      	movne	r3, #1
 800f638:	2300      	moveq	r3, #0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d001      	beq.n	800f644 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800f640:	f000 fbc2 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800f644:	bf00      	nop
 800f646:	bd80      	pop	{r7, pc}
 800f648:	24000f28 	.word	0x24000f28
 800f64c:	40001c00 	.word	0x40001c00

0800f650 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800f650:	b580      	push	{r7, lr}
 800f652:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800f654:	4b10      	ldr	r3, [pc, #64]	; (800f698 <_ZL13MX_TIM14_Initv+0x48>)
 800f656:	4a11      	ldr	r2, [pc, #68]	; (800f69c <_ZL13MX_TIM14_Initv+0x4c>)
 800f658:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800f65a:	4b0f      	ldr	r3, [pc, #60]	; (800f698 <_ZL13MX_TIM14_Initv+0x48>)
 800f65c:	2200      	movs	r2, #0
 800f65e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f660:	4b0d      	ldr	r3, [pc, #52]	; (800f698 <_ZL13MX_TIM14_Initv+0x48>)
 800f662:	2200      	movs	r2, #0
 800f664:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800f666:	4b0c      	ldr	r3, [pc, #48]	; (800f698 <_ZL13MX_TIM14_Initv+0x48>)
 800f668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f66c:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f66e:	4b0a      	ldr	r3, [pc, #40]	; (800f698 <_ZL13MX_TIM14_Initv+0x48>)
 800f670:	2200      	movs	r2, #0
 800f672:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f674:	4b08      	ldr	r3, [pc, #32]	; (800f698 <_ZL13MX_TIM14_Initv+0x48>)
 800f676:	2200      	movs	r2, #0
 800f678:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800f67a:	4807      	ldr	r0, [pc, #28]	; (800f698 <_ZL13MX_TIM14_Initv+0x48>)
 800f67c:	f00e fef6 	bl	801e46c <HAL_TIM_Base_Init>
 800f680:	4603      	mov	r3, r0
 800f682:	2b00      	cmp	r3, #0
 800f684:	bf14      	ite	ne
 800f686:	2301      	movne	r3, #1
 800f688:	2300      	moveq	r3, #0
 800f68a:	b2db      	uxtb	r3, r3
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d001      	beq.n	800f694 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 800f690:	f000 fb9a 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800f694:	bf00      	nop
 800f696:	bd80      	pop	{r7, pc}
 800f698:	24000f74 	.word	0x24000f74
 800f69c:	40002000 	.word	0x40002000

0800f6a0 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800f6a0:	b580      	push	{r7, lr}
 800f6a2:	b088      	sub	sp, #32
 800f6a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f6a6:	f107 0310 	add.w	r3, r7, #16
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	601a      	str	r2, [r3, #0]
 800f6ae:	605a      	str	r2, [r3, #4]
 800f6b0:	609a      	str	r2, [r3, #8]
 800f6b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f6b4:	1d3b      	adds	r3, r7, #4
 800f6b6:	2200      	movs	r2, #0
 800f6b8:	601a      	str	r2, [r3, #0]
 800f6ba:	605a      	str	r2, [r3, #4]
 800f6bc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800f6be:	4b26      	ldr	r3, [pc, #152]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f6c0:	4a26      	ldr	r2, [pc, #152]	; (800f75c <_ZL13MX_TIM15_Initv+0xbc>)
 800f6c2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800f6c4:	4b24      	ldr	r3, [pc, #144]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f6ca:	4b23      	ldr	r3, [pc, #140]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800f6d0:	4b21      	ldr	r3, [pc, #132]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f6d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6d6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f6d8:	4b1f      	ldr	r3, [pc, #124]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800f6de:	4b1e      	ldr	r3, [pc, #120]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f6e4:	4b1c      	ldr	r3, [pc, #112]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f6e6:	2200      	movs	r2, #0
 800f6e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800f6ea:	481b      	ldr	r0, [pc, #108]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f6ec:	f00e febe 	bl	801e46c <HAL_TIM_Base_Init>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	bf14      	ite	ne
 800f6f6:	2301      	movne	r3, #1
 800f6f8:	2300      	moveq	r3, #0
 800f6fa:	b2db      	uxtb	r3, r3
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d001      	beq.n	800f704 <_ZL13MX_TIM15_Initv+0x64>
  {
    Error_Handler();
 800f700:	f000 fb62 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f704:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f708:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800f70a:	f107 0310 	add.w	r3, r7, #16
 800f70e:	4619      	mov	r1, r3
 800f710:	4811      	ldr	r0, [pc, #68]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f712:	f00f ff55 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	bf14      	ite	ne
 800f71c:	2301      	movne	r3, #1
 800f71e:	2300      	moveq	r3, #0
 800f720:	b2db      	uxtb	r3, r3
 800f722:	2b00      	cmp	r3, #0
 800f724:	d001      	beq.n	800f72a <_ZL13MX_TIM15_Initv+0x8a>
  {
    Error_Handler();
 800f726:	f000 fb4f 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f72a:	2300      	movs	r3, #0
 800f72c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f72e:	2300      	movs	r3, #0
 800f730:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800f732:	1d3b      	adds	r3, r7, #4
 800f734:	4619      	mov	r1, r3
 800f736:	4808      	ldr	r0, [pc, #32]	; (800f758 <_ZL13MX_TIM15_Initv+0xb8>)
 800f738:	f010 fe12 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800f73c:	4603      	mov	r3, r0
 800f73e:	2b00      	cmp	r3, #0
 800f740:	bf14      	ite	ne
 800f742:	2301      	movne	r3, #1
 800f744:	2300      	moveq	r3, #0
 800f746:	b2db      	uxtb	r3, r3
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <_ZL13MX_TIM15_Initv+0xb0>
  {
    Error_Handler();
 800f74c:	f000 fb3c 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800f750:	bf00      	nop
 800f752:	3720      	adds	r7, #32
 800f754:	46bd      	mov	sp, r7
 800f756:	bd80      	pop	{r7, pc}
 800f758:	24000fc0 	.word	0x24000fc0
 800f75c:	40014000 	.word	0x40014000

0800f760 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800f760:	b580      	push	{r7, lr}
 800f762:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800f764:	4b12      	ldr	r3, [pc, #72]	; (800f7b0 <_ZL13MX_TIM16_Initv+0x50>)
 800f766:	4a13      	ldr	r2, [pc, #76]	; (800f7b4 <_ZL13MX_TIM16_Initv+0x54>)
 800f768:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800f76a:	4b11      	ldr	r3, [pc, #68]	; (800f7b0 <_ZL13MX_TIM16_Initv+0x50>)
 800f76c:	2200      	movs	r2, #0
 800f76e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f770:	4b0f      	ldr	r3, [pc, #60]	; (800f7b0 <_ZL13MX_TIM16_Initv+0x50>)
 800f772:	2200      	movs	r2, #0
 800f774:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800f776:	4b0e      	ldr	r3, [pc, #56]	; (800f7b0 <_ZL13MX_TIM16_Initv+0x50>)
 800f778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f77c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f77e:	4b0c      	ldr	r3, [pc, #48]	; (800f7b0 <_ZL13MX_TIM16_Initv+0x50>)
 800f780:	2200      	movs	r2, #0
 800f782:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f784:	4b0a      	ldr	r3, [pc, #40]	; (800f7b0 <_ZL13MX_TIM16_Initv+0x50>)
 800f786:	2200      	movs	r2, #0
 800f788:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f78a:	4b09      	ldr	r3, [pc, #36]	; (800f7b0 <_ZL13MX_TIM16_Initv+0x50>)
 800f78c:	2200      	movs	r2, #0
 800f78e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f790:	4807      	ldr	r0, [pc, #28]	; (800f7b0 <_ZL13MX_TIM16_Initv+0x50>)
 800f792:	f00e fe6b 	bl	801e46c <HAL_TIM_Base_Init>
 800f796:	4603      	mov	r3, r0
 800f798:	2b00      	cmp	r3, #0
 800f79a:	bf14      	ite	ne
 800f79c:	2301      	movne	r3, #1
 800f79e:	2300      	moveq	r3, #0
 800f7a0:	b2db      	uxtb	r3, r3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d001      	beq.n	800f7aa <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800f7a6:	f000 fb0f 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800f7aa:	bf00      	nop
 800f7ac:	bd80      	pop	{r7, pc}
 800f7ae:	bf00      	nop
 800f7b0:	2400100c 	.word	0x2400100c
 800f7b4:	40014400 	.word	0x40014400

0800f7b8 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800f7bc:	4b12      	ldr	r3, [pc, #72]	; (800f808 <_ZL13MX_TIM17_Initv+0x50>)
 800f7be:	4a13      	ldr	r2, [pc, #76]	; (800f80c <_ZL13MX_TIM17_Initv+0x54>)
 800f7c0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800f7c2:	4b11      	ldr	r3, [pc, #68]	; (800f808 <_ZL13MX_TIM17_Initv+0x50>)
 800f7c4:	2200      	movs	r2, #0
 800f7c6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7c8:	4b0f      	ldr	r3, [pc, #60]	; (800f808 <_ZL13MX_TIM17_Initv+0x50>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800f7ce:	4b0e      	ldr	r3, [pc, #56]	; (800f808 <_ZL13MX_TIM17_Initv+0x50>)
 800f7d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7d4:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f7d6:	4b0c      	ldr	r3, [pc, #48]	; (800f808 <_ZL13MX_TIM17_Initv+0x50>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800f7dc:	4b0a      	ldr	r3, [pc, #40]	; (800f808 <_ZL13MX_TIM17_Initv+0x50>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f7e2:	4b09      	ldr	r3, [pc, #36]	; (800f808 <_ZL13MX_TIM17_Initv+0x50>)
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800f7e8:	4807      	ldr	r0, [pc, #28]	; (800f808 <_ZL13MX_TIM17_Initv+0x50>)
 800f7ea:	f00e fe3f 	bl	801e46c <HAL_TIM_Base_Init>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	bf14      	ite	ne
 800f7f4:	2301      	movne	r3, #1
 800f7f6:	2300      	moveq	r3, #0
 800f7f8:	b2db      	uxtb	r3, r3
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d001      	beq.n	800f802 <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 800f7fe:	f000 fae3 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800f802:	bf00      	nop
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	24001058 	.word	0x24001058
 800f80c:	40014800 	.word	0x40014800

0800f810 <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b08e      	sub	sp, #56	; 0x38
 800f814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f816:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f81a:	2200      	movs	r2, #0
 800f81c:	601a      	str	r2, [r3, #0]
 800f81e:	605a      	str	r2, [r3, #4]
 800f820:	609a      	str	r2, [r3, #8]
 800f822:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f824:	f107 031c 	add.w	r3, r7, #28
 800f828:	2200      	movs	r2, #0
 800f82a:	601a      	str	r2, [r3, #0]
 800f82c:	605a      	str	r2, [r3, #4]
 800f82e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f830:	463b      	mov	r3, r7
 800f832:	2200      	movs	r2, #0
 800f834:	601a      	str	r2, [r3, #0]
 800f836:	605a      	str	r2, [r3, #4]
 800f838:	609a      	str	r2, [r3, #8]
 800f83a:	60da      	str	r2, [r3, #12]
 800f83c:	611a      	str	r2, [r3, #16]
 800f83e:	615a      	str	r2, [r3, #20]
 800f840:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800f842:	4b51      	ldr	r3, [pc, #324]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f844:	4a51      	ldr	r2, [pc, #324]	; (800f98c <_ZL13MX_TIM23_Initv+0x17c>)
 800f846:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800f848:	4b4f      	ldr	r3, [pc, #316]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f84a:	2200      	movs	r2, #0
 800f84c:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f84e:	4b4e      	ldr	r3, [pc, #312]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f850:	2200      	movs	r2, #0
 800f852:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 27500 - 1;
 800f854:	4b4c      	ldr	r3, [pc, #304]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f856:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f85a:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f85c:	4b4a      	ldr	r3, [pc, #296]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f85e:	2200      	movs	r2, #0
 800f860:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f862:	4b49      	ldr	r3, [pc, #292]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f864:	2200      	movs	r2, #0
 800f866:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800f868:	4847      	ldr	r0, [pc, #284]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f86a:	f00e fdff 	bl	801e46c <HAL_TIM_Base_Init>
 800f86e:	4603      	mov	r3, r0
 800f870:	2b00      	cmp	r3, #0
 800f872:	bf14      	ite	ne
 800f874:	2301      	movne	r3, #1
 800f876:	2300      	moveq	r3, #0
 800f878:	b2db      	uxtb	r3, r3
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d001      	beq.n	800f882 <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 800f87e:	f000 faa3 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f886:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800f888:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f88c:	4619      	mov	r1, r3
 800f88e:	483e      	ldr	r0, [pc, #248]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f890:	f00f fe96 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800f894:	4603      	mov	r3, r0
 800f896:	2b00      	cmp	r3, #0
 800f898:	bf14      	ite	ne
 800f89a:	2301      	movne	r3, #1
 800f89c:	2300      	moveq	r3, #0
 800f89e:	b2db      	uxtb	r3, r3
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d001      	beq.n	800f8a8 <_ZL13MX_TIM23_Initv+0x98>
  {
    Error_Handler();
 800f8a4:	f000 fa90 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800f8a8:	4837      	ldr	r0, [pc, #220]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f8aa:	f00e ff6a 	bl	801e782 <HAL_TIM_PWM_Init>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	bf14      	ite	ne
 800f8b4:	2301      	movne	r3, #1
 800f8b6:	2300      	moveq	r3, #0
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d001      	beq.n	800f8c2 <_ZL13MX_TIM23_Initv+0xb2>
  {
    Error_Handler();
 800f8be:	f000 fa83 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f8c2:	2300      	movs	r3, #0
 800f8c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800f8ca:	f107 031c 	add.w	r3, r7, #28
 800f8ce:	4619      	mov	r1, r3
 800f8d0:	482d      	ldr	r0, [pc, #180]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f8d2:	f010 fd45 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	bf14      	ite	ne
 800f8dc:	2301      	movne	r3, #1
 800f8de:	2300      	moveq	r3, #0
 800f8e0:	b2db      	uxtb	r3, r3
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d001      	beq.n	800f8ea <_ZL13MX_TIM23_Initv+0xda>
  {
    Error_Handler();
 800f8e6:	f000 fa6f 	bl	800fdc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f8ea:	2360      	movs	r3, #96	; 0x60
 800f8ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f8f6:	2300      	movs	r3, #0
 800f8f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f8fa:	463b      	mov	r3, r7
 800f8fc:	2200      	movs	r2, #0
 800f8fe:	4619      	mov	r1, r3
 800f900:	4821      	ldr	r0, [pc, #132]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f902:	f00f fd49 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f906:	4603      	mov	r3, r0
 800f908:	2b00      	cmp	r3, #0
 800f90a:	bf14      	ite	ne
 800f90c:	2301      	movne	r3, #1
 800f90e:	2300      	moveq	r3, #0
 800f910:	b2db      	uxtb	r3, r3
 800f912:	2b00      	cmp	r3, #0
 800f914:	d001      	beq.n	800f91a <_ZL13MX_TIM23_Initv+0x10a>
  {
    Error_Handler();
 800f916:	f000 fa57 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f91a:	463b      	mov	r3, r7
 800f91c:	2204      	movs	r2, #4
 800f91e:	4619      	mov	r1, r3
 800f920:	4819      	ldr	r0, [pc, #100]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f922:	f00f fd39 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f926:	4603      	mov	r3, r0
 800f928:	2b00      	cmp	r3, #0
 800f92a:	bf14      	ite	ne
 800f92c:	2301      	movne	r3, #1
 800f92e:	2300      	moveq	r3, #0
 800f930:	b2db      	uxtb	r3, r3
 800f932:	2b00      	cmp	r3, #0
 800f934:	d001      	beq.n	800f93a <_ZL13MX_TIM23_Initv+0x12a>
  {
    Error_Handler();
 800f936:	f000 fa47 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f93a:	463b      	mov	r3, r7
 800f93c:	2208      	movs	r2, #8
 800f93e:	4619      	mov	r1, r3
 800f940:	4811      	ldr	r0, [pc, #68]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f942:	f00f fd29 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f946:	4603      	mov	r3, r0
 800f948:	2b00      	cmp	r3, #0
 800f94a:	bf14      	ite	ne
 800f94c:	2301      	movne	r3, #1
 800f94e:	2300      	moveq	r3, #0
 800f950:	b2db      	uxtb	r3, r3
 800f952:	2b00      	cmp	r3, #0
 800f954:	d001      	beq.n	800f95a <_ZL13MX_TIM23_Initv+0x14a>
  {
    Error_Handler();
 800f956:	f000 fa37 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f95a:	463b      	mov	r3, r7
 800f95c:	220c      	movs	r2, #12
 800f95e:	4619      	mov	r1, r3
 800f960:	4809      	ldr	r0, [pc, #36]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f962:	f00f fd19 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800f966:	4603      	mov	r3, r0
 800f968:	2b00      	cmp	r3, #0
 800f96a:	bf14      	ite	ne
 800f96c:	2301      	movne	r3, #1
 800f96e:	2300      	moveq	r3, #0
 800f970:	b2db      	uxtb	r3, r3
 800f972:	2b00      	cmp	r3, #0
 800f974:	d001      	beq.n	800f97a <_ZL13MX_TIM23_Initv+0x16a>
  {
    Error_Handler();
 800f976:	f000 fa27 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 800f97a:	4803      	ldr	r0, [pc, #12]	; (800f988 <_ZL13MX_TIM23_Initv+0x178>)
 800f97c:	f005 f8c6 	bl	8014b0c <HAL_TIM_MspPostInit>

}
 800f980:	bf00      	nop
 800f982:	3738      	adds	r7, #56	; 0x38
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}
 800f988:	240010a4 	.word	0x240010a4
 800f98c:	4000e000 	.word	0x4000e000

0800f990 <_ZL13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800f990:	b580      	push	{r7, lr}
 800f992:	b08e      	sub	sp, #56	; 0x38
 800f994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f99a:	2200      	movs	r2, #0
 800f99c:	601a      	str	r2, [r3, #0]
 800f99e:	605a      	str	r2, [r3, #4]
 800f9a0:	609a      	str	r2, [r3, #8]
 800f9a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f9a4:	f107 031c 	add.w	r3, r7, #28
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	601a      	str	r2, [r3, #0]
 800f9ac:	605a      	str	r2, [r3, #4]
 800f9ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f9b0:	463b      	mov	r3, r7
 800f9b2:	2200      	movs	r2, #0
 800f9b4:	601a      	str	r2, [r3, #0]
 800f9b6:	605a      	str	r2, [r3, #4]
 800f9b8:	609a      	str	r2, [r3, #8]
 800f9ba:	60da      	str	r2, [r3, #12]
 800f9bc:	611a      	str	r2, [r3, #16]
 800f9be:	615a      	str	r2, [r3, #20]
 800f9c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800f9c2:	4b51      	ldr	r3, [pc, #324]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800f9c4:	4a51      	ldr	r2, [pc, #324]	; (800fb0c <_ZL13MX_TIM24_Initv+0x17c>)
 800f9c6:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800f9c8:	4b4f      	ldr	r3, [pc, #316]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f9ce:	4b4e      	ldr	r3, [pc, #312]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 27500 - 1;
 800f9d4:	4b4c      	ldr	r3, [pc, #304]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800f9d6:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f9da:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f9dc:	4b4a      	ldr	r3, [pc, #296]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f9e2:	4b49      	ldr	r3, [pc, #292]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800f9e8:	4847      	ldr	r0, [pc, #284]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800f9ea:	f00e fd3f 	bl	801e46c <HAL_TIM_Base_Init>
 800f9ee:	4603      	mov	r3, r0
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	bf14      	ite	ne
 800f9f4:	2301      	movne	r3, #1
 800f9f6:	2300      	moveq	r3, #0
 800f9f8:	b2db      	uxtb	r3, r3
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d001      	beq.n	800fa02 <_ZL13MX_TIM24_Initv+0x72>
  {
    Error_Handler();
 800f9fe:	f000 f9e3 	bl	800fdc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fa02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa06:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800fa08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	483e      	ldr	r0, [pc, #248]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800fa10:	f00f fdd6 	bl	801f5c0 <HAL_TIM_ConfigClockSource>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	bf14      	ite	ne
 800fa1a:	2301      	movne	r3, #1
 800fa1c:	2300      	moveq	r3, #0
 800fa1e:	b2db      	uxtb	r3, r3
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d001      	beq.n	800fa28 <_ZL13MX_TIM24_Initv+0x98>
  {
    Error_Handler();
 800fa24:	f000 f9d0 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 800fa28:	4837      	ldr	r0, [pc, #220]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800fa2a:	f00e feaa 	bl	801e782 <HAL_TIM_PWM_Init>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	bf14      	ite	ne
 800fa34:	2301      	movne	r3, #1
 800fa36:	2300      	moveq	r3, #0
 800fa38:	b2db      	uxtb	r3, r3
 800fa3a:	2b00      	cmp	r3, #0
 800fa3c:	d001      	beq.n	800fa42 <_ZL13MX_TIM24_Initv+0xb2>
  {
    Error_Handler();
 800fa3e:	f000 f9c3 	bl	800fdc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fa42:	2300      	movs	r3, #0
 800fa44:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fa46:	2300      	movs	r3, #0
 800fa48:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800fa4a:	f107 031c 	add.w	r3, r7, #28
 800fa4e:	4619      	mov	r1, r3
 800fa50:	482d      	ldr	r0, [pc, #180]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800fa52:	f010 fc85 	bl	8020360 <HAL_TIMEx_MasterConfigSynchronization>
 800fa56:	4603      	mov	r3, r0
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	bf14      	ite	ne
 800fa5c:	2301      	movne	r3, #1
 800fa5e:	2300      	moveq	r3, #0
 800fa60:	b2db      	uxtb	r3, r3
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d001      	beq.n	800fa6a <_ZL13MX_TIM24_Initv+0xda>
  {
    Error_Handler();
 800fa66:	f000 f9af 	bl	800fdc8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fa6a:	2360      	movs	r3, #96	; 0x60
 800fa6c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800fa6e:	2300      	movs	r3, #0
 800fa70:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fa72:	2300      	movs	r3, #0
 800fa74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fa76:	2300      	movs	r3, #0
 800fa78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fa7a:	463b      	mov	r3, r7
 800fa7c:	2200      	movs	r2, #0
 800fa7e:	4619      	mov	r1, r3
 800fa80:	4821      	ldr	r0, [pc, #132]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800fa82:	f00f fc89 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800fa86:	4603      	mov	r3, r0
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	bf14      	ite	ne
 800fa8c:	2301      	movne	r3, #1
 800fa8e:	2300      	moveq	r3, #0
 800fa90:	b2db      	uxtb	r3, r3
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d001      	beq.n	800fa9a <_ZL13MX_TIM24_Initv+0x10a>
  {
    Error_Handler();
 800fa96:	f000 f997 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fa9a:	463b      	mov	r3, r7
 800fa9c:	2204      	movs	r2, #4
 800fa9e:	4619      	mov	r1, r3
 800faa0:	4819      	ldr	r0, [pc, #100]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800faa2:	f00f fc79 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800faa6:	4603      	mov	r3, r0
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	bf14      	ite	ne
 800faac:	2301      	movne	r3, #1
 800faae:	2300      	moveq	r3, #0
 800fab0:	b2db      	uxtb	r3, r3
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d001      	beq.n	800faba <_ZL13MX_TIM24_Initv+0x12a>
  {
    Error_Handler();
 800fab6:	f000 f987 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800faba:	463b      	mov	r3, r7
 800fabc:	2208      	movs	r2, #8
 800fabe:	4619      	mov	r1, r3
 800fac0:	4811      	ldr	r0, [pc, #68]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800fac2:	f00f fc69 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800fac6:	4603      	mov	r3, r0
 800fac8:	2b00      	cmp	r3, #0
 800faca:	bf14      	ite	ne
 800facc:	2301      	movne	r3, #1
 800face:	2300      	moveq	r3, #0
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	2b00      	cmp	r3, #0
 800fad4:	d001      	beq.n	800fada <_ZL13MX_TIM24_Initv+0x14a>
  {
    Error_Handler();
 800fad6:	f000 f977 	bl	800fdc8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fada:	463b      	mov	r3, r7
 800fadc:	220c      	movs	r2, #12
 800fade:	4619      	mov	r1, r3
 800fae0:	4809      	ldr	r0, [pc, #36]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800fae2:	f00f fc59 	bl	801f398 <HAL_TIM_PWM_ConfigChannel>
 800fae6:	4603      	mov	r3, r0
 800fae8:	2b00      	cmp	r3, #0
 800faea:	bf14      	ite	ne
 800faec:	2301      	movne	r3, #1
 800faee:	2300      	moveq	r3, #0
 800faf0:	b2db      	uxtb	r3, r3
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d001      	beq.n	800fafa <_ZL13MX_TIM24_Initv+0x16a>
  {
    Error_Handler();
 800faf6:	f000 f967 	bl	800fdc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 800fafa:	4803      	ldr	r0, [pc, #12]	; (800fb08 <_ZL13MX_TIM24_Initv+0x178>)
 800fafc:	f005 f806 	bl	8014b0c <HAL_TIM_MspPostInit>

}
 800fb00:	bf00      	nop
 800fb02:	3738      	adds	r7, #56	; 0x38
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	240010f0 	.word	0x240010f0
 800fb0c:	4000e400 	.word	0x4000e400

0800fb10 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b082      	sub	sp, #8
 800fb14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fb16:	4b0d      	ldr	r3, [pc, #52]	; (800fb4c <_ZL11MX_DMA_Initv+0x3c>)
 800fb18:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fb1c:	4a0b      	ldr	r2, [pc, #44]	; (800fb4c <_ZL11MX_DMA_Initv+0x3c>)
 800fb1e:	f043 0301 	orr.w	r3, r3, #1
 800fb22:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fb26:	4b09      	ldr	r3, [pc, #36]	; (800fb4c <_ZL11MX_DMA_Initv+0x3c>)
 800fb28:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fb2c:	f003 0301 	and.w	r3, r3, #1
 800fb30:	607b      	str	r3, [r7, #4]
 800fb32:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 800fb34:	2200      	movs	r2, #0
 800fb36:	2101      	movs	r1, #1
 800fb38:	200c      	movs	r0, #12
 800fb3a:	f007 fcca 	bl	80174d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800fb3e:	200c      	movs	r0, #12
 800fb40:	f007 fce1 	bl	8017506 <HAL_NVIC_EnableIRQ>

}
 800fb44:	bf00      	nop
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}
 800fb4c:	58024400 	.word	0x58024400

0800fb50 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800fb50:	b580      	push	{r7, lr}
 800fb52:	b08e      	sub	sp, #56	; 0x38
 800fb54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb5a:	2200      	movs	r2, #0
 800fb5c:	601a      	str	r2, [r3, #0]
 800fb5e:	605a      	str	r2, [r3, #4]
 800fb60:	609a      	str	r2, [r3, #8]
 800fb62:	60da      	str	r2, [r3, #12]
 800fb64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fb66:	4b90      	ldr	r3, [pc, #576]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fb68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb6c:	4a8e      	ldr	r2, [pc, #568]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fb6e:	f043 0304 	orr.w	r3, r3, #4
 800fb72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fb76:	4b8c      	ldr	r3, [pc, #560]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fb78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb7c:	f003 0304 	and.w	r3, r3, #4
 800fb80:	623b      	str	r3, [r7, #32]
 800fb82:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800fb84:	4b88      	ldr	r3, [pc, #544]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fb86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb8a:	4a87      	ldr	r2, [pc, #540]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fb8c:	f043 0320 	orr.w	r3, r3, #32
 800fb90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fb94:	4b84      	ldr	r3, [pc, #528]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fb96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb9a:	f003 0320 	and.w	r3, r3, #32
 800fb9e:	61fb      	str	r3, [r7, #28]
 800fba0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fba2:	4b81      	ldr	r3, [pc, #516]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fba8:	4a7f      	ldr	r2, [pc, #508]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbb2:	4b7d      	ldr	r3, [pc, #500]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbbc:	61bb      	str	r3, [r7, #24]
 800fbbe:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbc0:	4b79      	ldr	r3, [pc, #484]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbc6:	4a78      	ldr	r2, [pc, #480]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbc8:	f043 0301 	orr.w	r3, r3, #1
 800fbcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbd0:	4b75      	ldr	r3, [pc, #468]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbd6:	f003 0301 	and.w	r3, r3, #1
 800fbda:	617b      	str	r3, [r7, #20]
 800fbdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fbde:	4b72      	ldr	r3, [pc, #456]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbe4:	4a70      	ldr	r2, [pc, #448]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbe6:	f043 0302 	orr.w	r3, r3, #2
 800fbea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbee:	4b6e      	ldr	r3, [pc, #440]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbf4:	f003 0302 	and.w	r3, r3, #2
 800fbf8:	613b      	str	r3, [r7, #16]
 800fbfa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fbfc:	4b6a      	ldr	r3, [pc, #424]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fbfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc02:	4a69      	ldr	r2, [pc, #420]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fc04:	f043 0310 	orr.w	r3, r3, #16
 800fc08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc0c:	4b66      	ldr	r3, [pc, #408]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fc0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc12:	f003 0310 	and.w	r3, r3, #16
 800fc16:	60fb      	str	r3, [r7, #12]
 800fc18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fc1a:	4b63      	ldr	r3, [pc, #396]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fc1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc20:	4a61      	ldr	r2, [pc, #388]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fc22:	f043 0308 	orr.w	r3, r3, #8
 800fc26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc2a:	4b5f      	ldr	r3, [pc, #380]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fc2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc30:	f003 0308 	and.w	r3, r3, #8
 800fc34:	60bb      	str	r3, [r7, #8]
 800fc36:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800fc38:	4b5b      	ldr	r3, [pc, #364]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fc3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc3e:	4a5a      	ldr	r2, [pc, #360]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fc40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc48:	4b57      	ldr	r3, [pc, #348]	; (800fda8 <_ZL12MX_GPIO_Initv+0x258>)
 800fc4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc52:	607b      	str	r3, [r7, #4]
 800fc54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800fc56:	2200      	movs	r2, #0
 800fc58:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800fc5c:	4853      	ldr	r0, [pc, #332]	; (800fdac <_ZL12MX_GPIO_Initv+0x25c>)
 800fc5e:	f00b f861 	bl	801ad24 <HAL_GPIO_WritePin>
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|SENSOR_OPEN_COLLECTOR_5_Pin, GPIO_PIN_RESET);
 800fc62:	2200      	movs	r2, #0
 800fc64:	21c0      	movs	r1, #192	; 0xc0
 800fc66:	4852      	ldr	r0, [pc, #328]	; (800fdb0 <_ZL12MX_GPIO_Initv+0x260>)
 800fc68:	f00b f85c 	bl	801ad24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fc72:	4850      	ldr	r0, [pc, #320]	; (800fdb4 <_ZL12MX_GPIO_Initv+0x264>)
 800fc74:	f00b f856 	bl	801ad24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800fc78:	2200      	movs	r2, #0
 800fc7a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fc7e:	484e      	ldr	r0, [pc, #312]	; (800fdb8 <_ZL12MX_GPIO_Initv+0x268>)
 800fc80:	f00b f850 	bl	801ad24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_OPEN_COLLECTOR_6_GPIO_Port, SENSOR_OPEN_COLLECTOR_6_Pin, GPIO_PIN_RESET);
 800fc84:	2200      	movs	r2, #0
 800fc86:	2180      	movs	r1, #128	; 0x80
 800fc88:	484c      	ldr	r0, [pc, #304]	; (800fdbc <_ZL12MX_GPIO_Initv+0x26c>)
 800fc8a:	f00b f84b 	bl	801ad24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800fc8e:	2201      	movs	r2, #1
 800fc90:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fc94:	4849      	ldr	r0, [pc, #292]	; (800fdbc <_ZL12MX_GPIO_Initv+0x26c>)
 800fc96:	f00b f845 	bl	801ad24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800fc9a:	2200      	movs	r2, #0
 800fc9c:	2102      	movs	r1, #2
 800fc9e:	4848      	ldr	r0, [pc, #288]	; (800fdc0 <_ZL12MX_GPIO_Initv+0x270>)
 800fca0:	f00b f840 	bl	801ad24 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_1_Pin SENSOR_OPEN_COLLECTOR_2_Pin SENSOR_OPEN_COLLECTOR_3_Pin SENSOR_OPEN_COLLECTOR_7_Pin
                           SENSOR_OPEN_COLLECTOR_8_Pin SENSOR_OPEN_COLLECTOR_9_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800fca4:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800fca8:	627b      	str	r3, [r7, #36]	; 0x24
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fcaa:	2301      	movs	r3, #1
 800fcac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fcae:	2302      	movs	r3, #2
 800fcb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fcb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcba:	4619      	mov	r1, r3
 800fcbc:	483b      	ldr	r0, [pc, #236]	; (800fdac <_ZL12MX_GPIO_Initv+0x25c>)
 800fcbe:	f00a fe71 	bl	801a9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fcc2:	2340      	movs	r3, #64	; 0x40
 800fcc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcca:	2300      	movs	r3, #0
 800fccc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800fcd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	4835      	ldr	r0, [pc, #212]	; (800fdb0 <_ZL12MX_GPIO_Initv+0x260>)
 800fcda:	f00a fe63 	bl	801a9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_OPEN_COLLECTOR_5_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_5_Pin;
 800fcde:	2380      	movs	r3, #128	; 0x80
 800fce0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fce2:	2301      	movs	r3, #1
 800fce4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fce6:	2302      	movs	r3, #2
 800fce8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fcea:	2300      	movs	r3, #0
 800fcec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SENSOR_OPEN_COLLECTOR_5_GPIO_Port, &GPIO_InitStruct);
 800fcee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	482e      	ldr	r0, [pc, #184]	; (800fdb0 <_ZL12MX_GPIO_Initv+0x260>)
 800fcf6:	f00a fe55 	bl	801a9a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_1_Pin ACTUATOR_24V_3_Pin ACTUATOR_24V_2_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_1_Pin|ACTUATOR_24V_3_Pin|ACTUATOR_24V_2_Pin;
 800fcfa:	230e      	movs	r3, #14
 800fcfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd02:	2302      	movs	r3, #2
 800fd04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fd06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	4827      	ldr	r0, [pc, #156]	; (800fdac <_ZL12MX_GPIO_Initv+0x25c>)
 800fd0e:	f00a fe49 	bl	801a9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fd12:	2340      	movs	r3, #64	; 0x40
 800fd14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fd16:	2303      	movs	r3, #3
 800fd18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd22:	4619      	mov	r1, r3
 800fd24:	4827      	ldr	r0, [pc, #156]	; (800fdc4 <_ZL12MX_GPIO_Initv+0x274>)
 800fd26:	f00a fe3d 	bl	801a9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800fd2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd30:	2301      	movs	r3, #1
 800fd32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd34:	2302      	movs	r3, #2
 800fd36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd38:	2300      	movs	r3, #0
 800fd3a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fd3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd40:	4619      	mov	r1, r3
 800fd42:	481c      	ldr	r0, [pc, #112]	; (800fdb4 <_ZL12MX_GPIO_Initv+0x264>)
 800fd44:	f00a fe2e 	bl	801a9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800fd48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd4e:	2301      	movs	r3, #1
 800fd50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd52:	2300      	movs	r3, #0
 800fd54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd56:	2300      	movs	r3, #0
 800fd58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fd5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd5e:	4619      	mov	r1, r3
 800fd60:	4815      	ldr	r0, [pc, #84]	; (800fdb8 <_ZL12MX_GPIO_Initv+0x268>)
 800fd62:	f00a fe1f 	bl	801a9a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_6_Pin OE_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_6_Pin|OE_Pin;
 800fd66:	f44f 7320 	mov.w	r3, #640	; 0x280
 800fd6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd6c:	2301      	movs	r3, #1
 800fd6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd70:	2302      	movs	r3, #2
 800fd72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd74:	2300      	movs	r3, #0
 800fd76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fd78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd7c:	4619      	mov	r1, r3
 800fd7e:	480f      	ldr	r0, [pc, #60]	; (800fdbc <_ZL12MX_GPIO_Initv+0x26c>)
 800fd80:	f00a fe10 	bl	801a9a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800fd84:	2302      	movs	r3, #2
 800fd86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd88:	2301      	movs	r3, #1
 800fd8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd8c:	2300      	movs	r3, #0
 800fd8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd90:	2300      	movs	r3, #0
 800fd92:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800fd94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd98:	4619      	mov	r1, r3
 800fd9a:	4809      	ldr	r0, [pc, #36]	; (800fdc0 <_ZL12MX_GPIO_Initv+0x270>)
 800fd9c:	f00a fe02 	bl	801a9a4 <HAL_GPIO_Init>

}
 800fda0:	bf00      	nop
 800fda2:	3738      	adds	r7, #56	; 0x38
 800fda4:	46bd      	mov	sp, r7
 800fda6:	bd80      	pop	{r7, pc}
 800fda8:	58024400 	.word	0x58024400
 800fdac:	58020800 	.word	0x58020800
 800fdb0:	58021400 	.word	0x58021400
 800fdb4:	58020c00 	.word	0x58020c00
 800fdb8:	58021800 	.word	0x58021800
 800fdbc:	58020400 	.word	0x58020400
 800fdc0:	58021000 	.word	0x58021000
 800fdc4:	58020000 	.word	0x58020000

0800fdc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800fdcc:	b672      	cpsid	i
}
 800fdce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800fdd0:	e7fe      	b.n	800fdd0 <Error_Handler+0x8>

0800fdd2 <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800fdd2:	b580      	push	{r7, lr}
 800fdd4:	b082      	sub	sp, #8
 800fdd6:	af00      	add	r7, sp, #0
 800fdd8:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fd fc17 	bl	800d610 <_ZNKSt14_Function_base8_M_emptyEv>
 800fde2:	4603      	mov	r3, r0
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d001      	beq.n	800fdec <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800fde8:	f010 fce5 	bl	80207b6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	68db      	ldr	r3, [r3, #12]
 800fdf0:	687a      	ldr	r2, [r7, #4]
 800fdf2:	4610      	mov	r0, r2
 800fdf4:	4798      	blx	r3
 800fdf6:	bf00      	nop
    }
 800fdf8:	3708      	adds	r7, #8
 800fdfa:	46bd      	mov	sp, r7
 800fdfc:	bd80      	pop	{r7, pc}

0800fdfe <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 800fdfe:	b580      	push	{r7, lr}
 800fe00:	b082      	sub	sp, #8
 800fe02:	af00      	add	r7, sp, #0
 800fe04:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	4618      	mov	r0, r3
 800fe0a:	f7fd fbe0 	bl	800d5ce <_ZNSt14_Function_baseC1Ev>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	4618      	mov	r0, r3
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b082      	sub	sp, #8
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	6078      	str	r0, [r7, #4]
 800fe20:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800fe22:	6838      	ldr	r0, [r7, #0]
 800fe24:	f000 fb5a 	bl	80104dc <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>
 800fe28:	4603      	mov	r3, r0
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f000 fb60 	bl	80104f2 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800fe32:	bf00      	nop
 800fe34:	3708      	adds	r7, #8
 800fe36:	46bd      	mov	sp, r7
 800fe38:	bd80      	pop	{r7, pc}

0800fe3a <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 800fe3a:	b580      	push	{r7, lr}
 800fe3c:	b086      	sub	sp, #24
 800fe3e:	af00      	add	r7, sp, #0
 800fe40:	6078      	str	r0, [r7, #4]
 800fe42:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800fe44:	f107 0308 	add.w	r3, r7, #8
 800fe48:	6839      	ldr	r1, [r7, #0]
 800fe4a:	4618      	mov	r0, r3
 800fe4c:	f000 fb83 	bl	8010556 <_ZNSt8functionIFvvEEC1ERKS1_>
 800fe50:	f107 0308 	add.w	r3, r7, #8
 800fe54:	6879      	ldr	r1, [r7, #4]
 800fe56:	4618      	mov	r0, r3
 800fe58:	f000 fb9f 	bl	801059a <_ZNSt8functionIFvvEE4swapERS1_>
 800fe5c:	f107 0308 	add.w	r3, r7, #8
 800fe60:	4618      	mov	r0, r3
 800fe62:	f7fd fc41 	bl	800d6e8 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 800fe66:	687b      	ldr	r3, [r7, #4]
      }
 800fe68:	4618      	mov	r0, r3
 800fe6a:	3718      	adds	r7, #24
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	bd80      	pop	{r7, pc}

0800fe70 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800fe78:	687a      	ldr	r2, [r7, #4]
 800fe7a:	f107 030c 	add.w	r3, r7, #12
 800fe7e:	4611      	mov	r1, r2
 800fe80:	4618      	mov	r0, r3
 800fe82:	f000 fbab 	bl	80105dc <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	4618      	mov	r0, r3
 800fe8a:	3710      	adds	r7, #16
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	1d1a      	adds	r2, r3, #4
 800fe9c:	f107 030c 	add.w	r3, r7, #12
 800fea0:	4611      	mov	r1, r2
 800fea2:	4618      	mov	r0, r3
 800fea4:	f000 fb9a 	bl	80105dc <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	4618      	mov	r0, r3
 800feac:	3710      	adds	r7, #16
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
	...

0800feb4 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>:
      operator[](key_type&& __k)
 800feb4:	b590      	push	{r4, r7, lr}
 800feb6:	b08b      	sub	sp, #44	; 0x2c
 800feb8:	af02      	add	r7, sp, #8
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800febe:	6839      	ldr	r1, [r7, #0]
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f000 fb9b 	bl	80105fc <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>
 800fec6:	4603      	mov	r3, r0
 800fec8:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800feca:	6878      	ldr	r0, [r7, #4]
 800fecc:	f000 fba5 	bl	801061a <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>
 800fed0:	4603      	mov	r3, r0
 800fed2:	60fb      	str	r3, [r7, #12]
 800fed4:	f107 020c 	add.w	r2, r7, #12
 800fed8:	f107 0308 	add.w	r3, r7, #8
 800fedc:	4611      	mov	r1, r2
 800fede:	4618      	mov	r0, r3
 800fee0:	f7fb f81c 	bl	800af1c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800fee4:	4603      	mov	r3, r0
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d112      	bne.n	800ff10 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x5c>
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f000 fba2 	bl	8010634 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>
 800fef0:	f107 0308 	add.w	r3, r7, #8
 800fef4:	4618      	mov	r0, r3
 800fef6:	f000 fbaa 	bl	801064e <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 800fefa:	4603      	mov	r3, r0
 800fefc:	461a      	mov	r2, r3
 800fefe:	f107 0310 	add.w	r3, r7, #16
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	4618      	mov	r0, r3
 800ff06:	f7fb f81d 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800ff0a:	4603      	mov	r3, r0
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d001      	beq.n	800ff14 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x60>
 800ff10:	2301      	movs	r3, #1
 800ff12:	e000      	b.n	800ff16 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x62>
 800ff14:	2300      	movs	r3, #0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d01f      	beq.n	800ff5a <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800ff1a:	687c      	ldr	r4, [r7, #4]
 800ff1c:	f107 0208 	add.w	r2, r7, #8
 800ff20:	f107 0314 	add.w	r3, r7, #20
 800ff24:	4611      	mov	r1, r2
 800ff26:	4618      	mov	r0, r3
 800ff28:	f7fb f821 	bl	800af6e <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					std::forward_as_tuple(std::move(__k)),
 800ff2c:	6838      	ldr	r0, [r7, #0]
 800ff2e:	f000 fb9c 	bl	801066a <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>
 800ff32:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800ff34:	f107 0318 	add.w	r3, r7, #24
 800ff38:	4611      	mov	r1, r2
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f000 fba0 	bl	8010680 <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>
 800ff40:	f107 0218 	add.w	r2, r7, #24
 800ff44:	f107 031c 	add.w	r3, r7, #28
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	4613      	mov	r3, r2
 800ff4c:	4a08      	ldr	r2, [pc, #32]	; (800ff70 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xbc>)
 800ff4e:	6979      	ldr	r1, [r7, #20]
 800ff50:	4620      	mov	r0, r4
 800ff52:	f000 fba6 	bl	80106a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 800ff56:	4603      	mov	r3, r0
 800ff58:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800ff5a:	f107 0308 	add.w	r3, r7, #8
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f000 fb75 	bl	801064e <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 800ff64:	4603      	mov	r3, r0
 800ff66:	3304      	adds	r3, #4
      }
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3724      	adds	r7, #36	; 0x24
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd90      	pop	{r4, r7, pc}
 800ff70:	08020d70 	.word	0x08020d70

0800ff74 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800ff74:	b5b0      	push	{r4, r5, r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800ff7e:	687c      	ldr	r4, [r7, #4]
 800ff80:	6838      	ldr	r0, [r7, #0]
 800ff82:	f000 fbcc 	bl	801071e <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800ff86:	4603      	mov	r3, r0
 800ff88:	461a      	mov	r2, r3
 800ff8a:	4629      	mov	r1, r5
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f000 fbe2 	bl	8010756 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	4618      	mov	r0, r3
 800ff96:	3708      	adds	r7, #8
 800ff98:	46bd      	mov	sp, r7
 800ff9a:	bdb0      	pop	{r4, r5, r7, pc}

0800ff9c <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	685a      	ldr	r2, [r3, #4]
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	1ad3      	subs	r3, r2, r3
 800ffae:	109b      	asrs	r3, r3, #2
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	370c      	adds	r7, #12
 800ffb4:	46bd      	mov	sp, r7
 800ffb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffba:	4770      	bx	lr

0800ffbc <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fbdb 	bl	8010780 <_ZNSaIP13StreamMessageEC1Ev>
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	4618      	mov	r0, r3
 800ffce:	f000 fbe3 	bl	8010798 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	3708      	adds	r7, #8
 800ffd8:	46bd      	mov	sp, r7
 800ffda:	bd80      	pop	{r7, pc}

0800ffdc <_ZNSaIP13StreamMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	4618      	mov	r0, r3
 800ffe8:	370c      	adds	r7, #12
 800ffea:	46bd      	mov	sp, r7
 800ffec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fff0:	4770      	bx	lr

0800fff2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800fff2:	b580      	push	{r7, lr}
 800fff4:	b082      	sub	sp, #8
 800fff6:	af00      	add	r7, sp, #0
 800fff8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	689a      	ldr	r2, [r3, #8]
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	1ad3      	subs	r3, r2, r3
 8010008:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 801000a:	461a      	mov	r2, r3
 801000c:	6878      	ldr	r0, [r7, #4]
 801000e:	f000 fbd7 	bl	80107c0 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      }
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	4618      	mov	r0, r3
 8010016:	f7fd fed6 	bl	800ddc6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	4618      	mov	r0, r3
 801001e:	3708      	adds	r7, #8
 8010020:	46bd      	mov	sp, r7
 8010022:	bd80      	pop	{r7, pc}

08010024 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010024:	b5b0      	push	{r4, r5, r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681c      	ldr	r4, [r3, #0]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	4618      	mov	r0, r3
 8010038:	f000 fbd5 	bl	80107e6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 801003c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801003e:	461a      	mov	r2, r3
 8010040:	4629      	mov	r1, r5
 8010042:	4620      	mov	r0, r4
 8010044:	f000 fbda 	bl	80107fc <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>
      }
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4618      	mov	r0, r3
 801004c:	f7ff ffd1 	bl	800fff2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	4618      	mov	r0, r3
 8010054:	3708      	adds	r7, #8
 8010056:	46bd      	mov	sp, r7
 8010058:	bdb0      	pop	{r4, r5, r7, pc}

0801005a <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801005a:	b580      	push	{r7, lr}
 801005c:	b082      	sub	sp, #8
 801005e:	af00      	add	r7, sp, #0
 8010060:	6078      	str	r0, [r7, #4]
 8010062:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010064:	6838      	ldr	r0, [r7, #0]
 8010066:	f000 fbd7 	bl	8010818 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>
 801006a:	4603      	mov	r3, r0
 801006c:	4619      	mov	r1, r3
 801006e:	6878      	ldr	r0, [r7, #4]
 8010070:	f000 fbdd 	bl	801082e <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8010074:	bf00      	nop
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}

0801007c <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801007c:	b580      	push	{r7, lr}
 801007e:	b084      	sub	sp, #16
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010084:	687a      	ldr	r2, [r7, #4]
 8010086:	f107 030c 	add.w	r3, r7, #12
 801008a:	4611      	mov	r1, r2
 801008c:	4618      	mov	r0, r3
 801008e:	f000 fc00 	bl	8010892 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	4618      	mov	r0, r3
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}

0801009c <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801009c:	b580      	push	{r7, lr}
 801009e:	b084      	sub	sp, #16
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	1d1a      	adds	r2, r3, #4
 80100a8:	f107 030c 	add.w	r3, r7, #12
 80100ac:	4611      	mov	r1, r2
 80100ae:	4618      	mov	r0, r3
 80100b0:	f000 fbef 	bl	8010892 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	4618      	mov	r0, r3
 80100b8:	3710      	adds	r7, #16
 80100ba:	46bd      	mov	sp, r7
 80100bc:	bd80      	pop	{r7, pc}

080100be <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80100be:	b580      	push	{r7, lr}
 80100c0:	b082      	sub	sp, #8
 80100c2:	af00      	add	r7, sp, #0
 80100c4:	6078      	str	r0, [r7, #4]
 80100c6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	685a      	ldr	r2, [r3, #4]
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	689b      	ldr	r3, [r3, #8]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d00c      	beq.n	80100ee <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80100d4:	6878      	ldr	r0, [r7, #4]
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	683a      	ldr	r2, [r7, #0]
 80100dc:	4619      	mov	r1, r3
 80100de:	f000 fbfd 	bl	80108dc <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	1d1a      	adds	r2, r3, #4
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	605a      	str	r2, [r3, #4]
      }
 80100ec:	e008      	b.n	8010100 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f7ff ffd4 	bl	801009c <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 80100f4:	4603      	mov	r3, r0
 80100f6:	683a      	ldr	r2, [r7, #0]
 80100f8:	4619      	mov	r1, r3
 80100fa:	6878      	ldr	r0, [r7, #4]
 80100fc:	f000 fc00 	bl	8010900 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8010100:	bf00      	nop
 8010102:	3708      	adds	r7, #8
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}

08010108 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010108:	b590      	push	{r4, r7, lr}
 801010a:	b083      	sub	sp, #12
 801010c:	af00      	add	r7, sp, #0
 801010e:	6078      	str	r0, [r7, #4]
 8010110:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	4618      	mov	r0, r3
 8010116:	f7fd fa5a 	bl	800d5ce <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 801011a:	463b      	mov	r3, r7
 801011c:	4618      	mov	r0, r3
 801011e:	f000 fc6b 	bl	80109f8 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>
 8010122:	4603      	mov	r3, r0
 8010124:	2b00      	cmp	r3, #0
 8010126:	d00f      	beq.n	8010148 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010128:	687c      	ldr	r4, [r7, #4]
 801012a:	463b      	mov	r3, r7
 801012c:	4618      	mov	r0, r3
 801012e:	f000 fc6e 	bl	8010a0e <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8010132:	4603      	mov	r3, r0
 8010134:	4619      	mov	r1, r3
 8010136:	4620      	mov	r0, r4
 8010138:	f000 fc74 	bl	8010a24 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	4a05      	ldr	r2, [pc, #20]	; (8010154 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x4c>)
 8010140:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	4a04      	ldr	r2, [pc, #16]	; (8010158 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x50>)
 8010146:	609a      	str	r2, [r3, #8]
      }
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	4618      	mov	r0, r3
 801014c:	370c      	adds	r7, #12
 801014e:	46bd      	mov	sp, r7
 8010150:	bd90      	pop	{r4, r7, pc}
 8010152:	bf00      	nop
 8010154:	08010a49 	.word	0x08010a49
 8010158:	08010a67 	.word	0x08010a67

0801015c <_ZNKSt8optionalIP13StreamMessageEcvbEv>:
      constexpr explicit operator bool() const noexcept
 801015c:	b580      	push	{r7, lr}
 801015e:	b082      	sub	sp, #8
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7fd ff66 	bl	800e036 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 801016a:	4603      	mov	r3, r0
 801016c:	4618      	mov	r0, r3
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
 801017a:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	4618      	mov	r0, r3
 8010180:	f000 fc90 	bl	8010aa4 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>
 8010184:	4603      	mov	r3, r0
      }
 8010186:	4618      	mov	r0, r3
 8010188:	3708      	adds	r7, #8
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}

0801018e <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801018e:	b580      	push	{r7, lr}
 8010190:	b084      	sub	sp, #16
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010196:	687a      	ldr	r2, [r7, #4]
 8010198:	f107 030c 	add.w	r3, r7, #12
 801019c:	4611      	mov	r1, r2
 801019e:	4618      	mov	r0, r3
 80101a0:	f000 fc8b 	bl	8010aba <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	4618      	mov	r0, r3
 80101a8:	3710      	adds	r7, #16
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b084      	sub	sp, #16
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	1d1a      	adds	r2, r3, #4
 80101ba:	f107 030c 	add.w	r3, r7, #12
 80101be:	4611      	mov	r1, r2
 80101c0:	4618      	mov	r0, r3
 80101c2:	f000 fc7a 	bl	8010aba <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	4618      	mov	r0, r3
 80101ca:	3710      	adds	r7, #16
 80101cc:	46bd      	mov	sp, r7
 80101ce:	bd80      	pop	{r7, pc}

080101d0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b082      	sub	sp, #8
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 fc8e 	bl	8010afa <_ZNSaIP5FieldIJEEED1Ev>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	4618      	mov	r0, r3
 80101e2:	3708      	adds	r7, #8
 80101e4:	46bd      	mov	sp, r7
 80101e6:	bd80      	pop	{r7, pc}

080101e8 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>:
      _Vector_base() = default;
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b082      	sub	sp, #8
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	4618      	mov	r0, r3
 80101f4:	f000 fc71 	bl	8010ada <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>
 80101f8:	687b      	ldr	r3, [r7, #4]
 80101fa:	4618      	mov	r0, r3
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}

08010202 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>:
      vector() = default;
 8010202:	b580      	push	{r7, lr}
 8010204:	b082      	sub	sp, #8
 8010206:	af00      	add	r7, sp, #0
 8010208:	6078      	str	r0, [r7, #4]
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	4618      	mov	r0, r3
 801020e:	f7ff ffeb 	bl	80101e8 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	4618      	mov	r0, r3
 8010216:	3708      	adds	r7, #8
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}

0801021c <_ZN6PacketC1IJhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 801021c:	b590      	push	{r4, r7, lr}
 801021e:	b085      	sub	sp, #20
 8010220:	af00      	add	r7, sp, #0
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	607a      	str	r2, [r7, #4]
 8010226:	603b      	str	r3, [r7, #0]
 8010228:	460b      	mov	r3, r1
 801022a:	817b      	strh	r3, [r7, #10]
 801022c:	68fb      	ldr	r3, [r7, #12]
 801022e:	2200      	movs	r2, #0
 8010230:	601a      	str	r2, [r3, #0]
 8010232:	897a      	ldrh	r2, [r7, #10]
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	809a      	strh	r2, [r3, #4]
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	3308      	adds	r3, #8
 801023c:	4618      	mov	r0, r3
 801023e:	f7ff ffe0 	bl	8010202 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010248:	6839      	ldr	r1, [r7, #0]
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f000 fc94 	bl	8010b78 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010250:	68fc      	ldr	r4, [r7, #12]
 8010252:	f107 030a 	add.w	r3, r7, #10
 8010256:	4619      	mov	r1, r3
 8010258:	4804      	ldr	r0, [pc, #16]	; (801026c <_ZN6PacketC1IJhEEEtPFvvEDpPT_+0x50>)
 801025a:	f000 fcb1 	bl	8010bc0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 801025e:	4603      	mov	r3, r0
 8010260:	601c      	str	r4, [r3, #0]
    }
 8010262:	68fb      	ldr	r3, [r7, #12]
 8010264:	4618      	mov	r0, r3
 8010266:	3714      	adds	r7, #20
 8010268:	46bd      	mov	sp, r7
 801026a:	bd90      	pop	{r4, r7, pc}
 801026c:	240001d4 	.word	0x240001d4

08010270 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010270:	b590      	push	{r4, r7, lr}
 8010272:	b085      	sub	sp, #20
 8010274:	af00      	add	r7, sp, #0
 8010276:	60f8      	str	r0, [r7, #12]
 8010278:	607a      	str	r2, [r7, #4]
 801027a:	603b      	str	r3, [r7, #0]
 801027c:	460b      	mov	r3, r1
 801027e:	817b      	strh	r3, [r7, #10]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	2200      	movs	r2, #0
 8010284:	601a      	str	r2, [r3, #0]
 8010286:	897a      	ldrh	r2, [r7, #10]
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	809a      	strh	r2, [r3, #4]
 801028c:	68fb      	ldr	r3, [r7, #12]
 801028e:	3308      	adds	r3, #8
 8010290:	4618      	mov	r0, r3
 8010292:	f7ff ffb6 	bl	8010202 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	687a      	ldr	r2, [r7, #4]
 801029a:	615a      	str	r2, [r3, #20]
        build(fields...);
 801029c:	6a3a      	ldr	r2, [r7, #32]
 801029e:	6839      	ldr	r1, [r7, #0]
 80102a0:	68f8      	ldr	r0, [r7, #12]
 80102a2:	f000 fce9 	bl	8010c78 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 80102a6:	68fc      	ldr	r4, [r7, #12]
 80102a8:	f107 030a 	add.w	r3, r7, #10
 80102ac:	4619      	mov	r1, r3
 80102ae:	4805      	ldr	r0, [pc, #20]	; (80102c4 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_+0x54>)
 80102b0:	f000 fc86 	bl	8010bc0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 80102b4:	4603      	mov	r3, r0
 80102b6:	601c      	str	r4, [r3, #0]
    }
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	4618      	mov	r0, r3
 80102bc:	3714      	adds	r7, #20
 80102be:	46bd      	mov	sp, r7
 80102c0:	bd90      	pop	{r4, r7, pc}
 80102c2:	bf00      	nop
 80102c4:	240001d4 	.word	0x240001d4

080102c8 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80102c8:	b590      	push	{r4, r7, lr}
 80102ca:	b085      	sub	sp, #20
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	60f8      	str	r0, [r7, #12]
 80102d0:	607a      	str	r2, [r7, #4]
 80102d2:	603b      	str	r3, [r7, #0]
 80102d4:	460b      	mov	r3, r1
 80102d6:	817b      	strh	r3, [r7, #10]
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2200      	movs	r2, #0
 80102dc:	601a      	str	r2, [r3, #0]
 80102de:	897a      	ldrh	r2, [r7, #10]
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	809a      	strh	r2, [r3, #4]
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	3308      	adds	r3, #8
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7ff ff8a 	bl	8010202 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	615a      	str	r2, [r3, #20]
        build(fields...);
 80102f4:	6a3a      	ldr	r2, [r7, #32]
 80102f6:	6839      	ldr	r1, [r7, #0]
 80102f8:	68f8      	ldr	r0, [r7, #12]
 80102fa:	f000 fce5 	bl	8010cc8 <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 80102fe:	68fc      	ldr	r4, [r7, #12]
 8010300:	f107 030a 	add.w	r3, r7, #10
 8010304:	4619      	mov	r1, r3
 8010306:	4805      	ldr	r0, [pc, #20]	; (801031c <_ZN6PacketC1IJhmEEEtPFvvEDpPT_+0x54>)
 8010308:	f000 fc5a 	bl	8010bc0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 801030c:	4603      	mov	r3, r0
 801030e:	601c      	str	r4, [r3, #0]
    }
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	4618      	mov	r0, r3
 8010314:	3714      	adds	r7, #20
 8010316:	46bd      	mov	sp, r7
 8010318:	bd90      	pop	{r4, r7, pc}
 801031a:	bf00      	nop
 801031c:	240001d4 	.word	0x240001d4

08010320 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010320:	b590      	push	{r4, r7, lr}
 8010322:	b085      	sub	sp, #20
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	607a      	str	r2, [r7, #4]
 801032a:	603b      	str	r3, [r7, #0]
 801032c:	460b      	mov	r3, r1
 801032e:	817b      	strh	r3, [r7, #10]
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	2200      	movs	r2, #0
 8010334:	601a      	str	r2, [r3, #0]
 8010336:	897a      	ldrh	r2, [r7, #10]
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	809a      	strh	r2, [r3, #4]
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	3308      	adds	r3, #8
 8010340:	4618      	mov	r0, r3
 8010342:	f7ff ff5e 	bl	8010202 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	687a      	ldr	r2, [r7, #4]
 801034a:	615a      	str	r2, [r3, #20]
        build(fields...);
 801034c:	6a3a      	ldr	r2, [r7, #32]
 801034e:	6839      	ldr	r1, [r7, #0]
 8010350:	68f8      	ldr	r0, [r7, #12]
 8010352:	f000 fce1 	bl	8010d18 <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010356:	68fc      	ldr	r4, [r7, #12]
 8010358:	f107 030a 	add.w	r3, r7, #10
 801035c:	4619      	mov	r1, r3
 801035e:	4805      	ldr	r0, [pc, #20]	; (8010374 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_+0x54>)
 8010360:	f000 fc2e 	bl	8010bc0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010364:	4603      	mov	r3, r0
 8010366:	601c      	str	r4, [r3, #0]
    }
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	4618      	mov	r0, r3
 801036c:	3714      	adds	r7, #20
 801036e:	46bd      	mov	sp, r7
 8010370:	bd90      	pop	{r4, r7, pc}
 8010372:	bf00      	nop
 8010374:	240001d4 	.word	0x240001d4

08010378 <_ZNKSt8optionalIP3PinEcvbEv>:
      constexpr explicit operator bool() const noexcept
 8010378:	b580      	push	{r7, lr}
 801037a:	b082      	sub	sp, #8
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f7fd ff57 	bl	800e234 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 8010386:	4603      	mov	r3, r0
 8010388:	4618      	mov	r0, r3
 801038a:	3708      	adds	r7, #8
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8010390:	b580      	push	{r7, lr}
 8010392:	b082      	sub	sp, #8
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	4618      	mov	r0, r3
 801039c:	f000 fce4 	bl	8010d68 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>
 80103a0:	4603      	mov	r3, r0
      }
 80103a2:	4618      	mov	r0, r3
 80103a4:	3708      	adds	r7, #8
 80103a6:	46bd      	mov	sp, r7
 80103a8:	bd80      	pop	{r7, pc}

080103aa <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 80103aa:	b580      	push	{r7, lr}
 80103ac:	b084      	sub	sp, #16
 80103ae:	af00      	add	r7, sp, #0
 80103b0:	6078      	str	r0, [r7, #4]
 80103b2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6839      	ldr	r1, [r7, #0]
 80103b8:	4618      	mov	r0, r3
 80103ba:	f000 fce0 	bl	8010d7e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80103be:	4603      	mov	r3, r0
 80103c0:	60bb      	str	r3, [r7, #8]
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	4618      	mov	r0, r3
 80103c6:	f000 fd19 	bl	8010dfc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80103ca:	4603      	mov	r3, r0
 80103cc:	60fb      	str	r3, [r7, #12]
 80103ce:	f107 020c 	add.w	r2, r7, #12
 80103d2:	f107 0308 	add.w	r3, r7, #8
 80103d6:	4611      	mov	r1, r2
 80103d8:	4618      	mov	r0, r3
 80103da:	f000 fd20 	bl	8010e1e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 80103de:	4603      	mov	r3, r0
 80103e0:	f083 0301 	eor.w	r3, r3, #1
 80103e4:	b2db      	uxtb	r3, r3
 80103e6:	4618      	mov	r0, r3
 80103e8:	3710      	adds	r7, #16
 80103ea:	46bd      	mov	sp, r7
 80103ec:	bd80      	pop	{r7, pc}

080103ee <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 80103ee:	b580      	push	{r7, lr}
 80103f0:	b084      	sub	sp, #16
 80103f2:	af00      	add	r7, sp, #0
 80103f4:	6078      	str	r0, [r7, #4]
 80103f6:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6839      	ldr	r1, [r7, #0]
 80103fc:	4618      	mov	r0, r3
 80103fe:	f000 fd22 	bl	8010e46 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8010402:	4603      	mov	r3, r0
 8010404:	60bb      	str	r3, [r7, #8]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	4618      	mov	r0, r3
 801040a:	f000 fd5b 	bl	8010ec4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 801040e:	4603      	mov	r3, r0
 8010410:	60fb      	str	r3, [r7, #12]
 8010412:	f107 020c 	add.w	r2, r7, #12
 8010416:	f107 0308 	add.w	r3, r7, #8
 801041a:	4611      	mov	r1, r2
 801041c:	4618      	mov	r0, r3
 801041e:	f000 fd62 	bl	8010ee6 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8010422:	4603      	mov	r3, r0
 8010424:	f083 0301 	eor.w	r3, r3, #1
 8010428:	b2db      	uxtb	r3, r3
 801042a:	4618      	mov	r0, r3
 801042c:	3710      	adds	r7, #16
 801042e:	46bd      	mov	sp, r7
 8010430:	bd80      	pop	{r7, pc}
	...

08010434 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010434:	b590      	push	{r4, r7, lr}
 8010436:	b083      	sub	sp, #12
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	4618      	mov	r0, r3
 8010442:	f7fd f8c4 	bl	800d5ce <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8010446:	463b      	mov	r3, r7
 8010448:	4618      	mov	r0, r3
 801044a:	f000 fd60 	bl	8010f0e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>
 801044e:	4603      	mov	r3, r0
 8010450:	2b00      	cmp	r3, #0
 8010452:	d00f      	beq.n	8010474 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010454:	687c      	ldr	r4, [r7, #4]
 8010456:	463b      	mov	r3, r7
 8010458:	4618      	mov	r0, r3
 801045a:	f000 fd63 	bl	8010f24 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 801045e:	4603      	mov	r3, r0
 8010460:	4619      	mov	r1, r3
 8010462:	4620      	mov	r0, r4
 8010464:	f000 fd69 	bl	8010f3a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	4a05      	ldr	r2, [pc, #20]	; (8010480 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x4c>)
 801046c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	4a04      	ldr	r2, [pc, #16]	; (8010484 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x50>)
 8010472:	609a      	str	r2, [r3, #8]
      }
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	370c      	adds	r7, #12
 801047a:	46bd      	mov	sp, r7
 801047c:	bd90      	pop	{r4, r7, pc}
 801047e:	bf00      	nop
 8010480:	08010f5f 	.word	0x08010f5f
 8010484:	08010f7d 	.word	0x08010f7d

08010488 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010488:	b590      	push	{r4, r7, lr}
 801048a:	b083      	sub	sp, #12
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	4618      	mov	r0, r3
 8010496:	f7fd f89a 	bl	800d5ce <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 801049a:	463b      	mov	r3, r7
 801049c:	4618      	mov	r0, r3
 801049e:	f000 fd8c 	bl	8010fba <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>
 80104a2:	4603      	mov	r3, r0
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	d00f      	beq.n	80104c8 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80104a8:	687c      	ldr	r4, [r7, #4]
 80104aa:	463b      	mov	r3, r7
 80104ac:	4618      	mov	r0, r3
 80104ae:	f000 fd8f 	bl	8010fd0 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 80104b2:	4603      	mov	r3, r0
 80104b4:	4619      	mov	r1, r3
 80104b6:	4620      	mov	r0, r4
 80104b8:	f000 fd95 	bl	8010fe6 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	4a05      	ldr	r2, [pc, #20]	; (80104d4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x4c>)
 80104c0:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	4a04      	ldr	r2, [pc, #16]	; (80104d8 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x50>)
 80104c6:	609a      	str	r2, [r3, #8]
      }
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	4618      	mov	r0, r3
 80104cc:	370c      	adds	r7, #12
 80104ce:	46bd      	mov	sp, r7
 80104d0:	bd90      	pop	{r4, r7, pc}
 80104d2:	bf00      	nop
 80104d4:	0801100b 	.word	0x0801100b
 80104d8:	08011029 	.word	0x08011029

080104dc <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80104dc:	b480      	push	{r7}
 80104de:	b083      	sub	sp, #12
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	4618      	mov	r0, r3
 80104e8:	370c      	adds	r7, #12
 80104ea:	46bd      	mov	sp, r7
 80104ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f0:	4770      	bx	lr

080104f2 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80104f2:	b5b0      	push	{r4, r5, r7, lr}
 80104f4:	b082      	sub	sp, #8
 80104f6:	af00      	add	r7, sp, #0
 80104f8:	6078      	str	r0, [r7, #4]
 80104fa:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	685a      	ldr	r2, [r3, #4]
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	429a      	cmp	r2, r3
 8010506:	d011      	beq.n	801052c <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010508:	687c      	ldr	r4, [r7, #4]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	685d      	ldr	r5, [r3, #4]
 801050e:	6838      	ldr	r0, [r7, #0]
 8010510:	f000 fda9 	bl	8011066 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010514:	4603      	mov	r3, r0
 8010516:	461a      	mov	r2, r3
 8010518:	4629      	mov	r1, r5
 801051a:	4620      	mov	r0, r4
 801051c:	f000 fdc3 	bl	80110a6 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	685b      	ldr	r3, [r3, #4]
 8010524:	1d1a      	adds	r2, r3, #4
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	605a      	str	r2, [r3, #4]
 801052a:	e00c      	b.n	8010546 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801052c:	6878      	ldr	r0, [r7, #4]
 801052e:	f7ff fcaf 	bl	800fe90 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 8010532:	4604      	mov	r4, r0
 8010534:	6838      	ldr	r0, [r7, #0]
 8010536:	f000 fd96 	bl	8011066 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 801053a:	4603      	mov	r3, r0
 801053c:	461a      	mov	r2, r3
 801053e:	4621      	mov	r1, r4
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f000 fdc3 	bl	80110cc <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010546:	6878      	ldr	r0, [r7, #4]
 8010548:	f000 fe3c 	bl	80111c4 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>
 801054c:	4603      	mov	r3, r0
      }
 801054e:	4618      	mov	r0, r3
 8010550:	3708      	adds	r7, #8
 8010552:	46bd      	mov	sp, r7
 8010554:	bdb0      	pop	{r4, r5, r7, pc}

08010556 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8010556:	b580      	push	{r7, lr}
 8010558:	b082      	sub	sp, #8
 801055a:	af00      	add	r7, sp, #0
 801055c:	6078      	str	r0, [r7, #4]
 801055e:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	4618      	mov	r0, r3
 8010564:	f7fd f833 	bl	800d5ce <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8010568:	6838      	ldr	r0, [r7, #0]
 801056a:	f000 fe46 	bl	80111fa <_ZNKSt8functionIFvvEEcvbEv>
 801056e:	4603      	mov	r3, r0
 8010570:	2b00      	cmp	r3, #0
 8010572:	d00d      	beq.n	8010590 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010574:	683b      	ldr	r3, [r7, #0]
 8010576:	689b      	ldr	r3, [r3, #8]
 8010578:	6878      	ldr	r0, [r7, #4]
 801057a:	6839      	ldr	r1, [r7, #0]
 801057c:	2202      	movs	r2, #2
 801057e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	68da      	ldr	r2, [r3, #12]
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	689a      	ldr	r2, [r3, #8]
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	609a      	str	r2, [r3, #8]
    }
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	4618      	mov	r0, r3
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}

0801059a <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 801059a:	b580      	push	{r7, lr}
 801059c:	b082      	sub	sp, #8
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	683a      	ldr	r2, [r7, #0]
 80105a8:	4611      	mov	r1, r2
 80105aa:	4618      	mov	r0, r3
 80105ac:	f000 fe35 	bl	801121a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f103 0208 	add.w	r2, r3, #8
 80105b6:	683b      	ldr	r3, [r7, #0]
 80105b8:	3308      	adds	r3, #8
 80105ba:	4619      	mov	r1, r3
 80105bc:	4610      	mov	r0, r2
 80105be:	f000 fe53 	bl	8011268 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	f103 020c 	add.w	r2, r3, #12
 80105c8:	683b      	ldr	r3, [r7, #0]
 80105ca:	330c      	adds	r3, #12
 80105cc:	4619      	mov	r1, r3
 80105ce:	4610      	mov	r0, r2
 80105d0:	f000 fe69 	bl	80112a6 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80105d4:	bf00      	nop
 80105d6:	3708      	adds	r7, #8
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}

080105dc <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80105dc:	b480      	push	{r7}
 80105de:	b083      	sub	sp, #12
 80105e0:	af00      	add	r7, sp, #0
 80105e2:	6078      	str	r0, [r7, #4]
 80105e4:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80105e6:	683b      	ldr	r3, [r7, #0]
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	601a      	str	r2, [r3, #0]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	4618      	mov	r0, r3
 80105f2:	370c      	adds	r7, #12
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr

080105fc <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 80105fc:	b580      	push	{r7, lr}
 80105fe:	b082      	sub	sp, #8
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
 8010604:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	6839      	ldr	r1, [r7, #0]
 801060a:	4618      	mov	r0, r3
 801060c:	f000 fe6a 	bl	80112e4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>
 8010610:	4603      	mov	r3, r0
 8010612:	4618      	mov	r0, r3
 8010614:	3708      	adds	r7, #8
 8010616:	46bd      	mov	sp, r7
 8010618:	bd80      	pop	{r7, pc}

0801061a <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801061a:	b580      	push	{r7, lr}
 801061c:	b082      	sub	sp, #8
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	4618      	mov	r0, r3
 8010626:	f7fa fd9c 	bl	800b162 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 801062a:	4603      	mov	r3, r0
 801062c:	4618      	mov	r0, r3
 801062e:	3708      	adds	r7, #8
 8010630:	46bd      	mov	sp, r7
 8010632:	bd80      	pop	{r7, pc}

08010634 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>:
      key_comp() const
 8010634:	b590      	push	{r4, r7, lr}
 8010636:	b083      	sub	sp, #12
 8010638:	af00      	add	r7, sp, #0
 801063a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4618      	mov	r0, r3
 8010640:	f000 fe67 	bl	8011312 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>
 8010644:	bf00      	nop
 8010646:	4620      	mov	r0, r4
 8010648:	370c      	adds	r7, #12
 801064a:	46bd      	mov	sp, r7
 801064c:	bd90      	pop	{r4, r7, pc}

0801064e <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801064e:	b580      	push	{r7, lr}
 8010650:	b082      	sub	sp, #8
 8010652:	af00      	add	r7, sp, #0
 8010654:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	4618      	mov	r0, r3
 801065c:	f7fa fd92 	bl	800b184 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 8010660:	4603      	mov	r3, r0
 8010662:	4618      	mov	r0, r3
 8010664:	3708      	adds	r7, #8
 8010666:	46bd      	mov	sp, r7
 8010668:	bd80      	pop	{r7, pc}

0801066a <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 801066a:	b480      	push	{r7}
 801066c:	b083      	sub	sp, #12
 801066e:	af00      	add	r7, sp, #0
 8010670:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	370c      	adds	r7, #12
 8010678:	46bd      	mov	sp, r7
 801067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801067e:	4770      	bx	lr

08010680 <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
 8010688:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 801068a:	6838      	ldr	r0, [r7, #0]
 801068c:	f000 fe4c 	bl	8011328 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8010690:	4603      	mov	r3, r0
 8010692:	4619      	mov	r1, r3
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f000 fe52 	bl	801133e <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>
 801069a:	6878      	ldr	r0, [r7, #4]
 801069c:	3708      	adds	r7, #8
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}

080106a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80106a2:	b5b0      	push	{r4, r5, r7, lr}
 80106a4:	b088      	sub	sp, #32
 80106a6:	af00      	add	r7, sp, #0
 80106a8:	60f8      	str	r0, [r7, #12]
 80106aa:	60b9      	str	r1, [r7, #8]
 80106ac:	607a      	str	r2, [r7, #4]
 80106ae:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7f0 fdd8 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80106b6:	4604      	mov	r4, r0
 80106b8:	6838      	ldr	r0, [r7, #0]
 80106ba:	f000 fe53 	bl	8011364 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80106be:	4605      	mov	r5, r0
 80106c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106c2:	f7f0 fde6 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80106c6:	4603      	mov	r3, r0
 80106c8:	462a      	mov	r2, r5
 80106ca:	4621      	mov	r1, r4
 80106cc:	68f8      	ldr	r0, [r7, #12]
 80106ce:	f000 fe54 	bl	801137a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 80106d2:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80106d4:	69f8      	ldr	r0, [r7, #28]
 80106d6:	f7fa fe86 	bl	800b3e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80106da:	4603      	mov	r3, r0
 80106dc:	f107 0010 	add.w	r0, r7, #16
 80106e0:	68ba      	ldr	r2, [r7, #8]
 80106e2:	68f9      	ldr	r1, [r7, #12]
 80106e4:	f7fa fd5c 	bl	800b1a0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
	    if (__res.second)
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d007      	beq.n	80106fe <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80106ee:	6939      	ldr	r1, [r7, #16]
 80106f0:	697a      	ldr	r2, [r7, #20]
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	68f8      	ldr	r0, [r7, #12]
 80106f6:	f000 fe63 	bl	80113c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 80106fa:	4603      	mov	r3, r0
 80106fc:	e00b      	b.n	8010716 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 80106fe:	69f9      	ldr	r1, [r7, #28]
 8010700:	68f8      	ldr	r0, [r7, #12]
 8010702:	f7fa fe83 	bl	800b40c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 8010706:	693a      	ldr	r2, [r7, #16]
 8010708:	f107 0318 	add.w	r3, r7, #24
 801070c:	4611      	mov	r1, r2
 801070e:	4618      	mov	r0, r3
 8010710:	f7fa fe8d 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8010714:	69bb      	ldr	r3, [r7, #24]
      }
 8010716:	4618      	mov	r0, r3
 8010718:	3720      	adds	r7, #32
 801071a:	46bd      	mov	sp, r7
 801071c:	bdb0      	pop	{r4, r5, r7, pc}

0801071e <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801071e:	b480      	push	{r7}
 8010720:	b083      	sub	sp, #12
 8010722:	af00      	add	r7, sp, #0
 8010724:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	4618      	mov	r0, r3
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8010734:	b590      	push	{r4, r7, lr}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	60f8      	str	r0, [r7, #12]
 801073c:	7239      	strb	r1, [r7, #8]
 801073e:	607a      	str	r2, [r7, #4]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	687a      	ldr	r2, [r7, #4]
 8010744:	4621      	mov	r1, r4
 8010746:	4618      	mov	r0, r3
 8010748:	f000 fe89 	bl	801145e <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	4618      	mov	r0, r3
 8010750:	3714      	adds	r7, #20
 8010752:	46bd      	mov	sp, r7
 8010754:	bd90      	pop	{r4, r7, pc}

08010756 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8010756:	b5b0      	push	{r4, r5, r7, lr}
 8010758:	b084      	sub	sp, #16
 801075a:	af00      	add	r7, sp, #0
 801075c:	60f8      	str	r0, [r7, #12]
 801075e:	7239      	strb	r1, [r7, #8]
 8010760:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8010762:	68fc      	ldr	r4, [r7, #12]
 8010764:	6878      	ldr	r0, [r7, #4]
 8010766:	f7ff ffda 	bl	801071e <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 801076a:	4603      	mov	r3, r0
 801076c:	461a      	mov	r2, r3
 801076e:	4629      	mov	r1, r5
 8010770:	4620      	mov	r0, r4
 8010772:	f7ff ffdf 	bl	8010734 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	4618      	mov	r0, r3
 801077a:	3710      	adds	r7, #16
 801077c:	46bd      	mov	sp, r7
 801077e:	bdb0      	pop	{r4, r5, r7, pc}

08010780 <_ZNSaIP13StreamMessageEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6878      	ldr	r0, [r7, #4]
 801078a:	f000 fe80 	bl	801148e <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	4618      	mov	r0, r3
 8010792:	3708      	adds	r7, #8
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}

08010798 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010798:	b480      	push	{r7}
 801079a:	b083      	sub	sp, #12
 801079c:	af00      	add	r7, sp, #0
 801079e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	601a      	str	r2, [r3, #0]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	2200      	movs	r2, #0
 80107aa:	605a      	str	r2, [r3, #4]
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	2200      	movs	r2, #0
 80107b0:	609a      	str	r2, [r3, #8]
	{ }
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4618      	mov	r0, r3
 80107b6:	370c      	adds	r7, #12
 80107b8:	46bd      	mov	sp, r7
 80107ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107be:	4770      	bx	lr

080107c0 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80107c0:	b580      	push	{r7, lr}
 80107c2:	b084      	sub	sp, #16
 80107c4:	af00      	add	r7, sp, #0
 80107c6:	60f8      	str	r0, [r7, #12]
 80107c8:	60b9      	str	r1, [r7, #8]
 80107ca:	607a      	str	r2, [r7, #4]
	if (__p)
 80107cc:	68bb      	ldr	r3, [r7, #8]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d005      	beq.n	80107de <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	687a      	ldr	r2, [r7, #4]
 80107d6:	68b9      	ldr	r1, [r7, #8]
 80107d8:	4618      	mov	r0, r3
 80107da:	f000 fe63 	bl	80114a4 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>
      }
 80107de:	bf00      	nop
 80107e0:	3710      	adds	r7, #16
 80107e2:	46bd      	mov	sp, r7
 80107e4:	bd80      	pop	{r7, pc}

080107e6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80107e6:	b480      	push	{r7}
 80107e8:	b083      	sub	sp, #12
 80107ea:	af00      	add	r7, sp, #0
 80107ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	4618      	mov	r0, r3
 80107f2:	370c      	adds	r7, #12
 80107f4:	46bd      	mov	sp, r7
 80107f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107fa:	4770      	bx	lr

080107fc <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	60f8      	str	r0, [r7, #12]
 8010804:	60b9      	str	r1, [r7, #8]
 8010806:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8010808:	68b9      	ldr	r1, [r7, #8]
 801080a:	68f8      	ldr	r0, [r7, #12]
 801080c:	f000 fe69 	bl	80114e2 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>
    }
 8010810:	bf00      	nop
 8010812:	3710      	adds	r7, #16
 8010814:	46bd      	mov	sp, r7
 8010816:	bd80      	pop	{r7, pc}

08010818 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010818:	b480      	push	{r7}
 801081a:	b083      	sub	sp, #12
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	4618      	mov	r0, r3
 8010824:	370c      	adds	r7, #12
 8010826:	46bd      	mov	sp, r7
 8010828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082c:	4770      	bx	lr

0801082e <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 801082e:	b5b0      	push	{r4, r5, r7, lr}
 8010830:	b082      	sub	sp, #8
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
 8010836:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	685a      	ldr	r2, [r3, #4]
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	689b      	ldr	r3, [r3, #8]
 8010840:	429a      	cmp	r2, r3
 8010842:	d011      	beq.n	8010868 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010844:	687c      	ldr	r4, [r7, #4]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	685d      	ldr	r5, [r3, #4]
 801084a:	6838      	ldr	r0, [r7, #0]
 801084c:	f000 fe5f 	bl	801150e <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010850:	4603      	mov	r3, r0
 8010852:	461a      	mov	r2, r3
 8010854:	4629      	mov	r1, r5
 8010856:	4620      	mov	r0, r4
 8010858:	f000 fe79 	bl	801154e <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	685b      	ldr	r3, [r3, #4]
 8010860:	1d1a      	adds	r2, r3, #4
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	605a      	str	r2, [r3, #4]
 8010866:	e00c      	b.n	8010882 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f7ff fca0 	bl	80101ae <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 801086e:	4604      	mov	r4, r0
 8010870:	6838      	ldr	r0, [r7, #0]
 8010872:	f000 fe4c 	bl	801150e <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010876:	4603      	mov	r3, r0
 8010878:	461a      	mov	r2, r3
 801087a:	4621      	mov	r1, r4
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f000 fe79 	bl	8011574 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010882:	6878      	ldr	r0, [r7, #4]
 8010884:	f000 fef2 	bl	801166c <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>
 8010888:	4603      	mov	r3, r0
      }
 801088a:	4618      	mov	r0, r3
 801088c:	3708      	adds	r7, #8
 801088e:	46bd      	mov	sp, r7
 8010890:	bdb0      	pop	{r4, r5, r7, pc}

08010892 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010892:	b480      	push	{r7}
 8010894:	b083      	sub	sp, #12
 8010896:	af00      	add	r7, sp, #0
 8010898:	6078      	str	r0, [r7, #4]
 801089a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801089c:	683b      	ldr	r3, [r7, #0]
 801089e:	681a      	ldr	r2, [r3, #0]
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	601a      	str	r2, [r3, #0]
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	4618      	mov	r0, r3
 80108a8:	370c      	adds	r7, #12
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr

080108b2 <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80108b2:	b590      	push	{r4, r7, lr}
 80108b4:	b083      	sub	sp, #12
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	6078      	str	r0, [r7, #4]
 80108ba:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80108bc:	6838      	ldr	r0, [r7, #0]
 80108be:	f000 fef0 	bl	80116a2 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 80108c2:	4603      	mov	r3, r0
 80108c4:	681c      	ldr	r4, [r3, #0]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	4619      	mov	r1, r3
 80108ca:	2004      	movs	r0, #4
 80108cc:	f7ef fd30 	bl	8000330 <_ZnwjPv>
 80108d0:	4603      	mov	r3, r0
 80108d2:	601c      	str	r4, [r3, #0]
 80108d4:	4618      	mov	r0, r3
 80108d6:	370c      	adds	r7, #12
 80108d8:	46bd      	mov	sp, r7
 80108da:	bd90      	pop	{r4, r7, pc}

080108dc <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80108dc:	b580      	push	{r7, lr}
 80108de:	b084      	sub	sp, #16
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80108e8:	6878      	ldr	r0, [r7, #4]
 80108ea:	f000 feda 	bl	80116a2 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 80108ee:	4603      	mov	r3, r0
 80108f0:	4619      	mov	r1, r3
 80108f2:	68b8      	ldr	r0, [r7, #8]
 80108f4:	f7ff ffdd 	bl	80108b2 <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	}
 80108f8:	bf00      	nop
 80108fa:	3710      	adds	r7, #16
 80108fc:	46bd      	mov	sp, r7
 80108fe:	bd80      	pop	{r7, pc}

08010900 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010900:	b5b0      	push	{r4, r5, r7, lr}
 8010902:	b08c      	sub	sp, #48	; 0x30
 8010904:	af00      	add	r7, sp, #0
 8010906:	60f8      	str	r0, [r7, #12]
 8010908:	60b9      	str	r1, [r7, #8]
 801090a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801090c:	4a39      	ldr	r2, [pc, #228]	; (80109f4 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 801090e:	2101      	movs	r1, #1
 8010910:	68f8      	ldr	r0, [r7, #12]
 8010912:	f000 fed1 	bl	80116b8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>
 8010916:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f7ff fba9 	bl	801007c <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 801092a:	4603      	mov	r3, r0
 801092c:	617b      	str	r3, [r7, #20]
 801092e:	f107 0214 	add.w	r2, r7, #20
 8010932:	f107 0308 	add.w	r3, r7, #8
 8010936:	4611      	mov	r1, r2
 8010938:	4618      	mov	r0, r3
 801093a:	f000 ff04 	bl	8011746 <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801093e:	4603      	mov	r3, r0
 8010940:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010942:	68fb      	ldr	r3, [r7, #12]
 8010944:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010946:	4618      	mov	r0, r3
 8010948:	f000 ff12 	bl	8011770 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>
 801094c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801094e:	69fb      	ldr	r3, [r7, #28]
 8010950:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010952:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010954:	6a3b      	ldr	r3, [r7, #32]
 8010956:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010958:	69fa      	ldr	r2, [r7, #28]
 801095a:	18d5      	adds	r5, r2, r3
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f000 fea0 	bl	80116a2 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010962:	4603      	mov	r3, r0
 8010964:	461a      	mov	r2, r3
 8010966:	4629      	mov	r1, r5
 8010968:	4620      	mov	r0, r4
 801096a:	f7ff ffb7 	bl	80108dc <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801096e:	2300      	movs	r3, #0
 8010970:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010972:	f107 0308 	add.w	r3, r7, #8
 8010976:	4618      	mov	r0, r3
 8010978:	f7fd fa7e 	bl	800de78 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 801097c:	4603      	mov	r3, r0
 801097e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff ff2f 	bl	80107e6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010988:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801098a:	69fa      	ldr	r2, [r7, #28]
 801098c:	4621      	mov	r1, r4
 801098e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010990:	f000 ff02 	bl	8011798 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010994:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8010996:	69bb      	ldr	r3, [r7, #24]
 8010998:	3304      	adds	r3, #4
 801099a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801099c:	f107 0308 	add.w	r3, r7, #8
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fd fa69 	bl	800de78 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 80109a6:	4603      	mov	r3, r0
 80109a8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	4618      	mov	r0, r3
 80109ae:	f7ff ff1a 	bl	80107e6 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 80109b2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80109b4:	69ba      	ldr	r2, [r7, #24]
 80109b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109b8:	4620      	mov	r0, r4
 80109ba:	f000 feed 	bl	8011798 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80109be:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80109c0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	689a      	ldr	r2, [r3, #8]
 80109c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80109cc:	461a      	mov	r2, r3
 80109ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109d0:	f7ff fef6 	bl	80107c0 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	69fa      	ldr	r2, [r7, #28]
 80109d8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	69ba      	ldr	r2, [r7, #24]
 80109de:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80109e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109e2:	009b      	lsls	r3, r3, #2
 80109e4:	69fa      	ldr	r2, [r7, #28]
 80109e6:	441a      	add	r2, r3
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	609a      	str	r2, [r3, #8]
    }
 80109ec:	bf00      	nop
 80109ee:	3730      	adds	r7, #48	; 0x30
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bdb0      	pop	{r4, r5, r7, pc}
 80109f4:	08020d08 	.word	0x08020d08

080109f8 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 80109f8:	b480      	push	{r7}
 80109fa:	b083      	sub	sp, #12
 80109fc:	af00      	add	r7, sp, #0
 80109fe:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010a00:	2301      	movs	r3, #1
 8010a02:	4618      	mov	r0, r3
 8010a04:	370c      	adds	r7, #12
 8010a06:	46bd      	mov	sp, r7
 8010a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a0c:	4770      	bx	lr

08010a0e <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8010a0e:	b480      	push	{r7}
 8010a10:	b083      	sub	sp, #12
 8010a12:	af00      	add	r7, sp, #0
 8010a14:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	4618      	mov	r0, r3
 8010a1a:	370c      	adds	r7, #12
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a22:	4770      	bx	lr

08010a24 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010a24:	b590      	push	{r4, r7, lr}
 8010a26:	b083      	sub	sp, #12
 8010a28:	af00      	add	r7, sp, #0
 8010a2a:	6078      	str	r0, [r7, #4]
 8010a2c:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010a2e:	6838      	ldr	r0, [r7, #0]
 8010a30:	f7ff ffed 	bl	8010a0e <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8010a34:	4603      	mov	r3, r0
 8010a36:	4622      	mov	r2, r4
 8010a38:	4619      	mov	r1, r3
 8010a3a:	6878      	ldr	r0, [r7, #4]
 8010a3c:	f000 fec0 	bl	80117c0 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8010a40:	bf00      	nop
 8010a42:	370c      	adds	r7, #12
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd90      	pop	{r4, r7, pc}

08010a48 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010a48:	b580      	push	{r7, lr}
 8010a4a:	b082      	sub	sp, #8
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f000 fece 	bl	80117f2 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010a56:	4603      	mov	r3, r0
 8010a58:	4618      	mov	r0, r3
 8010a5a:	f000 feda 	bl	8011812 <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 8010a5e:	bf00      	nop
      }
 8010a60:	3708      	adds	r7, #8
 8010a62:	46bd      	mov	sp, r7
 8010a64:	bd80      	pop	{r7, pc}

08010a66 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010a66:	b590      	push	{r4, r7, lr}
 8010a68:	b085      	sub	sp, #20
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	60f8      	str	r0, [r7, #12]
 8010a6e:	60b9      	str	r1, [r7, #8]
 8010a70:	4613      	mov	r3, r2
 8010a72:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010a74:	79fb      	ldrb	r3, [r7, #7]
 8010a76:	2b01      	cmp	r3, #1
 8010a78:	d109      	bne.n	8010a8e <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010a7a:	68b8      	ldr	r0, [r7, #8]
 8010a7c:	f000 feb9 	bl	80117f2 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010a80:	4604      	mov	r4, r0
 8010a82:	68f8      	ldr	r0, [r7, #12]
 8010a84:	f000 fed5 	bl	8011832 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	601c      	str	r4, [r3, #0]
	    break;
 8010a8c:	e005      	b.n	8010a9a <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010a8e:	79fb      	ldrb	r3, [r7, #7]
 8010a90:	461a      	mov	r2, r3
 8010a92:	68b9      	ldr	r1, [r7, #8]
 8010a94:	68f8      	ldr	r0, [r7, #12]
 8010a96:	f000 fed8 	bl	801184a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8010a9a:	2300      	movs	r3, #0
      }
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	3714      	adds	r7, #20
 8010aa0:	46bd      	mov	sp, r7
 8010aa2:	bd90      	pop	{r4, r7, pc}

08010aa4 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>:
      _M_get() noexcept
 8010aa4:	b480      	push	{r7}
 8010aa6:	b083      	sub	sp, #12
 8010aa8:	af00      	add	r7, sp, #0
 8010aaa:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	370c      	adds	r7, #12
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr

08010aba <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010aba:	b480      	push	{r7}
 8010abc:	b083      	sub	sp, #12
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
 8010ac2:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	681a      	ldr	r2, [r3, #0]
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	601a      	str	r2, [r3, #0]
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	370c      	adds	r7, #12
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010ada:	b580      	push	{r7, lr}
 8010adc:	b082      	sub	sp, #8
 8010ade:	af00      	add	r7, sp, #0
 8010ae0:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f000 fedc 	bl	80118a0 <_ZNSaIP5FieldIJEEEC1Ev>
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	4618      	mov	r0, r3
 8010aec:	f000 fee4 	bl	80118b8 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	4618      	mov	r0, r3
 8010af4:	3708      	adds	r7, #8
 8010af6:	46bd      	mov	sp, r7
 8010af8:	bd80      	pop	{r7, pc}

08010afa <_ZNSaIP5FieldIJEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010afa:	b480      	push	{r7}
 8010afc:	b083      	sub	sp, #12
 8010afe:	af00      	add	r7, sp, #0
 8010b00:	6078      	str	r0, [r7, #4]
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	4618      	mov	r0, r3
 8010b06:	370c      	adds	r7, #12
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0e:	4770      	bx	lr

08010b10 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010b10:	b580      	push	{r7, lr}
 8010b12:	b082      	sub	sp, #8
 8010b14:	af00      	add	r7, sp, #0
 8010b16:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	689a      	ldr	r2, [r3, #8]
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	1ad3      	subs	r3, r2, r3
 8010b26:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8010b28:	461a      	mov	r2, r3
 8010b2a:	6878      	ldr	r0, [r7, #4]
 8010b2c:	f000 fed8 	bl	80118e0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      }
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7ff fb4c 	bl	80101d0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	3708      	adds	r7, #8
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010b42:	b5b0      	push	{r4, r5, r7, lr}
 8010b44:	b082      	sub	sp, #8
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010b4a:	687b      	ldr	r3, [r7, #4]
 8010b4c:	681c      	ldr	r4, [r3, #0]
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	4618      	mov	r0, r3
 8010b56:	f000 fed6 	bl	8011906 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8010b5a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	4629      	mov	r1, r5
 8010b60:	4620      	mov	r0, r4
 8010b62:	f000 fedb 	bl	801191c <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>
      }
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f7ff ffd1 	bl	8010b10 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	4618      	mov	r0, r3
 8010b72:	3708      	adds	r7, #8
 8010b74:	46bd      	mov	sp, r7
 8010b76:	bdb0      	pop	{r4, r5, r7, pc}

08010b78 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010b78:	b590      	push	{r4, r7, lr}
 8010b7a:	b085      	sub	sp, #20
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	1c5a      	adds	r2, r3, #1
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010b8c:	2008      	movs	r0, #8
 8010b8e:	f00f fd45 	bl	802061c <_Znwj>
 8010b92:	4603      	mov	r3, r0
 8010b94:	461c      	mov	r4, r3
 8010b96:	6839      	ldr	r1, [r7, #0]
 8010b98:	4620      	mov	r0, r4
 8010b9a:	f000 fedd 	bl	8011958 <_ZN5FieldIJhEEC1EPh>
 8010b9e:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	f103 0208 	add.w	r2, r3, #8
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	60bb      	str	r3, [r7, #8]
 8010baa:	f107 0308 	add.w	r3, r7, #8
 8010bae:	4619      	mov	r1, r3
 8010bb0:	4610      	mov	r0, r2
 8010bb2:	f000 fee7 	bl	8011984 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8010bb6:	bf00      	nop
    }
 8010bb8:	3714      	adds	r7, #20
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	bd90      	pop	{r4, r7, pc}
	...

08010bc0 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8010bc0:	b590      	push	{r4, r7, lr}
 8010bc2:	b08b      	sub	sp, #44	; 0x2c
 8010bc4:	af02      	add	r7, sp, #8
 8010bc6:	6078      	str	r0, [r7, #4]
 8010bc8:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8010bca:	6839      	ldr	r1, [r7, #0]
 8010bcc:	6878      	ldr	r0, [r7, #4]
 8010bce:	f000 feea 	bl	80119a6 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 8010bd2:	4603      	mov	r3, r0
 8010bd4:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f7f4 fab9 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8010bdc:	4603      	mov	r3, r0
 8010bde:	60fb      	str	r3, [r7, #12]
 8010be0:	f107 020c 	add.w	r2, r7, #12
 8010be4:	f107 0308 	add.w	r3, r7, #8
 8010be8:	4611      	mov	r1, r2
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7f4 fabc 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d112      	bne.n	8010c1c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 8010bf6:	6878      	ldr	r0, [r7, #4]
 8010bf8:	f000 fee4 	bl	80119c4 <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 8010bfc:	f107 0308 	add.w	r3, r7, #8
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7f4 fad6 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8010c06:	4603      	mov	r3, r0
 8010c08:	461a      	mov	r2, r3
 8010c0a:	f107 0310 	add.w	r3, r7, #16
 8010c0e:	6839      	ldr	r1, [r7, #0]
 8010c10:	4618      	mov	r0, r3
 8010c12:	f000 fee4 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 8010c16:	4603      	mov	r3, r0
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d001      	beq.n	8010c20 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 8010c1c:	2301      	movs	r3, #1
 8010c1e:	e000      	b.n	8010c22 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 8010c20:	2300      	movs	r3, #0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d01b      	beq.n	8010c5e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010c26:	687c      	ldr	r4, [r7, #4]
 8010c28:	f107 0208 	add.w	r2, r7, #8
 8010c2c:	f107 0314 	add.w	r3, r7, #20
 8010c30:	4611      	mov	r1, r2
 8010c32:	4618      	mov	r0, r3
 8010c34:	f000 fef7 	bl	8011a26 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 8010c38:	f107 0318 	add.w	r3, r7, #24
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f000 fee2 	bl	8011a08 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010c44:	f107 0218 	add.w	r2, r7, #24
 8010c48:	f107 031c 	add.w	r3, r7, #28
 8010c4c:	9300      	str	r3, [sp, #0]
 8010c4e:	4613      	mov	r3, r2
 8010c50:	4a08      	ldr	r2, [pc, #32]	; (8010c74 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 8010c52:	6979      	ldr	r1, [r7, #20]
 8010c54:	4620      	mov	r0, r4
 8010c56:	f000 fef6 	bl	8011a46 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8010c5e:	f107 0308 	add.w	r3, r7, #8
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7f4 faa5 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	3304      	adds	r3, #4
      }
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3724      	adds	r7, #36	; 0x24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd90      	pop	{r4, r7, pc}
 8010c74:	08020d70 	.word	0x08020d70

08010c78 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010c78:	b590      	push	{r4, r7, lr}
 8010c7a:	b087      	sub	sp, #28
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	60f8      	str	r0, [r7, #12]
 8010c80:	60b9      	str	r1, [r7, #8]
 8010c82:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	1c5a      	adds	r2, r3, #1
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010c8e:	2008      	movs	r0, #8
 8010c90:	f00f fcc4 	bl	802061c <_Znwj>
 8010c94:	4603      	mov	r3, r0
 8010c96:	461c      	mov	r4, r3
 8010c98:	68b9      	ldr	r1, [r7, #8]
 8010c9a:	4620      	mov	r0, r4
 8010c9c:	f000 fe5c 	bl	8011958 <_ZN5FieldIJhEEC1EPh>
 8010ca0:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	f103 0208 	add.w	r2, r3, #8
 8010ca8:	697b      	ldr	r3, [r7, #20]
 8010caa:	613b      	str	r3, [r7, #16]
 8010cac:	f107 0310 	add.w	r3, r7, #16
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	4610      	mov	r0, r2
 8010cb4:	f000 fe66 	bl	8011984 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010cb8:	6879      	ldr	r1, [r7, #4]
 8010cba:	68f8      	ldr	r0, [r7, #12]
 8010cbc:	f000 ff01 	bl	8011ac2 <_ZN6Packet5buildItJEEEvPT_DpPT0_>
    }
 8010cc0:	bf00      	nop
 8010cc2:	371c      	adds	r7, #28
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd90      	pop	{r4, r7, pc}

08010cc8 <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010cc8:	b590      	push	{r4, r7, lr}
 8010cca:	b087      	sub	sp, #28
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	60f8      	str	r0, [r7, #12]
 8010cd0:	60b9      	str	r1, [r7, #8]
 8010cd2:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	1c5a      	adds	r2, r3, #1
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010cde:	2008      	movs	r0, #8
 8010ce0:	f00f fc9c 	bl	802061c <_Znwj>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	461c      	mov	r4, r3
 8010ce8:	68b9      	ldr	r1, [r7, #8]
 8010cea:	4620      	mov	r0, r4
 8010cec:	f000 fe34 	bl	8011958 <_ZN5FieldIJhEEC1EPh>
 8010cf0:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	f103 0208 	add.w	r2, r3, #8
 8010cf8:	697b      	ldr	r3, [r7, #20]
 8010cfa:	613b      	str	r3, [r7, #16]
 8010cfc:	f107 0310 	add.w	r3, r7, #16
 8010d00:	4619      	mov	r1, r3
 8010d02:	4610      	mov	r0, r2
 8010d04:	f000 fe3e 	bl	8011984 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010d08:	6879      	ldr	r1, [r7, #4]
 8010d0a:	68f8      	ldr	r0, [r7, #12]
 8010d0c:	f000 fefc 	bl	8011b08 <_ZN6Packet5buildImJEEEvPT_DpPT0_>
    }
 8010d10:	bf00      	nop
 8010d12:	371c      	adds	r7, #28
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd90      	pop	{r4, r7, pc}

08010d18 <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010d18:	b590      	push	{r4, r7, lr}
 8010d1a:	b087      	sub	sp, #28
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	60f8      	str	r0, [r7, #12]
 8010d20:	60b9      	str	r1, [r7, #8]
 8010d22:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	1c5a      	adds	r2, r3, #1
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010d2e:	2008      	movs	r0, #8
 8010d30:	f00f fc74 	bl	802061c <_Znwj>
 8010d34:	4603      	mov	r3, r0
 8010d36:	461c      	mov	r4, r3
 8010d38:	68b9      	ldr	r1, [r7, #8]
 8010d3a:	4620      	mov	r0, r4
 8010d3c:	f000 fe0c 	bl	8011958 <_ZN5FieldIJhEEC1EPh>
 8010d40:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	f103 0208 	add.w	r2, r3, #8
 8010d48:	697b      	ldr	r3, [r7, #20]
 8010d4a:	613b      	str	r3, [r7, #16]
 8010d4c:	f107 0310 	add.w	r3, r7, #16
 8010d50:	4619      	mov	r1, r3
 8010d52:	4610      	mov	r0, r2
 8010d54:	f000 fe16 	bl	8011984 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010d58:	6879      	ldr	r1, [r7, #4]
 8010d5a:	68f8      	ldr	r0, [r7, #12]
 8010d5c:	f7ff ff0c 	bl	8010b78 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
    }
 8010d60:	bf00      	nop
 8010d62:	371c      	adds	r7, #28
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd90      	pop	{r4, r7, pc}

08010d68 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>:
      _M_get() noexcept
 8010d68:	b480      	push	{r7}
 8010d6a:	b083      	sub	sp, #12
 8010d6c:	af00      	add	r7, sp, #0
 8010d6e:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	4618      	mov	r0, r3
 8010d74:	370c      	adds	r7, #12
 8010d76:	46bd      	mov	sp, r7
 8010d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d7c:	4770      	bx	lr

08010d7e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010d7e:	b5b0      	push	{r4, r5, r7, lr}
 8010d80:	b084      	sub	sp, #16
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
 8010d86:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010d88:	6878      	ldr	r0, [r7, #4]
 8010d8a:	f000 fee0 	bl	8011b4e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010d8e:	4604      	mov	r4, r0
 8010d90:	6878      	ldr	r0, [r7, #4]
 8010d92:	f000 fee8 	bl	8011b66 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010d96:	4602      	mov	r2, r0
 8010d98:	683b      	ldr	r3, [r7, #0]
 8010d9a:	4621      	mov	r1, r4
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 feee 	bl	8011b7e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010da2:	4603      	mov	r3, r0
 8010da4:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f000 f828 	bl	8010dfc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010dac:	4603      	mov	r3, r0
 8010dae:	60fb      	str	r3, [r7, #12]
 8010db0:	f107 020c 	add.w	r2, r7, #12
 8010db4:	f107 0308 	add.w	r3, r7, #8
 8010db8:	4611      	mov	r1, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f000 f82f 	bl	8010e1e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8010dc0:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d110      	bne.n	8010de8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010dc6:	687c      	ldr	r4, [r7, #4]
 8010dc8:	683b      	ldr	r3, [r7, #0]
 8010dca:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7f7 fedb 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010dd4:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	461a      	mov	r2, r3
 8010dda:	4629      	mov	r1, r5
 8010ddc:	4620      	mov	r0, r4
 8010dde:	f7f0 f87c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010de2:	4603      	mov	r3, r0
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d004      	beq.n	8010df2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010de8:	6878      	ldr	r0, [r7, #4]
 8010dea:	f000 f807 	bl	8010dfc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010dee:	4603      	mov	r3, r0
 8010df0:	e000      	b.n	8010df4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010df2:	68bb      	ldr	r3, [r7, #8]
    }
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bdb0      	pop	{r4, r5, r7, pc}

08010dfc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b084      	sub	sp, #16
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	1d1a      	adds	r2, r3, #4
 8010e08:	f107 030c 	add.w	r3, r7, #12
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f000 fee8 	bl	8011be4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8010e14:	68fb      	ldr	r3, [r7, #12]
 8010e16:	4618      	mov	r0, r3
 8010e18:	3710      	adds	r7, #16
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010e1e:	b480      	push	{r7}
 8010e20:	b083      	sub	sp, #12
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	6078      	str	r0, [r7, #4]
 8010e26:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681a      	ldr	r2, [r3, #0]
 8010e2c:	683b      	ldr	r3, [r7, #0]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	429a      	cmp	r2, r3
 8010e32:	bf0c      	ite	eq
 8010e34:	2301      	moveq	r3, #1
 8010e36:	2300      	movne	r3, #0
 8010e38:	b2db      	uxtb	r3, r3
 8010e3a:	4618      	mov	r0, r3
 8010e3c:	370c      	adds	r7, #12
 8010e3e:	46bd      	mov	sp, r7
 8010e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e44:	4770      	bx	lr

08010e46 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010e46:	b5b0      	push	{r4, r5, r7, lr}
 8010e48:	b084      	sub	sp, #16
 8010e4a:	af00      	add	r7, sp, #0
 8010e4c:	6078      	str	r0, [r7, #4]
 8010e4e:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f000 fed6 	bl	8011c02 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010e56:	4604      	mov	r4, r0
 8010e58:	6878      	ldr	r0, [r7, #4]
 8010e5a:	f000 fede 	bl	8011c1a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010e5e:	4602      	mov	r2, r0
 8010e60:	683b      	ldr	r3, [r7, #0]
 8010e62:	4621      	mov	r1, r4
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 fee4 	bl	8011c32 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010e6e:	6878      	ldr	r0, [r7, #4]
 8010e70:	f000 f828 	bl	8010ec4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010e74:	4603      	mov	r3, r0
 8010e76:	60fb      	str	r3, [r7, #12]
 8010e78:	f107 020c 	add.w	r2, r7, #12
 8010e7c:	f107 0308 	add.w	r3, r7, #8
 8010e80:	4611      	mov	r1, r2
 8010e82:	4618      	mov	r0, r3
 8010e84:	f000 f82f 	bl	8010ee6 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8010e88:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d110      	bne.n	8010eb0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010e8e:	687c      	ldr	r4, [r7, #4]
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010e94:	68bb      	ldr	r3, [r7, #8]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7f3 f998 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010e9c:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	461a      	mov	r2, r3
 8010ea2:	4629      	mov	r1, r5
 8010ea4:	4620      	mov	r0, r4
 8010ea6:	f7f0 f818 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d004      	beq.n	8010eba <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010eb0:	6878      	ldr	r0, [r7, #4]
 8010eb2:	f000 f807 	bl	8010ec4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	e000      	b.n	8010ebc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010eba:	68bb      	ldr	r3, [r7, #8]
    }
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	3710      	adds	r7, #16
 8010ec0:	46bd      	mov	sp, r7
 8010ec2:	bdb0      	pop	{r4, r5, r7, pc}

08010ec4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010ec4:	b580      	push	{r7, lr}
 8010ec6:	b084      	sub	sp, #16
 8010ec8:	af00      	add	r7, sp, #0
 8010eca:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	1d1a      	adds	r2, r3, #4
 8010ed0:	f107 030c 	add.w	r3, r7, #12
 8010ed4:	4611      	mov	r1, r2
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f000 fede 	bl	8011c98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3710      	adds	r7, #16
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	bd80      	pop	{r7, pc}

08010ee6 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010ee6:	b480      	push	{r7}
 8010ee8:	b083      	sub	sp, #12
 8010eea:	af00      	add	r7, sp, #0
 8010eec:	6078      	str	r0, [r7, #4]
 8010eee:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681a      	ldr	r2, [r3, #0]
 8010ef4:	683b      	ldr	r3, [r7, #0]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	429a      	cmp	r2, r3
 8010efa:	bf0c      	ite	eq
 8010efc:	2301      	moveq	r3, #1
 8010efe:	2300      	movne	r3, #0
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	4618      	mov	r0, r3
 8010f04:	370c      	adds	r7, #12
 8010f06:	46bd      	mov	sp, r7
 8010f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0c:	4770      	bx	lr

08010f0e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010f0e:	b480      	push	{r7}
 8010f10:	b083      	sub	sp, #12
 8010f12:	af00      	add	r7, sp, #0
 8010f14:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010f16:	2301      	movs	r3, #1
 8010f18:	4618      	mov	r0, r3
 8010f1a:	370c      	adds	r7, #12
 8010f1c:	46bd      	mov	sp, r7
 8010f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f22:	4770      	bx	lr

08010f24 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010f24:	b480      	push	{r7}
 8010f26:	b083      	sub	sp, #12
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	4618      	mov	r0, r3
 8010f30:	370c      	adds	r7, #12
 8010f32:	46bd      	mov	sp, r7
 8010f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f38:	4770      	bx	lr

08010f3a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010f3a:	b590      	push	{r4, r7, lr}
 8010f3c:	b083      	sub	sp, #12
 8010f3e:	af00      	add	r7, sp, #0
 8010f40:	6078      	str	r0, [r7, #4]
 8010f42:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010f44:	6838      	ldr	r0, [r7, #0]
 8010f46:	f7ff ffed 	bl	8010f24 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8010f4a:	4603      	mov	r3, r0
 8010f4c:	4622      	mov	r2, r4
 8010f4e:	4619      	mov	r1, r3
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 feb0 	bl	8011cb6 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8010f56:	bf00      	nop
 8010f58:	370c      	adds	r7, #12
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd90      	pop	{r4, r7, pc}

08010f5e <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010f5e:	b580      	push	{r7, lr}
 8010f60:	b082      	sub	sp, #8
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010f66:	6878      	ldr	r0, [r7, #4]
 8010f68:	f000 feba 	bl	8011ce0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010f6c:	4603      	mov	r3, r0
 8010f6e:	4618      	mov	r0, r3
 8010f70:	f000 fec6 	bl	8011d00 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8010f74:	bf00      	nop
      }
 8010f76:	3708      	adds	r7, #8
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010f7c:	b590      	push	{r4, r7, lr}
 8010f7e:	b085      	sub	sp, #20
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	4613      	mov	r3, r2
 8010f88:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010f8a:	79fb      	ldrb	r3, [r7, #7]
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d109      	bne.n	8010fa4 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010f90:	68b8      	ldr	r0, [r7, #8]
 8010f92:	f000 fea5 	bl	8011ce0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010f96:	4604      	mov	r4, r0
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f000 fec1 	bl	8011d20 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	601c      	str	r4, [r3, #0]
	    break;
 8010fa2:	e005      	b.n	8010fb0 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010fa4:	79fb      	ldrb	r3, [r7, #7]
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	68b9      	ldr	r1, [r7, #8]
 8010faa:	68f8      	ldr	r0, [r7, #12]
 8010fac:	f000 fec4 	bl	8011d38 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8010fb0:	2300      	movs	r3, #0
      }
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3714      	adds	r7, #20
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd90      	pop	{r4, r7, pc}

08010fba <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010fba:	b480      	push	{r7}
 8010fbc:	b083      	sub	sp, #12
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	370c      	adds	r7, #12
 8010fc8:	46bd      	mov	sp, r7
 8010fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fce:	4770      	bx	lr

08010fd0 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010fd0:	b480      	push	{r7}
 8010fd2:	b083      	sub	sp, #12
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	4618      	mov	r0, r3
 8010fdc:	370c      	adds	r7, #12
 8010fde:	46bd      	mov	sp, r7
 8010fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe4:	4770      	bx	lr

08010fe6 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010fe6:	b590      	push	{r4, r7, lr}
 8010fe8:	b083      	sub	sp, #12
 8010fea:	af00      	add	r7, sp, #0
 8010fec:	6078      	str	r0, [r7, #4]
 8010fee:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010ff0:	6838      	ldr	r0, [r7, #0]
 8010ff2:	f7ff ffed 	bl	8010fd0 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	4622      	mov	r2, r4
 8010ffa:	4619      	mov	r1, r3
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 fec6 	bl	8011d8e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8011002:	bf00      	nop
 8011004:	370c      	adds	r7, #12
 8011006:	46bd      	mov	sp, r7
 8011008:	bd90      	pop	{r4, r7, pc}

0801100a <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801100a:	b580      	push	{r7, lr}
 801100c:	b082      	sub	sp, #8
 801100e:	af00      	add	r7, sp, #0
 8011010:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011012:	6878      	ldr	r0, [r7, #4]
 8011014:	f000 fed0 	bl	8011db8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8011018:	4603      	mov	r3, r0
 801101a:	4618      	mov	r0, r3
 801101c:	f000 fedc 	bl	8011dd8 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8011020:	bf00      	nop
      }
 8011022:	3708      	adds	r7, #8
 8011024:	46bd      	mov	sp, r7
 8011026:	bd80      	pop	{r7, pc}

08011028 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011028:	b590      	push	{r4, r7, lr}
 801102a:	b085      	sub	sp, #20
 801102c:	af00      	add	r7, sp, #0
 801102e:	60f8      	str	r0, [r7, #12]
 8011030:	60b9      	str	r1, [r7, #8]
 8011032:	4613      	mov	r3, r2
 8011034:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011036:	79fb      	ldrb	r3, [r7, #7]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d109      	bne.n	8011050 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 801103c:	68b8      	ldr	r0, [r7, #8]
 801103e:	f000 febb 	bl	8011db8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8011042:	4604      	mov	r4, r0
 8011044:	68f8      	ldr	r0, [r7, #12]
 8011046:	f000 fed7 	bl	8011df8 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 801104a:	4603      	mov	r3, r0
 801104c:	601c      	str	r4, [r3, #0]
	    break;
 801104e:	e005      	b.n	801105c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8011050:	79fb      	ldrb	r3, [r7, #7]
 8011052:	461a      	mov	r2, r3
 8011054:	68b9      	ldr	r1, [r7, #8]
 8011056:	68f8      	ldr	r0, [r7, #12]
 8011058:	f000 feda 	bl	8011e10 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 801105c:	2300      	movs	r3, #0
      }
 801105e:	4618      	mov	r0, r3
 8011060:	3714      	adds	r7, #20
 8011062:	46bd      	mov	sp, r7
 8011064:	bd90      	pop	{r4, r7, pc}

08011066 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011066:	b480      	push	{r7}
 8011068:	b083      	sub	sp, #12
 801106a:	af00      	add	r7, sp, #0
 801106c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	4618      	mov	r0, r3
 8011072:	370c      	adds	r7, #12
 8011074:	46bd      	mov	sp, r7
 8011076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107a:	4770      	bx	lr

0801107c <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801107c:	b590      	push	{r4, r7, lr}
 801107e:	b083      	sub	sp, #12
 8011080:	af00      	add	r7, sp, #0
 8011082:	6078      	str	r0, [r7, #4]
 8011084:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011086:	6838      	ldr	r0, [r7, #0]
 8011088:	f7ff ffed 	bl	8011066 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 801108c:	4603      	mov	r3, r0
 801108e:	681c      	ldr	r4, [r3, #0]
 8011090:	687b      	ldr	r3, [r7, #4]
 8011092:	4619      	mov	r1, r3
 8011094:	2004      	movs	r0, #4
 8011096:	f7ef f94b 	bl	8000330 <_ZnwjPv>
 801109a:	4603      	mov	r3, r0
 801109c:	601c      	str	r4, [r3, #0]
 801109e:	4618      	mov	r0, r3
 80110a0:	370c      	adds	r7, #12
 80110a2:	46bd      	mov	sp, r7
 80110a4:	bd90      	pop	{r4, r7, pc}

080110a6 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80110a6:	b580      	push	{r7, lr}
 80110a8:	b084      	sub	sp, #16
 80110aa:	af00      	add	r7, sp, #0
 80110ac:	60f8      	str	r0, [r7, #12]
 80110ae:	60b9      	str	r1, [r7, #8]
 80110b0:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80110b2:	6878      	ldr	r0, [r7, #4]
 80110b4:	f7ff ffd7 	bl	8011066 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80110b8:	4603      	mov	r3, r0
 80110ba:	4619      	mov	r1, r3
 80110bc:	68b8      	ldr	r0, [r7, #8]
 80110be:	f7ff ffdd 	bl	801107c <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80110c2:	bf00      	nop
 80110c4:	3710      	adds	r7, #16
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
	...

080110cc <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80110cc:	b5b0      	push	{r4, r5, r7, lr}
 80110ce:	b08c      	sub	sp, #48	; 0x30
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	60f8      	str	r0, [r7, #12]
 80110d4:	60b9      	str	r1, [r7, #8]
 80110d6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80110d8:	4a39      	ldr	r2, [pc, #228]	; (80111c0 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80110da:	2101      	movs	r1, #1
 80110dc:	68f8      	ldr	r0, [r7, #12]
 80110de:	f000 fec2 	bl	8011e66 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>
 80110e2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	685b      	ldr	r3, [r3, #4]
 80110ee:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f7fe febd 	bl	800fe70 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 80110f6:	4603      	mov	r3, r0
 80110f8:	617b      	str	r3, [r7, #20]
 80110fa:	f107 0214 	add.w	r2, r7, #20
 80110fe:	f107 0308 	add.w	r3, r7, #8
 8011102:	4611      	mov	r1, r2
 8011104:	4618      	mov	r0, r3
 8011106:	f000 fef5 	bl	8011ef4 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801110a:	4603      	mov	r3, r0
 801110c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011112:	4618      	mov	r0, r3
 8011114:	f000 ff03 	bl	8011f1e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>
 8011118:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801111a:	69fb      	ldr	r3, [r7, #28]
 801111c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 801111e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011120:	6a3b      	ldr	r3, [r7, #32]
 8011122:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011124:	69fa      	ldr	r2, [r7, #28]
 8011126:	18d5      	adds	r5, r2, r3
 8011128:	6878      	ldr	r0, [r7, #4]
 801112a:	f7ff ff9c 	bl	8011066 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 801112e:	4603      	mov	r3, r0
 8011130:	461a      	mov	r2, r3
 8011132:	4629      	mov	r1, r5
 8011134:	4620      	mov	r0, r4
 8011136:	f7ff ffb6 	bl	80110a6 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801113a:	2300      	movs	r3, #0
 801113c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801113e:	f107 0308 	add.w	r3, r7, #8
 8011142:	4618      	mov	r0, r3
 8011144:	f7fc fc1a 	bl	800d97c <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011148:	4603      	mov	r3, r0
 801114a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	4618      	mov	r0, r3
 8011150:	f7fa ff58 	bl	800c004 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011154:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011156:	69fa      	ldr	r2, [r7, #28]
 8011158:	4621      	mov	r1, r4
 801115a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801115c:	f000 fef3 	bl	8011f46 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011160:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011162:	69bb      	ldr	r3, [r7, #24]
 8011164:	3304      	adds	r3, #4
 8011166:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011168:	f107 0308 	add.w	r3, r7, #8
 801116c:	4618      	mov	r0, r3
 801116e:	f7fc fc05 	bl	800d97c <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011172:	4603      	mov	r3, r0
 8011174:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	4618      	mov	r0, r3
 801117a:	f7fa ff43 	bl	800c004 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 801117e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011180:	69ba      	ldr	r2, [r7, #24]
 8011182:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011184:	4620      	mov	r0, r4
 8011186:	f000 fede 	bl	8011f46 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801118a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 801118c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	689a      	ldr	r2, [r3, #8]
 8011192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011194:	1ad3      	subs	r3, r2, r3
 8011196:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011198:	461a      	mov	r2, r3
 801119a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801119c:	f7fa fef5 	bl	800bf8a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	69fa      	ldr	r2, [r7, #28]
 80111a4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	69ba      	ldr	r2, [r7, #24]
 80111aa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80111ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ae:	009b      	lsls	r3, r3, #2
 80111b0:	69fa      	ldr	r2, [r7, #28]
 80111b2:	441a      	add	r2, r3
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	609a      	str	r2, [r3, #8]
    }
 80111b8:	bf00      	nop
 80111ba:	3730      	adds	r7, #48	; 0x30
 80111bc:	46bd      	mov	sp, r7
 80111be:	bdb0      	pop	{r4, r5, r7, pc}
 80111c0:	08020d08 	.word	0x08020d08

080111c4 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80111c4:	b580      	push	{r7, lr}
 80111c6:	b084      	sub	sp, #16
 80111c8:	af00      	add	r7, sp, #0
 80111ca:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80111cc:	6878      	ldr	r0, [r7, #4]
 80111ce:	f7fe fe5f 	bl	800fe90 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 80111d2:	4603      	mov	r3, r0
 80111d4:	60fb      	str	r3, [r7, #12]
 80111d6:	f107 030c 	add.w	r3, r7, #12
 80111da:	2101      	movs	r1, #1
 80111dc:	4618      	mov	r0, r3
 80111de:	f000 fec6 	bl	8011f6e <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>
 80111e2:	4603      	mov	r3, r0
 80111e4:	60bb      	str	r3, [r7, #8]
 80111e6:	f107 0308 	add.w	r3, r7, #8
 80111ea:	4618      	mov	r0, r3
 80111ec:	f7fc fbf9 	bl	800d9e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 80111f0:	4603      	mov	r3, r0
      }
 80111f2:	4618      	mov	r0, r3
 80111f4:	3710      	adds	r7, #16
 80111f6:	46bd      	mov	sp, r7
 80111f8:	bd80      	pop	{r7, pc}

080111fa <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80111fa:	b580      	push	{r7, lr}
 80111fc:	b082      	sub	sp, #8
 80111fe:	af00      	add	r7, sp, #0
 8011200:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	4618      	mov	r0, r3
 8011206:	f7fc fa03 	bl	800d610 <_ZNKSt14_Function_base8_M_emptyEv>
 801120a:	4603      	mov	r3, r0
 801120c:	f083 0301 	eor.w	r3, r3, #1
 8011210:	b2db      	uxtb	r3, r3
 8011212:	4618      	mov	r0, r3
 8011214:	3708      	adds	r7, #8
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 801121a:	b580      	push	{r7, lr}
 801121c:	b084      	sub	sp, #16
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
 8011222:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f000 febb 	bl	8011fa0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801122a:	4602      	mov	r2, r0
 801122c:	f107 0308 	add.w	r3, r7, #8
 8011230:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011234:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8011238:	6838      	ldr	r0, [r7, #0]
 801123a:	f000 feb1 	bl	8011fa0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801123e:	4602      	mov	r2, r0
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011246:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801124a:	f107 0308 	add.w	r3, r7, #8
 801124e:	4618      	mov	r0, r3
 8011250:	f000 fea6 	bl	8011fa0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011254:	4602      	mov	r2, r0
 8011256:	683b      	ldr	r3, [r7, #0]
 8011258:	e892 0003 	ldmia.w	r2, {r0, r1}
 801125c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011260:	bf00      	nop
 8011262:	3710      	adds	r7, #16
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011272:	6878      	ldr	r0, [r7, #4]
 8011274:	f000 fe9f 	bl	8011fb6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011278:	4603      	mov	r3, r0
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801127e:	6838      	ldr	r0, [r7, #0]
 8011280:	f000 fe99 	bl	8011fb6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011284:	4603      	mov	r3, r0
 8011286:	681a      	ldr	r2, [r3, #0]
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 801128c:	f107 030c 	add.w	r3, r7, #12
 8011290:	4618      	mov	r0, r3
 8011292:	f000 fe90 	bl	8011fb6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011296:	4603      	mov	r3, r0
 8011298:	681a      	ldr	r2, [r3, #0]
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	601a      	str	r2, [r3, #0]
    }
 801129e:	bf00      	nop
 80112a0:	3710      	adds	r7, #16
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}

080112a6 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80112a6:	b580      	push	{r7, lr}
 80112a8:	b084      	sub	sp, #16
 80112aa:	af00      	add	r7, sp, #0
 80112ac:	6078      	str	r0, [r7, #4]
 80112ae:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 fe8b 	bl	8011fcc <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80112b6:	4603      	mov	r3, r0
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80112bc:	6838      	ldr	r0, [r7, #0]
 80112be:	f000 fe85 	bl	8011fcc <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80112c2:	4603      	mov	r3, r0
 80112c4:	681a      	ldr	r2, [r3, #0]
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80112ca:	f107 030c 	add.w	r3, r7, #12
 80112ce:	4618      	mov	r0, r3
 80112d0:	f000 fe7c 	bl	8011fcc <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80112d4:	4603      	mov	r3, r0
 80112d6:	681a      	ldr	r2, [r3, #0]
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	601a      	str	r2, [r3, #0]
    }
 80112dc:	bf00      	nop
 80112de:	3710      	adds	r7, #16
 80112e0:	46bd      	mov	sp, r7
 80112e2:	bd80      	pop	{r7, pc}

080112e4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 80112e4:	b590      	push	{r4, r7, lr}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
 80112ec:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f7f9 ff2b 	bl	800b14a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 80112f4:	4604      	mov	r4, r0
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f7fa f96e 	bl	800b5d8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80112fc:	4602      	mov	r2, r0
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	4621      	mov	r1, r4
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f000 fe6d 	bl	8011fe2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>
 8011308:	4603      	mov	r3, r0
 801130a:	4618      	mov	r0, r3
 801130c:	370c      	adds	r7, #12
 801130e:	46bd      	mov	sp, r7
 8011310:	bd90      	pop	{r4, r7, pc}

08011312 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>:
      key_comp() const
 8011312:	b480      	push	{r7}
 8011314:	b083      	sub	sp, #12
 8011316:	af00      	add	r7, sp, #0
 8011318:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801131a:	bf00      	nop
 801131c:	4618      	mov	r0, r3
 801131e:	370c      	adds	r7, #12
 8011320:	46bd      	mov	sp, r7
 8011322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011326:	4770      	bx	lr

08011328 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011328:	b480      	push	{r7}
 801132a:	b083      	sub	sp, #12
 801132c:	af00      	add	r7, sp, #0
 801132e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	4618      	mov	r0, r3
 8011334:	370c      	adds	r7, #12
 8011336:	46bd      	mov	sp, r7
 8011338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133c:	4770      	bx	lr

0801133e <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 801133e:	b590      	push	{r4, r7, lr}
 8011340:	b083      	sub	sp, #12
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8011348:	687c      	ldr	r4, [r7, #4]
 801134a:	6838      	ldr	r0, [r7, #0]
 801134c:	f7ff ffec 	bl	8011328 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8011350:	4603      	mov	r3, r0
 8011352:	4619      	mov	r1, r3
 8011354:	4620      	mov	r0, r4
 8011356:	f000 fe75 	bl	8012044 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>
 801135a:	687b      	ldr	r3, [r7, #4]
 801135c:	4618      	mov	r0, r3
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	bd90      	pop	{r4, r7, pc}

08011364 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011364:	b480      	push	{r7}
 8011366:	b083      	sub	sp, #12
 8011368:	af00      	add	r7, sp, #0
 801136a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	4618      	mov	r0, r3
 8011370:	370c      	adds	r7, #12
 8011372:	46bd      	mov	sp, r7
 8011374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011378:	4770      	bx	lr

0801137a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801137a:	b5b0      	push	{r4, r5, r7, lr}
 801137c:	b088      	sub	sp, #32
 801137e:	af02      	add	r7, sp, #8
 8011380:	60f8      	str	r0, [r7, #12]
 8011382:	60b9      	str	r1, [r7, #8]
 8011384:	607a      	str	r2, [r7, #4]
 8011386:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8011388:	68f8      	ldr	r0, [r7, #12]
 801138a:	f7fa f93d 	bl	800b608 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 801138e:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8011390:	68b8      	ldr	r0, [r7, #8]
 8011392:	f7ef ff68 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011396:	4604      	mov	r4, r0
 8011398:	6878      	ldr	r0, [r7, #4]
 801139a:	f7ff ffe3 	bl	8011364 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801139e:	4605      	mov	r5, r0
 80113a0:	6838      	ldr	r0, [r7, #0]
 80113a2:	f7ef ff76 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80113a6:	4603      	mov	r3, r0
 80113a8:	9300      	str	r3, [sp, #0]
 80113aa:	462b      	mov	r3, r5
 80113ac:	4622      	mov	r2, r4
 80113ae:	6979      	ldr	r1, [r7, #20]
 80113b0:	68f8      	ldr	r0, [r7, #12]
 80113b2:	f000 fe5a 	bl	801206a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 80113b6:	697b      	ldr	r3, [r7, #20]
	}
 80113b8:	4618      	mov	r0, r3
 80113ba:	3718      	adds	r7, #24
 80113bc:	46bd      	mov	sp, r7
 80113be:	bdb0      	pop	{r4, r5, r7, pc}

080113c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80113c0:	b5b0      	push	{r4, r5, r7, lr}
 80113c2:	b086      	sub	sp, #24
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	60f8      	str	r0, [r7, #12]
 80113c8:	60b9      	str	r1, [r7, #8]
 80113ca:	607a      	str	r2, [r7, #4]
 80113cc:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80113ce:	68bb      	ldr	r3, [r7, #8]
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d117      	bne.n	8011404 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80113d4:	68f8      	ldr	r0, [r7, #12]
 80113d6:	f7fa f8ff 	bl	800b5d8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80113da:	4602      	mov	r2, r0
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	4293      	cmp	r3, r2
 80113e0:	d010      	beq.n	8011404 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80113e2:	68fc      	ldr	r4, [r7, #12]
 80113e4:	6838      	ldr	r0, [r7, #0]
 80113e6:	f7f9 fffe 	bl	800b3e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80113ea:	4605      	mov	r5, r0
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f7fa f945 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80113f2:	4603      	mov	r3, r0
 80113f4:	461a      	mov	r2, r3
 80113f6:	4629      	mov	r1, r5
 80113f8:	4620      	mov	r0, r4
 80113fa:	f7f9 fda3 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b00      	cmp	r3, #0
 8011402:	d001      	beq.n	8011408 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 8011404:	2301      	movs	r3, #1
 8011406:	e000      	b.n	801140a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 8011408:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801140a:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 801140c:	68fb      	ldr	r3, [r7, #12]
 801140e:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8011410:	7df8      	ldrb	r0, [r7, #23]
 8011412:	687a      	ldr	r2, [r7, #4]
 8011414:	6839      	ldr	r1, [r7, #0]
 8011416:	f00f f96d 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	695b      	ldr	r3, [r3, #20]
 801141e:	1c5a      	adds	r2, r3, #1
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8011424:	f107 0310 	add.w	r3, r7, #16
 8011428:	6839      	ldr	r1, [r7, #0]
 801142a:	4618      	mov	r0, r3
 801142c:	f7f9 ffff 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8011430:	693b      	ldr	r3, [r7, #16]
    }
 8011432:	4618      	mov	r0, r3
 8011434:	3718      	adds	r7, #24
 8011436:	46bd      	mov	sp, r7
 8011438:	bdb0      	pop	{r4, r5, r7, pc}

0801143a <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 801143a:	b580      	push	{r7, lr}
 801143c:	b084      	sub	sp, #16
 801143e:	af00      	add	r7, sp, #0
 8011440:	60f8      	str	r0, [r7, #12]
 8011442:	7239      	strb	r1, [r7, #8]
 8011444:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f7ff f969 	bl	801071e <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 801144c:	4603      	mov	r3, r0
 801144e:	681a      	ldr	r2, [r3, #0]
 8011450:	68fb      	ldr	r3, [r7, #12]
 8011452:	601a      	str	r2, [r3, #0]
	    { }
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	4618      	mov	r0, r3
 8011458:	3710      	adds	r7, #16
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}

0801145e <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 801145e:	b5b0      	push	{r4, r5, r7, lr}
 8011460:	b084      	sub	sp, #16
 8011462:	af00      	add	r7, sp, #0
 8011464:	60f8      	str	r0, [r7, #12]
 8011466:	7239      	strb	r1, [r7, #8]
 8011468:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 801146a:	68fc      	ldr	r4, [r7, #12]
 801146c:	6878      	ldr	r0, [r7, #4]
 801146e:	f7ff f956 	bl	801071e <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011472:	4603      	mov	r3, r0
 8011474:	461a      	mov	r2, r3
 8011476:	4629      	mov	r1, r5
 8011478:	4620      	mov	r0, r4
 801147a:	f7ff ffde 	bl	801143a <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	2201      	movs	r2, #1
 8011482:	711a      	strb	r2, [r3, #4]
	{ }
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	4618      	mov	r0, r3
 8011488:	3710      	adds	r7, #16
 801148a:	46bd      	mov	sp, r7
 801148c:	bdb0      	pop	{r4, r5, r7, pc}

0801148e <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801148e:	b480      	push	{r7}
 8011490:	b083      	sub	sp, #12
 8011492:	af00      	add	r7, sp, #0
 8011494:	6078      	str	r0, [r7, #4]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	4618      	mov	r0, r3
 801149a:	370c      	adds	r7, #12
 801149c:	46bd      	mov	sp, r7
 801149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114a2:	4770      	bx	lr

080114a4 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b088      	sub	sp, #32
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	607a      	str	r2, [r7, #4]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	61fb      	str	r3, [r7, #28]
 80114b4:	68bb      	ldr	r3, [r7, #8]
 80114b6:	61bb      	str	r3, [r7, #24]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80114bc:	f7ee ff30 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80114c0:	4603      	mov	r3, r0
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d003      	beq.n	80114ce <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80114c6:	69b8      	ldr	r0, [r7, #24]
 80114c8:	f00f f8a4 	bl	8020614 <_ZdlPv>
	    return;
 80114cc:	e005      	b.n	80114da <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80114ce:	697a      	ldr	r2, [r7, #20]
 80114d0:	69b9      	ldr	r1, [r7, #24]
 80114d2:	69f8      	ldr	r0, [r7, #28]
 80114d4:	f001 fb65 	bl	8012ba2 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80114d8:	bf00      	nop
 80114da:	bf00      	nop
 80114dc:	3720      	adds	r7, #32
 80114de:	46bd      	mov	sp, r7
 80114e0:	bd80      	pop	{r7, pc}

080114e2 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80114e2:	b580      	push	{r7, lr}
 80114e4:	b082      	sub	sp, #8
 80114e6:	af00      	add	r7, sp, #0
 80114e8:	6078      	str	r0, [r7, #4]
 80114ea:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80114ec:	f7ee ff18 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80114f0:	4603      	mov	r3, r0
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d004      	beq.n	8011500 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80114f6:	6839      	ldr	r1, [r7, #0]
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f000 fde3 	bl	80120c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>
 80114fe:	e003      	b.n	8011508 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x26>
	__destroy(__first, __last);
 8011500:	6839      	ldr	r1, [r7, #0]
 8011502:	6878      	ldr	r0, [r7, #4]
 8011504:	f000 fdf6 	bl	80120f4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>
    }
 8011508:	3708      	adds	r7, #8
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}

0801150e <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801150e:	b480      	push	{r7}
 8011510:	b083      	sub	sp, #12
 8011512:	af00      	add	r7, sp, #0
 8011514:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	4618      	mov	r0, r3
 801151a:	370c      	adds	r7, #12
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011524:	b590      	push	{r4, r7, lr}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801152e:	6838      	ldr	r0, [r7, #0]
 8011530:	f7ff ffed 	bl	801150e <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011534:	4603      	mov	r3, r0
 8011536:	681c      	ldr	r4, [r3, #0]
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	4619      	mov	r1, r3
 801153c:	2004      	movs	r0, #4
 801153e:	f7ee fef7 	bl	8000330 <_ZnwjPv>
 8011542:	4603      	mov	r3, r0
 8011544:	601c      	str	r4, [r3, #0]
 8011546:	4618      	mov	r0, r3
 8011548:	370c      	adds	r7, #12
 801154a:	46bd      	mov	sp, r7
 801154c:	bd90      	pop	{r4, r7, pc}

0801154e <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801154e:	b580      	push	{r7, lr}
 8011550:	b084      	sub	sp, #16
 8011552:	af00      	add	r7, sp, #0
 8011554:	60f8      	str	r0, [r7, #12]
 8011556:	60b9      	str	r1, [r7, #8]
 8011558:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff ffd7 	bl	801150e <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011560:	4603      	mov	r3, r0
 8011562:	4619      	mov	r1, r3
 8011564:	68b8      	ldr	r0, [r7, #8]
 8011566:	f7ff ffdd 	bl	8011524 <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 801156a:	bf00      	nop
 801156c:	3710      	adds	r7, #16
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
	...

08011574 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011574:	b5b0      	push	{r4, r5, r7, lr}
 8011576:	b08c      	sub	sp, #48	; 0x30
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011580:	4a39      	ldr	r2, [pc, #228]	; (8011668 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011582:	2101      	movs	r1, #1
 8011584:	68f8      	ldr	r0, [r7, #12]
 8011586:	f000 fdc0 	bl	801210a <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>
 801158a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	681b      	ldr	r3, [r3, #0]
 8011590:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	685b      	ldr	r3, [r3, #4]
 8011596:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f7fe fdf8 	bl	801018e <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 801159e:	4603      	mov	r3, r0
 80115a0:	617b      	str	r3, [r7, #20]
 80115a2:	f107 0214 	add.w	r2, r7, #20
 80115a6:	f107 0308 	add.w	r3, r7, #8
 80115aa:	4611      	mov	r1, r2
 80115ac:	4618      	mov	r0, r3
 80115ae:	f000 fdf3 	bl	8012198 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80115b2:	4603      	mov	r3, r0
 80115b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115ba:	4618      	mov	r0, r3
 80115bc:	f000 fe01 	bl	80121c2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>
 80115c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80115c2:	69fb      	ldr	r3, [r7, #28]
 80115c4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80115c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80115c8:	6a3b      	ldr	r3, [r7, #32]
 80115ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80115cc:	69fa      	ldr	r2, [r7, #28]
 80115ce:	18d5      	adds	r5, r2, r3
 80115d0:	6878      	ldr	r0, [r7, #4]
 80115d2:	f7ff ff9c 	bl	801150e <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 80115d6:	4603      	mov	r3, r0
 80115d8:	461a      	mov	r2, r3
 80115da:	4629      	mov	r1, r5
 80115dc:	4620      	mov	r0, r4
 80115de:	f7ff ffb6 	bl	801154e <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80115e2:	2300      	movs	r3, #0
 80115e4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80115e6:	f107 0308 	add.w	r3, r7, #8
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7fc fd44 	bl	800e078 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80115f0:	4603      	mov	r3, r0
 80115f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	4618      	mov	r0, r3
 80115f8:	f7fa f940 	bl	800b87c <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 80115fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80115fe:	69fa      	ldr	r2, [r7, #28]
 8011600:	4621      	mov	r1, r4
 8011602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011604:	f000 fdf1 	bl	80121ea <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011608:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	3304      	adds	r3, #4
 801160e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011610:	f107 0308 	add.w	r3, r7, #8
 8011614:	4618      	mov	r0, r3
 8011616:	f7fc fd2f 	bl	800e078 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 801161a:	4603      	mov	r3, r0
 801161c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	4618      	mov	r0, r3
 8011622:	f7fa f92b 	bl	800b87c <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8011626:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011628:	69ba      	ldr	r2, [r7, #24]
 801162a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801162c:	4620      	mov	r0, r4
 801162e:	f000 fddc 	bl	80121ea <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011632:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011634:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	689a      	ldr	r2, [r3, #8]
 801163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163c:	1ad3      	subs	r3, r2, r3
 801163e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011640:	461a      	mov	r2, r3
 8011642:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011644:	f7f9 fcc3 	bl	800afce <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011648:	68fb      	ldr	r3, [r7, #12]
 801164a:	69fa      	ldr	r2, [r7, #28]
 801164c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	69ba      	ldr	r2, [r7, #24]
 8011652:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011656:	009b      	lsls	r3, r3, #2
 8011658:	69fa      	ldr	r2, [r7, #28]
 801165a:	441a      	add	r2, r3
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	609a      	str	r2, [r3, #8]
    }
 8011660:	bf00      	nop
 8011662:	3730      	adds	r7, #48	; 0x30
 8011664:	46bd      	mov	sp, r7
 8011666:	bdb0      	pop	{r4, r5, r7, pc}
 8011668:	08020d08 	.word	0x08020d08

0801166c <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 801166c:	b580      	push	{r7, lr}
 801166e:	b084      	sub	sp, #16
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011674:	6878      	ldr	r0, [r7, #4]
 8011676:	f7fe fd9a 	bl	80101ae <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 801167a:	4603      	mov	r3, r0
 801167c:	60fb      	str	r3, [r7, #12]
 801167e:	f107 030c 	add.w	r3, r7, #12
 8011682:	2101      	movs	r1, #1
 8011684:	4618      	mov	r0, r3
 8011686:	f000 fdc4 	bl	8012212 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>
 801168a:	4603      	mov	r3, r0
 801168c:	60bb      	str	r3, [r7, #8]
 801168e:	f107 0308 	add.w	r3, r7, #8
 8011692:	4618      	mov	r0, r3
 8011694:	f7fc fd23 	bl	800e0de <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 8011698:	4603      	mov	r3, r0
      }
 801169a:	4618      	mov	r0, r3
 801169c:	3710      	adds	r7, #16
 801169e:	46bd      	mov	sp, r7
 80116a0:	bd80      	pop	{r7, pc}

080116a2 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80116a2:	b480      	push	{r7}
 80116a4:	b083      	sub	sp, #12
 80116a6:	af00      	add	r7, sp, #0
 80116a8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	4618      	mov	r0, r3
 80116ae:	370c      	adds	r7, #12
 80116b0:	46bd      	mov	sp, r7
 80116b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b6:	4770      	bx	lr

080116b8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80116b8:	b590      	push	{r4, r7, lr}
 80116ba:	b087      	sub	sp, #28
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80116c4:	68f8      	ldr	r0, [r7, #12]
 80116c6:	f000 fdbd 	bl	8012244 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 80116ca:	4604      	mov	r4, r0
 80116cc:	68f8      	ldr	r0, [r7, #12]
 80116ce:	f7fe fc65 	bl	800ff9c <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80116d2:	4603      	mov	r3, r0
 80116d4:	1ae2      	subs	r2, r4, r3
 80116d6:	68bb      	ldr	r3, [r7, #8]
 80116d8:	429a      	cmp	r2, r3
 80116da:	bf34      	ite	cc
 80116dc:	2301      	movcc	r3, #1
 80116de:	2300      	movcs	r3, #0
 80116e0:	b2db      	uxtb	r3, r3
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d002      	beq.n	80116ec <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80116e6:	6878      	ldr	r0, [r7, #4]
 80116e8:	f00f f862 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80116ec:	68f8      	ldr	r0, [r7, #12]
 80116ee:	f7fe fc55 	bl	800ff9c <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80116f2:	4604      	mov	r4, r0
 80116f4:	68f8      	ldr	r0, [r7, #12]
 80116f6:	f7fe fc51 	bl	800ff9c <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80116fa:	4603      	mov	r3, r0
 80116fc:	613b      	str	r3, [r7, #16]
 80116fe:	f107 0208 	add.w	r2, r7, #8
 8011702:	f107 0310 	add.w	r3, r7, #16
 8011706:	4611      	mov	r1, r2
 8011708:	4618      	mov	r0, r3
 801170a:	f7f1 f8a2 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 801170e:	4603      	mov	r3, r0
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	4423      	add	r3, r4
 8011714:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011716:	68f8      	ldr	r0, [r7, #12]
 8011718:	f7fe fc40 	bl	800ff9c <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 801171c:	4602      	mov	r2, r0
 801171e:	697b      	ldr	r3, [r7, #20]
 8011720:	4293      	cmp	r3, r2
 8011722:	d306      	bcc.n	8011732 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011724:	68f8      	ldr	r0, [r7, #12]
 8011726:	f000 fd8d 	bl	8012244 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 801172a:	4602      	mov	r2, r0
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	4293      	cmp	r3, r2
 8011730:	d904      	bls.n	801173c <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011732:	68f8      	ldr	r0, [r7, #12]
 8011734:	f000 fd86 	bl	8012244 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011738:	4603      	mov	r3, r0
 801173a:	e000      	b.n	801173e <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x86>
 801173c:	697b      	ldr	r3, [r7, #20]
      }
 801173e:	4618      	mov	r0, r3
 8011740:	371c      	adds	r7, #28
 8011742:	46bd      	mov	sp, r7
 8011744:	bd90      	pop	{r4, r7, pc}

08011746 <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011746:	b590      	push	{r4, r7, lr}
 8011748:	b083      	sub	sp, #12
 801174a:	af00      	add	r7, sp, #0
 801174c:	6078      	str	r0, [r7, #4]
 801174e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7fc fb91 	bl	800de78 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8011756:	4603      	mov	r3, r0
 8011758:	681c      	ldr	r4, [r3, #0]
 801175a:	6838      	ldr	r0, [r7, #0]
 801175c:	f7fc fb8c 	bl	800de78 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8011760:	4603      	mov	r3, r0
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	1ae3      	subs	r3, r4, r3
 8011766:	109b      	asrs	r3, r3, #2
 8011768:	4618      	mov	r0, r3
 801176a:	370c      	adds	r7, #12
 801176c:	46bd      	mov	sp, r7
 801176e:	bd90      	pop	{r4, r7, pc}

08011770 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011770:	b580      	push	{r7, lr}
 8011772:	b082      	sub	sp, #8
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
 8011778:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801177a:	683b      	ldr	r3, [r7, #0]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d006      	beq.n	801178e <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x1e>
 8011780:	687b      	ldr	r3, [r7, #4]
 8011782:	6839      	ldr	r1, [r7, #0]
 8011784:	4618      	mov	r0, r3
 8011786:	f000 fd6e 	bl	8012266 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>
 801178a:	4603      	mov	r3, r0
 801178c:	e000      	b.n	8011790 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x20>
 801178e:	2300      	movs	r3, #0
      }
 8011790:	4618      	mov	r0, r3
 8011792:	3708      	adds	r7, #8
 8011794:	46bd      	mov	sp, r7
 8011796:	bd80      	pop	{r7, pc}

08011798 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011798:	b590      	push	{r4, r7, lr}
 801179a:	b087      	sub	sp, #28
 801179c:	af02      	add	r7, sp, #8
 801179e:	60f8      	str	r0, [r7, #12]
 80117a0:	60b9      	str	r1, [r7, #8]
 80117a2:	607a      	str	r2, [r7, #4]
 80117a4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80117a6:	f88d 4000 	strb.w	r4, [sp]
 80117aa:	683b      	ldr	r3, [r7, #0]
 80117ac:	687a      	ldr	r2, [r7, #4]
 80117ae:	68b9      	ldr	r1, [r7, #8]
 80117b0:	68f8      	ldr	r0, [r7, #12]
 80117b2:	f000 fd78 	bl	80122a6 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80117b6:	4603      	mov	r3, r0
      }
 80117b8:	4618      	mov	r0, r3
 80117ba:	3714      	adds	r7, #20
 80117bc:	46bd      	mov	sp, r7
 80117be:	bd90      	pop	{r4, r7, pc}

080117c0 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80117c0:	b590      	push	{r4, r7, lr}
 80117c2:	b085      	sub	sp, #20
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	60f8      	str	r0, [r7, #12]
 80117c8:	60b9      	str	r1, [r7, #8]
 80117ca:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80117cc:	68b8      	ldr	r0, [r7, #8]
 80117ce:	f7ff f91e 	bl	8010a0e <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 80117d2:	4604      	mov	r4, r0
 80117d4:	68f8      	ldr	r0, [r7, #12]
 80117d6:	f7fb fee4 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 80117da:	4603      	mov	r3, r0
 80117dc:	4619      	mov	r1, r3
 80117de:	2004      	movs	r0, #4
 80117e0:	f7ee fda6 	bl	8000330 <_ZnwjPv>
 80117e4:	4602      	mov	r2, r0
 80117e6:	6823      	ldr	r3, [r4, #0]
 80117e8:	6013      	str	r3, [r2, #0]
 80117ea:	bf00      	nop
 80117ec:	3714      	adds	r7, #20
 80117ee:	46bd      	mov	sp, r7
 80117f0:	bd90      	pop	{r4, r7, pc}

080117f2 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80117f2:	b580      	push	{r7, lr}
 80117f4:	b084      	sub	sp, #16
 80117f6:	af00      	add	r7, sp, #0
 80117f8:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80117fa:	6878      	ldr	r0, [r7, #4]
 80117fc:	f000 fd6f 	bl	80122de <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 8011800:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011802:	68f8      	ldr	r0, [r7, #12]
 8011804:	f000 fd77 	bl	80122f6 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>
 8011808:	4603      	mov	r3, r0
	}
 801180a:	4618      	mov	r0, r3
 801180c:	3710      	adds	r7, #16
 801180e:	46bd      	mov	sp, r7
 8011810:	bd80      	pop	{r7, pc}

08011812 <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011812:	b590      	push	{r4, r7, lr}
 8011814:	b083      	sub	sp, #12
 8011816:	af00      	add	r7, sp, #0
 8011818:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801181a:	6878      	ldr	r0, [r7, #4]
 801181c:	f000 fd76 	bl	801230c <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8011820:	4603      	mov	r3, r0
 8011822:	4619      	mov	r1, r3
 8011824:	4620      	mov	r0, r4
 8011826:	f000 fd7c 	bl	8012322 <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 801182a:	bf00      	nop
 801182c:	370c      	adds	r7, #12
 801182e:	46bd      	mov	sp, r7
 8011830:	bd90      	pop	{r4, r7, pc}

08011832 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 8011832:	b580      	push	{r7, lr}
 8011834:	b082      	sub	sp, #8
 8011836:	af00      	add	r7, sp, #0
 8011838:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f7fb feb1 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8011840:	4603      	mov	r3, r0
 8011842:	4618      	mov	r0, r3
 8011844:	3708      	adds	r7, #8
 8011846:	46bd      	mov	sp, r7
 8011848:	bd80      	pop	{r7, pc}

0801184a <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 801184a:	b5b0      	push	{r4, r5, r7, lr}
 801184c:	b084      	sub	sp, #16
 801184e:	af00      	add	r7, sp, #0
 8011850:	60f8      	str	r0, [r7, #12]
 8011852:	60b9      	str	r1, [r7, #8]
 8011854:	4613      	mov	r3, r2
 8011856:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011858:	79fb      	ldrb	r3, [r7, #7]
 801185a:	2b03      	cmp	r3, #3
 801185c:	d016      	beq.n	801188c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 801185e:	2b03      	cmp	r3, #3
 8011860:	dc19      	bgt.n	8011896 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8011862:	2b01      	cmp	r3, #1
 8011864:	d002      	beq.n	801186c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8011866:	2b02      	cmp	r3, #2
 8011868:	d00a      	beq.n	8011880 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 801186a:	e014      	b.n	8011896 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 801186c:	68b8      	ldr	r0, [r7, #8]
 801186e:	f7ff ffc0 	bl	80117f2 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011872:	4604      	mov	r4, r0
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f7ff ffdc 	bl	8011832 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 801187a:	4603      	mov	r3, r0
 801187c:	601c      	str	r4, [r3, #0]
	      break;
 801187e:	e00a      	b.n	8011896 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011880:	462a      	mov	r2, r5
 8011882:	68b9      	ldr	r1, [r7, #8]
 8011884:	68f8      	ldr	r0, [r7, #12]
 8011886:	f000 fd5c 	bl	8012342 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 801188a:	e004      	b.n	8011896 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 801188c:	4621      	mov	r1, r4
 801188e:	68f8      	ldr	r0, [r7, #12]
 8011890:	f000 fd70 	bl	8012374 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011894:	bf00      	nop
	  return false;
 8011896:	2300      	movs	r3, #0
	}
 8011898:	4618      	mov	r0, r3
 801189a:	3710      	adds	r7, #16
 801189c:	46bd      	mov	sp, r7
 801189e:	bdb0      	pop	{r4, r5, r7, pc}

080118a0 <_ZNSaIP5FieldIJEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80118a0:	b580      	push	{r7, lr}
 80118a2:	b082      	sub	sp, #8
 80118a4:	af00      	add	r7, sp, #0
 80118a6:	6078      	str	r0, [r7, #4]
 80118a8:	6878      	ldr	r0, [r7, #4]
 80118aa:	f000 fd6f 	bl	801238c <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	4618      	mov	r0, r3
 80118b2:	3708      	adds	r7, #8
 80118b4:	46bd      	mov	sp, r7
 80118b6:	bd80      	pop	{r7, pc}

080118b8 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80118b8:	b480      	push	{r7}
 80118ba:	b083      	sub	sp, #12
 80118bc:	af00      	add	r7, sp, #0
 80118be:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	601a      	str	r2, [r3, #0]
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2200      	movs	r2, #0
 80118ca:	605a      	str	r2, [r3, #4]
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	2200      	movs	r2, #0
 80118d0:	609a      	str	r2, [r3, #8]
	{ }
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	4618      	mov	r0, r3
 80118d6:	370c      	adds	r7, #12
 80118d8:	46bd      	mov	sp, r7
 80118da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118de:	4770      	bx	lr

080118e0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b084      	sub	sp, #16
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	60f8      	str	r0, [r7, #12]
 80118e8:	60b9      	str	r1, [r7, #8]
 80118ea:	607a      	str	r2, [r7, #4]
	if (__p)
 80118ec:	68bb      	ldr	r3, [r7, #8]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d005      	beq.n	80118fe <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	687a      	ldr	r2, [r7, #4]
 80118f6:	68b9      	ldr	r1, [r7, #8]
 80118f8:	4618      	mov	r0, r3
 80118fa:	f000 fd52 	bl	80123a2 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>
      }
 80118fe:	bf00      	nop
 8011900:	3710      	adds	r7, #16
 8011902:	46bd      	mov	sp, r7
 8011904:	bd80      	pop	{r7, pc}

08011906 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8011906:	b480      	push	{r7}
 8011908:	b083      	sub	sp, #12
 801190a:	af00      	add	r7, sp, #0
 801190c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	4618      	mov	r0, r3
 8011912:	370c      	adds	r7, #12
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr

0801191c <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	60f8      	str	r0, [r7, #12]
 8011924:	60b9      	str	r1, [r7, #8]
 8011926:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8011928:	68b9      	ldr	r1, [r7, #8]
 801192a:	68f8      	ldr	r0, [r7, #12]
 801192c:	f000 fd58 	bl	80123e0 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>
    }
 8011930:	bf00      	nop
 8011932:	3710      	adds	r7, #16
 8011934:	46bd      	mov	sp, r7
 8011936:	bd80      	pop	{r7, pc}

08011938 <_ZN5FieldIJEEC1Ev>:
class Field<> {
 8011938:	b480      	push	{r7}
 801193a:	b083      	sub	sp, #12
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	4a04      	ldr	r2, [pc, #16]	; (8011954 <_ZN5FieldIJEEC1Ev+0x1c>)
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	601a      	str	r2, [r3, #0]
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	4618      	mov	r0, r3
 801194a:	370c      	adds	r7, #12
 801194c:	46bd      	mov	sp, r7
 801194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011952:	4770      	bx	lr
 8011954:	08020db8 	.word	0x08020db8

08011958 <_ZN5FieldIJhEEC1EPh>:
    Field(T* ptr) : ptr(ptr) { }
 8011958:	b580      	push	{r7, lr}
 801195a:	b082      	sub	sp, #8
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
 8011960:	6039      	str	r1, [r7, #0]
 8011962:	687b      	ldr	r3, [r7, #4]
 8011964:	4618      	mov	r0, r3
 8011966:	f7ff ffe7 	bl	8011938 <_ZN5FieldIJEEC1Ev>
 801196a:	4a05      	ldr	r2, [pc, #20]	; (8011980 <_ZN5FieldIJhEEC1EPh+0x28>)
 801196c:	687b      	ldr	r3, [r7, #4]
 801196e:	601a      	str	r2, [r3, #0]
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	683a      	ldr	r2, [r7, #0]
 8011974:	605a      	str	r2, [r3, #4]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	4618      	mov	r0, r3
 801197a:	3708      	adds	r7, #8
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	08020da4 	.word	0x08020da4

08011984 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>:
      push_back(value_type&& __x)
 8011984:	b580      	push	{r7, lr}
 8011986:	b082      	sub	sp, #8
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 801198e:	6838      	ldr	r0, [r7, #0]
 8011990:	f000 fd3c 	bl	801240c <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>
 8011994:	4603      	mov	r3, r0
 8011996:	4619      	mov	r1, r3
 8011998:	6878      	ldr	r0, [r7, #4]
 801199a:	f000 fd42 	bl	8012422 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 801199e:	bf00      	nop
 80119a0:	3708      	adds	r7, #8
 80119a2:	46bd      	mov	sp, r7
 80119a4:	bd80      	pop	{r7, pc}

080119a6 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 80119a6:	b580      	push	{r7, lr}
 80119a8:	b082      	sub	sp, #8
 80119aa:	af00      	add	r7, sp, #0
 80119ac:	6078      	str	r0, [r7, #4]
 80119ae:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	6839      	ldr	r1, [r7, #0]
 80119b4:	4618      	mov	r0, r3
 80119b6:	f000 fd66 	bl	8012486 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 80119ba:	4603      	mov	r3, r0
 80119bc:	4618      	mov	r0, r3
 80119be:	3708      	adds	r7, #8
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 80119c4:	b590      	push	{r4, r7, lr}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	4618      	mov	r0, r3
 80119d0:	f000 fd70 	bl	80124b4 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 80119d4:	bf00      	nop
 80119d6:	4620      	mov	r0, r4
 80119d8:	370c      	adds	r7, #12
 80119da:	46bd      	mov	sp, r7
 80119dc:	bd90      	pop	{r4, r7, pc}

080119de <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 80119de:	b480      	push	{r7}
 80119e0:	b085      	sub	sp, #20
 80119e2:	af00      	add	r7, sp, #0
 80119e4:	60f8      	str	r0, [r7, #12]
 80119e6:	60b9      	str	r1, [r7, #8]
 80119e8:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	881a      	ldrh	r2, [r3, #0]
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	881b      	ldrh	r3, [r3, #0]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	bf34      	ite	cc
 80119f6:	2301      	movcc	r3, #1
 80119f8:	2300      	movcs	r3, #0
 80119fa:	b2db      	uxtb	r3, r3
 80119fc:	4618      	mov	r0, r3
 80119fe:	3714      	adds	r7, #20
 8011a00:	46bd      	mov	sp, r7
 8011a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a06:	4770      	bx	lr

08011a08 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 8011a08:	b580      	push	{r7, lr}
 8011a0a:	b082      	sub	sp, #8
 8011a0c:	af00      	add	r7, sp, #0
 8011a0e:	6078      	str	r0, [r7, #4]
 8011a10:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	6839      	ldr	r1, [r7, #0]
 8011a16:	4618      	mov	r0, r3
 8011a18:	f000 fd57 	bl	80124ca <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 8011a1c:	687b      	ldr	r3, [r7, #4]
 8011a1e:	4618      	mov	r0, r3
 8011a20:	3708      	adds	r7, #8
 8011a22:	46bd      	mov	sp, r7
 8011a24:	bd80      	pop	{r7, pc}

08011a26 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8011a26:	b480      	push	{r7}
 8011a28:	b083      	sub	sp, #12
 8011a2a:	af00      	add	r7, sp, #0
 8011a2c:	6078      	str	r0, [r7, #4]
 8011a2e:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8011a30:	683b      	ldr	r3, [r7, #0]
 8011a32:	681a      	ldr	r2, [r3, #0]
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	601a      	str	r2, [r3, #0]
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	370c      	adds	r7, #12
 8011a3e:	46bd      	mov	sp, r7
 8011a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a44:	4770      	bx	lr

08011a46 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011a46:	b5b0      	push	{r4, r5, r7, lr}
 8011a48:	b088      	sub	sp, #32
 8011a4a:	af00      	add	r7, sp, #0
 8011a4c:	60f8      	str	r0, [r7, #12]
 8011a4e:	60b9      	str	r1, [r7, #8]
 8011a50:	607a      	str	r2, [r7, #4]
 8011a52:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8011a54:	6878      	ldr	r0, [r7, #4]
 8011a56:	f7ef fc06 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011a5a:	4604      	mov	r4, r0
 8011a5c:	6838      	ldr	r0, [r7, #0]
 8011a5e:	f000 fd43 	bl	80124e8 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011a62:	4605      	mov	r5, r0
 8011a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a66:	f7ef fc14 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a6a:	4603      	mov	r3, r0
 8011a6c:	462a      	mov	r2, r5
 8011a6e:	4621      	mov	r1, r4
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f000 fd44 	bl	80124fe <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8011a76:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8011a78:	69f8      	ldr	r0, [r7, #28]
 8011a7a:	f000 fe86 	bl	801278a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	f107 0010 	add.w	r0, r7, #16
 8011a84:	68ba      	ldr	r2, [r7, #8]
 8011a86:	68f9      	ldr	r1, [r7, #12]
 8011a88:	f000 fd5c 	bl	8012544 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8011a8c:	697b      	ldr	r3, [r7, #20]
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d007      	beq.n	8011aa2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8011a92:	6939      	ldr	r1, [r7, #16]
 8011a94:	697a      	ldr	r2, [r7, #20]
 8011a96:	69fb      	ldr	r3, [r7, #28]
 8011a98:	68f8      	ldr	r0, [r7, #12]
 8011a9a:	f000 fe89 	bl	80127b0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	e00b      	b.n	8011aba <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8011aa2:	69f9      	ldr	r1, [r7, #28]
 8011aa4:	68f8      	ldr	r0, [r7, #12]
 8011aa6:	f7fa fc97 	bl	800c3d8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8011aaa:	693a      	ldr	r2, [r7, #16]
 8011aac:	f107 0318 	add.w	r3, r7, #24
 8011ab0:	4611      	mov	r1, r2
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	f7f3 fe77 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8011ab8:	69bb      	ldr	r3, [r7, #24]
      }
 8011aba:	4618      	mov	r0, r3
 8011abc:	3720      	adds	r7, #32
 8011abe:	46bd      	mov	sp, r7
 8011ac0:	bdb0      	pop	{r4, r5, r7, pc}

08011ac2 <_ZN6Packet5buildItJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011ac2:	b590      	push	{r4, r7, lr}
 8011ac4:	b085      	sub	sp, #20
 8011ac6:	af00      	add	r7, sp, #0
 8011ac8:	6078      	str	r0, [r7, #4]
 8011aca:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	681b      	ldr	r3, [r3, #0]
 8011ad0:	1c9a      	adds	r2, r3, #2
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011ad6:	2008      	movs	r0, #8
 8011ad8:	f00e fda0 	bl	802061c <_Znwj>
 8011adc:	4603      	mov	r3, r0
 8011ade:	461c      	mov	r4, r3
 8011ae0:	6839      	ldr	r1, [r7, #0]
 8011ae2:	4620      	mov	r0, r4
 8011ae4:	f000 fea2 	bl	801282c <_ZN5FieldIJtEEC1EPt>
 8011ae8:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	f103 0208 	add.w	r2, r3, #8
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	60bb      	str	r3, [r7, #8]
 8011af4:	f107 0308 	add.w	r3, r7, #8
 8011af8:	4619      	mov	r1, r3
 8011afa:	4610      	mov	r0, r2
 8011afc:	f7ff ff42 	bl	8011984 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011b00:	bf00      	nop
    }
 8011b02:	3714      	adds	r7, #20
 8011b04:	46bd      	mov	sp, r7
 8011b06:	bd90      	pop	{r4, r7, pc}

08011b08 <_ZN6Packet5buildImJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011b08:	b590      	push	{r4, r7, lr}
 8011b0a:	b085      	sub	sp, #20
 8011b0c:	af00      	add	r7, sp, #0
 8011b0e:	6078      	str	r0, [r7, #4]
 8011b10:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	1d1a      	adds	r2, r3, #4
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011b1c:	2008      	movs	r0, #8
 8011b1e:	f00e fd7d 	bl	802061c <_Znwj>
 8011b22:	4603      	mov	r3, r0
 8011b24:	461c      	mov	r4, r3
 8011b26:	6839      	ldr	r1, [r7, #0]
 8011b28:	4620      	mov	r0, r4
 8011b2a:	f000 fe95 	bl	8012858 <_ZN5FieldIJmEEC1EPm>
 8011b2e:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f103 0208 	add.w	r2, r3, #8
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	60bb      	str	r3, [r7, #8]
 8011b3a:	f107 0308 	add.w	r3, r7, #8
 8011b3e:	4619      	mov	r1, r3
 8011b40:	4610      	mov	r0, r2
 8011b42:	f7ff ff1f 	bl	8011984 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011b46:	bf00      	nop
    }
 8011b48:	3714      	adds	r7, #20
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	bd90      	pop	{r4, r7, pc}

08011b4e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011b4e:	b480      	push	{r7}
 8011b50:	b083      	sub	sp, #12
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	689b      	ldr	r3, [r3, #8]
      }
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	370c      	adds	r7, #12
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr

08011b66 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011b66:	b480      	push	{r7}
 8011b68:	b083      	sub	sp, #12
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	3304      	adds	r3, #4
 8011b72:	4618      	mov	r0, r3
 8011b74:	370c      	adds	r7, #12
 8011b76:	46bd      	mov	sp, r7
 8011b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b7c:	4770      	bx	lr

08011b7e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011b7e:	b590      	push	{r4, r7, lr}
 8011b80:	b087      	sub	sp, #28
 8011b82:	af00      	add	r7, sp, #0
 8011b84:	60f8      	str	r0, [r7, #12]
 8011b86:	60b9      	str	r1, [r7, #8]
 8011b88:	607a      	str	r2, [r7, #4]
 8011b8a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011b8c:	68bb      	ldr	r3, [r7, #8]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d01d      	beq.n	8011bce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011b92:	68fc      	ldr	r4, [r7, #12]
 8011b94:	68b8      	ldr	r0, [r7, #8]
 8011b96:	f7f6 fdd1 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011b9a:	4603      	mov	r3, r0
 8011b9c:	6819      	ldr	r1, [r3, #0]
 8011b9e:	683b      	ldr	r3, [r7, #0]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	4620      	mov	r0, r4
 8011ba6:	f7ef f998 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011baa:	4603      	mov	r3, r0
 8011bac:	f083 0301 	eor.w	r3, r3, #1
 8011bb0:	b2db      	uxtb	r3, r3
 8011bb2:	2b00      	cmp	r3, #0
 8011bb4:	d006      	beq.n	8011bc4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	607b      	str	r3, [r7, #4]
 8011bba:	68b8      	ldr	r0, [r7, #8]
 8011bbc:	f000 fe62 	bl	8012884 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011bc0:	60b8      	str	r0, [r7, #8]
 8011bc2:	e7e3      	b.n	8011b8c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011bc4:	68b8      	ldr	r0, [r7, #8]
 8011bc6:	f000 fe69 	bl	801289c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011bca:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011bcc:	e7de      	b.n	8011b8c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011bce:	f107 0314 	add.w	r3, r7, #20
 8011bd2:	6879      	ldr	r1, [r7, #4]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f000 f805 	bl	8011be4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8011bda:	697b      	ldr	r3, [r7, #20]
    }
 8011bdc:	4618      	mov	r0, r3
 8011bde:	371c      	adds	r7, #28
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd90      	pop	{r4, r7, pc}

08011be4 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011be4:	b480      	push	{r7}
 8011be6:	b083      	sub	sp, #12
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	683a      	ldr	r2, [r7, #0]
 8011bf2:	601a      	str	r2, [r3, #0]
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	370c      	adds	r7, #12
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c00:	4770      	bx	lr

08011c02 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011c02:	b480      	push	{r7}
 8011c04:	b083      	sub	sp, #12
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	689b      	ldr	r3, [r3, #8]
      }
 8011c0e:	4618      	mov	r0, r3
 8011c10:	370c      	adds	r7, #12
 8011c12:	46bd      	mov	sp, r7
 8011c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c18:	4770      	bx	lr

08011c1a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011c1a:	b480      	push	{r7}
 8011c1c:	b083      	sub	sp, #12
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	3304      	adds	r3, #4
 8011c26:	4618      	mov	r0, r3
 8011c28:	370c      	adds	r7, #12
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr

08011c32 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011c32:	b590      	push	{r4, r7, lr}
 8011c34:	b087      	sub	sp, #28
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	60f8      	str	r0, [r7, #12]
 8011c3a:	60b9      	str	r1, [r7, #8]
 8011c3c:	607a      	str	r2, [r7, #4]
 8011c3e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011c40:	68bb      	ldr	r3, [r7, #8]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d01d      	beq.n	8011c82 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011c46:	68fc      	ldr	r4, [r7, #12]
 8011c48:	68b8      	ldr	r0, [r7, #8]
 8011c4a:	f7f2 f8cf 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	6819      	ldr	r1, [r3, #0]
 8011c52:	683b      	ldr	r3, [r7, #0]
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	461a      	mov	r2, r3
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f7ef f93e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	f083 0301 	eor.w	r3, r3, #1
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d006      	beq.n	8011c78 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011c6a:	68bb      	ldr	r3, [r7, #8]
 8011c6c:	607b      	str	r3, [r7, #4]
 8011c6e:	68b8      	ldr	r0, [r7, #8]
 8011c70:	f000 fe20 	bl	80128b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011c74:	60b8      	str	r0, [r7, #8]
 8011c76:	e7e3      	b.n	8011c40 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011c78:	68b8      	ldr	r0, [r7, #8]
 8011c7a:	f000 fe27 	bl	80128cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011c7e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011c80:	e7de      	b.n	8011c40 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011c82:	f107 0314 	add.w	r3, r7, #20
 8011c86:	6879      	ldr	r1, [r7, #4]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f000 f805 	bl	8011c98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8011c8e:	697b      	ldr	r3, [r7, #20]
    }
 8011c90:	4618      	mov	r0, r3
 8011c92:	371c      	adds	r7, #28
 8011c94:	46bd      	mov	sp, r7
 8011c96:	bd90      	pop	{r4, r7, pc}

08011c98 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011c98:	b480      	push	{r7}
 8011c9a:	b083      	sub	sp, #12
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	683a      	ldr	r2, [r7, #0]
 8011ca6:	601a      	str	r2, [r3, #0]
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	4618      	mov	r0, r3
 8011cac:	370c      	adds	r7, #12
 8011cae:	46bd      	mov	sp, r7
 8011cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb4:	4770      	bx	lr

08011cb6 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011cb6:	b580      	push	{r7, lr}
 8011cb8:	b084      	sub	sp, #16
 8011cba:	af00      	add	r7, sp, #0
 8011cbc:	60f8      	str	r0, [r7, #12]
 8011cbe:	60b9      	str	r1, [r7, #8]
 8011cc0:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011cc2:	68b8      	ldr	r0, [r7, #8]
 8011cc4:	f7ff f92e 	bl	8010f24 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	f7fb fc6a 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8011cce:	4603      	mov	r3, r0
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	2001      	movs	r0, #1
 8011cd4:	f7ee fb2c 	bl	8000330 <_ZnwjPv>
 8011cd8:	bf00      	nop
 8011cda:	3710      	adds	r7, #16
 8011cdc:	46bd      	mov	sp, r7
 8011cde:	bd80      	pop	{r7, pc}

08011ce0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011ce0:	b580      	push	{r7, lr}
 8011ce2:	b084      	sub	sp, #16
 8011ce4:	af00      	add	r7, sp, #0
 8011ce6:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011ce8:	6878      	ldr	r0, [r7, #4]
 8011cea:	f000 fdfb 	bl	80128e4 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8011cee:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011cf0:	68f8      	ldr	r0, [r7, #12]
 8011cf2:	f000 fe03 	bl	80128fc <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>
 8011cf6:	4603      	mov	r3, r0
	}
 8011cf8:	4618      	mov	r0, r3
 8011cfa:	3710      	adds	r7, #16
 8011cfc:	46bd      	mov	sp, r7
 8011cfe:	bd80      	pop	{r7, pc}

08011d00 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011d00:	b590      	push	{r4, r7, lr}
 8011d02:	b083      	sub	sp, #12
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011d08:	6878      	ldr	r0, [r7, #4]
 8011d0a:	f000 fe02 	bl	8012912 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011d0e:	4603      	mov	r3, r0
 8011d10:	4619      	mov	r1, r3
 8011d12:	4620      	mov	r0, r4
 8011d14:	f000 fe08 	bl	8012928 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011d18:	bf00      	nop
 8011d1a:	370c      	adds	r7, #12
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd90      	pop	{r4, r7, pc}

08011d20 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011d28:	6878      	ldr	r0, [r7, #4]
 8011d2a:	f7fb fc3a 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	4618      	mov	r0, r3
 8011d32:	3708      	adds	r7, #8
 8011d34:	46bd      	mov	sp, r7
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011d38:	b5b0      	push	{r4, r5, r7, lr}
 8011d3a:	b084      	sub	sp, #16
 8011d3c:	af00      	add	r7, sp, #0
 8011d3e:	60f8      	str	r0, [r7, #12]
 8011d40:	60b9      	str	r1, [r7, #8]
 8011d42:	4613      	mov	r3, r2
 8011d44:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011d46:	79fb      	ldrb	r3, [r7, #7]
 8011d48:	2b03      	cmp	r3, #3
 8011d4a:	d016      	beq.n	8011d7a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011d4c:	2b03      	cmp	r3, #3
 8011d4e:	dc19      	bgt.n	8011d84 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d002      	beq.n	8011d5a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011d54:	2b02      	cmp	r3, #2
 8011d56:	d00a      	beq.n	8011d6e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011d58:	e014      	b.n	8011d84 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011d5a:	68b8      	ldr	r0, [r7, #8]
 8011d5c:	f7ff ffc0 	bl	8011ce0 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011d60:	4604      	mov	r4, r0
 8011d62:	68f8      	ldr	r0, [r7, #12]
 8011d64:	f7ff ffdc 	bl	8011d20 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	601c      	str	r4, [r3, #0]
	      break;
 8011d6c:	e00a      	b.n	8011d84 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011d6e:	462a      	mov	r2, r5
 8011d70:	68b9      	ldr	r1, [r7, #8]
 8011d72:	68f8      	ldr	r0, [r7, #12]
 8011d74:	f000 fde8 	bl	8012948 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8011d78:	e004      	b.n	8011d84 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011d7a:	4621      	mov	r1, r4
 8011d7c:	68f8      	ldr	r0, [r7, #12]
 8011d7e:	f000 fdf8 	bl	8012972 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011d82:	bf00      	nop
	  return false;
 8011d84:	2300      	movs	r3, #0
	}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3710      	adds	r7, #16
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bdb0      	pop	{r4, r5, r7, pc}

08011d8e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011d8e:	b580      	push	{r7, lr}
 8011d90:	b084      	sub	sp, #16
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	60f8      	str	r0, [r7, #12]
 8011d96:	60b9      	str	r1, [r7, #8]
 8011d98:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011d9a:	68b8      	ldr	r0, [r7, #8]
 8011d9c:	f7ff f918 	bl	8010fd0 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 8011da0:	68f8      	ldr	r0, [r7, #12]
 8011da2:	f7fb fbfe 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8011da6:	4603      	mov	r3, r0
 8011da8:	4619      	mov	r1, r3
 8011daa:	2001      	movs	r0, #1
 8011dac:	f7ee fac0 	bl	8000330 <_ZnwjPv>
 8011db0:	bf00      	nop
 8011db2:	3710      	adds	r7, #16
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b084      	sub	sp, #16
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011dc0:	6878      	ldr	r0, [r7, #4]
 8011dc2:	f000 fde2 	bl	801298a <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8011dc6:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011dc8:	68f8      	ldr	r0, [r7, #12]
 8011dca:	f000 fdea 	bl	80129a2 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>
 8011dce:	4603      	mov	r3, r0
	}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	3710      	adds	r7, #16
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}

08011dd8 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011dd8:	b590      	push	{r4, r7, lr}
 8011dda:	b083      	sub	sp, #12
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 fde9 	bl	80129b8 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011de6:	4603      	mov	r3, r0
 8011de8:	4619      	mov	r1, r3
 8011dea:	4620      	mov	r0, r4
 8011dec:	f000 fdef 	bl	80129ce <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011df0:	bf00      	nop
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd90      	pop	{r4, r7, pc}

08011df8 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011e00:	6878      	ldr	r0, [r7, #4]
 8011e02:	f7fb fbce 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8011e06:	4603      	mov	r3, r0
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011e10:	b5b0      	push	{r4, r5, r7, lr}
 8011e12:	b084      	sub	sp, #16
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	60f8      	str	r0, [r7, #12]
 8011e18:	60b9      	str	r1, [r7, #8]
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011e1e:	79fb      	ldrb	r3, [r7, #7]
 8011e20:	2b03      	cmp	r3, #3
 8011e22:	d016      	beq.n	8011e52 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	dc19      	bgt.n	8011e5c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8011e28:	2b01      	cmp	r3, #1
 8011e2a:	d002      	beq.n	8011e32 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011e2c:	2b02      	cmp	r3, #2
 8011e2e:	d00a      	beq.n	8011e46 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011e30:	e014      	b.n	8011e5c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011e32:	68b8      	ldr	r0, [r7, #8]
 8011e34:	f7ff ffc0 	bl	8011db8 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8011e38:	4604      	mov	r4, r0
 8011e3a:	68f8      	ldr	r0, [r7, #12]
 8011e3c:	f7ff ffdc 	bl	8011df8 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 8011e40:	4603      	mov	r3, r0
 8011e42:	601c      	str	r4, [r3, #0]
	      break;
 8011e44:	e00a      	b.n	8011e5c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011e46:	462a      	mov	r2, r5
 8011e48:	68b9      	ldr	r1, [r7, #8]
 8011e4a:	68f8      	ldr	r0, [r7, #12]
 8011e4c:	f000 fdcf 	bl	80129ee <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8011e50:	e004      	b.n	8011e5c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011e52:	4621      	mov	r1, r4
 8011e54:	68f8      	ldr	r0, [r7, #12]
 8011e56:	f000 fddf 	bl	8012a18 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011e5a:	bf00      	nop
	  return false;
 8011e5c:	2300      	movs	r3, #0
	}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3710      	adds	r7, #16
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bdb0      	pop	{r4, r5, r7, pc}

08011e66 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011e66:	b590      	push	{r4, r7, lr}
 8011e68:	b087      	sub	sp, #28
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	60f8      	str	r0, [r7, #12]
 8011e6e:	60b9      	str	r1, [r7, #8]
 8011e70:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011e72:	68f8      	ldr	r0, [r7, #12]
 8011e74:	f000 fddc 	bl	8012a30 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011e78:	4604      	mov	r4, r0
 8011e7a:	68f8      	ldr	r0, [r7, #12]
 8011e7c:	f000 fde9 	bl	8012a52 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011e80:	4603      	mov	r3, r0
 8011e82:	1ae2      	subs	r2, r4, r3
 8011e84:	68bb      	ldr	r3, [r7, #8]
 8011e86:	429a      	cmp	r2, r3
 8011e88:	bf34      	ite	cc
 8011e8a:	2301      	movcc	r3, #1
 8011e8c:	2300      	movcs	r3, #0
 8011e8e:	b2db      	uxtb	r3, r3
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d002      	beq.n	8011e9a <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f00e fc8b 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011e9a:	68f8      	ldr	r0, [r7, #12]
 8011e9c:	f000 fdd9 	bl	8012a52 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011ea0:	4604      	mov	r4, r0
 8011ea2:	68f8      	ldr	r0, [r7, #12]
 8011ea4:	f000 fdd5 	bl	8012a52 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	613b      	str	r3, [r7, #16]
 8011eac:	f107 0208 	add.w	r2, r7, #8
 8011eb0:	f107 0310 	add.w	r3, r7, #16
 8011eb4:	4611      	mov	r1, r2
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7f0 fccb 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	4423      	add	r3, r4
 8011ec2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011ec4:	68f8      	ldr	r0, [r7, #12]
 8011ec6:	f000 fdc4 	bl	8012a52 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011eca:	4602      	mov	r2, r0
 8011ecc:	697b      	ldr	r3, [r7, #20]
 8011ece:	4293      	cmp	r3, r2
 8011ed0:	d306      	bcc.n	8011ee0 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011ed2:	68f8      	ldr	r0, [r7, #12]
 8011ed4:	f000 fdac 	bl	8012a30 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011ed8:	4602      	mov	r2, r0
 8011eda:	697b      	ldr	r3, [r7, #20]
 8011edc:	4293      	cmp	r3, r2
 8011ede:	d904      	bls.n	8011eea <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011ee0:	68f8      	ldr	r0, [r7, #12]
 8011ee2:	f000 fda5 	bl	8012a30 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011ee6:	4603      	mov	r3, r0
 8011ee8:	e000      	b.n	8011eec <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011eea:	697b      	ldr	r3, [r7, #20]
      }
 8011eec:	4618      	mov	r0, r3
 8011eee:	371c      	adds	r7, #28
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	bd90      	pop	{r4, r7, pc}

08011ef4 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011ef4:	b590      	push	{r4, r7, lr}
 8011ef6:	b083      	sub	sp, #12
 8011ef8:	af00      	add	r7, sp, #0
 8011efa:	6078      	str	r0, [r7, #4]
 8011efc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	f7fb fd3c 	bl	800d97c <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011f04:	4603      	mov	r3, r0
 8011f06:	681c      	ldr	r4, [r3, #0]
 8011f08:	6838      	ldr	r0, [r7, #0]
 8011f0a:	f7fb fd37 	bl	800d97c <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	681b      	ldr	r3, [r3, #0]
 8011f12:	1ae3      	subs	r3, r4, r3
 8011f14:	109b      	asrs	r3, r3, #2
 8011f16:	4618      	mov	r0, r3
 8011f18:	370c      	adds	r7, #12
 8011f1a:	46bd      	mov	sp, r7
 8011f1c:	bd90      	pop	{r4, r7, pc}

08011f1e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011f1e:	b580      	push	{r7, lr}
 8011f20:	b082      	sub	sp, #8
 8011f22:	af00      	add	r7, sp, #0
 8011f24:	6078      	str	r0, [r7, #4]
 8011f26:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d006      	beq.n	8011f3c <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x1e>
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	6839      	ldr	r1, [r7, #0]
 8011f32:	4618      	mov	r0, r3
 8011f34:	f000 fd9d 	bl	8012a72 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	e000      	b.n	8011f3e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x20>
 8011f3c:	2300      	movs	r3, #0
      }
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3708      	adds	r7, #8
 8011f42:	46bd      	mov	sp, r7
 8011f44:	bd80      	pop	{r7, pc}

08011f46 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011f46:	b590      	push	{r4, r7, lr}
 8011f48:	b087      	sub	sp, #28
 8011f4a:	af02      	add	r7, sp, #8
 8011f4c:	60f8      	str	r0, [r7, #12]
 8011f4e:	60b9      	str	r1, [r7, #8]
 8011f50:	607a      	str	r2, [r7, #4]
 8011f52:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011f54:	f88d 4000 	strb.w	r4, [sp]
 8011f58:	683b      	ldr	r3, [r7, #0]
 8011f5a:	687a      	ldr	r2, [r7, #4]
 8011f5c:	68b9      	ldr	r1, [r7, #8]
 8011f5e:	68f8      	ldr	r0, [r7, #12]
 8011f60:	f000 fda7 	bl	8012ab2 <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011f64:	4603      	mov	r3, r0
      }
 8011f66:	4618      	mov	r0, r3
 8011f68:	3714      	adds	r7, #20
 8011f6a:	46bd      	mov	sp, r7
 8011f6c:	bd90      	pop	{r4, r7, pc}

08011f6e <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8011f6e:	b580      	push	{r7, lr}
 8011f70:	b084      	sub	sp, #16
 8011f72:	af00      	add	r7, sp, #0
 8011f74:	6078      	str	r0, [r7, #4]
 8011f76:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	681a      	ldr	r2, [r3, #0]
 8011f7c:	683b      	ldr	r3, [r7, #0]
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	425b      	negs	r3, r3
 8011f82:	4413      	add	r3, r2
 8011f84:	60fb      	str	r3, [r7, #12]
 8011f86:	f107 020c 	add.w	r2, r7, #12
 8011f8a:	f107 0308 	add.w	r3, r7, #8
 8011f8e:	4611      	mov	r1, r2
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fe fb23 	bl	80105dc <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011f96:	68bb      	ldr	r3, [r7, #8]
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3710      	adds	r7, #16
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8011fa0:	b480      	push	{r7}
 8011fa2:	b083      	sub	sp, #12
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	4618      	mov	r0, r3
 8011fac:	370c      	adds	r7, #12
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb4:	4770      	bx	lr

08011fb6 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8011fb6:	b480      	push	{r7}
 8011fb8:	b083      	sub	sp, #12
 8011fba:	af00      	add	r7, sp, #0
 8011fbc:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	4618      	mov	r0, r3
 8011fc2:	370c      	adds	r7, #12
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fca:	4770      	bx	lr

08011fcc <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8011fcc:	b480      	push	{r7}
 8011fce:	b083      	sub	sp, #12
 8011fd0:	af00      	add	r7, sp, #0
 8011fd2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	370c      	adds	r7, #12
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe0:	4770      	bx	lr

08011fe2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011fe2:	b590      	push	{r4, r7, lr}
 8011fe4:	b087      	sub	sp, #28
 8011fe6:	af00      	add	r7, sp, #0
 8011fe8:	60f8      	str	r0, [r7, #12]
 8011fea:	60b9      	str	r1, [r7, #8]
 8011fec:	607a      	str	r2, [r7, #4]
 8011fee:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d01b      	beq.n	801202e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011ff6:	68fc      	ldr	r4, [r7, #12]
 8011ff8:	68b8      	ldr	r0, [r7, #8]
 8011ffa:	f7f9 f9f4 	bl	800b3e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8011ffe:	4603      	mov	r3, r0
 8012000:	683a      	ldr	r2, [r7, #0]
 8012002:	4619      	mov	r1, r3
 8012004:	4620      	mov	r0, r4
 8012006:	f7f8 ff9d 	bl	800af44 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 801200a:	4603      	mov	r3, r0
 801200c:	f083 0301 	eor.w	r3, r3, #1
 8012010:	b2db      	uxtb	r3, r3
 8012012:	2b00      	cmp	r3, #0
 8012014:	d006      	beq.n	8012024 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	607b      	str	r3, [r7, #4]
 801201a:	68b8      	ldr	r0, [r7, #8]
 801201c:	f7f9 fad0 	bl	800b5c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012020:	60b8      	str	r0, [r7, #8]
 8012022:	e7e5      	b.n	8011ff0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8012024:	68b8      	ldr	r0, [r7, #8]
 8012026:	f7f9 fabf 	bl	800b5a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801202a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801202c:	e7e0      	b.n	8011ff0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 801202e:	f107 0314 	add.w	r3, r7, #20
 8012032:	6879      	ldr	r1, [r7, #4]
 8012034:	4618      	mov	r0, r3
 8012036:	f7f9 f9fa 	bl	800b42e <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 801203a:	697b      	ldr	r3, [r7, #20]
    }
 801203c:	4618      	mov	r0, r3
 801203e:	371c      	adds	r7, #28
 8012040:	46bd      	mov	sp, r7
 8012042:	bd90      	pop	{r4, r7, pc}

08012044 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8012044:	b590      	push	{r4, r7, lr}
 8012046:	b083      	sub	sp, #12
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
 801204c:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 801204e:	687c      	ldr	r4, [r7, #4]
 8012050:	6838      	ldr	r0, [r7, #0]
 8012052:	f7ff f969 	bl	8011328 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8012056:	4603      	mov	r3, r0
 8012058:	4619      	mov	r1, r3
 801205a:	4620      	mov	r0, r4
 801205c:	f000 fd3b 	bl	8012ad6 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	4618      	mov	r0, r3
 8012064:	370c      	adds	r7, #12
 8012066:	46bd      	mov	sp, r7
 8012068:	bd90      	pop	{r4, r7, pc}

0801206a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801206a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801206e:	b086      	sub	sp, #24
 8012070:	af02      	add	r7, sp, #8
 8012072:	60f8      	str	r0, [r7, #12]
 8012074:	60b9      	str	r1, [r7, #8]
 8012076:	607a      	str	r2, [r7, #4]
 8012078:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	4619      	mov	r1, r3
 801207e:	2018      	movs	r0, #24
 8012080:	f7ee f956 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012084:	68f8      	ldr	r0, [r7, #12]
 8012086:	f7f9 fca1 	bl	800b9cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 801208a:	4604      	mov	r4, r0
 801208c:	68b8      	ldr	r0, [r7, #8]
 801208e:	f7f9 f879 	bl	800b184 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 8012092:	4605      	mov	r5, r0
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f7ef f8e6 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801209a:	4606      	mov	r6, r0
 801209c:	6838      	ldr	r0, [r7, #0]
 801209e:	f7ff f961 	bl	8011364 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80120a2:	4680      	mov	r8, r0
 80120a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120a6:	f7ef f8f4 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80120aa:	4603      	mov	r3, r0
 80120ac:	9300      	str	r3, [sp, #0]
 80120ae:	4643      	mov	r3, r8
 80120b0:	4632      	mov	r2, r6
 80120b2:	4629      	mov	r1, r5
 80120b4:	4620      	mov	r0, r4
 80120b6:	f000 fd58 	bl	8012b6a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 80120ba:	bf00      	nop
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080120c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80120c4:	b580      	push	{r7, lr}
 80120c6:	b082      	sub	sp, #8
 80120c8:	af00      	add	r7, sp, #0
 80120ca:	6078      	str	r0, [r7, #4]
 80120cc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	683b      	ldr	r3, [r7, #0]
 80120d2:	429a      	cmp	r2, r3
 80120d4:	d00a      	beq.n	80120ec <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f000 fd72 	bl	8012bc0 <_ZSt11__addressofIP13StreamMessageEPT_RS2_>
 80120dc:	4603      	mov	r3, r0
 80120de:	4618      	mov	r0, r3
 80120e0:	f000 fd79 	bl	8012bd6 <_ZSt8_DestroyIP13StreamMessageEvPT_>
	  for (; __first != __last; ++__first)
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	3304      	adds	r3, #4
 80120e8:	607b      	str	r3, [r7, #4]
 80120ea:	e7f0      	b.n	80120ce <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0xa>
	}
 80120ec:	bf00      	nop
 80120ee:	3708      	adds	r7, #8
 80120f0:	46bd      	mov	sp, r7
 80120f2:	bd80      	pop	{r7, pc}

080120f4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80120f4:	b480      	push	{r7}
 80120f6:	b083      	sub	sp, #12
 80120f8:	af00      	add	r7, sp, #0
 80120fa:	6078      	str	r0, [r7, #4]
 80120fc:	6039      	str	r1, [r7, #0]
 80120fe:	bf00      	nop
 8012100:	370c      	adds	r7, #12
 8012102:	46bd      	mov	sp, r7
 8012104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012108:	4770      	bx	lr

0801210a <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801210a:	b590      	push	{r4, r7, lr}
 801210c:	b087      	sub	sp, #28
 801210e:	af00      	add	r7, sp, #0
 8012110:	60f8      	str	r0, [r7, #12]
 8012112:	60b9      	str	r1, [r7, #8]
 8012114:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8012116:	68f8      	ldr	r0, [r7, #12]
 8012118:	f000 fd68 	bl	8012bec <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 801211c:	4604      	mov	r4, r0
 801211e:	68f8      	ldr	r0, [r7, #12]
 8012120:	f000 fd75 	bl	8012c0e <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012124:	4603      	mov	r3, r0
 8012126:	1ae2      	subs	r2, r4, r3
 8012128:	68bb      	ldr	r3, [r7, #8]
 801212a:	429a      	cmp	r2, r3
 801212c:	bf34      	ite	cc
 801212e:	2301      	movcc	r3, #1
 8012130:	2300      	movcs	r3, #0
 8012132:	b2db      	uxtb	r3, r3
 8012134:	2b00      	cmp	r3, #0
 8012136:	d002      	beq.n	801213e <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012138:	6878      	ldr	r0, [r7, #4]
 801213a:	f00e fb39 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801213e:	68f8      	ldr	r0, [r7, #12]
 8012140:	f000 fd65 	bl	8012c0e <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012144:	4604      	mov	r4, r0
 8012146:	68f8      	ldr	r0, [r7, #12]
 8012148:	f000 fd61 	bl	8012c0e <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 801214c:	4603      	mov	r3, r0
 801214e:	613b      	str	r3, [r7, #16]
 8012150:	f107 0208 	add.w	r2, r7, #8
 8012154:	f107 0310 	add.w	r3, r7, #16
 8012158:	4611      	mov	r1, r2
 801215a:	4618      	mov	r0, r3
 801215c:	f7f0 fb79 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8012160:	4603      	mov	r3, r0
 8012162:	681b      	ldr	r3, [r3, #0]
 8012164:	4423      	add	r3, r4
 8012166:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012168:	68f8      	ldr	r0, [r7, #12]
 801216a:	f000 fd50 	bl	8012c0e <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 801216e:	4602      	mov	r2, r0
 8012170:	697b      	ldr	r3, [r7, #20]
 8012172:	4293      	cmp	r3, r2
 8012174:	d306      	bcc.n	8012184 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012176:	68f8      	ldr	r0, [r7, #12]
 8012178:	f000 fd38 	bl	8012bec <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 801217c:	4602      	mov	r2, r0
 801217e:	697b      	ldr	r3, [r7, #20]
 8012180:	4293      	cmp	r3, r2
 8012182:	d904      	bls.n	801218e <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012184:	68f8      	ldr	r0, [r7, #12]
 8012186:	f000 fd31 	bl	8012bec <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 801218a:	4603      	mov	r3, r0
 801218c:	e000      	b.n	8012190 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x86>
 801218e:	697b      	ldr	r3, [r7, #20]
      }
 8012190:	4618      	mov	r0, r3
 8012192:	371c      	adds	r7, #28
 8012194:	46bd      	mov	sp, r7
 8012196:	bd90      	pop	{r4, r7, pc}

08012198 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012198:	b590      	push	{r4, r7, lr}
 801219a:	b083      	sub	sp, #12
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
 80121a0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80121a2:	6878      	ldr	r0, [r7, #4]
 80121a4:	f7fb ff68 	bl	800e078 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80121a8:	4603      	mov	r3, r0
 80121aa:	681c      	ldr	r4, [r3, #0]
 80121ac:	6838      	ldr	r0, [r7, #0]
 80121ae:	f7fb ff63 	bl	800e078 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80121b2:	4603      	mov	r3, r0
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	1ae3      	subs	r3, r4, r3
 80121b8:	109b      	asrs	r3, r3, #2
 80121ba:	4618      	mov	r0, r3
 80121bc:	370c      	adds	r7, #12
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd90      	pop	{r4, r7, pc}

080121c2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80121c2:	b580      	push	{r7, lr}
 80121c4:	b082      	sub	sp, #8
 80121c6:	af00      	add	r7, sp, #0
 80121c8:	6078      	str	r0, [r7, #4]
 80121ca:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80121cc:	683b      	ldr	r3, [r7, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d006      	beq.n	80121e0 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x1e>
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	4618      	mov	r0, r3
 80121d8:	f000 fd29 	bl	8012c2e <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>
 80121dc:	4603      	mov	r3, r0
 80121de:	e000      	b.n	80121e2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x20>
 80121e0:	2300      	movs	r3, #0
      }
 80121e2:	4618      	mov	r0, r3
 80121e4:	3708      	adds	r7, #8
 80121e6:	46bd      	mov	sp, r7
 80121e8:	bd80      	pop	{r7, pc}

080121ea <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80121ea:	b590      	push	{r4, r7, lr}
 80121ec:	b087      	sub	sp, #28
 80121ee:	af02      	add	r7, sp, #8
 80121f0:	60f8      	str	r0, [r7, #12]
 80121f2:	60b9      	str	r1, [r7, #8]
 80121f4:	607a      	str	r2, [r7, #4]
 80121f6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80121f8:	f88d 4000 	strb.w	r4, [sp]
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	687a      	ldr	r2, [r7, #4]
 8012200:	68b9      	ldr	r1, [r7, #8]
 8012202:	68f8      	ldr	r0, [r7, #12]
 8012204:	f000 fd33 	bl	8012c6e <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012208:	4603      	mov	r3, r0
      }
 801220a:	4618      	mov	r0, r3
 801220c:	3714      	adds	r7, #20
 801220e:	46bd      	mov	sp, r7
 8012210:	bd90      	pop	{r4, r7, pc}

08012212 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012212:	b580      	push	{r7, lr}
 8012214:	b084      	sub	sp, #16
 8012216:	af00      	add	r7, sp, #0
 8012218:	6078      	str	r0, [r7, #4]
 801221a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	681a      	ldr	r2, [r3, #0]
 8012220:	683b      	ldr	r3, [r7, #0]
 8012222:	009b      	lsls	r3, r3, #2
 8012224:	425b      	negs	r3, r3
 8012226:	4413      	add	r3, r2
 8012228:	60fb      	str	r3, [r7, #12]
 801222a:	f107 020c 	add.w	r2, r7, #12
 801222e:	f107 0308 	add.w	r3, r7, #8
 8012232:	4611      	mov	r1, r2
 8012234:	4618      	mov	r0, r3
 8012236:	f7fe fc40 	bl	8010aba <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	4618      	mov	r0, r3
 801223e:	3710      	adds	r7, #16
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}

08012244 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012244:	b580      	push	{r7, lr}
 8012246:	b082      	sub	sp, #8
 8012248:	af00      	add	r7, sp, #0
 801224a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	4618      	mov	r0, r3
 8012250:	f000 fd45 	bl	8012cde <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8012254:	4603      	mov	r3, r0
 8012256:	4618      	mov	r0, r3
 8012258:	f000 fd27 	bl	8012caa <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>
 801225c:	4603      	mov	r3, r0
 801225e:	4618      	mov	r0, r3
 8012260:	3708      	adds	r7, #8
 8012262:	46bd      	mov	sp, r7
 8012264:	bd80      	pop	{r7, pc}

08012266 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012266:	b580      	push	{r7, lr}
 8012268:	b084      	sub	sp, #16
 801226a:	af00      	add	r7, sp, #0
 801226c:	6078      	str	r0, [r7, #4]
 801226e:	6039      	str	r1, [r7, #0]
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	60fb      	str	r3, [r7, #12]
 8012274:	683b      	ldr	r3, [r7, #0]
 8012276:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012278:	f7ee f852 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801227c:	4603      	mov	r3, r0
 801227e:	2b00      	cmp	r3, #0
 8012280:	d006      	beq.n	8012290 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	009b      	lsls	r3, r3, #2
 8012286:	4618      	mov	r0, r3
 8012288:	f00e f9c8 	bl	802061c <_Znwj>
 801228c:	4603      	mov	r3, r0
 801228e:	e006      	b.n	801229e <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012290:	2200      	movs	r2, #0
 8012292:	68b9      	ldr	r1, [r7, #8]
 8012294:	68f8      	ldr	r0, [r7, #12]
 8012296:	f001 f8b6 	bl	8013406 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>
 801229a:	4603      	mov	r3, r0
 801229c:	bf00      	nop
      { return __a.allocate(__n); }
 801229e:	4618      	mov	r0, r3
 80122a0:	3710      	adds	r7, #16
 80122a2:	46bd      	mov	sp, r7
 80122a4:	bd80      	pop	{r7, pc}

080122a6 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b084      	sub	sp, #16
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	60f8      	str	r0, [r7, #12]
 80122ae:	60b9      	str	r1, [r7, #8]
 80122b0:	607a      	str	r2, [r7, #4]
 80122b2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80122b4:	683b      	ldr	r3, [r7, #0]
 80122b6:	687a      	ldr	r2, [r7, #4]
 80122b8:	68b9      	ldr	r1, [r7, #8]
 80122ba:	68f8      	ldr	r0, [r7, #12]
 80122bc:	f000 fd1a 	bl	8012cf4 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>
 80122c0:	4603      	mov	r3, r0
      }
 80122c2:	4618      	mov	r0, r3
 80122c4:	3710      	adds	r7, #16
 80122c6:	46bd      	mov	sp, r7
 80122c8:	bd80      	pop	{r7, pc}

080122ca <_ZSt10destroy_atIP13StreamMessageEvPT_>:
    destroy_at(_Tp* __location)
 80122ca:	b480      	push	{r7}
 80122cc:	b083      	sub	sp, #12
 80122ce:	af00      	add	r7, sp, #0
 80122d0:	6078      	str	r0, [r7, #4]
    }
 80122d2:	bf00      	nop
 80122d4:	370c      	adds	r7, #12
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr

080122de <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>:
      _M_access() const
 80122de:	b580      	push	{r7, lr}
 80122e0:	b082      	sub	sp, #8
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7fb f966 	bl	800d5b8 <_ZNKSt9_Any_data9_M_accessEv>
 80122ec:	4603      	mov	r3, r0
 80122ee:	4618      	mov	r0, r3
 80122f0:	3708      	adds	r7, #8
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80122f6:	b480      	push	{r7}
 80122f8:	b083      	sub	sp, #12
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	4618      	mov	r0, r3
 8012302:	370c      	adds	r7, #12
 8012304:	46bd      	mov	sp, r7
 8012306:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230a:	4770      	bx	lr

0801230c <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801230c:	b480      	push	{r7}
 801230e:	b083      	sub	sp, #12
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	4618      	mov	r0, r3
 8012318:	370c      	adds	r7, #12
 801231a:	46bd      	mov	sp, r7
 801231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012320:	4770      	bx	lr

08012322 <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012322:	b580      	push	{r7, lr}
 8012324:	b082      	sub	sp, #8
 8012326:	af00      	add	r7, sp, #0
 8012328:	7138      	strb	r0, [r7, #4]
 801232a:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 801232c:	6838      	ldr	r0, [r7, #0]
 801232e:	f7ff ffed 	bl	801230c <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8012332:	4603      	mov	r3, r0
 8012334:	4618      	mov	r0, r3
 8012336:	f7fb fe31 	bl	800df9c <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>
 801233a:	bf00      	nop
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012342:	b590      	push	{r4, r7, lr}
 8012344:	b085      	sub	sp, #20
 8012346:	af00      	add	r7, sp, #0
 8012348:	60f8      	str	r0, [r7, #12]
 801234a:	60b9      	str	r1, [r7, #8]
 801234c:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 801234e:	68b8      	ldr	r0, [r7, #8]
 8012350:	f7ff ffc5 	bl	80122de <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 8012354:	4604      	mov	r4, r0
 8012356:	68f8      	ldr	r0, [r7, #12]
 8012358:	f7fb f923 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 801235c:	4603      	mov	r3, r0
 801235e:	4619      	mov	r1, r3
 8012360:	2004      	movs	r0, #4
 8012362:	f7ed ffe5 	bl	8000330 <_ZnwjPv>
 8012366:	4602      	mov	r2, r0
 8012368:	6823      	ldr	r3, [r4, #0]
 801236a:	6013      	str	r3, [r2, #0]
	}
 801236c:	bf00      	nop
 801236e:	3714      	adds	r7, #20
 8012370:	46bd      	mov	sp, r7
 8012372:	bd90      	pop	{r4, r7, pc}

08012374 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012374:	b580      	push	{r7, lr}
 8012376:	b082      	sub	sp, #8
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 801237e:	6878      	ldr	r0, [r7, #4]
 8012380:	f000 fcd5 	bl	8012d2e <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
	}
 8012384:	bf00      	nop
 8012386:	3708      	adds	r7, #8
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}

0801238c <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>:
 801238c:	b480      	push	{r7}
 801238e:	b083      	sub	sp, #12
 8012390:	af00      	add	r7, sp, #0
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	4618      	mov	r0, r3
 8012398:	370c      	adds	r7, #12
 801239a:	46bd      	mov	sp, r7
 801239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123a0:	4770      	bx	lr

080123a2 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80123a2:	b580      	push	{r7, lr}
 80123a4:	b088      	sub	sp, #32
 80123a6:	af00      	add	r7, sp, #0
 80123a8:	60f8      	str	r0, [r7, #12]
 80123aa:	60b9      	str	r1, [r7, #8]
 80123ac:	607a      	str	r2, [r7, #4]
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	61fb      	str	r3, [r7, #28]
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	61bb      	str	r3, [r7, #24]
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80123ba:	f7ed ffb1 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80123be:	4603      	mov	r3, r0
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d003      	beq.n	80123cc <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 80123c4:	69b8      	ldr	r0, [r7, #24]
 80123c6:	f00e f925 	bl	8020614 <_ZdlPv>
	    return;
 80123ca:	e005      	b.n	80123d8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80123cc:	697a      	ldr	r2, [r7, #20]
 80123ce:	69b9      	ldr	r1, [r7, #24]
 80123d0:	69f8      	ldr	r0, [r7, #28]
 80123d2:	f001 f860 	bl	8013496 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 80123d6:	bf00      	nop
 80123d8:	bf00      	nop
 80123da:	3720      	adds	r7, #32
 80123dc:	46bd      	mov	sp, r7
 80123de:	bd80      	pop	{r7, pc}

080123e0 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80123e0:	b580      	push	{r7, lr}
 80123e2:	b082      	sub	sp, #8
 80123e4:	af00      	add	r7, sp, #0
 80123e6:	6078      	str	r0, [r7, #4]
 80123e8:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80123ea:	f7ed ff99 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d004      	beq.n	80123fe <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80123f4:	6839      	ldr	r1, [r7, #0]
 80123f6:	6878      	ldr	r0, [r7, #4]
 80123f8:	f000 fca5 	bl	8012d46 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>
 80123fc:	e003      	b.n	8012406 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x26>
	__destroy(__first, __last);
 80123fe:	6839      	ldr	r1, [r7, #0]
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 fcb8 	bl	8012d76 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>
    }
 8012406:	3708      	adds	r7, #8
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 801240c:	b480      	push	{r7}
 801240e:	b083      	sub	sp, #12
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	4618      	mov	r0, r3
 8012418:	370c      	adds	r7, #12
 801241a:	46bd      	mov	sp, r7
 801241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012420:	4770      	bx	lr

08012422 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      vector<_Tp, _Alloc>::
 8012422:	b5b0      	push	{r4, r5, r7, lr}
 8012424:	b082      	sub	sp, #8
 8012426:	af00      	add	r7, sp, #0
 8012428:	6078      	str	r0, [r7, #4]
 801242a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	685a      	ldr	r2, [r3, #4]
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	689b      	ldr	r3, [r3, #8]
 8012434:	429a      	cmp	r2, r3
 8012436:	d011      	beq.n	801245c <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8012438:	687c      	ldr	r4, [r7, #4]
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	685d      	ldr	r5, [r3, #4]
 801243e:	6838      	ldr	r0, [r7, #0]
 8012440:	f000 fca4 	bl	8012d8c <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012444:	4603      	mov	r3, r0
 8012446:	461a      	mov	r2, r3
 8012448:	4629      	mov	r1, r5
 801244a:	4620      	mov	r0, r4
 801244c:	f000 fcbe 	bl	8012dcc <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	685b      	ldr	r3, [r3, #4]
 8012454:	1d1a      	adds	r2, r3, #4
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	605a      	str	r2, [r3, #4]
 801245a:	e00c      	b.n	8012476 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801245c:	6878      	ldr	r0, [r7, #4]
 801245e:	f7f2 fe58 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012462:	4604      	mov	r4, r0
 8012464:	6838      	ldr	r0, [r7, #0]
 8012466:	f000 fc91 	bl	8012d8c <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 801246a:	4603      	mov	r3, r0
 801246c:	461a      	mov	r2, r3
 801246e:	4621      	mov	r1, r4
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f000 fcbd 	bl	8012df0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f000 fd36 	bl	8012ee8 <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>
 801247c:	4603      	mov	r3, r0
      }
 801247e:	4618      	mov	r0, r3
 8012480:	3708      	adds	r7, #8
 8012482:	46bd      	mov	sp, r7
 8012484:	bdb0      	pop	{r4, r5, r7, pc}

08012486 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8012486:	b590      	push	{r4, r7, lr}
 8012488:	b083      	sub	sp, #12
 801248a:	af00      	add	r7, sp, #0
 801248c:	6078      	str	r0, [r7, #4]
 801248e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8012490:	6878      	ldr	r0, [r7, #4]
 8012492:	f7f9 ff72 	bl	800c37a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8012496:	4604      	mov	r4, r0
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 fd40 	bl	8012f1e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801249e:	4602      	mov	r2, r0
 80124a0:	683b      	ldr	r3, [r7, #0]
 80124a2:	4621      	mov	r1, r4
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f000 fd46 	bl	8012f36 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 80124aa:	4603      	mov	r3, r0
 80124ac:	4618      	mov	r0, r3
 80124ae:	370c      	adds	r7, #12
 80124b0:	46bd      	mov	sp, r7
 80124b2:	bd90      	pop	{r4, r7, pc}

080124b4 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 80124b4:	b480      	push	{r7}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80124bc:	bf00      	nop
 80124be:	4618      	mov	r0, r3
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr

080124ca <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 80124ca:	b580      	push	{r7, lr}
 80124cc:	b082      	sub	sp, #8
 80124ce:	af00      	add	r7, sp, #0
 80124d0:	6078      	str	r0, [r7, #4]
 80124d2:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	6839      	ldr	r1, [r7, #0]
 80124d8:	4618      	mov	r0, r3
 80124da:	f000 fd5d 	bl	8012f98 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80124de:	687b      	ldr	r3, [r7, #4]
 80124e0:	4618      	mov	r0, r3
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	4618      	mov	r0, r3
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr

080124fe <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80124fe:	b5b0      	push	{r4, r5, r7, lr}
 8012500:	b088      	sub	sp, #32
 8012502:	af02      	add	r7, sp, #8
 8012504:	60f8      	str	r0, [r7, #12]
 8012506:	60b9      	str	r1, [r7, #8]
 8012508:	607a      	str	r2, [r7, #4]
 801250a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801250c:	68f8      	ldr	r0, [r7, #12]
 801250e:	f000 fd52 	bl	8012fb6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8012512:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8012514:	68b8      	ldr	r0, [r7, #8]
 8012516:	f7ee fea6 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801251a:	4604      	mov	r4, r0
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f7ff ffe3 	bl	80124e8 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012522:	4605      	mov	r5, r0
 8012524:	6838      	ldr	r0, [r7, #0]
 8012526:	f7ee feb4 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801252a:	4603      	mov	r3, r0
 801252c:	9300      	str	r3, [sp, #0]
 801252e:	462b      	mov	r3, r5
 8012530:	4622      	mov	r2, r4
 8012532:	6979      	ldr	r1, [r7, #20]
 8012534:	68f8      	ldr	r0, [r7, #12]
 8012536:	f000 fd4f 	bl	8012fd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 801253a:	697b      	ldr	r3, [r7, #20]
	}
 801253c:	4618      	mov	r0, r3
 801253e:	3718      	adds	r7, #24
 8012540:	46bd      	mov	sp, r7
 8012542:	bdb0      	pop	{r4, r5, r7, pc}

08012544 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012544:	b590      	push	{r4, r7, lr}
 8012546:	b08d      	sub	sp, #52	; 0x34
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8012552:	1d3b      	adds	r3, r7, #4
 8012554:	4618      	mov	r0, r3
 8012556:	f000 fd6c 	bl	8013032 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>
 801255a:	4603      	mov	r3, r0
 801255c:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801255e:	69bc      	ldr	r4, [r7, #24]
 8012560:	68b8      	ldr	r0, [r7, #8]
 8012562:	f000 fcdc 	bl	8012f1e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8012566:	4603      	mov	r3, r0
 8012568:	429c      	cmp	r4, r3
 801256a:	bf0c      	ite	eq
 801256c:	2301      	moveq	r3, #1
 801256e:	2300      	movne	r3, #0
 8012570:	b2db      	uxtb	r3, r3
 8012572:	2b00      	cmp	r3, #0
 8012574:	d030      	beq.n	80125d8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8012576:	68b8      	ldr	r0, [r7, #8]
 8012578:	f000 fd6c 	bl	8013054 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 801257c:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801257e:	2b00      	cmp	r3, #0
 8012580:	d013      	beq.n	80125aa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8012582:	68bc      	ldr	r4, [r7, #8]
 8012584:	68b8      	ldr	r0, [r7, #8]
 8012586:	f000 fd71 	bl	801306c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 801258a:	4603      	mov	r3, r0
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	4618      	mov	r0, r3
 8012590:	f000 fd78 	bl	8013084 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012594:	4603      	mov	r3, r0
 8012596:	683a      	ldr	r2, [r7, #0]
 8012598:	4619      	mov	r1, r3
 801259a:	4620      	mov	r0, r4
 801259c:	f7ff fa1f 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 80125a0:	4603      	mov	r3, r0
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d001      	beq.n	80125aa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 80125a6:	2301      	movs	r3, #1
 80125a8:	e000      	b.n	80125ac <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 80125aa:	2300      	movs	r3, #0
	  if (size() > 0
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00c      	beq.n	80125ca <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80125b0:	2300      	movs	r3, #0
 80125b2:	61fb      	str	r3, [r7, #28]
 80125b4:	68b8      	ldr	r0, [r7, #8]
 80125b6:	f000 fd59 	bl	801306c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80125ba:	4602      	mov	r2, r0
 80125bc:	f107 031c 	add.w	r3, r7, #28
 80125c0:	4619      	mov	r1, r3
 80125c2:	68f8      	ldr	r0, [r7, #12]
 80125c4:	f7ef fc70 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80125c8:	e0db      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	683a      	ldr	r2, [r7, #0]
 80125ce:	68b9      	ldr	r1, [r7, #8]
 80125d0:	4618      	mov	r0, r3
 80125d2:	f000 fd63 	bl	801309c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80125d6:	e0d4      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80125d8:	68bc      	ldr	r4, [r7, #8]
 80125da:	69bb      	ldr	r3, [r7, #24]
 80125dc:	4618      	mov	r0, r3
 80125de:	f000 fd51 	bl	8013084 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80125e2:	4603      	mov	r3, r0
 80125e4:	461a      	mov	r2, r3
 80125e6:	6839      	ldr	r1, [r7, #0]
 80125e8:	4620      	mov	r0, r4
 80125ea:	f7ff f9f8 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 80125ee:	4603      	mov	r3, r0
 80125f0:	2b00      	cmp	r3, #0
 80125f2:	d057      	beq.n	80126a4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 80125f4:	69bb      	ldr	r3, [r7, #24]
 80125f6:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80125f8:	69bc      	ldr	r4, [r7, #24]
 80125fa:	68b8      	ldr	r0, [r7, #8]
 80125fc:	f000 fdd3 	bl	80131a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8012600:	4603      	mov	r3, r0
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	429c      	cmp	r4, r3
 8012606:	bf0c      	ite	eq
 8012608:	2301      	moveq	r3, #1
 801260a:	2300      	movne	r3, #0
 801260c:	b2db      	uxtb	r3, r3
 801260e:	2b00      	cmp	r3, #0
 8012610:	d00d      	beq.n	801262e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8012612:	68b8      	ldr	r0, [r7, #8]
 8012614:	f000 fdc7 	bl	80131a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8012618:	4604      	mov	r4, r0
 801261a:	68b8      	ldr	r0, [r7, #8]
 801261c:	f000 fdc3 	bl	80131a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8012620:	4603      	mov	r3, r0
 8012622:	461a      	mov	r2, r3
 8012624:	4621      	mov	r1, r4
 8012626:	68f8      	ldr	r0, [r7, #12]
 8012628:	f7ef fcea 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801262c:	e0a9      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801262e:	68bc      	ldr	r4, [r7, #8]
 8012630:	f107 0314 	add.w	r3, r7, #20
 8012634:	4618      	mov	r0, r3
 8012636:	f000 fdc2 	bl	80131be <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
 801263a:	4603      	mov	r3, r0
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	4618      	mov	r0, r3
 8012640:	f000 fd20 	bl	8013084 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012644:	4603      	mov	r3, r0
 8012646:	683a      	ldr	r2, [r7, #0]
 8012648:	4619      	mov	r1, r3
 801264a:	4620      	mov	r0, r4
 801264c:	f7ff f9c7 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 8012650:	4603      	mov	r3, r0
 8012652:	2b00      	cmp	r3, #0
 8012654:	d01f      	beq.n	8012696 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8012656:	697b      	ldr	r3, [r7, #20]
 8012658:	4618      	mov	r0, r3
 801265a:	f7f9 fea5 	bl	800c3a8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801265e:	4603      	mov	r3, r0
 8012660:	2b00      	cmp	r3, #0
 8012662:	bf0c      	ite	eq
 8012664:	2301      	moveq	r3, #1
 8012666:	2300      	movne	r3, #0
 8012668:	b2db      	uxtb	r3, r3
 801266a:	2b00      	cmp	r3, #0
 801266c:	d00a      	beq.n	8012684 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801266e:	2300      	movs	r3, #0
 8012670:	623b      	str	r3, [r7, #32]
 8012672:	f107 0214 	add.w	r2, r7, #20
 8012676:	f107 0320 	add.w	r3, r7, #32
 801267a:	4619      	mov	r1, r3
 801267c:	68f8      	ldr	r0, [r7, #12]
 801267e:	f7ef fc13 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012682:	e07e      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8012684:	f107 0218 	add.w	r2, r7, #24
 8012688:	f107 0318 	add.w	r3, r7, #24
 801268c:	4619      	mov	r1, r3
 801268e:	68f8      	ldr	r0, [r7, #12]
 8012690:	f7ef fcb6 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012694:	e075      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	683a      	ldr	r2, [r7, #0]
 801269a:	68b9      	ldr	r1, [r7, #8]
 801269c:	4618      	mov	r0, r3
 801269e:	f000 fcfd 	bl	801309c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80126a2:	e06e      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80126a4:	68bc      	ldr	r4, [r7, #8]
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f000 fceb 	bl	8013084 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80126ae:	4603      	mov	r3, r0
 80126b0:	683a      	ldr	r2, [r7, #0]
 80126b2:	4619      	mov	r1, r3
 80126b4:	4620      	mov	r0, r4
 80126b6:	f7ff f992 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 80126ba:	4603      	mov	r3, r0
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d056      	beq.n	801276e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 80126c0:	69bb      	ldr	r3, [r7, #24]
 80126c2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80126c4:	69bc      	ldr	r4, [r7, #24]
 80126c6:	68b8      	ldr	r0, [r7, #8]
 80126c8:	f000 fcd0 	bl	801306c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80126cc:	4603      	mov	r3, r0
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	429c      	cmp	r4, r3
 80126d2:	bf0c      	ite	eq
 80126d4:	2301      	moveq	r3, #1
 80126d6:	2300      	movne	r3, #0
 80126d8:	b2db      	uxtb	r3, r3
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d00c      	beq.n	80126f8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80126de:	2300      	movs	r3, #0
 80126e0:	627b      	str	r3, [r7, #36]	; 0x24
 80126e2:	68b8      	ldr	r0, [r7, #8]
 80126e4:	f000 fcc2 	bl	801306c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80126e8:	4602      	mov	r2, r0
 80126ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80126ee:	4619      	mov	r1, r3
 80126f0:	68f8      	ldr	r0, [r7, #12]
 80126f2:	f7ef fbd9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80126f6:	e044      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80126f8:	68bc      	ldr	r4, [r7, #8]
 80126fa:	f107 0310 	add.w	r3, r7, #16
 80126fe:	4618      	mov	r0, r3
 8012700:	f7f2 fd46 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8012704:	4603      	mov	r3, r0
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	4618      	mov	r0, r3
 801270a:	f000 fcbb 	bl	8013084 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801270e:	4603      	mov	r3, r0
 8012710:	461a      	mov	r2, r3
 8012712:	6839      	ldr	r1, [r7, #0]
 8012714:	4620      	mov	r0, r4
 8012716:	f7ff f962 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 801271a:	4603      	mov	r3, r0
 801271c:	2b00      	cmp	r3, #0
 801271e:	d01f      	beq.n	8012760 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8012720:	69bb      	ldr	r3, [r7, #24]
 8012722:	4618      	mov	r0, r3
 8012724:	f7f9 fe40 	bl	800c3a8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012728:	4603      	mov	r3, r0
 801272a:	2b00      	cmp	r3, #0
 801272c:	bf0c      	ite	eq
 801272e:	2301      	moveq	r3, #1
 8012730:	2300      	movne	r3, #0
 8012732:	b2db      	uxtb	r3, r3
 8012734:	2b00      	cmp	r3, #0
 8012736:	d00a      	beq.n	801274e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8012738:	2300      	movs	r3, #0
 801273a:	62bb      	str	r3, [r7, #40]	; 0x28
 801273c:	f107 0218 	add.w	r2, r7, #24
 8012740:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012744:	4619      	mov	r1, r3
 8012746:	68f8      	ldr	r0, [r7, #12]
 8012748:	f7ef fbae 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801274c:	e019      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801274e:	f107 0210 	add.w	r2, r7, #16
 8012752:	f107 0310 	add.w	r3, r7, #16
 8012756:	4619      	mov	r1, r3
 8012758:	68f8      	ldr	r0, [r7, #12]
 801275a:	f7ef fc51 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801275e:	e010      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	683a      	ldr	r2, [r7, #0]
 8012764:	68b9      	ldr	r1, [r7, #8]
 8012766:	4618      	mov	r0, r3
 8012768:	f000 fc98 	bl	801309c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 801276c:	e009      	b.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801276e:	2300      	movs	r3, #0
 8012770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012772:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012776:	f107 0318 	add.w	r3, r7, #24
 801277a:	4619      	mov	r1, r3
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	f7ef fc7a 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8012782:	68f8      	ldr	r0, [r7, #12]
 8012784:	3734      	adds	r7, #52	; 0x34
 8012786:	46bd      	mov	sp, r7
 8012788:	bd90      	pop	{r4, r7, pc}

0801278a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 801278a:	b580      	push	{r7, lr}
 801278c:	b084      	sub	sp, #16
 801278e:	af00      	add	r7, sp, #0
 8012790:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8012792:	6878      	ldr	r0, [r7, #4]
 8012794:	f000 fd24 	bl	80131e0 <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8012798:	4602      	mov	r2, r0
 801279a:	f107 030c 	add.w	r3, r7, #12
 801279e:	4611      	mov	r1, r2
 80127a0:	4618      	mov	r0, r3
 80127a2:	f000 fd2b 	bl	80131fc <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>
 80127a6:	4603      	mov	r3, r0
      }
 80127a8:	4618      	mov	r0, r3
 80127aa:	3710      	adds	r7, #16
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80127b0:	b5b0      	push	{r4, r5, r7, lr}
 80127b2:	b086      	sub	sp, #24
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	60f8      	str	r0, [r7, #12]
 80127b8:	60b9      	str	r1, [r7, #8]
 80127ba:	607a      	str	r2, [r7, #4]
 80127bc:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80127be:	68bb      	ldr	r3, [r7, #8]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d117      	bne.n	80127f4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80127c4:	68f8      	ldr	r0, [r7, #12]
 80127c6:	f000 fbaa 	bl	8012f1e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80127ca:	4602      	mov	r2, r0
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	4293      	cmp	r3, r2
 80127d0:	d010      	beq.n	80127f4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80127d2:	68fc      	ldr	r4, [r7, #12]
 80127d4:	6838      	ldr	r0, [r7, #0]
 80127d6:	f7ff ffd8 	bl	801278a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80127da:	4605      	mov	r5, r0
 80127dc:	6878      	ldr	r0, [r7, #4]
 80127de:	f000 fc51 	bl	8013084 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80127e2:	4603      	mov	r3, r0
 80127e4:	461a      	mov	r2, r3
 80127e6:	4629      	mov	r1, r5
 80127e8:	4620      	mov	r0, r4
 80127ea:	f7ff f8f8 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 80127ee:	4603      	mov	r3, r0
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d001      	beq.n	80127f8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 80127f4:	2301      	movs	r3, #1
 80127f6:	e000      	b.n	80127fa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 80127f8:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80127fa:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8012800:	7df8      	ldrb	r0, [r7, #23]
 8012802:	687a      	ldr	r2, [r7, #4]
 8012804:	6839      	ldr	r1, [r7, #0]
 8012806:	f00d ff75 	bl	80206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	695b      	ldr	r3, [r3, #20]
 801280e:	1c5a      	adds	r2, r3, #1
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8012814:	f107 0310 	add.w	r3, r7, #16
 8012818:	6839      	ldr	r1, [r7, #0]
 801281a:	4618      	mov	r0, r3
 801281c:	f7f2 ffc3 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8012820:	693b      	ldr	r3, [r7, #16]
    }
 8012822:	4618      	mov	r0, r3
 8012824:	3718      	adds	r7, #24
 8012826:	46bd      	mov	sp, r7
 8012828:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801282c <_ZN5FieldIJtEEC1EPt>:
    Field(T* ptr) : ptr(ptr) { }
 801282c:	b580      	push	{r7, lr}
 801282e:	b082      	sub	sp, #8
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
 8012834:	6039      	str	r1, [r7, #0]
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	4618      	mov	r0, r3
 801283a:	f7ff f87d 	bl	8011938 <_ZN5FieldIJEEC1Ev>
 801283e:	4a05      	ldr	r2, [pc, #20]	; (8012854 <_ZN5FieldIJtEEC1EPt+0x28>)
 8012840:	687b      	ldr	r3, [r7, #4]
 8012842:	601a      	str	r2, [r3, #0]
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	683a      	ldr	r2, [r7, #0]
 8012848:	605a      	str	r2, [r3, #4]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	3708      	adds	r7, #8
 8012850:	46bd      	mov	sp, r7
 8012852:	bd80      	pop	{r7, pc}
 8012854:	08020d90 	.word	0x08020d90

08012858 <_ZN5FieldIJmEEC1EPm>:
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
 8012860:	6039      	str	r1, [r7, #0]
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	4618      	mov	r0, r3
 8012866:	f7ff f867 	bl	8011938 <_ZN5FieldIJEEC1Ev>
 801286a:	4a05      	ldr	r2, [pc, #20]	; (8012880 <_ZN5FieldIJmEEC1EPm+0x28>)
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	601a      	str	r2, [r3, #0]
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	683a      	ldr	r2, [r7, #0]
 8012874:	605a      	str	r2, [r3, #4]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4618      	mov	r0, r3
 801287a:	3708      	adds	r7, #8
 801287c:	46bd      	mov	sp, r7
 801287e:	bd80      	pop	{r7, pc}
 8012880:	08020d7c 	.word	0x08020d7c

08012884 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012884:	b480      	push	{r7}
 8012886:	b083      	sub	sp, #12
 8012888:	af00      	add	r7, sp, #0
 801288a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	689b      	ldr	r3, [r3, #8]
 8012890:	4618      	mov	r0, r3
 8012892:	370c      	adds	r7, #12
 8012894:	46bd      	mov	sp, r7
 8012896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801289a:	4770      	bx	lr

0801289c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 801289c:	b480      	push	{r7}
 801289e:	b083      	sub	sp, #12
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	68db      	ldr	r3, [r3, #12]
 80128a8:	4618      	mov	r0, r3
 80128aa:	370c      	adds	r7, #12
 80128ac:	46bd      	mov	sp, r7
 80128ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128b2:	4770      	bx	lr

080128b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80128b4:	b480      	push	{r7}
 80128b6:	b083      	sub	sp, #12
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	4618      	mov	r0, r3
 80128c2:	370c      	adds	r7, #12
 80128c4:	46bd      	mov	sp, r7
 80128c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ca:	4770      	bx	lr

080128cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80128cc:	b480      	push	{r7}
 80128ce:	b083      	sub	sp, #12
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	68db      	ldr	r3, [r3, #12]
 80128d8:	4618      	mov	r0, r3
 80128da:	370c      	adds	r7, #12
 80128dc:	46bd      	mov	sp, r7
 80128de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128e2:	4770      	bx	lr

080128e4 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>:
      _M_access() const
 80128e4:	b580      	push	{r7, lr}
 80128e6:	b082      	sub	sp, #8
 80128e8:	af00      	add	r7, sp, #0
 80128ea:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7fa fe63 	bl	800d5b8 <_ZNKSt9_Any_data9_M_accessEv>
 80128f2:	4603      	mov	r3, r0
 80128f4:	4618      	mov	r0, r3
 80128f6:	3708      	adds	r7, #8
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}

080128fc <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80128fc:	b480      	push	{r7}
 80128fe:	b083      	sub	sp, #12
 8012900:	af00      	add	r7, sp, #0
 8012902:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	4618      	mov	r0, r3
 8012908:	370c      	adds	r7, #12
 801290a:	46bd      	mov	sp, r7
 801290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012910:	4770      	bx	lr

08012912 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012912:	b480      	push	{r7}
 8012914:	b083      	sub	sp, #12
 8012916:	af00      	add	r7, sp, #0
 8012918:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	4618      	mov	r0, r3
 801291e:	370c      	adds	r7, #12
 8012920:	46bd      	mov	sp, r7
 8012922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012926:	4770      	bx	lr

08012928 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012928:	b580      	push	{r7, lr}
 801292a:	b082      	sub	sp, #8
 801292c:	af00      	add	r7, sp, #0
 801292e:	7138      	strb	r0, [r7, #4]
 8012930:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012932:	6838      	ldr	r0, [r7, #0]
 8012934:	f7ff ffed 	bl	8012912 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8012938:	4603      	mov	r3, r0
 801293a:	4618      	mov	r0, r3
 801293c:	f7fb fe44 	bl	800e5c8 <_ZZN8TUDTests5setupEvENKUlvE_clEv>
 8012940:	bf00      	nop
 8012942:	3708      	adds	r7, #8
 8012944:	46bd      	mov	sp, r7
 8012946:	bd80      	pop	{r7, pc}

08012948 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012948:	b580      	push	{r7, lr}
 801294a:	b084      	sub	sp, #16
 801294c:	af00      	add	r7, sp, #0
 801294e:	60f8      	str	r0, [r7, #12]
 8012950:	60b9      	str	r1, [r7, #8]
 8012952:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012954:	68b8      	ldr	r0, [r7, #8]
 8012956:	f7ff ffc5 	bl	80128e4 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7fa fe21 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8012960:	4603      	mov	r3, r0
 8012962:	4619      	mov	r1, r3
 8012964:	2001      	movs	r0, #1
 8012966:	f7ed fce3 	bl	8000330 <_ZnwjPv>
	}
 801296a:	bf00      	nop
 801296c:	3710      	adds	r7, #16
 801296e:	46bd      	mov	sp, r7
 8012970:	bd80      	pop	{r7, pc}

08012972 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012972:	b580      	push	{r7, lr}
 8012974:	b082      	sub	sp, #8
 8012976:	af00      	add	r7, sp, #0
 8012978:	6078      	str	r0, [r7, #4]
 801297a:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 fc49 	bl	8013214 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>
	}
 8012982:	bf00      	nop
 8012984:	3708      	adds	r7, #8
 8012986:	46bd      	mov	sp, r7
 8012988:	bd80      	pop	{r7, pc}

0801298a <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>:
      _M_access() const
 801298a:	b580      	push	{r7, lr}
 801298c:	b082      	sub	sp, #8
 801298e:	af00      	add	r7, sp, #0
 8012990:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012992:	6878      	ldr	r0, [r7, #4]
 8012994:	f7fa fe10 	bl	800d5b8 <_ZNKSt9_Any_data9_M_accessEv>
 8012998:	4603      	mov	r3, r0
 801299a:	4618      	mov	r0, r3
 801299c:	3708      	adds	r7, #8
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}

080129a2 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80129a2:	b480      	push	{r7}
 80129a4:	b083      	sub	sp, #12
 80129a6:	af00      	add	r7, sp, #0
 80129a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	4618      	mov	r0, r3
 80129ae:	370c      	adds	r7, #12
 80129b0:	46bd      	mov	sp, r7
 80129b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129b6:	4770      	bx	lr

080129b8 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80129b8:	b480      	push	{r7}
 80129ba:	b083      	sub	sp, #12
 80129bc:	af00      	add	r7, sp, #0
 80129be:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	4618      	mov	r0, r3
 80129c4:	370c      	adds	r7, #12
 80129c6:	46bd      	mov	sp, r7
 80129c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129cc:	4770      	bx	lr

080129ce <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b082      	sub	sp, #8
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	7138      	strb	r0, [r7, #4]
 80129d6:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80129d8:	6838      	ldr	r0, [r7, #0]
 80129da:	f7ff ffed 	bl	80129b8 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 80129de:	4603      	mov	r3, r0
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7fb fdfb 	bl	800e5dc <_ZZN8TUDTests5setupEvENKUlvE0_clEv>
 80129e6:	bf00      	nop
 80129e8:	3708      	adds	r7, #8
 80129ea:	46bd      	mov	sp, r7
 80129ec:	bd80      	pop	{r7, pc}

080129ee <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 80129ee:	b580      	push	{r7, lr}
 80129f0:	b084      	sub	sp, #16
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	60f8      	str	r0, [r7, #12]
 80129f6:	60b9      	str	r1, [r7, #8]
 80129f8:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80129fa:	68b8      	ldr	r0, [r7, #8]
 80129fc:	f7ff ffc5 	bl	801298a <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8012a00:	68f8      	ldr	r0, [r7, #12]
 8012a02:	f7fa fdce 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8012a06:	4603      	mov	r3, r0
 8012a08:	4619      	mov	r1, r3
 8012a0a:	2001      	movs	r0, #1
 8012a0c:	f7ed fc90 	bl	8000330 <_ZnwjPv>
	}
 8012a10:	bf00      	nop
 8012a12:	3710      	adds	r7, #16
 8012a14:	46bd      	mov	sp, r7
 8012a16:	bd80      	pop	{r7, pc}

08012a18 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b082      	sub	sp, #8
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	6078      	str	r0, [r7, #4]
 8012a20:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012a22:	6878      	ldr	r0, [r7, #4]
 8012a24:	f000 fc02 	bl	801322c <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>
	}
 8012a28:	bf00      	nop
 8012a2a:	3708      	adds	r7, #8
 8012a2c:	46bd      	mov	sp, r7
 8012a2e:	bd80      	pop	{r7, pc}

08012a30 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012a30:	b580      	push	{r7, lr}
 8012a32:	b082      	sub	sp, #8
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012a38:	687b      	ldr	r3, [r7, #4]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	f000 fc28 	bl	8013290 <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012a40:	4603      	mov	r3, r0
 8012a42:	4618      	mov	r0, r3
 8012a44:	f000 fc0a 	bl	801325c <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	3708      	adds	r7, #8
 8012a4e:	46bd      	mov	sp, r7
 8012a50:	bd80      	pop	{r7, pc}

08012a52 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012a52:	b480      	push	{r7}
 8012a54:	b083      	sub	sp, #12
 8012a56:	af00      	add	r7, sp, #0
 8012a58:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	685a      	ldr	r2, [r3, #4]
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	1ad3      	subs	r3, r2, r3
 8012a64:	109b      	asrs	r3, r3, #2
 8012a66:	4618      	mov	r0, r3
 8012a68:	370c      	adds	r7, #12
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a70:	4770      	bx	lr

08012a72 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012a72:	b580      	push	{r7, lr}
 8012a74:	b084      	sub	sp, #16
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
 8012a7a:	6039      	str	r1, [r7, #0]
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	60fb      	str	r3, [r7, #12]
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012a84:	f7ed fc4c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d006      	beq.n	8012a9c <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012a8e:	68bb      	ldr	r3, [r7, #8]
 8012a90:	009b      	lsls	r3, r3, #2
 8012a92:	4618      	mov	r0, r3
 8012a94:	f00d fdc2 	bl	802061c <_Znwj>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	e006      	b.n	8012aaa <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	68b9      	ldr	r1, [r7, #8]
 8012aa0:	68f8      	ldr	r0, [r7, #12]
 8012aa2:	f000 fe58 	bl	8013756 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	bf00      	nop
      { return __a.allocate(__n); }
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3710      	adds	r7, #16
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bd80      	pop	{r7, pc}

08012ab2 <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012ab2:	b580      	push	{r7, lr}
 8012ab4:	b084      	sub	sp, #16
 8012ab6:	af00      	add	r7, sp, #0
 8012ab8:	60f8      	str	r0, [r7, #12]
 8012aba:	60b9      	str	r1, [r7, #8]
 8012abc:	607a      	str	r2, [r7, #4]
 8012abe:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012ac0:	683b      	ldr	r3, [r7, #0]
 8012ac2:	687a      	ldr	r2, [r7, #4]
 8012ac4:	68b9      	ldr	r1, [r7, #8]
 8012ac6:	68f8      	ldr	r0, [r7, #12]
 8012ac8:	f000 fbed 	bl	80132a6 <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012acc:	4603      	mov	r3, r0
      }
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3710      	adds	r7, #16
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8012ad6:	b580      	push	{r7, lr}
 8012ad8:	b082      	sub	sp, #8
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
 8012ade:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8012ae0:	6838      	ldr	r0, [r7, #0]
 8012ae2:	f7fe fc21 	bl	8011328 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8012ae6:	4602      	mov	r2, r0
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	4618      	mov	r0, r3
 8012af0:	3708      	adds	r7, #8
 8012af2:	46bd      	mov	sp, r7
 8012af4:	bd80      	pop	{r7, pc}

08012af6 <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8012af6:	b580      	push	{r7, lr}
 8012af8:	b082      	sub	sp, #8
 8012afa:	af00      	add	r7, sp, #0
 8012afc:	6078      	str	r0, [r7, #4]
 8012afe:	6039      	str	r1, [r7, #0]
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	683a      	ldr	r2, [r7, #0]
 8012b04:	4611      	mov	r1, r2
 8012b06:	4618      	mov	r0, r3
 8012b08:	f000 fbea 	bl	80132e0 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	4618      	mov	r0, r3
 8012b10:	3708      	adds	r7, #8
 8012b12:	46bd      	mov	sp, r7
 8012b14:	bd80      	pop	{r7, pc}

08012b16 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012b16:	b5b0      	push	{r4, r5, r7, lr}
 8012b18:	b088      	sub	sp, #32
 8012b1a:	af00      	add	r7, sp, #0
 8012b1c:	60f8      	str	r0, [r7, #12]
 8012b1e:	60b9      	str	r1, [r7, #8]
 8012b20:	607a      	str	r2, [r7, #4]
 8012b22:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012b24:	68b8      	ldr	r0, [r7, #8]
 8012b26:	f7ee fb9e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7fe fc1a 	bl	8011364 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012b30:	4602      	mov	r2, r0
 8012b32:	f107 0318 	add.w	r3, r7, #24
 8012b36:	4611      	mov	r1, r2
 8012b38:	4618      	mov	r0, r3
 8012b3a:	f7ff ffdc 	bl	8012af6 <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>
 8012b3e:	f107 0418 	add.w	r4, r7, #24
 8012b42:	6838      	ldr	r0, [r7, #0]
 8012b44:	f7ee fba5 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012b48:	68fb      	ldr	r3, [r7, #12]
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	2008      	movs	r0, #8
 8012b4e:	f7ed fbef 	bl	8000330 <_ZnwjPv>
 8012b52:	4605      	mov	r5, r0
 8012b54:	7f3b      	ldrb	r3, [r7, #28]
 8012b56:	4622      	mov	r2, r4
 8012b58:	7d39      	ldrb	r1, [r7, #20]
 8012b5a:	4628      	mov	r0, r5
 8012b5c:	f000 fbf1 	bl	8013342 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8012b60:	462b      	mov	r3, r5
 8012b62:	4618      	mov	r0, r3
 8012b64:	3720      	adds	r7, #32
 8012b66:	46bd      	mov	sp, r7
 8012b68:	bdb0      	pop	{r4, r5, r7, pc}

08012b6a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012b6a:	b5b0      	push	{r4, r5, r7, lr}
 8012b6c:	b084      	sub	sp, #16
 8012b6e:	af00      	add	r7, sp, #0
 8012b70:	60f8      	str	r0, [r7, #12]
 8012b72:	60b9      	str	r1, [r7, #8]
 8012b74:	607a      	str	r2, [r7, #4]
 8012b76:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012b78:	6878      	ldr	r0, [r7, #4]
 8012b7a:	f7ee fb74 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012b7e:	4604      	mov	r4, r0
 8012b80:	6838      	ldr	r0, [r7, #0]
 8012b82:	f7fe fbef 	bl	8011364 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012b86:	4605      	mov	r5, r0
 8012b88:	6a38      	ldr	r0, [r7, #32]
 8012b8a:	f7ee fb82 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	462a      	mov	r2, r5
 8012b92:	4621      	mov	r1, r4
 8012b94:	68b8      	ldr	r0, [r7, #8]
 8012b96:	f7ff ffbe 	bl	8012b16 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 8012b9a:	bf00      	nop
 8012b9c:	3710      	adds	r7, #16
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	bdb0      	pop	{r4, r5, r7, pc}

08012ba2 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8012ba2:	b580      	push	{r7, lr}
 8012ba4:	b084      	sub	sp, #16
 8012ba6:	af00      	add	r7, sp, #0
 8012ba8:	60f8      	str	r0, [r7, #12]
 8012baa:	60b9      	str	r1, [r7, #8]
 8012bac:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	009b      	lsls	r3, r3, #2
 8012bb2:	4619      	mov	r1, r3
 8012bb4:	68b8      	ldr	r0, [r7, #8]
 8012bb6:	f00d fd2f 	bl	8020618 <_ZdlPvj>
      }
 8012bba:	3710      	adds	r7, #16
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}

08012bc0 <_ZSt11__addressofIP13StreamMessageEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	370c      	adds	r7, #12
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd4:	4770      	bx	lr

08012bd6 <_ZSt8_DestroyIP13StreamMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 8012bd6:	b580      	push	{r7, lr}
 8012bd8:	b082      	sub	sp, #8
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8012bde:	6878      	ldr	r0, [r7, #4]
 8012be0:	f7ff fb73 	bl	80122ca <_ZSt10destroy_atIP13StreamMessageEvPT_>
    }
 8012be4:	bf00      	nop
 8012be6:	3708      	adds	r7, #8
 8012be8:	46bd      	mov	sp, r7
 8012bea:	bd80      	pop	{r7, pc}

08012bec <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012bec:	b580      	push	{r7, lr}
 8012bee:	b082      	sub	sp, #8
 8012bf0:	af00      	add	r7, sp, #0
 8012bf2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012bf4:	687b      	ldr	r3, [r7, #4]
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	f000 fbdd 	bl	80133b6 <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8012bfc:	4603      	mov	r3, r0
 8012bfe:	4618      	mov	r0, r3
 8012c00:	f000 fbbf 	bl	8013382 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>
 8012c04:	4603      	mov	r3, r0
 8012c06:	4618      	mov	r0, r3
 8012c08:	3708      	adds	r7, #8
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}

08012c0e <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012c0e:	b480      	push	{r7}
 8012c10:	b083      	sub	sp, #12
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	685a      	ldr	r2, [r3, #4]
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	1ad3      	subs	r3, r2, r3
 8012c20:	109b      	asrs	r3, r3, #2
 8012c22:	4618      	mov	r0, r3
 8012c24:	370c      	adds	r7, #12
 8012c26:	46bd      	mov	sp, r7
 8012c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c2c:	4770      	bx	lr

08012c2e <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012c2e:	b580      	push	{r7, lr}
 8012c30:	b084      	sub	sp, #16
 8012c32:	af00      	add	r7, sp, #0
 8012c34:	6078      	str	r0, [r7, #4]
 8012c36:	6039      	str	r1, [r7, #0]
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	60fb      	str	r3, [r7, #12]
 8012c3c:	683b      	ldr	r3, [r7, #0]
 8012c3e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012c40:	f7ed fb6e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012c44:	4603      	mov	r3, r0
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d006      	beq.n	8012c58 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	009b      	lsls	r3, r3, #2
 8012c4e:	4618      	mov	r0, r3
 8012c50:	f00d fce4 	bl	802061c <_Znwj>
 8012c54:	4603      	mov	r3, r0
 8012c56:	e006      	b.n	8012c66 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012c58:	2200      	movs	r2, #0
 8012c5a:	68b9      	ldr	r1, [r7, #8]
 8012c5c:	68f8      	ldr	r0, [r7, #12]
 8012c5e:	f000 fde7 	bl	8013830 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>
 8012c62:	4603      	mov	r3, r0
 8012c64:	bf00      	nop
      { return __a.allocate(__n); }
 8012c66:	4618      	mov	r0, r3
 8012c68:	3710      	adds	r7, #16
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}

08012c6e <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012c6e:	b580      	push	{r7, lr}
 8012c70:	b084      	sub	sp, #16
 8012c72:	af00      	add	r7, sp, #0
 8012c74:	60f8      	str	r0, [r7, #12]
 8012c76:	60b9      	str	r1, [r7, #8]
 8012c78:	607a      	str	r2, [r7, #4]
 8012c7a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012c7c:	683b      	ldr	r3, [r7, #0]
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	68b9      	ldr	r1, [r7, #8]
 8012c82:	68f8      	ldr	r0, [r7, #12]
 8012c84:	f000 fba2 	bl	80133cc <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012c88:	4603      	mov	r3, r0
      }
 8012c8a:	4618      	mov	r0, r3
 8012c8c:	3710      	adds	r7, #16
 8012c8e:	46bd      	mov	sp, r7
 8012c90:	bd80      	pop	{r7, pc}

08012c92 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8012c92:	b480      	push	{r7}
 8012c94:	b083      	sub	sp, #12
 8012c96:	af00      	add	r7, sp, #0
 8012c98:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8012c9a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	370c      	adds	r7, #12
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca8:	4770      	bx	lr

08012caa <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012caa:	b580      	push	{r7, lr}
 8012cac:	b084      	sub	sp, #16
 8012cae:	af00      	add	r7, sp, #0
 8012cb0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012cb2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012cb6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012cb8:	6878      	ldr	r0, [r7, #4]
 8012cba:	f7ff ffea 	bl	8012c92 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012cc2:	f107 0208 	add.w	r2, r7, #8
 8012cc6:	f107 030c 	add.w	r3, r7, #12
 8012cca:	4611      	mov	r1, r2
 8012ccc:	4618      	mov	r0, r3
 8012cce:	f7f0 f88a 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	681b      	ldr	r3, [r3, #0]
      }
 8012cd6:	4618      	mov	r0, r3
 8012cd8:	3710      	adds	r7, #16
 8012cda:	46bd      	mov	sp, r7
 8012cdc:	bd80      	pop	{r7, pc}

08012cde <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012cde:	b480      	push	{r7}
 8012ce0:	b083      	sub	sp, #12
 8012ce2:	af00      	add	r7, sp, #0
 8012ce4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	4618      	mov	r0, r3
 8012cea:	370c      	adds	r7, #12
 8012cec:	46bd      	mov	sp, r7
 8012cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf2:	4770      	bx	lr

08012cf4 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012cf4:	b5b0      	push	{r4, r5, r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
 8012cfa:	60f8      	str	r0, [r7, #12]
 8012cfc:	60b9      	str	r1, [r7, #8]
 8012cfe:	607a      	str	r2, [r7, #4]
 8012d00:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012d02:	68f8      	ldr	r0, [r7, #12]
 8012d04:	f000 fb9e 	bl	8013444 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012d08:	4604      	mov	r4, r0
 8012d0a:	68b8      	ldr	r0, [r7, #8]
 8012d0c:	f000 fb9a 	bl	8013444 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012d10:	4605      	mov	r5, r0
 8012d12:	6878      	ldr	r0, [r7, #4]
 8012d14:	f000 fb96 	bl	8013444 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012d18:	4602      	mov	r2, r0
 8012d1a:	683b      	ldr	r3, [r7, #0]
 8012d1c:	4629      	mov	r1, r5
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f000 fb9b 	bl	801345a <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012d24:	4603      	mov	r3, r0
    }
 8012d26:	4618      	mov	r0, r3
 8012d28:	3710      	adds	r7, #16
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bdb0      	pop	{r4, r5, r7, pc}

08012d2e <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 8012d2e:	b580      	push	{r7, lr}
 8012d30:	b082      	sub	sp, #8
 8012d32:	af00      	add	r7, sp, #0
 8012d34:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f7fa fc33 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8012d3c:	4603      	mov	r3, r0
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3708      	adds	r7, #8
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}

08012d46 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012d46:	b580      	push	{r7, lr}
 8012d48:	b082      	sub	sp, #8
 8012d4a:	af00      	add	r7, sp, #0
 8012d4c:	6078      	str	r0, [r7, #4]
 8012d4e:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	429a      	cmp	r2, r3
 8012d56:	d00a      	beq.n	8012d6e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8012d58:	6878      	ldr	r0, [r7, #4]
 8012d5a:	f000 fbab 	bl	80134b4 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	4618      	mov	r0, r3
 8012d62:	f000 fbb2 	bl	80134ca <_ZSt8_DestroyIP5FieldIJEEEvPT_>
	  for (; __first != __last; ++__first)
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	3304      	adds	r3, #4
 8012d6a:	607b      	str	r3, [r7, #4]
 8012d6c:	e7f0      	b.n	8012d50 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0xa>
	}
 8012d6e:	bf00      	nop
 8012d70:	3708      	adds	r7, #8
 8012d72:	46bd      	mov	sp, r7
 8012d74:	bd80      	pop	{r7, pc}

08012d76 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012d76:	b480      	push	{r7}
 8012d78:	b083      	sub	sp, #12
 8012d7a:	af00      	add	r7, sp, #0
 8012d7c:	6078      	str	r0, [r7, #4]
 8012d7e:	6039      	str	r1, [r7, #0]
 8012d80:	bf00      	nop
 8012d82:	370c      	adds	r7, #12
 8012d84:	46bd      	mov	sp, r7
 8012d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8a:	4770      	bx	lr

08012d8c <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012d8c:	b480      	push	{r7}
 8012d8e:	b083      	sub	sp, #12
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	4618      	mov	r0, r3
 8012d98:	370c      	adds	r7, #12
 8012d9a:	46bd      	mov	sp, r7
 8012d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da0:	4770      	bx	lr

08012da2 <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012da2:	b590      	push	{r4, r7, lr}
 8012da4:	b083      	sub	sp, #12
 8012da6:	af00      	add	r7, sp, #0
 8012da8:	6078      	str	r0, [r7, #4]
 8012daa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012dac:	6838      	ldr	r0, [r7, #0]
 8012dae:	f7ff ffed 	bl	8012d8c <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012db2:	4603      	mov	r3, r0
 8012db4:	681c      	ldr	r4, [r3, #0]
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	4619      	mov	r1, r3
 8012dba:	2004      	movs	r0, #4
 8012dbc:	f7ed fab8 	bl	8000330 <_ZnwjPv>
 8012dc0:	4603      	mov	r3, r0
 8012dc2:	601c      	str	r4, [r3, #0]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd90      	pop	{r4, r7, pc}

08012dcc <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	60f8      	str	r0, [r7, #12]
 8012dd4:	60b9      	str	r1, [r7, #8]
 8012dd6:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012dd8:	6878      	ldr	r0, [r7, #4]
 8012dda:	f7ff ffd7 	bl	8012d8c <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012dde:	4603      	mov	r3, r0
 8012de0:	4619      	mov	r1, r3
 8012de2:	68b8      	ldr	r0, [r7, #8]
 8012de4:	f7ff ffdd 	bl	8012da2 <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 8012de8:	bf00      	nop
 8012dea:	3710      	adds	r7, #16
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012df0:	b5b0      	push	{r4, r5, r7, lr}
 8012df2:	b08c      	sub	sp, #48	; 0x30
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	60f8      	str	r0, [r7, #12]
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8012dfc:	4a39      	ldr	r2, [pc, #228]	; (8012ee4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8012dfe:	2101      	movs	r1, #1
 8012e00:	68f8      	ldr	r0, [r7, #12]
 8012e02:	f000 fb6d 	bl	80134e0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>
 8012e06:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	685b      	ldr	r3, [r3, #4]
 8012e12:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8012e14:	68f8      	ldr	r0, [r7, #12]
 8012e16:	f7f2 f96c 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8012e1a:	4603      	mov	r3, r0
 8012e1c:	617b      	str	r3, [r7, #20]
 8012e1e:	f107 0214 	add.w	r2, r7, #20
 8012e22:	f107 0308 	add.w	r3, r7, #8
 8012e26:	4611      	mov	r1, r2
 8012e28:	4618      	mov	r0, r3
 8012e2a:	f000 fba0 	bl	801356e <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e36:	4618      	mov	r0, r3
 8012e38:	f000 fbae 	bl	8013598 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>
 8012e3c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8012e3e:	69fb      	ldr	r3, [r7, #28]
 8012e40:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8012e42:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8012e44:	6a3b      	ldr	r3, [r7, #32]
 8012e46:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8012e48:	69fa      	ldr	r2, [r7, #28]
 8012e4a:	18d5      	adds	r5, r2, r3
 8012e4c:	6878      	ldr	r0, [r7, #4]
 8012e4e:	f7ff ff9d 	bl	8012d8c <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012e52:	4603      	mov	r3, r0
 8012e54:	461a      	mov	r2, r3
 8012e56:	4629      	mov	r1, r5
 8012e58:	4620      	mov	r0, r4
 8012e5a:	f7ff ffb7 	bl	8012dcc <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 8012e5e:	2300      	movs	r3, #0
 8012e60:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012e62:	f107 0308 	add.w	r3, r7, #8
 8012e66:	4618      	mov	r0, r3
 8012e68:	f7f1 fdc3 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8012e6c:	4603      	mov	r3, r0
 8012e6e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7fe fd47 	bl	8011906 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8012e78:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012e7a:	69fa      	ldr	r2, [r7, #28]
 8012e7c:	4621      	mov	r1, r4
 8012e7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e80:	f000 fb9e 	bl	80135c0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8012e84:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8012e86:	69bb      	ldr	r3, [r7, #24]
 8012e88:	3304      	adds	r3, #4
 8012e8a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012e8c:	f107 0308 	add.w	r3, r7, #8
 8012e90:	4618      	mov	r0, r3
 8012e92:	f7f1 fdae 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8012e96:	4603      	mov	r3, r0
 8012e98:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	4618      	mov	r0, r3
 8012e9e:	f7fe fd32 	bl	8011906 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8012ea2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012ea4:	69ba      	ldr	r2, [r7, #24]
 8012ea6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ea8:	4620      	mov	r0, r4
 8012eaa:	f000 fb89 	bl	80135c0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8012eae:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8012eb0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	689a      	ldr	r2, [r3, #8]
 8012eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012eb8:	1ad3      	subs	r3, r2, r3
 8012eba:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012ec0:	f7fe fd0e 	bl	80118e0 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	69fa      	ldr	r2, [r7, #28]
 8012ec8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8012eca:	68fb      	ldr	r3, [r7, #12]
 8012ecc:	69ba      	ldr	r2, [r7, #24]
 8012ece:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ed2:	009b      	lsls	r3, r3, #2
 8012ed4:	69fa      	ldr	r2, [r7, #28]
 8012ed6:	441a      	add	r2, r3
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	609a      	str	r2, [r3, #8]
    }
 8012edc:	bf00      	nop
 8012ede:	3730      	adds	r7, #48	; 0x30
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bdb0      	pop	{r4, r5, r7, pc}
 8012ee4:	08020d08 	.word	0x08020d08

08012ee8 <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b084      	sub	sp, #16
 8012eec:	af00      	add	r7, sp, #0
 8012eee:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8012ef0:	6878      	ldr	r0, [r7, #4]
 8012ef2:	f7f2 f90e 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	60fb      	str	r3, [r7, #12]
 8012efa:	f107 030c 	add.w	r3, r7, #12
 8012efe:	2101      	movs	r1, #1
 8012f00:	4618      	mov	r0, r3
 8012f02:	f000 fb71 	bl	80135e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>
 8012f06:	4603      	mov	r3, r0
 8012f08:	60bb      	str	r3, [r7, #8]
 8012f0a:	f107 0308 	add.w	r3, r7, #8
 8012f0e:	4618      	mov	r0, r3
 8012f10:	f7f1 fda2 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8012f14:	4603      	mov	r3, r0
      }
 8012f16:	4618      	mov	r0, r3
 8012f18:	3710      	adds	r7, #16
 8012f1a:	46bd      	mov	sp, r7
 8012f1c:	bd80      	pop	{r7, pc}

08012f1e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012f1e:	b480      	push	{r7}
 8012f20:	b083      	sub	sp, #12
 8012f22:	af00      	add	r7, sp, #0
 8012f24:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	3304      	adds	r3, #4
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	370c      	adds	r7, #12
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f34:	4770      	bx	lr

08012f36 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012f36:	b590      	push	{r4, r7, lr}
 8012f38:	b087      	sub	sp, #28
 8012f3a:	af00      	add	r7, sp, #0
 8012f3c:	60f8      	str	r0, [r7, #12]
 8012f3e:	60b9      	str	r1, [r7, #8]
 8012f40:	607a      	str	r2, [r7, #4]
 8012f42:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	d01b      	beq.n	8012f82 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012f4a:	68fc      	ldr	r4, [r7, #12]
 8012f4c:	68b8      	ldr	r0, [r7, #8]
 8012f4e:	f7ff fc1c 	bl	801278a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012f52:	4603      	mov	r3, r0
 8012f54:	683a      	ldr	r2, [r7, #0]
 8012f56:	4619      	mov	r1, r3
 8012f58:	4620      	mov	r0, r4
 8012f5a:	f7fe fd40 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 8012f5e:	4603      	mov	r3, r0
 8012f60:	f083 0301 	eor.w	r3, r3, #1
 8012f64:	b2db      	uxtb	r3, r3
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d006      	beq.n	8012f78 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	607b      	str	r3, [r7, #4]
 8012f6e:	68b8      	ldr	r0, [r7, #8]
 8012f70:	f7f9 fa26 	bl	800c3c0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012f74:	60b8      	str	r0, [r7, #8]
 8012f76:	e7e5      	b.n	8012f44 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8012f78:	68b8      	ldr	r0, [r7, #8]
 8012f7a:	f7f9 fa15 	bl	800c3a8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012f7e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012f80:	e7e0      	b.n	8012f44 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8012f82:	f107 0314 	add.w	r3, r7, #20
 8012f86:	6879      	ldr	r1, [r7, #4]
 8012f88:	4618      	mov	r0, r3
 8012f8a:	f7f2 fc0c 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8012f8e:	697b      	ldr	r3, [r7, #20]
    }
 8012f90:	4618      	mov	r0, r3
 8012f92:	371c      	adds	r7, #28
 8012f94:	46bd      	mov	sp, r7
 8012f96:	bd90      	pop	{r4, r7, pc}

08012f98 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8012f98:	b480      	push	{r7}
 8012f9a:	b083      	sub	sp, #12
 8012f9c:	af00      	add	r7, sp, #0
 8012f9e:	6078      	str	r0, [r7, #4]
 8012fa0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	683a      	ldr	r2, [r7, #0]
 8012fa6:	601a      	str	r2, [r3, #0]
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	4618      	mov	r0, r3
 8012fac:	370c      	adds	r7, #12
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr

08012fb6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8012fb6:	b580      	push	{r7, lr}
 8012fb8:	b082      	sub	sp, #8
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8012fbe:	6878      	ldr	r0, [r7, #4]
 8012fc0:	f7f9 fa42 	bl	800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	2101      	movs	r1, #1
 8012fc8:	4618      	mov	r0, r3
 8012fca:	f000 fb26 	bl	801361a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>
 8012fce:	4603      	mov	r3, r0
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	3708      	adds	r7, #8
 8012fd4:	46bd      	mov	sp, r7
 8012fd6:	bd80      	pop	{r7, pc}

08012fd8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012fd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fdc:	b086      	sub	sp, #24
 8012fde:	af02      	add	r7, sp, #8
 8012fe0:	60f8      	str	r0, [r7, #12]
 8012fe2:	60b9      	str	r1, [r7, #8]
 8012fe4:	607a      	str	r2, [r7, #4]
 8012fe6:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	4619      	mov	r1, r3
 8012fec:	2018      	movs	r0, #24
 8012fee:	f7ed f99f 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012ff2:	68f8      	ldr	r0, [r7, #12]
 8012ff4:	f7f9 fa28 	bl	800c448 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8012ff8:	4604      	mov	r4, r0
 8012ffa:	68b8      	ldr	r0, [r7, #8]
 8012ffc:	f7f2 fa34 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8013000:	4605      	mov	r5, r0
 8013002:	6878      	ldr	r0, [r7, #4]
 8013004:	f7ee f92f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013008:	4606      	mov	r6, r0
 801300a:	6838      	ldr	r0, [r7, #0]
 801300c:	f7ff fa6c 	bl	80124e8 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013010:	4680      	mov	r8, r0
 8013012:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013014:	f7ee f93d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8013018:	4603      	mov	r3, r0
 801301a:	9300      	str	r3, [sp, #0]
 801301c:	4643      	mov	r3, r8
 801301e:	4632      	mov	r2, r6
 8013020:	4629      	mov	r1, r5
 8013022:	4620      	mov	r0, r4
 8013024:	f000 fb56 	bl	80136d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8013028:	bf00      	nop
 801302a:	3710      	adds	r7, #16
 801302c:	46bd      	mov	sp, r7
 801302e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013032 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8013032:	b580      	push	{r7, lr}
 8013034:	b084      	sub	sp, #16
 8013036:	af00      	add	r7, sp, #0
 8013038:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	681a      	ldr	r2, [r3, #0]
 801303e:	f107 030c 	add.w	r3, r7, #12
 8013042:	4611      	mov	r1, r2
 8013044:	4618      	mov	r0, r3
 8013046:	f7f2 fbae 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	4618      	mov	r0, r3
 801304e:	3710      	adds	r7, #16
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}

08013054 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013054:	b480      	push	{r7}
 8013056:	b083      	sub	sp, #12
 8013058:	af00      	add	r7, sp, #0
 801305a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	695b      	ldr	r3, [r3, #20]
 8013060:	4618      	mov	r0, r3
 8013062:	370c      	adds	r7, #12
 8013064:	46bd      	mov	sp, r7
 8013066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306a:	4770      	bx	lr

0801306c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 801306c:	b480      	push	{r7}
 801306e:	b083      	sub	sp, #12
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	3310      	adds	r3, #16
 8013078:	4618      	mov	r0, r3
 801307a:	370c      	adds	r7, #12
 801307c:	46bd      	mov	sp, r7
 801307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013082:	4770      	bx	lr

08013084 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8013084:	b580      	push	{r7, lr}
 8013086:	b082      	sub	sp, #8
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 801308c:	6878      	ldr	r0, [r7, #4]
 801308e:	f7ff fb7c 	bl	801278a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8013092:	4603      	mov	r3, r0
 8013094:	4618      	mov	r0, r3
 8013096:	3708      	adds	r7, #8
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}

0801309c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801309c:	b590      	push	{r4, r7, lr}
 801309e:	b08b      	sub	sp, #44	; 0x2c
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	60f8      	str	r0, [r7, #12]
 80130a4:	60b9      	str	r1, [r7, #8]
 80130a6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80130a8:	68b8      	ldr	r0, [r7, #8]
 80130aa:	f7f9 f966 	bl	800c37a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 80130ae:	4603      	mov	r3, r0
 80130b0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80130b2:	68b8      	ldr	r0, [r7, #8]
 80130b4:	f7ff ff33 	bl	8012f1e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80130b8:	4603      	mov	r3, r0
 80130ba:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80130bc:	2301      	movs	r3, #1
 80130be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	d020      	beq.n	801310a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80130c8:	69bb      	ldr	r3, [r7, #24]
 80130ca:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80130cc:	68bc      	ldr	r4, [r7, #8]
 80130ce:	69bb      	ldr	r3, [r7, #24]
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7ff fb5a 	bl	801278a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80130d6:	4603      	mov	r3, r0
 80130d8:	461a      	mov	r2, r3
 80130da:	6879      	ldr	r1, [r7, #4]
 80130dc:	4620      	mov	r0, r4
 80130de:	f7fe fc7e 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 80130e2:	4603      	mov	r3, r0
 80130e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80130e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d005      	beq.n	80130fc <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	4618      	mov	r0, r3
 80130f4:	f7f9 f964 	bl	800c3c0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80130f8:	4603      	mov	r3, r0
 80130fa:	e004      	b.n	8013106 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 80130fc:	69bb      	ldr	r3, [r7, #24]
 80130fe:	4618      	mov	r0, r3
 8013100:	f7f9 f952 	bl	800c3a8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8013104:	4603      	mov	r3, r0
 8013106:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8013108:	e7db      	b.n	80130c2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801310a:	697a      	ldr	r2, [r7, #20]
 801310c:	f107 0310 	add.w	r3, r7, #16
 8013110:	4611      	mov	r1, r2
 8013112:	4618      	mov	r0, r3
 8013114:	f7f2 fb47 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8013118:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801311c:	2b00      	cmp	r3, #0
 801311e:	d01d      	beq.n	801315c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8013120:	68b8      	ldr	r0, [r7, #8]
 8013122:	f7f2 f97f 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8013126:	4603      	mov	r3, r0
 8013128:	61fb      	str	r3, [r7, #28]
 801312a:	f107 021c 	add.w	r2, r7, #28
 801312e:	f107 0310 	add.w	r3, r7, #16
 8013132:	4611      	mov	r1, r2
 8013134:	4618      	mov	r0, r3
 8013136:	f7f2 f817 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 801313a:	4603      	mov	r3, r0
 801313c:	2b00      	cmp	r3, #0
 801313e:	d008      	beq.n	8013152 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8013140:	f107 0214 	add.w	r2, r7, #20
 8013144:	f107 0318 	add.w	r3, r7, #24
 8013148:	4619      	mov	r1, r3
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f000 fade 	bl	801370c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8013150:	e025      	b.n	801319e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8013152:	f107 0310 	add.w	r3, r7, #16
 8013156:	4618      	mov	r0, r3
 8013158:	f000 f831 	bl	80131be <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 801315c:	68bc      	ldr	r4, [r7, #8]
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	4618      	mov	r0, r3
 8013162:	f7ff ff8f 	bl	8013084 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013166:	4603      	mov	r3, r0
 8013168:	687a      	ldr	r2, [r7, #4]
 801316a:	4619      	mov	r1, r3
 801316c:	4620      	mov	r0, r4
 801316e:	f7fe fc36 	bl	80119de <_ZNKSt4lessItEclERKtS2_>
 8013172:	4603      	mov	r3, r0
 8013174:	2b00      	cmp	r3, #0
 8013176:	d008      	beq.n	801318a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8013178:	f107 0214 	add.w	r2, r7, #20
 801317c:	f107 0318 	add.w	r3, r7, #24
 8013180:	4619      	mov	r1, r3
 8013182:	68f8      	ldr	r0, [r7, #12]
 8013184:	f000 fac2 	bl	801370c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8013188:	e009      	b.n	801319e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801318a:	2300      	movs	r3, #0
 801318c:	623b      	str	r3, [r7, #32]
 801318e:	f107 0220 	add.w	r2, r7, #32
 8013192:	f107 0310 	add.w	r3, r7, #16
 8013196:	4619      	mov	r1, r3
 8013198:	68f8      	ldr	r0, [r7, #12]
 801319a:	f7ee ff6c 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801319e:	68f8      	ldr	r0, [r7, #12]
 80131a0:	372c      	adds	r7, #44	; 0x2c
 80131a2:	46bd      	mov	sp, r7
 80131a4:	bd90      	pop	{r4, r7, pc}

080131a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80131a6:	b480      	push	{r7}
 80131a8:	b083      	sub	sp, #12
 80131aa:	af00      	add	r7, sp, #0
 80131ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	330c      	adds	r3, #12
 80131b2:	4618      	mov	r0, r3
 80131b4:	370c      	adds	r7, #12
 80131b6:	46bd      	mov	sp, r7
 80131b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131bc:	4770      	bx	lr

080131be <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80131be:	b580      	push	{r7, lr}
 80131c0:	b082      	sub	sp, #8
 80131c2:	af00      	add	r7, sp, #0
 80131c4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	4618      	mov	r0, r3
 80131cc:	f00d fa90 	bl	80206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80131d0:	4602      	mov	r2, r0
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	601a      	str	r2, [r3, #0]
	return *this;
 80131d6:	687b      	ldr	r3, [r7, #4]
      }
 80131d8:	4618      	mov	r0, r3
 80131da:	3708      	adds	r7, #8
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}

080131e0 <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr() const
 80131e0:	b580      	push	{r7, lr}
 80131e2:	b082      	sub	sp, #8
 80131e4:	af00      	add	r7, sp, #0
 80131e6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	3310      	adds	r3, #16
 80131ec:	4618      	mov	r0, r3
 80131ee:	f000 faa6 	bl	801373e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 80131f2:	4603      	mov	r3, r0
 80131f4:	4618      	mov	r0, r3
 80131f6:	3708      	adds	r7, #8
 80131f8:	46bd      	mov	sp, r7
 80131fa:	bd80      	pop	{r7, pc}

080131fc <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>:
      operator()(const _Pair& __x) const
 80131fc:	b480      	push	{r7}
 80131fe:	b083      	sub	sp, #12
 8013200:	af00      	add	r7, sp, #0
 8013202:	6078      	str	r0, [r7, #4]
 8013204:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	4618      	mov	r0, r3
 801320a:	370c      	adds	r7, #12
 801320c:	46bd      	mov	sp, r7
 801320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013212:	4770      	bx	lr

08013214 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8013214:	b580      	push	{r7, lr}
 8013216:	b082      	sub	sp, #8
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7fa f9c0 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 8013222:	4603      	mov	r3, r0
 8013224:	4618      	mov	r0, r3
 8013226:	3708      	adds	r7, #8
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}

0801322c <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 801322c:	b580      	push	{r7, lr}
 801322e:	b082      	sub	sp, #8
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013234:	6878      	ldr	r0, [r7, #4]
 8013236:	f7fa f9b4 	bl	800d5a2 <_ZNSt9_Any_data9_M_accessEv>
 801323a:	4603      	mov	r3, r0
 801323c:	4618      	mov	r0, r3
 801323e:	3708      	adds	r7, #8
 8013240:	46bd      	mov	sp, r7
 8013242:	bd80      	pop	{r7, pc}

08013244 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013244:	b480      	push	{r7}
 8013246:	b083      	sub	sp, #12
 8013248:	af00      	add	r7, sp, #0
 801324a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801324c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013250:	4618      	mov	r0, r3
 8013252:	370c      	adds	r7, #12
 8013254:	46bd      	mov	sp, r7
 8013256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801325a:	4770      	bx	lr

0801325c <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013264:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013268:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f7ff ffea 	bl	8013244 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>
 8013270:	4603      	mov	r3, r0
 8013272:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013274:	f107 0208 	add.w	r2, r7, #8
 8013278:	f107 030c 	add.w	r3, r7, #12
 801327c:	4611      	mov	r1, r2
 801327e:	4618      	mov	r0, r3
 8013280:	f7ef fdb1 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013284:	4603      	mov	r3, r0
 8013286:	681b      	ldr	r3, [r3, #0]
      }
 8013288:	4618      	mov	r0, r3
 801328a:	3710      	adds	r7, #16
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013290:	b480      	push	{r7}
 8013292:	b083      	sub	sp, #12
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	4618      	mov	r0, r3
 801329c:	370c      	adds	r7, #12
 801329e:	46bd      	mov	sp, r7
 80132a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a4:	4770      	bx	lr

080132a6 <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80132a6:	b5b0      	push	{r4, r5, r7, lr}
 80132a8:	b084      	sub	sp, #16
 80132aa:	af00      	add	r7, sp, #0
 80132ac:	60f8      	str	r0, [r7, #12]
 80132ae:	60b9      	str	r1, [r7, #8]
 80132b0:	607a      	str	r2, [r7, #4]
 80132b2:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80132b4:	68f8      	ldr	r0, [r7, #12]
 80132b6:	f000 fa6d 	bl	8013794 <_ZSt12__niter_baseIPP5TimerET_S3_>
 80132ba:	4604      	mov	r4, r0
 80132bc:	68b8      	ldr	r0, [r7, #8]
 80132be:	f000 fa69 	bl	8013794 <_ZSt12__niter_baseIPP5TimerET_S3_>
 80132c2:	4605      	mov	r5, r0
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f000 fa65 	bl	8013794 <_ZSt12__niter_baseIPP5TimerET_S3_>
 80132ca:	4602      	mov	r2, r0
 80132cc:	683b      	ldr	r3, [r7, #0]
 80132ce:	4629      	mov	r1, r5
 80132d0:	4620      	mov	r0, r4
 80132d2:	f000 fa6a 	bl	80137aa <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80132d6:	4603      	mov	r3, r0
    }
 80132d8:	4618      	mov	r0, r3
 80132da:	3710      	adds	r7, #16
 80132dc:	46bd      	mov	sp, r7
 80132de:	bdb0      	pop	{r4, r5, r7, pc}

080132e0 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80132e0:	b590      	push	{r4, r7, lr}
 80132e2:	b083      	sub	sp, #12
 80132e4:	af00      	add	r7, sp, #0
 80132e6:	6078      	str	r0, [r7, #4]
 80132e8:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80132ea:	687c      	ldr	r4, [r7, #4]
 80132ec:	6838      	ldr	r0, [r7, #0]
 80132ee:	f000 fa7a 	bl	80137e6 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 80132f2:	4603      	mov	r3, r0
 80132f4:	4618      	mov	r0, r3
 80132f6:	f000 fa83 	bl	8013800 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 80132fa:	4603      	mov	r3, r0
 80132fc:	4619      	mov	r1, r3
 80132fe:	4620      	mov	r0, r4
 8013300:	f7ff fbe9 	bl	8012ad6 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	4618      	mov	r0, r3
 8013308:	370c      	adds	r7, #12
 801330a:	46bd      	mov	sp, r7
 801330c:	bd90      	pop	{r4, r7, pc}

0801330e <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 801330e:	b580      	push	{r7, lr}
 8013310:	b084      	sub	sp, #16
 8013312:	af00      	add	r7, sp, #0
 8013314:	60f8      	str	r0, [r7, #12]
 8013316:	60b9      	str	r1, [r7, #8]
 8013318:	607a      	str	r2, [r7, #4]
 801331a:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 801331c:	68b8      	ldr	r0, [r7, #8]
 801331e:	f000 fa7a 	bl	8013816 <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8013322:	4603      	mov	r3, r0
 8013324:	4618      	mov	r0, r3
 8013326:	f000 fa6b 	bl	8013800 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 801332a:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 801332c:	781a      	ldrb	r2, [r3, #0]
 801332e:	68fb      	ldr	r3, [r7, #12]
 8013330:	701a      	strb	r2, [r3, #0]
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	2200      	movs	r2, #0
 8013336:	605a      	str	r2, [r3, #4]
      { }
 8013338:	68fb      	ldr	r3, [r7, #12]
 801333a:	4618      	mov	r0, r3
 801333c:	3710      	adds	r7, #16
 801333e:	46bd      	mov	sp, r7
 8013340:	bd80      	pop	{r7, pc}

08013342 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 8013342:	b5b0      	push	{r4, r5, r7, lr}
 8013344:	b086      	sub	sp, #24
 8013346:	af02      	add	r7, sp, #8
 8013348:	60f8      	str	r0, [r7, #12]
 801334a:	7239      	strb	r1, [r7, #8]
 801334c:	607a      	str	r2, [r7, #4]
 801334e:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013350:	463a      	mov	r2, r7
 8013352:	f88d 4000 	strb.w	r4, [sp]
 8013356:	462b      	mov	r3, r5
 8013358:	6879      	ldr	r1, [r7, #4]
 801335a:	68f8      	ldr	r0, [r7, #12]
 801335c:	f7ff ffd7 	bl	801330e <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	4618      	mov	r0, r3
 8013364:	3710      	adds	r7, #16
 8013366:	46bd      	mov	sp, r7
 8013368:	bdb0      	pop	{r4, r5, r7, pc}

0801336a <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801336a:	b480      	push	{r7}
 801336c:	b083      	sub	sp, #12
 801336e:	af00      	add	r7, sp, #0
 8013370:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013372:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013376:	4618      	mov	r0, r3
 8013378:	370c      	adds	r7, #12
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr

08013382 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013382:	b580      	push	{r7, lr}
 8013384:	b084      	sub	sp, #16
 8013386:	af00      	add	r7, sp, #0
 8013388:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801338a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801338e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013390:	6878      	ldr	r0, [r7, #4]
 8013392:	f7ff ffea 	bl	801336a <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>
 8013396:	4603      	mov	r3, r0
 8013398:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801339a:	f107 0208 	add.w	r2, r7, #8
 801339e:	f107 030c 	add.w	r3, r7, #12
 80133a2:	4611      	mov	r1, r2
 80133a4:	4618      	mov	r0, r3
 80133a6:	f7ef fd1e 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80133aa:	4603      	mov	r3, r0
 80133ac:	681b      	ldr	r3, [r3, #0]
      }
 80133ae:	4618      	mov	r0, r3
 80133b0:	3710      	adds	r7, #16
 80133b2:	46bd      	mov	sp, r7
 80133b4:	bd80      	pop	{r7, pc}

080133b6 <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80133b6:	b480      	push	{r7}
 80133b8:	b083      	sub	sp, #12
 80133ba:	af00      	add	r7, sp, #0
 80133bc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	4618      	mov	r0, r3
 80133c2:	370c      	adds	r7, #12
 80133c4:	46bd      	mov	sp, r7
 80133c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ca:	4770      	bx	lr

080133cc <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80133cc:	b5b0      	push	{r4, r5, r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	607a      	str	r2, [r7, #4]
 80133d8:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80133da:	68f8      	ldr	r0, [r7, #12]
 80133dc:	f000 fa47 	bl	801386e <_ZSt12__niter_baseIPP6StreamET_S3_>
 80133e0:	4604      	mov	r4, r0
 80133e2:	68b8      	ldr	r0, [r7, #8]
 80133e4:	f000 fa43 	bl	801386e <_ZSt12__niter_baseIPP6StreamET_S3_>
 80133e8:	4605      	mov	r5, r0
 80133ea:	6878      	ldr	r0, [r7, #4]
 80133ec:	f000 fa3f 	bl	801386e <_ZSt12__niter_baseIPP6StreamET_S3_>
 80133f0:	4602      	mov	r2, r0
 80133f2:	683b      	ldr	r3, [r7, #0]
 80133f4:	4629      	mov	r1, r5
 80133f6:	4620      	mov	r0, r4
 80133f8:	f000 fa44 	bl	8013884 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80133fc:	4603      	mov	r3, r0
    }
 80133fe:	4618      	mov	r0, r3
 8013400:	3710      	adds	r7, #16
 8013402:	46bd      	mov	sp, r7
 8013404:	bdb0      	pop	{r4, r5, r7, pc}

08013406 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013406:	b580      	push	{r7, lr}
 8013408:	b084      	sub	sp, #16
 801340a:	af00      	add	r7, sp, #0
 801340c:	60f8      	str	r0, [r7, #12]
 801340e:	60b9      	str	r1, [r7, #8]
 8013410:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013412:	68f8      	ldr	r0, [r7, #12]
 8013414:	f000 fa54 	bl	80138c0 <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>
 8013418:	4602      	mov	r2, r0
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	4293      	cmp	r3, r2
 801341e:	bf8c      	ite	hi
 8013420:	2301      	movhi	r3, #1
 8013422:	2300      	movls	r3, #0
 8013424:	b2db      	uxtb	r3, r3
 8013426:	2b00      	cmp	r3, #0
 8013428:	d001      	beq.n	801342e <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801342a:	f00d f9be 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	009b      	lsls	r3, r3, #2
 8013432:	4618      	mov	r0, r3
 8013434:	f00d f8f2 	bl	802061c <_Znwj>
 8013438:	4603      	mov	r3, r0
 801343a:	bf00      	nop
      }
 801343c:	4618      	mov	r0, r3
 801343e:	3710      	adds	r7, #16
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}

08013444 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>:
    __niter_base(_Iterator __it)
 8013444:	b480      	push	{r7}
 8013446:	b083      	sub	sp, #12
 8013448:	af00      	add	r7, sp, #0
 801344a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	4618      	mov	r0, r3
 8013450:	370c      	adds	r7, #12
 8013452:	46bd      	mov	sp, r7
 8013454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013458:	4770      	bx	lr

0801345a <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801345a:	b580      	push	{r7, lr}
 801345c:	b086      	sub	sp, #24
 801345e:	af00      	add	r7, sp, #0
 8013460:	60f8      	str	r0, [r7, #12]
 8013462:	60b9      	str	r1, [r7, #8]
 8013464:	607a      	str	r2, [r7, #4]
 8013466:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	1ad3      	subs	r3, r2, r3
 801346e:	109b      	asrs	r3, r3, #2
 8013470:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	2b00      	cmp	r3, #0
 8013476:	dd06      	ble.n	8013486 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	009b      	lsls	r3, r3, #2
 801347c:	461a      	mov	r2, r3
 801347e:	68f9      	ldr	r1, [r7, #12]
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f00d fa05 	bl	8020890 <memmove>
      return __result + __count;
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	009b      	lsls	r3, r3, #2
 801348a:	687a      	ldr	r2, [r7, #4]
 801348c:	4413      	add	r3, r2
    }
 801348e:	4618      	mov	r0, r3
 8013490:	3718      	adds	r7, #24
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}

08013496 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8013496:	b580      	push	{r7, lr}
 8013498:	b084      	sub	sp, #16
 801349a:	af00      	add	r7, sp, #0
 801349c:	60f8      	str	r0, [r7, #12]
 801349e:	60b9      	str	r1, [r7, #8]
 80134a0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	009b      	lsls	r3, r3, #2
 80134a6:	4619      	mov	r1, r3
 80134a8:	68b8      	ldr	r0, [r7, #8]
 80134aa:	f00d f8b5 	bl	8020618 <_ZdlPvj>
      }
 80134ae:	3710      	adds	r7, #16
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}

080134b4 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80134b4:	b480      	push	{r7}
 80134b6:	b083      	sub	sp, #12
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	4618      	mov	r0, r3
 80134c0:	370c      	adds	r7, #12
 80134c2:	46bd      	mov	sp, r7
 80134c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c8:	4770      	bx	lr

080134ca <_ZSt8_DestroyIP5FieldIJEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80134ca:	b580      	push	{r7, lr}
 80134cc:	b082      	sub	sp, #8
 80134ce:	af00      	add	r7, sp, #0
 80134d0:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80134d2:	6878      	ldr	r0, [r7, #4]
 80134d4:	f000 fa00 	bl	80138d8 <_ZSt10destroy_atIP5FieldIJEEEvPT_>
    }
 80134d8:	bf00      	nop
 80134da:	3708      	adds	r7, #8
 80134dc:	46bd      	mov	sp, r7
 80134de:	bd80      	pop	{r7, pc}

080134e0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80134e0:	b590      	push	{r4, r7, lr}
 80134e2:	b087      	sub	sp, #28
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	60f8      	str	r0, [r7, #12]
 80134e8:	60b9      	str	r1, [r7, #8]
 80134ea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f000 f9fd 	bl	80138ec <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 80134f2:	4604      	mov	r4, r0
 80134f4:	68f8      	ldr	r0, [r7, #12]
 80134f6:	f000 fa0a 	bl	801390e <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80134fa:	4603      	mov	r3, r0
 80134fc:	1ae2      	subs	r2, r4, r3
 80134fe:	68bb      	ldr	r3, [r7, #8]
 8013500:	429a      	cmp	r2, r3
 8013502:	bf34      	ite	cc
 8013504:	2301      	movcc	r3, #1
 8013506:	2300      	movcs	r3, #0
 8013508:	b2db      	uxtb	r3, r3
 801350a:	2b00      	cmp	r3, #0
 801350c:	d002      	beq.n	8013514 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801350e:	6878      	ldr	r0, [r7, #4]
 8013510:	f00d f94e 	bl	80207b0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f000 f9fa 	bl	801390e <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 801351a:	4604      	mov	r4, r0
 801351c:	68f8      	ldr	r0, [r7, #12]
 801351e:	f000 f9f6 	bl	801390e <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013522:	4603      	mov	r3, r0
 8013524:	613b      	str	r3, [r7, #16]
 8013526:	f107 0208 	add.w	r2, r7, #8
 801352a:	f107 0310 	add.w	r3, r7, #16
 801352e:	4611      	mov	r1, r2
 8013530:	4618      	mov	r0, r3
 8013532:	f7ef f98e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8013536:	4603      	mov	r3, r0
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	4423      	add	r3, r4
 801353c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801353e:	68f8      	ldr	r0, [r7, #12]
 8013540:	f000 f9e5 	bl	801390e <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013544:	4602      	mov	r2, r0
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	4293      	cmp	r3, r2
 801354a:	d306      	bcc.n	801355a <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x7a>
 801354c:	68f8      	ldr	r0, [r7, #12]
 801354e:	f000 f9cd 	bl	80138ec <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013552:	4602      	mov	r2, r0
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	4293      	cmp	r3, r2
 8013558:	d904      	bls.n	8013564 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x84>
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f000 f9c6 	bl	80138ec <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013560:	4603      	mov	r3, r0
 8013562:	e000      	b.n	8013566 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x86>
 8013564:	697b      	ldr	r3, [r7, #20]
      }
 8013566:	4618      	mov	r0, r3
 8013568:	371c      	adds	r7, #28
 801356a:	46bd      	mov	sp, r7
 801356c:	bd90      	pop	{r4, r7, pc}

0801356e <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801356e:	b590      	push	{r4, r7, lr}
 8013570:	b083      	sub	sp, #12
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
 8013576:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8013578:	6878      	ldr	r0, [r7, #4]
 801357a:	f7f1 fa3a 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 801357e:	4603      	mov	r3, r0
 8013580:	681c      	ldr	r4, [r3, #0]
 8013582:	6838      	ldr	r0, [r7, #0]
 8013584:	f7f1 fa35 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8013588:	4603      	mov	r3, r0
 801358a:	681b      	ldr	r3, [r3, #0]
 801358c:	1ae3      	subs	r3, r4, r3
 801358e:	109b      	asrs	r3, r3, #2
 8013590:	4618      	mov	r0, r3
 8013592:	370c      	adds	r7, #12
 8013594:	46bd      	mov	sp, r7
 8013596:	bd90      	pop	{r4, r7, pc}

08013598 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8013598:	b580      	push	{r7, lr}
 801359a:	b082      	sub	sp, #8
 801359c:	af00      	add	r7, sp, #0
 801359e:	6078      	str	r0, [r7, #4]
 80135a0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80135a2:	683b      	ldr	r3, [r7, #0]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d006      	beq.n	80135b6 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x1e>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6839      	ldr	r1, [r7, #0]
 80135ac:	4618      	mov	r0, r3
 80135ae:	f000 f9be 	bl	801392e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>
 80135b2:	4603      	mov	r3, r0
 80135b4:	e000      	b.n	80135b8 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x20>
 80135b6:	2300      	movs	r3, #0
      }
 80135b8:	4618      	mov	r0, r3
 80135ba:	3708      	adds	r7, #8
 80135bc:	46bd      	mov	sp, r7
 80135be:	bd80      	pop	{r7, pc}

080135c0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80135c0:	b590      	push	{r4, r7, lr}
 80135c2:	b087      	sub	sp, #28
 80135c4:	af02      	add	r7, sp, #8
 80135c6:	60f8      	str	r0, [r7, #12]
 80135c8:	60b9      	str	r1, [r7, #8]
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80135ce:	f88d 4000 	strb.w	r4, [sp]
 80135d2:	683b      	ldr	r3, [r7, #0]
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	68b9      	ldr	r1, [r7, #8]
 80135d8:	68f8      	ldr	r0, [r7, #12]
 80135da:	f000 f9c8 	bl	801396e <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 80135de:	4603      	mov	r3, r0
      }
 80135e0:	4618      	mov	r0, r3
 80135e2:	3714      	adds	r7, #20
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd90      	pop	{r4, r7, pc}

080135e8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	681a      	ldr	r2, [r3, #0]
 80135f6:	683b      	ldr	r3, [r7, #0]
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	425b      	negs	r3, r3
 80135fc:	4413      	add	r3, r2
 80135fe:	60fb      	str	r3, [r7, #12]
 8013600:	f107 020c 	add.w	r2, r7, #12
 8013604:	f107 0308 	add.w	r3, r7, #8
 8013608:	4611      	mov	r1, r2
 801360a:	4618      	mov	r0, r3
 801360c:	f7f1 fefa 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	4618      	mov	r0, r3
 8013614:	3710      	adds	r7, #16
 8013616:	46bd      	mov	sp, r7
 8013618:	bd80      	pop	{r7, pc}

0801361a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 801361a:	b580      	push	{r7, lr}
 801361c:	b084      	sub	sp, #16
 801361e:	af00      	add	r7, sp, #0
 8013620:	6078      	str	r0, [r7, #4]
 8013622:	6039      	str	r1, [r7, #0]
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	60fb      	str	r3, [r7, #12]
 8013628:	683b      	ldr	r3, [r7, #0]
 801362a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801362c:	f7ec fe78 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013630:	4603      	mov	r3, r0
 8013632:	2b00      	cmp	r3, #0
 8013634:	d009      	beq.n	801364a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013636:	68ba      	ldr	r2, [r7, #8]
 8013638:	4613      	mov	r3, r2
 801363a:	005b      	lsls	r3, r3, #1
 801363c:	4413      	add	r3, r2
 801363e:	00db      	lsls	r3, r3, #3
 8013640:	4618      	mov	r0, r3
 8013642:	f00c ffeb 	bl	802061c <_Znwj>
 8013646:	4603      	mov	r3, r0
 8013648:	e006      	b.n	8013658 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801364a:	2200      	movs	r2, #0
 801364c:	68b9      	ldr	r1, [r7, #8]
 801364e:	68f8      	ldr	r0, [r7, #12]
 8013650:	f000 fa78 	bl	8013b44 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>
 8013654:	4603      	mov	r3, r0
 8013656:	bf00      	nop
      { return __a.allocate(__n); }
 8013658:	4618      	mov	r0, r3
 801365a:	3710      	adds	r7, #16
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	683a      	ldr	r2, [r7, #0]
 801366e:	4611      	mov	r1, r2
 8013670:	4618      	mov	r0, r3
 8013672:	f000 f98e 	bl	8013992 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	4618      	mov	r0, r3
 801367a:	3708      	adds	r7, #8
 801367c:	46bd      	mov	sp, r7
 801367e:	bd80      	pop	{r7, pc}

08013680 <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8013680:	b5b0      	push	{r4, r5, r7, lr}
 8013682:	b088      	sub	sp, #32
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
 801368c:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801368e:	68b8      	ldr	r0, [r7, #8]
 8013690:	f7ed fde9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f7fe ff27 	bl	80124e8 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801369a:	4602      	mov	r2, r0
 801369c:	f107 0318 	add.w	r3, r7, #24
 80136a0:	4611      	mov	r1, r2
 80136a2:	4618      	mov	r0, r3
 80136a4:	f7ff ffdc 	bl	8013660 <_ZNSt5tupleIJRKtEEC1EOS2_>
 80136a8:	f107 0418 	add.w	r4, r7, #24
 80136ac:	6838      	ldr	r0, [r7, #0]
 80136ae:	f7ed fdf0 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	4619      	mov	r1, r3
 80136b6:	2008      	movs	r0, #8
 80136b8:	f7ec fe3a 	bl	8000330 <_ZnwjPv>
 80136bc:	4605      	mov	r5, r0
 80136be:	7f3b      	ldrb	r3, [r7, #28]
 80136c0:	4622      	mov	r2, r4
 80136c2:	7d39      	ldrb	r1, [r7, #20]
 80136c4:	4628      	mov	r0, r5
 80136c6:	f000 f995 	bl	80139f4 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 80136ca:	462b      	mov	r3, r5
 80136cc:	4618      	mov	r0, r3
 80136ce:	3720      	adds	r7, #32
 80136d0:	46bd      	mov	sp, r7
 80136d2:	bdb0      	pop	{r4, r5, r7, pc}

080136d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80136d4:	b5b0      	push	{r4, r5, r7, lr}
 80136d6:	b084      	sub	sp, #16
 80136d8:	af00      	add	r7, sp, #0
 80136da:	60f8      	str	r0, [r7, #12]
 80136dc:	60b9      	str	r1, [r7, #8]
 80136de:	607a      	str	r2, [r7, #4]
 80136e0:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f7ed fdbf 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80136e8:	4604      	mov	r4, r0
 80136ea:	6838      	ldr	r0, [r7, #0]
 80136ec:	f7fe fefc 	bl	80124e8 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80136f0:	4605      	mov	r5, r0
 80136f2:	6a38      	ldr	r0, [r7, #32]
 80136f4:	f7ed fdcd 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80136f8:	4603      	mov	r3, r0
 80136fa:	462a      	mov	r2, r5
 80136fc:	4621      	mov	r1, r4
 80136fe:	68b8      	ldr	r0, [r7, #8]
 8013700:	f7ff ffbe 	bl	8013680 <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8013704:	bf00      	nop
 8013706:	3710      	adds	r7, #16
 8013708:	46bd      	mov	sp, r7
 801370a:	bdb0      	pop	{r4, r5, r7, pc}

0801370c <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 801370c:	b580      	push	{r7, lr}
 801370e:	b084      	sub	sp, #16
 8013710:	af00      	add	r7, sp, #0
 8013712:	60f8      	str	r0, [r7, #12]
 8013714:	60b9      	str	r1, [r7, #8]
 8013716:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8013718:	68b8      	ldr	r0, [r7, #8]
 801371a:	f000 f97f 	bl	8013a1c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>
 801371e:	4603      	mov	r3, r0
 8013720:	681a      	ldr	r2, [r3, #0]
 8013722:	68fb      	ldr	r3, [r7, #12]
 8013724:	601a      	str	r2, [r3, #0]
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7ef f841 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 801372c:	4603      	mov	r3, r0
 801372e:	681a      	ldr	r2, [r3, #0]
 8013730:	68fb      	ldr	r3, [r7, #12]
 8013732:	605a      	str	r2, [r3, #4]
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	4618      	mov	r0, r3
 8013738:	3710      	adds	r7, #16
 801373a:	46bd      	mov	sp, r7
 801373c:	bd80      	pop	{r7, pc}

0801373e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801373e:	b580      	push	{r7, lr}
 8013740:	b082      	sub	sp, #8
 8013742:	af00      	add	r7, sp, #0
 8013744:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 f973 	bl	8013a32 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 801374c:	4603      	mov	r3, r0
 801374e:	4618      	mov	r0, r3
 8013750:	3708      	adds	r7, #8
 8013752:	46bd      	mov	sp, r7
 8013754:	bd80      	pop	{r7, pc}

08013756 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013756:	b580      	push	{r7, lr}
 8013758:	b084      	sub	sp, #16
 801375a:	af00      	add	r7, sp, #0
 801375c:	60f8      	str	r0, [r7, #12]
 801375e:	60b9      	str	r1, [r7, #8]
 8013760:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013762:	68f8      	ldr	r0, [r7, #12]
 8013764:	f000 f970 	bl	8013a48 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>
 8013768:	4602      	mov	r2, r0
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	4293      	cmp	r3, r2
 801376e:	bf8c      	ite	hi
 8013770:	2301      	movhi	r3, #1
 8013772:	2300      	movls	r3, #0
 8013774:	b2db      	uxtb	r3, r3
 8013776:	2b00      	cmp	r3, #0
 8013778:	d001      	beq.n	801377e <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801377a:	f00d f816 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	009b      	lsls	r3, r3, #2
 8013782:	4618      	mov	r0, r3
 8013784:	f00c ff4a 	bl	802061c <_Znwj>
 8013788:	4603      	mov	r3, r0
 801378a:	bf00      	nop
      }
 801378c:	4618      	mov	r0, r3
 801378e:	3710      	adds	r7, #16
 8013790:	46bd      	mov	sp, r7
 8013792:	bd80      	pop	{r7, pc}

08013794 <_ZSt12__niter_baseIPP5TimerET_S3_>:
    __niter_base(_Iterator __it)
 8013794:	b480      	push	{r7}
 8013796:	b083      	sub	sp, #12
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	4618      	mov	r0, r3
 80137a0:	370c      	adds	r7, #12
 80137a2:	46bd      	mov	sp, r7
 80137a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a8:	4770      	bx	lr

080137aa <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80137aa:	b580      	push	{r7, lr}
 80137ac:	b086      	sub	sp, #24
 80137ae:	af00      	add	r7, sp, #0
 80137b0:	60f8      	str	r0, [r7, #12]
 80137b2:	60b9      	str	r1, [r7, #8]
 80137b4:	607a      	str	r2, [r7, #4]
 80137b6:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80137b8:	68ba      	ldr	r2, [r7, #8]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	1ad3      	subs	r3, r2, r3
 80137be:	109b      	asrs	r3, r3, #2
 80137c0:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80137c2:	697b      	ldr	r3, [r7, #20]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	dd06      	ble.n	80137d6 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80137c8:	697b      	ldr	r3, [r7, #20]
 80137ca:	009b      	lsls	r3, r3, #2
 80137cc:	461a      	mov	r2, r3
 80137ce:	68f9      	ldr	r1, [r7, #12]
 80137d0:	6878      	ldr	r0, [r7, #4]
 80137d2:	f00d f85d 	bl	8020890 <memmove>
      return __result + __count;
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	009b      	lsls	r3, r3, #2
 80137da:	687a      	ldr	r2, [r7, #4]
 80137dc:	4413      	add	r3, r2
    }
 80137de:	4618      	mov	r0, r3
 80137e0:	3718      	adds	r7, #24
 80137e2:	46bd      	mov	sp, r7
 80137e4:	bd80      	pop	{r7, pc}

080137e6 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80137e6:	b580      	push	{r7, lr}
 80137e8:	b082      	sub	sp, #8
 80137ea:	af00      	add	r7, sp, #0
 80137ec:	6078      	str	r0, [r7, #4]
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	4618      	mov	r0, r3
 80137f2:	f000 f935 	bl	8013a60 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>
 80137f6:	4603      	mov	r3, r0
 80137f8:	4618      	mov	r0, r3
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}

08013800 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013800:	b480      	push	{r7}
 8013802:	b083      	sub	sp, #12
 8013804:	af00      	add	r7, sp, #0
 8013806:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	4618      	mov	r0, r3
 801380c:	370c      	adds	r7, #12
 801380e:	46bd      	mov	sp, r7
 8013810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013814:	4770      	bx	lr

08013816 <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8013816:	b580      	push	{r7, lr}
 8013818:	b082      	sub	sp, #8
 801381a:	af00      	add	r7, sp, #0
 801381c:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	4618      	mov	r0, r3
 8013822:	f000 f929 	bl	8013a78 <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013826:	4603      	mov	r3, r0
 8013828:	4618      	mov	r0, r3
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013830:	b580      	push	{r7, lr}
 8013832:	b084      	sub	sp, #16
 8013834:	af00      	add	r7, sp, #0
 8013836:	60f8      	str	r0, [r7, #12]
 8013838:	60b9      	str	r1, [r7, #8]
 801383a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f000 f927 	bl	8013a90 <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>
 8013842:	4602      	mov	r2, r0
 8013844:	68bb      	ldr	r3, [r7, #8]
 8013846:	4293      	cmp	r3, r2
 8013848:	bf8c      	ite	hi
 801384a:	2301      	movhi	r3, #1
 801384c:	2300      	movls	r3, #0
 801384e:	b2db      	uxtb	r3, r3
 8013850:	2b00      	cmp	r3, #0
 8013852:	d001      	beq.n	8013858 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013854:	f00c ffa9 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	4618      	mov	r0, r3
 801385e:	f00c fedd 	bl	802061c <_Znwj>
 8013862:	4603      	mov	r3, r0
 8013864:	bf00      	nop
      }
 8013866:	4618      	mov	r0, r3
 8013868:	3710      	adds	r7, #16
 801386a:	46bd      	mov	sp, r7
 801386c:	bd80      	pop	{r7, pc}

0801386e <_ZSt12__niter_baseIPP6StreamET_S3_>:
    __niter_base(_Iterator __it)
 801386e:	b480      	push	{r7}
 8013870:	b083      	sub	sp, #12
 8013872:	af00      	add	r7, sp, #0
 8013874:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	4618      	mov	r0, r3
 801387a:	370c      	adds	r7, #12
 801387c:	46bd      	mov	sp, r7
 801387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013882:	4770      	bx	lr

08013884 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013884:	b580      	push	{r7, lr}
 8013886:	b086      	sub	sp, #24
 8013888:	af00      	add	r7, sp, #0
 801388a:	60f8      	str	r0, [r7, #12]
 801388c:	60b9      	str	r1, [r7, #8]
 801388e:	607a      	str	r2, [r7, #4]
 8013890:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013892:	68ba      	ldr	r2, [r7, #8]
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	1ad3      	subs	r3, r2, r3
 8013898:	109b      	asrs	r3, r3, #2
 801389a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	dd06      	ble.n	80138b0 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	009b      	lsls	r3, r3, #2
 80138a6:	461a      	mov	r2, r3
 80138a8:	68f9      	ldr	r1, [r7, #12]
 80138aa:	6878      	ldr	r0, [r7, #4]
 80138ac:	f00c fff0 	bl	8020890 <memmove>
      return __result + __count;
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	009b      	lsls	r3, r3, #2
 80138b4:	687a      	ldr	r2, [r7, #4]
 80138b6:	4413      	add	r3, r2
    }
 80138b8:	4618      	mov	r0, r3
 80138ba:	3718      	adds	r7, #24
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80138c0:	b480      	push	{r7}
 80138c2:	b083      	sub	sp, #12
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80138c8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80138cc:	4618      	mov	r0, r3
 80138ce:	370c      	adds	r7, #12
 80138d0:	46bd      	mov	sp, r7
 80138d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d6:	4770      	bx	lr

080138d8 <_ZSt10destroy_atIP5FieldIJEEEvPT_>:
    destroy_at(_Tp* __location)
 80138d8:	b480      	push	{r7}
 80138da:	b083      	sub	sp, #12
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
    }
 80138e0:	bf00      	nop
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr

080138ec <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	4618      	mov	r0, r3
 80138f8:	f000 f8fc 	bl	8013af4 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 80138fc:	4603      	mov	r3, r0
 80138fe:	4618      	mov	r0, r3
 8013900:	f000 f8de 	bl	8013ac0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>
 8013904:	4603      	mov	r3, r0
 8013906:	4618      	mov	r0, r3
 8013908:	3708      	adds	r7, #8
 801390a:	46bd      	mov	sp, r7
 801390c:	bd80      	pop	{r7, pc}

0801390e <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 801390e:	b480      	push	{r7}
 8013910:	b083      	sub	sp, #12
 8013912:	af00      	add	r7, sp, #0
 8013914:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	685a      	ldr	r2, [r3, #4]
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	681b      	ldr	r3, [r3, #0]
 801391e:	1ad3      	subs	r3, r2, r3
 8013920:	109b      	asrs	r3, r3, #2
 8013922:	4618      	mov	r0, r3
 8013924:	370c      	adds	r7, #12
 8013926:	46bd      	mov	sp, r7
 8013928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801392c:	4770      	bx	lr

0801392e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 801392e:	b580      	push	{r7, lr}
 8013930:	b084      	sub	sp, #16
 8013932:	af00      	add	r7, sp, #0
 8013934:	6078      	str	r0, [r7, #4]
 8013936:	6039      	str	r1, [r7, #0]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	60fb      	str	r3, [r7, #12]
 801393c:	683b      	ldr	r3, [r7, #0]
 801393e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013940:	f7ec fcee 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013944:	4603      	mov	r3, r0
 8013946:	2b00      	cmp	r3, #0
 8013948:	d006      	beq.n	8013958 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801394a:	68bb      	ldr	r3, [r7, #8]
 801394c:	009b      	lsls	r3, r3, #2
 801394e:	4618      	mov	r0, r3
 8013950:	f00c fe64 	bl	802061c <_Znwj>
 8013954:	4603      	mov	r3, r0
 8013956:	e006      	b.n	8013966 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013958:	2200      	movs	r2, #0
 801395a:	68b9      	ldr	r1, [r7, #8]
 801395c:	68f8      	ldr	r0, [r7, #12]
 801395e:	f000 f938 	bl	8013bd2 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>
 8013962:	4603      	mov	r3, r0
 8013964:	bf00      	nop
      { return __a.allocate(__n); }
 8013966:	4618      	mov	r0, r3
 8013968:	3710      	adds	r7, #16
 801396a:	46bd      	mov	sp, r7
 801396c:	bd80      	pop	{r7, pc}

0801396e <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 801396e:	b580      	push	{r7, lr}
 8013970:	b084      	sub	sp, #16
 8013972:	af00      	add	r7, sp, #0
 8013974:	60f8      	str	r0, [r7, #12]
 8013976:	60b9      	str	r1, [r7, #8]
 8013978:	607a      	str	r2, [r7, #4]
 801397a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801397c:	683b      	ldr	r3, [r7, #0]
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	68b9      	ldr	r1, [r7, #8]
 8013982:	68f8      	ldr	r0, [r7, #12]
 8013984:	f000 f8c1 	bl	8013b0a <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8013988:	4603      	mov	r3, r0
      }
 801398a:	4618      	mov	r0, r3
 801398c:	3710      	adds	r7, #16
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}

08013992 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8013992:	b590      	push	{r4, r7, lr}
 8013994:	b083      	sub	sp, #12
 8013996:	af00      	add	r7, sp, #0
 8013998:	6078      	str	r0, [r7, #4]
 801399a:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 801399c:	687c      	ldr	r4, [r7, #4]
 801399e:	6838      	ldr	r0, [r7, #0]
 80139a0:	f000 f8f2 	bl	8013b88 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 80139a4:	4603      	mov	r3, r0
 80139a6:	4618      	mov	r0, r3
 80139a8:	f000 f8fb 	bl	8013ba2 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80139ac:	4603      	mov	r3, r0
 80139ae:	4619      	mov	r1, r3
 80139b0:	4620      	mov	r0, r4
 80139b2:	f7ff faf1 	bl	8012f98 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	4618      	mov	r0, r3
 80139ba:	370c      	adds	r7, #12
 80139bc:	46bd      	mov	sp, r7
 80139be:	bd90      	pop	{r4, r7, pc}

080139c0 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80139c0:	b580      	push	{r7, lr}
 80139c2:	b084      	sub	sp, #16
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	60f8      	str	r0, [r7, #12]
 80139c8:	60b9      	str	r1, [r7, #8]
 80139ca:	607a      	str	r2, [r7, #4]
 80139cc:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80139ce:	68b8      	ldr	r0, [r7, #8]
 80139d0:	f000 f8f2 	bl	8013bb8 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80139d4:	4603      	mov	r3, r0
 80139d6:	4618      	mov	r0, r3
 80139d8:	f000 f8e3 	bl	8013ba2 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80139dc:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80139de:	881a      	ldrh	r2, [r3, #0]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	801a      	strh	r2, [r3, #0]
 80139e4:	68fb      	ldr	r3, [r7, #12]
 80139e6:	2200      	movs	r2, #0
 80139e8:	605a      	str	r2, [r3, #4]
      { }
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	4618      	mov	r0, r3
 80139ee:	3710      	adds	r7, #16
 80139f0:	46bd      	mov	sp, r7
 80139f2:	bd80      	pop	{r7, pc}

080139f4 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 80139f4:	b5b0      	push	{r4, r5, r7, lr}
 80139f6:	b086      	sub	sp, #24
 80139f8:	af02      	add	r7, sp, #8
 80139fa:	60f8      	str	r0, [r7, #12]
 80139fc:	7239      	strb	r1, [r7, #8]
 80139fe:	607a      	str	r2, [r7, #4]
 8013a00:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013a02:	463a      	mov	r2, r7
 8013a04:	f88d 4000 	strb.w	r4, [sp]
 8013a08:	462b      	mov	r3, r5
 8013a0a:	6879      	ldr	r1, [r7, #4]
 8013a0c:	68f8      	ldr	r0, [r7, #12]
 8013a0e:	f7ff ffd7 	bl	80139c0 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8013a12:	68fb      	ldr	r3, [r7, #12]
 8013a14:	4618      	mov	r0, r3
 8013a16:	3710      	adds	r7, #16
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bdb0      	pop	{r4, r5, r7, pc}

08013a1c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013a1c:	b480      	push	{r7}
 8013a1e:	b083      	sub	sp, #12
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	4618      	mov	r0, r3
 8013a28:	370c      	adds	r7, #12
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a30:	4770      	bx	lr

08013a32 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() const noexcept
 8013a32:	b480      	push	{r7}
 8013a34:	b083      	sub	sp, #12
 8013a36:	af00      	add	r7, sp, #0
 8013a38:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	4618      	mov	r0, r3
 8013a3e:	370c      	adds	r7, #12
 8013a40:	46bd      	mov	sp, r7
 8013a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a46:	4770      	bx	lr

08013a48 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013a50:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013a54:	4618      	mov	r0, r3
 8013a56:	370c      	adds	r7, #12
 8013a58:	46bd      	mov	sp, r7
 8013a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5e:	4770      	bx	lr

08013a60 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013a60:	b480      	push	{r7}
 8013a62:	b083      	sub	sp, #12
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	681b      	ldr	r3, [r3, #0]
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	370c      	adds	r7, #12
 8013a70:	46bd      	mov	sp, r7
 8013a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a76:	4770      	bx	lr

08013a78 <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013a80:	6878      	ldr	r0, [r7, #4]
 8013a82:	f7ff feb0 	bl	80137e6 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 8013a86:	4603      	mov	r3, r0
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3708      	adds	r7, #8
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013a90:	b480      	push	{r7}
 8013a92:	b083      	sub	sp, #12
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013a98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	370c      	adds	r7, #12
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aa6:	4770      	bx	lr

08013aa8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013aa8:	b480      	push	{r7}
 8013aaa:	b083      	sub	sp, #12
 8013aac:	af00      	add	r7, sp, #0
 8013aae:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013ab0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	370c      	adds	r7, #12
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abe:	4770      	bx	lr

08013ac0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b084      	sub	sp, #16
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013ac8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013acc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013ace:	6878      	ldr	r0, [r7, #4]
 8013ad0:	f7ff ffea 	bl	8013aa8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>
 8013ad4:	4603      	mov	r3, r0
 8013ad6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013ad8:	f107 0208 	add.w	r2, r7, #8
 8013adc:	f107 030c 	add.w	r3, r7, #12
 8013ae0:	4611      	mov	r1, r2
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	f7ef f97f 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	681b      	ldr	r3, [r3, #0]
      }
 8013aec:	4618      	mov	r0, r3
 8013aee:	3710      	adds	r7, #16
 8013af0:	46bd      	mov	sp, r7
 8013af2:	bd80      	pop	{r7, pc}

08013af4 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013af4:	b480      	push	{r7}
 8013af6:	b083      	sub	sp, #12
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	4618      	mov	r0, r3
 8013b00:	370c      	adds	r7, #12
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr

08013b0a <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013b0a:	b5b0      	push	{r4, r5, r7, lr}
 8013b0c:	b084      	sub	sp, #16
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	60f8      	str	r0, [r7, #12]
 8013b12:	60b9      	str	r1, [r7, #8]
 8013b14:	607a      	str	r2, [r7, #4]
 8013b16:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013b18:	68f8      	ldr	r0, [r7, #12]
 8013b1a:	f000 f879 	bl	8013c10 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b1e:	4604      	mov	r4, r0
 8013b20:	68b8      	ldr	r0, [r7, #8]
 8013b22:	f000 f875 	bl	8013c10 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b26:	4605      	mov	r5, r0
 8013b28:	6878      	ldr	r0, [r7, #4]
 8013b2a:	f000 f871 	bl	8013c10 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b2e:	4602      	mov	r2, r0
 8013b30:	683b      	ldr	r3, [r7, #0]
 8013b32:	4629      	mov	r1, r5
 8013b34:	4620      	mov	r0, r4
 8013b36:	f000 f876 	bl	8013c26 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>
 8013b3a:	4603      	mov	r3, r0
    }
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	3710      	adds	r7, #16
 8013b40:	46bd      	mov	sp, r7
 8013b42:	bdb0      	pop	{r4, r5, r7, pc}

08013b44 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	60f8      	str	r0, [r7, #12]
 8013b4c:	60b9      	str	r1, [r7, #8]
 8013b4e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013b50:	68f8      	ldr	r0, [r7, #12]
 8013b52:	f000 f887 	bl	8013c64 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>
 8013b56:	4602      	mov	r2, r0
 8013b58:	68bb      	ldr	r3, [r7, #8]
 8013b5a:	4293      	cmp	r3, r2
 8013b5c:	bf8c      	ite	hi
 8013b5e:	2301      	movhi	r3, #1
 8013b60:	2300      	movls	r3, #0
 8013b62:	b2db      	uxtb	r3, r3
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d001      	beq.n	8013b6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013b68:	f00c fe1f 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013b6c:	68ba      	ldr	r2, [r7, #8]
 8013b6e:	4613      	mov	r3, r2
 8013b70:	005b      	lsls	r3, r3, #1
 8013b72:	4413      	add	r3, r2
 8013b74:	00db      	lsls	r3, r3, #3
 8013b76:	4618      	mov	r0, r3
 8013b78:	f00c fd50 	bl	802061c <_Znwj>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	bf00      	nop
      }
 8013b80:	4618      	mov	r0, r3
 8013b82:	3710      	adds	r7, #16
 8013b84:	46bd      	mov	sp, r7
 8013b86:	bd80      	pop	{r7, pc}

08013b88 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013b88:	b580      	push	{r7, lr}
 8013b8a:	b082      	sub	sp, #8
 8013b8c:	af00      	add	r7, sp, #0
 8013b8e:	6078      	str	r0, [r7, #4]
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	4618      	mov	r0, r3
 8013b94:	f000 f874 	bl	8013c80 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 8013b98:	4603      	mov	r3, r0
 8013b9a:	4618      	mov	r0, r3
 8013b9c:	3708      	adds	r7, #8
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}

08013ba2 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013ba2:	b480      	push	{r7}
 8013ba4:	b083      	sub	sp, #12
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	4618      	mov	r0, r3
 8013bae:	370c      	adds	r7, #12
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb6:	4770      	bx	lr

08013bb8 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b082      	sub	sp, #8
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f000 f868 	bl	8013c98 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013bc8:	4603      	mov	r3, r0
 8013bca:	4618      	mov	r0, r3
 8013bcc:	3708      	adds	r7, #8
 8013bce:	46bd      	mov	sp, r7
 8013bd0:	bd80      	pop	{r7, pc}

08013bd2 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013bd2:	b580      	push	{r7, lr}
 8013bd4:	b084      	sub	sp, #16
 8013bd6:	af00      	add	r7, sp, #0
 8013bd8:	60f8      	str	r0, [r7, #12]
 8013bda:	60b9      	str	r1, [r7, #8]
 8013bdc:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013bde:	68f8      	ldr	r0, [r7, #12]
 8013be0:	f000 f866 	bl	8013cb0 <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>
 8013be4:	4602      	mov	r2, r0
 8013be6:	68bb      	ldr	r3, [r7, #8]
 8013be8:	4293      	cmp	r3, r2
 8013bea:	bf8c      	ite	hi
 8013bec:	2301      	movhi	r3, #1
 8013bee:	2300      	movls	r3, #0
 8013bf0:	b2db      	uxtb	r3, r3
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d001      	beq.n	8013bfa <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013bf6:	f00c fdd8 	bl	80207aa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	009b      	lsls	r3, r3, #2
 8013bfe:	4618      	mov	r0, r3
 8013c00:	f00c fd0c 	bl	802061c <_Znwj>
 8013c04:	4603      	mov	r3, r0
 8013c06:	bf00      	nop
      }
 8013c08:	4618      	mov	r0, r3
 8013c0a:	3710      	adds	r7, #16
 8013c0c:	46bd      	mov	sp, r7
 8013c0e:	bd80      	pop	{r7, pc}

08013c10 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>:
    __niter_base(_Iterator __it)
 8013c10:	b480      	push	{r7}
 8013c12:	b083      	sub	sp, #12
 8013c14:	af00      	add	r7, sp, #0
 8013c16:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	4618      	mov	r0, r3
 8013c1c:	370c      	adds	r7, #12
 8013c1e:	46bd      	mov	sp, r7
 8013c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c24:	4770      	bx	lr

08013c26 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013c26:	b580      	push	{r7, lr}
 8013c28:	b086      	sub	sp, #24
 8013c2a:	af00      	add	r7, sp, #0
 8013c2c:	60f8      	str	r0, [r7, #12]
 8013c2e:	60b9      	str	r1, [r7, #8]
 8013c30:	607a      	str	r2, [r7, #4]
 8013c32:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013c34:	68ba      	ldr	r2, [r7, #8]
 8013c36:	68fb      	ldr	r3, [r7, #12]
 8013c38:	1ad3      	subs	r3, r2, r3
 8013c3a:	109b      	asrs	r3, r3, #2
 8013c3c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	dd06      	ble.n	8013c52 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013c44:	697b      	ldr	r3, [r7, #20]
 8013c46:	009b      	lsls	r3, r3, #2
 8013c48:	461a      	mov	r2, r3
 8013c4a:	68f9      	ldr	r1, [r7, #12]
 8013c4c:	6878      	ldr	r0, [r7, #4]
 8013c4e:	f00c fe1f 	bl	8020890 <memmove>
      return __result + __count;
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	009b      	lsls	r3, r3, #2
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	4413      	add	r3, r2
    }
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3718      	adds	r7, #24
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
	...

08013c64 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013c64:	b480      	push	{r7}
 8013c66:	b083      	sub	sp, #12
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013c6c:	4b03      	ldr	r3, [pc, #12]	; (8013c7c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv+0x18>)
      }
 8013c6e:	4618      	mov	r0, r3
 8013c70:	370c      	adds	r7, #12
 8013c72:	46bd      	mov	sp, r7
 8013c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c78:	4770      	bx	lr
 8013c7a:	bf00      	nop
 8013c7c:	05555555 	.word	0x05555555

08013c80 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013c80:	b480      	push	{r7}
 8013c82:	b083      	sub	sp, #12
 8013c84:	af00      	add	r7, sp, #0
 8013c86:	6078      	str	r0, [r7, #4]
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	4618      	mov	r0, r3
 8013c8e:	370c      	adds	r7, #12
 8013c90:	46bd      	mov	sp, r7
 8013c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c96:	4770      	bx	lr

08013c98 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013ca0:	6878      	ldr	r0, [r7, #4]
 8013ca2:	f7ff ff71 	bl	8013b88 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8013ca6:	4603      	mov	r3, r0
 8013ca8:	4618      	mov	r0, r3
 8013caa:	3708      	adds	r7, #8
 8013cac:	46bd      	mov	sp, r7
 8013cae:	bd80      	pop	{r7, pc}

08013cb0 <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013cb0:	b480      	push	{r7}
 8013cb2:	b083      	sub	sp, #12
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013cb8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	370c      	adds	r7, #12
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc6:	4770      	bx	lr

08013cc8 <_ZN6StreamD1Ev>:
class Stream {
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b082      	sub	sp, #8
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	3308      	adds	r3, #8
 8013cd4:	4618      	mov	r0, r3
 8013cd6:	f7fc f9a5 	bl	8010024 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	4618      	mov	r0, r3
 8013cde:	3708      	adds	r7, #8
 8013ce0:	46bd      	mov	sp, r7
 8013ce2:	bd80      	pop	{r7, pc}

08013ce4 <_ZN6PacketD1Ev>:
class Packet {
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b082      	sub	sp, #8
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	6078      	str	r0, [r7, #4]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	3308      	adds	r3, #8
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	f7fc ff26 	bl	8010b42 <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	3708      	adds	r7, #8
 8013cfc:	46bd      	mov	sp, r7
 8013cfe:	bd80      	pop	{r7, pc}

08013d00 <_ZN5TimerD1Ev>:
class Timer {
 8013d00:	b580      	push	{r7, lr}
 8013d02:	b082      	sub	sp, #8
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6078      	str	r0, [r7, #4]
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	3308      	adds	r3, #8
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	f7f9 fceb 	bl	800d6e8 <_ZNSt8functionIFvvEED1Ev>
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	4618      	mov	r0, r3
 8013d16:	3708      	adds	r7, #8
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}

08013d1c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8013d1c:	b580      	push	{r7, lr}
 8013d1e:	b084      	sub	sp, #16
 8013d20:	af02      	add	r7, sp, #8
 8013d22:	6078      	str	r0, [r7, #4]
 8013d24:	6039      	str	r1, [r7, #0]
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2b01      	cmp	r3, #1
 8013d2a:	f040 8142 	bne.w	8013fb2 <_Z41__static_initialization_and_destruction_0ii+0x296>
 8013d2e:	683b      	ldr	r3, [r7, #0]
 8013d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d34:	4293      	cmp	r3, r2
 8013d36:	f040 813c 	bne.w	8013fb2 <_Z41__static_initialization_and_destruction_0ii+0x296>
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, &PD12);
 8013d3a:	4bac      	ldr	r3, [pc, #688]	; (8013fec <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	49ac      	ldr	r1, [pc, #688]	; (8013ff0 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8013d40:	48ac      	ldr	r0, [pc, #688]	; (8013ff4 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013d42:	f7f5 fb89 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
DigitalIn digital_in_PC1(&PC1);
 8013d46:	49ac      	ldr	r1, [pc, #688]	; (8013ff8 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8013d48:	48ac      	ldr	r0, [pc, #688]	; (8013ffc <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8013d4a:	f7f2 fc05 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC2(&PC2);
 8013d4e:	49ac      	ldr	r1, [pc, #688]	; (8014000 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8013d50:	48ac      	ldr	r0, [pc, #688]	; (8014004 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8013d52:	f7f2 fc01 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC3(&PC3);
 8013d56:	49ac      	ldr	r1, [pc, #688]	; (8014008 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013d58:	48ac      	ldr	r0, [pc, #688]	; (801400c <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8013d5a:	f7f2 fbfd 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
AnalogIn analog_in_PA6(&hadc1, &htim6, &PA6);
 8013d5e:	4bac      	ldr	r3, [pc, #688]	; (8014010 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8013d60:	4aac      	ldr	r2, [pc, #688]	; (8014014 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8013d62:	49ad      	ldr	r1, [pc, #692]	; (8014018 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8013d64:	48ad      	ldr	r0, [pc, #692]	; (801401c <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8013d66:	f7ec fbc1 	bl	80004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>
AnalogOut analog_out_PF1 (3.3, &htim23, TIM_CHANNEL_2, &PF1);
 8013d6a:	4bad      	ldr	r3, [pc, #692]	; (8014020 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8013d6c:	2204      	movs	r2, #4
 8013d6e:	49ad      	ldr	r1, [pc, #692]	; (8014024 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8013d70:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013d74:	48ad      	ldr	r0, [pc, #692]	; (801402c <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8013d76:	f7ef fa0b 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF0 (3.3, &htim23, TIM_CHANNEL_1, &PF0);
 8013d7a:	4bad      	ldr	r3, [pc, #692]	; (8014030 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8013d7c:	2200      	movs	r2, #0
 8013d7e:	49a9      	ldr	r1, [pc, #676]	; (8014024 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8013d80:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013d84:	48ab      	ldr	r0, [pc, #684]	; (8014034 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8013d86:	f7ef fa03 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA0 (3.3, &htim5, 	TIM_CHANNEL_1, &PA0);
 8013d8a:	4bab      	ldr	r3, [pc, #684]	; (8014038 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	49ab      	ldr	r1, [pc, #684]	; (801403c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013d90:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013d94:	48aa      	ldr	r0, [pc, #680]	; (8014040 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8013d96:	f7ef f9fb 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA2 (3.3, &htim5, 	TIM_CHANNEL_3, &PA2);
 8013d9a:	4baa      	ldr	r3, [pc, #680]	; (8014044 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8013d9c:	2208      	movs	r2, #8
 8013d9e:	49a7      	ldr	r1, [pc, #668]	; (801403c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013da0:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013da4:	48a8      	ldr	r0, [pc, #672]	; (8014048 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013da6:	f7ef f9f3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA3 (3.3, &htim5, 	TIM_CHANNEL_4, &PA3);
 8013daa:	4ba8      	ldr	r3, [pc, #672]	; (801404c <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8013dac:	220c      	movs	r2, #12
 8013dae:	49a3      	ldr	r1, [pc, #652]	; (801403c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013db0:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013db4:	48a6      	ldr	r0, [pc, #664]	; (8014050 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8013db6:	f7ef f9eb 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC7 (3.3, &htim8, 	TIM_CHANNEL_2, &PC7);
 8013dba:	4ba6      	ldr	r3, [pc, #664]	; (8014054 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8013dbc:	2204      	movs	r2, #4
 8013dbe:	49a6      	ldr	r1, [pc, #664]	; (8014058 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8013dc0:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013dc4:	48a5      	ldr	r0, [pc, #660]	; (801405c <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8013dc6:	f7ef f9e3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC6 (3.3, &htim8, 	TIM_CHANNEL_1, &PC6);
 8013dca:	4ba5      	ldr	r3, [pc, #660]	; (8014060 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8013dcc:	2200      	movs	r2, #0
 8013dce:	49a2      	ldr	r1, [pc, #648]	; (8014058 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8013dd0:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013dd4:	48a3      	ldr	r0, [pc, #652]	; (8014064 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8013dd6:	f7ef f9db 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC8 (3.3, &htim8, 	TIM_CHANNEL_3, &PC8);
 8013dda:	4ba3      	ldr	r3, [pc, #652]	; (8014068 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8013ddc:	2208      	movs	r2, #8
 8013dde:	499e      	ldr	r1, [pc, #632]	; (8014058 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8013de0:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013de4:	48a1      	ldr	r0, [pc, #644]	; (801406c <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013de6:	f7ef f9d3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC9 (3.3, &htim8, 	TIM_CHANNEL_4, &PC9);
 8013dea:	4ba1      	ldr	r3, [pc, #644]	; (8014070 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8013dec:	220c      	movs	r2, #12
 8013dee:	499a      	ldr	r1, [pc, #616]	; (8014058 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8013df0:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013df4:	489f      	ldr	r0, [pc, #636]	; (8014074 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8013df6:	f7ef f9cb 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF2 (3.3, &htim23, TIM_CHANNEL_3, &PF2);
 8013dfa:	4b9f      	ldr	r3, [pc, #636]	; (8014078 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8013dfc:	2208      	movs	r2, #8
 8013dfe:	4989      	ldr	r1, [pc, #548]	; (8014024 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8013e00:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013e04:	489d      	ldr	r0, [pc, #628]	; (801407c <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8013e06:	f7ef f9c3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, &PF13);
 8013e0a:	4b9d      	ldr	r3, [pc, #628]	; (8014080 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8013e0c:	2208      	movs	r2, #8
 8013e0e:	499d      	ldr	r1, [pc, #628]	; (8014084 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8013e10:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013e14:	489c      	ldr	r0, [pc, #624]	; (8014088 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8013e16:	f7ef f9bb 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, &PF12);
 8013e1a:	4b9c      	ldr	r3, [pc, #624]	; (801408c <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8013e1c:	2204      	movs	r2, #4
 8013e1e:	4999      	ldr	r1, [pc, #612]	; (8014084 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8013e20:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013e24:	489a      	ldr	r0, [pc, #616]	; (8014090 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8013e26:	f7ef f9b3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, &PB14);
 8013e2a:	4b9a      	ldr	r3, [pc, #616]	; (8014094 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8013e2c:	2200      	movs	r2, #0
 8013e2e:	499a      	ldr	r1, [pc, #616]	; (8014098 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8013e30:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013e34:	4899      	ldr	r0, [pc, #612]	; (801409c <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8013e36:	f7ef f9ab 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, &PF14);
 8013e3a:	4b99      	ldr	r3, [pc, #612]	; (80140a0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013e3c:	220c      	movs	r2, #12
 8013e3e:	4991      	ldr	r1, [pc, #580]	; (8014084 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8013e40:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013e44:	4897      	ldr	r0, [pc, #604]	; (80140a4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8013e46:	f7ef f9a3 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF3 (3.3, &htim23, TIM_CHANNEL_4, &PF3);
 8013e4a:	4b97      	ldr	r3, [pc, #604]	; (80140a8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013e4c:	220c      	movs	r2, #12
 8013e4e:	4975      	ldr	r1, [pc, #468]	; (8014024 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8013e50:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013e54:	4895      	ldr	r0, [pc, #596]	; (80140ac <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8013e56:	f7ef f99b 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, &PF11);
 8013e5a:	4b95      	ldr	r3, [pc, #596]	; (80140b0 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	4989      	ldr	r1, [pc, #548]	; (8014084 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8013e60:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8014028 <_Z41__static_initialization_and_destruction_0ii+0x30c>
 8013e64:	4893      	ldr	r0, [pc, #588]	; (80140b4 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8013e66:	f7ef f993 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
DigitalOut digital_out_PC10(&PC10);
 8013e6a:	4993      	ldr	r1, [pc, #588]	; (80140b8 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013e6c:	4893      	ldr	r0, [pc, #588]	; (80140bc <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8013e6e:	f7f3 ff21 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC11(&PC11);
 8013e72:	4993      	ldr	r1, [pc, #588]	; (80140c0 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8013e74:	4893      	ldr	r0, [pc, #588]	; (80140c4 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8013e76:	f7f3 ff1d 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC12(&PC12);
 8013e7a:	4993      	ldr	r1, [pc, #588]	; (80140c8 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8013e7c:	4893      	ldr	r0, [pc, #588]	; (80140cc <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013e7e:	f7f3 ff19 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC13(&PC13);
 8013e82:	4993      	ldr	r1, [pc, #588]	; (80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013e84:	4893      	ldr	r0, [pc, #588]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8013e86:	f7f3 ff15 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC14(&PC14);
 8013e8a:	4993      	ldr	r1, [pc, #588]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8013e8c:	4893      	ldr	r0, [pc, #588]	; (80140dc <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8013e8e:	f7f3 ff11 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC15(&PC15);
 8013e92:	4993      	ldr	r1, [pc, #588]	; (80140e0 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8013e94:	4893      	ldr	r0, [pc, #588]	; (80140e4 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8013e96:	f7f3 ff0d 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF6 (&PF6);
 8013e9a:	4993      	ldr	r1, [pc, #588]	; (80140e8 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8013e9c:	4893      	ldr	r0, [pc, #588]	; (80140ec <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8013e9e:	f7f3 ff09 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF7 (&PF7);
 8013ea2:	4993      	ldr	r1, [pc, #588]	; (80140f0 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8013ea4:	4893      	ldr	r0, [pc, #588]	; (80140f4 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8013ea6:	f7f3 ff05 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB7 (&PB7);
 8013eaa:	4993      	ldr	r1, [pc, #588]	; (80140f8 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8013eac:	4893      	ldr	r0, [pc, #588]	; (80140fc <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8013eae:	f7f3 ff01 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB9 (&PB9);
 8013eb2:	4993      	ldr	r1, [pc, #588]	; (8014100 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8013eb4:	4893      	ldr	r0, [pc, #588]	; (8014104 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8013eb6:	f7f3 fefd 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PD8 (&PD8);
 8013eba:	4993      	ldr	r1, [pc, #588]	; (8014108 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8013ebc:	4893      	ldr	r0, [pc, #588]	; (801410c <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8013ebe:	f7f3 fef9 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
Timer timer_7(&htim7);
 8013ec2:	4993      	ldr	r1, [pc, #588]	; (8014110 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013ec4:	4893      	ldr	r0, [pc, #588]	; (8014114 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8013ec6:	f7f9 fc1d 	bl	800d704 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_13(&htim13);
 8013eca:	4993      	ldr	r1, [pc, #588]	; (8014118 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8013ecc:	4893      	ldr	r0, [pc, #588]	; (801411c <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8013ece:	f7f9 fc19 	bl	800d704 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_14(&htim14);
 8013ed2:	4993      	ldr	r1, [pc, #588]	; (8014120 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8013ed4:	4893      	ldr	r0, [pc, #588]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8013ed6:	f7f9 fc15 	bl	800d704 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_15(&htim15);
 8013eda:	4993      	ldr	r1, [pc, #588]	; (8014128 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8013edc:	4893      	ldr	r0, [pc, #588]	; (801412c <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8013ede:	f7f9 fc11 	bl	800d704 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_16(&htim16);
 8013ee2:	4993      	ldr	r1, [pc, #588]	; (8014130 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8013ee4:	4893      	ldr	r0, [pc, #588]	; (8014134 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8013ee6:	f7f9 fc0d 	bl	800d704 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_17(&htim17);
 8013eea:	4993      	ldr	r1, [pc, #588]	; (8014138 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8013eec:	4893      	ldr	r0, [pc, #588]	; (801413c <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8013eee:	f7f9 fc09 	bl	800d704 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Can main_can(&hfdcan1);
 8013ef2:	4993      	ldr	r1, [pc, #588]	; (8014140 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8013ef4:	4893      	ldr	r0, [pc, #588]	; (8014144 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8013ef6:	f7f0 fe47 	bl	8004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 8013efa:	4b93      	ldr	r3, [pc, #588]	; (8014148 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8013efc:	4a93      	ldr	r2, [pc, #588]	; (801414c <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8013efe:	2151      	movs	r1, #81	; 0x51
 8013f00:	4893      	ldr	r0, [pc, #588]	; (8014150 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8013f02:	f7fc f98b 	bl	801021c <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 8013f06:	4b90      	ldr	r3, [pc, #576]	; (8014148 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8013f08:	4a92      	ldr	r2, [pc, #584]	; (8014154 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8013f0a:	2152      	movs	r1, #82	; 0x52
 8013f0c:	4892      	ldr	r0, [pc, #584]	; (8014158 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8013f0e:	f7fc f985 	bl	801021c <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 8013f12:	4b8d      	ldr	r3, [pc, #564]	; (8014148 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8013f14:	4a91      	ldr	r2, [pc, #580]	; (801415c <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8013f16:	2153      	movs	r1, #83	; 0x53
 8013f18:	4891      	ldr	r0, [pc, #580]	; (8014160 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8013f1a:	f7fc f97f 	bl	801021c <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 8013f1e:	4b91      	ldr	r3, [pc, #580]	; (8014164 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8013f20:	9300      	str	r3, [sp, #0]
 8013f22:	4b91      	ldr	r3, [pc, #580]	; (8014168 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8013f24:	4a91      	ldr	r2, [pc, #580]	; (801416c <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8013f26:	2154      	movs	r1, #84	; 0x54
 8013f28:	4891      	ldr	r0, [pc, #580]	; (8014170 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8013f2a:	f7fc f9a1 	bl	8010270 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 8013f2e:	4b8d      	ldr	r3, [pc, #564]	; (8014164 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8013f30:	9300      	str	r3, [sp, #0]
 8013f32:	4b8d      	ldr	r3, [pc, #564]	; (8014168 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8013f34:	4a8f      	ldr	r2, [pc, #572]	; (8014174 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8013f36:	2155      	movs	r1, #85	; 0x55
 8013f38:	488f      	ldr	r0, [pc, #572]	; (8014178 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8013f3a:	f7fc f999 	bl	8010270 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 8013f3e:	4b89      	ldr	r3, [pc, #548]	; (8014164 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8013f40:	9300      	str	r3, [sp, #0]
 8013f42:	4b89      	ldr	r3, [pc, #548]	; (8014168 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8013f44:	4a8d      	ldr	r2, [pc, #564]	; (801417c <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8013f46:	2156      	movs	r1, #86	; 0x56
 8013f48:	488d      	ldr	r0, [pc, #564]	; (8014180 <_Z41__static_initialization_and_destruction_0ii+0x464>)
 8013f4a:	f7fc f991 	bl	8010270 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 8013f4e:	4b8d      	ldr	r3, [pc, #564]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 8013f50:	9300      	str	r3, [sp, #0]
 8013f52:	4b8d      	ldr	r3, [pc, #564]	; (8014188 <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 8013f54:	4a8d      	ldr	r2, [pc, #564]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8013f56:	2158      	movs	r1, #88	; 0x58
 8013f58:	488d      	ldr	r0, [pc, #564]	; (8014190 <_Z41__static_initialization_and_destruction_0ii+0x474>)
 8013f5a:	f7fc f9b5 	bl	80102c8 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 8013f5e:	4b89      	ldr	r3, [pc, #548]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 8013f60:	9300      	str	r3, [sp, #0]
 8013f62:	4b89      	ldr	r3, [pc, #548]	; (8014188 <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 8013f64:	4a89      	ldr	r2, [pc, #548]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8013f66:	2157      	movs	r1, #87	; 0x57
 8013f68:	488a      	ldr	r0, [pc, #552]	; (8014194 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 8013f6a:	f7fc f9ad 	bl	80102c8 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 8013f6e:	4b8a      	ldr	r3, [pc, #552]	; (8014198 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 8013f70:	9300      	str	r3, [sp, #0]
 8013f72:	4b8a      	ldr	r3, [pc, #552]	; (801419c <_Z41__static_initialization_and_destruction_0ii+0x480>)
 8013f74:	4a8a      	ldr	r2, [pc, #552]	; (80141a0 <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8013f76:	210a      	movs	r1, #10
 8013f78:	488a      	ldr	r0, [pc, #552]	; (80141a4 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8013f7a:	f7fc f9d1 	bl	8010320 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 8013f7e:	4b8a      	ldr	r3, [pc, #552]	; (80141a8 <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 8013f80:	4a8a      	ldr	r2, [pc, #552]	; (80141ac <_Z41__static_initialization_and_destruction_0ii+0x490>)
 8013f82:	2159      	movs	r1, #89	; 0x59
 8013f84:	488a      	ldr	r0, [pc, #552]	; (80141b0 <_Z41__static_initialization_and_destruction_0ii+0x494>)
 8013f86:	f7fc f949 	bl	801021c <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Stream stream1(&timer_14, &main_can);
 8013f8a:	4a6e      	ldr	r2, [pc, #440]	; (8014144 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8013f8c:	4965      	ldr	r1, [pc, #404]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8013f8e:	4889      	ldr	r0, [pc, #548]	; (80141b4 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8013f90:	f7f9 ff40 	bl	800de14 <_ZN6StreamC1EP5TimerP3Can>
Stream stream2(&timer_15, &main_can);
 8013f94:	4a6b      	ldr	r2, [pc, #428]	; (8014144 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8013f96:	4965      	ldr	r1, [pc, #404]	; (801412c <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8013f98:	4887      	ldr	r0, [pc, #540]	; (80141b8 <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 8013f9a:	f7f9 ff3b 	bl	800de14 <_ZN6StreamC1EP5TimerP3Can>
Stream stream3(&timer_16, &main_can);
 8013f9e:	4a69      	ldr	r2, [pc, #420]	; (8014144 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8013fa0:	4964      	ldr	r1, [pc, #400]	; (8014134 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8013fa2:	4886      	ldr	r0, [pc, #536]	; (80141bc <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 8013fa4:	f7f9 ff36 	bl	800de14 <_ZN6StreamC1EP5TimerP3Can>
Stream stream4(&timer_17, &main_can);
 8013fa8:	4a66      	ldr	r2, [pc, #408]	; (8014144 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8013faa:	4964      	ldr	r1, [pc, #400]	; (801413c <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8013fac:	4884      	ldr	r0, [pc, #528]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 8013fae:	f7f9 ff31 	bl	800de14 <_ZN6StreamC1EP5TimerP3Can>
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	f040 812f 	bne.w	8014218 <_Z41__static_initialization_and_destruction_0ii+0x4fc>
 8013fba:	683b      	ldr	r3, [r7, #0]
 8013fbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013fc0:	4293      	cmp	r3, r2
 8013fc2:	f040 8129 	bne.w	8014218 <_Z41__static_initialization_and_destruction_0ii+0x4fc>
 8013fc6:	487e      	ldr	r0, [pc, #504]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 8013fc8:	f7ff fe7e 	bl	8013cc8 <_ZN6StreamD1Ev>
Stream stream3(&timer_16, &main_can);
 8013fcc:	487b      	ldr	r0, [pc, #492]	; (80141bc <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 8013fce:	f7ff fe7b 	bl	8013cc8 <_ZN6StreamD1Ev>
Stream stream2(&timer_15, &main_can);
 8013fd2:	4879      	ldr	r0, [pc, #484]	; (80141b8 <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 8013fd4:	f7ff fe78 	bl	8013cc8 <_ZN6StreamD1Ev>
Stream stream1(&timer_14, &main_can);
 8013fd8:	4876      	ldr	r0, [pc, #472]	; (80141b4 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8013fda:	f7ff fe75 	bl	8013cc8 <_ZN6StreamD1Ev>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 8013fde:	4874      	ldr	r0, [pc, #464]	; (80141b0 <_Z41__static_initialization_and_destruction_0ii+0x494>)
 8013fe0:	f7ff fe80 	bl	8013ce4 <_ZN6PacketD1Ev>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 8013fe4:	486f      	ldr	r0, [pc, #444]	; (80141a4 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8013fe6:	f7ff fe7d 	bl	8013ce4 <_ZN6PacketD1Ev>
 8013fea:	e0eb      	b.n	80141c4 <_Z41__static_initialization_and_destruction_0ii+0x4a8>
 8013fec:	240003d8 	.word	0x240003d8
 8013ff0:	24000d60 	.word	0x24000d60
 8013ff4:	240004f8 	.word	0x240004f8
 8013ff8:	24000300 	.word	0x24000300
 8013ffc:	240005bc 	.word	0x240005bc
 8014000:	24000308 	.word	0x24000308
 8014004:	240005c8 	.word	0x240005c8
 8014008:	24000310 	.word	0x24000310
 801400c:	240005d4 	.word	0x240005d4
 8014010:	24000228 	.word	0x24000228
 8014014:	24000df8 	.word	0x24000df8
 8014018:	24000af4 	.word	0x24000af4
 801401c:	240005e0 	.word	0x240005e0
 8014020:	24000480 	.word	0x24000480
 8014024:	240010a4 	.word	0x240010a4
 8014028:	40533333 	.word	0x40533333
 801402c:	240005f8 	.word	0x240005f8
 8014030:	24000478 	.word	0x24000478
 8014034:	24000610 	.word	0x24000610
 8014038:	240001f8 	.word	0x240001f8
 801403c:	24000dac 	.word	0x24000dac
 8014040:	24000628 	.word	0x24000628
 8014044:	24000208 	.word	0x24000208
 8014048:	24000640 	.word	0x24000640
 801404c:	24000210 	.word	0x24000210
 8014050:	24000658 	.word	0x24000658
 8014054:	24000330 	.word	0x24000330
 8014058:	24000e90 	.word	0x24000e90
 801405c:	24000670 	.word	0x24000670
 8014060:	24000328 	.word	0x24000328
 8014064:	24000688 	.word	0x24000688
 8014068:	24000338 	.word	0x24000338
 801406c:	240006a0 	.word	0x240006a0
 8014070:	24000340 	.word	0x24000340
 8014074:	240006b8 	.word	0x240006b8
 8014078:	24000488 	.word	0x24000488
 801407c:	240006d0 	.word	0x240006d0
 8014080:	240004e0 	.word	0x240004e0
 8014084:	240010f0 	.word	0x240010f0
 8014088:	240006e8 	.word	0x240006e8
 801408c:	240004d8 	.word	0x240004d8
 8014090:	24000700 	.word	0x24000700
 8014094:	240002e8 	.word	0x240002e8
 8014098:	24000edc 	.word	0x24000edc
 801409c:	24000718 	.word	0x24000718
 80140a0:	240004e8 	.word	0x240004e8
 80140a4:	24000730 	.word	0x24000730
 80140a8:	24000490 	.word	0x24000490
 80140ac:	24000748 	.word	0x24000748
 80140b0:	240004d0 	.word	0x240004d0
 80140b4:	24000760 	.word	0x24000760
 80140b8:	24000348 	.word	0x24000348
 80140bc:	24000778 	.word	0x24000778
 80140c0:	24000350 	.word	0x24000350
 80140c4:	24000780 	.word	0x24000780
 80140c8:	24000358 	.word	0x24000358
 80140cc:	24000788 	.word	0x24000788
 80140d0:	24000360 	.word	0x24000360
 80140d4:	24000790 	.word	0x24000790
 80140d8:	24000368 	.word	0x24000368
 80140dc:	24000798 	.word	0x24000798
 80140e0:	24000370 	.word	0x24000370
 80140e4:	240007a0 	.word	0x240007a0
 80140e8:	240004a8 	.word	0x240004a8
 80140ec:	240007a8 	.word	0x240007a8
 80140f0:	240004b0 	.word	0x240004b0
 80140f4:	240007b0 	.word	0x240007b0
 80140f8:	240002b0 	.word	0x240002b0
 80140fc:	240007b8 	.word	0x240007b8
 8014100:	240002c0 	.word	0x240002c0
 8014104:	240007c0 	.word	0x240007c0
 8014108:	240003b8 	.word	0x240003b8
 801410c:	240007c8 	.word	0x240007c8
 8014110:	24000e44 	.word	0x24000e44
 8014114:	240007d0 	.word	0x240007d0
 8014118:	24000f28 	.word	0x24000f28
 801411c:	240007f0 	.word	0x240007f0
 8014120:	24000f74 	.word	0x24000f74
 8014124:	24000810 	.word	0x24000810
 8014128:	24000fc0 	.word	0x24000fc0
 801412c:	24000830 	.word	0x24000830
 8014130:	2400100c 	.word	0x2400100c
 8014134:	24000850 	.word	0x24000850
 8014138:	24001058 	.word	0x24001058
 801413c:	24000870 	.word	0x24000870
 8014140:	24000bdc 	.word	0x24000bdc
 8014144:	24000890 	.word	0x24000890
 8014148:	24000960 	.word	0x24000960
 801414c:	0800e341 	.word	0x0800e341
 8014150:	24000970 	.word	0x24000970
 8014154:	0800e279 	.word	0x0800e279
 8014158:	24000988 	.word	0x24000988
 801415c:	0800e2dd 	.word	0x0800e2dd
 8014160:	240009a0 	.word	0x240009a0
 8014164:	2400096a 	.word	0x2400096a
 8014168:	24000968 	.word	0x24000968
 801416c:	0800e3b9 	.word	0x0800e3b9
 8014170:	240009b8 	.word	0x240009b8
 8014174:	0800e409 	.word	0x0800e409
 8014178:	240009d0 	.word	0x240009d0
 801417c:	0800e459 	.word	0x0800e459
 8014180:	240009e8 	.word	0x240009e8
 8014184:	24000964 	.word	0x24000964
 8014188:	24000961 	.word	0x24000961
 801418c:	0800e4a9 	.word	0x0800e4a9
 8014190:	24000a00 	.word	0x24000a00
 8014194:	24000a18 	.word	0x24000a18
 8014198:	2400096e 	.word	0x2400096e
 801419c:	2400096d 	.word	0x2400096d
 80141a0:	0800e5bd 	.word	0x0800e5bd
 80141a4:	24000a30 	.word	0x24000a30
 80141a8:	2400096c 	.word	0x2400096c
 80141ac:	0800e57d 	.word	0x0800e57d
 80141b0:	24000a48 	.word	0x24000a48
 80141b4:	24000a60 	.word	0x24000a60
 80141b8:	24000a84 	.word	0x24000a84
 80141bc:	24000aa8 	.word	0x24000aa8
 80141c0:	24000acc 	.word	0x24000acc
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 80141c4:	4816      	ldr	r0, [pc, #88]	; (8014220 <_Z41__static_initialization_and_destruction_0ii+0x504>)
 80141c6:	f7ff fd8d 	bl	8013ce4 <_ZN6PacketD1Ev>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 80141ca:	4816      	ldr	r0, [pc, #88]	; (8014224 <_Z41__static_initialization_and_destruction_0ii+0x508>)
 80141cc:	f7ff fd8a 	bl	8013ce4 <_ZN6PacketD1Ev>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 80141d0:	4815      	ldr	r0, [pc, #84]	; (8014228 <_Z41__static_initialization_and_destruction_0ii+0x50c>)
 80141d2:	f7ff fd87 	bl	8013ce4 <_ZN6PacketD1Ev>
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 80141d6:	4815      	ldr	r0, [pc, #84]	; (801422c <_Z41__static_initialization_and_destruction_0ii+0x510>)
 80141d8:	f7ff fd84 	bl	8013ce4 <_ZN6PacketD1Ev>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 80141dc:	4814      	ldr	r0, [pc, #80]	; (8014230 <_Z41__static_initialization_and_destruction_0ii+0x514>)
 80141de:	f7ff fd81 	bl	8013ce4 <_ZN6PacketD1Ev>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 80141e2:	4814      	ldr	r0, [pc, #80]	; (8014234 <_Z41__static_initialization_and_destruction_0ii+0x518>)
 80141e4:	f7ff fd7e 	bl	8013ce4 <_ZN6PacketD1Ev>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 80141e8:	4813      	ldr	r0, [pc, #76]	; (8014238 <_Z41__static_initialization_and_destruction_0ii+0x51c>)
 80141ea:	f7ff fd7b 	bl	8013ce4 <_ZN6PacketD1Ev>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 80141ee:	4813      	ldr	r0, [pc, #76]	; (801423c <_Z41__static_initialization_and_destruction_0ii+0x520>)
 80141f0:	f7ff fd78 	bl	8013ce4 <_ZN6PacketD1Ev>
Timer timer_17(&htim17);
 80141f4:	4812      	ldr	r0, [pc, #72]	; (8014240 <_Z41__static_initialization_and_destruction_0ii+0x524>)
 80141f6:	f7ff fd83 	bl	8013d00 <_ZN5TimerD1Ev>
Timer timer_16(&htim16);
 80141fa:	4812      	ldr	r0, [pc, #72]	; (8014244 <_Z41__static_initialization_and_destruction_0ii+0x528>)
 80141fc:	f7ff fd80 	bl	8013d00 <_ZN5TimerD1Ev>
Timer timer_15(&htim15);
 8014200:	4811      	ldr	r0, [pc, #68]	; (8014248 <_Z41__static_initialization_and_destruction_0ii+0x52c>)
 8014202:	f7ff fd7d 	bl	8013d00 <_ZN5TimerD1Ev>
Timer timer_14(&htim14);
 8014206:	4811      	ldr	r0, [pc, #68]	; (801424c <_Z41__static_initialization_and_destruction_0ii+0x530>)
 8014208:	f7ff fd7a 	bl	8013d00 <_ZN5TimerD1Ev>
Timer timer_13(&htim13);
 801420c:	4810      	ldr	r0, [pc, #64]	; (8014250 <_Z41__static_initialization_and_destruction_0ii+0x534>)
 801420e:	f7ff fd77 	bl	8013d00 <_ZN5TimerD1Ev>
Timer timer_7(&htim7);
 8014212:	4810      	ldr	r0, [pc, #64]	; (8014254 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 8014214:	f7ff fd74 	bl	8013d00 <_ZN5TimerD1Ev>
 8014218:	bf00      	nop
 801421a:	3708      	adds	r7, #8
 801421c:	46bd      	mov	sp, r7
 801421e:	bd80      	pop	{r7, pc}
 8014220:	24000a18 	.word	0x24000a18
 8014224:	24000a00 	.word	0x24000a00
 8014228:	240009e8 	.word	0x240009e8
 801422c:	240009d0 	.word	0x240009d0
 8014230:	240009b8 	.word	0x240009b8
 8014234:	240009a0 	.word	0x240009a0
 8014238:	24000988 	.word	0x24000988
 801423c:	24000970 	.word	0x24000970
 8014240:	24000870 	.word	0x24000870
 8014244:	24000850 	.word	0x24000850
 8014248:	24000830 	.word	0x24000830
 801424c:	24000810 	.word	0x24000810
 8014250:	240007f0 	.word	0x240007f0
 8014254:	240007d0 	.word	0x240007d0

08014258 <_ZN5FieldIJmEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014258:	b480      	push	{r7}
 801425a:	b083      	sub	sp, #12
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
 8014260:	6039      	str	r1, [r7, #0]
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	685b      	ldr	r3, [r3, #4]
 8014266:	683a      	ldr	r2, [r7, #0]
 8014268:	6812      	ldr	r2, [r2, #0]
 801426a:	601a      	str	r2, [r3, #0]
 801426c:	bf00      	nop
 801426e:	370c      	adds	r7, #12
 8014270:	46bd      	mov	sp, r7
 8014272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014276:	4770      	bx	lr

08014278 <_ZN5FieldIJmEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014278:	b480      	push	{r7}
 801427a:	b083      	sub	sp, #12
 801427c:	af00      	add	r7, sp, #0
 801427e:	6078      	str	r0, [r7, #4]
 8014280:	6039      	str	r1, [r7, #0]
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	685b      	ldr	r3, [r3, #4]
 8014286:	681a      	ldr	r2, [r3, #0]
 8014288:	683b      	ldr	r3, [r7, #0]
 801428a:	601a      	str	r2, [r3, #0]
 801428c:	bf00      	nop
 801428e:	370c      	adds	r7, #12
 8014290:	46bd      	mov	sp, r7
 8014292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014296:	4770      	bx	lr

08014298 <_ZN5FieldIJmEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014298:	b480      	push	{r7}
 801429a:	b083      	sub	sp, #12
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	2304      	movs	r3, #4
 80142a2:	4618      	mov	r0, r3
 80142a4:	370c      	adds	r7, #12
 80142a6:	46bd      	mov	sp, r7
 80142a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ac:	4770      	bx	lr

080142ae <_ZN5FieldIJtEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 80142ae:	b480      	push	{r7}
 80142b0:	b083      	sub	sp, #12
 80142b2:	af00      	add	r7, sp, #0
 80142b4:	6078      	str	r0, [r7, #4]
 80142b6:	6039      	str	r1, [r7, #0]
 80142b8:	687b      	ldr	r3, [r7, #4]
 80142ba:	685b      	ldr	r3, [r3, #4]
 80142bc:	683a      	ldr	r2, [r7, #0]
 80142be:	8812      	ldrh	r2, [r2, #0]
 80142c0:	801a      	strh	r2, [r3, #0]
 80142c2:	bf00      	nop
 80142c4:	370c      	adds	r7, #12
 80142c6:	46bd      	mov	sp, r7
 80142c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142cc:	4770      	bx	lr

080142ce <_ZN5FieldIJtEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 80142ce:	b480      	push	{r7}
 80142d0:	b083      	sub	sp, #12
 80142d2:	af00      	add	r7, sp, #0
 80142d4:	6078      	str	r0, [r7, #4]
 80142d6:	6039      	str	r1, [r7, #0]
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	685b      	ldr	r3, [r3, #4]
 80142dc:	881a      	ldrh	r2, [r3, #0]
 80142de:	683b      	ldr	r3, [r7, #0]
 80142e0:	801a      	strh	r2, [r3, #0]
 80142e2:	bf00      	nop
 80142e4:	370c      	adds	r7, #12
 80142e6:	46bd      	mov	sp, r7
 80142e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ec:	4770      	bx	lr

080142ee <_ZN5FieldIJtEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 80142ee:	b480      	push	{r7}
 80142f0:	b083      	sub	sp, #12
 80142f2:	af00      	add	r7, sp, #0
 80142f4:	6078      	str	r0, [r7, #4]
 80142f6:	2302      	movs	r3, #2
 80142f8:	4618      	mov	r0, r3
 80142fa:	370c      	adds	r7, #12
 80142fc:	46bd      	mov	sp, r7
 80142fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014302:	4770      	bx	lr

08014304 <_ZN5FieldIJhEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014304:	b480      	push	{r7}
 8014306:	b083      	sub	sp, #12
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	685b      	ldr	r3, [r3, #4]
 8014312:	683a      	ldr	r2, [r7, #0]
 8014314:	7812      	ldrb	r2, [r2, #0]
 8014316:	701a      	strb	r2, [r3, #0]
 8014318:	bf00      	nop
 801431a:	370c      	adds	r7, #12
 801431c:	46bd      	mov	sp, r7
 801431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014322:	4770      	bx	lr

08014324 <_ZN5FieldIJhEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014324:	b480      	push	{r7}
 8014326:	b083      	sub	sp, #12
 8014328:	af00      	add	r7, sp, #0
 801432a:	6078      	str	r0, [r7, #4]
 801432c:	6039      	str	r1, [r7, #0]
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	781a      	ldrb	r2, [r3, #0]
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	701a      	strb	r2, [r3, #0]
 8014338:	bf00      	nop
 801433a:	370c      	adds	r7, #12
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr

08014344 <_ZN5FieldIJhEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014344:	b480      	push	{r7}
 8014346:	b083      	sub	sp, #12
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
 801434c:	2301      	movs	r3, #1
 801434e:	4618      	mov	r0, r3
 8014350:	370c      	adds	r7, #12
 8014352:	46bd      	mov	sp, r7
 8014354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014358:	4770      	bx	lr

0801435a <_GLOBAL__sub_I_data_adc_1>:
 801435a:	b580      	push	{r7, lr}
 801435c:	af00      	add	r7, sp, #0
 801435e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014362:	2001      	movs	r0, #1
 8014364:	f7ff fcda 	bl	8013d1c <_Z41__static_initialization_and_destruction_0ii>
 8014368:	bd80      	pop	{r7, pc}

0801436a <_GLOBAL__sub_D_data_adc_1>:
 801436a:	b580      	push	{r7, lr}
 801436c:	af00      	add	r7, sp, #0
 801436e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8014372:	2000      	movs	r0, #0
 8014374:	f7ff fcd2 	bl	8013d1c <_Z41__static_initialization_and_destruction_0ii>
 8014378:	bd80      	pop	{r7, pc}
	...

0801437c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b082      	sub	sp, #8
 8014380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8014382:	4b1b      	ldr	r3, [pc, #108]	; (80143f0 <HAL_MspInit+0x74>)
 8014384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014388:	4a19      	ldr	r2, [pc, #100]	; (80143f0 <HAL_MspInit+0x74>)
 801438a:	f043 0302 	orr.w	r3, r3, #2
 801438e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8014392:	4b17      	ldr	r3, [pc, #92]	; (80143f0 <HAL_MspInit+0x74>)
 8014394:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014398:	f003 0302 	and.w	r3, r3, #2
 801439c:	607b      	str	r3, [r7, #4]
 801439e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80143a0:	2200      	movs	r2, #0
 80143a2:	2101      	movs	r1, #1
 80143a4:	f06f 000b 	mvn.w	r0, #11
 80143a8:	f003 f893 	bl	80174d2 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80143ac:	2200      	movs	r2, #0
 80143ae:	2101      	movs	r1, #1
 80143b0:	f06f 000a 	mvn.w	r0, #10
 80143b4:	f003 f88d 	bl	80174d2 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80143b8:	2200      	movs	r2, #0
 80143ba:	2101      	movs	r1, #1
 80143bc:	f06f 0009 	mvn.w	r0, #9
 80143c0:	f003 f887 	bl	80174d2 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80143c4:	2200      	movs	r2, #0
 80143c6:	2101      	movs	r1, #1
 80143c8:	f06f 0004 	mvn.w	r0, #4
 80143cc:	f003 f881 	bl	80174d2 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80143d0:	2200      	movs	r2, #0
 80143d2:	2101      	movs	r1, #1
 80143d4:	f06f 0003 	mvn.w	r0, #3
 80143d8:	f003 f87b 	bl	80174d2 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80143dc:	2200      	movs	r2, #0
 80143de:	2101      	movs	r1, #1
 80143e0:	f06f 0001 	mvn.w	r0, #1
 80143e4:	f003 f875 	bl	80174d2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80143e8:	bf00      	nop
 80143ea:	3708      	adds	r7, #8
 80143ec:	46bd      	mov	sp, r7
 80143ee:	bd80      	pop	{r7, pc}
 80143f0:	58024400 	.word	0x58024400

080143f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	b08a      	sub	sp, #40	; 0x28
 80143f8:	af00      	add	r7, sp, #0
 80143fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80143fc:	f107 0314 	add.w	r3, r7, #20
 8014400:	2200      	movs	r2, #0
 8014402:	601a      	str	r2, [r3, #0]
 8014404:	605a      	str	r2, [r3, #4]
 8014406:	609a      	str	r2, [r3, #8]
 8014408:	60da      	str	r2, [r3, #12]
 801440a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	4a34      	ldr	r2, [pc, #208]	; (80144e4 <HAL_ADC_MspInit+0xf0>)
 8014412:	4293      	cmp	r3, r2
 8014414:	d161      	bne.n	80144da <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8014416:	4b34      	ldr	r3, [pc, #208]	; (80144e8 <HAL_ADC_MspInit+0xf4>)
 8014418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801441c:	4a32      	ldr	r2, [pc, #200]	; (80144e8 <HAL_ADC_MspInit+0xf4>)
 801441e:	f043 0320 	orr.w	r3, r3, #32
 8014422:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014426:	4b30      	ldr	r3, [pc, #192]	; (80144e8 <HAL_ADC_MspInit+0xf4>)
 8014428:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801442c:	f003 0320 	and.w	r3, r3, #32
 8014430:	613b      	str	r3, [r7, #16]
 8014432:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014434:	4b2c      	ldr	r3, [pc, #176]	; (80144e8 <HAL_ADC_MspInit+0xf4>)
 8014436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801443a:	4a2b      	ldr	r2, [pc, #172]	; (80144e8 <HAL_ADC_MspInit+0xf4>)
 801443c:	f043 0301 	orr.w	r3, r3, #1
 8014440:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014444:	4b28      	ldr	r3, [pc, #160]	; (80144e8 <HAL_ADC_MspInit+0xf4>)
 8014446:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801444a:	f003 0301 	and.w	r3, r3, #1
 801444e:	60fb      	str	r3, [r7, #12]
 8014450:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014452:	2340      	movs	r3, #64	; 0x40
 8014454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014456:	2303      	movs	r3, #3
 8014458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801445a:	2300      	movs	r3, #0
 801445c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801445e:	f107 0314 	add.w	r3, r7, #20
 8014462:	4619      	mov	r1, r3
 8014464:	4821      	ldr	r0, [pc, #132]	; (80144ec <HAL_ADC_MspInit+0xf8>)
 8014466:	f006 fa9d 	bl	801a9a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 801446a:	4b21      	ldr	r3, [pc, #132]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 801446c:	4a21      	ldr	r2, [pc, #132]	; (80144f4 <HAL_ADC_MspInit+0x100>)
 801446e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8014470:	4b1f      	ldr	r3, [pc, #124]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 8014472:	2209      	movs	r2, #9
 8014474:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014476:	4b1e      	ldr	r3, [pc, #120]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 8014478:	2200      	movs	r2, #0
 801447a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 801447c:	4b1c      	ldr	r3, [pc, #112]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 801447e:	2200      	movs	r2, #0
 8014480:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8014482:	4b1b      	ldr	r3, [pc, #108]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 8014484:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014488:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 801448a:	4b19      	ldr	r3, [pc, #100]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 801448c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014490:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8014492:	4b17      	ldr	r3, [pc, #92]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 8014494:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014498:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 801449a:	4b15      	ldr	r3, [pc, #84]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 801449c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80144a0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80144a2:	4b13      	ldr	r3, [pc, #76]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 80144a4:	2200      	movs	r2, #0
 80144a6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80144a8:	4b11      	ldr	r3, [pc, #68]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 80144aa:	2200      	movs	r2, #0
 80144ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80144ae:	4810      	ldr	r0, [pc, #64]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 80144b0:	f003 f848 	bl	8017544 <HAL_DMA_Init>
 80144b4:	4603      	mov	r3, r0
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d001      	beq.n	80144be <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80144ba:	f7fb fc85 	bl	800fdc8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	4a0b      	ldr	r2, [pc, #44]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 80144c2:	659a      	str	r2, [r3, #88]	; 0x58
 80144c4:	4a0a      	ldr	r2, [pc, #40]	; (80144f0 <HAL_ADC_MspInit+0xfc>)
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80144ca:	2200      	movs	r2, #0
 80144cc:	2101      	movs	r1, #1
 80144ce:	2012      	movs	r0, #18
 80144d0:	f002 ffff 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80144d4:	2012      	movs	r0, #18
 80144d6:	f003 f816 	bl	8017506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80144da:	bf00      	nop
 80144dc:	3728      	adds	r7, #40	; 0x28
 80144de:	46bd      	mov	sp, r7
 80144e0:	bd80      	pop	{r7, pc}
 80144e2:	bf00      	nop
 80144e4:	40022000 	.word	0x40022000
 80144e8:	58024400 	.word	0x58024400
 80144ec:	58020000 	.word	0x58020000
 80144f0:	24000b64 	.word	0x24000b64
 80144f4:	40020028 	.word	0x40020028

080144f8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80144f8:	b580      	push	{r7, lr}
 80144fa:	b08a      	sub	sp, #40	; 0x28
 80144fc:	af00      	add	r7, sp, #0
 80144fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014500:	f107 0314 	add.w	r3, r7, #20
 8014504:	2200      	movs	r2, #0
 8014506:	601a      	str	r2, [r3, #0]
 8014508:	605a      	str	r2, [r3, #4]
 801450a:	609a      	str	r2, [r3, #8]
 801450c:	60da      	str	r2, [r3, #12]
 801450e:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8014510:	687b      	ldr	r3, [r7, #4]
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	4a22      	ldr	r2, [pc, #136]	; (80145a0 <HAL_FDCAN_MspInit+0xa8>)
 8014516:	4293      	cmp	r3, r2
 8014518:	d13e      	bne.n	8014598 <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 801451a:	4b22      	ldr	r3, [pc, #136]	; (80145a4 <HAL_FDCAN_MspInit+0xac>)
 801451c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014520:	4a20      	ldr	r2, [pc, #128]	; (80145a4 <HAL_FDCAN_MspInit+0xac>)
 8014522:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014526:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 801452a:	4b1e      	ldr	r3, [pc, #120]	; (80145a4 <HAL_FDCAN_MspInit+0xac>)
 801452c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014534:	613b      	str	r3, [r7, #16]
 8014536:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014538:	4b1a      	ldr	r3, [pc, #104]	; (80145a4 <HAL_FDCAN_MspInit+0xac>)
 801453a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801453e:	4a19      	ldr	r2, [pc, #100]	; (80145a4 <HAL_FDCAN_MspInit+0xac>)
 8014540:	f043 0301 	orr.w	r3, r3, #1
 8014544:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014548:	4b16      	ldr	r3, [pc, #88]	; (80145a4 <HAL_FDCAN_MspInit+0xac>)
 801454a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801454e:	f003 0301 	and.w	r3, r3, #1
 8014552:	60fb      	str	r3, [r7, #12]
 8014554:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014556:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801455a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801455c:	2302      	movs	r3, #2
 801455e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014560:	2300      	movs	r3, #0
 8014562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014564:	2300      	movs	r3, #0
 8014566:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8014568:	2309      	movs	r3, #9
 801456a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801456c:	f107 0314 	add.w	r3, r7, #20
 8014570:	4619      	mov	r1, r3
 8014572:	480d      	ldr	r0, [pc, #52]	; (80145a8 <HAL_FDCAN_MspInit+0xb0>)
 8014574:	f006 fa16 	bl	801a9a4 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8014578:	2200      	movs	r2, #0
 801457a:	2101      	movs	r1, #1
 801457c:	2013      	movs	r0, #19
 801457e:	f002 ffa8 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8014582:	2013      	movs	r0, #19
 8014584:	f002 ffbf 	bl	8017506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 1, 0);
 8014588:	2200      	movs	r2, #0
 801458a:	2101      	movs	r1, #1
 801458c:	2015      	movs	r0, #21
 801458e:	f002 ffa0 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8014592:	2015      	movs	r0, #21
 8014594:	f002 ffb7 	bl	8017506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8014598:	bf00      	nop
 801459a:	3728      	adds	r7, #40	; 0x28
 801459c:	46bd      	mov	sp, r7
 801459e:	bd80      	pop	{r7, pc}
 80145a0:	4000a000 	.word	0x4000a000
 80145a4:	58024400 	.word	0x58024400
 80145a8:	58020000 	.word	0x58020000

080145ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b09c      	sub	sp, #112	; 0x70
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80145b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80145b8:	2200      	movs	r2, #0
 80145ba:	601a      	str	r2, [r3, #0]
 80145bc:	605a      	str	r2, [r3, #4]
 80145be:	609a      	str	r2, [r3, #8]
 80145c0:	60da      	str	r2, [r3, #12]
 80145c2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	681b      	ldr	r3, [r3, #0]
 80145c8:	4aac      	ldr	r2, [pc, #688]	; (801487c <HAL_TIM_Base_MspInit+0x2d0>)
 80145ca:	4293      	cmp	r3, r2
 80145cc:	d137      	bne.n	801463e <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80145ce:	4bac      	ldr	r3, [pc, #688]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80145d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80145d4:	4aaa      	ldr	r2, [pc, #680]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80145d6:	f043 0301 	orr.w	r3, r3, #1
 80145da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80145de:	4ba8      	ldr	r3, [pc, #672]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80145e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80145e4:	f003 0301 	and.w	r3, r3, #1
 80145e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80145ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80145ec:	4ba4      	ldr	r3, [pc, #656]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80145ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80145f2:	4aa3      	ldr	r2, [pc, #652]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80145f4:	f043 0310 	orr.w	r3, r3, #16
 80145f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80145fc:	4ba0      	ldr	r3, [pc, #640]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80145fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014602:	f003 0310 	and.w	r3, r3, #16
 8014606:	657b      	str	r3, [r7, #84]	; 0x54
 8014608:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|PWM_5V_8_Pin|PWM_5V_7_Pin;
 801460a:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 801460e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014610:	2302      	movs	r3, #2
 8014612:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014614:	2302      	movs	r3, #2
 8014616:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014618:	2300      	movs	r3, #0
 801461a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 801461c:	2301      	movs	r3, #1
 801461e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014620:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014624:	4619      	mov	r1, r3
 8014626:	4897      	ldr	r0, [pc, #604]	; (8014884 <HAL_TIM_Base_MspInit+0x2d8>)
 8014628:	f006 f9bc 	bl	801a9a4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 801462c:	2200      	movs	r2, #0
 801462e:	2101      	movs	r1, #1
 8014630:	201b      	movs	r0, #27
 8014632:	f002 ff4e 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8014636:	201b      	movs	r0, #27
 8014638:	f002 ff65 	bl	8017506 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 801463c:	e24b      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM2)
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014646:	d166      	bne.n	8014716 <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014648:	4b8d      	ldr	r3, [pc, #564]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 801464a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801464e:	4a8c      	ldr	r2, [pc, #560]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014650:	f043 0301 	orr.w	r3, r3, #1
 8014654:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014658:	4b89      	ldr	r3, [pc, #548]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 801465a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801465e:	f003 0301 	and.w	r3, r3, #1
 8014662:	653b      	str	r3, [r7, #80]	; 0x50
 8014664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014666:	4b86      	ldr	r3, [pc, #536]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801466c:	4a84      	ldr	r2, [pc, #528]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 801466e:	f043 0301 	orr.w	r3, r3, #1
 8014672:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014676:	4b82      	ldr	r3, [pc, #520]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014678:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801467c:	f003 0301 	and.w	r3, r3, #1
 8014680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8014682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014684:	4b7e      	ldr	r3, [pc, #504]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014686:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801468a:	4a7d      	ldr	r2, [pc, #500]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 801468c:	f043 0302 	orr.w	r3, r3, #2
 8014690:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014694:	4b7a      	ldr	r3, [pc, #488]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014696:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801469a:	f003 0302 	and.w	r3, r3, #2
 801469e:	64bb      	str	r3, [r7, #72]	; 0x48
 80146a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80146a2:	2302      	movs	r3, #2
 80146a4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80146a6:	2302      	movs	r3, #2
 80146a8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80146aa:	2300      	movs	r3, #0
 80146ac:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80146ae:	2300      	movs	r3, #0
 80146b0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80146b2:	2301      	movs	r3, #1
 80146b4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80146b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80146ba:	4619      	mov	r1, r3
 80146bc:	4872      	ldr	r0, [pc, #456]	; (8014888 <HAL_TIM_Base_MspInit+0x2dc>)
 80146be:	f006 f971 	bl	801a9a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_1A5_Pin;
 80146c2:	2320      	movs	r3, #32
 80146c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80146c6:	2302      	movs	r3, #2
 80146c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80146ca:	2302      	movs	r3, #2
 80146cc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80146ce:	2300      	movs	r3, #0
 80146d0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80146d2:	2301      	movs	r3, #1
 80146d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SENSOR_3V_1A5_GPIO_Port, &GPIO_InitStruct);
 80146d6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80146da:	4619      	mov	r1, r3
 80146dc:	486a      	ldr	r0, [pc, #424]	; (8014888 <HAL_TIM_Base_MspInit+0x2dc>)
 80146de:	f006 f961 	bl	801a9a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_5_Pin|SENSOR_3V_8_Pin;
 80146e2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80146e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80146e8:	2302      	movs	r3, #2
 80146ea:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80146ec:	2300      	movs	r3, #0
 80146ee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80146f0:	2300      	movs	r3, #0
 80146f2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80146f4:	2301      	movs	r3, #1
 80146f6:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80146f8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80146fc:	4619      	mov	r1, r3
 80146fe:	4863      	ldr	r0, [pc, #396]	; (801488c <HAL_TIM_Base_MspInit+0x2e0>)
 8014700:	f006 f950 	bl	801a9a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8014704:	2200      	movs	r2, #0
 8014706:	2100      	movs	r1, #0
 8014708:	201c      	movs	r0, #28
 801470a:	f002 fee2 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 801470e:	201c      	movs	r0, #28
 8014710:	f002 fef9 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 8014714:	e1df      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM3)
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	681b      	ldr	r3, [r3, #0]
 801471a:	4a5d      	ldr	r2, [pc, #372]	; (8014890 <HAL_TIM_Base_MspInit+0x2e4>)
 801471c:	4293      	cmp	r3, r2
 801471e:	d136      	bne.n	801478e <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014720:	4b57      	ldr	r3, [pc, #348]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014726:	4a56      	ldr	r2, [pc, #344]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014728:	f043 0302 	orr.w	r3, r3, #2
 801472c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014730:	4b53      	ldr	r3, [pc, #332]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014736:	f003 0302 	and.w	r3, r3, #2
 801473a:	647b      	str	r3, [r7, #68]	; 0x44
 801473c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801473e:	4b50      	ldr	r3, [pc, #320]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014744:	4a4e      	ldr	r2, [pc, #312]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014746:	f043 0302 	orr.w	r3, r3, #2
 801474a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801474e:	4b4c      	ldr	r3, [pc, #304]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014754:	f003 0302 	and.w	r3, r3, #2
 8014758:	643b      	str	r3, [r7, #64]	; 0x40
 801475a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = PWM_5V_2_Pin|PWM_5V_9_Pin|GPIO_PIN_4|PWM_5V_4_Pin;
 801475c:	2333      	movs	r3, #51	; 0x33
 801475e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014760:	2302      	movs	r3, #2
 8014762:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014764:	2302      	movs	r3, #2
 8014766:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014768:	2300      	movs	r3, #0
 801476a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801476c:	2302      	movs	r3, #2
 801476e:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8014770:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014774:	4619      	mov	r1, r3
 8014776:	4845      	ldr	r0, [pc, #276]	; (801488c <HAL_TIM_Base_MspInit+0x2e0>)
 8014778:	f006 f914 	bl	801a9a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 801477c:	2200      	movs	r2, #0
 801477e:	2101      	movs	r1, #1
 8014780:	201d      	movs	r0, #29
 8014782:	f002 fea6 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8014786:	201d      	movs	r0, #29
 8014788:	f002 febd 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 801478c:	e1a3      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM4)
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	4a40      	ldr	r2, [pc, #256]	; (8014894 <HAL_TIM_Base_MspInit+0x2e8>)
 8014794:	4293      	cmp	r3, r2
 8014796:	d137      	bne.n	8014808 <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8014798:	4b39      	ldr	r3, [pc, #228]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 801479a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801479e:	4a38      	ldr	r2, [pc, #224]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80147a0:	f043 0304 	orr.w	r3, r3, #4
 80147a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80147a8:	4b35      	ldr	r3, [pc, #212]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80147aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80147ae:	f003 0304 	and.w	r3, r3, #4
 80147b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80147b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80147b6:	4b32      	ldr	r3, [pc, #200]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80147b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80147bc:	4a30      	ldr	r2, [pc, #192]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80147be:	f043 0308 	orr.w	r3, r3, #8
 80147c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80147c6:	4b2e      	ldr	r3, [pc, #184]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 80147c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80147cc:	f003 0308 	and.w	r3, r3, #8
 80147d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80147d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = PWM_5V_6_Pin|PWM_5V_5_Pin|PWM_5V_10_Pin|PWM_5V_11_Pin;
 80147d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80147d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147da:	2302      	movs	r3, #2
 80147dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147de:	2300      	movs	r3, #0
 80147e0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147e2:	2300      	movs	r3, #0
 80147e4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80147e6:	2302      	movs	r3, #2
 80147e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80147ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80147ee:	4619      	mov	r1, r3
 80147f0:	4829      	ldr	r0, [pc, #164]	; (8014898 <HAL_TIM_Base_MspInit+0x2ec>)
 80147f2:	f006 f8d7 	bl	801a9a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80147f6:	2200      	movs	r2, #0
 80147f8:	2101      	movs	r1, #1
 80147fa:	201e      	movs	r0, #30
 80147fc:	f002 fe69 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8014800:	201e      	movs	r0, #30
 8014802:	f002 fe80 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 8014806:	e166      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM5)
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	681b      	ldr	r3, [r3, #0]
 801480c:	4a23      	ldr	r2, [pc, #140]	; (801489c <HAL_TIM_Base_MspInit+0x2f0>)
 801480e:	4293      	cmp	r3, r2
 8014810:	d117      	bne.n	8014842 <HAL_TIM_Base_MspInit+0x296>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8014812:	4b1b      	ldr	r3, [pc, #108]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014818:	4a19      	ldr	r2, [pc, #100]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 801481a:	f043 0308 	orr.w	r3, r3, #8
 801481e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014822:	4b17      	ldr	r3, [pc, #92]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014828:	f003 0308 	and.w	r3, r3, #8
 801482c:	637b      	str	r3, [r7, #52]	; 0x34
 801482e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8014830:	2200      	movs	r2, #0
 8014832:	2101      	movs	r1, #1
 8014834:	2032      	movs	r0, #50	; 0x32
 8014836:	f002 fe4c 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801483a:	2032      	movs	r0, #50	; 0x32
 801483c:	f002 fe63 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 8014840:	e149      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM6)
 8014842:	687b      	ldr	r3, [r7, #4]
 8014844:	681b      	ldr	r3, [r3, #0]
 8014846:	4a16      	ldr	r2, [pc, #88]	; (80148a0 <HAL_TIM_Base_MspInit+0x2f4>)
 8014848:	4293      	cmp	r3, r2
 801484a:	d12b      	bne.n	80148a4 <HAL_TIM_Base_MspInit+0x2f8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 801484c:	4b0c      	ldr	r3, [pc, #48]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 801484e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014852:	4a0b      	ldr	r2, [pc, #44]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 8014854:	f043 0310 	orr.w	r3, r3, #16
 8014858:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801485c:	4b08      	ldr	r3, [pc, #32]	; (8014880 <HAL_TIM_Base_MspInit+0x2d4>)
 801485e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014862:	f003 0310 	and.w	r3, r3, #16
 8014866:	633b      	str	r3, [r7, #48]	; 0x30
 8014868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 801486a:	2200      	movs	r2, #0
 801486c:	2101      	movs	r1, #1
 801486e:	2036      	movs	r0, #54	; 0x36
 8014870:	f002 fe2f 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8014874:	2036      	movs	r0, #54	; 0x36
 8014876:	f002 fe46 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 801487a:	e12c      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
 801487c:	40010000 	.word	0x40010000
 8014880:	58024400 	.word	0x58024400
 8014884:	58021000 	.word	0x58021000
 8014888:	58020000 	.word	0x58020000
 801488c:	58020400 	.word	0x58020400
 8014890:	40000400 	.word	0x40000400
 8014894:	40000800 	.word	0x40000800
 8014898:	58020c00 	.word	0x58020c00
 801489c:	40000c00 	.word	0x40000c00
 80148a0:	40001000 	.word	0x40001000
  else if(htim_base->Instance==TIM7)
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	4a8d      	ldr	r2, [pc, #564]	; (8014ae0 <HAL_TIM_Base_MspInit+0x534>)
 80148aa:	4293      	cmp	r3, r2
 80148ac:	d117      	bne.n	80148de <HAL_TIM_Base_MspInit+0x332>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80148ae:	4b8d      	ldr	r3, [pc, #564]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80148b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80148b4:	4a8b      	ldr	r2, [pc, #556]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80148b6:	f043 0320 	orr.w	r3, r3, #32
 80148ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80148be:	4b89      	ldr	r3, [pc, #548]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80148c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80148c4:	f003 0320 	and.w	r3, r3, #32
 80148c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80148ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 80148cc:	2200      	movs	r2, #0
 80148ce:	2101      	movs	r1, #1
 80148d0:	2037      	movs	r0, #55	; 0x37
 80148d2:	f002 fdfe 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80148d6:	2037      	movs	r0, #55	; 0x37
 80148d8:	f002 fe15 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 80148dc:	e0fb      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM8)
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	4a81      	ldr	r2, [pc, #516]	; (8014ae8 <HAL_TIM_Base_MspInit+0x53c>)
 80148e4:	4293      	cmp	r3, r2
 80148e6:	d127      	bne.n	8014938 <HAL_TIM_Base_MspInit+0x38c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80148e8:	4b7e      	ldr	r3, [pc, #504]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80148ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80148ee:	4a7d      	ldr	r2, [pc, #500]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80148f0:	f043 0302 	orr.w	r3, r3, #2
 80148f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80148f8:	4b7a      	ldr	r3, [pc, #488]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80148fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80148fe:	f003 0302 	and.w	r3, r3, #2
 8014902:	62bb      	str	r3, [r7, #40]	; 0x28
 8014904:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8014906:	2200      	movs	r2, #0
 8014908:	2101      	movs	r1, #1
 801490a:	202c      	movs	r0, #44	; 0x2c
 801490c:	f002 fde1 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014910:	202c      	movs	r0, #44	; 0x2c
 8014912:	f002 fdf8 	bl	8017506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8014916:	2200      	movs	r2, #0
 8014918:	2101      	movs	r1, #1
 801491a:	202d      	movs	r0, #45	; 0x2d
 801491c:	f002 fdd9 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014920:	202d      	movs	r0, #45	; 0x2d
 8014922:	f002 fdf0 	bl	8017506 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8014926:	2200      	movs	r2, #0
 8014928:	2101      	movs	r1, #1
 801492a:	202e      	movs	r0, #46	; 0x2e
 801492c:	f002 fdd1 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8014930:	202e      	movs	r0, #46	; 0x2e
 8014932:	f002 fde8 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 8014936:	e0ce      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM12)
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	4a6b      	ldr	r2, [pc, #428]	; (8014aec <HAL_TIM_Base_MspInit+0x540>)
 801493e:	4293      	cmp	r3, r2
 8014940:	d10f      	bne.n	8014962 <HAL_TIM_Base_MspInit+0x3b6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8014942:	4b68      	ldr	r3, [pc, #416]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014948:	4a66      	ldr	r2, [pc, #408]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 801494a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801494e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014952:	4b64      	ldr	r3, [pc, #400]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801495c:	627b      	str	r3, [r7, #36]	; 0x24
 801495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014960:	e0b9      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM13)
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	4a62      	ldr	r2, [pc, #392]	; (8014af0 <HAL_TIM_Base_MspInit+0x544>)
 8014968:	4293      	cmp	r3, r2
 801496a:	d117      	bne.n	801499c <HAL_TIM_Base_MspInit+0x3f0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 801496c:	4b5d      	ldr	r3, [pc, #372]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 801496e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014972:	4a5c      	ldr	r2, [pc, #368]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014978:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801497c:	4b59      	ldr	r3, [pc, #356]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 801497e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014986:	623b      	str	r3, [r7, #32]
 8014988:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 801498a:	2200      	movs	r2, #0
 801498c:	2101      	movs	r1, #1
 801498e:	202c      	movs	r0, #44	; 0x2c
 8014990:	f002 fd9f 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014994:	202c      	movs	r0, #44	; 0x2c
 8014996:	f002 fdb6 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 801499a:	e09c      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM14)
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	4a54      	ldr	r2, [pc, #336]	; (8014af4 <HAL_TIM_Base_MspInit+0x548>)
 80149a2:	4293      	cmp	r3, r2
 80149a4:	d117      	bne.n	80149d6 <HAL_TIM_Base_MspInit+0x42a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80149a6:	4b4f      	ldr	r3, [pc, #316]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80149a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149ac:	4a4d      	ldr	r2, [pc, #308]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80149ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80149b2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80149b6:	4b4b      	ldr	r3, [pc, #300]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80149b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80149c0:	61fb      	str	r3, [r7, #28]
 80149c2:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 80149c4:	2200      	movs	r2, #0
 80149c6:	2101      	movs	r1, #1
 80149c8:	202d      	movs	r0, #45	; 0x2d
 80149ca:	f002 fd82 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80149ce:	202d      	movs	r0, #45	; 0x2d
 80149d0:	f002 fd99 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 80149d4:	e07f      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM15)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	4a47      	ldr	r2, [pc, #284]	; (8014af8 <HAL_TIM_Base_MspInit+0x54c>)
 80149dc:	4293      	cmp	r3, r2
 80149de:	d117      	bne.n	8014a10 <HAL_TIM_Base_MspInit+0x464>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80149e0:	4b40      	ldr	r3, [pc, #256]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80149e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80149e6:	4a3f      	ldr	r2, [pc, #252]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80149e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80149ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80149f0:	4b3c      	ldr	r3, [pc, #240]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 80149f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80149f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80149fa:	61bb      	str	r3, [r7, #24]
 80149fc:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 80149fe:	2200      	movs	r2, #0
 8014a00:	2101      	movs	r1, #1
 8014a02:	2074      	movs	r0, #116	; 0x74
 8014a04:	f002 fd65 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8014a08:	2074      	movs	r0, #116	; 0x74
 8014a0a:	f002 fd7c 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 8014a0e:	e062      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM16)
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	4a39      	ldr	r2, [pc, #228]	; (8014afc <HAL_TIM_Base_MspInit+0x550>)
 8014a16:	4293      	cmp	r3, r2
 8014a18:	d117      	bne.n	8014a4a <HAL_TIM_Base_MspInit+0x49e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8014a1a:	4b32      	ldr	r3, [pc, #200]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014a1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a20:	4a30      	ldr	r2, [pc, #192]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014a26:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014a2a:	4b2e      	ldr	r3, [pc, #184]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014a2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014a34:	617b      	str	r3, [r7, #20]
 8014a36:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8014a38:	2200      	movs	r2, #0
 8014a3a:	2101      	movs	r1, #1
 8014a3c:	2075      	movs	r0, #117	; 0x75
 8014a3e:	f002 fd48 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8014a42:	2075      	movs	r0, #117	; 0x75
 8014a44:	f002 fd5f 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 8014a48:	e045      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM17)
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	4a2c      	ldr	r2, [pc, #176]	; (8014b00 <HAL_TIM_Base_MspInit+0x554>)
 8014a50:	4293      	cmp	r3, r2
 8014a52:	d117      	bne.n	8014a84 <HAL_TIM_Base_MspInit+0x4d8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8014a54:	4b23      	ldr	r3, [pc, #140]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a5a:	4a22      	ldr	r2, [pc, #136]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014a5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014a60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014a64:	4b1f      	ldr	r3, [pc, #124]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014a66:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014a6e:	613b      	str	r3, [r7, #16]
 8014a70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 8014a72:	2200      	movs	r2, #0
 8014a74:	2101      	movs	r1, #1
 8014a76:	2076      	movs	r0, #118	; 0x76
 8014a78:	f002 fd2b 	bl	80174d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8014a7c:	2076      	movs	r0, #118	; 0x76
 8014a7e:	f002 fd42 	bl	8017506 <HAL_NVIC_EnableIRQ>
}
 8014a82:	e028      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM23)
 8014a84:	687b      	ldr	r3, [r7, #4]
 8014a86:	681b      	ldr	r3, [r3, #0]
 8014a88:	4a1e      	ldr	r2, [pc, #120]	; (8014b04 <HAL_TIM_Base_MspInit+0x558>)
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	d10f      	bne.n	8014aae <HAL_TIM_Base_MspInit+0x502>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8014a8e:	4b15      	ldr	r3, [pc, #84]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014a90:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014a94:	4a13      	ldr	r2, [pc, #76]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014a9a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014a9e:	4b11      	ldr	r3, [pc, #68]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014aa0:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014aa4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014aa8:	60fb      	str	r3, [r7, #12]
 8014aaa:	68fb      	ldr	r3, [r7, #12]
}
 8014aac:	e013      	b.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM24)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	4a15      	ldr	r2, [pc, #84]	; (8014b08 <HAL_TIM_Base_MspInit+0x55c>)
 8014ab4:	4293      	cmp	r3, r2
 8014ab6:	d10e      	bne.n	8014ad6 <HAL_TIM_Base_MspInit+0x52a>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8014ab8:	4b0a      	ldr	r3, [pc, #40]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014aba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014abe:	4a09      	ldr	r2, [pc, #36]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014ac4:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014ac8:	4b06      	ldr	r3, [pc, #24]	; (8014ae4 <HAL_TIM_Base_MspInit+0x538>)
 8014aca:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014ad2:	60bb      	str	r3, [r7, #8]
 8014ad4:	68bb      	ldr	r3, [r7, #8]
}
 8014ad6:	bf00      	nop
 8014ad8:	3770      	adds	r7, #112	; 0x70
 8014ada:	46bd      	mov	sp, r7
 8014adc:	bd80      	pop	{r7, pc}
 8014ade:	bf00      	nop
 8014ae0:	40001400 	.word	0x40001400
 8014ae4:	58024400 	.word	0x58024400
 8014ae8:	40010400 	.word	0x40010400
 8014aec:	40001800 	.word	0x40001800
 8014af0:	40001c00 	.word	0x40001c00
 8014af4:	40002000 	.word	0x40002000
 8014af8:	40014000 	.word	0x40014000
 8014afc:	40014400 	.word	0x40014400
 8014b00:	40014800 	.word	0x40014800
 8014b04:	4000e000 	.word	0x4000e000
 8014b08:	4000e400 	.word	0x4000e400

08014b0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014b0c:	b580      	push	{r7, lr}
 8014b0e:	b08c      	sub	sp, #48	; 0x30
 8014b10:	af00      	add	r7, sp, #0
 8014b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014b14:	f107 031c 	add.w	r3, r7, #28
 8014b18:	2200      	movs	r2, #0
 8014b1a:	601a      	str	r2, [r3, #0]
 8014b1c:	605a      	str	r2, [r3, #4]
 8014b1e:	609a      	str	r2, [r3, #8]
 8014b20:	60da      	str	r2, [r3, #12]
 8014b22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	681b      	ldr	r3, [r3, #0]
 8014b28:	4a66      	ldr	r2, [pc, #408]	; (8014cc4 <HAL_TIM_MspPostInit+0x1b8>)
 8014b2a:	4293      	cmp	r3, r2
 8014b2c:	d11f      	bne.n	8014b6e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014b2e:	4b66      	ldr	r3, [pc, #408]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b34:	4a64      	ldr	r2, [pc, #400]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014b36:	f043 0301 	orr.w	r3, r3, #1
 8014b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014b3e:	4b62      	ldr	r3, [pc, #392]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b44:	f003 0301 	and.w	r3, r3, #1
 8014b48:	61bb      	str	r3, [r7, #24]
 8014b4a:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8014b4c:	230d      	movs	r3, #13
 8014b4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b50:	2302      	movs	r3, #2
 8014b52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014b54:	2300      	movs	r3, #0
 8014b56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014b58:	2300      	movs	r3, #0
 8014b5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8014b5c:	2302      	movs	r3, #2
 8014b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014b60:	f107 031c 	add.w	r3, r7, #28
 8014b64:	4619      	mov	r1, r3
 8014b66:	4859      	ldr	r0, [pc, #356]	; (8014ccc <HAL_TIM_MspPostInit+0x1c0>)
 8014b68:	f005 ff1c 	bl	801a9a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 8014b6c:	e0a5      	b.n	8014cba <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM8)
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	681b      	ldr	r3, [r3, #0]
 8014b72:	4a57      	ldr	r2, [pc, #348]	; (8014cd0 <HAL_TIM_MspPostInit+0x1c4>)
 8014b74:	4293      	cmp	r3, r2
 8014b76:	d130      	bne.n	8014bda <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014b78:	4b53      	ldr	r3, [pc, #332]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014b7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b7e:	4a52      	ldr	r2, [pc, #328]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014b80:	f043 0304 	orr.w	r3, r3, #4
 8014b84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014b88:	4b4f      	ldr	r3, [pc, #316]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014b8e:	f003 0304 	and.w	r3, r3, #4
 8014b92:	617b      	str	r3, [r7, #20]
 8014b94:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014b96:	2340      	movs	r3, #64	; 0x40
 8014b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014b9a:	2302      	movs	r3, #2
 8014b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014b9e:	2302      	movs	r3, #2
 8014ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ba2:	2300      	movs	r3, #0
 8014ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014ba6:	2303      	movs	r3, #3
 8014ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014baa:	f107 031c 	add.w	r3, r7, #28
 8014bae:	4619      	mov	r1, r3
 8014bb0:	4848      	ldr	r0, [pc, #288]	; (8014cd4 <HAL_TIM_MspPostInit+0x1c8>)
 8014bb2:	f005 fef7 	bl	801a9a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_6_Pin|SENSOR_3V_11_Pin|SENSOR_3V_5C9_Pin;
 8014bb6:	f44f 7360 	mov.w	r3, #896	; 0x380
 8014bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014bbc:	2302      	movs	r3, #2
 8014bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014bc4:	2300      	movs	r3, #0
 8014bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014bc8:	2303      	movs	r3, #3
 8014bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014bcc:	f107 031c 	add.w	r3, r7, #28
 8014bd0:	4619      	mov	r1, r3
 8014bd2:	4840      	ldr	r0, [pc, #256]	; (8014cd4 <HAL_TIM_MspPostInit+0x1c8>)
 8014bd4:	f005 fee6 	bl	801a9a4 <HAL_GPIO_Init>
}
 8014bd8:	e06f      	b.n	8014cba <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM12)
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	4a3e      	ldr	r2, [pc, #248]	; (8014cd8 <HAL_TIM_MspPostInit+0x1cc>)
 8014be0:	4293      	cmp	r3, r2
 8014be2:	d120      	bne.n	8014c26 <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014be4:	4b38      	ldr	r3, [pc, #224]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014bea:	4a37      	ldr	r2, [pc, #220]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014bec:	f043 0302 	orr.w	r3, r3, #2
 8014bf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014bf4:	4b34      	ldr	r3, [pc, #208]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014bfa:	f003 0302 	and.w	r3, r3, #2
 8014bfe:	613b      	str	r3, [r7, #16]
 8014c00:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENSOR_3V_14B14_Pin;
 8014c02:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c08:	2302      	movs	r3, #2
 8014c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014c10:	2300      	movs	r3, #0
 8014c12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8014c14:	2302      	movs	r3, #2
 8014c16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR_3V_14B14_GPIO_Port, &GPIO_InitStruct);
 8014c18:	f107 031c 	add.w	r3, r7, #28
 8014c1c:	4619      	mov	r1, r3
 8014c1e:	482f      	ldr	r0, [pc, #188]	; (8014cdc <HAL_TIM_MspPostInit+0x1d0>)
 8014c20:	f005 fec0 	bl	801a9a4 <HAL_GPIO_Init>
}
 8014c24:	e049      	b.n	8014cba <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM23)
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	4a2d      	ldr	r2, [pc, #180]	; (8014ce0 <HAL_TIM_MspPostInit+0x1d4>)
 8014c2c:	4293      	cmp	r3, r2
 8014c2e:	d11f      	bne.n	8014c70 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014c30:	4b25      	ldr	r3, [pc, #148]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c36:	4a24      	ldr	r2, [pc, #144]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014c38:	f043 0320 	orr.w	r3, r3, #32
 8014c3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014c40:	4b21      	ldr	r3, [pc, #132]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014c42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c46:	f003 0320 	and.w	r3, r3, #32
 8014c4a:	60fb      	str	r3, [r7, #12]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_3V_2_Pin|SENSOR_3V_1_Pin|SENSOR_3V_3_Pin|SENSOR_3V_15_Pin;
 8014c4e:	230f      	movs	r3, #15
 8014c50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c52:	2302      	movs	r3, #2
 8014c54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c56:	2300      	movs	r3, #0
 8014c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8014c5e:	230d      	movs	r3, #13
 8014c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014c62:	f107 031c 	add.w	r3, r7, #28
 8014c66:	4619      	mov	r1, r3
 8014c68:	481e      	ldr	r0, [pc, #120]	; (8014ce4 <HAL_TIM_MspPostInit+0x1d8>)
 8014c6a:	f005 fe9b 	bl	801a9a4 <HAL_GPIO_Init>
}
 8014c6e:	e024      	b.n	8014cba <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM24)
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	4a1c      	ldr	r2, [pc, #112]	; (8014ce8 <HAL_TIM_MspPostInit+0x1dc>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d11f      	bne.n	8014cba <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014c7a:	4b13      	ldr	r3, [pc, #76]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c80:	4a11      	ldr	r2, [pc, #68]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014c82:	f043 0320 	orr.w	r3, r3, #32
 8014c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014c8a:	4b0f      	ldr	r3, [pc, #60]	; (8014cc8 <HAL_TIM_MspPostInit+0x1bc>)
 8014c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c90:	f003 0320 	and.w	r3, r3, #32
 8014c94:	60bb      	str	r3, [r7, #8]
 8014c96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENSOR_3V_16_Pin|SENSOR_3V_10_Pin|SENSOR_3V_9_Pin|SENSOR_3V_14_Pin;
 8014c98:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8014c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c9e:	2302      	movs	r3, #2
 8014ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ca6:	2300      	movs	r3, #0
 8014ca8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8014caa:	230e      	movs	r3, #14
 8014cac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014cae:	f107 031c 	add.w	r3, r7, #28
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	480b      	ldr	r0, [pc, #44]	; (8014ce4 <HAL_TIM_MspPostInit+0x1d8>)
 8014cb6:	f005 fe75 	bl	801a9a4 <HAL_GPIO_Init>
}
 8014cba:	bf00      	nop
 8014cbc:	3730      	adds	r7, #48	; 0x30
 8014cbe:	46bd      	mov	sp, r7
 8014cc0:	bd80      	pop	{r7, pc}
 8014cc2:	bf00      	nop
 8014cc4:	40000c00 	.word	0x40000c00
 8014cc8:	58024400 	.word	0x58024400
 8014ccc:	58020000 	.word	0x58020000
 8014cd0:	40010400 	.word	0x40010400
 8014cd4:	58020800 	.word	0x58020800
 8014cd8:	40001800 	.word	0x40001800
 8014cdc:	58020400 	.word	0x58020400
 8014ce0:	4000e000 	.word	0x4000e000
 8014ce4:	58021400 	.word	0x58021400
 8014ce8:	4000e400 	.word	0x4000e400

08014cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014cec:	b480      	push	{r7}
 8014cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8014cf0:	e7fe      	b.n	8014cf0 <NMI_Handler+0x4>

08014cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014cf2:	b480      	push	{r7}
 8014cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014cf6:	e7fe      	b.n	8014cf6 <HardFault_Handler+0x4>

08014cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014cf8:	b480      	push	{r7}
 8014cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014cfc:	e7fe      	b.n	8014cfc <MemManage_Handler+0x4>

08014cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014cfe:	b480      	push	{r7}
 8014d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014d02:	e7fe      	b.n	8014d02 <BusFault_Handler+0x4>

08014d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014d04:	b480      	push	{r7}
 8014d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014d08:	e7fe      	b.n	8014d08 <UsageFault_Handler+0x4>

08014d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014d0a:	b480      	push	{r7}
 8014d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014d0e:	bf00      	nop
 8014d10:	46bd      	mov	sp, r7
 8014d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d16:	4770      	bx	lr

08014d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014d18:	b480      	push	{r7}
 8014d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014d1c:	bf00      	nop
 8014d1e:	46bd      	mov	sp, r7
 8014d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d24:	4770      	bx	lr

08014d26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014d26:	b480      	push	{r7}
 8014d28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014d2a:	bf00      	nop
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d32:	4770      	bx	lr

08014d34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014d38:	f000 fa20 	bl	801517c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014d3c:	bf00      	nop
 8014d3e:	bd80      	pop	{r7, pc}

08014d40 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8014d40:	b580      	push	{r7, lr}
 8014d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8014d44:	4802      	ldr	r0, [pc, #8]	; (8014d50 <DMA1_Stream1_IRQHandler+0x10>)
 8014d46:	f003 f9c1 	bl	80180cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8014d4a:	bf00      	nop
 8014d4c:	bd80      	pop	{r7, pc}
 8014d4e:	bf00      	nop
 8014d50:	24000b64 	.word	0x24000b64

08014d54 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8014d54:	b580      	push	{r7, lr}
 8014d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8014d58:	4802      	ldr	r0, [pc, #8]	; (8014d64 <ADC_IRQHandler+0x10>)
 8014d5a:	f000 ffff 	bl	8015d5c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8014d5e:	bf00      	nop
 8014d60:	bd80      	pop	{r7, pc}
 8014d62:	bf00      	nop
 8014d64:	24000af4 	.word	0x24000af4

08014d68 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8014d68:	b580      	push	{r7, lr}
 8014d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014d6c:	4802      	ldr	r0, [pc, #8]	; (8014d78 <FDCAN1_IT0_IRQHandler+0x10>)
 8014d6e:	f005 f90b 	bl	8019f88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8014d72:	bf00      	nop
 8014d74:	bd80      	pop	{r7, pc}
 8014d76:	bf00      	nop
 8014d78:	24000bdc 	.word	0x24000bdc

08014d7c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014d80:	4802      	ldr	r0, [pc, #8]	; (8014d8c <FDCAN1_IT1_IRQHandler+0x10>)
 8014d82:	f005 f901 	bl	8019f88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8014d86:	bf00      	nop
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	24000bdc 	.word	0x24000bdc

08014d90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014d94:	4802      	ldr	r0, [pc, #8]	; (8014da0 <TIM1_CC_IRQHandler+0x10>)
 8014d96:	f00a f943 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8014d9a:	bf00      	nop
 8014d9c:	bd80      	pop	{r7, pc}
 8014d9e:	bf00      	nop
 8014da0:	24000c7c 	.word	0x24000c7c

08014da4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8014da8:	4802      	ldr	r0, [pc, #8]	; (8014db4 <TIM2_IRQHandler+0x10>)
 8014daa:	f00a f939 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8014dae:	bf00      	nop
 8014db0:	bd80      	pop	{r7, pc}
 8014db2:	bf00      	nop
 8014db4:	24000cc8 	.word	0x24000cc8

08014db8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8014dbc:	4802      	ldr	r0, [pc, #8]	; (8014dc8 <TIM3_IRQHandler+0x10>)
 8014dbe:	f00a f92f 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8014dc2:	bf00      	nop
 8014dc4:	bd80      	pop	{r7, pc}
 8014dc6:	bf00      	nop
 8014dc8:	24000d14 	.word	0x24000d14

08014dcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014dd0:	4802      	ldr	r0, [pc, #8]	; (8014ddc <TIM4_IRQHandler+0x10>)
 8014dd2:	f00a f925 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014dd6:	bf00      	nop
 8014dd8:	bd80      	pop	{r7, pc}
 8014dda:	bf00      	nop
 8014ddc:	24000d60 	.word	0x24000d60

08014de0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8014de0:	b580      	push	{r7, lr}
 8014de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014de4:	4803      	ldr	r0, [pc, #12]	; (8014df4 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8014de6:	f00a f91b 	bl	801f020 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8014dea:	4803      	ldr	r0, [pc, #12]	; (8014df8 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8014dec:	f00a f918 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8014df0:	bf00      	nop
 8014df2:	bd80      	pop	{r7, pc}
 8014df4:	24000e90 	.word	0x24000e90
 8014df8:	24000f28 	.word	0x24000f28

08014dfc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8014dfc:	b580      	push	{r7, lr}
 8014dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014e00:	4803      	ldr	r0, [pc, #12]	; (8014e10 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8014e02:	f00a f90d 	bl	801f020 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8014e06:	4803      	ldr	r0, [pc, #12]	; (8014e14 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8014e08:	f00a f90a 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8014e0c:	bf00      	nop
 8014e0e:	bd80      	pop	{r7, pc}
 8014e10:	24000e90 	.word	0x24000e90
 8014e14:	24000f74 	.word	0x24000f74

08014e18 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8014e18:	b580      	push	{r7, lr}
 8014e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014e1c:	4802      	ldr	r0, [pc, #8]	; (8014e28 <TIM8_CC_IRQHandler+0x10>)
 8014e1e:	f00a f8ff 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8014e22:	bf00      	nop
 8014e24:	bd80      	pop	{r7, pc}
 8014e26:	bf00      	nop
 8014e28:	24000e90 	.word	0x24000e90

08014e2c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8014e30:	4802      	ldr	r0, [pc, #8]	; (8014e3c <TIM5_IRQHandler+0x10>)
 8014e32:	f00a f8f5 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014e36:	bf00      	nop
 8014e38:	bd80      	pop	{r7, pc}
 8014e3a:	bf00      	nop
 8014e3c:	24000dac 	.word	0x24000dac

08014e40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014e40:	b580      	push	{r7, lr}
 8014e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014e44:	4802      	ldr	r0, [pc, #8]	; (8014e50 <TIM6_DAC_IRQHandler+0x10>)
 8014e46:	f00a f8eb 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8014e4a:	bf00      	nop
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	24000df8 	.word	0x24000df8

08014e54 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8014e58:	4802      	ldr	r0, [pc, #8]	; (8014e64 <TIM7_IRQHandler+0x10>)
 8014e5a:	f00a f8e1 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014e5e:	bf00      	nop
 8014e60:	bd80      	pop	{r7, pc}
 8014e62:	bf00      	nop
 8014e64:	24000e44 	.word	0x24000e44

08014e68 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8014e6c:	4802      	ldr	r0, [pc, #8]	; (8014e78 <TIM15_IRQHandler+0x10>)
 8014e6e:	f00a f8d7 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8014e72:	bf00      	nop
 8014e74:	bd80      	pop	{r7, pc}
 8014e76:	bf00      	nop
 8014e78:	24000fc0 	.word	0x24000fc0

08014e7c <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8014e80:	4802      	ldr	r0, [pc, #8]	; (8014e8c <TIM16_IRQHandler+0x10>)
 8014e82:	f00a f8cd 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8014e86:	bf00      	nop
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	2400100c 	.word	0x2400100c

08014e90 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8014e94:	4802      	ldr	r0, [pc, #8]	; (8014ea0 <TIM17_IRQHandler+0x10>)
 8014e96:	f00a f8c3 	bl	801f020 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8014e9a:	bf00      	nop
 8014e9c:	bd80      	pop	{r7, pc}
 8014e9e:	bf00      	nop
 8014ea0:	24001058 	.word	0x24001058

08014ea4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	af00      	add	r7, sp, #0
  return 1;
 8014ea8:	2301      	movs	r3, #1
}
 8014eaa:	4618      	mov	r0, r3
 8014eac:	46bd      	mov	sp, r7
 8014eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eb2:	4770      	bx	lr

08014eb4 <_kill>:

int _kill(int pid, int sig)
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8014ebe:	f00b fc9f 	bl	8020800 <__errno>
 8014ec2:	4603      	mov	r3, r0
 8014ec4:	2216      	movs	r2, #22
 8014ec6:	601a      	str	r2, [r3, #0]
  return -1;
 8014ec8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014ecc:	4618      	mov	r0, r3
 8014ece:	3708      	adds	r7, #8
 8014ed0:	46bd      	mov	sp, r7
 8014ed2:	bd80      	pop	{r7, pc}

08014ed4 <_exit>:

void _exit (int status)
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b082      	sub	sp, #8
 8014ed8:	af00      	add	r7, sp, #0
 8014eda:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8014edc:	f04f 31ff 	mov.w	r1, #4294967295
 8014ee0:	6878      	ldr	r0, [r7, #4]
 8014ee2:	f7ff ffe7 	bl	8014eb4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8014ee6:	e7fe      	b.n	8014ee6 <_exit+0x12>

08014ee8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b086      	sub	sp, #24
 8014eec:	af00      	add	r7, sp, #0
 8014eee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014ef0:	4a14      	ldr	r2, [pc, #80]	; (8014f44 <_sbrk+0x5c>)
 8014ef2:	4b15      	ldr	r3, [pc, #84]	; (8014f48 <_sbrk+0x60>)
 8014ef4:	1ad3      	subs	r3, r2, r3
 8014ef6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014ef8:	697b      	ldr	r3, [r7, #20]
 8014efa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8014efc:	4b13      	ldr	r3, [pc, #76]	; (8014f4c <_sbrk+0x64>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d102      	bne.n	8014f0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014f04:	4b11      	ldr	r3, [pc, #68]	; (8014f4c <_sbrk+0x64>)
 8014f06:	4a12      	ldr	r2, [pc, #72]	; (8014f50 <_sbrk+0x68>)
 8014f08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8014f0a:	4b10      	ldr	r3, [pc, #64]	; (8014f4c <_sbrk+0x64>)
 8014f0c:	681a      	ldr	r2, [r3, #0]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	4413      	add	r3, r2
 8014f12:	693a      	ldr	r2, [r7, #16]
 8014f14:	429a      	cmp	r2, r3
 8014f16:	d207      	bcs.n	8014f28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8014f18:	f00b fc72 	bl	8020800 <__errno>
 8014f1c:	4603      	mov	r3, r0
 8014f1e:	220c      	movs	r2, #12
 8014f20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8014f22:	f04f 33ff 	mov.w	r3, #4294967295
 8014f26:	e009      	b.n	8014f3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8014f28:	4b08      	ldr	r3, [pc, #32]	; (8014f4c <_sbrk+0x64>)
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8014f2e:	4b07      	ldr	r3, [pc, #28]	; (8014f4c <_sbrk+0x64>)
 8014f30:	681a      	ldr	r2, [r3, #0]
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	4413      	add	r3, r2
 8014f36:	4a05      	ldr	r2, [pc, #20]	; (8014f4c <_sbrk+0x64>)
 8014f38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014f3a:	68fb      	ldr	r3, [r7, #12]
}
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	3718      	adds	r7, #24
 8014f40:	46bd      	mov	sp, r7
 8014f42:	bd80      	pop	{r7, pc}
 8014f44:	24050000 	.word	0x24050000
 8014f48:	00000400 	.word	0x00000400
 8014f4c:	2400113c 	.word	0x2400113c
 8014f50:	24001158 	.word	0x24001158

08014f54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8014f54:	b480      	push	{r7}
 8014f56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8014f58:	4b32      	ldr	r3, [pc, #200]	; (8015024 <SystemInit+0xd0>)
 8014f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014f5e:	4a31      	ldr	r2, [pc, #196]	; (8015024 <SystemInit+0xd0>)
 8014f60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014f64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8014f68:	4b2f      	ldr	r3, [pc, #188]	; (8015028 <SystemInit+0xd4>)
 8014f6a:	681b      	ldr	r3, [r3, #0]
 8014f6c:	f003 030f 	and.w	r3, r3, #15
 8014f70:	2b06      	cmp	r3, #6
 8014f72:	d807      	bhi.n	8014f84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8014f74:	4b2c      	ldr	r3, [pc, #176]	; (8015028 <SystemInit+0xd4>)
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	f023 030f 	bic.w	r3, r3, #15
 8014f7c:	4a2a      	ldr	r2, [pc, #168]	; (8015028 <SystemInit+0xd4>)
 8014f7e:	f043 0307 	orr.w	r3, r3, #7
 8014f82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8014f84:	4b29      	ldr	r3, [pc, #164]	; (801502c <SystemInit+0xd8>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	4a28      	ldr	r2, [pc, #160]	; (801502c <SystemInit+0xd8>)
 8014f8a:	f043 0301 	orr.w	r3, r3, #1
 8014f8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8014f90:	4b26      	ldr	r3, [pc, #152]	; (801502c <SystemInit+0xd8>)
 8014f92:	2200      	movs	r2, #0
 8014f94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8014f96:	4b25      	ldr	r3, [pc, #148]	; (801502c <SystemInit+0xd8>)
 8014f98:	681a      	ldr	r2, [r3, #0]
 8014f9a:	4924      	ldr	r1, [pc, #144]	; (801502c <SystemInit+0xd8>)
 8014f9c:	4b24      	ldr	r3, [pc, #144]	; (8015030 <SystemInit+0xdc>)
 8014f9e:	4013      	ands	r3, r2
 8014fa0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8014fa2:	4b21      	ldr	r3, [pc, #132]	; (8015028 <SystemInit+0xd4>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	f003 0308 	and.w	r3, r3, #8
 8014faa:	2b00      	cmp	r3, #0
 8014fac:	d007      	beq.n	8014fbe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8014fae:	4b1e      	ldr	r3, [pc, #120]	; (8015028 <SystemInit+0xd4>)
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	f023 030f 	bic.w	r3, r3, #15
 8014fb6:	4a1c      	ldr	r2, [pc, #112]	; (8015028 <SystemInit+0xd4>)
 8014fb8:	f043 0307 	orr.w	r3, r3, #7
 8014fbc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8014fbe:	4b1b      	ldr	r3, [pc, #108]	; (801502c <SystemInit+0xd8>)
 8014fc0:	2200      	movs	r2, #0
 8014fc2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8014fc4:	4b19      	ldr	r3, [pc, #100]	; (801502c <SystemInit+0xd8>)
 8014fc6:	2200      	movs	r2, #0
 8014fc8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8014fca:	4b18      	ldr	r3, [pc, #96]	; (801502c <SystemInit+0xd8>)
 8014fcc:	2200      	movs	r2, #0
 8014fce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8014fd0:	4b16      	ldr	r3, [pc, #88]	; (801502c <SystemInit+0xd8>)
 8014fd2:	4a18      	ldr	r2, [pc, #96]	; (8015034 <SystemInit+0xe0>)
 8014fd4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8014fd6:	4b15      	ldr	r3, [pc, #84]	; (801502c <SystemInit+0xd8>)
 8014fd8:	4a17      	ldr	r2, [pc, #92]	; (8015038 <SystemInit+0xe4>)
 8014fda:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8014fdc:	4b13      	ldr	r3, [pc, #76]	; (801502c <SystemInit+0xd8>)
 8014fde:	4a17      	ldr	r2, [pc, #92]	; (801503c <SystemInit+0xe8>)
 8014fe0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8014fe2:	4b12      	ldr	r3, [pc, #72]	; (801502c <SystemInit+0xd8>)
 8014fe4:	2200      	movs	r2, #0
 8014fe6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8014fe8:	4b10      	ldr	r3, [pc, #64]	; (801502c <SystemInit+0xd8>)
 8014fea:	4a14      	ldr	r2, [pc, #80]	; (801503c <SystemInit+0xe8>)
 8014fec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8014fee:	4b0f      	ldr	r3, [pc, #60]	; (801502c <SystemInit+0xd8>)
 8014ff0:	2200      	movs	r2, #0
 8014ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8014ff4:	4b0d      	ldr	r3, [pc, #52]	; (801502c <SystemInit+0xd8>)
 8014ff6:	4a11      	ldr	r2, [pc, #68]	; (801503c <SystemInit+0xe8>)
 8014ff8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8014ffa:	4b0c      	ldr	r3, [pc, #48]	; (801502c <SystemInit+0xd8>)
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8015000:	4b0a      	ldr	r3, [pc, #40]	; (801502c <SystemInit+0xd8>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	4a09      	ldr	r2, [pc, #36]	; (801502c <SystemInit+0xd8>)
 8015006:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801500a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 801500c:	4b07      	ldr	r3, [pc, #28]	; (801502c <SystemInit+0xd8>)
 801500e:	2200      	movs	r2, #0
 8015010:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8015012:	4b0b      	ldr	r3, [pc, #44]	; (8015040 <SystemInit+0xec>)
 8015014:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8015018:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 801501a:	bf00      	nop
 801501c:	46bd      	mov	sp, r7
 801501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015022:	4770      	bx	lr
 8015024:	e000ed00 	.word	0xe000ed00
 8015028:	52002000 	.word	0x52002000
 801502c:	58024400 	.word	0x58024400
 8015030:	eaf6ed7f 	.word	0xeaf6ed7f
 8015034:	02020200 	.word	0x02020200
 8015038:	01ff0000 	.word	0x01ff0000
 801503c:	01010280 	.word	0x01010280
 8015040:	52004000 	.word	0x52004000

08015044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8015044:	f8df d034 	ldr.w	sp, [pc, #52]	; 801507c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8015048:	f7ff ff84 	bl	8014f54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 801504c:	480c      	ldr	r0, [pc, #48]	; (8015080 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 801504e:	490d      	ldr	r1, [pc, #52]	; (8015084 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8015050:	4a0d      	ldr	r2, [pc, #52]	; (8015088 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8015052:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8015054:	e002      	b.n	801505c <LoopCopyDataInit>

08015056 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8015056:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015058:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 801505a:	3304      	adds	r3, #4

0801505c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 801505c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 801505e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015060:	d3f9      	bcc.n	8015056 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8015062:	4a0a      	ldr	r2, [pc, #40]	; (801508c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8015064:	4c0a      	ldr	r4, [pc, #40]	; (8015090 <LoopFillZerobss+0x22>)
  movs r3, #0
 8015066:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015068:	e001      	b.n	801506e <LoopFillZerobss>

0801506a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 801506a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 801506c:	3204      	adds	r2, #4

0801506e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 801506e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015070:	d3fb      	bcc.n	801506a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8015072:	f00b fbcb 	bl	802080c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015076:	f7f9 fb46 	bl	800e706 <main>
  bx  lr
 801507a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 801507c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8015080:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8015084:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8015088:	08020e50 	.word	0x08020e50
  ldr r2, =_sbss
 801508c:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 8015090:	24001158 	.word	0x24001158

08015094 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015094:	e7fe      	b.n	8015094 <ADC3_IRQHandler>
	...

08015098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b082      	sub	sp, #8
 801509c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801509e:	2003      	movs	r0, #3
 80150a0:	f002 fa0c 	bl	80174bc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80150a4:	f006 fc3c 	bl	801b920 <HAL_RCC_GetSysClockFreq>
 80150a8:	4602      	mov	r2, r0
 80150aa:	4b15      	ldr	r3, [pc, #84]	; (8015100 <HAL_Init+0x68>)
 80150ac:	699b      	ldr	r3, [r3, #24]
 80150ae:	0a1b      	lsrs	r3, r3, #8
 80150b0:	f003 030f 	and.w	r3, r3, #15
 80150b4:	4913      	ldr	r1, [pc, #76]	; (8015104 <HAL_Init+0x6c>)
 80150b6:	5ccb      	ldrb	r3, [r1, r3]
 80150b8:	f003 031f 	and.w	r3, r3, #31
 80150bc:	fa22 f303 	lsr.w	r3, r2, r3
 80150c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80150c2:	4b0f      	ldr	r3, [pc, #60]	; (8015100 <HAL_Init+0x68>)
 80150c4:	699b      	ldr	r3, [r3, #24]
 80150c6:	f003 030f 	and.w	r3, r3, #15
 80150ca:	4a0e      	ldr	r2, [pc, #56]	; (8015104 <HAL_Init+0x6c>)
 80150cc:	5cd3      	ldrb	r3, [r2, r3]
 80150ce:	f003 031f 	and.w	r3, r3, #31
 80150d2:	687a      	ldr	r2, [r7, #4]
 80150d4:	fa22 f303 	lsr.w	r3, r2, r3
 80150d8:	4a0b      	ldr	r2, [pc, #44]	; (8015108 <HAL_Init+0x70>)
 80150da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80150dc:	4a0b      	ldr	r2, [pc, #44]	; (801510c <HAL_Init+0x74>)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80150e2:	2001      	movs	r0, #1
 80150e4:	f000 f814 	bl	8015110 <HAL_InitTick>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d001      	beq.n	80150f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80150ee:	2301      	movs	r3, #1
 80150f0:	e002      	b.n	80150f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80150f2:	f7ff f943 	bl	801437c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80150f6:	2300      	movs	r3, #0
}
 80150f8:	4618      	mov	r0, r3
 80150fa:	3708      	adds	r7, #8
 80150fc:	46bd      	mov	sp, r7
 80150fe:	bd80      	pop	{r7, pc}
 8015100:	58024400 	.word	0x58024400
 8015104:	08020dc4 	.word	0x08020dc4
 8015108:	24000008 	.word	0x24000008
 801510c:	24000004 	.word	0x24000004

08015110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015110:	b580      	push	{r7, lr}
 8015112:	b082      	sub	sp, #8
 8015114:	af00      	add	r7, sp, #0
 8015116:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8015118:	4b15      	ldr	r3, [pc, #84]	; (8015170 <HAL_InitTick+0x60>)
 801511a:	781b      	ldrb	r3, [r3, #0]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d101      	bne.n	8015124 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8015120:	2301      	movs	r3, #1
 8015122:	e021      	b.n	8015168 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8015124:	4b13      	ldr	r3, [pc, #76]	; (8015174 <HAL_InitTick+0x64>)
 8015126:	681a      	ldr	r2, [r3, #0]
 8015128:	4b11      	ldr	r3, [pc, #68]	; (8015170 <HAL_InitTick+0x60>)
 801512a:	781b      	ldrb	r3, [r3, #0]
 801512c:	4619      	mov	r1, r3
 801512e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015132:	fbb3 f3f1 	udiv	r3, r3, r1
 8015136:	fbb2 f3f3 	udiv	r3, r2, r3
 801513a:	4618      	mov	r0, r3
 801513c:	f002 f9f5 	bl	801752a <HAL_SYSTICK_Config>
 8015140:	4603      	mov	r3, r0
 8015142:	2b00      	cmp	r3, #0
 8015144:	d001      	beq.n	801514a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8015146:	2301      	movs	r3, #1
 8015148:	e00e      	b.n	8015168 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2b0f      	cmp	r3, #15
 801514e:	d80a      	bhi.n	8015166 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015150:	2200      	movs	r2, #0
 8015152:	6879      	ldr	r1, [r7, #4]
 8015154:	f04f 30ff 	mov.w	r0, #4294967295
 8015158:	f002 f9bb 	bl	80174d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 801515c:	4a06      	ldr	r2, [pc, #24]	; (8015178 <HAL_InitTick+0x68>)
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015162:	2300      	movs	r3, #0
 8015164:	e000      	b.n	8015168 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8015166:	2301      	movs	r3, #1
}
 8015168:	4618      	mov	r0, r3
 801516a:	3708      	adds	r7, #8
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	24000010 	.word	0x24000010
 8015174:	24000004 	.word	0x24000004
 8015178:	2400000c 	.word	0x2400000c

0801517c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801517c:	b480      	push	{r7}
 801517e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8015180:	4b06      	ldr	r3, [pc, #24]	; (801519c <HAL_IncTick+0x20>)
 8015182:	781b      	ldrb	r3, [r3, #0]
 8015184:	461a      	mov	r2, r3
 8015186:	4b06      	ldr	r3, [pc, #24]	; (80151a0 <HAL_IncTick+0x24>)
 8015188:	681b      	ldr	r3, [r3, #0]
 801518a:	4413      	add	r3, r2
 801518c:	4a04      	ldr	r2, [pc, #16]	; (80151a0 <HAL_IncTick+0x24>)
 801518e:	6013      	str	r3, [r2, #0]
}
 8015190:	bf00      	nop
 8015192:	46bd      	mov	sp, r7
 8015194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015198:	4770      	bx	lr
 801519a:	bf00      	nop
 801519c:	24000010 	.word	0x24000010
 80151a0:	24001140 	.word	0x24001140

080151a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80151a4:	b480      	push	{r7}
 80151a6:	af00      	add	r7, sp, #0
  return uwTick;
 80151a8:	4b03      	ldr	r3, [pc, #12]	; (80151b8 <HAL_GetTick+0x14>)
 80151aa:	681b      	ldr	r3, [r3, #0]
}
 80151ac:	4618      	mov	r0, r3
 80151ae:	46bd      	mov	sp, r7
 80151b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b4:	4770      	bx	lr
 80151b6:	bf00      	nop
 80151b8:	24001140 	.word	0x24001140

080151bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80151bc:	b480      	push	{r7}
 80151be:	b083      	sub	sp, #12
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
 80151c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	689b      	ldr	r3, [r3, #8]
 80151ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80151ce:	683b      	ldr	r3, [r7, #0]
 80151d0:	431a      	orrs	r2, r3
 80151d2:	687b      	ldr	r3, [r7, #4]
 80151d4:	609a      	str	r2, [r3, #8]
}
 80151d6:	bf00      	nop
 80151d8:	370c      	adds	r7, #12
 80151da:	46bd      	mov	sp, r7
 80151dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151e0:	4770      	bx	lr

080151e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80151e2:	b480      	push	{r7}
 80151e4:	b083      	sub	sp, #12
 80151e6:	af00      	add	r7, sp, #0
 80151e8:	6078      	str	r0, [r7, #4]
 80151ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	689b      	ldr	r3, [r3, #8]
 80151f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80151f4:	683b      	ldr	r3, [r7, #0]
 80151f6:	431a      	orrs	r2, r3
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	609a      	str	r2, [r3, #8]
}
 80151fc:	bf00      	nop
 80151fe:	370c      	adds	r7, #12
 8015200:	46bd      	mov	sp, r7
 8015202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015206:	4770      	bx	lr

08015208 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015208:	b480      	push	{r7}
 801520a:	b083      	sub	sp, #12
 801520c:	af00      	add	r7, sp, #0
 801520e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	689b      	ldr	r3, [r3, #8]
 8015214:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8015218:	4618      	mov	r0, r3
 801521a:	370c      	adds	r7, #12
 801521c:	46bd      	mov	sp, r7
 801521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015222:	4770      	bx	lr

08015224 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8015224:	b480      	push	{r7}
 8015226:	b087      	sub	sp, #28
 8015228:	af00      	add	r7, sp, #0
 801522a:	60f8      	str	r0, [r7, #12]
 801522c:	60b9      	str	r1, [r7, #8]
 801522e:	607a      	str	r2, [r7, #4]
 8015230:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015232:	68fb      	ldr	r3, [r7, #12]
 8015234:	3360      	adds	r3, #96	; 0x60
 8015236:	461a      	mov	r2, r3
 8015238:	68bb      	ldr	r3, [r7, #8]
 801523a:	009b      	lsls	r3, r3, #2
 801523c:	4413      	add	r3, r2
 801523e:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	4a10      	ldr	r2, [pc, #64]	; (8015284 <LL_ADC_SetOffset+0x60>)
 8015244:	4293      	cmp	r3, r2
 8015246:	d10b      	bne.n	8015260 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8015248:	697b      	ldr	r3, [r7, #20]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8015252:	683b      	ldr	r3, [r7, #0]
 8015254:	4313      	orrs	r3, r2
 8015256:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801525a:	697b      	ldr	r3, [r7, #20]
 801525c:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 801525e:	e00b      	b.n	8015278 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 8015260:	697b      	ldr	r3, [r7, #20]
 8015262:	681b      	ldr	r3, [r3, #0]
 8015264:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 801526e:	683b      	ldr	r3, [r7, #0]
 8015270:	430b      	orrs	r3, r1
 8015272:	431a      	orrs	r2, r3
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	601a      	str	r2, [r3, #0]
}
 8015278:	bf00      	nop
 801527a:	371c      	adds	r7, #28
 801527c:	46bd      	mov	sp, r7
 801527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015282:	4770      	bx	lr
 8015284:	58026000 	.word	0x58026000

08015288 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8015288:	b480      	push	{r7}
 801528a:	b085      	sub	sp, #20
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
 8015290:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	3360      	adds	r3, #96	; 0x60
 8015296:	461a      	mov	r2, r3
 8015298:	683b      	ldr	r3, [r7, #0]
 801529a:	009b      	lsls	r3, r3, #2
 801529c:	4413      	add	r3, r2
 801529e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	681b      	ldr	r3, [r3, #0]
 80152a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80152a8:	4618      	mov	r0, r3
 80152aa:	3714      	adds	r7, #20
 80152ac:	46bd      	mov	sp, r7
 80152ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152b2:	4770      	bx	lr

080152b4 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80152b4:	b480      	push	{r7}
 80152b6:	b085      	sub	sp, #20
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	60f8      	str	r0, [r7, #12]
 80152bc:	60b9      	str	r1, [r7, #8]
 80152be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	691b      	ldr	r3, [r3, #16]
 80152c4:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80152c8:	68bb      	ldr	r3, [r7, #8]
 80152ca:	f003 031f 	and.w	r3, r3, #31
 80152ce:	6879      	ldr	r1, [r7, #4]
 80152d0:	fa01 f303 	lsl.w	r3, r1, r3
 80152d4:	431a      	orrs	r2, r3
 80152d6:	68fb      	ldr	r3, [r7, #12]
 80152d8:	611a      	str	r2, [r3, #16]
}
 80152da:	bf00      	nop
 80152dc:	3714      	adds	r7, #20
 80152de:	46bd      	mov	sp, r7
 80152e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e4:	4770      	bx	lr
	...

080152e8 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80152e8:	b480      	push	{r7}
 80152ea:	b087      	sub	sp, #28
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	60f8      	str	r0, [r7, #12]
 80152f0:	60b9      	str	r1, [r7, #8]
 80152f2:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80152f4:	68fb      	ldr	r3, [r7, #12]
 80152f6:	4a0c      	ldr	r2, [pc, #48]	; (8015328 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80152f8:	4293      	cmp	r3, r2
 80152fa:	d00e      	beq.n	801531a <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	3360      	adds	r3, #96	; 0x60
 8015300:	461a      	mov	r2, r3
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	009b      	lsls	r3, r3, #2
 8015306:	4413      	add	r3, r2
 8015308:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 801530a:	697b      	ldr	r3, [r7, #20]
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	431a      	orrs	r2, r3
 8015316:	697b      	ldr	r3, [r7, #20]
 8015318:	601a      	str	r2, [r3, #0]
  }
}
 801531a:	bf00      	nop
 801531c:	371c      	adds	r7, #28
 801531e:	46bd      	mov	sp, r7
 8015320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015324:	4770      	bx	lr
 8015326:	bf00      	nop
 8015328:	58026000 	.word	0x58026000

0801532c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 801532c:	b480      	push	{r7}
 801532e:	b087      	sub	sp, #28
 8015330:	af00      	add	r7, sp, #0
 8015332:	60f8      	str	r0, [r7, #12]
 8015334:	60b9      	str	r1, [r7, #8]
 8015336:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8015338:	68fb      	ldr	r3, [r7, #12]
 801533a:	4a0c      	ldr	r2, [pc, #48]	; (801536c <LL_ADC_SetOffsetSaturation+0x40>)
 801533c:	4293      	cmp	r3, r2
 801533e:	d10e      	bne.n	801535e <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	3360      	adds	r3, #96	; 0x60
 8015344:	461a      	mov	r2, r3
 8015346:	68bb      	ldr	r3, [r7, #8]
 8015348:	009b      	lsls	r3, r3, #2
 801534a:	4413      	add	r3, r2
 801534c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 801534e:	697b      	ldr	r3, [r7, #20]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	431a      	orrs	r2, r3
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 801535e:	bf00      	nop
 8015360:	371c      	adds	r7, #28
 8015362:	46bd      	mov	sp, r7
 8015364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015368:	4770      	bx	lr
 801536a:	bf00      	nop
 801536c:	58026000 	.word	0x58026000

08015370 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8015370:	b480      	push	{r7}
 8015372:	b087      	sub	sp, #28
 8015374:	af00      	add	r7, sp, #0
 8015376:	60f8      	str	r0, [r7, #12]
 8015378:	60b9      	str	r1, [r7, #8]
 801537a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	4a0c      	ldr	r2, [pc, #48]	; (80153b0 <LL_ADC_SetOffsetSign+0x40>)
 8015380:	4293      	cmp	r3, r2
 8015382:	d10e      	bne.n	80153a2 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	3360      	adds	r3, #96	; 0x60
 8015388:	461a      	mov	r2, r3
 801538a:	68bb      	ldr	r3, [r7, #8]
 801538c:	009b      	lsls	r3, r3, #2
 801538e:	4413      	add	r3, r2
 8015390:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 8015392:	697b      	ldr	r3, [r7, #20]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	431a      	orrs	r2, r3
 801539e:	697b      	ldr	r3, [r7, #20]
 80153a0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80153a2:	bf00      	nop
 80153a4:	371c      	adds	r7, #28
 80153a6:	46bd      	mov	sp, r7
 80153a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ac:	4770      	bx	lr
 80153ae:	bf00      	nop
 80153b0:	58026000 	.word	0x58026000

080153b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80153b4:	b480      	push	{r7}
 80153b6:	b087      	sub	sp, #28
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	60f8      	str	r0, [r7, #12]
 80153bc:	60b9      	str	r1, [r7, #8]
 80153be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	3360      	adds	r3, #96	; 0x60
 80153c4:	461a      	mov	r2, r3
 80153c6:	68bb      	ldr	r3, [r7, #8]
 80153c8:	009b      	lsls	r3, r3, #2
 80153ca:	4413      	add	r3, r2
 80153cc:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	4a0c      	ldr	r2, [pc, #48]	; (8015404 <LL_ADC_SetOffsetState+0x50>)
 80153d2:	4293      	cmp	r3, r2
 80153d4:	d108      	bne.n	80153e8 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80153d6:	697b      	ldr	r3, [r7, #20]
 80153d8:	681b      	ldr	r3, [r3, #0]
 80153da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	431a      	orrs	r2, r3
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80153e6:	e007      	b.n	80153f8 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	431a      	orrs	r2, r3
 80153f4:	697b      	ldr	r3, [r7, #20]
 80153f6:	601a      	str	r2, [r3, #0]
}
 80153f8:	bf00      	nop
 80153fa:	371c      	adds	r7, #28
 80153fc:	46bd      	mov	sp, r7
 80153fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015402:	4770      	bx	lr
 8015404:	58026000 	.word	0x58026000

08015408 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8015408:	b480      	push	{r7}
 801540a:	b083      	sub	sp, #12
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8015410:	687b      	ldr	r3, [r7, #4]
 8015412:	68db      	ldr	r3, [r3, #12]
 8015414:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8015418:	2b00      	cmp	r3, #0
 801541a:	d101      	bne.n	8015420 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 801541c:	2301      	movs	r3, #1
 801541e:	e000      	b.n	8015422 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8015420:	2300      	movs	r3, #0
}
 8015422:	4618      	mov	r0, r3
 8015424:	370c      	adds	r7, #12
 8015426:	46bd      	mov	sp, r7
 8015428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801542c:	4770      	bx	lr

0801542e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801542e:	b480      	push	{r7}
 8015430:	b087      	sub	sp, #28
 8015432:	af00      	add	r7, sp, #0
 8015434:	60f8      	str	r0, [r7, #12]
 8015436:	60b9      	str	r1, [r7, #8]
 8015438:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	3330      	adds	r3, #48	; 0x30
 801543e:	461a      	mov	r2, r3
 8015440:	68bb      	ldr	r3, [r7, #8]
 8015442:	0a1b      	lsrs	r3, r3, #8
 8015444:	009b      	lsls	r3, r3, #2
 8015446:	f003 030c 	and.w	r3, r3, #12
 801544a:	4413      	add	r3, r2
 801544c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	681a      	ldr	r2, [r3, #0]
 8015452:	68bb      	ldr	r3, [r7, #8]
 8015454:	f003 031f 	and.w	r3, r3, #31
 8015458:	211f      	movs	r1, #31
 801545a:	fa01 f303 	lsl.w	r3, r1, r3
 801545e:	43db      	mvns	r3, r3
 8015460:	401a      	ands	r2, r3
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	0e9b      	lsrs	r3, r3, #26
 8015466:	f003 011f 	and.w	r1, r3, #31
 801546a:	68bb      	ldr	r3, [r7, #8]
 801546c:	f003 031f 	and.w	r3, r3, #31
 8015470:	fa01 f303 	lsl.w	r3, r1, r3
 8015474:	431a      	orrs	r2, r3
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 801547a:	bf00      	nop
 801547c:	371c      	adds	r7, #28
 801547e:	46bd      	mov	sp, r7
 8015480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015484:	4770      	bx	lr

08015486 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8015486:	b480      	push	{r7}
 8015488:	b083      	sub	sp, #12
 801548a:	af00      	add	r7, sp, #0
 801548c:	6078      	str	r0, [r7, #4]
 801548e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	f023 0203 	bic.w	r2, r3, #3
 8015498:	683b      	ldr	r3, [r7, #0]
 801549a:	431a      	orrs	r2, r3
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	60da      	str	r2, [r3, #12]
}
 80154a0:	bf00      	nop
 80154a2:	370c      	adds	r7, #12
 80154a4:	46bd      	mov	sp, r7
 80154a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154aa:	4770      	bx	lr

080154ac <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 80154ac:	b480      	push	{r7}
 80154ae:	b083      	sub	sp, #12
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	68db      	ldr	r3, [r3, #12]
 80154b8:	f043 0201 	orr.w	r2, r3, #1
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	60da      	str	r2, [r3, #12]
}
 80154c0:	bf00      	nop
 80154c2:	370c      	adds	r7, #12
 80154c4:	46bd      	mov	sp, r7
 80154c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154ca:	4770      	bx	lr

080154cc <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80154cc:	b480      	push	{r7}
 80154ce:	b083      	sub	sp, #12
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	4a08      	ldr	r2, [pc, #32]	; (80154fc <LL_ADC_REG_SetDMATransferMode+0x30>)
 80154da:	4293      	cmp	r3, r2
 80154dc:	d107      	bne.n	80154ee <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80154de:	687b      	ldr	r3, [r7, #4]
 80154e0:	68db      	ldr	r3, [r3, #12]
 80154e2:	f023 0203 	bic.w	r2, r3, #3
 80154e6:	683b      	ldr	r3, [r7, #0]
 80154e8:	431a      	orrs	r2, r3
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	60da      	str	r2, [r3, #12]
  }
}
 80154ee:	bf00      	nop
 80154f0:	370c      	adds	r7, #12
 80154f2:	46bd      	mov	sp, r7
 80154f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f8:	4770      	bx	lr
 80154fa:	bf00      	nop
 80154fc:	58026000 	.word	0x58026000

08015500 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801550c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8015510:	2b00      	cmp	r3, #0
 8015512:	d101      	bne.n	8015518 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8015514:	2301      	movs	r3, #1
 8015516:	e000      	b.n	801551a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8015518:	2300      	movs	r3, #0
}
 801551a:	4618      	mov	r0, r3
 801551c:	370c      	adds	r7, #12
 801551e:	46bd      	mov	sp, r7
 8015520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015524:	4770      	bx	lr

08015526 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8015526:	b480      	push	{r7}
 8015528:	b087      	sub	sp, #28
 801552a:	af00      	add	r7, sp, #0
 801552c:	60f8      	str	r0, [r7, #12]
 801552e:	60b9      	str	r1, [r7, #8]
 8015530:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8015532:	68fb      	ldr	r3, [r7, #12]
 8015534:	3314      	adds	r3, #20
 8015536:	461a      	mov	r2, r3
 8015538:	68bb      	ldr	r3, [r7, #8]
 801553a:	0e5b      	lsrs	r3, r3, #25
 801553c:	009b      	lsls	r3, r3, #2
 801553e:	f003 0304 	and.w	r3, r3, #4
 8015542:	4413      	add	r3, r2
 8015544:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8015546:	697b      	ldr	r3, [r7, #20]
 8015548:	681a      	ldr	r2, [r3, #0]
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	0d1b      	lsrs	r3, r3, #20
 801554e:	f003 031f 	and.w	r3, r3, #31
 8015552:	2107      	movs	r1, #7
 8015554:	fa01 f303 	lsl.w	r3, r1, r3
 8015558:	43db      	mvns	r3, r3
 801555a:	401a      	ands	r2, r3
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	0d1b      	lsrs	r3, r3, #20
 8015560:	f003 031f 	and.w	r3, r3, #31
 8015564:	6879      	ldr	r1, [r7, #4]
 8015566:	fa01 f303 	lsl.w	r3, r1, r3
 801556a:	431a      	orrs	r2, r3
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8015570:	bf00      	nop
 8015572:	371c      	adds	r7, #28
 8015574:	46bd      	mov	sp, r7
 8015576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801557a:	4770      	bx	lr

0801557c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 801557c:	b480      	push	{r7}
 801557e:	b085      	sub	sp, #20
 8015580:	af00      	add	r7, sp, #0
 8015582:	60f8      	str	r0, [r7, #12]
 8015584:	60b9      	str	r1, [r7, #8]
 8015586:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	4a1a      	ldr	r2, [pc, #104]	; (80155f4 <LL_ADC_SetChannelSingleDiff+0x78>)
 801558c:	4293      	cmp	r3, r2
 801558e:	d115      	bne.n	80155bc <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8015596:	68bb      	ldr	r3, [r7, #8]
 8015598:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801559c:	43db      	mvns	r3, r3
 801559e:	401a      	ands	r2, r3
 80155a0:	687b      	ldr	r3, [r7, #4]
 80155a2:	f003 0318 	and.w	r3, r3, #24
 80155a6:	4914      	ldr	r1, [pc, #80]	; (80155f8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80155a8:	40d9      	lsrs	r1, r3
 80155aa:	68bb      	ldr	r3, [r7, #8]
 80155ac:	400b      	ands	r3, r1
 80155ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155b2:	431a      	orrs	r2, r3
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80155ba:	e014      	b.n	80155e6 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80155c2:	68bb      	ldr	r3, [r7, #8]
 80155c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155c8:	43db      	mvns	r3, r3
 80155ca:	401a      	ands	r2, r3
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f003 0318 	and.w	r3, r3, #24
 80155d2:	4909      	ldr	r1, [pc, #36]	; (80155f8 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80155d4:	40d9      	lsrs	r1, r3
 80155d6:	68bb      	ldr	r3, [r7, #8]
 80155d8:	400b      	ands	r3, r1
 80155da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80155de:	431a      	orrs	r2, r3
 80155e0:	68fb      	ldr	r3, [r7, #12]
 80155e2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80155e6:	bf00      	nop
 80155e8:	3714      	adds	r7, #20
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop
 80155f4:	58026000 	.word	0x58026000
 80155f8:	000fffff 	.word	0x000fffff

080155fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80155fc:	b480      	push	{r7}
 80155fe:	b083      	sub	sp, #12
 8015600:	af00      	add	r7, sp, #0
 8015602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	689b      	ldr	r3, [r3, #8]
 8015608:	f003 031f 	and.w	r3, r3, #31
}
 801560c:	4618      	mov	r0, r3
 801560e:	370c      	adds	r7, #12
 8015610:	46bd      	mov	sp, r7
 8015612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015616:	4770      	bx	lr

08015618 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015618:	b480      	push	{r7}
 801561a:	b083      	sub	sp, #12
 801561c:	af00      	add	r7, sp, #0
 801561e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	689b      	ldr	r3, [r3, #8]
 8015624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8015628:	4618      	mov	r0, r3
 801562a:	370c      	adds	r7, #12
 801562c:	46bd      	mov	sp, r7
 801562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015632:	4770      	bx	lr

08015634 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8015634:	b480      	push	{r7}
 8015636:	b083      	sub	sp, #12
 8015638:	af00      	add	r7, sp, #0
 801563a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	689a      	ldr	r2, [r3, #8]
 8015640:	4b04      	ldr	r3, [pc, #16]	; (8015654 <LL_ADC_DisableDeepPowerDown+0x20>)
 8015642:	4013      	ands	r3, r2
 8015644:	687a      	ldr	r2, [r7, #4]
 8015646:	6093      	str	r3, [r2, #8]
}
 8015648:	bf00      	nop
 801564a:	370c      	adds	r7, #12
 801564c:	46bd      	mov	sp, r7
 801564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015652:	4770      	bx	lr
 8015654:	5fffffc0 	.word	0x5fffffc0

08015658 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8015658:	b480      	push	{r7}
 801565a:	b083      	sub	sp, #12
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	689b      	ldr	r3, [r3, #8]
 8015664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801566c:	d101      	bne.n	8015672 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801566e:	2301      	movs	r3, #1
 8015670:	e000      	b.n	8015674 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8015672:	2300      	movs	r3, #0
}
 8015674:	4618      	mov	r0, r3
 8015676:	370c      	adds	r7, #12
 8015678:	46bd      	mov	sp, r7
 801567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801567e:	4770      	bx	lr

08015680 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8015680:	b480      	push	{r7}
 8015682:	b083      	sub	sp, #12
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	689a      	ldr	r2, [r3, #8]
 801568c:	4b05      	ldr	r3, [pc, #20]	; (80156a4 <LL_ADC_EnableInternalRegulator+0x24>)
 801568e:	4013      	ands	r3, r2
 8015690:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8015698:	bf00      	nop
 801569a:	370c      	adds	r7, #12
 801569c:	46bd      	mov	sp, r7
 801569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a2:	4770      	bx	lr
 80156a4:	6fffffc0 	.word	0x6fffffc0

080156a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80156a8:	b480      	push	{r7}
 80156aa:	b083      	sub	sp, #12
 80156ac:	af00      	add	r7, sp, #0
 80156ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	689b      	ldr	r3, [r3, #8]
 80156b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80156b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80156bc:	d101      	bne.n	80156c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80156be:	2301      	movs	r3, #1
 80156c0:	e000      	b.n	80156c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80156c2:	2300      	movs	r3, #0
}
 80156c4:	4618      	mov	r0, r3
 80156c6:	370c      	adds	r7, #12
 80156c8:	46bd      	mov	sp, r7
 80156ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ce:	4770      	bx	lr

080156d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b083      	sub	sp, #12
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	689a      	ldr	r2, [r3, #8]
 80156dc:	4b05      	ldr	r3, [pc, #20]	; (80156f4 <LL_ADC_Enable+0x24>)
 80156de:	4013      	ands	r3, r2
 80156e0:	f043 0201 	orr.w	r2, r3, #1
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80156e8:	bf00      	nop
 80156ea:	370c      	adds	r7, #12
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr
 80156f4:	7fffffc0 	.word	0x7fffffc0

080156f8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80156f8:	b480      	push	{r7}
 80156fa:	b083      	sub	sp, #12
 80156fc:	af00      	add	r7, sp, #0
 80156fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	689b      	ldr	r3, [r3, #8]
 8015704:	f003 0301 	and.w	r3, r3, #1
 8015708:	2b01      	cmp	r3, #1
 801570a:	d101      	bne.n	8015710 <LL_ADC_IsEnabled+0x18>
 801570c:	2301      	movs	r3, #1
 801570e:	e000      	b.n	8015712 <LL_ADC_IsEnabled+0x1a>
 8015710:	2300      	movs	r3, #0
}
 8015712:	4618      	mov	r0, r3
 8015714:	370c      	adds	r7, #12
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr
	...

08015720 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8015720:	b480      	push	{r7}
 8015722:	b083      	sub	sp, #12
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	689a      	ldr	r2, [r3, #8]
 801572c:	4b05      	ldr	r3, [pc, #20]	; (8015744 <LL_ADC_REG_StartConversion+0x24>)
 801572e:	4013      	ands	r3, r2
 8015730:	f043 0204 	orr.w	r2, r3, #4
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8015738:	bf00      	nop
 801573a:	370c      	adds	r7, #12
 801573c:	46bd      	mov	sp, r7
 801573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015742:	4770      	bx	lr
 8015744:	7fffffc0 	.word	0x7fffffc0

08015748 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8015748:	b480      	push	{r7}
 801574a:	b083      	sub	sp, #12
 801574c:	af00      	add	r7, sp, #0
 801574e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	689b      	ldr	r3, [r3, #8]
 8015754:	f003 0304 	and.w	r3, r3, #4
 8015758:	2b04      	cmp	r3, #4
 801575a:	d101      	bne.n	8015760 <LL_ADC_REG_IsConversionOngoing+0x18>
 801575c:	2301      	movs	r3, #1
 801575e:	e000      	b.n	8015762 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8015760:	2300      	movs	r3, #0
}
 8015762:	4618      	mov	r0, r3
 8015764:	370c      	adds	r7, #12
 8015766:	46bd      	mov	sp, r7
 8015768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576c:	4770      	bx	lr

0801576e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801576e:	b480      	push	{r7}
 8015770:	b083      	sub	sp, #12
 8015772:	af00      	add	r7, sp, #0
 8015774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8015776:	687b      	ldr	r3, [r7, #4]
 8015778:	689b      	ldr	r3, [r3, #8]
 801577a:	f003 0308 	and.w	r3, r3, #8
 801577e:	2b08      	cmp	r3, #8
 8015780:	d101      	bne.n	8015786 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8015782:	2301      	movs	r3, #1
 8015784:	e000      	b.n	8015788 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8015786:	2300      	movs	r3, #0
}
 8015788:	4618      	mov	r0, r3
 801578a:	370c      	adds	r7, #12
 801578c:	46bd      	mov	sp, r7
 801578e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015792:	4770      	bx	lr

08015794 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8015794:	b590      	push	{r4, r7, lr}
 8015796:	b089      	sub	sp, #36	; 0x24
 8015798:	af00      	add	r7, sp, #0
 801579a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801579c:	2300      	movs	r3, #0
 801579e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80157a0:	2300      	movs	r3, #0
 80157a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2b00      	cmp	r3, #0
 80157a8:	d101      	bne.n	80157ae <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80157aa:	2301      	movs	r3, #1
 80157ac:	e1ee      	b.n	8015b8c <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	691b      	ldr	r3, [r3, #16]
 80157b2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d109      	bne.n	80157d0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80157bc:	6878      	ldr	r0, [r7, #4]
 80157be:	f7fe fe19 	bl	80143f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80157c2:	687b      	ldr	r3, [r7, #4]
 80157c4:	2200      	movs	r2, #0
 80157c6:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2200      	movs	r2, #0
 80157cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	681b      	ldr	r3, [r3, #0]
 80157d4:	4618      	mov	r0, r3
 80157d6:	f7ff ff3f 	bl	8015658 <LL_ADC_IsDeepPowerDownEnabled>
 80157da:	4603      	mov	r3, r0
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d004      	beq.n	80157ea <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80157e0:	687b      	ldr	r3, [r7, #4]
 80157e2:	681b      	ldr	r3, [r3, #0]
 80157e4:	4618      	mov	r0, r3
 80157e6:	f7ff ff25 	bl	8015634 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	4618      	mov	r0, r3
 80157f0:	f7ff ff5a 	bl	80156a8 <LL_ADC_IsInternalRegulatorEnabled>
 80157f4:	4603      	mov	r3, r0
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d114      	bne.n	8015824 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	4618      	mov	r0, r3
 8015800:	f7ff ff3e 	bl	8015680 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8015804:	4b8e      	ldr	r3, [pc, #568]	; (8015a40 <HAL_ADC_Init+0x2ac>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	099b      	lsrs	r3, r3, #6
 801580a:	4a8e      	ldr	r2, [pc, #568]	; (8015a44 <HAL_ADC_Init+0x2b0>)
 801580c:	fba2 2303 	umull	r2, r3, r2, r3
 8015810:	099b      	lsrs	r3, r3, #6
 8015812:	3301      	adds	r3, #1
 8015814:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8015816:	e002      	b.n	801581e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8015818:	68bb      	ldr	r3, [r7, #8]
 801581a:	3b01      	subs	r3, #1
 801581c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801581e:	68bb      	ldr	r3, [r7, #8]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d1f9      	bne.n	8015818 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	4618      	mov	r0, r3
 801582a:	f7ff ff3d 	bl	80156a8 <LL_ADC_IsInternalRegulatorEnabled>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d10d      	bne.n	8015850 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015838:	f043 0210 	orr.w	r2, r3, #16
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015844:	f043 0201 	orr.w	r2, r3, #1
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 801584c:	2301      	movs	r3, #1
 801584e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	681b      	ldr	r3, [r3, #0]
 8015854:	4618      	mov	r0, r3
 8015856:	f7ff ff77 	bl	8015748 <LL_ADC_REG_IsConversionOngoing>
 801585a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015860:	f003 0310 	and.w	r3, r3, #16
 8015864:	2b00      	cmp	r3, #0
 8015866:	f040 8188 	bne.w	8015b7a <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 801586a:	697b      	ldr	r3, [r7, #20]
 801586c:	2b00      	cmp	r3, #0
 801586e:	f040 8184 	bne.w	8015b7a <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015876:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 801587a:	f043 0202 	orr.w	r2, r3, #2
 801587e:	687b      	ldr	r3, [r7, #4]
 8015880:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	681b      	ldr	r3, [r3, #0]
 8015886:	4618      	mov	r0, r3
 8015888:	f7ff ff36 	bl	80156f8 <LL_ADC_IsEnabled>
 801588c:	4603      	mov	r3, r0
 801588e:	2b00      	cmp	r3, #0
 8015890:	d136      	bne.n	8015900 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	4a6c      	ldr	r2, [pc, #432]	; (8015a48 <HAL_ADC_Init+0x2b4>)
 8015898:	4293      	cmp	r3, r2
 801589a:	d004      	beq.n	80158a6 <HAL_ADC_Init+0x112>
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	4a6a      	ldr	r2, [pc, #424]	; (8015a4c <HAL_ADC_Init+0x2b8>)
 80158a2:	4293      	cmp	r3, r2
 80158a4:	d10e      	bne.n	80158c4 <HAL_ADC_Init+0x130>
 80158a6:	4868      	ldr	r0, [pc, #416]	; (8015a48 <HAL_ADC_Init+0x2b4>)
 80158a8:	f7ff ff26 	bl	80156f8 <LL_ADC_IsEnabled>
 80158ac:	4604      	mov	r4, r0
 80158ae:	4867      	ldr	r0, [pc, #412]	; (8015a4c <HAL_ADC_Init+0x2b8>)
 80158b0:	f7ff ff22 	bl	80156f8 <LL_ADC_IsEnabled>
 80158b4:	4603      	mov	r3, r0
 80158b6:	4323      	orrs	r3, r4
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	bf0c      	ite	eq
 80158bc:	2301      	moveq	r3, #1
 80158be:	2300      	movne	r3, #0
 80158c0:	b2db      	uxtb	r3, r3
 80158c2:	e008      	b.n	80158d6 <HAL_ADC_Init+0x142>
 80158c4:	4862      	ldr	r0, [pc, #392]	; (8015a50 <HAL_ADC_Init+0x2bc>)
 80158c6:	f7ff ff17 	bl	80156f8 <LL_ADC_IsEnabled>
 80158ca:	4603      	mov	r3, r0
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	bf0c      	ite	eq
 80158d0:	2301      	moveq	r3, #1
 80158d2:	2300      	movne	r3, #0
 80158d4:	b2db      	uxtb	r3, r3
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d012      	beq.n	8015900 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	681b      	ldr	r3, [r3, #0]
 80158de:	4a5a      	ldr	r2, [pc, #360]	; (8015a48 <HAL_ADC_Init+0x2b4>)
 80158e0:	4293      	cmp	r3, r2
 80158e2:	d004      	beq.n	80158ee <HAL_ADC_Init+0x15a>
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	4a58      	ldr	r2, [pc, #352]	; (8015a4c <HAL_ADC_Init+0x2b8>)
 80158ea:	4293      	cmp	r3, r2
 80158ec:	d101      	bne.n	80158f2 <HAL_ADC_Init+0x15e>
 80158ee:	4a59      	ldr	r2, [pc, #356]	; (8015a54 <HAL_ADC_Init+0x2c0>)
 80158f0:	e000      	b.n	80158f4 <HAL_ADC_Init+0x160>
 80158f2:	4a59      	ldr	r2, [pc, #356]	; (8015a58 <HAL_ADC_Init+0x2c4>)
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	685b      	ldr	r3, [r3, #4]
 80158f8:	4619      	mov	r1, r3
 80158fa:	4610      	mov	r0, r2
 80158fc:	f7ff fc5e 	bl	80151bc <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	4a52      	ldr	r2, [pc, #328]	; (8015a50 <HAL_ADC_Init+0x2bc>)
 8015906:	4293      	cmp	r3, r2
 8015908:	d129      	bne.n	801595e <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	7e5b      	ldrb	r3, [r3, #25]
 801590e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015914:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 801591a:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	689b      	ldr	r3, [r3, #8]
 8015920:	2b08      	cmp	r3, #8
 8015922:	d013      	beq.n	801594c <HAL_ADC_Init+0x1b8>
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	689b      	ldr	r3, [r3, #8]
 8015928:	2b0c      	cmp	r3, #12
 801592a:	d00d      	beq.n	8015948 <HAL_ADC_Init+0x1b4>
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	689b      	ldr	r3, [r3, #8]
 8015930:	2b1c      	cmp	r3, #28
 8015932:	d007      	beq.n	8015944 <HAL_ADC_Init+0x1b0>
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	689b      	ldr	r3, [r3, #8]
 8015938:	2b18      	cmp	r3, #24
 801593a:	d101      	bne.n	8015940 <HAL_ADC_Init+0x1ac>
 801593c:	2318      	movs	r3, #24
 801593e:	e006      	b.n	801594e <HAL_ADC_Init+0x1ba>
 8015940:	2300      	movs	r3, #0
 8015942:	e004      	b.n	801594e <HAL_ADC_Init+0x1ba>
 8015944:	2310      	movs	r3, #16
 8015946:	e002      	b.n	801594e <HAL_ADC_Init+0x1ba>
 8015948:	2308      	movs	r3, #8
 801594a:	e000      	b.n	801594e <HAL_ADC_Init+0x1ba>
 801594c:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 801594e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015950:	687b      	ldr	r3, [r7, #4]
 8015952:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015956:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015958:	4313      	orrs	r3, r2
 801595a:	61bb      	str	r3, [r7, #24]
 801595c:	e00e      	b.n	801597c <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	7e5b      	ldrb	r3, [r3, #25]
 8015962:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015968:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 801596e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015976:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015978:	4313      	orrs	r3, r2
 801597a:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015982:	2b01      	cmp	r3, #1
 8015984:	d106      	bne.n	8015994 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801598a:	3b01      	subs	r3, #1
 801598c:	045b      	lsls	r3, r3, #17
 801598e:	69ba      	ldr	r2, [r7, #24]
 8015990:	4313      	orrs	r3, r2
 8015992:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015998:	2b00      	cmp	r3, #0
 801599a:	d009      	beq.n	80159b0 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80159a0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159a8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80159aa:	69ba      	ldr	r2, [r7, #24]
 80159ac:	4313      	orrs	r3, r2
 80159ae:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	4a26      	ldr	r2, [pc, #152]	; (8015a50 <HAL_ADC_Init+0x2bc>)
 80159b6:	4293      	cmp	r3, r2
 80159b8:	d115      	bne.n	80159e6 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 80159ba:	687b      	ldr	r3, [r7, #4]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	68da      	ldr	r2, [r3, #12]
 80159c0:	4b26      	ldr	r3, [pc, #152]	; (8015a5c <HAL_ADC_Init+0x2c8>)
 80159c2:	4013      	ands	r3, r2
 80159c4:	687a      	ldr	r2, [r7, #4]
 80159c6:	6812      	ldr	r2, [r2, #0]
 80159c8:	69b9      	ldr	r1, [r7, #24]
 80159ca:	430b      	orrs	r3, r1
 80159cc:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	691b      	ldr	r3, [r3, #16]
 80159d4:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	430a      	orrs	r2, r1
 80159e2:	611a      	str	r2, [r3, #16]
 80159e4:	e009      	b.n	80159fa <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	68da      	ldr	r2, [r3, #12]
 80159ec:	4b1c      	ldr	r3, [pc, #112]	; (8015a60 <HAL_ADC_Init+0x2cc>)
 80159ee:	4013      	ands	r3, r2
 80159f0:	687a      	ldr	r2, [r7, #4]
 80159f2:	6812      	ldr	r2, [r2, #0]
 80159f4:	69b9      	ldr	r1, [r7, #24]
 80159f6:	430b      	orrs	r3, r1
 80159f8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	4618      	mov	r0, r3
 8015a00:	f7ff fea2 	bl	8015748 <LL_ADC_REG_IsConversionOngoing>
 8015a04:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7ff feaf 	bl	801576e <LL_ADC_INJ_IsConversionOngoing>
 8015a10:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8015a12:	693b      	ldr	r3, [r7, #16]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	f040 808e 	bne.w	8015b36 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	f040 808a 	bne.w	8015b36 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	681b      	ldr	r3, [r3, #0]
 8015a26:	4a0a      	ldr	r2, [pc, #40]	; (8015a50 <HAL_ADC_Init+0x2bc>)
 8015a28:	4293      	cmp	r3, r2
 8015a2a:	d11b      	bne.n	8015a64 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	7e1b      	ldrb	r3, [r3, #24]
 8015a30:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015a38:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8015a3a:	4313      	orrs	r3, r2
 8015a3c:	61bb      	str	r3, [r7, #24]
 8015a3e:	e018      	b.n	8015a72 <HAL_ADC_Init+0x2de>
 8015a40:	24000004 	.word	0x24000004
 8015a44:	053e2d63 	.word	0x053e2d63
 8015a48:	40022000 	.word	0x40022000
 8015a4c:	40022100 	.word	0x40022100
 8015a50:	58026000 	.word	0x58026000
 8015a54:	40022300 	.word	0x40022300
 8015a58:	58026300 	.word	0x58026300
 8015a5c:	fff04007 	.word	0xfff04007
 8015a60:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	7e1b      	ldrb	r3, [r3, #24]
 8015a68:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8015a6e:	4313      	orrs	r3, r2
 8015a70:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	68da      	ldr	r2, [r3, #12]
 8015a78:	4b46      	ldr	r3, [pc, #280]	; (8015b94 <HAL_ADC_Init+0x400>)
 8015a7a:	4013      	ands	r3, r2
 8015a7c:	687a      	ldr	r2, [r7, #4]
 8015a7e:	6812      	ldr	r2, [r2, #0]
 8015a80:	69b9      	ldr	r1, [r7, #24]
 8015a82:	430b      	orrs	r3, r1
 8015a84:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015a8c:	2b01      	cmp	r3, #1
 8015a8e:	d137      	bne.n	8015b00 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a94:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	4a3f      	ldr	r2, [pc, #252]	; (8015b98 <HAL_ADC_Init+0x404>)
 8015a9c:	4293      	cmp	r3, r2
 8015a9e:	d116      	bne.n	8015ace <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	691a      	ldr	r2, [r3, #16]
 8015aa6:	4b3d      	ldr	r3, [pc, #244]	; (8015b9c <HAL_ADC_Init+0x408>)
 8015aa8:	4013      	ands	r3, r2
 8015aaa:	687a      	ldr	r2, [r7, #4]
 8015aac:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8015aae:	687a      	ldr	r2, [r7, #4]
 8015ab0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015ab2:	4311      	orrs	r1, r2
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015ab8:	4311      	orrs	r1, r2
 8015aba:	687a      	ldr	r2, [r7, #4]
 8015abc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015abe:	430a      	orrs	r2, r1
 8015ac0:	431a      	orrs	r2, r3
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	f042 0201 	orr.w	r2, r2, #1
 8015aca:	611a      	str	r2, [r3, #16]
 8015acc:	e020      	b.n	8015b10 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	681b      	ldr	r3, [r3, #0]
 8015ad2:	691a      	ldr	r2, [r3, #16]
 8015ad4:	4b32      	ldr	r3, [pc, #200]	; (8015ba0 <HAL_ADC_Init+0x40c>)
 8015ad6:	4013      	ands	r3, r2
 8015ad8:	687a      	ldr	r2, [r7, #4]
 8015ada:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8015adc:	3a01      	subs	r2, #1
 8015ade:	0411      	lsls	r1, r2, #16
 8015ae0:	687a      	ldr	r2, [r7, #4]
 8015ae2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015ae4:	4311      	orrs	r1, r2
 8015ae6:	687a      	ldr	r2, [r7, #4]
 8015ae8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015aea:	4311      	orrs	r1, r2
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015af0:	430a      	orrs	r2, r1
 8015af2:	431a      	orrs	r2, r3
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	681b      	ldr	r3, [r3, #0]
 8015af8:	f042 0201 	orr.w	r2, r2, #1
 8015afc:	611a      	str	r2, [r3, #16]
 8015afe:	e007      	b.n	8015b10 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	691a      	ldr	r2, [r3, #16]
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	f022 0201 	bic.w	r2, r2, #1
 8015b0e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8015b10:	687b      	ldr	r3, [r7, #4]
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	691b      	ldr	r3, [r3, #16]
 8015b16:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015b1e:	687b      	ldr	r3, [r7, #4]
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	430a      	orrs	r2, r1
 8015b24:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	4a1b      	ldr	r2, [pc, #108]	; (8015b98 <HAL_ADC_Init+0x404>)
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	d002      	beq.n	8015b36 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8015b30:	6878      	ldr	r0, [r7, #4]
 8015b32:	f001 f9b5 	bl	8016ea0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	691b      	ldr	r3, [r3, #16]
 8015b3a:	2b01      	cmp	r3, #1
 8015b3c:	d10c      	bne.n	8015b58 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b44:	f023 010f 	bic.w	r1, r3, #15
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	69db      	ldr	r3, [r3, #28]
 8015b4c:	1e5a      	subs	r2, r3, #1
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	430a      	orrs	r2, r1
 8015b54:	631a      	str	r2, [r3, #48]	; 0x30
 8015b56:	e007      	b.n	8015b68 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	681b      	ldr	r3, [r3, #0]
 8015b5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	681b      	ldr	r3, [r3, #0]
 8015b62:	f022 020f 	bic.w	r2, r2, #15
 8015b66:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b6c:	f023 0303 	bic.w	r3, r3, #3
 8015b70:	f043 0201 	orr.w	r2, r3, #1
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	661a      	str	r2, [r3, #96]	; 0x60
 8015b78:	e007      	b.n	8015b8a <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015b7e:	f043 0210 	orr.w	r2, r3, #16
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8015b86:	2301      	movs	r3, #1
 8015b88:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8015b8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	3724      	adds	r7, #36	; 0x24
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd90      	pop	{r4, r7, pc}
 8015b94:	ffffbffc 	.word	0xffffbffc
 8015b98:	58026000 	.word	0x58026000
 8015b9c:	fc00f81f 	.word	0xfc00f81f
 8015ba0:	fc00f81e 	.word	0xfc00f81e

08015ba4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8015ba4:	b580      	push	{r7, lr}
 8015ba6:	b086      	sub	sp, #24
 8015ba8:	af00      	add	r7, sp, #0
 8015baa:	60f8      	str	r0, [r7, #12]
 8015bac:	60b9      	str	r1, [r7, #8]
 8015bae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	4a60      	ldr	r2, [pc, #384]	; (8015d38 <HAL_ADC_Start_DMA+0x194>)
 8015bb6:	4293      	cmp	r3, r2
 8015bb8:	d004      	beq.n	8015bc4 <HAL_ADC_Start_DMA+0x20>
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	4a5f      	ldr	r2, [pc, #380]	; (8015d3c <HAL_ADC_Start_DMA+0x198>)
 8015bc0:	4293      	cmp	r3, r2
 8015bc2:	d101      	bne.n	8015bc8 <HAL_ADC_Start_DMA+0x24>
 8015bc4:	4b5e      	ldr	r3, [pc, #376]	; (8015d40 <HAL_ADC_Start_DMA+0x19c>)
 8015bc6:	e000      	b.n	8015bca <HAL_ADC_Start_DMA+0x26>
 8015bc8:	4b5e      	ldr	r3, [pc, #376]	; (8015d44 <HAL_ADC_Start_DMA+0x1a0>)
 8015bca:	4618      	mov	r0, r3
 8015bcc:	f7ff fd16 	bl	80155fc <LL_ADC_GetMultimode>
 8015bd0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015bd2:	68fb      	ldr	r3, [r7, #12]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7ff fdb6 	bl	8015748 <LL_ADC_REG_IsConversionOngoing>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	2b00      	cmp	r3, #0
 8015be0:	f040 80a2 	bne.w	8015d28 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d101      	bne.n	8015bf2 <HAL_ADC_Start_DMA+0x4e>
 8015bee:	2302      	movs	r3, #2
 8015bf0:	e09d      	b.n	8015d2e <HAL_ADC_Start_DMA+0x18a>
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	2201      	movs	r2, #1
 8015bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015bfa:	693b      	ldr	r3, [r7, #16]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d006      	beq.n	8015c0e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015c00:	693b      	ldr	r3, [r7, #16]
 8015c02:	2b05      	cmp	r3, #5
 8015c04:	d003      	beq.n	8015c0e <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015c06:	693b      	ldr	r3, [r7, #16]
 8015c08:	2b09      	cmp	r3, #9
 8015c0a:	f040 8086 	bne.w	8015d1a <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8015c0e:	68f8      	ldr	r0, [r7, #12]
 8015c10:	f001 f828 	bl	8016c64 <ADC_Enable>
 8015c14:	4603      	mov	r3, r0
 8015c16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8015c18:	7dfb      	ldrb	r3, [r7, #23]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d178      	bne.n	8015d10 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8015c1e:	68fb      	ldr	r3, [r7, #12]
 8015c20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015c22:	4b49      	ldr	r3, [pc, #292]	; (8015d48 <HAL_ADC_Start_DMA+0x1a4>)
 8015c24:	4013      	ands	r3, r2
 8015c26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015c2a:	68fb      	ldr	r3, [r7, #12]
 8015c2c:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015c2e:	68fb      	ldr	r3, [r7, #12]
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	4a42      	ldr	r2, [pc, #264]	; (8015d3c <HAL_ADC_Start_DMA+0x198>)
 8015c34:	4293      	cmp	r3, r2
 8015c36:	d002      	beq.n	8015c3e <HAL_ADC_Start_DMA+0x9a>
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	681b      	ldr	r3, [r3, #0]
 8015c3c:	e000      	b.n	8015c40 <HAL_ADC_Start_DMA+0x9c>
 8015c3e:	4b3e      	ldr	r3, [pc, #248]	; (8015d38 <HAL_ADC_Start_DMA+0x194>)
 8015c40:	68fa      	ldr	r2, [r7, #12]
 8015c42:	6812      	ldr	r2, [r2, #0]
 8015c44:	4293      	cmp	r3, r2
 8015c46:	d002      	beq.n	8015c4e <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015c48:	693b      	ldr	r3, [r7, #16]
 8015c4a:	2b00      	cmp	r3, #0
 8015c4c:	d105      	bne.n	8015c5a <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015c52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015c5e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015c62:	2b00      	cmp	r3, #0
 8015c64:	d006      	beq.n	8015c74 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015c6a:	f023 0206 	bic.w	r2, r3, #6
 8015c6e:	68fb      	ldr	r3, [r7, #12]
 8015c70:	665a      	str	r2, [r3, #100]	; 0x64
 8015c72:	e002      	b.n	8015c7a <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	2200      	movs	r2, #0
 8015c78:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c7e:	4a33      	ldr	r2, [pc, #204]	; (8015d4c <HAL_ADC_Start_DMA+0x1a8>)
 8015c80:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015c82:	68fb      	ldr	r3, [r7, #12]
 8015c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c86:	4a32      	ldr	r2, [pc, #200]	; (8015d50 <HAL_ADC_Start_DMA+0x1ac>)
 8015c88:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015c8e:	4a31      	ldr	r2, [pc, #196]	; (8015d54 <HAL_ADC_Start_DMA+0x1b0>)
 8015c90:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015c92:	68fb      	ldr	r3, [r7, #12]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	221c      	movs	r2, #28
 8015c98:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	2200      	movs	r2, #0
 8015c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8015ca2:	68fb      	ldr	r3, [r7, #12]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	685a      	ldr	r2, [r3, #4]
 8015ca8:	68fb      	ldr	r3, [r7, #12]
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	f042 0210 	orr.w	r2, r2, #16
 8015cb0:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	4a28      	ldr	r2, [pc, #160]	; (8015d58 <HAL_ADC_Start_DMA+0x1b4>)
 8015cb8:	4293      	cmp	r3, r2
 8015cba:	d10f      	bne.n	8015cdc <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	681a      	ldr	r2, [r3, #0]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015cc6:	005b      	lsls	r3, r3, #1
 8015cc8:	4619      	mov	r1, r3
 8015cca:	4610      	mov	r0, r2
 8015ccc:	f7ff fbfe 	bl	80154cc <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8015cd0:	68fb      	ldr	r3, [r7, #12]
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	4618      	mov	r0, r3
 8015cd6:	f7ff fbe9 	bl	80154ac <LL_ADC_EnableDMAReq>
 8015cda:	e007      	b.n	8015cec <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	681a      	ldr	r2, [r3, #0]
 8015ce0:	68fb      	ldr	r3, [r7, #12]
 8015ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ce4:	4619      	mov	r1, r3
 8015ce6:	4610      	mov	r0, r2
 8015ce8:	f7ff fbcd 	bl	8015486 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8015cf0:	68fb      	ldr	r3, [r7, #12]
 8015cf2:	681b      	ldr	r3, [r3, #0]
 8015cf4:	3340      	adds	r3, #64	; 0x40
 8015cf6:	4619      	mov	r1, r3
 8015cf8:	68ba      	ldr	r2, [r7, #8]
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f001 ff7c 	bl	8017bf8 <HAL_DMA_Start_IT>
 8015d00:	4603      	mov	r3, r0
 8015d02:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	4618      	mov	r0, r3
 8015d0a:	f7ff fd09 	bl	8015720 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8015d0e:	e00d      	b.n	8015d2c <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015d10:	68fb      	ldr	r3, [r7, #12]
 8015d12:	2200      	movs	r2, #0
 8015d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8015d18:	e008      	b.n	8015d2c <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8015d1a:	2301      	movs	r3, #1
 8015d1c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8015d1e:	68fb      	ldr	r3, [r7, #12]
 8015d20:	2200      	movs	r2, #0
 8015d22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8015d26:	e001      	b.n	8015d2c <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8015d28:	2302      	movs	r3, #2
 8015d2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8015d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8015d2e:	4618      	mov	r0, r3
 8015d30:	3718      	adds	r7, #24
 8015d32:	46bd      	mov	sp, r7
 8015d34:	bd80      	pop	{r7, pc}
 8015d36:	bf00      	nop
 8015d38:	40022000 	.word	0x40022000
 8015d3c:	40022100 	.word	0x40022100
 8015d40:	40022300 	.word	0x40022300
 8015d44:	58026300 	.word	0x58026300
 8015d48:	fffff0fe 	.word	0xfffff0fe
 8015d4c:	08016d79 	.word	0x08016d79
 8015d50:	08016e51 	.word	0x08016e51
 8015d54:	08016e6d 	.word	0x08016e6d
 8015d58:	58026000 	.word	0x58026000

08015d5c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8015d5c:	b580      	push	{r7, lr}
 8015d5e:	b08a      	sub	sp, #40	; 0x28
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8015d64:	2300      	movs	r3, #0
 8015d66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	681b      	ldr	r3, [r3, #0]
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	685b      	ldr	r3, [r3, #4]
 8015d76:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	681b      	ldr	r3, [r3, #0]
 8015d7c:	4a87      	ldr	r2, [pc, #540]	; (8015f9c <HAL_ADC_IRQHandler+0x240>)
 8015d7e:	4293      	cmp	r3, r2
 8015d80:	d004      	beq.n	8015d8c <HAL_ADC_IRQHandler+0x30>
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	4a86      	ldr	r2, [pc, #536]	; (8015fa0 <HAL_ADC_IRQHandler+0x244>)
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	d101      	bne.n	8015d90 <HAL_ADC_IRQHandler+0x34>
 8015d8c:	4b85      	ldr	r3, [pc, #532]	; (8015fa4 <HAL_ADC_IRQHandler+0x248>)
 8015d8e:	e000      	b.n	8015d92 <HAL_ADC_IRQHandler+0x36>
 8015d90:	4b85      	ldr	r3, [pc, #532]	; (8015fa8 <HAL_ADC_IRQHandler+0x24c>)
 8015d92:	4618      	mov	r0, r3
 8015d94:	f7ff fc32 	bl	80155fc <LL_ADC_GetMultimode>
 8015d98:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8015d9a:	69fb      	ldr	r3, [r7, #28]
 8015d9c:	f003 0302 	and.w	r3, r3, #2
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d017      	beq.n	8015dd4 <HAL_ADC_IRQHandler+0x78>
 8015da4:	69bb      	ldr	r3, [r7, #24]
 8015da6:	f003 0302 	and.w	r3, r3, #2
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d012      	beq.n	8015dd4 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015db2:	f003 0310 	and.w	r3, r3, #16
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d105      	bne.n	8015dc6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015dbe:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8015dc6:	6878      	ldr	r0, [r7, #4]
 8015dc8:	f001 f9a6 	bl	8017118 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	2202      	movs	r2, #2
 8015dd2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015dd4:	69fb      	ldr	r3, [r7, #28]
 8015dd6:	f003 0304 	and.w	r3, r3, #4
 8015dda:	2b00      	cmp	r3, #0
 8015ddc:	d004      	beq.n	8015de8 <HAL_ADC_IRQHandler+0x8c>
 8015dde:	69bb      	ldr	r3, [r7, #24]
 8015de0:	f003 0304 	and.w	r3, r3, #4
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d10a      	bne.n	8015dfe <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015de8:	69fb      	ldr	r3, [r7, #28]
 8015dea:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	f000 8083 	beq.w	8015efa <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015df4:	69bb      	ldr	r3, [r7, #24]
 8015df6:	f003 0308 	and.w	r3, r3, #8
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d07d      	beq.n	8015efa <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e02:	f003 0310 	and.w	r3, r3, #16
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d105      	bne.n	8015e16 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e0e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	f7ff faf4 	bl	8015408 <LL_ADC_REG_IsTriggerSourceSWStart>
 8015e20:	4603      	mov	r3, r0
 8015e22:	2b00      	cmp	r3, #0
 8015e24:	d062      	beq.n	8015eec <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	4a5d      	ldr	r2, [pc, #372]	; (8015fa0 <HAL_ADC_IRQHandler+0x244>)
 8015e2c:	4293      	cmp	r3, r2
 8015e2e:	d002      	beq.n	8015e36 <HAL_ADC_IRQHandler+0xda>
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	e000      	b.n	8015e38 <HAL_ADC_IRQHandler+0xdc>
 8015e36:	4b59      	ldr	r3, [pc, #356]	; (8015f9c <HAL_ADC_IRQHandler+0x240>)
 8015e38:	687a      	ldr	r2, [r7, #4]
 8015e3a:	6812      	ldr	r2, [r2, #0]
 8015e3c:	4293      	cmp	r3, r2
 8015e3e:	d008      	beq.n	8015e52 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015e40:	697b      	ldr	r3, [r7, #20]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d005      	beq.n	8015e52 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	2b05      	cmp	r3, #5
 8015e4a:	d002      	beq.n	8015e52 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015e4c:	697b      	ldr	r3, [r7, #20]
 8015e4e:	2b09      	cmp	r3, #9
 8015e50:	d104      	bne.n	8015e5c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	68db      	ldr	r3, [r3, #12]
 8015e58:	623b      	str	r3, [r7, #32]
 8015e5a:	e00c      	b.n	8015e76 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	4a4f      	ldr	r2, [pc, #316]	; (8015fa0 <HAL_ADC_IRQHandler+0x244>)
 8015e62:	4293      	cmp	r3, r2
 8015e64:	d002      	beq.n	8015e6c <HAL_ADC_IRQHandler+0x110>
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	e000      	b.n	8015e6e <HAL_ADC_IRQHandler+0x112>
 8015e6c:	4b4b      	ldr	r3, [pc, #300]	; (8015f9c <HAL_ADC_IRQHandler+0x240>)
 8015e6e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8015e76:	6a3b      	ldr	r3, [r7, #32]
 8015e78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d135      	bne.n	8015eec <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	681b      	ldr	r3, [r3, #0]
 8015e86:	f003 0308 	and.w	r3, r3, #8
 8015e8a:	2b08      	cmp	r3, #8
 8015e8c:	d12e      	bne.n	8015eec <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	4618      	mov	r0, r3
 8015e94:	f7ff fc58 	bl	8015748 <LL_ADC_REG_IsConversionOngoing>
 8015e98:	4603      	mov	r3, r0
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d11a      	bne.n	8015ed4 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	681b      	ldr	r3, [r3, #0]
 8015ea2:	685a      	ldr	r2, [r3, #4]
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	f022 020c 	bic.w	r2, r2, #12
 8015eac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015eb2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015ebe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d112      	bne.n	8015eec <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015eca:	f043 0201 	orr.w	r2, r3, #1
 8015ece:	687b      	ldr	r3, [r7, #4]
 8015ed0:	661a      	str	r2, [r3, #96]	; 0x60
 8015ed2:	e00b      	b.n	8015eec <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015ed8:	f043 0210 	orr.w	r2, r3, #16
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015ee4:	f043 0201 	orr.w	r2, r3, #1
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8015eec:	6878      	ldr	r0, [r7, #4]
 8015eee:	f7f8 f978 	bl	800e1e2 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	220c      	movs	r2, #12
 8015ef8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8015efa:	69fb      	ldr	r3, [r7, #28]
 8015efc:	f003 0320 	and.w	r3, r3, #32
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d004      	beq.n	8015f0e <HAL_ADC_IRQHandler+0x1b2>
 8015f04:	69bb      	ldr	r3, [r7, #24]
 8015f06:	f003 0320 	and.w	r3, r3, #32
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d10b      	bne.n	8015f26 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8015f0e:	69fb      	ldr	r3, [r7, #28]
 8015f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8015f14:	2b00      	cmp	r3, #0
 8015f16:	f000 80a0 	beq.w	801605a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8015f1a:	69bb      	ldr	r3, [r7, #24]
 8015f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	f000 809a 	beq.w	801605a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f2a:	f003 0310 	and.w	r3, r3, #16
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d105      	bne.n	8015f3e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f36:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8015f3a:	687b      	ldr	r3, [r7, #4]
 8015f3c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7ff fadc 	bl	8015500 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8015f48:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	681b      	ldr	r3, [r3, #0]
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f7ff fa5a 	bl	8015408 <LL_ADC_REG_IsTriggerSourceSWStart>
 8015f54:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	4a11      	ldr	r2, [pc, #68]	; (8015fa0 <HAL_ADC_IRQHandler+0x244>)
 8015f5c:	4293      	cmp	r3, r2
 8015f5e:	d002      	beq.n	8015f66 <HAL_ADC_IRQHandler+0x20a>
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	e000      	b.n	8015f68 <HAL_ADC_IRQHandler+0x20c>
 8015f66:	4b0d      	ldr	r3, [pc, #52]	; (8015f9c <HAL_ADC_IRQHandler+0x240>)
 8015f68:	687a      	ldr	r2, [r7, #4]
 8015f6a:	6812      	ldr	r2, [r2, #0]
 8015f6c:	4293      	cmp	r3, r2
 8015f6e:	d008      	beq.n	8015f82 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015f70:	697b      	ldr	r3, [r7, #20]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d005      	beq.n	8015f82 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8015f76:	697b      	ldr	r3, [r7, #20]
 8015f78:	2b06      	cmp	r3, #6
 8015f7a:	d002      	beq.n	8015f82 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	2b07      	cmp	r3, #7
 8015f80:	d104      	bne.n	8015f8c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	68db      	ldr	r3, [r3, #12]
 8015f88:	623b      	str	r3, [r7, #32]
 8015f8a:	e014      	b.n	8015fb6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	4a03      	ldr	r2, [pc, #12]	; (8015fa0 <HAL_ADC_IRQHandler+0x244>)
 8015f92:	4293      	cmp	r3, r2
 8015f94:	d00a      	beq.n	8015fac <HAL_ADC_IRQHandler+0x250>
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	e008      	b.n	8015fae <HAL_ADC_IRQHandler+0x252>
 8015f9c:	40022000 	.word	0x40022000
 8015fa0:	40022100 	.word	0x40022100
 8015fa4:	40022300 	.word	0x40022300
 8015fa8:	58026300 	.word	0x58026300
 8015fac:	4b84      	ldr	r3, [pc, #528]	; (80161c0 <HAL_ADC_IRQHandler+0x464>)
 8015fae:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8015fb0:	693b      	ldr	r3, [r7, #16]
 8015fb2:	68db      	ldr	r3, [r3, #12]
 8015fb4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d047      	beq.n	801604c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8015fbc:	6a3b      	ldr	r3, [r7, #32]
 8015fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8015fc2:	2b00      	cmp	r3, #0
 8015fc4:	d007      	beq.n	8015fd6 <HAL_ADC_IRQHandler+0x27a>
 8015fc6:	68bb      	ldr	r3, [r7, #8]
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d03f      	beq.n	801604c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8015fcc:	6a3b      	ldr	r3, [r7, #32]
 8015fce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d13a      	bne.n	801604c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8015fd6:	687b      	ldr	r3, [r7, #4]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015fe0:	2b40      	cmp	r3, #64	; 0x40
 8015fe2:	d133      	bne.n	801604c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8015fe4:	6a3b      	ldr	r3, [r7, #32]
 8015fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d12e      	bne.n	801604c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	4618      	mov	r0, r3
 8015ff4:	f7ff fbbb 	bl	801576e <LL_ADC_INJ_IsConversionOngoing>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	2b00      	cmp	r3, #0
 8015ffc:	d11a      	bne.n	8016034 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	685a      	ldr	r2, [r3, #4]
 8016004:	687b      	ldr	r3, [r7, #4]
 8016006:	681b      	ldr	r3, [r3, #0]
 8016008:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801600c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016012:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801601e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016022:	2b00      	cmp	r3, #0
 8016024:	d112      	bne.n	801604c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801602a:	f043 0201 	orr.w	r2, r3, #1
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	661a      	str	r2, [r3, #96]	; 0x60
 8016032:	e00b      	b.n	801604c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016038:	f043 0210 	orr.w	r2, r3, #16
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016044:	f043 0201 	orr.w	r2, r3, #1
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 801604c:	6878      	ldr	r0, [r7, #4]
 801604e:	f001 f83b 	bl	80170c8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	2260      	movs	r2, #96	; 0x60
 8016058:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 801605a:	69fb      	ldr	r3, [r7, #28]
 801605c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016060:	2b00      	cmp	r3, #0
 8016062:	d011      	beq.n	8016088 <HAL_ADC_IRQHandler+0x32c>
 8016064:	69bb      	ldr	r3, [r7, #24]
 8016066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801606a:	2b00      	cmp	r3, #0
 801606c:	d00c      	beq.n	8016088 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f000 f8b2 	bl	80161e4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2280      	movs	r2, #128	; 0x80
 8016086:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8016088:	69fb      	ldr	r3, [r7, #28]
 801608a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801608e:	2b00      	cmp	r3, #0
 8016090:	d012      	beq.n	80160b8 <HAL_ADC_IRQHandler+0x35c>
 8016092:	69bb      	ldr	r3, [r7, #24]
 8016094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016098:	2b00      	cmp	r3, #0
 801609a:	d00d      	beq.n	80160b8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160a0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80160a4:	687b      	ldr	r3, [r7, #4]
 80160a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80160a8:	6878      	ldr	r0, [r7, #4]
 80160aa:	f001 f821 	bl	80170f0 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	681b      	ldr	r3, [r3, #0]
 80160b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80160b6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80160b8:	69fb      	ldr	r3, [r7, #28]
 80160ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d012      	beq.n	80160e8 <HAL_ADC_IRQHandler+0x38c>
 80160c2:	69bb      	ldr	r3, [r7, #24]
 80160c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d00d      	beq.n	80160e8 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80160cc:	687b      	ldr	r3, [r7, #4]
 80160ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80160d8:	6878      	ldr	r0, [r7, #4]
 80160da:	f001 f813 	bl	8017104 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	681b      	ldr	r3, [r3, #0]
 80160e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80160e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80160e8:	69fb      	ldr	r3, [r7, #28]
 80160ea:	f003 0310 	and.w	r3, r3, #16
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d043      	beq.n	801617a <HAL_ADC_IRQHandler+0x41e>
 80160f2:	69bb      	ldr	r3, [r7, #24]
 80160f4:	f003 0310 	and.w	r3, r3, #16
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d03e      	beq.n	801617a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80160fc:	687b      	ldr	r3, [r7, #4]
 80160fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016100:	2b00      	cmp	r3, #0
 8016102:	d102      	bne.n	801610a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8016104:	2301      	movs	r3, #1
 8016106:	627b      	str	r3, [r7, #36]	; 0x24
 8016108:	e021      	b.n	801614e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801610a:	697b      	ldr	r3, [r7, #20]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d015      	beq.n	801613c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	681b      	ldr	r3, [r3, #0]
 8016114:	4a2a      	ldr	r2, [pc, #168]	; (80161c0 <HAL_ADC_IRQHandler+0x464>)
 8016116:	4293      	cmp	r3, r2
 8016118:	d004      	beq.n	8016124 <HAL_ADC_IRQHandler+0x3c8>
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	4a29      	ldr	r2, [pc, #164]	; (80161c4 <HAL_ADC_IRQHandler+0x468>)
 8016120:	4293      	cmp	r3, r2
 8016122:	d101      	bne.n	8016128 <HAL_ADC_IRQHandler+0x3cc>
 8016124:	4b28      	ldr	r3, [pc, #160]	; (80161c8 <HAL_ADC_IRQHandler+0x46c>)
 8016126:	e000      	b.n	801612a <HAL_ADC_IRQHandler+0x3ce>
 8016128:	4b28      	ldr	r3, [pc, #160]	; (80161cc <HAL_ADC_IRQHandler+0x470>)
 801612a:	4618      	mov	r0, r3
 801612c:	f7ff fa74 	bl	8015618 <LL_ADC_GetMultiDMATransfer>
 8016130:	4603      	mov	r3, r0
 8016132:	2b00      	cmp	r3, #0
 8016134:	d00b      	beq.n	801614e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8016136:	2301      	movs	r3, #1
 8016138:	627b      	str	r3, [r7, #36]	; 0x24
 801613a:	e008      	b.n	801614e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	68db      	ldr	r3, [r3, #12]
 8016142:	f003 0303 	and.w	r3, r3, #3
 8016146:	2b00      	cmp	r3, #0
 8016148:	d001      	beq.n	801614e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 801614a:	2301      	movs	r3, #1
 801614c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016150:	2b01      	cmp	r3, #1
 8016152:	d10e      	bne.n	8016172 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8016154:	687b      	ldr	r3, [r7, #4]
 8016156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016158:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016164:	f043 0202 	orr.w	r2, r3, #2
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 801616c:	6878      	ldr	r0, [r7, #4]
 801616e:	f000 f843 	bl	80161f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	2210      	movs	r2, #16
 8016178:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 801617a:	69fb      	ldr	r3, [r7, #28]
 801617c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016180:	2b00      	cmp	r3, #0
 8016182:	d018      	beq.n	80161b6 <HAL_ADC_IRQHandler+0x45a>
 8016184:	69bb      	ldr	r3, [r7, #24]
 8016186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801618a:	2b00      	cmp	r3, #0
 801618c:	d013      	beq.n	80161b6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016192:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8016196:	687b      	ldr	r3, [r7, #4]
 8016198:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801619e:	f043 0208 	orr.w	r2, r3, #8
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80161ae:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80161b0:	6878      	ldr	r0, [r7, #4]
 80161b2:	f000 ff93 	bl	80170dc <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80161b6:	bf00      	nop
 80161b8:	3728      	adds	r7, #40	; 0x28
 80161ba:	46bd      	mov	sp, r7
 80161bc:	bd80      	pop	{r7, pc}
 80161be:	bf00      	nop
 80161c0:	40022000 	.word	0x40022000
 80161c4:	40022100 	.word	0x40022100
 80161c8:	40022300 	.word	0x40022300
 80161cc:	58026300 	.word	0x58026300

080161d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80161d0:	b480      	push	{r7}
 80161d2:	b083      	sub	sp, #12
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80161d8:	bf00      	nop
 80161da:	370c      	adds	r7, #12
 80161dc:	46bd      	mov	sp, r7
 80161de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e2:	4770      	bx	lr

080161e4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80161e4:	b480      	push	{r7}
 80161e6:	b083      	sub	sp, #12
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80161ec:	bf00      	nop
 80161ee:	370c      	adds	r7, #12
 80161f0:	46bd      	mov	sp, r7
 80161f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f6:	4770      	bx	lr

080161f8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80161f8:	b480      	push	{r7}
 80161fa:	b083      	sub	sp, #12
 80161fc:	af00      	add	r7, sp, #0
 80161fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8016200:	bf00      	nop
 8016202:	370c      	adds	r7, #12
 8016204:	46bd      	mov	sp, r7
 8016206:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620a:	4770      	bx	lr

0801620c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 801620c:	b590      	push	{r4, r7, lr}
 801620e:	b0b9      	sub	sp, #228	; 0xe4
 8016210:	af00      	add	r7, sp, #0
 8016212:	6078      	str	r0, [r7, #4]
 8016214:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8016216:	2300      	movs	r3, #0
 8016218:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 801621c:	2300      	movs	r3, #0
 801621e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016226:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8016228:	683b      	ldr	r3, [r7, #0]
 801622a:	68db      	ldr	r3, [r3, #12]
 801622c:	4aa9      	ldr	r2, [pc, #676]	; (80164d4 <HAL_ADC_ConfigChannel+0x2c8>)
 801622e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8016236:	2b01      	cmp	r3, #1
 8016238:	d102      	bne.n	8016240 <HAL_ADC_ConfigChannel+0x34>
 801623a:	2302      	movs	r3, #2
 801623c:	f000 bcfa 	b.w	8016c34 <HAL_ADC_ConfigChannel+0xa28>
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	2201      	movs	r2, #1
 8016244:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	4618      	mov	r0, r3
 801624e:	f7ff fa7b 	bl	8015748 <LL_ADC_REG_IsConversionOngoing>
 8016252:	4603      	mov	r3, r0
 8016254:	2b00      	cmp	r3, #0
 8016256:	f040 84de 	bne.w	8016c16 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681b      	ldr	r3, [r3, #0]
 801625e:	4a9e      	ldr	r2, [pc, #632]	; (80164d8 <HAL_ADC_ConfigChannel+0x2cc>)
 8016260:	4293      	cmp	r3, r2
 8016262:	d033      	beq.n	80162cc <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8016264:	683b      	ldr	r3, [r7, #0]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801626c:	2b00      	cmp	r3, #0
 801626e:	d108      	bne.n	8016282 <HAL_ADC_ConfigChannel+0x76>
 8016270:	683b      	ldr	r3, [r7, #0]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	0e9b      	lsrs	r3, r3, #26
 8016276:	f003 031f 	and.w	r3, r3, #31
 801627a:	2201      	movs	r2, #1
 801627c:	fa02 f303 	lsl.w	r3, r2, r3
 8016280:	e01d      	b.n	80162be <HAL_ADC_ConfigChannel+0xb2>
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801628a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801628e:	fa93 f3a3 	rbit	r3, r3
 8016292:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8016296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801629a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801629e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d101      	bne.n	80162aa <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80162a6:	2320      	movs	r3, #32
 80162a8:	e004      	b.n	80162b4 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80162aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80162ae:	fab3 f383 	clz	r3, r3
 80162b2:	b2db      	uxtb	r3, r3
 80162b4:	f003 031f 	and.w	r3, r3, #31
 80162b8:	2201      	movs	r2, #1
 80162ba:	fa02 f303 	lsl.w	r3, r2, r3
 80162be:	687a      	ldr	r2, [r7, #4]
 80162c0:	6812      	ldr	r2, [r2, #0]
 80162c2:	69d1      	ldr	r1, [r2, #28]
 80162c4:	687a      	ldr	r2, [r7, #4]
 80162c6:	6812      	ldr	r2, [r2, #0]
 80162c8:	430b      	orrs	r3, r1
 80162ca:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	6818      	ldr	r0, [r3, #0]
 80162d0:	683b      	ldr	r3, [r7, #0]
 80162d2:	6859      	ldr	r1, [r3, #4]
 80162d4:	683b      	ldr	r3, [r7, #0]
 80162d6:	681b      	ldr	r3, [r3, #0]
 80162d8:	461a      	mov	r2, r3
 80162da:	f7ff f8a8 	bl	801542e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	681b      	ldr	r3, [r3, #0]
 80162e2:	4618      	mov	r0, r3
 80162e4:	f7ff fa30 	bl	8015748 <LL_ADC_REG_IsConversionOngoing>
 80162e8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	681b      	ldr	r3, [r3, #0]
 80162f0:	4618      	mov	r0, r3
 80162f2:	f7ff fa3c 	bl	801576e <LL_ADC_INJ_IsConversionOngoing>
 80162f6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80162fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80162fe:	2b00      	cmp	r3, #0
 8016300:	f040 8270 	bne.w	80167e4 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8016304:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8016308:	2b00      	cmp	r3, #0
 801630a:	f040 826b 	bne.w	80167e4 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6818      	ldr	r0, [r3, #0]
 8016312:	683b      	ldr	r3, [r7, #0]
 8016314:	6819      	ldr	r1, [r3, #0]
 8016316:	683b      	ldr	r3, [r7, #0]
 8016318:	689b      	ldr	r3, [r3, #8]
 801631a:	461a      	mov	r2, r3
 801631c:	f7ff f903 	bl	8015526 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	681b      	ldr	r3, [r3, #0]
 8016324:	4a6c      	ldr	r2, [pc, #432]	; (80164d8 <HAL_ADC_ConfigChannel+0x2cc>)
 8016326:	4293      	cmp	r3, r2
 8016328:	d10d      	bne.n	8016346 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801632a:	683b      	ldr	r3, [r7, #0]
 801632c:	695a      	ldr	r2, [r3, #20]
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	68db      	ldr	r3, [r3, #12]
 8016334:	08db      	lsrs	r3, r3, #3
 8016336:	f003 0303 	and.w	r3, r3, #3
 801633a:	005b      	lsls	r3, r3, #1
 801633c:	fa02 f303 	lsl.w	r3, r2, r3
 8016340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016344:	e032      	b.n	80163ac <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016346:	4b65      	ldr	r3, [pc, #404]	; (80164dc <HAL_ADC_ConfigChannel+0x2d0>)
 8016348:	681b      	ldr	r3, [r3, #0]
 801634a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801634e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8016352:	d10b      	bne.n	801636c <HAL_ADC_ConfigChannel+0x160>
 8016354:	683b      	ldr	r3, [r7, #0]
 8016356:	695a      	ldr	r2, [r3, #20]
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	089b      	lsrs	r3, r3, #2
 8016360:	f003 0307 	and.w	r3, r3, #7
 8016364:	005b      	lsls	r3, r3, #1
 8016366:	fa02 f303 	lsl.w	r3, r2, r3
 801636a:	e01d      	b.n	80163a8 <HAL_ADC_ConfigChannel+0x19c>
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	68db      	ldr	r3, [r3, #12]
 8016372:	f003 0310 	and.w	r3, r3, #16
 8016376:	2b00      	cmp	r3, #0
 8016378:	d10b      	bne.n	8016392 <HAL_ADC_ConfigChannel+0x186>
 801637a:	683b      	ldr	r3, [r7, #0]
 801637c:	695a      	ldr	r2, [r3, #20]
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	089b      	lsrs	r3, r3, #2
 8016386:	f003 0307 	and.w	r3, r3, #7
 801638a:	005b      	lsls	r3, r3, #1
 801638c:	fa02 f303 	lsl.w	r3, r2, r3
 8016390:	e00a      	b.n	80163a8 <HAL_ADC_ConfigChannel+0x19c>
 8016392:	683b      	ldr	r3, [r7, #0]
 8016394:	695a      	ldr	r2, [r3, #20]
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	681b      	ldr	r3, [r3, #0]
 801639a:	68db      	ldr	r3, [r3, #12]
 801639c:	089b      	lsrs	r3, r3, #2
 801639e:	f003 0304 	and.w	r3, r3, #4
 80163a2:	005b      	lsls	r3, r3, #1
 80163a4:	fa02 f303 	lsl.w	r3, r2, r3
 80163a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	691b      	ldr	r3, [r3, #16]
 80163b0:	2b04      	cmp	r3, #4
 80163b2:	d048      	beq.n	8016446 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6818      	ldr	r0, [r3, #0]
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	6919      	ldr	r1, [r3, #16]
 80163bc:	683b      	ldr	r3, [r7, #0]
 80163be:	681a      	ldr	r2, [r3, #0]
 80163c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80163c4:	f7fe ff2e 	bl	8015224 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	4a42      	ldr	r2, [pc, #264]	; (80164d8 <HAL_ADC_ConfigChannel+0x2cc>)
 80163ce:	4293      	cmp	r3, r2
 80163d0:	d119      	bne.n	8016406 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	6818      	ldr	r0, [r3, #0]
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	6919      	ldr	r1, [r3, #16]
 80163da:	683b      	ldr	r3, [r7, #0]
 80163dc:	69db      	ldr	r3, [r3, #28]
 80163de:	461a      	mov	r2, r3
 80163e0:	f7fe ffc6 	bl	8015370 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	6818      	ldr	r0, [r3, #0]
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	6919      	ldr	r1, [r3, #16]
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80163f2:	2b01      	cmp	r3, #1
 80163f4:	d102      	bne.n	80163fc <HAL_ADC_ConfigChannel+0x1f0>
 80163f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80163fa:	e000      	b.n	80163fe <HAL_ADC_ConfigChannel+0x1f2>
 80163fc:	2300      	movs	r3, #0
 80163fe:	461a      	mov	r2, r3
 8016400:	f7fe ff94 	bl	801532c <LL_ADC_SetOffsetSaturation>
 8016404:	e1ee      	b.n	80167e4 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	6818      	ldr	r0, [r3, #0]
 801640a:	683b      	ldr	r3, [r7, #0]
 801640c:	6919      	ldr	r1, [r3, #16]
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016414:	2b01      	cmp	r3, #1
 8016416:	d102      	bne.n	801641e <HAL_ADC_ConfigChannel+0x212>
 8016418:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801641c:	e000      	b.n	8016420 <HAL_ADC_ConfigChannel+0x214>
 801641e:	2300      	movs	r3, #0
 8016420:	461a      	mov	r2, r3
 8016422:	f7fe ff61 	bl	80152e8 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6818      	ldr	r0, [r3, #0]
 801642a:	683b      	ldr	r3, [r7, #0]
 801642c:	6919      	ldr	r1, [r3, #16]
 801642e:	683b      	ldr	r3, [r7, #0]
 8016430:	7e1b      	ldrb	r3, [r3, #24]
 8016432:	2b01      	cmp	r3, #1
 8016434:	d102      	bne.n	801643c <HAL_ADC_ConfigChannel+0x230>
 8016436:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801643a:	e000      	b.n	801643e <HAL_ADC_ConfigChannel+0x232>
 801643c:	2300      	movs	r3, #0
 801643e:	461a      	mov	r2, r3
 8016440:	f7fe ff38 	bl	80152b4 <LL_ADC_SetDataRightShift>
 8016444:	e1ce      	b.n	80167e4 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8016446:	687b      	ldr	r3, [r7, #4]
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	4a23      	ldr	r2, [pc, #140]	; (80164d8 <HAL_ADC_ConfigChannel+0x2cc>)
 801644c:	4293      	cmp	r3, r2
 801644e:	f040 8181 	bne.w	8016754 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	2100      	movs	r1, #0
 8016458:	4618      	mov	r0, r3
 801645a:	f7fe ff15 	bl	8015288 <LL_ADC_GetOffsetChannel>
 801645e:	4603      	mov	r3, r0
 8016460:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016464:	2b00      	cmp	r3, #0
 8016466:	d10a      	bne.n	801647e <HAL_ADC_ConfigChannel+0x272>
 8016468:	687b      	ldr	r3, [r7, #4]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	2100      	movs	r1, #0
 801646e:	4618      	mov	r0, r3
 8016470:	f7fe ff0a 	bl	8015288 <LL_ADC_GetOffsetChannel>
 8016474:	4603      	mov	r3, r0
 8016476:	0e9b      	lsrs	r3, r3, #26
 8016478:	f003 021f 	and.w	r2, r3, #31
 801647c:	e01e      	b.n	80164bc <HAL_ADC_ConfigChannel+0x2b0>
 801647e:	687b      	ldr	r3, [r7, #4]
 8016480:	681b      	ldr	r3, [r3, #0]
 8016482:	2100      	movs	r1, #0
 8016484:	4618      	mov	r0, r3
 8016486:	f7fe feff 	bl	8015288 <LL_ADC_GetOffsetChannel>
 801648a:	4603      	mov	r3, r0
 801648c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016490:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016494:	fa93 f3a3 	rbit	r3, r3
 8016498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 801649c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80164a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80164a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d101      	bne.n	80164b0 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 80164ac:	2320      	movs	r3, #32
 80164ae:	e004      	b.n	80164ba <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 80164b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80164b4:	fab3 f383 	clz	r3, r3
 80164b8:	b2db      	uxtb	r3, r3
 80164ba:	461a      	mov	r2, r3
 80164bc:	683b      	ldr	r3, [r7, #0]
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d10b      	bne.n	80164e0 <HAL_ADC_ConfigChannel+0x2d4>
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	0e9b      	lsrs	r3, r3, #26
 80164ce:	f003 031f 	and.w	r3, r3, #31
 80164d2:	e01e      	b.n	8016512 <HAL_ADC_ConfigChannel+0x306>
 80164d4:	47ff0000 	.word	0x47ff0000
 80164d8:	58026000 	.word	0x58026000
 80164dc:	5c001000 	.word	0x5c001000
 80164e0:	683b      	ldr	r3, [r7, #0]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80164e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80164ec:	fa93 f3a3 	rbit	r3, r3
 80164f0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80164f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80164f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80164fc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016500:	2b00      	cmp	r3, #0
 8016502:	d101      	bne.n	8016508 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8016504:	2320      	movs	r3, #32
 8016506:	e004      	b.n	8016512 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 8016508:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801650c:	fab3 f383 	clz	r3, r3
 8016510:	b2db      	uxtb	r3, r3
 8016512:	429a      	cmp	r2, r3
 8016514:	d106      	bne.n	8016524 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	2200      	movs	r2, #0
 801651c:	2100      	movs	r1, #0
 801651e:	4618      	mov	r0, r3
 8016520:	f7fe ff48 	bl	80153b4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	2101      	movs	r1, #1
 801652a:	4618      	mov	r0, r3
 801652c:	f7fe feac 	bl	8015288 <LL_ADC_GetOffsetChannel>
 8016530:	4603      	mov	r3, r0
 8016532:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016536:	2b00      	cmp	r3, #0
 8016538:	d10a      	bne.n	8016550 <HAL_ADC_ConfigChannel+0x344>
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2101      	movs	r1, #1
 8016540:	4618      	mov	r0, r3
 8016542:	f7fe fea1 	bl	8015288 <LL_ADC_GetOffsetChannel>
 8016546:	4603      	mov	r3, r0
 8016548:	0e9b      	lsrs	r3, r3, #26
 801654a:	f003 021f 	and.w	r2, r3, #31
 801654e:	e01e      	b.n	801658e <HAL_ADC_ConfigChannel+0x382>
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	681b      	ldr	r3, [r3, #0]
 8016554:	2101      	movs	r1, #1
 8016556:	4618      	mov	r0, r3
 8016558:	f7fe fe96 	bl	8015288 <LL_ADC_GetOffsetChannel>
 801655c:	4603      	mov	r3, r0
 801655e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016566:	fa93 f3a3 	rbit	r3, r3
 801656a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 801656e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8016572:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8016576:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801657a:	2b00      	cmp	r3, #0
 801657c:	d101      	bne.n	8016582 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 801657e:	2320      	movs	r3, #32
 8016580:	e004      	b.n	801658c <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 8016582:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016586:	fab3 f383 	clz	r3, r3
 801658a:	b2db      	uxtb	r3, r3
 801658c:	461a      	mov	r2, r3
 801658e:	683b      	ldr	r3, [r7, #0]
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016596:	2b00      	cmp	r3, #0
 8016598:	d105      	bne.n	80165a6 <HAL_ADC_ConfigChannel+0x39a>
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	0e9b      	lsrs	r3, r3, #26
 80165a0:	f003 031f 	and.w	r3, r3, #31
 80165a4:	e018      	b.n	80165d8 <HAL_ADC_ConfigChannel+0x3cc>
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80165ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80165b2:	fa93 f3a3 	rbit	r3, r3
 80165b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80165ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80165be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80165c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d101      	bne.n	80165ce <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80165ca:	2320      	movs	r3, #32
 80165cc:	e004      	b.n	80165d8 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80165ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80165d2:	fab3 f383 	clz	r3, r3
 80165d6:	b2db      	uxtb	r3, r3
 80165d8:	429a      	cmp	r2, r3
 80165da:	d106      	bne.n	80165ea <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	2200      	movs	r2, #0
 80165e2:	2101      	movs	r1, #1
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7fe fee5 	bl	80153b4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80165ea:	687b      	ldr	r3, [r7, #4]
 80165ec:	681b      	ldr	r3, [r3, #0]
 80165ee:	2102      	movs	r1, #2
 80165f0:	4618      	mov	r0, r3
 80165f2:	f7fe fe49 	bl	8015288 <LL_ADC_GetOffsetChannel>
 80165f6:	4603      	mov	r3, r0
 80165f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d10a      	bne.n	8016616 <HAL_ADC_ConfigChannel+0x40a>
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	2102      	movs	r1, #2
 8016606:	4618      	mov	r0, r3
 8016608:	f7fe fe3e 	bl	8015288 <LL_ADC_GetOffsetChannel>
 801660c:	4603      	mov	r3, r0
 801660e:	0e9b      	lsrs	r3, r3, #26
 8016610:	f003 021f 	and.w	r2, r3, #31
 8016614:	e01e      	b.n	8016654 <HAL_ADC_ConfigChannel+0x448>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	2102      	movs	r1, #2
 801661c:	4618      	mov	r0, r3
 801661e:	f7fe fe33 	bl	8015288 <LL_ADC_GetOffsetChannel>
 8016622:	4603      	mov	r3, r0
 8016624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801662c:	fa93 f3a3 	rbit	r3, r3
 8016630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8016634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016638:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 801663c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016640:	2b00      	cmp	r3, #0
 8016642:	d101      	bne.n	8016648 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8016644:	2320      	movs	r3, #32
 8016646:	e004      	b.n	8016652 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8016648:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801664c:	fab3 f383 	clz	r3, r3
 8016650:	b2db      	uxtb	r3, r3
 8016652:	461a      	mov	r2, r3
 8016654:	683b      	ldr	r3, [r7, #0]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801665c:	2b00      	cmp	r3, #0
 801665e:	d105      	bne.n	801666c <HAL_ADC_ConfigChannel+0x460>
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	0e9b      	lsrs	r3, r3, #26
 8016666:	f003 031f 	and.w	r3, r3, #31
 801666a:	e014      	b.n	8016696 <HAL_ADC_ConfigChannel+0x48a>
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016672:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016674:	fa93 f3a3 	rbit	r3, r3
 8016678:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 801667a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801667c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8016680:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016684:	2b00      	cmp	r3, #0
 8016686:	d101      	bne.n	801668c <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8016688:	2320      	movs	r3, #32
 801668a:	e004      	b.n	8016696 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 801668c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016690:	fab3 f383 	clz	r3, r3
 8016694:	b2db      	uxtb	r3, r3
 8016696:	429a      	cmp	r2, r3
 8016698:	d106      	bne.n	80166a8 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	2200      	movs	r2, #0
 80166a0:	2102      	movs	r1, #2
 80166a2:	4618      	mov	r0, r3
 80166a4:	f7fe fe86 	bl	80153b4 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80166a8:	687b      	ldr	r3, [r7, #4]
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	2103      	movs	r1, #3
 80166ae:	4618      	mov	r0, r3
 80166b0:	f7fe fdea 	bl	8015288 <LL_ADC_GetOffsetChannel>
 80166b4:	4603      	mov	r3, r0
 80166b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d10a      	bne.n	80166d4 <HAL_ADC_ConfigChannel+0x4c8>
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	681b      	ldr	r3, [r3, #0]
 80166c2:	2103      	movs	r1, #3
 80166c4:	4618      	mov	r0, r3
 80166c6:	f7fe fddf 	bl	8015288 <LL_ADC_GetOffsetChannel>
 80166ca:	4603      	mov	r3, r0
 80166cc:	0e9b      	lsrs	r3, r3, #26
 80166ce:	f003 021f 	and.w	r2, r3, #31
 80166d2:	e017      	b.n	8016704 <HAL_ADC_ConfigChannel+0x4f8>
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	2103      	movs	r1, #3
 80166da:	4618      	mov	r0, r3
 80166dc:	f7fe fdd4 	bl	8015288 <LL_ADC_GetOffsetChannel>
 80166e0:	4603      	mov	r3, r0
 80166e2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80166e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80166e6:	fa93 f3a3 	rbit	r3, r3
 80166ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80166ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80166ee:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80166f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d101      	bne.n	80166fa <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80166f6:	2320      	movs	r3, #32
 80166f8:	e003      	b.n	8016702 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80166fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80166fc:	fab3 f383 	clz	r3, r3
 8016700:	b2db      	uxtb	r3, r3
 8016702:	461a      	mov	r2, r3
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801670c:	2b00      	cmp	r3, #0
 801670e:	d105      	bne.n	801671c <HAL_ADC_ConfigChannel+0x510>
 8016710:	683b      	ldr	r3, [r7, #0]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	0e9b      	lsrs	r3, r3, #26
 8016716:	f003 031f 	and.w	r3, r3, #31
 801671a:	e011      	b.n	8016740 <HAL_ADC_ConfigChannel+0x534>
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	681b      	ldr	r3, [r3, #0]
 8016720:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016724:	fa93 f3a3 	rbit	r3, r3
 8016728:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 801672a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801672c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 801672e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016730:	2b00      	cmp	r3, #0
 8016732:	d101      	bne.n	8016738 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8016734:	2320      	movs	r3, #32
 8016736:	e003      	b.n	8016740 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8016738:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801673a:	fab3 f383 	clz	r3, r3
 801673e:	b2db      	uxtb	r3, r3
 8016740:	429a      	cmp	r2, r3
 8016742:	d14f      	bne.n	80167e4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	2200      	movs	r2, #0
 801674a:	2103      	movs	r1, #3
 801674c:	4618      	mov	r0, r3
 801674e:	f7fe fe31 	bl	80153b4 <LL_ADC_SetOffsetState>
 8016752:	e047      	b.n	80167e4 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801675a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801675e:	683b      	ldr	r3, [r7, #0]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	069b      	lsls	r3, r3, #26
 8016764:	429a      	cmp	r2, r3
 8016766:	d107      	bne.n	8016778 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	681b      	ldr	r3, [r3, #0]
 8016772:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016776:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801677e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016782:	683b      	ldr	r3, [r7, #0]
 8016784:	681b      	ldr	r3, [r3, #0]
 8016786:	069b      	lsls	r3, r3, #26
 8016788:	429a      	cmp	r2, r3
 801678a:	d107      	bne.n	801679c <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 801678c:	687b      	ldr	r3, [r7, #4]
 801678e:	681b      	ldr	r3, [r3, #0]
 8016790:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	681b      	ldr	r3, [r3, #0]
 8016796:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801679a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	681b      	ldr	r3, [r3, #0]
 80167a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80167a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80167a6:	683b      	ldr	r3, [r7, #0]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	069b      	lsls	r3, r3, #26
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d107      	bne.n	80167c0 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	681b      	ldr	r3, [r3, #0]
 80167ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80167be:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80167ca:	683b      	ldr	r3, [r7, #0]
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	069b      	lsls	r3, r3, #26
 80167d0:	429a      	cmp	r2, r3
 80167d2:	d107      	bne.n	80167e4 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	681b      	ldr	r3, [r3, #0]
 80167d8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80167e2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	681b      	ldr	r3, [r3, #0]
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7fe ff85 	bl	80156f8 <LL_ADC_IsEnabled>
 80167ee:	4603      	mov	r3, r0
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	f040 8219 	bne.w	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	6818      	ldr	r0, [r3, #0]
 80167fa:	683b      	ldr	r3, [r7, #0]
 80167fc:	6819      	ldr	r1, [r3, #0]
 80167fe:	683b      	ldr	r3, [r7, #0]
 8016800:	68db      	ldr	r3, [r3, #12]
 8016802:	461a      	mov	r2, r3
 8016804:	f7fe feba 	bl	801557c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8016808:	683b      	ldr	r3, [r7, #0]
 801680a:	68db      	ldr	r3, [r3, #12]
 801680c:	4aa1      	ldr	r2, [pc, #644]	; (8016a94 <HAL_ADC_ConfigChannel+0x888>)
 801680e:	4293      	cmp	r3, r2
 8016810:	f040 812e 	bne.w	8016a70 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016818:	683b      	ldr	r3, [r7, #0]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016820:	2b00      	cmp	r3, #0
 8016822:	d10b      	bne.n	801683c <HAL_ADC_ConfigChannel+0x630>
 8016824:	683b      	ldr	r3, [r7, #0]
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	0e9b      	lsrs	r3, r3, #26
 801682a:	3301      	adds	r3, #1
 801682c:	f003 031f 	and.w	r3, r3, #31
 8016830:	2b09      	cmp	r3, #9
 8016832:	bf94      	ite	ls
 8016834:	2301      	movls	r3, #1
 8016836:	2300      	movhi	r3, #0
 8016838:	b2db      	uxtb	r3, r3
 801683a:	e019      	b.n	8016870 <HAL_ADC_ConfigChannel+0x664>
 801683c:	683b      	ldr	r3, [r7, #0]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016842:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016844:	fa93 f3a3 	rbit	r3, r3
 8016848:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 801684a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801684c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 801684e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016850:	2b00      	cmp	r3, #0
 8016852:	d101      	bne.n	8016858 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8016854:	2320      	movs	r3, #32
 8016856:	e003      	b.n	8016860 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8016858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801685a:	fab3 f383 	clz	r3, r3
 801685e:	b2db      	uxtb	r3, r3
 8016860:	3301      	adds	r3, #1
 8016862:	f003 031f 	and.w	r3, r3, #31
 8016866:	2b09      	cmp	r3, #9
 8016868:	bf94      	ite	ls
 801686a:	2301      	movls	r3, #1
 801686c:	2300      	movhi	r3, #0
 801686e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016870:	2b00      	cmp	r3, #0
 8016872:	d079      	beq.n	8016968 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	681b      	ldr	r3, [r3, #0]
 8016878:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801687c:	2b00      	cmp	r3, #0
 801687e:	d107      	bne.n	8016890 <HAL_ADC_ConfigChannel+0x684>
 8016880:	683b      	ldr	r3, [r7, #0]
 8016882:	681b      	ldr	r3, [r3, #0]
 8016884:	0e9b      	lsrs	r3, r3, #26
 8016886:	3301      	adds	r3, #1
 8016888:	069b      	lsls	r3, r3, #26
 801688a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801688e:	e015      	b.n	80168bc <HAL_ADC_ConfigChannel+0x6b0>
 8016890:	683b      	ldr	r3, [r7, #0]
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016898:	fa93 f3a3 	rbit	r3, r3
 801689c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 801689e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80168a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	d101      	bne.n	80168ac <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80168a8:	2320      	movs	r3, #32
 80168aa:	e003      	b.n	80168b4 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 80168ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80168ae:	fab3 f383 	clz	r3, r3
 80168b2:	b2db      	uxtb	r3, r3
 80168b4:	3301      	adds	r3, #1
 80168b6:	069b      	lsls	r3, r3, #26
 80168b8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168c4:	2b00      	cmp	r3, #0
 80168c6:	d109      	bne.n	80168dc <HAL_ADC_ConfigChannel+0x6d0>
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	0e9b      	lsrs	r3, r3, #26
 80168ce:	3301      	adds	r3, #1
 80168d0:	f003 031f 	and.w	r3, r3, #31
 80168d4:	2101      	movs	r1, #1
 80168d6:	fa01 f303 	lsl.w	r3, r1, r3
 80168da:	e017      	b.n	801690c <HAL_ADC_ConfigChannel+0x700>
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	681b      	ldr	r3, [r3, #0]
 80168e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80168e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80168e4:	fa93 f3a3 	rbit	r3, r3
 80168e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80168ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168ec:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80168ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d101      	bne.n	80168f8 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80168f4:	2320      	movs	r3, #32
 80168f6:	e003      	b.n	8016900 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80168f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80168fa:	fab3 f383 	clz	r3, r3
 80168fe:	b2db      	uxtb	r3, r3
 8016900:	3301      	adds	r3, #1
 8016902:	f003 031f 	and.w	r3, r3, #31
 8016906:	2101      	movs	r1, #1
 8016908:	fa01 f303 	lsl.w	r3, r1, r3
 801690c:	ea42 0103 	orr.w	r1, r2, r3
 8016910:	683b      	ldr	r3, [r7, #0]
 8016912:	681b      	ldr	r3, [r3, #0]
 8016914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016918:	2b00      	cmp	r3, #0
 801691a:	d10a      	bne.n	8016932 <HAL_ADC_ConfigChannel+0x726>
 801691c:	683b      	ldr	r3, [r7, #0]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	0e9b      	lsrs	r3, r3, #26
 8016922:	3301      	adds	r3, #1
 8016924:	f003 021f 	and.w	r2, r3, #31
 8016928:	4613      	mov	r3, r2
 801692a:	005b      	lsls	r3, r3, #1
 801692c:	4413      	add	r3, r2
 801692e:	051b      	lsls	r3, r3, #20
 8016930:	e018      	b.n	8016964 <HAL_ADC_ConfigChannel+0x758>
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801693a:	fa93 f3a3 	rbit	r3, r3
 801693e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8016940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016942:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8016944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016946:	2b00      	cmp	r3, #0
 8016948:	d101      	bne.n	801694e <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 801694a:	2320      	movs	r3, #32
 801694c:	e003      	b.n	8016956 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 801694e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016950:	fab3 f383 	clz	r3, r3
 8016954:	b2db      	uxtb	r3, r3
 8016956:	3301      	adds	r3, #1
 8016958:	f003 021f 	and.w	r2, r3, #31
 801695c:	4613      	mov	r3, r2
 801695e:	005b      	lsls	r3, r3, #1
 8016960:	4413      	add	r3, r2
 8016962:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016964:	430b      	orrs	r3, r1
 8016966:	e07e      	b.n	8016a66 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016968:	683b      	ldr	r3, [r7, #0]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016970:	2b00      	cmp	r3, #0
 8016972:	d107      	bne.n	8016984 <HAL_ADC_ConfigChannel+0x778>
 8016974:	683b      	ldr	r3, [r7, #0]
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	0e9b      	lsrs	r3, r3, #26
 801697a:	3301      	adds	r3, #1
 801697c:	069b      	lsls	r3, r3, #26
 801697e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016982:	e015      	b.n	80169b0 <HAL_ADC_ConfigChannel+0x7a4>
 8016984:	683b      	ldr	r3, [r7, #0]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801698c:	fa93 f3a3 	rbit	r3, r3
 8016990:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8016992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016994:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8016996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016998:	2b00      	cmp	r3, #0
 801699a:	d101      	bne.n	80169a0 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 801699c:	2320      	movs	r3, #32
 801699e:	e003      	b.n	80169a8 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 80169a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169a2:	fab3 f383 	clz	r3, r3
 80169a6:	b2db      	uxtb	r3, r3
 80169a8:	3301      	adds	r3, #1
 80169aa:	069b      	lsls	r3, r3, #26
 80169ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80169b0:	683b      	ldr	r3, [r7, #0]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169b8:	2b00      	cmp	r3, #0
 80169ba:	d109      	bne.n	80169d0 <HAL_ADC_ConfigChannel+0x7c4>
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	0e9b      	lsrs	r3, r3, #26
 80169c2:	3301      	adds	r3, #1
 80169c4:	f003 031f 	and.w	r3, r3, #31
 80169c8:	2101      	movs	r1, #1
 80169ca:	fa01 f303 	lsl.w	r3, r1, r3
 80169ce:	e017      	b.n	8016a00 <HAL_ADC_ConfigChannel+0x7f4>
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	681b      	ldr	r3, [r3, #0]
 80169d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169d6:	69fb      	ldr	r3, [r7, #28]
 80169d8:	fa93 f3a3 	rbit	r3, r3
 80169dc:	61bb      	str	r3, [r7, #24]
  return result;
 80169de:	69bb      	ldr	r3, [r7, #24]
 80169e0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80169e2:	6a3b      	ldr	r3, [r7, #32]
 80169e4:	2b00      	cmp	r3, #0
 80169e6:	d101      	bne.n	80169ec <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 80169e8:	2320      	movs	r3, #32
 80169ea:	e003      	b.n	80169f4 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 80169ec:	6a3b      	ldr	r3, [r7, #32]
 80169ee:	fab3 f383 	clz	r3, r3
 80169f2:	b2db      	uxtb	r3, r3
 80169f4:	3301      	adds	r3, #1
 80169f6:	f003 031f 	and.w	r3, r3, #31
 80169fa:	2101      	movs	r1, #1
 80169fc:	fa01 f303 	lsl.w	r3, r1, r3
 8016a00:	ea42 0103 	orr.w	r1, r2, r3
 8016a04:	683b      	ldr	r3, [r7, #0]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d10d      	bne.n	8016a2c <HAL_ADC_ConfigChannel+0x820>
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	0e9b      	lsrs	r3, r3, #26
 8016a16:	3301      	adds	r3, #1
 8016a18:	f003 021f 	and.w	r2, r3, #31
 8016a1c:	4613      	mov	r3, r2
 8016a1e:	005b      	lsls	r3, r3, #1
 8016a20:	4413      	add	r3, r2
 8016a22:	3b1e      	subs	r3, #30
 8016a24:	051b      	lsls	r3, r3, #20
 8016a26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016a2a:	e01b      	b.n	8016a64 <HAL_ADC_ConfigChannel+0x858>
 8016a2c:	683b      	ldr	r3, [r7, #0]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	fa93 f3a3 	rbit	r3, r3
 8016a38:	60fb      	str	r3, [r7, #12]
  return result;
 8016a3a:	68fb      	ldr	r3, [r7, #12]
 8016a3c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8016a3e:	697b      	ldr	r3, [r7, #20]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d101      	bne.n	8016a48 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8016a44:	2320      	movs	r3, #32
 8016a46:	e003      	b.n	8016a50 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	fab3 f383 	clz	r3, r3
 8016a4e:	b2db      	uxtb	r3, r3
 8016a50:	3301      	adds	r3, #1
 8016a52:	f003 021f 	and.w	r2, r3, #31
 8016a56:	4613      	mov	r3, r2
 8016a58:	005b      	lsls	r3, r3, #1
 8016a5a:	4413      	add	r3, r2
 8016a5c:	3b1e      	subs	r3, #30
 8016a5e:	051b      	lsls	r3, r3, #20
 8016a60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016a64:	430b      	orrs	r3, r1
 8016a66:	683a      	ldr	r2, [r7, #0]
 8016a68:	6892      	ldr	r2, [r2, #8]
 8016a6a:	4619      	mov	r1, r3
 8016a6c:	f7fe fd5b 	bl	8015526 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	f280 80d7 	bge.w	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	4a06      	ldr	r2, [pc, #24]	; (8016a98 <HAL_ADC_ConfigChannel+0x88c>)
 8016a80:	4293      	cmp	r3, r2
 8016a82:	d004      	beq.n	8016a8e <HAL_ADC_ConfigChannel+0x882>
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	4a04      	ldr	r2, [pc, #16]	; (8016a9c <HAL_ADC_ConfigChannel+0x890>)
 8016a8a:	4293      	cmp	r3, r2
 8016a8c:	d10a      	bne.n	8016aa4 <HAL_ADC_ConfigChannel+0x898>
 8016a8e:	4b04      	ldr	r3, [pc, #16]	; (8016aa0 <HAL_ADC_ConfigChannel+0x894>)
 8016a90:	e009      	b.n	8016aa6 <HAL_ADC_ConfigChannel+0x89a>
 8016a92:	bf00      	nop
 8016a94:	47ff0000 	.word	0x47ff0000
 8016a98:	40022000 	.word	0x40022000
 8016a9c:	40022100 	.word	0x40022100
 8016aa0:	40022300 	.word	0x40022300
 8016aa4:	4b65      	ldr	r3, [pc, #404]	; (8016c3c <HAL_ADC_ConfigChannel+0xa30>)
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f7fe fbae 	bl	8015208 <LL_ADC_GetCommonPathInternalCh>
 8016aac:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4a62      	ldr	r2, [pc, #392]	; (8016c40 <HAL_ADC_ConfigChannel+0xa34>)
 8016ab6:	4293      	cmp	r3, r2
 8016ab8:	d004      	beq.n	8016ac4 <HAL_ADC_ConfigChannel+0x8b8>
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	4a61      	ldr	r2, [pc, #388]	; (8016c44 <HAL_ADC_ConfigChannel+0xa38>)
 8016ac0:	4293      	cmp	r3, r2
 8016ac2:	d10e      	bne.n	8016ae2 <HAL_ADC_ConfigChannel+0x8d6>
 8016ac4:	485e      	ldr	r0, [pc, #376]	; (8016c40 <HAL_ADC_ConfigChannel+0xa34>)
 8016ac6:	f7fe fe17 	bl	80156f8 <LL_ADC_IsEnabled>
 8016aca:	4604      	mov	r4, r0
 8016acc:	485d      	ldr	r0, [pc, #372]	; (8016c44 <HAL_ADC_ConfigChannel+0xa38>)
 8016ace:	f7fe fe13 	bl	80156f8 <LL_ADC_IsEnabled>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	4323      	orrs	r3, r4
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	bf0c      	ite	eq
 8016ada:	2301      	moveq	r3, #1
 8016adc:	2300      	movne	r3, #0
 8016ade:	b2db      	uxtb	r3, r3
 8016ae0:	e008      	b.n	8016af4 <HAL_ADC_ConfigChannel+0x8e8>
 8016ae2:	4859      	ldr	r0, [pc, #356]	; (8016c48 <HAL_ADC_ConfigChannel+0xa3c>)
 8016ae4:	f7fe fe08 	bl	80156f8 <LL_ADC_IsEnabled>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	2b00      	cmp	r3, #0
 8016aec:	bf0c      	ite	eq
 8016aee:	2301      	moveq	r3, #1
 8016af0:	2300      	movne	r3, #0
 8016af2:	b2db      	uxtb	r3, r3
 8016af4:	2b00      	cmp	r3, #0
 8016af6:	f000 8084 	beq.w	8016c02 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8016afa:	683b      	ldr	r3, [r7, #0]
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	4a53      	ldr	r2, [pc, #332]	; (8016c4c <HAL_ADC_ConfigChannel+0xa40>)
 8016b00:	4293      	cmp	r3, r2
 8016b02:	d132      	bne.n	8016b6a <HAL_ADC_ConfigChannel+0x95e>
 8016b04:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d12c      	bne.n	8016b6a <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	4a4c      	ldr	r2, [pc, #304]	; (8016c48 <HAL_ADC_ConfigChannel+0xa3c>)
 8016b16:	4293      	cmp	r3, r2
 8016b18:	f040 8086 	bne.w	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8016b1c:	687b      	ldr	r3, [r7, #4]
 8016b1e:	681b      	ldr	r3, [r3, #0]
 8016b20:	4a47      	ldr	r2, [pc, #284]	; (8016c40 <HAL_ADC_ConfigChannel+0xa34>)
 8016b22:	4293      	cmp	r3, r2
 8016b24:	d004      	beq.n	8016b30 <HAL_ADC_ConfigChannel+0x924>
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	4a46      	ldr	r2, [pc, #280]	; (8016c44 <HAL_ADC_ConfigChannel+0xa38>)
 8016b2c:	4293      	cmp	r3, r2
 8016b2e:	d101      	bne.n	8016b34 <HAL_ADC_ConfigChannel+0x928>
 8016b30:	4a47      	ldr	r2, [pc, #284]	; (8016c50 <HAL_ADC_ConfigChannel+0xa44>)
 8016b32:	e000      	b.n	8016b36 <HAL_ADC_ConfigChannel+0x92a>
 8016b34:	4a41      	ldr	r2, [pc, #260]	; (8016c3c <HAL_ADC_ConfigChannel+0xa30>)
 8016b36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016b3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016b3e:	4619      	mov	r1, r3
 8016b40:	4610      	mov	r0, r2
 8016b42:	f7fe fb4e 	bl	80151e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016b46:	4b43      	ldr	r3, [pc, #268]	; (8016c54 <HAL_ADC_ConfigChannel+0xa48>)
 8016b48:	681b      	ldr	r3, [r3, #0]
 8016b4a:	099b      	lsrs	r3, r3, #6
 8016b4c:	4a42      	ldr	r2, [pc, #264]	; (8016c58 <HAL_ADC_ConfigChannel+0xa4c>)
 8016b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8016b52:	099b      	lsrs	r3, r3, #6
 8016b54:	3301      	adds	r3, #1
 8016b56:	005b      	lsls	r3, r3, #1
 8016b58:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016b5a:	e002      	b.n	8016b62 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8016b5c:	68bb      	ldr	r3, [r7, #8]
 8016b5e:	3b01      	subs	r3, #1
 8016b60:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016b62:	68bb      	ldr	r3, [r7, #8]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d1f9      	bne.n	8016b5c <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016b68:	e05e      	b.n	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	681b      	ldr	r3, [r3, #0]
 8016b6e:	4a3b      	ldr	r2, [pc, #236]	; (8016c5c <HAL_ADC_ConfigChannel+0xa50>)
 8016b70:	4293      	cmp	r3, r2
 8016b72:	d120      	bne.n	8016bb6 <HAL_ADC_ConfigChannel+0x9aa>
 8016b74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d11a      	bne.n	8016bb6 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	4a30      	ldr	r2, [pc, #192]	; (8016c48 <HAL_ADC_ConfigChannel+0xa3c>)
 8016b86:	4293      	cmp	r3, r2
 8016b88:	d14e      	bne.n	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	4a2c      	ldr	r2, [pc, #176]	; (8016c40 <HAL_ADC_ConfigChannel+0xa34>)
 8016b90:	4293      	cmp	r3, r2
 8016b92:	d004      	beq.n	8016b9e <HAL_ADC_ConfigChannel+0x992>
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	4a2a      	ldr	r2, [pc, #168]	; (8016c44 <HAL_ADC_ConfigChannel+0xa38>)
 8016b9a:	4293      	cmp	r3, r2
 8016b9c:	d101      	bne.n	8016ba2 <HAL_ADC_ConfigChannel+0x996>
 8016b9e:	4a2c      	ldr	r2, [pc, #176]	; (8016c50 <HAL_ADC_ConfigChannel+0xa44>)
 8016ba0:	e000      	b.n	8016ba4 <HAL_ADC_ConfigChannel+0x998>
 8016ba2:	4a26      	ldr	r2, [pc, #152]	; (8016c3c <HAL_ADC_ConfigChannel+0xa30>)
 8016ba4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016ba8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016bac:	4619      	mov	r1, r3
 8016bae:	4610      	mov	r0, r2
 8016bb0:	f7fe fb17 	bl	80151e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016bb4:	e038      	b.n	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	4a29      	ldr	r2, [pc, #164]	; (8016c60 <HAL_ADC_ConfigChannel+0xa54>)
 8016bbc:	4293      	cmp	r3, r2
 8016bbe:	d133      	bne.n	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
 8016bc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016bc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d12d      	bne.n	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	4a1d      	ldr	r2, [pc, #116]	; (8016c48 <HAL_ADC_ConfigChannel+0xa3c>)
 8016bd2:	4293      	cmp	r3, r2
 8016bd4:	d128      	bne.n	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	4a19      	ldr	r2, [pc, #100]	; (8016c40 <HAL_ADC_ConfigChannel+0xa34>)
 8016bdc:	4293      	cmp	r3, r2
 8016bde:	d004      	beq.n	8016bea <HAL_ADC_ConfigChannel+0x9de>
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	4a17      	ldr	r2, [pc, #92]	; (8016c44 <HAL_ADC_ConfigChannel+0xa38>)
 8016be6:	4293      	cmp	r3, r2
 8016be8:	d101      	bne.n	8016bee <HAL_ADC_ConfigChannel+0x9e2>
 8016bea:	4a19      	ldr	r2, [pc, #100]	; (8016c50 <HAL_ADC_ConfigChannel+0xa44>)
 8016bec:	e000      	b.n	8016bf0 <HAL_ADC_ConfigChannel+0x9e4>
 8016bee:	4a13      	ldr	r2, [pc, #76]	; (8016c3c <HAL_ADC_ConfigChannel+0xa30>)
 8016bf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016bf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016bf8:	4619      	mov	r1, r3
 8016bfa:	4610      	mov	r0, r2
 8016bfc:	f7fe faf1 	bl	80151e2 <LL_ADC_SetCommonPathInternalCh>
 8016c00:	e012      	b.n	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c06:	f043 0220 	orr.w	r2, r3, #32
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8016c0e:	2301      	movs	r3, #1
 8016c10:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8016c14:	e008      	b.n	8016c28 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c1a:	f043 0220 	orr.w	r2, r3, #32
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8016c22:	2301      	movs	r3, #1
 8016c24:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	2200      	movs	r2, #0
 8016c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8016c30:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	37e4      	adds	r7, #228	; 0xe4
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd90      	pop	{r4, r7, pc}
 8016c3c:	58026300 	.word	0x58026300
 8016c40:	40022000 	.word	0x40022000
 8016c44:	40022100 	.word	0x40022100
 8016c48:	58026000 	.word	0x58026000
 8016c4c:	c7520000 	.word	0xc7520000
 8016c50:	40022300 	.word	0x40022300
 8016c54:	24000004 	.word	0x24000004
 8016c58:	053e2d63 	.word	0x053e2d63
 8016c5c:	c3210000 	.word	0xc3210000
 8016c60:	cb840000 	.word	0xcb840000

08016c64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b084      	sub	sp, #16
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	4618      	mov	r0, r3
 8016c72:	f7fe fd41 	bl	80156f8 <LL_ADC_IsEnabled>
 8016c76:	4603      	mov	r3, r0
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d16e      	bne.n	8016d5a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	689a      	ldr	r2, [r3, #8]
 8016c82:	4b38      	ldr	r3, [pc, #224]	; (8016d64 <ADC_Enable+0x100>)
 8016c84:	4013      	ands	r3, r2
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d00d      	beq.n	8016ca6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016c8e:	f043 0210 	orr.w	r2, r3, #16
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016c96:	687b      	ldr	r3, [r7, #4]
 8016c98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016c9a:	f043 0201 	orr.w	r2, r3, #1
 8016c9e:	687b      	ldr	r3, [r7, #4]
 8016ca0:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8016ca2:	2301      	movs	r3, #1
 8016ca4:	e05a      	b.n	8016d5c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	4618      	mov	r0, r3
 8016cac:	f7fe fd10 	bl	80156d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8016cb0:	f7fe fa78 	bl	80151a4 <HAL_GetTick>
 8016cb4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	4a2b      	ldr	r2, [pc, #172]	; (8016d68 <ADC_Enable+0x104>)
 8016cbc:	4293      	cmp	r3, r2
 8016cbe:	d004      	beq.n	8016cca <ADC_Enable+0x66>
 8016cc0:	687b      	ldr	r3, [r7, #4]
 8016cc2:	681b      	ldr	r3, [r3, #0]
 8016cc4:	4a29      	ldr	r2, [pc, #164]	; (8016d6c <ADC_Enable+0x108>)
 8016cc6:	4293      	cmp	r3, r2
 8016cc8:	d101      	bne.n	8016cce <ADC_Enable+0x6a>
 8016cca:	4b29      	ldr	r3, [pc, #164]	; (8016d70 <ADC_Enable+0x10c>)
 8016ccc:	e000      	b.n	8016cd0 <ADC_Enable+0x6c>
 8016cce:	4b29      	ldr	r3, [pc, #164]	; (8016d74 <ADC_Enable+0x110>)
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7fe fc93 	bl	80155fc <LL_ADC_GetMultimode>
 8016cd6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016cd8:	687b      	ldr	r3, [r7, #4]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	4a23      	ldr	r2, [pc, #140]	; (8016d6c <ADC_Enable+0x108>)
 8016cde:	4293      	cmp	r3, r2
 8016ce0:	d002      	beq.n	8016ce8 <ADC_Enable+0x84>
 8016ce2:	687b      	ldr	r3, [r7, #4]
 8016ce4:	681b      	ldr	r3, [r3, #0]
 8016ce6:	e000      	b.n	8016cea <ADC_Enable+0x86>
 8016ce8:	4b1f      	ldr	r3, [pc, #124]	; (8016d68 <ADC_Enable+0x104>)
 8016cea:	687a      	ldr	r2, [r7, #4]
 8016cec:	6812      	ldr	r2, [r2, #0]
 8016cee:	4293      	cmp	r3, r2
 8016cf0:	d02c      	beq.n	8016d4c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d130      	bne.n	8016d5a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016cf8:	e028      	b.n	8016d4c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	681b      	ldr	r3, [r3, #0]
 8016cfe:	4618      	mov	r0, r3
 8016d00:	f7fe fcfa 	bl	80156f8 <LL_ADC_IsEnabled>
 8016d04:	4603      	mov	r3, r0
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d104      	bne.n	8016d14 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	4618      	mov	r0, r3
 8016d10:	f7fe fcde 	bl	80156d0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8016d14:	f7fe fa46 	bl	80151a4 <HAL_GetTick>
 8016d18:	4602      	mov	r2, r0
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	1ad3      	subs	r3, r2, r3
 8016d1e:	2b02      	cmp	r3, #2
 8016d20:	d914      	bls.n	8016d4c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	f003 0301 	and.w	r3, r3, #1
 8016d2c:	2b01      	cmp	r3, #1
 8016d2e:	d00d      	beq.n	8016d4c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d34:	f043 0210 	orr.w	r2, r3, #16
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016d40:	f043 0201 	orr.w	r2, r3, #1
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8016d48:	2301      	movs	r3, #1
 8016d4a:	e007      	b.n	8016d5c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	681b      	ldr	r3, [r3, #0]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	f003 0301 	and.w	r3, r3, #1
 8016d56:	2b01      	cmp	r3, #1
 8016d58:	d1cf      	bne.n	8016cfa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8016d5a:	2300      	movs	r3, #0
}
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	3710      	adds	r7, #16
 8016d60:	46bd      	mov	sp, r7
 8016d62:	bd80      	pop	{r7, pc}
 8016d64:	8000003f 	.word	0x8000003f
 8016d68:	40022000 	.word	0x40022000
 8016d6c:	40022100 	.word	0x40022100
 8016d70:	40022300 	.word	0x40022300
 8016d74:	58026300 	.word	0x58026300

08016d78 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	b084      	sub	sp, #16
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016d84:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8016d86:	68fb      	ldr	r3, [r7, #12]
 8016d88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d8a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016d8e:	2b00      	cmp	r3, #0
 8016d90:	d14b      	bne.n	8016e2a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8016d92:	68fb      	ldr	r3, [r7, #12]
 8016d94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d96:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016d9a:	68fb      	ldr	r3, [r7, #12]
 8016d9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8016d9e:	68fb      	ldr	r3, [r7, #12]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	f003 0308 	and.w	r3, r3, #8
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d021      	beq.n	8016df0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	4618      	mov	r0, r3
 8016db2:	f7fe fb29 	bl	8015408 <LL_ADC_REG_IsTriggerSourceSWStart>
 8016db6:	4603      	mov	r3, r0
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d032      	beq.n	8016e22 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8016dbc:	68fb      	ldr	r3, [r7, #12]
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	68db      	ldr	r3, [r3, #12]
 8016dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d12b      	bne.n	8016e22 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016dca:	68fb      	ldr	r3, [r7, #12]
 8016dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016dce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016dd2:	68fb      	ldr	r3, [r7, #12]
 8016dd4:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016dd6:	68fb      	ldr	r3, [r7, #12]
 8016dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016dde:	2b00      	cmp	r3, #0
 8016de0:	d11f      	bne.n	8016e22 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016de6:	f043 0201 	orr.w	r2, r3, #1
 8016dea:	68fb      	ldr	r3, [r7, #12]
 8016dec:	661a      	str	r2, [r3, #96]	; 0x60
 8016dee:	e018      	b.n	8016e22 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	681b      	ldr	r3, [r3, #0]
 8016df4:	68db      	ldr	r3, [r3, #12]
 8016df6:	f003 0303 	and.w	r3, r3, #3
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d111      	bne.n	8016e22 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016dfe:	68fb      	ldr	r3, [r7, #12]
 8016e00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016e06:	68fb      	ldr	r3, [r7, #12]
 8016e08:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016e0a:	68fb      	ldr	r3, [r7, #12]
 8016e0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d105      	bne.n	8016e22 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e1a:	f043 0201 	orr.w	r2, r3, #1
 8016e1e:	68fb      	ldr	r3, [r7, #12]
 8016e20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8016e22:	68f8      	ldr	r0, [r7, #12]
 8016e24:	f7f7 f9dd 	bl	800e1e2 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8016e28:	e00e      	b.n	8016e48 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8016e2a:	68fb      	ldr	r3, [r7, #12]
 8016e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e2e:	f003 0310 	and.w	r3, r3, #16
 8016e32:	2b00      	cmp	r3, #0
 8016e34:	d003      	beq.n	8016e3e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8016e36:	68f8      	ldr	r0, [r7, #12]
 8016e38:	f7ff f9de 	bl	80161f8 <HAL_ADC_ErrorCallback>
}
 8016e3c:	e004      	b.n	8016e48 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8016e3e:	68fb      	ldr	r3, [r7, #12]
 8016e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016e44:	6878      	ldr	r0, [r7, #4]
 8016e46:	4798      	blx	r3
}
 8016e48:	bf00      	nop
 8016e4a:	3710      	adds	r7, #16
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}

08016e50 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b084      	sub	sp, #16
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e5c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8016e5e:	68f8      	ldr	r0, [r7, #12]
 8016e60:	f7ff f9b6 	bl	80161d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8016e64:	bf00      	nop
 8016e66:	3710      	adds	r7, #16
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}

08016e6c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b084      	sub	sp, #16
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e78:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016e82:	68fb      	ldr	r3, [r7, #12]
 8016e84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8016e86:	68fb      	ldr	r3, [r7, #12]
 8016e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016e8a:	f043 0204 	orr.w	r2, r3, #4
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8016e92:	68f8      	ldr	r0, [r7, #12]
 8016e94:	f7ff f9b0 	bl	80161f8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8016e98:	bf00      	nop
 8016e9a:	3710      	adds	r7, #16
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}

08016ea0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8016ea0:	b580      	push	{r7, lr}
 8016ea2:	b084      	sub	sp, #16
 8016ea4:	af00      	add	r7, sp, #0
 8016ea6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	4a6c      	ldr	r2, [pc, #432]	; (8017060 <ADC_ConfigureBoostMode+0x1c0>)
 8016eae:	4293      	cmp	r3, r2
 8016eb0:	d004      	beq.n	8016ebc <ADC_ConfigureBoostMode+0x1c>
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	4a6b      	ldr	r2, [pc, #428]	; (8017064 <ADC_ConfigureBoostMode+0x1c4>)
 8016eb8:	4293      	cmp	r3, r2
 8016eba:	d109      	bne.n	8016ed0 <ADC_ConfigureBoostMode+0x30>
 8016ebc:	4b6a      	ldr	r3, [pc, #424]	; (8017068 <ADC_ConfigureBoostMode+0x1c8>)
 8016ebe:	689b      	ldr	r3, [r3, #8]
 8016ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	bf14      	ite	ne
 8016ec8:	2301      	movne	r3, #1
 8016eca:	2300      	moveq	r3, #0
 8016ecc:	b2db      	uxtb	r3, r3
 8016ece:	e008      	b.n	8016ee2 <ADC_ConfigureBoostMode+0x42>
 8016ed0:	4b66      	ldr	r3, [pc, #408]	; (801706c <ADC_ConfigureBoostMode+0x1cc>)
 8016ed2:	689b      	ldr	r3, [r3, #8]
 8016ed4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	bf14      	ite	ne
 8016edc:	2301      	movne	r3, #1
 8016ede:	2300      	moveq	r3, #0
 8016ee0:	b2db      	uxtb	r3, r3
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d01c      	beq.n	8016f20 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8016ee6:	f004 fe95 	bl	801bc14 <HAL_RCC_GetHCLKFreq>
 8016eea:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	685b      	ldr	r3, [r3, #4]
 8016ef0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8016ef4:	d010      	beq.n	8016f18 <ADC_ConfigureBoostMode+0x78>
 8016ef6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8016efa:	d873      	bhi.n	8016fe4 <ADC_ConfigureBoostMode+0x144>
 8016efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016f00:	d002      	beq.n	8016f08 <ADC_ConfigureBoostMode+0x68>
 8016f02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016f06:	d16d      	bne.n	8016fe4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	685b      	ldr	r3, [r3, #4]
 8016f0c:	0c1b      	lsrs	r3, r3, #16
 8016f0e:	68fa      	ldr	r2, [r7, #12]
 8016f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f14:	60fb      	str	r3, [r7, #12]
        break;
 8016f16:	e068      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	089b      	lsrs	r3, r3, #2
 8016f1c:	60fb      	str	r3, [r7, #12]
        break;
 8016f1e:	e064      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8016f20:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8016f24:	f04f 0100 	mov.w	r1, #0
 8016f28:	f006 f85a 	bl	801cfe0 <HAL_RCCEx_GetPeriphCLKFreq>
 8016f2c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	685b      	ldr	r3, [r3, #4]
 8016f32:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8016f36:	d051      	beq.n	8016fdc <ADC_ConfigureBoostMode+0x13c>
 8016f38:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8016f3c:	d854      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f3e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8016f42:	d047      	beq.n	8016fd4 <ADC_ConfigureBoostMode+0x134>
 8016f44:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8016f48:	d84e      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f4a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8016f4e:	d03d      	beq.n	8016fcc <ADC_ConfigureBoostMode+0x12c>
 8016f50:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8016f54:	d848      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f56:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016f5a:	d033      	beq.n	8016fc4 <ADC_ConfigureBoostMode+0x124>
 8016f5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8016f60:	d842      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f62:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8016f66:	d029      	beq.n	8016fbc <ADC_ConfigureBoostMode+0x11c>
 8016f68:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8016f6c:	d83c      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f6e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8016f72:	d01a      	beq.n	8016faa <ADC_ConfigureBoostMode+0x10a>
 8016f74:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8016f78:	d836      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f7a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8016f7e:	d014      	beq.n	8016faa <ADC_ConfigureBoostMode+0x10a>
 8016f80:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8016f84:	d830      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016f8a:	d00e      	beq.n	8016faa <ADC_ConfigureBoostMode+0x10a>
 8016f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016f90:	d82a      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f92:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8016f96:	d008      	beq.n	8016faa <ADC_ConfigureBoostMode+0x10a>
 8016f98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8016f9c:	d824      	bhi.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
 8016f9e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8016fa2:	d002      	beq.n	8016faa <ADC_ConfigureBoostMode+0x10a>
 8016fa4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8016fa8:	d11e      	bne.n	8016fe8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	685b      	ldr	r3, [r3, #4]
 8016fae:	0c9b      	lsrs	r3, r3, #18
 8016fb0:	005b      	lsls	r3, r3, #1
 8016fb2:	68fa      	ldr	r2, [r7, #12]
 8016fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8016fb8:	60fb      	str	r3, [r7, #12]
        break;
 8016fba:	e016      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8016fbc:	68fb      	ldr	r3, [r7, #12]
 8016fbe:	091b      	lsrs	r3, r3, #4
 8016fc0:	60fb      	str	r3, [r7, #12]
        break;
 8016fc2:	e012      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	095b      	lsrs	r3, r3, #5
 8016fc8:	60fb      	str	r3, [r7, #12]
        break;
 8016fca:	e00e      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8016fcc:	68fb      	ldr	r3, [r7, #12]
 8016fce:	099b      	lsrs	r3, r3, #6
 8016fd0:	60fb      	str	r3, [r7, #12]
        break;
 8016fd2:	e00a      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8016fd4:	68fb      	ldr	r3, [r7, #12]
 8016fd6:	09db      	lsrs	r3, r3, #7
 8016fd8:	60fb      	str	r3, [r7, #12]
        break;
 8016fda:	e006      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8016fdc:	68fb      	ldr	r3, [r7, #12]
 8016fde:	0a1b      	lsrs	r3, r3, #8
 8016fe0:	60fb      	str	r3, [r7, #12]
        break;
 8016fe2:	e002      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
        break;
 8016fe4:	bf00      	nop
 8016fe6:	e000      	b.n	8016fea <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8016fe8:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 8016fea:	68fb      	ldr	r3, [r7, #12]
 8016fec:	085b      	lsrs	r3, r3, #1
 8016fee:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	4a1f      	ldr	r2, [pc, #124]	; (8017070 <ADC_ConfigureBoostMode+0x1d0>)
 8016ff4:	4293      	cmp	r3, r2
 8016ff6:	d808      	bhi.n	801700a <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8016ff8:	687b      	ldr	r3, [r7, #4]
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	689a      	ldr	r2, [r3, #8]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	681b      	ldr	r3, [r3, #0]
 8017002:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8017006:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8017008:	e025      	b.n	8017056 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	4a19      	ldr	r2, [pc, #100]	; (8017074 <ADC_ConfigureBoostMode+0x1d4>)
 801700e:	4293      	cmp	r3, r2
 8017010:	d80a      	bhi.n	8017028 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8017012:	687b      	ldr	r3, [r7, #4]
 8017014:	681b      	ldr	r3, [r3, #0]
 8017016:	689b      	ldr	r3, [r3, #8]
 8017018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	681b      	ldr	r3, [r3, #0]
 8017020:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017024:	609a      	str	r2, [r3, #8]
}
 8017026:	e016      	b.n	8017056 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	4a13      	ldr	r2, [pc, #76]	; (8017078 <ADC_ConfigureBoostMode+0x1d8>)
 801702c:	4293      	cmp	r3, r2
 801702e:	d80a      	bhi.n	8017046 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	689b      	ldr	r3, [r3, #8]
 8017036:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017042:	609a      	str	r2, [r3, #8]
}
 8017044:	e007      	b.n	8017056 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	689a      	ldr	r2, [r3, #8]
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8017054:	609a      	str	r2, [r3, #8]
}
 8017056:	bf00      	nop
 8017058:	3710      	adds	r7, #16
 801705a:	46bd      	mov	sp, r7
 801705c:	bd80      	pop	{r7, pc}
 801705e:	bf00      	nop
 8017060:	40022000 	.word	0x40022000
 8017064:	40022100 	.word	0x40022100
 8017068:	40022300 	.word	0x40022300
 801706c:	58026300 	.word	0x58026300
 8017070:	005f5e10 	.word	0x005f5e10
 8017074:	00bebc20 	.word	0x00bebc20
 8017078:	017d7840 	.word	0x017d7840

0801707c <LL_ADC_IsEnabled>:
{
 801707c:	b480      	push	{r7}
 801707e:	b083      	sub	sp, #12
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	689b      	ldr	r3, [r3, #8]
 8017088:	f003 0301 	and.w	r3, r3, #1
 801708c:	2b01      	cmp	r3, #1
 801708e:	d101      	bne.n	8017094 <LL_ADC_IsEnabled+0x18>
 8017090:	2301      	movs	r3, #1
 8017092:	e000      	b.n	8017096 <LL_ADC_IsEnabled+0x1a>
 8017094:	2300      	movs	r3, #0
}
 8017096:	4618      	mov	r0, r3
 8017098:	370c      	adds	r7, #12
 801709a:	46bd      	mov	sp, r7
 801709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a0:	4770      	bx	lr

080170a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80170a2:	b480      	push	{r7}
 80170a4:	b083      	sub	sp, #12
 80170a6:	af00      	add	r7, sp, #0
 80170a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	689b      	ldr	r3, [r3, #8]
 80170ae:	f003 0304 	and.w	r3, r3, #4
 80170b2:	2b04      	cmp	r3, #4
 80170b4:	d101      	bne.n	80170ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80170b6:	2301      	movs	r3, #1
 80170b8:	e000      	b.n	80170bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80170ba:	2300      	movs	r3, #0
}
 80170bc:	4618      	mov	r0, r3
 80170be:	370c      	adds	r7, #12
 80170c0:	46bd      	mov	sp, r7
 80170c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c6:	4770      	bx	lr

080170c8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80170c8:	b480      	push	{r7}
 80170ca:	b083      	sub	sp, #12
 80170cc:	af00      	add	r7, sp, #0
 80170ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80170d0:	bf00      	nop
 80170d2:	370c      	adds	r7, #12
 80170d4:	46bd      	mov	sp, r7
 80170d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170da:	4770      	bx	lr

080170dc <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80170dc:	b480      	push	{r7}
 80170de:	b083      	sub	sp, #12
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80170e4:	bf00      	nop
 80170e6:	370c      	adds	r7, #12
 80170e8:	46bd      	mov	sp, r7
 80170ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ee:	4770      	bx	lr

080170f0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80170f0:	b480      	push	{r7}
 80170f2:	b083      	sub	sp, #12
 80170f4:	af00      	add	r7, sp, #0
 80170f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80170f8:	bf00      	nop
 80170fa:	370c      	adds	r7, #12
 80170fc:	46bd      	mov	sp, r7
 80170fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017102:	4770      	bx	lr

08017104 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8017104:	b480      	push	{r7}
 8017106:	b083      	sub	sp, #12
 8017108:	af00      	add	r7, sp, #0
 801710a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 801710c:	bf00      	nop
 801710e:	370c      	adds	r7, #12
 8017110:	46bd      	mov	sp, r7
 8017112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017116:	4770      	bx	lr

08017118 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8017118:	b480      	push	{r7}
 801711a:	b083      	sub	sp, #12
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8017120:	bf00      	nop
 8017122:	370c      	adds	r7, #12
 8017124:	46bd      	mov	sp, r7
 8017126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801712a:	4770      	bx	lr

0801712c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 801712c:	b590      	push	{r4, r7, lr}
 801712e:	b0a3      	sub	sp, #140	; 0x8c
 8017130:	af00      	add	r7, sp, #0
 8017132:	6078      	str	r0, [r7, #4]
 8017134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017136:	2300      	movs	r3, #0
 8017138:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017142:	2b01      	cmp	r3, #1
 8017144:	d101      	bne.n	801714a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8017146:	2302      	movs	r3, #2
 8017148:	e0c1      	b.n	80172ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	2201      	movs	r2, #1
 801714e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8017152:	2300      	movs	r3, #0
 8017154:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8017156:	2300      	movs	r3, #0
 8017158:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 801715a:	687b      	ldr	r3, [r7, #4]
 801715c:	681b      	ldr	r3, [r3, #0]
 801715e:	4a5e      	ldr	r2, [pc, #376]	; (80172d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017160:	4293      	cmp	r3, r2
 8017162:	d102      	bne.n	801716a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8017164:	4b5d      	ldr	r3, [pc, #372]	; (80172dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017166:	60fb      	str	r3, [r7, #12]
 8017168:	e001      	b.n	801716e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 801716a:	2300      	movs	r3, #0
 801716c:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	2b00      	cmp	r3, #0
 8017172:	d10b      	bne.n	801718c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017178:	f043 0220 	orr.w	r2, r3, #32
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8017180:	687b      	ldr	r3, [r7, #4]
 8017182:	2200      	movs	r2, #0
 8017184:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8017188:	2301      	movs	r3, #1
 801718a:	e0a0      	b.n	80172ce <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	4618      	mov	r0, r3
 8017190:	f7ff ff87 	bl	80170a2 <LL_ADC_REG_IsConversionOngoing>
 8017194:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	4618      	mov	r0, r3
 801719e:	f7ff ff80 	bl	80170a2 <LL_ADC_REG_IsConversionOngoing>
 80171a2:	4603      	mov	r3, r0
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	f040 8081 	bne.w	80172ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80171aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d17c      	bne.n	80172ac <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	4a48      	ldr	r2, [pc, #288]	; (80172d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80171b8:	4293      	cmp	r3, r2
 80171ba:	d004      	beq.n	80171c6 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	4a46      	ldr	r2, [pc, #280]	; (80172dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80171c2:	4293      	cmp	r3, r2
 80171c4:	d101      	bne.n	80171ca <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80171c6:	4b46      	ldr	r3, [pc, #280]	; (80172e0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80171c8:	e000      	b.n	80171cc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80171ca:	4b46      	ldr	r3, [pc, #280]	; (80172e4 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80171cc:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	681b      	ldr	r3, [r3, #0]
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	d039      	beq.n	801724a <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80171d6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80171d8:	689b      	ldr	r3, [r3, #8]
 80171da:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	685b      	ldr	r3, [r3, #4]
 80171e2:	431a      	orrs	r2, r3
 80171e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80171e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	681b      	ldr	r3, [r3, #0]
 80171ec:	4a3a      	ldr	r2, [pc, #232]	; (80172d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80171ee:	4293      	cmp	r3, r2
 80171f0:	d004      	beq.n	80171fc <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	681b      	ldr	r3, [r3, #0]
 80171f6:	4a39      	ldr	r2, [pc, #228]	; (80172dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80171f8:	4293      	cmp	r3, r2
 80171fa:	d10e      	bne.n	801721a <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80171fc:	4836      	ldr	r0, [pc, #216]	; (80172d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80171fe:	f7ff ff3d 	bl	801707c <LL_ADC_IsEnabled>
 8017202:	4604      	mov	r4, r0
 8017204:	4835      	ldr	r0, [pc, #212]	; (80172dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017206:	f7ff ff39 	bl	801707c <LL_ADC_IsEnabled>
 801720a:	4603      	mov	r3, r0
 801720c:	4323      	orrs	r3, r4
 801720e:	2b00      	cmp	r3, #0
 8017210:	bf0c      	ite	eq
 8017212:	2301      	moveq	r3, #1
 8017214:	2300      	movne	r3, #0
 8017216:	b2db      	uxtb	r3, r3
 8017218:	e008      	b.n	801722c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 801721a:	4833      	ldr	r0, [pc, #204]	; (80172e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 801721c:	f7ff ff2e 	bl	801707c <LL_ADC_IsEnabled>
 8017220:	4603      	mov	r3, r0
 8017222:	2b00      	cmp	r3, #0
 8017224:	bf0c      	ite	eq
 8017226:	2301      	moveq	r3, #1
 8017228:	2300      	movne	r3, #0
 801722a:	b2db      	uxtb	r3, r3
 801722c:	2b00      	cmp	r3, #0
 801722e:	d047      	beq.n	80172c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8017230:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017232:	689a      	ldr	r2, [r3, #8]
 8017234:	4b2d      	ldr	r3, [pc, #180]	; (80172ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8017236:	4013      	ands	r3, r2
 8017238:	683a      	ldr	r2, [r7, #0]
 801723a:	6811      	ldr	r1, [r2, #0]
 801723c:	683a      	ldr	r2, [r7, #0]
 801723e:	6892      	ldr	r2, [r2, #8]
 8017240:	430a      	orrs	r2, r1
 8017242:	431a      	orrs	r2, r3
 8017244:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017246:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017248:	e03a      	b.n	80172c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 801724a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801724c:	689b      	ldr	r3, [r3, #8]
 801724e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017252:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017254:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	4a1f      	ldr	r2, [pc, #124]	; (80172d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 801725c:	4293      	cmp	r3, r2
 801725e:	d004      	beq.n	801726a <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681b      	ldr	r3, [r3, #0]
 8017264:	4a1d      	ldr	r2, [pc, #116]	; (80172dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017266:	4293      	cmp	r3, r2
 8017268:	d10e      	bne.n	8017288 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 801726a:	481b      	ldr	r0, [pc, #108]	; (80172d8 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 801726c:	f7ff ff06 	bl	801707c <LL_ADC_IsEnabled>
 8017270:	4604      	mov	r4, r0
 8017272:	481a      	ldr	r0, [pc, #104]	; (80172dc <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017274:	f7ff ff02 	bl	801707c <LL_ADC_IsEnabled>
 8017278:	4603      	mov	r3, r0
 801727a:	4323      	orrs	r3, r4
 801727c:	2b00      	cmp	r3, #0
 801727e:	bf0c      	ite	eq
 8017280:	2301      	moveq	r3, #1
 8017282:	2300      	movne	r3, #0
 8017284:	b2db      	uxtb	r3, r3
 8017286:	e008      	b.n	801729a <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8017288:	4817      	ldr	r0, [pc, #92]	; (80172e8 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 801728a:	f7ff fef7 	bl	801707c <LL_ADC_IsEnabled>
 801728e:	4603      	mov	r3, r0
 8017290:	2b00      	cmp	r3, #0
 8017292:	bf0c      	ite	eq
 8017294:	2301      	moveq	r3, #1
 8017296:	2300      	movne	r3, #0
 8017298:	b2db      	uxtb	r3, r3
 801729a:	2b00      	cmp	r3, #0
 801729c:	d010      	beq.n	80172c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801729e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80172a0:	689a      	ldr	r2, [r3, #8]
 80172a2:	4b12      	ldr	r3, [pc, #72]	; (80172ec <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80172a4:	4013      	ands	r3, r2
 80172a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80172a8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80172aa:	e009      	b.n	80172c0 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80172b0:	f043 0220 	orr.w	r2, r3, #32
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80172b8:	2301      	movs	r3, #1
 80172ba:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 80172be:	e000      	b.n	80172c2 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80172c0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2200      	movs	r2, #0
 80172c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80172ca:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80172ce:	4618      	mov	r0, r3
 80172d0:	378c      	adds	r7, #140	; 0x8c
 80172d2:	46bd      	mov	sp, r7
 80172d4:	bd90      	pop	{r4, r7, pc}
 80172d6:	bf00      	nop
 80172d8:	40022000 	.word	0x40022000
 80172dc:	40022100 	.word	0x40022100
 80172e0:	40022300 	.word	0x40022300
 80172e4:	58026300 	.word	0x58026300
 80172e8:	58026000 	.word	0x58026000
 80172ec:	fffff0e0 	.word	0xfffff0e0

080172f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80172f0:	b480      	push	{r7}
 80172f2:	b085      	sub	sp, #20
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	f003 0307 	and.w	r3, r3, #7
 80172fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017300:	4b0b      	ldr	r3, [pc, #44]	; (8017330 <__NVIC_SetPriorityGrouping+0x40>)
 8017302:	68db      	ldr	r3, [r3, #12]
 8017304:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8017306:	68ba      	ldr	r2, [r7, #8]
 8017308:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801730c:	4013      	ands	r3, r2
 801730e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017310:	68fb      	ldr	r3, [r7, #12]
 8017312:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017314:	68bb      	ldr	r3, [r7, #8]
 8017316:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8017318:	4b06      	ldr	r3, [pc, #24]	; (8017334 <__NVIC_SetPriorityGrouping+0x44>)
 801731a:	4313      	orrs	r3, r2
 801731c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801731e:	4a04      	ldr	r2, [pc, #16]	; (8017330 <__NVIC_SetPriorityGrouping+0x40>)
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	60d3      	str	r3, [r2, #12]
}
 8017324:	bf00      	nop
 8017326:	3714      	adds	r7, #20
 8017328:	46bd      	mov	sp, r7
 801732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801732e:	4770      	bx	lr
 8017330:	e000ed00 	.word	0xe000ed00
 8017334:	05fa0000 	.word	0x05fa0000

08017338 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8017338:	b480      	push	{r7}
 801733a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801733c:	4b04      	ldr	r3, [pc, #16]	; (8017350 <__NVIC_GetPriorityGrouping+0x18>)
 801733e:	68db      	ldr	r3, [r3, #12]
 8017340:	0a1b      	lsrs	r3, r3, #8
 8017342:	f003 0307 	and.w	r3, r3, #7
}
 8017346:	4618      	mov	r0, r3
 8017348:	46bd      	mov	sp, r7
 801734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801734e:	4770      	bx	lr
 8017350:	e000ed00 	.word	0xe000ed00

08017354 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017354:	b480      	push	{r7}
 8017356:	b083      	sub	sp, #12
 8017358:	af00      	add	r7, sp, #0
 801735a:	4603      	mov	r3, r0
 801735c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801735e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017362:	2b00      	cmp	r3, #0
 8017364:	db0b      	blt.n	801737e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017366:	88fb      	ldrh	r3, [r7, #6]
 8017368:	f003 021f 	and.w	r2, r3, #31
 801736c:	4907      	ldr	r1, [pc, #28]	; (801738c <__NVIC_EnableIRQ+0x38>)
 801736e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017372:	095b      	lsrs	r3, r3, #5
 8017374:	2001      	movs	r0, #1
 8017376:	fa00 f202 	lsl.w	r2, r0, r2
 801737a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801737e:	bf00      	nop
 8017380:	370c      	adds	r7, #12
 8017382:	46bd      	mov	sp, r7
 8017384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017388:	4770      	bx	lr
 801738a:	bf00      	nop
 801738c:	e000e100 	.word	0xe000e100

08017390 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8017390:	b480      	push	{r7}
 8017392:	b083      	sub	sp, #12
 8017394:	af00      	add	r7, sp, #0
 8017396:	4603      	mov	r3, r0
 8017398:	6039      	str	r1, [r7, #0]
 801739a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801739c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	db0a      	blt.n	80173ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80173a4:	683b      	ldr	r3, [r7, #0]
 80173a6:	b2da      	uxtb	r2, r3
 80173a8:	490c      	ldr	r1, [pc, #48]	; (80173dc <__NVIC_SetPriority+0x4c>)
 80173aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80173ae:	0112      	lsls	r2, r2, #4
 80173b0:	b2d2      	uxtb	r2, r2
 80173b2:	440b      	add	r3, r1
 80173b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80173b8:	e00a      	b.n	80173d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	b2da      	uxtb	r2, r3
 80173be:	4908      	ldr	r1, [pc, #32]	; (80173e0 <__NVIC_SetPriority+0x50>)
 80173c0:	88fb      	ldrh	r3, [r7, #6]
 80173c2:	f003 030f 	and.w	r3, r3, #15
 80173c6:	3b04      	subs	r3, #4
 80173c8:	0112      	lsls	r2, r2, #4
 80173ca:	b2d2      	uxtb	r2, r2
 80173cc:	440b      	add	r3, r1
 80173ce:	761a      	strb	r2, [r3, #24]
}
 80173d0:	bf00      	nop
 80173d2:	370c      	adds	r7, #12
 80173d4:	46bd      	mov	sp, r7
 80173d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80173da:	4770      	bx	lr
 80173dc:	e000e100 	.word	0xe000e100
 80173e0:	e000ed00 	.word	0xe000ed00

080173e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80173e4:	b480      	push	{r7}
 80173e6:	b089      	sub	sp, #36	; 0x24
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	60f8      	str	r0, [r7, #12]
 80173ec:	60b9      	str	r1, [r7, #8]
 80173ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	f003 0307 	and.w	r3, r3, #7
 80173f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80173f8:	69fb      	ldr	r3, [r7, #28]
 80173fa:	f1c3 0307 	rsb	r3, r3, #7
 80173fe:	2b04      	cmp	r3, #4
 8017400:	bf28      	it	cs
 8017402:	2304      	movcs	r3, #4
 8017404:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8017406:	69fb      	ldr	r3, [r7, #28]
 8017408:	3304      	adds	r3, #4
 801740a:	2b06      	cmp	r3, #6
 801740c:	d902      	bls.n	8017414 <NVIC_EncodePriority+0x30>
 801740e:	69fb      	ldr	r3, [r7, #28]
 8017410:	3b03      	subs	r3, #3
 8017412:	e000      	b.n	8017416 <NVIC_EncodePriority+0x32>
 8017414:	2300      	movs	r3, #0
 8017416:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017418:	f04f 32ff 	mov.w	r2, #4294967295
 801741c:	69bb      	ldr	r3, [r7, #24]
 801741e:	fa02 f303 	lsl.w	r3, r2, r3
 8017422:	43da      	mvns	r2, r3
 8017424:	68bb      	ldr	r3, [r7, #8]
 8017426:	401a      	ands	r2, r3
 8017428:	697b      	ldr	r3, [r7, #20]
 801742a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801742c:	f04f 31ff 	mov.w	r1, #4294967295
 8017430:	697b      	ldr	r3, [r7, #20]
 8017432:	fa01 f303 	lsl.w	r3, r1, r3
 8017436:	43d9      	mvns	r1, r3
 8017438:	687b      	ldr	r3, [r7, #4]
 801743a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801743c:	4313      	orrs	r3, r2
         );
}
 801743e:	4618      	mov	r0, r3
 8017440:	3724      	adds	r7, #36	; 0x24
 8017442:	46bd      	mov	sp, r7
 8017444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017448:	4770      	bx	lr
	...

0801744c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 801744c:	b480      	push	{r7}
 801744e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8017450:	f3bf 8f4f 	dsb	sy
}
 8017454:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017456:	4b06      	ldr	r3, [pc, #24]	; (8017470 <__NVIC_SystemReset+0x24>)
 8017458:	68db      	ldr	r3, [r3, #12]
 801745a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801745e:	4904      	ldr	r1, [pc, #16]	; (8017470 <__NVIC_SystemReset+0x24>)
 8017460:	4b04      	ldr	r3, [pc, #16]	; (8017474 <__NVIC_SystemReset+0x28>)
 8017462:	4313      	orrs	r3, r2
 8017464:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8017466:	f3bf 8f4f 	dsb	sy
}
 801746a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 801746c:	bf00      	nop
 801746e:	e7fd      	b.n	801746c <__NVIC_SystemReset+0x20>
 8017470:	e000ed00 	.word	0xe000ed00
 8017474:	05fa0004 	.word	0x05fa0004

08017478 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017478:	b580      	push	{r7, lr}
 801747a:	b082      	sub	sp, #8
 801747c:	af00      	add	r7, sp, #0
 801747e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	3b01      	subs	r3, #1
 8017484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017488:	d301      	bcc.n	801748e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801748a:	2301      	movs	r3, #1
 801748c:	e00f      	b.n	80174ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801748e:	4a0a      	ldr	r2, [pc, #40]	; (80174b8 <SysTick_Config+0x40>)
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	3b01      	subs	r3, #1
 8017494:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8017496:	210f      	movs	r1, #15
 8017498:	f04f 30ff 	mov.w	r0, #4294967295
 801749c:	f7ff ff78 	bl	8017390 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80174a0:	4b05      	ldr	r3, [pc, #20]	; (80174b8 <SysTick_Config+0x40>)
 80174a2:	2200      	movs	r2, #0
 80174a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80174a6:	4b04      	ldr	r3, [pc, #16]	; (80174b8 <SysTick_Config+0x40>)
 80174a8:	2207      	movs	r2, #7
 80174aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80174ac:	2300      	movs	r3, #0
}
 80174ae:	4618      	mov	r0, r3
 80174b0:	3708      	adds	r7, #8
 80174b2:	46bd      	mov	sp, r7
 80174b4:	bd80      	pop	{r7, pc}
 80174b6:	bf00      	nop
 80174b8:	e000e010 	.word	0xe000e010

080174bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80174c4:	6878      	ldr	r0, [r7, #4]
 80174c6:	f7ff ff13 	bl	80172f0 <__NVIC_SetPriorityGrouping>
}
 80174ca:	bf00      	nop
 80174cc:	3708      	adds	r7, #8
 80174ce:	46bd      	mov	sp, r7
 80174d0:	bd80      	pop	{r7, pc}

080174d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80174d2:	b580      	push	{r7, lr}
 80174d4:	b086      	sub	sp, #24
 80174d6:	af00      	add	r7, sp, #0
 80174d8:	4603      	mov	r3, r0
 80174da:	60b9      	str	r1, [r7, #8]
 80174dc:	607a      	str	r2, [r7, #4]
 80174de:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80174e0:	f7ff ff2a 	bl	8017338 <__NVIC_GetPriorityGrouping>
 80174e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80174e6:	687a      	ldr	r2, [r7, #4]
 80174e8:	68b9      	ldr	r1, [r7, #8]
 80174ea:	6978      	ldr	r0, [r7, #20]
 80174ec:	f7ff ff7a 	bl	80173e4 <NVIC_EncodePriority>
 80174f0:	4602      	mov	r2, r0
 80174f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80174f6:	4611      	mov	r1, r2
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7ff ff49 	bl	8017390 <__NVIC_SetPriority>
}
 80174fe:	bf00      	nop
 8017500:	3718      	adds	r7, #24
 8017502:	46bd      	mov	sp, r7
 8017504:	bd80      	pop	{r7, pc}

08017506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017506:	b580      	push	{r7, lr}
 8017508:	b082      	sub	sp, #8
 801750a:	af00      	add	r7, sp, #0
 801750c:	4603      	mov	r3, r0
 801750e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017510:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017514:	4618      	mov	r0, r3
 8017516:	f7ff ff1d 	bl	8017354 <__NVIC_EnableIRQ>
}
 801751a:	bf00      	nop
 801751c:	3708      	adds	r7, #8
 801751e:	46bd      	mov	sp, r7
 8017520:	bd80      	pop	{r7, pc}

08017522 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8017522:	b580      	push	{r7, lr}
 8017524:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8017526:	f7ff ff91 	bl	801744c <__NVIC_SystemReset>

0801752a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801752a:	b580      	push	{r7, lr}
 801752c:	b082      	sub	sp, #8
 801752e:	af00      	add	r7, sp, #0
 8017530:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8017532:	6878      	ldr	r0, [r7, #4]
 8017534:	f7ff ffa0 	bl	8017478 <SysTick_Config>
 8017538:	4603      	mov	r3, r0
}
 801753a:	4618      	mov	r0, r3
 801753c:	3708      	adds	r7, #8
 801753e:	46bd      	mov	sp, r7
 8017540:	bd80      	pop	{r7, pc}
	...

08017544 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017544:	b580      	push	{r7, lr}
 8017546:	b086      	sub	sp, #24
 8017548:	af00      	add	r7, sp, #0
 801754a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 801754c:	f7fd fe2a 	bl	80151a4 <HAL_GetTick>
 8017550:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d101      	bne.n	801755c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8017558:	2301      	movs	r3, #1
 801755a:	e314      	b.n	8017b86 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	681b      	ldr	r3, [r3, #0]
 8017560:	4a66      	ldr	r2, [pc, #408]	; (80176fc <HAL_DMA_Init+0x1b8>)
 8017562:	4293      	cmp	r3, r2
 8017564:	d04a      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	681b      	ldr	r3, [r3, #0]
 801756a:	4a65      	ldr	r2, [pc, #404]	; (8017700 <HAL_DMA_Init+0x1bc>)
 801756c:	4293      	cmp	r3, r2
 801756e:	d045      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	4a63      	ldr	r2, [pc, #396]	; (8017704 <HAL_DMA_Init+0x1c0>)
 8017576:	4293      	cmp	r3, r2
 8017578:	d040      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	4a62      	ldr	r2, [pc, #392]	; (8017708 <HAL_DMA_Init+0x1c4>)
 8017580:	4293      	cmp	r3, r2
 8017582:	d03b      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	681b      	ldr	r3, [r3, #0]
 8017588:	4a60      	ldr	r2, [pc, #384]	; (801770c <HAL_DMA_Init+0x1c8>)
 801758a:	4293      	cmp	r3, r2
 801758c:	d036      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	4a5f      	ldr	r2, [pc, #380]	; (8017710 <HAL_DMA_Init+0x1cc>)
 8017594:	4293      	cmp	r3, r2
 8017596:	d031      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 8017598:	687b      	ldr	r3, [r7, #4]
 801759a:	681b      	ldr	r3, [r3, #0]
 801759c:	4a5d      	ldr	r2, [pc, #372]	; (8017714 <HAL_DMA_Init+0x1d0>)
 801759e:	4293      	cmp	r3, r2
 80175a0:	d02c      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175a2:	687b      	ldr	r3, [r7, #4]
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	4a5c      	ldr	r2, [pc, #368]	; (8017718 <HAL_DMA_Init+0x1d4>)
 80175a8:	4293      	cmp	r3, r2
 80175aa:	d027      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	681b      	ldr	r3, [r3, #0]
 80175b0:	4a5a      	ldr	r2, [pc, #360]	; (801771c <HAL_DMA_Init+0x1d8>)
 80175b2:	4293      	cmp	r3, r2
 80175b4:	d022      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	4a59      	ldr	r2, [pc, #356]	; (8017720 <HAL_DMA_Init+0x1dc>)
 80175bc:	4293      	cmp	r3, r2
 80175be:	d01d      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	681b      	ldr	r3, [r3, #0]
 80175c4:	4a57      	ldr	r2, [pc, #348]	; (8017724 <HAL_DMA_Init+0x1e0>)
 80175c6:	4293      	cmp	r3, r2
 80175c8:	d018      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	681b      	ldr	r3, [r3, #0]
 80175ce:	4a56      	ldr	r2, [pc, #344]	; (8017728 <HAL_DMA_Init+0x1e4>)
 80175d0:	4293      	cmp	r3, r2
 80175d2:	d013      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	681b      	ldr	r3, [r3, #0]
 80175d8:	4a54      	ldr	r2, [pc, #336]	; (801772c <HAL_DMA_Init+0x1e8>)
 80175da:	4293      	cmp	r3, r2
 80175dc:	d00e      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175de:	687b      	ldr	r3, [r7, #4]
 80175e0:	681b      	ldr	r3, [r3, #0]
 80175e2:	4a53      	ldr	r2, [pc, #332]	; (8017730 <HAL_DMA_Init+0x1ec>)
 80175e4:	4293      	cmp	r3, r2
 80175e6:	d009      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	4a51      	ldr	r2, [pc, #324]	; (8017734 <HAL_DMA_Init+0x1f0>)
 80175ee:	4293      	cmp	r3, r2
 80175f0:	d004      	beq.n	80175fc <HAL_DMA_Init+0xb8>
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	681b      	ldr	r3, [r3, #0]
 80175f6:	4a50      	ldr	r2, [pc, #320]	; (8017738 <HAL_DMA_Init+0x1f4>)
 80175f8:	4293      	cmp	r3, r2
 80175fa:	d101      	bne.n	8017600 <HAL_DMA_Init+0xbc>
 80175fc:	2301      	movs	r3, #1
 80175fe:	e000      	b.n	8017602 <HAL_DMA_Init+0xbe>
 8017600:	2300      	movs	r3, #0
 8017602:	2b00      	cmp	r3, #0
 8017604:	f000 813c 	beq.w	8017880 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017608:	687b      	ldr	r3, [r7, #4]
 801760a:	2202      	movs	r2, #2
 801760c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	2200      	movs	r2, #0
 8017614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	681b      	ldr	r3, [r3, #0]
 801761c:	4a37      	ldr	r2, [pc, #220]	; (80176fc <HAL_DMA_Init+0x1b8>)
 801761e:	4293      	cmp	r3, r2
 8017620:	d04a      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	681b      	ldr	r3, [r3, #0]
 8017626:	4a36      	ldr	r2, [pc, #216]	; (8017700 <HAL_DMA_Init+0x1bc>)
 8017628:	4293      	cmp	r3, r2
 801762a:	d045      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	681b      	ldr	r3, [r3, #0]
 8017630:	4a34      	ldr	r2, [pc, #208]	; (8017704 <HAL_DMA_Init+0x1c0>)
 8017632:	4293      	cmp	r3, r2
 8017634:	d040      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	681b      	ldr	r3, [r3, #0]
 801763a:	4a33      	ldr	r2, [pc, #204]	; (8017708 <HAL_DMA_Init+0x1c4>)
 801763c:	4293      	cmp	r3, r2
 801763e:	d03b      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	4a31      	ldr	r2, [pc, #196]	; (801770c <HAL_DMA_Init+0x1c8>)
 8017646:	4293      	cmp	r3, r2
 8017648:	d036      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	4a30      	ldr	r2, [pc, #192]	; (8017710 <HAL_DMA_Init+0x1cc>)
 8017650:	4293      	cmp	r3, r2
 8017652:	d031      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	4a2e      	ldr	r2, [pc, #184]	; (8017714 <HAL_DMA_Init+0x1d0>)
 801765a:	4293      	cmp	r3, r2
 801765c:	d02c      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	681b      	ldr	r3, [r3, #0]
 8017662:	4a2d      	ldr	r2, [pc, #180]	; (8017718 <HAL_DMA_Init+0x1d4>)
 8017664:	4293      	cmp	r3, r2
 8017666:	d027      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	681b      	ldr	r3, [r3, #0]
 801766c:	4a2b      	ldr	r2, [pc, #172]	; (801771c <HAL_DMA_Init+0x1d8>)
 801766e:	4293      	cmp	r3, r2
 8017670:	d022      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	4a2a      	ldr	r2, [pc, #168]	; (8017720 <HAL_DMA_Init+0x1dc>)
 8017678:	4293      	cmp	r3, r2
 801767a:	d01d      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	681b      	ldr	r3, [r3, #0]
 8017680:	4a28      	ldr	r2, [pc, #160]	; (8017724 <HAL_DMA_Init+0x1e0>)
 8017682:	4293      	cmp	r3, r2
 8017684:	d018      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	4a27      	ldr	r2, [pc, #156]	; (8017728 <HAL_DMA_Init+0x1e4>)
 801768c:	4293      	cmp	r3, r2
 801768e:	d013      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	681b      	ldr	r3, [r3, #0]
 8017694:	4a25      	ldr	r2, [pc, #148]	; (801772c <HAL_DMA_Init+0x1e8>)
 8017696:	4293      	cmp	r3, r2
 8017698:	d00e      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 801769a:	687b      	ldr	r3, [r7, #4]
 801769c:	681b      	ldr	r3, [r3, #0]
 801769e:	4a24      	ldr	r2, [pc, #144]	; (8017730 <HAL_DMA_Init+0x1ec>)
 80176a0:	4293      	cmp	r3, r2
 80176a2:	d009      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	681b      	ldr	r3, [r3, #0]
 80176a8:	4a22      	ldr	r2, [pc, #136]	; (8017734 <HAL_DMA_Init+0x1f0>)
 80176aa:	4293      	cmp	r3, r2
 80176ac:	d004      	beq.n	80176b8 <HAL_DMA_Init+0x174>
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	4a21      	ldr	r2, [pc, #132]	; (8017738 <HAL_DMA_Init+0x1f4>)
 80176b4:	4293      	cmp	r3, r2
 80176b6:	d108      	bne.n	80176ca <HAL_DMA_Init+0x186>
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	681a      	ldr	r2, [r3, #0]
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	681b      	ldr	r3, [r3, #0]
 80176c2:	f022 0201 	bic.w	r2, r2, #1
 80176c6:	601a      	str	r2, [r3, #0]
 80176c8:	e007      	b.n	80176da <HAL_DMA_Init+0x196>
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	681b      	ldr	r3, [r3, #0]
 80176ce:	681a      	ldr	r2, [r3, #0]
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	681b      	ldr	r3, [r3, #0]
 80176d4:	f022 0201 	bic.w	r2, r2, #1
 80176d8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80176da:	e02f      	b.n	801773c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80176dc:	f7fd fd62 	bl	80151a4 <HAL_GetTick>
 80176e0:	4602      	mov	r2, r0
 80176e2:	693b      	ldr	r3, [r7, #16]
 80176e4:	1ad3      	subs	r3, r2, r3
 80176e6:	2b05      	cmp	r3, #5
 80176e8:	d928      	bls.n	801773c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	2220      	movs	r2, #32
 80176ee:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80176f0:	687b      	ldr	r3, [r7, #4]
 80176f2:	2203      	movs	r2, #3
 80176f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80176f8:	2301      	movs	r3, #1
 80176fa:	e244      	b.n	8017b86 <HAL_DMA_Init+0x642>
 80176fc:	40020010 	.word	0x40020010
 8017700:	40020028 	.word	0x40020028
 8017704:	40020040 	.word	0x40020040
 8017708:	40020058 	.word	0x40020058
 801770c:	40020070 	.word	0x40020070
 8017710:	40020088 	.word	0x40020088
 8017714:	400200a0 	.word	0x400200a0
 8017718:	400200b8 	.word	0x400200b8
 801771c:	40020410 	.word	0x40020410
 8017720:	40020428 	.word	0x40020428
 8017724:	40020440 	.word	0x40020440
 8017728:	40020458 	.word	0x40020458
 801772c:	40020470 	.word	0x40020470
 8017730:	40020488 	.word	0x40020488
 8017734:	400204a0 	.word	0x400204a0
 8017738:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	f003 0301 	and.w	r3, r3, #1
 8017746:	2b00      	cmp	r3, #0
 8017748:	d1c8      	bne.n	80176dc <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801774a:	687b      	ldr	r3, [r7, #4]
 801774c:	681b      	ldr	r3, [r3, #0]
 801774e:	681b      	ldr	r3, [r3, #0]
 8017750:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8017752:	697a      	ldr	r2, [r7, #20]
 8017754:	4b84      	ldr	r3, [pc, #528]	; (8017968 <HAL_DMA_Init+0x424>)
 8017756:	4013      	ands	r3, r2
 8017758:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 801775a:	687b      	ldr	r3, [r7, #4]
 801775c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8017762:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	691b      	ldr	r3, [r3, #16]
 8017768:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801776e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017770:	687b      	ldr	r3, [r7, #4]
 8017772:	699b      	ldr	r3, [r3, #24]
 8017774:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801777a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	6a1b      	ldr	r3, [r3, #32]
 8017780:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8017782:	697a      	ldr	r2, [r7, #20]
 8017784:	4313      	orrs	r3, r2
 8017786:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801778c:	2b04      	cmp	r3, #4
 801778e:	d107      	bne.n	80177a0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017798:	4313      	orrs	r3, r2
 801779a:	697a      	ldr	r2, [r7, #20]
 801779c:	4313      	orrs	r3, r2
 801779e:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	685b      	ldr	r3, [r3, #4]
 80177a4:	2b28      	cmp	r3, #40	; 0x28
 80177a6:	d903      	bls.n	80177b0 <HAL_DMA_Init+0x26c>
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	685b      	ldr	r3, [r3, #4]
 80177ac:	2b2e      	cmp	r3, #46	; 0x2e
 80177ae:	d91f      	bls.n	80177f0 <HAL_DMA_Init+0x2ac>
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	685b      	ldr	r3, [r3, #4]
 80177b4:	2b3e      	cmp	r3, #62	; 0x3e
 80177b6:	d903      	bls.n	80177c0 <HAL_DMA_Init+0x27c>
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	685b      	ldr	r3, [r3, #4]
 80177bc:	2b42      	cmp	r3, #66	; 0x42
 80177be:	d917      	bls.n	80177f0 <HAL_DMA_Init+0x2ac>
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	685b      	ldr	r3, [r3, #4]
 80177c4:	2b46      	cmp	r3, #70	; 0x46
 80177c6:	d903      	bls.n	80177d0 <HAL_DMA_Init+0x28c>
 80177c8:	687b      	ldr	r3, [r7, #4]
 80177ca:	685b      	ldr	r3, [r3, #4]
 80177cc:	2b48      	cmp	r3, #72	; 0x48
 80177ce:	d90f      	bls.n	80177f0 <HAL_DMA_Init+0x2ac>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	685b      	ldr	r3, [r3, #4]
 80177d4:	2b4e      	cmp	r3, #78	; 0x4e
 80177d6:	d903      	bls.n	80177e0 <HAL_DMA_Init+0x29c>
 80177d8:	687b      	ldr	r3, [r7, #4]
 80177da:	685b      	ldr	r3, [r3, #4]
 80177dc:	2b52      	cmp	r3, #82	; 0x52
 80177de:	d907      	bls.n	80177f0 <HAL_DMA_Init+0x2ac>
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	685b      	ldr	r3, [r3, #4]
 80177e4:	2b73      	cmp	r3, #115	; 0x73
 80177e6:	d905      	bls.n	80177f4 <HAL_DMA_Init+0x2b0>
 80177e8:	687b      	ldr	r3, [r7, #4]
 80177ea:	685b      	ldr	r3, [r3, #4]
 80177ec:	2b77      	cmp	r3, #119	; 0x77
 80177ee:	d801      	bhi.n	80177f4 <HAL_DMA_Init+0x2b0>
 80177f0:	2301      	movs	r3, #1
 80177f2:	e000      	b.n	80177f6 <HAL_DMA_Init+0x2b2>
 80177f4:	2300      	movs	r3, #0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d003      	beq.n	8017802 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80177fa:	697b      	ldr	r3, [r7, #20]
 80177fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017800:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	697a      	ldr	r2, [r7, #20]
 8017808:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	695b      	ldr	r3, [r3, #20]
 8017810:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	f023 0307 	bic.w	r3, r3, #7
 8017818:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801781a:	687b      	ldr	r3, [r7, #4]
 801781c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801781e:	697a      	ldr	r2, [r7, #20]
 8017820:	4313      	orrs	r3, r2
 8017822:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017828:	2b04      	cmp	r3, #4
 801782a:	d117      	bne.n	801785c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017830:	697a      	ldr	r2, [r7, #20]
 8017832:	4313      	orrs	r3, r2
 8017834:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801783a:	2b00      	cmp	r3, #0
 801783c:	d00e      	beq.n	801785c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f001 fdcc 	bl	80193dc <DMA_CheckFifoParam>
 8017844:	4603      	mov	r3, r0
 8017846:	2b00      	cmp	r3, #0
 8017848:	d008      	beq.n	801785c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	2240      	movs	r2, #64	; 0x40
 801784e:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	2201      	movs	r2, #1
 8017854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8017858:	2301      	movs	r3, #1
 801785a:	e194      	b.n	8017b86 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	697a      	ldr	r2, [r7, #20]
 8017862:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017864:	6878      	ldr	r0, [r7, #4]
 8017866:	f001 fd07 	bl	8019278 <DMA_CalcBaseAndBitshift>
 801786a:	4603      	mov	r3, r0
 801786c:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017872:	f003 031f 	and.w	r3, r3, #31
 8017876:	223f      	movs	r2, #63	; 0x3f
 8017878:	409a      	lsls	r2, r3
 801787a:	68bb      	ldr	r3, [r7, #8]
 801787c:	609a      	str	r2, [r3, #8]
 801787e:	e0ca      	b.n	8017a16 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	4a39      	ldr	r2, [pc, #228]	; (801796c <HAL_DMA_Init+0x428>)
 8017886:	4293      	cmp	r3, r2
 8017888:	d022      	beq.n	80178d0 <HAL_DMA_Init+0x38c>
 801788a:	687b      	ldr	r3, [r7, #4]
 801788c:	681b      	ldr	r3, [r3, #0]
 801788e:	4a38      	ldr	r2, [pc, #224]	; (8017970 <HAL_DMA_Init+0x42c>)
 8017890:	4293      	cmp	r3, r2
 8017892:	d01d      	beq.n	80178d0 <HAL_DMA_Init+0x38c>
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	4a36      	ldr	r2, [pc, #216]	; (8017974 <HAL_DMA_Init+0x430>)
 801789a:	4293      	cmp	r3, r2
 801789c:	d018      	beq.n	80178d0 <HAL_DMA_Init+0x38c>
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	4a35      	ldr	r2, [pc, #212]	; (8017978 <HAL_DMA_Init+0x434>)
 80178a4:	4293      	cmp	r3, r2
 80178a6:	d013      	beq.n	80178d0 <HAL_DMA_Init+0x38c>
 80178a8:	687b      	ldr	r3, [r7, #4]
 80178aa:	681b      	ldr	r3, [r3, #0]
 80178ac:	4a33      	ldr	r2, [pc, #204]	; (801797c <HAL_DMA_Init+0x438>)
 80178ae:	4293      	cmp	r3, r2
 80178b0:	d00e      	beq.n	80178d0 <HAL_DMA_Init+0x38c>
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	681b      	ldr	r3, [r3, #0]
 80178b6:	4a32      	ldr	r2, [pc, #200]	; (8017980 <HAL_DMA_Init+0x43c>)
 80178b8:	4293      	cmp	r3, r2
 80178ba:	d009      	beq.n	80178d0 <HAL_DMA_Init+0x38c>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	4a30      	ldr	r2, [pc, #192]	; (8017984 <HAL_DMA_Init+0x440>)
 80178c2:	4293      	cmp	r3, r2
 80178c4:	d004      	beq.n	80178d0 <HAL_DMA_Init+0x38c>
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	681b      	ldr	r3, [r3, #0]
 80178ca:	4a2f      	ldr	r2, [pc, #188]	; (8017988 <HAL_DMA_Init+0x444>)
 80178cc:	4293      	cmp	r3, r2
 80178ce:	d101      	bne.n	80178d4 <HAL_DMA_Init+0x390>
 80178d0:	2301      	movs	r3, #1
 80178d2:	e000      	b.n	80178d6 <HAL_DMA_Init+0x392>
 80178d4:	2300      	movs	r3, #0
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f000 8094 	beq.w	8017a04 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	681b      	ldr	r3, [r3, #0]
 80178e0:	4a22      	ldr	r2, [pc, #136]	; (801796c <HAL_DMA_Init+0x428>)
 80178e2:	4293      	cmp	r3, r2
 80178e4:	d021      	beq.n	801792a <HAL_DMA_Init+0x3e6>
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	4a21      	ldr	r2, [pc, #132]	; (8017970 <HAL_DMA_Init+0x42c>)
 80178ec:	4293      	cmp	r3, r2
 80178ee:	d01c      	beq.n	801792a <HAL_DMA_Init+0x3e6>
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	681b      	ldr	r3, [r3, #0]
 80178f4:	4a1f      	ldr	r2, [pc, #124]	; (8017974 <HAL_DMA_Init+0x430>)
 80178f6:	4293      	cmp	r3, r2
 80178f8:	d017      	beq.n	801792a <HAL_DMA_Init+0x3e6>
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	4a1e      	ldr	r2, [pc, #120]	; (8017978 <HAL_DMA_Init+0x434>)
 8017900:	4293      	cmp	r3, r2
 8017902:	d012      	beq.n	801792a <HAL_DMA_Init+0x3e6>
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	4a1c      	ldr	r2, [pc, #112]	; (801797c <HAL_DMA_Init+0x438>)
 801790a:	4293      	cmp	r3, r2
 801790c:	d00d      	beq.n	801792a <HAL_DMA_Init+0x3e6>
 801790e:	687b      	ldr	r3, [r7, #4]
 8017910:	681b      	ldr	r3, [r3, #0]
 8017912:	4a1b      	ldr	r2, [pc, #108]	; (8017980 <HAL_DMA_Init+0x43c>)
 8017914:	4293      	cmp	r3, r2
 8017916:	d008      	beq.n	801792a <HAL_DMA_Init+0x3e6>
 8017918:	687b      	ldr	r3, [r7, #4]
 801791a:	681b      	ldr	r3, [r3, #0]
 801791c:	4a19      	ldr	r2, [pc, #100]	; (8017984 <HAL_DMA_Init+0x440>)
 801791e:	4293      	cmp	r3, r2
 8017920:	d003      	beq.n	801792a <HAL_DMA_Init+0x3e6>
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	4a18      	ldr	r2, [pc, #96]	; (8017988 <HAL_DMA_Init+0x444>)
 8017928:	4293      	cmp	r3, r2
 801792a:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2202      	movs	r2, #2
 8017930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2200      	movs	r2, #0
 8017938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	681b      	ldr	r3, [r3, #0]
 8017942:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8017944:	697a      	ldr	r2, [r7, #20]
 8017946:	4b11      	ldr	r3, [pc, #68]	; (801798c <HAL_DMA_Init+0x448>)
 8017948:	4013      	ands	r3, r2
 801794a:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	689b      	ldr	r3, [r3, #8]
 8017950:	2b40      	cmp	r3, #64	; 0x40
 8017952:	d01d      	beq.n	8017990 <HAL_DMA_Init+0x44c>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	689b      	ldr	r3, [r3, #8]
 8017958:	2b80      	cmp	r3, #128	; 0x80
 801795a:	d102      	bne.n	8017962 <HAL_DMA_Init+0x41e>
 801795c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017960:	e017      	b.n	8017992 <HAL_DMA_Init+0x44e>
 8017962:	2300      	movs	r3, #0
 8017964:	e015      	b.n	8017992 <HAL_DMA_Init+0x44e>
 8017966:	bf00      	nop
 8017968:	fe10803f 	.word	0xfe10803f
 801796c:	58025408 	.word	0x58025408
 8017970:	5802541c 	.word	0x5802541c
 8017974:	58025430 	.word	0x58025430
 8017978:	58025444 	.word	0x58025444
 801797c:	58025458 	.word	0x58025458
 8017980:	5802546c 	.word	0x5802546c
 8017984:	58025480 	.word	0x58025480
 8017988:	58025494 	.word	0x58025494
 801798c:	fffe000f 	.word	0xfffe000f
 8017990:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017992:	687a      	ldr	r2, [r7, #4]
 8017994:	68d2      	ldr	r2, [r2, #12]
 8017996:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017998:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	691b      	ldr	r3, [r3, #16]
 801799e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80179a0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	695b      	ldr	r3, [r3, #20]
 80179a6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80179a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	699b      	ldr	r3, [r3, #24]
 80179ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80179b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	69db      	ldr	r3, [r3, #28]
 80179b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80179b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	6a1b      	ldr	r3, [r3, #32]
 80179be:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80179c0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80179c2:	697a      	ldr	r2, [r7, #20]
 80179c4:	4313      	orrs	r3, r2
 80179c6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80179c8:	687b      	ldr	r3, [r7, #4]
 80179ca:	681b      	ldr	r3, [r3, #0]
 80179cc:	697a      	ldr	r2, [r7, #20]
 80179ce:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80179d0:	687b      	ldr	r3, [r7, #4]
 80179d2:	681b      	ldr	r3, [r3, #0]
 80179d4:	461a      	mov	r2, r3
 80179d6:	4b6e      	ldr	r3, [pc, #440]	; (8017b90 <HAL_DMA_Init+0x64c>)
 80179d8:	4413      	add	r3, r2
 80179da:	4a6e      	ldr	r2, [pc, #440]	; (8017b94 <HAL_DMA_Init+0x650>)
 80179dc:	fba2 2303 	umull	r2, r3, r2, r3
 80179e0:	091b      	lsrs	r3, r3, #4
 80179e2:	009a      	lsls	r2, r3, #2
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80179e8:	6878      	ldr	r0, [r7, #4]
 80179ea:	f001 fc45 	bl	8019278 <DMA_CalcBaseAndBitshift>
 80179ee:	4603      	mov	r3, r0
 80179f0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179f6:	f003 031f 	and.w	r3, r3, #31
 80179fa:	2201      	movs	r2, #1
 80179fc:	409a      	lsls	r2, r3
 80179fe:	68fb      	ldr	r3, [r7, #12]
 8017a00:	605a      	str	r2, [r3, #4]
 8017a02:	e008      	b.n	8017a16 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017a04:	687b      	ldr	r3, [r7, #4]
 8017a06:	2240      	movs	r2, #64	; 0x40
 8017a08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2203      	movs	r2, #3
 8017a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8017a12:	2301      	movs	r3, #1
 8017a14:	e0b7      	b.n	8017b86 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017a16:	687b      	ldr	r3, [r7, #4]
 8017a18:	681b      	ldr	r3, [r3, #0]
 8017a1a:	4a5f      	ldr	r2, [pc, #380]	; (8017b98 <HAL_DMA_Init+0x654>)
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	d072      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a20:	687b      	ldr	r3, [r7, #4]
 8017a22:	681b      	ldr	r3, [r3, #0]
 8017a24:	4a5d      	ldr	r2, [pc, #372]	; (8017b9c <HAL_DMA_Init+0x658>)
 8017a26:	4293      	cmp	r3, r2
 8017a28:	d06d      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a2a:	687b      	ldr	r3, [r7, #4]
 8017a2c:	681b      	ldr	r3, [r3, #0]
 8017a2e:	4a5c      	ldr	r2, [pc, #368]	; (8017ba0 <HAL_DMA_Init+0x65c>)
 8017a30:	4293      	cmp	r3, r2
 8017a32:	d068      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	681b      	ldr	r3, [r3, #0]
 8017a38:	4a5a      	ldr	r2, [pc, #360]	; (8017ba4 <HAL_DMA_Init+0x660>)
 8017a3a:	4293      	cmp	r3, r2
 8017a3c:	d063      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	4a59      	ldr	r2, [pc, #356]	; (8017ba8 <HAL_DMA_Init+0x664>)
 8017a44:	4293      	cmp	r3, r2
 8017a46:	d05e      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	681b      	ldr	r3, [r3, #0]
 8017a4c:	4a57      	ldr	r2, [pc, #348]	; (8017bac <HAL_DMA_Init+0x668>)
 8017a4e:	4293      	cmp	r3, r2
 8017a50:	d059      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	681b      	ldr	r3, [r3, #0]
 8017a56:	4a56      	ldr	r2, [pc, #344]	; (8017bb0 <HAL_DMA_Init+0x66c>)
 8017a58:	4293      	cmp	r3, r2
 8017a5a:	d054      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	4a54      	ldr	r2, [pc, #336]	; (8017bb4 <HAL_DMA_Init+0x670>)
 8017a62:	4293      	cmp	r3, r2
 8017a64:	d04f      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a66:	687b      	ldr	r3, [r7, #4]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	4a53      	ldr	r2, [pc, #332]	; (8017bb8 <HAL_DMA_Init+0x674>)
 8017a6c:	4293      	cmp	r3, r2
 8017a6e:	d04a      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	681b      	ldr	r3, [r3, #0]
 8017a74:	4a51      	ldr	r2, [pc, #324]	; (8017bbc <HAL_DMA_Init+0x678>)
 8017a76:	4293      	cmp	r3, r2
 8017a78:	d045      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	4a50      	ldr	r2, [pc, #320]	; (8017bc0 <HAL_DMA_Init+0x67c>)
 8017a80:	4293      	cmp	r3, r2
 8017a82:	d040      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	4a4e      	ldr	r2, [pc, #312]	; (8017bc4 <HAL_DMA_Init+0x680>)
 8017a8a:	4293      	cmp	r3, r2
 8017a8c:	d03b      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	681b      	ldr	r3, [r3, #0]
 8017a92:	4a4d      	ldr	r2, [pc, #308]	; (8017bc8 <HAL_DMA_Init+0x684>)
 8017a94:	4293      	cmp	r3, r2
 8017a96:	d036      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	4a4b      	ldr	r2, [pc, #300]	; (8017bcc <HAL_DMA_Init+0x688>)
 8017a9e:	4293      	cmp	r3, r2
 8017aa0:	d031      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	4a4a      	ldr	r2, [pc, #296]	; (8017bd0 <HAL_DMA_Init+0x68c>)
 8017aa8:	4293      	cmp	r3, r2
 8017aaa:	d02c      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	4a48      	ldr	r2, [pc, #288]	; (8017bd4 <HAL_DMA_Init+0x690>)
 8017ab2:	4293      	cmp	r3, r2
 8017ab4:	d027      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	681b      	ldr	r3, [r3, #0]
 8017aba:	4a47      	ldr	r2, [pc, #284]	; (8017bd8 <HAL_DMA_Init+0x694>)
 8017abc:	4293      	cmp	r3, r2
 8017abe:	d022      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	681b      	ldr	r3, [r3, #0]
 8017ac4:	4a45      	ldr	r2, [pc, #276]	; (8017bdc <HAL_DMA_Init+0x698>)
 8017ac6:	4293      	cmp	r3, r2
 8017ac8:	d01d      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	681b      	ldr	r3, [r3, #0]
 8017ace:	4a44      	ldr	r2, [pc, #272]	; (8017be0 <HAL_DMA_Init+0x69c>)
 8017ad0:	4293      	cmp	r3, r2
 8017ad2:	d018      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	681b      	ldr	r3, [r3, #0]
 8017ad8:	4a42      	ldr	r2, [pc, #264]	; (8017be4 <HAL_DMA_Init+0x6a0>)
 8017ada:	4293      	cmp	r3, r2
 8017adc:	d013      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	4a41      	ldr	r2, [pc, #260]	; (8017be8 <HAL_DMA_Init+0x6a4>)
 8017ae4:	4293      	cmp	r3, r2
 8017ae6:	d00e      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	4a3f      	ldr	r2, [pc, #252]	; (8017bec <HAL_DMA_Init+0x6a8>)
 8017aee:	4293      	cmp	r3, r2
 8017af0:	d009      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	4a3e      	ldr	r2, [pc, #248]	; (8017bf0 <HAL_DMA_Init+0x6ac>)
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d004      	beq.n	8017b06 <HAL_DMA_Init+0x5c2>
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	4a3c      	ldr	r2, [pc, #240]	; (8017bf4 <HAL_DMA_Init+0x6b0>)
 8017b02:	4293      	cmp	r3, r2
 8017b04:	d101      	bne.n	8017b0a <HAL_DMA_Init+0x5c6>
 8017b06:	2301      	movs	r3, #1
 8017b08:	e000      	b.n	8017b0c <HAL_DMA_Init+0x5c8>
 8017b0a:	2300      	movs	r3, #0
 8017b0c:	2b00      	cmp	r3, #0
 8017b0e:	d032      	beq.n	8017b76 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017b10:	6878      	ldr	r0, [r7, #4]
 8017b12:	f001 fcdf 	bl	80194d4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	689b      	ldr	r3, [r3, #8]
 8017b1a:	2b80      	cmp	r3, #128	; 0x80
 8017b1c:	d102      	bne.n	8017b24 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	2200      	movs	r2, #0
 8017b22:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	685a      	ldr	r2, [r3, #4]
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017b2c:	b2d2      	uxtb	r2, r2
 8017b2e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017b30:	687b      	ldr	r3, [r7, #4]
 8017b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017b34:	687a      	ldr	r2, [r7, #4]
 8017b36:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017b38:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	685b      	ldr	r3, [r3, #4]
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d010      	beq.n	8017b64 <HAL_DMA_Init+0x620>
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	685b      	ldr	r3, [r3, #4]
 8017b46:	2b08      	cmp	r3, #8
 8017b48:	d80c      	bhi.n	8017b64 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017b4a:	6878      	ldr	r0, [r7, #4]
 8017b4c:	f001 fd5c 	bl	8019608 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b54:	2200      	movs	r2, #0
 8017b56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b5c:	687a      	ldr	r2, [r7, #4]
 8017b5e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8017b60:	605a      	str	r2, [r3, #4]
 8017b62:	e008      	b.n	8017b76 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	2200      	movs	r2, #0
 8017b68:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8017b70:	687b      	ldr	r3, [r7, #4]
 8017b72:	2200      	movs	r2, #0
 8017b74:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017b76:	687b      	ldr	r3, [r7, #4]
 8017b78:	2200      	movs	r2, #0
 8017b7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8017b7c:	687b      	ldr	r3, [r7, #4]
 8017b7e:	2201      	movs	r2, #1
 8017b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8017b84:	2300      	movs	r3, #0
}
 8017b86:	4618      	mov	r0, r3
 8017b88:	3718      	adds	r7, #24
 8017b8a:	46bd      	mov	sp, r7
 8017b8c:	bd80      	pop	{r7, pc}
 8017b8e:	bf00      	nop
 8017b90:	a7fdabf8 	.word	0xa7fdabf8
 8017b94:	cccccccd 	.word	0xcccccccd
 8017b98:	40020010 	.word	0x40020010
 8017b9c:	40020028 	.word	0x40020028
 8017ba0:	40020040 	.word	0x40020040
 8017ba4:	40020058 	.word	0x40020058
 8017ba8:	40020070 	.word	0x40020070
 8017bac:	40020088 	.word	0x40020088
 8017bb0:	400200a0 	.word	0x400200a0
 8017bb4:	400200b8 	.word	0x400200b8
 8017bb8:	40020410 	.word	0x40020410
 8017bbc:	40020428 	.word	0x40020428
 8017bc0:	40020440 	.word	0x40020440
 8017bc4:	40020458 	.word	0x40020458
 8017bc8:	40020470 	.word	0x40020470
 8017bcc:	40020488 	.word	0x40020488
 8017bd0:	400204a0 	.word	0x400204a0
 8017bd4:	400204b8 	.word	0x400204b8
 8017bd8:	58025408 	.word	0x58025408
 8017bdc:	5802541c 	.word	0x5802541c
 8017be0:	58025430 	.word	0x58025430
 8017be4:	58025444 	.word	0x58025444
 8017be8:	58025458 	.word	0x58025458
 8017bec:	5802546c 	.word	0x5802546c
 8017bf0:	58025480 	.word	0x58025480
 8017bf4:	58025494 	.word	0x58025494

08017bf8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017bf8:	b580      	push	{r7, lr}
 8017bfa:	b086      	sub	sp, #24
 8017bfc:	af00      	add	r7, sp, #0
 8017bfe:	60f8      	str	r0, [r7, #12]
 8017c00:	60b9      	str	r1, [r7, #8]
 8017c02:	607a      	str	r2, [r7, #4]
 8017c04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017c06:	2300      	movs	r3, #0
 8017c08:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017c0a:	68fb      	ldr	r3, [r7, #12]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d101      	bne.n	8017c14 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8017c10:	2301      	movs	r3, #1
 8017c12:	e226      	b.n	8018062 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8017c14:	68fb      	ldr	r3, [r7, #12]
 8017c16:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017c1a:	2b01      	cmp	r3, #1
 8017c1c:	d101      	bne.n	8017c22 <HAL_DMA_Start_IT+0x2a>
 8017c1e:	2302      	movs	r3, #2
 8017c20:	e21f      	b.n	8018062 <HAL_DMA_Start_IT+0x46a>
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	2201      	movs	r2, #1
 8017c26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8017c2a:	68fb      	ldr	r3, [r7, #12]
 8017c2c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017c30:	b2db      	uxtb	r3, r3
 8017c32:	2b01      	cmp	r3, #1
 8017c34:	f040 820a 	bne.w	801804c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017c38:	68fb      	ldr	r3, [r7, #12]
 8017c3a:	2202      	movs	r2, #2
 8017c3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017c40:	68fb      	ldr	r3, [r7, #12]
 8017c42:	2200      	movs	r2, #0
 8017c44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	4a68      	ldr	r2, [pc, #416]	; (8017dec <HAL_DMA_Start_IT+0x1f4>)
 8017c4c:	4293      	cmp	r3, r2
 8017c4e:	d04a      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017c50:	68fb      	ldr	r3, [r7, #12]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a66      	ldr	r2, [pc, #408]	; (8017df0 <HAL_DMA_Start_IT+0x1f8>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d045      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017c5a:	68fb      	ldr	r3, [r7, #12]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	4a65      	ldr	r2, [pc, #404]	; (8017df4 <HAL_DMA_Start_IT+0x1fc>)
 8017c60:	4293      	cmp	r3, r2
 8017c62:	d040      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017c64:	68fb      	ldr	r3, [r7, #12]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	4a63      	ldr	r2, [pc, #396]	; (8017df8 <HAL_DMA_Start_IT+0x200>)
 8017c6a:	4293      	cmp	r3, r2
 8017c6c:	d03b      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017c6e:	68fb      	ldr	r3, [r7, #12]
 8017c70:	681b      	ldr	r3, [r3, #0]
 8017c72:	4a62      	ldr	r2, [pc, #392]	; (8017dfc <HAL_DMA_Start_IT+0x204>)
 8017c74:	4293      	cmp	r3, r2
 8017c76:	d036      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017c78:	68fb      	ldr	r3, [r7, #12]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	4a60      	ldr	r2, [pc, #384]	; (8017e00 <HAL_DMA_Start_IT+0x208>)
 8017c7e:	4293      	cmp	r3, r2
 8017c80:	d031      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017c82:	68fb      	ldr	r3, [r7, #12]
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	4a5f      	ldr	r2, [pc, #380]	; (8017e04 <HAL_DMA_Start_IT+0x20c>)
 8017c88:	4293      	cmp	r3, r2
 8017c8a:	d02c      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017c8c:	68fb      	ldr	r3, [r7, #12]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	4a5d      	ldr	r2, [pc, #372]	; (8017e08 <HAL_DMA_Start_IT+0x210>)
 8017c92:	4293      	cmp	r3, r2
 8017c94:	d027      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017c96:	68fb      	ldr	r3, [r7, #12]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	4a5c      	ldr	r2, [pc, #368]	; (8017e0c <HAL_DMA_Start_IT+0x214>)
 8017c9c:	4293      	cmp	r3, r2
 8017c9e:	d022      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017ca0:	68fb      	ldr	r3, [r7, #12]
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	4a5a      	ldr	r2, [pc, #360]	; (8017e10 <HAL_DMA_Start_IT+0x218>)
 8017ca6:	4293      	cmp	r3, r2
 8017ca8:	d01d      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017caa:	68fb      	ldr	r3, [r7, #12]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	4a59      	ldr	r2, [pc, #356]	; (8017e14 <HAL_DMA_Start_IT+0x21c>)
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	d018      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	4a57      	ldr	r2, [pc, #348]	; (8017e18 <HAL_DMA_Start_IT+0x220>)
 8017cba:	4293      	cmp	r3, r2
 8017cbc:	d013      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017cbe:	68fb      	ldr	r3, [r7, #12]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	4a56      	ldr	r2, [pc, #344]	; (8017e1c <HAL_DMA_Start_IT+0x224>)
 8017cc4:	4293      	cmp	r3, r2
 8017cc6:	d00e      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017cc8:	68fb      	ldr	r3, [r7, #12]
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	4a54      	ldr	r2, [pc, #336]	; (8017e20 <HAL_DMA_Start_IT+0x228>)
 8017cce:	4293      	cmp	r3, r2
 8017cd0:	d009      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017cd2:	68fb      	ldr	r3, [r7, #12]
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	4a53      	ldr	r2, [pc, #332]	; (8017e24 <HAL_DMA_Start_IT+0x22c>)
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	d004      	beq.n	8017ce6 <HAL_DMA_Start_IT+0xee>
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	4a51      	ldr	r2, [pc, #324]	; (8017e28 <HAL_DMA_Start_IT+0x230>)
 8017ce2:	4293      	cmp	r3, r2
 8017ce4:	d108      	bne.n	8017cf8 <HAL_DMA_Start_IT+0x100>
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	681b      	ldr	r3, [r3, #0]
 8017cea:	681a      	ldr	r2, [r3, #0]
 8017cec:	68fb      	ldr	r3, [r7, #12]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	f022 0201 	bic.w	r2, r2, #1
 8017cf4:	601a      	str	r2, [r3, #0]
 8017cf6:	e007      	b.n	8017d08 <HAL_DMA_Start_IT+0x110>
 8017cf8:	68fb      	ldr	r3, [r7, #12]
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	681a      	ldr	r2, [r3, #0]
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	681b      	ldr	r3, [r3, #0]
 8017d02:	f022 0201 	bic.w	r2, r2, #1
 8017d06:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017d08:	683b      	ldr	r3, [r7, #0]
 8017d0a:	687a      	ldr	r2, [r7, #4]
 8017d0c:	68b9      	ldr	r1, [r7, #8]
 8017d0e:	68f8      	ldr	r0, [r7, #12]
 8017d10:	f001 f906 	bl	8018f20 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	4a34      	ldr	r2, [pc, #208]	; (8017dec <HAL_DMA_Start_IT+0x1f4>)
 8017d1a:	4293      	cmp	r3, r2
 8017d1c:	d04a      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d1e:	68fb      	ldr	r3, [r7, #12]
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	4a33      	ldr	r2, [pc, #204]	; (8017df0 <HAL_DMA_Start_IT+0x1f8>)
 8017d24:	4293      	cmp	r3, r2
 8017d26:	d045      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d28:	68fb      	ldr	r3, [r7, #12]
 8017d2a:	681b      	ldr	r3, [r3, #0]
 8017d2c:	4a31      	ldr	r2, [pc, #196]	; (8017df4 <HAL_DMA_Start_IT+0x1fc>)
 8017d2e:	4293      	cmp	r3, r2
 8017d30:	d040      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d32:	68fb      	ldr	r3, [r7, #12]
 8017d34:	681b      	ldr	r3, [r3, #0]
 8017d36:	4a30      	ldr	r2, [pc, #192]	; (8017df8 <HAL_DMA_Start_IT+0x200>)
 8017d38:	4293      	cmp	r3, r2
 8017d3a:	d03b      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d3c:	68fb      	ldr	r3, [r7, #12]
 8017d3e:	681b      	ldr	r3, [r3, #0]
 8017d40:	4a2e      	ldr	r2, [pc, #184]	; (8017dfc <HAL_DMA_Start_IT+0x204>)
 8017d42:	4293      	cmp	r3, r2
 8017d44:	d036      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	681b      	ldr	r3, [r3, #0]
 8017d4a:	4a2d      	ldr	r2, [pc, #180]	; (8017e00 <HAL_DMA_Start_IT+0x208>)
 8017d4c:	4293      	cmp	r3, r2
 8017d4e:	d031      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	681b      	ldr	r3, [r3, #0]
 8017d54:	4a2b      	ldr	r2, [pc, #172]	; (8017e04 <HAL_DMA_Start_IT+0x20c>)
 8017d56:	4293      	cmp	r3, r2
 8017d58:	d02c      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	681b      	ldr	r3, [r3, #0]
 8017d5e:	4a2a      	ldr	r2, [pc, #168]	; (8017e08 <HAL_DMA_Start_IT+0x210>)
 8017d60:	4293      	cmp	r3, r2
 8017d62:	d027      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	681b      	ldr	r3, [r3, #0]
 8017d68:	4a28      	ldr	r2, [pc, #160]	; (8017e0c <HAL_DMA_Start_IT+0x214>)
 8017d6a:	4293      	cmp	r3, r2
 8017d6c:	d022      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	4a27      	ldr	r2, [pc, #156]	; (8017e10 <HAL_DMA_Start_IT+0x218>)
 8017d74:	4293      	cmp	r3, r2
 8017d76:	d01d      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d78:	68fb      	ldr	r3, [r7, #12]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	4a25      	ldr	r2, [pc, #148]	; (8017e14 <HAL_DMA_Start_IT+0x21c>)
 8017d7e:	4293      	cmp	r3, r2
 8017d80:	d018      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d82:	68fb      	ldr	r3, [r7, #12]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	4a24      	ldr	r2, [pc, #144]	; (8017e18 <HAL_DMA_Start_IT+0x220>)
 8017d88:	4293      	cmp	r3, r2
 8017d8a:	d013      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	4a22      	ldr	r2, [pc, #136]	; (8017e1c <HAL_DMA_Start_IT+0x224>)
 8017d92:	4293      	cmp	r3, r2
 8017d94:	d00e      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017d96:	68fb      	ldr	r3, [r7, #12]
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	4a21      	ldr	r2, [pc, #132]	; (8017e20 <HAL_DMA_Start_IT+0x228>)
 8017d9c:	4293      	cmp	r3, r2
 8017d9e:	d009      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	4a1f      	ldr	r2, [pc, #124]	; (8017e24 <HAL_DMA_Start_IT+0x22c>)
 8017da6:	4293      	cmp	r3, r2
 8017da8:	d004      	beq.n	8017db4 <HAL_DMA_Start_IT+0x1bc>
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	4a1e      	ldr	r2, [pc, #120]	; (8017e28 <HAL_DMA_Start_IT+0x230>)
 8017db0:	4293      	cmp	r3, r2
 8017db2:	d101      	bne.n	8017db8 <HAL_DMA_Start_IT+0x1c0>
 8017db4:	2301      	movs	r3, #1
 8017db6:	e000      	b.n	8017dba <HAL_DMA_Start_IT+0x1c2>
 8017db8:	2300      	movs	r3, #0
 8017dba:	2b00      	cmp	r3, #0
 8017dbc:	d036      	beq.n	8017e2c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8017dbe:	68fb      	ldr	r3, [r7, #12]
 8017dc0:	681b      	ldr	r3, [r3, #0]
 8017dc2:	681b      	ldr	r3, [r3, #0]
 8017dc4:	f023 021e 	bic.w	r2, r3, #30
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f042 0216 	orr.w	r2, r2, #22
 8017dd0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017dd2:	68fb      	ldr	r3, [r7, #12]
 8017dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d03e      	beq.n	8017e58 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	681a      	ldr	r2, [r3, #0]
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	f042 0208 	orr.w	r2, r2, #8
 8017de8:	601a      	str	r2, [r3, #0]
 8017dea:	e035      	b.n	8017e58 <HAL_DMA_Start_IT+0x260>
 8017dec:	40020010 	.word	0x40020010
 8017df0:	40020028 	.word	0x40020028
 8017df4:	40020040 	.word	0x40020040
 8017df8:	40020058 	.word	0x40020058
 8017dfc:	40020070 	.word	0x40020070
 8017e00:	40020088 	.word	0x40020088
 8017e04:	400200a0 	.word	0x400200a0
 8017e08:	400200b8 	.word	0x400200b8
 8017e0c:	40020410 	.word	0x40020410
 8017e10:	40020428 	.word	0x40020428
 8017e14:	40020440 	.word	0x40020440
 8017e18:	40020458 	.word	0x40020458
 8017e1c:	40020470 	.word	0x40020470
 8017e20:	40020488 	.word	0x40020488
 8017e24:	400204a0 	.word	0x400204a0
 8017e28:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	681b      	ldr	r3, [r3, #0]
 8017e32:	f023 020e 	bic.w	r2, r3, #14
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	f042 020a 	orr.w	r2, r2, #10
 8017e3e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d007      	beq.n	8017e58 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	681a      	ldr	r2, [r3, #0]
 8017e4e:	68fb      	ldr	r3, [r7, #12]
 8017e50:	681b      	ldr	r3, [r3, #0]
 8017e52:	f042 0204 	orr.w	r2, r2, #4
 8017e56:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017e58:	68fb      	ldr	r3, [r7, #12]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	4a83      	ldr	r2, [pc, #524]	; (801806c <HAL_DMA_Start_IT+0x474>)
 8017e5e:	4293      	cmp	r3, r2
 8017e60:	d072      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	681b      	ldr	r3, [r3, #0]
 8017e66:	4a82      	ldr	r2, [pc, #520]	; (8018070 <HAL_DMA_Start_IT+0x478>)
 8017e68:	4293      	cmp	r3, r2
 8017e6a:	d06d      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	681b      	ldr	r3, [r3, #0]
 8017e70:	4a80      	ldr	r2, [pc, #512]	; (8018074 <HAL_DMA_Start_IT+0x47c>)
 8017e72:	4293      	cmp	r3, r2
 8017e74:	d068      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017e76:	68fb      	ldr	r3, [r7, #12]
 8017e78:	681b      	ldr	r3, [r3, #0]
 8017e7a:	4a7f      	ldr	r2, [pc, #508]	; (8018078 <HAL_DMA_Start_IT+0x480>)
 8017e7c:	4293      	cmp	r3, r2
 8017e7e:	d063      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	4a7d      	ldr	r2, [pc, #500]	; (801807c <HAL_DMA_Start_IT+0x484>)
 8017e86:	4293      	cmp	r3, r2
 8017e88:	d05e      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017e8a:	68fb      	ldr	r3, [r7, #12]
 8017e8c:	681b      	ldr	r3, [r3, #0]
 8017e8e:	4a7c      	ldr	r2, [pc, #496]	; (8018080 <HAL_DMA_Start_IT+0x488>)
 8017e90:	4293      	cmp	r3, r2
 8017e92:	d059      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	4a7a      	ldr	r2, [pc, #488]	; (8018084 <HAL_DMA_Start_IT+0x48c>)
 8017e9a:	4293      	cmp	r3, r2
 8017e9c:	d054      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017e9e:	68fb      	ldr	r3, [r7, #12]
 8017ea0:	681b      	ldr	r3, [r3, #0]
 8017ea2:	4a79      	ldr	r2, [pc, #484]	; (8018088 <HAL_DMA_Start_IT+0x490>)
 8017ea4:	4293      	cmp	r3, r2
 8017ea6:	d04f      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	681b      	ldr	r3, [r3, #0]
 8017eac:	4a77      	ldr	r2, [pc, #476]	; (801808c <HAL_DMA_Start_IT+0x494>)
 8017eae:	4293      	cmp	r3, r2
 8017eb0:	d04a      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017eb2:	68fb      	ldr	r3, [r7, #12]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	4a76      	ldr	r2, [pc, #472]	; (8018090 <HAL_DMA_Start_IT+0x498>)
 8017eb8:	4293      	cmp	r3, r2
 8017eba:	d045      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	4a74      	ldr	r2, [pc, #464]	; (8018094 <HAL_DMA_Start_IT+0x49c>)
 8017ec2:	4293      	cmp	r3, r2
 8017ec4:	d040      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	681b      	ldr	r3, [r3, #0]
 8017eca:	4a73      	ldr	r2, [pc, #460]	; (8018098 <HAL_DMA_Start_IT+0x4a0>)
 8017ecc:	4293      	cmp	r3, r2
 8017ece:	d03b      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	4a71      	ldr	r2, [pc, #452]	; (801809c <HAL_DMA_Start_IT+0x4a4>)
 8017ed6:	4293      	cmp	r3, r2
 8017ed8:	d036      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	681b      	ldr	r3, [r3, #0]
 8017ede:	4a70      	ldr	r2, [pc, #448]	; (80180a0 <HAL_DMA_Start_IT+0x4a8>)
 8017ee0:	4293      	cmp	r3, r2
 8017ee2:	d031      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017ee4:	68fb      	ldr	r3, [r7, #12]
 8017ee6:	681b      	ldr	r3, [r3, #0]
 8017ee8:	4a6e      	ldr	r2, [pc, #440]	; (80180a4 <HAL_DMA_Start_IT+0x4ac>)
 8017eea:	4293      	cmp	r3, r2
 8017eec:	d02c      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	681b      	ldr	r3, [r3, #0]
 8017ef2:	4a6d      	ldr	r2, [pc, #436]	; (80180a8 <HAL_DMA_Start_IT+0x4b0>)
 8017ef4:	4293      	cmp	r3, r2
 8017ef6:	d027      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	4a6b      	ldr	r2, [pc, #428]	; (80180ac <HAL_DMA_Start_IT+0x4b4>)
 8017efe:	4293      	cmp	r3, r2
 8017f00:	d022      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	681b      	ldr	r3, [r3, #0]
 8017f06:	4a6a      	ldr	r2, [pc, #424]	; (80180b0 <HAL_DMA_Start_IT+0x4b8>)
 8017f08:	4293      	cmp	r3, r2
 8017f0a:	d01d      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017f0c:	68fb      	ldr	r3, [r7, #12]
 8017f0e:	681b      	ldr	r3, [r3, #0]
 8017f10:	4a68      	ldr	r2, [pc, #416]	; (80180b4 <HAL_DMA_Start_IT+0x4bc>)
 8017f12:	4293      	cmp	r3, r2
 8017f14:	d018      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017f16:	68fb      	ldr	r3, [r7, #12]
 8017f18:	681b      	ldr	r3, [r3, #0]
 8017f1a:	4a67      	ldr	r2, [pc, #412]	; (80180b8 <HAL_DMA_Start_IT+0x4c0>)
 8017f1c:	4293      	cmp	r3, r2
 8017f1e:	d013      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	681b      	ldr	r3, [r3, #0]
 8017f24:	4a65      	ldr	r2, [pc, #404]	; (80180bc <HAL_DMA_Start_IT+0x4c4>)
 8017f26:	4293      	cmp	r3, r2
 8017f28:	d00e      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	4a64      	ldr	r2, [pc, #400]	; (80180c0 <HAL_DMA_Start_IT+0x4c8>)
 8017f30:	4293      	cmp	r3, r2
 8017f32:	d009      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4a62      	ldr	r2, [pc, #392]	; (80180c4 <HAL_DMA_Start_IT+0x4cc>)
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d004      	beq.n	8017f48 <HAL_DMA_Start_IT+0x350>
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	4a61      	ldr	r2, [pc, #388]	; (80180c8 <HAL_DMA_Start_IT+0x4d0>)
 8017f44:	4293      	cmp	r3, r2
 8017f46:	d101      	bne.n	8017f4c <HAL_DMA_Start_IT+0x354>
 8017f48:	2301      	movs	r3, #1
 8017f4a:	e000      	b.n	8017f4e <HAL_DMA_Start_IT+0x356>
 8017f4c:	2300      	movs	r3, #0
 8017f4e:	2b00      	cmp	r3, #0
 8017f50:	d01a      	beq.n	8017f88 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d007      	beq.n	8017f70 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017f64:	681a      	ldr	r2, [r3, #0]
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017f6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f6e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d007      	beq.n	8017f88 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f7c:	681a      	ldr	r2, [r3, #0]
 8017f7e:	68fb      	ldr	r3, [r7, #12]
 8017f80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017f86:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	4a37      	ldr	r2, [pc, #220]	; (801806c <HAL_DMA_Start_IT+0x474>)
 8017f8e:	4293      	cmp	r3, r2
 8017f90:	d04a      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	4a36      	ldr	r2, [pc, #216]	; (8018070 <HAL_DMA_Start_IT+0x478>)
 8017f98:	4293      	cmp	r3, r2
 8017f9a:	d045      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	4a34      	ldr	r2, [pc, #208]	; (8018074 <HAL_DMA_Start_IT+0x47c>)
 8017fa2:	4293      	cmp	r3, r2
 8017fa4:	d040      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	681b      	ldr	r3, [r3, #0]
 8017faa:	4a33      	ldr	r2, [pc, #204]	; (8018078 <HAL_DMA_Start_IT+0x480>)
 8017fac:	4293      	cmp	r3, r2
 8017fae:	d03b      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	4a31      	ldr	r2, [pc, #196]	; (801807c <HAL_DMA_Start_IT+0x484>)
 8017fb6:	4293      	cmp	r3, r2
 8017fb8:	d036      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	681b      	ldr	r3, [r3, #0]
 8017fbe:	4a30      	ldr	r2, [pc, #192]	; (8018080 <HAL_DMA_Start_IT+0x488>)
 8017fc0:	4293      	cmp	r3, r2
 8017fc2:	d031      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017fc4:	68fb      	ldr	r3, [r7, #12]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	4a2e      	ldr	r2, [pc, #184]	; (8018084 <HAL_DMA_Start_IT+0x48c>)
 8017fca:	4293      	cmp	r3, r2
 8017fcc:	d02c      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017fce:	68fb      	ldr	r3, [r7, #12]
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	4a2d      	ldr	r2, [pc, #180]	; (8018088 <HAL_DMA_Start_IT+0x490>)
 8017fd4:	4293      	cmp	r3, r2
 8017fd6:	d027      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017fd8:	68fb      	ldr	r3, [r7, #12]
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	4a2b      	ldr	r2, [pc, #172]	; (801808c <HAL_DMA_Start_IT+0x494>)
 8017fde:	4293      	cmp	r3, r2
 8017fe0:	d022      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017fe2:	68fb      	ldr	r3, [r7, #12]
 8017fe4:	681b      	ldr	r3, [r3, #0]
 8017fe6:	4a2a      	ldr	r2, [pc, #168]	; (8018090 <HAL_DMA_Start_IT+0x498>)
 8017fe8:	4293      	cmp	r3, r2
 8017fea:	d01d      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017fec:	68fb      	ldr	r3, [r7, #12]
 8017fee:	681b      	ldr	r3, [r3, #0]
 8017ff0:	4a28      	ldr	r2, [pc, #160]	; (8018094 <HAL_DMA_Start_IT+0x49c>)
 8017ff2:	4293      	cmp	r3, r2
 8017ff4:	d018      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	4a27      	ldr	r2, [pc, #156]	; (8018098 <HAL_DMA_Start_IT+0x4a0>)
 8017ffc:	4293      	cmp	r3, r2
 8017ffe:	d013      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8018000:	68fb      	ldr	r3, [r7, #12]
 8018002:	681b      	ldr	r3, [r3, #0]
 8018004:	4a25      	ldr	r2, [pc, #148]	; (801809c <HAL_DMA_Start_IT+0x4a4>)
 8018006:	4293      	cmp	r3, r2
 8018008:	d00e      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 801800a:	68fb      	ldr	r3, [r7, #12]
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	4a24      	ldr	r2, [pc, #144]	; (80180a0 <HAL_DMA_Start_IT+0x4a8>)
 8018010:	4293      	cmp	r3, r2
 8018012:	d009      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	681b      	ldr	r3, [r3, #0]
 8018018:	4a22      	ldr	r2, [pc, #136]	; (80180a4 <HAL_DMA_Start_IT+0x4ac>)
 801801a:	4293      	cmp	r3, r2
 801801c:	d004      	beq.n	8018028 <HAL_DMA_Start_IT+0x430>
 801801e:	68fb      	ldr	r3, [r7, #12]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	4a21      	ldr	r2, [pc, #132]	; (80180a8 <HAL_DMA_Start_IT+0x4b0>)
 8018024:	4293      	cmp	r3, r2
 8018026:	d108      	bne.n	801803a <HAL_DMA_Start_IT+0x442>
 8018028:	68fb      	ldr	r3, [r7, #12]
 801802a:	681b      	ldr	r3, [r3, #0]
 801802c:	681a      	ldr	r2, [r3, #0]
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	f042 0201 	orr.w	r2, r2, #1
 8018036:	601a      	str	r2, [r3, #0]
 8018038:	e012      	b.n	8018060 <HAL_DMA_Start_IT+0x468>
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	681a      	ldr	r2, [r3, #0]
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	681b      	ldr	r3, [r3, #0]
 8018044:	f042 0201 	orr.w	r2, r2, #1
 8018048:	601a      	str	r2, [r3, #0]
 801804a:	e009      	b.n	8018060 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018052:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	2200      	movs	r2, #0
 8018058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 801805c:	2301      	movs	r3, #1
 801805e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8018060:	7dfb      	ldrb	r3, [r7, #23]
}
 8018062:	4618      	mov	r0, r3
 8018064:	3718      	adds	r7, #24
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}
 801806a:	bf00      	nop
 801806c:	40020010 	.word	0x40020010
 8018070:	40020028 	.word	0x40020028
 8018074:	40020040 	.word	0x40020040
 8018078:	40020058 	.word	0x40020058
 801807c:	40020070 	.word	0x40020070
 8018080:	40020088 	.word	0x40020088
 8018084:	400200a0 	.word	0x400200a0
 8018088:	400200b8 	.word	0x400200b8
 801808c:	40020410 	.word	0x40020410
 8018090:	40020428 	.word	0x40020428
 8018094:	40020440 	.word	0x40020440
 8018098:	40020458 	.word	0x40020458
 801809c:	40020470 	.word	0x40020470
 80180a0:	40020488 	.word	0x40020488
 80180a4:	400204a0 	.word	0x400204a0
 80180a8:	400204b8 	.word	0x400204b8
 80180ac:	58025408 	.word	0x58025408
 80180b0:	5802541c 	.word	0x5802541c
 80180b4:	58025430 	.word	0x58025430
 80180b8:	58025444 	.word	0x58025444
 80180bc:	58025458 	.word	0x58025458
 80180c0:	5802546c 	.word	0x5802546c
 80180c4:	58025480 	.word	0x58025480
 80180c8:	58025494 	.word	0x58025494

080180cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b08a      	sub	sp, #40	; 0x28
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80180d4:	2300      	movs	r3, #0
 80180d6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80180d8:	4b67      	ldr	r3, [pc, #412]	; (8018278 <HAL_DMA_IRQHandler+0x1ac>)
 80180da:	681b      	ldr	r3, [r3, #0]
 80180dc:	4a67      	ldr	r2, [pc, #412]	; (801827c <HAL_DMA_IRQHandler+0x1b0>)
 80180de:	fba2 2303 	umull	r2, r3, r2, r3
 80180e2:	0a9b      	lsrs	r3, r3, #10
 80180e4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180ea:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80180f0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80180f2:	6a3b      	ldr	r3, [r7, #32]
 80180f4:	681b      	ldr	r3, [r3, #0]
 80180f6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80180f8:	69fb      	ldr	r3, [r7, #28]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80180fe:	687b      	ldr	r3, [r7, #4]
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	4a5f      	ldr	r2, [pc, #380]	; (8018280 <HAL_DMA_IRQHandler+0x1b4>)
 8018104:	4293      	cmp	r3, r2
 8018106:	d04a      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	4a5d      	ldr	r2, [pc, #372]	; (8018284 <HAL_DMA_IRQHandler+0x1b8>)
 801810e:	4293      	cmp	r3, r2
 8018110:	d045      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	4a5c      	ldr	r2, [pc, #368]	; (8018288 <HAL_DMA_IRQHandler+0x1bc>)
 8018118:	4293      	cmp	r3, r2
 801811a:	d040      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 801811c:	687b      	ldr	r3, [r7, #4]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	4a5a      	ldr	r2, [pc, #360]	; (801828c <HAL_DMA_IRQHandler+0x1c0>)
 8018122:	4293      	cmp	r3, r2
 8018124:	d03b      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018126:	687b      	ldr	r3, [r7, #4]
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	4a59      	ldr	r2, [pc, #356]	; (8018290 <HAL_DMA_IRQHandler+0x1c4>)
 801812c:	4293      	cmp	r3, r2
 801812e:	d036      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018130:	687b      	ldr	r3, [r7, #4]
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	4a57      	ldr	r2, [pc, #348]	; (8018294 <HAL_DMA_IRQHandler+0x1c8>)
 8018136:	4293      	cmp	r3, r2
 8018138:	d031      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 801813a:	687b      	ldr	r3, [r7, #4]
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	4a56      	ldr	r2, [pc, #344]	; (8018298 <HAL_DMA_IRQHandler+0x1cc>)
 8018140:	4293      	cmp	r3, r2
 8018142:	d02c      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	4a54      	ldr	r2, [pc, #336]	; (801829c <HAL_DMA_IRQHandler+0x1d0>)
 801814a:	4293      	cmp	r3, r2
 801814c:	d027      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 801814e:	687b      	ldr	r3, [r7, #4]
 8018150:	681b      	ldr	r3, [r3, #0]
 8018152:	4a53      	ldr	r2, [pc, #332]	; (80182a0 <HAL_DMA_IRQHandler+0x1d4>)
 8018154:	4293      	cmp	r3, r2
 8018156:	d022      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018158:	687b      	ldr	r3, [r7, #4]
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	4a51      	ldr	r2, [pc, #324]	; (80182a4 <HAL_DMA_IRQHandler+0x1d8>)
 801815e:	4293      	cmp	r3, r2
 8018160:	d01d      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	4a50      	ldr	r2, [pc, #320]	; (80182a8 <HAL_DMA_IRQHandler+0x1dc>)
 8018168:	4293      	cmp	r3, r2
 801816a:	d018      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 801816c:	687b      	ldr	r3, [r7, #4]
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	4a4e      	ldr	r2, [pc, #312]	; (80182ac <HAL_DMA_IRQHandler+0x1e0>)
 8018172:	4293      	cmp	r3, r2
 8018174:	d013      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	681b      	ldr	r3, [r3, #0]
 801817a:	4a4d      	ldr	r2, [pc, #308]	; (80182b0 <HAL_DMA_IRQHandler+0x1e4>)
 801817c:	4293      	cmp	r3, r2
 801817e:	d00e      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	681b      	ldr	r3, [r3, #0]
 8018184:	4a4b      	ldr	r2, [pc, #300]	; (80182b4 <HAL_DMA_IRQHandler+0x1e8>)
 8018186:	4293      	cmp	r3, r2
 8018188:	d009      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 801818a:	687b      	ldr	r3, [r7, #4]
 801818c:	681b      	ldr	r3, [r3, #0]
 801818e:	4a4a      	ldr	r2, [pc, #296]	; (80182b8 <HAL_DMA_IRQHandler+0x1ec>)
 8018190:	4293      	cmp	r3, r2
 8018192:	d004      	beq.n	801819e <HAL_DMA_IRQHandler+0xd2>
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	4a48      	ldr	r2, [pc, #288]	; (80182bc <HAL_DMA_IRQHandler+0x1f0>)
 801819a:	4293      	cmp	r3, r2
 801819c:	d101      	bne.n	80181a2 <HAL_DMA_IRQHandler+0xd6>
 801819e:	2301      	movs	r3, #1
 80181a0:	e000      	b.n	80181a4 <HAL_DMA_IRQHandler+0xd8>
 80181a2:	2300      	movs	r3, #0
 80181a4:	2b00      	cmp	r3, #0
 80181a6:	f000 842b 	beq.w	8018a00 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80181ae:	f003 031f 	and.w	r3, r3, #31
 80181b2:	2208      	movs	r2, #8
 80181b4:	409a      	lsls	r2, r3
 80181b6:	69bb      	ldr	r3, [r7, #24]
 80181b8:	4013      	ands	r3, r2
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	f000 80a2 	beq.w	8018304 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	4a2e      	ldr	r2, [pc, #184]	; (8018280 <HAL_DMA_IRQHandler+0x1b4>)
 80181c6:	4293      	cmp	r3, r2
 80181c8:	d04a      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 80181ca:	687b      	ldr	r3, [r7, #4]
 80181cc:	681b      	ldr	r3, [r3, #0]
 80181ce:	4a2d      	ldr	r2, [pc, #180]	; (8018284 <HAL_DMA_IRQHandler+0x1b8>)
 80181d0:	4293      	cmp	r3, r2
 80181d2:	d045      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 80181d4:	687b      	ldr	r3, [r7, #4]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	4a2b      	ldr	r2, [pc, #172]	; (8018288 <HAL_DMA_IRQHandler+0x1bc>)
 80181da:	4293      	cmp	r3, r2
 80181dc:	d040      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	681b      	ldr	r3, [r3, #0]
 80181e2:	4a2a      	ldr	r2, [pc, #168]	; (801828c <HAL_DMA_IRQHandler+0x1c0>)
 80181e4:	4293      	cmp	r3, r2
 80181e6:	d03b      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 80181e8:	687b      	ldr	r3, [r7, #4]
 80181ea:	681b      	ldr	r3, [r3, #0]
 80181ec:	4a28      	ldr	r2, [pc, #160]	; (8018290 <HAL_DMA_IRQHandler+0x1c4>)
 80181ee:	4293      	cmp	r3, r2
 80181f0:	d036      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 80181f2:	687b      	ldr	r3, [r7, #4]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	4a27      	ldr	r2, [pc, #156]	; (8018294 <HAL_DMA_IRQHandler+0x1c8>)
 80181f8:	4293      	cmp	r3, r2
 80181fa:	d031      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 80181fc:	687b      	ldr	r3, [r7, #4]
 80181fe:	681b      	ldr	r3, [r3, #0]
 8018200:	4a25      	ldr	r2, [pc, #148]	; (8018298 <HAL_DMA_IRQHandler+0x1cc>)
 8018202:	4293      	cmp	r3, r2
 8018204:	d02c      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	681b      	ldr	r3, [r3, #0]
 801820a:	4a24      	ldr	r2, [pc, #144]	; (801829c <HAL_DMA_IRQHandler+0x1d0>)
 801820c:	4293      	cmp	r3, r2
 801820e:	d027      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	681b      	ldr	r3, [r3, #0]
 8018214:	4a22      	ldr	r2, [pc, #136]	; (80182a0 <HAL_DMA_IRQHandler+0x1d4>)
 8018216:	4293      	cmp	r3, r2
 8018218:	d022      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	681b      	ldr	r3, [r3, #0]
 801821e:	4a21      	ldr	r2, [pc, #132]	; (80182a4 <HAL_DMA_IRQHandler+0x1d8>)
 8018220:	4293      	cmp	r3, r2
 8018222:	d01d      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 8018224:	687b      	ldr	r3, [r7, #4]
 8018226:	681b      	ldr	r3, [r3, #0]
 8018228:	4a1f      	ldr	r2, [pc, #124]	; (80182a8 <HAL_DMA_IRQHandler+0x1dc>)
 801822a:	4293      	cmp	r3, r2
 801822c:	d018      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	681b      	ldr	r3, [r3, #0]
 8018232:	4a1e      	ldr	r2, [pc, #120]	; (80182ac <HAL_DMA_IRQHandler+0x1e0>)
 8018234:	4293      	cmp	r3, r2
 8018236:	d013      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	681b      	ldr	r3, [r3, #0]
 801823c:	4a1c      	ldr	r2, [pc, #112]	; (80182b0 <HAL_DMA_IRQHandler+0x1e4>)
 801823e:	4293      	cmp	r3, r2
 8018240:	d00e      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	4a1b      	ldr	r2, [pc, #108]	; (80182b4 <HAL_DMA_IRQHandler+0x1e8>)
 8018248:	4293      	cmp	r3, r2
 801824a:	d009      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	4a19      	ldr	r2, [pc, #100]	; (80182b8 <HAL_DMA_IRQHandler+0x1ec>)
 8018252:	4293      	cmp	r3, r2
 8018254:	d004      	beq.n	8018260 <HAL_DMA_IRQHandler+0x194>
 8018256:	687b      	ldr	r3, [r7, #4]
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	4a18      	ldr	r2, [pc, #96]	; (80182bc <HAL_DMA_IRQHandler+0x1f0>)
 801825c:	4293      	cmp	r3, r2
 801825e:	d12f      	bne.n	80182c0 <HAL_DMA_IRQHandler+0x1f4>
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	f003 0304 	and.w	r3, r3, #4
 801826a:	2b00      	cmp	r3, #0
 801826c:	bf14      	ite	ne
 801826e:	2301      	movne	r3, #1
 8018270:	2300      	moveq	r3, #0
 8018272:	b2db      	uxtb	r3, r3
 8018274:	e02e      	b.n	80182d4 <HAL_DMA_IRQHandler+0x208>
 8018276:	bf00      	nop
 8018278:	24000004 	.word	0x24000004
 801827c:	1b4e81b5 	.word	0x1b4e81b5
 8018280:	40020010 	.word	0x40020010
 8018284:	40020028 	.word	0x40020028
 8018288:	40020040 	.word	0x40020040
 801828c:	40020058 	.word	0x40020058
 8018290:	40020070 	.word	0x40020070
 8018294:	40020088 	.word	0x40020088
 8018298:	400200a0 	.word	0x400200a0
 801829c:	400200b8 	.word	0x400200b8
 80182a0:	40020410 	.word	0x40020410
 80182a4:	40020428 	.word	0x40020428
 80182a8:	40020440 	.word	0x40020440
 80182ac:	40020458 	.word	0x40020458
 80182b0:	40020470 	.word	0x40020470
 80182b4:	40020488 	.word	0x40020488
 80182b8:	400204a0 	.word	0x400204a0
 80182bc:	400204b8 	.word	0x400204b8
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	f003 0308 	and.w	r3, r3, #8
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	bf14      	ite	ne
 80182ce:	2301      	movne	r3, #1
 80182d0:	2300      	moveq	r3, #0
 80182d2:	b2db      	uxtb	r3, r3
 80182d4:	2b00      	cmp	r3, #0
 80182d6:	d015      	beq.n	8018304 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	681a      	ldr	r2, [r3, #0]
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	f022 0204 	bic.w	r2, r2, #4
 80182e6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80182ec:	f003 031f 	and.w	r3, r3, #31
 80182f0:	2208      	movs	r2, #8
 80182f2:	409a      	lsls	r2, r3
 80182f4:	6a3b      	ldr	r3, [r7, #32]
 80182f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80182fc:	f043 0201 	orr.w	r2, r3, #1
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018308:	f003 031f 	and.w	r3, r3, #31
 801830c:	69ba      	ldr	r2, [r7, #24]
 801830e:	fa22 f303 	lsr.w	r3, r2, r3
 8018312:	f003 0301 	and.w	r3, r3, #1
 8018316:	2b00      	cmp	r3, #0
 8018318:	d06e      	beq.n	80183f8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801831a:	687b      	ldr	r3, [r7, #4]
 801831c:	681b      	ldr	r3, [r3, #0]
 801831e:	4a69      	ldr	r2, [pc, #420]	; (80184c4 <HAL_DMA_IRQHandler+0x3f8>)
 8018320:	4293      	cmp	r3, r2
 8018322:	d04a      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	4a67      	ldr	r2, [pc, #412]	; (80184c8 <HAL_DMA_IRQHandler+0x3fc>)
 801832a:	4293      	cmp	r3, r2
 801832c:	d045      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	681b      	ldr	r3, [r3, #0]
 8018332:	4a66      	ldr	r2, [pc, #408]	; (80184cc <HAL_DMA_IRQHandler+0x400>)
 8018334:	4293      	cmp	r3, r2
 8018336:	d040      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 8018338:	687b      	ldr	r3, [r7, #4]
 801833a:	681b      	ldr	r3, [r3, #0]
 801833c:	4a64      	ldr	r2, [pc, #400]	; (80184d0 <HAL_DMA_IRQHandler+0x404>)
 801833e:	4293      	cmp	r3, r2
 8018340:	d03b      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	4a63      	ldr	r2, [pc, #396]	; (80184d4 <HAL_DMA_IRQHandler+0x408>)
 8018348:	4293      	cmp	r3, r2
 801834a:	d036      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	681b      	ldr	r3, [r3, #0]
 8018350:	4a61      	ldr	r2, [pc, #388]	; (80184d8 <HAL_DMA_IRQHandler+0x40c>)
 8018352:	4293      	cmp	r3, r2
 8018354:	d031      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	4a60      	ldr	r2, [pc, #384]	; (80184dc <HAL_DMA_IRQHandler+0x410>)
 801835c:	4293      	cmp	r3, r2
 801835e:	d02c      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 8018360:	687b      	ldr	r3, [r7, #4]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	4a5e      	ldr	r2, [pc, #376]	; (80184e0 <HAL_DMA_IRQHandler+0x414>)
 8018366:	4293      	cmp	r3, r2
 8018368:	d027      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	4a5d      	ldr	r2, [pc, #372]	; (80184e4 <HAL_DMA_IRQHandler+0x418>)
 8018370:	4293      	cmp	r3, r2
 8018372:	d022      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 8018374:	687b      	ldr	r3, [r7, #4]
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	4a5b      	ldr	r2, [pc, #364]	; (80184e8 <HAL_DMA_IRQHandler+0x41c>)
 801837a:	4293      	cmp	r3, r2
 801837c:	d01d      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	4a5a      	ldr	r2, [pc, #360]	; (80184ec <HAL_DMA_IRQHandler+0x420>)
 8018384:	4293      	cmp	r3, r2
 8018386:	d018      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 8018388:	687b      	ldr	r3, [r7, #4]
 801838a:	681b      	ldr	r3, [r3, #0]
 801838c:	4a58      	ldr	r2, [pc, #352]	; (80184f0 <HAL_DMA_IRQHandler+0x424>)
 801838e:	4293      	cmp	r3, r2
 8018390:	d013      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	681b      	ldr	r3, [r3, #0]
 8018396:	4a57      	ldr	r2, [pc, #348]	; (80184f4 <HAL_DMA_IRQHandler+0x428>)
 8018398:	4293      	cmp	r3, r2
 801839a:	d00e      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	4a55      	ldr	r2, [pc, #340]	; (80184f8 <HAL_DMA_IRQHandler+0x42c>)
 80183a2:	4293      	cmp	r3, r2
 80183a4:	d009      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 80183a6:	687b      	ldr	r3, [r7, #4]
 80183a8:	681b      	ldr	r3, [r3, #0]
 80183aa:	4a54      	ldr	r2, [pc, #336]	; (80184fc <HAL_DMA_IRQHandler+0x430>)
 80183ac:	4293      	cmp	r3, r2
 80183ae:	d004      	beq.n	80183ba <HAL_DMA_IRQHandler+0x2ee>
 80183b0:	687b      	ldr	r3, [r7, #4]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	4a52      	ldr	r2, [pc, #328]	; (8018500 <HAL_DMA_IRQHandler+0x434>)
 80183b6:	4293      	cmp	r3, r2
 80183b8:	d10a      	bne.n	80183d0 <HAL_DMA_IRQHandler+0x304>
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	695b      	ldr	r3, [r3, #20]
 80183c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	bf14      	ite	ne
 80183c8:	2301      	movne	r3, #1
 80183ca:	2300      	moveq	r3, #0
 80183cc:	b2db      	uxtb	r3, r3
 80183ce:	e003      	b.n	80183d8 <HAL_DMA_IRQHandler+0x30c>
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	2300      	movs	r3, #0
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d00d      	beq.n	80183f8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183e0:	f003 031f 	and.w	r3, r3, #31
 80183e4:	2201      	movs	r2, #1
 80183e6:	409a      	lsls	r2, r3
 80183e8:	6a3b      	ldr	r3, [r7, #32]
 80183ea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183f0:	f043 0202 	orr.w	r2, r3, #2
 80183f4:	687b      	ldr	r3, [r7, #4]
 80183f6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183fc:	f003 031f 	and.w	r3, r3, #31
 8018400:	2204      	movs	r2, #4
 8018402:	409a      	lsls	r2, r3
 8018404:	69bb      	ldr	r3, [r7, #24]
 8018406:	4013      	ands	r3, r2
 8018408:	2b00      	cmp	r3, #0
 801840a:	f000 808f 	beq.w	801852c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	4a2c      	ldr	r2, [pc, #176]	; (80184c4 <HAL_DMA_IRQHandler+0x3f8>)
 8018414:	4293      	cmp	r3, r2
 8018416:	d04a      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	681b      	ldr	r3, [r3, #0]
 801841c:	4a2a      	ldr	r2, [pc, #168]	; (80184c8 <HAL_DMA_IRQHandler+0x3fc>)
 801841e:	4293      	cmp	r3, r2
 8018420:	d045      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018422:	687b      	ldr	r3, [r7, #4]
 8018424:	681b      	ldr	r3, [r3, #0]
 8018426:	4a29      	ldr	r2, [pc, #164]	; (80184cc <HAL_DMA_IRQHandler+0x400>)
 8018428:	4293      	cmp	r3, r2
 801842a:	d040      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	4a27      	ldr	r2, [pc, #156]	; (80184d0 <HAL_DMA_IRQHandler+0x404>)
 8018432:	4293      	cmp	r3, r2
 8018434:	d03b      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	681b      	ldr	r3, [r3, #0]
 801843a:	4a26      	ldr	r2, [pc, #152]	; (80184d4 <HAL_DMA_IRQHandler+0x408>)
 801843c:	4293      	cmp	r3, r2
 801843e:	d036      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	681b      	ldr	r3, [r3, #0]
 8018444:	4a24      	ldr	r2, [pc, #144]	; (80184d8 <HAL_DMA_IRQHandler+0x40c>)
 8018446:	4293      	cmp	r3, r2
 8018448:	d031      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	4a23      	ldr	r2, [pc, #140]	; (80184dc <HAL_DMA_IRQHandler+0x410>)
 8018450:	4293      	cmp	r3, r2
 8018452:	d02c      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	4a21      	ldr	r2, [pc, #132]	; (80184e0 <HAL_DMA_IRQHandler+0x414>)
 801845a:	4293      	cmp	r3, r2
 801845c:	d027      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 801845e:	687b      	ldr	r3, [r7, #4]
 8018460:	681b      	ldr	r3, [r3, #0]
 8018462:	4a20      	ldr	r2, [pc, #128]	; (80184e4 <HAL_DMA_IRQHandler+0x418>)
 8018464:	4293      	cmp	r3, r2
 8018466:	d022      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018468:	687b      	ldr	r3, [r7, #4]
 801846a:	681b      	ldr	r3, [r3, #0]
 801846c:	4a1e      	ldr	r2, [pc, #120]	; (80184e8 <HAL_DMA_IRQHandler+0x41c>)
 801846e:	4293      	cmp	r3, r2
 8018470:	d01d      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	681b      	ldr	r3, [r3, #0]
 8018476:	4a1d      	ldr	r2, [pc, #116]	; (80184ec <HAL_DMA_IRQHandler+0x420>)
 8018478:	4293      	cmp	r3, r2
 801847a:	d018      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	4a1b      	ldr	r2, [pc, #108]	; (80184f0 <HAL_DMA_IRQHandler+0x424>)
 8018482:	4293      	cmp	r3, r2
 8018484:	d013      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	4a1a      	ldr	r2, [pc, #104]	; (80184f4 <HAL_DMA_IRQHandler+0x428>)
 801848c:	4293      	cmp	r3, r2
 801848e:	d00e      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	4a18      	ldr	r2, [pc, #96]	; (80184f8 <HAL_DMA_IRQHandler+0x42c>)
 8018496:	4293      	cmp	r3, r2
 8018498:	d009      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 801849a:	687b      	ldr	r3, [r7, #4]
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	4a17      	ldr	r2, [pc, #92]	; (80184fc <HAL_DMA_IRQHandler+0x430>)
 80184a0:	4293      	cmp	r3, r2
 80184a2:	d004      	beq.n	80184ae <HAL_DMA_IRQHandler+0x3e2>
 80184a4:	687b      	ldr	r3, [r7, #4]
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	4a15      	ldr	r2, [pc, #84]	; (8018500 <HAL_DMA_IRQHandler+0x434>)
 80184aa:	4293      	cmp	r3, r2
 80184ac:	d12a      	bne.n	8018504 <HAL_DMA_IRQHandler+0x438>
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	f003 0302 	and.w	r3, r3, #2
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	bf14      	ite	ne
 80184bc:	2301      	movne	r3, #1
 80184be:	2300      	moveq	r3, #0
 80184c0:	b2db      	uxtb	r3, r3
 80184c2:	e023      	b.n	801850c <HAL_DMA_IRQHandler+0x440>
 80184c4:	40020010 	.word	0x40020010
 80184c8:	40020028 	.word	0x40020028
 80184cc:	40020040 	.word	0x40020040
 80184d0:	40020058 	.word	0x40020058
 80184d4:	40020070 	.word	0x40020070
 80184d8:	40020088 	.word	0x40020088
 80184dc:	400200a0 	.word	0x400200a0
 80184e0:	400200b8 	.word	0x400200b8
 80184e4:	40020410 	.word	0x40020410
 80184e8:	40020428 	.word	0x40020428
 80184ec:	40020440 	.word	0x40020440
 80184f0:	40020458 	.word	0x40020458
 80184f4:	40020470 	.word	0x40020470
 80184f8:	40020488 	.word	0x40020488
 80184fc:	400204a0 	.word	0x400204a0
 8018500:	400204b8 	.word	0x400204b8
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	681b      	ldr	r3, [r3, #0]
 801850a:	2300      	movs	r3, #0
 801850c:	2b00      	cmp	r3, #0
 801850e:	d00d      	beq.n	801852c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018514:	f003 031f 	and.w	r3, r3, #31
 8018518:	2204      	movs	r2, #4
 801851a:	409a      	lsls	r2, r3
 801851c:	6a3b      	ldr	r3, [r7, #32]
 801851e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018524:	f043 0204 	orr.w	r2, r3, #4
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018530:	f003 031f 	and.w	r3, r3, #31
 8018534:	2210      	movs	r2, #16
 8018536:	409a      	lsls	r2, r3
 8018538:	69bb      	ldr	r3, [r7, #24]
 801853a:	4013      	ands	r3, r2
 801853c:	2b00      	cmp	r3, #0
 801853e:	f000 80a6 	beq.w	801868e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8018542:	687b      	ldr	r3, [r7, #4]
 8018544:	681b      	ldr	r3, [r3, #0]
 8018546:	4a85      	ldr	r2, [pc, #532]	; (801875c <HAL_DMA_IRQHandler+0x690>)
 8018548:	4293      	cmp	r3, r2
 801854a:	d04a      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	681b      	ldr	r3, [r3, #0]
 8018550:	4a83      	ldr	r2, [pc, #524]	; (8018760 <HAL_DMA_IRQHandler+0x694>)
 8018552:	4293      	cmp	r3, r2
 8018554:	d045      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 8018556:	687b      	ldr	r3, [r7, #4]
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	4a82      	ldr	r2, [pc, #520]	; (8018764 <HAL_DMA_IRQHandler+0x698>)
 801855c:	4293      	cmp	r3, r2
 801855e:	d040      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	681b      	ldr	r3, [r3, #0]
 8018564:	4a80      	ldr	r2, [pc, #512]	; (8018768 <HAL_DMA_IRQHandler+0x69c>)
 8018566:	4293      	cmp	r3, r2
 8018568:	d03b      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	4a7f      	ldr	r2, [pc, #508]	; (801876c <HAL_DMA_IRQHandler+0x6a0>)
 8018570:	4293      	cmp	r3, r2
 8018572:	d036      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	4a7d      	ldr	r2, [pc, #500]	; (8018770 <HAL_DMA_IRQHandler+0x6a4>)
 801857a:	4293      	cmp	r3, r2
 801857c:	d031      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	681b      	ldr	r3, [r3, #0]
 8018582:	4a7c      	ldr	r2, [pc, #496]	; (8018774 <HAL_DMA_IRQHandler+0x6a8>)
 8018584:	4293      	cmp	r3, r2
 8018586:	d02c      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 8018588:	687b      	ldr	r3, [r7, #4]
 801858a:	681b      	ldr	r3, [r3, #0]
 801858c:	4a7a      	ldr	r2, [pc, #488]	; (8018778 <HAL_DMA_IRQHandler+0x6ac>)
 801858e:	4293      	cmp	r3, r2
 8018590:	d027      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	681b      	ldr	r3, [r3, #0]
 8018596:	4a79      	ldr	r2, [pc, #484]	; (801877c <HAL_DMA_IRQHandler+0x6b0>)
 8018598:	4293      	cmp	r3, r2
 801859a:	d022      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	4a77      	ldr	r2, [pc, #476]	; (8018780 <HAL_DMA_IRQHandler+0x6b4>)
 80185a2:	4293      	cmp	r3, r2
 80185a4:	d01d      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	4a76      	ldr	r2, [pc, #472]	; (8018784 <HAL_DMA_IRQHandler+0x6b8>)
 80185ac:	4293      	cmp	r3, r2
 80185ae:	d018      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	4a74      	ldr	r2, [pc, #464]	; (8018788 <HAL_DMA_IRQHandler+0x6bc>)
 80185b6:	4293      	cmp	r3, r2
 80185b8:	d013      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	4a73      	ldr	r2, [pc, #460]	; (801878c <HAL_DMA_IRQHandler+0x6c0>)
 80185c0:	4293      	cmp	r3, r2
 80185c2:	d00e      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	4a71      	ldr	r2, [pc, #452]	; (8018790 <HAL_DMA_IRQHandler+0x6c4>)
 80185ca:	4293      	cmp	r3, r2
 80185cc:	d009      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4a70      	ldr	r2, [pc, #448]	; (8018794 <HAL_DMA_IRQHandler+0x6c8>)
 80185d4:	4293      	cmp	r3, r2
 80185d6:	d004      	beq.n	80185e2 <HAL_DMA_IRQHandler+0x516>
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	4a6e      	ldr	r2, [pc, #440]	; (8018798 <HAL_DMA_IRQHandler+0x6cc>)
 80185de:	4293      	cmp	r3, r2
 80185e0:	d10a      	bne.n	80185f8 <HAL_DMA_IRQHandler+0x52c>
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	f003 0308 	and.w	r3, r3, #8
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	bf14      	ite	ne
 80185f0:	2301      	movne	r3, #1
 80185f2:	2300      	moveq	r3, #0
 80185f4:	b2db      	uxtb	r3, r3
 80185f6:	e009      	b.n	801860c <HAL_DMA_IRQHandler+0x540>
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	f003 0304 	and.w	r3, r3, #4
 8018602:	2b00      	cmp	r3, #0
 8018604:	bf14      	ite	ne
 8018606:	2301      	movne	r3, #1
 8018608:	2300      	moveq	r3, #0
 801860a:	b2db      	uxtb	r3, r3
 801860c:	2b00      	cmp	r3, #0
 801860e:	d03e      	beq.n	801868e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018610:	687b      	ldr	r3, [r7, #4]
 8018612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018614:	f003 031f 	and.w	r3, r3, #31
 8018618:	2210      	movs	r2, #16
 801861a:	409a      	lsls	r2, r3
 801861c:	6a3b      	ldr	r3, [r7, #32]
 801861e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018620:	687b      	ldr	r3, [r7, #4]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801862a:	2b00      	cmp	r3, #0
 801862c:	d018      	beq.n	8018660 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801862e:	687b      	ldr	r3, [r7, #4]
 8018630:	681b      	ldr	r3, [r3, #0]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018638:	2b00      	cmp	r3, #0
 801863a:	d108      	bne.n	801864e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018640:	2b00      	cmp	r3, #0
 8018642:	d024      	beq.n	801868e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8018644:	687b      	ldr	r3, [r7, #4]
 8018646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018648:	6878      	ldr	r0, [r7, #4]
 801864a:	4798      	blx	r3
 801864c:	e01f      	b.n	801868e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018652:	2b00      	cmp	r3, #0
 8018654:	d01b      	beq.n	801868e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8018656:	687b      	ldr	r3, [r7, #4]
 8018658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801865a:	6878      	ldr	r0, [r7, #4]
 801865c:	4798      	blx	r3
 801865e:	e016      	b.n	801868e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	681b      	ldr	r3, [r3, #0]
 8018666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801866a:	2b00      	cmp	r3, #0
 801866c:	d107      	bne.n	801867e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	681a      	ldr	r2, [r3, #0]
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	681b      	ldr	r3, [r3, #0]
 8018678:	f022 0208 	bic.w	r2, r2, #8
 801867c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018682:	2b00      	cmp	r3, #0
 8018684:	d003      	beq.n	801868e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018686:	687b      	ldr	r3, [r7, #4]
 8018688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801868a:	6878      	ldr	r0, [r7, #4]
 801868c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018692:	f003 031f 	and.w	r3, r3, #31
 8018696:	2220      	movs	r2, #32
 8018698:	409a      	lsls	r2, r3
 801869a:	69bb      	ldr	r3, [r7, #24]
 801869c:	4013      	ands	r3, r2
 801869e:	2b00      	cmp	r3, #0
 80186a0:	f000 8110 	beq.w	80188c4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80186a4:	687b      	ldr	r3, [r7, #4]
 80186a6:	681b      	ldr	r3, [r3, #0]
 80186a8:	4a2c      	ldr	r2, [pc, #176]	; (801875c <HAL_DMA_IRQHandler+0x690>)
 80186aa:	4293      	cmp	r3, r2
 80186ac:	d04a      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186ae:	687b      	ldr	r3, [r7, #4]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	4a2b      	ldr	r2, [pc, #172]	; (8018760 <HAL_DMA_IRQHandler+0x694>)
 80186b4:	4293      	cmp	r3, r2
 80186b6:	d045      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	681b      	ldr	r3, [r3, #0]
 80186bc:	4a29      	ldr	r2, [pc, #164]	; (8018764 <HAL_DMA_IRQHandler+0x698>)
 80186be:	4293      	cmp	r3, r2
 80186c0:	d040      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	681b      	ldr	r3, [r3, #0]
 80186c6:	4a28      	ldr	r2, [pc, #160]	; (8018768 <HAL_DMA_IRQHandler+0x69c>)
 80186c8:	4293      	cmp	r3, r2
 80186ca:	d03b      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186cc:	687b      	ldr	r3, [r7, #4]
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	4a26      	ldr	r2, [pc, #152]	; (801876c <HAL_DMA_IRQHandler+0x6a0>)
 80186d2:	4293      	cmp	r3, r2
 80186d4:	d036      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	4a25      	ldr	r2, [pc, #148]	; (8018770 <HAL_DMA_IRQHandler+0x6a4>)
 80186dc:	4293      	cmp	r3, r2
 80186de:	d031      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	4a23      	ldr	r2, [pc, #140]	; (8018774 <HAL_DMA_IRQHandler+0x6a8>)
 80186e6:	4293      	cmp	r3, r2
 80186e8:	d02c      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	681b      	ldr	r3, [r3, #0]
 80186ee:	4a22      	ldr	r2, [pc, #136]	; (8018778 <HAL_DMA_IRQHandler+0x6ac>)
 80186f0:	4293      	cmp	r3, r2
 80186f2:	d027      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	4a20      	ldr	r2, [pc, #128]	; (801877c <HAL_DMA_IRQHandler+0x6b0>)
 80186fa:	4293      	cmp	r3, r2
 80186fc:	d022      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 80186fe:	687b      	ldr	r3, [r7, #4]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	4a1f      	ldr	r2, [pc, #124]	; (8018780 <HAL_DMA_IRQHandler+0x6b4>)
 8018704:	4293      	cmp	r3, r2
 8018706:	d01d      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	681b      	ldr	r3, [r3, #0]
 801870c:	4a1d      	ldr	r2, [pc, #116]	; (8018784 <HAL_DMA_IRQHandler+0x6b8>)
 801870e:	4293      	cmp	r3, r2
 8018710:	d018      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 8018712:	687b      	ldr	r3, [r7, #4]
 8018714:	681b      	ldr	r3, [r3, #0]
 8018716:	4a1c      	ldr	r2, [pc, #112]	; (8018788 <HAL_DMA_IRQHandler+0x6bc>)
 8018718:	4293      	cmp	r3, r2
 801871a:	d013      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 801871c:	687b      	ldr	r3, [r7, #4]
 801871e:	681b      	ldr	r3, [r3, #0]
 8018720:	4a1a      	ldr	r2, [pc, #104]	; (801878c <HAL_DMA_IRQHandler+0x6c0>)
 8018722:	4293      	cmp	r3, r2
 8018724:	d00e      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 8018726:	687b      	ldr	r3, [r7, #4]
 8018728:	681b      	ldr	r3, [r3, #0]
 801872a:	4a19      	ldr	r2, [pc, #100]	; (8018790 <HAL_DMA_IRQHandler+0x6c4>)
 801872c:	4293      	cmp	r3, r2
 801872e:	d009      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	4a17      	ldr	r2, [pc, #92]	; (8018794 <HAL_DMA_IRQHandler+0x6c8>)
 8018736:	4293      	cmp	r3, r2
 8018738:	d004      	beq.n	8018744 <HAL_DMA_IRQHandler+0x678>
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	681b      	ldr	r3, [r3, #0]
 801873e:	4a16      	ldr	r2, [pc, #88]	; (8018798 <HAL_DMA_IRQHandler+0x6cc>)
 8018740:	4293      	cmp	r3, r2
 8018742:	d12b      	bne.n	801879c <HAL_DMA_IRQHandler+0x6d0>
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	f003 0310 	and.w	r3, r3, #16
 801874e:	2b00      	cmp	r3, #0
 8018750:	bf14      	ite	ne
 8018752:	2301      	movne	r3, #1
 8018754:	2300      	moveq	r3, #0
 8018756:	b2db      	uxtb	r3, r3
 8018758:	e02a      	b.n	80187b0 <HAL_DMA_IRQHandler+0x6e4>
 801875a:	bf00      	nop
 801875c:	40020010 	.word	0x40020010
 8018760:	40020028 	.word	0x40020028
 8018764:	40020040 	.word	0x40020040
 8018768:	40020058 	.word	0x40020058
 801876c:	40020070 	.word	0x40020070
 8018770:	40020088 	.word	0x40020088
 8018774:	400200a0 	.word	0x400200a0
 8018778:	400200b8 	.word	0x400200b8
 801877c:	40020410 	.word	0x40020410
 8018780:	40020428 	.word	0x40020428
 8018784:	40020440 	.word	0x40020440
 8018788:	40020458 	.word	0x40020458
 801878c:	40020470 	.word	0x40020470
 8018790:	40020488 	.word	0x40020488
 8018794:	400204a0 	.word	0x400204a0
 8018798:	400204b8 	.word	0x400204b8
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	681b      	ldr	r3, [r3, #0]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	f003 0302 	and.w	r3, r3, #2
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	bf14      	ite	ne
 80187aa:	2301      	movne	r3, #1
 80187ac:	2300      	moveq	r3, #0
 80187ae:	b2db      	uxtb	r3, r3
 80187b0:	2b00      	cmp	r3, #0
 80187b2:	f000 8087 	beq.w	80188c4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80187b6:	687b      	ldr	r3, [r7, #4]
 80187b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187ba:	f003 031f 	and.w	r3, r3, #31
 80187be:	2220      	movs	r2, #32
 80187c0:	409a      	lsls	r2, r3
 80187c2:	6a3b      	ldr	r3, [r7, #32]
 80187c4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	2b04      	cmp	r3, #4
 80187d0:	d139      	bne.n	8018846 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	681a      	ldr	r2, [r3, #0]
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	681b      	ldr	r3, [r3, #0]
 80187dc:	f022 0216 	bic.w	r2, r2, #22
 80187e0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	695a      	ldr	r2, [r3, #20]
 80187e8:	687b      	ldr	r3, [r7, #4]
 80187ea:	681b      	ldr	r3, [r3, #0]
 80187ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80187f0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d103      	bne.n	8018802 <HAL_DMA_IRQHandler+0x736>
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d007      	beq.n	8018812 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	681a      	ldr	r2, [r3, #0]
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	681b      	ldr	r3, [r3, #0]
 801880c:	f022 0208 	bic.w	r2, r2, #8
 8018810:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018812:	687b      	ldr	r3, [r7, #4]
 8018814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018816:	f003 031f 	and.w	r3, r3, #31
 801881a:	223f      	movs	r2, #63	; 0x3f
 801881c:	409a      	lsls	r2, r3
 801881e:	6a3b      	ldr	r3, [r7, #32]
 8018820:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	2201      	movs	r2, #1
 8018826:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	2200      	movs	r2, #0
 801882e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018836:	2b00      	cmp	r3, #0
 8018838:	f000 834a 	beq.w	8018ed0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018840:	6878      	ldr	r0, [r7, #4]
 8018842:	4798      	blx	r3
          }
          return;
 8018844:	e344      	b.n	8018ed0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	681b      	ldr	r3, [r3, #0]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018850:	2b00      	cmp	r3, #0
 8018852:	d018      	beq.n	8018886 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018854:	687b      	ldr	r3, [r7, #4]
 8018856:	681b      	ldr	r3, [r3, #0]
 8018858:	681b      	ldr	r3, [r3, #0]
 801885a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801885e:	2b00      	cmp	r3, #0
 8018860:	d108      	bne.n	8018874 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018866:	2b00      	cmp	r3, #0
 8018868:	d02c      	beq.n	80188c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801886a:	687b      	ldr	r3, [r7, #4]
 801886c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801886e:	6878      	ldr	r0, [r7, #4]
 8018870:	4798      	blx	r3
 8018872:	e027      	b.n	80188c4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018878:	2b00      	cmp	r3, #0
 801887a:	d023      	beq.n	80188c4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018880:	6878      	ldr	r0, [r7, #4]
 8018882:	4798      	blx	r3
 8018884:	e01e      	b.n	80188c4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	681b      	ldr	r3, [r3, #0]
 801888a:	681b      	ldr	r3, [r3, #0]
 801888c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018890:	2b00      	cmp	r3, #0
 8018892:	d10f      	bne.n	80188b4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	681a      	ldr	r2, [r3, #0]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f022 0210 	bic.w	r2, r2, #16
 80188a2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2201      	movs	r2, #1
 80188a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	2200      	movs	r2, #0
 80188b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d003      	beq.n	80188c4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80188c8:	2b00      	cmp	r3, #0
 80188ca:	f000 8306 	beq.w	8018eda <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80188d2:	f003 0301 	and.w	r3, r3, #1
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	f000 8088 	beq.w	80189ec <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80188dc:	687b      	ldr	r3, [r7, #4]
 80188de:	2204      	movs	r2, #4
 80188e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	4a7a      	ldr	r2, [pc, #488]	; (8018ad4 <HAL_DMA_IRQHandler+0xa08>)
 80188ea:	4293      	cmp	r3, r2
 80188ec:	d04a      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	4a79      	ldr	r2, [pc, #484]	; (8018ad8 <HAL_DMA_IRQHandler+0xa0c>)
 80188f4:	4293      	cmp	r3, r2
 80188f6:	d045      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 80188f8:	687b      	ldr	r3, [r7, #4]
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	4a77      	ldr	r2, [pc, #476]	; (8018adc <HAL_DMA_IRQHandler+0xa10>)
 80188fe:	4293      	cmp	r3, r2
 8018900:	d040      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	4a76      	ldr	r2, [pc, #472]	; (8018ae0 <HAL_DMA_IRQHandler+0xa14>)
 8018908:	4293      	cmp	r3, r2
 801890a:	d03b      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	681b      	ldr	r3, [r3, #0]
 8018910:	4a74      	ldr	r2, [pc, #464]	; (8018ae4 <HAL_DMA_IRQHandler+0xa18>)
 8018912:	4293      	cmp	r3, r2
 8018914:	d036      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	4a73      	ldr	r2, [pc, #460]	; (8018ae8 <HAL_DMA_IRQHandler+0xa1c>)
 801891c:	4293      	cmp	r3, r2
 801891e:	d031      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	681b      	ldr	r3, [r3, #0]
 8018924:	4a71      	ldr	r2, [pc, #452]	; (8018aec <HAL_DMA_IRQHandler+0xa20>)
 8018926:	4293      	cmp	r3, r2
 8018928:	d02c      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	681b      	ldr	r3, [r3, #0]
 801892e:	4a70      	ldr	r2, [pc, #448]	; (8018af0 <HAL_DMA_IRQHandler+0xa24>)
 8018930:	4293      	cmp	r3, r2
 8018932:	d027      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	4a6e      	ldr	r2, [pc, #440]	; (8018af4 <HAL_DMA_IRQHandler+0xa28>)
 801893a:	4293      	cmp	r3, r2
 801893c:	d022      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	4a6d      	ldr	r2, [pc, #436]	; (8018af8 <HAL_DMA_IRQHandler+0xa2c>)
 8018944:	4293      	cmp	r3, r2
 8018946:	d01d      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4a6b      	ldr	r2, [pc, #428]	; (8018afc <HAL_DMA_IRQHandler+0xa30>)
 801894e:	4293      	cmp	r3, r2
 8018950:	d018      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	681b      	ldr	r3, [r3, #0]
 8018956:	4a6a      	ldr	r2, [pc, #424]	; (8018b00 <HAL_DMA_IRQHandler+0xa34>)
 8018958:	4293      	cmp	r3, r2
 801895a:	d013      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	4a68      	ldr	r2, [pc, #416]	; (8018b04 <HAL_DMA_IRQHandler+0xa38>)
 8018962:	4293      	cmp	r3, r2
 8018964:	d00e      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681b      	ldr	r3, [r3, #0]
 801896a:	4a67      	ldr	r2, [pc, #412]	; (8018b08 <HAL_DMA_IRQHandler+0xa3c>)
 801896c:	4293      	cmp	r3, r2
 801896e:	d009      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	4a65      	ldr	r2, [pc, #404]	; (8018b0c <HAL_DMA_IRQHandler+0xa40>)
 8018976:	4293      	cmp	r3, r2
 8018978:	d004      	beq.n	8018984 <HAL_DMA_IRQHandler+0x8b8>
 801897a:	687b      	ldr	r3, [r7, #4]
 801897c:	681b      	ldr	r3, [r3, #0]
 801897e:	4a64      	ldr	r2, [pc, #400]	; (8018b10 <HAL_DMA_IRQHandler+0xa44>)
 8018980:	4293      	cmp	r3, r2
 8018982:	d108      	bne.n	8018996 <HAL_DMA_IRQHandler+0x8ca>
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	681a      	ldr	r2, [r3, #0]
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	681b      	ldr	r3, [r3, #0]
 801898e:	f022 0201 	bic.w	r2, r2, #1
 8018992:	601a      	str	r2, [r3, #0]
 8018994:	e007      	b.n	80189a6 <HAL_DMA_IRQHandler+0x8da>
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	681b      	ldr	r3, [r3, #0]
 801899a:	681a      	ldr	r2, [r3, #0]
 801899c:	687b      	ldr	r3, [r7, #4]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	f022 0201 	bic.w	r2, r2, #1
 80189a4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80189a6:	68fb      	ldr	r3, [r7, #12]
 80189a8:	3301      	adds	r3, #1
 80189aa:	60fb      	str	r3, [r7, #12]
 80189ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189ae:	429a      	cmp	r2, r3
 80189b0:	d307      	bcc.n	80189c2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	681b      	ldr	r3, [r3, #0]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	f003 0301 	and.w	r3, r3, #1
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d1f2      	bne.n	80189a6 <HAL_DMA_IRQHandler+0x8da>
 80189c0:	e000      	b.n	80189c4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80189c2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	681b      	ldr	r3, [r3, #0]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	f003 0301 	and.w	r3, r3, #1
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	d004      	beq.n	80189dc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80189d2:	687b      	ldr	r3, [r7, #4]
 80189d4:	2203      	movs	r2, #3
 80189d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80189da:	e003      	b.n	80189e4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80189dc:	687b      	ldr	r3, [r7, #4]
 80189de:	2201      	movs	r2, #1
 80189e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	2200      	movs	r2, #0
 80189e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	f000 8272 	beq.w	8018eda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80189f6:	687b      	ldr	r3, [r7, #4]
 80189f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189fa:	6878      	ldr	r0, [r7, #4]
 80189fc:	4798      	blx	r3
 80189fe:	e26c      	b.n	8018eda <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	681b      	ldr	r3, [r3, #0]
 8018a04:	4a43      	ldr	r2, [pc, #268]	; (8018b14 <HAL_DMA_IRQHandler+0xa48>)
 8018a06:	4293      	cmp	r3, r2
 8018a08:	d022      	beq.n	8018a50 <HAL_DMA_IRQHandler+0x984>
 8018a0a:	687b      	ldr	r3, [r7, #4]
 8018a0c:	681b      	ldr	r3, [r3, #0]
 8018a0e:	4a42      	ldr	r2, [pc, #264]	; (8018b18 <HAL_DMA_IRQHandler+0xa4c>)
 8018a10:	4293      	cmp	r3, r2
 8018a12:	d01d      	beq.n	8018a50 <HAL_DMA_IRQHandler+0x984>
 8018a14:	687b      	ldr	r3, [r7, #4]
 8018a16:	681b      	ldr	r3, [r3, #0]
 8018a18:	4a40      	ldr	r2, [pc, #256]	; (8018b1c <HAL_DMA_IRQHandler+0xa50>)
 8018a1a:	4293      	cmp	r3, r2
 8018a1c:	d018      	beq.n	8018a50 <HAL_DMA_IRQHandler+0x984>
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	681b      	ldr	r3, [r3, #0]
 8018a22:	4a3f      	ldr	r2, [pc, #252]	; (8018b20 <HAL_DMA_IRQHandler+0xa54>)
 8018a24:	4293      	cmp	r3, r2
 8018a26:	d013      	beq.n	8018a50 <HAL_DMA_IRQHandler+0x984>
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	681b      	ldr	r3, [r3, #0]
 8018a2c:	4a3d      	ldr	r2, [pc, #244]	; (8018b24 <HAL_DMA_IRQHandler+0xa58>)
 8018a2e:	4293      	cmp	r3, r2
 8018a30:	d00e      	beq.n	8018a50 <HAL_DMA_IRQHandler+0x984>
 8018a32:	687b      	ldr	r3, [r7, #4]
 8018a34:	681b      	ldr	r3, [r3, #0]
 8018a36:	4a3c      	ldr	r2, [pc, #240]	; (8018b28 <HAL_DMA_IRQHandler+0xa5c>)
 8018a38:	4293      	cmp	r3, r2
 8018a3a:	d009      	beq.n	8018a50 <HAL_DMA_IRQHandler+0x984>
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	681b      	ldr	r3, [r3, #0]
 8018a40:	4a3a      	ldr	r2, [pc, #232]	; (8018b2c <HAL_DMA_IRQHandler+0xa60>)
 8018a42:	4293      	cmp	r3, r2
 8018a44:	d004      	beq.n	8018a50 <HAL_DMA_IRQHandler+0x984>
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	4a39      	ldr	r2, [pc, #228]	; (8018b30 <HAL_DMA_IRQHandler+0xa64>)
 8018a4c:	4293      	cmp	r3, r2
 8018a4e:	d101      	bne.n	8018a54 <HAL_DMA_IRQHandler+0x988>
 8018a50:	2301      	movs	r3, #1
 8018a52:	e000      	b.n	8018a56 <HAL_DMA_IRQHandler+0x98a>
 8018a54:	2300      	movs	r3, #0
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	f000 823f 	beq.w	8018eda <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	681b      	ldr	r3, [r3, #0]
 8018a62:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8018a64:	687b      	ldr	r3, [r7, #4]
 8018a66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a68:	f003 031f 	and.w	r3, r3, #31
 8018a6c:	2204      	movs	r2, #4
 8018a6e:	409a      	lsls	r2, r3
 8018a70:	697b      	ldr	r3, [r7, #20]
 8018a72:	4013      	ands	r3, r2
 8018a74:	2b00      	cmp	r3, #0
 8018a76:	f000 80cd 	beq.w	8018c14 <HAL_DMA_IRQHandler+0xb48>
 8018a7a:	693b      	ldr	r3, [r7, #16]
 8018a7c:	f003 0304 	and.w	r3, r3, #4
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f000 80c7 	beq.w	8018c14 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8018a86:	687b      	ldr	r3, [r7, #4]
 8018a88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018a8a:	f003 031f 	and.w	r3, r3, #31
 8018a8e:	2204      	movs	r2, #4
 8018a90:	409a      	lsls	r2, r3
 8018a92:	69fb      	ldr	r3, [r7, #28]
 8018a94:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018a96:	693b      	ldr	r3, [r7, #16]
 8018a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d049      	beq.n	8018b34 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018aa0:	693b      	ldr	r3, [r7, #16]
 8018aa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018aa6:	2b00      	cmp	r3, #0
 8018aa8:	d109      	bne.n	8018abe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018aaa:	687b      	ldr	r3, [r7, #4]
 8018aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	f000 8210 	beq.w	8018ed4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018ab8:	6878      	ldr	r0, [r7, #4]
 8018aba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018abc:	e20a      	b.n	8018ed4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	f000 8206 	beq.w	8018ed4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018acc:	6878      	ldr	r0, [r7, #4]
 8018ace:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018ad0:	e200      	b.n	8018ed4 <HAL_DMA_IRQHandler+0xe08>
 8018ad2:	bf00      	nop
 8018ad4:	40020010 	.word	0x40020010
 8018ad8:	40020028 	.word	0x40020028
 8018adc:	40020040 	.word	0x40020040
 8018ae0:	40020058 	.word	0x40020058
 8018ae4:	40020070 	.word	0x40020070
 8018ae8:	40020088 	.word	0x40020088
 8018aec:	400200a0 	.word	0x400200a0
 8018af0:	400200b8 	.word	0x400200b8
 8018af4:	40020410 	.word	0x40020410
 8018af8:	40020428 	.word	0x40020428
 8018afc:	40020440 	.word	0x40020440
 8018b00:	40020458 	.word	0x40020458
 8018b04:	40020470 	.word	0x40020470
 8018b08:	40020488 	.word	0x40020488
 8018b0c:	400204a0 	.word	0x400204a0
 8018b10:	400204b8 	.word	0x400204b8
 8018b14:	58025408 	.word	0x58025408
 8018b18:	5802541c 	.word	0x5802541c
 8018b1c:	58025430 	.word	0x58025430
 8018b20:	58025444 	.word	0x58025444
 8018b24:	58025458 	.word	0x58025458
 8018b28:	5802546c 	.word	0x5802546c
 8018b2c:	58025480 	.word	0x58025480
 8018b30:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018b34:	693b      	ldr	r3, [r7, #16]
 8018b36:	f003 0320 	and.w	r3, r3, #32
 8018b3a:	2b00      	cmp	r3, #0
 8018b3c:	d160      	bne.n	8018c00 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	4a7f      	ldr	r2, [pc, #508]	; (8018d40 <HAL_DMA_IRQHandler+0xc74>)
 8018b44:	4293      	cmp	r3, r2
 8018b46:	d04a      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b48:	687b      	ldr	r3, [r7, #4]
 8018b4a:	681b      	ldr	r3, [r3, #0]
 8018b4c:	4a7d      	ldr	r2, [pc, #500]	; (8018d44 <HAL_DMA_IRQHandler+0xc78>)
 8018b4e:	4293      	cmp	r3, r2
 8018b50:	d045      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	4a7c      	ldr	r2, [pc, #496]	; (8018d48 <HAL_DMA_IRQHandler+0xc7c>)
 8018b58:	4293      	cmp	r3, r2
 8018b5a:	d040      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	4a7a      	ldr	r2, [pc, #488]	; (8018d4c <HAL_DMA_IRQHandler+0xc80>)
 8018b62:	4293      	cmp	r3, r2
 8018b64:	d03b      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	4a79      	ldr	r2, [pc, #484]	; (8018d50 <HAL_DMA_IRQHandler+0xc84>)
 8018b6c:	4293      	cmp	r3, r2
 8018b6e:	d036      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b70:	687b      	ldr	r3, [r7, #4]
 8018b72:	681b      	ldr	r3, [r3, #0]
 8018b74:	4a77      	ldr	r2, [pc, #476]	; (8018d54 <HAL_DMA_IRQHandler+0xc88>)
 8018b76:	4293      	cmp	r3, r2
 8018b78:	d031      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b7a:	687b      	ldr	r3, [r7, #4]
 8018b7c:	681b      	ldr	r3, [r3, #0]
 8018b7e:	4a76      	ldr	r2, [pc, #472]	; (8018d58 <HAL_DMA_IRQHandler+0xc8c>)
 8018b80:	4293      	cmp	r3, r2
 8018b82:	d02c      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b84:	687b      	ldr	r3, [r7, #4]
 8018b86:	681b      	ldr	r3, [r3, #0]
 8018b88:	4a74      	ldr	r2, [pc, #464]	; (8018d5c <HAL_DMA_IRQHandler+0xc90>)
 8018b8a:	4293      	cmp	r3, r2
 8018b8c:	d027      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b8e:	687b      	ldr	r3, [r7, #4]
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	4a73      	ldr	r2, [pc, #460]	; (8018d60 <HAL_DMA_IRQHandler+0xc94>)
 8018b94:	4293      	cmp	r3, r2
 8018b96:	d022      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018b98:	687b      	ldr	r3, [r7, #4]
 8018b9a:	681b      	ldr	r3, [r3, #0]
 8018b9c:	4a71      	ldr	r2, [pc, #452]	; (8018d64 <HAL_DMA_IRQHandler+0xc98>)
 8018b9e:	4293      	cmp	r3, r2
 8018ba0:	d01d      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	681b      	ldr	r3, [r3, #0]
 8018ba6:	4a70      	ldr	r2, [pc, #448]	; (8018d68 <HAL_DMA_IRQHandler+0xc9c>)
 8018ba8:	4293      	cmp	r3, r2
 8018baa:	d018      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018bac:	687b      	ldr	r3, [r7, #4]
 8018bae:	681b      	ldr	r3, [r3, #0]
 8018bb0:	4a6e      	ldr	r2, [pc, #440]	; (8018d6c <HAL_DMA_IRQHandler+0xca0>)
 8018bb2:	4293      	cmp	r3, r2
 8018bb4:	d013      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	4a6d      	ldr	r2, [pc, #436]	; (8018d70 <HAL_DMA_IRQHandler+0xca4>)
 8018bbc:	4293      	cmp	r3, r2
 8018bbe:	d00e      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	4a6b      	ldr	r2, [pc, #428]	; (8018d74 <HAL_DMA_IRQHandler+0xca8>)
 8018bc6:	4293      	cmp	r3, r2
 8018bc8:	d009      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	4a6a      	ldr	r2, [pc, #424]	; (8018d78 <HAL_DMA_IRQHandler+0xcac>)
 8018bd0:	4293      	cmp	r3, r2
 8018bd2:	d004      	beq.n	8018bde <HAL_DMA_IRQHandler+0xb12>
 8018bd4:	687b      	ldr	r3, [r7, #4]
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	4a68      	ldr	r2, [pc, #416]	; (8018d7c <HAL_DMA_IRQHandler+0xcb0>)
 8018bda:	4293      	cmp	r3, r2
 8018bdc:	d108      	bne.n	8018bf0 <HAL_DMA_IRQHandler+0xb24>
 8018bde:	687b      	ldr	r3, [r7, #4]
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	681a      	ldr	r2, [r3, #0]
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	f022 0208 	bic.w	r2, r2, #8
 8018bec:	601a      	str	r2, [r3, #0]
 8018bee:	e007      	b.n	8018c00 <HAL_DMA_IRQHandler+0xb34>
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	681a      	ldr	r2, [r3, #0]
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	681b      	ldr	r3, [r3, #0]
 8018bfa:	f022 0204 	bic.w	r2, r2, #4
 8018bfe:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c04:	2b00      	cmp	r3, #0
 8018c06:	f000 8165 	beq.w	8018ed4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c0e:	6878      	ldr	r0, [r7, #4]
 8018c10:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018c12:	e15f      	b.n	8018ed4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c18:	f003 031f 	and.w	r3, r3, #31
 8018c1c:	2202      	movs	r2, #2
 8018c1e:	409a      	lsls	r2, r3
 8018c20:	697b      	ldr	r3, [r7, #20]
 8018c22:	4013      	ands	r3, r2
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	f000 80c5 	beq.w	8018db4 <HAL_DMA_IRQHandler+0xce8>
 8018c2a:	693b      	ldr	r3, [r7, #16]
 8018c2c:	f003 0302 	and.w	r3, r3, #2
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	f000 80bf 	beq.w	8018db4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018c3a:	f003 031f 	and.w	r3, r3, #31
 8018c3e:	2202      	movs	r2, #2
 8018c40:	409a      	lsls	r2, r3
 8018c42:	69fb      	ldr	r3, [r7, #28]
 8018c44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018c46:	693b      	ldr	r3, [r7, #16]
 8018c48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018c4c:	2b00      	cmp	r3, #0
 8018c4e:	d018      	beq.n	8018c82 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018c50:	693b      	ldr	r3, [r7, #16]
 8018c52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	d109      	bne.n	8018c6e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	f000 813a 	beq.w	8018ed8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018c68:	6878      	ldr	r0, [r7, #4]
 8018c6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018c6c:	e134      	b.n	8018ed8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c72:	2b00      	cmp	r3, #0
 8018c74:	f000 8130 	beq.w	8018ed8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8018c78:	687b      	ldr	r3, [r7, #4]
 8018c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018c7c:	6878      	ldr	r0, [r7, #4]
 8018c7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018c80:	e12a      	b.n	8018ed8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018c82:	693b      	ldr	r3, [r7, #16]
 8018c84:	f003 0320 	and.w	r3, r3, #32
 8018c88:	2b00      	cmp	r3, #0
 8018c8a:	f040 8089 	bne.w	8018da0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018c8e:	687b      	ldr	r3, [r7, #4]
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	4a2b      	ldr	r2, [pc, #172]	; (8018d40 <HAL_DMA_IRQHandler+0xc74>)
 8018c94:	4293      	cmp	r3, r2
 8018c96:	d04a      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	4a29      	ldr	r2, [pc, #164]	; (8018d44 <HAL_DMA_IRQHandler+0xc78>)
 8018c9e:	4293      	cmp	r3, r2
 8018ca0:	d045      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018ca2:	687b      	ldr	r3, [r7, #4]
 8018ca4:	681b      	ldr	r3, [r3, #0]
 8018ca6:	4a28      	ldr	r2, [pc, #160]	; (8018d48 <HAL_DMA_IRQHandler+0xc7c>)
 8018ca8:	4293      	cmp	r3, r2
 8018caa:	d040      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018cac:	687b      	ldr	r3, [r7, #4]
 8018cae:	681b      	ldr	r3, [r3, #0]
 8018cb0:	4a26      	ldr	r2, [pc, #152]	; (8018d4c <HAL_DMA_IRQHandler+0xc80>)
 8018cb2:	4293      	cmp	r3, r2
 8018cb4:	d03b      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	4a25      	ldr	r2, [pc, #148]	; (8018d50 <HAL_DMA_IRQHandler+0xc84>)
 8018cbc:	4293      	cmp	r3, r2
 8018cbe:	d036      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	4a23      	ldr	r2, [pc, #140]	; (8018d54 <HAL_DMA_IRQHandler+0xc88>)
 8018cc6:	4293      	cmp	r3, r2
 8018cc8:	d031      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018cca:	687b      	ldr	r3, [r7, #4]
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	4a22      	ldr	r2, [pc, #136]	; (8018d58 <HAL_DMA_IRQHandler+0xc8c>)
 8018cd0:	4293      	cmp	r3, r2
 8018cd2:	d02c      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	681b      	ldr	r3, [r3, #0]
 8018cd8:	4a20      	ldr	r2, [pc, #128]	; (8018d5c <HAL_DMA_IRQHandler+0xc90>)
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	d027      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018cde:	687b      	ldr	r3, [r7, #4]
 8018ce0:	681b      	ldr	r3, [r3, #0]
 8018ce2:	4a1f      	ldr	r2, [pc, #124]	; (8018d60 <HAL_DMA_IRQHandler+0xc94>)
 8018ce4:	4293      	cmp	r3, r2
 8018ce6:	d022      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	4a1d      	ldr	r2, [pc, #116]	; (8018d64 <HAL_DMA_IRQHandler+0xc98>)
 8018cee:	4293      	cmp	r3, r2
 8018cf0:	d01d      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018cf2:	687b      	ldr	r3, [r7, #4]
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	4a1c      	ldr	r2, [pc, #112]	; (8018d68 <HAL_DMA_IRQHandler+0xc9c>)
 8018cf8:	4293      	cmp	r3, r2
 8018cfa:	d018      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	681b      	ldr	r3, [r3, #0]
 8018d00:	4a1a      	ldr	r2, [pc, #104]	; (8018d6c <HAL_DMA_IRQHandler+0xca0>)
 8018d02:	4293      	cmp	r3, r2
 8018d04:	d013      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018d06:	687b      	ldr	r3, [r7, #4]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	4a19      	ldr	r2, [pc, #100]	; (8018d70 <HAL_DMA_IRQHandler+0xca4>)
 8018d0c:	4293      	cmp	r3, r2
 8018d0e:	d00e      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018d10:	687b      	ldr	r3, [r7, #4]
 8018d12:	681b      	ldr	r3, [r3, #0]
 8018d14:	4a17      	ldr	r2, [pc, #92]	; (8018d74 <HAL_DMA_IRQHandler+0xca8>)
 8018d16:	4293      	cmp	r3, r2
 8018d18:	d009      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018d1a:	687b      	ldr	r3, [r7, #4]
 8018d1c:	681b      	ldr	r3, [r3, #0]
 8018d1e:	4a16      	ldr	r2, [pc, #88]	; (8018d78 <HAL_DMA_IRQHandler+0xcac>)
 8018d20:	4293      	cmp	r3, r2
 8018d22:	d004      	beq.n	8018d2e <HAL_DMA_IRQHandler+0xc62>
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	681b      	ldr	r3, [r3, #0]
 8018d28:	4a14      	ldr	r2, [pc, #80]	; (8018d7c <HAL_DMA_IRQHandler+0xcb0>)
 8018d2a:	4293      	cmp	r3, r2
 8018d2c:	d128      	bne.n	8018d80 <HAL_DMA_IRQHandler+0xcb4>
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	681b      	ldr	r3, [r3, #0]
 8018d32:	681a      	ldr	r2, [r3, #0]
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	681b      	ldr	r3, [r3, #0]
 8018d38:	f022 0214 	bic.w	r2, r2, #20
 8018d3c:	601a      	str	r2, [r3, #0]
 8018d3e:	e027      	b.n	8018d90 <HAL_DMA_IRQHandler+0xcc4>
 8018d40:	40020010 	.word	0x40020010
 8018d44:	40020028 	.word	0x40020028
 8018d48:	40020040 	.word	0x40020040
 8018d4c:	40020058 	.word	0x40020058
 8018d50:	40020070 	.word	0x40020070
 8018d54:	40020088 	.word	0x40020088
 8018d58:	400200a0 	.word	0x400200a0
 8018d5c:	400200b8 	.word	0x400200b8
 8018d60:	40020410 	.word	0x40020410
 8018d64:	40020428 	.word	0x40020428
 8018d68:	40020440 	.word	0x40020440
 8018d6c:	40020458 	.word	0x40020458
 8018d70:	40020470 	.word	0x40020470
 8018d74:	40020488 	.word	0x40020488
 8018d78:	400204a0 	.word	0x400204a0
 8018d7c:	400204b8 	.word	0x400204b8
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	681b      	ldr	r3, [r3, #0]
 8018d84:	681a      	ldr	r2, [r3, #0]
 8018d86:	687b      	ldr	r3, [r7, #4]
 8018d88:	681b      	ldr	r3, [r3, #0]
 8018d8a:	f022 020a 	bic.w	r2, r2, #10
 8018d8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2201      	movs	r2, #1
 8018d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	2200      	movs	r2, #0
 8018d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	f000 8097 	beq.w	8018ed8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018daa:	687b      	ldr	r3, [r7, #4]
 8018dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dae:	6878      	ldr	r0, [r7, #4]
 8018db0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018db2:	e091      	b.n	8018ed8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8018db4:	687b      	ldr	r3, [r7, #4]
 8018db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018db8:	f003 031f 	and.w	r3, r3, #31
 8018dbc:	2208      	movs	r2, #8
 8018dbe:	409a      	lsls	r2, r3
 8018dc0:	697b      	ldr	r3, [r7, #20]
 8018dc2:	4013      	ands	r3, r2
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	f000 8088 	beq.w	8018eda <HAL_DMA_IRQHandler+0xe0e>
 8018dca:	693b      	ldr	r3, [r7, #16]
 8018dcc:	f003 0308 	and.w	r3, r3, #8
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	f000 8082 	beq.w	8018eda <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	681b      	ldr	r3, [r3, #0]
 8018dda:	4a41      	ldr	r2, [pc, #260]	; (8018ee0 <HAL_DMA_IRQHandler+0xe14>)
 8018ddc:	4293      	cmp	r3, r2
 8018dde:	d04a      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	681b      	ldr	r3, [r3, #0]
 8018de4:	4a3f      	ldr	r2, [pc, #252]	; (8018ee4 <HAL_DMA_IRQHandler+0xe18>)
 8018de6:	4293      	cmp	r3, r2
 8018de8:	d045      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018dea:	687b      	ldr	r3, [r7, #4]
 8018dec:	681b      	ldr	r3, [r3, #0]
 8018dee:	4a3e      	ldr	r2, [pc, #248]	; (8018ee8 <HAL_DMA_IRQHandler+0xe1c>)
 8018df0:	4293      	cmp	r3, r2
 8018df2:	d040      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	4a3c      	ldr	r2, [pc, #240]	; (8018eec <HAL_DMA_IRQHandler+0xe20>)
 8018dfa:	4293      	cmp	r3, r2
 8018dfc:	d03b      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	4a3b      	ldr	r2, [pc, #236]	; (8018ef0 <HAL_DMA_IRQHandler+0xe24>)
 8018e04:	4293      	cmp	r3, r2
 8018e06:	d036      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	4a39      	ldr	r2, [pc, #228]	; (8018ef4 <HAL_DMA_IRQHandler+0xe28>)
 8018e0e:	4293      	cmp	r3, r2
 8018e10:	d031      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	4a38      	ldr	r2, [pc, #224]	; (8018ef8 <HAL_DMA_IRQHandler+0xe2c>)
 8018e18:	4293      	cmp	r3, r2
 8018e1a:	d02c      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e1c:	687b      	ldr	r3, [r7, #4]
 8018e1e:	681b      	ldr	r3, [r3, #0]
 8018e20:	4a36      	ldr	r2, [pc, #216]	; (8018efc <HAL_DMA_IRQHandler+0xe30>)
 8018e22:	4293      	cmp	r3, r2
 8018e24:	d027      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	4a35      	ldr	r2, [pc, #212]	; (8018f00 <HAL_DMA_IRQHandler+0xe34>)
 8018e2c:	4293      	cmp	r3, r2
 8018e2e:	d022      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	681b      	ldr	r3, [r3, #0]
 8018e34:	4a33      	ldr	r2, [pc, #204]	; (8018f04 <HAL_DMA_IRQHandler+0xe38>)
 8018e36:	4293      	cmp	r3, r2
 8018e38:	d01d      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e3a:	687b      	ldr	r3, [r7, #4]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	4a32      	ldr	r2, [pc, #200]	; (8018f08 <HAL_DMA_IRQHandler+0xe3c>)
 8018e40:	4293      	cmp	r3, r2
 8018e42:	d018      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e44:	687b      	ldr	r3, [r7, #4]
 8018e46:	681b      	ldr	r3, [r3, #0]
 8018e48:	4a30      	ldr	r2, [pc, #192]	; (8018f0c <HAL_DMA_IRQHandler+0xe40>)
 8018e4a:	4293      	cmp	r3, r2
 8018e4c:	d013      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e4e:	687b      	ldr	r3, [r7, #4]
 8018e50:	681b      	ldr	r3, [r3, #0]
 8018e52:	4a2f      	ldr	r2, [pc, #188]	; (8018f10 <HAL_DMA_IRQHandler+0xe44>)
 8018e54:	4293      	cmp	r3, r2
 8018e56:	d00e      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	681b      	ldr	r3, [r3, #0]
 8018e5c:	4a2d      	ldr	r2, [pc, #180]	; (8018f14 <HAL_DMA_IRQHandler+0xe48>)
 8018e5e:	4293      	cmp	r3, r2
 8018e60:	d009      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	4a2c      	ldr	r2, [pc, #176]	; (8018f18 <HAL_DMA_IRQHandler+0xe4c>)
 8018e68:	4293      	cmp	r3, r2
 8018e6a:	d004      	beq.n	8018e76 <HAL_DMA_IRQHandler+0xdaa>
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	681b      	ldr	r3, [r3, #0]
 8018e70:	4a2a      	ldr	r2, [pc, #168]	; (8018f1c <HAL_DMA_IRQHandler+0xe50>)
 8018e72:	4293      	cmp	r3, r2
 8018e74:	d108      	bne.n	8018e88 <HAL_DMA_IRQHandler+0xdbc>
 8018e76:	687b      	ldr	r3, [r7, #4]
 8018e78:	681b      	ldr	r3, [r3, #0]
 8018e7a:	681a      	ldr	r2, [r3, #0]
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	f022 021c 	bic.w	r2, r2, #28
 8018e84:	601a      	str	r2, [r3, #0]
 8018e86:	e007      	b.n	8018e98 <HAL_DMA_IRQHandler+0xdcc>
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	681a      	ldr	r2, [r3, #0]
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	f022 020e 	bic.w	r2, r2, #14
 8018e96:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018e98:	687b      	ldr	r3, [r7, #4]
 8018e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e9c:	f003 031f 	and.w	r3, r3, #31
 8018ea0:	2201      	movs	r2, #1
 8018ea2:	409a      	lsls	r2, r3
 8018ea4:	69fb      	ldr	r3, [r7, #28]
 8018ea6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018ea8:	687b      	ldr	r3, [r7, #4]
 8018eaa:	2201      	movs	r2, #1
 8018eac:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	2201      	movs	r2, #1
 8018eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	2200      	movs	r2, #0
 8018eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8018ebe:	687b      	ldr	r3, [r7, #4]
 8018ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d009      	beq.n	8018eda <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018eca:	6878      	ldr	r0, [r7, #4]
 8018ecc:	4798      	blx	r3
 8018ece:	e004      	b.n	8018eda <HAL_DMA_IRQHandler+0xe0e>
          return;
 8018ed0:	bf00      	nop
 8018ed2:	e002      	b.n	8018eda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018ed4:	bf00      	nop
 8018ed6:	e000      	b.n	8018eda <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018ed8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8018eda:	3728      	adds	r7, #40	; 0x28
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	40020010 	.word	0x40020010
 8018ee4:	40020028 	.word	0x40020028
 8018ee8:	40020040 	.word	0x40020040
 8018eec:	40020058 	.word	0x40020058
 8018ef0:	40020070 	.word	0x40020070
 8018ef4:	40020088 	.word	0x40020088
 8018ef8:	400200a0 	.word	0x400200a0
 8018efc:	400200b8 	.word	0x400200b8
 8018f00:	40020410 	.word	0x40020410
 8018f04:	40020428 	.word	0x40020428
 8018f08:	40020440 	.word	0x40020440
 8018f0c:	40020458 	.word	0x40020458
 8018f10:	40020470 	.word	0x40020470
 8018f14:	40020488 	.word	0x40020488
 8018f18:	400204a0 	.word	0x400204a0
 8018f1c:	400204b8 	.word	0x400204b8

08018f20 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018f20:	b480      	push	{r7}
 8018f22:	b087      	sub	sp, #28
 8018f24:	af00      	add	r7, sp, #0
 8018f26:	60f8      	str	r0, [r7, #12]
 8018f28:	60b9      	str	r1, [r7, #8]
 8018f2a:	607a      	str	r2, [r7, #4]
 8018f2c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f32:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018f38:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	681b      	ldr	r3, [r3, #0]
 8018f3e:	4a7f      	ldr	r2, [pc, #508]	; (801913c <DMA_SetConfig+0x21c>)
 8018f40:	4293      	cmp	r3, r2
 8018f42:	d072      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	681b      	ldr	r3, [r3, #0]
 8018f48:	4a7d      	ldr	r2, [pc, #500]	; (8019140 <DMA_SetConfig+0x220>)
 8018f4a:	4293      	cmp	r3, r2
 8018f4c:	d06d      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f4e:	68fb      	ldr	r3, [r7, #12]
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	4a7c      	ldr	r2, [pc, #496]	; (8019144 <DMA_SetConfig+0x224>)
 8018f54:	4293      	cmp	r3, r2
 8018f56:	d068      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f58:	68fb      	ldr	r3, [r7, #12]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	4a7a      	ldr	r2, [pc, #488]	; (8019148 <DMA_SetConfig+0x228>)
 8018f5e:	4293      	cmp	r3, r2
 8018f60:	d063      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f62:	68fb      	ldr	r3, [r7, #12]
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	4a79      	ldr	r2, [pc, #484]	; (801914c <DMA_SetConfig+0x22c>)
 8018f68:	4293      	cmp	r3, r2
 8018f6a:	d05e      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	681b      	ldr	r3, [r3, #0]
 8018f70:	4a77      	ldr	r2, [pc, #476]	; (8019150 <DMA_SetConfig+0x230>)
 8018f72:	4293      	cmp	r3, r2
 8018f74:	d059      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	4a76      	ldr	r2, [pc, #472]	; (8019154 <DMA_SetConfig+0x234>)
 8018f7c:	4293      	cmp	r3, r2
 8018f7e:	d054      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	681b      	ldr	r3, [r3, #0]
 8018f84:	4a74      	ldr	r2, [pc, #464]	; (8019158 <DMA_SetConfig+0x238>)
 8018f86:	4293      	cmp	r3, r2
 8018f88:	d04f      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	4a73      	ldr	r2, [pc, #460]	; (801915c <DMA_SetConfig+0x23c>)
 8018f90:	4293      	cmp	r3, r2
 8018f92:	d04a      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f94:	68fb      	ldr	r3, [r7, #12]
 8018f96:	681b      	ldr	r3, [r3, #0]
 8018f98:	4a71      	ldr	r2, [pc, #452]	; (8019160 <DMA_SetConfig+0x240>)
 8018f9a:	4293      	cmp	r3, r2
 8018f9c:	d045      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018f9e:	68fb      	ldr	r3, [r7, #12]
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	4a70      	ldr	r2, [pc, #448]	; (8019164 <DMA_SetConfig+0x244>)
 8018fa4:	4293      	cmp	r3, r2
 8018fa6:	d040      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018fa8:	68fb      	ldr	r3, [r7, #12]
 8018faa:	681b      	ldr	r3, [r3, #0]
 8018fac:	4a6e      	ldr	r2, [pc, #440]	; (8019168 <DMA_SetConfig+0x248>)
 8018fae:	4293      	cmp	r3, r2
 8018fb0:	d03b      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018fb2:	68fb      	ldr	r3, [r7, #12]
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	4a6d      	ldr	r2, [pc, #436]	; (801916c <DMA_SetConfig+0x24c>)
 8018fb8:	4293      	cmp	r3, r2
 8018fba:	d036      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018fbc:	68fb      	ldr	r3, [r7, #12]
 8018fbe:	681b      	ldr	r3, [r3, #0]
 8018fc0:	4a6b      	ldr	r2, [pc, #428]	; (8019170 <DMA_SetConfig+0x250>)
 8018fc2:	4293      	cmp	r3, r2
 8018fc4:	d031      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018fc6:	68fb      	ldr	r3, [r7, #12]
 8018fc8:	681b      	ldr	r3, [r3, #0]
 8018fca:	4a6a      	ldr	r2, [pc, #424]	; (8019174 <DMA_SetConfig+0x254>)
 8018fcc:	4293      	cmp	r3, r2
 8018fce:	d02c      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018fd0:	68fb      	ldr	r3, [r7, #12]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	4a68      	ldr	r2, [pc, #416]	; (8019178 <DMA_SetConfig+0x258>)
 8018fd6:	4293      	cmp	r3, r2
 8018fd8:	d027      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018fda:	68fb      	ldr	r3, [r7, #12]
 8018fdc:	681b      	ldr	r3, [r3, #0]
 8018fde:	4a67      	ldr	r2, [pc, #412]	; (801917c <DMA_SetConfig+0x25c>)
 8018fe0:	4293      	cmp	r3, r2
 8018fe2:	d022      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	681b      	ldr	r3, [r3, #0]
 8018fe8:	4a65      	ldr	r2, [pc, #404]	; (8019180 <DMA_SetConfig+0x260>)
 8018fea:	4293      	cmp	r3, r2
 8018fec:	d01d      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	681b      	ldr	r3, [r3, #0]
 8018ff2:	4a64      	ldr	r2, [pc, #400]	; (8019184 <DMA_SetConfig+0x264>)
 8018ff4:	4293      	cmp	r3, r2
 8018ff6:	d018      	beq.n	801902a <DMA_SetConfig+0x10a>
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	4a62      	ldr	r2, [pc, #392]	; (8019188 <DMA_SetConfig+0x268>)
 8018ffe:	4293      	cmp	r3, r2
 8019000:	d013      	beq.n	801902a <DMA_SetConfig+0x10a>
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	4a61      	ldr	r2, [pc, #388]	; (801918c <DMA_SetConfig+0x26c>)
 8019008:	4293      	cmp	r3, r2
 801900a:	d00e      	beq.n	801902a <DMA_SetConfig+0x10a>
 801900c:	68fb      	ldr	r3, [r7, #12]
 801900e:	681b      	ldr	r3, [r3, #0]
 8019010:	4a5f      	ldr	r2, [pc, #380]	; (8019190 <DMA_SetConfig+0x270>)
 8019012:	4293      	cmp	r3, r2
 8019014:	d009      	beq.n	801902a <DMA_SetConfig+0x10a>
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	4a5e      	ldr	r2, [pc, #376]	; (8019194 <DMA_SetConfig+0x274>)
 801901c:	4293      	cmp	r3, r2
 801901e:	d004      	beq.n	801902a <DMA_SetConfig+0x10a>
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	4a5c      	ldr	r2, [pc, #368]	; (8019198 <DMA_SetConfig+0x278>)
 8019026:	4293      	cmp	r3, r2
 8019028:	d101      	bne.n	801902e <DMA_SetConfig+0x10e>
 801902a:	2301      	movs	r3, #1
 801902c:	e000      	b.n	8019030 <DMA_SetConfig+0x110>
 801902e:	2300      	movs	r3, #0
 8019030:	2b00      	cmp	r3, #0
 8019032:	d00d      	beq.n	8019050 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019038:	68fa      	ldr	r2, [r7, #12]
 801903a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 801903c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019042:	2b00      	cmp	r3, #0
 8019044:	d004      	beq.n	8019050 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801904a:	68fa      	ldr	r2, [r7, #12]
 801904c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801904e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	681b      	ldr	r3, [r3, #0]
 8019054:	4a39      	ldr	r2, [pc, #228]	; (801913c <DMA_SetConfig+0x21c>)
 8019056:	4293      	cmp	r3, r2
 8019058:	d04a      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 801905a:	68fb      	ldr	r3, [r7, #12]
 801905c:	681b      	ldr	r3, [r3, #0]
 801905e:	4a38      	ldr	r2, [pc, #224]	; (8019140 <DMA_SetConfig+0x220>)
 8019060:	4293      	cmp	r3, r2
 8019062:	d045      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 8019064:	68fb      	ldr	r3, [r7, #12]
 8019066:	681b      	ldr	r3, [r3, #0]
 8019068:	4a36      	ldr	r2, [pc, #216]	; (8019144 <DMA_SetConfig+0x224>)
 801906a:	4293      	cmp	r3, r2
 801906c:	d040      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 801906e:	68fb      	ldr	r3, [r7, #12]
 8019070:	681b      	ldr	r3, [r3, #0]
 8019072:	4a35      	ldr	r2, [pc, #212]	; (8019148 <DMA_SetConfig+0x228>)
 8019074:	4293      	cmp	r3, r2
 8019076:	d03b      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 8019078:	68fb      	ldr	r3, [r7, #12]
 801907a:	681b      	ldr	r3, [r3, #0]
 801907c:	4a33      	ldr	r2, [pc, #204]	; (801914c <DMA_SetConfig+0x22c>)
 801907e:	4293      	cmp	r3, r2
 8019080:	d036      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	681b      	ldr	r3, [r3, #0]
 8019086:	4a32      	ldr	r2, [pc, #200]	; (8019150 <DMA_SetConfig+0x230>)
 8019088:	4293      	cmp	r3, r2
 801908a:	d031      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	681b      	ldr	r3, [r3, #0]
 8019090:	4a30      	ldr	r2, [pc, #192]	; (8019154 <DMA_SetConfig+0x234>)
 8019092:	4293      	cmp	r3, r2
 8019094:	d02c      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	4a2f      	ldr	r2, [pc, #188]	; (8019158 <DMA_SetConfig+0x238>)
 801909c:	4293      	cmp	r3, r2
 801909e:	d027      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 80190a0:	68fb      	ldr	r3, [r7, #12]
 80190a2:	681b      	ldr	r3, [r3, #0]
 80190a4:	4a2d      	ldr	r2, [pc, #180]	; (801915c <DMA_SetConfig+0x23c>)
 80190a6:	4293      	cmp	r3, r2
 80190a8:	d022      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 80190aa:	68fb      	ldr	r3, [r7, #12]
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	4a2c      	ldr	r2, [pc, #176]	; (8019160 <DMA_SetConfig+0x240>)
 80190b0:	4293      	cmp	r3, r2
 80190b2:	d01d      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	4a2a      	ldr	r2, [pc, #168]	; (8019164 <DMA_SetConfig+0x244>)
 80190ba:	4293      	cmp	r3, r2
 80190bc:	d018      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 80190be:	68fb      	ldr	r3, [r7, #12]
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	4a29      	ldr	r2, [pc, #164]	; (8019168 <DMA_SetConfig+0x248>)
 80190c4:	4293      	cmp	r3, r2
 80190c6:	d013      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	681b      	ldr	r3, [r3, #0]
 80190cc:	4a27      	ldr	r2, [pc, #156]	; (801916c <DMA_SetConfig+0x24c>)
 80190ce:	4293      	cmp	r3, r2
 80190d0:	d00e      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	681b      	ldr	r3, [r3, #0]
 80190d6:	4a26      	ldr	r2, [pc, #152]	; (8019170 <DMA_SetConfig+0x250>)
 80190d8:	4293      	cmp	r3, r2
 80190da:	d009      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 80190dc:	68fb      	ldr	r3, [r7, #12]
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	4a24      	ldr	r2, [pc, #144]	; (8019174 <DMA_SetConfig+0x254>)
 80190e2:	4293      	cmp	r3, r2
 80190e4:	d004      	beq.n	80190f0 <DMA_SetConfig+0x1d0>
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	681b      	ldr	r3, [r3, #0]
 80190ea:	4a23      	ldr	r2, [pc, #140]	; (8019178 <DMA_SetConfig+0x258>)
 80190ec:	4293      	cmp	r3, r2
 80190ee:	d101      	bne.n	80190f4 <DMA_SetConfig+0x1d4>
 80190f0:	2301      	movs	r3, #1
 80190f2:	e000      	b.n	80190f6 <DMA_SetConfig+0x1d6>
 80190f4:	2300      	movs	r3, #0
 80190f6:	2b00      	cmp	r3, #0
 80190f8:	d059      	beq.n	80191ae <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80190fe:	f003 031f 	and.w	r3, r3, #31
 8019102:	223f      	movs	r2, #63	; 0x3f
 8019104:	409a      	lsls	r2, r3
 8019106:	697b      	ldr	r3, [r7, #20]
 8019108:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	681a      	ldr	r2, [r3, #0]
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8019118:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	683a      	ldr	r2, [r7, #0]
 8019120:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	689b      	ldr	r3, [r3, #8]
 8019126:	2b40      	cmp	r3, #64	; 0x40
 8019128:	d138      	bne.n	801919c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	687a      	ldr	r2, [r7, #4]
 8019130:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	681b      	ldr	r3, [r3, #0]
 8019136:	68ba      	ldr	r2, [r7, #8]
 8019138:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801913a:	e086      	b.n	801924a <DMA_SetConfig+0x32a>
 801913c:	40020010 	.word	0x40020010
 8019140:	40020028 	.word	0x40020028
 8019144:	40020040 	.word	0x40020040
 8019148:	40020058 	.word	0x40020058
 801914c:	40020070 	.word	0x40020070
 8019150:	40020088 	.word	0x40020088
 8019154:	400200a0 	.word	0x400200a0
 8019158:	400200b8 	.word	0x400200b8
 801915c:	40020410 	.word	0x40020410
 8019160:	40020428 	.word	0x40020428
 8019164:	40020440 	.word	0x40020440
 8019168:	40020458 	.word	0x40020458
 801916c:	40020470 	.word	0x40020470
 8019170:	40020488 	.word	0x40020488
 8019174:	400204a0 	.word	0x400204a0
 8019178:	400204b8 	.word	0x400204b8
 801917c:	58025408 	.word	0x58025408
 8019180:	5802541c 	.word	0x5802541c
 8019184:	58025430 	.word	0x58025430
 8019188:	58025444 	.word	0x58025444
 801918c:	58025458 	.word	0x58025458
 8019190:	5802546c 	.word	0x5802546c
 8019194:	58025480 	.word	0x58025480
 8019198:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	681b      	ldr	r3, [r3, #0]
 80191a0:	68ba      	ldr	r2, [r7, #8]
 80191a2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	687a      	ldr	r2, [r7, #4]
 80191aa:	60da      	str	r2, [r3, #12]
}
 80191ac:	e04d      	b.n	801924a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	4a29      	ldr	r2, [pc, #164]	; (8019258 <DMA_SetConfig+0x338>)
 80191b4:	4293      	cmp	r3, r2
 80191b6:	d022      	beq.n	80191fe <DMA_SetConfig+0x2de>
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	4a27      	ldr	r2, [pc, #156]	; (801925c <DMA_SetConfig+0x33c>)
 80191be:	4293      	cmp	r3, r2
 80191c0:	d01d      	beq.n	80191fe <DMA_SetConfig+0x2de>
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	4a26      	ldr	r2, [pc, #152]	; (8019260 <DMA_SetConfig+0x340>)
 80191c8:	4293      	cmp	r3, r2
 80191ca:	d018      	beq.n	80191fe <DMA_SetConfig+0x2de>
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	4a24      	ldr	r2, [pc, #144]	; (8019264 <DMA_SetConfig+0x344>)
 80191d2:	4293      	cmp	r3, r2
 80191d4:	d013      	beq.n	80191fe <DMA_SetConfig+0x2de>
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	4a23      	ldr	r2, [pc, #140]	; (8019268 <DMA_SetConfig+0x348>)
 80191dc:	4293      	cmp	r3, r2
 80191de:	d00e      	beq.n	80191fe <DMA_SetConfig+0x2de>
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	4a21      	ldr	r2, [pc, #132]	; (801926c <DMA_SetConfig+0x34c>)
 80191e6:	4293      	cmp	r3, r2
 80191e8:	d009      	beq.n	80191fe <DMA_SetConfig+0x2de>
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	4a20      	ldr	r2, [pc, #128]	; (8019270 <DMA_SetConfig+0x350>)
 80191f0:	4293      	cmp	r3, r2
 80191f2:	d004      	beq.n	80191fe <DMA_SetConfig+0x2de>
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	4a1e      	ldr	r2, [pc, #120]	; (8019274 <DMA_SetConfig+0x354>)
 80191fa:	4293      	cmp	r3, r2
 80191fc:	d101      	bne.n	8019202 <DMA_SetConfig+0x2e2>
 80191fe:	2301      	movs	r3, #1
 8019200:	e000      	b.n	8019204 <DMA_SetConfig+0x2e4>
 8019202:	2300      	movs	r3, #0
 8019204:	2b00      	cmp	r3, #0
 8019206:	d020      	beq.n	801924a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801920c:	f003 031f 	and.w	r3, r3, #31
 8019210:	2201      	movs	r2, #1
 8019212:	409a      	lsls	r2, r3
 8019214:	693b      	ldr	r3, [r7, #16]
 8019216:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	681b      	ldr	r3, [r3, #0]
 801921c:	683a      	ldr	r2, [r7, #0]
 801921e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019220:	68fb      	ldr	r3, [r7, #12]
 8019222:	689b      	ldr	r3, [r3, #8]
 8019224:	2b40      	cmp	r3, #64	; 0x40
 8019226:	d108      	bne.n	801923a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8019228:	68fb      	ldr	r3, [r7, #12]
 801922a:	681b      	ldr	r3, [r3, #0]
 801922c:	687a      	ldr	r2, [r7, #4]
 801922e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	68ba      	ldr	r2, [r7, #8]
 8019236:	60da      	str	r2, [r3, #12]
}
 8019238:	e007      	b.n	801924a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	68ba      	ldr	r2, [r7, #8]
 8019240:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	681b      	ldr	r3, [r3, #0]
 8019246:	687a      	ldr	r2, [r7, #4]
 8019248:	60da      	str	r2, [r3, #12]
}
 801924a:	bf00      	nop
 801924c:	371c      	adds	r7, #28
 801924e:	46bd      	mov	sp, r7
 8019250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019254:	4770      	bx	lr
 8019256:	bf00      	nop
 8019258:	58025408 	.word	0x58025408
 801925c:	5802541c 	.word	0x5802541c
 8019260:	58025430 	.word	0x58025430
 8019264:	58025444 	.word	0x58025444
 8019268:	58025458 	.word	0x58025458
 801926c:	5802546c 	.word	0x5802546c
 8019270:	58025480 	.word	0x58025480
 8019274:	58025494 	.word	0x58025494

08019278 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019278:	b480      	push	{r7}
 801927a:	b085      	sub	sp, #20
 801927c:	af00      	add	r7, sp, #0
 801927e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019280:	687b      	ldr	r3, [r7, #4]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	4a42      	ldr	r2, [pc, #264]	; (8019390 <DMA_CalcBaseAndBitshift+0x118>)
 8019286:	4293      	cmp	r3, r2
 8019288:	d04a      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 801928a:	687b      	ldr	r3, [r7, #4]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	4a41      	ldr	r2, [pc, #260]	; (8019394 <DMA_CalcBaseAndBitshift+0x11c>)
 8019290:	4293      	cmp	r3, r2
 8019292:	d045      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 8019294:	687b      	ldr	r3, [r7, #4]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	4a3f      	ldr	r2, [pc, #252]	; (8019398 <DMA_CalcBaseAndBitshift+0x120>)
 801929a:	4293      	cmp	r3, r2
 801929c:	d040      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	4a3e      	ldr	r2, [pc, #248]	; (801939c <DMA_CalcBaseAndBitshift+0x124>)
 80192a4:	4293      	cmp	r3, r2
 80192a6:	d03b      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192a8:	687b      	ldr	r3, [r7, #4]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	4a3c      	ldr	r2, [pc, #240]	; (80193a0 <DMA_CalcBaseAndBitshift+0x128>)
 80192ae:	4293      	cmp	r3, r2
 80192b0:	d036      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192b2:	687b      	ldr	r3, [r7, #4]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	4a3b      	ldr	r2, [pc, #236]	; (80193a4 <DMA_CalcBaseAndBitshift+0x12c>)
 80192b8:	4293      	cmp	r3, r2
 80192ba:	d031      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	4a39      	ldr	r2, [pc, #228]	; (80193a8 <DMA_CalcBaseAndBitshift+0x130>)
 80192c2:	4293      	cmp	r3, r2
 80192c4:	d02c      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192c6:	687b      	ldr	r3, [r7, #4]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	4a38      	ldr	r2, [pc, #224]	; (80193ac <DMA_CalcBaseAndBitshift+0x134>)
 80192cc:	4293      	cmp	r3, r2
 80192ce:	d027      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192d0:	687b      	ldr	r3, [r7, #4]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	4a36      	ldr	r2, [pc, #216]	; (80193b0 <DMA_CalcBaseAndBitshift+0x138>)
 80192d6:	4293      	cmp	r3, r2
 80192d8:	d022      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192da:	687b      	ldr	r3, [r7, #4]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	4a35      	ldr	r2, [pc, #212]	; (80193b4 <DMA_CalcBaseAndBitshift+0x13c>)
 80192e0:	4293      	cmp	r3, r2
 80192e2:	d01d      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	4a33      	ldr	r2, [pc, #204]	; (80193b8 <DMA_CalcBaseAndBitshift+0x140>)
 80192ea:	4293      	cmp	r3, r2
 80192ec:	d018      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	4a32      	ldr	r2, [pc, #200]	; (80193bc <DMA_CalcBaseAndBitshift+0x144>)
 80192f4:	4293      	cmp	r3, r2
 80192f6:	d013      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 80192f8:	687b      	ldr	r3, [r7, #4]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	4a30      	ldr	r2, [pc, #192]	; (80193c0 <DMA_CalcBaseAndBitshift+0x148>)
 80192fe:	4293      	cmp	r3, r2
 8019300:	d00e      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 8019302:	687b      	ldr	r3, [r7, #4]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	4a2f      	ldr	r2, [pc, #188]	; (80193c4 <DMA_CalcBaseAndBitshift+0x14c>)
 8019308:	4293      	cmp	r3, r2
 801930a:	d009      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	4a2d      	ldr	r2, [pc, #180]	; (80193c8 <DMA_CalcBaseAndBitshift+0x150>)
 8019312:	4293      	cmp	r3, r2
 8019314:	d004      	beq.n	8019320 <DMA_CalcBaseAndBitshift+0xa8>
 8019316:	687b      	ldr	r3, [r7, #4]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	4a2c      	ldr	r2, [pc, #176]	; (80193cc <DMA_CalcBaseAndBitshift+0x154>)
 801931c:	4293      	cmp	r3, r2
 801931e:	d101      	bne.n	8019324 <DMA_CalcBaseAndBitshift+0xac>
 8019320:	2301      	movs	r3, #1
 8019322:	e000      	b.n	8019326 <DMA_CalcBaseAndBitshift+0xae>
 8019324:	2300      	movs	r3, #0
 8019326:	2b00      	cmp	r3, #0
 8019328:	d024      	beq.n	8019374 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	b2db      	uxtb	r3, r3
 8019330:	3b10      	subs	r3, #16
 8019332:	4a27      	ldr	r2, [pc, #156]	; (80193d0 <DMA_CalcBaseAndBitshift+0x158>)
 8019334:	fba2 2303 	umull	r2, r3, r2, r3
 8019338:	091b      	lsrs	r3, r3, #4
 801933a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801933c:	68fb      	ldr	r3, [r7, #12]
 801933e:	f003 0307 	and.w	r3, r3, #7
 8019342:	4a24      	ldr	r2, [pc, #144]	; (80193d4 <DMA_CalcBaseAndBitshift+0x15c>)
 8019344:	5cd3      	ldrb	r3, [r2, r3]
 8019346:	461a      	mov	r2, r3
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 801934c:	68fb      	ldr	r3, [r7, #12]
 801934e:	2b03      	cmp	r3, #3
 8019350:	d908      	bls.n	8019364 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8019352:	687b      	ldr	r3, [r7, #4]
 8019354:	681b      	ldr	r3, [r3, #0]
 8019356:	461a      	mov	r2, r3
 8019358:	4b1f      	ldr	r3, [pc, #124]	; (80193d8 <DMA_CalcBaseAndBitshift+0x160>)
 801935a:	4013      	ands	r3, r2
 801935c:	1d1a      	adds	r2, r3, #4
 801935e:	687b      	ldr	r3, [r7, #4]
 8019360:	659a      	str	r2, [r3, #88]	; 0x58
 8019362:	e00d      	b.n	8019380 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	681b      	ldr	r3, [r3, #0]
 8019368:	461a      	mov	r2, r3
 801936a:	4b1b      	ldr	r3, [pc, #108]	; (80193d8 <DMA_CalcBaseAndBitshift+0x160>)
 801936c:	4013      	ands	r3, r2
 801936e:	687a      	ldr	r2, [r7, #4]
 8019370:	6593      	str	r3, [r2, #88]	; 0x58
 8019372:	e005      	b.n	8019380 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8019374:	687b      	ldr	r3, [r7, #4]
 8019376:	681b      	ldr	r3, [r3, #0]
 8019378:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019384:	4618      	mov	r0, r3
 8019386:	3714      	adds	r7, #20
 8019388:	46bd      	mov	sp, r7
 801938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938e:	4770      	bx	lr
 8019390:	40020010 	.word	0x40020010
 8019394:	40020028 	.word	0x40020028
 8019398:	40020040 	.word	0x40020040
 801939c:	40020058 	.word	0x40020058
 80193a0:	40020070 	.word	0x40020070
 80193a4:	40020088 	.word	0x40020088
 80193a8:	400200a0 	.word	0x400200a0
 80193ac:	400200b8 	.word	0x400200b8
 80193b0:	40020410 	.word	0x40020410
 80193b4:	40020428 	.word	0x40020428
 80193b8:	40020440 	.word	0x40020440
 80193bc:	40020458 	.word	0x40020458
 80193c0:	40020470 	.word	0x40020470
 80193c4:	40020488 	.word	0x40020488
 80193c8:	400204a0 	.word	0x400204a0
 80193cc:	400204b8 	.word	0x400204b8
 80193d0:	aaaaaaab 	.word	0xaaaaaaab
 80193d4:	08020dd4 	.word	0x08020dd4
 80193d8:	fffffc00 	.word	0xfffffc00

080193dc <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80193dc:	b480      	push	{r7}
 80193de:	b085      	sub	sp, #20
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80193e4:	2300      	movs	r3, #0
 80193e6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	699b      	ldr	r3, [r3, #24]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d120      	bne.n	8019432 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193f4:	2b03      	cmp	r3, #3
 80193f6:	d858      	bhi.n	80194aa <DMA_CheckFifoParam+0xce>
 80193f8:	a201      	add	r2, pc, #4	; (adr r2, 8019400 <DMA_CheckFifoParam+0x24>)
 80193fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80193fe:	bf00      	nop
 8019400:	08019411 	.word	0x08019411
 8019404:	08019423 	.word	0x08019423
 8019408:	08019411 	.word	0x08019411
 801940c:	080194ab 	.word	0x080194ab
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019418:	2b00      	cmp	r3, #0
 801941a:	d048      	beq.n	80194ae <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801941c:	2301      	movs	r3, #1
 801941e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019420:	e045      	b.n	80194ae <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019426:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801942a:	d142      	bne.n	80194b2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801942c:	2301      	movs	r3, #1
 801942e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019430:	e03f      	b.n	80194b2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	699b      	ldr	r3, [r3, #24]
 8019436:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801943a:	d123      	bne.n	8019484 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019440:	2b03      	cmp	r3, #3
 8019442:	d838      	bhi.n	80194b6 <DMA_CheckFifoParam+0xda>
 8019444:	a201      	add	r2, pc, #4	; (adr r2, 801944c <DMA_CheckFifoParam+0x70>)
 8019446:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801944a:	bf00      	nop
 801944c:	0801945d 	.word	0x0801945d
 8019450:	08019463 	.word	0x08019463
 8019454:	0801945d 	.word	0x0801945d
 8019458:	08019475 	.word	0x08019475
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801945c:	2301      	movs	r3, #1
 801945e:	73fb      	strb	r3, [r7, #15]
        break;
 8019460:	e030      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019466:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801946a:	2b00      	cmp	r3, #0
 801946c:	d025      	beq.n	80194ba <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801946e:	2301      	movs	r3, #1
 8019470:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019472:	e022      	b.n	80194ba <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019478:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801947c:	d11f      	bne.n	80194be <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801947e:	2301      	movs	r3, #1
 8019480:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019482:	e01c      	b.n	80194be <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019488:	2b02      	cmp	r3, #2
 801948a:	d902      	bls.n	8019492 <DMA_CheckFifoParam+0xb6>
 801948c:	2b03      	cmp	r3, #3
 801948e:	d003      	beq.n	8019498 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8019490:	e018      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8019492:	2301      	movs	r3, #1
 8019494:	73fb      	strb	r3, [r7, #15]
        break;
 8019496:	e015      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801949c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d00e      	beq.n	80194c2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80194a4:	2301      	movs	r3, #1
 80194a6:	73fb      	strb	r3, [r7, #15]
    break;
 80194a8:	e00b      	b.n	80194c2 <DMA_CheckFifoParam+0xe6>
        break;
 80194aa:	bf00      	nop
 80194ac:	e00a      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>
        break;
 80194ae:	bf00      	nop
 80194b0:	e008      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>
        break;
 80194b2:	bf00      	nop
 80194b4:	e006      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>
        break;
 80194b6:	bf00      	nop
 80194b8:	e004      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>
        break;
 80194ba:	bf00      	nop
 80194bc:	e002      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>
        break;
 80194be:	bf00      	nop
 80194c0:	e000      	b.n	80194c4 <DMA_CheckFifoParam+0xe8>
    break;
 80194c2:	bf00      	nop
    }
  }

  return status;
 80194c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80194c6:	4618      	mov	r0, r3
 80194c8:	3714      	adds	r7, #20
 80194ca:	46bd      	mov	sp, r7
 80194cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194d0:	4770      	bx	lr
 80194d2:	bf00      	nop

080194d4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80194d4:	b480      	push	{r7}
 80194d6:	b085      	sub	sp, #20
 80194d8:	af00      	add	r7, sp, #0
 80194da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80194dc:	687b      	ldr	r3, [r7, #4]
 80194de:	681b      	ldr	r3, [r3, #0]
 80194e0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80194e2:	687b      	ldr	r3, [r7, #4]
 80194e4:	681b      	ldr	r3, [r3, #0]
 80194e6:	4a38      	ldr	r2, [pc, #224]	; (80195c8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80194e8:	4293      	cmp	r3, r2
 80194ea:	d022      	beq.n	8019532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	681b      	ldr	r3, [r3, #0]
 80194f0:	4a36      	ldr	r2, [pc, #216]	; (80195cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80194f2:	4293      	cmp	r3, r2
 80194f4:	d01d      	beq.n	8019532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	4a35      	ldr	r2, [pc, #212]	; (80195d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80194fc:	4293      	cmp	r3, r2
 80194fe:	d018      	beq.n	8019532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019500:	687b      	ldr	r3, [r7, #4]
 8019502:	681b      	ldr	r3, [r3, #0]
 8019504:	4a33      	ldr	r2, [pc, #204]	; (80195d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8019506:	4293      	cmp	r3, r2
 8019508:	d013      	beq.n	8019532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801950a:	687b      	ldr	r3, [r7, #4]
 801950c:	681b      	ldr	r3, [r3, #0]
 801950e:	4a32      	ldr	r2, [pc, #200]	; (80195d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8019510:	4293      	cmp	r3, r2
 8019512:	d00e      	beq.n	8019532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	681b      	ldr	r3, [r3, #0]
 8019518:	4a30      	ldr	r2, [pc, #192]	; (80195dc <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801951a:	4293      	cmp	r3, r2
 801951c:	d009      	beq.n	8019532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	4a2f      	ldr	r2, [pc, #188]	; (80195e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8019524:	4293      	cmp	r3, r2
 8019526:	d004      	beq.n	8019532 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	4a2d      	ldr	r2, [pc, #180]	; (80195e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801952e:	4293      	cmp	r3, r2
 8019530:	d101      	bne.n	8019536 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8019532:	2301      	movs	r3, #1
 8019534:	e000      	b.n	8019538 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8019536:	2300      	movs	r3, #0
 8019538:	2b00      	cmp	r3, #0
 801953a:	d01a      	beq.n	8019572 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	b2db      	uxtb	r3, r3
 8019542:	3b08      	subs	r3, #8
 8019544:	4a28      	ldr	r2, [pc, #160]	; (80195e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8019546:	fba2 2303 	umull	r2, r3, r2, r3
 801954a:	091b      	lsrs	r3, r3, #4
 801954c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801954e:	68fa      	ldr	r2, [r7, #12]
 8019550:	4b26      	ldr	r3, [pc, #152]	; (80195ec <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8019552:	4413      	add	r3, r2
 8019554:	009b      	lsls	r3, r3, #2
 8019556:	461a      	mov	r2, r3
 8019558:	687b      	ldr	r3, [r7, #4]
 801955a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	4a24      	ldr	r2, [pc, #144]	; (80195f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8019560:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8019562:	68fb      	ldr	r3, [r7, #12]
 8019564:	f003 031f 	and.w	r3, r3, #31
 8019568:	2201      	movs	r2, #1
 801956a:	409a      	lsls	r2, r3
 801956c:	687b      	ldr	r3, [r7, #4]
 801956e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8019570:	e024      	b.n	80195bc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	681b      	ldr	r3, [r3, #0]
 8019576:	b2db      	uxtb	r3, r3
 8019578:	3b10      	subs	r3, #16
 801957a:	4a1e      	ldr	r2, [pc, #120]	; (80195f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801957c:	fba2 2303 	umull	r2, r3, r2, r3
 8019580:	091b      	lsrs	r3, r3, #4
 8019582:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8019584:	68bb      	ldr	r3, [r7, #8]
 8019586:	4a1c      	ldr	r2, [pc, #112]	; (80195f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8019588:	4293      	cmp	r3, r2
 801958a:	d806      	bhi.n	801959a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801958c:	68bb      	ldr	r3, [r7, #8]
 801958e:	4a1b      	ldr	r2, [pc, #108]	; (80195fc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8019590:	4293      	cmp	r3, r2
 8019592:	d902      	bls.n	801959a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8019594:	68fb      	ldr	r3, [r7, #12]
 8019596:	3308      	adds	r3, #8
 8019598:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801959a:	68fa      	ldr	r2, [r7, #12]
 801959c:	4b18      	ldr	r3, [pc, #96]	; (8019600 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801959e:	4413      	add	r3, r2
 80195a0:	009b      	lsls	r3, r3, #2
 80195a2:	461a      	mov	r2, r3
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	4a16      	ldr	r2, [pc, #88]	; (8019604 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80195ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80195ae:	68fb      	ldr	r3, [r7, #12]
 80195b0:	f003 031f 	and.w	r3, r3, #31
 80195b4:	2201      	movs	r2, #1
 80195b6:	409a      	lsls	r2, r3
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	669a      	str	r2, [r3, #104]	; 0x68
}
 80195bc:	bf00      	nop
 80195be:	3714      	adds	r7, #20
 80195c0:	46bd      	mov	sp, r7
 80195c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195c6:	4770      	bx	lr
 80195c8:	58025408 	.word	0x58025408
 80195cc:	5802541c 	.word	0x5802541c
 80195d0:	58025430 	.word	0x58025430
 80195d4:	58025444 	.word	0x58025444
 80195d8:	58025458 	.word	0x58025458
 80195dc:	5802546c 	.word	0x5802546c
 80195e0:	58025480 	.word	0x58025480
 80195e4:	58025494 	.word	0x58025494
 80195e8:	cccccccd 	.word	0xcccccccd
 80195ec:	16009600 	.word	0x16009600
 80195f0:	58025880 	.word	0x58025880
 80195f4:	aaaaaaab 	.word	0xaaaaaaab
 80195f8:	400204b8 	.word	0x400204b8
 80195fc:	4002040f 	.word	0x4002040f
 8019600:	10008200 	.word	0x10008200
 8019604:	40020880 	.word	0x40020880

08019608 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8019608:	b480      	push	{r7}
 801960a:	b085      	sub	sp, #20
 801960c:	af00      	add	r7, sp, #0
 801960e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	685b      	ldr	r3, [r3, #4]
 8019614:	b2db      	uxtb	r3, r3
 8019616:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8019618:	68fb      	ldr	r3, [r7, #12]
 801961a:	2b00      	cmp	r3, #0
 801961c:	d04a      	beq.n	80196b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801961e:	68fb      	ldr	r3, [r7, #12]
 8019620:	2b08      	cmp	r3, #8
 8019622:	d847      	bhi.n	80196b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019624:	687b      	ldr	r3, [r7, #4]
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	4a25      	ldr	r2, [pc, #148]	; (80196c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801962a:	4293      	cmp	r3, r2
 801962c:	d022      	beq.n	8019674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801962e:	687b      	ldr	r3, [r7, #4]
 8019630:	681b      	ldr	r3, [r3, #0]
 8019632:	4a24      	ldr	r2, [pc, #144]	; (80196c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8019634:	4293      	cmp	r3, r2
 8019636:	d01d      	beq.n	8019674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	681b      	ldr	r3, [r3, #0]
 801963c:	4a22      	ldr	r2, [pc, #136]	; (80196c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801963e:	4293      	cmp	r3, r2
 8019640:	d018      	beq.n	8019674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019642:	687b      	ldr	r3, [r7, #4]
 8019644:	681b      	ldr	r3, [r3, #0]
 8019646:	4a21      	ldr	r2, [pc, #132]	; (80196cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8019648:	4293      	cmp	r3, r2
 801964a:	d013      	beq.n	8019674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	4a1f      	ldr	r2, [pc, #124]	; (80196d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8019652:	4293      	cmp	r3, r2
 8019654:	d00e      	beq.n	8019674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	4a1e      	ldr	r2, [pc, #120]	; (80196d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801965c:	4293      	cmp	r3, r2
 801965e:	d009      	beq.n	8019674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	681b      	ldr	r3, [r3, #0]
 8019664:	4a1c      	ldr	r2, [pc, #112]	; (80196d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8019666:	4293      	cmp	r3, r2
 8019668:	d004      	beq.n	8019674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	4a1b      	ldr	r2, [pc, #108]	; (80196dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8019670:	4293      	cmp	r3, r2
 8019672:	d101      	bne.n	8019678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8019674:	2301      	movs	r3, #1
 8019676:	e000      	b.n	801967a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8019678:	2300      	movs	r3, #0
 801967a:	2b00      	cmp	r3, #0
 801967c:	d00a      	beq.n	8019694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801967e:	68fa      	ldr	r2, [r7, #12]
 8019680:	4b17      	ldr	r3, [pc, #92]	; (80196e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8019682:	4413      	add	r3, r2
 8019684:	009b      	lsls	r3, r3, #2
 8019686:	461a      	mov	r2, r3
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	4a15      	ldr	r2, [pc, #84]	; (80196e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8019690:	671a      	str	r2, [r3, #112]	; 0x70
 8019692:	e009      	b.n	80196a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8019694:	68fa      	ldr	r2, [r7, #12]
 8019696:	4b14      	ldr	r3, [pc, #80]	; (80196e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8019698:	4413      	add	r3, r2
 801969a:	009b      	lsls	r3, r3, #2
 801969c:	461a      	mov	r2, r3
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80196a2:	687b      	ldr	r3, [r7, #4]
 80196a4:	4a11      	ldr	r2, [pc, #68]	; (80196ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80196a6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80196a8:	68fb      	ldr	r3, [r7, #12]
 80196aa:	3b01      	subs	r3, #1
 80196ac:	2201      	movs	r2, #1
 80196ae:	409a      	lsls	r2, r3
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80196b4:	bf00      	nop
 80196b6:	3714      	adds	r7, #20
 80196b8:	46bd      	mov	sp, r7
 80196ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196be:	4770      	bx	lr
 80196c0:	58025408 	.word	0x58025408
 80196c4:	5802541c 	.word	0x5802541c
 80196c8:	58025430 	.word	0x58025430
 80196cc:	58025444 	.word	0x58025444
 80196d0:	58025458 	.word	0x58025458
 80196d4:	5802546c 	.word	0x5802546c
 80196d8:	58025480 	.word	0x58025480
 80196dc:	58025494 	.word	0x58025494
 80196e0:	1600963f 	.word	0x1600963f
 80196e4:	58025940 	.word	0x58025940
 80196e8:	1000823f 	.word	0x1000823f
 80196ec:	40020940 	.word	0x40020940

080196f0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b098      	sub	sp, #96	; 0x60
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80196f8:	4a84      	ldr	r2, [pc, #528]	; (801990c <HAL_FDCAN_Init+0x21c>)
 80196fa:	f107 030c 	add.w	r3, r7, #12
 80196fe:	4611      	mov	r1, r2
 8019700:	224c      	movs	r2, #76	; 0x4c
 8019702:	4618      	mov	r0, r3
 8019704:	f007 f8b6 	bl	8020874 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	2b00      	cmp	r3, #0
 801970c:	d101      	bne.n	8019712 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 801970e:	2301      	movs	r3, #1
 8019710:	e1c6      	b.n	8019aa0 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	4a7e      	ldr	r2, [pc, #504]	; (8019910 <HAL_FDCAN_Init+0x220>)
 8019718:	4293      	cmp	r3, r2
 801971a:	d106      	bne.n	801972a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019724:	461a      	mov	r2, r3
 8019726:	687b      	ldr	r3, [r7, #4]
 8019728:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019730:	b2db      	uxtb	r3, r3
 8019732:	2b00      	cmp	r3, #0
 8019734:	d106      	bne.n	8019744 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	2200      	movs	r2, #0
 801973a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 801973e:	6878      	ldr	r0, [r7, #4]
 8019740:	f7fa feda 	bl	80144f8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	699a      	ldr	r2, [r3, #24]
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	f022 0210 	bic.w	r2, r2, #16
 8019752:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019754:	f7fb fd26 	bl	80151a4 <HAL_GetTick>
 8019758:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 801975a:	e014      	b.n	8019786 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 801975c:	f7fb fd22 	bl	80151a4 <HAL_GetTick>
 8019760:	4602      	mov	r2, r0
 8019762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019764:	1ad3      	subs	r3, r2, r3
 8019766:	2b0a      	cmp	r3, #10
 8019768:	d90d      	bls.n	8019786 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019770:	f043 0201 	orr.w	r2, r3, #1
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	2203      	movs	r2, #3
 801977e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8019782:	2301      	movs	r3, #1
 8019784:	e18c      	b.n	8019aa0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8019786:	687b      	ldr	r3, [r7, #4]
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	699b      	ldr	r3, [r3, #24]
 801978c:	f003 0308 	and.w	r3, r3, #8
 8019790:	2b08      	cmp	r3, #8
 8019792:	d0e3      	beq.n	801975c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	699a      	ldr	r2, [r3, #24]
 801979a:	687b      	ldr	r3, [r7, #4]
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	f042 0201 	orr.w	r2, r2, #1
 80197a2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80197a4:	f7fb fcfe 	bl	80151a4 <HAL_GetTick>
 80197a8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80197aa:	e014      	b.n	80197d6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80197ac:	f7fb fcfa 	bl	80151a4 <HAL_GetTick>
 80197b0:	4602      	mov	r2, r0
 80197b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80197b4:	1ad3      	subs	r3, r2, r3
 80197b6:	2b0a      	cmp	r3, #10
 80197b8:	d90d      	bls.n	80197d6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80197ba:	687b      	ldr	r3, [r7, #4]
 80197bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80197c0:	f043 0201 	orr.w	r2, r3, #1
 80197c4:	687b      	ldr	r3, [r7, #4]
 80197c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80197ca:	687b      	ldr	r3, [r7, #4]
 80197cc:	2203      	movs	r2, #3
 80197ce:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80197d2:	2301      	movs	r3, #1
 80197d4:	e164      	b.n	8019aa0 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	681b      	ldr	r3, [r3, #0]
 80197da:	699b      	ldr	r3, [r3, #24]
 80197dc:	f003 0301 	and.w	r3, r3, #1
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d0e3      	beq.n	80197ac <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	681b      	ldr	r3, [r3, #0]
 80197e8:	699a      	ldr	r2, [r3, #24]
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	681b      	ldr	r3, [r3, #0]
 80197ee:	f042 0202 	orr.w	r2, r2, #2
 80197f2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	7c1b      	ldrb	r3, [r3, #16]
 80197f8:	2b01      	cmp	r3, #1
 80197fa:	d108      	bne.n	801980e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80197fc:	687b      	ldr	r3, [r7, #4]
 80197fe:	681b      	ldr	r3, [r3, #0]
 8019800:	699a      	ldr	r2, [r3, #24]
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	681b      	ldr	r3, [r3, #0]
 8019806:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801980a:	619a      	str	r2, [r3, #24]
 801980c:	e007      	b.n	801981e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	699a      	ldr	r2, [r3, #24]
 8019814:	687b      	ldr	r3, [r7, #4]
 8019816:	681b      	ldr	r3, [r3, #0]
 8019818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801981c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	7c5b      	ldrb	r3, [r3, #17]
 8019822:	2b01      	cmp	r3, #1
 8019824:	d108      	bne.n	8019838 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	699a      	ldr	r2, [r3, #24]
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019834:	619a      	str	r2, [r3, #24]
 8019836:	e007      	b.n	8019848 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	681b      	ldr	r3, [r3, #0]
 801983c:	699a      	ldr	r2, [r3, #24]
 801983e:	687b      	ldr	r3, [r7, #4]
 8019840:	681b      	ldr	r3, [r3, #0]
 8019842:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8019846:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	7c9b      	ldrb	r3, [r3, #18]
 801984c:	2b01      	cmp	r3, #1
 801984e:	d108      	bne.n	8019862 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	699a      	ldr	r2, [r3, #24]
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	681b      	ldr	r3, [r3, #0]
 801985a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801985e:	619a      	str	r2, [r3, #24]
 8019860:	e007      	b.n	8019872 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	699a      	ldr	r2, [r3, #24]
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	681b      	ldr	r3, [r3, #0]
 801986c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8019870:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	681b      	ldr	r3, [r3, #0]
 8019876:	699b      	ldr	r3, [r3, #24]
 8019878:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	689a      	ldr	r2, [r3, #8]
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	681b      	ldr	r3, [r3, #0]
 8019884:	430a      	orrs	r2, r1
 8019886:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	699a      	ldr	r2, [r3, #24]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8019896:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	691a      	ldr	r2, [r3, #16]
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	f022 0210 	bic.w	r2, r2, #16
 80198a6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	68db      	ldr	r3, [r3, #12]
 80198ac:	2b01      	cmp	r3, #1
 80198ae:	d108      	bne.n	80198c2 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	681b      	ldr	r3, [r3, #0]
 80198b4:	699a      	ldr	r2, [r3, #24]
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	f042 0204 	orr.w	r2, r2, #4
 80198be:	619a      	str	r2, [r3, #24]
 80198c0:	e030      	b.n	8019924 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	68db      	ldr	r3, [r3, #12]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d02c      	beq.n	8019924 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	68db      	ldr	r3, [r3, #12]
 80198ce:	2b02      	cmp	r3, #2
 80198d0:	d020      	beq.n	8019914 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	681b      	ldr	r3, [r3, #0]
 80198d6:	699a      	ldr	r2, [r3, #24]
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80198e0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80198e2:	687b      	ldr	r3, [r7, #4]
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	691a      	ldr	r2, [r3, #16]
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	f042 0210 	orr.w	r2, r2, #16
 80198f0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	68db      	ldr	r3, [r3, #12]
 80198f6:	2b03      	cmp	r3, #3
 80198f8:	d114      	bne.n	8019924 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	681b      	ldr	r3, [r3, #0]
 80198fe:	699a      	ldr	r2, [r3, #24]
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	f042 0220 	orr.w	r2, r2, #32
 8019908:	619a      	str	r2, [r3, #24]
 801990a:	e00b      	b.n	8019924 <HAL_FDCAN_Init+0x234>
 801990c:	08020d24 	.word	0x08020d24
 8019910:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	699a      	ldr	r2, [r3, #24]
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	f042 0220 	orr.w	r2, r2, #32
 8019922:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	699b      	ldr	r3, [r3, #24]
 8019928:	3b01      	subs	r3, #1
 801992a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	69db      	ldr	r3, [r3, #28]
 8019930:	3b01      	subs	r3, #1
 8019932:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019934:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019936:	687b      	ldr	r3, [r7, #4]
 8019938:	6a1b      	ldr	r3, [r3, #32]
 801993a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 801993c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8019940:	687b      	ldr	r3, [r7, #4]
 8019942:	695b      	ldr	r3, [r3, #20]
 8019944:	3b01      	subs	r3, #1
 8019946:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 801994c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 801994e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	689b      	ldr	r3, [r3, #8]
 8019954:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019958:	d115      	bne.n	8019986 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801995a:	687b      	ldr	r3, [r7, #4]
 801995c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801995e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019964:	3b01      	subs	r3, #1
 8019966:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019968:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801996e:	3b01      	subs	r3, #1
 8019970:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019972:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801997a:	3b01      	subs	r3, #1
 801997c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 801997e:	687b      	ldr	r3, [r7, #4]
 8019980:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019982:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019984:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801998a:	2b00      	cmp	r3, #0
 801998c:	d00a      	beq.n	80199a4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 801998e:	687b      	ldr	r3, [r7, #4]
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	430a      	orrs	r2, r1
 80199a0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80199ac:	4413      	add	r3, r2
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d011      	beq.n	80199d6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80199ba:	f023 0107 	bic.w	r1, r3, #7
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80199c2:	009b      	lsls	r3, r3, #2
 80199c4:	3360      	adds	r3, #96	; 0x60
 80199c6:	443b      	add	r3, r7
 80199c8:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	430a      	orrs	r2, r1
 80199d2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d011      	beq.n	8019a02 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80199de:	687b      	ldr	r3, [r7, #4]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80199e6:	f023 0107 	bic.w	r1, r3, #7
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80199ee:	009b      	lsls	r3, r3, #2
 80199f0:	3360      	adds	r3, #96	; 0x60
 80199f2:	443b      	add	r3, r7
 80199f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	430a      	orrs	r2, r1
 80199fe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019a06:	2b00      	cmp	r3, #0
 8019a08:	d012      	beq.n	8019a30 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019a12:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019a1a:	009b      	lsls	r3, r3, #2
 8019a1c:	3360      	adds	r3, #96	; 0x60
 8019a1e:	443b      	add	r3, r7
 8019a20:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019a24:	011a      	lsls	r2, r3, #4
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	430a      	orrs	r2, r1
 8019a2c:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8019a30:	687b      	ldr	r3, [r7, #4]
 8019a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d012      	beq.n	8019a5e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	681b      	ldr	r3, [r3, #0]
 8019a3c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019a40:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019a48:	009b      	lsls	r3, r3, #2
 8019a4a:	3360      	adds	r3, #96	; 0x60
 8019a4c:	443b      	add	r3, r7
 8019a4e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019a52:	021a      	lsls	r2, r3, #8
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	430a      	orrs	r2, r1
 8019a5a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8019a5e:	687b      	ldr	r3, [r7, #4]
 8019a60:	681b      	ldr	r3, [r3, #0]
 8019a62:	4a11      	ldr	r2, [pc, #68]	; (8019aa8 <HAL_FDCAN_Init+0x3b8>)
 8019a64:	4293      	cmp	r3, r2
 8019a66:	d107      	bne.n	8019a78 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	685b      	ldr	r3, [r3, #4]
 8019a6c:	689a      	ldr	r2, [r3, #8]
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	685b      	ldr	r3, [r3, #4]
 8019a72:	f022 0203 	bic.w	r2, r2, #3
 8019a76:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	2200      	movs	r2, #0
 8019a7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	2200      	movs	r2, #0
 8019a84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8019a88:	687b      	ldr	r3, [r7, #4]
 8019a8a:	2201      	movs	r2, #1
 8019a8c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8019a90:	6878      	ldr	r0, [r7, #4]
 8019a92:	f000 fd83 	bl	801a59c <FDCAN_CalcultateRamBlockAddresses>
 8019a96:	4603      	mov	r3, r0
 8019a98:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8019a9c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8019aa0:	4618      	mov	r0, r3
 8019aa2:	3760      	adds	r7, #96	; 0x60
 8019aa4:	46bd      	mov	sp, r7
 8019aa6:	bd80      	pop	{r7, pc}
 8019aa8:	4000a000 	.word	0x4000a000

08019aac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8019aac:	b480      	push	{r7}
 8019aae:	b083      	sub	sp, #12
 8019ab0:	af00      	add	r7, sp, #0
 8019ab2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019aba:	b2db      	uxtb	r3, r3
 8019abc:	2b01      	cmp	r3, #1
 8019abe:	d111      	bne.n	8019ae4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	2202      	movs	r2, #2
 8019ac4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	699a      	ldr	r2, [r3, #24]
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	681b      	ldr	r3, [r3, #0]
 8019ad2:	f022 0201 	bic.w	r2, r2, #1
 8019ad6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	2200      	movs	r2, #0
 8019adc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8019ae0:	2300      	movs	r3, #0
 8019ae2:	e008      	b.n	8019af6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8019ae4:	687b      	ldr	r3, [r7, #4]
 8019ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019aea:	f043 0204 	orr.w	r2, r3, #4
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019af4:	2301      	movs	r3, #1
  }
}
 8019af6:	4618      	mov	r0, r3
 8019af8:	370c      	adds	r7, #12
 8019afa:	46bd      	mov	sp, r7
 8019afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b00:	4770      	bx	lr

08019b02 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8019b02:	b580      	push	{r7, lr}
 8019b04:	b086      	sub	sp, #24
 8019b06:	af00      	add	r7, sp, #0
 8019b08:	60f8      	str	r0, [r7, #12]
 8019b0a:	60b9      	str	r1, [r7, #8]
 8019b0c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019b14:	b2db      	uxtb	r3, r3
 8019b16:	2b02      	cmp	r3, #2
 8019b18:	d141      	bne.n	8019b9e <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8019b1a:	68fb      	ldr	r3, [r7, #12]
 8019b1c:	681b      	ldr	r3, [r3, #0]
 8019b1e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019b22:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8019b26:	2b00      	cmp	r3, #0
 8019b28:	d109      	bne.n	8019b3e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019b30:	f043 0220 	orr.w	r2, r3, #32
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019b3a:	2301      	movs	r3, #1
 8019b3c:	e038      	b.n	8019bb0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	681b      	ldr	r3, [r3, #0]
 8019b42:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019b46:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019b4a:	2b00      	cmp	r3, #0
 8019b4c:	d009      	beq.n	8019b62 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8019b4e:	68fb      	ldr	r3, [r7, #12]
 8019b50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019b54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019b58:	68fb      	ldr	r3, [r7, #12]
 8019b5a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019b5e:	2301      	movs	r3, #1
 8019b60:	e026      	b.n	8019bb0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8019b62:	68fb      	ldr	r3, [r7, #12]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019b6a:	0c1b      	lsrs	r3, r3, #16
 8019b6c:	f003 031f 	and.w	r3, r3, #31
 8019b70:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8019b72:	697b      	ldr	r3, [r7, #20]
 8019b74:	687a      	ldr	r2, [r7, #4]
 8019b76:	68b9      	ldr	r1, [r7, #8]
 8019b78:	68f8      	ldr	r0, [r7, #12]
 8019b7a:	f000 fe95 	bl	801a8a8 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8019b7e:	68fb      	ldr	r3, [r7, #12]
 8019b80:	681b      	ldr	r3, [r3, #0]
 8019b82:	2101      	movs	r1, #1
 8019b84:	697a      	ldr	r2, [r7, #20]
 8019b86:	fa01 f202 	lsl.w	r2, r1, r2
 8019b8a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8019b8e:	2201      	movs	r2, #1
 8019b90:	697b      	ldr	r3, [r7, #20]
 8019b92:	409a      	lsls	r2, r3
 8019b94:	68fb      	ldr	r3, [r7, #12]
 8019b96:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8019b9a:	2300      	movs	r3, #0
 8019b9c:	e008      	b.n	8019bb0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019b9e:	68fb      	ldr	r3, [r7, #12]
 8019ba0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019ba4:	f043 0208 	orr.w	r2, r3, #8
 8019ba8:	68fb      	ldr	r3, [r7, #12]
 8019baa:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019bae:	2301      	movs	r3, #1
  }
}
 8019bb0:	4618      	mov	r0, r3
 8019bb2:	3718      	adds	r7, #24
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}

08019bb8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8019bb8:	b480      	push	{r7}
 8019bba:	b08b      	sub	sp, #44	; 0x2c
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	60f8      	str	r0, [r7, #12]
 8019bc0:	60b9      	str	r1, [r7, #8]
 8019bc2:	607a      	str	r2, [r7, #4]
 8019bc4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019bca:	68fb      	ldr	r3, [r7, #12]
 8019bcc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019bd0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8019bd2:	7efb      	ldrb	r3, [r7, #27]
 8019bd4:	2b02      	cmp	r3, #2
 8019bd6:	f040 814b 	bne.w	8019e70 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019bda:	68bb      	ldr	r3, [r7, #8]
 8019bdc:	2b40      	cmp	r3, #64	; 0x40
 8019bde:	d14d      	bne.n	8019c7c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8019be0:	68fb      	ldr	r3, [r7, #12]
 8019be2:	681b      	ldr	r3, [r3, #0]
 8019be4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019be8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019bec:	2b00      	cmp	r3, #0
 8019bee:	d109      	bne.n	8019c04 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019bf6:	f043 0220 	orr.w	r2, r3, #32
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019c00:	2301      	movs	r3, #1
 8019c02:	e13e      	b.n	8019e82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8019c04:	68fb      	ldr	r3, [r7, #12]
 8019c06:	681b      	ldr	r3, [r3, #0]
 8019c08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c10:	2b00      	cmp	r3, #0
 8019c12:	d109      	bne.n	8019c28 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019c14:	68fb      	ldr	r3, [r7, #12]
 8019c16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c1a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019c24:	2301      	movs	r3, #1
 8019c26:	e12c      	b.n	8019e82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8019c28:	68fb      	ldr	r3, [r7, #12]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019c30:	0e1b      	lsrs	r3, r3, #24
 8019c32:	f003 0301 	and.w	r3, r3, #1
 8019c36:	2b01      	cmp	r3, #1
 8019c38:	d10b      	bne.n	8019c52 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019c3a:	68fb      	ldr	r3, [r7, #12]
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019c42:	0fdb      	lsrs	r3, r3, #31
 8019c44:	f003 0301 	and.w	r3, r3, #1
 8019c48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019c4c:	d101      	bne.n	8019c52 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019c4e:	2301      	movs	r3, #1
 8019c50:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019c5a:	0a1b      	lsrs	r3, r3, #8
 8019c5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019c60:	69fa      	ldr	r2, [r7, #28]
 8019c62:	4413      	add	r3, r2
 8019c64:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8019c66:	68fb      	ldr	r3, [r7, #12]
 8019c68:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c6e:	69f9      	ldr	r1, [r7, #28]
 8019c70:	fb01 f303 	mul.w	r3, r1, r3
 8019c74:	009b      	lsls	r3, r3, #2
 8019c76:	4413      	add	r3, r2
 8019c78:	627b      	str	r3, [r7, #36]	; 0x24
 8019c7a:	e069      	b.n	8019d50 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019c7c:	68bb      	ldr	r3, [r7, #8]
 8019c7e:	2b41      	cmp	r3, #65	; 0x41
 8019c80:	d14d      	bne.n	8019d1e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8019c82:	68fb      	ldr	r3, [r7, #12]
 8019c84:	681b      	ldr	r3, [r3, #0]
 8019c86:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019c8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d109      	bne.n	8019ca6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c98:	f043 0220 	orr.w	r2, r3, #32
 8019c9c:	68fb      	ldr	r3, [r7, #12]
 8019c9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019ca2:	2301      	movs	r3, #1
 8019ca4:	e0ed      	b.n	8019e82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	681b      	ldr	r3, [r3, #0]
 8019caa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019cb2:	2b00      	cmp	r3, #0
 8019cb4:	d109      	bne.n	8019cca <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019cbc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019cc6:	2301      	movs	r3, #1
 8019cc8:	e0db      	b.n	8019e82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	681b      	ldr	r3, [r3, #0]
 8019cce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019cd2:	0e1b      	lsrs	r3, r3, #24
 8019cd4:	f003 0301 	and.w	r3, r3, #1
 8019cd8:	2b01      	cmp	r3, #1
 8019cda:	d10b      	bne.n	8019cf4 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019cdc:	68fb      	ldr	r3, [r7, #12]
 8019cde:	681b      	ldr	r3, [r3, #0]
 8019ce0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019ce4:	0fdb      	lsrs	r3, r3, #31
 8019ce6:	f003 0301 	and.w	r3, r3, #1
 8019cea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019cee:	d101      	bne.n	8019cf4 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019cf0:	2301      	movs	r3, #1
 8019cf2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8019cf4:	68fb      	ldr	r3, [r7, #12]
 8019cf6:	681b      	ldr	r3, [r3, #0]
 8019cf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019cfc:	0a1b      	lsrs	r3, r3, #8
 8019cfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019d02:	69fa      	ldr	r2, [r7, #28]
 8019d04:	4413      	add	r3, r2
 8019d06:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8019d08:	68fb      	ldr	r3, [r7, #12]
 8019d0a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8019d0c:	68fb      	ldr	r3, [r7, #12]
 8019d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019d10:	69f9      	ldr	r1, [r7, #28]
 8019d12:	fb01 f303 	mul.w	r3, r1, r3
 8019d16:	009b      	lsls	r3, r3, #2
 8019d18:	4413      	add	r3, r2
 8019d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8019d1c:	e018      	b.n	8019d50 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019d22:	68ba      	ldr	r2, [r7, #8]
 8019d24:	429a      	cmp	r2, r3
 8019d26:	d309      	bcc.n	8019d3c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019d28:	68fb      	ldr	r3, [r7, #12]
 8019d2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d2e:	f043 0220 	orr.w	r2, r3, #32
 8019d32:	68fb      	ldr	r3, [r7, #12]
 8019d34:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019d38:	2301      	movs	r3, #1
 8019d3a:	e0a2      	b.n	8019e82 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8019d3c:	68fb      	ldr	r3, [r7, #12]
 8019d3e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8019d40:	68fb      	ldr	r3, [r7, #12]
 8019d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019d44:	68b9      	ldr	r1, [r7, #8]
 8019d46:	fb01 f303 	mul.w	r3, r1, r3
 8019d4a:	009b      	lsls	r3, r3, #2
 8019d4c:	4413      	add	r3, r2
 8019d4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8019d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d52:	681b      	ldr	r3, [r3, #0]
 8019d54:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	685b      	ldr	r3, [r3, #4]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	d107      	bne.n	8019d74 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8019d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	0c9b      	lsrs	r3, r3, #18
 8019d6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	601a      	str	r2, [r3, #0]
 8019d72:	e005      	b.n	8019d80 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8019d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d76:	681b      	ldr	r3, [r3, #0]
 8019d78:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8019d7c:	687b      	ldr	r3, [r7, #4]
 8019d7e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8019d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8019d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8019d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d9a:	3304      	adds	r3, #4
 8019d9c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8019d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	b29a      	uxth	r2, r3
 8019da4:	687b      	ldr	r3, [r7, #4]
 8019da6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8019da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019daa:	681b      	ldr	r3, [r3, #0]
 8019dac:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8019db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8019dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8019dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dce:	681b      	ldr	r3, [r3, #0]
 8019dd0:	0e1b      	lsrs	r3, r3, #24
 8019dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019dd6:	687b      	ldr	r3, [r7, #4]
 8019dd8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8019dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	0fda      	lsrs	r2, r3, #31
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8019de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de6:	3304      	adds	r3, #4
 8019de8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8019dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dec:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019dee:	2300      	movs	r3, #0
 8019df0:	623b      	str	r3, [r7, #32]
 8019df2:	e00a      	b.n	8019e0a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8019df4:	697a      	ldr	r2, [r7, #20]
 8019df6:	6a3b      	ldr	r3, [r7, #32]
 8019df8:	441a      	add	r2, r3
 8019dfa:	6839      	ldr	r1, [r7, #0]
 8019dfc:	6a3b      	ldr	r3, [r7, #32]
 8019dfe:	440b      	add	r3, r1
 8019e00:	7812      	ldrb	r2, [r2, #0]
 8019e02:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019e04:	6a3b      	ldr	r3, [r7, #32]
 8019e06:	3301      	adds	r3, #1
 8019e08:	623b      	str	r3, [r7, #32]
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	68db      	ldr	r3, [r3, #12]
 8019e0e:	0c1b      	lsrs	r3, r3, #16
 8019e10:	4a1f      	ldr	r2, [pc, #124]	; (8019e90 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8019e12:	5cd3      	ldrb	r3, [r2, r3]
 8019e14:	461a      	mov	r2, r3
 8019e16:	6a3b      	ldr	r3, [r7, #32]
 8019e18:	4293      	cmp	r3, r2
 8019e1a:	d3eb      	bcc.n	8019df4 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019e1c:	68bb      	ldr	r3, [r7, #8]
 8019e1e:	2b40      	cmp	r3, #64	; 0x40
 8019e20:	d105      	bne.n	8019e2e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8019e22:	68fb      	ldr	r3, [r7, #12]
 8019e24:	681b      	ldr	r3, [r3, #0]
 8019e26:	69fa      	ldr	r2, [r7, #28]
 8019e28:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8019e2c:	e01e      	b.n	8019e6c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019e2e:	68bb      	ldr	r3, [r7, #8]
 8019e30:	2b41      	cmp	r3, #65	; 0x41
 8019e32:	d105      	bne.n	8019e40 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	69fa      	ldr	r2, [r7, #28]
 8019e3a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8019e3e:	e015      	b.n	8019e6c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8019e40:	68bb      	ldr	r3, [r7, #8]
 8019e42:	2b1f      	cmp	r3, #31
 8019e44:	d808      	bhi.n	8019e58 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8019e46:	68fb      	ldr	r3, [r7, #12]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	2101      	movs	r1, #1
 8019e4c:	68ba      	ldr	r2, [r7, #8]
 8019e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8019e52:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8019e56:	e009      	b.n	8019e6c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	f003 021f 	and.w	r2, r3, #31
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	2101      	movs	r1, #1
 8019e64:	fa01 f202 	lsl.w	r2, r1, r2
 8019e68:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8019e6c:	2300      	movs	r3, #0
 8019e6e:	e008      	b.n	8019e82 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019e70:	68fb      	ldr	r3, [r7, #12]
 8019e72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e76:	f043 0208 	orr.w	r2, r3, #8
 8019e7a:	68fb      	ldr	r3, [r7, #12]
 8019e7c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019e80:	2301      	movs	r3, #1
  }
}
 8019e82:	4618      	mov	r0, r3
 8019e84:	372c      	adds	r7, #44	; 0x2c
 8019e86:	46bd      	mov	sp, r7
 8019e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e8c:	4770      	bx	lr
 8019e8e:	bf00      	nop
 8019e90:	08020ddc 	.word	0x08020ddc

08019e94 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8019e94:	b480      	push	{r7}
 8019e96:	b087      	sub	sp, #28
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	60f8      	str	r0, [r7, #12]
 8019e9c:	60b9      	str	r1, [r7, #8]
 8019e9e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019ea0:	68fb      	ldr	r3, [r7, #12]
 8019ea2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019ea6:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8019ea8:	7dfb      	ldrb	r3, [r7, #23]
 8019eaa:	2b01      	cmp	r3, #1
 8019eac:	d002      	beq.n	8019eb4 <HAL_FDCAN_ActivateNotification+0x20>
 8019eae:	7dfb      	ldrb	r3, [r7, #23]
 8019eb0:	2b02      	cmp	r3, #2
 8019eb2:	d155      	bne.n	8019f60 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8019eb4:	68fb      	ldr	r3, [r7, #12]
 8019eb6:	681b      	ldr	r3, [r3, #0]
 8019eb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019eba:	68bb      	ldr	r3, [r7, #8]
 8019ebc:	4013      	ands	r3, r2
 8019ebe:	2b00      	cmp	r3, #0
 8019ec0:	d108      	bne.n	8019ed4 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8019ec2:	68fb      	ldr	r3, [r7, #12]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019ec8:	68fb      	ldr	r3, [r7, #12]
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	f042 0201 	orr.w	r2, r2, #1
 8019ed0:	65da      	str	r2, [r3, #92]	; 0x5c
 8019ed2:	e014      	b.n	8019efe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	4013      	ands	r3, r2
 8019ede:	68ba      	ldr	r2, [r7, #8]
 8019ee0:	429a      	cmp	r2, r3
 8019ee2:	d108      	bne.n	8019ef6 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8019ee4:	68fb      	ldr	r3, [r7, #12]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019eea:	68fb      	ldr	r3, [r7, #12]
 8019eec:	681b      	ldr	r3, [r3, #0]
 8019eee:	f042 0202 	orr.w	r2, r2, #2
 8019ef2:	65da      	str	r2, [r3, #92]	; 0x5c
 8019ef4:	e003      	b.n	8019efe <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8019ef6:	68fb      	ldr	r3, [r7, #12]
 8019ef8:	681b      	ldr	r3, [r3, #0]
 8019efa:	2203      	movs	r2, #3
 8019efc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8019efe:	68bb      	ldr	r3, [r7, #8]
 8019f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d009      	beq.n	8019f1c <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8019f08:	68fb      	ldr	r3, [r7, #12]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	687a      	ldr	r2, [r7, #4]
 8019f16:	430a      	orrs	r2, r1
 8019f18:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d009      	beq.n	8019f3a <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8019f26:	68fb      	ldr	r3, [r7, #12]
 8019f28:	681b      	ldr	r3, [r3, #0]
 8019f2a:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	687a      	ldr	r2, [r7, #4]
 8019f34:	430a      	orrs	r2, r1
 8019f36:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8019f40:	68ba      	ldr	r2, [r7, #8]
 8019f42:	4b0f      	ldr	r3, [pc, #60]	; (8019f80 <HAL_FDCAN_ActivateNotification+0xec>)
 8019f44:	4013      	ands	r3, r2
 8019f46:	68fa      	ldr	r2, [r7, #12]
 8019f48:	6812      	ldr	r2, [r2, #0]
 8019f4a:	430b      	orrs	r3, r1
 8019f4c:	6553      	str	r3, [r2, #84]	; 0x54
 8019f4e:	4b0d      	ldr	r3, [pc, #52]	; (8019f84 <HAL_FDCAN_ActivateNotification+0xf0>)
 8019f50:	695a      	ldr	r2, [r3, #20]
 8019f52:	68bb      	ldr	r3, [r7, #8]
 8019f54:	0f9b      	lsrs	r3, r3, #30
 8019f56:	490b      	ldr	r1, [pc, #44]	; (8019f84 <HAL_FDCAN_ActivateNotification+0xf0>)
 8019f58:	4313      	orrs	r3, r2
 8019f5a:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8019f5c:	2300      	movs	r3, #0
 8019f5e:	e008      	b.n	8019f72 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019f66:	f043 0202 	orr.w	r2, r3, #2
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019f70:	2301      	movs	r3, #1
  }
}
 8019f72:	4618      	mov	r0, r3
 8019f74:	371c      	adds	r7, #28
 8019f76:	46bd      	mov	sp, r7
 8019f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f7c:	4770      	bx	lr
 8019f7e:	bf00      	nop
 8019f80:	3fcfffff 	.word	0x3fcfffff
 8019f84:	4000a800 	.word	0x4000a800

08019f88 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8019f88:	b580      	push	{r7, lr}
 8019f8a:	b096      	sub	sp, #88	; 0x58
 8019f8c:	af00      	add	r7, sp, #0
 8019f8e:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8019f90:	4b9a      	ldr	r3, [pc, #616]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 8019f92:	691b      	ldr	r3, [r3, #16]
 8019f94:	079b      	lsls	r3, r3, #30
 8019f96:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8019f98:	4b98      	ldr	r3, [pc, #608]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 8019f9a:	695b      	ldr	r3, [r3, #20]
 8019f9c:	079b      	lsls	r3, r3, #30
 8019f9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019fa0:	4013      	ands	r3, r2
 8019fa2:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8019fa4:	687b      	ldr	r3, [r7, #4]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019faa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8019fae:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fb6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8019fb8:	4013      	ands	r3, r2
 8019fba:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8019fbc:	687b      	ldr	r3, [r7, #4]
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fc2:	f003 030f 	and.w	r3, r3, #15
 8019fc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019fd0:	4013      	ands	r3, r2
 8019fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019fda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019fde:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8019fe0:	687b      	ldr	r3, [r7, #4]
 8019fe2:	681b      	ldr	r3, [r3, #0]
 8019fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019fe6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8019fe8:	4013      	ands	r3, r2
 8019fea:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019ff2:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8019ff6:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019ffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a000:	4013      	ands	r3, r2
 801a002:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	681b      	ldr	r3, [r3, #0]
 801a008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a00a:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 801a00e:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 801a010:	687b      	ldr	r3, [r7, #4]
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a016:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a018:	4013      	ands	r3, r2
 801a01a:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 801a01c:	687b      	ldr	r3, [r7, #4]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a022:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 801a024:	687b      	ldr	r3, [r7, #4]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a02a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 801a02c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a02e:	0a1b      	lsrs	r3, r3, #8
 801a030:	f003 0301 	and.w	r3, r3, #1
 801a034:	2b00      	cmp	r3, #0
 801a036:	d010      	beq.n	801a05a <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 801a038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a03a:	0a1b      	lsrs	r3, r3, #8
 801a03c:	f003 0301 	and.w	r3, r3, #1
 801a040:	2b00      	cmp	r3, #0
 801a042:	d00a      	beq.n	801a05a <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a04c:	651a      	str	r2, [r3, #80]	; 0x50
 801a04e:	4b6b      	ldr	r3, [pc, #428]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a050:	2200      	movs	r2, #0
 801a052:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 801a054:	6878      	ldr	r0, [r7, #4]
 801a056:	f000 fa54 	bl	801a502 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 801a05a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a05c:	0a9b      	lsrs	r3, r3, #10
 801a05e:	f003 0301 	and.w	r3, r3, #1
 801a062:	2b00      	cmp	r3, #0
 801a064:	d01d      	beq.n	801a0a2 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 801a066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a068:	0a9b      	lsrs	r3, r3, #10
 801a06a:	f003 0301 	and.w	r3, r3, #1
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d017      	beq.n	801a0a2 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	681b      	ldr	r3, [r3, #0]
 801a076:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a07a:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 801a07c:	687b      	ldr	r3, [r7, #4]
 801a07e:	681b      	ldr	r3, [r3, #0]
 801a080:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a086:	4013      	ands	r3, r2
 801a088:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 801a08a:	687b      	ldr	r3, [r7, #4]
 801a08c:	681b      	ldr	r3, [r3, #0]
 801a08e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a092:	651a      	str	r2, [r3, #80]	; 0x50
 801a094:	4b59      	ldr	r3, [pc, #356]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a096:	2200      	movs	r2, #0
 801a098:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 801a09a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a09c:	6878      	ldr	r0, [r7, #4]
 801a09e:	f000 fa07 	bl	801a4b0 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 801a0a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d00d      	beq.n	801a0c4 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 801a0a8:	687b      	ldr	r3, [r7, #4]
 801a0aa:	681a      	ldr	r2, [r3, #0]
 801a0ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a0ae:	4b54      	ldr	r3, [pc, #336]	; (801a200 <HAL_FDCAN_IRQHandler+0x278>)
 801a0b0:	400b      	ands	r3, r1
 801a0b2:	6513      	str	r3, [r2, #80]	; 0x50
 801a0b4:	4a51      	ldr	r2, [pc, #324]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a0b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a0b8:	0f9b      	lsrs	r3, r3, #30
 801a0ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 801a0bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a0be:	6878      	ldr	r0, [r7, #4]
 801a0c0:	f000 f9c0 	bl	801a444 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 801a0c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	d00d      	beq.n	801a0e6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 801a0ca:	687b      	ldr	r3, [r7, #4]
 801a0cc:	681a      	ldr	r2, [r3, #0]
 801a0ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a0d0:	4b4b      	ldr	r3, [pc, #300]	; (801a200 <HAL_FDCAN_IRQHandler+0x278>)
 801a0d2:	400b      	ands	r3, r1
 801a0d4:	6513      	str	r3, [r2, #80]	; 0x50
 801a0d6:	4a49      	ldr	r2, [pc, #292]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a0d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a0da:	0f9b      	lsrs	r3, r3, #30
 801a0dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 801a0de:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a0e0:	6878      	ldr	r0, [r7, #4]
 801a0e2:	f000 f9ba 	bl	801a45a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 801a0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0e8:	2b00      	cmp	r3, #0
 801a0ea:	d00d      	beq.n	801a108 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681a      	ldr	r2, [r3, #0]
 801a0f0:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a0f2:	4b43      	ldr	r3, [pc, #268]	; (801a200 <HAL_FDCAN_IRQHandler+0x278>)
 801a0f4:	400b      	ands	r3, r1
 801a0f6:	6513      	str	r3, [r2, #80]	; 0x50
 801a0f8:	4a40      	ldr	r2, [pc, #256]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a0fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a0fc:	0f9b      	lsrs	r3, r3, #30
 801a0fe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 801a100:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a102:	6878      	ldr	r0, [r7, #4]
 801a104:	f7f4 f882 	bl	800e20c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 801a108:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a10a:	2b00      	cmp	r3, #0
 801a10c:	d00d      	beq.n	801a12a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 801a10e:	687b      	ldr	r3, [r7, #4]
 801a110:	681a      	ldr	r2, [r3, #0]
 801a112:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a114:	4b3a      	ldr	r3, [pc, #232]	; (801a200 <HAL_FDCAN_IRQHandler+0x278>)
 801a116:	400b      	ands	r3, r1
 801a118:	6513      	str	r3, [r2, #80]	; 0x50
 801a11a:	4a38      	ldr	r2, [pc, #224]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a11c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a11e:	0f9b      	lsrs	r3, r3, #30
 801a120:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 801a122:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a124:	6878      	ldr	r0, [r7, #4]
 801a126:	f000 f9a3 	bl	801a470 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 801a12a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a12c:	0adb      	lsrs	r3, r3, #11
 801a12e:	f003 0301 	and.w	r3, r3, #1
 801a132:	2b00      	cmp	r3, #0
 801a134:	d010      	beq.n	801a158 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 801a136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a138:	0adb      	lsrs	r3, r3, #11
 801a13a:	f003 0301 	and.w	r3, r3, #1
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d00a      	beq.n	801a158 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 801a142:	687b      	ldr	r3, [r7, #4]
 801a144:	681b      	ldr	r3, [r3, #0]
 801a146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a14a:	651a      	str	r2, [r3, #80]	; 0x50
 801a14c:	4b2b      	ldr	r3, [pc, #172]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a14e:	2200      	movs	r2, #0
 801a150:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 801a152:	6878      	ldr	r0, [r7, #4]
 801a154:	f000 f997 	bl	801a486 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 801a158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a15a:	0a5b      	lsrs	r3, r3, #9
 801a15c:	f003 0301 	and.w	r3, r3, #1
 801a160:	2b00      	cmp	r3, #0
 801a162:	d01d      	beq.n	801a1a0 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 801a164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a166:	0a5b      	lsrs	r3, r3, #9
 801a168:	f003 0301 	and.w	r3, r3, #1
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d017      	beq.n	801a1a0 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a178:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 801a17a:	687b      	ldr	r3, [r7, #4]
 801a17c:	681b      	ldr	r3, [r3, #0]
 801a17e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a184:	4013      	ands	r3, r2
 801a186:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a190:	651a      	str	r2, [r3, #80]	; 0x50
 801a192:	4b1a      	ldr	r3, [pc, #104]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a194:	2200      	movs	r2, #0
 801a196:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 801a198:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a19a:	6878      	ldr	r0, [r7, #4]
 801a19c:	f000 f97d 	bl	801a49a <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a1a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1a2:	0cdb      	lsrs	r3, r3, #19
 801a1a4:	f003 0301 	and.w	r3, r3, #1
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d010      	beq.n	801a1ce <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1ae:	0cdb      	lsrs	r3, r3, #19
 801a1b0:	f003 0301 	and.w	r3, r3, #1
 801a1b4:	2b00      	cmp	r3, #0
 801a1b6:	d00a      	beq.n	801a1ce <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	681b      	ldr	r3, [r3, #0]
 801a1bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a1c0:	651a      	str	r2, [r3, #80]	; 0x50
 801a1c2:	4b0e      	ldr	r3, [pc, #56]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a1c4:	2200      	movs	r2, #0
 801a1c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 801a1c8:	6878      	ldr	r0, [r7, #4]
 801a1ca:	f000 f97c 	bl	801a4c6 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 801a1ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1d0:	0c1b      	lsrs	r3, r3, #16
 801a1d2:	f003 0301 	and.w	r3, r3, #1
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	d016      	beq.n	801a208 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 801a1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1dc:	0c1b      	lsrs	r3, r3, #16
 801a1de:	f003 0301 	and.w	r3, r3, #1
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d010      	beq.n	801a208 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a1ee:	651a      	str	r2, [r3, #80]	; 0x50
 801a1f0:	4b02      	ldr	r3, [pc, #8]	; (801a1fc <HAL_FDCAN_IRQHandler+0x274>)
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 801a1f6:	6878      	ldr	r0, [r7, #4]
 801a1f8:	e004      	b.n	801a204 <HAL_FDCAN_IRQHandler+0x27c>
 801a1fa:	bf00      	nop
 801a1fc:	4000a800 	.word	0x4000a800
 801a200:	3fcfffff 	.word	0x3fcfffff
 801a204:	f000 f969 	bl	801a4da <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 801a208:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a20a:	0c9b      	lsrs	r3, r3, #18
 801a20c:	f003 0301 	and.w	r3, r3, #1
 801a210:	2b00      	cmp	r3, #0
 801a212:	d010      	beq.n	801a236 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 801a214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a216:	0c9b      	lsrs	r3, r3, #18
 801a218:	f003 0301 	and.w	r3, r3, #1
 801a21c:	2b00      	cmp	r3, #0
 801a21e:	d00a      	beq.n	801a236 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 801a220:	687b      	ldr	r3, [r7, #4]
 801a222:	681b      	ldr	r3, [r3, #0]
 801a224:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a228:	651a      	str	r2, [r3, #80]	; 0x50
 801a22a:	4b83      	ldr	r3, [pc, #524]	; (801a438 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a22c:	2200      	movs	r2, #0
 801a22e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 801a230:	6878      	ldr	r0, [r7, #4]
 801a232:	f000 f95c 	bl	801a4ee <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 801a236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a238:	0c5b      	lsrs	r3, r3, #17
 801a23a:	f003 0301 	and.w	r3, r3, #1
 801a23e:	2b00      	cmp	r3, #0
 801a240:	d015      	beq.n	801a26e <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 801a242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a244:	0c5b      	lsrs	r3, r3, #17
 801a246:	f003 0301 	and.w	r3, r3, #1
 801a24a:	2b00      	cmp	r3, #0
 801a24c:	d00f      	beq.n	801a26e <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801a256:	651a      	str	r2, [r3, #80]	; 0x50
 801a258:	4b77      	ldr	r3, [pc, #476]	; (801a438 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a25a:	2200      	movs	r2, #0
 801a25c:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 801a25e:	687b      	ldr	r3, [r7, #4]
 801a260:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a264:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a268:	687b      	ldr	r3, [r7, #4]
 801a26a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 801a26e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a270:	2b00      	cmp	r3, #0
 801a272:	d00d      	beq.n	801a290 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 801a274:	687b      	ldr	r3, [r7, #4]
 801a276:	681a      	ldr	r2, [r3, #0]
 801a278:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a27a:	4b70      	ldr	r3, [pc, #448]	; (801a43c <HAL_FDCAN_IRQHandler+0x4b4>)
 801a27c:	400b      	ands	r3, r1
 801a27e:	6513      	str	r3, [r2, #80]	; 0x50
 801a280:	4a6d      	ldr	r2, [pc, #436]	; (801a438 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a282:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a284:	0f9b      	lsrs	r3, r3, #30
 801a286:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 801a288:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a28a:	6878      	ldr	r0, [r7, #4]
 801a28c:	f000 f94d 	bl	801a52a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 801a290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a292:	2b00      	cmp	r3, #0
 801a294:	d011      	beq.n	801a2ba <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681a      	ldr	r2, [r3, #0]
 801a29a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a29c:	4b67      	ldr	r3, [pc, #412]	; (801a43c <HAL_FDCAN_IRQHandler+0x4b4>)
 801a29e:	400b      	ands	r3, r1
 801a2a0:	6513      	str	r3, [r2, #80]	; 0x50
 801a2a2:	4a65      	ldr	r2, [pc, #404]	; (801a438 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a2a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2a6:	0f9b      	lsrs	r3, r3, #30
 801a2a8:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 801a2aa:	687b      	ldr	r3, [r7, #4]
 801a2ac:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a2b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a2b2:	431a      	orrs	r2, r3
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 801a2ba:	687b      	ldr	r3, [r7, #4]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	4a60      	ldr	r2, [pc, #384]	; (801a440 <HAL_FDCAN_IRQHandler+0x4b8>)
 801a2c0:	4293      	cmp	r3, r2
 801a2c2:	f040 80ac 	bne.w	801a41e <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	685b      	ldr	r3, [r3, #4]
 801a2ca:	689b      	ldr	r3, [r3, #8]
 801a2cc:	f003 0303 	and.w	r3, r3, #3
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	f000 80a4 	beq.w	801a41e <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	685b      	ldr	r3, [r3, #4]
 801a2da:	6a1b      	ldr	r3, [r3, #32]
 801a2dc:	f003 030f 	and.w	r3, r3, #15
 801a2e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	685b      	ldr	r3, [r3, #4]
 801a2e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a2ea:	4013      	ands	r3, r2
 801a2ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	685b      	ldr	r3, [r3, #4]
 801a2f2:	6a1b      	ldr	r3, [r3, #32]
 801a2f4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a2f8:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 801a2fa:	687b      	ldr	r3, [r7, #4]
 801a2fc:	685b      	ldr	r3, [r3, #4]
 801a2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a302:	4013      	ands	r3, r2
 801a304:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 801a306:	687b      	ldr	r3, [r7, #4]
 801a308:	685b      	ldr	r3, [r3, #4]
 801a30a:	6a1b      	ldr	r3, [r3, #32]
 801a30c:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801a310:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	685b      	ldr	r3, [r3, #4]
 801a316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a31a:	4013      	ands	r3, r2
 801a31c:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	685b      	ldr	r3, [r3, #4]
 801a322:	6a1b      	ldr	r3, [r3, #32]
 801a324:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 801a328:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	685b      	ldr	r3, [r3, #4]
 801a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a330:	6a3a      	ldr	r2, [r7, #32]
 801a332:	4013      	ands	r3, r2
 801a334:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	685b      	ldr	r3, [r3, #4]
 801a33a:	6a1b      	ldr	r3, [r3, #32]
 801a33c:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 801a340:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 801a342:	687b      	ldr	r3, [r7, #4]
 801a344:	685b      	ldr	r3, [r3, #4]
 801a346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a348:	69fa      	ldr	r2, [r7, #28]
 801a34a:	4013      	ands	r3, r2
 801a34c:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	685b      	ldr	r3, [r3, #4]
 801a352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a354:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	685b      	ldr	r3, [r3, #4]
 801a35a:	6a1b      	ldr	r3, [r3, #32]
 801a35c:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 801a35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a360:	2b00      	cmp	r3, #0
 801a362:	d007      	beq.n	801a374 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 801a364:	687b      	ldr	r3, [r7, #4]
 801a366:	685b      	ldr	r3, [r3, #4]
 801a368:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a36a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 801a36c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a36e:	6878      	ldr	r0, [r7, #4]
 801a370:	f000 f8e6 	bl	801a540 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 801a374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a376:	2b00      	cmp	r3, #0
 801a378:	d007      	beq.n	801a38a <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	685b      	ldr	r3, [r3, #4]
 801a37e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a380:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 801a382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a384:	6878      	ldr	r0, [r7, #4]
 801a386:	f000 f8e6 	bl	801a556 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 801a38a:	69bb      	ldr	r3, [r7, #24]
 801a38c:	099b      	lsrs	r3, r3, #6
 801a38e:	f003 0301 	and.w	r3, r3, #1
 801a392:	2b00      	cmp	r3, #0
 801a394:	d01a      	beq.n	801a3cc <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 801a396:	697b      	ldr	r3, [r7, #20]
 801a398:	099b      	lsrs	r3, r3, #6
 801a39a:	f003 0301 	and.w	r3, r3, #1
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d014      	beq.n	801a3cc <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	685b      	ldr	r3, [r3, #4]
 801a3a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3a8:	0c1b      	lsrs	r3, r3, #16
 801a3aa:	b29b      	uxth	r3, r3
 801a3ac:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	685b      	ldr	r3, [r3, #4]
 801a3b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a3b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a3b8:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	685b      	ldr	r3, [r3, #4]
 801a3be:	2240      	movs	r2, #64	; 0x40
 801a3c0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 801a3c2:	68fa      	ldr	r2, [r7, #12]
 801a3c4:	6939      	ldr	r1, [r7, #16]
 801a3c6:	6878      	ldr	r0, [r7, #4]
 801a3c8:	f000 f8d0 	bl	801a56c <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 801a3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a3ce:	2b00      	cmp	r3, #0
 801a3d0:	d007      	beq.n	801a3e2 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 801a3d2:	687b      	ldr	r3, [r7, #4]
 801a3d4:	685b      	ldr	r3, [r3, #4]
 801a3d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3d8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 801a3da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a3dc:	6878      	ldr	r0, [r7, #4]
 801a3de:	f000 f8d1 	bl	801a584 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 801a3e2:	6a3b      	ldr	r3, [r7, #32]
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d00b      	beq.n	801a400 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	685b      	ldr	r3, [r3, #4]
 801a3ec:	6a3a      	ldr	r2, [r7, #32]
 801a3ee:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a3f6:	6a3b      	ldr	r3, [r7, #32]
 801a3f8:	431a      	orrs	r2, r3
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 801a400:	69fb      	ldr	r3, [r7, #28]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d00b      	beq.n	801a41e <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	685b      	ldr	r3, [r3, #4]
 801a40a:	69fa      	ldr	r2, [r7, #28]
 801a40c:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a414:	69fb      	ldr	r3, [r7, #28]
 801a416:	431a      	orrs	r2, r3
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a424:	2b00      	cmp	r3, #0
 801a426:	d002      	beq.n	801a42e <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 801a428:	6878      	ldr	r0, [r7, #4]
 801a42a:	f000 f874 	bl	801a516 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 801a42e:	bf00      	nop
 801a430:	3758      	adds	r7, #88	; 0x58
 801a432:	46bd      	mov	sp, r7
 801a434:	bd80      	pop	{r7, pc}
 801a436:	bf00      	nop
 801a438:	4000a800 	.word	0x4000a800
 801a43c:	3fcfffff 	.word	0x3fcfffff
 801a440:	4000a000 	.word	0x4000a000

0801a444 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 801a444:	b480      	push	{r7}
 801a446:	b083      	sub	sp, #12
 801a448:	af00      	add	r7, sp, #0
 801a44a:	6078      	str	r0, [r7, #4]
 801a44c:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 801a44e:	bf00      	nop
 801a450:	370c      	adds	r7, #12
 801a452:	46bd      	mov	sp, r7
 801a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a458:	4770      	bx	lr

0801a45a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 801a45a:	b480      	push	{r7}
 801a45c:	b083      	sub	sp, #12
 801a45e:	af00      	add	r7, sp, #0
 801a460:	6078      	str	r0, [r7, #4]
 801a462:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 801a464:	bf00      	nop
 801a466:	370c      	adds	r7, #12
 801a468:	46bd      	mov	sp, r7
 801a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a46e:	4770      	bx	lr

0801a470 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 801a470:	b480      	push	{r7}
 801a472:	b083      	sub	sp, #12
 801a474:	af00      	add	r7, sp, #0
 801a476:	6078      	str	r0, [r7, #4]
 801a478:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 801a47a:	bf00      	nop
 801a47c:	370c      	adds	r7, #12
 801a47e:	46bd      	mov	sp, r7
 801a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a484:	4770      	bx	lr

0801a486 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a486:	b480      	push	{r7}
 801a488:	b083      	sub	sp, #12
 801a48a:	af00      	add	r7, sp, #0
 801a48c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 801a48e:	bf00      	nop
 801a490:	370c      	adds	r7, #12
 801a492:	46bd      	mov	sp, r7
 801a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a498:	4770      	bx	lr

0801a49a <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a49a:	b480      	push	{r7}
 801a49c:	b083      	sub	sp, #12
 801a49e:	af00      	add	r7, sp, #0
 801a4a0:	6078      	str	r0, [r7, #4]
 801a4a2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 801a4a4:	bf00      	nop
 801a4a6:	370c      	adds	r7, #12
 801a4a8:	46bd      	mov	sp, r7
 801a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ae:	4770      	bx	lr

0801a4b0 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a4b0:	b480      	push	{r7}
 801a4b2:	b083      	sub	sp, #12
 801a4b4:	af00      	add	r7, sp, #0
 801a4b6:	6078      	str	r0, [r7, #4]
 801a4b8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 801a4ba:	bf00      	nop
 801a4bc:	370c      	adds	r7, #12
 801a4be:	46bd      	mov	sp, r7
 801a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4c4:	4770      	bx	lr

0801a4c6 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a4c6:	b480      	push	{r7}
 801a4c8:	b083      	sub	sp, #12
 801a4ca:	af00      	add	r7, sp, #0
 801a4cc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 801a4ce:	bf00      	nop
 801a4d0:	370c      	adds	r7, #12
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4d8:	4770      	bx	lr

0801a4da <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a4da:	b480      	push	{r7}
 801a4dc:	b083      	sub	sp, #12
 801a4de:	af00      	add	r7, sp, #0
 801a4e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 801a4e2:	bf00      	nop
 801a4e4:	370c      	adds	r7, #12
 801a4e6:	46bd      	mov	sp, r7
 801a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ec:	4770      	bx	lr

0801a4ee <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a4ee:	b480      	push	{r7}
 801a4f0:	b083      	sub	sp, #12
 801a4f2:	af00      	add	r7, sp, #0
 801a4f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 801a4f6:	bf00      	nop
 801a4f8:	370c      	adds	r7, #12
 801a4fa:	46bd      	mov	sp, r7
 801a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a500:	4770      	bx	lr

0801a502 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a502:	b480      	push	{r7}
 801a504:	b083      	sub	sp, #12
 801a506:	af00      	add	r7, sp, #0
 801a508:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 801a50a:	bf00      	nop
 801a50c:	370c      	adds	r7, #12
 801a50e:	46bd      	mov	sp, r7
 801a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a514:	4770      	bx	lr

0801a516 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a516:	b480      	push	{r7}
 801a518:	b083      	sub	sp, #12
 801a51a:	af00      	add	r7, sp, #0
 801a51c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 801a51e:	bf00      	nop
 801a520:	370c      	adds	r7, #12
 801a522:	46bd      	mov	sp, r7
 801a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a528:	4770      	bx	lr

0801a52a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 801a52a:	b480      	push	{r7}
 801a52c:	b083      	sub	sp, #12
 801a52e:	af00      	add	r7, sp, #0
 801a530:	6078      	str	r0, [r7, #4]
 801a532:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 801a534:	bf00      	nop
 801a536:	370c      	adds	r7, #12
 801a538:	46bd      	mov	sp, r7
 801a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a53e:	4770      	bx	lr

0801a540 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 801a540:	b480      	push	{r7}
 801a542:	b083      	sub	sp, #12
 801a544:	af00      	add	r7, sp, #0
 801a546:	6078      	str	r0, [r7, #4]
 801a548:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 801a54a:	bf00      	nop
 801a54c:	370c      	adds	r7, #12
 801a54e:	46bd      	mov	sp, r7
 801a550:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a554:	4770      	bx	lr

0801a556 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 801a556:	b480      	push	{r7}
 801a558:	b083      	sub	sp, #12
 801a55a:	af00      	add	r7, sp, #0
 801a55c:	6078      	str	r0, [r7, #4]
 801a55e:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 801a560:	bf00      	nop
 801a562:	370c      	adds	r7, #12
 801a564:	46bd      	mov	sp, r7
 801a566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a56a:	4770      	bx	lr

0801a56c <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 801a56c:	b480      	push	{r7}
 801a56e:	b085      	sub	sp, #20
 801a570:	af00      	add	r7, sp, #0
 801a572:	60f8      	str	r0, [r7, #12]
 801a574:	60b9      	str	r1, [r7, #8]
 801a576:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 801a578:	bf00      	nop
 801a57a:	3714      	adds	r7, #20
 801a57c:	46bd      	mov	sp, r7
 801a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a582:	4770      	bx	lr

0801a584 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 801a584:	b480      	push	{r7}
 801a586:	b083      	sub	sp, #12
 801a588:	af00      	add	r7, sp, #0
 801a58a:	6078      	str	r0, [r7, #4]
 801a58c:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 801a58e:	bf00      	nop
 801a590:	370c      	adds	r7, #12
 801a592:	46bd      	mov	sp, r7
 801a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a598:	4770      	bx	lr
	...

0801a59c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 801a59c:	b480      	push	{r7}
 801a59e:	b085      	sub	sp, #20
 801a5a0:	af00      	add	r7, sp, #0
 801a5a2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 801a5a4:	687b      	ldr	r3, [r7, #4]
 801a5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a5a8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 801a5aa:	687b      	ldr	r3, [r7, #4]
 801a5ac:	681b      	ldr	r3, [r3, #0]
 801a5ae:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a5b2:	4ba7      	ldr	r3, [pc, #668]	; (801a850 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a5b4:	4013      	ands	r3, r2
 801a5b6:	68ba      	ldr	r2, [r7, #8]
 801a5b8:	0091      	lsls	r1, r2, #2
 801a5ba:	687a      	ldr	r2, [r7, #4]
 801a5bc:	6812      	ldr	r2, [r2, #0]
 801a5be:	430b      	orrs	r3, r1
 801a5c0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 801a5c4:	687b      	ldr	r3, [r7, #4]
 801a5c6:	681b      	ldr	r3, [r3, #0]
 801a5c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a5cc:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5d4:	041a      	lsls	r2, r3, #16
 801a5d6:	687b      	ldr	r3, [r7, #4]
 801a5d8:	681b      	ldr	r3, [r3, #0]
 801a5da:	430a      	orrs	r2, r1
 801a5dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5e4:	68ba      	ldr	r2, [r7, #8]
 801a5e6:	4413      	add	r3, r2
 801a5e8:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 801a5ea:	687b      	ldr	r3, [r7, #4]
 801a5ec:	681b      	ldr	r3, [r3, #0]
 801a5ee:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a5f2:	4b97      	ldr	r3, [pc, #604]	; (801a850 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a5f4:	4013      	ands	r3, r2
 801a5f6:	68ba      	ldr	r2, [r7, #8]
 801a5f8:	0091      	lsls	r1, r2, #2
 801a5fa:	687a      	ldr	r2, [r7, #4]
 801a5fc:	6812      	ldr	r2, [r2, #0]
 801a5fe:	430b      	orrs	r3, r1
 801a600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 801a604:	687b      	ldr	r3, [r7, #4]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a60c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a614:	041a      	lsls	r2, r3, #16
 801a616:	687b      	ldr	r3, [r7, #4]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	430a      	orrs	r2, r1
 801a61c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a624:	005b      	lsls	r3, r3, #1
 801a626:	68ba      	ldr	r2, [r7, #8]
 801a628:	4413      	add	r3, r2
 801a62a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	681b      	ldr	r3, [r3, #0]
 801a630:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801a634:	4b86      	ldr	r3, [pc, #536]	; (801a850 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a636:	4013      	ands	r3, r2
 801a638:	68ba      	ldr	r2, [r7, #8]
 801a63a:	0091      	lsls	r1, r2, #2
 801a63c:	687a      	ldr	r2, [r7, #4]
 801a63e:	6812      	ldr	r2, [r2, #0]
 801a640:	430b      	orrs	r3, r1
 801a642:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 801a646:	687b      	ldr	r3, [r7, #4]
 801a648:	681b      	ldr	r3, [r3, #0]
 801a64a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a64e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a652:	687b      	ldr	r3, [r7, #4]
 801a654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a656:	041a      	lsls	r2, r3, #16
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	430a      	orrs	r2, r1
 801a65e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a666:	687a      	ldr	r2, [r7, #4]
 801a668:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801a66a:	fb02 f303 	mul.w	r3, r2, r3
 801a66e:	68ba      	ldr	r2, [r7, #8]
 801a670:	4413      	add	r3, r2
 801a672:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	681b      	ldr	r3, [r3, #0]
 801a678:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801a67c:	4b74      	ldr	r3, [pc, #464]	; (801a850 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a67e:	4013      	ands	r3, r2
 801a680:	68ba      	ldr	r2, [r7, #8]
 801a682:	0091      	lsls	r1, r2, #2
 801a684:	687a      	ldr	r2, [r7, #4]
 801a686:	6812      	ldr	r2, [r2, #0]
 801a688:	430b      	orrs	r3, r1
 801a68a:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	681b      	ldr	r3, [r3, #0]
 801a692:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a696:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a69e:	041a      	lsls	r2, r3, #16
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	430a      	orrs	r2, r1
 801a6a6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a6ae:	687a      	ldr	r2, [r7, #4]
 801a6b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801a6b2:	fb02 f303 	mul.w	r3, r2, r3
 801a6b6:	68ba      	ldr	r2, [r7, #8]
 801a6b8:	4413      	add	r3, r2
 801a6ba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a6c4:	4b62      	ldr	r3, [pc, #392]	; (801a850 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a6c6:	4013      	ands	r3, r2
 801a6c8:	68ba      	ldr	r2, [r7, #8]
 801a6ca:	0091      	lsls	r1, r2, #2
 801a6cc:	687a      	ldr	r2, [r7, #4]
 801a6ce:	6812      	ldr	r2, [r2, #0]
 801a6d0:	430b      	orrs	r3, r1
 801a6d2:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a6da:	687a      	ldr	r2, [r7, #4]
 801a6dc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801a6de:	fb02 f303 	mul.w	r3, r2, r3
 801a6e2:	68ba      	ldr	r2, [r7, #8]
 801a6e4:	4413      	add	r3, r2
 801a6e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 801a6e8:	687b      	ldr	r3, [r7, #4]
 801a6ea:	681b      	ldr	r3, [r3, #0]
 801a6ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801a6f0:	4b57      	ldr	r3, [pc, #348]	; (801a850 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a6f2:	4013      	ands	r3, r2
 801a6f4:	68ba      	ldr	r2, [r7, #8]
 801a6f6:	0091      	lsls	r1, r2, #2
 801a6f8:	687a      	ldr	r2, [r7, #4]
 801a6fa:	6812      	ldr	r2, [r2, #0]
 801a6fc:	430b      	orrs	r3, r1
 801a6fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801a70a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a712:	041a      	lsls	r2, r3, #16
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	430a      	orrs	r2, r1
 801a71a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 801a71e:	687b      	ldr	r3, [r7, #4]
 801a720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a722:	005b      	lsls	r3, r3, #1
 801a724:	68ba      	ldr	r2, [r7, #8]
 801a726:	4413      	add	r3, r2
 801a728:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801a732:	4b47      	ldr	r3, [pc, #284]	; (801a850 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a734:	4013      	ands	r3, r2
 801a736:	68ba      	ldr	r2, [r7, #8]
 801a738:	0091      	lsls	r1, r2, #2
 801a73a:	687a      	ldr	r2, [r7, #4]
 801a73c:	6812      	ldr	r2, [r2, #0]
 801a73e:	430b      	orrs	r3, r1
 801a740:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	681b      	ldr	r3, [r3, #0]
 801a748:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a74c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a754:	041a      	lsls	r2, r3, #16
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	430a      	orrs	r2, r1
 801a75c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a768:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a770:	061a      	lsls	r2, r3, #24
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	681b      	ldr	r3, [r3, #0]
 801a776:	430a      	orrs	r2, r1
 801a778:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a780:	4b34      	ldr	r3, [pc, #208]	; (801a854 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 801a782:	4413      	add	r3, r2
 801a784:	009a      	lsls	r2, r3, #2
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 801a78a:	687b      	ldr	r3, [r7, #4]
 801a78c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a792:	009b      	lsls	r3, r3, #2
 801a794:	441a      	add	r2, r3
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a79e:	687b      	ldr	r3, [r7, #4]
 801a7a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a7a2:	00db      	lsls	r3, r3, #3
 801a7a4:	441a      	add	r2, r3
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7b2:	6879      	ldr	r1, [r7, #4]
 801a7b4:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801a7b6:	fb01 f303 	mul.w	r3, r1, r3
 801a7ba:	009b      	lsls	r3, r3, #2
 801a7bc:	441a      	add	r2, r3
 801a7be:	687b      	ldr	r3, [r7, #4]
 801a7c0:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 801a7c2:	687b      	ldr	r3, [r7, #4]
 801a7c4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a7ca:	6879      	ldr	r1, [r7, #4]
 801a7cc:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 801a7ce:	fb01 f303 	mul.w	r3, r1, r3
 801a7d2:	009b      	lsls	r3, r3, #2
 801a7d4:	441a      	add	r2, r3
 801a7d6:	687b      	ldr	r3, [r7, #4]
 801a7d8:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a7e2:	6879      	ldr	r1, [r7, #4]
 801a7e4:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801a7e6:	fb01 f303 	mul.w	r3, r1, r3
 801a7ea:	009b      	lsls	r3, r3, #2
 801a7ec:	441a      	add	r2, r3
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a7fe:	00db      	lsls	r3, r3, #3
 801a800:	441a      	add	r2, r3
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a812:	6879      	ldr	r1, [r7, #4]
 801a814:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801a816:	fb01 f303 	mul.w	r3, r1, r3
 801a81a:	009b      	lsls	r3, r3, #2
 801a81c:	441a      	add	r2, r3
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a82e:	6879      	ldr	r1, [r7, #4]
 801a830:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801a832:	fb01 f303 	mul.w	r3, r1, r3
 801a836:	009b      	lsls	r3, r3, #2
 801a838:	441a      	add	r2, r3
 801a83a:	687b      	ldr	r3, [r7, #4]
 801a83c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a846:	4a04      	ldr	r2, [pc, #16]	; (801a858 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 801a848:	4293      	cmp	r3, r2
 801a84a:	d915      	bls.n	801a878 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 801a84c:	e006      	b.n	801a85c <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 801a84e:	bf00      	nop
 801a850:	ffff0003 	.word	0xffff0003
 801a854:	10002b00 	.word	0x10002b00
 801a858:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a862:	f043 0220 	orr.w	r2, r3, #32
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	2203      	movs	r2, #3
 801a870:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 801a874:	2301      	movs	r3, #1
 801a876:	e010      	b.n	801a89a <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801a878:	687b      	ldr	r3, [r7, #4]
 801a87a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a87c:	60fb      	str	r3, [r7, #12]
 801a87e:	e005      	b.n	801a88c <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	2200      	movs	r2, #0
 801a884:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801a886:	68fb      	ldr	r3, [r7, #12]
 801a888:	3304      	adds	r3, #4
 801a88a:	60fb      	str	r3, [r7, #12]
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a892:	68fa      	ldr	r2, [r7, #12]
 801a894:	429a      	cmp	r2, r3
 801a896:	d3f3      	bcc.n	801a880 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 801a898:	2300      	movs	r3, #0
}
 801a89a:	4618      	mov	r0, r3
 801a89c:	3714      	adds	r7, #20
 801a89e:	46bd      	mov	sp, r7
 801a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a8a4:	4770      	bx	lr
 801a8a6:	bf00      	nop

0801a8a8 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 801a8a8:	b480      	push	{r7}
 801a8aa:	b089      	sub	sp, #36	; 0x24
 801a8ac:	af00      	add	r7, sp, #0
 801a8ae:	60f8      	str	r0, [r7, #12]
 801a8b0:	60b9      	str	r1, [r7, #8]
 801a8b2:	607a      	str	r2, [r7, #4]
 801a8b4:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 801a8b6:	68bb      	ldr	r3, [r7, #8]
 801a8b8:	685b      	ldr	r3, [r3, #4]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d10a      	bne.n	801a8d4 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801a8be:	68bb      	ldr	r3, [r7, #8]
 801a8c0:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 801a8c2:	68bb      	ldr	r3, [r7, #8]
 801a8c4:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 801a8c6:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 801a8c8:	68bb      	ldr	r3, [r7, #8]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801a8ce:	4313      	orrs	r3, r2
 801a8d0:	61fb      	str	r3, [r7, #28]
 801a8d2:	e00a      	b.n	801a8ea <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801a8d4:	68bb      	ldr	r3, [r7, #8]
 801a8d6:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 801a8d8:	68bb      	ldr	r3, [r7, #8]
 801a8da:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 801a8dc:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 801a8de:	68bb      	ldr	r3, [r7, #8]
 801a8e0:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 801a8e2:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801a8e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a8e8:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801a8ea:	68bb      	ldr	r3, [r7, #8]
 801a8ec:	6a1b      	ldr	r3, [r3, #32]
 801a8ee:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 801a8f0:	68bb      	ldr	r3, [r7, #8]
 801a8f2:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801a8f4:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 801a8f6:	68bb      	ldr	r3, [r7, #8]
 801a8f8:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 801a8fa:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 801a8fc:	68bb      	ldr	r3, [r7, #8]
 801a8fe:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 801a900:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801a906:	4313      	orrs	r3, r2
 801a908:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 801a90a:	68fb      	ldr	r3, [r7, #12]
 801a90c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a910:	68fb      	ldr	r3, [r7, #12]
 801a912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a914:	6839      	ldr	r1, [r7, #0]
 801a916:	fb01 f303 	mul.w	r3, r1, r3
 801a91a:	009b      	lsls	r3, r3, #2
 801a91c:	4413      	add	r3, r2
 801a91e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 801a920:	69bb      	ldr	r3, [r7, #24]
 801a922:	69fa      	ldr	r2, [r7, #28]
 801a924:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801a926:	69bb      	ldr	r3, [r7, #24]
 801a928:	3304      	adds	r3, #4
 801a92a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 801a92c:	69bb      	ldr	r3, [r7, #24]
 801a92e:	693a      	ldr	r2, [r7, #16]
 801a930:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801a932:	69bb      	ldr	r3, [r7, #24]
 801a934:	3304      	adds	r3, #4
 801a936:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801a938:	2300      	movs	r3, #0
 801a93a:	617b      	str	r3, [r7, #20]
 801a93c:	e020      	b.n	801a980 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801a93e:	697b      	ldr	r3, [r7, #20]
 801a940:	3303      	adds	r3, #3
 801a942:	687a      	ldr	r2, [r7, #4]
 801a944:	4413      	add	r3, r2
 801a946:	781b      	ldrb	r3, [r3, #0]
 801a948:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801a94a:	697b      	ldr	r3, [r7, #20]
 801a94c:	3302      	adds	r3, #2
 801a94e:	6879      	ldr	r1, [r7, #4]
 801a950:	440b      	add	r3, r1
 801a952:	781b      	ldrb	r3, [r3, #0]
 801a954:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801a956:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801a958:	697b      	ldr	r3, [r7, #20]
 801a95a:	3301      	adds	r3, #1
 801a95c:	6879      	ldr	r1, [r7, #4]
 801a95e:	440b      	add	r3, r1
 801a960:	781b      	ldrb	r3, [r3, #0]
 801a962:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801a964:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 801a966:	6879      	ldr	r1, [r7, #4]
 801a968:	697a      	ldr	r2, [r7, #20]
 801a96a:	440a      	add	r2, r1
 801a96c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801a96e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801a970:	69bb      	ldr	r3, [r7, #24]
 801a972:	601a      	str	r2, [r3, #0]
    TxAddress++;
 801a974:	69bb      	ldr	r3, [r7, #24]
 801a976:	3304      	adds	r3, #4
 801a978:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801a97a:	697b      	ldr	r3, [r7, #20]
 801a97c:	3304      	adds	r3, #4
 801a97e:	617b      	str	r3, [r7, #20]
 801a980:	68bb      	ldr	r3, [r7, #8]
 801a982:	68db      	ldr	r3, [r3, #12]
 801a984:	0c1b      	lsrs	r3, r3, #16
 801a986:	4a06      	ldr	r2, [pc, #24]	; (801a9a0 <FDCAN_CopyMessageToRAM+0xf8>)
 801a988:	5cd3      	ldrb	r3, [r2, r3]
 801a98a:	461a      	mov	r2, r3
 801a98c:	697b      	ldr	r3, [r7, #20]
 801a98e:	4293      	cmp	r3, r2
 801a990:	d3d5      	bcc.n	801a93e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 801a992:	bf00      	nop
 801a994:	bf00      	nop
 801a996:	3724      	adds	r7, #36	; 0x24
 801a998:	46bd      	mov	sp, r7
 801a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a99e:	4770      	bx	lr
 801a9a0:	08020ddc 	.word	0x08020ddc

0801a9a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801a9a4:	b480      	push	{r7}
 801a9a6:	b089      	sub	sp, #36	; 0x24
 801a9a8:	af00      	add	r7, sp, #0
 801a9aa:	6078      	str	r0, [r7, #4]
 801a9ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801a9ae:	2300      	movs	r3, #0
 801a9b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801a9b2:	4b86      	ldr	r3, [pc, #536]	; (801abcc <HAL_GPIO_Init+0x228>)
 801a9b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801a9b6:	e18c      	b.n	801acd2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801a9b8:	683b      	ldr	r3, [r7, #0]
 801a9ba:	681a      	ldr	r2, [r3, #0]
 801a9bc:	2101      	movs	r1, #1
 801a9be:	69fb      	ldr	r3, [r7, #28]
 801a9c0:	fa01 f303 	lsl.w	r3, r1, r3
 801a9c4:	4013      	ands	r3, r2
 801a9c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801a9c8:	693b      	ldr	r3, [r7, #16]
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	f000 817e 	beq.w	801accc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801a9d0:	683b      	ldr	r3, [r7, #0]
 801a9d2:	685b      	ldr	r3, [r3, #4]
 801a9d4:	f003 0303 	and.w	r3, r3, #3
 801a9d8:	2b01      	cmp	r3, #1
 801a9da:	d005      	beq.n	801a9e8 <HAL_GPIO_Init+0x44>
 801a9dc:	683b      	ldr	r3, [r7, #0]
 801a9de:	685b      	ldr	r3, [r3, #4]
 801a9e0:	f003 0303 	and.w	r3, r3, #3
 801a9e4:	2b02      	cmp	r3, #2
 801a9e6:	d130      	bne.n	801aa4a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801a9e8:	687b      	ldr	r3, [r7, #4]
 801a9ea:	689b      	ldr	r3, [r3, #8]
 801a9ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801a9ee:	69fb      	ldr	r3, [r7, #28]
 801a9f0:	005b      	lsls	r3, r3, #1
 801a9f2:	2203      	movs	r2, #3
 801a9f4:	fa02 f303 	lsl.w	r3, r2, r3
 801a9f8:	43db      	mvns	r3, r3
 801a9fa:	69ba      	ldr	r2, [r7, #24]
 801a9fc:	4013      	ands	r3, r2
 801a9fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801aa00:	683b      	ldr	r3, [r7, #0]
 801aa02:	68da      	ldr	r2, [r3, #12]
 801aa04:	69fb      	ldr	r3, [r7, #28]
 801aa06:	005b      	lsls	r3, r3, #1
 801aa08:	fa02 f303 	lsl.w	r3, r2, r3
 801aa0c:	69ba      	ldr	r2, [r7, #24]
 801aa0e:	4313      	orrs	r3, r2
 801aa10:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	69ba      	ldr	r2, [r7, #24]
 801aa16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801aa18:	687b      	ldr	r3, [r7, #4]
 801aa1a:	685b      	ldr	r3, [r3, #4]
 801aa1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801aa1e:	2201      	movs	r2, #1
 801aa20:	69fb      	ldr	r3, [r7, #28]
 801aa22:	fa02 f303 	lsl.w	r3, r2, r3
 801aa26:	43db      	mvns	r3, r3
 801aa28:	69ba      	ldr	r2, [r7, #24]
 801aa2a:	4013      	ands	r3, r2
 801aa2c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801aa2e:	683b      	ldr	r3, [r7, #0]
 801aa30:	685b      	ldr	r3, [r3, #4]
 801aa32:	091b      	lsrs	r3, r3, #4
 801aa34:	f003 0201 	and.w	r2, r3, #1
 801aa38:	69fb      	ldr	r3, [r7, #28]
 801aa3a:	fa02 f303 	lsl.w	r3, r2, r3
 801aa3e:	69ba      	ldr	r2, [r7, #24]
 801aa40:	4313      	orrs	r3, r2
 801aa42:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801aa44:	687b      	ldr	r3, [r7, #4]
 801aa46:	69ba      	ldr	r2, [r7, #24]
 801aa48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801aa4a:	683b      	ldr	r3, [r7, #0]
 801aa4c:	685b      	ldr	r3, [r3, #4]
 801aa4e:	f003 0303 	and.w	r3, r3, #3
 801aa52:	2b03      	cmp	r3, #3
 801aa54:	d017      	beq.n	801aa86 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	68db      	ldr	r3, [r3, #12]
 801aa5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801aa5c:	69fb      	ldr	r3, [r7, #28]
 801aa5e:	005b      	lsls	r3, r3, #1
 801aa60:	2203      	movs	r2, #3
 801aa62:	fa02 f303 	lsl.w	r3, r2, r3
 801aa66:	43db      	mvns	r3, r3
 801aa68:	69ba      	ldr	r2, [r7, #24]
 801aa6a:	4013      	ands	r3, r2
 801aa6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801aa6e:	683b      	ldr	r3, [r7, #0]
 801aa70:	689a      	ldr	r2, [r3, #8]
 801aa72:	69fb      	ldr	r3, [r7, #28]
 801aa74:	005b      	lsls	r3, r3, #1
 801aa76:	fa02 f303 	lsl.w	r3, r2, r3
 801aa7a:	69ba      	ldr	r2, [r7, #24]
 801aa7c:	4313      	orrs	r3, r2
 801aa7e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801aa80:	687b      	ldr	r3, [r7, #4]
 801aa82:	69ba      	ldr	r2, [r7, #24]
 801aa84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801aa86:	683b      	ldr	r3, [r7, #0]
 801aa88:	685b      	ldr	r3, [r3, #4]
 801aa8a:	f003 0303 	and.w	r3, r3, #3
 801aa8e:	2b02      	cmp	r3, #2
 801aa90:	d123      	bne.n	801aada <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801aa92:	69fb      	ldr	r3, [r7, #28]
 801aa94:	08da      	lsrs	r2, r3, #3
 801aa96:	687b      	ldr	r3, [r7, #4]
 801aa98:	3208      	adds	r2, #8
 801aa9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801aa9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801aaa0:	69fb      	ldr	r3, [r7, #28]
 801aaa2:	f003 0307 	and.w	r3, r3, #7
 801aaa6:	009b      	lsls	r3, r3, #2
 801aaa8:	220f      	movs	r2, #15
 801aaaa:	fa02 f303 	lsl.w	r3, r2, r3
 801aaae:	43db      	mvns	r3, r3
 801aab0:	69ba      	ldr	r2, [r7, #24]
 801aab2:	4013      	ands	r3, r2
 801aab4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801aab6:	683b      	ldr	r3, [r7, #0]
 801aab8:	691a      	ldr	r2, [r3, #16]
 801aaba:	69fb      	ldr	r3, [r7, #28]
 801aabc:	f003 0307 	and.w	r3, r3, #7
 801aac0:	009b      	lsls	r3, r3, #2
 801aac2:	fa02 f303 	lsl.w	r3, r2, r3
 801aac6:	69ba      	ldr	r2, [r7, #24]
 801aac8:	4313      	orrs	r3, r2
 801aaca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801aacc:	69fb      	ldr	r3, [r7, #28]
 801aace:	08da      	lsrs	r2, r3, #3
 801aad0:	687b      	ldr	r3, [r7, #4]
 801aad2:	3208      	adds	r2, #8
 801aad4:	69b9      	ldr	r1, [r7, #24]
 801aad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801aada:	687b      	ldr	r3, [r7, #4]
 801aadc:	681b      	ldr	r3, [r3, #0]
 801aade:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801aae0:	69fb      	ldr	r3, [r7, #28]
 801aae2:	005b      	lsls	r3, r3, #1
 801aae4:	2203      	movs	r2, #3
 801aae6:	fa02 f303 	lsl.w	r3, r2, r3
 801aaea:	43db      	mvns	r3, r3
 801aaec:	69ba      	ldr	r2, [r7, #24]
 801aaee:	4013      	ands	r3, r2
 801aaf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801aaf2:	683b      	ldr	r3, [r7, #0]
 801aaf4:	685b      	ldr	r3, [r3, #4]
 801aaf6:	f003 0203 	and.w	r2, r3, #3
 801aafa:	69fb      	ldr	r3, [r7, #28]
 801aafc:	005b      	lsls	r3, r3, #1
 801aafe:	fa02 f303 	lsl.w	r3, r2, r3
 801ab02:	69ba      	ldr	r2, [r7, #24]
 801ab04:	4313      	orrs	r3, r2
 801ab06:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	69ba      	ldr	r2, [r7, #24]
 801ab0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801ab0e:	683b      	ldr	r3, [r7, #0]
 801ab10:	685b      	ldr	r3, [r3, #4]
 801ab12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	f000 80d8 	beq.w	801accc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ab1c:	4b2c      	ldr	r3, [pc, #176]	; (801abd0 <HAL_GPIO_Init+0x22c>)
 801ab1e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ab22:	4a2b      	ldr	r2, [pc, #172]	; (801abd0 <HAL_GPIO_Init+0x22c>)
 801ab24:	f043 0302 	orr.w	r3, r3, #2
 801ab28:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801ab2c:	4b28      	ldr	r3, [pc, #160]	; (801abd0 <HAL_GPIO_Init+0x22c>)
 801ab2e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ab32:	f003 0302 	and.w	r3, r3, #2
 801ab36:	60fb      	str	r3, [r7, #12]
 801ab38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ab3a:	4a26      	ldr	r2, [pc, #152]	; (801abd4 <HAL_GPIO_Init+0x230>)
 801ab3c:	69fb      	ldr	r3, [r7, #28]
 801ab3e:	089b      	lsrs	r3, r3, #2
 801ab40:	3302      	adds	r3, #2
 801ab42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ab46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ab48:	69fb      	ldr	r3, [r7, #28]
 801ab4a:	f003 0303 	and.w	r3, r3, #3
 801ab4e:	009b      	lsls	r3, r3, #2
 801ab50:	220f      	movs	r2, #15
 801ab52:	fa02 f303 	lsl.w	r3, r2, r3
 801ab56:	43db      	mvns	r3, r3
 801ab58:	69ba      	ldr	r2, [r7, #24]
 801ab5a:	4013      	ands	r3, r2
 801ab5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	4a1d      	ldr	r2, [pc, #116]	; (801abd8 <HAL_GPIO_Init+0x234>)
 801ab62:	4293      	cmp	r3, r2
 801ab64:	d04a      	beq.n	801abfc <HAL_GPIO_Init+0x258>
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	4a1c      	ldr	r2, [pc, #112]	; (801abdc <HAL_GPIO_Init+0x238>)
 801ab6a:	4293      	cmp	r3, r2
 801ab6c:	d02b      	beq.n	801abc6 <HAL_GPIO_Init+0x222>
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	4a1b      	ldr	r2, [pc, #108]	; (801abe0 <HAL_GPIO_Init+0x23c>)
 801ab72:	4293      	cmp	r3, r2
 801ab74:	d025      	beq.n	801abc2 <HAL_GPIO_Init+0x21e>
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	4a1a      	ldr	r2, [pc, #104]	; (801abe4 <HAL_GPIO_Init+0x240>)
 801ab7a:	4293      	cmp	r3, r2
 801ab7c:	d01f      	beq.n	801abbe <HAL_GPIO_Init+0x21a>
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	4a19      	ldr	r2, [pc, #100]	; (801abe8 <HAL_GPIO_Init+0x244>)
 801ab82:	4293      	cmp	r3, r2
 801ab84:	d019      	beq.n	801abba <HAL_GPIO_Init+0x216>
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	4a18      	ldr	r2, [pc, #96]	; (801abec <HAL_GPIO_Init+0x248>)
 801ab8a:	4293      	cmp	r3, r2
 801ab8c:	d013      	beq.n	801abb6 <HAL_GPIO_Init+0x212>
 801ab8e:	687b      	ldr	r3, [r7, #4]
 801ab90:	4a17      	ldr	r2, [pc, #92]	; (801abf0 <HAL_GPIO_Init+0x24c>)
 801ab92:	4293      	cmp	r3, r2
 801ab94:	d00d      	beq.n	801abb2 <HAL_GPIO_Init+0x20e>
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	4a16      	ldr	r2, [pc, #88]	; (801abf4 <HAL_GPIO_Init+0x250>)
 801ab9a:	4293      	cmp	r3, r2
 801ab9c:	d007      	beq.n	801abae <HAL_GPIO_Init+0x20a>
 801ab9e:	687b      	ldr	r3, [r7, #4]
 801aba0:	4a15      	ldr	r2, [pc, #84]	; (801abf8 <HAL_GPIO_Init+0x254>)
 801aba2:	4293      	cmp	r3, r2
 801aba4:	d101      	bne.n	801abaa <HAL_GPIO_Init+0x206>
 801aba6:	2309      	movs	r3, #9
 801aba8:	e029      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abaa:	230a      	movs	r3, #10
 801abac:	e027      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abae:	2307      	movs	r3, #7
 801abb0:	e025      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abb2:	2306      	movs	r3, #6
 801abb4:	e023      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abb6:	2305      	movs	r3, #5
 801abb8:	e021      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abba:	2304      	movs	r3, #4
 801abbc:	e01f      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abbe:	2303      	movs	r3, #3
 801abc0:	e01d      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abc2:	2302      	movs	r3, #2
 801abc4:	e01b      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abc6:	2301      	movs	r3, #1
 801abc8:	e019      	b.n	801abfe <HAL_GPIO_Init+0x25a>
 801abca:	bf00      	nop
 801abcc:	58000080 	.word	0x58000080
 801abd0:	58024400 	.word	0x58024400
 801abd4:	58000400 	.word	0x58000400
 801abd8:	58020000 	.word	0x58020000
 801abdc:	58020400 	.word	0x58020400
 801abe0:	58020800 	.word	0x58020800
 801abe4:	58020c00 	.word	0x58020c00
 801abe8:	58021000 	.word	0x58021000
 801abec:	58021400 	.word	0x58021400
 801abf0:	58021800 	.word	0x58021800
 801abf4:	58021c00 	.word	0x58021c00
 801abf8:	58022400 	.word	0x58022400
 801abfc:	2300      	movs	r3, #0
 801abfe:	69fa      	ldr	r2, [r7, #28]
 801ac00:	f002 0203 	and.w	r2, r2, #3
 801ac04:	0092      	lsls	r2, r2, #2
 801ac06:	4093      	lsls	r3, r2
 801ac08:	69ba      	ldr	r2, [r7, #24]
 801ac0a:	4313      	orrs	r3, r2
 801ac0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801ac0e:	4938      	ldr	r1, [pc, #224]	; (801acf0 <HAL_GPIO_Init+0x34c>)
 801ac10:	69fb      	ldr	r3, [r7, #28]
 801ac12:	089b      	lsrs	r3, r3, #2
 801ac14:	3302      	adds	r3, #2
 801ac16:	69ba      	ldr	r2, [r7, #24]
 801ac18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801ac1c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ac24:	693b      	ldr	r3, [r7, #16]
 801ac26:	43db      	mvns	r3, r3
 801ac28:	69ba      	ldr	r2, [r7, #24]
 801ac2a:	4013      	ands	r3, r2
 801ac2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ac2e:	683b      	ldr	r3, [r7, #0]
 801ac30:	685b      	ldr	r3, [r3, #4]
 801ac32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d003      	beq.n	801ac42 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801ac3a:	69ba      	ldr	r2, [r7, #24]
 801ac3c:	693b      	ldr	r3, [r7, #16]
 801ac3e:	4313      	orrs	r3, r2
 801ac40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801ac42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ac46:	69bb      	ldr	r3, [r7, #24]
 801ac48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801ac4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ac4e:	685b      	ldr	r3, [r3, #4]
 801ac50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ac52:	693b      	ldr	r3, [r7, #16]
 801ac54:	43db      	mvns	r3, r3
 801ac56:	69ba      	ldr	r2, [r7, #24]
 801ac58:	4013      	ands	r3, r2
 801ac5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ac5c:	683b      	ldr	r3, [r7, #0]
 801ac5e:	685b      	ldr	r3, [r3, #4]
 801ac60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ac64:	2b00      	cmp	r3, #0
 801ac66:	d003      	beq.n	801ac70 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801ac68:	69ba      	ldr	r2, [r7, #24]
 801ac6a:	693b      	ldr	r3, [r7, #16]
 801ac6c:	4313      	orrs	r3, r2
 801ac6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801ac70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ac74:	69bb      	ldr	r3, [r7, #24]
 801ac76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801ac78:	697b      	ldr	r3, [r7, #20]
 801ac7a:	685b      	ldr	r3, [r3, #4]
 801ac7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ac7e:	693b      	ldr	r3, [r7, #16]
 801ac80:	43db      	mvns	r3, r3
 801ac82:	69ba      	ldr	r2, [r7, #24]
 801ac84:	4013      	ands	r3, r2
 801ac86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ac88:	683b      	ldr	r3, [r7, #0]
 801ac8a:	685b      	ldr	r3, [r3, #4]
 801ac8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d003      	beq.n	801ac9c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801ac94:	69ba      	ldr	r2, [r7, #24]
 801ac96:	693b      	ldr	r3, [r7, #16]
 801ac98:	4313      	orrs	r3, r2
 801ac9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	69ba      	ldr	r2, [r7, #24]
 801aca0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801aca2:	697b      	ldr	r3, [r7, #20]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801aca8:	693b      	ldr	r3, [r7, #16]
 801acaa:	43db      	mvns	r3, r3
 801acac:	69ba      	ldr	r2, [r7, #24]
 801acae:	4013      	ands	r3, r2
 801acb0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801acb2:	683b      	ldr	r3, [r7, #0]
 801acb4:	685b      	ldr	r3, [r3, #4]
 801acb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d003      	beq.n	801acc6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801acbe:	69ba      	ldr	r2, [r7, #24]
 801acc0:	693b      	ldr	r3, [r7, #16]
 801acc2:	4313      	orrs	r3, r2
 801acc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801acc6:	697b      	ldr	r3, [r7, #20]
 801acc8:	69ba      	ldr	r2, [r7, #24]
 801acca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801accc:	69fb      	ldr	r3, [r7, #28]
 801acce:	3301      	adds	r3, #1
 801acd0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801acd2:	683b      	ldr	r3, [r7, #0]
 801acd4:	681a      	ldr	r2, [r3, #0]
 801acd6:	69fb      	ldr	r3, [r7, #28]
 801acd8:	fa22 f303 	lsr.w	r3, r2, r3
 801acdc:	2b00      	cmp	r3, #0
 801acde:	f47f ae6b 	bne.w	801a9b8 <HAL_GPIO_Init+0x14>
  }
}
 801ace2:	bf00      	nop
 801ace4:	bf00      	nop
 801ace6:	3724      	adds	r7, #36	; 0x24
 801ace8:	46bd      	mov	sp, r7
 801acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acee:	4770      	bx	lr
 801acf0:	58000400 	.word	0x58000400

0801acf4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801acf4:	b480      	push	{r7}
 801acf6:	b085      	sub	sp, #20
 801acf8:	af00      	add	r7, sp, #0
 801acfa:	6078      	str	r0, [r7, #4]
 801acfc:	460b      	mov	r3, r1
 801acfe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801ad00:	687b      	ldr	r3, [r7, #4]
 801ad02:	691a      	ldr	r2, [r3, #16]
 801ad04:	887b      	ldrh	r3, [r7, #2]
 801ad06:	4013      	ands	r3, r2
 801ad08:	2b00      	cmp	r3, #0
 801ad0a:	d002      	beq.n	801ad12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801ad0c:	2301      	movs	r3, #1
 801ad0e:	73fb      	strb	r3, [r7, #15]
 801ad10:	e001      	b.n	801ad16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801ad12:	2300      	movs	r3, #0
 801ad14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801ad16:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad18:	4618      	mov	r0, r3
 801ad1a:	3714      	adds	r7, #20
 801ad1c:	46bd      	mov	sp, r7
 801ad1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad22:	4770      	bx	lr

0801ad24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ad24:	b480      	push	{r7}
 801ad26:	b083      	sub	sp, #12
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	6078      	str	r0, [r7, #4]
 801ad2c:	460b      	mov	r3, r1
 801ad2e:	807b      	strh	r3, [r7, #2]
 801ad30:	4613      	mov	r3, r2
 801ad32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ad34:	787b      	ldrb	r3, [r7, #1]
 801ad36:	2b00      	cmp	r3, #0
 801ad38:	d003      	beq.n	801ad42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ad3a:	887a      	ldrh	r2, [r7, #2]
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ad40:	e003      	b.n	801ad4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ad42:	887b      	ldrh	r3, [r7, #2]
 801ad44:	041a      	lsls	r2, r3, #16
 801ad46:	687b      	ldr	r3, [r7, #4]
 801ad48:	619a      	str	r2, [r3, #24]
}
 801ad4a:	bf00      	nop
 801ad4c:	370c      	adds	r7, #12
 801ad4e:	46bd      	mov	sp, r7
 801ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad54:	4770      	bx	lr

0801ad56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801ad56:	b480      	push	{r7}
 801ad58:	b085      	sub	sp, #20
 801ad5a:	af00      	add	r7, sp, #0
 801ad5c:	6078      	str	r0, [r7, #4]
 801ad5e:	460b      	mov	r3, r1
 801ad60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801ad62:	687b      	ldr	r3, [r7, #4]
 801ad64:	695b      	ldr	r3, [r3, #20]
 801ad66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801ad68:	887a      	ldrh	r2, [r7, #2]
 801ad6a:	68fb      	ldr	r3, [r7, #12]
 801ad6c:	4013      	ands	r3, r2
 801ad6e:	041a      	lsls	r2, r3, #16
 801ad70:	68fb      	ldr	r3, [r7, #12]
 801ad72:	43d9      	mvns	r1, r3
 801ad74:	887b      	ldrh	r3, [r7, #2]
 801ad76:	400b      	ands	r3, r1
 801ad78:	431a      	orrs	r2, r3
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	619a      	str	r2, [r3, #24]
}
 801ad7e:	bf00      	nop
 801ad80:	3714      	adds	r7, #20
 801ad82:	46bd      	mov	sp, r7
 801ad84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad88:	4770      	bx	lr
	...

0801ad8c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	b084      	sub	sp, #16
 801ad90:	af00      	add	r7, sp, #0
 801ad92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801ad94:	4b19      	ldr	r3, [pc, #100]	; (801adfc <HAL_PWREx_ConfigSupply+0x70>)
 801ad96:	68db      	ldr	r3, [r3, #12]
 801ad98:	f003 0304 	and.w	r3, r3, #4
 801ad9c:	2b04      	cmp	r3, #4
 801ad9e:	d00a      	beq.n	801adb6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801ada0:	4b16      	ldr	r3, [pc, #88]	; (801adfc <HAL_PWREx_ConfigSupply+0x70>)
 801ada2:	68db      	ldr	r3, [r3, #12]
 801ada4:	f003 0307 	and.w	r3, r3, #7
 801ada8:	687a      	ldr	r2, [r7, #4]
 801adaa:	429a      	cmp	r2, r3
 801adac:	d001      	beq.n	801adb2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801adae:	2301      	movs	r3, #1
 801adb0:	e01f      	b.n	801adf2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801adb2:	2300      	movs	r3, #0
 801adb4:	e01d      	b.n	801adf2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801adb6:	4b11      	ldr	r3, [pc, #68]	; (801adfc <HAL_PWREx_ConfigSupply+0x70>)
 801adb8:	68db      	ldr	r3, [r3, #12]
 801adba:	f023 0207 	bic.w	r2, r3, #7
 801adbe:	490f      	ldr	r1, [pc, #60]	; (801adfc <HAL_PWREx_ConfigSupply+0x70>)
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	4313      	orrs	r3, r2
 801adc4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801adc6:	f7fa f9ed 	bl	80151a4 <HAL_GetTick>
 801adca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801adcc:	e009      	b.n	801ade2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801adce:	f7fa f9e9 	bl	80151a4 <HAL_GetTick>
 801add2:	4602      	mov	r2, r0
 801add4:	68fb      	ldr	r3, [r7, #12]
 801add6:	1ad3      	subs	r3, r2, r3
 801add8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801addc:	d901      	bls.n	801ade2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801adde:	2301      	movs	r3, #1
 801ade0:	e007      	b.n	801adf2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801ade2:	4b06      	ldr	r3, [pc, #24]	; (801adfc <HAL_PWREx_ConfigSupply+0x70>)
 801ade4:	685b      	ldr	r3, [r3, #4]
 801ade6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801adea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801adee:	d1ee      	bne.n	801adce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801adf0:	2300      	movs	r3, #0
}
 801adf2:	4618      	mov	r0, r3
 801adf4:	3710      	adds	r7, #16
 801adf6:	46bd      	mov	sp, r7
 801adf8:	bd80      	pop	{r7, pc}
 801adfa:	bf00      	nop
 801adfc:	58024800 	.word	0x58024800

0801ae00 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801ae00:	b580      	push	{r7, lr}
 801ae02:	b08c      	sub	sp, #48	; 0x30
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	2b00      	cmp	r3, #0
 801ae0c:	d101      	bne.n	801ae12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801ae0e:	2301      	movs	r3, #1
 801ae10:	e3c8      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801ae12:	687b      	ldr	r3, [r7, #4]
 801ae14:	681b      	ldr	r3, [r3, #0]
 801ae16:	f003 0301 	and.w	r3, r3, #1
 801ae1a:	2b00      	cmp	r3, #0
 801ae1c:	f000 8087 	beq.w	801af2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801ae20:	4b88      	ldr	r3, [pc, #544]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae22:	691b      	ldr	r3, [r3, #16]
 801ae24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ae28:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801ae2a:	4b86      	ldr	r3, [pc, #536]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae2e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801ae30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae32:	2b10      	cmp	r3, #16
 801ae34:	d007      	beq.n	801ae46 <HAL_RCC_OscConfig+0x46>
 801ae36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ae38:	2b18      	cmp	r3, #24
 801ae3a:	d110      	bne.n	801ae5e <HAL_RCC_OscConfig+0x5e>
 801ae3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae3e:	f003 0303 	and.w	r3, r3, #3
 801ae42:	2b02      	cmp	r3, #2
 801ae44:	d10b      	bne.n	801ae5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801ae46:	4b7f      	ldr	r3, [pc, #508]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae48:	681b      	ldr	r3, [r3, #0]
 801ae4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ae4e:	2b00      	cmp	r3, #0
 801ae50:	d06c      	beq.n	801af2c <HAL_RCC_OscConfig+0x12c>
 801ae52:	687b      	ldr	r3, [r7, #4]
 801ae54:	685b      	ldr	r3, [r3, #4]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d168      	bne.n	801af2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801ae5a:	2301      	movs	r3, #1
 801ae5c:	e3a2      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	685b      	ldr	r3, [r3, #4]
 801ae62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ae66:	d106      	bne.n	801ae76 <HAL_RCC_OscConfig+0x76>
 801ae68:	4b76      	ldr	r3, [pc, #472]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	4a75      	ldr	r2, [pc, #468]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801ae72:	6013      	str	r3, [r2, #0]
 801ae74:	e02e      	b.n	801aed4 <HAL_RCC_OscConfig+0xd4>
 801ae76:	687b      	ldr	r3, [r7, #4]
 801ae78:	685b      	ldr	r3, [r3, #4]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d10c      	bne.n	801ae98 <HAL_RCC_OscConfig+0x98>
 801ae7e:	4b71      	ldr	r3, [pc, #452]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	4a70      	ldr	r2, [pc, #448]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ae88:	6013      	str	r3, [r2, #0]
 801ae8a:	4b6e      	ldr	r3, [pc, #440]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae8c:	681b      	ldr	r3, [r3, #0]
 801ae8e:	4a6d      	ldr	r2, [pc, #436]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801ae90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ae94:	6013      	str	r3, [r2, #0]
 801ae96:	e01d      	b.n	801aed4 <HAL_RCC_OscConfig+0xd4>
 801ae98:	687b      	ldr	r3, [r7, #4]
 801ae9a:	685b      	ldr	r3, [r3, #4]
 801ae9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801aea0:	d10c      	bne.n	801aebc <HAL_RCC_OscConfig+0xbc>
 801aea2:	4b68      	ldr	r3, [pc, #416]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	4a67      	ldr	r2, [pc, #412]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801aeac:	6013      	str	r3, [r2, #0]
 801aeae:	4b65      	ldr	r3, [pc, #404]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	4a64      	ldr	r2, [pc, #400]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aeb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801aeb8:	6013      	str	r3, [r2, #0]
 801aeba:	e00b      	b.n	801aed4 <HAL_RCC_OscConfig+0xd4>
 801aebc:	4b61      	ldr	r3, [pc, #388]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aebe:	681b      	ldr	r3, [r3, #0]
 801aec0:	4a60      	ldr	r2, [pc, #384]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801aec6:	6013      	str	r3, [r2, #0]
 801aec8:	4b5e      	ldr	r3, [pc, #376]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	4a5d      	ldr	r2, [pc, #372]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801aed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	685b      	ldr	r3, [r3, #4]
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d013      	beq.n	801af04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801aedc:	f7fa f962 	bl	80151a4 <HAL_GetTick>
 801aee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801aee2:	e008      	b.n	801aef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801aee4:	f7fa f95e 	bl	80151a4 <HAL_GetTick>
 801aee8:	4602      	mov	r2, r0
 801aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aeec:	1ad3      	subs	r3, r2, r3
 801aeee:	2b64      	cmp	r3, #100	; 0x64
 801aef0:	d901      	bls.n	801aef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801aef2:	2303      	movs	r3, #3
 801aef4:	e356      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801aef6:	4b53      	ldr	r3, [pc, #332]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d0f0      	beq.n	801aee4 <HAL_RCC_OscConfig+0xe4>
 801af02:	e014      	b.n	801af2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af04:	f7fa f94e 	bl	80151a4 <HAL_GetTick>
 801af08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801af0a:	e008      	b.n	801af1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801af0c:	f7fa f94a 	bl	80151a4 <HAL_GetTick>
 801af10:	4602      	mov	r2, r0
 801af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af14:	1ad3      	subs	r3, r2, r3
 801af16:	2b64      	cmp	r3, #100	; 0x64
 801af18:	d901      	bls.n	801af1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801af1a:	2303      	movs	r3, #3
 801af1c:	e342      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801af1e:	4b49      	ldr	r3, [pc, #292]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801af20:	681b      	ldr	r3, [r3, #0]
 801af22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af26:	2b00      	cmp	r3, #0
 801af28:	d1f0      	bne.n	801af0c <HAL_RCC_OscConfig+0x10c>
 801af2a:	e000      	b.n	801af2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801af2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	681b      	ldr	r3, [r3, #0]
 801af32:	f003 0302 	and.w	r3, r3, #2
 801af36:	2b00      	cmp	r3, #0
 801af38:	f000 808c 	beq.w	801b054 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801af3c:	4b41      	ldr	r3, [pc, #260]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801af3e:	691b      	ldr	r3, [r3, #16]
 801af40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801af44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801af46:	4b3f      	ldr	r3, [pc, #252]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801af48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801af4c:	6a3b      	ldr	r3, [r7, #32]
 801af4e:	2b00      	cmp	r3, #0
 801af50:	d007      	beq.n	801af62 <HAL_RCC_OscConfig+0x162>
 801af52:	6a3b      	ldr	r3, [r7, #32]
 801af54:	2b18      	cmp	r3, #24
 801af56:	d137      	bne.n	801afc8 <HAL_RCC_OscConfig+0x1c8>
 801af58:	69fb      	ldr	r3, [r7, #28]
 801af5a:	f003 0303 	and.w	r3, r3, #3
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d132      	bne.n	801afc8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801af62:	4b38      	ldr	r3, [pc, #224]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801af64:	681b      	ldr	r3, [r3, #0]
 801af66:	f003 0304 	and.w	r3, r3, #4
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d005      	beq.n	801af7a <HAL_RCC_OscConfig+0x17a>
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	68db      	ldr	r3, [r3, #12]
 801af72:	2b00      	cmp	r3, #0
 801af74:	d101      	bne.n	801af7a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801af76:	2301      	movs	r3, #1
 801af78:	e314      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801af7a:	4b32      	ldr	r3, [pc, #200]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	f023 0219 	bic.w	r2, r3, #25
 801af82:	687b      	ldr	r3, [r7, #4]
 801af84:	68db      	ldr	r3, [r3, #12]
 801af86:	492f      	ldr	r1, [pc, #188]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801af88:	4313      	orrs	r3, r2
 801af8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801af8c:	f7fa f90a 	bl	80151a4 <HAL_GetTick>
 801af90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801af92:	e008      	b.n	801afa6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801af94:	f7fa f906 	bl	80151a4 <HAL_GetTick>
 801af98:	4602      	mov	r2, r0
 801af9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af9c:	1ad3      	subs	r3, r2, r3
 801af9e:	2b02      	cmp	r3, #2
 801afa0:	d901      	bls.n	801afa6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801afa2:	2303      	movs	r3, #3
 801afa4:	e2fe      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801afa6:	4b27      	ldr	r3, [pc, #156]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801afa8:	681b      	ldr	r3, [r3, #0]
 801afaa:	f003 0304 	and.w	r3, r3, #4
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d0f0      	beq.n	801af94 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801afb2:	4b24      	ldr	r3, [pc, #144]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801afb4:	685b      	ldr	r3, [r3, #4]
 801afb6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801afba:	687b      	ldr	r3, [r7, #4]
 801afbc:	691b      	ldr	r3, [r3, #16]
 801afbe:	061b      	lsls	r3, r3, #24
 801afc0:	4920      	ldr	r1, [pc, #128]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801afc2:	4313      	orrs	r3, r2
 801afc4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801afc6:	e045      	b.n	801b054 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	68db      	ldr	r3, [r3, #12]
 801afcc:	2b00      	cmp	r3, #0
 801afce:	d026      	beq.n	801b01e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801afd0:	4b1c      	ldr	r3, [pc, #112]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	f023 0219 	bic.w	r2, r3, #25
 801afd8:	687b      	ldr	r3, [r7, #4]
 801afda:	68db      	ldr	r3, [r3, #12]
 801afdc:	4919      	ldr	r1, [pc, #100]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801afde:	4313      	orrs	r3, r2
 801afe0:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801afe2:	f7fa f8df 	bl	80151a4 <HAL_GetTick>
 801afe6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801afe8:	e008      	b.n	801affc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801afea:	f7fa f8db 	bl	80151a4 <HAL_GetTick>
 801afee:	4602      	mov	r2, r0
 801aff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff2:	1ad3      	subs	r3, r2, r3
 801aff4:	2b02      	cmp	r3, #2
 801aff6:	d901      	bls.n	801affc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801aff8:	2303      	movs	r3, #3
 801affa:	e2d3      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801affc:	4b11      	ldr	r3, [pc, #68]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801affe:	681b      	ldr	r3, [r3, #0]
 801b000:	f003 0304 	and.w	r3, r3, #4
 801b004:	2b00      	cmp	r3, #0
 801b006:	d0f0      	beq.n	801afea <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b008:	4b0e      	ldr	r3, [pc, #56]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801b00a:	685b      	ldr	r3, [r3, #4]
 801b00c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b010:	687b      	ldr	r3, [r7, #4]
 801b012:	691b      	ldr	r3, [r3, #16]
 801b014:	061b      	lsls	r3, r3, #24
 801b016:	490b      	ldr	r1, [pc, #44]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801b018:	4313      	orrs	r3, r2
 801b01a:	604b      	str	r3, [r1, #4]
 801b01c:	e01a      	b.n	801b054 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b01e:	4b09      	ldr	r3, [pc, #36]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801b020:	681b      	ldr	r3, [r3, #0]
 801b022:	4a08      	ldr	r2, [pc, #32]	; (801b044 <HAL_RCC_OscConfig+0x244>)
 801b024:	f023 0301 	bic.w	r3, r3, #1
 801b028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b02a:	f7fa f8bb 	bl	80151a4 <HAL_GetTick>
 801b02e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b030:	e00a      	b.n	801b048 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b032:	f7fa f8b7 	bl	80151a4 <HAL_GetTick>
 801b036:	4602      	mov	r2, r0
 801b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b03a:	1ad3      	subs	r3, r2, r3
 801b03c:	2b02      	cmp	r3, #2
 801b03e:	d903      	bls.n	801b048 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801b040:	2303      	movs	r3, #3
 801b042:	e2af      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
 801b044:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b048:	4b96      	ldr	r3, [pc, #600]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b04a:	681b      	ldr	r3, [r3, #0]
 801b04c:	f003 0304 	and.w	r3, r3, #4
 801b050:	2b00      	cmp	r3, #0
 801b052:	d1ee      	bne.n	801b032 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	f003 0310 	and.w	r3, r3, #16
 801b05c:	2b00      	cmp	r3, #0
 801b05e:	d06a      	beq.n	801b136 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b060:	4b90      	ldr	r3, [pc, #576]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b062:	691b      	ldr	r3, [r3, #16]
 801b064:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b068:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b06a:	4b8e      	ldr	r3, [pc, #568]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b06c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b06e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b070:	69bb      	ldr	r3, [r7, #24]
 801b072:	2b08      	cmp	r3, #8
 801b074:	d007      	beq.n	801b086 <HAL_RCC_OscConfig+0x286>
 801b076:	69bb      	ldr	r3, [r7, #24]
 801b078:	2b18      	cmp	r3, #24
 801b07a:	d11b      	bne.n	801b0b4 <HAL_RCC_OscConfig+0x2b4>
 801b07c:	697b      	ldr	r3, [r7, #20]
 801b07e:	f003 0303 	and.w	r3, r3, #3
 801b082:	2b01      	cmp	r3, #1
 801b084:	d116      	bne.n	801b0b4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b086:	4b87      	ldr	r3, [pc, #540]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b088:	681b      	ldr	r3, [r3, #0]
 801b08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b08e:	2b00      	cmp	r3, #0
 801b090:	d005      	beq.n	801b09e <HAL_RCC_OscConfig+0x29e>
 801b092:	687b      	ldr	r3, [r7, #4]
 801b094:	69db      	ldr	r3, [r3, #28]
 801b096:	2b80      	cmp	r3, #128	; 0x80
 801b098:	d001      	beq.n	801b09e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b09a:	2301      	movs	r3, #1
 801b09c:	e282      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b09e:	4b81      	ldr	r3, [pc, #516]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b0a0:	68db      	ldr	r3, [r3, #12]
 801b0a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	6a1b      	ldr	r3, [r3, #32]
 801b0aa:	061b      	lsls	r3, r3, #24
 801b0ac:	497d      	ldr	r1, [pc, #500]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b0ae:	4313      	orrs	r3, r2
 801b0b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b0b2:	e040      	b.n	801b136 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	69db      	ldr	r3, [r3, #28]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d023      	beq.n	801b104 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b0bc:	4b79      	ldr	r3, [pc, #484]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	4a78      	ldr	r2, [pc, #480]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b0c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b0c8:	f7fa f86c 	bl	80151a4 <HAL_GetTick>
 801b0cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b0ce:	e008      	b.n	801b0e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b0d0:	f7fa f868 	bl	80151a4 <HAL_GetTick>
 801b0d4:	4602      	mov	r2, r0
 801b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0d8:	1ad3      	subs	r3, r2, r3
 801b0da:	2b02      	cmp	r3, #2
 801b0dc:	d901      	bls.n	801b0e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801b0de:	2303      	movs	r3, #3
 801b0e0:	e260      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b0e2:	4b70      	ldr	r3, [pc, #448]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d0f0      	beq.n	801b0d0 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b0ee:	4b6d      	ldr	r3, [pc, #436]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b0f0:	68db      	ldr	r3, [r3, #12]
 801b0f2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	6a1b      	ldr	r3, [r3, #32]
 801b0fa:	061b      	lsls	r3, r3, #24
 801b0fc:	4969      	ldr	r1, [pc, #420]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b0fe:	4313      	orrs	r3, r2
 801b100:	60cb      	str	r3, [r1, #12]
 801b102:	e018      	b.n	801b136 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b104:	4b67      	ldr	r3, [pc, #412]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b106:	681b      	ldr	r3, [r3, #0]
 801b108:	4a66      	ldr	r2, [pc, #408]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b10a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b10e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b110:	f7fa f848 	bl	80151a4 <HAL_GetTick>
 801b114:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b116:	e008      	b.n	801b12a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b118:	f7fa f844 	bl	80151a4 <HAL_GetTick>
 801b11c:	4602      	mov	r2, r0
 801b11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b120:	1ad3      	subs	r3, r2, r3
 801b122:	2b02      	cmp	r3, #2
 801b124:	d901      	bls.n	801b12a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801b126:	2303      	movs	r3, #3
 801b128:	e23c      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b12a:	4b5e      	ldr	r3, [pc, #376]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b132:	2b00      	cmp	r3, #0
 801b134:	d1f0      	bne.n	801b118 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	681b      	ldr	r3, [r3, #0]
 801b13a:	f003 0308 	and.w	r3, r3, #8
 801b13e:	2b00      	cmp	r3, #0
 801b140:	d036      	beq.n	801b1b0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	695b      	ldr	r3, [r3, #20]
 801b146:	2b00      	cmp	r3, #0
 801b148:	d019      	beq.n	801b17e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b14a:	4b56      	ldr	r3, [pc, #344]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b14e:	4a55      	ldr	r2, [pc, #340]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b150:	f043 0301 	orr.w	r3, r3, #1
 801b154:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b156:	f7fa f825 	bl	80151a4 <HAL_GetTick>
 801b15a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b15c:	e008      	b.n	801b170 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b15e:	f7fa f821 	bl	80151a4 <HAL_GetTick>
 801b162:	4602      	mov	r2, r0
 801b164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b166:	1ad3      	subs	r3, r2, r3
 801b168:	2b02      	cmp	r3, #2
 801b16a:	d901      	bls.n	801b170 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 801b16c:	2303      	movs	r3, #3
 801b16e:	e219      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b170:	4b4c      	ldr	r3, [pc, #304]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b172:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b174:	f003 0302 	and.w	r3, r3, #2
 801b178:	2b00      	cmp	r3, #0
 801b17a:	d0f0      	beq.n	801b15e <HAL_RCC_OscConfig+0x35e>
 801b17c:	e018      	b.n	801b1b0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b17e:	4b49      	ldr	r3, [pc, #292]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b182:	4a48      	ldr	r2, [pc, #288]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b184:	f023 0301 	bic.w	r3, r3, #1
 801b188:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b18a:	f7fa f80b 	bl	80151a4 <HAL_GetTick>
 801b18e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b190:	e008      	b.n	801b1a4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b192:	f7fa f807 	bl	80151a4 <HAL_GetTick>
 801b196:	4602      	mov	r2, r0
 801b198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b19a:	1ad3      	subs	r3, r2, r3
 801b19c:	2b02      	cmp	r3, #2
 801b19e:	d901      	bls.n	801b1a4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801b1a0:	2303      	movs	r3, #3
 801b1a2:	e1ff      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b1a4:	4b3f      	ldr	r3, [pc, #252]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b1a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b1a8:	f003 0302 	and.w	r3, r3, #2
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d1f0      	bne.n	801b192 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b1b0:	687b      	ldr	r3, [r7, #4]
 801b1b2:	681b      	ldr	r3, [r3, #0]
 801b1b4:	f003 0320 	and.w	r3, r3, #32
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	d036      	beq.n	801b22a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	699b      	ldr	r3, [r3, #24]
 801b1c0:	2b00      	cmp	r3, #0
 801b1c2:	d019      	beq.n	801b1f8 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b1c4:	4b37      	ldr	r3, [pc, #220]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	4a36      	ldr	r2, [pc, #216]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b1ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b1ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b1d0:	f7f9 ffe8 	bl	80151a4 <HAL_GetTick>
 801b1d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b1d6:	e008      	b.n	801b1ea <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b1d8:	f7f9 ffe4 	bl	80151a4 <HAL_GetTick>
 801b1dc:	4602      	mov	r2, r0
 801b1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1e0:	1ad3      	subs	r3, r2, r3
 801b1e2:	2b02      	cmp	r3, #2
 801b1e4:	d901      	bls.n	801b1ea <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801b1e6:	2303      	movs	r3, #3
 801b1e8:	e1dc      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b1ea:	4b2e      	ldr	r3, [pc, #184]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b1f2:	2b00      	cmp	r3, #0
 801b1f4:	d0f0      	beq.n	801b1d8 <HAL_RCC_OscConfig+0x3d8>
 801b1f6:	e018      	b.n	801b22a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b1f8:	4b2a      	ldr	r3, [pc, #168]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	4a29      	ldr	r2, [pc, #164]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b1fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b202:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b204:	f7f9 ffce 	bl	80151a4 <HAL_GetTick>
 801b208:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b20a:	e008      	b.n	801b21e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b20c:	f7f9 ffca 	bl	80151a4 <HAL_GetTick>
 801b210:	4602      	mov	r2, r0
 801b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b214:	1ad3      	subs	r3, r2, r3
 801b216:	2b02      	cmp	r3, #2
 801b218:	d901      	bls.n	801b21e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801b21a:	2303      	movs	r3, #3
 801b21c:	e1c2      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b21e:	4b21      	ldr	r3, [pc, #132]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b220:	681b      	ldr	r3, [r3, #0]
 801b222:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b226:	2b00      	cmp	r3, #0
 801b228:	d1f0      	bne.n	801b20c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b22a:	687b      	ldr	r3, [r7, #4]
 801b22c:	681b      	ldr	r3, [r3, #0]
 801b22e:	f003 0304 	and.w	r3, r3, #4
 801b232:	2b00      	cmp	r3, #0
 801b234:	f000 8086 	beq.w	801b344 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b238:	4b1b      	ldr	r3, [pc, #108]	; (801b2a8 <HAL_RCC_OscConfig+0x4a8>)
 801b23a:	681b      	ldr	r3, [r3, #0]
 801b23c:	4a1a      	ldr	r2, [pc, #104]	; (801b2a8 <HAL_RCC_OscConfig+0x4a8>)
 801b23e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b244:	f7f9 ffae 	bl	80151a4 <HAL_GetTick>
 801b248:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b24a:	e008      	b.n	801b25e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b24c:	f7f9 ffaa 	bl	80151a4 <HAL_GetTick>
 801b250:	4602      	mov	r2, r0
 801b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b254:	1ad3      	subs	r3, r2, r3
 801b256:	2b64      	cmp	r3, #100	; 0x64
 801b258:	d901      	bls.n	801b25e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801b25a:	2303      	movs	r3, #3
 801b25c:	e1a2      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b25e:	4b12      	ldr	r3, [pc, #72]	; (801b2a8 <HAL_RCC_OscConfig+0x4a8>)
 801b260:	681b      	ldr	r3, [r3, #0]
 801b262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b266:	2b00      	cmp	r3, #0
 801b268:	d0f0      	beq.n	801b24c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b26a:	687b      	ldr	r3, [r7, #4]
 801b26c:	689b      	ldr	r3, [r3, #8]
 801b26e:	2b01      	cmp	r3, #1
 801b270:	d106      	bne.n	801b280 <HAL_RCC_OscConfig+0x480>
 801b272:	4b0c      	ldr	r3, [pc, #48]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b276:	4a0b      	ldr	r2, [pc, #44]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b278:	f043 0301 	orr.w	r3, r3, #1
 801b27c:	6713      	str	r3, [r2, #112]	; 0x70
 801b27e:	e032      	b.n	801b2e6 <HAL_RCC_OscConfig+0x4e6>
 801b280:	687b      	ldr	r3, [r7, #4]
 801b282:	689b      	ldr	r3, [r3, #8]
 801b284:	2b00      	cmp	r3, #0
 801b286:	d111      	bne.n	801b2ac <HAL_RCC_OscConfig+0x4ac>
 801b288:	4b06      	ldr	r3, [pc, #24]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b28a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b28c:	4a05      	ldr	r2, [pc, #20]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b28e:	f023 0301 	bic.w	r3, r3, #1
 801b292:	6713      	str	r3, [r2, #112]	; 0x70
 801b294:	4b03      	ldr	r3, [pc, #12]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b298:	4a02      	ldr	r2, [pc, #8]	; (801b2a4 <HAL_RCC_OscConfig+0x4a4>)
 801b29a:	f023 0304 	bic.w	r3, r3, #4
 801b29e:	6713      	str	r3, [r2, #112]	; 0x70
 801b2a0:	e021      	b.n	801b2e6 <HAL_RCC_OscConfig+0x4e6>
 801b2a2:	bf00      	nop
 801b2a4:	58024400 	.word	0x58024400
 801b2a8:	58024800 	.word	0x58024800
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	689b      	ldr	r3, [r3, #8]
 801b2b0:	2b05      	cmp	r3, #5
 801b2b2:	d10c      	bne.n	801b2ce <HAL_RCC_OscConfig+0x4ce>
 801b2b4:	4b83      	ldr	r3, [pc, #524]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b2b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2b8:	4a82      	ldr	r2, [pc, #520]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b2ba:	f043 0304 	orr.w	r3, r3, #4
 801b2be:	6713      	str	r3, [r2, #112]	; 0x70
 801b2c0:	4b80      	ldr	r3, [pc, #512]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b2c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2c4:	4a7f      	ldr	r2, [pc, #508]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b2c6:	f043 0301 	orr.w	r3, r3, #1
 801b2ca:	6713      	str	r3, [r2, #112]	; 0x70
 801b2cc:	e00b      	b.n	801b2e6 <HAL_RCC_OscConfig+0x4e6>
 801b2ce:	4b7d      	ldr	r3, [pc, #500]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b2d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2d2:	4a7c      	ldr	r2, [pc, #496]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b2d4:	f023 0301 	bic.w	r3, r3, #1
 801b2d8:	6713      	str	r3, [r2, #112]	; 0x70
 801b2da:	4b7a      	ldr	r3, [pc, #488]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b2dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b2de:	4a79      	ldr	r2, [pc, #484]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b2e0:	f023 0304 	bic.w	r3, r3, #4
 801b2e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b2e6:	687b      	ldr	r3, [r7, #4]
 801b2e8:	689b      	ldr	r3, [r3, #8]
 801b2ea:	2b00      	cmp	r3, #0
 801b2ec:	d015      	beq.n	801b31a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b2ee:	f7f9 ff59 	bl	80151a4 <HAL_GetTick>
 801b2f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b2f4:	e00a      	b.n	801b30c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b2f6:	f7f9 ff55 	bl	80151a4 <HAL_GetTick>
 801b2fa:	4602      	mov	r2, r0
 801b2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2fe:	1ad3      	subs	r3, r2, r3
 801b300:	f241 3288 	movw	r2, #5000	; 0x1388
 801b304:	4293      	cmp	r3, r2
 801b306:	d901      	bls.n	801b30c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801b308:	2303      	movs	r3, #3
 801b30a:	e14b      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b30c:	4b6d      	ldr	r3, [pc, #436]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b30e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b310:	f003 0302 	and.w	r3, r3, #2
 801b314:	2b00      	cmp	r3, #0
 801b316:	d0ee      	beq.n	801b2f6 <HAL_RCC_OscConfig+0x4f6>
 801b318:	e014      	b.n	801b344 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b31a:	f7f9 ff43 	bl	80151a4 <HAL_GetTick>
 801b31e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b320:	e00a      	b.n	801b338 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b322:	f7f9 ff3f 	bl	80151a4 <HAL_GetTick>
 801b326:	4602      	mov	r2, r0
 801b328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b32a:	1ad3      	subs	r3, r2, r3
 801b32c:	f241 3288 	movw	r2, #5000	; 0x1388
 801b330:	4293      	cmp	r3, r2
 801b332:	d901      	bls.n	801b338 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801b334:	2303      	movs	r3, #3
 801b336:	e135      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b338:	4b62      	ldr	r3, [pc, #392]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b33a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b33c:	f003 0302 	and.w	r3, r3, #2
 801b340:	2b00      	cmp	r3, #0
 801b342:	d1ee      	bne.n	801b322 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b348:	2b00      	cmp	r3, #0
 801b34a:	f000 812a 	beq.w	801b5a2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801b34e:	4b5d      	ldr	r3, [pc, #372]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b350:	691b      	ldr	r3, [r3, #16]
 801b352:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b356:	2b18      	cmp	r3, #24
 801b358:	f000 80ba 	beq.w	801b4d0 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b360:	2b02      	cmp	r3, #2
 801b362:	f040 8095 	bne.w	801b490 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b366:	4b57      	ldr	r3, [pc, #348]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b368:	681b      	ldr	r3, [r3, #0]
 801b36a:	4a56      	ldr	r2, [pc, #344]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b36c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b372:	f7f9 ff17 	bl	80151a4 <HAL_GetTick>
 801b376:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b378:	e008      	b.n	801b38c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b37a:	f7f9 ff13 	bl	80151a4 <HAL_GetTick>
 801b37e:	4602      	mov	r2, r0
 801b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b382:	1ad3      	subs	r3, r2, r3
 801b384:	2b02      	cmp	r3, #2
 801b386:	d901      	bls.n	801b38c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801b388:	2303      	movs	r3, #3
 801b38a:	e10b      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b38c:	4b4d      	ldr	r3, [pc, #308]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b394:	2b00      	cmp	r3, #0
 801b396:	d1f0      	bne.n	801b37a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b398:	4b4a      	ldr	r3, [pc, #296]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b39a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b39c:	4b4a      	ldr	r3, [pc, #296]	; (801b4c8 <HAL_RCC_OscConfig+0x6c8>)
 801b39e:	4013      	ands	r3, r2
 801b3a0:	687a      	ldr	r2, [r7, #4]
 801b3a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801b3a4:	687a      	ldr	r2, [r7, #4]
 801b3a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b3a8:	0112      	lsls	r2, r2, #4
 801b3aa:	430a      	orrs	r2, r1
 801b3ac:	4945      	ldr	r1, [pc, #276]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b3ae:	4313      	orrs	r3, r2
 801b3b0:	628b      	str	r3, [r1, #40]	; 0x28
 801b3b2:	687b      	ldr	r3, [r7, #4]
 801b3b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b3b6:	3b01      	subs	r3, #1
 801b3b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b3bc:	687b      	ldr	r3, [r7, #4]
 801b3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b3c0:	3b01      	subs	r3, #1
 801b3c2:	025b      	lsls	r3, r3, #9
 801b3c4:	b29b      	uxth	r3, r3
 801b3c6:	431a      	orrs	r2, r3
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b3cc:	3b01      	subs	r3, #1
 801b3ce:	041b      	lsls	r3, r3, #16
 801b3d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801b3d4:	431a      	orrs	r2, r3
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b3da:	3b01      	subs	r3, #1
 801b3dc:	061b      	lsls	r3, r3, #24
 801b3de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801b3e2:	4938      	ldr	r1, [pc, #224]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b3e4:	4313      	orrs	r3, r2
 801b3e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801b3e8:	4b36      	ldr	r3, [pc, #216]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b3ec:	4a35      	ldr	r2, [pc, #212]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b3ee:	f023 0301 	bic.w	r3, r3, #1
 801b3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b3f4:	4b33      	ldr	r3, [pc, #204]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b3f8:	4b34      	ldr	r3, [pc, #208]	; (801b4cc <HAL_RCC_OscConfig+0x6cc>)
 801b3fa:	4013      	ands	r3, r2
 801b3fc:	687a      	ldr	r2, [r7, #4]
 801b3fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b400:	00d2      	lsls	r2, r2, #3
 801b402:	4930      	ldr	r1, [pc, #192]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b404:	4313      	orrs	r3, r2
 801b406:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801b408:	4b2e      	ldr	r3, [pc, #184]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b40c:	f023 020c 	bic.w	r2, r3, #12
 801b410:	687b      	ldr	r3, [r7, #4]
 801b412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b414:	492b      	ldr	r1, [pc, #172]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b416:	4313      	orrs	r3, r2
 801b418:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801b41a:	4b2a      	ldr	r3, [pc, #168]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b41e:	f023 0202 	bic.w	r2, r3, #2
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b426:	4927      	ldr	r1, [pc, #156]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b428:	4313      	orrs	r3, r2
 801b42a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801b42c:	4b25      	ldr	r3, [pc, #148]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b430:	4a24      	ldr	r2, [pc, #144]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b438:	4b22      	ldr	r3, [pc, #136]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b43a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b43c:	4a21      	ldr	r2, [pc, #132]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b43e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b442:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801b444:	4b1f      	ldr	r3, [pc, #124]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b448:	4a1e      	ldr	r2, [pc, #120]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b44a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b44e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801b450:	4b1c      	ldr	r3, [pc, #112]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b454:	4a1b      	ldr	r2, [pc, #108]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b456:	f043 0301 	orr.w	r3, r3, #1
 801b45a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b45c:	4b19      	ldr	r3, [pc, #100]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b45e:	681b      	ldr	r3, [r3, #0]
 801b460:	4a18      	ldr	r2, [pc, #96]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b462:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b468:	f7f9 fe9c 	bl	80151a4 <HAL_GetTick>
 801b46c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b46e:	e008      	b.n	801b482 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b470:	f7f9 fe98 	bl	80151a4 <HAL_GetTick>
 801b474:	4602      	mov	r2, r0
 801b476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b478:	1ad3      	subs	r3, r2, r3
 801b47a:	2b02      	cmp	r3, #2
 801b47c:	d901      	bls.n	801b482 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801b47e:	2303      	movs	r3, #3
 801b480:	e090      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b482:	4b10      	ldr	r3, [pc, #64]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b484:	681b      	ldr	r3, [r3, #0]
 801b486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	d0f0      	beq.n	801b470 <HAL_RCC_OscConfig+0x670>
 801b48e:	e088      	b.n	801b5a2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b490:	4b0c      	ldr	r3, [pc, #48]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b492:	681b      	ldr	r3, [r3, #0]
 801b494:	4a0b      	ldr	r2, [pc, #44]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b496:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b49a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b49c:	f7f9 fe82 	bl	80151a4 <HAL_GetTick>
 801b4a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b4a2:	e008      	b.n	801b4b6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b4a4:	f7f9 fe7e 	bl	80151a4 <HAL_GetTick>
 801b4a8:	4602      	mov	r2, r0
 801b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ac:	1ad3      	subs	r3, r2, r3
 801b4ae:	2b02      	cmp	r3, #2
 801b4b0:	d901      	bls.n	801b4b6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801b4b2:	2303      	movs	r3, #3
 801b4b4:	e076      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b4b6:	4b03      	ldr	r3, [pc, #12]	; (801b4c4 <HAL_RCC_OscConfig+0x6c4>)
 801b4b8:	681b      	ldr	r3, [r3, #0]
 801b4ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b4be:	2b00      	cmp	r3, #0
 801b4c0:	d1f0      	bne.n	801b4a4 <HAL_RCC_OscConfig+0x6a4>
 801b4c2:	e06e      	b.n	801b5a2 <HAL_RCC_OscConfig+0x7a2>
 801b4c4:	58024400 	.word	0x58024400
 801b4c8:	fffffc0c 	.word	0xfffffc0c
 801b4cc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801b4d0:	4b36      	ldr	r3, [pc, #216]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b4d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b4d4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801b4d6:	4b35      	ldr	r3, [pc, #212]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b4da:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4e0:	2b01      	cmp	r3, #1
 801b4e2:	d031      	beq.n	801b548 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b4e4:	693b      	ldr	r3, [r7, #16]
 801b4e6:	f003 0203 	and.w	r2, r3, #3
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b4ee:	429a      	cmp	r2, r3
 801b4f0:	d12a      	bne.n	801b548 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b4f2:	693b      	ldr	r3, [r7, #16]
 801b4f4:	091b      	lsrs	r3, r3, #4
 801b4f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b4fe:	429a      	cmp	r2, r3
 801b500:	d122      	bne.n	801b548 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b502:	68fb      	ldr	r3, [r7, #12]
 801b504:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b508:	687b      	ldr	r3, [r7, #4]
 801b50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b50c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b50e:	429a      	cmp	r2, r3
 801b510:	d11a      	bne.n	801b548 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	0a5b      	lsrs	r3, r3, #9
 801b516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b51e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b520:	429a      	cmp	r2, r3
 801b522:	d111      	bne.n	801b548 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b524:	68fb      	ldr	r3, [r7, #12]
 801b526:	0c1b      	lsrs	r3, r3, #16
 801b528:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b52c:	687b      	ldr	r3, [r7, #4]
 801b52e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b530:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b532:	429a      	cmp	r2, r3
 801b534:	d108      	bne.n	801b548 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801b536:	68fb      	ldr	r3, [r7, #12]
 801b538:	0e1b      	lsrs	r3, r3, #24
 801b53a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b542:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b544:	429a      	cmp	r2, r3
 801b546:	d001      	beq.n	801b54c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801b548:	2301      	movs	r3, #1
 801b54a:	e02b      	b.n	801b5a4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801b54c:	4b17      	ldr	r3, [pc, #92]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b550:	08db      	lsrs	r3, r3, #3
 801b552:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b556:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801b558:	687b      	ldr	r3, [r7, #4]
 801b55a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b55c:	693a      	ldr	r2, [r7, #16]
 801b55e:	429a      	cmp	r2, r3
 801b560:	d01f      	beq.n	801b5a2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801b562:	4b12      	ldr	r3, [pc, #72]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b566:	4a11      	ldr	r2, [pc, #68]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b568:	f023 0301 	bic.w	r3, r3, #1
 801b56c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b56e:	f7f9 fe19 	bl	80151a4 <HAL_GetTick>
 801b572:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801b574:	bf00      	nop
 801b576:	f7f9 fe15 	bl	80151a4 <HAL_GetTick>
 801b57a:	4602      	mov	r2, r0
 801b57c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b57e:	4293      	cmp	r3, r2
 801b580:	d0f9      	beq.n	801b576 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b582:	4b0a      	ldr	r3, [pc, #40]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b584:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b586:	4b0a      	ldr	r3, [pc, #40]	; (801b5b0 <HAL_RCC_OscConfig+0x7b0>)
 801b588:	4013      	ands	r3, r2
 801b58a:	687a      	ldr	r2, [r7, #4]
 801b58c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b58e:	00d2      	lsls	r2, r2, #3
 801b590:	4906      	ldr	r1, [pc, #24]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b592:	4313      	orrs	r3, r2
 801b594:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801b596:	4b05      	ldr	r3, [pc, #20]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b59a:	4a04      	ldr	r2, [pc, #16]	; (801b5ac <HAL_RCC_OscConfig+0x7ac>)
 801b59c:	f043 0301 	orr.w	r3, r3, #1
 801b5a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801b5a2:	2300      	movs	r3, #0
}
 801b5a4:	4618      	mov	r0, r3
 801b5a6:	3730      	adds	r7, #48	; 0x30
 801b5a8:	46bd      	mov	sp, r7
 801b5aa:	bd80      	pop	{r7, pc}
 801b5ac:	58024400 	.word	0x58024400
 801b5b0:	ffff0007 	.word	0xffff0007

0801b5b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b5b4:	b580      	push	{r7, lr}
 801b5b6:	b086      	sub	sp, #24
 801b5b8:	af00      	add	r7, sp, #0
 801b5ba:	6078      	str	r0, [r7, #4]
 801b5bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b5be:	687b      	ldr	r3, [r7, #4]
 801b5c0:	2b00      	cmp	r3, #0
 801b5c2:	d101      	bne.n	801b5c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b5c4:	2301      	movs	r3, #1
 801b5c6:	e19c      	b.n	801b902 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b5c8:	4b8a      	ldr	r3, [pc, #552]	; (801b7f4 <HAL_RCC_ClockConfig+0x240>)
 801b5ca:	681b      	ldr	r3, [r3, #0]
 801b5cc:	f003 030f 	and.w	r3, r3, #15
 801b5d0:	683a      	ldr	r2, [r7, #0]
 801b5d2:	429a      	cmp	r2, r3
 801b5d4:	d910      	bls.n	801b5f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b5d6:	4b87      	ldr	r3, [pc, #540]	; (801b7f4 <HAL_RCC_ClockConfig+0x240>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	f023 020f 	bic.w	r2, r3, #15
 801b5de:	4985      	ldr	r1, [pc, #532]	; (801b7f4 <HAL_RCC_ClockConfig+0x240>)
 801b5e0:	683b      	ldr	r3, [r7, #0]
 801b5e2:	4313      	orrs	r3, r2
 801b5e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b5e6:	4b83      	ldr	r3, [pc, #524]	; (801b7f4 <HAL_RCC_ClockConfig+0x240>)
 801b5e8:	681b      	ldr	r3, [r3, #0]
 801b5ea:	f003 030f 	and.w	r3, r3, #15
 801b5ee:	683a      	ldr	r2, [r7, #0]
 801b5f0:	429a      	cmp	r2, r3
 801b5f2:	d001      	beq.n	801b5f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801b5f4:	2301      	movs	r3, #1
 801b5f6:	e184      	b.n	801b902 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b5f8:	687b      	ldr	r3, [r7, #4]
 801b5fa:	681b      	ldr	r3, [r3, #0]
 801b5fc:	f003 0304 	and.w	r3, r3, #4
 801b600:	2b00      	cmp	r3, #0
 801b602:	d010      	beq.n	801b626 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	691a      	ldr	r2, [r3, #16]
 801b608:	4b7b      	ldr	r3, [pc, #492]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b60a:	699b      	ldr	r3, [r3, #24]
 801b60c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b610:	429a      	cmp	r2, r3
 801b612:	d908      	bls.n	801b626 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b614:	4b78      	ldr	r3, [pc, #480]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b616:	699b      	ldr	r3, [r3, #24]
 801b618:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	691b      	ldr	r3, [r3, #16]
 801b620:	4975      	ldr	r1, [pc, #468]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b622:	4313      	orrs	r3, r2
 801b624:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b626:	687b      	ldr	r3, [r7, #4]
 801b628:	681b      	ldr	r3, [r3, #0]
 801b62a:	f003 0308 	and.w	r3, r3, #8
 801b62e:	2b00      	cmp	r3, #0
 801b630:	d010      	beq.n	801b654 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	695a      	ldr	r2, [r3, #20]
 801b636:	4b70      	ldr	r3, [pc, #448]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b638:	69db      	ldr	r3, [r3, #28]
 801b63a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b63e:	429a      	cmp	r2, r3
 801b640:	d908      	bls.n	801b654 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b642:	4b6d      	ldr	r3, [pc, #436]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b644:	69db      	ldr	r3, [r3, #28]
 801b646:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b64a:	687b      	ldr	r3, [r7, #4]
 801b64c:	695b      	ldr	r3, [r3, #20]
 801b64e:	496a      	ldr	r1, [pc, #424]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b650:	4313      	orrs	r3, r2
 801b652:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	681b      	ldr	r3, [r3, #0]
 801b658:	f003 0310 	and.w	r3, r3, #16
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d010      	beq.n	801b682 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	699a      	ldr	r2, [r3, #24]
 801b664:	4b64      	ldr	r3, [pc, #400]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b666:	69db      	ldr	r3, [r3, #28]
 801b668:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b66c:	429a      	cmp	r2, r3
 801b66e:	d908      	bls.n	801b682 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b670:	4b61      	ldr	r3, [pc, #388]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b672:	69db      	ldr	r3, [r3, #28]
 801b674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	699b      	ldr	r3, [r3, #24]
 801b67c:	495e      	ldr	r1, [pc, #376]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b67e:	4313      	orrs	r3, r2
 801b680:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	681b      	ldr	r3, [r3, #0]
 801b686:	f003 0320 	and.w	r3, r3, #32
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d010      	beq.n	801b6b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	69da      	ldr	r2, [r3, #28]
 801b692:	4b59      	ldr	r3, [pc, #356]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b694:	6a1b      	ldr	r3, [r3, #32]
 801b696:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b69a:	429a      	cmp	r2, r3
 801b69c:	d908      	bls.n	801b6b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b69e:	4b56      	ldr	r3, [pc, #344]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b6a0:	6a1b      	ldr	r3, [r3, #32]
 801b6a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	69db      	ldr	r3, [r3, #28]
 801b6aa:	4953      	ldr	r1, [pc, #332]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b6ac:	4313      	orrs	r3, r2
 801b6ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b6b0:	687b      	ldr	r3, [r7, #4]
 801b6b2:	681b      	ldr	r3, [r3, #0]
 801b6b4:	f003 0302 	and.w	r3, r3, #2
 801b6b8:	2b00      	cmp	r3, #0
 801b6ba:	d010      	beq.n	801b6de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b6bc:	687b      	ldr	r3, [r7, #4]
 801b6be:	68da      	ldr	r2, [r3, #12]
 801b6c0:	4b4d      	ldr	r3, [pc, #308]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b6c2:	699b      	ldr	r3, [r3, #24]
 801b6c4:	f003 030f 	and.w	r3, r3, #15
 801b6c8:	429a      	cmp	r2, r3
 801b6ca:	d908      	bls.n	801b6de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b6cc:	4b4a      	ldr	r3, [pc, #296]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b6ce:	699b      	ldr	r3, [r3, #24]
 801b6d0:	f023 020f 	bic.w	r2, r3, #15
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	68db      	ldr	r3, [r3, #12]
 801b6d8:	4947      	ldr	r1, [pc, #284]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b6da:	4313      	orrs	r3, r2
 801b6dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	f003 0301 	and.w	r3, r3, #1
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d055      	beq.n	801b796 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801b6ea:	4b43      	ldr	r3, [pc, #268]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b6ec:	699b      	ldr	r3, [r3, #24]
 801b6ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801b6f2:	687b      	ldr	r3, [r7, #4]
 801b6f4:	689b      	ldr	r3, [r3, #8]
 801b6f6:	4940      	ldr	r1, [pc, #256]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b6f8:	4313      	orrs	r3, r2
 801b6fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	685b      	ldr	r3, [r3, #4]
 801b700:	2b02      	cmp	r3, #2
 801b702:	d107      	bne.n	801b714 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b704:	4b3c      	ldr	r3, [pc, #240]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b706:	681b      	ldr	r3, [r3, #0]
 801b708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d121      	bne.n	801b754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b710:	2301      	movs	r3, #1
 801b712:	e0f6      	b.n	801b902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	685b      	ldr	r3, [r3, #4]
 801b718:	2b03      	cmp	r3, #3
 801b71a:	d107      	bne.n	801b72c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b71c:	4b36      	ldr	r3, [pc, #216]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b724:	2b00      	cmp	r3, #0
 801b726:	d115      	bne.n	801b754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b728:	2301      	movs	r3, #1
 801b72a:	e0ea      	b.n	801b902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	685b      	ldr	r3, [r3, #4]
 801b730:	2b01      	cmp	r3, #1
 801b732:	d107      	bne.n	801b744 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b734:	4b30      	ldr	r3, [pc, #192]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b736:	681b      	ldr	r3, [r3, #0]
 801b738:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d109      	bne.n	801b754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b740:	2301      	movs	r3, #1
 801b742:	e0de      	b.n	801b902 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b744:	4b2c      	ldr	r3, [pc, #176]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b746:	681b      	ldr	r3, [r3, #0]
 801b748:	f003 0304 	and.w	r3, r3, #4
 801b74c:	2b00      	cmp	r3, #0
 801b74e:	d101      	bne.n	801b754 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b750:	2301      	movs	r3, #1
 801b752:	e0d6      	b.n	801b902 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b754:	4b28      	ldr	r3, [pc, #160]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b756:	691b      	ldr	r3, [r3, #16]
 801b758:	f023 0207 	bic.w	r2, r3, #7
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	685b      	ldr	r3, [r3, #4]
 801b760:	4925      	ldr	r1, [pc, #148]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b762:	4313      	orrs	r3, r2
 801b764:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b766:	f7f9 fd1d 	bl	80151a4 <HAL_GetTick>
 801b76a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b76c:	e00a      	b.n	801b784 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b76e:	f7f9 fd19 	bl	80151a4 <HAL_GetTick>
 801b772:	4602      	mov	r2, r0
 801b774:	697b      	ldr	r3, [r7, #20]
 801b776:	1ad3      	subs	r3, r2, r3
 801b778:	f241 3288 	movw	r2, #5000	; 0x1388
 801b77c:	4293      	cmp	r3, r2
 801b77e:	d901      	bls.n	801b784 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801b780:	2303      	movs	r3, #3
 801b782:	e0be      	b.n	801b902 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b784:	4b1c      	ldr	r3, [pc, #112]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b786:	691b      	ldr	r3, [r3, #16]
 801b788:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	685b      	ldr	r3, [r3, #4]
 801b790:	00db      	lsls	r3, r3, #3
 801b792:	429a      	cmp	r2, r3
 801b794:	d1eb      	bne.n	801b76e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	f003 0302 	and.w	r3, r3, #2
 801b79e:	2b00      	cmp	r3, #0
 801b7a0:	d010      	beq.n	801b7c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b7a2:	687b      	ldr	r3, [r7, #4]
 801b7a4:	68da      	ldr	r2, [r3, #12]
 801b7a6:	4b14      	ldr	r3, [pc, #80]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b7a8:	699b      	ldr	r3, [r3, #24]
 801b7aa:	f003 030f 	and.w	r3, r3, #15
 801b7ae:	429a      	cmp	r2, r3
 801b7b0:	d208      	bcs.n	801b7c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b7b2:	4b11      	ldr	r3, [pc, #68]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b7b4:	699b      	ldr	r3, [r3, #24]
 801b7b6:	f023 020f 	bic.w	r2, r3, #15
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	68db      	ldr	r3, [r3, #12]
 801b7be:	490e      	ldr	r1, [pc, #56]	; (801b7f8 <HAL_RCC_ClockConfig+0x244>)
 801b7c0:	4313      	orrs	r3, r2
 801b7c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b7c4:	4b0b      	ldr	r3, [pc, #44]	; (801b7f4 <HAL_RCC_ClockConfig+0x240>)
 801b7c6:	681b      	ldr	r3, [r3, #0]
 801b7c8:	f003 030f 	and.w	r3, r3, #15
 801b7cc:	683a      	ldr	r2, [r7, #0]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d214      	bcs.n	801b7fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b7d2:	4b08      	ldr	r3, [pc, #32]	; (801b7f4 <HAL_RCC_ClockConfig+0x240>)
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	f023 020f 	bic.w	r2, r3, #15
 801b7da:	4906      	ldr	r1, [pc, #24]	; (801b7f4 <HAL_RCC_ClockConfig+0x240>)
 801b7dc:	683b      	ldr	r3, [r7, #0]
 801b7de:	4313      	orrs	r3, r2
 801b7e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b7e2:	4b04      	ldr	r3, [pc, #16]	; (801b7f4 <HAL_RCC_ClockConfig+0x240>)
 801b7e4:	681b      	ldr	r3, [r3, #0]
 801b7e6:	f003 030f 	and.w	r3, r3, #15
 801b7ea:	683a      	ldr	r2, [r7, #0]
 801b7ec:	429a      	cmp	r2, r3
 801b7ee:	d005      	beq.n	801b7fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801b7f0:	2301      	movs	r3, #1
 801b7f2:	e086      	b.n	801b902 <HAL_RCC_ClockConfig+0x34e>
 801b7f4:	52002000 	.word	0x52002000
 801b7f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b7fc:	687b      	ldr	r3, [r7, #4]
 801b7fe:	681b      	ldr	r3, [r3, #0]
 801b800:	f003 0304 	and.w	r3, r3, #4
 801b804:	2b00      	cmp	r3, #0
 801b806:	d010      	beq.n	801b82a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	691a      	ldr	r2, [r3, #16]
 801b80c:	4b3f      	ldr	r3, [pc, #252]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b80e:	699b      	ldr	r3, [r3, #24]
 801b810:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b814:	429a      	cmp	r2, r3
 801b816:	d208      	bcs.n	801b82a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b818:	4b3c      	ldr	r3, [pc, #240]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b81a:	699b      	ldr	r3, [r3, #24]
 801b81c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b820:	687b      	ldr	r3, [r7, #4]
 801b822:	691b      	ldr	r3, [r3, #16]
 801b824:	4939      	ldr	r1, [pc, #228]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b826:	4313      	orrs	r3, r2
 801b828:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b82a:	687b      	ldr	r3, [r7, #4]
 801b82c:	681b      	ldr	r3, [r3, #0]
 801b82e:	f003 0308 	and.w	r3, r3, #8
 801b832:	2b00      	cmp	r3, #0
 801b834:	d010      	beq.n	801b858 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b836:	687b      	ldr	r3, [r7, #4]
 801b838:	695a      	ldr	r2, [r3, #20]
 801b83a:	4b34      	ldr	r3, [pc, #208]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b83c:	69db      	ldr	r3, [r3, #28]
 801b83e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b842:	429a      	cmp	r2, r3
 801b844:	d208      	bcs.n	801b858 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b846:	4b31      	ldr	r3, [pc, #196]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b848:	69db      	ldr	r3, [r3, #28]
 801b84a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	695b      	ldr	r3, [r3, #20]
 801b852:	492e      	ldr	r1, [pc, #184]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b854:	4313      	orrs	r3, r2
 801b856:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b858:	687b      	ldr	r3, [r7, #4]
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	f003 0310 	and.w	r3, r3, #16
 801b860:	2b00      	cmp	r3, #0
 801b862:	d010      	beq.n	801b886 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b864:	687b      	ldr	r3, [r7, #4]
 801b866:	699a      	ldr	r2, [r3, #24]
 801b868:	4b28      	ldr	r3, [pc, #160]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b86a:	69db      	ldr	r3, [r3, #28]
 801b86c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b870:	429a      	cmp	r2, r3
 801b872:	d208      	bcs.n	801b886 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b874:	4b25      	ldr	r3, [pc, #148]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b876:	69db      	ldr	r3, [r3, #28]
 801b878:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b87c:	687b      	ldr	r3, [r7, #4]
 801b87e:	699b      	ldr	r3, [r3, #24]
 801b880:	4922      	ldr	r1, [pc, #136]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b882:	4313      	orrs	r3, r2
 801b884:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b886:	687b      	ldr	r3, [r7, #4]
 801b888:	681b      	ldr	r3, [r3, #0]
 801b88a:	f003 0320 	and.w	r3, r3, #32
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d010      	beq.n	801b8b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	69da      	ldr	r2, [r3, #28]
 801b896:	4b1d      	ldr	r3, [pc, #116]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b898:	6a1b      	ldr	r3, [r3, #32]
 801b89a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b89e:	429a      	cmp	r2, r3
 801b8a0:	d208      	bcs.n	801b8b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b8a2:	4b1a      	ldr	r3, [pc, #104]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b8a4:	6a1b      	ldr	r3, [r3, #32]
 801b8a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	69db      	ldr	r3, [r3, #28]
 801b8ae:	4917      	ldr	r1, [pc, #92]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b8b0:	4313      	orrs	r3, r2
 801b8b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b8b4:	f000 f834 	bl	801b920 <HAL_RCC_GetSysClockFreq>
 801b8b8:	4602      	mov	r2, r0
 801b8ba:	4b14      	ldr	r3, [pc, #80]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b8bc:	699b      	ldr	r3, [r3, #24]
 801b8be:	0a1b      	lsrs	r3, r3, #8
 801b8c0:	f003 030f 	and.w	r3, r3, #15
 801b8c4:	4912      	ldr	r1, [pc, #72]	; (801b910 <HAL_RCC_ClockConfig+0x35c>)
 801b8c6:	5ccb      	ldrb	r3, [r1, r3]
 801b8c8:	f003 031f 	and.w	r3, r3, #31
 801b8cc:	fa22 f303 	lsr.w	r3, r2, r3
 801b8d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b8d2:	4b0e      	ldr	r3, [pc, #56]	; (801b90c <HAL_RCC_ClockConfig+0x358>)
 801b8d4:	699b      	ldr	r3, [r3, #24]
 801b8d6:	f003 030f 	and.w	r3, r3, #15
 801b8da:	4a0d      	ldr	r2, [pc, #52]	; (801b910 <HAL_RCC_ClockConfig+0x35c>)
 801b8dc:	5cd3      	ldrb	r3, [r2, r3]
 801b8de:	f003 031f 	and.w	r3, r3, #31
 801b8e2:	693a      	ldr	r2, [r7, #16]
 801b8e4:	fa22 f303 	lsr.w	r3, r2, r3
 801b8e8:	4a0a      	ldr	r2, [pc, #40]	; (801b914 <HAL_RCC_ClockConfig+0x360>)
 801b8ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b8ec:	4a0a      	ldr	r2, [pc, #40]	; (801b918 <HAL_RCC_ClockConfig+0x364>)
 801b8ee:	693b      	ldr	r3, [r7, #16]
 801b8f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801b8f2:	4b0a      	ldr	r3, [pc, #40]	; (801b91c <HAL_RCC_ClockConfig+0x368>)
 801b8f4:	681b      	ldr	r3, [r3, #0]
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f7f9 fc0a 	bl	8015110 <HAL_InitTick>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801b900:	7bfb      	ldrb	r3, [r7, #15]
}
 801b902:	4618      	mov	r0, r3
 801b904:	3718      	adds	r7, #24
 801b906:	46bd      	mov	sp, r7
 801b908:	bd80      	pop	{r7, pc}
 801b90a:	bf00      	nop
 801b90c:	58024400 	.word	0x58024400
 801b910:	08020dc4 	.word	0x08020dc4
 801b914:	24000008 	.word	0x24000008
 801b918:	24000004 	.word	0x24000004
 801b91c:	2400000c 	.word	0x2400000c

0801b920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b920:	b480      	push	{r7}
 801b922:	b089      	sub	sp, #36	; 0x24
 801b924:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801b926:	4bb3      	ldr	r3, [pc, #716]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b928:	691b      	ldr	r3, [r3, #16]
 801b92a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b92e:	2b18      	cmp	r3, #24
 801b930:	f200 8155 	bhi.w	801bbde <HAL_RCC_GetSysClockFreq+0x2be>
 801b934:	a201      	add	r2, pc, #4	; (adr r2, 801b93c <HAL_RCC_GetSysClockFreq+0x1c>)
 801b936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b93a:	bf00      	nop
 801b93c:	0801b9a1 	.word	0x0801b9a1
 801b940:	0801bbdf 	.word	0x0801bbdf
 801b944:	0801bbdf 	.word	0x0801bbdf
 801b948:	0801bbdf 	.word	0x0801bbdf
 801b94c:	0801bbdf 	.word	0x0801bbdf
 801b950:	0801bbdf 	.word	0x0801bbdf
 801b954:	0801bbdf 	.word	0x0801bbdf
 801b958:	0801bbdf 	.word	0x0801bbdf
 801b95c:	0801b9c7 	.word	0x0801b9c7
 801b960:	0801bbdf 	.word	0x0801bbdf
 801b964:	0801bbdf 	.word	0x0801bbdf
 801b968:	0801bbdf 	.word	0x0801bbdf
 801b96c:	0801bbdf 	.word	0x0801bbdf
 801b970:	0801bbdf 	.word	0x0801bbdf
 801b974:	0801bbdf 	.word	0x0801bbdf
 801b978:	0801bbdf 	.word	0x0801bbdf
 801b97c:	0801b9cd 	.word	0x0801b9cd
 801b980:	0801bbdf 	.word	0x0801bbdf
 801b984:	0801bbdf 	.word	0x0801bbdf
 801b988:	0801bbdf 	.word	0x0801bbdf
 801b98c:	0801bbdf 	.word	0x0801bbdf
 801b990:	0801bbdf 	.word	0x0801bbdf
 801b994:	0801bbdf 	.word	0x0801bbdf
 801b998:	0801bbdf 	.word	0x0801bbdf
 801b99c:	0801b9d3 	.word	0x0801b9d3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801b9a0:	4b94      	ldr	r3, [pc, #592]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	f003 0320 	and.w	r3, r3, #32
 801b9a8:	2b00      	cmp	r3, #0
 801b9aa:	d009      	beq.n	801b9c0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801b9ac:	4b91      	ldr	r3, [pc, #580]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	08db      	lsrs	r3, r3, #3
 801b9b2:	f003 0303 	and.w	r3, r3, #3
 801b9b6:	4a90      	ldr	r2, [pc, #576]	; (801bbf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801b9b8:	fa22 f303 	lsr.w	r3, r2, r3
 801b9bc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801b9be:	e111      	b.n	801bbe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801b9c0:	4b8d      	ldr	r3, [pc, #564]	; (801bbf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801b9c2:	61bb      	str	r3, [r7, #24]
      break;
 801b9c4:	e10e      	b.n	801bbe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801b9c6:	4b8d      	ldr	r3, [pc, #564]	; (801bbfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 801b9c8:	61bb      	str	r3, [r7, #24]
      break;
 801b9ca:	e10b      	b.n	801bbe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801b9cc:	4b8c      	ldr	r3, [pc, #560]	; (801bc00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801b9ce:	61bb      	str	r3, [r7, #24]
      break;
 801b9d0:	e108      	b.n	801bbe4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801b9d2:	4b88      	ldr	r3, [pc, #544]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9d6:	f003 0303 	and.w	r3, r3, #3
 801b9da:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801b9dc:	4b85      	ldr	r3, [pc, #532]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b9e0:	091b      	lsrs	r3, r3, #4
 801b9e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b9e6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801b9e8:	4b82      	ldr	r3, [pc, #520]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b9ec:	f003 0301 	and.w	r3, r3, #1
 801b9f0:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801b9f2:	4b80      	ldr	r3, [pc, #512]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801b9f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b9f6:	08db      	lsrs	r3, r3, #3
 801b9f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b9fc:	68fa      	ldr	r2, [r7, #12]
 801b9fe:	fb02 f303 	mul.w	r3, r2, r3
 801ba02:	ee07 3a90 	vmov	s15, r3
 801ba06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ba0a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801ba0e:	693b      	ldr	r3, [r7, #16]
 801ba10:	2b00      	cmp	r3, #0
 801ba12:	f000 80e1 	beq.w	801bbd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 801ba16:	697b      	ldr	r3, [r7, #20]
 801ba18:	2b02      	cmp	r3, #2
 801ba1a:	f000 8083 	beq.w	801bb24 <HAL_RCC_GetSysClockFreq+0x204>
 801ba1e:	697b      	ldr	r3, [r7, #20]
 801ba20:	2b02      	cmp	r3, #2
 801ba22:	f200 80a1 	bhi.w	801bb68 <HAL_RCC_GetSysClockFreq+0x248>
 801ba26:	697b      	ldr	r3, [r7, #20]
 801ba28:	2b00      	cmp	r3, #0
 801ba2a:	d003      	beq.n	801ba34 <HAL_RCC_GetSysClockFreq+0x114>
 801ba2c:	697b      	ldr	r3, [r7, #20]
 801ba2e:	2b01      	cmp	r3, #1
 801ba30:	d056      	beq.n	801bae0 <HAL_RCC_GetSysClockFreq+0x1c0>
 801ba32:	e099      	b.n	801bb68 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ba34:	4b6f      	ldr	r3, [pc, #444]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba36:	681b      	ldr	r3, [r3, #0]
 801ba38:	f003 0320 	and.w	r3, r3, #32
 801ba3c:	2b00      	cmp	r3, #0
 801ba3e:	d02d      	beq.n	801ba9c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ba40:	4b6c      	ldr	r3, [pc, #432]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba42:	681b      	ldr	r3, [r3, #0]
 801ba44:	08db      	lsrs	r3, r3, #3
 801ba46:	f003 0303 	and.w	r3, r3, #3
 801ba4a:	4a6b      	ldr	r2, [pc, #428]	; (801bbf8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ba4c:	fa22 f303 	lsr.w	r3, r2, r3
 801ba50:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	ee07 3a90 	vmov	s15, r3
 801ba58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ba5c:	693b      	ldr	r3, [r7, #16]
 801ba5e:	ee07 3a90 	vmov	s15, r3
 801ba62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ba66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ba6a:	4b62      	ldr	r3, [pc, #392]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ba6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ba72:	ee07 3a90 	vmov	s15, r3
 801ba76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ba7a:	ed97 6a02 	vldr	s12, [r7, #8]
 801ba7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 801bc04 <HAL_RCC_GetSysClockFreq+0x2e4>
 801ba82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ba86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ba8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ba8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ba92:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ba96:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801ba9a:	e087      	b.n	801bbac <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ba9c:	693b      	ldr	r3, [r7, #16]
 801ba9e:	ee07 3a90 	vmov	s15, r3
 801baa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801baa6:	eddf 6a58 	vldr	s13, [pc, #352]	; 801bc08 <HAL_RCC_GetSysClockFreq+0x2e8>
 801baaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801baae:	4b51      	ldr	r3, [pc, #324]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bab6:	ee07 3a90 	vmov	s15, r3
 801baba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801babe:	ed97 6a02 	vldr	s12, [r7, #8]
 801bac2:	eddf 5a50 	vldr	s11, [pc, #320]	; 801bc04 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801baca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bada:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bade:	e065      	b.n	801bbac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bae0:	693b      	ldr	r3, [r7, #16]
 801bae2:	ee07 3a90 	vmov	s15, r3
 801bae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801baea:	eddf 6a48 	vldr	s13, [pc, #288]	; 801bc0c <HAL_RCC_GetSysClockFreq+0x2ec>
 801baee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801baf2:	4b40      	ldr	r3, [pc, #256]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801baf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801baf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bafa:	ee07 3a90 	vmov	s15, r3
 801bafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb02:	ed97 6a02 	vldr	s12, [r7, #8]
 801bb06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801bc04 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bb0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bb0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bb12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bb1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bb22:	e043      	b.n	801bbac <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bb24:	693b      	ldr	r3, [r7, #16]
 801bb26:	ee07 3a90 	vmov	s15, r3
 801bb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 801bc10 <HAL_RCC_GetSysClockFreq+0x2f0>
 801bb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb36:	4b2f      	ldr	r3, [pc, #188]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb3e:	ee07 3a90 	vmov	s15, r3
 801bb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb46:	ed97 6a02 	vldr	s12, [r7, #8]
 801bb4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801bc04 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bb56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bb62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bb66:	e021      	b.n	801bbac <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bb68:	693b      	ldr	r3, [r7, #16]
 801bb6a:	ee07 3a90 	vmov	s15, r3
 801bb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb72:	eddf 6a26 	vldr	s13, [pc, #152]	; 801bc0c <HAL_RCC_GetSysClockFreq+0x2ec>
 801bb76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb7a:	4b1e      	ldr	r3, [pc, #120]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb82:	ee07 3a90 	vmov	s15, r3
 801bb86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb8a:	ed97 6a02 	vldr	s12, [r7, #8]
 801bb8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801bc04 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bb92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bb96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bb9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bba6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bbaa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801bbac:	4b11      	ldr	r3, [pc, #68]	; (801bbf4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbb0:	0a5b      	lsrs	r3, r3, #9
 801bbb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bbb6:	3301      	adds	r3, #1
 801bbb8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801bbba:	683b      	ldr	r3, [r7, #0]
 801bbbc:	ee07 3a90 	vmov	s15, r3
 801bbc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bbc4:	edd7 6a07 	vldr	s13, [r7, #28]
 801bbc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bbcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bbd0:	ee17 3a90 	vmov	r3, s15
 801bbd4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801bbd6:	e005      	b.n	801bbe4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801bbd8:	2300      	movs	r3, #0
 801bbda:	61bb      	str	r3, [r7, #24]
      break;
 801bbdc:	e002      	b.n	801bbe4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801bbde:	4b07      	ldr	r3, [pc, #28]	; (801bbfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bbe0:	61bb      	str	r3, [r7, #24]
      break;
 801bbe2:	bf00      	nop
  }

  return sysclockfreq;
 801bbe4:	69bb      	ldr	r3, [r7, #24]
}
 801bbe6:	4618      	mov	r0, r3
 801bbe8:	3724      	adds	r7, #36	; 0x24
 801bbea:	46bd      	mov	sp, r7
 801bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf0:	4770      	bx	lr
 801bbf2:	bf00      	nop
 801bbf4:	58024400 	.word	0x58024400
 801bbf8:	03d09000 	.word	0x03d09000
 801bbfc:	003d0900 	.word	0x003d0900
 801bc00:	007a1200 	.word	0x007a1200
 801bc04:	46000000 	.word	0x46000000
 801bc08:	4c742400 	.word	0x4c742400
 801bc0c:	4a742400 	.word	0x4a742400
 801bc10:	4af42400 	.word	0x4af42400

0801bc14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bc14:	b580      	push	{r7, lr}
 801bc16:	b082      	sub	sp, #8
 801bc18:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801bc1a:	f7ff fe81 	bl	801b920 <HAL_RCC_GetSysClockFreq>
 801bc1e:	4602      	mov	r2, r0
 801bc20:	4b10      	ldr	r3, [pc, #64]	; (801bc64 <HAL_RCC_GetHCLKFreq+0x50>)
 801bc22:	699b      	ldr	r3, [r3, #24]
 801bc24:	0a1b      	lsrs	r3, r3, #8
 801bc26:	f003 030f 	and.w	r3, r3, #15
 801bc2a:	490f      	ldr	r1, [pc, #60]	; (801bc68 <HAL_RCC_GetHCLKFreq+0x54>)
 801bc2c:	5ccb      	ldrb	r3, [r1, r3]
 801bc2e:	f003 031f 	and.w	r3, r3, #31
 801bc32:	fa22 f303 	lsr.w	r3, r2, r3
 801bc36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bc38:	4b0a      	ldr	r3, [pc, #40]	; (801bc64 <HAL_RCC_GetHCLKFreq+0x50>)
 801bc3a:	699b      	ldr	r3, [r3, #24]
 801bc3c:	f003 030f 	and.w	r3, r3, #15
 801bc40:	4a09      	ldr	r2, [pc, #36]	; (801bc68 <HAL_RCC_GetHCLKFreq+0x54>)
 801bc42:	5cd3      	ldrb	r3, [r2, r3]
 801bc44:	f003 031f 	and.w	r3, r3, #31
 801bc48:	687a      	ldr	r2, [r7, #4]
 801bc4a:	fa22 f303 	lsr.w	r3, r2, r3
 801bc4e:	4a07      	ldr	r2, [pc, #28]	; (801bc6c <HAL_RCC_GetHCLKFreq+0x58>)
 801bc50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bc52:	4a07      	ldr	r2, [pc, #28]	; (801bc70 <HAL_RCC_GetHCLKFreq+0x5c>)
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801bc58:	4b04      	ldr	r3, [pc, #16]	; (801bc6c <HAL_RCC_GetHCLKFreq+0x58>)
 801bc5a:	681b      	ldr	r3, [r3, #0]
}
 801bc5c:	4618      	mov	r0, r3
 801bc5e:	3708      	adds	r7, #8
 801bc60:	46bd      	mov	sp, r7
 801bc62:	bd80      	pop	{r7, pc}
 801bc64:	58024400 	.word	0x58024400
 801bc68:	08020dc4 	.word	0x08020dc4
 801bc6c:	24000008 	.word	0x24000008
 801bc70:	24000004 	.word	0x24000004

0801bc74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bc74:	b580      	push	{r7, lr}
 801bc76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801bc78:	f7ff ffcc 	bl	801bc14 <HAL_RCC_GetHCLKFreq>
 801bc7c:	4602      	mov	r2, r0
 801bc7e:	4b06      	ldr	r3, [pc, #24]	; (801bc98 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bc80:	69db      	ldr	r3, [r3, #28]
 801bc82:	091b      	lsrs	r3, r3, #4
 801bc84:	f003 0307 	and.w	r3, r3, #7
 801bc88:	4904      	ldr	r1, [pc, #16]	; (801bc9c <HAL_RCC_GetPCLK1Freq+0x28>)
 801bc8a:	5ccb      	ldrb	r3, [r1, r3]
 801bc8c:	f003 031f 	and.w	r3, r3, #31
 801bc90:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801bc94:	4618      	mov	r0, r3
 801bc96:	bd80      	pop	{r7, pc}
 801bc98:	58024400 	.word	0x58024400
 801bc9c:	08020dc4 	.word	0x08020dc4

0801bca0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bca4:	b0c6      	sub	sp, #280	; 0x118
 801bca6:	af00      	add	r7, sp, #0
 801bca8:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801bcac:	2300      	movs	r3, #0
 801bcae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801bcb2:	2300      	movs	r3, #0
 801bcb4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801bcb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bcbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcc0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801bcc4:	2500      	movs	r5, #0
 801bcc6:	ea54 0305 	orrs.w	r3, r4, r5
 801bcca:	d049      	beq.n	801bd60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801bccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bcd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bcd2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801bcd6:	d02f      	beq.n	801bd38 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801bcd8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801bcdc:	d828      	bhi.n	801bd30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801bcde:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bce2:	d01a      	beq.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801bce4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bce8:	d822      	bhi.n	801bd30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801bcea:	2b00      	cmp	r3, #0
 801bcec:	d003      	beq.n	801bcf6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801bcee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bcf2:	d007      	beq.n	801bd04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801bcf4:	e01c      	b.n	801bd30 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bcf6:	4bab      	ldr	r3, [pc, #684]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bcf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bcfa:	4aaa      	ldr	r2, [pc, #680]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bcfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bd00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bd02:	e01a      	b.n	801bd3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801bd04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bd08:	3308      	adds	r3, #8
 801bd0a:	2102      	movs	r1, #2
 801bd0c:	4618      	mov	r0, r3
 801bd0e:	f002 fa49 	bl	801e1a4 <RCCEx_PLL2_Config>
 801bd12:	4603      	mov	r3, r0
 801bd14:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bd18:	e00f      	b.n	801bd3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801bd1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bd1e:	3328      	adds	r3, #40	; 0x28
 801bd20:	2102      	movs	r1, #2
 801bd22:	4618      	mov	r0, r3
 801bd24:	f002 faf0 	bl	801e308 <RCCEx_PLL3_Config>
 801bd28:	4603      	mov	r3, r0
 801bd2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bd2e:	e004      	b.n	801bd3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bd30:	2301      	movs	r3, #1
 801bd32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bd36:	e000      	b.n	801bd3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801bd38:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bd3a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bd3e:	2b00      	cmp	r3, #0
 801bd40:	d10a      	bne.n	801bd58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801bd42:	4b98      	ldr	r3, [pc, #608]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bd44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bd46:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801bd4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bd4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bd50:	4a94      	ldr	r2, [pc, #592]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bd52:	430b      	orrs	r3, r1
 801bd54:	6513      	str	r3, [r2, #80]	; 0x50
 801bd56:	e003      	b.n	801bd60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bd58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bd5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801bd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd68:	f402 7880 	and.w	r8, r2, #256	; 0x100
 801bd6c:	f04f 0900 	mov.w	r9, #0
 801bd70:	ea58 0309 	orrs.w	r3, r8, r9
 801bd74:	d047      	beq.n	801be06 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801bd76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bd7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bd7c:	2b04      	cmp	r3, #4
 801bd7e:	d82a      	bhi.n	801bdd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801bd80:	a201      	add	r2, pc, #4	; (adr r2, 801bd88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801bd82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bd86:	bf00      	nop
 801bd88:	0801bd9d 	.word	0x0801bd9d
 801bd8c:	0801bdab 	.word	0x0801bdab
 801bd90:	0801bdc1 	.word	0x0801bdc1
 801bd94:	0801bddf 	.word	0x0801bddf
 801bd98:	0801bddf 	.word	0x0801bddf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bd9c:	4b81      	ldr	r3, [pc, #516]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bda0:	4a80      	ldr	r2, [pc, #512]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bda2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bda6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bda8:	e01a      	b.n	801bde0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bdaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bdae:	3308      	adds	r3, #8
 801bdb0:	2100      	movs	r1, #0
 801bdb2:	4618      	mov	r0, r3
 801bdb4:	f002 f9f6 	bl	801e1a4 <RCCEx_PLL2_Config>
 801bdb8:	4603      	mov	r3, r0
 801bdba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bdbe:	e00f      	b.n	801bde0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bdc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bdc4:	3328      	adds	r3, #40	; 0x28
 801bdc6:	2100      	movs	r1, #0
 801bdc8:	4618      	mov	r0, r3
 801bdca:	f002 fa9d 	bl	801e308 <RCCEx_PLL3_Config>
 801bdce:	4603      	mov	r3, r0
 801bdd0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bdd4:	e004      	b.n	801bde0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bdd6:	2301      	movs	r3, #1
 801bdd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bddc:	e000      	b.n	801bde0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801bdde:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bde0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bde4:	2b00      	cmp	r3, #0
 801bde6:	d10a      	bne.n	801bdfe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bde8:	4b6e      	ldr	r3, [pc, #440]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bdea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bdec:	f023 0107 	bic.w	r1, r3, #7
 801bdf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bdf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bdf6:	4a6b      	ldr	r2, [pc, #428]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bdf8:	430b      	orrs	r3, r1
 801bdfa:	6513      	str	r3, [r2, #80]	; 0x50
 801bdfc:	e003      	b.n	801be06 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bdfe:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801be02:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801be06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be0e:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 801be12:	f04f 0b00 	mov.w	fp, #0
 801be16:	ea5a 030b 	orrs.w	r3, sl, fp
 801be1a:	d05b      	beq.n	801bed4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801be1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be20:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801be24:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801be28:	d03b      	beq.n	801bea2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 801be2a:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801be2e:	d834      	bhi.n	801be9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801be30:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801be34:	d037      	beq.n	801bea6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 801be36:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801be3a:	d82e      	bhi.n	801be9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801be3c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801be40:	d033      	beq.n	801beaa <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801be42:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801be46:	d828      	bhi.n	801be9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801be48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801be4c:	d01a      	beq.n	801be84 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801be4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801be52:	d822      	bhi.n	801be9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801be54:	2b00      	cmp	r3, #0
 801be56:	d003      	beq.n	801be60 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 801be58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801be5c:	d007      	beq.n	801be6e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801be5e:	e01c      	b.n	801be9a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801be60:	4b50      	ldr	r3, [pc, #320]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be64:	4a4f      	ldr	r2, [pc, #316]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801be6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801be6c:	e01e      	b.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801be6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be72:	3308      	adds	r3, #8
 801be74:	2100      	movs	r1, #0
 801be76:	4618      	mov	r0, r3
 801be78:	f002 f994 	bl	801e1a4 <RCCEx_PLL2_Config>
 801be7c:	4603      	mov	r3, r0
 801be7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801be82:	e013      	b.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801be84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be88:	3328      	adds	r3, #40	; 0x28
 801be8a:	2100      	movs	r1, #0
 801be8c:	4618      	mov	r0, r3
 801be8e:	f002 fa3b 	bl	801e308 <RCCEx_PLL3_Config>
 801be92:	4603      	mov	r3, r0
 801be94:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801be98:	e008      	b.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801be9a:	2301      	movs	r3, #1
 801be9c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bea0:	e004      	b.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bea2:	bf00      	nop
 801bea4:	e002      	b.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bea6:	bf00      	nop
 801bea8:	e000      	b.n	801beac <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801beaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801beac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d10b      	bne.n	801becc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801beb4:	4b3b      	ldr	r3, [pc, #236]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801beb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801beb8:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801bebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bec0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801bec4:	4a37      	ldr	r2, [pc, #220]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bec6:	430b      	orrs	r3, r1
 801bec8:	6593      	str	r3, [r2, #88]	; 0x58
 801beca:	e003      	b.n	801bed4 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801becc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bed0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801bed4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bedc:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801bee0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801bee4:	2300      	movs	r3, #0
 801bee6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801beea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801beee:	460b      	mov	r3, r1
 801bef0:	4313      	orrs	r3, r2
 801bef2:	d05d      	beq.n	801bfb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801bef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bef8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801befc:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801bf00:	d03b      	beq.n	801bf7a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801bf02:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801bf06:	d834      	bhi.n	801bf72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801bf08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801bf0c:	d037      	beq.n	801bf7e <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801bf0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801bf12:	d82e      	bhi.n	801bf72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801bf14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801bf18:	d033      	beq.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801bf1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801bf1e:	d828      	bhi.n	801bf72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801bf20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801bf24:	d01a      	beq.n	801bf5c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801bf26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801bf2a:	d822      	bhi.n	801bf72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801bf2c:	2b00      	cmp	r3, #0
 801bf2e:	d003      	beq.n	801bf38 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801bf30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801bf34:	d007      	beq.n	801bf46 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801bf36:	e01c      	b.n	801bf72 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bf38:	4b1a      	ldr	r3, [pc, #104]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf3c:	4a19      	ldr	r2, [pc, #100]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bf42:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf44:	e01e      	b.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bf46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf4a:	3308      	adds	r3, #8
 801bf4c:	2100      	movs	r1, #0
 801bf4e:	4618      	mov	r0, r3
 801bf50:	f002 f928 	bl	801e1a4 <RCCEx_PLL2_Config>
 801bf54:	4603      	mov	r3, r0
 801bf56:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801bf5a:	e013      	b.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bf5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf60:	3328      	adds	r3, #40	; 0x28
 801bf62:	2100      	movs	r1, #0
 801bf64:	4618      	mov	r0, r3
 801bf66:	f002 f9cf 	bl	801e308 <RCCEx_PLL3_Config>
 801bf6a:	4603      	mov	r3, r0
 801bf6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf70:	e008      	b.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801bf72:	2301      	movs	r3, #1
 801bf74:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bf78:	e004      	b.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801bf7a:	bf00      	nop
 801bf7c:	e002      	b.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801bf7e:	bf00      	nop
 801bf80:	e000      	b.n	801bf84 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801bf82:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf84:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bf88:	2b00      	cmp	r3, #0
 801bf8a:	d10d      	bne.n	801bfa8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801bf8c:	4b05      	ldr	r3, [pc, #20]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf90:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 801bf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801bf9c:	4a01      	ldr	r2, [pc, #4]	; (801bfa4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf9e:	430b      	orrs	r3, r1
 801bfa0:	6593      	str	r3, [r2, #88]	; 0x58
 801bfa2:	e005      	b.n	801bfb0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801bfa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bfa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bfac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801bfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 801bfbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801bfc6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801bfca:	460b      	mov	r3, r1
 801bfcc:	4313      	orrs	r3, r2
 801bfce:	d03a      	beq.n	801c046 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 801bfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bfd6:	2b30      	cmp	r3, #48	; 0x30
 801bfd8:	d01f      	beq.n	801c01a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801bfda:	2b30      	cmp	r3, #48	; 0x30
 801bfdc:	d819      	bhi.n	801c012 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801bfde:	2b20      	cmp	r3, #32
 801bfe0:	d00c      	beq.n	801bffc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801bfe2:	2b20      	cmp	r3, #32
 801bfe4:	d815      	bhi.n	801c012 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801bfe6:	2b00      	cmp	r3, #0
 801bfe8:	d019      	beq.n	801c01e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801bfea:	2b10      	cmp	r3, #16
 801bfec:	d111      	bne.n	801c012 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bfee:	4baa      	ldr	r3, [pc, #680]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801bff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bff2:	4aa9      	ldr	r2, [pc, #676]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801bff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bff8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801bffa:	e011      	b.n	801c020 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801bffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c000:	3308      	adds	r3, #8
 801c002:	2102      	movs	r1, #2
 801c004:	4618      	mov	r0, r3
 801c006:	f002 f8cd 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c00a:	4603      	mov	r3, r0
 801c00c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c010:	e006      	b.n	801c020 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c012:	2301      	movs	r3, #1
 801c014:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c018:	e002      	b.n	801c020 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c01a:	bf00      	nop
 801c01c:	e000      	b.n	801c020 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c01e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c020:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c024:	2b00      	cmp	r3, #0
 801c026:	d10a      	bne.n	801c03e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801c028:	4b9b      	ldr	r3, [pc, #620]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c02a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c02c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801c030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c036:	4a98      	ldr	r2, [pc, #608]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c038:	430b      	orrs	r3, r1
 801c03a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c03c:	e003      	b.n	801c046 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c03e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c042:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c04e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801c052:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c056:	2300      	movs	r3, #0
 801c058:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801c05c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 801c060:	460b      	mov	r3, r1
 801c062:	4313      	orrs	r3, r2
 801c064:	d051      	beq.n	801c10a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801c066:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c06a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c06c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c070:	d035      	beq.n	801c0de <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801c072:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c076:	d82e      	bhi.n	801c0d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c078:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c07c:	d031      	beq.n	801c0e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
 801c07e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c082:	d828      	bhi.n	801c0d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c088:	d01a      	beq.n	801c0c0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801c08a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c08e:	d822      	bhi.n	801c0d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c090:	2b00      	cmp	r3, #0
 801c092:	d003      	beq.n	801c09c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801c094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c098:	d007      	beq.n	801c0aa <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801c09a:	e01c      	b.n	801c0d6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c09c:	4b7e      	ldr	r3, [pc, #504]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0a0:	4a7d      	ldr	r2, [pc, #500]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c0a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c0a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c0a8:	e01c      	b.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c0aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0ae:	3308      	adds	r3, #8
 801c0b0:	2100      	movs	r1, #0
 801c0b2:	4618      	mov	r0, r3
 801c0b4:	f002 f876 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c0b8:	4603      	mov	r3, r0
 801c0ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c0be:	e011      	b.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c0c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0c4:	3328      	adds	r3, #40	; 0x28
 801c0c6:	2100      	movs	r1, #0
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f002 f91d 	bl	801e308 <RCCEx_PLL3_Config>
 801c0ce:	4603      	mov	r3, r0
 801c0d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c0d4:	e006      	b.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c0d6:	2301      	movs	r3, #1
 801c0d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c0dc:	e002      	b.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c0de:	bf00      	nop
 801c0e0:	e000      	b.n	801c0e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c0e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c0e4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d10a      	bne.n	801c102 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c0ec:	4b6a      	ldr	r3, [pc, #424]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c0f0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801c0f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c0fa:	4a67      	ldr	r2, [pc, #412]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c0fc:	430b      	orrs	r3, r1
 801c0fe:	6513      	str	r3, [r2, #80]	; 0x50
 801c100:	e003      	b.n	801c10a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c102:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c106:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c10a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c112:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801c116:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c11a:	2300      	movs	r3, #0
 801c11c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c120:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801c124:	460b      	mov	r3, r1
 801c126:	4313      	orrs	r3, r2
 801c128:	d053      	beq.n	801c1d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801c12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c134:	d033      	beq.n	801c19e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801c136:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c13a:	d82c      	bhi.n	801c196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c13c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c140:	d02f      	beq.n	801c1a2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 801c142:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c146:	d826      	bhi.n	801c196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c148:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c14c:	d02b      	beq.n	801c1a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801c14e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c152:	d820      	bhi.n	801c196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c154:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c158:	d012      	beq.n	801c180 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801c15a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c15e:	d81a      	bhi.n	801c196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c160:	2b00      	cmp	r3, #0
 801c162:	d022      	beq.n	801c1aa <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801c164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c168:	d115      	bne.n	801c196 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c16a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c16e:	3308      	adds	r3, #8
 801c170:	2101      	movs	r1, #1
 801c172:	4618      	mov	r0, r3
 801c174:	f002 f816 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c178:	4603      	mov	r3, r0
 801c17a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c17e:	e015      	b.n	801c1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c184:	3328      	adds	r3, #40	; 0x28
 801c186:	2101      	movs	r1, #1
 801c188:	4618      	mov	r0, r3
 801c18a:	f002 f8bd 	bl	801e308 <RCCEx_PLL3_Config>
 801c18e:	4603      	mov	r3, r0
 801c190:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c194:	e00a      	b.n	801c1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c196:	2301      	movs	r3, #1
 801c198:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c19c:	e006      	b.n	801c1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c19e:	bf00      	nop
 801c1a0:	e004      	b.n	801c1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c1a2:	bf00      	nop
 801c1a4:	e002      	b.n	801c1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c1a6:	bf00      	nop
 801c1a8:	e000      	b.n	801c1ac <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c1aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c1ac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d10a      	bne.n	801c1ca <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c1b4:	4b38      	ldr	r3, [pc, #224]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c1b8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801c1bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c1c2:	4a35      	ldr	r2, [pc, #212]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1c4:	430b      	orrs	r3, r1
 801c1c6:	6513      	str	r3, [r2, #80]	; 0x50
 801c1c8:	e003      	b.n	801c1d2 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c1ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c1ce:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c1d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1da:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801c1de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c1e2:	2300      	movs	r3, #0
 801c1e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c1e8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c1ec:	460b      	mov	r3, r1
 801c1ee:	4313      	orrs	r3, r2
 801c1f0:	d058      	beq.n	801c2a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801c1f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1f6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c1fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c1fe:	d033      	beq.n	801c268 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 801c200:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c204:	d82c      	bhi.n	801c260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c20a:	d02f      	beq.n	801c26c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801c20c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c210:	d826      	bhi.n	801c260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c216:	d02b      	beq.n	801c270 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801c218:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c21c:	d820      	bhi.n	801c260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c21e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c222:	d012      	beq.n	801c24a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801c224:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c228:	d81a      	bhi.n	801c260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d022      	beq.n	801c274 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801c22e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c232:	d115      	bne.n	801c260 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c234:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c238:	3308      	adds	r3, #8
 801c23a:	2101      	movs	r1, #1
 801c23c:	4618      	mov	r0, r3
 801c23e:	f001 ffb1 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c242:	4603      	mov	r3, r0
 801c244:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c248:	e015      	b.n	801c276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c24a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c24e:	3328      	adds	r3, #40	; 0x28
 801c250:	2101      	movs	r1, #1
 801c252:	4618      	mov	r0, r3
 801c254:	f002 f858 	bl	801e308 <RCCEx_PLL3_Config>
 801c258:	4603      	mov	r3, r0
 801c25a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c25e:	e00a      	b.n	801c276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801c260:	2301      	movs	r3, #1
 801c262:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c266:	e006      	b.n	801c276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c268:	bf00      	nop
 801c26a:	e004      	b.n	801c276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c26c:	bf00      	nop
 801c26e:	e002      	b.n	801c276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c270:	bf00      	nop
 801c272:	e000      	b.n	801c276 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c274:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c276:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c27a:	2b00      	cmp	r3, #0
 801c27c:	d10e      	bne.n	801c29c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c27e:	4b06      	ldr	r3, [pc, #24]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c282:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c286:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c28a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c28e:	4a02      	ldr	r2, [pc, #8]	; (801c298 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c290:	430b      	orrs	r3, r1
 801c292:	6593      	str	r3, [r2, #88]	; 0x58
 801c294:	e006      	b.n	801c2a4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 801c296:	bf00      	nop
 801c298:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c29c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c2a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c2a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2ac:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801c2b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c2b4:	2300      	movs	r3, #0
 801c2b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c2ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801c2be:	460b      	mov	r3, r1
 801c2c0:	4313      	orrs	r3, r2
 801c2c2:	d037      	beq.n	801c334 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801c2c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c2ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c2ce:	d00e      	beq.n	801c2ee <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801c2d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c2d4:	d816      	bhi.n	801c304 <HAL_RCCEx_PeriphCLKConfig+0x664>
 801c2d6:	2b00      	cmp	r3, #0
 801c2d8:	d018      	beq.n	801c30c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801c2da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c2de:	d111      	bne.n	801c304 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c2e0:	4bc4      	ldr	r3, [pc, #784]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c2e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c2e4:	4ac3      	ldr	r2, [pc, #780]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c2e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c2ea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c2ec:	e00f      	b.n	801c30e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c2ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2f2:	3308      	adds	r3, #8
 801c2f4:	2101      	movs	r1, #1
 801c2f6:	4618      	mov	r0, r3
 801c2f8:	f001 ff54 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c2fc:	4603      	mov	r3, r0
 801c2fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c302:	e004      	b.n	801c30e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c304:	2301      	movs	r3, #1
 801c306:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c30a:	e000      	b.n	801c30e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801c30c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c30e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c312:	2b00      	cmp	r3, #0
 801c314:	d10a      	bne.n	801c32c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801c316:	4bb7      	ldr	r3, [pc, #732]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c31a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801c31e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c324:	4ab3      	ldr	r2, [pc, #716]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c326:	430b      	orrs	r3, r1
 801c328:	6513      	str	r3, [r2, #80]	; 0x50
 801c32a:	e003      	b.n	801c334 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c32c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c330:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801c334:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c33c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 801c340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c344:	2300      	movs	r3, #0
 801c346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c34a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801c34e:	460b      	mov	r3, r1
 801c350:	4313      	orrs	r3, r2
 801c352:	d039      	beq.n	801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801c354:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c35a:	2b03      	cmp	r3, #3
 801c35c:	d81c      	bhi.n	801c398 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801c35e:	a201      	add	r2, pc, #4	; (adr r2, 801c364 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801c360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c364:	0801c3a1 	.word	0x0801c3a1
 801c368:	0801c375 	.word	0x0801c375
 801c36c:	0801c383 	.word	0x0801c383
 801c370:	0801c3a1 	.word	0x0801c3a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c374:	4b9f      	ldr	r3, [pc, #636]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c378:	4a9e      	ldr	r2, [pc, #632]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c37a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c37e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c380:	e00f      	b.n	801c3a2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c382:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c386:	3308      	adds	r3, #8
 801c388:	2102      	movs	r1, #2
 801c38a:	4618      	mov	r0, r3
 801c38c:	f001 ff0a 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c390:	4603      	mov	r3, r0
 801c392:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c396:	e004      	b.n	801c3a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c398:	2301      	movs	r3, #1
 801c39a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c39e:	e000      	b.n	801c3a2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801c3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c3a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c3a6:	2b00      	cmp	r3, #0
 801c3a8:	d10a      	bne.n	801c3c0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c3aa:	4b92      	ldr	r3, [pc, #584]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c3ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c3ae:	f023 0103 	bic.w	r1, r3, #3
 801c3b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3b8:	4a8e      	ldr	r2, [pc, #568]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c3ba:	430b      	orrs	r3, r1
 801c3bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c3be:	e003      	b.n	801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c3c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c3c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c3c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3d0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801c3d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c3d8:	2300      	movs	r3, #0
 801c3da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c3de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c3e2:	460b      	mov	r3, r1
 801c3e4:	4313      	orrs	r3, r2
 801c3e6:	f000 8099 	beq.w	801c51c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c3ea:	4b83      	ldr	r3, [pc, #524]	; (801c5f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c3ec:	681b      	ldr	r3, [r3, #0]
 801c3ee:	4a82      	ldr	r2, [pc, #520]	; (801c5f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c3f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c3f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c3f6:	f7f8 fed5 	bl	80151a4 <HAL_GetTick>
 801c3fa:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c3fe:	e00b      	b.n	801c418 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c400:	f7f8 fed0 	bl	80151a4 <HAL_GetTick>
 801c404:	4602      	mov	r2, r0
 801c406:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c40a:	1ad3      	subs	r3, r2, r3
 801c40c:	2b64      	cmp	r3, #100	; 0x64
 801c40e:	d903      	bls.n	801c418 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 801c410:	2303      	movs	r3, #3
 801c412:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c416:	e005      	b.n	801c424 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c418:	4b77      	ldr	r3, [pc, #476]	; (801c5f8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c41a:	681b      	ldr	r3, [r3, #0]
 801c41c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c420:	2b00      	cmp	r3, #0
 801c422:	d0ed      	beq.n	801c400 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801c424:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d173      	bne.n	801c514 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c42c:	4b71      	ldr	r3, [pc, #452]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c42e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c438:	4053      	eors	r3, r2
 801c43a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c43e:	2b00      	cmp	r3, #0
 801c440:	d015      	beq.n	801c46e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c442:	4b6c      	ldr	r3, [pc, #432]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c44a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c44e:	4b69      	ldr	r3, [pc, #420]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c452:	4a68      	ldr	r2, [pc, #416]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c458:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c45a:	4b66      	ldr	r3, [pc, #408]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c45e:	4a65      	ldr	r2, [pc, #404]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c464:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c466:	4a63      	ldr	r2, [pc, #396]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c468:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c46c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801c46e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c472:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c47a:	d118      	bne.n	801c4ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c47c:	f7f8 fe92 	bl	80151a4 <HAL_GetTick>
 801c480:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c484:	e00d      	b.n	801c4a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c486:	f7f8 fe8d 	bl	80151a4 <HAL_GetTick>
 801c48a:	4602      	mov	r2, r0
 801c48c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c490:	1ad2      	subs	r2, r2, r3
 801c492:	f241 3388 	movw	r3, #5000	; 0x1388
 801c496:	429a      	cmp	r2, r3
 801c498:	d903      	bls.n	801c4a2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801c49a:	2303      	movs	r3, #3
 801c49c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 801c4a0:	e005      	b.n	801c4ae <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c4a2:	4b54      	ldr	r3, [pc, #336]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c4a6:	f003 0302 	and.w	r3, r3, #2
 801c4aa:	2b00      	cmp	r3, #0
 801c4ac:	d0eb      	beq.n	801c486 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801c4ae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d129      	bne.n	801c50a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c4b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4ba:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c4be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c4c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c4c6:	d10e      	bne.n	801c4e6 <HAL_RCCEx_PeriphCLKConfig+0x846>
 801c4c8:	4b4a      	ldr	r3, [pc, #296]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4ca:	691b      	ldr	r3, [r3, #16]
 801c4cc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801c4d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c4d8:	091a      	lsrs	r2, r3, #4
 801c4da:	4b48      	ldr	r3, [pc, #288]	; (801c5fc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801c4dc:	4013      	ands	r3, r2
 801c4de:	4a45      	ldr	r2, [pc, #276]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4e0:	430b      	orrs	r3, r1
 801c4e2:	6113      	str	r3, [r2, #16]
 801c4e4:	e005      	b.n	801c4f2 <HAL_RCCEx_PeriphCLKConfig+0x852>
 801c4e6:	4b43      	ldr	r3, [pc, #268]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4e8:	691b      	ldr	r3, [r3, #16]
 801c4ea:	4a42      	ldr	r2, [pc, #264]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c4f0:	6113      	str	r3, [r2, #16]
 801c4f2:	4b40      	ldr	r3, [pc, #256]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4f4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c4f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c4fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c502:	4a3c      	ldr	r2, [pc, #240]	; (801c5f4 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c504:	430b      	orrs	r3, r1
 801c506:	6713      	str	r3, [r2, #112]	; 0x70
 801c508:	e008      	b.n	801c51c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c50a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c50e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801c512:	e003      	b.n	801c51c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801c51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c524:	f002 0301 	and.w	r3, r2, #1
 801c528:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c52c:	2300      	movs	r3, #0
 801c52e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c532:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801c536:	460b      	mov	r3, r1
 801c538:	4313      	orrs	r3, r2
 801c53a:	f000 808f 	beq.w	801c65c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801c53e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c544:	2b28      	cmp	r3, #40	; 0x28
 801c546:	d871      	bhi.n	801c62c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801c548:	a201      	add	r2, pc, #4	; (adr r2, 801c550 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801c54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c54e:	bf00      	nop
 801c550:	0801c635 	.word	0x0801c635
 801c554:	0801c62d 	.word	0x0801c62d
 801c558:	0801c62d 	.word	0x0801c62d
 801c55c:	0801c62d 	.word	0x0801c62d
 801c560:	0801c62d 	.word	0x0801c62d
 801c564:	0801c62d 	.word	0x0801c62d
 801c568:	0801c62d 	.word	0x0801c62d
 801c56c:	0801c62d 	.word	0x0801c62d
 801c570:	0801c601 	.word	0x0801c601
 801c574:	0801c62d 	.word	0x0801c62d
 801c578:	0801c62d 	.word	0x0801c62d
 801c57c:	0801c62d 	.word	0x0801c62d
 801c580:	0801c62d 	.word	0x0801c62d
 801c584:	0801c62d 	.word	0x0801c62d
 801c588:	0801c62d 	.word	0x0801c62d
 801c58c:	0801c62d 	.word	0x0801c62d
 801c590:	0801c617 	.word	0x0801c617
 801c594:	0801c62d 	.word	0x0801c62d
 801c598:	0801c62d 	.word	0x0801c62d
 801c59c:	0801c62d 	.word	0x0801c62d
 801c5a0:	0801c62d 	.word	0x0801c62d
 801c5a4:	0801c62d 	.word	0x0801c62d
 801c5a8:	0801c62d 	.word	0x0801c62d
 801c5ac:	0801c62d 	.word	0x0801c62d
 801c5b0:	0801c635 	.word	0x0801c635
 801c5b4:	0801c62d 	.word	0x0801c62d
 801c5b8:	0801c62d 	.word	0x0801c62d
 801c5bc:	0801c62d 	.word	0x0801c62d
 801c5c0:	0801c62d 	.word	0x0801c62d
 801c5c4:	0801c62d 	.word	0x0801c62d
 801c5c8:	0801c62d 	.word	0x0801c62d
 801c5cc:	0801c62d 	.word	0x0801c62d
 801c5d0:	0801c635 	.word	0x0801c635
 801c5d4:	0801c62d 	.word	0x0801c62d
 801c5d8:	0801c62d 	.word	0x0801c62d
 801c5dc:	0801c62d 	.word	0x0801c62d
 801c5e0:	0801c62d 	.word	0x0801c62d
 801c5e4:	0801c62d 	.word	0x0801c62d
 801c5e8:	0801c62d 	.word	0x0801c62d
 801c5ec:	0801c62d 	.word	0x0801c62d
 801c5f0:	0801c635 	.word	0x0801c635
 801c5f4:	58024400 	.word	0x58024400
 801c5f8:	58024800 	.word	0x58024800
 801c5fc:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c600:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c604:	3308      	adds	r3, #8
 801c606:	2101      	movs	r1, #1
 801c608:	4618      	mov	r0, r3
 801c60a:	f001 fdcb 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c60e:	4603      	mov	r3, r0
 801c610:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c614:	e00f      	b.n	801c636 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c61a:	3328      	adds	r3, #40	; 0x28
 801c61c:	2101      	movs	r1, #1
 801c61e:	4618      	mov	r0, r3
 801c620:	f001 fe72 	bl	801e308 <RCCEx_PLL3_Config>
 801c624:	4603      	mov	r3, r0
 801c626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c62a:	e004      	b.n	801c636 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c62c:	2301      	movs	r3, #1
 801c62e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c632:	e000      	b.n	801c636 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801c634:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c636:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c63a:	2b00      	cmp	r3, #0
 801c63c:	d10a      	bne.n	801c654 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801c63e:	4bbf      	ldr	r3, [pc, #764]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c642:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801c646:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c64a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c64c:	4abb      	ldr	r2, [pc, #748]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c64e:	430b      	orrs	r3, r1
 801c650:	6553      	str	r3, [r2, #84]	; 0x54
 801c652:	e003      	b.n	801c65c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c654:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c658:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801c65c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c660:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c664:	f002 0302 	and.w	r3, r2, #2
 801c668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c66c:	2300      	movs	r3, #0
 801c66e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c672:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801c676:	460b      	mov	r3, r1
 801c678:	4313      	orrs	r3, r2
 801c67a:	d041      	beq.n	801c700 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801c67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c680:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c682:	2b05      	cmp	r3, #5
 801c684:	d824      	bhi.n	801c6d0 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801c686:	a201      	add	r2, pc, #4	; (adr r2, 801c68c <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801c688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c68c:	0801c6d9 	.word	0x0801c6d9
 801c690:	0801c6a5 	.word	0x0801c6a5
 801c694:	0801c6bb 	.word	0x0801c6bb
 801c698:	0801c6d9 	.word	0x0801c6d9
 801c69c:	0801c6d9 	.word	0x0801c6d9
 801c6a0:	0801c6d9 	.word	0x0801c6d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c6a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6a8:	3308      	adds	r3, #8
 801c6aa:	2101      	movs	r1, #1
 801c6ac:	4618      	mov	r0, r3
 801c6ae:	f001 fd79 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c6b2:	4603      	mov	r3, r0
 801c6b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c6b8:	e00f      	b.n	801c6da <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c6ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6be:	3328      	adds	r3, #40	; 0x28
 801c6c0:	2101      	movs	r1, #1
 801c6c2:	4618      	mov	r0, r3
 801c6c4:	f001 fe20 	bl	801e308 <RCCEx_PLL3_Config>
 801c6c8:	4603      	mov	r3, r0
 801c6ca:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c6ce:	e004      	b.n	801c6da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c6d0:	2301      	movs	r3, #1
 801c6d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c6d6:	e000      	b.n	801c6da <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801c6d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c6da:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c6de:	2b00      	cmp	r3, #0
 801c6e0:	d10a      	bne.n	801c6f8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801c6e2:	4b96      	ldr	r3, [pc, #600]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c6e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c6e6:	f023 0107 	bic.w	r1, r3, #7
 801c6ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c6f0:	4a92      	ldr	r2, [pc, #584]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c6f2:	430b      	orrs	r3, r1
 801c6f4:	6553      	str	r3, [r2, #84]	; 0x54
 801c6f6:	e003      	b.n	801c700 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c6f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c6fc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c704:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c708:	f002 0304 	and.w	r3, r2, #4
 801c70c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c710:	2300      	movs	r3, #0
 801c712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c716:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c71a:	460b      	mov	r3, r1
 801c71c:	4313      	orrs	r3, r2
 801c71e:	d044      	beq.n	801c7aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801c720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c728:	2b05      	cmp	r3, #5
 801c72a:	d825      	bhi.n	801c778 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 801c72c:	a201      	add	r2, pc, #4	; (adr r2, 801c734 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801c72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c732:	bf00      	nop
 801c734:	0801c781 	.word	0x0801c781
 801c738:	0801c74d 	.word	0x0801c74d
 801c73c:	0801c763 	.word	0x0801c763
 801c740:	0801c781 	.word	0x0801c781
 801c744:	0801c781 	.word	0x0801c781
 801c748:	0801c781 	.word	0x0801c781
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c74c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c750:	3308      	adds	r3, #8
 801c752:	2101      	movs	r1, #1
 801c754:	4618      	mov	r0, r3
 801c756:	f001 fd25 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c75a:	4603      	mov	r3, r0
 801c75c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c760:	e00f      	b.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c766:	3328      	adds	r3, #40	; 0x28
 801c768:	2101      	movs	r1, #1
 801c76a:	4618      	mov	r0, r3
 801c76c:	f001 fdcc 	bl	801e308 <RCCEx_PLL3_Config>
 801c770:	4603      	mov	r3, r0
 801c772:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c776:	e004      	b.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c778:	2301      	movs	r3, #1
 801c77a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c77e:	e000      	b.n	801c782 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801c780:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c782:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c786:	2b00      	cmp	r3, #0
 801c788:	d10b      	bne.n	801c7a2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c78a:	4b6c      	ldr	r3, [pc, #432]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c78c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c78e:	f023 0107 	bic.w	r1, r3, #7
 801c792:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c79a:	4a68      	ldr	r2, [pc, #416]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c79c:	430b      	orrs	r3, r1
 801c79e:	6593      	str	r3, [r2, #88]	; 0x58
 801c7a0:	e003      	b.n	801c7aa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c7a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c7a6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c7aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7b2:	f002 0320 	and.w	r3, r2, #32
 801c7b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c7ba:	2300      	movs	r3, #0
 801c7bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801c7c0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801c7c4:	460b      	mov	r3, r1
 801c7c6:	4313      	orrs	r3, r2
 801c7c8:	d055      	beq.n	801c876 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801c7ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c7d6:	d033      	beq.n	801c840 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801c7d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c7dc:	d82c      	bhi.n	801c838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c7de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c7e2:	d02f      	beq.n	801c844 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 801c7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c7e8:	d826      	bhi.n	801c838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c7ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c7ee:	d02b      	beq.n	801c848 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 801c7f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c7f4:	d820      	bhi.n	801c838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c7f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c7fa:	d012      	beq.n	801c822 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801c7fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c800:	d81a      	bhi.n	801c838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c802:	2b00      	cmp	r3, #0
 801c804:	d022      	beq.n	801c84c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801c806:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c80a:	d115      	bne.n	801c838 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c80c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c810:	3308      	adds	r3, #8
 801c812:	2100      	movs	r1, #0
 801c814:	4618      	mov	r0, r3
 801c816:	f001 fcc5 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c81a:	4603      	mov	r3, r0
 801c81c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c820:	e015      	b.n	801c84e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c826:	3328      	adds	r3, #40	; 0x28
 801c828:	2102      	movs	r1, #2
 801c82a:	4618      	mov	r0, r3
 801c82c:	f001 fd6c 	bl	801e308 <RCCEx_PLL3_Config>
 801c830:	4603      	mov	r3, r0
 801c832:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c836:	e00a      	b.n	801c84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c838:	2301      	movs	r3, #1
 801c83a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c83e:	e006      	b.n	801c84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c840:	bf00      	nop
 801c842:	e004      	b.n	801c84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c844:	bf00      	nop
 801c846:	e002      	b.n	801c84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c848:	bf00      	nop
 801c84a:	e000      	b.n	801c84e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c84c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c84e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c852:	2b00      	cmp	r3, #0
 801c854:	d10b      	bne.n	801c86e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c856:	4b39      	ldr	r3, [pc, #228]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c85a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c85e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c866:	4a35      	ldr	r2, [pc, #212]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c868:	430b      	orrs	r3, r1
 801c86a:	6553      	str	r3, [r2, #84]	; 0x54
 801c86c:	e003      	b.n	801c876 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c86e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c872:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801c876:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c87e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801c882:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c886:	2300      	movs	r3, #0
 801c888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c88c:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801c890:	460b      	mov	r3, r1
 801c892:	4313      	orrs	r3, r2
 801c894:	d058      	beq.n	801c948 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801c896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c89a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c89e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c8a2:	d033      	beq.n	801c90c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801c8a4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c8a8:	d82c      	bhi.n	801c904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c8aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c8ae:	d02f      	beq.n	801c910 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801c8b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c8b4:	d826      	bhi.n	801c904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c8b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c8ba:	d02b      	beq.n	801c914 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801c8bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c8c0:	d820      	bhi.n	801c904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c8c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c8c6:	d012      	beq.n	801c8ee <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801c8c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c8cc:	d81a      	bhi.n	801c904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d022      	beq.n	801c918 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801c8d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c8d6:	d115      	bne.n	801c904 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c8d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8dc:	3308      	adds	r3, #8
 801c8de:	2100      	movs	r1, #0
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	f001 fc5f 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c8e6:	4603      	mov	r3, r0
 801c8e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801c8ec:	e015      	b.n	801c91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c8ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8f2:	3328      	adds	r3, #40	; 0x28
 801c8f4:	2102      	movs	r1, #2
 801c8f6:	4618      	mov	r0, r3
 801c8f8:	f001 fd06 	bl	801e308 <RCCEx_PLL3_Config>
 801c8fc:	4603      	mov	r3, r0
 801c8fe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801c902:	e00a      	b.n	801c91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c904:	2301      	movs	r3, #1
 801c906:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c90a:	e006      	b.n	801c91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801c90c:	bf00      	nop
 801c90e:	e004      	b.n	801c91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801c910:	bf00      	nop
 801c912:	e002      	b.n	801c91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801c914:	bf00      	nop
 801c916:	e000      	b.n	801c91a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801c918:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c91a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d10e      	bne.n	801c940 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c922:	4b06      	ldr	r3, [pc, #24]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c926:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801c92a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c92e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c932:	4a02      	ldr	r2, [pc, #8]	; (801c93c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c934:	430b      	orrs	r3, r1
 801c936:	6593      	str	r3, [r2, #88]	; 0x58
 801c938:	e006      	b.n	801c948 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801c93a:	bf00      	nop
 801c93c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c940:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c944:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801c948:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c950:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801c954:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801c958:	2300      	movs	r3, #0
 801c95a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801c95e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801c962:	460b      	mov	r3, r1
 801c964:	4313      	orrs	r3, r2
 801c966:	d055      	beq.n	801ca14 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801c968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c96c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801c970:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801c974:	d033      	beq.n	801c9de <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801c976:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801c97a:	d82c      	bhi.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801c97c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c980:	d02f      	beq.n	801c9e2 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801c982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801c986:	d826      	bhi.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801c988:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801c98c:	d02b      	beq.n	801c9e6 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801c98e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801c992:	d820      	bhi.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801c994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c998:	d012      	beq.n	801c9c0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801c99a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c99e:	d81a      	bhi.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d022      	beq.n	801c9ea <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801c9a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c9a8:	d115      	bne.n	801c9d6 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c9aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9ae:	3308      	adds	r3, #8
 801c9b0:	2100      	movs	r1, #0
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	f001 fbf6 	bl	801e1a4 <RCCEx_PLL2_Config>
 801c9b8:	4603      	mov	r3, r0
 801c9ba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801c9be:	e015      	b.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c9c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9c4:	3328      	adds	r3, #40	; 0x28
 801c9c6:	2102      	movs	r1, #2
 801c9c8:	4618      	mov	r0, r3
 801c9ca:	f001 fc9d 	bl	801e308 <RCCEx_PLL3_Config>
 801c9ce:	4603      	mov	r3, r0
 801c9d0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801c9d4:	e00a      	b.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c9d6:	2301      	movs	r3, #1
 801c9d8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c9dc:	e006      	b.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801c9de:	bf00      	nop
 801c9e0:	e004      	b.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801c9e2:	bf00      	nop
 801c9e4:	e002      	b.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801c9e6:	bf00      	nop
 801c9e8:	e000      	b.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801c9ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c9ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d10b      	bne.n	801ca0c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801c9f4:	4ba0      	ldr	r3, [pc, #640]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801c9f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c9f8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801c9fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca00:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ca04:	4a9c      	ldr	r2, [pc, #624]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ca06:	430b      	orrs	r3, r1
 801ca08:	6593      	str	r3, [r2, #88]	; 0x58
 801ca0a:	e003      	b.n	801ca14 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca0c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca10:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801ca14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca18:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca1c:	f002 0308 	and.w	r3, r2, #8
 801ca20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801ca24:	2300      	movs	r3, #0
 801ca26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801ca2a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801ca2e:	460b      	mov	r3, r1
 801ca30:	4313      	orrs	r3, r2
 801ca32:	d01e      	beq.n	801ca72 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801ca34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ca3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ca40:	d10c      	bne.n	801ca5c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801ca42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca46:	3328      	adds	r3, #40	; 0x28
 801ca48:	2102      	movs	r1, #2
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	f001 fc5c 	bl	801e308 <RCCEx_PLL3_Config>
 801ca50:	4603      	mov	r3, r0
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d002      	beq.n	801ca5c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801ca56:	2301      	movs	r3, #1
 801ca58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801ca5c:	4b86      	ldr	r3, [pc, #536]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ca5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ca60:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801ca64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ca6c:	4a82      	ldr	r2, [pc, #520]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ca6e:	430b      	orrs	r3, r1
 801ca70:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801ca72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca7a:	f002 0310 	and.w	r3, r2, #16
 801ca7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801ca82:	2300      	movs	r3, #0
 801ca84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801ca88:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801ca8c:	460b      	mov	r3, r1
 801ca8e:	4313      	orrs	r3, r2
 801ca90:	d01e      	beq.n	801cad0 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801ca92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ca9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ca9e:	d10c      	bne.n	801caba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801caa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801caa4:	3328      	adds	r3, #40	; 0x28
 801caa6:	2102      	movs	r1, #2
 801caa8:	4618      	mov	r0, r3
 801caaa:	f001 fc2d 	bl	801e308 <RCCEx_PLL3_Config>
 801caae:	4603      	mov	r3, r0
 801cab0:	2b00      	cmp	r3, #0
 801cab2:	d002      	beq.n	801caba <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 801cab4:	2301      	movs	r3, #1
 801cab6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801caba:	4b6f      	ldr	r3, [pc, #444]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cabc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cabe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801cac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cac6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801caca:	4a6b      	ldr	r2, [pc, #428]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cacc:	430b      	orrs	r3, r1
 801cace:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801cad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801cadc:	67bb      	str	r3, [r7, #120]	; 0x78
 801cade:	2300      	movs	r3, #0
 801cae0:	67fb      	str	r3, [r7, #124]	; 0x7c
 801cae2:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801cae6:	460b      	mov	r3, r1
 801cae8:	4313      	orrs	r3, r2
 801caea:	d03e      	beq.n	801cb6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801caec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801caf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801caf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801caf8:	d022      	beq.n	801cb40 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801cafa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cafe:	d81b      	bhi.n	801cb38 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	d003      	beq.n	801cb0c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 801cb04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cb08:	d00b      	beq.n	801cb22 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801cb0a:	e015      	b.n	801cb38 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb10:	3308      	adds	r3, #8
 801cb12:	2100      	movs	r1, #0
 801cb14:	4618      	mov	r0, r3
 801cb16:	f001 fb45 	bl	801e1a4 <RCCEx_PLL2_Config>
 801cb1a:	4603      	mov	r3, r0
 801cb1c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cb20:	e00f      	b.n	801cb42 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cb22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb26:	3328      	adds	r3, #40	; 0x28
 801cb28:	2102      	movs	r1, #2
 801cb2a:	4618      	mov	r0, r3
 801cb2c:	f001 fbec 	bl	801e308 <RCCEx_PLL3_Config>
 801cb30:	4603      	mov	r3, r0
 801cb32:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cb36:	e004      	b.n	801cb42 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cb38:	2301      	movs	r3, #1
 801cb3a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cb3e:	e000      	b.n	801cb42 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 801cb40:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cb42:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	d10b      	bne.n	801cb62 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cb4a:	4b4b      	ldr	r3, [pc, #300]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb4e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801cb52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cb5a:	4a47      	ldr	r2, [pc, #284]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb5c:	430b      	orrs	r3, r1
 801cb5e:	6593      	str	r3, [r2, #88]	; 0x58
 801cb60:	e003      	b.n	801cb6a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb62:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb66:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801cb6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb72:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801cb76:	673b      	str	r3, [r7, #112]	; 0x70
 801cb78:	2300      	movs	r3, #0
 801cb7a:	677b      	str	r3, [r7, #116]	; 0x74
 801cb7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801cb80:	460b      	mov	r3, r1
 801cb82:	4313      	orrs	r3, r2
 801cb84:	d03b      	beq.n	801cbfe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801cb86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cb8e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801cb92:	d01f      	beq.n	801cbd4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801cb94:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801cb98:	d818      	bhi.n	801cbcc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801cb9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cb9e:	d003      	beq.n	801cba8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 801cba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801cba4:	d007      	beq.n	801cbb6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801cba6:	e011      	b.n	801cbcc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cba8:	4b33      	ldr	r3, [pc, #204]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cbac:	4a32      	ldr	r2, [pc, #200]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cbae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cbb2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801cbb4:	e00f      	b.n	801cbd6 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cbb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbba:	3328      	adds	r3, #40	; 0x28
 801cbbc:	2101      	movs	r1, #1
 801cbbe:	4618      	mov	r0, r3
 801cbc0:	f001 fba2 	bl	801e308 <RCCEx_PLL3_Config>
 801cbc4:	4603      	mov	r3, r0
 801cbc6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801cbca:	e004      	b.n	801cbd6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cbcc:	2301      	movs	r3, #1
 801cbce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cbd2:	e000      	b.n	801cbd6 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 801cbd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cbd6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d10b      	bne.n	801cbf6 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cbde:	4b26      	ldr	r3, [pc, #152]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cbe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cbe2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801cbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cbee:	4a22      	ldr	r2, [pc, #136]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cbf0:	430b      	orrs	r3, r1
 801cbf2:	6553      	str	r3, [r2, #84]	; 0x54
 801cbf4:	e003      	b.n	801cbfe <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cbf6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cbfa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801cbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc02:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc06:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801cc0a:	66bb      	str	r3, [r7, #104]	; 0x68
 801cc0c:	2300      	movs	r3, #0
 801cc0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cc10:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801cc14:	460b      	mov	r3, r1
 801cc16:	4313      	orrs	r3, r2
 801cc18:	d034      	beq.n	801cc84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801cc1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc20:	2b00      	cmp	r3, #0
 801cc22:	d003      	beq.n	801cc2c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801cc24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc28:	d007      	beq.n	801cc3a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801cc2a:	e011      	b.n	801cc50 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cc2c:	4b12      	ldr	r3, [pc, #72]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc30:	4a11      	ldr	r2, [pc, #68]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cc36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cc38:	e00e      	b.n	801cc58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cc3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc3e:	3308      	adds	r3, #8
 801cc40:	2102      	movs	r1, #2
 801cc42:	4618      	mov	r0, r3
 801cc44:	f001 faae 	bl	801e1a4 <RCCEx_PLL2_Config>
 801cc48:	4603      	mov	r3, r0
 801cc4a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cc4e:	e003      	b.n	801cc58 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 801cc50:	2301      	movs	r3, #1
 801cc52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cc56:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc5c:	2b00      	cmp	r3, #0
 801cc5e:	d10d      	bne.n	801cc7c <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801cc60:	4b05      	ldr	r3, [pc, #20]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cc64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801cc68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cc6e:	4a02      	ldr	r2, [pc, #8]	; (801cc78 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc70:	430b      	orrs	r3, r1
 801cc72:	64d3      	str	r3, [r2, #76]	; 0x4c
 801cc74:	e006      	b.n	801cc84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801cc76:	bf00      	nop
 801cc78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc7c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc80:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801cc84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc8c:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801cc90:	663b      	str	r3, [r7, #96]	; 0x60
 801cc92:	2300      	movs	r3, #0
 801cc94:	667b      	str	r3, [r7, #100]	; 0x64
 801cc96:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801cc9a:	460b      	mov	r3, r1
 801cc9c:	4313      	orrs	r3, r2
 801cc9e:	d00c      	beq.n	801ccba <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cca0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cca4:	3328      	adds	r3, #40	; 0x28
 801cca6:	2102      	movs	r1, #2
 801cca8:	4618      	mov	r0, r3
 801ccaa:	f001 fb2d 	bl	801e308 <RCCEx_PLL3_Config>
 801ccae:	4603      	mov	r3, r0
 801ccb0:	2b00      	cmp	r3, #0
 801ccb2:	d002      	beq.n	801ccba <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 801ccb4:	2301      	movs	r3, #1
 801ccb6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801ccba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccc2:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801ccc6:	65bb      	str	r3, [r7, #88]	; 0x58
 801ccc8:	2300      	movs	r3, #0
 801ccca:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cccc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801ccd0:	460b      	mov	r3, r1
 801ccd2:	4313      	orrs	r3, r2
 801ccd4:	d036      	beq.n	801cd44 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801ccd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ccdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cce0:	d018      	beq.n	801cd14 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801cce2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cce6:	d811      	bhi.n	801cd0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801cce8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ccec:	d014      	beq.n	801cd18 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801ccee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ccf2:	d80b      	bhi.n	801cd0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d011      	beq.n	801cd1c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801ccf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ccfc:	d106      	bne.n	801cd0c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ccfe:	4bb7      	ldr	r3, [pc, #732]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cd00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd02:	4ab6      	ldr	r2, [pc, #728]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cd04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cd08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801cd0a:	e008      	b.n	801cd1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cd0c:	2301      	movs	r3, #1
 801cd0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cd12:	e004      	b.n	801cd1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cd14:	bf00      	nop
 801cd16:	e002      	b.n	801cd1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cd18:	bf00      	nop
 801cd1a:	e000      	b.n	801cd1e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cd1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd22:	2b00      	cmp	r3, #0
 801cd24:	d10a      	bne.n	801cd3c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801cd26:	4bad      	ldr	r3, [pc, #692]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801cd2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cd34:	4aa9      	ldr	r2, [pc, #676]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cd36:	430b      	orrs	r3, r1
 801cd38:	6553      	str	r3, [r2, #84]	; 0x54
 801cd3a:	e003      	b.n	801cd44 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd3c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd40:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801cd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd4c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801cd50:	653b      	str	r3, [r7, #80]	; 0x50
 801cd52:	2300      	movs	r3, #0
 801cd54:	657b      	str	r3, [r7, #84]	; 0x54
 801cd56:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801cd5a:	460b      	mov	r3, r1
 801cd5c:	4313      	orrs	r3, r2
 801cd5e:	d009      	beq.n	801cd74 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801cd60:	4b9e      	ldr	r3, [pc, #632]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cd62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd64:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801cd68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cd6e:	4a9b      	ldr	r2, [pc, #620]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cd70:	430b      	orrs	r3, r1
 801cd72:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801cd74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd7c:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801cd80:	64bb      	str	r3, [r7, #72]	; 0x48
 801cd82:	2300      	movs	r3, #0
 801cd84:	64fb      	str	r3, [r7, #76]	; 0x4c
 801cd86:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801cd8a:	460b      	mov	r3, r1
 801cd8c:	4313      	orrs	r3, r2
 801cd8e:	d009      	beq.n	801cda4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801cd90:	4b92      	ldr	r3, [pc, #584]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cd92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd94:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801cd98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cd9e:	4a8f      	ldr	r2, [pc, #572]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cda0:	430b      	orrs	r3, r1
 801cda2:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801cda4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdac:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801cdb0:	643b      	str	r3, [r7, #64]	; 0x40
 801cdb2:	2300      	movs	r3, #0
 801cdb4:	647b      	str	r3, [r7, #68]	; 0x44
 801cdb6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801cdba:	460b      	mov	r3, r1
 801cdbc:	4313      	orrs	r3, r2
 801cdbe:	d00e      	beq.n	801cdde <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801cdc0:	4b86      	ldr	r3, [pc, #536]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cdc2:	691b      	ldr	r3, [r3, #16]
 801cdc4:	4a85      	ldr	r2, [pc, #532]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cdc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801cdca:	6113      	str	r3, [r2, #16]
 801cdcc:	4b83      	ldr	r3, [pc, #524]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cdce:	6919      	ldr	r1, [r3, #16]
 801cdd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801cdd8:	4a80      	ldr	r2, [pc, #512]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cdda:	430b      	orrs	r3, r1
 801cddc:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801cdde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cde6:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801cdea:	63bb      	str	r3, [r7, #56]	; 0x38
 801cdec:	2300      	movs	r3, #0
 801cdee:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cdf0:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801cdf4:	460b      	mov	r3, r1
 801cdf6:	4313      	orrs	r3, r2
 801cdf8:	d009      	beq.n	801ce0e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801cdfa:	4b78      	ldr	r3, [pc, #480]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cdfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cdfe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801ce02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce08:	4a74      	ldr	r2, [pc, #464]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce0a:	430b      	orrs	r3, r1
 801ce0c:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801ce0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce16:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801ce1a:	633b      	str	r3, [r7, #48]	; 0x30
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	637b      	str	r3, [r7, #52]	; 0x34
 801ce20:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801ce24:	460b      	mov	r3, r1
 801ce26:	4313      	orrs	r3, r2
 801ce28:	d00a      	beq.n	801ce40 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801ce2a:	4b6c      	ldr	r3, [pc, #432]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce2e:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801ce32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ce3a:	4a68      	ldr	r2, [pc, #416]	; (801cfdc <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce3c:	430b      	orrs	r3, r1
 801ce3e:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801ce40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce48:	2100      	movs	r1, #0
 801ce4a:	62b9      	str	r1, [r7, #40]	; 0x28
 801ce4c:	f003 0301 	and.w	r3, r3, #1
 801ce50:	62fb      	str	r3, [r7, #44]	; 0x2c
 801ce52:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801ce56:	460b      	mov	r3, r1
 801ce58:	4313      	orrs	r3, r2
 801ce5a:	d011      	beq.n	801ce80 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ce5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce60:	3308      	adds	r3, #8
 801ce62:	2100      	movs	r1, #0
 801ce64:	4618      	mov	r0, r3
 801ce66:	f001 f99d 	bl	801e1a4 <RCCEx_PLL2_Config>
 801ce6a:	4603      	mov	r3, r0
 801ce6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801ce70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce74:	2b00      	cmp	r3, #0
 801ce76:	d003      	beq.n	801ce80 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801ce80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce88:	2100      	movs	r1, #0
 801ce8a:	6239      	str	r1, [r7, #32]
 801ce8c:	f003 0302 	and.w	r3, r3, #2
 801ce90:	627b      	str	r3, [r7, #36]	; 0x24
 801ce92:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801ce96:	460b      	mov	r3, r1
 801ce98:	4313      	orrs	r3, r2
 801ce9a:	d011      	beq.n	801cec0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ce9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cea0:	3308      	adds	r3, #8
 801cea2:	2101      	movs	r1, #1
 801cea4:	4618      	mov	r0, r3
 801cea6:	f001 f97d 	bl	801e1a4 <RCCEx_PLL2_Config>
 801ceaa:	4603      	mov	r3, r0
 801ceac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801ceb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	d003      	beq.n	801cec0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ceb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cebc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801cec0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cec8:	2100      	movs	r1, #0
 801ceca:	61b9      	str	r1, [r7, #24]
 801cecc:	f003 0304 	and.w	r3, r3, #4
 801ced0:	61fb      	str	r3, [r7, #28]
 801ced2:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801ced6:	460b      	mov	r3, r1
 801ced8:	4313      	orrs	r3, r2
 801ceda:	d011      	beq.n	801cf00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cedc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cee0:	3308      	adds	r3, #8
 801cee2:	2102      	movs	r1, #2
 801cee4:	4618      	mov	r0, r3
 801cee6:	f001 f95d 	bl	801e1a4 <RCCEx_PLL2_Config>
 801ceea:	4603      	mov	r3, r0
 801ceec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cef0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cef4:	2b00      	cmp	r3, #0
 801cef6:	d003      	beq.n	801cf00 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cef8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cefc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801cf00:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf08:	2100      	movs	r1, #0
 801cf0a:	6139      	str	r1, [r7, #16]
 801cf0c:	f003 0308 	and.w	r3, r3, #8
 801cf10:	617b      	str	r3, [r7, #20]
 801cf12:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801cf16:	460b      	mov	r3, r1
 801cf18:	4313      	orrs	r3, r2
 801cf1a:	d011      	beq.n	801cf40 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf20:	3328      	adds	r3, #40	; 0x28
 801cf22:	2100      	movs	r1, #0
 801cf24:	4618      	mov	r0, r3
 801cf26:	f001 f9ef 	bl	801e308 <RCCEx_PLL3_Config>
 801cf2a:	4603      	mov	r3, r0
 801cf2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 801cf30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf34:	2b00      	cmp	r3, #0
 801cf36:	d003      	beq.n	801cf40 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf38:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf3c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801cf40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf48:	2100      	movs	r1, #0
 801cf4a:	60b9      	str	r1, [r7, #8]
 801cf4c:	f003 0310 	and.w	r3, r3, #16
 801cf50:	60fb      	str	r3, [r7, #12]
 801cf52:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801cf56:	460b      	mov	r3, r1
 801cf58:	4313      	orrs	r3, r2
 801cf5a:	d011      	beq.n	801cf80 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cf5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf60:	3328      	adds	r3, #40	; 0x28
 801cf62:	2101      	movs	r1, #1
 801cf64:	4618      	mov	r0, r3
 801cf66:	f001 f9cf 	bl	801e308 <RCCEx_PLL3_Config>
 801cf6a:	4603      	mov	r3, r0
 801cf6c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cf70:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf74:	2b00      	cmp	r3, #0
 801cf76:	d003      	beq.n	801cf80 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801cf80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf88:	2100      	movs	r1, #0
 801cf8a:	6039      	str	r1, [r7, #0]
 801cf8c:	f003 0320 	and.w	r3, r3, #32
 801cf90:	607b      	str	r3, [r7, #4]
 801cf92:	e9d7 1200 	ldrd	r1, r2, [r7]
 801cf96:	460b      	mov	r3, r1
 801cf98:	4313      	orrs	r3, r2
 801cf9a:	d011      	beq.n	801cfc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfa0:	3328      	adds	r3, #40	; 0x28
 801cfa2:	2102      	movs	r1, #2
 801cfa4:	4618      	mov	r0, r3
 801cfa6:	f001 f9af 	bl	801e308 <RCCEx_PLL3_Config>
 801cfaa:	4603      	mov	r3, r0
 801cfac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cfb0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfb4:	2b00      	cmp	r3, #0
 801cfb6:	d003      	beq.n	801cfc0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfb8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfbc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 801cfc0:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801cfc4:	2b00      	cmp	r3, #0
 801cfc6:	d101      	bne.n	801cfcc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 801cfc8:	2300      	movs	r3, #0
 801cfca:	e000      	b.n	801cfce <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801cfcc:	2301      	movs	r3, #1
}
 801cfce:	4618      	mov	r0, r3
 801cfd0:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801cfd4:	46bd      	mov	sp, r7
 801cfd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801cfda:	bf00      	nop
 801cfdc:	58024400 	.word	0x58024400

0801cfe0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b090      	sub	sp, #64	; 0x40
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801cfea:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cfee:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801cff2:	430b      	orrs	r3, r1
 801cff4:	f040 8094 	bne.w	801d120 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801cff8:	4b9b      	ldr	r3, [pc, #620]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801cffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cffc:	f003 0307 	and.w	r3, r3, #7
 801d000:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d004:	2b04      	cmp	r3, #4
 801d006:	f200 8087 	bhi.w	801d118 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801d00a:	a201      	add	r2, pc, #4	; (adr r2, 801d010 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801d00c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d010:	0801d025 	.word	0x0801d025
 801d014:	0801d04d 	.word	0x0801d04d
 801d018:	0801d075 	.word	0x0801d075
 801d01c:	0801d111 	.word	0x0801d111
 801d020:	0801d09d 	.word	0x0801d09d
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d024:	4b90      	ldr	r3, [pc, #576]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d026:	681b      	ldr	r3, [r3, #0]
 801d028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d02c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d030:	d108      	bne.n	801d044 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d032:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d036:	4618      	mov	r0, r3
 801d038:	f000 ff62 	bl	801df00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d03c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d03e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d040:	f000 bc93 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d044:	2300      	movs	r3, #0
 801d046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d048:	f000 bc8f 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d04c:	4b86      	ldr	r3, [pc, #536]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d04e:	681b      	ldr	r3, [r3, #0]
 801d050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d054:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d058:	d108      	bne.n	801d06c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d05a:	f107 0318 	add.w	r3, r7, #24
 801d05e:	4618      	mov	r0, r3
 801d060:	f000 fca6 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d064:	69bb      	ldr	r3, [r7, #24]
 801d066:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d068:	f000 bc7f 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d06c:	2300      	movs	r3, #0
 801d06e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d070:	f000 bc7b 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d074:	4b7c      	ldr	r3, [pc, #496]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d07c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d080:	d108      	bne.n	801d094 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d082:	f107 030c 	add.w	r3, r7, #12
 801d086:	4618      	mov	r0, r3
 801d088:	f000 fde6 	bl	801dc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d08c:	68fb      	ldr	r3, [r7, #12]
 801d08e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d090:	f000 bc6b 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d094:	2300      	movs	r3, #0
 801d096:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d098:	f000 bc67 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d09c:	4b72      	ldr	r3, [pc, #456]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d09e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d0a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d0a4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d0a6:	4b70      	ldr	r3, [pc, #448]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d0a8:	681b      	ldr	r3, [r3, #0]
 801d0aa:	f003 0304 	and.w	r3, r3, #4
 801d0ae:	2b04      	cmp	r3, #4
 801d0b0:	d10c      	bne.n	801d0cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801d0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d109      	bne.n	801d0cc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d0b8:	4b6b      	ldr	r3, [pc, #428]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d0ba:	681b      	ldr	r3, [r3, #0]
 801d0bc:	08db      	lsrs	r3, r3, #3
 801d0be:	f003 0303 	and.w	r3, r3, #3
 801d0c2:	4a6a      	ldr	r2, [pc, #424]	; (801d26c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d0c4:	fa22 f303 	lsr.w	r3, r2, r3
 801d0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d0ca:	e01f      	b.n	801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d0cc:	4b66      	ldr	r3, [pc, #408]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d0ce:	681b      	ldr	r3, [r3, #0]
 801d0d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d0d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d0d8:	d106      	bne.n	801d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801d0da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d0e0:	d102      	bne.n	801d0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d0e2:	4b63      	ldr	r3, [pc, #396]	; (801d270 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d0e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d0e6:	e011      	b.n	801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d0e8:	4b5f      	ldr	r3, [pc, #380]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d0ea:	681b      	ldr	r3, [r3, #0]
 801d0ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d0f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d0f4:	d106      	bne.n	801d104 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801d0f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d0fc:	d102      	bne.n	801d104 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d0fe:	4b5d      	ldr	r3, [pc, #372]	; (801d274 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d100:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d102:	e003      	b.n	801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d104:	2300      	movs	r3, #0
 801d106:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d108:	f000 bc2f 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d10c:	f000 bc2d 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d110:	4b59      	ldr	r3, [pc, #356]	; (801d278 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d114:	f000 bc29 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d118:	2300      	movs	r3, #0
 801d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d11c:	f000 bc25 	b.w	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801d120:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d124:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801d128:	430b      	orrs	r3, r1
 801d12a:	f040 80a7 	bne.w	801d27c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801d12e:	4b4e      	ldr	r3, [pc, #312]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d132:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801d136:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d13a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d13e:	d054      	beq.n	801d1ea <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801d140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d146:	f200 808b 	bhi.w	801d260 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d14c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d150:	f000 8083 	beq.w	801d25a <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801d154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d156:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d15a:	f200 8081 	bhi.w	801d260 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d160:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d164:	d02f      	beq.n	801d1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801d166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d16c:	d878      	bhi.n	801d260 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d170:	2b00      	cmp	r3, #0
 801d172:	d004      	beq.n	801d17e <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801d174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d176:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d17a:	d012      	beq.n	801d1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801d17c:	e070      	b.n	801d260 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d17e:	4b3a      	ldr	r3, [pc, #232]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d186:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d18a:	d107      	bne.n	801d19c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d18c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d190:	4618      	mov	r0, r3
 801d192:	f000 feb5 	bl	801df00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d198:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d19a:	e3e6      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d19c:	2300      	movs	r3, #0
 801d19e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d1a0:	e3e3      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d1a2:	4b31      	ldr	r3, [pc, #196]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d1aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d1ae:	d107      	bne.n	801d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d1b0:	f107 0318 	add.w	r3, r7, #24
 801d1b4:	4618      	mov	r0, r3
 801d1b6:	f000 fbfb 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d1ba:	69bb      	ldr	r3, [r7, #24]
 801d1bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d1be:	e3d4      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d1c4:	e3d1      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d1c6:	4b28      	ldr	r3, [pc, #160]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1c8:	681b      	ldr	r3, [r3, #0]
 801d1ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d1ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d1d2:	d107      	bne.n	801d1e4 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d1d4:	f107 030c 	add.w	r3, r7, #12
 801d1d8:	4618      	mov	r0, r3
 801d1da:	f000 fd3d 	bl	801dc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d1de:	68fb      	ldr	r3, [r7, #12]
 801d1e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d1e2:	e3c2      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d1e4:	2300      	movs	r3, #0
 801d1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d1e8:	e3bf      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d1ea:	4b1f      	ldr	r3, [pc, #124]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d1ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d1f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d1f4:	4b1c      	ldr	r3, [pc, #112]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	f003 0304 	and.w	r3, r3, #4
 801d1fc:	2b04      	cmp	r3, #4
 801d1fe:	d10c      	bne.n	801d21a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801d200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d202:	2b00      	cmp	r3, #0
 801d204:	d109      	bne.n	801d21a <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d206:	4b18      	ldr	r3, [pc, #96]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d208:	681b      	ldr	r3, [r3, #0]
 801d20a:	08db      	lsrs	r3, r3, #3
 801d20c:	f003 0303 	and.w	r3, r3, #3
 801d210:	4a16      	ldr	r2, [pc, #88]	; (801d26c <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d212:	fa22 f303 	lsr.w	r3, r2, r3
 801d216:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d218:	e01e      	b.n	801d258 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d21a:	4b13      	ldr	r3, [pc, #76]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d21c:	681b      	ldr	r3, [r3, #0]
 801d21e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d226:	d106      	bne.n	801d236 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801d228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d22a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d22e:	d102      	bne.n	801d236 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d230:	4b0f      	ldr	r3, [pc, #60]	; (801d270 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d232:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d234:	e010      	b.n	801d258 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d236:	4b0c      	ldr	r3, [pc, #48]	; (801d268 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d238:	681b      	ldr	r3, [r3, #0]
 801d23a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d23e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d242:	d106      	bne.n	801d252 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801d244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d24a:	d102      	bne.n	801d252 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d24c:	4b09      	ldr	r3, [pc, #36]	; (801d274 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d24e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d250:	e002      	b.n	801d258 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d252:	2300      	movs	r3, #0
 801d254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d256:	e388      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d258:	e387      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d25a:	4b07      	ldr	r3, [pc, #28]	; (801d278 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d25c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d25e:	e384      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d260:	2300      	movs	r3, #0
 801d262:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d264:	e381      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d266:	bf00      	nop
 801d268:	58024400 	.word	0x58024400
 801d26c:	03d09000 	.word	0x03d09000
 801d270:	003d0900 	.word	0x003d0900
 801d274:	007a1200 	.word	0x007a1200
 801d278:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801d27c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d280:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801d284:	430b      	orrs	r3, r1
 801d286:	f040 809c 	bne.w	801d3c2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801d28a:	4b9e      	ldr	r3, [pc, #632]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d28c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d28e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801d292:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d29a:	d054      	beq.n	801d346 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801d29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d29e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d2a2:	f200 808b 	bhi.w	801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2a8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d2ac:	f000 8083 	beq.w	801d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801d2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d2b6:	f200 8081 	bhi.w	801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d2c0:	d02f      	beq.n	801d322 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2c4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d2c8:	d878      	bhi.n	801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d2ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2cc:	2b00      	cmp	r3, #0
 801d2ce:	d004      	beq.n	801d2da <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801d2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d2d6:	d012      	beq.n	801d2fe <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801d2d8:	e070      	b.n	801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d2da:	4b8a      	ldr	r3, [pc, #552]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d2dc:	681b      	ldr	r3, [r3, #0]
 801d2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d2e6:	d107      	bne.n	801d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d2e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d2ec:	4618      	mov	r0, r3
 801d2ee:	f000 fe07 	bl	801df00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d2f6:	e338      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d2fc:	e335      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d2fe:	4b81      	ldr	r3, [pc, #516]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d306:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d30a:	d107      	bne.n	801d31c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d30c:	f107 0318 	add.w	r3, r7, #24
 801d310:	4618      	mov	r0, r3
 801d312:	f000 fb4d 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d316:	69bb      	ldr	r3, [r7, #24]
 801d318:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d31a:	e326      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d31c:	2300      	movs	r3, #0
 801d31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d320:	e323      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d322:	4b78      	ldr	r3, [pc, #480]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d324:	681b      	ldr	r3, [r3, #0]
 801d326:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d32a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d32e:	d107      	bne.n	801d340 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d330:	f107 030c 	add.w	r3, r7, #12
 801d334:	4618      	mov	r0, r3
 801d336:	f000 fc8f 	bl	801dc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d33a:	68fb      	ldr	r3, [r7, #12]
 801d33c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d33e:	e314      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d340:	2300      	movs	r3, #0
 801d342:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d344:	e311      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d346:	4b6f      	ldr	r3, [pc, #444]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d34a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d34e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d350:	4b6c      	ldr	r3, [pc, #432]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d352:	681b      	ldr	r3, [r3, #0]
 801d354:	f003 0304 	and.w	r3, r3, #4
 801d358:	2b04      	cmp	r3, #4
 801d35a:	d10c      	bne.n	801d376 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801d35c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d35e:	2b00      	cmp	r3, #0
 801d360:	d109      	bne.n	801d376 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d362:	4b68      	ldr	r3, [pc, #416]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d364:	681b      	ldr	r3, [r3, #0]
 801d366:	08db      	lsrs	r3, r3, #3
 801d368:	f003 0303 	and.w	r3, r3, #3
 801d36c:	4a66      	ldr	r2, [pc, #408]	; (801d508 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d36e:	fa22 f303 	lsr.w	r3, r2, r3
 801d372:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d374:	e01e      	b.n	801d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d376:	4b63      	ldr	r3, [pc, #396]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d378:	681b      	ldr	r3, [r3, #0]
 801d37a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d37e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d382:	d106      	bne.n	801d392 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801d384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d38a:	d102      	bne.n	801d392 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d38c:	4b5f      	ldr	r3, [pc, #380]	; (801d50c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d390:	e010      	b.n	801d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d392:	4b5c      	ldr	r3, [pc, #368]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d39a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d39e:	d106      	bne.n	801d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801d3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d3a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d3a6:	d102      	bne.n	801d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d3a8:	4b59      	ldr	r3, [pc, #356]	; (801d510 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d3aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d3ac:	e002      	b.n	801d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d3ae:	2300      	movs	r3, #0
 801d3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d3b2:	e2da      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d3b4:	e2d9      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d3b6:	4b57      	ldr	r3, [pc, #348]	; (801d514 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3ba:	e2d6      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d3bc:	2300      	movs	r3, #0
 801d3be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3c0:	e2d3      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801d3c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d3c6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801d3ca:	430b      	orrs	r3, r1
 801d3cc:	f040 80a7 	bne.w	801d51e <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801d3d0:	4b4c      	ldr	r3, [pc, #304]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d3d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d3d4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801d3d8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d3e0:	d055      	beq.n	801d48e <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801d3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d3e8:	f200 8096 	bhi.w	801d518 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d3f2:	f000 8084 	beq.w	801d4fe <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3f8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d3fc:	f200 808c 	bhi.w	801d518 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d406:	d030      	beq.n	801d46a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801d408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d40a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d40e:	f200 8083 	bhi.w	801d518 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d414:	2b00      	cmp	r3, #0
 801d416:	d004      	beq.n	801d422 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801d418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d41a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d41e:	d012      	beq.n	801d446 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801d420:	e07a      	b.n	801d518 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d422:	4b38      	ldr	r3, [pc, #224]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d424:	681b      	ldr	r3, [r3, #0]
 801d426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d42e:	d107      	bne.n	801d440 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d434:	4618      	mov	r0, r3
 801d436:	f000 fd63 	bl	801df00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d43e:	e294      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d440:	2300      	movs	r3, #0
 801d442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d444:	e291      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d446:	4b2f      	ldr	r3, [pc, #188]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d448:	681b      	ldr	r3, [r3, #0]
 801d44a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d44e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d452:	d107      	bne.n	801d464 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d454:	f107 0318 	add.w	r3, r7, #24
 801d458:	4618      	mov	r0, r3
 801d45a:	f000 faa9 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d45e:	69bb      	ldr	r3, [r7, #24]
 801d460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d462:	e282      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d464:	2300      	movs	r3, #0
 801d466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d468:	e27f      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d46a:	4b26      	ldr	r3, [pc, #152]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d46c:	681b      	ldr	r3, [r3, #0]
 801d46e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d476:	d107      	bne.n	801d488 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d478:	f107 030c 	add.w	r3, r7, #12
 801d47c:	4618      	mov	r0, r3
 801d47e:	f000 fbeb 	bl	801dc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d482:	68fb      	ldr	r3, [r7, #12]
 801d484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d486:	e270      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d488:	2300      	movs	r3, #0
 801d48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d48c:	e26d      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d48e:	4b1d      	ldr	r3, [pc, #116]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d496:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d498:	4b1a      	ldr	r3, [pc, #104]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d49a:	681b      	ldr	r3, [r3, #0]
 801d49c:	f003 0304 	and.w	r3, r3, #4
 801d4a0:	2b04      	cmp	r3, #4
 801d4a2:	d10c      	bne.n	801d4be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801d4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4a6:	2b00      	cmp	r3, #0
 801d4a8:	d109      	bne.n	801d4be <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d4aa:	4b16      	ldr	r3, [pc, #88]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4ac:	681b      	ldr	r3, [r3, #0]
 801d4ae:	08db      	lsrs	r3, r3, #3
 801d4b0:	f003 0303 	and.w	r3, r3, #3
 801d4b4:	4a14      	ldr	r2, [pc, #80]	; (801d508 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d4b6:	fa22 f303 	lsr.w	r3, r2, r3
 801d4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4bc:	e01e      	b.n	801d4fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d4be:	4b11      	ldr	r3, [pc, #68]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4c0:	681b      	ldr	r3, [r3, #0]
 801d4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d4ca:	d106      	bne.n	801d4da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801d4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d4d2:	d102      	bne.n	801d4da <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d4d4:	4b0d      	ldr	r3, [pc, #52]	; (801d50c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4d8:	e010      	b.n	801d4fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d4da:	4b0a      	ldr	r3, [pc, #40]	; (801d504 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d4e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d4e6:	d106      	bne.n	801d4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801d4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d4ee:	d102      	bne.n	801d4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d4f0:	4b07      	ldr	r3, [pc, #28]	; (801d510 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4f4:	e002      	b.n	801d4fc <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d4f6:	2300      	movs	r3, #0
 801d4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d4fa:	e236      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d4fc:	e235      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d4fe:	4b05      	ldr	r3, [pc, #20]	; (801d514 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d502:	e232      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d504:	58024400 	.word	0x58024400
 801d508:	03d09000 	.word	0x03d09000
 801d50c:	003d0900 	.word	0x003d0900
 801d510:	007a1200 	.word	0x007a1200
 801d514:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 801d518:	2300      	movs	r3, #0
 801d51a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d51c:	e225      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801d51e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d522:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 801d526:	430b      	orrs	r3, r1
 801d528:	f040 8085 	bne.w	801d636 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801d52c:	4b9c      	ldr	r3, [pc, #624]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d52e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d530:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801d534:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 801d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d53c:	d06b      	beq.n	801d616 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801d53e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d540:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d544:	d874      	bhi.n	801d630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d548:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d54c:	d056      	beq.n	801d5fc <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d550:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d554:	d86c      	bhi.n	801d630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d558:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d55c:	d03b      	beq.n	801d5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801d55e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d560:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d564:	d864      	bhi.n	801d630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d56c:	d021      	beq.n	801d5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801d56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d570:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d574:	d85c      	bhi.n	801d630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d578:	2b00      	cmp	r3, #0
 801d57a:	d004      	beq.n	801d586 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801d57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d57e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d582:	d004      	beq.n	801d58e <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801d584:	e054      	b.n	801d630 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801d586:	f7fe fb75 	bl	801bc74 <HAL_RCC_GetPCLK1Freq>
 801d58a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d58c:	e1ed      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d58e:	4b84      	ldr	r3, [pc, #528]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d590:	681b      	ldr	r3, [r3, #0]
 801d592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d59a:	d107      	bne.n	801d5ac <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d59c:	f107 0318 	add.w	r3, r7, #24
 801d5a0:	4618      	mov	r0, r3
 801d5a2:	f000 fa05 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d5a6:	69fb      	ldr	r3, [r7, #28]
 801d5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d5aa:	e1de      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5b0:	e1db      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d5b2:	4b7b      	ldr	r3, [pc, #492]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d5b4:	681b      	ldr	r3, [r3, #0]
 801d5b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d5be:	d107      	bne.n	801d5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d5c0:	f107 030c 	add.w	r3, r7, #12
 801d5c4:	4618      	mov	r0, r3
 801d5c6:	f000 fb47 	bl	801dc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d5ca:	693b      	ldr	r3, [r7, #16]
 801d5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d5ce:	e1cc      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5d4:	e1c9      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d5d6:	4b72      	ldr	r3, [pc, #456]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d5d8:	681b      	ldr	r3, [r3, #0]
 801d5da:	f003 0304 	and.w	r3, r3, #4
 801d5de:	2b04      	cmp	r3, #4
 801d5e0:	d109      	bne.n	801d5f6 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d5e2:	4b6f      	ldr	r3, [pc, #444]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d5e4:	681b      	ldr	r3, [r3, #0]
 801d5e6:	08db      	lsrs	r3, r3, #3
 801d5e8:	f003 0303 	and.w	r3, r3, #3
 801d5ec:	4a6d      	ldr	r2, [pc, #436]	; (801d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d5ee:	fa22 f303 	lsr.w	r3, r2, r3
 801d5f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d5f4:	e1b9      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d5f6:	2300      	movs	r3, #0
 801d5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5fa:	e1b6      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d5fc:	4b68      	ldr	r3, [pc, #416]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d5fe:	681b      	ldr	r3, [r3, #0]
 801d600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d604:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d608:	d102      	bne.n	801d610 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801d60a:	4b67      	ldr	r3, [pc, #412]	; (801d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d60c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d60e:	e1ac      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d610:	2300      	movs	r3, #0
 801d612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d614:	e1a9      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d616:	4b62      	ldr	r3, [pc, #392]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d61e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d622:	d102      	bne.n	801d62a <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801d624:	4b61      	ldr	r3, [pc, #388]	; (801d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d626:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d628:	e19f      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d62a:	2300      	movs	r3, #0
 801d62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d62e:	e19c      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d630:	2300      	movs	r3, #0
 801d632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d634:	e199      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801d636:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d63a:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801d63e:	430b      	orrs	r3, r1
 801d640:	d173      	bne.n	801d72a <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801d642:	4b57      	ldr	r3, [pc, #348]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d646:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d64a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d64c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d64e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d652:	d02f      	beq.n	801d6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801d654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d656:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d65a:	d863      	bhi.n	801d724 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801d65c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d65e:	2b00      	cmp	r3, #0
 801d660:	d004      	beq.n	801d66c <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801d662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d664:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d668:	d012      	beq.n	801d690 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801d66a:	e05b      	b.n	801d724 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d66c:	4b4c      	ldr	r3, [pc, #304]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d674:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d678:	d107      	bne.n	801d68a <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d67a:	f107 0318 	add.w	r3, r7, #24
 801d67e:	4618      	mov	r0, r3
 801d680:	f000 f996 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d684:	69bb      	ldr	r3, [r7, #24]
 801d686:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d688:	e16f      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d68a:	2300      	movs	r3, #0
 801d68c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d68e:	e16c      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d690:	4b43      	ldr	r3, [pc, #268]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d692:	681b      	ldr	r3, [r3, #0]
 801d694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d69c:	d107      	bne.n	801d6ae <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d69e:	f107 030c 	add.w	r3, r7, #12
 801d6a2:	4618      	mov	r0, r3
 801d6a4:	f000 fad8 	bl	801dc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801d6a8:	697b      	ldr	r3, [r7, #20]
 801d6aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d6ac:	e15d      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d6ae:	2300      	movs	r3, #0
 801d6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d6b2:	e15a      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d6b4:	4b3a      	ldr	r3, [pc, #232]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d6b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d6bc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d6be:	4b38      	ldr	r3, [pc, #224]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	f003 0304 	and.w	r3, r3, #4
 801d6c6:	2b04      	cmp	r3, #4
 801d6c8:	d10c      	bne.n	801d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801d6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d109      	bne.n	801d6e4 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d6d0:	4b33      	ldr	r3, [pc, #204]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6d2:	681b      	ldr	r3, [r3, #0]
 801d6d4:	08db      	lsrs	r3, r3, #3
 801d6d6:	f003 0303 	and.w	r3, r3, #3
 801d6da:	4a32      	ldr	r2, [pc, #200]	; (801d7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d6dc:	fa22 f303 	lsr.w	r3, r2, r3
 801d6e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d6e2:	e01e      	b.n	801d722 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d6e4:	4b2e      	ldr	r3, [pc, #184]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6e6:	681b      	ldr	r3, [r3, #0]
 801d6e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d6ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d6f0:	d106      	bne.n	801d700 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801d6f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d6f8:	d102      	bne.n	801d700 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d6fa:	4b2b      	ldr	r3, [pc, #172]	; (801d7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d6fe:	e010      	b.n	801d722 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d700:	4b27      	ldr	r3, [pc, #156]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d702:	681b      	ldr	r3, [r3, #0]
 801d704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d708:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d70c:	d106      	bne.n	801d71c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801d70e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d714:	d102      	bne.n	801d71c <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d716:	4b25      	ldr	r3, [pc, #148]	; (801d7ac <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d718:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d71a:	e002      	b.n	801d722 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d71c:	2300      	movs	r3, #0
 801d71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d720:	e123      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d722:	e122      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d724:	2300      	movs	r3, #0
 801d726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d728:	e11f      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801d72a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d72e:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 801d732:	430b      	orrs	r3, r1
 801d734:	d13c      	bne.n	801d7b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801d736:	4b1a      	ldr	r3, [pc, #104]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d73a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d73e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d742:	2b00      	cmp	r3, #0
 801d744:	d004      	beq.n	801d750 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801d746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d74c:	d012      	beq.n	801d774 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801d74e:	e023      	b.n	801d798 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d750:	4b13      	ldr	r3, [pc, #76]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d75c:	d107      	bne.n	801d76e <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d75e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d762:	4618      	mov	r0, r3
 801d764:	f000 fbcc 	bl	801df00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d76c:	e0fd      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d76e:	2300      	movs	r3, #0
 801d770:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d772:	e0fa      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d774:	4b0a      	ldr	r3, [pc, #40]	; (801d7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d776:	681b      	ldr	r3, [r3, #0]
 801d778:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d77c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d780:	d107      	bne.n	801d792 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d782:	f107 0318 	add.w	r3, r7, #24
 801d786:	4618      	mov	r0, r3
 801d788:	f000 f912 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801d78c:	6a3b      	ldr	r3, [r7, #32]
 801d78e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d790:	e0eb      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d792:	2300      	movs	r3, #0
 801d794:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d796:	e0e8      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d798:	2300      	movs	r3, #0
 801d79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d79c:	e0e5      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d79e:	bf00      	nop
 801d7a0:	58024400 	.word	0x58024400
 801d7a4:	03d09000 	.word	0x03d09000
 801d7a8:	003d0900 	.word	0x003d0900
 801d7ac:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801d7b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d7b4:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801d7b8:	430b      	orrs	r3, r1
 801d7ba:	f040 8085 	bne.w	801d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801d7be:	4b6d      	ldr	r3, [pc, #436]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d7c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d7c2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801d7c6:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d7ce:	d06b      	beq.n	801d8a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 801d7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d7d6:	d874      	bhi.n	801d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d7de:	d056      	beq.n	801d88e <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 801d7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d7e6:	d86c      	bhi.n	801d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7ea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d7ee:	d03b      	beq.n	801d868 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 801d7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d7f6:	d864      	bhi.n	801d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d7f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d7fe:	d021      	beq.n	801d844 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 801d800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d806:	d85c      	bhi.n	801d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d80a:	2b00      	cmp	r3, #0
 801d80c:	d004      	beq.n	801d818 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801d80e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d810:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d814:	d004      	beq.n	801d820 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801d816:	e054      	b.n	801d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801d818:	f000 f8b4 	bl	801d984 <HAL_RCCEx_GetD3PCLK1Freq>
 801d81c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d81e:	e0a4      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d820:	4b54      	ldr	r3, [pc, #336]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d822:	681b      	ldr	r3, [r3, #0]
 801d824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d82c:	d107      	bne.n	801d83e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d82e:	f107 0318 	add.w	r3, r7, #24
 801d832:	4618      	mov	r0, r3
 801d834:	f000 f8bc 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d838:	69fb      	ldr	r3, [r7, #28]
 801d83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d83c:	e095      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d83e:	2300      	movs	r3, #0
 801d840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d842:	e092      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d844:	4b4b      	ldr	r3, [pc, #300]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d84c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d850:	d107      	bne.n	801d862 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d852:	f107 030c 	add.w	r3, r7, #12
 801d856:	4618      	mov	r0, r3
 801d858:	f000 f9fe 	bl	801dc58 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d85c:	693b      	ldr	r3, [r7, #16]
 801d85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d860:	e083      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d862:	2300      	movs	r3, #0
 801d864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d866:	e080      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d868:	4b42      	ldr	r3, [pc, #264]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d86a:	681b      	ldr	r3, [r3, #0]
 801d86c:	f003 0304 	and.w	r3, r3, #4
 801d870:	2b04      	cmp	r3, #4
 801d872:	d109      	bne.n	801d888 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d874:	4b3f      	ldr	r3, [pc, #252]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d876:	681b      	ldr	r3, [r3, #0]
 801d878:	08db      	lsrs	r3, r3, #3
 801d87a:	f003 0303 	and.w	r3, r3, #3
 801d87e:	4a3e      	ldr	r2, [pc, #248]	; (801d978 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801d880:	fa22 f303 	lsr.w	r3, r2, r3
 801d884:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d886:	e070      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d888:	2300      	movs	r3, #0
 801d88a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d88c:	e06d      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d88e:	4b39      	ldr	r3, [pc, #228]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d890:	681b      	ldr	r3, [r3, #0]
 801d892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d896:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d89a:	d102      	bne.n	801d8a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801d89c:	4b37      	ldr	r3, [pc, #220]	; (801d97c <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801d89e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d8a0:	e063      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d8a2:	2300      	movs	r3, #0
 801d8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8a6:	e060      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d8a8:	4b32      	ldr	r3, [pc, #200]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d8aa:	681b      	ldr	r3, [r3, #0]
 801d8ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d8b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d8b4:	d102      	bne.n	801d8bc <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801d8b6:	4b32      	ldr	r3, [pc, #200]	; (801d980 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801d8b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d8ba:	e056      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d8bc:	2300      	movs	r3, #0
 801d8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8c0:	e053      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8c6:	e050      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801d8c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d8cc:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801d8d0:	430b      	orrs	r3, r1
 801d8d2:	d148      	bne.n	801d966 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801d8d4:	4b27      	ldr	r3, [pc, #156]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d8d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d8dc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d8e4:	d02a      	beq.n	801d93c <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801d8e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d8ec:	d838      	bhi.n	801d960 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801d8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d004      	beq.n	801d8fe <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801d8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d8fa:	d00d      	beq.n	801d918 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801d8fc:	e030      	b.n	801d960 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d8fe:	4b1d      	ldr	r3, [pc, #116]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d900:	681b      	ldr	r3, [r3, #0]
 801d902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d906:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d90a:	d102      	bne.n	801d912 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801d90c:	4b1c      	ldr	r3, [pc, #112]	; (801d980 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801d90e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d910:	e02b      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d912:	2300      	movs	r3, #0
 801d914:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d916:	e028      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d918:	4b16      	ldr	r3, [pc, #88]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d91a:	681b      	ldr	r3, [r3, #0]
 801d91c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d920:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d924:	d107      	bne.n	801d936 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d92a:	4618      	mov	r0, r3
 801d92c:	f000 fae8 	bl	801df00 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d932:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d934:	e019      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d936:	2300      	movs	r3, #0
 801d938:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d93a:	e016      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d93c:	4b0d      	ldr	r3, [pc, #52]	; (801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d93e:	681b      	ldr	r3, [r3, #0]
 801d940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d944:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d948:	d107      	bne.n	801d95a <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d94a:	f107 0318 	add.w	r3, r7, #24
 801d94e:	4618      	mov	r0, r3
 801d950:	f000 f82e 	bl	801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d954:	69fb      	ldr	r3, [r7, #28]
 801d956:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d958:	e007      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d95a:	2300      	movs	r3, #0
 801d95c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d95e:	e004      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d960:	2300      	movs	r3, #0
 801d962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d964:	e001      	b.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801d966:	2300      	movs	r3, #0
 801d968:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801d96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801d96c:	4618      	mov	r0, r3
 801d96e:	3740      	adds	r7, #64	; 0x40
 801d970:	46bd      	mov	sp, r7
 801d972:	bd80      	pop	{r7, pc}
 801d974:	58024400 	.word	0x58024400
 801d978:	03d09000 	.word	0x03d09000
 801d97c:	003d0900 	.word	0x003d0900
 801d980:	007a1200 	.word	0x007a1200

0801d984 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801d984:	b580      	push	{r7, lr}
 801d986:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801d988:	f7fe f944 	bl	801bc14 <HAL_RCC_GetHCLKFreq>
 801d98c:	4602      	mov	r2, r0
 801d98e:	4b06      	ldr	r3, [pc, #24]	; (801d9a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801d990:	6a1b      	ldr	r3, [r3, #32]
 801d992:	091b      	lsrs	r3, r3, #4
 801d994:	f003 0307 	and.w	r3, r3, #7
 801d998:	4904      	ldr	r1, [pc, #16]	; (801d9ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801d99a:	5ccb      	ldrb	r3, [r1, r3]
 801d99c:	f003 031f 	and.w	r3, r3, #31
 801d9a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801d9a4:	4618      	mov	r0, r3
 801d9a6:	bd80      	pop	{r7, pc}
 801d9a8:	58024400 	.word	0x58024400
 801d9ac:	08020dc4 	.word	0x08020dc4

0801d9b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801d9b0:	b480      	push	{r7}
 801d9b2:	b089      	sub	sp, #36	; 0x24
 801d9b4:	af00      	add	r7, sp, #0
 801d9b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d9b8:	4ba1      	ldr	r3, [pc, #644]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d9ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9bc:	f003 0303 	and.w	r3, r3, #3
 801d9c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801d9c2:	4b9f      	ldr	r3, [pc, #636]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d9c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9c6:	0b1b      	lsrs	r3, r3, #12
 801d9c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801d9cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801d9ce:	4b9c      	ldr	r3, [pc, #624]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d9d2:	091b      	lsrs	r3, r3, #4
 801d9d4:	f003 0301 	and.w	r3, r3, #1
 801d9d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801d9da:	4b99      	ldr	r3, [pc, #612]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d9dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801d9de:	08db      	lsrs	r3, r3, #3
 801d9e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d9e4:	693a      	ldr	r2, [r7, #16]
 801d9e6:	fb02 f303 	mul.w	r3, r2, r3
 801d9ea:	ee07 3a90 	vmov	s15, r3
 801d9ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801d9f6:	697b      	ldr	r3, [r7, #20]
 801d9f8:	2b00      	cmp	r3, #0
 801d9fa:	f000 8111 	beq.w	801dc20 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801d9fe:	69bb      	ldr	r3, [r7, #24]
 801da00:	2b02      	cmp	r3, #2
 801da02:	f000 8083 	beq.w	801db0c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801da06:	69bb      	ldr	r3, [r7, #24]
 801da08:	2b02      	cmp	r3, #2
 801da0a:	f200 80a1 	bhi.w	801db50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801da0e:	69bb      	ldr	r3, [r7, #24]
 801da10:	2b00      	cmp	r3, #0
 801da12:	d003      	beq.n	801da1c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801da14:	69bb      	ldr	r3, [r7, #24]
 801da16:	2b01      	cmp	r3, #1
 801da18:	d056      	beq.n	801dac8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801da1a:	e099      	b.n	801db50 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801da1c:	4b88      	ldr	r3, [pc, #544]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da1e:	681b      	ldr	r3, [r3, #0]
 801da20:	f003 0320 	and.w	r3, r3, #32
 801da24:	2b00      	cmp	r3, #0
 801da26:	d02d      	beq.n	801da84 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801da28:	4b85      	ldr	r3, [pc, #532]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da2a:	681b      	ldr	r3, [r3, #0]
 801da2c:	08db      	lsrs	r3, r3, #3
 801da2e:	f003 0303 	and.w	r3, r3, #3
 801da32:	4a84      	ldr	r2, [pc, #528]	; (801dc44 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801da34:	fa22 f303 	lsr.w	r3, r2, r3
 801da38:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801da3a:	68bb      	ldr	r3, [r7, #8]
 801da3c:	ee07 3a90 	vmov	s15, r3
 801da40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da44:	697b      	ldr	r3, [r7, #20]
 801da46:	ee07 3a90 	vmov	s15, r3
 801da4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801da52:	4b7b      	ldr	r3, [pc, #492]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da5a:	ee07 3a90 	vmov	s15, r3
 801da5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da62:	ed97 6a03 	vldr	s12, [r7, #12]
 801da66:	eddf 5a78 	vldr	s11, [pc, #480]	; 801dc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801da6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801da6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801da72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801da76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801da7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801da7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801da82:	e087      	b.n	801db94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801da84:	697b      	ldr	r3, [r7, #20]
 801da86:	ee07 3a90 	vmov	s15, r3
 801da8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da8e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801dc4c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801da92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801da96:	4b6a      	ldr	r3, [pc, #424]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801da9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da9e:	ee07 3a90 	vmov	s15, r3
 801daa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801daa6:	ed97 6a03 	vldr	s12, [r7, #12]
 801daaa:	eddf 5a67 	vldr	s11, [pc, #412]	; 801dc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801daae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801daba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dabe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dac6:	e065      	b.n	801db94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dac8:	697b      	ldr	r3, [r7, #20]
 801daca:	ee07 3a90 	vmov	s15, r3
 801dace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dad2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801dc50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dada:	4b59      	ldr	r3, [pc, #356]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dae2:	ee07 3a90 	vmov	s15, r3
 801dae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801daea:	ed97 6a03 	vldr	s12, [r7, #12]
 801daee:	eddf 5a56 	vldr	s11, [pc, #344]	; 801dc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801daf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801daf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dafa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dafe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db02:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db0a:	e043      	b.n	801db94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db0c:	697b      	ldr	r3, [r7, #20]
 801db0e:	ee07 3a90 	vmov	s15, r3
 801db12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db16:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801dc54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801db1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db1e:	4b48      	ldr	r3, [pc, #288]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db26:	ee07 3a90 	vmov	s15, r3
 801db2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db2e:	ed97 6a03 	vldr	s12, [r7, #12]
 801db32:	eddf 5a45 	vldr	s11, [pc, #276]	; 801dc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db46:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db4e:	e021      	b.n	801db94 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db50:	697b      	ldr	r3, [r7, #20]
 801db52:	ee07 3a90 	vmov	s15, r3
 801db56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db5a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801dc50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801db5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db62:	4b37      	ldr	r3, [pc, #220]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db6a:	ee07 3a90 	vmov	s15, r3
 801db6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db72:	ed97 6a03 	vldr	s12, [r7, #12]
 801db76:	eddf 5a34 	vldr	s11, [pc, #208]	; 801dc48 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db92:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801db94:	4b2a      	ldr	r3, [pc, #168]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db98:	0a5b      	lsrs	r3, r3, #9
 801db9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801db9e:	ee07 3a90 	vmov	s15, r3
 801dba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dba6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dbaa:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dbae:	edd7 6a07 	vldr	s13, [r7, #28]
 801dbb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dbb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dbba:	ee17 2a90 	vmov	r2, s15
 801dbbe:	687b      	ldr	r3, [r7, #4]
 801dbc0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801dbc2:	4b1f      	ldr	r3, [pc, #124]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbc6:	0c1b      	lsrs	r3, r3, #16
 801dbc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dbcc:	ee07 3a90 	vmov	s15, r3
 801dbd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dbd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dbdc:	edd7 6a07 	vldr	s13, [r7, #28]
 801dbe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dbe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dbe8:	ee17 2a90 	vmov	r2, s15
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801dbf0:	4b13      	ldr	r3, [pc, #76]	; (801dc40 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbf4:	0e1b      	lsrs	r3, r3, #24
 801dbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dbfa:	ee07 3a90 	vmov	s15, r3
 801dbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dc06:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dc0a:	edd7 6a07 	vldr	s13, [r7, #28]
 801dc0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dc12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dc16:	ee17 2a90 	vmov	r2, s15
 801dc1a:	687b      	ldr	r3, [r7, #4]
 801dc1c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801dc1e:	e008      	b.n	801dc32 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801dc20:	687b      	ldr	r3, [r7, #4]
 801dc22:	2200      	movs	r2, #0
 801dc24:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801dc26:	687b      	ldr	r3, [r7, #4]
 801dc28:	2200      	movs	r2, #0
 801dc2a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801dc2c:	687b      	ldr	r3, [r7, #4]
 801dc2e:	2200      	movs	r2, #0
 801dc30:	609a      	str	r2, [r3, #8]
}
 801dc32:	bf00      	nop
 801dc34:	3724      	adds	r7, #36	; 0x24
 801dc36:	46bd      	mov	sp, r7
 801dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc3c:	4770      	bx	lr
 801dc3e:	bf00      	nop
 801dc40:	58024400 	.word	0x58024400
 801dc44:	03d09000 	.word	0x03d09000
 801dc48:	46000000 	.word	0x46000000
 801dc4c:	4c742400 	.word	0x4c742400
 801dc50:	4a742400 	.word	0x4a742400
 801dc54:	4af42400 	.word	0x4af42400

0801dc58 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801dc58:	b480      	push	{r7}
 801dc5a:	b089      	sub	sp, #36	; 0x24
 801dc5c:	af00      	add	r7, sp, #0
 801dc5e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dc60:	4ba1      	ldr	r3, [pc, #644]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dc62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc64:	f003 0303 	and.w	r3, r3, #3
 801dc68:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801dc6a:	4b9f      	ldr	r3, [pc, #636]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dc6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dc6e:	0d1b      	lsrs	r3, r3, #20
 801dc70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dc74:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801dc76:	4b9c      	ldr	r3, [pc, #624]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dc78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dc7a:	0a1b      	lsrs	r3, r3, #8
 801dc7c:	f003 0301 	and.w	r3, r3, #1
 801dc80:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801dc82:	4b99      	ldr	r3, [pc, #612]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dc84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dc86:	08db      	lsrs	r3, r3, #3
 801dc88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dc8c:	693a      	ldr	r2, [r7, #16]
 801dc8e:	fb02 f303 	mul.w	r3, r2, r3
 801dc92:	ee07 3a90 	vmov	s15, r3
 801dc96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc9a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801dc9e:	697b      	ldr	r3, [r7, #20]
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	f000 8111 	beq.w	801dec8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801dca6:	69bb      	ldr	r3, [r7, #24]
 801dca8:	2b02      	cmp	r3, #2
 801dcaa:	f000 8083 	beq.w	801ddb4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801dcae:	69bb      	ldr	r3, [r7, #24]
 801dcb0:	2b02      	cmp	r3, #2
 801dcb2:	f200 80a1 	bhi.w	801ddf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801dcb6:	69bb      	ldr	r3, [r7, #24]
 801dcb8:	2b00      	cmp	r3, #0
 801dcba:	d003      	beq.n	801dcc4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801dcbc:	69bb      	ldr	r3, [r7, #24]
 801dcbe:	2b01      	cmp	r3, #1
 801dcc0:	d056      	beq.n	801dd70 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801dcc2:	e099      	b.n	801ddf8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dcc4:	4b88      	ldr	r3, [pc, #544]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dcc6:	681b      	ldr	r3, [r3, #0]
 801dcc8:	f003 0320 	and.w	r3, r3, #32
 801dccc:	2b00      	cmp	r3, #0
 801dcce:	d02d      	beq.n	801dd2c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dcd0:	4b85      	ldr	r3, [pc, #532]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dcd2:	681b      	ldr	r3, [r3, #0]
 801dcd4:	08db      	lsrs	r3, r3, #3
 801dcd6:	f003 0303 	and.w	r3, r3, #3
 801dcda:	4a84      	ldr	r2, [pc, #528]	; (801deec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801dcdc:	fa22 f303 	lsr.w	r3, r2, r3
 801dce0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dce2:	68bb      	ldr	r3, [r7, #8]
 801dce4:	ee07 3a90 	vmov	s15, r3
 801dce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dcec:	697b      	ldr	r3, [r7, #20]
 801dcee:	ee07 3a90 	vmov	s15, r3
 801dcf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dcfa:	4b7b      	ldr	r3, [pc, #492]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dcfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dcfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd02:	ee07 3a90 	vmov	s15, r3
 801dd06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd0a:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd0e:	eddf 5a78 	vldr	s11, [pc, #480]	; 801def0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dd12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd26:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801dd2a:	e087      	b.n	801de3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dd2c:	697b      	ldr	r3, [r7, #20]
 801dd2e:	ee07 3a90 	vmov	s15, r3
 801dd32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd36:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801def4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801dd3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd3e:	4b6a      	ldr	r3, [pc, #424]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd46:	ee07 3a90 	vmov	s15, r3
 801dd4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd4e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd52:	eddf 5a67 	vldr	s11, [pc, #412]	; 801def0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dd56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dd5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dd62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dd66:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dd6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dd6e:	e065      	b.n	801de3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dd70:	697b      	ldr	r3, [r7, #20]
 801dd72:	ee07 3a90 	vmov	s15, r3
 801dd76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd7a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801def8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801dd7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd82:	4b59      	ldr	r3, [pc, #356]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dd86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd8a:	ee07 3a90 	vmov	s15, r3
 801dd8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd92:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd96:	eddf 5a56 	vldr	s11, [pc, #344]	; 801def0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dd9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dd9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dda2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dda6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ddb2:	e043      	b.n	801de3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ddb4:	697b      	ldr	r3, [r7, #20]
 801ddb6:	ee07 3a90 	vmov	s15, r3
 801ddba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddbe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801defc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801ddc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ddc6:	4b48      	ldr	r3, [pc, #288]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ddca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddce:	ee07 3a90 	vmov	s15, r3
 801ddd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddd6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ddda:	eddf 5a45 	vldr	s11, [pc, #276]	; 801def0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ddde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dde2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dde6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ddea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddee:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ddf6:	e021      	b.n	801de3c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ddf8:	697b      	ldr	r3, [r7, #20]
 801ddfa:	ee07 3a90 	vmov	s15, r3
 801ddfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de02:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801def8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801de06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de0a:	4b37      	ldr	r3, [pc, #220]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de12:	ee07 3a90 	vmov	s15, r3
 801de16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de1a:	ed97 6a03 	vldr	s12, [r7, #12]
 801de1e:	eddf 5a34 	vldr	s11, [pc, #208]	; 801def0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de32:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801de3a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801de3c:	4b2a      	ldr	r3, [pc, #168]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de40:	0a5b      	lsrs	r3, r3, #9
 801de42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801de46:	ee07 3a90 	vmov	s15, r3
 801de4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de52:	ee37 7a87 	vadd.f32	s14, s15, s14
 801de56:	edd7 6a07 	vldr	s13, [r7, #28]
 801de5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801de5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801de62:	ee17 2a90 	vmov	r2, s15
 801de66:	687b      	ldr	r3, [r7, #4]
 801de68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801de6a:	4b1f      	ldr	r3, [pc, #124]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de6e:	0c1b      	lsrs	r3, r3, #16
 801de70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801de74:	ee07 3a90 	vmov	s15, r3
 801de78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801de80:	ee37 7a87 	vadd.f32	s14, s15, s14
 801de84:	edd7 6a07 	vldr	s13, [r7, #28]
 801de88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801de8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801de90:	ee17 2a90 	vmov	r2, s15
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801de98:	4b13      	ldr	r3, [pc, #76]	; (801dee8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de9c:	0e1b      	lsrs	r3, r3, #24
 801de9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dea2:	ee07 3a90 	vmov	s15, r3
 801dea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801deaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801deae:	ee37 7a87 	vadd.f32	s14, s15, s14
 801deb2:	edd7 6a07 	vldr	s13, [r7, #28]
 801deb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801deba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801debe:	ee17 2a90 	vmov	r2, s15
 801dec2:	687b      	ldr	r3, [r7, #4]
 801dec4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801dec6:	e008      	b.n	801deda <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801dec8:	687b      	ldr	r3, [r7, #4]
 801deca:	2200      	movs	r2, #0
 801decc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801dece:	687b      	ldr	r3, [r7, #4]
 801ded0:	2200      	movs	r2, #0
 801ded2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	2200      	movs	r2, #0
 801ded8:	609a      	str	r2, [r3, #8]
}
 801deda:	bf00      	nop
 801dedc:	3724      	adds	r7, #36	; 0x24
 801dede:	46bd      	mov	sp, r7
 801dee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dee4:	4770      	bx	lr
 801dee6:	bf00      	nop
 801dee8:	58024400 	.word	0x58024400
 801deec:	03d09000 	.word	0x03d09000
 801def0:	46000000 	.word	0x46000000
 801def4:	4c742400 	.word	0x4c742400
 801def8:	4a742400 	.word	0x4a742400
 801defc:	4af42400 	.word	0x4af42400

0801df00 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801df00:	b480      	push	{r7}
 801df02:	b089      	sub	sp, #36	; 0x24
 801df04:	af00      	add	r7, sp, #0
 801df06:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801df08:	4ba0      	ldr	r3, [pc, #640]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801df0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df0c:	f003 0303 	and.w	r3, r3, #3
 801df10:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801df12:	4b9e      	ldr	r3, [pc, #632]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801df14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801df16:	091b      	lsrs	r3, r3, #4
 801df18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801df1c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801df1e:	4b9b      	ldr	r3, [pc, #620]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801df20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801df22:	f003 0301 	and.w	r3, r3, #1
 801df26:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801df28:	4b98      	ldr	r3, [pc, #608]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801df2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801df2c:	08db      	lsrs	r3, r3, #3
 801df2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801df32:	693a      	ldr	r2, [r7, #16]
 801df34:	fb02 f303 	mul.w	r3, r2, r3
 801df38:	ee07 3a90 	vmov	s15, r3
 801df3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df40:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801df44:	697b      	ldr	r3, [r7, #20]
 801df46:	2b00      	cmp	r3, #0
 801df48:	f000 8111 	beq.w	801e16e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801df4c:	69bb      	ldr	r3, [r7, #24]
 801df4e:	2b02      	cmp	r3, #2
 801df50:	f000 8083 	beq.w	801e05a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801df54:	69bb      	ldr	r3, [r7, #24]
 801df56:	2b02      	cmp	r3, #2
 801df58:	f200 80a1 	bhi.w	801e09e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801df5c:	69bb      	ldr	r3, [r7, #24]
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d003      	beq.n	801df6a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801df62:	69bb      	ldr	r3, [r7, #24]
 801df64:	2b01      	cmp	r3, #1
 801df66:	d056      	beq.n	801e016 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801df68:	e099      	b.n	801e09e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801df6a:	4b88      	ldr	r3, [pc, #544]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	f003 0320 	and.w	r3, r3, #32
 801df72:	2b00      	cmp	r3, #0
 801df74:	d02d      	beq.n	801dfd2 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801df76:	4b85      	ldr	r3, [pc, #532]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801df78:	681b      	ldr	r3, [r3, #0]
 801df7a:	08db      	lsrs	r3, r3, #3
 801df7c:	f003 0303 	and.w	r3, r3, #3
 801df80:	4a83      	ldr	r2, [pc, #524]	; (801e190 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801df82:	fa22 f303 	lsr.w	r3, r2, r3
 801df86:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801df88:	68bb      	ldr	r3, [r7, #8]
 801df8a:	ee07 3a90 	vmov	s15, r3
 801df8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df92:	697b      	ldr	r3, [r7, #20]
 801df94:	ee07 3a90 	vmov	s15, r3
 801df98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dfa0:	4b7a      	ldr	r3, [pc, #488]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801dfa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dfa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dfa8:	ee07 3a90 	vmov	s15, r3
 801dfac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dfb0:	ed97 6a03 	vldr	s12, [r7, #12]
 801dfb4:	eddf 5a77 	vldr	s11, [pc, #476]	; 801e194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801dfb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dfbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dfc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dfc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dfc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dfcc:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801dfd0:	e087      	b.n	801e0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dfd2:	697b      	ldr	r3, [r7, #20]
 801dfd4:	ee07 3a90 	vmov	s15, r3
 801dfd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dfdc:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801e198 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801dfe0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dfe4:	4b69      	ldr	r3, [pc, #420]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801dfe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801dfe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dfec:	ee07 3a90 	vmov	s15, r3
 801dff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dff4:	ed97 6a03 	vldr	s12, [r7, #12]
 801dff8:	eddf 5a66 	vldr	s11, [pc, #408]	; 801e194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801dffc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e000:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e004:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e008:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e010:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e014:	e065      	b.n	801e0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e016:	697b      	ldr	r3, [r7, #20]
 801e018:	ee07 3a90 	vmov	s15, r3
 801e01c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e020:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801e19c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801e024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e028:	4b58      	ldr	r3, [pc, #352]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e02a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e02c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e030:	ee07 3a90 	vmov	s15, r3
 801e034:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e038:	ed97 6a03 	vldr	s12, [r7, #12]
 801e03c:	eddf 5a55 	vldr	s11, [pc, #340]	; 801e194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e040:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e044:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e048:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e04c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e050:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e054:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e058:	e043      	b.n	801e0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e05a:	697b      	ldr	r3, [r7, #20]
 801e05c:	ee07 3a90 	vmov	s15, r3
 801e060:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e064:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801e1a0 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801e068:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e06c:	4b47      	ldr	r3, [pc, #284]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e06e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e074:	ee07 3a90 	vmov	s15, r3
 801e078:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e07c:	ed97 6a03 	vldr	s12, [r7, #12]
 801e080:	eddf 5a44 	vldr	s11, [pc, #272]	; 801e194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e084:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e088:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e08c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e090:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e094:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e098:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e09c:	e021      	b.n	801e0e2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e09e:	697b      	ldr	r3, [r7, #20]
 801e0a0:	ee07 3a90 	vmov	s15, r3
 801e0a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0a8:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801e198 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e0ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e0b0:	4b36      	ldr	r3, [pc, #216]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e0b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e0b8:	ee07 3a90 	vmov	s15, r3
 801e0bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e0c0:	ed97 6a03 	vldr	s12, [r7, #12]
 801e0c4:	eddf 5a33 	vldr	s11, [pc, #204]	; 801e194 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e0c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e0cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e0d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e0d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e0dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e0e0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801e0e2:	4b2a      	ldr	r3, [pc, #168]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0e6:	0a5b      	lsrs	r3, r3, #9
 801e0e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e0ec:	ee07 3a90 	vmov	s15, r3
 801e0f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e0f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e0fc:	edd7 6a07 	vldr	s13, [r7, #28]
 801e100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e108:	ee17 2a90 	vmov	r2, s15
 801e10c:	687b      	ldr	r3, [r7, #4]
 801e10e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801e110:	4b1e      	ldr	r3, [pc, #120]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e114:	0c1b      	lsrs	r3, r3, #16
 801e116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e11a:	ee07 3a90 	vmov	s15, r3
 801e11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e122:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e126:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e12a:	edd7 6a07 	vldr	s13, [r7, #28]
 801e12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e136:	ee17 2a90 	vmov	r2, s15
 801e13a:	687b      	ldr	r3, [r7, #4]
 801e13c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801e13e:	4b13      	ldr	r3, [pc, #76]	; (801e18c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e142:	0e1b      	lsrs	r3, r3, #24
 801e144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e148:	ee07 3a90 	vmov	s15, r3
 801e14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e150:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e154:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e158:	edd7 6a07 	vldr	s13, [r7, #28]
 801e15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e164:	ee17 2a90 	vmov	r2, s15
 801e168:	687b      	ldr	r3, [r7, #4]
 801e16a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801e16c:	e008      	b.n	801e180 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	2200      	movs	r2, #0
 801e172:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801e174:	687b      	ldr	r3, [r7, #4]
 801e176:	2200      	movs	r2, #0
 801e178:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801e17a:	687b      	ldr	r3, [r7, #4]
 801e17c:	2200      	movs	r2, #0
 801e17e:	609a      	str	r2, [r3, #8]
}
 801e180:	bf00      	nop
 801e182:	3724      	adds	r7, #36	; 0x24
 801e184:	46bd      	mov	sp, r7
 801e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e18a:	4770      	bx	lr
 801e18c:	58024400 	.word	0x58024400
 801e190:	03d09000 	.word	0x03d09000
 801e194:	46000000 	.word	0x46000000
 801e198:	4c742400 	.word	0x4c742400
 801e19c:	4a742400 	.word	0x4a742400
 801e1a0:	4af42400 	.word	0x4af42400

0801e1a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801e1a4:	b580      	push	{r7, lr}
 801e1a6:	b084      	sub	sp, #16
 801e1a8:	af00      	add	r7, sp, #0
 801e1aa:	6078      	str	r0, [r7, #4]
 801e1ac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e1ae:	2300      	movs	r3, #0
 801e1b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e1b2:	4b53      	ldr	r3, [pc, #332]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e1b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1b6:	f003 0303 	and.w	r3, r3, #3
 801e1ba:	2b03      	cmp	r3, #3
 801e1bc:	d101      	bne.n	801e1c2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801e1be:	2301      	movs	r3, #1
 801e1c0:	e099      	b.n	801e2f6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801e1c2:	4b4f      	ldr	r3, [pc, #316]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e1c4:	681b      	ldr	r3, [r3, #0]
 801e1c6:	4a4e      	ldr	r2, [pc, #312]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e1c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801e1cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e1ce:	f7f6 ffe9 	bl	80151a4 <HAL_GetTick>
 801e1d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e1d4:	e008      	b.n	801e1e8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e1d6:	f7f6 ffe5 	bl	80151a4 <HAL_GetTick>
 801e1da:	4602      	mov	r2, r0
 801e1dc:	68bb      	ldr	r3, [r7, #8]
 801e1de:	1ad3      	subs	r3, r2, r3
 801e1e0:	2b02      	cmp	r3, #2
 801e1e2:	d901      	bls.n	801e1e8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e1e4:	2303      	movs	r3, #3
 801e1e6:	e086      	b.n	801e2f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e1e8:	4b45      	ldr	r3, [pc, #276]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e1f0:	2b00      	cmp	r3, #0
 801e1f2:	d1f0      	bne.n	801e1d6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801e1f4:	4b42      	ldr	r3, [pc, #264]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e1f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e1f8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	681b      	ldr	r3, [r3, #0]
 801e200:	031b      	lsls	r3, r3, #12
 801e202:	493f      	ldr	r1, [pc, #252]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e204:	4313      	orrs	r3, r2
 801e206:	628b      	str	r3, [r1, #40]	; 0x28
 801e208:	687b      	ldr	r3, [r7, #4]
 801e20a:	685b      	ldr	r3, [r3, #4]
 801e20c:	3b01      	subs	r3, #1
 801e20e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e212:	687b      	ldr	r3, [r7, #4]
 801e214:	689b      	ldr	r3, [r3, #8]
 801e216:	3b01      	subs	r3, #1
 801e218:	025b      	lsls	r3, r3, #9
 801e21a:	b29b      	uxth	r3, r3
 801e21c:	431a      	orrs	r2, r3
 801e21e:	687b      	ldr	r3, [r7, #4]
 801e220:	68db      	ldr	r3, [r3, #12]
 801e222:	3b01      	subs	r3, #1
 801e224:	041b      	lsls	r3, r3, #16
 801e226:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e22a:	431a      	orrs	r2, r3
 801e22c:	687b      	ldr	r3, [r7, #4]
 801e22e:	691b      	ldr	r3, [r3, #16]
 801e230:	3b01      	subs	r3, #1
 801e232:	061b      	lsls	r3, r3, #24
 801e234:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e238:	4931      	ldr	r1, [pc, #196]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e23a:	4313      	orrs	r3, r2
 801e23c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801e23e:	4b30      	ldr	r3, [pc, #192]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e242:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801e246:	687b      	ldr	r3, [r7, #4]
 801e248:	695b      	ldr	r3, [r3, #20]
 801e24a:	492d      	ldr	r1, [pc, #180]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e24c:	4313      	orrs	r3, r2
 801e24e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801e250:	4b2b      	ldr	r3, [pc, #172]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e254:	f023 0220 	bic.w	r2, r3, #32
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	699b      	ldr	r3, [r3, #24]
 801e25c:	4928      	ldr	r1, [pc, #160]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e25e:	4313      	orrs	r3, r2
 801e260:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801e262:	4b27      	ldr	r3, [pc, #156]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e266:	4a26      	ldr	r2, [pc, #152]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e268:	f023 0310 	bic.w	r3, r3, #16
 801e26c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801e26e:	4b24      	ldr	r3, [pc, #144]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e270:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e272:	4b24      	ldr	r3, [pc, #144]	; (801e304 <RCCEx_PLL2_Config+0x160>)
 801e274:	4013      	ands	r3, r2
 801e276:	687a      	ldr	r2, [r7, #4]
 801e278:	69d2      	ldr	r2, [r2, #28]
 801e27a:	00d2      	lsls	r2, r2, #3
 801e27c:	4920      	ldr	r1, [pc, #128]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e27e:	4313      	orrs	r3, r2
 801e280:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e282:	4b1f      	ldr	r3, [pc, #124]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e286:	4a1e      	ldr	r2, [pc, #120]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e288:	f043 0310 	orr.w	r3, r3, #16
 801e28c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e28e:	683b      	ldr	r3, [r7, #0]
 801e290:	2b00      	cmp	r3, #0
 801e292:	d106      	bne.n	801e2a2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e294:	4b1a      	ldr	r3, [pc, #104]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e298:	4a19      	ldr	r2, [pc, #100]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e29a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e29e:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e2a0:	e00f      	b.n	801e2c2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e2a2:	683b      	ldr	r3, [r7, #0]
 801e2a4:	2b01      	cmp	r3, #1
 801e2a6:	d106      	bne.n	801e2b6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e2a8:	4b15      	ldr	r3, [pc, #84]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e2aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2ac:	4a14      	ldr	r2, [pc, #80]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e2ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e2b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e2b4:	e005      	b.n	801e2c2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e2b6:	4b12      	ldr	r3, [pc, #72]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e2b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e2ba:	4a11      	ldr	r2, [pc, #68]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e2bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801e2c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e2c2:	4b0f      	ldr	r3, [pc, #60]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e2c4:	681b      	ldr	r3, [r3, #0]
 801e2c6:	4a0e      	ldr	r2, [pc, #56]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e2c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801e2cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e2ce:	f7f6 ff69 	bl	80151a4 <HAL_GetTick>
 801e2d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e2d4:	e008      	b.n	801e2e8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e2d6:	f7f6 ff65 	bl	80151a4 <HAL_GetTick>
 801e2da:	4602      	mov	r2, r0
 801e2dc:	68bb      	ldr	r3, [r7, #8]
 801e2de:	1ad3      	subs	r3, r2, r3
 801e2e0:	2b02      	cmp	r3, #2
 801e2e2:	d901      	bls.n	801e2e8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e2e4:	2303      	movs	r3, #3
 801e2e6:	e006      	b.n	801e2f6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e2e8:	4b05      	ldr	r3, [pc, #20]	; (801e300 <RCCEx_PLL2_Config+0x15c>)
 801e2ea:	681b      	ldr	r3, [r3, #0]
 801e2ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e2f0:	2b00      	cmp	r3, #0
 801e2f2:	d0f0      	beq.n	801e2d6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e2f6:	4618      	mov	r0, r3
 801e2f8:	3710      	adds	r7, #16
 801e2fa:	46bd      	mov	sp, r7
 801e2fc:	bd80      	pop	{r7, pc}
 801e2fe:	bf00      	nop
 801e300:	58024400 	.word	0x58024400
 801e304:	ffff0007 	.word	0xffff0007

0801e308 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801e308:	b580      	push	{r7, lr}
 801e30a:	b084      	sub	sp, #16
 801e30c:	af00      	add	r7, sp, #0
 801e30e:	6078      	str	r0, [r7, #4]
 801e310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e312:	2300      	movs	r3, #0
 801e314:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e316:	4b53      	ldr	r3, [pc, #332]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e31a:	f003 0303 	and.w	r3, r3, #3
 801e31e:	2b03      	cmp	r3, #3
 801e320:	d101      	bne.n	801e326 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801e322:	2301      	movs	r3, #1
 801e324:	e099      	b.n	801e45a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801e326:	4b4f      	ldr	r3, [pc, #316]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e328:	681b      	ldr	r3, [r3, #0]
 801e32a:	4a4e      	ldr	r2, [pc, #312]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e32c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e332:	f7f6 ff37 	bl	80151a4 <HAL_GetTick>
 801e336:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e338:	e008      	b.n	801e34c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e33a:	f7f6 ff33 	bl	80151a4 <HAL_GetTick>
 801e33e:	4602      	mov	r2, r0
 801e340:	68bb      	ldr	r3, [r7, #8]
 801e342:	1ad3      	subs	r3, r2, r3
 801e344:	2b02      	cmp	r3, #2
 801e346:	d901      	bls.n	801e34c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e348:	2303      	movs	r3, #3
 801e34a:	e086      	b.n	801e45a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e34c:	4b45      	ldr	r3, [pc, #276]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e34e:	681b      	ldr	r3, [r3, #0]
 801e350:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e354:	2b00      	cmp	r3, #0
 801e356:	d1f0      	bne.n	801e33a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e358:	4b42      	ldr	r3, [pc, #264]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e35a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e35c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	051b      	lsls	r3, r3, #20
 801e366:	493f      	ldr	r1, [pc, #252]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e368:	4313      	orrs	r3, r2
 801e36a:	628b      	str	r3, [r1, #40]	; 0x28
 801e36c:	687b      	ldr	r3, [r7, #4]
 801e36e:	685b      	ldr	r3, [r3, #4]
 801e370:	3b01      	subs	r3, #1
 801e372:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	689b      	ldr	r3, [r3, #8]
 801e37a:	3b01      	subs	r3, #1
 801e37c:	025b      	lsls	r3, r3, #9
 801e37e:	b29b      	uxth	r3, r3
 801e380:	431a      	orrs	r2, r3
 801e382:	687b      	ldr	r3, [r7, #4]
 801e384:	68db      	ldr	r3, [r3, #12]
 801e386:	3b01      	subs	r3, #1
 801e388:	041b      	lsls	r3, r3, #16
 801e38a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e38e:	431a      	orrs	r2, r3
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	691b      	ldr	r3, [r3, #16]
 801e394:	3b01      	subs	r3, #1
 801e396:	061b      	lsls	r3, r3, #24
 801e398:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e39c:	4931      	ldr	r1, [pc, #196]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e39e:	4313      	orrs	r3, r2
 801e3a0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e3a2:	4b30      	ldr	r3, [pc, #192]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	695b      	ldr	r3, [r3, #20]
 801e3ae:	492d      	ldr	r1, [pc, #180]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3b0:	4313      	orrs	r3, r2
 801e3b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e3b4:	4b2b      	ldr	r3, [pc, #172]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3b8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	699b      	ldr	r3, [r3, #24]
 801e3c0:	4928      	ldr	r1, [pc, #160]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3c2:	4313      	orrs	r3, r2
 801e3c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e3c6:	4b27      	ldr	r3, [pc, #156]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3ca:	4a26      	ldr	r2, [pc, #152]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e3d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e3d2:	4b24      	ldr	r3, [pc, #144]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e3d6:	4b24      	ldr	r3, [pc, #144]	; (801e468 <RCCEx_PLL3_Config+0x160>)
 801e3d8:	4013      	ands	r3, r2
 801e3da:	687a      	ldr	r2, [r7, #4]
 801e3dc:	69d2      	ldr	r2, [r2, #28]
 801e3de:	00d2      	lsls	r2, r2, #3
 801e3e0:	4920      	ldr	r1, [pc, #128]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3e2:	4313      	orrs	r3, r2
 801e3e4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e3e6:	4b1f      	ldr	r3, [pc, #124]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3ea:	4a1e      	ldr	r2, [pc, #120]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e3f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e3f2:	683b      	ldr	r3, [r7, #0]
 801e3f4:	2b00      	cmp	r3, #0
 801e3f6:	d106      	bne.n	801e406 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e3f8:	4b1a      	ldr	r3, [pc, #104]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3fc:	4a19      	ldr	r2, [pc, #100]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e3fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801e402:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e404:	e00f      	b.n	801e426 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e406:	683b      	ldr	r3, [r7, #0]
 801e408:	2b01      	cmp	r3, #1
 801e40a:	d106      	bne.n	801e41a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e40c:	4b15      	ldr	r3, [pc, #84]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e40e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e410:	4a14      	ldr	r2, [pc, #80]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e412:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801e416:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e418:	e005      	b.n	801e426 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e41a:	4b12      	ldr	r3, [pc, #72]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e41c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e41e:	4a11      	ldr	r2, [pc, #68]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e420:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e424:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e426:	4b0f      	ldr	r3, [pc, #60]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e428:	681b      	ldr	r3, [r3, #0]
 801e42a:	4a0e      	ldr	r2, [pc, #56]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e42c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e432:	f7f6 feb7 	bl	80151a4 <HAL_GetTick>
 801e436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e438:	e008      	b.n	801e44c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e43a:	f7f6 feb3 	bl	80151a4 <HAL_GetTick>
 801e43e:	4602      	mov	r2, r0
 801e440:	68bb      	ldr	r3, [r7, #8]
 801e442:	1ad3      	subs	r3, r2, r3
 801e444:	2b02      	cmp	r3, #2
 801e446:	d901      	bls.n	801e44c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e448:	2303      	movs	r3, #3
 801e44a:	e006      	b.n	801e45a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e44c:	4b05      	ldr	r3, [pc, #20]	; (801e464 <RCCEx_PLL3_Config+0x15c>)
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e454:	2b00      	cmp	r3, #0
 801e456:	d0f0      	beq.n	801e43a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e458:	7bfb      	ldrb	r3, [r7, #15]
}
 801e45a:	4618      	mov	r0, r3
 801e45c:	3710      	adds	r7, #16
 801e45e:	46bd      	mov	sp, r7
 801e460:	bd80      	pop	{r7, pc}
 801e462:	bf00      	nop
 801e464:	58024400 	.word	0x58024400
 801e468:	ffff0007 	.word	0xffff0007

0801e46c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e46c:	b580      	push	{r7, lr}
 801e46e:	b082      	sub	sp, #8
 801e470:	af00      	add	r7, sp, #0
 801e472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e474:	687b      	ldr	r3, [r7, #4]
 801e476:	2b00      	cmp	r3, #0
 801e478:	d101      	bne.n	801e47e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e47a:	2301      	movs	r3, #1
 801e47c:	e049      	b.n	801e512 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e47e:	687b      	ldr	r3, [r7, #4]
 801e480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e484:	b2db      	uxtb	r3, r3
 801e486:	2b00      	cmp	r3, #0
 801e488:	d106      	bne.n	801e498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	2200      	movs	r2, #0
 801e48e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e492:	6878      	ldr	r0, [r7, #4]
 801e494:	f7f6 f88a 	bl	80145ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	2202      	movs	r2, #2
 801e49c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e4a0:	687b      	ldr	r3, [r7, #4]
 801e4a2:	681a      	ldr	r2, [r3, #0]
 801e4a4:	687b      	ldr	r3, [r7, #4]
 801e4a6:	3304      	adds	r3, #4
 801e4a8:	4619      	mov	r1, r3
 801e4aa:	4610      	mov	r0, r2
 801e4ac:	f001 f9e2 	bl	801f874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	2201      	movs	r2, #1
 801e4b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e4b8:	687b      	ldr	r3, [r7, #4]
 801e4ba:	2201      	movs	r2, #1
 801e4bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	2201      	movs	r2, #1
 801e4c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e4c8:	687b      	ldr	r3, [r7, #4]
 801e4ca:	2201      	movs	r2, #1
 801e4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e4d0:	687b      	ldr	r3, [r7, #4]
 801e4d2:	2201      	movs	r2, #1
 801e4d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e4d8:	687b      	ldr	r3, [r7, #4]
 801e4da:	2201      	movs	r2, #1
 801e4dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e4e0:	687b      	ldr	r3, [r7, #4]
 801e4e2:	2201      	movs	r2, #1
 801e4e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e4e8:	687b      	ldr	r3, [r7, #4]
 801e4ea:	2201      	movs	r2, #1
 801e4ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	2201      	movs	r2, #1
 801e4f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e4f8:	687b      	ldr	r3, [r7, #4]
 801e4fa:	2201      	movs	r2, #1
 801e4fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e500:	687b      	ldr	r3, [r7, #4]
 801e502:	2201      	movs	r2, #1
 801e504:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e508:	687b      	ldr	r3, [r7, #4]
 801e50a:	2201      	movs	r2, #1
 801e50c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e510:	2300      	movs	r3, #0
}
 801e512:	4618      	mov	r0, r3
 801e514:	3708      	adds	r7, #8
 801e516:	46bd      	mov	sp, r7
 801e518:	bd80      	pop	{r7, pc}
	...

0801e51c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801e51c:	b480      	push	{r7}
 801e51e:	b085      	sub	sp, #20
 801e520:	af00      	add	r7, sp, #0
 801e522:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e524:	687b      	ldr	r3, [r7, #4]
 801e526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e52a:	b2db      	uxtb	r3, r3
 801e52c:	2b01      	cmp	r3, #1
 801e52e:	d001      	beq.n	801e534 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801e530:	2301      	movs	r3, #1
 801e532:	e056      	b.n	801e5e2 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	2202      	movs	r2, #2
 801e538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	4a2b      	ldr	r2, [pc, #172]	; (801e5f0 <HAL_TIM_Base_Start+0xd4>)
 801e542:	4293      	cmp	r3, r2
 801e544:	d02c      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e546:	687b      	ldr	r3, [r7, #4]
 801e548:	681b      	ldr	r3, [r3, #0]
 801e54a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e54e:	d027      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	4a27      	ldr	r2, [pc, #156]	; (801e5f4 <HAL_TIM_Base_Start+0xd8>)
 801e556:	4293      	cmp	r3, r2
 801e558:	d022      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	681b      	ldr	r3, [r3, #0]
 801e55e:	4a26      	ldr	r2, [pc, #152]	; (801e5f8 <HAL_TIM_Base_Start+0xdc>)
 801e560:	4293      	cmp	r3, r2
 801e562:	d01d      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	681b      	ldr	r3, [r3, #0]
 801e568:	4a24      	ldr	r2, [pc, #144]	; (801e5fc <HAL_TIM_Base_Start+0xe0>)
 801e56a:	4293      	cmp	r3, r2
 801e56c:	d018      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e56e:	687b      	ldr	r3, [r7, #4]
 801e570:	681b      	ldr	r3, [r3, #0]
 801e572:	4a23      	ldr	r2, [pc, #140]	; (801e600 <HAL_TIM_Base_Start+0xe4>)
 801e574:	4293      	cmp	r3, r2
 801e576:	d013      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	681b      	ldr	r3, [r3, #0]
 801e57c:	4a21      	ldr	r2, [pc, #132]	; (801e604 <HAL_TIM_Base_Start+0xe8>)
 801e57e:	4293      	cmp	r3, r2
 801e580:	d00e      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	681b      	ldr	r3, [r3, #0]
 801e586:	4a20      	ldr	r2, [pc, #128]	; (801e608 <HAL_TIM_Base_Start+0xec>)
 801e588:	4293      	cmp	r3, r2
 801e58a:	d009      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	681b      	ldr	r3, [r3, #0]
 801e590:	4a1e      	ldr	r2, [pc, #120]	; (801e60c <HAL_TIM_Base_Start+0xf0>)
 801e592:	4293      	cmp	r3, r2
 801e594:	d004      	beq.n	801e5a0 <HAL_TIM_Base_Start+0x84>
 801e596:	687b      	ldr	r3, [r7, #4]
 801e598:	681b      	ldr	r3, [r3, #0]
 801e59a:	4a1d      	ldr	r2, [pc, #116]	; (801e610 <HAL_TIM_Base_Start+0xf4>)
 801e59c:	4293      	cmp	r3, r2
 801e59e:	d115      	bne.n	801e5cc <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e5a0:	687b      	ldr	r3, [r7, #4]
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	689a      	ldr	r2, [r3, #8]
 801e5a6:	4b1b      	ldr	r3, [pc, #108]	; (801e614 <HAL_TIM_Base_Start+0xf8>)
 801e5a8:	4013      	ands	r3, r2
 801e5aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e5ac:	68fb      	ldr	r3, [r7, #12]
 801e5ae:	2b06      	cmp	r3, #6
 801e5b0:	d015      	beq.n	801e5de <HAL_TIM_Base_Start+0xc2>
 801e5b2:	68fb      	ldr	r3, [r7, #12]
 801e5b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e5b8:	d011      	beq.n	801e5de <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801e5ba:	687b      	ldr	r3, [r7, #4]
 801e5bc:	681b      	ldr	r3, [r3, #0]
 801e5be:	681a      	ldr	r2, [r3, #0]
 801e5c0:	687b      	ldr	r3, [r7, #4]
 801e5c2:	681b      	ldr	r3, [r3, #0]
 801e5c4:	f042 0201 	orr.w	r2, r2, #1
 801e5c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e5ca:	e008      	b.n	801e5de <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	681b      	ldr	r3, [r3, #0]
 801e5d0:	681a      	ldr	r2, [r3, #0]
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	f042 0201 	orr.w	r2, r2, #1
 801e5da:	601a      	str	r2, [r3, #0]
 801e5dc:	e000      	b.n	801e5e0 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e5de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e5e0:	2300      	movs	r3, #0
}
 801e5e2:	4618      	mov	r0, r3
 801e5e4:	3714      	adds	r7, #20
 801e5e6:	46bd      	mov	sp, r7
 801e5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5ec:	4770      	bx	lr
 801e5ee:	bf00      	nop
 801e5f0:	40010000 	.word	0x40010000
 801e5f4:	40000400 	.word	0x40000400
 801e5f8:	40000800 	.word	0x40000800
 801e5fc:	40000c00 	.word	0x40000c00
 801e600:	40010400 	.word	0x40010400
 801e604:	40001800 	.word	0x40001800
 801e608:	40014000 	.word	0x40014000
 801e60c:	4000e000 	.word	0x4000e000
 801e610:	4000e400 	.word	0x4000e400
 801e614:	00010007 	.word	0x00010007

0801e618 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e618:	b480      	push	{r7}
 801e61a:	b085      	sub	sp, #20
 801e61c:	af00      	add	r7, sp, #0
 801e61e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e626:	b2db      	uxtb	r3, r3
 801e628:	2b01      	cmp	r3, #1
 801e62a:	d001      	beq.n	801e630 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e62c:	2301      	movs	r3, #1
 801e62e:	e05e      	b.n	801e6ee <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e630:	687b      	ldr	r3, [r7, #4]
 801e632:	2202      	movs	r2, #2
 801e634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	681b      	ldr	r3, [r3, #0]
 801e63c:	68da      	ldr	r2, [r3, #12]
 801e63e:	687b      	ldr	r3, [r7, #4]
 801e640:	681b      	ldr	r3, [r3, #0]
 801e642:	f042 0201 	orr.w	r2, r2, #1
 801e646:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e648:	687b      	ldr	r3, [r7, #4]
 801e64a:	681b      	ldr	r3, [r3, #0]
 801e64c:	4a2b      	ldr	r2, [pc, #172]	; (801e6fc <HAL_TIM_Base_Start_IT+0xe4>)
 801e64e:	4293      	cmp	r3, r2
 801e650:	d02c      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e65a:	d027      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	681b      	ldr	r3, [r3, #0]
 801e660:	4a27      	ldr	r2, [pc, #156]	; (801e700 <HAL_TIM_Base_Start_IT+0xe8>)
 801e662:	4293      	cmp	r3, r2
 801e664:	d022      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e666:	687b      	ldr	r3, [r7, #4]
 801e668:	681b      	ldr	r3, [r3, #0]
 801e66a:	4a26      	ldr	r2, [pc, #152]	; (801e704 <HAL_TIM_Base_Start_IT+0xec>)
 801e66c:	4293      	cmp	r3, r2
 801e66e:	d01d      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e670:	687b      	ldr	r3, [r7, #4]
 801e672:	681b      	ldr	r3, [r3, #0]
 801e674:	4a24      	ldr	r2, [pc, #144]	; (801e708 <HAL_TIM_Base_Start_IT+0xf0>)
 801e676:	4293      	cmp	r3, r2
 801e678:	d018      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	681b      	ldr	r3, [r3, #0]
 801e67e:	4a23      	ldr	r2, [pc, #140]	; (801e70c <HAL_TIM_Base_Start_IT+0xf4>)
 801e680:	4293      	cmp	r3, r2
 801e682:	d013      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	681b      	ldr	r3, [r3, #0]
 801e688:	4a21      	ldr	r2, [pc, #132]	; (801e710 <HAL_TIM_Base_Start_IT+0xf8>)
 801e68a:	4293      	cmp	r3, r2
 801e68c:	d00e      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e68e:	687b      	ldr	r3, [r7, #4]
 801e690:	681b      	ldr	r3, [r3, #0]
 801e692:	4a20      	ldr	r2, [pc, #128]	; (801e714 <HAL_TIM_Base_Start_IT+0xfc>)
 801e694:	4293      	cmp	r3, r2
 801e696:	d009      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e698:	687b      	ldr	r3, [r7, #4]
 801e69a:	681b      	ldr	r3, [r3, #0]
 801e69c:	4a1e      	ldr	r2, [pc, #120]	; (801e718 <HAL_TIM_Base_Start_IT+0x100>)
 801e69e:	4293      	cmp	r3, r2
 801e6a0:	d004      	beq.n	801e6ac <HAL_TIM_Base_Start_IT+0x94>
 801e6a2:	687b      	ldr	r3, [r7, #4]
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	4a1d      	ldr	r2, [pc, #116]	; (801e71c <HAL_TIM_Base_Start_IT+0x104>)
 801e6a8:	4293      	cmp	r3, r2
 801e6aa:	d115      	bne.n	801e6d8 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e6ac:	687b      	ldr	r3, [r7, #4]
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	689a      	ldr	r2, [r3, #8]
 801e6b2:	4b1b      	ldr	r3, [pc, #108]	; (801e720 <HAL_TIM_Base_Start_IT+0x108>)
 801e6b4:	4013      	ands	r3, r2
 801e6b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e6b8:	68fb      	ldr	r3, [r7, #12]
 801e6ba:	2b06      	cmp	r3, #6
 801e6bc:	d015      	beq.n	801e6ea <HAL_TIM_Base_Start_IT+0xd2>
 801e6be:	68fb      	ldr	r3, [r7, #12]
 801e6c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e6c4:	d011      	beq.n	801e6ea <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801e6c6:	687b      	ldr	r3, [r7, #4]
 801e6c8:	681b      	ldr	r3, [r3, #0]
 801e6ca:	681a      	ldr	r2, [r3, #0]
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	f042 0201 	orr.w	r2, r2, #1
 801e6d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e6d6:	e008      	b.n	801e6ea <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	681b      	ldr	r3, [r3, #0]
 801e6dc:	681a      	ldr	r2, [r3, #0]
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	f042 0201 	orr.w	r2, r2, #1
 801e6e6:	601a      	str	r2, [r3, #0]
 801e6e8:	e000      	b.n	801e6ec <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e6ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e6ec:	2300      	movs	r3, #0
}
 801e6ee:	4618      	mov	r0, r3
 801e6f0:	3714      	adds	r7, #20
 801e6f2:	46bd      	mov	sp, r7
 801e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6f8:	4770      	bx	lr
 801e6fa:	bf00      	nop
 801e6fc:	40010000 	.word	0x40010000
 801e700:	40000400 	.word	0x40000400
 801e704:	40000800 	.word	0x40000800
 801e708:	40000c00 	.word	0x40000c00
 801e70c:	40010400 	.word	0x40010400
 801e710:	40001800 	.word	0x40001800
 801e714:	40014000 	.word	0x40014000
 801e718:	4000e000 	.word	0x4000e000
 801e71c:	4000e400 	.word	0x4000e400
 801e720:	00010007 	.word	0x00010007

0801e724 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801e724:	b480      	push	{r7}
 801e726:	b083      	sub	sp, #12
 801e728:	af00      	add	r7, sp, #0
 801e72a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	681b      	ldr	r3, [r3, #0]
 801e730:	68da      	ldr	r2, [r3, #12]
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	f022 0201 	bic.w	r2, r2, #1
 801e73a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e73c:	687b      	ldr	r3, [r7, #4]
 801e73e:	681b      	ldr	r3, [r3, #0]
 801e740:	6a1a      	ldr	r2, [r3, #32]
 801e742:	f241 1311 	movw	r3, #4369	; 0x1111
 801e746:	4013      	ands	r3, r2
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d10f      	bne.n	801e76c <HAL_TIM_Base_Stop_IT+0x48>
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	681b      	ldr	r3, [r3, #0]
 801e750:	6a1a      	ldr	r2, [r3, #32]
 801e752:	f240 4344 	movw	r3, #1092	; 0x444
 801e756:	4013      	ands	r3, r2
 801e758:	2b00      	cmp	r3, #0
 801e75a:	d107      	bne.n	801e76c <HAL_TIM_Base_Stop_IT+0x48>
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	681a      	ldr	r2, [r3, #0]
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	f022 0201 	bic.w	r2, r2, #1
 801e76a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	2201      	movs	r2, #1
 801e770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e774:	2300      	movs	r3, #0
}
 801e776:	4618      	mov	r0, r3
 801e778:	370c      	adds	r7, #12
 801e77a:	46bd      	mov	sp, r7
 801e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e780:	4770      	bx	lr

0801e782 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e782:	b580      	push	{r7, lr}
 801e784:	b082      	sub	sp, #8
 801e786:	af00      	add	r7, sp, #0
 801e788:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	2b00      	cmp	r3, #0
 801e78e:	d101      	bne.n	801e794 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e790:	2301      	movs	r3, #1
 801e792:	e049      	b.n	801e828 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e794:	687b      	ldr	r3, [r7, #4]
 801e796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e79a:	b2db      	uxtb	r3, r3
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	d106      	bne.n	801e7ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e7a0:	687b      	ldr	r3, [r7, #4]
 801e7a2:	2200      	movs	r2, #0
 801e7a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e7a8:	6878      	ldr	r0, [r7, #4]
 801e7aa:	f000 f841 	bl	801e830 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e7ae:	687b      	ldr	r3, [r7, #4]
 801e7b0:	2202      	movs	r2, #2
 801e7b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e7b6:	687b      	ldr	r3, [r7, #4]
 801e7b8:	681a      	ldr	r2, [r3, #0]
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	3304      	adds	r3, #4
 801e7be:	4619      	mov	r1, r3
 801e7c0:	4610      	mov	r0, r2
 801e7c2:	f001 f857 	bl	801f874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e7c6:	687b      	ldr	r3, [r7, #4]
 801e7c8:	2201      	movs	r2, #1
 801e7ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	2201      	movs	r2, #1
 801e7d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e7d6:	687b      	ldr	r3, [r7, #4]
 801e7d8:	2201      	movs	r2, #1
 801e7da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e7de:	687b      	ldr	r3, [r7, #4]
 801e7e0:	2201      	movs	r2, #1
 801e7e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e7e6:	687b      	ldr	r3, [r7, #4]
 801e7e8:	2201      	movs	r2, #1
 801e7ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e7ee:	687b      	ldr	r3, [r7, #4]
 801e7f0:	2201      	movs	r2, #1
 801e7f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	2201      	movs	r2, #1
 801e7fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e7fe:	687b      	ldr	r3, [r7, #4]
 801e800:	2201      	movs	r2, #1
 801e802:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e806:	687b      	ldr	r3, [r7, #4]
 801e808:	2201      	movs	r2, #1
 801e80a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	2201      	movs	r2, #1
 801e812:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e816:	687b      	ldr	r3, [r7, #4]
 801e818:	2201      	movs	r2, #1
 801e81a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e81e:	687b      	ldr	r3, [r7, #4]
 801e820:	2201      	movs	r2, #1
 801e822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e826:	2300      	movs	r3, #0
}
 801e828:	4618      	mov	r0, r3
 801e82a:	3708      	adds	r7, #8
 801e82c:	46bd      	mov	sp, r7
 801e82e:	bd80      	pop	{r7, pc}

0801e830 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801e830:	b480      	push	{r7}
 801e832:	b083      	sub	sp, #12
 801e834:	af00      	add	r7, sp, #0
 801e836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801e838:	bf00      	nop
 801e83a:	370c      	adds	r7, #12
 801e83c:	46bd      	mov	sp, r7
 801e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e842:	4770      	bx	lr

0801e844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e844:	b580      	push	{r7, lr}
 801e846:	b084      	sub	sp, #16
 801e848:	af00      	add	r7, sp, #0
 801e84a:	6078      	str	r0, [r7, #4]
 801e84c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e84e:	683b      	ldr	r3, [r7, #0]
 801e850:	2b00      	cmp	r3, #0
 801e852:	d109      	bne.n	801e868 <HAL_TIM_PWM_Start+0x24>
 801e854:	687b      	ldr	r3, [r7, #4]
 801e856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e85a:	b2db      	uxtb	r3, r3
 801e85c:	2b01      	cmp	r3, #1
 801e85e:	bf14      	ite	ne
 801e860:	2301      	movne	r3, #1
 801e862:	2300      	moveq	r3, #0
 801e864:	b2db      	uxtb	r3, r3
 801e866:	e03c      	b.n	801e8e2 <HAL_TIM_PWM_Start+0x9e>
 801e868:	683b      	ldr	r3, [r7, #0]
 801e86a:	2b04      	cmp	r3, #4
 801e86c:	d109      	bne.n	801e882 <HAL_TIM_PWM_Start+0x3e>
 801e86e:	687b      	ldr	r3, [r7, #4]
 801e870:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801e874:	b2db      	uxtb	r3, r3
 801e876:	2b01      	cmp	r3, #1
 801e878:	bf14      	ite	ne
 801e87a:	2301      	movne	r3, #1
 801e87c:	2300      	moveq	r3, #0
 801e87e:	b2db      	uxtb	r3, r3
 801e880:	e02f      	b.n	801e8e2 <HAL_TIM_PWM_Start+0x9e>
 801e882:	683b      	ldr	r3, [r7, #0]
 801e884:	2b08      	cmp	r3, #8
 801e886:	d109      	bne.n	801e89c <HAL_TIM_PWM_Start+0x58>
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e88e:	b2db      	uxtb	r3, r3
 801e890:	2b01      	cmp	r3, #1
 801e892:	bf14      	ite	ne
 801e894:	2301      	movne	r3, #1
 801e896:	2300      	moveq	r3, #0
 801e898:	b2db      	uxtb	r3, r3
 801e89a:	e022      	b.n	801e8e2 <HAL_TIM_PWM_Start+0x9e>
 801e89c:	683b      	ldr	r3, [r7, #0]
 801e89e:	2b0c      	cmp	r3, #12
 801e8a0:	d109      	bne.n	801e8b6 <HAL_TIM_PWM_Start+0x72>
 801e8a2:	687b      	ldr	r3, [r7, #4]
 801e8a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e8a8:	b2db      	uxtb	r3, r3
 801e8aa:	2b01      	cmp	r3, #1
 801e8ac:	bf14      	ite	ne
 801e8ae:	2301      	movne	r3, #1
 801e8b0:	2300      	moveq	r3, #0
 801e8b2:	b2db      	uxtb	r3, r3
 801e8b4:	e015      	b.n	801e8e2 <HAL_TIM_PWM_Start+0x9e>
 801e8b6:	683b      	ldr	r3, [r7, #0]
 801e8b8:	2b10      	cmp	r3, #16
 801e8ba:	d109      	bne.n	801e8d0 <HAL_TIM_PWM_Start+0x8c>
 801e8bc:	687b      	ldr	r3, [r7, #4]
 801e8be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e8c2:	b2db      	uxtb	r3, r3
 801e8c4:	2b01      	cmp	r3, #1
 801e8c6:	bf14      	ite	ne
 801e8c8:	2301      	movne	r3, #1
 801e8ca:	2300      	moveq	r3, #0
 801e8cc:	b2db      	uxtb	r3, r3
 801e8ce:	e008      	b.n	801e8e2 <HAL_TIM_PWM_Start+0x9e>
 801e8d0:	687b      	ldr	r3, [r7, #4]
 801e8d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801e8d6:	b2db      	uxtb	r3, r3
 801e8d8:	2b01      	cmp	r3, #1
 801e8da:	bf14      	ite	ne
 801e8dc:	2301      	movne	r3, #1
 801e8de:	2300      	moveq	r3, #0
 801e8e0:	b2db      	uxtb	r3, r3
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d001      	beq.n	801e8ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801e8e6:	2301      	movs	r3, #1
 801e8e8:	e0ab      	b.n	801ea42 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801e8ea:	683b      	ldr	r3, [r7, #0]
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	d104      	bne.n	801e8fa <HAL_TIM_PWM_Start+0xb6>
 801e8f0:	687b      	ldr	r3, [r7, #4]
 801e8f2:	2202      	movs	r2, #2
 801e8f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e8f8:	e023      	b.n	801e942 <HAL_TIM_PWM_Start+0xfe>
 801e8fa:	683b      	ldr	r3, [r7, #0]
 801e8fc:	2b04      	cmp	r3, #4
 801e8fe:	d104      	bne.n	801e90a <HAL_TIM_PWM_Start+0xc6>
 801e900:	687b      	ldr	r3, [r7, #4]
 801e902:	2202      	movs	r2, #2
 801e904:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e908:	e01b      	b.n	801e942 <HAL_TIM_PWM_Start+0xfe>
 801e90a:	683b      	ldr	r3, [r7, #0]
 801e90c:	2b08      	cmp	r3, #8
 801e90e:	d104      	bne.n	801e91a <HAL_TIM_PWM_Start+0xd6>
 801e910:	687b      	ldr	r3, [r7, #4]
 801e912:	2202      	movs	r2, #2
 801e914:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e918:	e013      	b.n	801e942 <HAL_TIM_PWM_Start+0xfe>
 801e91a:	683b      	ldr	r3, [r7, #0]
 801e91c:	2b0c      	cmp	r3, #12
 801e91e:	d104      	bne.n	801e92a <HAL_TIM_PWM_Start+0xe6>
 801e920:	687b      	ldr	r3, [r7, #4]
 801e922:	2202      	movs	r2, #2
 801e924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e928:	e00b      	b.n	801e942 <HAL_TIM_PWM_Start+0xfe>
 801e92a:	683b      	ldr	r3, [r7, #0]
 801e92c:	2b10      	cmp	r3, #16
 801e92e:	d104      	bne.n	801e93a <HAL_TIM_PWM_Start+0xf6>
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	2202      	movs	r2, #2
 801e934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e938:	e003      	b.n	801e942 <HAL_TIM_PWM_Start+0xfe>
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	2202      	movs	r2, #2
 801e93e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	681b      	ldr	r3, [r3, #0]
 801e946:	2201      	movs	r2, #1
 801e948:	6839      	ldr	r1, [r7, #0]
 801e94a:	4618      	mov	r0, r3
 801e94c:	f001 fce2 	bl	8020314 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801e950:	687b      	ldr	r3, [r7, #4]
 801e952:	681b      	ldr	r3, [r3, #0]
 801e954:	4a3d      	ldr	r2, [pc, #244]	; (801ea4c <HAL_TIM_PWM_Start+0x208>)
 801e956:	4293      	cmp	r3, r2
 801e958:	d013      	beq.n	801e982 <HAL_TIM_PWM_Start+0x13e>
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	4a3c      	ldr	r2, [pc, #240]	; (801ea50 <HAL_TIM_PWM_Start+0x20c>)
 801e960:	4293      	cmp	r3, r2
 801e962:	d00e      	beq.n	801e982 <HAL_TIM_PWM_Start+0x13e>
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	4a3a      	ldr	r2, [pc, #232]	; (801ea54 <HAL_TIM_PWM_Start+0x210>)
 801e96a:	4293      	cmp	r3, r2
 801e96c:	d009      	beq.n	801e982 <HAL_TIM_PWM_Start+0x13e>
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	4a39      	ldr	r2, [pc, #228]	; (801ea58 <HAL_TIM_PWM_Start+0x214>)
 801e974:	4293      	cmp	r3, r2
 801e976:	d004      	beq.n	801e982 <HAL_TIM_PWM_Start+0x13e>
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	4a37      	ldr	r2, [pc, #220]	; (801ea5c <HAL_TIM_PWM_Start+0x218>)
 801e97e:	4293      	cmp	r3, r2
 801e980:	d101      	bne.n	801e986 <HAL_TIM_PWM_Start+0x142>
 801e982:	2301      	movs	r3, #1
 801e984:	e000      	b.n	801e988 <HAL_TIM_PWM_Start+0x144>
 801e986:	2300      	movs	r3, #0
 801e988:	2b00      	cmp	r3, #0
 801e98a:	d007      	beq.n	801e99c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801e98c:	687b      	ldr	r3, [r7, #4]
 801e98e:	681b      	ldr	r3, [r3, #0]
 801e990:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	681b      	ldr	r3, [r3, #0]
 801e996:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801e99a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e99c:	687b      	ldr	r3, [r7, #4]
 801e99e:	681b      	ldr	r3, [r3, #0]
 801e9a0:	4a2a      	ldr	r2, [pc, #168]	; (801ea4c <HAL_TIM_PWM_Start+0x208>)
 801e9a2:	4293      	cmp	r3, r2
 801e9a4:	d02c      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9a6:	687b      	ldr	r3, [r7, #4]
 801e9a8:	681b      	ldr	r3, [r3, #0]
 801e9aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e9ae:	d027      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9b0:	687b      	ldr	r3, [r7, #4]
 801e9b2:	681b      	ldr	r3, [r3, #0]
 801e9b4:	4a2a      	ldr	r2, [pc, #168]	; (801ea60 <HAL_TIM_PWM_Start+0x21c>)
 801e9b6:	4293      	cmp	r3, r2
 801e9b8:	d022      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	4a29      	ldr	r2, [pc, #164]	; (801ea64 <HAL_TIM_PWM_Start+0x220>)
 801e9c0:	4293      	cmp	r3, r2
 801e9c2:	d01d      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	4a27      	ldr	r2, [pc, #156]	; (801ea68 <HAL_TIM_PWM_Start+0x224>)
 801e9ca:	4293      	cmp	r3, r2
 801e9cc:	d018      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	4a1f      	ldr	r2, [pc, #124]	; (801ea50 <HAL_TIM_PWM_Start+0x20c>)
 801e9d4:	4293      	cmp	r3, r2
 801e9d6:	d013      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9d8:	687b      	ldr	r3, [r7, #4]
 801e9da:	681b      	ldr	r3, [r3, #0]
 801e9dc:	4a23      	ldr	r2, [pc, #140]	; (801ea6c <HAL_TIM_PWM_Start+0x228>)
 801e9de:	4293      	cmp	r3, r2
 801e9e0:	d00e      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	681b      	ldr	r3, [r3, #0]
 801e9e6:	4a1b      	ldr	r2, [pc, #108]	; (801ea54 <HAL_TIM_PWM_Start+0x210>)
 801e9e8:	4293      	cmp	r3, r2
 801e9ea:	d009      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	681b      	ldr	r3, [r3, #0]
 801e9f0:	4a1f      	ldr	r2, [pc, #124]	; (801ea70 <HAL_TIM_PWM_Start+0x22c>)
 801e9f2:	4293      	cmp	r3, r2
 801e9f4:	d004      	beq.n	801ea00 <HAL_TIM_PWM_Start+0x1bc>
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	4a1e      	ldr	r2, [pc, #120]	; (801ea74 <HAL_TIM_PWM_Start+0x230>)
 801e9fc:	4293      	cmp	r3, r2
 801e9fe:	d115      	bne.n	801ea2c <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ea00:	687b      	ldr	r3, [r7, #4]
 801ea02:	681b      	ldr	r3, [r3, #0]
 801ea04:	689a      	ldr	r2, [r3, #8]
 801ea06:	4b1c      	ldr	r3, [pc, #112]	; (801ea78 <HAL_TIM_PWM_Start+0x234>)
 801ea08:	4013      	ands	r3, r2
 801ea0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea0c:	68fb      	ldr	r3, [r7, #12]
 801ea0e:	2b06      	cmp	r3, #6
 801ea10:	d015      	beq.n	801ea3e <HAL_TIM_PWM_Start+0x1fa>
 801ea12:	68fb      	ldr	r3, [r7, #12]
 801ea14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ea18:	d011      	beq.n	801ea3e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801ea1a:	687b      	ldr	r3, [r7, #4]
 801ea1c:	681b      	ldr	r3, [r3, #0]
 801ea1e:	681a      	ldr	r2, [r3, #0]
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	681b      	ldr	r3, [r3, #0]
 801ea24:	f042 0201 	orr.w	r2, r2, #1
 801ea28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea2a:	e008      	b.n	801ea3e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	681a      	ldr	r2, [r3, #0]
 801ea32:	687b      	ldr	r3, [r7, #4]
 801ea34:	681b      	ldr	r3, [r3, #0]
 801ea36:	f042 0201 	orr.w	r2, r2, #1
 801ea3a:	601a      	str	r2, [r3, #0]
 801ea3c:	e000      	b.n	801ea40 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ea3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ea40:	2300      	movs	r3, #0
}
 801ea42:	4618      	mov	r0, r3
 801ea44:	3710      	adds	r7, #16
 801ea46:	46bd      	mov	sp, r7
 801ea48:	bd80      	pop	{r7, pc}
 801ea4a:	bf00      	nop
 801ea4c:	40010000 	.word	0x40010000
 801ea50:	40010400 	.word	0x40010400
 801ea54:	40014000 	.word	0x40014000
 801ea58:	40014400 	.word	0x40014400
 801ea5c:	40014800 	.word	0x40014800
 801ea60:	40000400 	.word	0x40000400
 801ea64:	40000800 	.word	0x40000800
 801ea68:	40000c00 	.word	0x40000c00
 801ea6c:	40001800 	.word	0x40001800
 801ea70:	4000e000 	.word	0x4000e000
 801ea74:	4000e400 	.word	0x4000e400
 801ea78:	00010007 	.word	0x00010007

0801ea7c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801ea7c:	b580      	push	{r7, lr}
 801ea7e:	b082      	sub	sp, #8
 801ea80:	af00      	add	r7, sp, #0
 801ea82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2b00      	cmp	r3, #0
 801ea88:	d101      	bne.n	801ea8e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801ea8a:	2301      	movs	r3, #1
 801ea8c:	e049      	b.n	801eb22 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ea94:	b2db      	uxtb	r3, r3
 801ea96:	2b00      	cmp	r3, #0
 801ea98:	d106      	bne.n	801eaa8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	2200      	movs	r2, #0
 801ea9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801eaa2:	6878      	ldr	r0, [r7, #4]
 801eaa4:	f000 f841 	bl	801eb2a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	2202      	movs	r2, #2
 801eaac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	681a      	ldr	r2, [r3, #0]
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	3304      	adds	r3, #4
 801eab8:	4619      	mov	r1, r3
 801eaba:	4610      	mov	r0, r2
 801eabc:	f000 feda 	bl	801f874 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	2201      	movs	r2, #1
 801eac4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	2201      	movs	r2, #1
 801eacc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ead0:	687b      	ldr	r3, [r7, #4]
 801ead2:	2201      	movs	r2, #1
 801ead4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	2201      	movs	r2, #1
 801eadc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	2201      	movs	r2, #1
 801eae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801eae8:	687b      	ldr	r3, [r7, #4]
 801eaea:	2201      	movs	r2, #1
 801eaec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	2201      	movs	r2, #1
 801eaf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eaf8:	687b      	ldr	r3, [r7, #4]
 801eafa:	2201      	movs	r2, #1
 801eafc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	2201      	movs	r2, #1
 801eb04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	2201      	movs	r2, #1
 801eb0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	2201      	movs	r2, #1
 801eb14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	2201      	movs	r2, #1
 801eb1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801eb20:	2300      	movs	r3, #0
}
 801eb22:	4618      	mov	r0, r3
 801eb24:	3708      	adds	r7, #8
 801eb26:	46bd      	mov	sp, r7
 801eb28:	bd80      	pop	{r7, pc}

0801eb2a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801eb2a:	b480      	push	{r7}
 801eb2c:	b083      	sub	sp, #12
 801eb2e:	af00      	add	r7, sp, #0
 801eb30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801eb32:	bf00      	nop
 801eb34:	370c      	adds	r7, #12
 801eb36:	46bd      	mov	sp, r7
 801eb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801eb3c:	4770      	bx	lr
	...

0801eb40 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801eb40:	b580      	push	{r7, lr}
 801eb42:	b084      	sub	sp, #16
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	6078      	str	r0, [r7, #4]
 801eb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801eb4a:	683b      	ldr	r3, [r7, #0]
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	d104      	bne.n	801eb5a <HAL_TIM_IC_Start+0x1a>
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801eb56:	b2db      	uxtb	r3, r3
 801eb58:	e023      	b.n	801eba2 <HAL_TIM_IC_Start+0x62>
 801eb5a:	683b      	ldr	r3, [r7, #0]
 801eb5c:	2b04      	cmp	r3, #4
 801eb5e:	d104      	bne.n	801eb6a <HAL_TIM_IC_Start+0x2a>
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801eb66:	b2db      	uxtb	r3, r3
 801eb68:	e01b      	b.n	801eba2 <HAL_TIM_IC_Start+0x62>
 801eb6a:	683b      	ldr	r3, [r7, #0]
 801eb6c:	2b08      	cmp	r3, #8
 801eb6e:	d104      	bne.n	801eb7a <HAL_TIM_IC_Start+0x3a>
 801eb70:	687b      	ldr	r3, [r7, #4]
 801eb72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801eb76:	b2db      	uxtb	r3, r3
 801eb78:	e013      	b.n	801eba2 <HAL_TIM_IC_Start+0x62>
 801eb7a:	683b      	ldr	r3, [r7, #0]
 801eb7c:	2b0c      	cmp	r3, #12
 801eb7e:	d104      	bne.n	801eb8a <HAL_TIM_IC_Start+0x4a>
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801eb86:	b2db      	uxtb	r3, r3
 801eb88:	e00b      	b.n	801eba2 <HAL_TIM_IC_Start+0x62>
 801eb8a:	683b      	ldr	r3, [r7, #0]
 801eb8c:	2b10      	cmp	r3, #16
 801eb8e:	d104      	bne.n	801eb9a <HAL_TIM_IC_Start+0x5a>
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eb96:	b2db      	uxtb	r3, r3
 801eb98:	e003      	b.n	801eba2 <HAL_TIM_IC_Start+0x62>
 801eb9a:	687b      	ldr	r3, [r7, #4]
 801eb9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801eba0:	b2db      	uxtb	r3, r3
 801eba2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801eba4:	683b      	ldr	r3, [r7, #0]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d104      	bne.n	801ebb4 <HAL_TIM_IC_Start+0x74>
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ebb0:	b2db      	uxtb	r3, r3
 801ebb2:	e013      	b.n	801ebdc <HAL_TIM_IC_Start+0x9c>
 801ebb4:	683b      	ldr	r3, [r7, #0]
 801ebb6:	2b04      	cmp	r3, #4
 801ebb8:	d104      	bne.n	801ebc4 <HAL_TIM_IC_Start+0x84>
 801ebba:	687b      	ldr	r3, [r7, #4]
 801ebbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ebc0:	b2db      	uxtb	r3, r3
 801ebc2:	e00b      	b.n	801ebdc <HAL_TIM_IC_Start+0x9c>
 801ebc4:	683b      	ldr	r3, [r7, #0]
 801ebc6:	2b08      	cmp	r3, #8
 801ebc8:	d104      	bne.n	801ebd4 <HAL_TIM_IC_Start+0x94>
 801ebca:	687b      	ldr	r3, [r7, #4]
 801ebcc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801ebd0:	b2db      	uxtb	r3, r3
 801ebd2:	e003      	b.n	801ebdc <HAL_TIM_IC_Start+0x9c>
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801ebda:	b2db      	uxtb	r3, r3
 801ebdc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801ebde:	7bfb      	ldrb	r3, [r7, #15]
 801ebe0:	2b01      	cmp	r3, #1
 801ebe2:	d102      	bne.n	801ebea <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801ebe4:	7bbb      	ldrb	r3, [r7, #14]
 801ebe6:	2b01      	cmp	r3, #1
 801ebe8:	d001      	beq.n	801ebee <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 801ebea:	2301      	movs	r3, #1
 801ebec:	e0a1      	b.n	801ed32 <HAL_TIM_IC_Start+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ebee:	683b      	ldr	r3, [r7, #0]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d104      	bne.n	801ebfe <HAL_TIM_IC_Start+0xbe>
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	2202      	movs	r2, #2
 801ebf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ebfc:	e023      	b.n	801ec46 <HAL_TIM_IC_Start+0x106>
 801ebfe:	683b      	ldr	r3, [r7, #0]
 801ec00:	2b04      	cmp	r3, #4
 801ec02:	d104      	bne.n	801ec0e <HAL_TIM_IC_Start+0xce>
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	2202      	movs	r2, #2
 801ec08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ec0c:	e01b      	b.n	801ec46 <HAL_TIM_IC_Start+0x106>
 801ec0e:	683b      	ldr	r3, [r7, #0]
 801ec10:	2b08      	cmp	r3, #8
 801ec12:	d104      	bne.n	801ec1e <HAL_TIM_IC_Start+0xde>
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	2202      	movs	r2, #2
 801ec18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ec1c:	e013      	b.n	801ec46 <HAL_TIM_IC_Start+0x106>
 801ec1e:	683b      	ldr	r3, [r7, #0]
 801ec20:	2b0c      	cmp	r3, #12
 801ec22:	d104      	bne.n	801ec2e <HAL_TIM_IC_Start+0xee>
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	2202      	movs	r2, #2
 801ec28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ec2c:	e00b      	b.n	801ec46 <HAL_TIM_IC_Start+0x106>
 801ec2e:	683b      	ldr	r3, [r7, #0]
 801ec30:	2b10      	cmp	r3, #16
 801ec32:	d104      	bne.n	801ec3e <HAL_TIM_IC_Start+0xfe>
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	2202      	movs	r2, #2
 801ec38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ec3c:	e003      	b.n	801ec46 <HAL_TIM_IC_Start+0x106>
 801ec3e:	687b      	ldr	r3, [r7, #4]
 801ec40:	2202      	movs	r2, #2
 801ec42:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ec46:	683b      	ldr	r3, [r7, #0]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d104      	bne.n	801ec56 <HAL_TIM_IC_Start+0x116>
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	2202      	movs	r2, #2
 801ec50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ec54:	e013      	b.n	801ec7e <HAL_TIM_IC_Start+0x13e>
 801ec56:	683b      	ldr	r3, [r7, #0]
 801ec58:	2b04      	cmp	r3, #4
 801ec5a:	d104      	bne.n	801ec66 <HAL_TIM_IC_Start+0x126>
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	2202      	movs	r2, #2
 801ec60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ec64:	e00b      	b.n	801ec7e <HAL_TIM_IC_Start+0x13e>
 801ec66:	683b      	ldr	r3, [r7, #0]
 801ec68:	2b08      	cmp	r3, #8
 801ec6a:	d104      	bne.n	801ec76 <HAL_TIM_IC_Start+0x136>
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	2202      	movs	r2, #2
 801ec70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ec74:	e003      	b.n	801ec7e <HAL_TIM_IC_Start+0x13e>
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	2202      	movs	r2, #2
 801ec7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ec7e:	687b      	ldr	r3, [r7, #4]
 801ec80:	681b      	ldr	r3, [r3, #0]
 801ec82:	2201      	movs	r2, #1
 801ec84:	6839      	ldr	r1, [r7, #0]
 801ec86:	4618      	mov	r0, r3
 801ec88:	f001 fb44 	bl	8020314 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	681b      	ldr	r3, [r3, #0]
 801ec90:	4a2a      	ldr	r2, [pc, #168]	; (801ed3c <HAL_TIM_IC_Start+0x1fc>)
 801ec92:	4293      	cmp	r3, r2
 801ec94:	d02c      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ec9e:	d027      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801eca0:	687b      	ldr	r3, [r7, #4]
 801eca2:	681b      	ldr	r3, [r3, #0]
 801eca4:	4a26      	ldr	r2, [pc, #152]	; (801ed40 <HAL_TIM_IC_Start+0x200>)
 801eca6:	4293      	cmp	r3, r2
 801eca8:	d022      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801ecaa:	687b      	ldr	r3, [r7, #4]
 801ecac:	681b      	ldr	r3, [r3, #0]
 801ecae:	4a25      	ldr	r2, [pc, #148]	; (801ed44 <HAL_TIM_IC_Start+0x204>)
 801ecb0:	4293      	cmp	r3, r2
 801ecb2:	d01d      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801ecb4:	687b      	ldr	r3, [r7, #4]
 801ecb6:	681b      	ldr	r3, [r3, #0]
 801ecb8:	4a23      	ldr	r2, [pc, #140]	; (801ed48 <HAL_TIM_IC_Start+0x208>)
 801ecba:	4293      	cmp	r3, r2
 801ecbc:	d018      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801ecbe:	687b      	ldr	r3, [r7, #4]
 801ecc0:	681b      	ldr	r3, [r3, #0]
 801ecc2:	4a22      	ldr	r2, [pc, #136]	; (801ed4c <HAL_TIM_IC_Start+0x20c>)
 801ecc4:	4293      	cmp	r3, r2
 801ecc6:	d013      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801ecc8:	687b      	ldr	r3, [r7, #4]
 801ecca:	681b      	ldr	r3, [r3, #0]
 801eccc:	4a20      	ldr	r2, [pc, #128]	; (801ed50 <HAL_TIM_IC_Start+0x210>)
 801ecce:	4293      	cmp	r3, r2
 801ecd0:	d00e      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801ecd2:	687b      	ldr	r3, [r7, #4]
 801ecd4:	681b      	ldr	r3, [r3, #0]
 801ecd6:	4a1f      	ldr	r2, [pc, #124]	; (801ed54 <HAL_TIM_IC_Start+0x214>)
 801ecd8:	4293      	cmp	r3, r2
 801ecda:	d009      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801ecdc:	687b      	ldr	r3, [r7, #4]
 801ecde:	681b      	ldr	r3, [r3, #0]
 801ece0:	4a1d      	ldr	r2, [pc, #116]	; (801ed58 <HAL_TIM_IC_Start+0x218>)
 801ece2:	4293      	cmp	r3, r2
 801ece4:	d004      	beq.n	801ecf0 <HAL_TIM_IC_Start+0x1b0>
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	681b      	ldr	r3, [r3, #0]
 801ecea:	4a1c      	ldr	r2, [pc, #112]	; (801ed5c <HAL_TIM_IC_Start+0x21c>)
 801ecec:	4293      	cmp	r3, r2
 801ecee:	d115      	bne.n	801ed1c <HAL_TIM_IC_Start+0x1dc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	681b      	ldr	r3, [r3, #0]
 801ecf4:	689a      	ldr	r2, [r3, #8]
 801ecf6:	4b1a      	ldr	r3, [pc, #104]	; (801ed60 <HAL_TIM_IC_Start+0x220>)
 801ecf8:	4013      	ands	r3, r2
 801ecfa:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ecfc:	68bb      	ldr	r3, [r7, #8]
 801ecfe:	2b06      	cmp	r3, #6
 801ed00:	d015      	beq.n	801ed2e <HAL_TIM_IC_Start+0x1ee>
 801ed02:	68bb      	ldr	r3, [r7, #8]
 801ed04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ed08:	d011      	beq.n	801ed2e <HAL_TIM_IC_Start+0x1ee>
    {
      __HAL_TIM_ENABLE(htim);
 801ed0a:	687b      	ldr	r3, [r7, #4]
 801ed0c:	681b      	ldr	r3, [r3, #0]
 801ed0e:	681a      	ldr	r2, [r3, #0]
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	681b      	ldr	r3, [r3, #0]
 801ed14:	f042 0201 	orr.w	r2, r2, #1
 801ed18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ed1a:	e008      	b.n	801ed2e <HAL_TIM_IC_Start+0x1ee>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	681b      	ldr	r3, [r3, #0]
 801ed20:	681a      	ldr	r2, [r3, #0]
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	681b      	ldr	r3, [r3, #0]
 801ed26:	f042 0201 	orr.w	r2, r2, #1
 801ed2a:	601a      	str	r2, [r3, #0]
 801ed2c:	e000      	b.n	801ed30 <HAL_TIM_IC_Start+0x1f0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ed2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ed30:	2300      	movs	r3, #0
}
 801ed32:	4618      	mov	r0, r3
 801ed34:	3710      	adds	r7, #16
 801ed36:	46bd      	mov	sp, r7
 801ed38:	bd80      	pop	{r7, pc}
 801ed3a:	bf00      	nop
 801ed3c:	40010000 	.word	0x40010000
 801ed40:	40000400 	.word	0x40000400
 801ed44:	40000800 	.word	0x40000800
 801ed48:	40000c00 	.word	0x40000c00
 801ed4c:	40010400 	.word	0x40010400
 801ed50:	40001800 	.word	0x40001800
 801ed54:	40014000 	.word	0x40014000
 801ed58:	4000e000 	.word	0x4000e000
 801ed5c:	4000e400 	.word	0x4000e400
 801ed60:	00010007 	.word	0x00010007

0801ed64 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ed64:	b580      	push	{r7, lr}
 801ed66:	b084      	sub	sp, #16
 801ed68:	af00      	add	r7, sp, #0
 801ed6a:	6078      	str	r0, [r7, #4]
 801ed6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ed6e:	2300      	movs	r3, #0
 801ed70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801ed72:	683b      	ldr	r3, [r7, #0]
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d104      	bne.n	801ed82 <HAL_TIM_IC_Start_IT+0x1e>
 801ed78:	687b      	ldr	r3, [r7, #4]
 801ed7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ed7e:	b2db      	uxtb	r3, r3
 801ed80:	e023      	b.n	801edca <HAL_TIM_IC_Start_IT+0x66>
 801ed82:	683b      	ldr	r3, [r7, #0]
 801ed84:	2b04      	cmp	r3, #4
 801ed86:	d104      	bne.n	801ed92 <HAL_TIM_IC_Start_IT+0x2e>
 801ed88:	687b      	ldr	r3, [r7, #4]
 801ed8a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ed8e:	b2db      	uxtb	r3, r3
 801ed90:	e01b      	b.n	801edca <HAL_TIM_IC_Start_IT+0x66>
 801ed92:	683b      	ldr	r3, [r7, #0]
 801ed94:	2b08      	cmp	r3, #8
 801ed96:	d104      	bne.n	801eda2 <HAL_TIM_IC_Start_IT+0x3e>
 801ed98:	687b      	ldr	r3, [r7, #4]
 801ed9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ed9e:	b2db      	uxtb	r3, r3
 801eda0:	e013      	b.n	801edca <HAL_TIM_IC_Start_IT+0x66>
 801eda2:	683b      	ldr	r3, [r7, #0]
 801eda4:	2b0c      	cmp	r3, #12
 801eda6:	d104      	bne.n	801edb2 <HAL_TIM_IC_Start_IT+0x4e>
 801eda8:	687b      	ldr	r3, [r7, #4]
 801edaa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801edae:	b2db      	uxtb	r3, r3
 801edb0:	e00b      	b.n	801edca <HAL_TIM_IC_Start_IT+0x66>
 801edb2:	683b      	ldr	r3, [r7, #0]
 801edb4:	2b10      	cmp	r3, #16
 801edb6:	d104      	bne.n	801edc2 <HAL_TIM_IC_Start_IT+0x5e>
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801edbe:	b2db      	uxtb	r3, r3
 801edc0:	e003      	b.n	801edca <HAL_TIM_IC_Start_IT+0x66>
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801edc8:	b2db      	uxtb	r3, r3
 801edca:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801edcc:	683b      	ldr	r3, [r7, #0]
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d104      	bne.n	801eddc <HAL_TIM_IC_Start_IT+0x78>
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801edd8:	b2db      	uxtb	r3, r3
 801edda:	e013      	b.n	801ee04 <HAL_TIM_IC_Start_IT+0xa0>
 801eddc:	683b      	ldr	r3, [r7, #0]
 801edde:	2b04      	cmp	r3, #4
 801ede0:	d104      	bne.n	801edec <HAL_TIM_IC_Start_IT+0x88>
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ede8:	b2db      	uxtb	r3, r3
 801edea:	e00b      	b.n	801ee04 <HAL_TIM_IC_Start_IT+0xa0>
 801edec:	683b      	ldr	r3, [r7, #0]
 801edee:	2b08      	cmp	r3, #8
 801edf0:	d104      	bne.n	801edfc <HAL_TIM_IC_Start_IT+0x98>
 801edf2:	687b      	ldr	r3, [r7, #4]
 801edf4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801edf8:	b2db      	uxtb	r3, r3
 801edfa:	e003      	b.n	801ee04 <HAL_TIM_IC_Start_IT+0xa0>
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801ee02:	b2db      	uxtb	r3, r3
 801ee04:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801ee06:	7bbb      	ldrb	r3, [r7, #14]
 801ee08:	2b01      	cmp	r3, #1
 801ee0a:	d102      	bne.n	801ee12 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801ee0c:	7b7b      	ldrb	r3, [r7, #13]
 801ee0e:	2b01      	cmp	r3, #1
 801ee10:	d001      	beq.n	801ee16 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801ee12:	2301      	movs	r3, #1
 801ee14:	e0ec      	b.n	801eff0 <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ee16:	683b      	ldr	r3, [r7, #0]
 801ee18:	2b00      	cmp	r3, #0
 801ee1a:	d104      	bne.n	801ee26 <HAL_TIM_IC_Start_IT+0xc2>
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	2202      	movs	r2, #2
 801ee20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ee24:	e023      	b.n	801ee6e <HAL_TIM_IC_Start_IT+0x10a>
 801ee26:	683b      	ldr	r3, [r7, #0]
 801ee28:	2b04      	cmp	r3, #4
 801ee2a:	d104      	bne.n	801ee36 <HAL_TIM_IC_Start_IT+0xd2>
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	2202      	movs	r2, #2
 801ee30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ee34:	e01b      	b.n	801ee6e <HAL_TIM_IC_Start_IT+0x10a>
 801ee36:	683b      	ldr	r3, [r7, #0]
 801ee38:	2b08      	cmp	r3, #8
 801ee3a:	d104      	bne.n	801ee46 <HAL_TIM_IC_Start_IT+0xe2>
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	2202      	movs	r2, #2
 801ee40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ee44:	e013      	b.n	801ee6e <HAL_TIM_IC_Start_IT+0x10a>
 801ee46:	683b      	ldr	r3, [r7, #0]
 801ee48:	2b0c      	cmp	r3, #12
 801ee4a:	d104      	bne.n	801ee56 <HAL_TIM_IC_Start_IT+0xf2>
 801ee4c:	687b      	ldr	r3, [r7, #4]
 801ee4e:	2202      	movs	r2, #2
 801ee50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ee54:	e00b      	b.n	801ee6e <HAL_TIM_IC_Start_IT+0x10a>
 801ee56:	683b      	ldr	r3, [r7, #0]
 801ee58:	2b10      	cmp	r3, #16
 801ee5a:	d104      	bne.n	801ee66 <HAL_TIM_IC_Start_IT+0x102>
 801ee5c:	687b      	ldr	r3, [r7, #4]
 801ee5e:	2202      	movs	r2, #2
 801ee60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ee64:	e003      	b.n	801ee6e <HAL_TIM_IC_Start_IT+0x10a>
 801ee66:	687b      	ldr	r3, [r7, #4]
 801ee68:	2202      	movs	r2, #2
 801ee6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ee6e:	683b      	ldr	r3, [r7, #0]
 801ee70:	2b00      	cmp	r3, #0
 801ee72:	d104      	bne.n	801ee7e <HAL_TIM_IC_Start_IT+0x11a>
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	2202      	movs	r2, #2
 801ee78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ee7c:	e013      	b.n	801eea6 <HAL_TIM_IC_Start_IT+0x142>
 801ee7e:	683b      	ldr	r3, [r7, #0]
 801ee80:	2b04      	cmp	r3, #4
 801ee82:	d104      	bne.n	801ee8e <HAL_TIM_IC_Start_IT+0x12a>
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	2202      	movs	r2, #2
 801ee88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ee8c:	e00b      	b.n	801eea6 <HAL_TIM_IC_Start_IT+0x142>
 801ee8e:	683b      	ldr	r3, [r7, #0]
 801ee90:	2b08      	cmp	r3, #8
 801ee92:	d104      	bne.n	801ee9e <HAL_TIM_IC_Start_IT+0x13a>
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	2202      	movs	r2, #2
 801ee98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ee9c:	e003      	b.n	801eea6 <HAL_TIM_IC_Start_IT+0x142>
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	2202      	movs	r2, #2
 801eea2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801eea6:	683b      	ldr	r3, [r7, #0]
 801eea8:	2b0c      	cmp	r3, #12
 801eeaa:	d841      	bhi.n	801ef30 <HAL_TIM_IC_Start_IT+0x1cc>
 801eeac:	a201      	add	r2, pc, #4	; (adr r2, 801eeb4 <HAL_TIM_IC_Start_IT+0x150>)
 801eeae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801eeb2:	bf00      	nop
 801eeb4:	0801eee9 	.word	0x0801eee9
 801eeb8:	0801ef31 	.word	0x0801ef31
 801eebc:	0801ef31 	.word	0x0801ef31
 801eec0:	0801ef31 	.word	0x0801ef31
 801eec4:	0801eefb 	.word	0x0801eefb
 801eec8:	0801ef31 	.word	0x0801ef31
 801eecc:	0801ef31 	.word	0x0801ef31
 801eed0:	0801ef31 	.word	0x0801ef31
 801eed4:	0801ef0d 	.word	0x0801ef0d
 801eed8:	0801ef31 	.word	0x0801ef31
 801eedc:	0801ef31 	.word	0x0801ef31
 801eee0:	0801ef31 	.word	0x0801ef31
 801eee4:	0801ef1f 	.word	0x0801ef1f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801eee8:	687b      	ldr	r3, [r7, #4]
 801eeea:	681b      	ldr	r3, [r3, #0]
 801eeec:	68da      	ldr	r2, [r3, #12]
 801eeee:	687b      	ldr	r3, [r7, #4]
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	f042 0202 	orr.w	r2, r2, #2
 801eef6:	60da      	str	r2, [r3, #12]
      break;
 801eef8:	e01d      	b.n	801ef36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801eefa:	687b      	ldr	r3, [r7, #4]
 801eefc:	681b      	ldr	r3, [r3, #0]
 801eefe:	68da      	ldr	r2, [r3, #12]
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	681b      	ldr	r3, [r3, #0]
 801ef04:	f042 0204 	orr.w	r2, r2, #4
 801ef08:	60da      	str	r2, [r3, #12]
      break;
 801ef0a:	e014      	b.n	801ef36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	681b      	ldr	r3, [r3, #0]
 801ef10:	68da      	ldr	r2, [r3, #12]
 801ef12:	687b      	ldr	r3, [r7, #4]
 801ef14:	681b      	ldr	r3, [r3, #0]
 801ef16:	f042 0208 	orr.w	r2, r2, #8
 801ef1a:	60da      	str	r2, [r3, #12]
      break;
 801ef1c:	e00b      	b.n	801ef36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	68da      	ldr	r2, [r3, #12]
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	681b      	ldr	r3, [r3, #0]
 801ef28:	f042 0210 	orr.w	r2, r2, #16
 801ef2c:	60da      	str	r2, [r3, #12]
      break;
 801ef2e:	e002      	b.n	801ef36 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801ef30:	2301      	movs	r3, #1
 801ef32:	73fb      	strb	r3, [r7, #15]
      break;
 801ef34:	bf00      	nop
  }

  if (status == HAL_OK)
 801ef36:	7bfb      	ldrb	r3, [r7, #15]
 801ef38:	2b00      	cmp	r3, #0
 801ef3a:	d158      	bne.n	801efee <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ef3c:	687b      	ldr	r3, [r7, #4]
 801ef3e:	681b      	ldr	r3, [r3, #0]
 801ef40:	2201      	movs	r2, #1
 801ef42:	6839      	ldr	r1, [r7, #0]
 801ef44:	4618      	mov	r0, r3
 801ef46:	f001 f9e5 	bl	8020314 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ef4a:	687b      	ldr	r3, [r7, #4]
 801ef4c:	681b      	ldr	r3, [r3, #0]
 801ef4e:	4a2a      	ldr	r2, [pc, #168]	; (801eff8 <HAL_TIM_IC_Start_IT+0x294>)
 801ef50:	4293      	cmp	r3, r2
 801ef52:	d02c      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	681b      	ldr	r3, [r3, #0]
 801ef58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ef5c:	d027      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801ef5e:	687b      	ldr	r3, [r7, #4]
 801ef60:	681b      	ldr	r3, [r3, #0]
 801ef62:	4a26      	ldr	r2, [pc, #152]	; (801effc <HAL_TIM_IC_Start_IT+0x298>)
 801ef64:	4293      	cmp	r3, r2
 801ef66:	d022      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801ef68:	687b      	ldr	r3, [r7, #4]
 801ef6a:	681b      	ldr	r3, [r3, #0]
 801ef6c:	4a24      	ldr	r2, [pc, #144]	; (801f000 <HAL_TIM_IC_Start_IT+0x29c>)
 801ef6e:	4293      	cmp	r3, r2
 801ef70:	d01d      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	681b      	ldr	r3, [r3, #0]
 801ef76:	4a23      	ldr	r2, [pc, #140]	; (801f004 <HAL_TIM_IC_Start_IT+0x2a0>)
 801ef78:	4293      	cmp	r3, r2
 801ef7a:	d018      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801ef7c:	687b      	ldr	r3, [r7, #4]
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	4a21      	ldr	r2, [pc, #132]	; (801f008 <HAL_TIM_IC_Start_IT+0x2a4>)
 801ef82:	4293      	cmp	r3, r2
 801ef84:	d013      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801ef86:	687b      	ldr	r3, [r7, #4]
 801ef88:	681b      	ldr	r3, [r3, #0]
 801ef8a:	4a20      	ldr	r2, [pc, #128]	; (801f00c <HAL_TIM_IC_Start_IT+0x2a8>)
 801ef8c:	4293      	cmp	r3, r2
 801ef8e:	d00e      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801ef90:	687b      	ldr	r3, [r7, #4]
 801ef92:	681b      	ldr	r3, [r3, #0]
 801ef94:	4a1e      	ldr	r2, [pc, #120]	; (801f010 <HAL_TIM_IC_Start_IT+0x2ac>)
 801ef96:	4293      	cmp	r3, r2
 801ef98:	d009      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801ef9a:	687b      	ldr	r3, [r7, #4]
 801ef9c:	681b      	ldr	r3, [r3, #0]
 801ef9e:	4a1d      	ldr	r2, [pc, #116]	; (801f014 <HAL_TIM_IC_Start_IT+0x2b0>)
 801efa0:	4293      	cmp	r3, r2
 801efa2:	d004      	beq.n	801efae <HAL_TIM_IC_Start_IT+0x24a>
 801efa4:	687b      	ldr	r3, [r7, #4]
 801efa6:	681b      	ldr	r3, [r3, #0]
 801efa8:	4a1b      	ldr	r2, [pc, #108]	; (801f018 <HAL_TIM_IC_Start_IT+0x2b4>)
 801efaa:	4293      	cmp	r3, r2
 801efac:	d115      	bne.n	801efda <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	689a      	ldr	r2, [r3, #8]
 801efb4:	4b19      	ldr	r3, [pc, #100]	; (801f01c <HAL_TIM_IC_Start_IT+0x2b8>)
 801efb6:	4013      	ands	r3, r2
 801efb8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801efba:	68bb      	ldr	r3, [r7, #8]
 801efbc:	2b06      	cmp	r3, #6
 801efbe:	d015      	beq.n	801efec <HAL_TIM_IC_Start_IT+0x288>
 801efc0:	68bb      	ldr	r3, [r7, #8]
 801efc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801efc6:	d011      	beq.n	801efec <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	681a      	ldr	r2, [r3, #0]
 801efce:	687b      	ldr	r3, [r7, #4]
 801efd0:	681b      	ldr	r3, [r3, #0]
 801efd2:	f042 0201 	orr.w	r2, r2, #1
 801efd6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801efd8:	e008      	b.n	801efec <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801efda:	687b      	ldr	r3, [r7, #4]
 801efdc:	681b      	ldr	r3, [r3, #0]
 801efde:	681a      	ldr	r2, [r3, #0]
 801efe0:	687b      	ldr	r3, [r7, #4]
 801efe2:	681b      	ldr	r3, [r3, #0]
 801efe4:	f042 0201 	orr.w	r2, r2, #1
 801efe8:	601a      	str	r2, [r3, #0]
 801efea:	e000      	b.n	801efee <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801efec:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801efee:	7bfb      	ldrb	r3, [r7, #15]
}
 801eff0:	4618      	mov	r0, r3
 801eff2:	3710      	adds	r7, #16
 801eff4:	46bd      	mov	sp, r7
 801eff6:	bd80      	pop	{r7, pc}
 801eff8:	40010000 	.word	0x40010000
 801effc:	40000400 	.word	0x40000400
 801f000:	40000800 	.word	0x40000800
 801f004:	40000c00 	.word	0x40000c00
 801f008:	40010400 	.word	0x40010400
 801f00c:	40001800 	.word	0x40001800
 801f010:	40014000 	.word	0x40014000
 801f014:	4000e000 	.word	0x4000e000
 801f018:	4000e400 	.word	0x4000e400
 801f01c:	00010007 	.word	0x00010007

0801f020 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f020:	b580      	push	{r7, lr}
 801f022:	b082      	sub	sp, #8
 801f024:	af00      	add	r7, sp, #0
 801f026:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	681b      	ldr	r3, [r3, #0]
 801f02c:	691b      	ldr	r3, [r3, #16]
 801f02e:	f003 0302 	and.w	r3, r3, #2
 801f032:	2b02      	cmp	r3, #2
 801f034:	d122      	bne.n	801f07c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	681b      	ldr	r3, [r3, #0]
 801f03a:	68db      	ldr	r3, [r3, #12]
 801f03c:	f003 0302 	and.w	r3, r3, #2
 801f040:	2b02      	cmp	r3, #2
 801f042:	d11b      	bne.n	801f07c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	f06f 0202 	mvn.w	r2, #2
 801f04c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	2201      	movs	r2, #1
 801f052:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	699b      	ldr	r3, [r3, #24]
 801f05a:	f003 0303 	and.w	r3, r3, #3
 801f05e:	2b00      	cmp	r3, #0
 801f060:	d003      	beq.n	801f06a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f062:	6878      	ldr	r0, [r7, #4]
 801f064:	f7ef f8b2 	bl	800e1cc <HAL_TIM_IC_CaptureCallback>
 801f068:	e005      	b.n	801f076 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f06a:	6878      	ldr	r0, [r7, #4]
 801f06c:	f000 fbe4 	bl	801f838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f070:	6878      	ldr	r0, [r7, #4]
 801f072:	f000 fbeb 	bl	801f84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	2200      	movs	r2, #0
 801f07a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	681b      	ldr	r3, [r3, #0]
 801f080:	691b      	ldr	r3, [r3, #16]
 801f082:	f003 0304 	and.w	r3, r3, #4
 801f086:	2b04      	cmp	r3, #4
 801f088:	d122      	bne.n	801f0d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	68db      	ldr	r3, [r3, #12]
 801f090:	f003 0304 	and.w	r3, r3, #4
 801f094:	2b04      	cmp	r3, #4
 801f096:	d11b      	bne.n	801f0d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	f06f 0204 	mvn.w	r2, #4
 801f0a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	2202      	movs	r2, #2
 801f0a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	681b      	ldr	r3, [r3, #0]
 801f0ac:	699b      	ldr	r3, [r3, #24]
 801f0ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d003      	beq.n	801f0be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f0b6:	6878      	ldr	r0, [r7, #4]
 801f0b8:	f7ef f888 	bl	800e1cc <HAL_TIM_IC_CaptureCallback>
 801f0bc:	e005      	b.n	801f0ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f0be:	6878      	ldr	r0, [r7, #4]
 801f0c0:	f000 fbba 	bl	801f838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f0c4:	6878      	ldr	r0, [r7, #4]
 801f0c6:	f000 fbc1 	bl	801f84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f0ca:	687b      	ldr	r3, [r7, #4]
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	691b      	ldr	r3, [r3, #16]
 801f0d6:	f003 0308 	and.w	r3, r3, #8
 801f0da:	2b08      	cmp	r3, #8
 801f0dc:	d122      	bne.n	801f124 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	68db      	ldr	r3, [r3, #12]
 801f0e4:	f003 0308 	and.w	r3, r3, #8
 801f0e8:	2b08      	cmp	r3, #8
 801f0ea:	d11b      	bne.n	801f124 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	f06f 0208 	mvn.w	r2, #8
 801f0f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	2204      	movs	r2, #4
 801f0fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f0fc:	687b      	ldr	r3, [r7, #4]
 801f0fe:	681b      	ldr	r3, [r3, #0]
 801f100:	69db      	ldr	r3, [r3, #28]
 801f102:	f003 0303 	and.w	r3, r3, #3
 801f106:	2b00      	cmp	r3, #0
 801f108:	d003      	beq.n	801f112 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f10a:	6878      	ldr	r0, [r7, #4]
 801f10c:	f7ef f85e 	bl	800e1cc <HAL_TIM_IC_CaptureCallback>
 801f110:	e005      	b.n	801f11e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f112:	6878      	ldr	r0, [r7, #4]
 801f114:	f000 fb90 	bl	801f838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f118:	6878      	ldr	r0, [r7, #4]
 801f11a:	f000 fb97 	bl	801f84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	2200      	movs	r2, #0
 801f122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f124:	687b      	ldr	r3, [r7, #4]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	691b      	ldr	r3, [r3, #16]
 801f12a:	f003 0310 	and.w	r3, r3, #16
 801f12e:	2b10      	cmp	r3, #16
 801f130:	d122      	bne.n	801f178 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f132:	687b      	ldr	r3, [r7, #4]
 801f134:	681b      	ldr	r3, [r3, #0]
 801f136:	68db      	ldr	r3, [r3, #12]
 801f138:	f003 0310 	and.w	r3, r3, #16
 801f13c:	2b10      	cmp	r3, #16
 801f13e:	d11b      	bne.n	801f178 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f140:	687b      	ldr	r3, [r7, #4]
 801f142:	681b      	ldr	r3, [r3, #0]
 801f144:	f06f 0210 	mvn.w	r2, #16
 801f148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	2208      	movs	r2, #8
 801f14e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	69db      	ldr	r3, [r3, #28]
 801f156:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f15a:	2b00      	cmp	r3, #0
 801f15c:	d003      	beq.n	801f166 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f15e:	6878      	ldr	r0, [r7, #4]
 801f160:	f7ef f834 	bl	800e1cc <HAL_TIM_IC_CaptureCallback>
 801f164:	e005      	b.n	801f172 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f166:	6878      	ldr	r0, [r7, #4]
 801f168:	f000 fb66 	bl	801f838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f16c:	6878      	ldr	r0, [r7, #4]
 801f16e:	f000 fb6d 	bl	801f84c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	2200      	movs	r2, #0
 801f176:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f178:	687b      	ldr	r3, [r7, #4]
 801f17a:	681b      	ldr	r3, [r3, #0]
 801f17c:	691b      	ldr	r3, [r3, #16]
 801f17e:	f003 0301 	and.w	r3, r3, #1
 801f182:	2b01      	cmp	r3, #1
 801f184:	d10e      	bne.n	801f1a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f186:	687b      	ldr	r3, [r7, #4]
 801f188:	681b      	ldr	r3, [r3, #0]
 801f18a:	68db      	ldr	r3, [r3, #12]
 801f18c:	f003 0301 	and.w	r3, r3, #1
 801f190:	2b01      	cmp	r3, #1
 801f192:	d107      	bne.n	801f1a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f194:	687b      	ldr	r3, [r7, #4]
 801f196:	681b      	ldr	r3, [r3, #0]
 801f198:	f06f 0201 	mvn.w	r2, #1
 801f19c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f19e:	6878      	ldr	r0, [r7, #4]
 801f1a0:	f7ef f829 	bl	800e1f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f1a4:	687b      	ldr	r3, [r7, #4]
 801f1a6:	681b      	ldr	r3, [r3, #0]
 801f1a8:	691b      	ldr	r3, [r3, #16]
 801f1aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1ae:	2b80      	cmp	r3, #128	; 0x80
 801f1b0:	d10e      	bne.n	801f1d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	681b      	ldr	r3, [r3, #0]
 801f1b6:	68db      	ldr	r3, [r3, #12]
 801f1b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1bc:	2b80      	cmp	r3, #128	; 0x80
 801f1be:	d107      	bne.n	801f1d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f1c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f1ca:	6878      	ldr	r0, [r7, #4]
 801f1cc:	f001 fa0e 	bl	80205ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	691b      	ldr	r3, [r3, #16]
 801f1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f1da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f1de:	d10e      	bne.n	801f1fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	68db      	ldr	r3, [r3, #12]
 801f1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f1ea:	2b80      	cmp	r3, #128	; 0x80
 801f1ec:	d107      	bne.n	801f1fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f1ee:	687b      	ldr	r3, [r7, #4]
 801f1f0:	681b      	ldr	r3, [r3, #0]
 801f1f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f1f8:	6878      	ldr	r0, [r7, #4]
 801f1fa:	f001 fa01 	bl	8020600 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	681b      	ldr	r3, [r3, #0]
 801f202:	691b      	ldr	r3, [r3, #16]
 801f204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f208:	2b40      	cmp	r3, #64	; 0x40
 801f20a:	d10e      	bne.n	801f22a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	68db      	ldr	r3, [r3, #12]
 801f212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f216:	2b40      	cmp	r3, #64	; 0x40
 801f218:	d107      	bne.n	801f22a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f21a:	687b      	ldr	r3, [r7, #4]
 801f21c:	681b      	ldr	r3, [r3, #0]
 801f21e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f222:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f224:	6878      	ldr	r0, [r7, #4]
 801f226:	f000 fb1b 	bl	801f860 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f22a:	687b      	ldr	r3, [r7, #4]
 801f22c:	681b      	ldr	r3, [r3, #0]
 801f22e:	691b      	ldr	r3, [r3, #16]
 801f230:	f003 0320 	and.w	r3, r3, #32
 801f234:	2b20      	cmp	r3, #32
 801f236:	d10e      	bne.n	801f256 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f238:	687b      	ldr	r3, [r7, #4]
 801f23a:	681b      	ldr	r3, [r3, #0]
 801f23c:	68db      	ldr	r3, [r3, #12]
 801f23e:	f003 0320 	and.w	r3, r3, #32
 801f242:	2b20      	cmp	r3, #32
 801f244:	d107      	bne.n	801f256 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f246:	687b      	ldr	r3, [r7, #4]
 801f248:	681b      	ldr	r3, [r3, #0]
 801f24a:	f06f 0220 	mvn.w	r2, #32
 801f24e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f250:	6878      	ldr	r0, [r7, #4]
 801f252:	f001 f9c1 	bl	80205d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f256:	bf00      	nop
 801f258:	3708      	adds	r7, #8
 801f25a:	46bd      	mov	sp, r7
 801f25c:	bd80      	pop	{r7, pc}

0801f25e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801f25e:	b580      	push	{r7, lr}
 801f260:	b086      	sub	sp, #24
 801f262:	af00      	add	r7, sp, #0
 801f264:	60f8      	str	r0, [r7, #12]
 801f266:	60b9      	str	r1, [r7, #8]
 801f268:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f26a:	2300      	movs	r3, #0
 801f26c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f26e:	68fb      	ldr	r3, [r7, #12]
 801f270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f274:	2b01      	cmp	r3, #1
 801f276:	d101      	bne.n	801f27c <HAL_TIM_IC_ConfigChannel+0x1e>
 801f278:	2302      	movs	r3, #2
 801f27a:	e088      	b.n	801f38e <HAL_TIM_IC_ConfigChannel+0x130>
 801f27c:	68fb      	ldr	r3, [r7, #12]
 801f27e:	2201      	movs	r2, #1
 801f280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801f284:	687b      	ldr	r3, [r7, #4]
 801f286:	2b00      	cmp	r3, #0
 801f288:	d11b      	bne.n	801f2c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	6818      	ldr	r0, [r3, #0]
 801f28e:	68bb      	ldr	r3, [r7, #8]
 801f290:	6819      	ldr	r1, [r3, #0]
 801f292:	68bb      	ldr	r3, [r7, #8]
 801f294:	685a      	ldr	r2, [r3, #4]
 801f296:	68bb      	ldr	r3, [r7, #8]
 801f298:	68db      	ldr	r3, [r3, #12]
 801f29a:	f000 fe67 	bl	801ff6c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801f29e:	68fb      	ldr	r3, [r7, #12]
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	699a      	ldr	r2, [r3, #24]
 801f2a4:	68fb      	ldr	r3, [r7, #12]
 801f2a6:	681b      	ldr	r3, [r3, #0]
 801f2a8:	f022 020c 	bic.w	r2, r2, #12
 801f2ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801f2ae:	68fb      	ldr	r3, [r7, #12]
 801f2b0:	681b      	ldr	r3, [r3, #0]
 801f2b2:	6999      	ldr	r1, [r3, #24]
 801f2b4:	68bb      	ldr	r3, [r7, #8]
 801f2b6:	689a      	ldr	r2, [r3, #8]
 801f2b8:	68fb      	ldr	r3, [r7, #12]
 801f2ba:	681b      	ldr	r3, [r3, #0]
 801f2bc:	430a      	orrs	r2, r1
 801f2be:	619a      	str	r2, [r3, #24]
 801f2c0:	e060      	b.n	801f384 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801f2c2:	687b      	ldr	r3, [r7, #4]
 801f2c4:	2b04      	cmp	r3, #4
 801f2c6:	d11c      	bne.n	801f302 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801f2c8:	68fb      	ldr	r3, [r7, #12]
 801f2ca:	6818      	ldr	r0, [r3, #0]
 801f2cc:	68bb      	ldr	r3, [r7, #8]
 801f2ce:	6819      	ldr	r1, [r3, #0]
 801f2d0:	68bb      	ldr	r3, [r7, #8]
 801f2d2:	685a      	ldr	r2, [r3, #4]
 801f2d4:	68bb      	ldr	r3, [r7, #8]
 801f2d6:	68db      	ldr	r3, [r3, #12]
 801f2d8:	f000 fef7 	bl	80200ca <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801f2dc:	68fb      	ldr	r3, [r7, #12]
 801f2de:	681b      	ldr	r3, [r3, #0]
 801f2e0:	699a      	ldr	r2, [r3, #24]
 801f2e2:	68fb      	ldr	r3, [r7, #12]
 801f2e4:	681b      	ldr	r3, [r3, #0]
 801f2e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f2ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801f2ec:	68fb      	ldr	r3, [r7, #12]
 801f2ee:	681b      	ldr	r3, [r3, #0]
 801f2f0:	6999      	ldr	r1, [r3, #24]
 801f2f2:	68bb      	ldr	r3, [r7, #8]
 801f2f4:	689b      	ldr	r3, [r3, #8]
 801f2f6:	021a      	lsls	r2, r3, #8
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	681b      	ldr	r3, [r3, #0]
 801f2fc:	430a      	orrs	r2, r1
 801f2fe:	619a      	str	r2, [r3, #24]
 801f300:	e040      	b.n	801f384 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801f302:	687b      	ldr	r3, [r7, #4]
 801f304:	2b08      	cmp	r3, #8
 801f306:	d11b      	bne.n	801f340 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801f308:	68fb      	ldr	r3, [r7, #12]
 801f30a:	6818      	ldr	r0, [r3, #0]
 801f30c:	68bb      	ldr	r3, [r7, #8]
 801f30e:	6819      	ldr	r1, [r3, #0]
 801f310:	68bb      	ldr	r3, [r7, #8]
 801f312:	685a      	ldr	r2, [r3, #4]
 801f314:	68bb      	ldr	r3, [r7, #8]
 801f316:	68db      	ldr	r3, [r3, #12]
 801f318:	f000 ff44 	bl	80201a4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	69da      	ldr	r2, [r3, #28]
 801f322:	68fb      	ldr	r3, [r7, #12]
 801f324:	681b      	ldr	r3, [r3, #0]
 801f326:	f022 020c 	bic.w	r2, r2, #12
 801f32a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	681b      	ldr	r3, [r3, #0]
 801f330:	69d9      	ldr	r1, [r3, #28]
 801f332:	68bb      	ldr	r3, [r7, #8]
 801f334:	689a      	ldr	r2, [r3, #8]
 801f336:	68fb      	ldr	r3, [r7, #12]
 801f338:	681b      	ldr	r3, [r3, #0]
 801f33a:	430a      	orrs	r2, r1
 801f33c:	61da      	str	r2, [r3, #28]
 801f33e:	e021      	b.n	801f384 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801f340:	687b      	ldr	r3, [r7, #4]
 801f342:	2b0c      	cmp	r3, #12
 801f344:	d11c      	bne.n	801f380 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801f346:	68fb      	ldr	r3, [r7, #12]
 801f348:	6818      	ldr	r0, [r3, #0]
 801f34a:	68bb      	ldr	r3, [r7, #8]
 801f34c:	6819      	ldr	r1, [r3, #0]
 801f34e:	68bb      	ldr	r3, [r7, #8]
 801f350:	685a      	ldr	r2, [r3, #4]
 801f352:	68bb      	ldr	r3, [r7, #8]
 801f354:	68db      	ldr	r3, [r3, #12]
 801f356:	f000 ff61 	bl	802021c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801f35a:	68fb      	ldr	r3, [r7, #12]
 801f35c:	681b      	ldr	r3, [r3, #0]
 801f35e:	69da      	ldr	r2, [r3, #28]
 801f360:	68fb      	ldr	r3, [r7, #12]
 801f362:	681b      	ldr	r3, [r3, #0]
 801f364:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f368:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801f36a:	68fb      	ldr	r3, [r7, #12]
 801f36c:	681b      	ldr	r3, [r3, #0]
 801f36e:	69d9      	ldr	r1, [r3, #28]
 801f370:	68bb      	ldr	r3, [r7, #8]
 801f372:	689b      	ldr	r3, [r3, #8]
 801f374:	021a      	lsls	r2, r3, #8
 801f376:	68fb      	ldr	r3, [r7, #12]
 801f378:	681b      	ldr	r3, [r3, #0]
 801f37a:	430a      	orrs	r2, r1
 801f37c:	61da      	str	r2, [r3, #28]
 801f37e:	e001      	b.n	801f384 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801f380:	2301      	movs	r3, #1
 801f382:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801f384:	68fb      	ldr	r3, [r7, #12]
 801f386:	2200      	movs	r2, #0
 801f388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f38c:	7dfb      	ldrb	r3, [r7, #23]
}
 801f38e:	4618      	mov	r0, r3
 801f390:	3718      	adds	r7, #24
 801f392:	46bd      	mov	sp, r7
 801f394:	bd80      	pop	{r7, pc}
	...

0801f398 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f398:	b580      	push	{r7, lr}
 801f39a:	b086      	sub	sp, #24
 801f39c:	af00      	add	r7, sp, #0
 801f39e:	60f8      	str	r0, [r7, #12]
 801f3a0:	60b9      	str	r1, [r7, #8]
 801f3a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f3a4:	2300      	movs	r3, #0
 801f3a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f3a8:	68fb      	ldr	r3, [r7, #12]
 801f3aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f3ae:	2b01      	cmp	r3, #1
 801f3b0:	d101      	bne.n	801f3b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f3b2:	2302      	movs	r3, #2
 801f3b4:	e0ff      	b.n	801f5b6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f3b6:	68fb      	ldr	r3, [r7, #12]
 801f3b8:	2201      	movs	r2, #1
 801f3ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f3be:	687b      	ldr	r3, [r7, #4]
 801f3c0:	2b14      	cmp	r3, #20
 801f3c2:	f200 80f0 	bhi.w	801f5a6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f3c6:	a201      	add	r2, pc, #4	; (adr r2, 801f3cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f3c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3cc:	0801f421 	.word	0x0801f421
 801f3d0:	0801f5a7 	.word	0x0801f5a7
 801f3d4:	0801f5a7 	.word	0x0801f5a7
 801f3d8:	0801f5a7 	.word	0x0801f5a7
 801f3dc:	0801f461 	.word	0x0801f461
 801f3e0:	0801f5a7 	.word	0x0801f5a7
 801f3e4:	0801f5a7 	.word	0x0801f5a7
 801f3e8:	0801f5a7 	.word	0x0801f5a7
 801f3ec:	0801f4a3 	.word	0x0801f4a3
 801f3f0:	0801f5a7 	.word	0x0801f5a7
 801f3f4:	0801f5a7 	.word	0x0801f5a7
 801f3f8:	0801f5a7 	.word	0x0801f5a7
 801f3fc:	0801f4e3 	.word	0x0801f4e3
 801f400:	0801f5a7 	.word	0x0801f5a7
 801f404:	0801f5a7 	.word	0x0801f5a7
 801f408:	0801f5a7 	.word	0x0801f5a7
 801f40c:	0801f525 	.word	0x0801f525
 801f410:	0801f5a7 	.word	0x0801f5a7
 801f414:	0801f5a7 	.word	0x0801f5a7
 801f418:	0801f5a7 	.word	0x0801f5a7
 801f41c:	0801f565 	.word	0x0801f565
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f420:	68fb      	ldr	r3, [r7, #12]
 801f422:	681b      	ldr	r3, [r3, #0]
 801f424:	68b9      	ldr	r1, [r7, #8]
 801f426:	4618      	mov	r0, r3
 801f428:	f000 faca 	bl	801f9c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f42c:	68fb      	ldr	r3, [r7, #12]
 801f42e:	681b      	ldr	r3, [r3, #0]
 801f430:	699a      	ldr	r2, [r3, #24]
 801f432:	68fb      	ldr	r3, [r7, #12]
 801f434:	681b      	ldr	r3, [r3, #0]
 801f436:	f042 0208 	orr.w	r2, r2, #8
 801f43a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f43c:	68fb      	ldr	r3, [r7, #12]
 801f43e:	681b      	ldr	r3, [r3, #0]
 801f440:	699a      	ldr	r2, [r3, #24]
 801f442:	68fb      	ldr	r3, [r7, #12]
 801f444:	681b      	ldr	r3, [r3, #0]
 801f446:	f022 0204 	bic.w	r2, r2, #4
 801f44a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f44c:	68fb      	ldr	r3, [r7, #12]
 801f44e:	681b      	ldr	r3, [r3, #0]
 801f450:	6999      	ldr	r1, [r3, #24]
 801f452:	68bb      	ldr	r3, [r7, #8]
 801f454:	691a      	ldr	r2, [r3, #16]
 801f456:	68fb      	ldr	r3, [r7, #12]
 801f458:	681b      	ldr	r3, [r3, #0]
 801f45a:	430a      	orrs	r2, r1
 801f45c:	619a      	str	r2, [r3, #24]
      break;
 801f45e:	e0a5      	b.n	801f5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	68b9      	ldr	r1, [r7, #8]
 801f466:	4618      	mov	r0, r3
 801f468:	f000 fb3a 	bl	801fae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	681b      	ldr	r3, [r3, #0]
 801f470:	699a      	ldr	r2, [r3, #24]
 801f472:	68fb      	ldr	r3, [r7, #12]
 801f474:	681b      	ldr	r3, [r3, #0]
 801f476:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f47a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f47c:	68fb      	ldr	r3, [r7, #12]
 801f47e:	681b      	ldr	r3, [r3, #0]
 801f480:	699a      	ldr	r2, [r3, #24]
 801f482:	68fb      	ldr	r3, [r7, #12]
 801f484:	681b      	ldr	r3, [r3, #0]
 801f486:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f48a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f48c:	68fb      	ldr	r3, [r7, #12]
 801f48e:	681b      	ldr	r3, [r3, #0]
 801f490:	6999      	ldr	r1, [r3, #24]
 801f492:	68bb      	ldr	r3, [r7, #8]
 801f494:	691b      	ldr	r3, [r3, #16]
 801f496:	021a      	lsls	r2, r3, #8
 801f498:	68fb      	ldr	r3, [r7, #12]
 801f49a:	681b      	ldr	r3, [r3, #0]
 801f49c:	430a      	orrs	r2, r1
 801f49e:	619a      	str	r2, [r3, #24]
      break;
 801f4a0:	e084      	b.n	801f5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f4a2:	68fb      	ldr	r3, [r7, #12]
 801f4a4:	681b      	ldr	r3, [r3, #0]
 801f4a6:	68b9      	ldr	r1, [r7, #8]
 801f4a8:	4618      	mov	r0, r3
 801f4aa:	f000 fba3 	bl	801fbf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f4ae:	68fb      	ldr	r3, [r7, #12]
 801f4b0:	681b      	ldr	r3, [r3, #0]
 801f4b2:	69da      	ldr	r2, [r3, #28]
 801f4b4:	68fb      	ldr	r3, [r7, #12]
 801f4b6:	681b      	ldr	r3, [r3, #0]
 801f4b8:	f042 0208 	orr.w	r2, r2, #8
 801f4bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f4be:	68fb      	ldr	r3, [r7, #12]
 801f4c0:	681b      	ldr	r3, [r3, #0]
 801f4c2:	69da      	ldr	r2, [r3, #28]
 801f4c4:	68fb      	ldr	r3, [r7, #12]
 801f4c6:	681b      	ldr	r3, [r3, #0]
 801f4c8:	f022 0204 	bic.w	r2, r2, #4
 801f4cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f4ce:	68fb      	ldr	r3, [r7, #12]
 801f4d0:	681b      	ldr	r3, [r3, #0]
 801f4d2:	69d9      	ldr	r1, [r3, #28]
 801f4d4:	68bb      	ldr	r3, [r7, #8]
 801f4d6:	691a      	ldr	r2, [r3, #16]
 801f4d8:	68fb      	ldr	r3, [r7, #12]
 801f4da:	681b      	ldr	r3, [r3, #0]
 801f4dc:	430a      	orrs	r2, r1
 801f4de:	61da      	str	r2, [r3, #28]
      break;
 801f4e0:	e064      	b.n	801f5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f4e2:	68fb      	ldr	r3, [r7, #12]
 801f4e4:	681b      	ldr	r3, [r3, #0]
 801f4e6:	68b9      	ldr	r1, [r7, #8]
 801f4e8:	4618      	mov	r0, r3
 801f4ea:	f000 fc0b 	bl	801fd04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f4ee:	68fb      	ldr	r3, [r7, #12]
 801f4f0:	681b      	ldr	r3, [r3, #0]
 801f4f2:	69da      	ldr	r2, [r3, #28]
 801f4f4:	68fb      	ldr	r3, [r7, #12]
 801f4f6:	681b      	ldr	r3, [r3, #0]
 801f4f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f4fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f4fe:	68fb      	ldr	r3, [r7, #12]
 801f500:	681b      	ldr	r3, [r3, #0]
 801f502:	69da      	ldr	r2, [r3, #28]
 801f504:	68fb      	ldr	r3, [r7, #12]
 801f506:	681b      	ldr	r3, [r3, #0]
 801f508:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f50c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f50e:	68fb      	ldr	r3, [r7, #12]
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	69d9      	ldr	r1, [r3, #28]
 801f514:	68bb      	ldr	r3, [r7, #8]
 801f516:	691b      	ldr	r3, [r3, #16]
 801f518:	021a      	lsls	r2, r3, #8
 801f51a:	68fb      	ldr	r3, [r7, #12]
 801f51c:	681b      	ldr	r3, [r3, #0]
 801f51e:	430a      	orrs	r2, r1
 801f520:	61da      	str	r2, [r3, #28]
      break;
 801f522:	e043      	b.n	801f5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f524:	68fb      	ldr	r3, [r7, #12]
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	68b9      	ldr	r1, [r7, #8]
 801f52a:	4618      	mov	r0, r3
 801f52c:	f000 fc54 	bl	801fdd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f530:	68fb      	ldr	r3, [r7, #12]
 801f532:	681b      	ldr	r3, [r3, #0]
 801f534:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f536:	68fb      	ldr	r3, [r7, #12]
 801f538:	681b      	ldr	r3, [r3, #0]
 801f53a:	f042 0208 	orr.w	r2, r2, #8
 801f53e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f540:	68fb      	ldr	r3, [r7, #12]
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f546:	68fb      	ldr	r3, [r7, #12]
 801f548:	681b      	ldr	r3, [r3, #0]
 801f54a:	f022 0204 	bic.w	r2, r2, #4
 801f54e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f550:	68fb      	ldr	r3, [r7, #12]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f556:	68bb      	ldr	r3, [r7, #8]
 801f558:	691a      	ldr	r2, [r3, #16]
 801f55a:	68fb      	ldr	r3, [r7, #12]
 801f55c:	681b      	ldr	r3, [r3, #0]
 801f55e:	430a      	orrs	r2, r1
 801f560:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f562:	e023      	b.n	801f5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f564:	68fb      	ldr	r3, [r7, #12]
 801f566:	681b      	ldr	r3, [r3, #0]
 801f568:	68b9      	ldr	r1, [r7, #8]
 801f56a:	4618      	mov	r0, r3
 801f56c:	f000 fc98 	bl	801fea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f570:	68fb      	ldr	r3, [r7, #12]
 801f572:	681b      	ldr	r3, [r3, #0]
 801f574:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f576:	68fb      	ldr	r3, [r7, #12]
 801f578:	681b      	ldr	r3, [r3, #0]
 801f57a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f57e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f580:	68fb      	ldr	r3, [r7, #12]
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f586:	68fb      	ldr	r3, [r7, #12]
 801f588:	681b      	ldr	r3, [r3, #0]
 801f58a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f58e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f590:	68fb      	ldr	r3, [r7, #12]
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f596:	68bb      	ldr	r3, [r7, #8]
 801f598:	691b      	ldr	r3, [r3, #16]
 801f59a:	021a      	lsls	r2, r3, #8
 801f59c:	68fb      	ldr	r3, [r7, #12]
 801f59e:	681b      	ldr	r3, [r3, #0]
 801f5a0:	430a      	orrs	r2, r1
 801f5a2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f5a4:	e002      	b.n	801f5ac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f5a6:	2301      	movs	r3, #1
 801f5a8:	75fb      	strb	r3, [r7, #23]
      break;
 801f5aa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f5ac:	68fb      	ldr	r3, [r7, #12]
 801f5ae:	2200      	movs	r2, #0
 801f5b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f5b4:	7dfb      	ldrb	r3, [r7, #23]
}
 801f5b6:	4618      	mov	r0, r3
 801f5b8:	3718      	adds	r7, #24
 801f5ba:	46bd      	mov	sp, r7
 801f5bc:	bd80      	pop	{r7, pc}
 801f5be:	bf00      	nop

0801f5c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f5c0:	b580      	push	{r7, lr}
 801f5c2:	b084      	sub	sp, #16
 801f5c4:	af00      	add	r7, sp, #0
 801f5c6:	6078      	str	r0, [r7, #4]
 801f5c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f5ca:	2300      	movs	r3, #0
 801f5cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f5ce:	687b      	ldr	r3, [r7, #4]
 801f5d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f5d4:	2b01      	cmp	r3, #1
 801f5d6:	d101      	bne.n	801f5dc <HAL_TIM_ConfigClockSource+0x1c>
 801f5d8:	2302      	movs	r3, #2
 801f5da:	e0dc      	b.n	801f796 <HAL_TIM_ConfigClockSource+0x1d6>
 801f5dc:	687b      	ldr	r3, [r7, #4]
 801f5de:	2201      	movs	r2, #1
 801f5e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f5e4:	687b      	ldr	r3, [r7, #4]
 801f5e6:	2202      	movs	r2, #2
 801f5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f5ec:	687b      	ldr	r3, [r7, #4]
 801f5ee:	681b      	ldr	r3, [r3, #0]
 801f5f0:	689b      	ldr	r3, [r3, #8]
 801f5f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f5f4:	68ba      	ldr	r2, [r7, #8]
 801f5f6:	4b6a      	ldr	r3, [pc, #424]	; (801f7a0 <HAL_TIM_ConfigClockSource+0x1e0>)
 801f5f8:	4013      	ands	r3, r2
 801f5fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f5fc:	68bb      	ldr	r3, [r7, #8]
 801f5fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801f602:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f604:	687b      	ldr	r3, [r7, #4]
 801f606:	681b      	ldr	r3, [r3, #0]
 801f608:	68ba      	ldr	r2, [r7, #8]
 801f60a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f60c:	683b      	ldr	r3, [r7, #0]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	4a64      	ldr	r2, [pc, #400]	; (801f7a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f612:	4293      	cmp	r3, r2
 801f614:	f000 80a9 	beq.w	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f618:	4a62      	ldr	r2, [pc, #392]	; (801f7a4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f61a:	4293      	cmp	r3, r2
 801f61c:	f200 80ae 	bhi.w	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f620:	4a61      	ldr	r2, [pc, #388]	; (801f7a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f622:	4293      	cmp	r3, r2
 801f624:	f000 80a1 	beq.w	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f628:	4a5f      	ldr	r2, [pc, #380]	; (801f7a8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f62a:	4293      	cmp	r3, r2
 801f62c:	f200 80a6 	bhi.w	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f630:	4a5e      	ldr	r2, [pc, #376]	; (801f7ac <HAL_TIM_ConfigClockSource+0x1ec>)
 801f632:	4293      	cmp	r3, r2
 801f634:	f000 8099 	beq.w	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f638:	4a5c      	ldr	r2, [pc, #368]	; (801f7ac <HAL_TIM_ConfigClockSource+0x1ec>)
 801f63a:	4293      	cmp	r3, r2
 801f63c:	f200 809e 	bhi.w	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f640:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f644:	f000 8091 	beq.w	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f648:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f64c:	f200 8096 	bhi.w	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f650:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f654:	f000 8089 	beq.w	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f658:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f65c:	f200 808e 	bhi.w	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f660:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f664:	d03e      	beq.n	801f6e4 <HAL_TIM_ConfigClockSource+0x124>
 801f666:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f66a:	f200 8087 	bhi.w	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f66e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f672:	f000 8086 	beq.w	801f782 <HAL_TIM_ConfigClockSource+0x1c2>
 801f676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f67a:	d87f      	bhi.n	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f67c:	2b70      	cmp	r3, #112	; 0x70
 801f67e:	d01a      	beq.n	801f6b6 <HAL_TIM_ConfigClockSource+0xf6>
 801f680:	2b70      	cmp	r3, #112	; 0x70
 801f682:	d87b      	bhi.n	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f684:	2b60      	cmp	r3, #96	; 0x60
 801f686:	d050      	beq.n	801f72a <HAL_TIM_ConfigClockSource+0x16a>
 801f688:	2b60      	cmp	r3, #96	; 0x60
 801f68a:	d877      	bhi.n	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f68c:	2b50      	cmp	r3, #80	; 0x50
 801f68e:	d03c      	beq.n	801f70a <HAL_TIM_ConfigClockSource+0x14a>
 801f690:	2b50      	cmp	r3, #80	; 0x50
 801f692:	d873      	bhi.n	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f694:	2b40      	cmp	r3, #64	; 0x40
 801f696:	d058      	beq.n	801f74a <HAL_TIM_ConfigClockSource+0x18a>
 801f698:	2b40      	cmp	r3, #64	; 0x40
 801f69a:	d86f      	bhi.n	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f69c:	2b30      	cmp	r3, #48	; 0x30
 801f69e:	d064      	beq.n	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f6a0:	2b30      	cmp	r3, #48	; 0x30
 801f6a2:	d86b      	bhi.n	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f6a4:	2b20      	cmp	r3, #32
 801f6a6:	d060      	beq.n	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f6a8:	2b20      	cmp	r3, #32
 801f6aa:	d867      	bhi.n	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
 801f6ac:	2b00      	cmp	r3, #0
 801f6ae:	d05c      	beq.n	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f6b0:	2b10      	cmp	r3, #16
 801f6b2:	d05a      	beq.n	801f76a <HAL_TIM_ConfigClockSource+0x1aa>
 801f6b4:	e062      	b.n	801f77c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f6b6:	687b      	ldr	r3, [r7, #4]
 801f6b8:	6818      	ldr	r0, [r3, #0]
 801f6ba:	683b      	ldr	r3, [r7, #0]
 801f6bc:	6899      	ldr	r1, [r3, #8]
 801f6be:	683b      	ldr	r3, [r7, #0]
 801f6c0:	685a      	ldr	r2, [r3, #4]
 801f6c2:	683b      	ldr	r3, [r7, #0]
 801f6c4:	68db      	ldr	r3, [r3, #12]
 801f6c6:	f000 fe05 	bl	80202d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801f6ca:	687b      	ldr	r3, [r7, #4]
 801f6cc:	681b      	ldr	r3, [r3, #0]
 801f6ce:	689b      	ldr	r3, [r3, #8]
 801f6d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801f6d2:	68bb      	ldr	r3, [r7, #8]
 801f6d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801f6d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801f6da:	687b      	ldr	r3, [r7, #4]
 801f6dc:	681b      	ldr	r3, [r3, #0]
 801f6de:	68ba      	ldr	r2, [r7, #8]
 801f6e0:	609a      	str	r2, [r3, #8]
      break;
 801f6e2:	e04f      	b.n	801f784 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f6e4:	687b      	ldr	r3, [r7, #4]
 801f6e6:	6818      	ldr	r0, [r3, #0]
 801f6e8:	683b      	ldr	r3, [r7, #0]
 801f6ea:	6899      	ldr	r1, [r3, #8]
 801f6ec:	683b      	ldr	r3, [r7, #0]
 801f6ee:	685a      	ldr	r2, [r3, #4]
 801f6f0:	683b      	ldr	r3, [r7, #0]
 801f6f2:	68db      	ldr	r3, [r3, #12]
 801f6f4:	f000 fdee 	bl	80202d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801f6f8:	687b      	ldr	r3, [r7, #4]
 801f6fa:	681b      	ldr	r3, [r3, #0]
 801f6fc:	689a      	ldr	r2, [r3, #8]
 801f6fe:	687b      	ldr	r3, [r7, #4]
 801f700:	681b      	ldr	r3, [r3, #0]
 801f702:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801f706:	609a      	str	r2, [r3, #8]
      break;
 801f708:	e03c      	b.n	801f784 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f70a:	687b      	ldr	r3, [r7, #4]
 801f70c:	6818      	ldr	r0, [r3, #0]
 801f70e:	683b      	ldr	r3, [r7, #0]
 801f710:	6859      	ldr	r1, [r3, #4]
 801f712:	683b      	ldr	r3, [r7, #0]
 801f714:	68db      	ldr	r3, [r3, #12]
 801f716:	461a      	mov	r2, r3
 801f718:	f000 fca8 	bl	802006c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801f71c:	687b      	ldr	r3, [r7, #4]
 801f71e:	681b      	ldr	r3, [r3, #0]
 801f720:	2150      	movs	r1, #80	; 0x50
 801f722:	4618      	mov	r0, r3
 801f724:	f000 fdb8 	bl	8020298 <TIM_ITRx_SetConfig>
      break;
 801f728:	e02c      	b.n	801f784 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801f72a:	687b      	ldr	r3, [r7, #4]
 801f72c:	6818      	ldr	r0, [r3, #0]
 801f72e:	683b      	ldr	r3, [r7, #0]
 801f730:	6859      	ldr	r1, [r3, #4]
 801f732:	683b      	ldr	r3, [r7, #0]
 801f734:	68db      	ldr	r3, [r3, #12]
 801f736:	461a      	mov	r2, r3
 801f738:	f000 fd04 	bl	8020144 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801f73c:	687b      	ldr	r3, [r7, #4]
 801f73e:	681b      	ldr	r3, [r3, #0]
 801f740:	2160      	movs	r1, #96	; 0x60
 801f742:	4618      	mov	r0, r3
 801f744:	f000 fda8 	bl	8020298 <TIM_ITRx_SetConfig>
      break;
 801f748:	e01c      	b.n	801f784 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f74a:	687b      	ldr	r3, [r7, #4]
 801f74c:	6818      	ldr	r0, [r3, #0]
 801f74e:	683b      	ldr	r3, [r7, #0]
 801f750:	6859      	ldr	r1, [r3, #4]
 801f752:	683b      	ldr	r3, [r7, #0]
 801f754:	68db      	ldr	r3, [r3, #12]
 801f756:	461a      	mov	r2, r3
 801f758:	f000 fc88 	bl	802006c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801f75c:	687b      	ldr	r3, [r7, #4]
 801f75e:	681b      	ldr	r3, [r3, #0]
 801f760:	2140      	movs	r1, #64	; 0x40
 801f762:	4618      	mov	r0, r3
 801f764:	f000 fd98 	bl	8020298 <TIM_ITRx_SetConfig>
      break;
 801f768:	e00c      	b.n	801f784 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801f76a:	687b      	ldr	r3, [r7, #4]
 801f76c:	681a      	ldr	r2, [r3, #0]
 801f76e:	683b      	ldr	r3, [r7, #0]
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	4619      	mov	r1, r3
 801f774:	4610      	mov	r0, r2
 801f776:	f000 fd8f 	bl	8020298 <TIM_ITRx_SetConfig>
      break;
 801f77a:	e003      	b.n	801f784 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801f77c:	2301      	movs	r3, #1
 801f77e:	73fb      	strb	r3, [r7, #15]
      break;
 801f780:	e000      	b.n	801f784 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801f782:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	2201      	movs	r2, #1
 801f788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	2200      	movs	r2, #0
 801f790:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f794:	7bfb      	ldrb	r3, [r7, #15]
}
 801f796:	4618      	mov	r0, r3
 801f798:	3710      	adds	r7, #16
 801f79a:	46bd      	mov	sp, r7
 801f79c:	bd80      	pop	{r7, pc}
 801f79e:	bf00      	nop
 801f7a0:	ffceff88 	.word	0xffceff88
 801f7a4:	00100040 	.word	0x00100040
 801f7a8:	00100030 	.word	0x00100030
 801f7ac:	00100020 	.word	0x00100020

0801f7b0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f7b0:	b480      	push	{r7}
 801f7b2:	b085      	sub	sp, #20
 801f7b4:	af00      	add	r7, sp, #0
 801f7b6:	6078      	str	r0, [r7, #4]
 801f7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801f7ba:	2300      	movs	r3, #0
 801f7bc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801f7be:	683b      	ldr	r3, [r7, #0]
 801f7c0:	2b0c      	cmp	r3, #12
 801f7c2:	d831      	bhi.n	801f828 <HAL_TIM_ReadCapturedValue+0x78>
 801f7c4:	a201      	add	r2, pc, #4	; (adr r2, 801f7cc <HAL_TIM_ReadCapturedValue+0x1c>)
 801f7c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f7ca:	bf00      	nop
 801f7cc:	0801f801 	.word	0x0801f801
 801f7d0:	0801f829 	.word	0x0801f829
 801f7d4:	0801f829 	.word	0x0801f829
 801f7d8:	0801f829 	.word	0x0801f829
 801f7dc:	0801f80b 	.word	0x0801f80b
 801f7e0:	0801f829 	.word	0x0801f829
 801f7e4:	0801f829 	.word	0x0801f829
 801f7e8:	0801f829 	.word	0x0801f829
 801f7ec:	0801f815 	.word	0x0801f815
 801f7f0:	0801f829 	.word	0x0801f829
 801f7f4:	0801f829 	.word	0x0801f829
 801f7f8:	0801f829 	.word	0x0801f829
 801f7fc:	0801f81f 	.word	0x0801f81f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801f800:	687b      	ldr	r3, [r7, #4]
 801f802:	681b      	ldr	r3, [r3, #0]
 801f804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f806:	60fb      	str	r3, [r7, #12]

      break;
 801f808:	e00f      	b.n	801f82a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801f80a:	687b      	ldr	r3, [r7, #4]
 801f80c:	681b      	ldr	r3, [r3, #0]
 801f80e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f810:	60fb      	str	r3, [r7, #12]

      break;
 801f812:	e00a      	b.n	801f82a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801f814:	687b      	ldr	r3, [r7, #4]
 801f816:	681b      	ldr	r3, [r3, #0]
 801f818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f81a:	60fb      	str	r3, [r7, #12]

      break;
 801f81c:	e005      	b.n	801f82a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	681b      	ldr	r3, [r3, #0]
 801f822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f824:	60fb      	str	r3, [r7, #12]

      break;
 801f826:	e000      	b.n	801f82a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801f828:	bf00      	nop
  }

  return tmpreg;
 801f82a:	68fb      	ldr	r3, [r7, #12]
}
 801f82c:	4618      	mov	r0, r3
 801f82e:	3714      	adds	r7, #20
 801f830:	46bd      	mov	sp, r7
 801f832:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f836:	4770      	bx	lr

0801f838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f838:	b480      	push	{r7}
 801f83a:	b083      	sub	sp, #12
 801f83c:	af00      	add	r7, sp, #0
 801f83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f840:	bf00      	nop
 801f842:	370c      	adds	r7, #12
 801f844:	46bd      	mov	sp, r7
 801f846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f84a:	4770      	bx	lr

0801f84c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f84c:	b480      	push	{r7}
 801f84e:	b083      	sub	sp, #12
 801f850:	af00      	add	r7, sp, #0
 801f852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f854:	bf00      	nop
 801f856:	370c      	adds	r7, #12
 801f858:	46bd      	mov	sp, r7
 801f85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f85e:	4770      	bx	lr

0801f860 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f860:	b480      	push	{r7}
 801f862:	b083      	sub	sp, #12
 801f864:	af00      	add	r7, sp, #0
 801f866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f868:	bf00      	nop
 801f86a:	370c      	adds	r7, #12
 801f86c:	46bd      	mov	sp, r7
 801f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f872:	4770      	bx	lr

0801f874 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f874:	b480      	push	{r7}
 801f876:	b085      	sub	sp, #20
 801f878:	af00      	add	r7, sp, #0
 801f87a:	6078      	str	r0, [r7, #4]
 801f87c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f87e:	687b      	ldr	r3, [r7, #4]
 801f880:	681b      	ldr	r3, [r3, #0]
 801f882:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	4a44      	ldr	r2, [pc, #272]	; (801f998 <TIM_Base_SetConfig+0x124>)
 801f888:	4293      	cmp	r3, r2
 801f88a:	d013      	beq.n	801f8b4 <TIM_Base_SetConfig+0x40>
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f892:	d00f      	beq.n	801f8b4 <TIM_Base_SetConfig+0x40>
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	4a41      	ldr	r2, [pc, #260]	; (801f99c <TIM_Base_SetConfig+0x128>)
 801f898:	4293      	cmp	r3, r2
 801f89a:	d00b      	beq.n	801f8b4 <TIM_Base_SetConfig+0x40>
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	4a40      	ldr	r2, [pc, #256]	; (801f9a0 <TIM_Base_SetConfig+0x12c>)
 801f8a0:	4293      	cmp	r3, r2
 801f8a2:	d007      	beq.n	801f8b4 <TIM_Base_SetConfig+0x40>
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	4a3f      	ldr	r2, [pc, #252]	; (801f9a4 <TIM_Base_SetConfig+0x130>)
 801f8a8:	4293      	cmp	r3, r2
 801f8aa:	d003      	beq.n	801f8b4 <TIM_Base_SetConfig+0x40>
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	4a3e      	ldr	r2, [pc, #248]	; (801f9a8 <TIM_Base_SetConfig+0x134>)
 801f8b0:	4293      	cmp	r3, r2
 801f8b2:	d108      	bne.n	801f8c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f8b4:	68fb      	ldr	r3, [r7, #12]
 801f8b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f8ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f8bc:	683b      	ldr	r3, [r7, #0]
 801f8be:	685b      	ldr	r3, [r3, #4]
 801f8c0:	68fa      	ldr	r2, [r7, #12]
 801f8c2:	4313      	orrs	r3, r2
 801f8c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f8c6:	687b      	ldr	r3, [r7, #4]
 801f8c8:	4a33      	ldr	r2, [pc, #204]	; (801f998 <TIM_Base_SetConfig+0x124>)
 801f8ca:	4293      	cmp	r3, r2
 801f8cc:	d027      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f8d4:	d023      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	4a30      	ldr	r2, [pc, #192]	; (801f99c <TIM_Base_SetConfig+0x128>)
 801f8da:	4293      	cmp	r3, r2
 801f8dc:	d01f      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	4a2f      	ldr	r2, [pc, #188]	; (801f9a0 <TIM_Base_SetConfig+0x12c>)
 801f8e2:	4293      	cmp	r3, r2
 801f8e4:	d01b      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	4a2e      	ldr	r2, [pc, #184]	; (801f9a4 <TIM_Base_SetConfig+0x130>)
 801f8ea:	4293      	cmp	r3, r2
 801f8ec:	d017      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f8ee:	687b      	ldr	r3, [r7, #4]
 801f8f0:	4a2d      	ldr	r2, [pc, #180]	; (801f9a8 <TIM_Base_SetConfig+0x134>)
 801f8f2:	4293      	cmp	r3, r2
 801f8f4:	d013      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	4a2c      	ldr	r2, [pc, #176]	; (801f9ac <TIM_Base_SetConfig+0x138>)
 801f8fa:	4293      	cmp	r3, r2
 801f8fc:	d00f      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	4a2b      	ldr	r2, [pc, #172]	; (801f9b0 <TIM_Base_SetConfig+0x13c>)
 801f902:	4293      	cmp	r3, r2
 801f904:	d00b      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	4a2a      	ldr	r2, [pc, #168]	; (801f9b4 <TIM_Base_SetConfig+0x140>)
 801f90a:	4293      	cmp	r3, r2
 801f90c:	d007      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f90e:	687b      	ldr	r3, [r7, #4]
 801f910:	4a29      	ldr	r2, [pc, #164]	; (801f9b8 <TIM_Base_SetConfig+0x144>)
 801f912:	4293      	cmp	r3, r2
 801f914:	d003      	beq.n	801f91e <TIM_Base_SetConfig+0xaa>
 801f916:	687b      	ldr	r3, [r7, #4]
 801f918:	4a28      	ldr	r2, [pc, #160]	; (801f9bc <TIM_Base_SetConfig+0x148>)
 801f91a:	4293      	cmp	r3, r2
 801f91c:	d108      	bne.n	801f930 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f926:	683b      	ldr	r3, [r7, #0]
 801f928:	68db      	ldr	r3, [r3, #12]
 801f92a:	68fa      	ldr	r2, [r7, #12]
 801f92c:	4313      	orrs	r3, r2
 801f92e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f930:	68fb      	ldr	r3, [r7, #12]
 801f932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801f936:	683b      	ldr	r3, [r7, #0]
 801f938:	695b      	ldr	r3, [r3, #20]
 801f93a:	4313      	orrs	r3, r2
 801f93c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f93e:	687b      	ldr	r3, [r7, #4]
 801f940:	68fa      	ldr	r2, [r7, #12]
 801f942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f944:	683b      	ldr	r3, [r7, #0]
 801f946:	689a      	ldr	r2, [r3, #8]
 801f948:	687b      	ldr	r3, [r7, #4]
 801f94a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f94c:	683b      	ldr	r3, [r7, #0]
 801f94e:	681a      	ldr	r2, [r3, #0]
 801f950:	687b      	ldr	r3, [r7, #4]
 801f952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	4a10      	ldr	r2, [pc, #64]	; (801f998 <TIM_Base_SetConfig+0x124>)
 801f958:	4293      	cmp	r3, r2
 801f95a:	d00f      	beq.n	801f97c <TIM_Base_SetConfig+0x108>
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	4a12      	ldr	r2, [pc, #72]	; (801f9a8 <TIM_Base_SetConfig+0x134>)
 801f960:	4293      	cmp	r3, r2
 801f962:	d00b      	beq.n	801f97c <TIM_Base_SetConfig+0x108>
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	4a11      	ldr	r2, [pc, #68]	; (801f9ac <TIM_Base_SetConfig+0x138>)
 801f968:	4293      	cmp	r3, r2
 801f96a:	d007      	beq.n	801f97c <TIM_Base_SetConfig+0x108>
 801f96c:	687b      	ldr	r3, [r7, #4]
 801f96e:	4a10      	ldr	r2, [pc, #64]	; (801f9b0 <TIM_Base_SetConfig+0x13c>)
 801f970:	4293      	cmp	r3, r2
 801f972:	d003      	beq.n	801f97c <TIM_Base_SetConfig+0x108>
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	4a0f      	ldr	r2, [pc, #60]	; (801f9b4 <TIM_Base_SetConfig+0x140>)
 801f978:	4293      	cmp	r3, r2
 801f97a:	d103      	bne.n	801f984 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f97c:	683b      	ldr	r3, [r7, #0]
 801f97e:	691a      	ldr	r2, [r3, #16]
 801f980:	687b      	ldr	r3, [r7, #4]
 801f982:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f984:	687b      	ldr	r3, [r7, #4]
 801f986:	2201      	movs	r2, #1
 801f988:	615a      	str	r2, [r3, #20]
}
 801f98a:	bf00      	nop
 801f98c:	3714      	adds	r7, #20
 801f98e:	46bd      	mov	sp, r7
 801f990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f994:	4770      	bx	lr
 801f996:	bf00      	nop
 801f998:	40010000 	.word	0x40010000
 801f99c:	40000400 	.word	0x40000400
 801f9a0:	40000800 	.word	0x40000800
 801f9a4:	40000c00 	.word	0x40000c00
 801f9a8:	40010400 	.word	0x40010400
 801f9ac:	40014000 	.word	0x40014000
 801f9b0:	40014400 	.word	0x40014400
 801f9b4:	40014800 	.word	0x40014800
 801f9b8:	4000e000 	.word	0x4000e000
 801f9bc:	4000e400 	.word	0x4000e400

0801f9c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f9c0:	b480      	push	{r7}
 801f9c2:	b087      	sub	sp, #28
 801f9c4:	af00      	add	r7, sp, #0
 801f9c6:	6078      	str	r0, [r7, #4]
 801f9c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f9ca:	687b      	ldr	r3, [r7, #4]
 801f9cc:	6a1b      	ldr	r3, [r3, #32]
 801f9ce:	f023 0201 	bic.w	r2, r3, #1
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f9d6:	687b      	ldr	r3, [r7, #4]
 801f9d8:	6a1b      	ldr	r3, [r3, #32]
 801f9da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f9dc:	687b      	ldr	r3, [r7, #4]
 801f9de:	685b      	ldr	r3, [r3, #4]
 801f9e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	699b      	ldr	r3, [r3, #24]
 801f9e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801f9e8:	68fa      	ldr	r2, [r7, #12]
 801f9ea:	4b37      	ldr	r3, [pc, #220]	; (801fac8 <TIM_OC1_SetConfig+0x108>)
 801f9ec:	4013      	ands	r3, r2
 801f9ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801f9f0:	68fb      	ldr	r3, [r7, #12]
 801f9f2:	f023 0303 	bic.w	r3, r3, #3
 801f9f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f9f8:	683b      	ldr	r3, [r7, #0]
 801f9fa:	681b      	ldr	r3, [r3, #0]
 801f9fc:	68fa      	ldr	r2, [r7, #12]
 801f9fe:	4313      	orrs	r3, r2
 801fa00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801fa02:	697b      	ldr	r3, [r7, #20]
 801fa04:	f023 0302 	bic.w	r3, r3, #2
 801fa08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801fa0a:	683b      	ldr	r3, [r7, #0]
 801fa0c:	689b      	ldr	r3, [r3, #8]
 801fa0e:	697a      	ldr	r2, [r7, #20]
 801fa10:	4313      	orrs	r3, r2
 801fa12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801fa14:	687b      	ldr	r3, [r7, #4]
 801fa16:	4a2d      	ldr	r2, [pc, #180]	; (801facc <TIM_OC1_SetConfig+0x10c>)
 801fa18:	4293      	cmp	r3, r2
 801fa1a:	d00f      	beq.n	801fa3c <TIM_OC1_SetConfig+0x7c>
 801fa1c:	687b      	ldr	r3, [r7, #4]
 801fa1e:	4a2c      	ldr	r2, [pc, #176]	; (801fad0 <TIM_OC1_SetConfig+0x110>)
 801fa20:	4293      	cmp	r3, r2
 801fa22:	d00b      	beq.n	801fa3c <TIM_OC1_SetConfig+0x7c>
 801fa24:	687b      	ldr	r3, [r7, #4]
 801fa26:	4a2b      	ldr	r2, [pc, #172]	; (801fad4 <TIM_OC1_SetConfig+0x114>)
 801fa28:	4293      	cmp	r3, r2
 801fa2a:	d007      	beq.n	801fa3c <TIM_OC1_SetConfig+0x7c>
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	4a2a      	ldr	r2, [pc, #168]	; (801fad8 <TIM_OC1_SetConfig+0x118>)
 801fa30:	4293      	cmp	r3, r2
 801fa32:	d003      	beq.n	801fa3c <TIM_OC1_SetConfig+0x7c>
 801fa34:	687b      	ldr	r3, [r7, #4]
 801fa36:	4a29      	ldr	r2, [pc, #164]	; (801fadc <TIM_OC1_SetConfig+0x11c>)
 801fa38:	4293      	cmp	r3, r2
 801fa3a:	d10c      	bne.n	801fa56 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801fa3c:	697b      	ldr	r3, [r7, #20]
 801fa3e:	f023 0308 	bic.w	r3, r3, #8
 801fa42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801fa44:	683b      	ldr	r3, [r7, #0]
 801fa46:	68db      	ldr	r3, [r3, #12]
 801fa48:	697a      	ldr	r2, [r7, #20]
 801fa4a:	4313      	orrs	r3, r2
 801fa4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801fa4e:	697b      	ldr	r3, [r7, #20]
 801fa50:	f023 0304 	bic.w	r3, r3, #4
 801fa54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	4a1c      	ldr	r2, [pc, #112]	; (801facc <TIM_OC1_SetConfig+0x10c>)
 801fa5a:	4293      	cmp	r3, r2
 801fa5c:	d00f      	beq.n	801fa7e <TIM_OC1_SetConfig+0xbe>
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	4a1b      	ldr	r2, [pc, #108]	; (801fad0 <TIM_OC1_SetConfig+0x110>)
 801fa62:	4293      	cmp	r3, r2
 801fa64:	d00b      	beq.n	801fa7e <TIM_OC1_SetConfig+0xbe>
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	4a1a      	ldr	r2, [pc, #104]	; (801fad4 <TIM_OC1_SetConfig+0x114>)
 801fa6a:	4293      	cmp	r3, r2
 801fa6c:	d007      	beq.n	801fa7e <TIM_OC1_SetConfig+0xbe>
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	4a19      	ldr	r2, [pc, #100]	; (801fad8 <TIM_OC1_SetConfig+0x118>)
 801fa72:	4293      	cmp	r3, r2
 801fa74:	d003      	beq.n	801fa7e <TIM_OC1_SetConfig+0xbe>
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	4a18      	ldr	r2, [pc, #96]	; (801fadc <TIM_OC1_SetConfig+0x11c>)
 801fa7a:	4293      	cmp	r3, r2
 801fa7c:	d111      	bne.n	801faa2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801fa7e:	693b      	ldr	r3, [r7, #16]
 801fa80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fa84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801fa86:	693b      	ldr	r3, [r7, #16]
 801fa88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801fa8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801fa8e:	683b      	ldr	r3, [r7, #0]
 801fa90:	695b      	ldr	r3, [r3, #20]
 801fa92:	693a      	ldr	r2, [r7, #16]
 801fa94:	4313      	orrs	r3, r2
 801fa96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801fa98:	683b      	ldr	r3, [r7, #0]
 801fa9a:	699b      	ldr	r3, [r3, #24]
 801fa9c:	693a      	ldr	r2, [r7, #16]
 801fa9e:	4313      	orrs	r3, r2
 801faa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801faa2:	687b      	ldr	r3, [r7, #4]
 801faa4:	693a      	ldr	r2, [r7, #16]
 801faa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	68fa      	ldr	r2, [r7, #12]
 801faac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801faae:	683b      	ldr	r3, [r7, #0]
 801fab0:	685a      	ldr	r2, [r3, #4]
 801fab2:	687b      	ldr	r3, [r7, #4]
 801fab4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fab6:	687b      	ldr	r3, [r7, #4]
 801fab8:	697a      	ldr	r2, [r7, #20]
 801faba:	621a      	str	r2, [r3, #32]
}
 801fabc:	bf00      	nop
 801fabe:	371c      	adds	r7, #28
 801fac0:	46bd      	mov	sp, r7
 801fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fac6:	4770      	bx	lr
 801fac8:	fffeff8f 	.word	0xfffeff8f
 801facc:	40010000 	.word	0x40010000
 801fad0:	40010400 	.word	0x40010400
 801fad4:	40014000 	.word	0x40014000
 801fad8:	40014400 	.word	0x40014400
 801fadc:	40014800 	.word	0x40014800

0801fae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fae0:	b480      	push	{r7}
 801fae2:	b087      	sub	sp, #28
 801fae4:	af00      	add	r7, sp, #0
 801fae6:	6078      	str	r0, [r7, #4]
 801fae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801faea:	687b      	ldr	r3, [r7, #4]
 801faec:	6a1b      	ldr	r3, [r3, #32]
 801faee:	f023 0210 	bic.w	r2, r3, #16
 801faf2:	687b      	ldr	r3, [r7, #4]
 801faf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801faf6:	687b      	ldr	r3, [r7, #4]
 801faf8:	6a1b      	ldr	r3, [r3, #32]
 801fafa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fafc:	687b      	ldr	r3, [r7, #4]
 801fafe:	685b      	ldr	r3, [r3, #4]
 801fb00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fb02:	687b      	ldr	r3, [r7, #4]
 801fb04:	699b      	ldr	r3, [r3, #24]
 801fb06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801fb08:	68fa      	ldr	r2, [r7, #12]
 801fb0a:	4b34      	ldr	r3, [pc, #208]	; (801fbdc <TIM_OC2_SetConfig+0xfc>)
 801fb0c:	4013      	ands	r3, r2
 801fb0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801fb10:	68fb      	ldr	r3, [r7, #12]
 801fb12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fb16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fb18:	683b      	ldr	r3, [r7, #0]
 801fb1a:	681b      	ldr	r3, [r3, #0]
 801fb1c:	021b      	lsls	r3, r3, #8
 801fb1e:	68fa      	ldr	r2, [r7, #12]
 801fb20:	4313      	orrs	r3, r2
 801fb22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801fb24:	697b      	ldr	r3, [r7, #20]
 801fb26:	f023 0320 	bic.w	r3, r3, #32
 801fb2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801fb2c:	683b      	ldr	r3, [r7, #0]
 801fb2e:	689b      	ldr	r3, [r3, #8]
 801fb30:	011b      	lsls	r3, r3, #4
 801fb32:	697a      	ldr	r2, [r7, #20]
 801fb34:	4313      	orrs	r3, r2
 801fb36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801fb38:	687b      	ldr	r3, [r7, #4]
 801fb3a:	4a29      	ldr	r2, [pc, #164]	; (801fbe0 <TIM_OC2_SetConfig+0x100>)
 801fb3c:	4293      	cmp	r3, r2
 801fb3e:	d003      	beq.n	801fb48 <TIM_OC2_SetConfig+0x68>
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	4a28      	ldr	r2, [pc, #160]	; (801fbe4 <TIM_OC2_SetConfig+0x104>)
 801fb44:	4293      	cmp	r3, r2
 801fb46:	d10d      	bne.n	801fb64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801fb48:	697b      	ldr	r3, [r7, #20]
 801fb4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fb4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801fb50:	683b      	ldr	r3, [r7, #0]
 801fb52:	68db      	ldr	r3, [r3, #12]
 801fb54:	011b      	lsls	r3, r3, #4
 801fb56:	697a      	ldr	r2, [r7, #20]
 801fb58:	4313      	orrs	r3, r2
 801fb5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801fb5c:	697b      	ldr	r3, [r7, #20]
 801fb5e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fb62:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fb64:	687b      	ldr	r3, [r7, #4]
 801fb66:	4a1e      	ldr	r2, [pc, #120]	; (801fbe0 <TIM_OC2_SetConfig+0x100>)
 801fb68:	4293      	cmp	r3, r2
 801fb6a:	d00f      	beq.n	801fb8c <TIM_OC2_SetConfig+0xac>
 801fb6c:	687b      	ldr	r3, [r7, #4]
 801fb6e:	4a1d      	ldr	r2, [pc, #116]	; (801fbe4 <TIM_OC2_SetConfig+0x104>)
 801fb70:	4293      	cmp	r3, r2
 801fb72:	d00b      	beq.n	801fb8c <TIM_OC2_SetConfig+0xac>
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	4a1c      	ldr	r2, [pc, #112]	; (801fbe8 <TIM_OC2_SetConfig+0x108>)
 801fb78:	4293      	cmp	r3, r2
 801fb7a:	d007      	beq.n	801fb8c <TIM_OC2_SetConfig+0xac>
 801fb7c:	687b      	ldr	r3, [r7, #4]
 801fb7e:	4a1b      	ldr	r2, [pc, #108]	; (801fbec <TIM_OC2_SetConfig+0x10c>)
 801fb80:	4293      	cmp	r3, r2
 801fb82:	d003      	beq.n	801fb8c <TIM_OC2_SetConfig+0xac>
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	4a1a      	ldr	r2, [pc, #104]	; (801fbf0 <TIM_OC2_SetConfig+0x110>)
 801fb88:	4293      	cmp	r3, r2
 801fb8a:	d113      	bne.n	801fbb4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801fb8c:	693b      	ldr	r3, [r7, #16]
 801fb8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fb92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801fb94:	693b      	ldr	r3, [r7, #16]
 801fb96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fb9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801fb9c:	683b      	ldr	r3, [r7, #0]
 801fb9e:	695b      	ldr	r3, [r3, #20]
 801fba0:	009b      	lsls	r3, r3, #2
 801fba2:	693a      	ldr	r2, [r7, #16]
 801fba4:	4313      	orrs	r3, r2
 801fba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801fba8:	683b      	ldr	r3, [r7, #0]
 801fbaa:	699b      	ldr	r3, [r3, #24]
 801fbac:	009b      	lsls	r3, r3, #2
 801fbae:	693a      	ldr	r2, [r7, #16]
 801fbb0:	4313      	orrs	r3, r2
 801fbb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fbb4:	687b      	ldr	r3, [r7, #4]
 801fbb6:	693a      	ldr	r2, [r7, #16]
 801fbb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fbba:	687b      	ldr	r3, [r7, #4]
 801fbbc:	68fa      	ldr	r2, [r7, #12]
 801fbbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801fbc0:	683b      	ldr	r3, [r7, #0]
 801fbc2:	685a      	ldr	r2, [r3, #4]
 801fbc4:	687b      	ldr	r3, [r7, #4]
 801fbc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fbc8:	687b      	ldr	r3, [r7, #4]
 801fbca:	697a      	ldr	r2, [r7, #20]
 801fbcc:	621a      	str	r2, [r3, #32]
}
 801fbce:	bf00      	nop
 801fbd0:	371c      	adds	r7, #28
 801fbd2:	46bd      	mov	sp, r7
 801fbd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fbd8:	4770      	bx	lr
 801fbda:	bf00      	nop
 801fbdc:	feff8fff 	.word	0xfeff8fff
 801fbe0:	40010000 	.word	0x40010000
 801fbe4:	40010400 	.word	0x40010400
 801fbe8:	40014000 	.word	0x40014000
 801fbec:	40014400 	.word	0x40014400
 801fbf0:	40014800 	.word	0x40014800

0801fbf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fbf4:	b480      	push	{r7}
 801fbf6:	b087      	sub	sp, #28
 801fbf8:	af00      	add	r7, sp, #0
 801fbfa:	6078      	str	r0, [r7, #4]
 801fbfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	6a1b      	ldr	r3, [r3, #32]
 801fc02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	6a1b      	ldr	r3, [r3, #32]
 801fc0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fc10:	687b      	ldr	r3, [r7, #4]
 801fc12:	685b      	ldr	r3, [r3, #4]
 801fc14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	69db      	ldr	r3, [r3, #28]
 801fc1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801fc1c:	68fa      	ldr	r2, [r7, #12]
 801fc1e:	4b33      	ldr	r3, [pc, #204]	; (801fcec <TIM_OC3_SetConfig+0xf8>)
 801fc20:	4013      	ands	r3, r2
 801fc22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801fc24:	68fb      	ldr	r3, [r7, #12]
 801fc26:	f023 0303 	bic.w	r3, r3, #3
 801fc2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fc2c:	683b      	ldr	r3, [r7, #0]
 801fc2e:	681b      	ldr	r3, [r3, #0]
 801fc30:	68fa      	ldr	r2, [r7, #12]
 801fc32:	4313      	orrs	r3, r2
 801fc34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801fc36:	697b      	ldr	r3, [r7, #20]
 801fc38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801fc3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801fc3e:	683b      	ldr	r3, [r7, #0]
 801fc40:	689b      	ldr	r3, [r3, #8]
 801fc42:	021b      	lsls	r3, r3, #8
 801fc44:	697a      	ldr	r2, [r7, #20]
 801fc46:	4313      	orrs	r3, r2
 801fc48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	4a28      	ldr	r2, [pc, #160]	; (801fcf0 <TIM_OC3_SetConfig+0xfc>)
 801fc4e:	4293      	cmp	r3, r2
 801fc50:	d003      	beq.n	801fc5a <TIM_OC3_SetConfig+0x66>
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	4a27      	ldr	r2, [pc, #156]	; (801fcf4 <TIM_OC3_SetConfig+0x100>)
 801fc56:	4293      	cmp	r3, r2
 801fc58:	d10d      	bne.n	801fc76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801fc5a:	697b      	ldr	r3, [r7, #20]
 801fc5c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fc60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801fc62:	683b      	ldr	r3, [r7, #0]
 801fc64:	68db      	ldr	r3, [r3, #12]
 801fc66:	021b      	lsls	r3, r3, #8
 801fc68:	697a      	ldr	r2, [r7, #20]
 801fc6a:	4313      	orrs	r3, r2
 801fc6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801fc6e:	697b      	ldr	r3, [r7, #20]
 801fc70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fc74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fc76:	687b      	ldr	r3, [r7, #4]
 801fc78:	4a1d      	ldr	r2, [pc, #116]	; (801fcf0 <TIM_OC3_SetConfig+0xfc>)
 801fc7a:	4293      	cmp	r3, r2
 801fc7c:	d00f      	beq.n	801fc9e <TIM_OC3_SetConfig+0xaa>
 801fc7e:	687b      	ldr	r3, [r7, #4]
 801fc80:	4a1c      	ldr	r2, [pc, #112]	; (801fcf4 <TIM_OC3_SetConfig+0x100>)
 801fc82:	4293      	cmp	r3, r2
 801fc84:	d00b      	beq.n	801fc9e <TIM_OC3_SetConfig+0xaa>
 801fc86:	687b      	ldr	r3, [r7, #4]
 801fc88:	4a1b      	ldr	r2, [pc, #108]	; (801fcf8 <TIM_OC3_SetConfig+0x104>)
 801fc8a:	4293      	cmp	r3, r2
 801fc8c:	d007      	beq.n	801fc9e <TIM_OC3_SetConfig+0xaa>
 801fc8e:	687b      	ldr	r3, [r7, #4]
 801fc90:	4a1a      	ldr	r2, [pc, #104]	; (801fcfc <TIM_OC3_SetConfig+0x108>)
 801fc92:	4293      	cmp	r3, r2
 801fc94:	d003      	beq.n	801fc9e <TIM_OC3_SetConfig+0xaa>
 801fc96:	687b      	ldr	r3, [r7, #4]
 801fc98:	4a19      	ldr	r2, [pc, #100]	; (801fd00 <TIM_OC3_SetConfig+0x10c>)
 801fc9a:	4293      	cmp	r3, r2
 801fc9c:	d113      	bne.n	801fcc6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801fc9e:	693b      	ldr	r3, [r7, #16]
 801fca0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801fca6:	693b      	ldr	r3, [r7, #16]
 801fca8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fcac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801fcae:	683b      	ldr	r3, [r7, #0]
 801fcb0:	695b      	ldr	r3, [r3, #20]
 801fcb2:	011b      	lsls	r3, r3, #4
 801fcb4:	693a      	ldr	r2, [r7, #16]
 801fcb6:	4313      	orrs	r3, r2
 801fcb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801fcba:	683b      	ldr	r3, [r7, #0]
 801fcbc:	699b      	ldr	r3, [r3, #24]
 801fcbe:	011b      	lsls	r3, r3, #4
 801fcc0:	693a      	ldr	r2, [r7, #16]
 801fcc2:	4313      	orrs	r3, r2
 801fcc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fcc6:	687b      	ldr	r3, [r7, #4]
 801fcc8:	693a      	ldr	r2, [r7, #16]
 801fcca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	68fa      	ldr	r2, [r7, #12]
 801fcd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801fcd2:	683b      	ldr	r3, [r7, #0]
 801fcd4:	685a      	ldr	r2, [r3, #4]
 801fcd6:	687b      	ldr	r3, [r7, #4]
 801fcd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fcda:	687b      	ldr	r3, [r7, #4]
 801fcdc:	697a      	ldr	r2, [r7, #20]
 801fcde:	621a      	str	r2, [r3, #32]
}
 801fce0:	bf00      	nop
 801fce2:	371c      	adds	r7, #28
 801fce4:	46bd      	mov	sp, r7
 801fce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcea:	4770      	bx	lr
 801fcec:	fffeff8f 	.word	0xfffeff8f
 801fcf0:	40010000 	.word	0x40010000
 801fcf4:	40010400 	.word	0x40010400
 801fcf8:	40014000 	.word	0x40014000
 801fcfc:	40014400 	.word	0x40014400
 801fd00:	40014800 	.word	0x40014800

0801fd04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fd04:	b480      	push	{r7}
 801fd06:	b087      	sub	sp, #28
 801fd08:	af00      	add	r7, sp, #0
 801fd0a:	6078      	str	r0, [r7, #4]
 801fd0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	6a1b      	ldr	r3, [r3, #32]
 801fd12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	6a1b      	ldr	r3, [r3, #32]
 801fd1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fd20:	687b      	ldr	r3, [r7, #4]
 801fd22:	685b      	ldr	r3, [r3, #4]
 801fd24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fd26:	687b      	ldr	r3, [r7, #4]
 801fd28:	69db      	ldr	r3, [r3, #28]
 801fd2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801fd2c:	68fa      	ldr	r2, [r7, #12]
 801fd2e:	4b24      	ldr	r3, [pc, #144]	; (801fdc0 <TIM_OC4_SetConfig+0xbc>)
 801fd30:	4013      	ands	r3, r2
 801fd32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801fd34:	68fb      	ldr	r3, [r7, #12]
 801fd36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fd3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fd3c:	683b      	ldr	r3, [r7, #0]
 801fd3e:	681b      	ldr	r3, [r3, #0]
 801fd40:	021b      	lsls	r3, r3, #8
 801fd42:	68fa      	ldr	r2, [r7, #12]
 801fd44:	4313      	orrs	r3, r2
 801fd46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801fd48:	693b      	ldr	r3, [r7, #16]
 801fd4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fd4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801fd50:	683b      	ldr	r3, [r7, #0]
 801fd52:	689b      	ldr	r3, [r3, #8]
 801fd54:	031b      	lsls	r3, r3, #12
 801fd56:	693a      	ldr	r2, [r7, #16]
 801fd58:	4313      	orrs	r3, r2
 801fd5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fd5c:	687b      	ldr	r3, [r7, #4]
 801fd5e:	4a19      	ldr	r2, [pc, #100]	; (801fdc4 <TIM_OC4_SetConfig+0xc0>)
 801fd60:	4293      	cmp	r3, r2
 801fd62:	d00f      	beq.n	801fd84 <TIM_OC4_SetConfig+0x80>
 801fd64:	687b      	ldr	r3, [r7, #4]
 801fd66:	4a18      	ldr	r2, [pc, #96]	; (801fdc8 <TIM_OC4_SetConfig+0xc4>)
 801fd68:	4293      	cmp	r3, r2
 801fd6a:	d00b      	beq.n	801fd84 <TIM_OC4_SetConfig+0x80>
 801fd6c:	687b      	ldr	r3, [r7, #4]
 801fd6e:	4a17      	ldr	r2, [pc, #92]	; (801fdcc <TIM_OC4_SetConfig+0xc8>)
 801fd70:	4293      	cmp	r3, r2
 801fd72:	d007      	beq.n	801fd84 <TIM_OC4_SetConfig+0x80>
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	4a16      	ldr	r2, [pc, #88]	; (801fdd0 <TIM_OC4_SetConfig+0xcc>)
 801fd78:	4293      	cmp	r3, r2
 801fd7a:	d003      	beq.n	801fd84 <TIM_OC4_SetConfig+0x80>
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	4a15      	ldr	r2, [pc, #84]	; (801fdd4 <TIM_OC4_SetConfig+0xd0>)
 801fd80:	4293      	cmp	r3, r2
 801fd82:	d109      	bne.n	801fd98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801fd84:	697b      	ldr	r3, [r7, #20]
 801fd86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801fd8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801fd8c:	683b      	ldr	r3, [r7, #0]
 801fd8e:	695b      	ldr	r3, [r3, #20]
 801fd90:	019b      	lsls	r3, r3, #6
 801fd92:	697a      	ldr	r2, [r7, #20]
 801fd94:	4313      	orrs	r3, r2
 801fd96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	697a      	ldr	r2, [r7, #20]
 801fd9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	68fa      	ldr	r2, [r7, #12]
 801fda2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801fda4:	683b      	ldr	r3, [r7, #0]
 801fda6:	685a      	ldr	r2, [r3, #4]
 801fda8:	687b      	ldr	r3, [r7, #4]
 801fdaa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	693a      	ldr	r2, [r7, #16]
 801fdb0:	621a      	str	r2, [r3, #32]
}
 801fdb2:	bf00      	nop
 801fdb4:	371c      	adds	r7, #28
 801fdb6:	46bd      	mov	sp, r7
 801fdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdbc:	4770      	bx	lr
 801fdbe:	bf00      	nop
 801fdc0:	feff8fff 	.word	0xfeff8fff
 801fdc4:	40010000 	.word	0x40010000
 801fdc8:	40010400 	.word	0x40010400
 801fdcc:	40014000 	.word	0x40014000
 801fdd0:	40014400 	.word	0x40014400
 801fdd4:	40014800 	.word	0x40014800

0801fdd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801fdd8:	b480      	push	{r7}
 801fdda:	b087      	sub	sp, #28
 801fddc:	af00      	add	r7, sp, #0
 801fdde:	6078      	str	r0, [r7, #4]
 801fde0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	6a1b      	ldr	r3, [r3, #32]
 801fde6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801fdea:	687b      	ldr	r3, [r7, #4]
 801fdec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	6a1b      	ldr	r3, [r3, #32]
 801fdf2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fdf4:	687b      	ldr	r3, [r7, #4]
 801fdf6:	685b      	ldr	r3, [r3, #4]
 801fdf8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fdfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801fe00:	68fa      	ldr	r2, [r7, #12]
 801fe02:	4b21      	ldr	r3, [pc, #132]	; (801fe88 <TIM_OC5_SetConfig+0xb0>)
 801fe04:	4013      	ands	r3, r2
 801fe06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fe08:	683b      	ldr	r3, [r7, #0]
 801fe0a:	681b      	ldr	r3, [r3, #0]
 801fe0c:	68fa      	ldr	r2, [r7, #12]
 801fe0e:	4313      	orrs	r3, r2
 801fe10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801fe12:	693b      	ldr	r3, [r7, #16]
 801fe14:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801fe18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	689b      	ldr	r3, [r3, #8]
 801fe1e:	041b      	lsls	r3, r3, #16
 801fe20:	693a      	ldr	r2, [r7, #16]
 801fe22:	4313      	orrs	r3, r2
 801fe24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	4a18      	ldr	r2, [pc, #96]	; (801fe8c <TIM_OC5_SetConfig+0xb4>)
 801fe2a:	4293      	cmp	r3, r2
 801fe2c:	d00f      	beq.n	801fe4e <TIM_OC5_SetConfig+0x76>
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	4a17      	ldr	r2, [pc, #92]	; (801fe90 <TIM_OC5_SetConfig+0xb8>)
 801fe32:	4293      	cmp	r3, r2
 801fe34:	d00b      	beq.n	801fe4e <TIM_OC5_SetConfig+0x76>
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	4a16      	ldr	r2, [pc, #88]	; (801fe94 <TIM_OC5_SetConfig+0xbc>)
 801fe3a:	4293      	cmp	r3, r2
 801fe3c:	d007      	beq.n	801fe4e <TIM_OC5_SetConfig+0x76>
 801fe3e:	687b      	ldr	r3, [r7, #4]
 801fe40:	4a15      	ldr	r2, [pc, #84]	; (801fe98 <TIM_OC5_SetConfig+0xc0>)
 801fe42:	4293      	cmp	r3, r2
 801fe44:	d003      	beq.n	801fe4e <TIM_OC5_SetConfig+0x76>
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	4a14      	ldr	r2, [pc, #80]	; (801fe9c <TIM_OC5_SetConfig+0xc4>)
 801fe4a:	4293      	cmp	r3, r2
 801fe4c:	d109      	bne.n	801fe62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801fe4e:	697b      	ldr	r3, [r7, #20]
 801fe50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fe54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801fe56:	683b      	ldr	r3, [r7, #0]
 801fe58:	695b      	ldr	r3, [r3, #20]
 801fe5a:	021b      	lsls	r3, r3, #8
 801fe5c:	697a      	ldr	r2, [r7, #20]
 801fe5e:	4313      	orrs	r3, r2
 801fe60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	697a      	ldr	r2, [r7, #20]
 801fe66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fe68:	687b      	ldr	r3, [r7, #4]
 801fe6a:	68fa      	ldr	r2, [r7, #12]
 801fe6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801fe6e:	683b      	ldr	r3, [r7, #0]
 801fe70:	685a      	ldr	r2, [r3, #4]
 801fe72:	687b      	ldr	r3, [r7, #4]
 801fe74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	693a      	ldr	r2, [r7, #16]
 801fe7a:	621a      	str	r2, [r3, #32]
}
 801fe7c:	bf00      	nop
 801fe7e:	371c      	adds	r7, #28
 801fe80:	46bd      	mov	sp, r7
 801fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe86:	4770      	bx	lr
 801fe88:	fffeff8f 	.word	0xfffeff8f
 801fe8c:	40010000 	.word	0x40010000
 801fe90:	40010400 	.word	0x40010400
 801fe94:	40014000 	.word	0x40014000
 801fe98:	40014400 	.word	0x40014400
 801fe9c:	40014800 	.word	0x40014800

0801fea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801fea0:	b480      	push	{r7}
 801fea2:	b087      	sub	sp, #28
 801fea4:	af00      	add	r7, sp, #0
 801fea6:	6078      	str	r0, [r7, #4]
 801fea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801feaa:	687b      	ldr	r3, [r7, #4]
 801feac:	6a1b      	ldr	r3, [r3, #32]
 801feae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801feb2:	687b      	ldr	r3, [r7, #4]
 801feb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801feb6:	687b      	ldr	r3, [r7, #4]
 801feb8:	6a1b      	ldr	r3, [r3, #32]
 801feba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	685b      	ldr	r3, [r3, #4]
 801fec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fec2:	687b      	ldr	r3, [r7, #4]
 801fec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801fec8:	68fa      	ldr	r2, [r7, #12]
 801feca:	4b22      	ldr	r3, [pc, #136]	; (801ff54 <TIM_OC6_SetConfig+0xb4>)
 801fecc:	4013      	ands	r3, r2
 801fece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fed0:	683b      	ldr	r3, [r7, #0]
 801fed2:	681b      	ldr	r3, [r3, #0]
 801fed4:	021b      	lsls	r3, r3, #8
 801fed6:	68fa      	ldr	r2, [r7, #12]
 801fed8:	4313      	orrs	r3, r2
 801feda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801fedc:	693b      	ldr	r3, [r7, #16]
 801fede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801fee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801fee4:	683b      	ldr	r3, [r7, #0]
 801fee6:	689b      	ldr	r3, [r3, #8]
 801fee8:	051b      	lsls	r3, r3, #20
 801feea:	693a      	ldr	r2, [r7, #16]
 801feec:	4313      	orrs	r3, r2
 801feee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fef0:	687b      	ldr	r3, [r7, #4]
 801fef2:	4a19      	ldr	r2, [pc, #100]	; (801ff58 <TIM_OC6_SetConfig+0xb8>)
 801fef4:	4293      	cmp	r3, r2
 801fef6:	d00f      	beq.n	801ff18 <TIM_OC6_SetConfig+0x78>
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	4a18      	ldr	r2, [pc, #96]	; (801ff5c <TIM_OC6_SetConfig+0xbc>)
 801fefc:	4293      	cmp	r3, r2
 801fefe:	d00b      	beq.n	801ff18 <TIM_OC6_SetConfig+0x78>
 801ff00:	687b      	ldr	r3, [r7, #4]
 801ff02:	4a17      	ldr	r2, [pc, #92]	; (801ff60 <TIM_OC6_SetConfig+0xc0>)
 801ff04:	4293      	cmp	r3, r2
 801ff06:	d007      	beq.n	801ff18 <TIM_OC6_SetConfig+0x78>
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	4a16      	ldr	r2, [pc, #88]	; (801ff64 <TIM_OC6_SetConfig+0xc4>)
 801ff0c:	4293      	cmp	r3, r2
 801ff0e:	d003      	beq.n	801ff18 <TIM_OC6_SetConfig+0x78>
 801ff10:	687b      	ldr	r3, [r7, #4]
 801ff12:	4a15      	ldr	r2, [pc, #84]	; (801ff68 <TIM_OC6_SetConfig+0xc8>)
 801ff14:	4293      	cmp	r3, r2
 801ff16:	d109      	bne.n	801ff2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801ff18:	697b      	ldr	r3, [r7, #20]
 801ff1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801ff1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801ff20:	683b      	ldr	r3, [r7, #0]
 801ff22:	695b      	ldr	r3, [r3, #20]
 801ff24:	029b      	lsls	r3, r3, #10
 801ff26:	697a      	ldr	r2, [r7, #20]
 801ff28:	4313      	orrs	r3, r2
 801ff2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ff2c:	687b      	ldr	r3, [r7, #4]
 801ff2e:	697a      	ldr	r2, [r7, #20]
 801ff30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ff32:	687b      	ldr	r3, [r7, #4]
 801ff34:	68fa      	ldr	r2, [r7, #12]
 801ff36:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801ff38:	683b      	ldr	r3, [r7, #0]
 801ff3a:	685a      	ldr	r2, [r3, #4]
 801ff3c:	687b      	ldr	r3, [r7, #4]
 801ff3e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ff40:	687b      	ldr	r3, [r7, #4]
 801ff42:	693a      	ldr	r2, [r7, #16]
 801ff44:	621a      	str	r2, [r3, #32]
}
 801ff46:	bf00      	nop
 801ff48:	371c      	adds	r7, #28
 801ff4a:	46bd      	mov	sp, r7
 801ff4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff50:	4770      	bx	lr
 801ff52:	bf00      	nop
 801ff54:	feff8fff 	.word	0xfeff8fff
 801ff58:	40010000 	.word	0x40010000
 801ff5c:	40010400 	.word	0x40010400
 801ff60:	40014000 	.word	0x40014000
 801ff64:	40014400 	.word	0x40014400
 801ff68:	40014800 	.word	0x40014800

0801ff6c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801ff6c:	b480      	push	{r7}
 801ff6e:	b087      	sub	sp, #28
 801ff70:	af00      	add	r7, sp, #0
 801ff72:	60f8      	str	r0, [r7, #12]
 801ff74:	60b9      	str	r1, [r7, #8]
 801ff76:	607a      	str	r2, [r7, #4]
 801ff78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ff7a:	68fb      	ldr	r3, [r7, #12]
 801ff7c:	6a1b      	ldr	r3, [r3, #32]
 801ff7e:	f023 0201 	bic.w	r2, r3, #1
 801ff82:	68fb      	ldr	r3, [r7, #12]
 801ff84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ff86:	68fb      	ldr	r3, [r7, #12]
 801ff88:	699b      	ldr	r3, [r3, #24]
 801ff8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801ff8c:	68fb      	ldr	r3, [r7, #12]
 801ff8e:	6a1b      	ldr	r3, [r3, #32]
 801ff90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801ff92:	68fb      	ldr	r3, [r7, #12]
 801ff94:	4a2c      	ldr	r2, [pc, #176]	; (8020048 <TIM_TI1_SetConfig+0xdc>)
 801ff96:	4293      	cmp	r3, r2
 801ff98:	d023      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ff9a:	68fb      	ldr	r3, [r7, #12]
 801ff9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ffa0:	d01f      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ffa2:	68fb      	ldr	r3, [r7, #12]
 801ffa4:	4a29      	ldr	r2, [pc, #164]	; (802004c <TIM_TI1_SetConfig+0xe0>)
 801ffa6:	4293      	cmp	r3, r2
 801ffa8:	d01b      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ffaa:	68fb      	ldr	r3, [r7, #12]
 801ffac:	4a28      	ldr	r2, [pc, #160]	; (8020050 <TIM_TI1_SetConfig+0xe4>)
 801ffae:	4293      	cmp	r3, r2
 801ffb0:	d017      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ffb2:	68fb      	ldr	r3, [r7, #12]
 801ffb4:	4a27      	ldr	r2, [pc, #156]	; (8020054 <TIM_TI1_SetConfig+0xe8>)
 801ffb6:	4293      	cmp	r3, r2
 801ffb8:	d013      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ffba:	68fb      	ldr	r3, [r7, #12]
 801ffbc:	4a26      	ldr	r2, [pc, #152]	; (8020058 <TIM_TI1_SetConfig+0xec>)
 801ffbe:	4293      	cmp	r3, r2
 801ffc0:	d00f      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ffc2:	68fb      	ldr	r3, [r7, #12]
 801ffc4:	4a25      	ldr	r2, [pc, #148]	; (802005c <TIM_TI1_SetConfig+0xf0>)
 801ffc6:	4293      	cmp	r3, r2
 801ffc8:	d00b      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ffca:	68fb      	ldr	r3, [r7, #12]
 801ffcc:	4a24      	ldr	r2, [pc, #144]	; (8020060 <TIM_TI1_SetConfig+0xf4>)
 801ffce:	4293      	cmp	r3, r2
 801ffd0:	d007      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ffd2:	68fb      	ldr	r3, [r7, #12]
 801ffd4:	4a23      	ldr	r2, [pc, #140]	; (8020064 <TIM_TI1_SetConfig+0xf8>)
 801ffd6:	4293      	cmp	r3, r2
 801ffd8:	d003      	beq.n	801ffe2 <TIM_TI1_SetConfig+0x76>
 801ffda:	68fb      	ldr	r3, [r7, #12]
 801ffdc:	4a22      	ldr	r2, [pc, #136]	; (8020068 <TIM_TI1_SetConfig+0xfc>)
 801ffde:	4293      	cmp	r3, r2
 801ffe0:	d101      	bne.n	801ffe6 <TIM_TI1_SetConfig+0x7a>
 801ffe2:	2301      	movs	r3, #1
 801ffe4:	e000      	b.n	801ffe8 <TIM_TI1_SetConfig+0x7c>
 801ffe6:	2300      	movs	r3, #0
 801ffe8:	2b00      	cmp	r3, #0
 801ffea:	d008      	beq.n	801fffe <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801ffec:	697b      	ldr	r3, [r7, #20]
 801ffee:	f023 0303 	bic.w	r3, r3, #3
 801fff2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801fff4:	697a      	ldr	r2, [r7, #20]
 801fff6:	687b      	ldr	r3, [r7, #4]
 801fff8:	4313      	orrs	r3, r2
 801fffa:	617b      	str	r3, [r7, #20]
 801fffc:	e003      	b.n	8020006 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801fffe:	697b      	ldr	r3, [r7, #20]
 8020000:	f043 0301 	orr.w	r3, r3, #1
 8020004:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020006:	697b      	ldr	r3, [r7, #20]
 8020008:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 802000c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 802000e:	683b      	ldr	r3, [r7, #0]
 8020010:	011b      	lsls	r3, r3, #4
 8020012:	b2db      	uxtb	r3, r3
 8020014:	697a      	ldr	r2, [r7, #20]
 8020016:	4313      	orrs	r3, r2
 8020018:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802001a:	693b      	ldr	r3, [r7, #16]
 802001c:	f023 030a 	bic.w	r3, r3, #10
 8020020:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8020022:	68bb      	ldr	r3, [r7, #8]
 8020024:	f003 030a 	and.w	r3, r3, #10
 8020028:	693a      	ldr	r2, [r7, #16]
 802002a:	4313      	orrs	r3, r2
 802002c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 802002e:	68fb      	ldr	r3, [r7, #12]
 8020030:	697a      	ldr	r2, [r7, #20]
 8020032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020034:	68fb      	ldr	r3, [r7, #12]
 8020036:	693a      	ldr	r2, [r7, #16]
 8020038:	621a      	str	r2, [r3, #32]
}
 802003a:	bf00      	nop
 802003c:	371c      	adds	r7, #28
 802003e:	46bd      	mov	sp, r7
 8020040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020044:	4770      	bx	lr
 8020046:	bf00      	nop
 8020048:	40010000 	.word	0x40010000
 802004c:	40000400 	.word	0x40000400
 8020050:	40000800 	.word	0x40000800
 8020054:	40000c00 	.word	0x40000c00
 8020058:	40010400 	.word	0x40010400
 802005c:	40001800 	.word	0x40001800
 8020060:	40014000 	.word	0x40014000
 8020064:	4000e000 	.word	0x4000e000
 8020068:	4000e400 	.word	0x4000e400

0802006c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 802006c:	b480      	push	{r7}
 802006e:	b087      	sub	sp, #28
 8020070:	af00      	add	r7, sp, #0
 8020072:	60f8      	str	r0, [r7, #12]
 8020074:	60b9      	str	r1, [r7, #8]
 8020076:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8020078:	68fb      	ldr	r3, [r7, #12]
 802007a:	6a1b      	ldr	r3, [r3, #32]
 802007c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 802007e:	68fb      	ldr	r3, [r7, #12]
 8020080:	6a1b      	ldr	r3, [r3, #32]
 8020082:	f023 0201 	bic.w	r2, r3, #1
 8020086:	68fb      	ldr	r3, [r7, #12]
 8020088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802008a:	68fb      	ldr	r3, [r7, #12]
 802008c:	699b      	ldr	r3, [r3, #24]
 802008e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8020090:	693b      	ldr	r3, [r7, #16]
 8020092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020096:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8020098:	687b      	ldr	r3, [r7, #4]
 802009a:	011b      	lsls	r3, r3, #4
 802009c:	693a      	ldr	r2, [r7, #16]
 802009e:	4313      	orrs	r3, r2
 80200a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80200a2:	697b      	ldr	r3, [r7, #20]
 80200a4:	f023 030a 	bic.w	r3, r3, #10
 80200a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80200aa:	697a      	ldr	r2, [r7, #20]
 80200ac:	68bb      	ldr	r3, [r7, #8]
 80200ae:	4313      	orrs	r3, r2
 80200b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80200b2:	68fb      	ldr	r3, [r7, #12]
 80200b4:	693a      	ldr	r2, [r7, #16]
 80200b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80200b8:	68fb      	ldr	r3, [r7, #12]
 80200ba:	697a      	ldr	r2, [r7, #20]
 80200bc:	621a      	str	r2, [r3, #32]
}
 80200be:	bf00      	nop
 80200c0:	371c      	adds	r7, #28
 80200c2:	46bd      	mov	sp, r7
 80200c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200c8:	4770      	bx	lr

080200ca <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80200ca:	b480      	push	{r7}
 80200cc:	b087      	sub	sp, #28
 80200ce:	af00      	add	r7, sp, #0
 80200d0:	60f8      	str	r0, [r7, #12]
 80200d2:	60b9      	str	r1, [r7, #8]
 80200d4:	607a      	str	r2, [r7, #4]
 80200d6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80200d8:	68fb      	ldr	r3, [r7, #12]
 80200da:	6a1b      	ldr	r3, [r3, #32]
 80200dc:	f023 0210 	bic.w	r2, r3, #16
 80200e0:	68fb      	ldr	r3, [r7, #12]
 80200e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80200e4:	68fb      	ldr	r3, [r7, #12]
 80200e6:	699b      	ldr	r3, [r3, #24]
 80200e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80200ea:	68fb      	ldr	r3, [r7, #12]
 80200ec:	6a1b      	ldr	r3, [r3, #32]
 80200ee:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80200f0:	697b      	ldr	r3, [r7, #20]
 80200f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80200f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80200f8:	687b      	ldr	r3, [r7, #4]
 80200fa:	021b      	lsls	r3, r3, #8
 80200fc:	697a      	ldr	r2, [r7, #20]
 80200fe:	4313      	orrs	r3, r2
 8020100:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020102:	697b      	ldr	r3, [r7, #20]
 8020104:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020108:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 802010a:	683b      	ldr	r3, [r7, #0]
 802010c:	031b      	lsls	r3, r3, #12
 802010e:	b29b      	uxth	r3, r3
 8020110:	697a      	ldr	r2, [r7, #20]
 8020112:	4313      	orrs	r3, r2
 8020114:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020116:	693b      	ldr	r3, [r7, #16]
 8020118:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802011c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 802011e:	68bb      	ldr	r3, [r7, #8]
 8020120:	011b      	lsls	r3, r3, #4
 8020122:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8020126:	693a      	ldr	r2, [r7, #16]
 8020128:	4313      	orrs	r3, r2
 802012a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802012c:	68fb      	ldr	r3, [r7, #12]
 802012e:	697a      	ldr	r2, [r7, #20]
 8020130:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020132:	68fb      	ldr	r3, [r7, #12]
 8020134:	693a      	ldr	r2, [r7, #16]
 8020136:	621a      	str	r2, [r3, #32]
}
 8020138:	bf00      	nop
 802013a:	371c      	adds	r7, #28
 802013c:	46bd      	mov	sp, r7
 802013e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020142:	4770      	bx	lr

08020144 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020144:	b480      	push	{r7}
 8020146:	b087      	sub	sp, #28
 8020148:	af00      	add	r7, sp, #0
 802014a:	60f8      	str	r0, [r7, #12]
 802014c:	60b9      	str	r1, [r7, #8]
 802014e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020150:	68fb      	ldr	r3, [r7, #12]
 8020152:	6a1b      	ldr	r3, [r3, #32]
 8020154:	f023 0210 	bic.w	r2, r3, #16
 8020158:	68fb      	ldr	r3, [r7, #12]
 802015a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802015c:	68fb      	ldr	r3, [r7, #12]
 802015e:	699b      	ldr	r3, [r3, #24]
 8020160:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	6a1b      	ldr	r3, [r3, #32]
 8020166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020168:	697b      	ldr	r3, [r7, #20]
 802016a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802016e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8020170:	687b      	ldr	r3, [r7, #4]
 8020172:	031b      	lsls	r3, r3, #12
 8020174:	697a      	ldr	r2, [r7, #20]
 8020176:	4313      	orrs	r3, r2
 8020178:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802017a:	693b      	ldr	r3, [r7, #16]
 802017c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020180:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8020182:	68bb      	ldr	r3, [r7, #8]
 8020184:	011b      	lsls	r3, r3, #4
 8020186:	693a      	ldr	r2, [r7, #16]
 8020188:	4313      	orrs	r3, r2
 802018a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802018c:	68fb      	ldr	r3, [r7, #12]
 802018e:	697a      	ldr	r2, [r7, #20]
 8020190:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020192:	68fb      	ldr	r3, [r7, #12]
 8020194:	693a      	ldr	r2, [r7, #16]
 8020196:	621a      	str	r2, [r3, #32]
}
 8020198:	bf00      	nop
 802019a:	371c      	adds	r7, #28
 802019c:	46bd      	mov	sp, r7
 802019e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201a2:	4770      	bx	lr

080201a4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80201a4:	b480      	push	{r7}
 80201a6:	b087      	sub	sp, #28
 80201a8:	af00      	add	r7, sp, #0
 80201aa:	60f8      	str	r0, [r7, #12]
 80201ac:	60b9      	str	r1, [r7, #8]
 80201ae:	607a      	str	r2, [r7, #4]
 80201b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80201b2:	68fb      	ldr	r3, [r7, #12]
 80201b4:	6a1b      	ldr	r3, [r3, #32]
 80201b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80201ba:	68fb      	ldr	r3, [r7, #12]
 80201bc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80201be:	68fb      	ldr	r3, [r7, #12]
 80201c0:	69db      	ldr	r3, [r3, #28]
 80201c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80201c4:	68fb      	ldr	r3, [r7, #12]
 80201c6:	6a1b      	ldr	r3, [r3, #32]
 80201c8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80201ca:	697b      	ldr	r3, [r7, #20]
 80201cc:	f023 0303 	bic.w	r3, r3, #3
 80201d0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80201d2:	697a      	ldr	r2, [r7, #20]
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	4313      	orrs	r3, r2
 80201d8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80201da:	697b      	ldr	r3, [r7, #20]
 80201dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80201e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80201e2:	683b      	ldr	r3, [r7, #0]
 80201e4:	011b      	lsls	r3, r3, #4
 80201e6:	b2db      	uxtb	r3, r3
 80201e8:	697a      	ldr	r2, [r7, #20]
 80201ea:	4313      	orrs	r3, r2
 80201ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80201ee:	693b      	ldr	r3, [r7, #16]
 80201f0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80201f4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80201f6:	68bb      	ldr	r3, [r7, #8]
 80201f8:	021b      	lsls	r3, r3, #8
 80201fa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80201fe:	693a      	ldr	r2, [r7, #16]
 8020200:	4313      	orrs	r3, r2
 8020202:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8020204:	68fb      	ldr	r3, [r7, #12]
 8020206:	697a      	ldr	r2, [r7, #20]
 8020208:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 802020a:	68fb      	ldr	r3, [r7, #12]
 802020c:	693a      	ldr	r2, [r7, #16]
 802020e:	621a      	str	r2, [r3, #32]
}
 8020210:	bf00      	nop
 8020212:	371c      	adds	r7, #28
 8020214:	46bd      	mov	sp, r7
 8020216:	f85d 7b04 	ldr.w	r7, [sp], #4
 802021a:	4770      	bx	lr

0802021c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 802021c:	b480      	push	{r7}
 802021e:	b087      	sub	sp, #28
 8020220:	af00      	add	r7, sp, #0
 8020222:	60f8      	str	r0, [r7, #12]
 8020224:	60b9      	str	r1, [r7, #8]
 8020226:	607a      	str	r2, [r7, #4]
 8020228:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802022a:	68fb      	ldr	r3, [r7, #12]
 802022c:	6a1b      	ldr	r3, [r3, #32]
 802022e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020232:	68fb      	ldr	r3, [r7, #12]
 8020234:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8020236:	68fb      	ldr	r3, [r7, #12]
 8020238:	69db      	ldr	r3, [r3, #28]
 802023a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802023c:	68fb      	ldr	r3, [r7, #12]
 802023e:	6a1b      	ldr	r3, [r3, #32]
 8020240:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8020242:	697b      	ldr	r3, [r7, #20]
 8020244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020248:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	021b      	lsls	r3, r3, #8
 802024e:	697a      	ldr	r2, [r7, #20]
 8020250:	4313      	orrs	r3, r2
 8020252:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8020254:	697b      	ldr	r3, [r7, #20]
 8020256:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802025a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 802025c:	683b      	ldr	r3, [r7, #0]
 802025e:	031b      	lsls	r3, r3, #12
 8020260:	b29b      	uxth	r3, r3
 8020262:	697a      	ldr	r2, [r7, #20]
 8020264:	4313      	orrs	r3, r2
 8020266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8020268:	693b      	ldr	r3, [r7, #16]
 802026a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 802026e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8020270:	68bb      	ldr	r3, [r7, #8]
 8020272:	031b      	lsls	r3, r3, #12
 8020274:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8020278:	693a      	ldr	r2, [r7, #16]
 802027a:	4313      	orrs	r3, r2
 802027c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 802027e:	68fb      	ldr	r3, [r7, #12]
 8020280:	697a      	ldr	r2, [r7, #20]
 8020282:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8020284:	68fb      	ldr	r3, [r7, #12]
 8020286:	693a      	ldr	r2, [r7, #16]
 8020288:	621a      	str	r2, [r3, #32]
}
 802028a:	bf00      	nop
 802028c:	371c      	adds	r7, #28
 802028e:	46bd      	mov	sp, r7
 8020290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020294:	4770      	bx	lr
	...

08020298 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8020298:	b480      	push	{r7}
 802029a:	b085      	sub	sp, #20
 802029c:	af00      	add	r7, sp, #0
 802029e:	6078      	str	r0, [r7, #4]
 80202a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80202a2:	687b      	ldr	r3, [r7, #4]
 80202a4:	689b      	ldr	r3, [r3, #8]
 80202a6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80202a8:	68fa      	ldr	r2, [r7, #12]
 80202aa:	4b09      	ldr	r3, [pc, #36]	; (80202d0 <TIM_ITRx_SetConfig+0x38>)
 80202ac:	4013      	ands	r3, r2
 80202ae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80202b0:	683a      	ldr	r2, [r7, #0]
 80202b2:	68fb      	ldr	r3, [r7, #12]
 80202b4:	4313      	orrs	r3, r2
 80202b6:	f043 0307 	orr.w	r3, r3, #7
 80202ba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80202bc:	687b      	ldr	r3, [r7, #4]
 80202be:	68fa      	ldr	r2, [r7, #12]
 80202c0:	609a      	str	r2, [r3, #8]
}
 80202c2:	bf00      	nop
 80202c4:	3714      	adds	r7, #20
 80202c6:	46bd      	mov	sp, r7
 80202c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80202cc:	4770      	bx	lr
 80202ce:	bf00      	nop
 80202d0:	ffcfff8f 	.word	0xffcfff8f

080202d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80202d4:	b480      	push	{r7}
 80202d6:	b087      	sub	sp, #28
 80202d8:	af00      	add	r7, sp, #0
 80202da:	60f8      	str	r0, [r7, #12]
 80202dc:	60b9      	str	r1, [r7, #8]
 80202de:	607a      	str	r2, [r7, #4]
 80202e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80202e2:	68fb      	ldr	r3, [r7, #12]
 80202e4:	689b      	ldr	r3, [r3, #8]
 80202e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80202e8:	697b      	ldr	r3, [r7, #20]
 80202ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80202ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80202f0:	683b      	ldr	r3, [r7, #0]
 80202f2:	021a      	lsls	r2, r3, #8
 80202f4:	687b      	ldr	r3, [r7, #4]
 80202f6:	431a      	orrs	r2, r3
 80202f8:	68bb      	ldr	r3, [r7, #8]
 80202fa:	4313      	orrs	r3, r2
 80202fc:	697a      	ldr	r2, [r7, #20]
 80202fe:	4313      	orrs	r3, r2
 8020300:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020302:	68fb      	ldr	r3, [r7, #12]
 8020304:	697a      	ldr	r2, [r7, #20]
 8020306:	609a      	str	r2, [r3, #8]
}
 8020308:	bf00      	nop
 802030a:	371c      	adds	r7, #28
 802030c:	46bd      	mov	sp, r7
 802030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020312:	4770      	bx	lr

08020314 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020314:	b480      	push	{r7}
 8020316:	b087      	sub	sp, #28
 8020318:	af00      	add	r7, sp, #0
 802031a:	60f8      	str	r0, [r7, #12]
 802031c:	60b9      	str	r1, [r7, #8]
 802031e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020320:	68bb      	ldr	r3, [r7, #8]
 8020322:	f003 031f 	and.w	r3, r3, #31
 8020326:	2201      	movs	r2, #1
 8020328:	fa02 f303 	lsl.w	r3, r2, r3
 802032c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802032e:	68fb      	ldr	r3, [r7, #12]
 8020330:	6a1a      	ldr	r2, [r3, #32]
 8020332:	697b      	ldr	r3, [r7, #20]
 8020334:	43db      	mvns	r3, r3
 8020336:	401a      	ands	r2, r3
 8020338:	68fb      	ldr	r3, [r7, #12]
 802033a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802033c:	68fb      	ldr	r3, [r7, #12]
 802033e:	6a1a      	ldr	r2, [r3, #32]
 8020340:	68bb      	ldr	r3, [r7, #8]
 8020342:	f003 031f 	and.w	r3, r3, #31
 8020346:	6879      	ldr	r1, [r7, #4]
 8020348:	fa01 f303 	lsl.w	r3, r1, r3
 802034c:	431a      	orrs	r2, r3
 802034e:	68fb      	ldr	r3, [r7, #12]
 8020350:	621a      	str	r2, [r3, #32]
}
 8020352:	bf00      	nop
 8020354:	371c      	adds	r7, #28
 8020356:	46bd      	mov	sp, r7
 8020358:	f85d 7b04 	ldr.w	r7, [sp], #4
 802035c:	4770      	bx	lr
	...

08020360 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020360:	b480      	push	{r7}
 8020362:	b085      	sub	sp, #20
 8020364:	af00      	add	r7, sp, #0
 8020366:	6078      	str	r0, [r7, #4]
 8020368:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802036a:	687b      	ldr	r3, [r7, #4]
 802036c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8020370:	2b01      	cmp	r3, #1
 8020372:	d101      	bne.n	8020378 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8020374:	2302      	movs	r3, #2
 8020376:	e077      	b.n	8020468 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8020378:	687b      	ldr	r3, [r7, #4]
 802037a:	2201      	movs	r2, #1
 802037c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8020380:	687b      	ldr	r3, [r7, #4]
 8020382:	2202      	movs	r2, #2
 8020384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8020388:	687b      	ldr	r3, [r7, #4]
 802038a:	681b      	ldr	r3, [r3, #0]
 802038c:	685b      	ldr	r3, [r3, #4]
 802038e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8020390:	687b      	ldr	r3, [r7, #4]
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	689b      	ldr	r3, [r3, #8]
 8020396:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8020398:	687b      	ldr	r3, [r7, #4]
 802039a:	681b      	ldr	r3, [r3, #0]
 802039c:	4a35      	ldr	r2, [pc, #212]	; (8020474 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802039e:	4293      	cmp	r3, r2
 80203a0:	d004      	beq.n	80203ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80203a2:	687b      	ldr	r3, [r7, #4]
 80203a4:	681b      	ldr	r3, [r3, #0]
 80203a6:	4a34      	ldr	r2, [pc, #208]	; (8020478 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80203a8:	4293      	cmp	r3, r2
 80203aa:	d108      	bne.n	80203be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80203b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80203b4:	683b      	ldr	r3, [r7, #0]
 80203b6:	685b      	ldr	r3, [r3, #4]
 80203b8:	68fa      	ldr	r2, [r7, #12]
 80203ba:	4313      	orrs	r3, r2
 80203bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80203c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80203c6:	683b      	ldr	r3, [r7, #0]
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	68fa      	ldr	r2, [r7, #12]
 80203cc:	4313      	orrs	r3, r2
 80203ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80203d0:	687b      	ldr	r3, [r7, #4]
 80203d2:	681b      	ldr	r3, [r3, #0]
 80203d4:	68fa      	ldr	r2, [r7, #12]
 80203d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80203d8:	687b      	ldr	r3, [r7, #4]
 80203da:	681b      	ldr	r3, [r3, #0]
 80203dc:	4a25      	ldr	r2, [pc, #148]	; (8020474 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80203de:	4293      	cmp	r3, r2
 80203e0:	d02c      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203e2:	687b      	ldr	r3, [r7, #4]
 80203e4:	681b      	ldr	r3, [r3, #0]
 80203e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80203ea:	d027      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203ec:	687b      	ldr	r3, [r7, #4]
 80203ee:	681b      	ldr	r3, [r3, #0]
 80203f0:	4a22      	ldr	r2, [pc, #136]	; (802047c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80203f2:	4293      	cmp	r3, r2
 80203f4:	d022      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 80203f6:	687b      	ldr	r3, [r7, #4]
 80203f8:	681b      	ldr	r3, [r3, #0]
 80203fa:	4a21      	ldr	r2, [pc, #132]	; (8020480 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80203fc:	4293      	cmp	r3, r2
 80203fe:	d01d      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020400:	687b      	ldr	r3, [r7, #4]
 8020402:	681b      	ldr	r3, [r3, #0]
 8020404:	4a1f      	ldr	r2, [pc, #124]	; (8020484 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8020406:	4293      	cmp	r3, r2
 8020408:	d018      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	681b      	ldr	r3, [r3, #0]
 802040e:	4a1a      	ldr	r2, [pc, #104]	; (8020478 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020410:	4293      	cmp	r3, r2
 8020412:	d013      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020414:	687b      	ldr	r3, [r7, #4]
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	4a1b      	ldr	r2, [pc, #108]	; (8020488 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 802041a:	4293      	cmp	r3, r2
 802041c:	d00e      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802041e:	687b      	ldr	r3, [r7, #4]
 8020420:	681b      	ldr	r3, [r3, #0]
 8020422:	4a1a      	ldr	r2, [pc, #104]	; (802048c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8020424:	4293      	cmp	r3, r2
 8020426:	d009      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020428:	687b      	ldr	r3, [r7, #4]
 802042a:	681b      	ldr	r3, [r3, #0]
 802042c:	4a18      	ldr	r2, [pc, #96]	; (8020490 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 802042e:	4293      	cmp	r3, r2
 8020430:	d004      	beq.n	802043c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020432:	687b      	ldr	r3, [r7, #4]
 8020434:	681b      	ldr	r3, [r3, #0]
 8020436:	4a17      	ldr	r2, [pc, #92]	; (8020494 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8020438:	4293      	cmp	r3, r2
 802043a:	d10c      	bne.n	8020456 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802043c:	68bb      	ldr	r3, [r7, #8]
 802043e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020444:	683b      	ldr	r3, [r7, #0]
 8020446:	689b      	ldr	r3, [r3, #8]
 8020448:	68ba      	ldr	r2, [r7, #8]
 802044a:	4313      	orrs	r3, r2
 802044c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	681b      	ldr	r3, [r3, #0]
 8020452:	68ba      	ldr	r2, [r7, #8]
 8020454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020456:	687b      	ldr	r3, [r7, #4]
 8020458:	2201      	movs	r2, #1
 802045a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	2200      	movs	r2, #0
 8020462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020466:	2300      	movs	r3, #0
}
 8020468:	4618      	mov	r0, r3
 802046a:	3714      	adds	r7, #20
 802046c:	46bd      	mov	sp, r7
 802046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020472:	4770      	bx	lr
 8020474:	40010000 	.word	0x40010000
 8020478:	40010400 	.word	0x40010400
 802047c:	40000400 	.word	0x40000400
 8020480:	40000800 	.word	0x40000800
 8020484:	40000c00 	.word	0x40000c00
 8020488:	40001800 	.word	0x40001800
 802048c:	40014000 	.word	0x40014000
 8020490:	4000e000 	.word	0x4000e000
 8020494:	4000e400 	.word	0x4000e400

08020498 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8020498:	b480      	push	{r7}
 802049a:	b085      	sub	sp, #20
 802049c:	af00      	add	r7, sp, #0
 802049e:	6078      	str	r0, [r7, #4]
 80204a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80204a2:	2300      	movs	r3, #0
 80204a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80204a6:	687b      	ldr	r3, [r7, #4]
 80204a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80204ac:	2b01      	cmp	r3, #1
 80204ae:	d101      	bne.n	80204b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80204b0:	2302      	movs	r3, #2
 80204b2:	e087      	b.n	80205c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	2201      	movs	r2, #1
 80204b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80204bc:	68fb      	ldr	r3, [r7, #12]
 80204be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80204c2:	683b      	ldr	r3, [r7, #0]
 80204c4:	68db      	ldr	r3, [r3, #12]
 80204c6:	4313      	orrs	r3, r2
 80204c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80204ca:	68fb      	ldr	r3, [r7, #12]
 80204cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80204d0:	683b      	ldr	r3, [r7, #0]
 80204d2:	689b      	ldr	r3, [r3, #8]
 80204d4:	4313      	orrs	r3, r2
 80204d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80204d8:	68fb      	ldr	r3, [r7, #12]
 80204da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80204de:	683b      	ldr	r3, [r7, #0]
 80204e0:	685b      	ldr	r3, [r3, #4]
 80204e2:	4313      	orrs	r3, r2
 80204e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80204e6:	68fb      	ldr	r3, [r7, #12]
 80204e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80204ec:	683b      	ldr	r3, [r7, #0]
 80204ee:	681b      	ldr	r3, [r3, #0]
 80204f0:	4313      	orrs	r3, r2
 80204f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80204f4:	68fb      	ldr	r3, [r7, #12]
 80204f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80204fa:	683b      	ldr	r3, [r7, #0]
 80204fc:	691b      	ldr	r3, [r3, #16]
 80204fe:	4313      	orrs	r3, r2
 8020500:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8020502:	68fb      	ldr	r3, [r7, #12]
 8020504:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8020508:	683b      	ldr	r3, [r7, #0]
 802050a:	695b      	ldr	r3, [r3, #20]
 802050c:	4313      	orrs	r3, r2
 802050e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8020510:	68fb      	ldr	r3, [r7, #12]
 8020512:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8020516:	683b      	ldr	r3, [r7, #0]
 8020518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802051a:	4313      	orrs	r3, r2
 802051c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 802051e:	68fb      	ldr	r3, [r7, #12]
 8020520:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8020524:	683b      	ldr	r3, [r7, #0]
 8020526:	699b      	ldr	r3, [r3, #24]
 8020528:	041b      	lsls	r3, r3, #16
 802052a:	4313      	orrs	r3, r2
 802052c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 802052e:	687b      	ldr	r3, [r7, #4]
 8020530:	681b      	ldr	r3, [r3, #0]
 8020532:	4a27      	ldr	r2, [pc, #156]	; (80205d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020534:	4293      	cmp	r3, r2
 8020536:	d004      	beq.n	8020542 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8020538:	687b      	ldr	r3, [r7, #4]
 802053a:	681b      	ldr	r3, [r3, #0]
 802053c:	4a25      	ldr	r2, [pc, #148]	; (80205d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 802053e:	4293      	cmp	r3, r2
 8020540:	d106      	bne.n	8020550 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8020542:	68fb      	ldr	r3, [r7, #12]
 8020544:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8020548:	683b      	ldr	r3, [r7, #0]
 802054a:	69db      	ldr	r3, [r3, #28]
 802054c:	4313      	orrs	r3, r2
 802054e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8020550:	687b      	ldr	r3, [r7, #4]
 8020552:	681b      	ldr	r3, [r3, #0]
 8020554:	4a1e      	ldr	r2, [pc, #120]	; (80205d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020556:	4293      	cmp	r3, r2
 8020558:	d004      	beq.n	8020564 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 802055a:	687b      	ldr	r3, [r7, #4]
 802055c:	681b      	ldr	r3, [r3, #0]
 802055e:	4a1d      	ldr	r2, [pc, #116]	; (80205d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020560:	4293      	cmp	r3, r2
 8020562:	d126      	bne.n	80205b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8020564:	68fb      	ldr	r3, [r7, #12]
 8020566:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 802056a:	683b      	ldr	r3, [r7, #0]
 802056c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802056e:	051b      	lsls	r3, r3, #20
 8020570:	4313      	orrs	r3, r2
 8020572:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8020574:	68fb      	ldr	r3, [r7, #12]
 8020576:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 802057a:	683b      	ldr	r3, [r7, #0]
 802057c:	6a1b      	ldr	r3, [r3, #32]
 802057e:	4313      	orrs	r3, r2
 8020580:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8020582:	68fb      	ldr	r3, [r7, #12]
 8020584:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8020588:	683b      	ldr	r3, [r7, #0]
 802058a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802058c:	4313      	orrs	r3, r2
 802058e:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020590:	687b      	ldr	r3, [r7, #4]
 8020592:	681b      	ldr	r3, [r3, #0]
 8020594:	4a0e      	ldr	r2, [pc, #56]	; (80205d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020596:	4293      	cmp	r3, r2
 8020598:	d004      	beq.n	80205a4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 802059a:	687b      	ldr	r3, [r7, #4]
 802059c:	681b      	ldr	r3, [r3, #0]
 802059e:	4a0d      	ldr	r2, [pc, #52]	; (80205d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80205a0:	4293      	cmp	r3, r2
 80205a2:	d106      	bne.n	80205b2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80205a4:	68fb      	ldr	r3, [r7, #12]
 80205a6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80205aa:	683b      	ldr	r3, [r7, #0]
 80205ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80205ae:	4313      	orrs	r3, r2
 80205b0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80205b2:	687b      	ldr	r3, [r7, #4]
 80205b4:	681b      	ldr	r3, [r3, #0]
 80205b6:	68fa      	ldr	r2, [r7, #12]
 80205b8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80205ba:	687b      	ldr	r3, [r7, #4]
 80205bc:	2200      	movs	r2, #0
 80205be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80205c2:	2300      	movs	r3, #0
}
 80205c4:	4618      	mov	r0, r3
 80205c6:	3714      	adds	r7, #20
 80205c8:	46bd      	mov	sp, r7
 80205ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ce:	4770      	bx	lr
 80205d0:	40010000 	.word	0x40010000
 80205d4:	40010400 	.word	0x40010400

080205d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80205d8:	b480      	push	{r7}
 80205da:	b083      	sub	sp, #12
 80205dc:	af00      	add	r7, sp, #0
 80205de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80205e0:	bf00      	nop
 80205e2:	370c      	adds	r7, #12
 80205e4:	46bd      	mov	sp, r7
 80205e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205ea:	4770      	bx	lr

080205ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80205ec:	b480      	push	{r7}
 80205ee:	b083      	sub	sp, #12
 80205f0:	af00      	add	r7, sp, #0
 80205f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80205f4:	bf00      	nop
 80205f6:	370c      	adds	r7, #12
 80205f8:	46bd      	mov	sp, r7
 80205fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205fe:	4770      	bx	lr

08020600 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8020600:	b480      	push	{r7}
 8020602:	b083      	sub	sp, #12
 8020604:	af00      	add	r7, sp, #0
 8020606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8020608:	bf00      	nop
 802060a:	370c      	adds	r7, #12
 802060c:	46bd      	mov	sp, r7
 802060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020612:	4770      	bx	lr

08020614 <_ZdlPv>:
 8020614:	f000 b926 	b.w	8020864 <free>

08020618 <_ZdlPvj>:
 8020618:	f7ff bffc 	b.w	8020614 <_ZdlPv>

0802061c <_Znwj>:
 802061c:	2801      	cmp	r0, #1
 802061e:	bf38      	it	cc
 8020620:	2001      	movcc	r0, #1
 8020622:	b510      	push	{r4, lr}
 8020624:	4604      	mov	r4, r0
 8020626:	4620      	mov	r0, r4
 8020628:	f000 f914 	bl	8020854 <malloc>
 802062c:	b930      	cbnz	r0, 802063c <_Znwj+0x20>
 802062e:	f000 f8d7 	bl	80207e0 <_ZSt15get_new_handlerv>
 8020632:	b908      	cbnz	r0, 8020638 <_Znwj+0x1c>
 8020634:	f000 f8dc 	bl	80207f0 <abort>
 8020638:	4780      	blx	r0
 802063a:	e7f4      	b.n	8020626 <_Znwj+0xa>
 802063c:	bd10      	pop	{r4, pc}

0802063e <__cxa_pure_virtual>:
 802063e:	b508      	push	{r3, lr}
 8020640:	f000 f8c8 	bl	80207d4 <_ZSt9terminatev>

08020644 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8020644:	68c3      	ldr	r3, [r0, #12]
 8020646:	689a      	ldr	r2, [r3, #8]
 8020648:	60c2      	str	r2, [r0, #12]
 802064a:	b510      	push	{r4, lr}
 802064c:	b102      	cbz	r2, 8020650 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 802064e:	6050      	str	r0, [r2, #4]
 8020650:	6842      	ldr	r2, [r0, #4]
 8020652:	605a      	str	r2, [r3, #4]
 8020654:	680c      	ldr	r4, [r1, #0]
 8020656:	4284      	cmp	r4, r0
 8020658:	d103      	bne.n	8020662 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 802065a:	600b      	str	r3, [r1, #0]
 802065c:	6098      	str	r0, [r3, #8]
 802065e:	6043      	str	r3, [r0, #4]
 8020660:	bd10      	pop	{r4, pc}
 8020662:	6891      	ldr	r1, [r2, #8]
 8020664:	4281      	cmp	r1, r0
 8020666:	bf0c      	ite	eq
 8020668:	6093      	streq	r3, [r2, #8]
 802066a:	60d3      	strne	r3, [r2, #12]
 802066c:	e7f6      	b.n	802065c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0802066e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 802066e:	6883      	ldr	r3, [r0, #8]
 8020670:	68da      	ldr	r2, [r3, #12]
 8020672:	6082      	str	r2, [r0, #8]
 8020674:	b510      	push	{r4, lr}
 8020676:	b102      	cbz	r2, 802067a <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 8020678:	6050      	str	r0, [r2, #4]
 802067a:	6842      	ldr	r2, [r0, #4]
 802067c:	605a      	str	r2, [r3, #4]
 802067e:	680c      	ldr	r4, [r1, #0]
 8020680:	4284      	cmp	r4, r0
 8020682:	d103      	bne.n	802068c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 8020684:	600b      	str	r3, [r1, #0]
 8020686:	60d8      	str	r0, [r3, #12]
 8020688:	6043      	str	r3, [r0, #4]
 802068a:	bd10      	pop	{r4, pc}
 802068c:	68d1      	ldr	r1, [r2, #12]
 802068e:	4281      	cmp	r1, r0
 8020690:	bf0c      	ite	eq
 8020692:	60d3      	streq	r3, [r2, #12]
 8020694:	6093      	strne	r3, [r2, #8]
 8020696:	e7f6      	b.n	8020686 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

08020698 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8020698:	68c3      	ldr	r3, [r0, #12]
 802069a:	b123      	cbz	r3, 80206a6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 802069c:	4618      	mov	r0, r3
 802069e:	689b      	ldr	r3, [r3, #8]
 80206a0:	2b00      	cmp	r3, #0
 80206a2:	d1fb      	bne.n	802069c <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80206a4:	4770      	bx	lr
 80206a6:	6843      	ldr	r3, [r0, #4]
 80206a8:	68da      	ldr	r2, [r3, #12]
 80206aa:	4282      	cmp	r2, r0
 80206ac:	d102      	bne.n	80206b4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80206ae:	4618      	mov	r0, r3
 80206b0:	685b      	ldr	r3, [r3, #4]
 80206b2:	e7f9      	b.n	80206a8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80206b4:	68c2      	ldr	r2, [r0, #12]
 80206b6:	4293      	cmp	r3, r2
 80206b8:	bf18      	it	ne
 80206ba:	4618      	movne	r0, r3
 80206bc:	4770      	bx	lr

080206be <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80206be:	7803      	ldrb	r3, [r0, #0]
 80206c0:	b933      	cbnz	r3, 80206d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80206c2:	6843      	ldr	r3, [r0, #4]
 80206c4:	685b      	ldr	r3, [r3, #4]
 80206c6:	4283      	cmp	r3, r0
 80206c8:	d102      	bne.n	80206d0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80206ca:	68db      	ldr	r3, [r3, #12]
 80206cc:	4618      	mov	r0, r3
 80206ce:	4770      	bx	lr
 80206d0:	6882      	ldr	r2, [r0, #8]
 80206d2:	b122      	cbz	r2, 80206de <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 80206d4:	4613      	mov	r3, r2
 80206d6:	68d2      	ldr	r2, [r2, #12]
 80206d8:	2a00      	cmp	r2, #0
 80206da:	d1fb      	bne.n	80206d4 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 80206dc:	e7f6      	b.n	80206cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80206de:	6843      	ldr	r3, [r0, #4]
 80206e0:	689a      	ldr	r2, [r3, #8]
 80206e2:	4282      	cmp	r2, r0
 80206e4:	d1f2      	bne.n	80206cc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 80206e6:	4618      	mov	r0, r3
 80206e8:	685b      	ldr	r3, [r3, #4]
 80206ea:	e7f9      	b.n	80206e0 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

080206ec <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80206ec:	f7ff bfd4 	b.w	8020698 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

080206f0 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80206f0:	f7ff bfe5 	b.w	80206be <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

080206f4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 80206f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80206f8:	461e      	mov	r6, r3
 80206fa:	f103 0804 	add.w	r8, r3, #4
 80206fe:	2300      	movs	r3, #0
 8020700:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8020704:	460c      	mov	r4, r1
 8020706:	604a      	str	r2, [r1, #4]
 8020708:	700b      	strb	r3, [r1, #0]
 802070a:	b300      	cbz	r0, 802074e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 802070c:	4296      	cmp	r6, r2
 802070e:	6091      	str	r1, [r2, #8]
 8020710:	d118      	bne.n	8020744 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8020712:	6071      	str	r1, [r6, #4]
 8020714:	60f4      	str	r4, [r6, #12]
 8020716:	2701      	movs	r7, #1
 8020718:	f04f 0900 	mov.w	r9, #0
 802071c:	6873      	ldr	r3, [r6, #4]
 802071e:	42a3      	cmp	r3, r4
 8020720:	d03f      	beq.n	80207a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8020722:	6860      	ldr	r0, [r4, #4]
 8020724:	7802      	ldrb	r2, [r0, #0]
 8020726:	2a00      	cmp	r2, #0
 8020728:	d13b      	bne.n	80207a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 802072a:	6845      	ldr	r5, [r0, #4]
 802072c:	68ab      	ldr	r3, [r5, #8]
 802072e:	4298      	cmp	r0, r3
 8020730:	d123      	bne.n	802077a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8020732:	68eb      	ldr	r3, [r5, #12]
 8020734:	b183      	cbz	r3, 8020758 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020736:	781a      	ldrb	r2, [r3, #0]
 8020738:	b972      	cbnz	r2, 8020758 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 802073a:	7007      	strb	r7, [r0, #0]
 802073c:	701f      	strb	r7, [r3, #0]
 802073e:	702a      	strb	r2, [r5, #0]
 8020740:	462c      	mov	r4, r5
 8020742:	e7eb      	b.n	802071c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8020744:	68b3      	ldr	r3, [r6, #8]
 8020746:	4293      	cmp	r3, r2
 8020748:	d1e5      	bne.n	8020716 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802074a:	60b1      	str	r1, [r6, #8]
 802074c:	e7e3      	b.n	8020716 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802074e:	60d1      	str	r1, [r2, #12]
 8020750:	68f3      	ldr	r3, [r6, #12]
 8020752:	4293      	cmp	r3, r2
 8020754:	d1df      	bne.n	8020716 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020756:	e7dd      	b.n	8020714 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8020758:	68c3      	ldr	r3, [r0, #12]
 802075a:	42a3      	cmp	r3, r4
 802075c:	d103      	bne.n	8020766 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 802075e:	4641      	mov	r1, r8
 8020760:	f7ff ff70 	bl	8020644 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8020764:	4604      	mov	r4, r0
 8020766:	6863      	ldr	r3, [r4, #4]
 8020768:	4641      	mov	r1, r8
 802076a:	701f      	strb	r7, [r3, #0]
 802076c:	4628      	mov	r0, r5
 802076e:	f885 9000 	strb.w	r9, [r5]
 8020772:	f7ff ff7c 	bl	802066e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8020776:	4625      	mov	r5, r4
 8020778:	e7e2      	b.n	8020740 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 802077a:	b113      	cbz	r3, 8020782 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 802077c:	781a      	ldrb	r2, [r3, #0]
 802077e:	2a00      	cmp	r2, #0
 8020780:	d0db      	beq.n	802073a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8020782:	6883      	ldr	r3, [r0, #8]
 8020784:	42a3      	cmp	r3, r4
 8020786:	d103      	bne.n	8020790 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8020788:	4641      	mov	r1, r8
 802078a:	f7ff ff70 	bl	802066e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 802078e:	4604      	mov	r4, r0
 8020790:	6863      	ldr	r3, [r4, #4]
 8020792:	4641      	mov	r1, r8
 8020794:	701f      	strb	r7, [r3, #0]
 8020796:	4628      	mov	r0, r5
 8020798:	f885 9000 	strb.w	r9, [r5]
 802079c:	f7ff ff52 	bl	8020644 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80207a0:	e7e9      	b.n	8020776 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80207a2:	2201      	movs	r2, #1
 80207a4:	701a      	strb	r2, [r3, #0]
 80207a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080207aa <_ZSt17__throw_bad_allocv>:
 80207aa:	b508      	push	{r3, lr}
 80207ac:	f000 f820 	bl	80207f0 <abort>

080207b0 <_ZSt20__throw_length_errorPKc>:
 80207b0:	b508      	push	{r3, lr}
 80207b2:	f000 f81d 	bl	80207f0 <abort>

080207b6 <_ZSt25__throw_bad_function_callv>:
 80207b6:	b508      	push	{r3, lr}
 80207b8:	f000 f81a 	bl	80207f0 <abort>

080207bc <_ZN10__cxxabiv111__terminateEPFvvE>:
 80207bc:	b508      	push	{r3, lr}
 80207be:	4780      	blx	r0
 80207c0:	f000 f816 	bl	80207f0 <abort>

080207c4 <_ZSt13get_terminatev>:
 80207c4:	4b02      	ldr	r3, [pc, #8]	; (80207d0 <_ZSt13get_terminatev+0xc>)
 80207c6:	6818      	ldr	r0, [r3, #0]
 80207c8:	f3bf 8f5b 	dmb	ish
 80207cc:	4770      	bx	lr
 80207ce:	bf00      	nop
 80207d0:	24000014 	.word	0x24000014

080207d4 <_ZSt9terminatev>:
 80207d4:	b508      	push	{r3, lr}
 80207d6:	f7ff fff5 	bl	80207c4 <_ZSt13get_terminatev>
 80207da:	f7ff ffef 	bl	80207bc <_ZN10__cxxabiv111__terminateEPFvvE>
	...

080207e0 <_ZSt15get_new_handlerv>:
 80207e0:	4b02      	ldr	r3, [pc, #8]	; (80207ec <_ZSt15get_new_handlerv+0xc>)
 80207e2:	6818      	ldr	r0, [r3, #0]
 80207e4:	f3bf 8f5b 	dmb	ish
 80207e8:	4770      	bx	lr
 80207ea:	bf00      	nop
 80207ec:	24001144 	.word	0x24001144

080207f0 <abort>:
 80207f0:	b508      	push	{r3, lr}
 80207f2:	2006      	movs	r0, #6
 80207f4:	f000 f986 	bl	8020b04 <raise>
 80207f8:	2001      	movs	r0, #1
 80207fa:	f7f4 fb6b 	bl	8014ed4 <_exit>
	...

08020800 <__errno>:
 8020800:	4b01      	ldr	r3, [pc, #4]	; (8020808 <__errno+0x8>)
 8020802:	6818      	ldr	r0, [r3, #0]
 8020804:	4770      	bx	lr
 8020806:	bf00      	nop
 8020808:	24000018 	.word	0x24000018

0802080c <__libc_init_array>:
 802080c:	b570      	push	{r4, r5, r6, lr}
 802080e:	4d0d      	ldr	r5, [pc, #52]	; (8020844 <__libc_init_array+0x38>)
 8020810:	4c0d      	ldr	r4, [pc, #52]	; (8020848 <__libc_init_array+0x3c>)
 8020812:	1b64      	subs	r4, r4, r5
 8020814:	10a4      	asrs	r4, r4, #2
 8020816:	2600      	movs	r6, #0
 8020818:	42a6      	cmp	r6, r4
 802081a:	d109      	bne.n	8020830 <__libc_init_array+0x24>
 802081c:	4d0b      	ldr	r5, [pc, #44]	; (802084c <__libc_init_array+0x40>)
 802081e:	4c0c      	ldr	r4, [pc, #48]	; (8020850 <__libc_init_array+0x44>)
 8020820:	f000 f99a 	bl	8020b58 <_init>
 8020824:	1b64      	subs	r4, r4, r5
 8020826:	10a4      	asrs	r4, r4, #2
 8020828:	2600      	movs	r6, #0
 802082a:	42a6      	cmp	r6, r4
 802082c:	d105      	bne.n	802083a <__libc_init_array+0x2e>
 802082e:	bd70      	pop	{r4, r5, r6, pc}
 8020830:	f855 3b04 	ldr.w	r3, [r5], #4
 8020834:	4798      	blx	r3
 8020836:	3601      	adds	r6, #1
 8020838:	e7ee      	b.n	8020818 <__libc_init_array+0xc>
 802083a:	f855 3b04 	ldr.w	r3, [r5], #4
 802083e:	4798      	blx	r3
 8020840:	3601      	adds	r6, #1
 8020842:	e7f2      	b.n	802082a <__libc_init_array+0x1e>
 8020844:	08020dec 	.word	0x08020dec
 8020848:	08020dec 	.word	0x08020dec
 802084c:	08020dec 	.word	0x08020dec
 8020850:	08020e20 	.word	0x08020e20

08020854 <malloc>:
 8020854:	4b02      	ldr	r3, [pc, #8]	; (8020860 <malloc+0xc>)
 8020856:	4601      	mov	r1, r0
 8020858:	6818      	ldr	r0, [r3, #0]
 802085a:	f000 b8a7 	b.w	80209ac <_malloc_r>
 802085e:	bf00      	nop
 8020860:	24000018 	.word	0x24000018

08020864 <free>:
 8020864:	4b02      	ldr	r3, [pc, #8]	; (8020870 <free+0xc>)
 8020866:	4601      	mov	r1, r0
 8020868:	6818      	ldr	r0, [r3, #0]
 802086a:	f000 b833 	b.w	80208d4 <_free_r>
 802086e:	bf00      	nop
 8020870:	24000018 	.word	0x24000018

08020874 <memcpy>:
 8020874:	440a      	add	r2, r1
 8020876:	4291      	cmp	r1, r2
 8020878:	f100 33ff 	add.w	r3, r0, #4294967295
 802087c:	d100      	bne.n	8020880 <memcpy+0xc>
 802087e:	4770      	bx	lr
 8020880:	b510      	push	{r4, lr}
 8020882:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020886:	f803 4f01 	strb.w	r4, [r3, #1]!
 802088a:	4291      	cmp	r1, r2
 802088c:	d1f9      	bne.n	8020882 <memcpy+0xe>
 802088e:	bd10      	pop	{r4, pc}

08020890 <memmove>:
 8020890:	4288      	cmp	r0, r1
 8020892:	b510      	push	{r4, lr}
 8020894:	eb01 0402 	add.w	r4, r1, r2
 8020898:	d902      	bls.n	80208a0 <memmove+0x10>
 802089a:	4284      	cmp	r4, r0
 802089c:	4623      	mov	r3, r4
 802089e:	d807      	bhi.n	80208b0 <memmove+0x20>
 80208a0:	1e43      	subs	r3, r0, #1
 80208a2:	42a1      	cmp	r1, r4
 80208a4:	d008      	beq.n	80208b8 <memmove+0x28>
 80208a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80208aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80208ae:	e7f8      	b.n	80208a2 <memmove+0x12>
 80208b0:	4402      	add	r2, r0
 80208b2:	4601      	mov	r1, r0
 80208b4:	428a      	cmp	r2, r1
 80208b6:	d100      	bne.n	80208ba <memmove+0x2a>
 80208b8:	bd10      	pop	{r4, pc}
 80208ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80208be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80208c2:	e7f7      	b.n	80208b4 <memmove+0x24>

080208c4 <memset>:
 80208c4:	4402      	add	r2, r0
 80208c6:	4603      	mov	r3, r0
 80208c8:	4293      	cmp	r3, r2
 80208ca:	d100      	bne.n	80208ce <memset+0xa>
 80208cc:	4770      	bx	lr
 80208ce:	f803 1b01 	strb.w	r1, [r3], #1
 80208d2:	e7f9      	b.n	80208c8 <memset+0x4>

080208d4 <_free_r>:
 80208d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80208d6:	2900      	cmp	r1, #0
 80208d8:	d044      	beq.n	8020964 <_free_r+0x90>
 80208da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80208de:	9001      	str	r0, [sp, #4]
 80208e0:	2b00      	cmp	r3, #0
 80208e2:	f1a1 0404 	sub.w	r4, r1, #4
 80208e6:	bfb8      	it	lt
 80208e8:	18e4      	addlt	r4, r4, r3
 80208ea:	f000 f927 	bl	8020b3c <__malloc_lock>
 80208ee:	4a1e      	ldr	r2, [pc, #120]	; (8020968 <_free_r+0x94>)
 80208f0:	9801      	ldr	r0, [sp, #4]
 80208f2:	6813      	ldr	r3, [r2, #0]
 80208f4:	b933      	cbnz	r3, 8020904 <_free_r+0x30>
 80208f6:	6063      	str	r3, [r4, #4]
 80208f8:	6014      	str	r4, [r2, #0]
 80208fa:	b003      	add	sp, #12
 80208fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020900:	f000 b922 	b.w	8020b48 <__malloc_unlock>
 8020904:	42a3      	cmp	r3, r4
 8020906:	d908      	bls.n	802091a <_free_r+0x46>
 8020908:	6825      	ldr	r5, [r4, #0]
 802090a:	1961      	adds	r1, r4, r5
 802090c:	428b      	cmp	r3, r1
 802090e:	bf01      	itttt	eq
 8020910:	6819      	ldreq	r1, [r3, #0]
 8020912:	685b      	ldreq	r3, [r3, #4]
 8020914:	1949      	addeq	r1, r1, r5
 8020916:	6021      	streq	r1, [r4, #0]
 8020918:	e7ed      	b.n	80208f6 <_free_r+0x22>
 802091a:	461a      	mov	r2, r3
 802091c:	685b      	ldr	r3, [r3, #4]
 802091e:	b10b      	cbz	r3, 8020924 <_free_r+0x50>
 8020920:	42a3      	cmp	r3, r4
 8020922:	d9fa      	bls.n	802091a <_free_r+0x46>
 8020924:	6811      	ldr	r1, [r2, #0]
 8020926:	1855      	adds	r5, r2, r1
 8020928:	42a5      	cmp	r5, r4
 802092a:	d10b      	bne.n	8020944 <_free_r+0x70>
 802092c:	6824      	ldr	r4, [r4, #0]
 802092e:	4421      	add	r1, r4
 8020930:	1854      	adds	r4, r2, r1
 8020932:	42a3      	cmp	r3, r4
 8020934:	6011      	str	r1, [r2, #0]
 8020936:	d1e0      	bne.n	80208fa <_free_r+0x26>
 8020938:	681c      	ldr	r4, [r3, #0]
 802093a:	685b      	ldr	r3, [r3, #4]
 802093c:	6053      	str	r3, [r2, #4]
 802093e:	4421      	add	r1, r4
 8020940:	6011      	str	r1, [r2, #0]
 8020942:	e7da      	b.n	80208fa <_free_r+0x26>
 8020944:	d902      	bls.n	802094c <_free_r+0x78>
 8020946:	230c      	movs	r3, #12
 8020948:	6003      	str	r3, [r0, #0]
 802094a:	e7d6      	b.n	80208fa <_free_r+0x26>
 802094c:	6825      	ldr	r5, [r4, #0]
 802094e:	1961      	adds	r1, r4, r5
 8020950:	428b      	cmp	r3, r1
 8020952:	bf04      	itt	eq
 8020954:	6819      	ldreq	r1, [r3, #0]
 8020956:	685b      	ldreq	r3, [r3, #4]
 8020958:	6063      	str	r3, [r4, #4]
 802095a:	bf04      	itt	eq
 802095c:	1949      	addeq	r1, r1, r5
 802095e:	6021      	streq	r1, [r4, #0]
 8020960:	6054      	str	r4, [r2, #4]
 8020962:	e7ca      	b.n	80208fa <_free_r+0x26>
 8020964:	b003      	add	sp, #12
 8020966:	bd30      	pop	{r4, r5, pc}
 8020968:	24001148 	.word	0x24001148

0802096c <sbrk_aligned>:
 802096c:	b570      	push	{r4, r5, r6, lr}
 802096e:	4e0e      	ldr	r6, [pc, #56]	; (80209a8 <sbrk_aligned+0x3c>)
 8020970:	460c      	mov	r4, r1
 8020972:	6831      	ldr	r1, [r6, #0]
 8020974:	4605      	mov	r5, r0
 8020976:	b911      	cbnz	r1, 802097e <sbrk_aligned+0x12>
 8020978:	f000 f88c 	bl	8020a94 <_sbrk_r>
 802097c:	6030      	str	r0, [r6, #0]
 802097e:	4621      	mov	r1, r4
 8020980:	4628      	mov	r0, r5
 8020982:	f000 f887 	bl	8020a94 <_sbrk_r>
 8020986:	1c43      	adds	r3, r0, #1
 8020988:	d00a      	beq.n	80209a0 <sbrk_aligned+0x34>
 802098a:	1cc4      	adds	r4, r0, #3
 802098c:	f024 0403 	bic.w	r4, r4, #3
 8020990:	42a0      	cmp	r0, r4
 8020992:	d007      	beq.n	80209a4 <sbrk_aligned+0x38>
 8020994:	1a21      	subs	r1, r4, r0
 8020996:	4628      	mov	r0, r5
 8020998:	f000 f87c 	bl	8020a94 <_sbrk_r>
 802099c:	3001      	adds	r0, #1
 802099e:	d101      	bne.n	80209a4 <sbrk_aligned+0x38>
 80209a0:	f04f 34ff 	mov.w	r4, #4294967295
 80209a4:	4620      	mov	r0, r4
 80209a6:	bd70      	pop	{r4, r5, r6, pc}
 80209a8:	2400114c 	.word	0x2400114c

080209ac <_malloc_r>:
 80209ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80209b0:	1ccd      	adds	r5, r1, #3
 80209b2:	f025 0503 	bic.w	r5, r5, #3
 80209b6:	3508      	adds	r5, #8
 80209b8:	2d0c      	cmp	r5, #12
 80209ba:	bf38      	it	cc
 80209bc:	250c      	movcc	r5, #12
 80209be:	2d00      	cmp	r5, #0
 80209c0:	4607      	mov	r7, r0
 80209c2:	db01      	blt.n	80209c8 <_malloc_r+0x1c>
 80209c4:	42a9      	cmp	r1, r5
 80209c6:	d905      	bls.n	80209d4 <_malloc_r+0x28>
 80209c8:	230c      	movs	r3, #12
 80209ca:	603b      	str	r3, [r7, #0]
 80209cc:	2600      	movs	r6, #0
 80209ce:	4630      	mov	r0, r6
 80209d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80209d4:	4e2e      	ldr	r6, [pc, #184]	; (8020a90 <_malloc_r+0xe4>)
 80209d6:	f000 f8b1 	bl	8020b3c <__malloc_lock>
 80209da:	6833      	ldr	r3, [r6, #0]
 80209dc:	461c      	mov	r4, r3
 80209de:	bb34      	cbnz	r4, 8020a2e <_malloc_r+0x82>
 80209e0:	4629      	mov	r1, r5
 80209e2:	4638      	mov	r0, r7
 80209e4:	f7ff ffc2 	bl	802096c <sbrk_aligned>
 80209e8:	1c43      	adds	r3, r0, #1
 80209ea:	4604      	mov	r4, r0
 80209ec:	d14d      	bne.n	8020a8a <_malloc_r+0xde>
 80209ee:	6834      	ldr	r4, [r6, #0]
 80209f0:	4626      	mov	r6, r4
 80209f2:	2e00      	cmp	r6, #0
 80209f4:	d140      	bne.n	8020a78 <_malloc_r+0xcc>
 80209f6:	6823      	ldr	r3, [r4, #0]
 80209f8:	4631      	mov	r1, r6
 80209fa:	4638      	mov	r0, r7
 80209fc:	eb04 0803 	add.w	r8, r4, r3
 8020a00:	f000 f848 	bl	8020a94 <_sbrk_r>
 8020a04:	4580      	cmp	r8, r0
 8020a06:	d13a      	bne.n	8020a7e <_malloc_r+0xd2>
 8020a08:	6821      	ldr	r1, [r4, #0]
 8020a0a:	3503      	adds	r5, #3
 8020a0c:	1a6d      	subs	r5, r5, r1
 8020a0e:	f025 0503 	bic.w	r5, r5, #3
 8020a12:	3508      	adds	r5, #8
 8020a14:	2d0c      	cmp	r5, #12
 8020a16:	bf38      	it	cc
 8020a18:	250c      	movcc	r5, #12
 8020a1a:	4629      	mov	r1, r5
 8020a1c:	4638      	mov	r0, r7
 8020a1e:	f7ff ffa5 	bl	802096c <sbrk_aligned>
 8020a22:	3001      	adds	r0, #1
 8020a24:	d02b      	beq.n	8020a7e <_malloc_r+0xd2>
 8020a26:	6823      	ldr	r3, [r4, #0]
 8020a28:	442b      	add	r3, r5
 8020a2a:	6023      	str	r3, [r4, #0]
 8020a2c:	e00e      	b.n	8020a4c <_malloc_r+0xa0>
 8020a2e:	6822      	ldr	r2, [r4, #0]
 8020a30:	1b52      	subs	r2, r2, r5
 8020a32:	d41e      	bmi.n	8020a72 <_malloc_r+0xc6>
 8020a34:	2a0b      	cmp	r2, #11
 8020a36:	d916      	bls.n	8020a66 <_malloc_r+0xba>
 8020a38:	1961      	adds	r1, r4, r5
 8020a3a:	42a3      	cmp	r3, r4
 8020a3c:	6025      	str	r5, [r4, #0]
 8020a3e:	bf18      	it	ne
 8020a40:	6059      	strne	r1, [r3, #4]
 8020a42:	6863      	ldr	r3, [r4, #4]
 8020a44:	bf08      	it	eq
 8020a46:	6031      	streq	r1, [r6, #0]
 8020a48:	5162      	str	r2, [r4, r5]
 8020a4a:	604b      	str	r3, [r1, #4]
 8020a4c:	4638      	mov	r0, r7
 8020a4e:	f104 060b 	add.w	r6, r4, #11
 8020a52:	f000 f879 	bl	8020b48 <__malloc_unlock>
 8020a56:	f026 0607 	bic.w	r6, r6, #7
 8020a5a:	1d23      	adds	r3, r4, #4
 8020a5c:	1af2      	subs	r2, r6, r3
 8020a5e:	d0b6      	beq.n	80209ce <_malloc_r+0x22>
 8020a60:	1b9b      	subs	r3, r3, r6
 8020a62:	50a3      	str	r3, [r4, r2]
 8020a64:	e7b3      	b.n	80209ce <_malloc_r+0x22>
 8020a66:	6862      	ldr	r2, [r4, #4]
 8020a68:	42a3      	cmp	r3, r4
 8020a6a:	bf0c      	ite	eq
 8020a6c:	6032      	streq	r2, [r6, #0]
 8020a6e:	605a      	strne	r2, [r3, #4]
 8020a70:	e7ec      	b.n	8020a4c <_malloc_r+0xa0>
 8020a72:	4623      	mov	r3, r4
 8020a74:	6864      	ldr	r4, [r4, #4]
 8020a76:	e7b2      	b.n	80209de <_malloc_r+0x32>
 8020a78:	4634      	mov	r4, r6
 8020a7a:	6876      	ldr	r6, [r6, #4]
 8020a7c:	e7b9      	b.n	80209f2 <_malloc_r+0x46>
 8020a7e:	230c      	movs	r3, #12
 8020a80:	603b      	str	r3, [r7, #0]
 8020a82:	4638      	mov	r0, r7
 8020a84:	f000 f860 	bl	8020b48 <__malloc_unlock>
 8020a88:	e7a1      	b.n	80209ce <_malloc_r+0x22>
 8020a8a:	6025      	str	r5, [r4, #0]
 8020a8c:	e7de      	b.n	8020a4c <_malloc_r+0xa0>
 8020a8e:	bf00      	nop
 8020a90:	24001148 	.word	0x24001148

08020a94 <_sbrk_r>:
 8020a94:	b538      	push	{r3, r4, r5, lr}
 8020a96:	4d06      	ldr	r5, [pc, #24]	; (8020ab0 <_sbrk_r+0x1c>)
 8020a98:	2300      	movs	r3, #0
 8020a9a:	4604      	mov	r4, r0
 8020a9c:	4608      	mov	r0, r1
 8020a9e:	602b      	str	r3, [r5, #0]
 8020aa0:	f7f4 fa22 	bl	8014ee8 <_sbrk>
 8020aa4:	1c43      	adds	r3, r0, #1
 8020aa6:	d102      	bne.n	8020aae <_sbrk_r+0x1a>
 8020aa8:	682b      	ldr	r3, [r5, #0]
 8020aaa:	b103      	cbz	r3, 8020aae <_sbrk_r+0x1a>
 8020aac:	6023      	str	r3, [r4, #0]
 8020aae:	bd38      	pop	{r3, r4, r5, pc}
 8020ab0:	24001150 	.word	0x24001150

08020ab4 <_raise_r>:
 8020ab4:	291f      	cmp	r1, #31
 8020ab6:	b538      	push	{r3, r4, r5, lr}
 8020ab8:	4604      	mov	r4, r0
 8020aba:	460d      	mov	r5, r1
 8020abc:	d904      	bls.n	8020ac8 <_raise_r+0x14>
 8020abe:	2316      	movs	r3, #22
 8020ac0:	6003      	str	r3, [r0, #0]
 8020ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8020ac6:	bd38      	pop	{r3, r4, r5, pc}
 8020ac8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020aca:	b112      	cbz	r2, 8020ad2 <_raise_r+0x1e>
 8020acc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020ad0:	b94b      	cbnz	r3, 8020ae6 <_raise_r+0x32>
 8020ad2:	4620      	mov	r0, r4
 8020ad4:	f000 f830 	bl	8020b38 <_getpid_r>
 8020ad8:	462a      	mov	r2, r5
 8020ada:	4601      	mov	r1, r0
 8020adc:	4620      	mov	r0, r4
 8020ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020ae2:	f000 b817 	b.w	8020b14 <_kill_r>
 8020ae6:	2b01      	cmp	r3, #1
 8020ae8:	d00a      	beq.n	8020b00 <_raise_r+0x4c>
 8020aea:	1c59      	adds	r1, r3, #1
 8020aec:	d103      	bne.n	8020af6 <_raise_r+0x42>
 8020aee:	2316      	movs	r3, #22
 8020af0:	6003      	str	r3, [r0, #0]
 8020af2:	2001      	movs	r0, #1
 8020af4:	e7e7      	b.n	8020ac6 <_raise_r+0x12>
 8020af6:	2400      	movs	r4, #0
 8020af8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020afc:	4628      	mov	r0, r5
 8020afe:	4798      	blx	r3
 8020b00:	2000      	movs	r0, #0
 8020b02:	e7e0      	b.n	8020ac6 <_raise_r+0x12>

08020b04 <raise>:
 8020b04:	4b02      	ldr	r3, [pc, #8]	; (8020b10 <raise+0xc>)
 8020b06:	4601      	mov	r1, r0
 8020b08:	6818      	ldr	r0, [r3, #0]
 8020b0a:	f7ff bfd3 	b.w	8020ab4 <_raise_r>
 8020b0e:	bf00      	nop
 8020b10:	24000018 	.word	0x24000018

08020b14 <_kill_r>:
 8020b14:	b538      	push	{r3, r4, r5, lr}
 8020b16:	4d07      	ldr	r5, [pc, #28]	; (8020b34 <_kill_r+0x20>)
 8020b18:	2300      	movs	r3, #0
 8020b1a:	4604      	mov	r4, r0
 8020b1c:	4608      	mov	r0, r1
 8020b1e:	4611      	mov	r1, r2
 8020b20:	602b      	str	r3, [r5, #0]
 8020b22:	f7f4 f9c7 	bl	8014eb4 <_kill>
 8020b26:	1c43      	adds	r3, r0, #1
 8020b28:	d102      	bne.n	8020b30 <_kill_r+0x1c>
 8020b2a:	682b      	ldr	r3, [r5, #0]
 8020b2c:	b103      	cbz	r3, 8020b30 <_kill_r+0x1c>
 8020b2e:	6023      	str	r3, [r4, #0]
 8020b30:	bd38      	pop	{r3, r4, r5, pc}
 8020b32:	bf00      	nop
 8020b34:	24001150 	.word	0x24001150

08020b38 <_getpid_r>:
 8020b38:	f7f4 b9b4 	b.w	8014ea4 <_getpid>

08020b3c <__malloc_lock>:
 8020b3c:	4801      	ldr	r0, [pc, #4]	; (8020b44 <__malloc_lock+0x8>)
 8020b3e:	f000 b809 	b.w	8020b54 <__retarget_lock_acquire_recursive>
 8020b42:	bf00      	nop
 8020b44:	24001154 	.word	0x24001154

08020b48 <__malloc_unlock>:
 8020b48:	4801      	ldr	r0, [pc, #4]	; (8020b50 <__malloc_unlock+0x8>)
 8020b4a:	f000 b804 	b.w	8020b56 <__retarget_lock_release_recursive>
 8020b4e:	bf00      	nop
 8020b50:	24001154 	.word	0x24001154

08020b54 <__retarget_lock_acquire_recursive>:
 8020b54:	4770      	bx	lr

08020b56 <__retarget_lock_release_recursive>:
 8020b56:	4770      	bx	lr

08020b58 <_init>:
 8020b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b5a:	bf00      	nop
 8020b5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b5e:	bc08      	pop	{r3}
 8020b60:	469e      	mov	lr, r3
 8020b62:	4770      	bx	lr

08020b64 <_fini>:
 8020b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020b66:	bf00      	nop
 8020b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020b6a:	bc08      	pop	{r3}
 8020b6c:	469e      	mov	lr, r3
 8020b6e:	4770      	bx	lr
