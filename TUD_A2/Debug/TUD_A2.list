
TUD_A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00020bd4  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08020ea4  08020ea4  00030ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000034  08021120  08021120  00031120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000030  08021154  08021154  00031154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08021184  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000011a0  2400007c  08021200  0004007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400121c  08021200  0004121c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c80bf  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000b1ea  00000000  00000000  00108169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000057d8  00000000  00000000  00113358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005910  00000000  00000000  00118b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003ebcc  00000000  00000000  0011e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0003b1a9  00000000  00000000  0015d00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001d72d4  00000000  00000000  001981b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0036f489  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00019c14  00000000  00000000  0036f4dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020e8c 	.word	0x08020e8c

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08020e8c 	.word	0x08020e8c

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
 8000324:	2300      	movs	r3, #0
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f805 	bl	8000366 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    }
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f9e2 	bl	8000764 <_ZNSaIP8AnalogInED1Ev>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f9c5 	bl	8000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffeb 	bl	80003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f9f5 	bl	80007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f9d3 	bl	80007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffeb 	bl	80003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 fa04 	bl	8000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f9e2 	bl	8000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffeb 	bl	8000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_ZN8AnalogIn5startEv>:

vector<AnalogIn*> AnalogIn::all_analog_ins;
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;

void AnalogIn::start() {
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d004      	beq.n	80004a2 <_ZN8AnalogIn5startEv+0x2a>
		HAL_TIM_Base_Start(timer);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4618      	mov	r0, r3
 800049e:	f01e f8ab 	bl	801e5f8 <HAL_TIM_Base_Start>
	}

	if(adc->State == 1){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d014      	beq.n	80004e0 <_ZN8AnalogIn5startEv+0x68>
		HAL_ADC_Start_DMA(adc,(uint32_t*) adcs[adc].data, adcs[adc].data_size);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004c0:	f000 f9de 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004c4:	4603      	mov	r3, r0
 80004c6:	1d1d      	adds	r5, r3, #4
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004ce:	f000 f9d7 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004d2:	4603      	mov	r3, r0
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4629      	mov	r1, r5
 80004da:	4620      	mov	r0, r4
 80004dc:	f015 fbd0 	bl	8015c80 <HAL_ADC_Start_DMA>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}
 80004e8:	240000a4 	.word	0x240000a4

080004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>:

AnalogIn::AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer, Pin* pin) : adc(adc), timer(timer) {
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b08e      	sub	sp, #56	; 0x38
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
	AnalogIn::all_analog_ins.push_back(this);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800050e:	4619      	mov	r1, r3
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb4>)
 8000512:	f000 fa13 	bl	800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>
	AnalogIn::analog_in_from_pin[pin] = this;
 8000516:	68fc      	ldr	r4, [r7, #12]
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4821      	ldr	r0, [pc, #132]	; (80005a4 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb8>)
 800051e:	f000 fa1f 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8000522:	4603      	mov	r3, r0
 8000524:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_INPUT;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2201      	movs	r2, #1
 800052a:	719a      	strb	r2, [r3, #6]

	if(adcs.count(adc) == 0) {
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	4619      	mov	r1, r3
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000534:	f000 fa72 	bl	8000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d011      	beq.n	800056c <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0x80>
		ADC adc_struct;
		adc_struct.data_size = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
		adcs[adc] = adc_struct;
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4619      	mov	r1, r3
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000554:	f000 f994 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000558:	4603      	mov	r3, r0
 800055a:	461d      	mov	r5, r3
 800055c:	f107 0410 	add.w	r4, r7, #16
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	602b      	str	r3, [r5, #0]
	}

	adc_index = adcs[adc].data_size;
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000574:	f000 f984 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000578:	4603      	mov	r3, r0
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	611a      	str	r2, [r3, #16]
	adcs[adc].data_size += 1;
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000588:	f000 f97a 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 800058c:	4603      	mov	r3, r0
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	3201      	adds	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4618      	mov	r0, r3
 8000598:	3738      	adds	r7, #56	; 0x38
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	24000098 	.word	0x24000098
 80005a4:	240000bc 	.word	0x240000bc
 80005a8:	240000a4 	.word	0x240000a4
 80005ac:	00000000 	.word	0x00000000

080005b0 <_ZN8AnalogIn6updateEv>:

float AnalogIn::update() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <_ZN8AnalogIn6updateEv+0x68>)
 80005be:	f000 f95f 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005d6:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000608 <_ZN8AnalogIn6updateEv+0x58>
 80005da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005de:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000610 <_ZN8AnalogIn6updateEv+0x60>
 80005e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	edc3 7a05 	vstr	s15, [r3, #20]
	return voltage;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000000 	.word	0x00000000
 800060c:	40efffe0 	.word	0x40efffe0
 8000610:	66666666 	.word	0x66666666
 8000614:	400a6666 	.word	0x400a6666
 8000618:	240000a4 	.word	0x240000a4

0800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffed 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8000642:	4603      	mov	r3, r0
 8000644:	681c      	ldr	r4, [r3, #0]
 8000646:	6838      	ldr	r0, [r7, #0]
 8000648:	f7ff ffe8 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800064c:	4603      	mov	r3, r0
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429c      	cmp	r4, r3
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	++_M_current;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	return *this;
 8000674:	687b      	ldr	r3, [r7, #4]
      }
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <_ZN8AnalogIn20start_all_analog_insEv>:

void AnalogIn::start_all_analog_ins(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZN8AnalogIn20start_all_analog_insEv+0x5c>)
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f9dc 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f9e7 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 80006b6:	4603      	mov	r3, r0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	463a      	mov	r2, r7
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb6 	bl	8000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <_ZN8AnalogIn20start_all_analog_insEv+0x54>
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffd4 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 80006da:	4603      	mov	r3, r0
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60bb      	str	r3, [r7, #8]
		analog_in->start();
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	f7ff fec9 	bl	8000478 <_ZN8AnalogIn5startEv>
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffba 	bl	8000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>
 80006ee:	e7e4      	b.n	80006ba <_ZN8AnalogIn20start_all_analog_insEv+0x1e>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	24000098 	.word	0x24000098

080006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>:

void AnalogIn::interrupt_all_analog_ins(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000708:	f000 f9cd 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800070c:	4602      	mov	r2, r0
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4293      	cmp	r3, r2
 8000712:	bf34      	ite	cc
 8000714:	2301      	movcc	r3, #1
 8000716:	2300      	movcs	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x3c>
		AnalogIn::all_analog_ins[i]->update();
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000722:	f000 f9d0 	bl	8000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>
 8000726:	4603      	mov	r3, r0
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <_ZN8AnalogIn6updateEv>
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e7e6      	b.n	8000706 <_ZN8AnalogIn24interrupt_all_analog_insEv+0xa>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24000098 	.word	0x24000098

08000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f9ca 	bl	8000ae6 <_ZNSaIP8AnalogInEC1Ev>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9d2 	bl	8000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZNSaIP8AnalogInED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000792:	461a      	mov	r2, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f9c6 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fdf8 	bl	8000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f9c9 	bl	8000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9d1 	bl	8000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdbe 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>:
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f9df 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f9bb 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fde9 	bl	80003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f9d6 	bl	8000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f9de 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd89 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>:
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f9ec 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f9c8 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdda 	bl	800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f9e1 	bl	8000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>
 8000892:	4603      	mov	r3, r0
 8000894:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9eb 	bl	8000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9ee 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d114      	bne.n	80008e0 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x60>
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9fc 	bl	8000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa02 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4621      	mov	r1, r4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fa08 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x64>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x66>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01b      	beq.n	8000922 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80008ea:	687c      	ldr	r4, [r7, #4]
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fa19 	bl	8000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa04 	bl	8000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000908:	f107 0218 	add.w	r2, r7, #24
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xb8>)
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	4620      	mov	r0, r4
 800091a:	f000 fa18 	bl	8000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800091e:	4603      	mov	r3, r0
 8000920:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9d1 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 800092c:	4603      	mov	r3, r0
 800092e:	3304      	adds	r3, #4
      }
 8000930:	4618      	mov	r0, r3
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	080210a4 	.word	0x080210a4

0800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f000 fa3f 	bl	8000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fa45 	bl	8000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fa69 	bl	8000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8000972:	4603      	mov	r3, r0
 8000974:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 fa73 	bl	8000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa76 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa84 	bl	8000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa8a 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 80009aa:	4603      	mov	r3, r0
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4621      	mov	r1, r4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa90 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01b      	beq.n	8000a02 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009ca:	687c      	ldr	r4, [r7, #4]
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 faa1 	bl	8000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa8c 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80009f6:	6979      	ldr	r1, [r7, #20]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 faa0 	bl	8000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa59 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	3304      	adds	r3, #4
      }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3724      	adds	r7, #36	; 0x24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	080210a4 	.word	0x080210a4

08000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fac5 	bl	8000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fafe 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb05 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x3e>
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x40>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb04 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 faf3 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	109b      	asrs	r3, r3, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
      }
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_ZNSaIP8AnalogInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fad7 	bl	80010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	{ }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 faba 	bl	80010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>
      }
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 face 	bl	80010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
      { }
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d012      	beq.n	8000bb0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 fabe 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fff0 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 fac2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000ba0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fac9 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000bae:	e7e9      	b.n	8000b84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
	}
    }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fac0 	bl	800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
      { }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d012      	beq.n	8000c34 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f000 fab0 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fff0 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000c1e:	6838      	ldr	r0, [r7, #0]
 8000c20:	f000 fab4 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000c24:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fabb 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000c32:	e7e9      	b.n	8000c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 faaf 	bl	80011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fab9 	bl	80011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>:
      key_comp() const
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 faa9 	bl	8001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>
 8000cc4:	bf00      	nop
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}

08000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 faa6 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	bf34      	ite	cc
 8000cfe:	2301      	movcc	r3, #1
 8000d00:	2300      	movcs	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
      }
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fa92 	bl	8001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa82 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d62:	4604      	mov	r4, r0
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 fa89 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d6e:	f000 fa90 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d72:	4603      	mov	r3, r0
 8000d74:	462a      	mov	r2, r5
 8000d76:	4621      	mov	r1, r4
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fa95 	bl	80012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8000d7e:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f000 fbe3 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f107 0010 	add.w	r0, r7, #16
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	f000 faad 	bl	80012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>

	    if (__res.second)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000d9a:	6939      	ldr	r1, [r7, #16]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 fbe6 	bl	8001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e00b      	b.n	8000dc2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>

	    _M_drop_node(__z);
 8000daa:	69f9      	ldr	r1, [r7, #28]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f9c5 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fc18 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}

08000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d011      	beq.n	8000e1a <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685d      	ldr	r5, [r3, #4]
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f000 fc06 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4629      	mov	r1, r5
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f000 fc20 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	1d1a      	adds	r2, r3, #4
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e00c      	b.n	8000e34 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe32 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 8000e20:	4604      	mov	r4, r0
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f000 fbf3 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fc20 	bl	8001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fc99 	bl	800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>
 8000e3a:	4603      	mov	r3, r0
#endif
      }
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fca5 	bl	80017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fcaf 	bl	80017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fc9f 	bl	80017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8000eb4:	bf00      	nop
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc9c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZNKSt4lessIP3PinEclES1_S1_>:
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	bf34      	ite	cc
 8000eee:	2301      	movcc	r3, #1
 8000ef0:	2300      	movcs	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
      }
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc88 	bl	8001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f3e:	b5b0      	push	{r4, r5, r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f98a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000f52:	4604      	mov	r4, r0
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f000 fc74 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f5e:	f000 f998 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000f62:	4603      	mov	r3, r0
 8000f64:	462a      	mov	r2, r5
 8000f66:	4621      	mov	r1, r4
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fc75 	bl	8001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8000f6e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	f000 fdc3 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	f000 fc8d 	bl	800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 fdc6 	bl	8001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e00b      	b.n	8000fb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8000f9a:	69f9      	ldr	r1, [r7, #28]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f901 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdf8 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
      }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}

08000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000fba:	b5b0      	push	{r4, r5, r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fdfa 	bl	8001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fe02 	bl	8001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fe08 	bl	8001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f828 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82f 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000ffc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001002:	687c      	ldr	r4, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe22 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001010:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4629      	mov	r1, r5
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fe66 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f807 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x76>
 800102e:	68bb      	ldr	r3, [r7, #8]
    }
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe0e 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80010d0:	f7ff f926 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f01f fc34 	bl	8020948 <_ZdlPv>
	    return;
 80010e0:	e005      	b.n	80010ee <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f001 fa62 	bl	80025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fd9e 	bl	8001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fdaf 	bl	8001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fd91 	bl	8001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fda2 	bl	8001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fcf1 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80011d6:	4604      	mov	r4, r0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fda4 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 80011de:	4602      	mov	r2, r0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4621      	mov	r1, r4
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fdaa 	bl	8001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1d1a      	adds	r2, r3, #4
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9f2 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>:
      key_comp() const
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr()
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fdb3 	bl	8001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fdb0 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fd8f 	bl	8001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>
 80012bc:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff ffd1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80012c4:	4604      	mov	r4, r0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffd8 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff ffdf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80012d4:	4603      	mov	r3, r0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	462b      	mov	r3, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fd8c 	bl	8001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80012e4:	697b      	ldr	r3, [r7, #20]
	}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}

080012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012ee:	b5b0      	push	{r4, r5, r7, lr}
 80012f0:	b08c      	sub	sp, #48	; 0x30
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fda9 	bl	8001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>
 8001304:	4603      	mov	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001308:	69bc      	ldr	r4, [r7, #24]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f000 fd0b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001310:	4603      	mov	r3, r0
 8001312:	429c      	cmp	r4, r3
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d032      	beq.n	8001386 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x98>
	  if (size() > 0
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 fda9 	bl	8001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>
 8001326:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001328:	2b00      	cmp	r3, #0
 800132a:	d015      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 800132c:	68bc      	ldr	r4, [r7, #8]
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 fdae 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001334:	4603      	mov	r3, r0
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fc8b 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800133e:	4603      	mov	r3, r0
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fcce 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6c>
 8001358:	2300      	movs	r3, #0
	  if (size() > 0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f000 fd94 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fd99 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001376:	e0e5      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fda8 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8001384:	e0de      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001386:	68bc      	ldr	r4, [r7, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681d      	ldr	r5, [r3, #0]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc60 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001394:	4603      	mov	r3, r0
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4629      	mov	r1, r5
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fca4 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x16e>
	  iterator __before = __pos;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80013ac:	69bc      	ldr	r4, [r7, #24]
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 fe1a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429c      	cmp	r4, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 fe0e 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013cc:	4604      	mov	r4, r0
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f000 fe0a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fe10 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80013e0:	e0b0      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80013e2:	68bc      	ldr	r4, [r7, #8]
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe22 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc2e 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fc71 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe7b 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	f107 0214 	add.w	r2, r7, #20
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fd37 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800143a:	e083      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800143c:	f107 0218 	add.w	r2, r7, #24
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fdda 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800144c:	e07a      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd3d 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800145a:	e073      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800145c:	68bc      	ldr	r4, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fbf7 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001466:	4603      	mov	r3, r0
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fc3a 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d059      	beq.n	8001530 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x242>
	  iterator __after = __pos;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001480:	69bc      	ldr	r4, [r7, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 fd04 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001488:	4603      	mov	r3, r0
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	429c      	cmp	r4, r3
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 fcf6 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fcfb 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80014b2:	e047      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80014b4:	68bc      	ldr	r4, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681d      	ldr	r5, [r3, #0]
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fdc8 	bl	8002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fbc3 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80014ce:	4603      	mov	r3, r0
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4629      	mov	r1, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fc07 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01f      	beq.n	8001522 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe11 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014fe:	f107 0218 	add.w	r2, r7, #24
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fccd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800150e:	e019      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fd70 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001520:	e010      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcd3 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800152e:	e009      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fd99 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fda4 	bl	80020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 800155a:	4602      	mov	r2, r0
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdab 	bl	80020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>
 8001568:	4603      	mov	r3, r0
      }
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001572:	b5b0      	push	{r4, r5, r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fbcd 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4293      	cmp	r3, r2
 8001592:	d012      	beq.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001594:	68fc      	ldr	r4, [r7, #12]
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7ff ffd8 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800159c:	4603      	mov	r3, r0
 800159e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb57 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fb9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4e>
 80015be:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80015c0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80015c6:	7df8      	ldrb	r0, [r7, #23]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	f01f fa2c 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f805 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80015e6:	693b      	ldr	r3, [r7, #16]
    }
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}

080015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7ff ffed 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001634:	4603      	mov	r3, r0
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	2004      	movs	r0, #4
 800163e:	f7fe fe77 	bl	8000330 <_ZnwjPv>
 8001642:	4603      	mov	r3, r0
 8001644:	601c      	str	r4, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffd7 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff ffdd 	bl	8001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8001682:	2101      	movs	r1, #1
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fd26 	bl	80020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff f9e3 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd59 	bl	8002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80016b2:	4603      	mov	r3, r0
 80016b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd67 	bl	800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>
 80016c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80016c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	18d5      	adds	r5, r2, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff9c 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ffb6 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff96 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd71 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80016fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4621      	mov	r1, r4
 8001702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001704:	f000 fd57 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001708:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3304      	adds	r3, #4
 800170e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff81 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800171a:	4603      	mov	r3, r0
 800171c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fd5c 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8001726:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd42 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001732:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001734:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8001740:	461a      	mov	r2, r3
 8001742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001744:	f7ff f9ef 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	441a      	add	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
    }
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	08020ea4 	.word	0x08020ea4

0800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff f985 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd43 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>
 800178a:	4603      	mov	r3, r0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff75 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 8001798:	4603      	mov	r3, r0
      }
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fa45 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80017b2:	4604      	mov	r4, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fd44 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fd4a 	bl	800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f9dc 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80017fa:	bf00      	nop
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr()
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3310      	adds	r3, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd53 	bl	80022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd50 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fd45 	bl	80022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800186c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff fcf9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001874:	4604      	mov	r4, r0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffe3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800187c:	4605      	mov	r5, r0
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7ff fd07 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001884:	4603      	mov	r3, r0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	462b      	mov	r3, r5
 800188a:	4622      	mov	r2, r4
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd42 	bl	8002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001894:	697b      	ldr	r3, [r7, #20]
	}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}

0800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800189e:	b5b0      	push	{r4, r5, r7, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd5f 	bl	8002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80018b8:	69bc      	ldr	r4, [r7, #24]
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 fcc1 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	429c      	cmp	r4, r3
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f000 fd5f 	bl	8002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 80018d6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 80018dc:	68bc      	ldr	r4, [r7, #8]
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 fd64 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd6b 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff faee 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8001908:	2300      	movs	r3, #0
	  if (size() > 0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 fd4a 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001918:	4602      	mov	r2, r0
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fac1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001926:	e0e5      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fd54 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001934:	e0de      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681d      	ldr	r5, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd40 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001944:	4603      	mov	r3, r0
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4629      	mov	r1, r5
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff fac4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d059      	beq.n	8001a0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800195c:	69bc      	ldr	r4, [r7, #24]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fdc6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001964:	4603      	mov	r3, r0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429c      	cmp	r4, r3
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 fdba 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800197c:	4604      	mov	r4, r0
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fdb6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4621      	mov	r1, r4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fb38 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001990:	e0b0      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001992:	68bc      	ldr	r4, [r7, #8]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fdb5 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd0e 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa91 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbd7 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	f107 0214 	add.w	r2, r7, #20
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa5f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80019ea:	e083      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 80019ec:	f107 0218 	add.w	r2, r7, #24
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb02 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80019fc:	e07a      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fce9 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001a0a:	e073      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001a0c:	68bc      	ldr	r4, [r7, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fcd7 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a16:	4603      	mov	r3, r0
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fa5a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d059      	beq.n	8001ae0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001a30:	69bc      	ldr	r4, [r7, #24]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 fcba 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fcac 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fa23 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001a62:	e047      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001a64:	68bc      	ldr	r4, [r7, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd5b 	bl	800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fca3 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fa27 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01f      	beq.n	8001ad2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb6d 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9f5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001abe:	e019      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa98 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001ad0:	e010      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fc7f 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001ade:	e009      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fac1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fd21 	bl	800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd28 	bl	8002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>
 8001b18:	4603      	mov	r3, r0
      }
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b22:	b5b0      	push	{r4, r5, r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fb83 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b44:	68fc      	ldr	r4, [r7, #12]
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff ffd8 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fc37 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b56:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9bb 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001b6e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b70:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001b76:	7df8      	ldrb	r0, [r7, #23]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	f01e ff54 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f805 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8001b96:	693b      	ldr	r3, [r7, #16]
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
      }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01d      	beq.n	8001c3e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c02:	68fc      	ldr	r4, [r7, #12]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fca1 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff f868 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f000 fca8 	bl	8002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8001c30:	60b8      	str	r0, [r7, #8]
 8001c32:	e7e3      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001c34:	68b8      	ldr	r0, [r7, #8]
 8001c36:	f000 fcaf 	bl	8002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8001c3a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001c3c:	e7de      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f811 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001c4a:	697b      	ldr	r3, [r7, #20]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fc75 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fc9a 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f7ff fac5 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fc9c 	bl	80025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>
      }
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fc85 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc96 	bl	80025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fca9 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd8c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f000 fcab 	bl	8002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fc94 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2201      	movs	r2, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fca5 	bl	8002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d3e:	b590      	push	{r4, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d52:	68fc      	ldr	r4, [r7, #12]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff fbf9 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ffc0 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f9d2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d80:	60b8      	str	r0, [r7, #8]
 8001d82:	e7e3      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f7ff f9c1 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d8c:	e7de      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc2b 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001d9a:	697b      	ldr	r3, [r7, #20]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fc7a 	bl	80026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbf3 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fc65 	bl	80026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2038      	movs	r0, #56	; 0x38
 8001e12:	f7fe fa8d 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fbd9 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f7ff fa04 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001e24:	4605      	mov	r5, r0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fa1d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff fa24 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e34:	4680      	mov	r8, r0
 8001e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e38:	f7ff fa2b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4643      	mov	r3, r8
 8001e42:	4632      	mov	r2, r6
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 fc95 	bl	8002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbc1 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fc76 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fe69 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff1b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001f04:	68bc      	ldr	r4, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb1d 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001f12:	4603      	mov	r3, r0
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe fee5 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x66>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8f7 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001f36:	4603      	mov	r3, r0
 8001f38:	e004      	b.n	8001f44 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x70>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8e5 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001f42:	4603      	mov	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001f46:	e7d8      	b.n	8001efa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb4d 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01d      	beq.n	8001f9a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f000 fc30 	bl	80027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	f107 021c 	add.w	r2, r7, #28
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fe8a 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001f7e:	f107 0214 	add.w	r2, r7, #20
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fc2c 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001f8e:	e027      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f84c 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f9a:	68bc      	ldr	r4, [r7, #8]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe58 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe fe9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fc0e 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001fca:	e009      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	f107 0220 	add.w	r2, r7, #32
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f84b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f000 fbce 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002012:	4603      	mov	r3, r0
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002020:	4603      	mov	r3, r0
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f01e fcf0 	bl	8020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
	return *this;
 800204a:	687b      	ldr	r3, [r7, #4]
      }
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f01e fcdd 	bl	8020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
	return *this;
 800206c:	687b      	ldr	r3, [r7, #4]
      }
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fb93 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr() const
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3310      	adds	r3, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fbb2 	bl	8002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fba4 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 80020e8:	4604      	mov	r4, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fcdb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	1ae2      	subs	r2, r4, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf34      	ite	cc
 80020fa:	2301      	movcc	r3, #1
 80020fc:	2300      	movcs	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f01e fced 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fccb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002110:	4604      	mov	r4, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7fe fcc7 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002118:	4603      	mov	r3, r0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb93 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800212c:	4603      	mov	r3, r0
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4423      	add	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe fcb6 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4293      	cmp	r3, r2
 8002140:	d306      	bcc.n	8002150 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb74 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4293      	cmp	r3, r2
 800214e:	d904      	bls.n	800215a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x84>
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb6d 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x86>
 800215a:	697b      	ldr	r3, [r7, #20]
      }
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fa54 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8002174:	4603      	mov	r3, r0
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7fe fa4f 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800217e:	4603      	mov	r3, r0
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ae3      	subs	r3, r4, r3
 8002184:	109b      	asrs	r3, r3, #2
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x1e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb69 	bl	800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x20>
 80021ac:	2300      	movs	r3, #0
      }
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80021c4:	f88d 4000 	strb.w	r4, [sp]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb73 	bl	80028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80021d4:	4603      	mov	r3, r0
      }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}

080021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb75 	bl	80028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>
    }
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	425b      	negs	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff25 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800226e:	68fc      	ldr	r4, [r7, #12]
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f7ff fc43 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8002276:	4603      	mov	r3, r0
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4620      	mov	r0, r4
 8002282:	f7fe fe2a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7fe ff78 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800229c:	60b8      	str	r0, [r7, #8]
 800229e:	e7e3      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f7fe ff67 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80022a6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80022a8:	e7de      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fc75 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80022b6:	697b      	ldr	r3, [r7, #20]
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb28 	bl	800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f99b 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002304:	4603      	mov	r3, r0
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fb13 	bl	8002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4619      	mov	r1, r3
 800232c:	2018      	movs	r0, #24
 800232e:	f7fd ffff 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f981 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002338:	4604      	mov	r4, r0
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f7ff fa64 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8002340:	4605      	mov	r5, r0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe ff8f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002348:	4606      	mov	r6, r0
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fa79 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002350:	4680      	mov	r8, r0
 8002352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002354:	f7fe ff9d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002358:	4603      	mov	r3, r0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4643      	mov	r3, r8
 800235e:	4632      	mov	r2, r6
 8002360:	4629      	mov	r1, r5
 8002362:	4620      	mov	r0, r4
 8002364:	f000 fb43 	bl	80029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc0b 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3310      	adds	r3, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fb95 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f7fe fc27 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f7ff ff25 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800240c:	68bc      	ldr	r4, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb71 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4629      	mov	r1, r5
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fd59 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800242e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fea7 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800243e:	4603      	mov	r3, r0
 8002440:	e004      	b.n	800244c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe95 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800244a:	4603      	mov	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800244e:	e7d8      	b.n	8002402 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fba1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f000 fadd 	bl	8002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800246c:	4603      	mov	r3, r0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	f107 021c 	add.w	r2, r7, #28
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fcfe 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8002486:	f107 0214 	add.w	r2, r7, #20
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4619      	mov	r1, r3
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fad9 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 8002496:	e027      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f833 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80024a2:	68bc      	ldr	r4, [r7, #8]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff8c 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80024ac:	4603      	mov	r3, r0
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7fe fd0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80024c2:	f107 0214 	add.w	r2, r7, #20
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fabb 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 80024d2:	e009      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	f107 0220 	add.w	r2, r7, #32
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fdc7 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}

080024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	330c      	adds	r3, #12
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f01e fa85 	bl	8020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
	return *this;
 8002520:	687b      	ldr	r3, [r7, #4]
      }
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f01e fa72 	bl	8020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
	return *this;
 8002542:	687b      	ldr	r3, [r7, #4]
      }
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr() const
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa8e 	bl	8002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>:
      operator()(const _Pair& __x) const
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4619      	mov	r1, r3
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f01e f9c2 	bl	802094c <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f000 fa4f 	bl	8002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>
	}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002614:	f7fd fe84 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800261e:	69b8      	ldr	r0, [r7, #24]
 8002620:	f01e f992 	bl	8020948 <_ZdlPv>
	    return;
 8002624:	e005      	b.n	8002632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f000 fb70 	bl	8002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f000 fa23 	bl	8002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>
	}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002680:	f7fd fe4e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f01e f95c 	bl	8020948 <_ZdlPv>
	    return;
 8002690:	e005      	b.n	800269e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	69f8      	ldr	r0, [r7, #28]
 8002698:	f000 fb4c 	bl	8002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() noexcept
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80026ce:	f7fd fe27 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f01e f934 	bl	8020950 <_Znwj>
 80026e8:	4603      	mov	r3, r0
 80026ea:	e006      	b.n	80026fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb31 	bl	8002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>
 80026f6:	4603      	mov	r3, r0
 80026f8:	bf00      	nop
      { return __a.allocate(__n); }
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9d1 	bl	8002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002722:	b5b0      	push	{r4, r5, r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fd98 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fda0 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800273c:	4602      	mov	r2, r0
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffdc 	bl	8002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>
 800274a:	f107 0418 	add.w	r4, r7, #24
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f7fe fd9f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4619      	mov	r1, r3
 8002758:	2028      	movs	r0, #40	; 0x28
 800275a:	f7fd fde9 	bl	8000330 <_ZnwjPv>
 800275e:	4605      	mov	r5, r0
 8002760:	7f3b      	ldrb	r3, [r7, #28]
 8002762:	4622      	mov	r2, r4
 8002764:	7d39      	ldrb	r1, [r7, #20]
 8002766:	4628      	mov	r0, r5
 8002768:	f000 f9dc 	bl	8002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 800276c:	462b      	mov	r3, r5
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}

08002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002776:	b5b0      	push	{r4, r5, r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fd6e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800278a:	4604      	mov	r4, r0
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe fd75 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002792:	4605      	mov	r5, r0
 8002794:	6a38      	ldr	r0, [r7, #32]
 8002796:	f7fe fd7c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800279a:	4603      	mov	r3, r0
 800279c:	462a      	mov	r2, r5
 800279e:	4621      	mov	r1, r4
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff ffbe 	bl	8002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}

080027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff0a 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f000 f9aa 	bl	8002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>
 80027f8:	4603      	mov	r3, r0
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffd4 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002806:	4603      	mov	r3, r0
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f99e 	bl	8002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8002826:	4603      	mov	r3, r0
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f9c2 	bl	8002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9a4 	bl	8002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d201      	bcs.n	800286c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	e000      	b.n	800286e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800286c:	687b      	ldr	r3, [r7, #4]
    }
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800288c:	f7fd fd48 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f01e f858 	bl	8020950 <_Znwj>
 80028a0:	4603      	mov	r3, r0
 80028a2:	e006      	b.n	80028b2 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fab0 	bl	8002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	bf00      	nop
      { return __a.allocate(__n); }
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f983 	bl	8002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80028d4:	4603      	mov	r3, r0
      }
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZSt10destroy_atIP8AnalogInEvPT_>:
    destroy_at(_Tp* __location)
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80028fc:	f7fd fd10 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f983 	bl	8002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>
 800290e:	e003      	b.n	8002918 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f996 	bl	8002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>
    }
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() noexcept
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8002946:	f7fd fceb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4618      	mov	r0, r3
 800295c:	f01d fff8 	bl	8020950 <_Znwj>
 8002960:	4603      	mov	r3, r0
 8002962:	e006      	b.n	8002972 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 faae 	bl	8002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>
 800296e:	4603      	mov	r3, r0
 8002970:	bf00      	nop
      { return __a.allocate(__n); }
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>:
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f965 	bl	8002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800299a:	b5b0      	push	{r4, r5, r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f7fe fc5c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe ff47 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ffdc 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80029c2:	f107 0418 	add.w	r4, r7, #24
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f7fe fc63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4619      	mov	r1, r3
 80029d0:	2008      	movs	r0, #8
 80029d2:	f7fd fcad 	bl	8000330 <_ZnwjPv>
 80029d6:	4605      	mov	r5, r0
 80029d8:	7f3b      	ldrb	r3, [r7, #28]
 80029da:	4622      	mov	r2, r4
 80029dc:	7d39      	ldrb	r1, [r7, #20]
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f96c 	bl	8002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80029e4:	462b      	mov	r3, r5
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}

080029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80029ee:	b5b0      	push	{r4, r5, r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe fc32 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a02:	4604      	mov	r4, r0
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7fe ff1c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f7fe fc40 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	462a      	mov	r2, r5
 8002a16:	4621      	mov	r1, r4
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7ff ffbe 	bl	800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}

08002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8b1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002a54:	68b8      	ldr	r0, [r7, #8]
 8002a56:	f000 f945 	bl	8002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fea3 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f939 	bl	8002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>:
    destroy_at(_Tp* __location)
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
    }
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>:
    destroy_at(_Tp* __location)
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    }
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002ac4:	687c      	ldr	r4, [r7, #4]
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 f968 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f971 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff f96f 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002af6:	68b8      	ldr	r0, [r7, #8]
 8002af8:	f000 f968 	bl	8002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f959 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002b04:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f01e f86f 	bl	8020bf8 <memset>
      { }
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	7239      	strb	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002b32:	463a      	mov	r2, r7
 8002b34:	f88d 4000 	strb.w	r4, [sp]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ffd3 	bl	8002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}

08002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() const noexcept
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002b80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002b98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002b9c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffea 	bl	8002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f917 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	681b      	ldr	r3, [r3, #0]
      }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002bda:	b5b0      	push	{r4, r5, r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f92f 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f92b 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f927 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f92c 	bl	8002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002c0a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00a      	beq.n	8002c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f939 	bl	8002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f940 	bl	8002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>
	  for (; __first != __last; ++__first)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e7f0      	b.n	8002c1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0xa>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002c64:	687c      	ldr	r4, [r7, #4]
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f000 f951 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f95a 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fb2d 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f000 f951 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f942 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ca4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
      { }
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	7239      	strb	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002cca:	463a      	mov	r2, r7
 8002ccc:	f88d 4000 	strb.w	r4, [sp]
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ffd7 	bl	8002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}

08002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() const noexcept
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4619      	mov	r1, r3
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f01d fe0f 	bl	802094c <_ZdlPvj>
      }
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68b8      	ldr	r0, [r7, #8]
 8002d4e:	f01d fdfd 	bl	802094c <_ZdlPvj>
      }
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8f7 	bl	8002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf8c      	ite	hi
 8002d72:	2301      	movhi	r3, #1
 8002d74:	2300      	movls	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002d7c:	f01d feaf 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01d fde0 	bl	8020950 <_Znwj>
 8002d90:	4603      	mov	r3, r0
 8002d92:	bf00      	nop
      }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8e4 	bl	8002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8d8 	bl	8002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d201      	bcs.n	8002e00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	e000      	b.n	8002e02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002e00:	687b      	ldr	r3, [r7, #4]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf8c      	ite	hi
 8002e28:	2301      	movhi	r3, #1
 8002e2a:	2300      	movls	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002e32:	f01d fe54 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f01d fd88 	bl	8020950 <_Znwj>
 8002e40:	4603      	mov	r3, r0
 8002e42:	bf00      	nop
      }
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	109b      	asrs	r3, r3, #2
 8002e78:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd06      	ble.n	8002e8e <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f01d fe9b 	bl	8020bc4 <memmove>
      return __result + __count;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>:
    _Destroy(_Tp* __pointer)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd0e 	bl	80028de <_ZSt10destroy_atIP8AnalogInEvPT_>
    }
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f870 	bl	8002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf8c      	ite	hi
 8002ee4:	2301      	movhi	r3, #1
 8002ee6:	2300      	movls	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002eee:	f01d fdf6 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f01d fd27 	bl	8020950 <_Znwj>
 8002f02:	4603      	mov	r3, r0
 8002f04:	bf00      	nop
      }
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f85d 	bl	8002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f851 	bl	8002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	02492492 	.word	0x02492492

08002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff01 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv+0x18>)
      }
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	05555555 	.word	0x05555555

08002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff88 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fc1f 	bl	8000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>:
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fbdd 	bl	80007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_Z41__static_initialization_and_destruction_0ii>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10d      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003056:	480f      	ldr	r0, [pc, #60]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003058:	f7fd f9b4 	bl	80003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800305c:	480e      	ldr	r0, [pc, #56]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800305e:	f7fd f9d7 	bl	8000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003064:	f7fd f9fa 	bl	800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800307a:	f7ff ffc5 	bl	8003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003080:	f7ff ffcf 	bl	8003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003086:	f000 f80b 	bl	80030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24000098 	.word	0x24000098
 8003098:	240000a4 	.word	0x240000a4
 800309c:	240000bc 	.word	0x240000bc

080030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f893 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80030b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030ba:	461a      	mov	r2, r3
 80030bc:	4629      	mov	r1, r5
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff f898 	bl	80021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>
      }
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fb57 	bl	800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}

080030d6 <_GLOBAL__sub_I__ZN8AnalogIn14all_analog_insE>:
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
 80030da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff ffac 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_GLOBAL__sub_D__ZN8AnalogIn14all_analog_insE>:
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff ffa4 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f980 	bl	8003404 <_ZNSaIP9AnalogOutED1Ev>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f963 	bl	80033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>:
      vector() = default;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ffeb 	bl	800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f993 	bl	8003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f971 	bl	800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ffeb 	bl	800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/AnalogOut.hpp"

vector<AnalogOut*> AnalogOut::all_analog_outs;
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;

AnalogOut::AnalogOut(float max_voltage,TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6178      	str	r0, [r7, #20]
 8003198:	ed87 0a04 	vstr	s0, [r7, #16]
 800319c:	60f9      	str	r1, [r7, #12]
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
		: timer(timer), channel(channel), max_voltage(max_voltage) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
	AnalogOut::all_analog_outs.push_back(this);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x5c>)
 80031c8:	f000 f975 	bl	80034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>
	AnalogOut::pin_to_analog_out[pin] = this;
 80031cc:	697c      	ldr	r4, [r7, #20]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x60>)
 80031d4:	f000 f980 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80031d8:	4603      	mov	r3, r0
 80031da:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_OUTPUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2205      	movs	r2, #5
 80031e0:	719a      	strb	r2, [r3, #6]
}
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3724      	adds	r7, #36	; 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	240000d4 	.word	0x240000d4
 80031f0:	240000e0 	.word	0x240000e0

080031f4 <_ZN9AnalogOut11set_voltageEf>:

void AnalogOut::set_voltage(float current_voltage){
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	ed87 0a00 	vstr	s0, [r7]
	uint32_t arr = (uint32_t) (current_voltage / max_voltage * timer->Instance->ARR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a04 	vldr	s15, [r3, #16]
 8003206:	edd7 6a00 	vldr	s13, [r7]
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	60fb      	str	r3, [r7, #12]

	switch(channel){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b14      	cmp	r3, #20
 8003232:	d851      	bhi.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <_ZN9AnalogOut11set_voltageEf+0x48>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003291 	.word	0x08003291
 8003240:	080032d9 	.word	0x080032d9
 8003244:	080032d9 	.word	0x080032d9
 8003248:	080032d9 	.word	0x080032d9
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080032d9 	.word	0x080032d9
 8003254:	080032d9 	.word	0x080032d9
 8003258:	080032d9 	.word	0x080032d9
 800325c:	080032a9 	.word	0x080032a9
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032cd 	.word	0x080032cd
		case(TIM_CHANNEL_1):
				timer->Instance->CCR1 = arr; break;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
 800329a:	e01d      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_2):
				timer->Instance->CCR2 = arr; break;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	e017      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_3):
				timer->Instance->CCR3 = arr; break;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b2:	e011      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_4):
				timer->Instance->CCR4 = arr; break;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
 80032be:	e00b      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_5):
				timer->Instance->CCR5 = arr; break;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ca:	e005      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_6):
				timer->Instance->CCR6 = arr; break;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d6:	bf00      	nop
	}
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN9AnalogOut5startEv>:

void AnalogOut::start(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f01b fb12 	bl	801e920 <HAL_TIM_PWM_Start>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800331a:	b590      	push	{r4, r7, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffed 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800332a:	4603      	mov	r3, r0
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ffe8 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003334:	4603      	mov	r3, r0
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429c      	cmp	r4, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}

0800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
	return *this;
 800335c:	687b      	ldr	r3, [r7, #4]
      }
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN9AnalogOut21start_all_analog_outsEv>:

void AnalogOut::stop(){
	HAL_TIM_PWM_Stop(timer, channel);
}

void AnalogOut::start_all_analog_outs(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
	for(auto analog_out: all_analog_outs)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_ZN9AnalogOut21start_all_analog_outsEv+0x5c>)
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f900 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 8003394:	4603      	mov	r3, r0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f90b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	463a      	mov	r2, r7
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ffb6 	bl	800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <_ZN9AnalogOut21start_all_analog_outsEv+0x54>
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffd4 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
		analog_out->start();
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff ff8b 	bl	80032e4 <_ZN9AnalogOut5startEv>
	for(auto analog_out: all_analog_outs)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffba 	bl	800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>
 80033d6:	e7e4      	b.n	80033a2 <_ZN9AnalogOut21start_all_analog_outsEv+0x1e>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	240000d4 	.word	0x240000d4

080033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8f2 	bl	80035d6 <_ZNSaIP9AnalogOutEC1Ev>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8fa 	bl	80035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZNSaIP9AnalogOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003432:	461a      	mov	r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ee 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5a 	bl	80030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8f1 	bl	800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fbc3 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fc ff6e 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>:
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8fc 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8d8 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe4b 	bl	8003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f000 f8f2 	bl	80036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8f8 	bl	80036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91d 	bl	8003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80034ea:	4603      	mov	r3, r0
 80034ec:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f927 	bl	8003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f107 020c 	add.w	r2, r7, #12
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f92a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f938 	bl	8003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f93e 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003522:	4603      	mov	r3, r0
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4621      	mov	r1, r4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fcd4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003542:	687c      	ldr	r4, [r7, #4]
 8003544:	f107 0208 	add.w	r2, r7, #8
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f933 	bl	80037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fcd0 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003560:	f107 0218 	add.w	r2, r7, #24
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	4620      	mov	r0, r4
 8003572:	f000 f932 	bl	80037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8003576:	4603      	mov	r3, r0
 8003578:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f90d 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003584:	4603      	mov	r3, r0
 8003586:	3304      	adds	r3, #4
      }
 8003588:	4618      	mov	r0, r3
 800358a:	3724      	adds	r7, #36	; 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	080210a4 	.word	0x080210a4

08003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f956 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f945 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSaIP9AnalogOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f949 	bl	8003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
	{ }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	if (__p)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f92c 	bl	800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>
      }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f940 	bl	80038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f000 f93b 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fff0 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f000 f93f 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800367a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f946 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003688:	e7e9      	b.n	800365e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d011      	beq.n	80036fa <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036d6:	687c      	ldr	r4, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685d      	ldr	r5, [r3, #4]
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 f928 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4629      	mov	r1, r5
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f942 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e00c      	b.n	8003714 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff5a 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003700:	4604      	mov	r4, r0
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f000 f915 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4621      	mov	r1, r4
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f942 	bl	8003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9bb 	bl	8003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>
 800371a:	4603      	mov	r3, r0
      }
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}

08003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9c7 	bl	8003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9d1 	bl	8003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8003752:	4603      	mov	r3, r0
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f9c1 	bl	8003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8003794:	bf00      	nop
 8003796:	4620      	mov	r0, r4
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9be 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037da:	b5b0      	push	{r4, r5, r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80037ee:	4604      	mov	r4, r0
 80037f0:	6838      	ldr	r0, [r7, #0]
 80037f2:	f7fe f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80037f6:	4605      	mov	r5, r0
 80037f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fa:	f7fd fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037fe:	4603      	mov	r3, r0
 8003800:	462a      	mov	r2, r5
 8003802:	4621      	mov	r1, r4
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f99f 	bl	8003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800380a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f000 faed 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003812:	4603      	mov	r3, r0
 8003814:	f107 0010 	add.w	r0, r7, #16
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	f000 f9b7 	bl	8003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8003826:	6939      	ldr	r1, [r7, #16]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 faf0 	bl	8003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8003832:	4603      	mov	r3, r0
 8003834:	e00b      	b.n	800384e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f869 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb22 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 800384c:	69bb      	ldr	r3, [r7, #24]
      }
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}

08003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80038a4:	f7fc fd3c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f01d f84a 	bl	8020948 <_ZdlPv>
	    return;
 80038b4:	e005      	b.n	80038c2 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69f8      	ldr	r0, [r7, #28]
 80038bc:	f000 fd64 	bl	8004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fac6 	bl	8003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fad7 	bl	8003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f7ff ffed 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003958:	4603      	mov	r3, r0
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	2004      	movs	r0, #4
 8003962:	f7fc fce5 	bl	8000330 <_ZnwjPv>
 8003966:	4603      	mov	r3, r0
 8003968:	601c      	str	r4, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffd7 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003984:	4603      	mov	r3, r0
 8003986:	4619      	mov	r1, r3
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff ffdd 	bl	8003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faa7 	bl	8003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>
 80039ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fde9 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	f107 0214 	add.w	r2, r7, #20
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fada 	bl	8003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80039d6:	4603      	mov	r3, r0
 80039d8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fae8 	bl	8003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>
 80039e4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80039ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff9c 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4629      	mov	r1, r5
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ffb6 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc78 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a14:	4603      	mov	r3, r0
 8003a16:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf2 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	4621      	mov	r1, r4
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f000 fad8 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a2c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3304      	adds	r3, #4
 8003a32:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fc63 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fadd 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 fac3 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a56:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003a58:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003a64:	461a      	mov	r2, r3
 8003a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a68:	f7ff fdd5 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
    }
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08020ec0 	.word	0x08020ec0

08003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd8b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fac4 	bl	8004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fc57 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 8003abc:	4603      	mov	r3, r0
      }
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fdde 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fac5 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 facb 	bl	8004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9c2 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003b1e:	bf00      	nop
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr()
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fad4 	bl	80040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fad1 	bl	80040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8003b5c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7fd fb81 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b64:	4604      	mov	r4, r0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fe6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7fd fb8f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b74:	4603      	mov	r3, r0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	462b      	mov	r3, r5
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 face 	bl	8004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8003b84:	697b      	ldr	r3, [r7, #20]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}

08003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b08c      	sub	sp, #48	; 0x30
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faeb 	bl	800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ba8:	69bc      	ldr	r4, [r7, #24]
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fa5c 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8003bc0:	68b8      	ldr	r0, [r7, #8]
 8003bc2:	f000 faeb 	bl	800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8003bc6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bcc:	68bc      	ldr	r4, [r7, #8]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	f000 faf0 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 faf7 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bde:	4603      	mov	r3, r0
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8003bf8:	2300      	movs	r3, #0
	  if (size() > 0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 fad6 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fe f949 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003c16:	e0e5      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fae0 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003c24:	e0de      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003c26:	68bc      	ldr	r4, [r7, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681d      	ldr	r5, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 facc 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c34:	4603      	mov	r3, r0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f94c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d059      	beq.n	8003cfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003c4c:	69bc      	ldr	r4, [r7, #24]
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f000 fb52 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f000 fb46 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f000 fb42 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fe f9c0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003c80:	e0b0      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003c82:	68bc      	ldr	r4, [r7, #8]
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb41 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa9a 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7fd f919 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe15 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	f107 0214 	add.w	r2, r7, #20
 8003cce:	f107 0320 	add.w	r3, r7, #32
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fe f8e7 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003cda:	e083      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8003cdc:	f107 0218 	add.w	r2, r7, #24
 8003ce0:	f107 0318 	add.w	r3, r7, #24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe f98a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cec:	e07a      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa75 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003cfa:	e073      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003cfc:	68bc      	ldr	r4, [r7, #8]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa63 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d06:	4603      	mov	r3, r0
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd f8e2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d059      	beq.n	8003dd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003d20:	69bc      	ldr	r4, [r7, #24]
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 fa46 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f000 fa38 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe f8ab 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003d52:	e047      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003d54:	68bc      	ldr	r4, [r7, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fae7 	bl	8004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa2f 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4629      	mov	r1, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fd f8af 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fdab 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	f107 0218 	add.w	r2, r7, #24
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe f87d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003dae:	e019      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fe f920 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003dc0:	e010      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa0b 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003dce:	e009      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7fe f949 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}

08003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 faad 	bl	8004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fab4 	bl	8004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>
 8003e08:	4603      	mov	r3, r0
      }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e12:	b5b0      	push	{r4, r5, r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d119      	bne.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f91e 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d012      	beq.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e34:	68fc      	ldr	r4, [r7, #12]
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7ff ffd8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9c3 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e46:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd f843 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8003e5e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e60:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003e66:	7df8      	ldrb	r0, [r7, #23]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	f01c fddc 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f805 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003e86:	693b      	ldr	r3, [r7, #16]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003eae:	b590      	push	{r4, r7, lr}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa74 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f7ff fe33 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fa76 	bl	80043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa5f 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2201      	movs	r2, #1
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa70 	bl	80043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa82 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa8f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	1ae2      	subs	r2, r4, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf34      	ite	cc
 8003f20:	2301      	movcc	r3, #1
 8003f22:	2300      	movcs	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f01c fdda 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa7f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa7b 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	f107 0208 	add.w	r2, r7, #8
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc80 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8003f52:	4603      	mov	r3, r0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4423      	add	r3, r4
 8003f58:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa6a 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d306      	bcc.n	8003f76 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa52 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d904      	bls.n	8003f80 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa4b 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e000      	b.n	8003f82 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003f80:	697b      	ldr	r3, [r7, #20]
      }
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}

08003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff f9b5 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	681c      	ldr	r4, [r3, #0]
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f7ff f9b0 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1ae3      	subs	r3, r4, r3
 8003faa:	109b      	asrs	r3, r3, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd90      	pop	{r4, r7, pc}

08003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x1e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa43 	bl	8004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e000      	b.n	8003fd4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x20>
 8003fd2:	2300      	movs	r3, #0
      }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003fea:	f88d 4000 	strb.w	r4, [sp]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fa4d 	bl	8004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8003ffa:	4603      	mov	r3, r0
      }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}

08004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fa4f 	bl	80044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	425b      	negs	r3, r3
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	f107 020c 	add.w	r2, r7, #12
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fbfc 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004094:	68fc      	ldr	r4, [r7, #12]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7ff fea8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800409c:	4603      	mov	r3, r0
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc ff17 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f7ff fc1b 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80040c2:	60b8      	str	r0, [r7, #8]
 80040c4:	e7e3      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7ff fc0a 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80040cc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80040ce:	e7de      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff feda 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80040dc:	697b      	ldr	r3, [r7, #20]
    }
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}

080040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa02 	bl	80044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f94d 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800410c:	4603      	mov	r3, r0
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f9fc 	bl	800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>
 8004116:	4603      	mov	r3, r0
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	2018      	movs	r0, #24
 8004136:	f7fc f8fb 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f933 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8004140:	4604      	mov	r4, r0
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7ff fcf2 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8004148:	4605      	mov	r5, r0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f88b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004150:	4606      	mov	r6, r0
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f7fd fb75 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004158:	4680      	mov	r8, r0
 800415a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415c:	f7fd f899 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004160:	4603      	mov	r3, r0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4643      	mov	r3, r8
 8004166:	4632      	mov	r2, r6
 8004168:	4629      	mov	r1, r5
 800416a:	4620      	mov	r0, r4
 800416c:	f000 fa1c 	bl	80045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fe7f 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3310      	adds	r3, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe09 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f7ff fa4e 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f7ff ff34 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004214:	68bc      	ldr	r4, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fde5 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8004222:	4603      	mov	r3, r0
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f7fc fe55 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fb59 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004246:	4603      	mov	r3, r0
 8004248:	e004      	b.n	8004254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb47 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004252:	4603      	mov	r3, r0
 8004254:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004256:	e7d8      	b.n	800420a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe15 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 f9b6 	bl	80045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8004274:	4603      	mov	r3, r0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	f107 021c 	add.w	r2, r7, #28
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fa6a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800428e:	f107 0214 	add.w	r2, r7, #20
 8004292:	f107 0318 	add.w	r3, r7, #24
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9b2 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 800429e:	e027      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f833 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80042aa:	68bc      	ldr	r4, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff8c 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042b4:	4603      	mov	r3, r0
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fe0b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80042ca:	f107 0214 	add.w	r2, r7, #20
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f994 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 80042da:	e009      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	f107 0220 	add.w	r2, r7, #32
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7fd fec3 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}

080042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	330c      	adds	r3, #12
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f01c fb81 	bl	8020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
	return *this;
 8004328:	687b      	ldr	r3, [r7, #4]
      }
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f01c fb6e 	bl	8020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	return *this;
 800434a:	687b      	ldr	r3, [r7, #4]
      }
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr() const
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f967 	bl	8004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4619      	mov	r1, r3
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f01c fad6 	bl	802094c <_ZdlPvj>
      }
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f000 f940 	bl	800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>
	}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80043ec:	f7fb ff98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 80043f6:	69b8      	ldr	r0, [r7, #24]
 80043f8:	f01c faa6 	bl	8020948 <_ZdlPv>
	    return;
 80043fc:	e005      	b.n	800440a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69f8      	ldr	r0, [r7, #28]
 8004404:	f000 f9e1 	bl	80047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f945 	bl	80046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f927 	bl	8004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	109b      	asrs	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004466:	f7fb ff5b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f01c fa6b 	bl	8020950 <_Znwj>
 800447a:	4603      	mov	r3, r0
 800447c:	e006      	b.n	800448c <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9b3 	bl	80047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>
 8004488:	4603      	mov	r3, r0
 800448a:	bf00      	nop
      { return __a.allocate(__n); }
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f90a 	bl	80046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044ae:	4603      	mov	r3, r0
      }
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>:
    destroy_at(_Tp* __location)
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    }
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80044d6:	f7fb ff23 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f90a 	bl	80046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>
 80044e8:	e003      	b.n	80044f2 <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x26>
	__destroy(__first, __last);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91d 	bl	800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>
    }
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() noexcept
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004520:	f7fb fefe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f01c fa0b 	bl	8020950 <_Znwj>
 800453a:	4603      	mov	r3, r0
 800453c:	e006      	b.n	800454c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9b1 	bl	80048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>
 8004548:	4603      	mov	r3, r0
 800454a:	bf00      	nop
      { return __a.allocate(__n); }
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7fc fe7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fd f96a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800456e:	4602      	mov	r2, r0
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f9ff 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800457c:	f107 0418 	add.w	r4, r7, #24
 8004580:	6838      	ldr	r0, [r7, #0]
 8004582:	f7fc fe86 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4619      	mov	r1, r3
 800458a:	2008      	movs	r0, #8
 800458c:	f7fb fed0 	bl	8000330 <_ZnwjPv>
 8004590:	4605      	mov	r5, r0
 8004592:	7f3b      	ldrb	r3, [r7, #28]
 8004594:	4622      	mov	r2, r4
 8004596:	7d39      	ldrb	r1, [r7, #20]
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f8ec 	bl	8004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800459e:	462b      	mov	r3, r5
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}

080045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fe55 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80045bc:	4604      	mov	r4, r0
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fd f93f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80045c4:	4605      	mov	r5, r0
 80045c6:	6a38      	ldr	r0, [r7, #32]
 80045c8:	f7fc fe63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80045cc:	4603      	mov	r3, r0
 80045ce:	462a      	mov	r2, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7ff ffbe 	bl	8004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}

080045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc4c 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f000 f8c5 	bl	800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8004614:	4603      	mov	r3, r0
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe f8c6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004622:	4603      	mov	r3, r0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8b9 	bl	80047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>:
    destroy_at(_Tp* __location)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    }
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8004668:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004680:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8004684:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffea 	bl	8004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>
 800468c:	4603      	mov	r3, r0
 800468e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004690:	f107 0208 	add.w	r2, r7, #8
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fba3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80046a0:	4603      	mov	r3, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
      }
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80046c2:	b5b0      	push	{r4, r5, r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046d6:	4604      	mov	r4, r0
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f8a7 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046de:	4605      	mov	r5, r0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8a3 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4629      	mov	r1, r5
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f8a8 	bl	8004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80046f2:	4603      	mov	r3, r0
    }
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}

080046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d00a      	beq.n	8004724 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8b5 	bl	800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8bc 	bl	8004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>
	  for (; __first != __last; ++__first)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e7f0      	b.n	8004706 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0xa>
	}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f7fe fbf4 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004756:	4603      	mov	r3, r0
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fbe5 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800475e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
      { }
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	7239      	strb	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004784:	463a      	mov	r2, r7
 8004786:	f88d 4000 	strb.w	r4, [sp]
 800478a:	462b      	mov	r3, r5
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ffd7 	bl	8004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}

0800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4619      	mov	r1, r3
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f01c f8b2 	bl	802094c <_ZdlPvj>
      }
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f877 	bl	80048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4293      	cmp	r3, r2
 8004806:	bf8c      	ite	hi
 8004808:	2301      	movhi	r3, #1
 800480a:	2300      	movls	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004812:	f01c f964 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f01c f898 	bl	8020950 <_Znwj>
 8004820:	4603      	mov	r3, r0
 8004822:	bf00      	nop
      }
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>:
    __niter_base(_Iterator __it)
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	109b      	asrs	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd06      	ble.n	800486e <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f01c f9ab 	bl	8020bc4 <memmove>
      return __result + __count;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe0b 	bl	80044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>
    }
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f826 	bl	8004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf8c      	ite	hi
 80048c4:	2301      	movhi	r3, #1
 80048c6:	2300      	movls	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048ce:	f01c f906 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4618      	mov	r0, r3
 80048de:	f01c f837 	bl	8020950 <_Znwj>
 80048e2:	4603      	mov	r3, r0
 80048e4:	bf00      	nop
      }
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80048f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv+0x18>)
      }
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	05555555 	.word	0x05555555

08004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fdac 	bl	800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <_Z41__static_initialization_and_destruction_0ii>:
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10a      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004956:	4293      	cmp	r3, r2
 8004958:	d105      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800495c:	f7fe fbe4 	bl	8003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;
 8004960:	480b      	ldr	r0, [pc, #44]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004962:	f7fe fc07 	bl	8003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004972:	4293      	cmp	r3, r2
 8004974:	d105      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004976:	4806      	ldr	r0, [pc, #24]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004978:	f7ff ffd4 	bl	8004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800497e:	f000 f809 	bl	8004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	240000d4 	.word	0x240000d4
 8004990:	240000e0 	.word	0x240000e0

08004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb2c 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80049ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ae:	461a      	mov	r2, r3
 80049b0:	4629      	mov	r1, r5
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fb31 	bl	800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>
      }
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd2d 	bl	800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <_GLOBAL__sub_I__ZN9AnalogOut15all_analog_outsE>:
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7ff ffb4 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049d8:	bd80      	pop	{r7, pc}

080049da <_GLOBAL__sub_D__ZN9AnalogOut15all_analog_outsE>:
 80049da:	b580      	push	{r7, lr}
 80049dc:	af00      	add	r7, sp, #0
 80049de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff ffac 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80049ea:	b580      	push	{r7, lr}
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	f01c f899 	bl	8020b24 <abort>

080049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffed 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f7ff ffe8 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a22:	4603      	mov	r3, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429c      	cmp	r4, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}

08004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	return *this;
 8004a4a:	687b      	ldr	r3, [r7, #4]
      }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZN6Packet5parseEPh>:
            return;
        else
            build(rest...);
    }

    void parse(uint8_t* ptr){
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
        uint8_t* ptr_temp = ptr;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3308      	adds	r3, #8
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f000 fb34 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f000 fb3f 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	f107 020c 	add.w	r2, r7, #12
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ffb0 	bl	8004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <_ZN6Packet5parseEPh+0x80>
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ffcd 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
            field -> parse(ptr_temp);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	4798      	blx	r3
            ptr_temp += field->get_size();
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	4798      	blx	r3
 8004adc:	4602      	mov	r2, r0
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffa5 	bl	8004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>
 8004aee:	e7d3      	b.n	8004a98 <_ZN6Packet5parseEPh+0x28>
        }
    }
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN6Packet14process_packetEtPh>:
            field -> unparse(ptr_temp);
            ptr_temp += field->get_size();
        }
    }

    static void process_packet(uint16_t id, uint8_t* data) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	80fb      	strh	r3, [r7, #6]
        for(auto& entry : all_packets){
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <_ZN6Packet14process_packetEtPh+0x8c>)
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 fb13 	bl	8005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 fb1b 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb1e 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f083 0301 	eor.w	r3, r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <_ZN6Packet14process_packetEtPh+0x82>
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fb38 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8004b42:	6138      	str	r0, [r7, #16]
        	if(entry.second -> id == id){
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	889b      	ldrh	r3, [r3, #4]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
                entry.second->parse(data);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff8a 	bl	8004a70 <_ZN6Packet5parseEPh>
                if(entry.second->callback != nullptr)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
					entry.second->callback();
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	4798      	blx	r3
        for(auto& entry : all_packets){
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb0c 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8004b78:	e7d0      	b.n	8004b1c <_ZN6Packet14process_packetEtPh+0x24>
        	}
        }
    }
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	240001d4 	.word	0x240001d4

08004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>:
#include "Mini-STLIB/Can.hpp"

Can::Can(FDCAN_HandleTypeDef* hdcan) : hdcan(hdcan) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	Can::all_cans.push_back(this);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <_ZN3CanC1EP19FDCAN_HandleTypeDef+0x2c>)
 8004ba4:	f000 fb13 	bl	80051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>
}
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	240000f8 	.word	0x240000f8

08004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffed 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004bde:	4603      	mov	r3, r0
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f7ff ffe8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}

08004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	return *this;
 8004c10:	687b      	ldr	r3, [r7, #4]
      }
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <_ZN3Can14start_all_cansEv>:

void Can::start_all_cans() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
	for(auto can : Can::all_cans)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <_ZN3Can14start_all_cansEv+0x5c>)
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fad4 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fadf 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004c52:	4603      	mov	r3, r0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	463a      	mov	r2, r7
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ffb6 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <_ZN3Can14start_all_cansEv+0x54>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffd4 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
		can->start();
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f80b 	bl	8004c98 <_ZN3Can5startEv>
	for(auto can : Can::all_cans)
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ffba 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8004c8a:	e7e4      	b.n	8004c56 <_ZN3Can14start_all_cansEv+0x1e>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	240000f8 	.word	0x240000f8

08004c98 <_ZN3Can5startEv>:

void Can::start(){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	HAL_FDCAN_Start(hdcan);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f014 ff6f 	bl	8019b88 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(hdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f015 f95c 	bl	8019f70 <HAL_FDCAN_ActivateNotification>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN3Can12send_messageEtPhm>:

void Can::send_message(uint16_t id, uint8_t* data, uint32_t size) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f939 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 faa5 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03c      	beq.n	8004d68 <_ZN3Can12send_messageEtPhm+0xa8>
		TxHeader.Identifier = id;
 8004cee:	897a      	ldrh	r2, [r7, #10]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fab2 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d0c:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1a:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i = 0; i < size; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90d      	bls.n	8004d56 <_ZN3Can12send_messageEtPhm+0x96>
			TxData[i] = data[i];
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	3350      	adds	r3, #80	; 0x50
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e7ed      	b.n	8004d32 <_ZN3Can12send_messageEtPhm+0x72>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3350      	adds	r3, #80	; 0x50
 8004d62:	461a      	mov	r2, r3
 8004d64:	f014 ff3b 	bl	8019bde <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN3Can12send_messageEtm>:

void Can::send_message(uint16_t id, uint32_t size) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f8e2 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa4e 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <_ZN3Can12send_messageEtm+0x7e>
		TxHeader.Identifier = id;
 8004d9c:	897a      	ldrh	r2, [r7, #10]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa5b 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dba:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc8:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1d19      	adds	r1, r3, #4
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	461a      	mov	r2, r3
 8004dea:	f014 fef8 	bl	8019bde <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3Can18send_error_messageEtPKc>:

void Can::send_error_message(uint16_t id, const char* str){
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	817b      	strh	r3, [r7, #10]
	size_t message_size = strlen(str);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fa83 	bl	8000310 <strlen>
 8004e0a:	6238      	str	r0, [r7, #32]
	optional<uint32_t> dlc = get_dlc_from_size(message_size);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f89b 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa07 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04d      	beq.n	8004ec6 <_ZN3Can18send_error_messageEtPKc+0xd0>
		size_t str_size = strlen(str);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fa70 	bl	8000310 <strlen>
 8004e30:	61f8      	str	r0, [r7, #28]
		TxHeader.Identifier = id;
 8004e32:	897a      	ldrh	r2, [r7, #10]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa10 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e50:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e5e:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
		TxData[0] = ERROR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		memset(TxData + 1, ' ', MAX_MESSAGE_SIZE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3350      	adds	r3, #80	; 0x50
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	2120      	movs	r1, #32
 8004e84:	4618      	mov	r0, r3
 8004e86:	f01b feb7 	bl	8020bf8 <memset>
		for(int i = 1; i <= str_size; i++)
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d30e      	bcc.n	8004eb4 <_ZN3Can18send_error_messageEtPKc+0xbe>
			TxData[i] = (uint8_t) str[i-1];
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3350      	adds	r3, #80	; 0x50
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i <= str_size; i++)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	e7ec      	b.n	8004e8e <_ZN3Can18send_error_messageEtPKc+0x98>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3350      	adds	r3, #80	; 0x50
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f014 fe8c 	bl	8019bde <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ffed 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	681c      	ldr	r4, [r3, #0]
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f7ff ffe8 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004efe:	4603      	mov	r3, r0
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429c      	cmp	r4, r3
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd90      	pop	{r4, r7, pc}

08004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f103 0208 	add.w	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
	return *this;
 8004f28:	687b      	ldr	r3, [r7, #4]
      }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <_ZN3Can17get_dlc_from_sizeEm>:
		packet->unparse(TxData);
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
	}
}

optional<uint32_t> Can::get_dlc_from_size(uint32_t size){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	for(const auto DLC : Can::DLCS){
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <_ZN3Can17get_dlc_from_sizeEm+0x88>)
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f62:	f000 f993 	bl	800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>
 8004f66:	4603      	mov	r3, r0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6c:	f000 f99e 	bl	80052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f107 0214 	add.w	r2, r7, #20
 8004f78:	f107 0318 	add.w	r3, r7, #24
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff ffb0 	bl	8004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01d      	beq.n	8004fcc <_ZN3Can17get_dlc_from_sizeEm+0x7c>
 8004f90:	f107 0318 	add.w	r3, r7, #24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ffce 	bl	8004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	f107 031c 	add.w	r3, r7, #28
 8004fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fa4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(DLC.size >= size)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d807      	bhi.n	8004fc0 <_ZN3Can17get_dlc_from_sizeEm+0x70>
			return DLC.code;
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f988 	bl	80052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>
 8004fbe:	e006      	b.n	8004fce <_ZN3Can17get_dlc_from_sizeEm+0x7e>
	for(const auto DLC : Can::DLCS){
 8004fc0:	f107 0318 	add.w	r3, r7, #24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffa5 	bl	8004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>
 8004fca:	e7d3      	b.n	8004f74 <_ZN3Can17get_dlc_from_sizeEm+0x24>
	}
}
 8004fcc:	bf00      	nop
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	24000104 	.word	0x24000104

08004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>:

void Can::message_received_all_cans(FDCAN_HandleTypeDef* hfdcan,uint32_t RxFifo0ITs){
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	for(auto can : Can::all_cans)
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x74>)
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f000 f900 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	6978      	ldr	r0, [r7, #20]
 8004ff6:	f000 f90b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	f107 0208 	add.w	r2, r7, #8
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fde0 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800500e:	4603      	mov	r3, r0
 8005010:	f083 0301 	eor.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x6c>
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fdfd 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005024:	4603      	mov	r3, r0
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]
		if(can->hdcan == hfdcan)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d103      	bne.n	800503c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x60>
			can->message_received(RxFifo0ITs);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f000 f80c 	bl	8005054 <_ZN3Can16message_receivedEm>
	for(auto can : Can::all_cans)
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fddc 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8005046:	e7da      	b.n	8004ffe <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x22>
}
 8005048:	bf00      	nop
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	240000f8 	.word	0x240000f8

08005054 <_ZN3Can16message_receivedEm>:

void Can::message_received(uint32_t RxFifo0ITs) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01a      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
		if(HAL_FDCAN_GetRxMessage(hdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3390      	adds	r3, #144	; 0x90
 8005076:	2140      	movs	r1, #64	; 0x40
 8005078:	f014 fe0c 	bl	8019c94 <HAL_FDCAN_GetRxMessage>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf0c      	ite	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	2300      	movne	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
			Packet::process_packet(RxHeader.Identifier, RxData);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3390      	adds	r3, #144	; 0x90
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7ff fd2d 	bl	8004af8 <_ZN6Packet14process_packetEtPh>
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f931 	bl	8005316 <_ZNSaIP3CanED1Ev>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f914 	bl	80052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>:
      vector() = default;
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ffeb 	bl	80050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f107 030c 	add.w	r3, r7, #12
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f97e 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f96d 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f970 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8005144:	4603      	mov	r3, r0
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f974 	bl	8005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800515e:	4603      	mov	r3, r0
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f01b fc3f 	bl	8020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	return *this;
 80051a8:	687b      	ldr	r3, [r7, #4]
      }
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f952 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f000 f953 	bl	8005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>
 80051de:	4603      	mov	r3, r0
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f959 	bl	800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f97c 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	f107 030c 	add.w	r3, r7, #12
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f96b 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <_ZNKSt8optionalImEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f805 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005240:	4603      	mov	r3, r0
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <_ZNRSt8optionalImE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ffed 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005270:	4603      	mov	r3, r0
	  ? this->_M_get()
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <_ZNRSt8optionalImE5valueEv+0x1e>
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f951 	bl	800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>
 800527c:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800527e:	e001      	b.n	8005284 <_ZNRSt8optionalImE5valueEv+0x22>
 8005280:	f7ff fbb3 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f94b 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	1d1a      	adds	r2, r3, #4
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f93a 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>:
	optional(_Up&& __t)
 80052ce:	b5b0      	push	{r4, r5, r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 80052d8:	687c      	ldr	r4, [r7, #4]
 80052da:	6838      	ldr	r0, [r7, #0]
 80052dc:	f000 f93c 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	4629      	mov	r1, r5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 f952 	bl	8005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}

080052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f95b 	bl	80055ba <_ZNSaIP3CanEC1Ev>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f963 	bl	80055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_ZNSaIP3CanED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005344:	461a      	mov	r2, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f957 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      }
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fea9 	bl	80050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZNSaI3DLCEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f95a 	bl	8005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZNSaI3DLCED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	1d38      	adds	r0, r7, #4
 8005396:	e880 0006 	stmia.w	r0, {r1, r2}
 800539a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f954 	bl	800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 80053a6:	1d3b      	adds	r3, r7, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f978 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80053ae:	4604      	mov	r4, r0
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f97f 	bl	80056b6 <_ZNKSt16initializer_listI3DLCE3endEv>
 80053b8:	4602      	mov	r2, r0
 80053ba:	462b      	mov	r3, r5
 80053bc:	4621      	mov	r1, r4
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f99f 	bl	8005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bdb0      	pop	{r4, r5, r7, pc}

080053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80053ce:	b5b0      	push	{r4, r5, r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f9c7 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 80053e6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053e8:	461a      	mov	r2, r3
 80053ea:	4629      	mov	r1, r5
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f9cc 	bl	800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>
      }
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f939 	bl	800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bdb0      	pop	{r4, r5, r7, pc}

08005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	f107 030c 	add.w	r3, r7, #12
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f9b5 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f9a4 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr()
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f9a5 	bl	80057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 800547a:	4603      	mov	r3, r0
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800549a:	b5b0      	push	{r4, r5, r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d011      	beq.n	80054d4 <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80054b0:	687c      	ldr	r4, [r7, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685d      	ldr	r5, [r3, #4]
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f000 f990 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054bc:	4603      	mov	r3, r0
 80054be:	461a      	mov	r2, r3
 80054c0:	4629      	mov	r1, r5
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 f9aa 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e00c      	b.n	80054ee <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fe9b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 80054da:	4604      	mov	r4, r0
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f000 f97d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	4621      	mov	r1, r4
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9a9 	bl	8005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa22 	bl	8005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>
 80054f4:	4603      	mov	r3, r0
      }
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}

080054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa20 	bl	800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>
 800552e:	4603      	mov	r3, r0
      }
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800556e:	b590      	push	{r4, r7, lr}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	7239      	strb	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4621      	mov	r1, r4
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa11 	bl	80059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}

08005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	7239      	strb	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800559c:	68fc      	ldr	r4, [r7, #12]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffda 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	4629      	mov	r1, r5
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff ffdf 	bl	800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdb0      	pop	{r4, r5, r7, pc}

080055ba <_ZNSaIP3CanEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa08 	bl	80059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
	{ }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
	if (__p)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f9eb 	bl	80059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>
      }
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fe99 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f9e5 	bl	8005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8005684:	461a      	mov	r2, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9e2 	bl	8005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>
      }
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ffd1 	bl	8005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZNKSt16initializer_listI3DLCE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <_ZNKSt16initializer_listI3DLCE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ffed 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80056c4:	4604      	mov	r4, r0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9d5 	bl	8005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>
 80056cc:	4603      	mov	r3, r0
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4423      	add	r3, r4
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd90      	pop	{r4, r7, pc}

080056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80056da:	b5b0      	push	{r4, r5, r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80056e4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f9d0 	bl	8005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80056ee:	462a      	mov	r2, r5
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f9d5 	bl	8005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80056f8:	4603      	mov	r3, r0
    }
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdb0      	pop	{r4, r5, r7, pc}

08005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005702:	b590      	push	{r4, r7, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	68b8      	ldr	r0, [r7, #8]
 8005714:	f7ff ffe1 	bl	80056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8005718:	4603      	mov	r3, r0
 800571a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800571c:	68fc      	ldr	r4, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f827 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f000 f9ca 	bl	8005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>
 8005730:	4603      	mov	r3, r0
 8005732:	4619      	mov	r1, r3
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f9ed 	bl	8005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f80d 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 800575a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800575c:	4622      	mov	r2, r4
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f000 f9eb 	bl	8005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8005766:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f9e0 	bl	8005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>
    }
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() noexcept
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f9dc 	bl	8005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80057f2:	b590      	push	{r4, r7, lr}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80057fc:	6838      	ldr	r0, [r7, #0]
 80057fe:	f7ff ffed 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005802:	4603      	mov	r3, r0
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4619      	mov	r1, r3
 800580a:	2004      	movs	r0, #4
 800580c:	f7fa fd90 	bl	8000330 <_ZnwjPv>
 8005810:	4603      	mov	r3, r0
 8005812:	601c      	str	r4, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ffd7 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 800582e:	4603      	mov	r3, r0
 8005830:	4619      	mov	r1, r3
 8005832:	68b8      	ldr	r0, [r7, #8]
 8005834:	f7ff ffdd 	bl	80057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800584c:	4a39      	ldr	r2, [pc, #228]	; (8005934 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800584e:	2101      	movs	r1, #1
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9a5 	bl	8005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>
 8005856:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fcc3 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 800586a:	4603      	mov	r3, r0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	f107 0214 	add.w	r2, r7, #20
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f9d8 	bl	8005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800587e:	4603      	mov	r3, r0
 8005880:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f9e6 	bl	8005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>
 800588c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8005892:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	18d5      	adds	r5, r2, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff9d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	4629      	mov	r1, r5
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ffb7 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f97e 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058bc:	4603      	mov	r3, r0
 80058be:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f9f0 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058c8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	4621      	mov	r1, r4
 80058ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d0:	f000 f9d6 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058d4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3304      	adds	r3, #4
 80058da:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff f969 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058e6:	4603      	mov	r3, r0
 80058e8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f9db 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f9c1 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058fe:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8005900:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800590c:	461a      	mov	r2, r3
 800590e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005910:	f7ff fe73 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	441a      	add	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
    }
 800592c:	bf00      	nop
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}
 8005934:	08020edc 	.word	0x08020edc

08005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fc65 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f9c2 	bl	8005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>
 8005956:	4603      	mov	r3, r0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f95d 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005964:	4603      	mov	r3, r0
      }
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>:
      _M_get() noexcept
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	7239      	strb	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fde1 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8005996:	4603      	mov	r3, r0
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]
	    { }
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	7239      	strb	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80059b4:	68fc      	ldr	r4, [r7, #12]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fdce 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	4629      	mov	r1, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff ffde 	bl	8005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	711a      	strb	r2, [r3, #4]
	{ }
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}

080059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>:
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005a06:	f7fa fc8b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8005a10:	69b8      	ldr	r0, [r7, #24]
 8005a12:	f01a ff99 	bl	8020948 <_ZdlPv>
	    return;
 8005a16:	e005      	b.n	8005a24 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	69f8      	ldr	r0, [r7, #28]
 8005a1e:	f000 faa4 	bl	8005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f967 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f971 	bl	8005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f971 	bl	8005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>
      }
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>:
      size() const noexcept { return _M_len; }
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	10db      	asrs	r3, r3, #3
    }
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f919 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f961 	bl	8005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	bf8c      	ite	hi
 8005aec:	2301      	movhi	r3, #1
 8005aee:	2300      	movls	r3, #0
 8005af0:	b2dc      	uxtb	r4, r3
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fc3d 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d002      	beq.n	8005b06 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8005b00:	4803      	ldr	r0, [pc, #12]	; (8005b10 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8005b02:	f01a ffef 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	return __n;
 8005b06:	687b      	ldr	r3, [r7, #4]
      }
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd90      	pop	{r4, r7, pc}
 8005b10:	08020ef8 	.word	0x08020ef8

08005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x1e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f956 	bl	8005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	e000      	b.n	8005b34 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x20>
 8005b32:	2300      	movs	r3, #0
      }
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f963 	bl	8005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005b68:	f7fa fbda 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <_ZSt8_DestroyIP3DLCEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f962 	bl	8005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>
 8005b7a:	e003      	b.n	8005b84 <_ZSt8_DestroyIP3DLCEvT_S2_+0x26>
	__destroy(__first, __last);
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f975 	bl	8005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>
    }
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() noexcept
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f969 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f976 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	1ae2      	subs	r2, r4, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bf34      	ite	cc
 8005bc4:	2301      	movcc	r3, #1
 8005bc6:	2300      	movcs	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f01a ff88 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f966 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f962 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005be2:	4603      	mov	r3, r0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	f107 0208 	add.w	r2, r7, #8
 8005bea:	f107 0310 	add.w	r3, r7, #16
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fc fe2e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4423      	add	r3, r4
 8005bfc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f951 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c04:	4602      	mov	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d306      	bcc.n	8005c1a <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f939 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d904      	bls.n	8005c24 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x84>
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f932 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c20:	4603      	mov	r3, r0
 8005c22:	e000      	b.n	8005c26 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x86>
 8005c24:	697b      	ldr	r3, [r7, #20]
      }
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}

08005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005c2e:	b590      	push	{r4, r7, lr}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe ffbd 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	681c      	ldr	r4, [r3, #0]
 8005c42:	6838      	ldr	r0, [r7, #0]
 8005c44:	f7fe ffb8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1ae3      	subs	r3, r4, r3
 8005c4e:	109b      	asrs	r3, r3, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd90      	pop	{r4, r7, pc}

08005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x1e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f92a 	bl	8005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>
 8005c72:	4603      	mov	r3, r0
 8005c74:	e000      	b.n	8005c78 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x20>
 8005c76:	2300      	movs	r3, #0
      }
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005c8e:	f88d 4000 	strb.w	r4, [sp]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f934 	bl	8005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005c9e:	4603      	mov	r3, r0
      }
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f936 	bl	8005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>
    }
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	425b      	negs	r3, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	f107 020c 	add.w	r2, r7, #12
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fbfe 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZNSaI3DLCEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f935 	bl	8005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
	{ }
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005d68:	f7fa fada 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f01a fde8 	bl	8020948 <_ZdlPv>
	    return;
 8005d78:	e005      	b.n	8005d86 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	69f8      	ldr	r0, [r7, #28]
 8005d80:	f000 f9a5 	bl	80060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005d96:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005dae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005db2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ffea 	bl	8005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005dbe:	f107 0208 	add.w	r2, r7, #8
 8005dc2:	f107 030c 	add.w	r3, r7, #12
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd f80c 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	681b      	ldr	r3, [r3, #0]
      }
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005dec:	f7fa fa98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f01a fda8 	bl	8020950 <_Znwj>
 8005e00:	4603      	mov	r3, r0
 8005e02:	e006      	b.n	8005e12 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005e04:	2200      	movs	r2, #0
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f96f 	bl	80060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	bf00      	nop
      { return __a.allocate(__n); }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f8b6 	bl	8005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>
 8005e34:	4603      	mov	r3, r0
    }
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00a      	beq.n	8005e66 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8b5 	bl	8005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f8bc 	bl	8005fd6 <_ZSt8_DestroyI3DLCEvPT_>
	  for (; __first != __last; ++__first)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3308      	adds	r3, #8
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e7f0      	b.n	8005e48 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0xa>
	}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f8d2 	bl	8006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f8b4 	bl	8006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	109b      	asrs	r3, r3, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005ed8:	f7fa fa22 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f01a fd32 	bl	8020950 <_Znwj>
 8005eec:	4603      	mov	r3, r0
 8005eee:	e006      	b.n	8005efe <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f93a 	bl	800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>
 8005efa:	4603      	mov	r3, r0
 8005efc:	bf00      	nop
      { return __a.allocate(__n); }
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f897 	bl	800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005f20:	4603      	mov	r3, r0
      }
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZSt10destroy_atIP3CanEvPT_>:
    destroy_at(_Tp* __location)
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
    }
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005f48:	f7fa f9ea 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <_ZSt8_DestroyIPP3CanEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f897 	bl	8006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>
 8005f5a:	e003      	b.n	8005f64 <_ZSt8_DestroyIPP3CanEvT_S3_+0x26>
	__destroy(__first, __last);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8aa 	bl	80060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>
    }
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68b8      	ldr	r0, [r7, #8]
 8005f7e:	f01a fce5 	bl	802094c <_ZdlPvj>
      }
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8ba 	bl	800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <_ZSt8_DestroyI3DLCEvPT_>:
    _Destroy(_Tp* __pointer)
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8bb 	bl	800615a <_ZSt10destroy_atI3DLCEvPT_>
    }
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005ff4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800600c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006010:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffea 	bl	8005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>
 8006018:	4603      	mov	r3, r0
 800601a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800601c:	f107 0208 	add.w	r2, r7, #8
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7fc fedd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800602c:	4603      	mov	r3, r0
 800602e:	681b      	ldr	r3, [r3, #0]
      }
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800604e:	b5b0      	push	{r4, r5, r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f8a5 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006062:	4604      	mov	r4, r0
 8006064:	68b8      	ldr	r0, [r7, #8]
 8006066:	f000 f8a1 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 800606a:	4605      	mov	r5, r0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f89d 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006072:	4602      	mov	r2, r0
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4629      	mov	r1, r5
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f8a2 	bl	80061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800607e:	4603      	mov	r3, r0
    }
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bdb0      	pop	{r4, r5, r7, pc}

08006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d00a      	beq.n	80060b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8af 	bl	80061fe <_ZSt11__addressofIP3CanEPT_RS2_>
 80060a0:	4603      	mov	r3, r0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f8b6 	bl	8006214 <_ZSt8_DestroyIP3CanEvPT_>
	  for (; __first != __last; ++__first)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e7f0      	b.n	8006092 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0xa>
	}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4619      	mov	r1, r3
 80060e0:	68b8      	ldr	r0, [r7, #8]
 80060e2:	f01a fc33 	bl	802094c <_ZdlPvj>
      }
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f896 	bl	800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>
 80060fe:	4602      	mov	r2, r0
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4293      	cmp	r3, r2
 8006104:	bf8c      	ite	hi
 8006106:	2301      	movhi	r3, #1
 8006108:	2300      	movls	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006110:	f01a fce5 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4618      	mov	r0, r3
 800611a:	f01a fc19 	bl	8020950 <_Znwj>
 800611e:	4603      	mov	r3, r0
 8006120:	bf00      	nop
      }
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800612a:	b590      	push	{r4, r7, lr}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f883 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 800613c:	4604      	mov	r4, r0
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f000 f87f 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 8006144:	4603      	mov	r3, r0
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4619      	mov	r1, r3
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f884 	bl	8006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006150:	4603      	mov	r3, r0
    }
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}

0800615a <_ZSt10destroy_atI3DLCEvPT_>:
    destroy_at(_Tp* __location)
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
    }
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f88f 	bl	800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4293      	cmp	r3, r2
 8006186:	bf8c      	ite	hi
 8006188:	2301      	movhi	r3, #1
 800618a:	2300      	movls	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006192:	f01a fca4 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f01a fbd8 	bl	8020950 <_Znwj>
 80061a0:	4603      	mov	r3, r0
 80061a2:	bf00      	nop
      }
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <_ZSt12__niter_baseIPP3CanET_S3_>:
    __niter_base(_Iterator __it)
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	109b      	asrs	r3, r3, #2
 80061d8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd06      	ble.n	80061ee <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	461a      	mov	r2, r3
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f01a fceb 	bl	8020bc4 <memmove>
      return __result + __count;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
    }
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <_ZSt11__addressofIP3CanEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZSt8_DestroyIP3CanEvPT_>:
    _Destroy(_Tp* __pointer)
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fe84 	bl	8005f2a <_ZSt10destroy_atIP3CanEvPT_>
    }
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006232:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <_ZSt12__miter_baseIPK3DLCET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
    { return __it; }
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f826 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 800626a:	4604      	mov	r4, r0
 800626c:	68b8      	ldr	r0, [r7, #8]
 800626e:	f000 f822 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 8006272:	4605      	mov	r5, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f828 	bl	80062cc <_ZSt12__niter_baseIP3DLCET_S2_>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f82d 	bl	80062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006288:	4602      	mov	r2, r0
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f837 	bl	8006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>
 8006294:	4603      	mov	r3, r0
    }
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bdb0      	pop	{r4, r5, r7, pc}

0800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062a6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>:
    __niter_base(_Iterator __it)
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <_ZSt12__niter_baseIP3DLCET_S2_>:
    __niter_base(_Iterator __it)
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f811 	bl	800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 80062f8:	4603      	mov	r3, r0
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8006326:	f7f9 fffb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x24>
	  __copy_m(__first, __last, __result);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f80d 	bl	8006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>
 800633a:	4603      	mov	r3, r0
 800633c:	e006      	b.n	800634c <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f82b 	bl	800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>
 8006348:	4603      	mov	r3, r0
 800634a:	bf00      	nop
    }
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	10db      	asrs	r3, r3, #3
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	dd0f      	ble.n	8006390 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x3c>
	      *__result = *__first;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006378:	e883 0003 	stmia.w	r3, {r0, r1}
	      ++__first;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3308      	adds	r3, #8
 8006380:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3308      	adds	r3, #8
 8006386:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3b01      	subs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e7ec      	b.n	800636a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x16>
	  return __result;
 8006390:	687b      	ldr	r3, [r7, #4]
	}
 8006392:	4618      	mov	r0, r3
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	10db      	asrs	r3, r3, #3
 80063b2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	461a      	mov	r2, r3
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f01a fbfe 	bl	8020bc4 <memmove>
	  return __result + _Num;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4413      	add	r3, r2
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_Z41__static_initialization_and_destruction_0ii>:
		{20, FDCAN_DLC_BYTES_20},
		{24, FDCAN_DLC_BYTES_24},
		{32, FDCAN_DLC_BYTES_32},
		{48, FDCAN_DLC_BYTES_48},
		{64, FDCAN_DLC_BYTES_64}
};
 80063d8:	b580      	push	{r7, lr}
 80063da:	b0a6      	sub	sp, #152	; 0x98
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d126      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d121      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
vector<Can*> Can::all_cans;
 80063f2:	481a      	ldr	r0, [pc, #104]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80063f4:	f7fe fe70 	bl	80050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>
const vector<DLC> Can::DLCS = {
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80063fa:	f107 0314 	add.w	r3, r7, #20
 80063fe:	4611      	mov	r1, r2
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	4618      	mov	r0, r3
 8006404:	f01a fbd0 	bl	8020ba8 <memcpy>
 8006408:	f107 0314 	add.w	r3, r7, #20
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	2310      	movs	r3, #16
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe ffa1 	bl	800535e <_ZNSaI3DLCEC1Ev>
 800641c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006420:	f107 020c 	add.w	r2, r7, #12
 8006424:	ca06      	ldmia	r2, {r1, r2}
 8006426:	480f      	ldr	r0, [pc, #60]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006428:	f7fe ffb0 	bl	800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 800642c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe ffa0 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006442:	4293      	cmp	r3, r2
 8006444:	d105      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006446:	4807      	ldr	r0, [pc, #28]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006448:	f7fe ffc1 	bl	80053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>
vector<Can*> Can::all_cans;
 800644c:	4803      	ldr	r0, [pc, #12]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800644e:	f000 f80b 	bl	8006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>
};
 8006452:	bf00      	nop
 8006454:	3798      	adds	r7, #152	; 0x98
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	240000f8 	.word	0x240000f8
 8006460:	08020f2c 	.word	0x08020f2c
 8006464:	24000104 	.word	0x24000104

08006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681c      	ldr	r4, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fc14 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8006480:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006482:	461a      	mov	r2, r3
 8006484:	4629      	mov	r1, r5
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff fc19 	bl	8005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>
      }
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe ff4c 	bl	800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bdb0      	pop	{r4, r5, r7, pc}

0800649e <_GLOBAL__sub_I__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 800649e:	b580      	push	{r7, lr}
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7ff ff96 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_GLOBAL__sub_D__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064ae:	b580      	push	{r7, lr}
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064b6:	2000      	movs	r0, #0
 80064b8:	f7ff ff8e 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f89e 	bl	8006608 <_ZNSaIP9DigitalInED1Ev>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f881 	bl	80065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>:
      vector() = default;
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff ffeb 	bl	80064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8b1 	bl	800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f88f 	bl	8006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ffeb 	bl	8006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <_ZN9DigitalInC1EP3Pin>:
#include <Mini-STLIB/DigitalIn.hpp>

vector<DigitalIn*> DigitalIn::all_digital_ins;
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;

DigitalIn::DigitalIn(Pin* pin) : pin(pin) {
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	721a      	strb	r2, [r3, #8]
	DigitalIn::all_digital_ins.push_back(this);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4619      	mov	r1, r3
 8006578:	4809      	ldr	r0, [pc, #36]	; (80065a0 <_ZN9DigitalInC1EP3Pin+0x48>)
 800657a:	f000 f89e 	bl	80066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>
	DigitalIn::pin_to_digital_in[pin] = this;
 800657e:	687c      	ldr	r4, [r7, #4]
 8006580:	463b      	mov	r3, r7
 8006582:	4619      	mov	r1, r3
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <_ZN9DigitalInC1EP3Pin+0x4c>)
 8006586:	f000 f8a9 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800658a:	4603      	mov	r3, r0
 800658c:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_INPUT;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	719a      	strb	r2, [r3, #6]
}
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	24000110 	.word	0x24000110
 80065a4:	2400011c 	.word	0x2400011c

080065a8 <_ZN9DigitalIn9get_valueEv>:

DigitalIn::DigitalInState DigitalIn::get_value(){
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	GPIO_PinState hal_state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	889b      	ldrh	r3, [r3, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f014 fc06 	bl	801add0 <HAL_GPIO_ReadPin>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
	if(hal_state == GPIO_PIN_SET)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d103      	bne.n	80065d6 <_ZN9DigitalIn9get_valueEv+0x2e>
		state = DigitalIn::HIGH;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	721a      	strb	r2, [r3, #8]
 80065d4:	e002      	b.n	80065dc <_ZN9DigitalIn9get_valueEv+0x34>
	else
		state = DigitalIn::LOW;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	721a      	strb	r2, [r3, #8]
	return state;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7a1b      	ldrb	r3, [r3, #8]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8d1 	bl	8006798 <_ZNSaIP9DigitalInEC1Ev>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f8d9 	bl	80067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZNSaIP9DigitalInED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8006636:	461a      	mov	r2, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8cd 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff3c 	bl	80064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8d0 	bl	80067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4618      	mov	r0, r3
 8006662:	f7fa fac1 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 fe6c 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>:
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8db 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800669e:	4603      	mov	r3, r0
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8b7 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff2d 	bl	800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f000 f8d1 	bl	800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8d7 	bl	8006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b08b      	sub	sp, #44	; 0x2c
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f8fc 	bl	80068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80066ee:	4603      	mov	r3, r0
 80066f0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f906 	bl	8006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80066f8:	4603      	mov	r3, r0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	f107 020c 	add.w	r2, r7, #12
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f909 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d114      	bne.n	800673c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f917 	bl	8006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681c      	ldr	r4, [r3, #0]
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f91d 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006726:	4603      	mov	r3, r0
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	4621      	mov	r1, r4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fa fbd2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01b      	beq.n	800677e <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006746:	687c      	ldr	r4, [r7, #4]
 8006748:	f107 0208 	add.w	r2, r7, #8
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f912 	bl	800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8006758:	f107 0318 	add.w	r3, r7, #24
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fa fbce 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006764:	f107 0218 	add.w	r2, r7, #24
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	4a08      	ldr	r2, [pc, #32]	; (8006794 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	4620      	mov	r0, r4
 8006776:	f000 f911 	bl	800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 800677a:	4603      	mov	r3, r0
 800677c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f8ec 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006788:	4603      	mov	r3, r0
 800678a:	3304      	adds	r3, #4
      }
 800678c:	4618      	mov	r0, r3
 800678e:	3724      	adds	r7, #36	; 0x24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd90      	pop	{r4, r7, pc}
 8006794:	080210a4 	.word	0x080210a4

08006798 <_ZNSaIP9DigitalInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f939 	bl	8006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
	{ }
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
	if (__p)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f91c 	bl	8006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>
      }
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f930 	bl	8006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8006826:	6838      	ldr	r0, [r7, #0]
 8006828:	f000 f92b 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800682c:	4603      	mov	r3, r0
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fff0 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8006836:	6838      	ldr	r0, [r7, #0]
 8006838:	f000 f92f 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800683c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f936 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800684a:	e7e9      	b.n	8006820 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8006882:	b5b0      	push	{r4, r5, r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d011      	beq.n	80068bc <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006898:	687c      	ldr	r4, [r7, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685d      	ldr	r5, [r3, #4]
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f000 f918 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	4629      	mov	r1, r5
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f932 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	1d1a      	adds	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	e00c      	b.n	80068d6 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f93b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 80068c2:	4604      	mov	r4, r0
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f000 f905 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	4621      	mov	r1, r4
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f943 	bl	8006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9bc 	bl	8006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>
 80068dc:	4603      	mov	r3, r0
      }
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bdb0      	pop	{r4, r5, r7, pc}

080068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f9c8 	bl	8006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 80068fa:	4603      	mov	r3, r0
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f9d2 	bl	8006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8006914:	4603      	mov	r3, r0
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8006946:	b590      	push	{r4, r7, lr}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9c2 	bl	8006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8006956:	bf00      	nop
 8006958:	4620      	mov	r0, r4
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 f9bf 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006972:	4603      	mov	r3, r0
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800699c:	b5b0      	push	{r4, r5, r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fa fc5b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80069b0:	4604      	mov	r4, r0
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f7fa ff45 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80069b8:	4605      	mov	r5, r0
 80069ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069bc:	f7fa fc69 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80069c0:	4603      	mov	r3, r0
 80069c2:	462a      	mov	r2, r5
 80069c4:	4621      	mov	r1, r4
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f9a0 	bl	8006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 80069cc:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80069ce:	69f8      	ldr	r0, [r7, #28]
 80069d0:	f000 faee 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f107 0010 	add.w	r0, r7, #16
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	f000 f9b8 	bl	8006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80069e8:	6939      	ldr	r1, [r7, #16]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 faf1 	bl	8006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e00b      	b.n	8006a10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f859 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	f107 0318 	add.w	r3, r7, #24
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fb23 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
      }
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bdb0      	pop	{r4, r5, r7, pc}

08006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b088      	sub	sp, #32
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006a46:	f7f9 fc6b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8006a50:	69b8      	ldr	r0, [r7, #24]
 8006a52:	f019 ff79 	bl	8020948 <_ZdlPv>
	    return;
 8006a56:	e005      	b.n	8006a64 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	69b9      	ldr	r1, [r7, #24]
 8006a5c:	69f8      	ldr	r0, [r7, #28]
 8006a5e:	f000 fdac 	bl	80075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fad7 	bl	8007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fae8 	bl	800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006aea:	b590      	push	{r4, r7, lr}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f7ff ffed 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006afa:	4603      	mov	r3, r0
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	2004      	movs	r0, #4
 8006b04:	f7f9 fc14 	bl	8000330 <_ZnwjPv>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	601c      	str	r4, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd90      	pop	{r4, r7, pc}

08006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ffd7 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b26:	4603      	mov	r3, r0
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7ff ffdd 	bl	8006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fab8 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006b5c:	b5b0      	push	{r4, r5, r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006b68:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fab7 	bl	80070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>
 8006b72:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 faf4 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 8006b86:	4603      	mov	r3, r0
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	f107 0214 	add.w	r2, r7, #20
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fafa 	bl	800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fb08 	bl	80071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>
 8006ba8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006bae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	18d5      	adds	r5, r2, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ff8b 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff ffa5 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fb18 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fb1d 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006be4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	4621      	mov	r1, r4
 8006bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bec:	f000 faf8 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006bf0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006bf8:	f107 0308 	add.w	r3, r7, #8
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb03 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c02:	4603      	mov	r3, r0
 8006c04:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fb08 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c0e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fae3 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c1a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8006c1c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c2c:	f7ff fdd4 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	609a      	str	r2, [r3, #8]
    }
 8006c48:	bf00      	nop
 8006c4a:	3730      	adds	r7, #48	; 0x30
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c50:	08020fac 	.word	0x08020fac

08006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff6b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 faef 	bl	8007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>
 8006c72:	4603      	mov	r3, r0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fb01 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 8006c80:	4603      	mov	r3, r0
      }
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8006c8a:	b590      	push	{r4, r7, lr}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff fddd 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fafc 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb02 	bl	80072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd90      	pop	{r4, r7, pc}

08006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f9c2 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8006ce2:	bf00      	nop
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr()
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fb0b 	bl	8007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006d0c:	b5b0      	push	{r4, r5, r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fb08 	bl	8007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8006d20:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006d22:	68b8      	ldr	r0, [r7, #8]
 8006d24:	f7fa fa9f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fa fd89 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d30:	4605      	mov	r5, r0
 8006d32:	6838      	ldr	r0, [r7, #0]
 8006d34:	f7fa faad 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4622      	mov	r2, r4
 8006d40:	6979      	ldr	r1, [r7, #20]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fb05 	bl	8007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8006d48:	697b      	ldr	r3, [r7, #20]
	}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bdb0      	pop	{r4, r5, r7, pc}

08006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006d52:	b5b0      	push	{r4, r5, r7, lr}
 8006d54:	b08c      	sub	sp, #48	; 0x30
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fb22 	bl	80073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006d6c:	69bc      	ldr	r4, [r7, #24]
 8006d6e:	68b8      	ldr	r0, [r7, #8]
 8006d70:	f000 fa93 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006d74:	4603      	mov	r3, r0
 8006d76:	429c      	cmp	r4, r3
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d032      	beq.n	8006dea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f000 fb22 	bl	80073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8006d8a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006d90:	68bc      	ldr	r4, [r7, #8]
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f000 fb27 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fb2e 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006da2:	4603      	mov	r3, r0
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7fa f894 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8006dbc:	2300      	movs	r3, #0
	  if (size() > 0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f000 fb0d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	f107 031c 	add.w	r3, r7, #28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7fb f867 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006dda:	e0e5      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fb17 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006de8:	e0de      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006dea:	68bc      	ldr	r4, [r7, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681d      	ldr	r5, [r3, #0]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fb03 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7fa f86a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d059      	beq.n	8006ec0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006e10:	69bc      	ldr	r4, [r7, #24]
 8006e12:	68b8      	ldr	r0, [r7, #8]
 8006e14:	f000 fb89 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 fb7d 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e30:	4604      	mov	r4, r0
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f000 fb79 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7fb f8de 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006e44:	e0b0      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006e46:	68bc      	ldr	r4, [r7, #8]
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb78 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
 8006e52:	4603      	mov	r3, r0
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fad1 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7fa f837 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01f      	beq.n	8006eb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fe04 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	f107 0214 	add.w	r2, r7, #20
 8006e92:	f107 0320 	add.w	r3, r7, #32
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7fb f805 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006e9e:	e083      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8006ea0:	f107 0218 	add.w	r2, r7, #24
 8006ea4:	f107 0318 	add.w	r3, r7, #24
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7fb f8a8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006eb0:	e07a      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 faac 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006ebe:	e073      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006ec0:	68bc      	ldr	r4, [r7, #8]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fa9a 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7fa f800 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d059      	beq.n	8006f94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006ee4:	69bc      	ldr	r4, [r7, #24]
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	f000 fa7d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006eec:	4603      	mov	r3, r0
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8006efe:	2300      	movs	r3, #0
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f000 fa6f 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7fa ffc9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f16:	e047      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006f18:	68bc      	ldr	r4, [r7, #8]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fb1e 	bl	8007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fa66 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f32:	4603      	mov	r3, r0
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7f9 ffcd 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01f      	beq.n	8006f86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fd9a 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	f107 0218 	add.w	r2, r7, #24
 8006f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fa ff9b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f72:	e019      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8006f74:	f107 0210 	add.w	r2, r7, #16
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7fb f83e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006f84:	e010      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fa42 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006f92:	e009      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006f9c:	f107 0318 	add.w	r3, r7, #24
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fb f867 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	3730      	adds	r7, #48	; 0x30
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdb0      	pop	{r4, r5, r7, pc}

08006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fae4 	bl	8007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 faeb 	bl	80075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>
 8006fcc:	4603      	mov	r3, r0
      }
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006fd6:	b5b0      	push	{r4, r5, r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f955 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d012      	beq.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8006ff8:	68fc      	ldr	r4, [r7, #12]
 8006ffa:	6838      	ldr	r0, [r7, #0]
 8006ffc:	f7ff ffd8 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007000:	4603      	mov	r3, r0
 8007002:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9fa 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800700a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f7f9 ff61 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8007022:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8007024:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800702a:	7df8      	ldrb	r0, [r7, #23]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	f019 fcfa 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f805 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800704a:	693b      	ldr	r3, [r7, #16]
    }
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bdb0      	pop	{r4, r5, r7, pc}

08007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8007072:	b590      	push	{r4, r7, lr}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 faab 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007082:	4604      	mov	r4, r0
 8007084:	6838      	ldr	r0, [r7, #0]
 8007086:	f7ff fe33 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800708a:	4603      	mov	r3, r0
 800708c:	4619      	mov	r1, r3
 800708e:	4620      	mov	r0, r4
 8007090:	f000 faad 	bl	80075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bd90      	pop	{r4, r7, pc}

0800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa96 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2201      	movs	r2, #1
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 faa7 	bl	8007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 faa9 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 80070f2:	4604      	mov	r4, r0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fab6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 80070fa:	4603      	mov	r3, r0
 80070fc:	1ae2      	subs	r2, r4, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	bf34      	ite	cc
 8007104:	2301      	movcc	r3, #1
 8007106:	2300      	movcs	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f019 fce8 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 faa6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800711a:	4604      	mov	r4, r0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 faa2 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007122:	4603      	mov	r3, r0
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7fb fb8e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8007136:	4603      	mov	r3, r0
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4423      	add	r3, r4
 800713c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fa91 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007144:	4602      	mov	r2, r0
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4293      	cmp	r3, r2
 800714a:	d306      	bcc.n	800715a <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fa79 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4293      	cmp	r3, r2
 8007158:	d904      	bls.n	8007164 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x84>
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fa72 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007160:	4603      	mov	r3, r0
 8007162:	e000      	b.n	8007166 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007164:	697b      	ldr	r3, [r7, #20]
      }
 8007166:	4618      	mov	r0, r3
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd90      	pop	{r4, r7, pc}

0800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff ff9e 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800718e:	b590      	push	{r4, r7, lr}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f835 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800719e:	4603      	mov	r3, r0
 80071a0:	681c      	ldr	r4, [r3, #0]
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f000 f830 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071a8:	4603      	mov	r3, r0
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	1ae3      	subs	r3, r4, r3
 80071ae:	109b      	asrs	r3, r3, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x1e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa5a 	bl	8007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>
 80071d2:	4603      	mov	r3, r0
 80071d4:	e000      	b.n	80071d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x20>
 80071d6:	2300      	movs	r3, #0
      }
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80071ee:	f88d 4000 	strb.w	r4, [sp]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fa64 	bl	80076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80071fe:	4603      	mov	r3, r0
      }
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bd90      	pop	{r4, r7, pc}

08007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fa5b 	bl	80076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>
    }
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	425b      	negs	r3, r3
 8007264:	4413      	add	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	f107 020c 	add.w	r2, r7, #12
 800726c:	f107 0308 	add.w	r3, r7, #8
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff ff24 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80072b2:	b590      	push	{r4, r7, lr}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01d      	beq.n	8007302 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80072c6:	68fc      	ldr	r4, [r7, #12]
 80072c8:	68b8      	ldr	r0, [r7, #8]
 80072ca:	f7ff fe71 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80072ce:	4603      	mov	r3, r0
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	4620      	mov	r0, r4
 80072da:	f7f9 fdfe 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80072de:	4603      	mov	r3, r0
 80072e0:	f083 0301 	eor.w	r3, r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f7ff fbd3 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80072f4:	60b8      	str	r0, [r7, #8]
 80072f6:	e7e3      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80072f8:	68b8      	ldr	r0, [r7, #8]
 80072fa:	f7ff fbc2 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80072fe:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8007300:	e7de      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fea3 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800730e:	697b      	ldr	r3, [r7, #20]
    }
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}

08007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() noexcept
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa02 	bl	800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007326:	4603      	mov	r3, r0
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f94d 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800733e:	4603      	mov	r3, r0
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f9fc 	bl	8007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>
 8007348:	4603      	mov	r3, r0
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4619      	mov	r1, r3
 8007366:	2018      	movs	r0, #24
 8007368:	f7f8 ffe2 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f933 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007372:	4604      	mov	r4, r0
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f7ff fcbb 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800737a:	4605      	mov	r5, r0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7f9 ff72 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8007382:	4606      	mov	r6, r0
 8007384:	6838      	ldr	r0, [r7, #0]
 8007386:	f7fa fa5c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800738a:	4680      	mov	r8, r0
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f7f9 ff80 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007392:	4603      	mov	r3, r0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4643      	mov	r3, r8
 8007398:	4632      	mov	r2, r6
 800739a:	4629      	mov	r1, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fa1c 	bl	80077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fe48 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fdd2 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800740c:	4603      	mov	r3, r0
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007416:	b5b0      	push	{r4, r5, r7, lr}
 8007418:	b08a      	sub	sp, #40	; 0x28
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff fa16 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007428:	4603      	mov	r3, r0
 800742a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f7ff ff34 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007432:	4603      	mov	r3, r0
 8007434:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d023      	beq.n	800748a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007446:	68bc      	ldr	r4, [r7, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681d      	ldr	r5, [r3, #0]
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fdae 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007454:	4603      	mov	r3, r0
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	4629      	mov	r1, r5
 800745c:	4620      	mov	r0, r4
 800745e:	f7f9 fd3c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8007468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fb11 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007478:	4603      	mov	r3, r0
 800747a:	e004      	b.n	8007486 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff faff 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007484:	4603      	mov	r3, r0
 8007486:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8007488:	e7d8      	b.n	800743c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fdde 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01d      	beq.n	80074dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 80074a0:	68b8      	ldr	r0, [r7, #8]
 80074a2:	f000 f9b6 	bl	8007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 80074a6:	4603      	mov	r3, r0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	f107 021c 	add.w	r2, r7, #28
 80074ae:	f107 0310 	add.w	r3, r7, #16
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fa32 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 80074c0:	f107 0214 	add.w	r2, r7, #20
 80074c4:	f107 0318 	add.w	r3, r7, #24
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f9b2 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 80074d0:	e027      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f833 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80074dc:	68bc      	ldr	r4, [r7, #8]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff8c 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80074e6:	4603      	mov	r3, r0
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7f9 fcf2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80074fc:	f107 0214 	add.w	r2, r7, #20
 8007500:	f107 0318 	add.w	r3, r7, #24
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f994 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 800750c:	e009      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800750e:	2300      	movs	r3, #0
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	f107 0220 	add.w	r2, r7, #32
 8007516:	f107 0310 	add.w	r3, r7, #16
 800751a:	4619      	mov	r1, r3
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7fa fdaa 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	3728      	adds	r7, #40	; 0x28
 8007526:	46bd      	mov	sp, r7
 8007528:	bdb0      	pop	{r4, r5, r7, pc}

0800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	330c      	adds	r3, #12
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f019 fa68 	bl	8020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007554:	4602      	mov	r2, r0
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	return *this;
 800755a:	687b      	ldr	r3, [r7, #4]
      }
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f019 fa55 	bl	8020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8007576:	4602      	mov	r2, r0
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]
	return *this;
 800757c:	687b      	ldr	r3, [r7, #4]
      }
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr() const
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3310      	adds	r3, #16
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f967 	bl	8007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8007598:	4603      	mov	r3, r0
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>:
      operator()(const _Pair& __x) const
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4619      	mov	r1, r3
 80075cc:	68b8      	ldr	r0, [r7, #8]
 80075ce:	f019 f9bd 	bl	802094c <_ZdlPvj>
      }
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f000 f940 	bl	800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>
	}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007606:	b580      	push	{r7, lr}
 8007608:	b088      	sub	sp, #32
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800761e:	f7f8 fe7f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8007628:	69b8      	ldr	r0, [r7, #24]
 800762a:	f019 f98d 	bl	8020948 <_ZdlPv>
	    return;
 800762e:	e005      	b.n	800763c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69f8      	ldr	r0, [r7, #28]
 8007636:	f000 f9e1 	bl	80079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f945 	bl	80078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007654:	4603      	mov	r3, r0
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f927 	bl	80078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>
 800765c:	4603      	mov	r3, r0
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	109b      	asrs	r3, r3, #2
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007698:	f7f8 fe42 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d006      	beq.n	80076b0 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f019 f952 	bl	8020950 <_Znwj>
 80076ac:	4603      	mov	r3, r0
 80076ae:	e006      	b.n	80076be <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80076b0:	2200      	movs	r2, #0
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f9b3 	bl	8007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>
 80076ba:	4603      	mov	r3, r0
 80076bc:	bf00      	nop
      { return __a.allocate(__n); }
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f90a 	bl	80078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80076e0:	4603      	mov	r3, r0
      }
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZSt10destroy_atIP9DigitalInEvPT_>:
    destroy_at(_Tp* __location)
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
    }
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8007708:	f7f8 fe0a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f90a 	bl	800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>
 800771a:	e003      	b.n	8007724 <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x26>
	__destroy(__first, __last);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f91d 	bl	800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>
    }
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() noexcept
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007752:	f7f8 fde5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4618      	mov	r0, r3
 8007768:	f019 f8f2 	bl	8020950 <_Znwj>
 800776c:	4603      	mov	r3, r0
 800776e:	e006      	b.n	800777e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f9b1 	bl	8007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>
 800777a:	4603      	mov	r3, r0
 800777c:	bf00      	nop
      { return __a.allocate(__n); }
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8007786:	b5b0      	push	{r4, r5, r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8007794:	68b8      	ldr	r0, [r7, #8]
 8007796:	f7f9 fd66 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa f851 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077a0:	4602      	mov	r2, r0
 80077a2:	f107 0318 	add.w	r3, r7, #24
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fb f8e6 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80077ae:	f107 0418 	add.w	r4, r7, #24
 80077b2:	6838      	ldr	r0, [r7, #0]
 80077b4:	f7f9 fd6d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4619      	mov	r1, r3
 80077bc:	2008      	movs	r0, #8
 80077be:	f7f8 fdb7 	bl	8000330 <_ZnwjPv>
 80077c2:	4605      	mov	r5, r0
 80077c4:	7f3b      	ldrb	r3, [r7, #28]
 80077c6:	4622      	mov	r2, r4
 80077c8:	7d39      	ldrb	r1, [r7, #20]
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f8ec 	bl	80079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80077d0:	462b      	mov	r3, r5
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}

080077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80077da:	b5b0      	push	{r4, r5, r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7f9 fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80077ee:	4604      	mov	r4, r0
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	f7fa f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077f6:	4605      	mov	r5, r0
 80077f8:	6a38      	ldr	r0, [r7, #32]
 80077fa:	f7f9 fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077fe:	4603      	mov	r3, r0
 8007800:	462a      	mov	r2, r5
 8007802:	4621      	mov	r1, r4
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	f7ff ffbe 	bl	8007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bdb0      	pop	{r4, r5, r7, pc}

08007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	4611      	mov	r1, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fc15 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 f8c5 	bl	80079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007846:	4603      	mov	r3, r0
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fa ffad 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007854:	4603      	mov	r3, r0
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8b9 	bl	80079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007874:	4603      	mov	r3, r0
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>:
    destroy_at(_Tp* __location)
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
    }
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800789a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80078b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80078b6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ffea 	bl	8007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>
 80078be:	4603      	mov	r3, r0
 80078c0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80078c2:	f107 0208 	add.w	r2, r7, #8
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fb fa8a 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80078d2:	4603      	mov	r3, r0
 80078d4:	681b      	ldr	r3, [r3, #0]
      }
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80078f4:	b5b0      	push	{r4, r5, r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f8ab 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007908:	4604      	mov	r4, r0
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	f000 f8a7 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007910:	4605      	mov	r5, r0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8a3 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007918:	4602      	mov	r2, r0
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4629      	mov	r1, r5
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f8a8 	bl	8007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007924:	4603      	mov	r3, r0
    }
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bdb0      	pop	{r4, r5, r7, pc}

0800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d00a      	beq.n	8007956 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8b5 	bl	8007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>
 8007946:	4603      	mov	r3, r0
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f8bc 	bl	8007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>
	  for (; __first != __last; ++__first)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	e7f0      	b.n	8007938 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0xa>
	}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f7fb fadb 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007988:	4603      	mov	r3, r0
 800798a:	4618      	mov	r0, r3
 800798c:	f7fb facc 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8007990:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
      { }
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	7239      	strb	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80079b6:	463a      	mov	r2, r7
 80079b8:	f88d 4000 	strb.w	r4, [sp]
 80079bc:	462b      	mov	r3, r5
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff ffd7 	bl	8007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bdb0      	pop	{r4, r5, r7, pc}

080079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() const noexcept
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	4413      	add	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4619      	mov	r1, r3
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f018 ff99 	bl	802094c <_ZdlPvj>
      }
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f877 	bl	8007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bf8c      	ite	hi
 8007a3a:	2301      	movhi	r3, #1
 8007a3c:	2300      	movls	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007a44:	f019 f84b 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f018 ff7f 	bl	8020950 <_Znwj>
 8007a52:	4603      	mov	r3, r0
 8007a54:	bf00      	nop
      }
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>:
    __niter_base(_Iterator __it)
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	109b      	asrs	r3, r3, #2
 8007a8a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd06      	ble.n	8007aa0 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	461a      	mov	r2, r3
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f019 f892 	bl	8020bc4 <memmove>
      return __result + __count;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>:
    _Destroy(_Tp* __pointer)
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fe0b 	bl	80076ea <_ZSt10destroy_atIP9DigitalInEvPT_>
    }
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f825 	bl	8007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4293      	cmp	r3, r2
 8007af4:	bf8c      	ite	hi
 8007af6:	2301      	movhi	r3, #1
 8007af8:	2300      	movls	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007b00:	f018 ffed 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f018 ff1e 	bl	8020950 <_Znwj>
 8007b14:	4603      	mov	r3, r0
 8007b16:	bf00      	nop
      }
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b40:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv+0x18>)
      }
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	05555555 	.word	0x05555555

08007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fd96 	bl	8006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <_Z41__static_initialization_and_destruction_0ii>:
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10a      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d105      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007b8a:	480c      	ldr	r0, [pc, #48]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b8c:	f7fe fcb0 	bl	80064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;
 8007b90:	480b      	ldr	r0, [pc, #44]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007b92:	f7fe fcd3 	bl	800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d105      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007ba6:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007ba8:	f7ff ffd4 	bl	8007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bac:	4803      	ldr	r0, [pc, #12]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bae:	f000 f809 	bl	8007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	24000110 	.word	0x24000110
 8007bc0:	2400011c 	.word	0x2400011c

08007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007bc4:	b5b0      	push	{r4, r5, r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681c      	ldr	r4, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fb21 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007bdc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bde:	461a      	mov	r2, r3
 8007be0:	4629      	mov	r1, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fb26 	bl	8007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>
      }
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fd17 	bl	800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bdb0      	pop	{r4, r5, r7, pc}

08007bfa <_GLOBAL__sub_I__ZN9DigitalIn15all_digital_insE>:
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c02:	2001      	movs	r0, #1
 8007c04:	f7ff ffb4 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <_GLOBAL__sub_D__ZN9DigitalIn15all_digital_insE>:
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7ff ffac 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8b6 	bl	8007d94 <_ZNSaIP10DigitalOutED1Ev>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f899 	bl	8007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>:
      vector() = default;
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ffeb 	bl	8007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8c9 	bl	8007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 f8a7 	bl	8007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ffeb 	bl	8007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <_ZN10DigitalOutC1EP3Pin>:
#include <Mini-STLIB/DigitalOut.hpp>

vector<DigitalOut*> DigitalOut::all_digital_outs;
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;

DigitalOut::DigitalOut(Pin* pin) : pin(pin) {
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
	DigitalOut::all_digital_outs.push_back(this);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4809      	ldr	r0, [pc, #36]	; (8007cfc <_ZN10DigitalOutC1EP3Pin+0x48>)
 8007cd6:	f000 f8b6 	bl	8007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>
	DigitalOut::pin_to_digital_out[pin] = this;
 8007cda:	687c      	ldr	r4, [r7, #4]
 8007cdc:	463b      	mov	r3, r7
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4807      	ldr	r0, [pc, #28]	; (8007d00 <_ZN10DigitalOutC1EP3Pin+0x4c>)
 8007ce2:	f000 f8c1 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_OUTPUT;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2204      	movs	r2, #4
 8007cee:	719a      	strb	r2, [r3, #6]
}
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd90      	pop	{r4, r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	24000134 	.word	0x24000134
 8007d00:	24000140 	.word	0x24000140

08007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>:

void DigitalOut::set_to(DigitalOutState state){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
	if(state == HIGH)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d103      	bne.n	8007d1e <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x1a>
		turn_high();
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f808 	bl	8007d2c <_ZN10DigitalOut9turn_highEv>
	else
		turn_low();
}
 8007d1c:	e002      	b.n	8007d24 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x20>
		turn_low();
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f816 	bl	8007d50 <_ZN10DigitalOut8turn_lowEv>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZN10DigitalOut9turn_highEv>:

void DigitalOut::turn_high(){
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	889b      	ldrh	r3, [r3, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	4619      	mov	r1, r3
 8007d44:	f013 f85c 	bl	801ae00 <HAL_GPIO_WritePin>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN10DigitalOut8turn_lowEv>:

void DigitalOut::turn_low(){
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	889b      	ldrh	r3, [r3, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	4619      	mov	r1, r3
 8007d68:	f013 f84a 	bl	801ae00 <HAL_GPIO_WritePin>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8d1 	bl	8007f24 <_ZNSaIP10DigitalOutEC1Ev>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f8d9 	bl	8007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZNSaIP10DigitalOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8cd 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff ff24 	bl	8007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8d0 	bl	8007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f8 fefb 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7f8 faa6 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>:
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8db 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8b7 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ff15 	bl	8007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007e50:	6838      	ldr	r0, [r7, #0]
 8007e52:	f000 f8d1 	bl	8007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8d7 	bl	800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b08b      	sub	sp, #44	; 0x2c
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8fc 	bl	8008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f906 	bl	8008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8007e84:	4603      	mov	r3, r0
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	f107 020c 	add.w	r2, r7, #12
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f909 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d114      	bne.n	8007ec8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f917 	bl	80080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681c      	ldr	r4, [r3, #0]
 8007ea8:	f107 0308 	add.w	r3, r7, #8
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 f91d 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f9 f80c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01b      	beq.n	8007f0a <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ed2:	687c      	ldr	r4, [r7, #4]
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 f912 	bl	8008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8007ee4:	f107 0318 	add.w	r3, r7, #24
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7f9 f808 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ef0:	f107 0218 	add.w	r2, r7, #24
 8007ef4:	f107 031c 	add.w	r3, r7, #28
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f911 	bl	8008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8007f06:	4603      	mov	r3, r0
 8007f08:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f8ec 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007f14:	4603      	mov	r3, r0
 8007f16:	3304      	adds	r3, #4
      }
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3724      	adds	r7, #36	; 0x24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}
 8007f20:	080210a4 	.word	0x080210a4

08007f24 <_ZNSaIP10DigitalOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f939 	bl	80081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
	{ }
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
	if (__p)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f91c 	bl	80081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>
      }
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f930 	bl	80081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8007fb2:	6838      	ldr	r0, [r7, #0]
 8007fb4:	f000 f92b 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fff0 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8007fc2:	6838      	ldr	r0, [r7, #0]
 8007fc4:	f000 f92f 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007fc8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f936 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007fd6:	e7e9      	b.n	8007fac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800800e:	b5b0      	push	{r4, r5, r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	d011      	beq.n	8008048 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008024:	687c      	ldr	r4, [r7, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685d      	ldr	r5, [r3, #4]
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f000 f918 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	4629      	mov	r1, r5
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f932 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	1d1a      	adds	r2, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e00c      	b.n	8008062 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f93b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800804e:	4604      	mov	r4, r0
 8008050:	6838      	ldr	r0, [r7, #0]
 8008052:	f000 f905 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	4621      	mov	r1, r4
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f943 	bl	80082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9bc 	bl	80083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>
 8008068:	4603      	mov	r3, r0
      }
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}

08008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f9c8 	bl	8008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8008086:	4603      	mov	r3, r0
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f9d2 	bl	8008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 80080d2:	b590      	push	{r4, r7, lr}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f9c2 	bl	8008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 80080e2:	bf00      	nop
 80080e4:	4620      	mov	r0, r4
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd90      	pop	{r4, r7, pc}

080080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f9bf 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 80080fe:	4603      	mov	r3, r0
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008128:	b5b0      	push	{r4, r5, r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7f9 f895 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800813c:	4604      	mov	r4, r0
 800813e:	6838      	ldr	r0, [r7, #0]
 8008140:	f7f9 fb7f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008144:	4605      	mov	r5, r0
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f7f9 f8a3 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800814c:	4603      	mov	r3, r0
 800814e:	462a      	mov	r2, r5
 8008150:	4621      	mov	r1, r4
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f9a0 	bl	8008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8008158:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800815a:	69f8      	ldr	r0, [r7, #28]
 800815c:	f000 faee 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008160:	4603      	mov	r3, r0
 8008162:	f107 0010 	add.w	r0, r7, #16
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	f000 f9b8 	bl	80084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8008174:	6939      	ldr	r1, [r7, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 faf1 	bl	8008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8008180:	4603      	mov	r3, r0
 8008182:	e00b      	b.n	800819c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8008184:	69f9      	ldr	r1, [r7, #28]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f859 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fb23 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800819a:	69bb      	ldr	r3, [r7, #24]
      }
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bdb0      	pop	{r4, r5, r7, pc}

080081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b088      	sub	sp, #32
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80081d2:	f7f8 f8a5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80081dc:	69b8      	ldr	r0, [r7, #24]
 80081de:	f018 fbb3 	bl	8020948 <_ZdlPv>
	    return;
 80081e2:	e005      	b.n	80081f0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	69f8      	ldr	r0, [r7, #28]
 80081ea:	f000 fdac 	bl	8008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fad7 	bl	80087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fae8 	bl	8008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008276:	b590      	push	{r4, r7, lr}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008280:	6838      	ldr	r0, [r7, #0]
 8008282:	f7ff ffed 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008286:	4603      	mov	r3, r0
 8008288:	681c      	ldr	r4, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4619      	mov	r1, r3
 800828e:	2004      	movs	r0, #4
 8008290:	f7f8 f84e 	bl	8000330 <_ZnwjPv>
 8008294:	4603      	mov	r3, r0
 8008296:	601c      	str	r4, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bd90      	pop	{r4, r7, pc}

080082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ffd7 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4619      	mov	r1, r3
 80082b6:	68b8      	ldr	r0, [r7, #8]
 80082b8:	f7ff ffdd 	bl	8008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80082bc:	bf00      	nop
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1d1a      	adds	r2, r3, #4
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fab8 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80082e8:	b5b0      	push	{r4, r5, r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80082f4:	4a39      	ldr	r2, [pc, #228]	; (80083dc <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80082f6:	2101      	movs	r1, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fab7 	bl	800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>
 80082fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 faf4 	bl	80088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>
 8008312:	4603      	mov	r3, r0
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	f107 0214 	add.w	r2, r7, #20
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fafa 	bl	800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008326:	4603      	mov	r3, r0
 8008328:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fb08 	bl	8008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>
 8008334:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800833a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	18d5      	adds	r5, r2, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff8b 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	4629      	mov	r1, r5
 8008350:	4620      	mov	r0, r4
 8008352:	f7ff ffa5 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fb18 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008364:	4603      	mov	r3, r0
 8008366:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fb1d 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008370:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	4621      	mov	r1, r4
 8008376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008378:	f000 faf8 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800837c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3304      	adds	r3, #4
 8008382:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008384:	f107 0308 	add.w	r3, r7, #8
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fb03 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800838e:	4603      	mov	r3, r0
 8008390:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fb08 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 800839a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fae3 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083a6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80083a8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80083b4:	461a      	mov	r2, r3
 80083b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b8:	f7ff fdd4 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	441a      	add	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
    }
 80083d4:	bf00      	nop
 80083d6:	3730      	adds	r7, #48	; 0x30
 80083d8:	46bd      	mov	sp, r7
 80083da:	bdb0      	pop	{r4, r5, r7, pc}
 80083dc:	08020fc8 	.word	0x08020fc8

080083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff6b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 faef 	bl	80089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>
 80083fe:	4603      	mov	r3, r0
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fb01 	bl	8008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>
 800840c:	4603      	mov	r3, r0
      }
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff fddd 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008426:	4604      	mov	r4, r0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fafc 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800842e:	4602      	mov	r2, r0
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	4621      	mov	r1, r4
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fb02 	bl	8008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800843a:	4603      	mov	r3, r0
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f9c2 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800846e:	bf00      	nop
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr()
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3310      	adds	r3, #16
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fb0b 	bl	8008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 800848e:	4603      	mov	r3, r0
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8008498:	b5b0      	push	{r4, r5, r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fb08 	bl	8008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 80084ac:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80084ae:	68b8      	ldr	r0, [r7, #8]
 80084b0:	f7f8 fed9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80084b4:	4604      	mov	r4, r0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 f9c3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80084bc:	4605      	mov	r5, r0
 80084be:	6838      	ldr	r0, [r7, #0]
 80084c0:	f7f8 fee7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80084c4:	4603      	mov	r3, r0
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462b      	mov	r3, r5
 80084ca:	4622      	mov	r2, r4
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fb05 	bl	8008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 80084d4:	697b      	ldr	r3, [r7, #20]
	}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}

080084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80084de:	b5b0      	push	{r4, r5, r7, lr}
 80084e0:	b08c      	sub	sp, #48	; 0x30
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb22 	bl	8008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80084f8:	69bc      	ldr	r4, [r7, #24]
 80084fa:	68b8      	ldr	r0, [r7, #8]
 80084fc:	f000 fa93 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008500:	4603      	mov	r3, r0
 8008502:	429c      	cmp	r4, r3
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d032      	beq.n	8008576 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8008510:	68b8      	ldr	r0, [r7, #8]
 8008512:	f000 fb22 	bl	8008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8008516:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008518:	2b00      	cmp	r3, #0
 800851a:	d015      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800851c:	68bc      	ldr	r4, [r7, #8]
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	f000 fb27 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008524:	4603      	mov	r3, r0
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fb2e 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800852e:	4603      	mov	r3, r0
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	4620      	mov	r0, r4
 800853a:	f7f8 fcce 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8008548:	2300      	movs	r3, #0
	  if (size() > 0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	68b8      	ldr	r0, [r7, #8]
 8008554:	f000 fb0d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008558:	4602      	mov	r2, r0
 800855a:	f107 031c 	add.w	r3, r7, #28
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7f9 fca1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008566:	e0e5      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fb17 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8008574:	e0de      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8008576:	68bc      	ldr	r4, [r7, #8]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb03 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008584:	4603      	mov	r3, r0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	4629      	mov	r1, r5
 800858c:	4620      	mov	r0, r4
 800858e:	f7f8 fca4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d059      	beq.n	800864c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800859c:	69bc      	ldr	r4, [r7, #24]
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	f000 fb89 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085a4:	4603      	mov	r3, r0
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429c      	cmp	r4, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f000 fb7d 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085bc:	4604      	mov	r4, r0
 80085be:	68b8      	ldr	r0, [r7, #8]
 80085c0:	f000 fb79 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	4621      	mov	r1, r4
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7f9 fd18 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80085d0:	e0b0      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80085d2:	68bc      	ldr	r4, [r7, #8]
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fb78 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fad1 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80085e8:	4603      	mov	r3, r0
 80085ea:	6819      	ldr	r1, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7f8 fc71 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01f      	beq.n	800863e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff fe04 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8008616:	2300      	movs	r3, #0
 8008618:	623b      	str	r3, [r7, #32]
 800861a:	f107 0214 	add.w	r2, r7, #20
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7f9 fc3f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800862a:	e083      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800862c:	f107 0218 	add.w	r2, r7, #24
 8008630:	f107 0318 	add.w	r3, r7, #24
 8008634:	4619      	mov	r1, r3
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7f9 fce2 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800863c:	e07a      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 faac 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800864a:	e073      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800864c:	68bc      	ldr	r4, [r7, #8]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fa9a 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008656:	4603      	mov	r3, r0
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	4620      	mov	r0, r4
 8008662:	f7f8 fc3a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d059      	beq.n	8008720 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8008670:	69bc      	ldr	r4, [r7, #24]
 8008672:	68b8      	ldr	r0, [r7, #8]
 8008674:	f000 fa7d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008678:	4603      	mov	r3, r0
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429c      	cmp	r4, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800868a:	2300      	movs	r3, #0
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	68b8      	ldr	r0, [r7, #8]
 8008690:	f000 fa6f 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008694:	4602      	mov	r2, r0
 8008696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7f9 fc03 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086a2:	e047      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80086a4:	68bc      	ldr	r4, [r7, #8]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681d      	ldr	r5, [r3, #0]
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fb1e 	bl	8008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fa66 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80086be:	4603      	mov	r3, r0
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	4629      	mov	r1, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7f8 fc07 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01f      	beq.n	8008712 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fd9a 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80086ea:	2300      	movs	r3, #0
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ee:	f107 0218 	add.w	r2, r7, #24
 80086f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086f6:	4619      	mov	r1, r3
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7f9 fbd5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086fe:	e019      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8008700:	f107 0210 	add.w	r2, r7, #16
 8008704:	f107 0310 	add.w	r3, r7, #16
 8008708:	4619      	mov	r1, r3
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7f9 fc78 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008710:	e010      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fa42 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800871e:	e009      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008724:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008728:	f107 0318 	add.w	r3, r7, #24
 800872c:	4619      	mov	r1, r3
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7f9 fca1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	3730      	adds	r7, #48	; 0x30
 8008738:	46bd      	mov	sp, r7
 800873a:	bdb0      	pop	{r4, r5, r7, pc}

0800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fae4 	bl	8008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800874a:	4602      	mov	r2, r0
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f000 faeb 	bl	8008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>
 8008758:	4603      	mov	r3, r0
      }
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008762:	b5b0      	push	{r4, r5, r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d119      	bne.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f955 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800877c:	4602      	mov	r2, r0
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4293      	cmp	r3, r2
 8008782:	d012      	beq.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8008784:	68fc      	ldr	r4, [r7, #12]
 8008786:	6838      	ldr	r0, [r7, #0]
 8008788:	f7ff ffd8 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800878c:	4603      	mov	r3, r0
 800878e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9fa 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008796:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	4629      	mov	r1, r5
 800879e:	4620      	mov	r0, r4
 80087a0:	f7f8 fb9b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 80087ae:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087b0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80087b6:	7df8      	ldrb	r0, [r7, #23]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	f018 f934 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80087ca:	f107 0310 	add.w	r3, r7, #16
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f805 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 80087d6:	693b      	ldr	r3, [r7, #16]
    }
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bdb0      	pop	{r4, r5, r7, pc}

080087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80087fe:	b590      	push	{r4, r7, lr}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 faab 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800880e:	4604      	mov	r4, r0
 8008810:	6838      	ldr	r0, [r7, #0]
 8008812:	f7ff fe33 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008816:	4603      	mov	r3, r0
 8008818:	4619      	mov	r1, r3
 800881a:	4620      	mov	r0, r4
 800881c:	f000 faad 	bl	8008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bd90      	pop	{r4, r7, pc}

08008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa96 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008838:	4603      	mov	r3, r0
 800883a:	2201      	movs	r2, #1
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 faa7 	bl	8008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 faa9 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800887e:	4604      	mov	r4, r0
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fab6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 8008886:	4603      	mov	r3, r0
 8008888:	1ae2      	subs	r2, r4, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	bf34      	ite	cc
 8008890:	2301      	movcc	r3, #1
 8008892:	2300      	movcs	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f018 f922 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 faa6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088a6:	4604      	mov	r4, r0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 faa2 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088ae:	4603      	mov	r3, r0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	f107 0208 	add.w	r2, r7, #8
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7f9 ffc8 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 80088c2:	4603      	mov	r3, r0
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4423      	add	r3, r4
 80088c8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fa91 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088d0:	4602      	mov	r2, r0
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d306      	bcc.n	80088e6 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fa79 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088de:	4602      	mov	r2, r0
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d904      	bls.n	80088f0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fa72 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	e000      	b.n	80088f2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 80088f0:	697b      	ldr	r3, [r7, #20]
      }
 80088f2:	4618      	mov	r0, r3
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}

080088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ff9e 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800891a:	b590      	push	{r4, r7, lr}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f835 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800892a:	4603      	mov	r3, r0
 800892c:	681c      	ldr	r4, [r3, #0]
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f000 f830 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008934:	4603      	mov	r3, r0
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	1ae3      	subs	r3, r4, r3
 800893a:	109b      	asrs	r3, r3, #2
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}

08008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x1e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fa5a 	bl	8008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>
 800895e:	4603      	mov	r3, r0
 8008960:	e000      	b.n	8008964 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x20>
 8008962:	2300      	movs	r3, #0
      }
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b087      	sub	sp, #28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800897a:	f88d 4000 	strb.w	r4, [sp]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fa64 	bl	8008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800898a:	4603      	mov	r3, r0
      }
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	bd90      	pop	{r4, r7, pc}

08008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fa5b 	bl	8008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>
    }
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	425b      	negs	r3, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	f107 020c 	add.w	r2, r7, #12
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff ff24 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008a3e:	b590      	push	{r4, r7, lr}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01d      	beq.n	8008a8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008a52:	68fc      	ldr	r4, [r7, #12]
 8008a54:	68b8      	ldr	r0, [r7, #8]
 8008a56:	f7ff fe71 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	4620      	mov	r0, r4
 8008a66:	f7f8 fa38 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f083 0301 	eor.w	r3, r3, #1
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d006      	beq.n	8008a84 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f7ff fbd3 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008a80:	60b8      	str	r0, [r7, #8]
 8008a82:	e7e3      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff fbc2 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008a8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008a8c:	e7de      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fea3 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008a9a:	697b      	ldr	r3, [r7, #20]
    }
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}

08008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa02 	bl	8008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f94d 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2101      	movs	r1, #1
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f9fc 	bl	8008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8008ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4619      	mov	r1, r3
 8008af2:	2018      	movs	r0, #24
 8008af4:	f7f7 fc1c 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f933 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008afe:	4604      	mov	r4, r0
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	f7ff fcbb 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008b06:	4605      	mov	r5, r0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7f8 fbac 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	6838      	ldr	r0, [r7, #0]
 8008b12:	f7f8 fe96 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008b16:	4680      	mov	r8, r0
 8008b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1a:	f7f8 fbba 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4643      	mov	r3, r8
 8008b24:	4632      	mov	r2, r6
 8008b26:	4629      	mov	r1, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fa1c 	bl	8008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fe48 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3310      	adds	r3, #16
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fdd2 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008ba2:	b5b0      	push	{r4, r5, r7, lr}
 8008ba4:	b08a      	sub	sp, #40	; 0x28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008bae:	68b8      	ldr	r0, [r7, #8]
 8008bb0:	f7ff fa16 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f7ff ff34 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d023      	beq.n	8008c16 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8008bd2:	68bc      	ldr	r4, [r7, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681d      	ldr	r5, [r3, #0]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fdae 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008be0:	4603      	mov	r3, r0
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	4629      	mov	r1, r5
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7f8 f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d005      	beq.n	8008c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fb11 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008c04:	4603      	mov	r3, r0
 8008c06:	e004      	b.n	8008c12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff faff 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008c10:	4603      	mov	r3, r0
 8008c12:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008c14:	e7d8      	b.n	8008bc8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fdde 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01d      	beq.n	8008c68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f000 f9b6 	bl	8008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8008c32:	4603      	mov	r3, r0
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	f107 021c 	add.w	r2, r7, #28
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fa32 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8008c4c:	f107 0214 	add.w	r2, r7, #20
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f9b2 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c5c:	e027      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8008c5e:	f107 0310 	add.w	r3, r7, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f833 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8008c68:	68bc      	ldr	r4, [r7, #8]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ff8c 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008c72:	4603      	mov	r3, r0
 8008c74:	6819      	ldr	r1, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7f8 f92c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d008      	beq.n	8008c9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8008c88:	f107 0214 	add.w	r2, r7, #20
 8008c8c:	f107 0318 	add.w	r3, r7, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f994 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c98:	e009      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	f107 0220 	add.w	r2, r7, #32
 8008ca2:	f107 0310 	add.w	r3, r7, #16
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7f9 f9e4 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	3728      	adds	r7, #40	; 0x28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bdb0      	pop	{r4, r5, r7, pc}

08008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f017 fea2 	bl	8020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
	return *this;
 8008ce6:	687b      	ldr	r3, [r7, #4]
      }
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f017 fe8f 	bl	8020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008d02:	4602      	mov	r2, r0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
	return *this;
 8008d08:	687b      	ldr	r3, [r7, #4]
      }
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr() const
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3310      	adds	r3, #16
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f967 	bl	8008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4619      	mov	r1, r3
 8008d58:	68b8      	ldr	r0, [r7, #8]
 8008d5a:	f017 fdf7 	bl	802094c <_ZdlPvj>
      }
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8008d84:	6838      	ldr	r0, [r7, #0]
 8008d86:	f000 f940 	bl	800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>
	}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008daa:	f7f7 fab9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8008db4:	69b8      	ldr	r0, [r7, #24]
 8008db6:	f017 fdc7 	bl	8020948 <_ZdlPv>
	    return;
 8008dba:	e005      	b.n	8008dc8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	69b9      	ldr	r1, [r7, #24]
 8008dc0:	69f8      	ldr	r0, [r7, #28]
 8008dc2:	f000 f9e1 	bl	8009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f945 	bl	800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f927 	bl	8009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>
 8008de8:	4603      	mov	r3, r0
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	109b      	asrs	r3, r3, #2
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008e24:	f7f7 fa7c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d006      	beq.n	8008e3c <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f017 fd8c 	bl	8020950 <_Znwj>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e006      	b.n	8008e4a <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f9b3 	bl	80091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>
 8008e46:	4603      	mov	r3, r0
 8008e48:	bf00      	nop
      { return __a.allocate(__n); }
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f90a 	bl	8009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008e6c:	4603      	mov	r3, r0
      }
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>:
    destroy_at(_Tp* __location)
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
    }
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8008e94:	f7f7 fa44 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f90a 	bl	80090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>
 8008ea6:	e003      	b.n	8008eb0 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x26>
	__destroy(__first, __last);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f91d 	bl	80090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>
    }
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() noexcept
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008ede:	f7f7 fa1f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	4413      	add	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f017 fd2c 	bl	8020950 <_Znwj>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	e006      	b.n	8008f0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008efc:	2200      	movs	r2, #0
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f9b1 	bl	8009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	bf00      	nop
      { return __a.allocate(__n); }
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008f12:	b5b0      	push	{r4, r5, r7, lr}
 8008f14:	b088      	sub	sp, #32
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f7f8 f9a0 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f8 fc8b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f107 0318 	add.w	r3, r7, #24
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f9 fd20 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 8008f3a:	f107 0418 	add.w	r4, r7, #24
 8008f3e:	6838      	ldr	r0, [r7, #0]
 8008f40:	f7f8 f9a7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4619      	mov	r1, r3
 8008f48:	2008      	movs	r0, #8
 8008f4a:	f7f7 f9f1 	bl	8000330 <_ZnwjPv>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	7f3b      	ldrb	r3, [r7, #28]
 8008f52:	4622      	mov	r2, r4
 8008f54:	7d39      	ldrb	r1, [r7, #20]
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f8ec 	bl	8009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bdb0      	pop	{r4, r5, r7, pc}

08008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008f66:	b5b0      	push	{r4, r5, r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7f8 f976 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	6838      	ldr	r0, [r7, #0]
 8008f7e:	f7f8 fc60 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f82:	4605      	mov	r5, r0
 8008f84:	6a38      	ldr	r0, [r7, #32]
 8008f86:	f7f8 f984 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4621      	mov	r1, r4
 8008f90:	68b8      	ldr	r0, [r7, #8]
 8008f92:	f7ff ffbe 	bl	8008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bdb0      	pop	{r4, r5, r7, pc}

08008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fc15 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f000 f8c5 	bl	800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7f9 fbe7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8b9 	bl	8009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8009000:	4603      	mov	r3, r0
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>:
    destroy_at(_Tp* __location)
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
    }
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009026:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800903e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009042:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ffea 	bl	800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>
 800904a:	4603      	mov	r3, r0
 800904c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800904e:	f107 0208 	add.w	r2, r7, #8
 8009052:	f107 030c 	add.w	r3, r7, #12
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7f9 fec4 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800905e:	4603      	mov	r3, r0
 8009060:	681b      	ldr	r3, [r3, #0]
      }
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009080:	b5b0      	push	{r4, r5, r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 f8ab 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 8009094:	4604      	mov	r4, r0
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f000 f8a7 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 800909c:	4605      	mov	r5, r0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f8a3 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090a4:	4602      	mov	r2, r0
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	4629      	mov	r1, r5
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f8a8 	bl	8009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80090b0:	4603      	mov	r3, r0
    }
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bdb0      	pop	{r4, r5, r7, pc}

080090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d00a      	beq.n	80090e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8b5 	bl	800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>
 80090d2:	4603      	mov	r3, r0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8bc 	bl	8009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>
	  for (; __first != __last; ++__first)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3304      	adds	r3, #4
 80090de:	607b      	str	r3, [r7, #4]
 80090e0:	e7f0      	b.n	80090c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0xa>
	}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800910e:	68b8      	ldr	r0, [r7, #8]
 8009110:	f7f9 ff15 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009114:	4603      	mov	r3, r0
 8009116:	4618      	mov	r0, r3
 8009118:	f7f9 ff06 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800911c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
      { }
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	7239      	strb	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8009142:	463a      	mov	r2, r7
 8009144:	f88d 4000 	strb.w	r4, [sp]
 8009148:	462b      	mov	r3, r5
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff ffd7 	bl	8009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bdb0      	pop	{r4, r5, r7, pc}

0800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() const noexcept
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4413      	add	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	4619      	mov	r1, r3
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f017 fbd3 	bl	802094c <_ZdlPvj>
      }
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f877 	bl	80092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>
 80091be:	4602      	mov	r2, r0
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bf8c      	ite	hi
 80091c6:	2301      	movhi	r3, #1
 80091c8:	2300      	movls	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80091d0:	f017 fc85 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4618      	mov	r0, r3
 80091da:	f017 fbb9 	bl	8020950 <_Znwj>
 80091de:	4603      	mov	r3, r0
 80091e0:	bf00      	nop
      }
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>:
    __niter_base(_Iterator __it)
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	109b      	asrs	r3, r3, #2
 8009216:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd06      	ble.n	800922c <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	461a      	mov	r2, r3
 8009224:	68f9      	ldr	r1, [r7, #12]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f017 fccc 	bl	8020bc4 <memmove>
      return __result + __count;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
    }
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff fe0b 	bl	8008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>
    }
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f825 	bl	80092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>
 800927a:	4602      	mov	r2, r0
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4293      	cmp	r3, r2
 8009280:	bf8c      	ite	hi
 8009282:	2301      	movhi	r3, #1
 8009284:	2300      	movls	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800928c:	f017 fc27 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	4618      	mov	r0, r3
 800929c:	f017 fb58 	bl	8020950 <_Znwj>
 80092a0:	4603      	mov	r3, r0
 80092a2:	bf00      	nop
      }
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv+0x18>)
      }
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	05555555 	.word	0x05555555

080092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fd96 	bl	8007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <_Z41__static_initialization_and_destruction_0ii>:
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10a      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009312:	4293      	cmp	r3, r2
 8009314:	d105      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009316:	480c      	ldr	r0, [pc, #48]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009318:	f7fe fc98 	bl	8007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800931e:	f7fe fcbb 	bl	8007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800932e:	4293      	cmp	r3, r2
 8009330:	d105      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009334:	f7ff ffd4 	bl	80092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009338:	4803      	ldr	r0, [pc, #12]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800933a:	f000 f809 	bl	8009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	24000134 	.word	0x24000134
 800934c:	24000140 	.word	0x24000140

08009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009350:	b5b0      	push	{r4, r5, r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681c      	ldr	r4, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fb21 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8009368:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800936a:	461a      	mov	r2, r3
 800936c:	4629      	mov	r1, r5
 800936e:	4620      	mov	r0, r4
 8009370:	f7ff fb26 	bl	80089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>
      }
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd17 	bl	8007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bdb0      	pop	{r4, r5, r7, pc}

08009386 <_GLOBAL__sub_I__ZN10DigitalOut16all_digital_outsE>:
 8009386:	b580      	push	{r7, lr}
 8009388:	af00      	add	r7, sp, #0
 800938a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800938e:	2001      	movs	r0, #1
 8009390:	f7ff ffb4 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 8009394:	bd80      	pop	{r7, pc}

08009396 <_GLOBAL__sub_D__ZN10DigitalOut16all_digital_outsE>:
 8009396:	b580      	push	{r7, lr}
 8009398:	af00      	add	r7, sp, #0
 800939a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800939e:	2000      	movs	r0, #0
 80093a0:	f7ff ffac 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f9e1 	bl	8009776 <_ZNSaIP12InputCaptureED1Ev>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 f9c4 	bl	8009756 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>:
      vector() = default;
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ffeb 	bl	80093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f9f4 	bl	80097e8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 f9d2 	bl	80097be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ffeb 	bl	800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}

0800943e <_ZN13MovingAverageILm15EfEC1Ev>:
#include "Mini-STLIB/DataStructures/RingBuffer.hpp"
#include <stdint.h>
#include <cmath>

template<uint32_t BUFFER_SIZE, class BUFFER_TYPE>
class MovingAverage{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4618      	mov	r0, r3
 800944a:	f000 f9ed 	bl	8009828 <_ZN10RingBufferILm15EfEC1Ev>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4618      	mov	r0, r3
 8009452:	3708      	adds	r7, #8
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/InputCapture.hpp"

vector<InputCapture*> InputCapture::all_input_captures;
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;

InputCapture::InputCapture(TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8009458:	b590      	push	{r4, r7, lr}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
: timer(timer), channel(channel), pin(pin) {
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800946c:	601a      	str	r2, [r3, #0]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009474:	605a      	str	r2, [r3, #4]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800947c:	609a      	str	r2, [r3, #8]
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009484:	60da      	str	r2, [r3, #12]
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	3310      	adds	r3, #16
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff ffd7 	bl	800943e <_ZN13MovingAverageILm15EfEC1Ev>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	335c      	adds	r3, #92	; 0x5c
 8009494:	4618      	mov	r0, r3
 8009496:	f7ff ffd2 	bl	800943e <_ZN13MovingAverageILm15EfEC1Ev>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80094b2:	683a      	ldr	r2, [r7, #0]
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
	all_input_captures.push_back(this);
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	f107 0314 	add.w	r3, r7, #20
 80094c2:	4619      	mov	r1, r3
 80094c4:	4809      	ldr	r0, [pc, #36]	; (80094ec <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x94>)
 80094c6:	f000 f9d5 	bl	8009874 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>
	pin_to_input_capture[pin] = this;
 80094ca:	68fc      	ldr	r4, [r7, #12]
 80094cc:	463b      	mov	r3, r7
 80094ce:	4619      	mov	r1, r3
 80094d0:	4807      	ldr	r0, [pc, #28]	; (80094f0 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x98>)
 80094d2:	f000 f9e1 	bl	8009898 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80094d6:	4603      	mov	r3, r0
 80094d8:	601c      	str	r4, [r3, #0]
	pin->mode = INPUT_CAPTURE;
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	2202      	movs	r2, #2
 80094de:	719a      	strb	r2, [r3, #6]
}
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	4618      	mov	r0, r3
 80094e4:	371c      	adds	r7, #28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd90      	pop	{r4, r7, pc}
 80094ea:	bf00      	nop
 80094ec:	24000158 	.word	0x24000158
 80094f0:	24000164 	.word	0x24000164
 80094f4:	00000000 	.word	0x00000000

080094f8 <_ZN12InputCapture9interruptEv>:
	if(channel == TIM_CHANNEL_4)
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_4;
	return false;
}

void InputCapture::interrupt() {
 80094f8:	b580      	push	{r7, lr}
 80094fa:	b082      	sub	sp, #8
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
	has_interrupted = true;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0

	if(timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1){
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800950e:	7f1b      	ldrb	r3, [r3, #28]
 8009510:	2b01      	cmp	r3, #1
 8009512:	d133      	bne.n	800957c <_ZN12InputCapture9interruptEv+0x84>
		freq_count = HAL_TIM_ReadCapturedValue(timer, TIM_CHANNEL_1);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800951a:	2100      	movs	r1, #0
 800951c:	4618      	mov	r0, r3
 800951e:	f016 f9f7 	bl	801f910 <HAL_TIM_ReadCapturedValue>
 8009522:	4602      	mov	r2, r0
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		if(freq_count > 10){
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009530:	2b0a      	cmp	r3, #10
 8009532:	d923      	bls.n	800957c <_ZN12InputCapture9interruptEv+0x84>
			duty_count = HAL_TIM_ReadCapturedValue(timer, TIM_CHANNEL_2);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800953a:	2104      	movs	r1, #4
 800953c:	4618      	mov	r0, r3
 800953e:	f016 f9e7 	bl	801f910 <HAL_TIM_ReadCapturedValue>
 8009542:	4602      	mov	r2, r0
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
			duty = ((double) duty_count) / freq_count * 100;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009550:	ee07 3a90 	vmov	s15, r3
 8009554:	eeb8 5b67 	vcvt.f64.u32	d5, s15
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800955e:	ee07 3a90 	vmov	s15, r3
 8009562:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8009566:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800956a:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8009588 <_ZN12InputCapture9interruptEv+0x90>
 800956e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009572:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	edc3 7a30 	vstr	s15, [r3, #192]	; 0xc0

		}
	}
}
 800957c:	bf00      	nop
 800957e:	3708      	adds	r7, #8
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}
 8009584:	f3af 8000 	nop.w
 8009588:	00000000 	.word	0x00000000
 800958c:	40590000 	.word	0x40590000

08009590 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009590:	b480      	push	{r7}
 8009592:	b083      	sub	sp, #12
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr

080095a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 80095a6:	b590      	push	{r4, r7, lr}
 80095a8:	b083      	sub	sp, #12
 80095aa:	af00      	add	r7, sp, #0
 80095ac:	6078      	str	r0, [r7, #4]
 80095ae:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff ffed 	bl	8009590 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80095b6:	4603      	mov	r3, r0
 80095b8:	681c      	ldr	r4, [r3, #0]
 80095ba:	6838      	ldr	r0, [r7, #0]
 80095bc:	f7ff ffe8 	bl	8009590 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80095c0:	4603      	mov	r3, r0
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	429c      	cmp	r4, r3
 80095c6:	bf0c      	ite	eq
 80095c8:	2301      	moveq	r3, #1
 80095ca:	2300      	movne	r3, #0
 80095cc:	b2db      	uxtb	r3, r3
 80095ce:	4618      	mov	r0, r3
 80095d0:	370c      	adds	r7, #12
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd90      	pop	{r4, r7, pc}

080095d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80095d6:	b480      	push	{r7}
 80095d8:	b083      	sub	sp, #12
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
	++_M_current;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	1d1a      	adds	r2, r3, #4
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]
	return *this;
 80095e8:	687b      	ldr	r3, [r7, #4]
      }
 80095ea:	4618      	mov	r0, r3
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80095f6:	b480      	push	{r7}
 80095f8:	b083      	sub	sp, #12
 80095fa:	af00      	add	r7, sp, #0
 80095fc:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4618      	mov	r0, r3
 8009604:	370c      	adds	r7, #12
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
	...

08009610 <_ZN12InputCapture24start_all_input_capturesEv>:

void InputCapture::start_all_input_captures(){
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
	for(auto input_capture : InputCapture::all_input_captures)
 8009616:	4b15      	ldr	r3, [pc, #84]	; (800966c <_ZN12InputCapture24start_all_input_capturesEv+0x5c>)
 8009618:	60fb      	str	r3, [r7, #12]
 800961a:	68f8      	ldr	r0, [r7, #12]
 800961c:	f000 f99a 	bl	8009954 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009620:	4603      	mov	r3, r0
 8009622:	607b      	str	r3, [r7, #4]
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 f9a5 	bl	8009974 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800962a:	4603      	mov	r3, r0
 800962c:	603b      	str	r3, [r7, #0]
 800962e:	463a      	mov	r2, r7
 8009630:	1d3b      	adds	r3, r7, #4
 8009632:	4611      	mov	r1, r2
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff ffb6 	bl	80095a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800963a:	4603      	mov	r3, r0
 800963c:	f083 0301 	eor.w	r3, r3, #1
 8009640:	b2db      	uxtb	r3, r3
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00e      	beq.n	8009664 <_ZN12InputCapture24start_all_input_capturesEv+0x54>
 8009646:	1d3b      	adds	r3, r7, #4
 8009648:	4618      	mov	r0, r3
 800964a:	f7ff ffd4 	bl	80095f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 800964e:	4603      	mov	r3, r0
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	60bb      	str	r3, [r7, #8]
		input_capture->start();
 8009654:	68b8      	ldr	r0, [r7, #8]
 8009656:	f000 f847 	bl	80096e8 <_ZN12InputCapture5startEv>
	for(auto input_capture : InputCapture::all_input_captures)
 800965a:	1d3b      	adds	r3, r7, #4
 800965c:	4618      	mov	r0, r3
 800965e:	f7ff ffba 	bl	80095d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 8009662:	e7e4      	b.n	800962e <_ZN12InputCapture24start_all_input_capturesEv+0x1e>
}
 8009664:	bf00      	nop
 8009666:	3710      	adds	r7, #16
 8009668:	46bd      	mov	sp, r7
 800966a:	bd80      	pop	{r7, pc}
 800966c:	24000158 	.word	0x24000158

08009670 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>:

void InputCapture::interrupt_of_all_input_captures(TIM_HandleTypeDef* timer){
 8009670:	b580      	push	{r7, lr}
 8009672:	b086      	sub	sp, #24
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
	for(auto input_capture : InputCapture::all_input_captures){
 8009678:	4b1a      	ldr	r3, [pc, #104]	; (80096e4 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x74>)
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	6978      	ldr	r0, [r7, #20]
 800967e:	f000 f969 	bl	8009954 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009682:	4603      	mov	r3, r0
 8009684:	60fb      	str	r3, [r7, #12]
 8009686:	6978      	ldr	r0, [r7, #20]
 8009688:	f000 f974 	bl	8009974 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800968c:	4603      	mov	r3, r0
 800968e:	60bb      	str	r3, [r7, #8]
 8009690:	f107 0208 	add.w	r2, r7, #8
 8009694:	f107 030c 	add.w	r3, r7, #12
 8009698:	4611      	mov	r1, r2
 800969a:	4618      	mov	r0, r3
 800969c:	f7ff ff83 	bl	80095a6 <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80096a0:	4603      	mov	r3, r0
 80096a2:	f083 0301 	eor.w	r3, r3, #1
 80096a6:	b2db      	uxtb	r3, r3
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d016      	beq.n	80096da <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x6a>
 80096ac:	f107 030c 	add.w	r3, r7, #12
 80096b0:	4618      	mov	r0, r3
 80096b2:	f7ff ffa0 	bl	80095f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 80096b6:	4603      	mov	r3, r0
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	613b      	str	r3, [r7, #16]
		if(input_capture->timer == timer)
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	429a      	cmp	r2, r3
 80096c6:	d102      	bne.n	80096ce <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x5e>
			input_capture->interrupt();
 80096c8:	6938      	ldr	r0, [r7, #16]
 80096ca:	f7ff ff15 	bl	80094f8 <_ZN12InputCapture9interruptEv>
	for(auto input_capture : InputCapture::all_input_captures){
 80096ce:	f107 030c 	add.w	r3, r7, #12
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff ff7f 	bl	80095d6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 80096d8:	e7da      	b.n	8009690 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x20>
	}
}
 80096da:	bf00      	nop
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	24000158 	.word	0x24000158

080096e8 <_ZN12InputCapture5startEv>:

void InputCapture::reset(){
}

void InputCapture::start(){
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_IT(timer, TIM_CHANNEL_1);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80096f6:	2100      	movs	r1, #0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f015 fba1 	bl	801ee40 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start(timer, TIM_CHANNEL_2);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009704:	2104      	movs	r1, #4
 8009706:	4618      	mov	r0, r3
 8009708:	f015 fa88 	bl	801ec1c <HAL_TIM_IC_Start>
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <_ZN12InputCapture8get_dutyEv>:

void InputCapture::stop(){
}

float InputCapture::get_duty(){
 8009714:	b480      	push	{r7}
 8009716:	b083      	sub	sp, #12
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
	if(! has_interrupted)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f893 30b0 	ldrb.w	r3, [r3, #176]	; 0xb0
 8009722:	f083 0301 	eor.w	r3, r3, #1
 8009726:	b2db      	uxtb	r3, r3
 8009728:	2b00      	cmp	r3, #0
 800972a:	d004      	beq.n	8009736 <_ZN12InputCapture8get_dutyEv+0x22>
		duty = 0;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f04f 0200 	mov.w	r2, #0
 8009732:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	has_interrupted = false;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2200      	movs	r2, #0
 800973a:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	return duty;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009744:	ee07 3a90 	vmov	s15, r3
}
 8009748:	eeb0 0a67 	vmov.f32	s0, s15
 800974c:	370c      	adds	r7, #12
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr

08009756 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009756:	b580      	push	{r7, lr}
 8009758:	b082      	sub	sp, #8
 800975a:	af00      	add	r7, sp, #0
 800975c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	f000 f919 	bl	8009996 <_ZNSaIP12InputCaptureEC1Ev>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 f921 	bl	80099ae <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4618      	mov	r0, r3
 8009770:	3708      	adds	r7, #8
 8009772:	46bd      	mov	sp, r7
 8009774:	bd80      	pop	{r7, pc}

08009776 <_ZNSaIP12InputCaptureED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8009776:	b480      	push	{r7}
 8009778:	b083      	sub	sp, #12
 800977a:	af00      	add	r7, sp, #0
 800977c:	6078      	str	r0, [r7, #4]
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4618      	mov	r0, r3
 8009782:	370c      	adds	r7, #12
 8009784:	46bd      	mov	sp, r7
 8009786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978a:	4770      	bx	lr

0800978c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	689a      	ldr	r2, [r3, #8]
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	1ad3      	subs	r3, r2, r3
 80097a2:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80097a4:	461a      	mov	r2, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 f915 	bl	80099d6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      }
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4618      	mov	r0, r3
 80097b0:	f7ff fdf9 	bl	80093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80097be:	b580      	push	{r7, lr}
 80097c0:	b082      	sub	sp, #8
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f918 	bl	80099fc <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4618      	mov	r0, r3
 80097d0:	f7f7 fa0a 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	3304      	adds	r3, #4
 80097d8:	4618      	mov	r0, r3
 80097da:	f7f6 fdb5 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	4618      	mov	r0, r3
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>:
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4618      	mov	r0, r3
 80097f4:	370c      	adds	r7, #12
 80097f6:	46bd      	mov	sp, r7
 80097f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097fc:	4770      	bx	lr

080097fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80097fe:	b580      	push	{r7, lr}
 8009800:	b082      	sub	sp, #8
 8009802:	af00      	add	r7, sp, #0
 8009804:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	f000 f923 	bl	8009a52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800980c:	4603      	mov	r3, r0
 800980e:	4619      	mov	r1, r3
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 f8ff 	bl	8009a14 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4618      	mov	r0, r3
 800981a:	f7ff fdea 	bl	80093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4618      	mov	r0, r3
 8009822:	3708      	adds	r7, #8
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}

08009828 <_ZN10RingBufferILm15EfEC1Ev>:
		return value;
	}

public:

	RingBuffer(){
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2200      	movs	r2, #0
 800983a:	605a      	str	r2, [r3, #4]
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 8009842:	2300      	movs	r3, #0
 8009844:	60fb      	str	r3, [r7, #12]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2b0e      	cmp	r3, #14
 800984a:	dc0c      	bgt.n	8009866 <_ZN10RingBufferILm15EfEC1Ev+0x3e>
			buffer[i] = 0;
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	3302      	adds	r3, #2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	3304      	adds	r3, #4
 8009858:	f04f 0200 	mov.w	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < (int) BUFFER_SIZE; i++){
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3301      	adds	r3, #1
 8009862:	60fb      	str	r3, [r7, #12]
 8009864:	e7ef      	b.n	8009846 <_ZN10RingBufferILm15EfEC1Ev+0x1e>
		}
	}
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
 800987c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800987e:	6838      	ldr	r0, [r7, #0]
 8009880:	f000 f8f3 	bl	8009a6a <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>
 8009884:	4603      	mov	r3, r0
 8009886:	4619      	mov	r1, r3
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f8f9 	bl	8009a80 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800988e:	bf00      	nop
 8009890:	3708      	adds	r7, #8
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
	...

08009898 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8009898:	b590      	push	{r4, r7, lr}
 800989a:	b08b      	sub	sp, #44	; 0x2c
 800989c:	af02      	add	r7, sp, #8
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80098a2:	6839      	ldr	r1, [r7, #0]
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f91d 	bl	8009ae4 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80098aa:	4603      	mov	r3, r0
 80098ac:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 f927 	bl	8009b02 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80098b4:	4603      	mov	r3, r0
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	f107 020c 	add.w	r2, r7, #12
 80098bc:	f107 0308 	add.w	r3, r7, #8
 80098c0:	4611      	mov	r1, r2
 80098c2:	4618      	mov	r0, r3
 80098c4:	f000 f92a 	bl	8009b1c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 80098c8:	4603      	mov	r3, r0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d114      	bne.n	80098f8 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 f938 	bl	8009b44 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	681c      	ldr	r4, [r3, #0]
 80098d8:	f107 0308 	add.w	r3, r7, #8
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 f93e 	bl	8009b5e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 80098e2:	4603      	mov	r3, r0
 80098e4:	681a      	ldr	r2, [r3, #0]
 80098e6:	f107 0310 	add.w	r3, r7, #16
 80098ea:	4621      	mov	r1, r4
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7f7 faf4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80098f8:	2301      	movs	r3, #1
 80098fa:	e000      	b.n	80098fe <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80098fc:	2300      	movs	r3, #0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d01b      	beq.n	800993a <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009902:	687c      	ldr	r4, [r7, #4]
 8009904:	f107 0208 	add.w	r2, r7, #8
 8009908:	f107 0314 	add.w	r3, r7, #20
 800990c:	4611      	mov	r1, r2
 800990e:	4618      	mov	r0, r3
 8009910:	f000 f933 	bl	8009b7a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8009914:	f107 0318 	add.w	r3, r7, #24
 8009918:	6839      	ldr	r1, [r7, #0]
 800991a:	4618      	mov	r0, r3
 800991c:	f7f7 faf0 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009920:	f107 0218 	add.w	r2, r7, #24
 8009924:	f107 031c 	add.w	r3, r7, #28
 8009928:	9300      	str	r3, [sp, #0]
 800992a:	4613      	mov	r3, r2
 800992c:	4a08      	ldr	r2, [pc, #32]	; (8009950 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 800992e:	6979      	ldr	r1, [r7, #20]
 8009930:	4620      	mov	r0, r4
 8009932:	f000 f932 	bl	8009b9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8009936:	4603      	mov	r3, r0
 8009938:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800993a:	f107 0308 	add.w	r3, r7, #8
 800993e:	4618      	mov	r0, r3
 8009940:	f000 f90d 	bl	8009b5e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009944:	4603      	mov	r3, r0
 8009946:	3304      	adds	r3, #4
      }
 8009948:	4618      	mov	r0, r3
 800994a:	3724      	adds	r7, #36	; 0x24
 800994c:	46bd      	mov	sp, r7
 800994e:	bd90      	pop	{r4, r7, pc}
 8009950:	080210a4 	.word	0x080210a4

08009954 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800995c:	687a      	ldr	r2, [r7, #4]
 800995e:	f107 030c 	add.w	r3, r7, #12
 8009962:	4611      	mov	r1, r2
 8009964:	4618      	mov	r0, r3
 8009966:	f000 f956 	bl	8009c16 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	4618      	mov	r0, r3
 800996e:	3710      	adds	r7, #16
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}

08009974 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	1d1a      	adds	r2, r3, #4
 8009980:	f107 030c 	add.w	r3, r7, #12
 8009984:	4611      	mov	r1, r2
 8009986:	4618      	mov	r0, r3
 8009988:	f000 f945 	bl	8009c16 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	4618      	mov	r0, r3
 8009990:	3710      	adds	r7, #16
 8009992:	46bd      	mov	sp, r7
 8009994:	bd80      	pop	{r7, pc}

08009996 <_ZNSaIP12InputCaptureEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8009996:	b580      	push	{r7, lr}
 8009998:	b082      	sub	sp, #8
 800999a:	af00      	add	r7, sp, #0
 800999c:	6078      	str	r0, [r7, #4]
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f000 f949 	bl	8009c36 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4618      	mov	r0, r3
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}

080099ae <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80099ae:	b480      	push	{r7}
 80099b0:	b083      	sub	sp, #12
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	2200      	movs	r2, #0
 80099ba:	601a      	str	r2, [r3, #0]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2200      	movs	r2, #0
 80099c0:	605a      	str	r2, [r3, #4]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	609a      	str	r2, [r3, #8]
	{ }
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4618      	mov	r0, r3
 80099cc:	370c      	adds	r7, #12
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80099d6:	b580      	push	{r7, lr}
 80099d8:	b084      	sub	sp, #16
 80099da:	af00      	add	r7, sp, #0
 80099dc:	60f8      	str	r0, [r7, #12]
 80099de:	60b9      	str	r1, [r7, #8]
 80099e0:	607a      	str	r2, [r7, #4]
	if (__p)
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d005      	beq.n	80099f4 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	687a      	ldr	r2, [r7, #4]
 80099ec:	68b9      	ldr	r1, [r7, #8]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f000 f92c 	bl	8009c4c <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>
      }
 80099f4:	bf00      	nop
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}

080099fc <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f940 	bl	8009c8a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d012      	beq.n	8009a4a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8009a24:	6838      	ldr	r0, [r7, #0]
 8009a26:	f000 f93b 	bl	8009ca0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f7ff fff0 	bl	8009a14 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8009a34:	6838      	ldr	r0, [r7, #0]
 8009a36:	f000 f93f 	bl	8009cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009a3a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8009a3c:	6839      	ldr	r1, [r7, #0]
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 f946 	bl	8009cd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009a48:	e7e9      	b.n	8009a1e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8009a4a:	bf00      	nop
 8009a4c:	3710      	adds	r7, #16
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009a52:	b480      	push	{r7}
 8009a54:	b083      	sub	sp, #12
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	370c      	adds	r7, #12
 8009a62:	46bd      	mov	sp, r7
 8009a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a68:	4770      	bx	lr

08009a6a <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009a6a:	b480      	push	{r7}
 8009a6c:	b083      	sub	sp, #12
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	4618      	mov	r0, r3
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8009a80:	b5b0      	push	{r4, r5, r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
 8009a88:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	429a      	cmp	r2, r3
 8009a94:	d011      	beq.n	8009aba <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009a96:	687c      	ldr	r4, [r7, #4]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	685d      	ldr	r5, [r3, #4]
 8009a9c:	6838      	ldr	r0, [r7, #0]
 8009a9e:	f000 f928 	bl	8009cf2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	4629      	mov	r1, r5
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 f942 	bl	8009d32 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	1d1a      	adds	r2, r3, #4
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	605a      	str	r2, [r3, #4]
 8009ab8:	e00c      	b.n	8009ad4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009aba:	6878      	ldr	r0, [r7, #4]
 8009abc:	f7ff ff5a 	bl	8009974 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009ac0:	4604      	mov	r4, r0
 8009ac2:	6838      	ldr	r0, [r7, #0]
 8009ac4:	f000 f915 	bl	8009cf2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	461a      	mov	r2, r3
 8009acc:	4621      	mov	r1, r4
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f942 	bl	8009d58 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 f9bb 	bl	8009e50 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>
 8009ada:	4603      	mov	r3, r0
      }
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bdb0      	pop	{r4, r5, r7, pc}

08009ae4 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	6839      	ldr	r1, [r7, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 f9c7 	bl	8009e86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8009af8:	4603      	mov	r3, r0
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b082      	sub	sp, #8
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f000 f9d1 	bl	8009eb4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8009b12:	4603      	mov	r3, r0
 8009b14:	4618      	mov	r0, r3
 8009b16:	3708      	adds	r7, #8
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
 8009b24:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	bf0c      	ite	eq
 8009b32:	2301      	moveq	r3, #1
 8009b34:	2300      	movne	r3, #0
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	4618      	mov	r0, r3
 8009b3a:	370c      	adds	r7, #12
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr

08009b44 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8009b44:	b590      	push	{r4, r7, lr}
 8009b46:	b083      	sub	sp, #12
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f000 f9c1 	bl	8009ed6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8009b54:	bf00      	nop
 8009b56:	4620      	mov	r0, r4
 8009b58:	370c      	adds	r7, #12
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd90      	pop	{r4, r7, pc}

08009b5e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009b5e:	b580      	push	{r7, lr}
 8009b60:	b082      	sub	sp, #8
 8009b62:	af00      	add	r7, sp, #0
 8009b64:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f000 f9be 	bl	8009eec <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 8009b70:	4603      	mov	r3, r0
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
 8009b82:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	370c      	adds	r7, #12
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr

08009b9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009b9a:	b5b0      	push	{r4, r5, r7, lr}
 8009b9c:	b088      	sub	sp, #32
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	60f8      	str	r0, [r7, #12]
 8009ba2:	60b9      	str	r1, [r7, #8]
 8009ba4:	607a      	str	r2, [r7, #4]
 8009ba6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	f7f7 fb5c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009bae:	4604      	mov	r4, r0
 8009bb0:	6838      	ldr	r0, [r7, #0]
 8009bb2:	f7f7 fe46 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009bb6:	4605      	mov	r5, r0
 8009bb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009bba:	f7f7 fb6a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	462a      	mov	r2, r5
 8009bc2:	4621      	mov	r1, r4
 8009bc4:	68f8      	ldr	r0, [r7, #12]
 8009bc6:	f000 f99f 	bl	8009f08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8009bca:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8009bcc:	69f8      	ldr	r0, [r7, #28]
 8009bce:	f000 faed 	bl	800a1ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8009bd2:	4603      	mov	r3, r0
 8009bd4:	f107 0010 	add.w	r0, r7, #16
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	f000 f9b7 	bl	8009f4e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8009be6:	6939      	ldr	r1, [r7, #16]
 8009be8:	697a      	ldr	r2, [r7, #20]
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	68f8      	ldr	r0, [r7, #12]
 8009bee:	f000 faf0 	bl	800a1d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	e00b      	b.n	8009c0e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8009bf6:	69f9      	ldr	r1, [r7, #28]
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f000 f869 	bl	8009cd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8009bfe:	693a      	ldr	r2, [r7, #16]
 8009c00:	f107 0318 	add.w	r3, r7, #24
 8009c04:	4611      	mov	r1, r2
 8009c06:	4618      	mov	r0, r3
 8009c08:	f000 fb22 	bl	800a250 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009c0c:	69bb      	ldr	r3, [r7, #24]
      }
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3720      	adds	r7, #32
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bdb0      	pop	{r4, r5, r7, pc}

08009c16 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009c16:	b480      	push	{r7}
 8009c18:	b083      	sub	sp, #12
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
 8009c1e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	681a      	ldr	r2, [r3, #0]
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	601a      	str	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	370c      	adds	r7, #12
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009c36:	b480      	push	{r7}
 8009c38:	b083      	sub	sp, #12
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	6078      	str	r0, [r7, #4]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4618      	mov	r0, r3
 8009c42:	370c      	adds	r7, #12
 8009c44:	46bd      	mov	sp, r7
 8009c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4a:	4770      	bx	lr

08009c4c <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b088      	sub	sp, #32
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	60f8      	str	r0, [r7, #12]
 8009c54:	60b9      	str	r1, [r7, #8]
 8009c56:	607a      	str	r2, [r7, #4]
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	61fb      	str	r3, [r7, #28]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	61bb      	str	r3, [r7, #24]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009c64:	f7f6 fb5c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009c6e:	69b8      	ldr	r0, [r7, #24]
 8009c70:	f016 fe6a 	bl	8020948 <_ZdlPv>
	    return;
 8009c74:	e005      	b.n	8009c82 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8009c76:	697a      	ldr	r2, [r7, #20]
 8009c78:	69b9      	ldr	r1, [r7, #24]
 8009c7a:	69f8      	ldr	r0, [r7, #28]
 8009c7c:	f000 fd64 	bl	800a748 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8009c80:	bf00      	nop
 8009c82:	bf00      	nop
 8009c84:	3720      	adds	r7, #32
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}

08009c8a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009c8a:	b480      	push	{r7}
 8009c8c:	b083      	sub	sp, #12
 8009c8e:	af00      	add	r7, sp, #0
 8009c90:	6078      	str	r0, [r7, #4]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4618      	mov	r0, r3
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	4618      	mov	r0, r3
 8009cae:	370c      	adds	r7, #12
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb6:	4770      	bx	lr

08009cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009cb8:	b480      	push	{r7}
 8009cba:	b083      	sub	sp, #12
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	689b      	ldr	r3, [r3, #8]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8009cda:	6839      	ldr	r1, [r7, #0]
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fac6 	bl	800a26e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8009ce2:	6839      	ldr	r1, [r7, #0]
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fad7 	bl	800a298 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8009cea:	bf00      	nop
 8009cec:	3708      	adds	r7, #8
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}

08009cf2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009cf2:	b480      	push	{r7}
 8009cf4:	b083      	sub	sp, #12
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009d08:	b590      	push	{r4, r7, lr}
 8009d0a:	b083      	sub	sp, #12
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009d12:	6838      	ldr	r0, [r7, #0]
 8009d14:	f7ff ffed 	bl	8009cf2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	681c      	ldr	r4, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	2004      	movs	r0, #4
 8009d22:	f7f6 fb05 	bl	8000330 <_ZnwjPv>
 8009d26:	4603      	mov	r3, r0
 8009d28:	601c      	str	r4, [r3, #0]
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	370c      	adds	r7, #12
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd90      	pop	{r4, r7, pc}

08009d32 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	60f8      	str	r0, [r7, #12]
 8009d3a:	60b9      	str	r1, [r7, #8]
 8009d3c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f7ff ffd7 	bl	8009cf2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009d44:	4603      	mov	r3, r0
 8009d46:	4619      	mov	r1, r3
 8009d48:	68b8      	ldr	r0, [r7, #8]
 8009d4a:	f7ff ffdd 	bl	8009d08 <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
	...

08009d58 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009d58:	b5b0      	push	{r4, r5, r7, lr}
 8009d5a:	b08c      	sub	sp, #48	; 0x30
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009d64:	4a39      	ldr	r2, [pc, #228]	; (8009e4c <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8009d66:	2101      	movs	r1, #1
 8009d68:	68f8      	ldr	r0, [r7, #12]
 8009d6a:	f000 faa7 	bl	800a2bc <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>
 8009d6e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f7ff fde9 	bl	8009954 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009d82:	4603      	mov	r3, r0
 8009d84:	617b      	str	r3, [r7, #20]
 8009d86:	f107 0214 	add.w	r2, r7, #20
 8009d8a:	f107 0308 	add.w	r3, r7, #8
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4618      	mov	r0, r3
 8009d92:	f000 fada 	bl	800a34a <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009d96:	4603      	mov	r3, r0
 8009d98:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d9e:	4618      	mov	r0, r3
 8009da0:	f000 fae8 	bl	800a374 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>
 8009da4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009daa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009db0:	69fa      	ldr	r2, [r7, #28]
 8009db2:	18d5      	adds	r5, r2, r3
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f7ff ff9c 	bl	8009cf2 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	461a      	mov	r2, r3
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f7ff ffb6 	bl	8009d32 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009dca:	f107 0308 	add.w	r3, r7, #8
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fbde 	bl	8009590 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f000 faf2 	bl	800a3c4 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009de0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009de2:	69fa      	ldr	r2, [r7, #28]
 8009de4:	4621      	mov	r1, r4
 8009de6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009de8:	f000 fad8 	bl	800a39c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009dec:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	3304      	adds	r3, #4
 8009df2:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009df4:	f107 0308 	add.w	r3, r7, #8
 8009df8:	4618      	mov	r0, r3
 8009dfa:	f7ff fbc9 	bl	8009590 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f000 fadd 	bl	800a3c4 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009e0a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009e0c:	69ba      	ldr	r2, [r7, #24]
 8009e0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 fac3 	bl	800a39c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009e16:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8009e18:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	689a      	ldr	r2, [r3, #8]
 8009e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8009e24:	461a      	mov	r2, r3
 8009e26:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009e28:	f7ff fdd5 	bl	80099d6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	69ba      	ldr	r2, [r7, #24]
 8009e36:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	69fa      	ldr	r2, [r7, #28]
 8009e3e:	441a      	add	r2, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	609a      	str	r2, [r3, #8]
    }
 8009e44:	bf00      	nop
 8009e46:	3730      	adds	r7, #48	; 0x30
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e4c:	08020fe4 	.word	0x08020fe4

08009e50 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f7ff fd8b 	bl	8009974 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	60fb      	str	r3, [r7, #12]
 8009e62:	f107 030c 	add.w	r3, r7, #12
 8009e66:	2101      	movs	r1, #1
 8009e68:	4618      	mov	r0, r3
 8009e6a:	f000 fac4 	bl	800a3f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>
 8009e6e:	4603      	mov	r3, r0
 8009e70:	60bb      	str	r3, [r7, #8]
 8009e72:	f107 0308 	add.w	r3, r7, #8
 8009e76:	4618      	mov	r0, r3
 8009e78:	f7ff fbbd 	bl	80095f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 8009e7c:	4603      	mov	r3, r0
      }
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3710      	adds	r7, #16
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8009e86:	b590      	push	{r4, r7, lr}
 8009e88:	b083      	sub	sp, #12
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f7ff fdde 	bl	8009a52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8009e96:	4604      	mov	r4, r0
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fac5 	bl	800a428 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 facb 	bl	800a440 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	4618      	mov	r0, r3
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd90      	pop	{r4, r7, pc}

08009eb4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	1d1a      	adds	r2, r3, #4
 8009ec0:	f107 030c 	add.w	r3, r7, #12
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 f9c2 	bl	800a250 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	4618      	mov	r0, r3
 8009ed0:	3710      	adds	r7, #16
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8009ed6:	b480      	push	{r7}
 8009ed8:	b083      	sub	sp, #12
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8009ede:	bf00      	nop
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	370c      	adds	r7, #12
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr()
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3310      	adds	r3, #16
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fad4 	bl	800a4a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 8009efe:	4603      	mov	r3, r0
 8009f00:	4618      	mov	r0, r3
 8009f02:	3708      	adds	r7, #8
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009f08:	b5b0      	push	{r4, r5, r7, lr}
 8009f0a:	b088      	sub	sp, #32
 8009f0c:	af02      	add	r7, sp, #8
 8009f0e:	60f8      	str	r0, [r7, #12]
 8009f10:	60b9      	str	r1, [r7, #8]
 8009f12:	607a      	str	r2, [r7, #4]
 8009f14:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f000 fad1 	bl	800a4be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8009f1c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8009f1e:	68b8      	ldr	r0, [r7, #8]
 8009f20:	f7f7 f9a1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009f24:	4604      	mov	r4, r0
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7f7 fc8b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009f2c:	4605      	mov	r5, r0
 8009f2e:	6838      	ldr	r0, [r7, #0]
 8009f30:	f7f7 f9af 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009f34:	4603      	mov	r3, r0
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	462b      	mov	r3, r5
 8009f3a:	4622      	mov	r2, r4
 8009f3c:	6979      	ldr	r1, [r7, #20]
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 face 	bl	800a4e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8009f44:	697b      	ldr	r3, [r7, #20]
	}
 8009f46:	4618      	mov	r0, r3
 8009f48:	3718      	adds	r7, #24
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bdb0      	pop	{r4, r5, r7, pc}

08009f4e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009f4e:	b5b0      	push	{r4, r5, r7, lr}
 8009f50:	b08c      	sub	sp, #48	; 0x30
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
 8009f5a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8009f5c:	1d3b      	adds	r3, r7, #4
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 faeb 	bl	800a53a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>
 8009f64:	4603      	mov	r3, r0
 8009f66:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8009f68:	69bc      	ldr	r4, [r7, #24]
 8009f6a:	68b8      	ldr	r0, [r7, #8]
 8009f6c:	f000 fa5c 	bl	800a428 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8009f70:	4603      	mov	r3, r0
 8009f72:	429c      	cmp	r4, r3
 8009f74:	bf0c      	ite	eq
 8009f76:	2301      	moveq	r3, #1
 8009f78:	2300      	movne	r3, #0
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d032      	beq.n	8009fe6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8009f80:	68b8      	ldr	r0, [r7, #8]
 8009f82:	f000 faeb 	bl	800a55c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8009f86:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d015      	beq.n	8009fb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8009f8c:	68bc      	ldr	r4, [r7, #8]
 8009f8e:	68b8      	ldr	r0, [r7, #8]
 8009f90:	f000 faf0 	bl	800a574 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8009f94:	4603      	mov	r3, r0
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4618      	mov	r0, r3
 8009f9a:	f000 faf7 	bl	800a58c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	6819      	ldr	r1, [r3, #0]
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4620      	mov	r0, r4
 8009faa:	f7f6 ff96 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d001      	beq.n	8009fb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8009fb4:	2301      	movs	r3, #1
 8009fb6:	e000      	b.n	8009fba <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8009fb8:	2300      	movs	r3, #0
	  if (size() > 0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d00c      	beq.n	8009fd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	61fb      	str	r3, [r7, #28]
 8009fc2:	68b8      	ldr	r0, [r7, #8]
 8009fc4:	f000 fad6 	bl	800a574 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8009fc8:	4602      	mov	r2, r0
 8009fca:	f107 031c 	add.w	r3, r7, #28
 8009fce:	4619      	mov	r1, r3
 8009fd0:	68f8      	ldr	r0, [r7, #12]
 8009fd2:	f7f7 ff69 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8009fd6:	e0e5      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	68b9      	ldr	r1, [r7, #8]
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f000 fae0 	bl	800a5a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8009fe4:	e0de      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8009fe6:	68bc      	ldr	r4, [r7, #8]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	681d      	ldr	r5, [r3, #0]
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 facc 	bl	800a58c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	461a      	mov	r2, r3
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f7f6 ff6c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d059      	beq.n	800a0bc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800a00c:	69bc      	ldr	r4, [r7, #24]
 800a00e:	68b8      	ldr	r0, [r7, #8]
 800a010:	f000 fb52 	bl	800a6b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a014:	4603      	mov	r3, r0
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	429c      	cmp	r4, r3
 800a01a:	bf0c      	ite	eq
 800a01c:	2301      	moveq	r3, #1
 800a01e:	2300      	movne	r3, #0
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00d      	beq.n	800a042 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 800a026:	68b8      	ldr	r0, [r7, #8]
 800a028:	f000 fb46 	bl	800a6b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a02c:	4604      	mov	r4, r0
 800a02e:	68b8      	ldr	r0, [r7, #8]
 800a030:	f000 fb42 	bl	800a6b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a034:	4603      	mov	r3, r0
 800a036:	461a      	mov	r2, r3
 800a038:	4621      	mov	r1, r4
 800a03a:	68f8      	ldr	r0, [r7, #12]
 800a03c:	f7f7 ffe0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a040:	e0b0      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800a042:	68bc      	ldr	r4, [r7, #8]
 800a044:	f107 0314 	add.w	r3, r7, #20
 800a048:	4618      	mov	r0, r3
 800a04a:	f000 fb41 	bl	800a6d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
 800a04e:	4603      	mov	r3, r0
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4618      	mov	r0, r3
 800a054:	f000 fa9a 	bl	800a58c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a058:	4603      	mov	r3, r0
 800a05a:	6819      	ldr	r1, [r3, #0]
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	461a      	mov	r2, r3
 800a062:	4620      	mov	r0, r4
 800a064:	f7f6 ff39 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d01f      	beq.n	800a0ae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff fe15 	bl	8009ca0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	bf0c      	ite	eq
 800a07c:	2301      	moveq	r3, #1
 800a07e:	2300      	movne	r3, #0
 800a080:	b2db      	uxtb	r3, r3
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00a      	beq.n	800a09c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 800a086:	2300      	movs	r3, #0
 800a088:	623b      	str	r3, [r7, #32]
 800a08a:	f107 0214 	add.w	r2, r7, #20
 800a08e:	f107 0320 	add.w	r3, r7, #32
 800a092:	4619      	mov	r1, r3
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	f7f7 ff07 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a09a:	e083      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800a09c:	f107 0218 	add.w	r2, r7, #24
 800a0a0:	f107 0318 	add.w	r3, r7, #24
 800a0a4:	4619      	mov	r1, r3
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f7f7 ffaa 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a0ac:	e07a      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	68b9      	ldr	r1, [r7, #8]
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	f000 fa75 	bl	800a5a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a0ba:	e073      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800a0bc:	68bc      	ldr	r4, [r7, #8]
 800a0be:	69bb      	ldr	r3, [r7, #24]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f000 fa63 	bl	800a58c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	6819      	ldr	r1, [r3, #0]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	f7f6 ff02 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a0d6:	4603      	mov	r3, r0
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d059      	beq.n	800a190 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800a0e0:	69bc      	ldr	r4, [r7, #24]
 800a0e2:	68b8      	ldr	r0, [r7, #8]
 800a0e4:	f000 fa46 	bl	800a574 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	429c      	cmp	r4, r3
 800a0ee:	bf0c      	ite	eq
 800a0f0:	2301      	moveq	r3, #1
 800a0f2:	2300      	movne	r3, #0
 800a0f4:	b2db      	uxtb	r3, r3
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d00c      	beq.n	800a114 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	627b      	str	r3, [r7, #36]	; 0x24
 800a0fe:	68b8      	ldr	r0, [r7, #8]
 800a100:	f000 fa38 	bl	800a574 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a104:	4602      	mov	r2, r0
 800a106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a10a:	4619      	mov	r1, r3
 800a10c:	68f8      	ldr	r0, [r7, #12]
 800a10e:	f7f7 fecb 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a112:	e047      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800a114:	68bc      	ldr	r4, [r7, #8]
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681d      	ldr	r5, [r3, #0]
 800a11a:	f107 0310 	add.w	r3, r7, #16
 800a11e:	4618      	mov	r0, r3
 800a120:	f000 fae7 	bl	800a6f2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>
 800a124:	4603      	mov	r3, r0
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4618      	mov	r0, r3
 800a12a:	f000 fa2f 	bl	800a58c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a12e:	4603      	mov	r3, r0
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	461a      	mov	r2, r3
 800a134:	4629      	mov	r1, r5
 800a136:	4620      	mov	r0, r4
 800a138:	f7f6 fecf 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d01f      	beq.n	800a182 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 800a142:	69bb      	ldr	r3, [r7, #24]
 800a144:	4618      	mov	r0, r3
 800a146:	f7ff fdab 	bl	8009ca0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a14a:	4603      	mov	r3, r0
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	bf0c      	ite	eq
 800a150:	2301      	moveq	r3, #1
 800a152:	2300      	movne	r3, #0
 800a154:	b2db      	uxtb	r3, r3
 800a156:	2b00      	cmp	r3, #0
 800a158:	d00a      	beq.n	800a170 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800a15a:	2300      	movs	r3, #0
 800a15c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a15e:	f107 0218 	add.w	r2, r7, #24
 800a162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a166:	4619      	mov	r1, r3
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f7f7 fe9d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a16e:	e019      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 800a170:	f107 0210 	add.w	r2, r7, #16
 800a174:	f107 0310 	add.w	r3, r7, #16
 800a178:	4619      	mov	r1, r3
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f7f7 ff40 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a180:	e010      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	683a      	ldr	r2, [r7, #0]
 800a186:	68b9      	ldr	r1, [r7, #8]
 800a188:	4618      	mov	r0, r3
 800a18a:	f000 fa0b 	bl	800a5a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a18e:	e009      	b.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 800a190:	2300      	movs	r3, #0
 800a192:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a194:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a198:	f107 0318 	add.w	r3, r7, #24
 800a19c:	4619      	mov	r1, r3
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7f7 ff69 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	3730      	adds	r7, #48	; 0x30
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bdb0      	pop	{r4, r5, r7, pc}

0800a1ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b084      	sub	sp, #16
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 faad 	bl	800a714 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a1ba:	4602      	mov	r2, r0
 800a1bc:	f107 030c 	add.w	r3, r7, #12
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 fab4 	bl	800a730 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>
 800a1c8:	4603      	mov	r3, r0
      }
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3710      	adds	r7, #16
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}

0800a1d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a1d2:	b5b0      	push	{r4, r5, r7, lr}
 800a1d4:	b086      	sub	sp, #24
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
 800a1de:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d119      	bne.n	800a21a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f000 f91e 	bl	800a428 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a1ec:	4602      	mov	r2, r0
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d012      	beq.n	800a21a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 800a1f4:	68fc      	ldr	r4, [r7, #12]
 800a1f6:	6838      	ldr	r0, [r7, #0]
 800a1f8:	f7ff ffd8 	bl	800a1ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 f9c3 	bl	800a58c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a206:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	461a      	mov	r2, r3
 800a20c:	4629      	mov	r1, r5
 800a20e:	4620      	mov	r0, r4
 800a210:	f7f6 fe63 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800a21a:	2301      	movs	r3, #1
 800a21c:	e000      	b.n	800a220 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 800a21e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a220:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800a226:	7df8      	ldrb	r0, [r7, #23]
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	6839      	ldr	r1, [r7, #0]
 800a22c:	f016 fbfc 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	695b      	ldr	r3, [r3, #20]
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800a23a:	f107 0310 	add.w	r3, r7, #16
 800a23e:	6839      	ldr	r1, [r7, #0]
 800a240:	4618      	mov	r0, r3
 800a242:	f000 f805 	bl	800a250 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a246:	693b      	ldr	r3, [r7, #16]
    }
 800a248:	4618      	mov	r0, r3
 800a24a:	3718      	adds	r7, #24
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bdb0      	pop	{r4, r5, r7, pc}

0800a250 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a250:	b480      	push	{r7}
 800a252:	b083      	sub	sp, #12
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	683a      	ldr	r2, [r7, #0]
 800a25e:	601a      	str	r2, [r3, #0]
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4618      	mov	r0, r3
 800a264:	370c      	adds	r7, #12
 800a266:	46bd      	mov	sp, r7
 800a268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26c:	4770      	bx	lr

0800a26e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a26e:	b590      	push	{r4, r7, lr}
 800a270:	b083      	sub	sp, #12
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
 800a276:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f000 fa74 	bl	800a766 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a27e:	4604      	mov	r4, r0
 800a280:	6838      	ldr	r0, [r7, #0]
 800a282:	f7ff fe33 	bl	8009eec <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a286:	4603      	mov	r3, r0
 800a288:	4619      	mov	r1, r3
 800a28a:	4620      	mov	r0, r4
 800a28c:	f000 fa76 	bl	800a77c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>
      }
 800a290:	bf00      	nop
 800a292:	370c      	adds	r7, #12
 800a294:	46bd      	mov	sp, r7
 800a296:	bd90      	pop	{r4, r7, pc}

0800a298 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a298:	b580      	push	{r7, lr}
 800a29a:	b082      	sub	sp, #8
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
 800a2a0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 fa5f 	bl	800a766 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	6839      	ldr	r1, [r7, #0]
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f000 fa70 	bl	800a794 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>
 800a2b4:	bf00      	nop
 800a2b6:	3708      	adds	r7, #8
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	bd80      	pop	{r7, pc}

0800a2bc <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a2bc:	b590      	push	{r4, r7, lr}
 800a2be:	b087      	sub	sp, #28
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	60f8      	str	r0, [r7, #12]
 800a2c4:	60b9      	str	r1, [r7, #8]
 800a2c6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a2c8:	68f8      	ldr	r0, [r7, #12]
 800a2ca:	f000 fa82 	bl	800a7d2 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f000 fa8f 	bl	800a7f4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	1ae2      	subs	r2, r4, r3
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	bf34      	ite	cc
 800a2e0:	2301      	movcc	r3, #1
 800a2e2:	2300      	movcs	r3, #0
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d002      	beq.n	800a2f0 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f016 fbfa 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a2f0:	68f8      	ldr	r0, [r7, #12]
 800a2f2:	f000 fa7f 	bl	800a7f4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	68f8      	ldr	r0, [r7, #12]
 800a2fa:	f000 fa7b 	bl	800a7f4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a2fe:	4603      	mov	r3, r0
 800a300:	613b      	str	r3, [r7, #16]
 800a302:	f107 0208 	add.w	r2, r7, #8
 800a306:	f107 0310 	add.w	r3, r7, #16
 800a30a:	4611      	mov	r1, r2
 800a30c:	4618      	mov	r0, r3
 800a30e:	f7f8 faa0 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800a312:	4603      	mov	r3, r0
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	4423      	add	r3, r4
 800a318:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a31a:	68f8      	ldr	r0, [r7, #12]
 800a31c:	f000 fa6a 	bl	800a7f4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a320:	4602      	mov	r2, r0
 800a322:	697b      	ldr	r3, [r7, #20]
 800a324:	4293      	cmp	r3, r2
 800a326:	d306      	bcc.n	800a336 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800a328:	68f8      	ldr	r0, [r7, #12]
 800a32a:	f000 fa52 	bl	800a7d2 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a32e:	4602      	mov	r2, r0
 800a330:	697b      	ldr	r3, [r7, #20]
 800a332:	4293      	cmp	r3, r2
 800a334:	d904      	bls.n	800a340 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x84>
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f000 fa4b 	bl	800a7d2 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a33c:	4603      	mov	r3, r0
 800a33e:	e000      	b.n	800a342 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x86>
 800a340:	697b      	ldr	r3, [r7, #20]
      }
 800a342:	4618      	mov	r0, r3
 800a344:	371c      	adds	r7, #28
 800a346:	46bd      	mov	sp, r7
 800a348:	bd90      	pop	{r4, r7, pc}

0800a34a <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a34a:	b590      	push	{r4, r7, lr}
 800a34c:	b083      	sub	sp, #12
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f7ff f91b 	bl	8009590 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a35a:	4603      	mov	r3, r0
 800a35c:	681c      	ldr	r4, [r3, #0]
 800a35e:	6838      	ldr	r0, [r7, #0]
 800a360:	f7ff f916 	bl	8009590 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a364:	4603      	mov	r3, r0
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	1ae3      	subs	r3, r4, r3
 800a36a:	109b      	asrs	r3, r3, #2
 800a36c:	4618      	mov	r0, r3
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	bd90      	pop	{r4, r7, pc}

0800a374 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d006      	beq.n	800a392 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x1e>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	6839      	ldr	r1, [r7, #0]
 800a388:	4618      	mov	r0, r3
 800a38a:	f000 fa43 	bl	800a814 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>
 800a38e:	4603      	mov	r3, r0
 800a390:	e000      	b.n	800a394 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x20>
 800a392:	2300      	movs	r3, #0
      }
 800a394:	4618      	mov	r0, r3
 800a396:	3708      	adds	r7, #8
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a39c:	b590      	push	{r4, r7, lr}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af02      	add	r7, sp, #8
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	60b9      	str	r1, [r7, #8]
 800a3a6:	607a      	str	r2, [r7, #4]
 800a3a8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a3aa:	f88d 4000 	strb.w	r4, [sp]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	687a      	ldr	r2, [r7, #4]
 800a3b2:	68b9      	ldr	r1, [r7, #8]
 800a3b4:	68f8      	ldr	r0, [r7, #12]
 800a3b6:	f000 fa4d 	bl	800a854 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800a3ba:	4603      	mov	r3, r0
      }
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd90      	pop	{r4, r7, pc}

0800a3c4 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	370c      	adds	r7, #12
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d8:	4770      	bx	lr

0800a3da <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a3da:	b580      	push	{r7, lr}
 800a3dc:	b084      	sub	sp, #16
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	60f8      	str	r0, [r7, #12]
 800a3e2:	60b9      	str	r1, [r7, #8]
 800a3e4:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a3e6:	68b9      	ldr	r1, [r7, #8]
 800a3e8:	68f8      	ldr	r0, [r7, #12]
 800a3ea:	f000 fa4f 	bl	800a88c <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>
    }
 800a3ee:	bf00      	nop
 800a3f0:	3710      	adds	r7, #16
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}

0800a3f6 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a3f6:	b580      	push	{r7, lr}
 800a3f8:	b084      	sub	sp, #16
 800a3fa:	af00      	add	r7, sp, #0
 800a3fc:	6078      	str	r0, [r7, #4]
 800a3fe:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	425b      	negs	r3, r3
 800a40a:	4413      	add	r3, r2
 800a40c:	60fb      	str	r3, [r7, #12]
 800a40e:	f107 020c 	add.w	r2, r7, #12
 800a412:	f107 0308 	add.w	r3, r7, #8
 800a416:	4611      	mov	r1, r2
 800a418:	4618      	mov	r0, r3
 800a41a:	f7ff fbfc 	bl	8009c16 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a41e:	68bb      	ldr	r3, [r7, #8]
 800a420:	4618      	mov	r0, r3
 800a422:	3710      	adds	r7, #16
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3304      	adds	r3, #4
 800a434:	4618      	mov	r0, r3
 800a436:	370c      	adds	r7, #12
 800a438:	46bd      	mov	sp, r7
 800a43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43e:	4770      	bx	lr

0800a440 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a440:	b590      	push	{r4, r7, lr}
 800a442:	b087      	sub	sp, #28
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d01d      	beq.n	800a490 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800a454:	68fc      	ldr	r4, [r7, #12]
 800a456:	68b8      	ldr	r0, [r7, #8]
 800a458:	f7ff fea8 	bl	800a1ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a45c:	4603      	mov	r3, r0
 800a45e:	6819      	ldr	r1, [r3, #0]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	461a      	mov	r2, r3
 800a466:	4620      	mov	r0, r4
 800a468:	f7f6 fd37 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a46c:	4603      	mov	r3, r0
 800a46e:	f083 0301 	eor.w	r3, r3, #1
 800a472:	b2db      	uxtb	r3, r3
 800a474:	2b00      	cmp	r3, #0
 800a476:	d006      	beq.n	800a486 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800a478:	68bb      	ldr	r3, [r7, #8]
 800a47a:	607b      	str	r3, [r7, #4]
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f7ff fc1b 	bl	8009cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a482:	60b8      	str	r0, [r7, #8]
 800a484:	e7e3      	b.n	800a44e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 800a486:	68b8      	ldr	r0, [r7, #8]
 800a488:	f7ff fc0a 	bl	8009ca0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a48c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800a48e:	e7de      	b.n	800a44e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 800a490:	f107 0314 	add.w	r3, r7, #20
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	4618      	mov	r0, r3
 800a498:	f7ff feda 	bl	800a250 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a49c:	697b      	ldr	r3, [r7, #20]
    }
 800a49e:	4618      	mov	r0, r3
 800a4a0:	371c      	adds	r7, #28
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd90      	pop	{r4, r7, pc}

0800a4a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() noexcept
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f000 fa02 	bl	800a8b8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}

0800a4be <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800a4be:	b580      	push	{r7, lr}
 800a4c0:	b082      	sub	sp, #8
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f94d 	bl	800a766 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2101      	movs	r1, #1
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	f000 f9fc 	bl	800a8ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	4618      	mov	r0, r3
 800a4da:	3708      	adds	r7, #8
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	bd80      	pop	{r7, pc}

0800a4e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a4e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4e4:	b086      	sub	sp, #24
 800a4e6:	af02      	add	r7, sp, #8
 800a4e8:	60f8      	str	r0, [r7, #12]
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	2018      	movs	r0, #24
 800a4f6:	f7f5 ff1b 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a4fa:	68f8      	ldr	r0, [r7, #12]
 800a4fc:	f000 f933 	bl	800a766 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a500:	4604      	mov	r4, r0
 800a502:	68b8      	ldr	r0, [r7, #8]
 800a504:	f7ff fcf2 	bl	8009eec <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a508:	4605      	mov	r5, r0
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7f6 feab 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a510:	4606      	mov	r6, r0
 800a512:	6838      	ldr	r0, [r7, #0]
 800a514:	f7f7 f995 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a518:	4680      	mov	r8, r0
 800a51a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a51c:	f7f6 feb9 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a520:	4603      	mov	r3, r0
 800a522:	9300      	str	r3, [sp, #0]
 800a524:	4643      	mov	r3, r8
 800a526:	4632      	mov	r2, r6
 800a528:	4629      	mov	r1, r5
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 fa1c 	bl	800a968 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 800a530:	bf00      	nop
 800a532:	3710      	adds	r7, #16
 800a534:	46bd      	mov	sp, r7
 800a536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a53a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800a53a:	b580      	push	{r7, lr}
 800a53c:	b084      	sub	sp, #16
 800a53e:	af00      	add	r7, sp, #0
 800a540:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	f107 030c 	add.w	r3, r7, #12
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f7ff fe7f 	bl	800a250 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	4618      	mov	r0, r3
 800a556:	3710      	adds	r7, #16
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	695b      	ldr	r3, [r3, #20]
 800a568:	4618      	mov	r0, r3
 800a56a:	370c      	adds	r7, #12
 800a56c:	46bd      	mov	sp, r7
 800a56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a572:	4770      	bx	lr

0800a574 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800a574:	b480      	push	{r7}
 800a576:	b083      	sub	sp, #12
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	3310      	adds	r3, #16
 800a580:	4618      	mov	r0, r3
 800a582:	370c      	adds	r7, #12
 800a584:	46bd      	mov	sp, r7
 800a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a58a:	4770      	bx	lr

0800a58c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f7ff fe09 	bl	800a1ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a59a:	4603      	mov	r3, r0
 800a59c:	4618      	mov	r0, r3
 800a59e:	3708      	adds	r7, #8
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a5a4:	b5b0      	push	{r4, r5, r7, lr}
 800a5a6:	b08a      	sub	sp, #40	; 0x28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800a5b0:	68b8      	ldr	r0, [r7, #8]
 800a5b2:	f7ff fa4e 	bl	8009a52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800a5ba:	68b8      	ldr	r0, [r7, #8]
 800a5bc:	f7ff ff34 	bl	800a428 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800a5ca:	69bb      	ldr	r3, [r7, #24]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d023      	beq.n	800a618 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800a5d4:	68bc      	ldr	r4, [r7, #8]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681d      	ldr	r5, [r3, #0]
 800a5da:	69bb      	ldr	r3, [r7, #24]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fde5 	bl	800a1ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f7f6 fc75 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800a5f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d005      	beq.n	800a60a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800a5fe:	69bb      	ldr	r3, [r7, #24]
 800a600:	4618      	mov	r0, r3
 800a602:	f7ff fb59 	bl	8009cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a606:	4603      	mov	r3, r0
 800a608:	e004      	b.n	800a614 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800a60a:	69bb      	ldr	r3, [r7, #24]
 800a60c:	4618      	mov	r0, r3
 800a60e:	f7ff fb47 	bl	8009ca0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a612:	4603      	mov	r3, r0
 800a614:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800a616:	e7d8      	b.n	800a5ca <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	f107 0310 	add.w	r3, r7, #16
 800a61e:	4611      	mov	r1, r2
 800a620:	4618      	mov	r0, r3
 800a622:	f7ff fe15 	bl	800a250 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800a626:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d01d      	beq.n	800a66a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800a62e:	68b8      	ldr	r0, [r7, #8]
 800a630:	f000 f9b6 	bl	800a9a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800a634:	4603      	mov	r3, r0
 800a636:	61fb      	str	r3, [r7, #28]
 800a638:	f107 021c 	add.w	r2, r7, #28
 800a63c:	f107 0310 	add.w	r3, r7, #16
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fa6a 	bl	8009b1c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d008      	beq.n	800a660 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800a64e:	f107 0214 	add.w	r2, r7, #20
 800a652:	f107 0318 	add.w	r3, r7, #24
 800a656:	4619      	mov	r1, r3
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 f9b2 	bl	800a9c2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a65e:	e027      	b.n	800a6b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 800a660:	f107 0310 	add.w	r3, r7, #16
 800a664:	4618      	mov	r0, r3
 800a666:	f000 f833 	bl	800a6d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800a66a:	68bc      	ldr	r4, [r7, #8]
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff ff8c 	bl	800a58c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a674:	4603      	mov	r3, r0
 800a676:	6819      	ldr	r1, [r3, #0]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	4620      	mov	r0, r4
 800a680:	f7f6 fc2b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d008      	beq.n	800a69c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800a68a:	f107 0214 	add.w	r2, r7, #20
 800a68e:	f107 0318 	add.w	r3, r7, #24
 800a692:	4619      	mov	r1, r3
 800a694:	68f8      	ldr	r0, [r7, #12]
 800a696:	f000 f994 	bl	800a9c2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a69a:	e009      	b.n	800a6b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800a69c:	2300      	movs	r3, #0
 800a69e:	623b      	str	r3, [r7, #32]
 800a6a0:	f107 0220 	add.w	r2, r7, #32
 800a6a4:	f107 0310 	add.w	r3, r7, #16
 800a6a8:	4619      	mov	r1, r3
 800a6aa:	68f8      	ldr	r0, [r7, #12]
 800a6ac:	f7f7 fce3 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a6b0:	68f8      	ldr	r0, [r7, #12]
 800a6b2:	3728      	adds	r7, #40	; 0x28
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bdb0      	pop	{r4, r5, r7, pc}

0800a6b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	330c      	adds	r3, #12
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr

0800a6d0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f016 f9a1 	bl	8020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800a6e2:	4602      	mov	r2, r0
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	601a      	str	r2, [r3, #0]
	return *this;
 800a6e8:	687b      	ldr	r3, [r7, #4]
      }
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3708      	adds	r7, #8
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b082      	sub	sp, #8
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f016 f98e 	bl	8020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800a704:	4602      	mov	r2, r0
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	601a      	str	r2, [r3, #0]
	return *this;
 800a70a:	687b      	ldr	r3, [r7, #4]
      }
 800a70c:	4618      	mov	r0, r3
 800a70e:	3708      	adds	r7, #8
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}

0800a714 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr() const
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	3310      	adds	r3, #16
 800a720:	4618      	mov	r0, r3
 800a722:	f000 f967 	bl	800a9f4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800a726:	4603      	mov	r3, r0
 800a728:	4618      	mov	r0, r3
 800a72a:	3708      	adds	r7, #8
 800a72c:	46bd      	mov	sp, r7
 800a72e:	bd80      	pop	{r7, pc}

0800a730 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>:
      operator()(const _Pair& __x) const
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
 800a738:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	60f8      	str	r0, [r7, #12]
 800a750:	60b9      	str	r1, [r7, #8]
 800a752:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	009b      	lsls	r3, r3, #2
 800a758:	4619      	mov	r1, r3
 800a75a:	68b8      	ldr	r0, [r7, #8]
 800a75c:	f016 f8f6 	bl	802094c <_ZdlPvj>
      }
 800a760:	3710      	adds	r7, #16
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a766:	b480      	push	{r7}
 800a768:	b083      	sub	sp, #12
 800a76a:	af00      	add	r7, sp, #0
 800a76c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	4618      	mov	r0, r3
 800a772:	370c      	adds	r7, #12
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr

0800a77c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
 800a784:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a786:	6838      	ldr	r0, [r7, #0]
 800a788:	f000 f940 	bl	800aa0c <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>
	}
 800a78c:	bf00      	nop
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}

0800a794 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	60f8      	str	r0, [r7, #12]
 800a79c:	60b9      	str	r1, [r7, #8]
 800a79e:	607a      	str	r2, [r7, #4]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	61fb      	str	r3, [r7, #28]
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	61bb      	str	r3, [r7, #24]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a7ac:	f7f5 fdb8 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d003      	beq.n	800a7be <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800a7b6:	69b8      	ldr	r0, [r7, #24]
 800a7b8:	f016 f8c6 	bl	8020948 <_ZdlPv>
	    return;
 800a7bc:	e005      	b.n	800a7ca <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	69b9      	ldr	r1, [r7, #24]
 800a7c2:	69f8      	ldr	r0, [r7, #28]
 800a7c4:	f000 f9e1 	bl	800ab8a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800a7c8:	bf00      	nop
 800a7ca:	bf00      	nop
 800a7cc:	3720      	adds	r7, #32
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b082      	sub	sp, #8
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 f945 	bl	800aa6c <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f000 f927 	bl	800aa38 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3708      	adds	r7, #8
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}

0800a7f4 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	685a      	ldr	r2, [r3, #4]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	1ad3      	subs	r3, r2, r3
 800a806:	109b      	asrs	r3, r3, #2
 800a808:	4618      	mov	r0, r3
 800a80a:	370c      	adds	r7, #12
 800a80c:	46bd      	mov	sp, r7
 800a80e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a812:	4770      	bx	lr

0800a814 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a814:	b580      	push	{r7, lr}
 800a816:	b084      	sub	sp, #16
 800a818:	af00      	add	r7, sp, #0
 800a81a:	6078      	str	r0, [r7, #4]
 800a81c:	6039      	str	r1, [r7, #0]
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	60fb      	str	r3, [r7, #12]
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a826:	f7f5 fd7b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d006      	beq.n	800a83e <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a830:	68bb      	ldr	r3, [r7, #8]
 800a832:	009b      	lsls	r3, r3, #2
 800a834:	4618      	mov	r0, r3
 800a836:	f016 f88b 	bl	8020950 <_Znwj>
 800a83a:	4603      	mov	r3, r0
 800a83c:	e006      	b.n	800a84c <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a83e:	2200      	movs	r2, #0
 800a840:	68b9      	ldr	r1, [r7, #8]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f000 f9b3 	bl	800abae <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>
 800a848:	4603      	mov	r3, r0
 800a84a:	bf00      	nop
      { return __a.allocate(__n); }
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800a854:	b580      	push	{r7, lr}
 800a856:	b084      	sub	sp, #16
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	687a      	ldr	r2, [r7, #4]
 800a866:	68b9      	ldr	r1, [r7, #8]
 800a868:	68f8      	ldr	r0, [r7, #12]
 800a86a:	f000 f90a 	bl	800aa82 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 800a86e:	4603      	mov	r3, r0
      }
 800a870:	4618      	mov	r0, r3
 800a872:	3710      	adds	r7, #16
 800a874:	46bd      	mov	sp, r7
 800a876:	bd80      	pop	{r7, pc}

0800a878 <_ZSt10destroy_atIP12InputCaptureEvPT_>:
    destroy_at(_Tp* __location)
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
    }
 800a880:	bf00      	nop
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b082      	sub	sp, #8
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
 800a894:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a896:	f7f5 fd43 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a89a:	4603      	mov	r3, r0
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d004      	beq.n	800a8aa <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f90a 	bl	800aabc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>
 800a8a8:	e003      	b.n	800a8b2 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x26>
	__destroy(__first, __last);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 f91d 	bl	800aaec <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>
    }
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() noexcept
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	6039      	str	r1, [r7, #0]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	60fb      	str	r3, [r7, #12]
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a8e0:	f7f5 fd1e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d009      	beq.n	800a8fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	4613      	mov	r3, r2
 800a8ee:	005b      	lsls	r3, r3, #1
 800a8f0:	4413      	add	r3, r2
 800a8f2:	00db      	lsls	r3, r3, #3
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	f016 f82b 	bl	8020950 <_Znwj>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	e006      	b.n	800a90c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a8fe:	2200      	movs	r2, #0
 800a900:	68b9      	ldr	r1, [r7, #8]
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 f9b1 	bl	800ac6a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>
 800a908:	4603      	mov	r3, r0
 800a90a:	bf00      	nop
      { return __a.allocate(__n); }
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a914:	b5b0      	push	{r4, r5, r7, lr}
 800a916:	b088      	sub	sp, #32
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
 800a920:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a922:	68b8      	ldr	r0, [r7, #8]
 800a924:	f7f6 fc9f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7f6 ff8a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a92e:	4602      	mov	r2, r0
 800a930:	f107 0318 	add.w	r3, r7, #24
 800a934:	4611      	mov	r1, r2
 800a936:	4618      	mov	r0, r3
 800a938:	f7f8 f81f 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800a93c:	f107 0418 	add.w	r4, r7, #24
 800a940:	6838      	ldr	r0, [r7, #0]
 800a942:	f7f6 fca6 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	4619      	mov	r1, r3
 800a94a:	2008      	movs	r0, #8
 800a94c:	f7f5 fcf0 	bl	8000330 <_ZnwjPv>
 800a950:	4605      	mov	r5, r0
 800a952:	7f3b      	ldrb	r3, [r7, #28]
 800a954:	4622      	mov	r2, r4
 800a956:	7d39      	ldrb	r1, [r7, #20]
 800a958:	4628      	mov	r0, r5
 800a95a:	f000 f8ec 	bl	800ab36 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800a95e:	462b      	mov	r3, r5
 800a960:	4618      	mov	r0, r3
 800a962:	3720      	adds	r7, #32
 800a964:	46bd      	mov	sp, r7
 800a966:	bdb0      	pop	{r4, r5, r7, pc}

0800a968 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a968:	b5b0      	push	{r4, r5, r7, lr}
 800a96a:	b084      	sub	sp, #16
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
 800a974:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	f7f6 fc75 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a97c:	4604      	mov	r4, r0
 800a97e:	6838      	ldr	r0, [r7, #0]
 800a980:	f7f6 ff5f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a984:	4605      	mov	r5, r0
 800a986:	6a38      	ldr	r0, [r7, #32]
 800a988:	f7f6 fc83 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a98c:	4603      	mov	r3, r0
 800a98e:	462a      	mov	r2, r5
 800a990:	4621      	mov	r1, r4
 800a992:	68b8      	ldr	r0, [r7, #8]
 800a994:	f7ff ffbe 	bl	800a914 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800a998:	bf00      	nop
 800a99a:	3710      	adds	r7, #16
 800a99c:	46bd      	mov	sp, r7
 800a99e:	bdb0      	pop	{r4, r5, r7, pc}

0800a9a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	68da      	ldr	r2, [r3, #12]
 800a9ac:	f107 030c 	add.w	r3, r7, #12
 800a9b0:	4611      	mov	r1, r2
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7ff fc4c 	bl	800a250 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3710      	adds	r7, #16
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}

0800a9c2 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b084      	sub	sp, #16
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	60f8      	str	r0, [r7, #12]
 800a9ca:	60b9      	str	r1, [r7, #8]
 800a9cc:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800a9ce:	68b8      	ldr	r0, [r7, #8]
 800a9d0:	f000 f8c5 	bl	800ab5e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	681a      	ldr	r2, [r3, #0]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	601a      	str	r2, [r3, #0]
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f7f7 fee6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	605a      	str	r2, [r3, #4]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}

0800a9f4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b082      	sub	sp, #8
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f000 f8b9 	bl	800ab74 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800aa02:	4603      	mov	r3, r0
 800aa04:	4618      	mov	r0, r3
 800aa06:	3708      	adds	r7, #8
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>:
    destroy_at(_Tp* __location)
 800aa0c:	b480      	push	{r7}
 800aa0e:	b083      	sub	sp, #12
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
    }
 800aa14:	bf00      	nop
 800aa16:	370c      	adds	r7, #12
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800aa20:	b480      	push	{r7}
 800aa22:	b083      	sub	sp, #12
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800aa28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800aa40:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800aa44:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f7ff ffea 	bl	800aa20 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800aa50:	f107 0208 	add.w	r2, r7, #8
 800aa54:	f107 030c 	add.w	r3, r7, #12
 800aa58:	4611      	mov	r1, r2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7f8 f9c3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800aa60:	4603      	mov	r3, r0
 800aa62:	681b      	ldr	r3, [r3, #0]
      }
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	bd80      	pop	{r7, pc}

0800aa6c <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	4618      	mov	r0, r3
 800aa78:	370c      	adds	r7, #12
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa80:	4770      	bx	lr

0800aa82 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800aa82:	b5b0      	push	{r4, r5, r7, lr}
 800aa84:	b084      	sub	sp, #16
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	60f8      	str	r0, [r7, #12]
 800aa8a:	60b9      	str	r1, [r7, #8]
 800aa8c:	607a      	str	r2, [r7, #4]
 800aa8e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800aa90:	68f8      	ldr	r0, [r7, #12]
 800aa92:	f000 f8ab 	bl	800abec <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800aa96:	4604      	mov	r4, r0
 800aa98:	68b8      	ldr	r0, [r7, #8]
 800aa9a:	f000 f8a7 	bl	800abec <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f8a3 	bl	800abec <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800aaa6:	4602      	mov	r2, r0
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	4629      	mov	r1, r5
 800aaac:	4620      	mov	r0, r4
 800aaae:	f000 f8a8 	bl	800ac02 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800aab2:	4603      	mov	r3, r0
    }
 800aab4:	4618      	mov	r0, r3
 800aab6:	3710      	adds	r7, #16
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bdb0      	pop	{r4, r5, r7, pc}

0800aabc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	429a      	cmp	r2, r3
 800aacc:	d00a      	beq.n	800aae4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f000 f8b5 	bl	800ac3e <_ZSt11__addressofIP12InputCaptureEPT_RS2_>
 800aad4:	4603      	mov	r3, r0
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 f8bc 	bl	800ac54 <_ZSt8_DestroyIP12InputCaptureEvPT_>
	  for (; __first != __last; ++__first)
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	3304      	adds	r3, #4
 800aae0:	607b      	str	r3, [r7, #4]
 800aae2:	e7f0      	b.n	800aac6 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0xa>
	}
 800aae4:	bf00      	nop
 800aae6:	3708      	adds	r7, #8
 800aae8:	46bd      	mov	sp, r7
 800aaea:	bd80      	pop	{r7, pc}

0800aaec <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
 800aaf6:	bf00      	nop
 800aaf8:	370c      	adds	r7, #12
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr

0800ab02 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	60f8      	str	r0, [r7, #12]
 800ab0a:	60b9      	str	r1, [r7, #8]
 800ab0c:	607a      	str	r2, [r7, #4]
 800ab0e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800ab10:	68b8      	ldr	r0, [r7, #8]
 800ab12:	f7f8 fa14 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800ab16:	4603      	mov	r3, r0
 800ab18:	4618      	mov	r0, r3
 800ab1a:	f7f8 fa05 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800ab1e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	601a      	str	r2, [r3, #0]
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	605a      	str	r2, [r3, #4]
      { }
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	4618      	mov	r0, r3
 800ab30:	3710      	adds	r7, #16
 800ab32:	46bd      	mov	sp, r7
 800ab34:	bd80      	pop	{r7, pc}

0800ab36 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 800ab36:	b5b0      	push	{r4, r5, r7, lr}
 800ab38:	b086      	sub	sp, #24
 800ab3a:	af02      	add	r7, sp, #8
 800ab3c:	60f8      	str	r0, [r7, #12]
 800ab3e:	7239      	strb	r1, [r7, #8]
 800ab40:	607a      	str	r2, [r7, #4]
 800ab42:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800ab44:	463a      	mov	r2, r7
 800ab46:	f88d 4000 	strb.w	r4, [sp]
 800ab4a:	462b      	mov	r3, r5
 800ab4c:	6879      	ldr	r1, [r7, #4]
 800ab4e:	68f8      	ldr	r0, [r7, #12]
 800ab50:	f7ff ffd7 	bl	800ab02 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bdb0      	pop	{r4, r5, r7, pc}

0800ab5e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	4618      	mov	r0, r3
 800ab6a:	370c      	adds	r7, #12
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab72:	4770      	bx	lr

0800ab74 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() const noexcept
 800ab74:	b480      	push	{r7}
 800ab76:	b083      	sub	sp, #12
 800ab78:	af00      	add	r7, sp, #0
 800ab7a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800ab8a:	b580      	push	{r7, lr}
 800ab8c:	b084      	sub	sp, #16
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	60f8      	str	r0, [r7, #12]
 800ab92:	60b9      	str	r1, [r7, #8]
 800ab94:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	005b      	lsls	r3, r3, #1
 800ab9c:	4413      	add	r3, r2
 800ab9e:	00db      	lsls	r3, r3, #3
 800aba0:	4619      	mov	r1, r3
 800aba2:	68b8      	ldr	r0, [r7, #8]
 800aba4:	f015 fed2 	bl	802094c <_ZdlPvj>
      }
 800aba8:	3710      	adds	r7, #16
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800abae:	b580      	push	{r7, lr}
 800abb0:	b084      	sub	sp, #16
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	60f8      	str	r0, [r7, #12]
 800abb6:	60b9      	str	r1, [r7, #8]
 800abb8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f000 f877 	bl	800acae <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 800abc0:	4602      	mov	r2, r0
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	4293      	cmp	r3, r2
 800abc6:	bf8c      	ite	hi
 800abc8:	2301      	movhi	r3, #1
 800abca:	2300      	movls	r3, #0
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d001      	beq.n	800abd6 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800abd2:	f015 ff84 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	009b      	lsls	r3, r3, #2
 800abda:	4618      	mov	r0, r3
 800abdc:	f015 feb8 	bl	8020950 <_Znwj>
 800abe0:	4603      	mov	r3, r0
 800abe2:	bf00      	nop
      }
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <_ZSt12__niter_baseIPP12InputCaptureET_S3_>:
    __niter_base(_Iterator __it)
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b086      	sub	sp, #24
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	60f8      	str	r0, [r7, #12]
 800ac0a:	60b9      	str	r1, [r7, #8]
 800ac0c:	607a      	str	r2, [r7, #4]
 800ac0e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	1ad3      	subs	r3, r2, r3
 800ac16:	109b      	asrs	r3, r3, #2
 800ac18:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	dd06      	ble.n	800ac2e <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800ac20:	697b      	ldr	r3, [r7, #20]
 800ac22:	009b      	lsls	r3, r3, #2
 800ac24:	461a      	mov	r2, r3
 800ac26:	68f9      	ldr	r1, [r7, #12]
 800ac28:	6878      	ldr	r0, [r7, #4]
 800ac2a:	f015 ffcb 	bl	8020bc4 <memmove>
      return __result + __count;
 800ac2e:	697b      	ldr	r3, [r7, #20]
 800ac30:	009b      	lsls	r3, r3, #2
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	4413      	add	r3, r2
    }
 800ac36:	4618      	mov	r0, r3
 800ac38:	3718      	adds	r7, #24
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <_ZSt11__addressofIP12InputCaptureEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800ac3e:	b480      	push	{r7}
 800ac40:	b083      	sub	sp, #12
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	4618      	mov	r0, r3
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <_ZSt8_DestroyIP12InputCaptureEvPT_>:
    _Destroy(_Tp* __pointer)
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b082      	sub	sp, #8
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800ac5c:	6878      	ldr	r0, [r7, #4]
 800ac5e:	f7ff fe0b 	bl	800a878 <_ZSt10destroy_atIP12InputCaptureEvPT_>
    }
 800ac62:	bf00      	nop
 800ac64:	3708      	adds	r7, #8
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b084      	sub	sp, #16
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 f826 	bl	800acc8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	68bb      	ldr	r3, [r7, #8]
 800ac80:	4293      	cmp	r3, r2
 800ac82:	bf8c      	ite	hi
 800ac84:	2301      	movhi	r3, #1
 800ac86:	2300      	movls	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d001      	beq.n	800ac92 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ac8e:	f015 ff26 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac92:	68ba      	ldr	r2, [r7, #8]
 800ac94:	4613      	mov	r3, r2
 800ac96:	005b      	lsls	r3, r3, #1
 800ac98:	4413      	add	r3, r2
 800ac9a:	00db      	lsls	r3, r3, #3
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	f015 fe57 	bl	8020950 <_Znwj>
 800aca2:	4603      	mov	r3, r0
 800aca4:	bf00      	nop
      }
 800aca6:	4618      	mov	r0, r3
 800aca8:	3710      	adds	r7, #16
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800acae:	b480      	push	{r7}
 800acb0:	b083      	sub	sp, #12
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800acb6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800acba:	4618      	mov	r0, r3
 800acbc:	370c      	adds	r7, #12
 800acbe:	46bd      	mov	sp, r7
 800acc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc4:	4770      	bx	lr
	...

0800acc8 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800acd0:	4b03      	ldr	r3, [pc, #12]	; (800ace0 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv+0x18>)
      }
 800acd2:	4618      	mov	r0, r3
 800acd4:	370c      	adds	r7, #12
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	05555555 	.word	0x05555555

0800ace4 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe fd85 	bl	80097fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4618      	mov	r0, r3
 800acf8:	3708      	adds	r7, #8
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
	...

0800ad00 <_Z41__static_initialization_and_destruction_0ii>:
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b082      	sub	sp, #8
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d10a      	bne.n	800ad26 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d105      	bne.n	800ad26 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<InputCapture*> InputCapture::all_input_captures;
 800ad1a:	480c      	ldr	r0, [pc, #48]	; (800ad4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ad1c:	f7fe fb5c 	bl	80093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;
 800ad20:	480b      	ldr	r0, [pc, #44]	; (800ad50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ad22:	f7fe fb7f 	bl	8009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10a      	bne.n	800ad42 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad32:	4293      	cmp	r3, r2
 800ad34:	d105      	bne.n	800ad42 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800ad36:	4806      	ldr	r0, [pc, #24]	; (800ad50 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800ad38:	f7ff ffd4 	bl	800ace4 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<InputCapture*> InputCapture::all_input_captures;
 800ad3c:	4803      	ldr	r0, [pc, #12]	; (800ad4c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800ad3e:	f000 f809 	bl	800ad54 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>
}
 800ad42:	bf00      	nop
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	24000158 	.word	0x24000158
 800ad50:	24000164 	.word	0x24000164

0800ad54 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800ad54:	b5b0      	push	{r4, r5, r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681c      	ldr	r4, [r3, #0]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4618      	mov	r0, r3
 800ad68:	f7ff fb2c 	bl	800a3c4 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800ad6c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800ad6e:	461a      	mov	r2, r3
 800ad70:	4629      	mov	r1, r5
 800ad72:	4620      	mov	r0, r4
 800ad74:	f7ff fb31 	bl	800a3da <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      }
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	f7fe fd06 	bl	800978c <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4618      	mov	r0, r3
 800ad84:	3708      	adds	r7, #8
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bdb0      	pop	{r4, r5, r7, pc}

0800ad8a <_GLOBAL__sub_I__ZN12InputCapture18all_input_capturesE>:
 800ad8a:	b580      	push	{r7, lr}
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ad92:	2001      	movs	r0, #1
 800ad94:	f7ff ffb4 	bl	800ad00 <_Z41__static_initialization_and_destruction_0ii>
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <_GLOBAL__sub_D__ZN12InputCapture18all_input_capturesE>:
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ada2:	2000      	movs	r0, #0
 800ada4:	f7ff ffac 	bl	800ad00 <_Z41__static_initialization_and_destruction_0ii>
 800ada8:	bd80      	pop	{r7, pc}

0800adaa <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800adaa:	b580      	push	{r7, lr}
 800adac:	b082      	sub	sp, #8
 800adae:	af00      	add	r7, sp, #0
 800adb0:	6078      	str	r0, [r7, #4]
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 f83c 	bl	800ae30 <_ZNSaIP6StreamED1Ev>
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4618      	mov	r0, r3
 800adbc:	3708      	adds	r7, #8
 800adbe:	46bd      	mov	sp, r7
 800adc0:	bd80      	pop	{r7, pc}

0800adc2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 f81f 	bl	800ae10 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	4618      	mov	r0, r3
 800add6:	3708      	adds	r7, #8
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>:
      vector() = default;
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7ff ffeb 	bl	800adc2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>:
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	4618      	mov	r0, r3
 800ae02:	f000 f88c 	bl	800af1e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3708      	adds	r7, #8
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}

0800ae10 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b082      	sub	sp, #8
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ae18:	6878      	ldr	r0, [r7, #4]
 800ae1a:	f000 f8ce 	bl	800afba <_ZNSaIP6StreamEC1Ev>
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f000 f8d6 	bl	800afd2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	4618      	mov	r0, r3
 800ae2a:	3708      	adds	r7, #8
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	bd80      	pop	{r7, pc}

0800ae30 <_ZNSaIP6StreamED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	370c      	adds	r7, #12
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr

0800ae46 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b082      	sub	sp, #8
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	689a      	ldr	r2, [r3, #8]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	1ad3      	subs	r3, r2, r3
 800ae5c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800ae5e:	461a      	mov	r2, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f000 f8ca 	bl	800affa <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      }
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff ff9e 	bl	800adaa <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	4618      	mov	r0, r3
 800ae72:	3708      	adds	r7, #8
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b082      	sub	sp, #8
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f8cd 	bl	800b020 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3708      	adds	r7, #8
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <_ZNSaISt4pairIK9PrecisionmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	4618      	mov	r0, r3
 800ae9c:	370c      	adds	r7, #12
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr

0800aea6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 800aea6:	b5b0      	push	{r4, r5, r7, lr}
 800aea8:	b086      	sub	sp, #24
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	60f8      	str	r0, [r7, #12]
 800aeae:	1d38      	adds	r0, r7, #4
 800aeb0:	e880 0006 	stmia.w	r0, {r1, r2}
 800aeb4:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800aeb6:	68fc      	ldr	r4, [r7, #12]
 800aeb8:	f107 0314 	add.w	r3, r7, #20
 800aebc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aebe:	4618      	mov	r0, r3
 800aec0:	f000 f8b9 	bl	800b036 <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>
 800aec4:	f107 0314 	add.w	r3, r7, #20
 800aec8:	461a      	mov	r2, r3
 800aeca:	6839      	ldr	r1, [r7, #0]
 800aecc:	4620      	mov	r0, r4
 800aece:	f000 f8c0 	bl	800b052 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>
 800aed2:	f107 0314 	add.w	r3, r7, #20
 800aed6:	4618      	mov	r0, r3
 800aed8:	f7ff ffda 	bl	800ae90 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800aedc:	68fc      	ldr	r4, [r7, #12]
 800aede:	1d3b      	adds	r3, r7, #4
 800aee0:	4618      	mov	r0, r3
 800aee2:	f000 f8d4 	bl	800b08e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800aee6:	4605      	mov	r5, r0
 800aee8:	1d3b      	adds	r3, r7, #4
 800aeea:	4618      	mov	r0, r3
 800aeec:	f000 f8db 	bl	800b0a6 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>
 800aef0:	4603      	mov	r3, r0
 800aef2:	461a      	mov	r2, r3
 800aef4:	4629      	mov	r1, r5
 800aef6:	4620      	mov	r0, r4
 800aef8:	f000 f8e7 	bl	800b0ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4618      	mov	r0, r3
 800af00:	3718      	adds	r7, #24
 800af02:	46bd      	mov	sp, r7
 800af04:	bdb0      	pop	{r4, r5, r7, pc}

0800af06 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800af06:	b580      	push	{r7, lr}
 800af08:	b082      	sub	sp, #8
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	6078      	str	r0, [r7, #4]
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f000 f907 	bl	800b122 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	4618      	mov	r0, r3
 800af18:	3708      	adds	r7, #8
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f925 	bl	800b176 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800af2c:	4603      	mov	r3, r0
 800af2e:	4619      	mov	r1, r3
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f000 f901 	bl	800b138 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4618      	mov	r0, r3
 800af3a:	f7ff ffe4 	bl	800af06 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	4618      	mov	r0, r3
 800af42:	3708      	adds	r7, #8
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681a      	ldr	r2, [r3, #0]
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	429a      	cmp	r2, r3
 800af5c:	bf0c      	ite	eq
 800af5e:	2301      	moveq	r3, #1
 800af60:	2300      	movne	r3, #0
 800af62:	b2db      	uxtb	r3, r3
 800af64:	4618      	mov	r0, r3
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	781a      	ldrb	r2, [r3, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	781b      	ldrb	r3, [r3, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	bf34      	ite	cc
 800af88:	2301      	movcc	r3, #1
 800af8a:	2300      	movcs	r3, #0
 800af8c:	b2db      	uxtb	r3, r3
 800af8e:	4618      	mov	r0, r3
 800af90:	3714      	adds	r7, #20
 800af92:	46bd      	mov	sp, r7
 800af94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af98:	4770      	bx	lr

0800af9a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800af9a:	b480      	push	{r7}
 800af9c:	b083      	sub	sp, #12
 800af9e:	af00      	add	r7, sp, #0
 800afa0:	6078      	str	r0, [r7, #4]
 800afa2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800afa4:	683b      	ldr	r3, [r7, #0]
 800afa6:	681a      	ldr	r2, [r3, #0]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4618      	mov	r0, r3
 800afb0:	370c      	adds	r7, #12
 800afb2:	46bd      	mov	sp, r7
 800afb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb8:	4770      	bx	lr

0800afba <_ZNSaIP6StreamEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800afba:	b580      	push	{r7, lr}
 800afbc:	b082      	sub	sp, #8
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f000 fa58 	bl	800b478 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4618      	mov	r0, r3
 800afcc:	3708      	adds	r7, #8
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800afd2:	b480      	push	{r7}
 800afd4:	b083      	sub	sp, #12
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2200      	movs	r2, #0
 800afde:	601a      	str	r2, [r3, #0]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2200      	movs	r2, #0
 800afe4:	605a      	str	r2, [r3, #4]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	609a      	str	r2, [r3, #8]
	{ }
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	4618      	mov	r0, r3
 800aff0:	370c      	adds	r7, #12
 800aff2:	46bd      	mov	sp, r7
 800aff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff8:	4770      	bx	lr

0800affa <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800affa:	b580      	push	{r7, lr}
 800affc:	b084      	sub	sp, #16
 800affe:	af00      	add	r7, sp, #0
 800b000:	60f8      	str	r0, [r7, #12]
 800b002:	60b9      	str	r1, [r7, #8]
 800b004:	607a      	str	r2, [r7, #4]
	if (__p)
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d005      	beq.n	800b018 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	68b9      	ldr	r1, [r7, #8]
 800b012:	4618      	mov	r0, r3
 800b014:	f000 fa3b 	bl	800b48e <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>
      }
 800b018:	bf00      	nop
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b020:	b480      	push	{r7}
 800b022:	b083      	sub	sp, #12
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	4618      	mov	r0, r3
 800b02c:	370c      	adds	r7, #12
 800b02e:	46bd      	mov	sp, r7
 800b030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b034:	4770      	bx	lr

0800b036 <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b036:	b580      	push	{r7, lr}
 800b038:	b082      	sub	sp, #8
 800b03a:	af00      	add	r7, sp, #0
 800b03c:	6078      	str	r0, [r7, #4]
 800b03e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b040:	6839      	ldr	r1, [r7, #0]
 800b042:	6878      	ldr	r0, [r7, #4]
 800b044:	f000 fa42 	bl	800b4cc <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	4618      	mov	r0, r3
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 800b052:	b590      	push	{r4, r7, lr}
 800b054:	b087      	sub	sp, #28
 800b056:	af00      	add	r7, sp, #0
 800b058:	60f8      	str	r0, [r7, #12]
 800b05a:	60b9      	str	r1, [r7, #8]
 800b05c:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800b05e:	68fc      	ldr	r4, [r7, #12]
 800b060:	f107 0314 	add.w	r3, r7, #20
 800b064:	6879      	ldr	r1, [r7, #4]
 800b066:	4618      	mov	r0, r3
 800b068:	f000 fa3c 	bl	800b4e4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>
 800b06c:	f107 0314 	add.w	r3, r7, #20
 800b070:	461a      	mov	r2, r3
 800b072:	68b9      	ldr	r1, [r7, #8]
 800b074:	4620      	mov	r0, r4
 800b076:	f000 fa42 	bl	800b4fe <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 800b07a:	f107 0314 	add.w	r3, r7, #20
 800b07e:	4618      	mov	r0, r3
 800b080:	f000 f84f 	bl	800b122 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	4618      	mov	r0, r3
 800b088:	371c      	adds	r7, #28
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd90      	pop	{r4, r7, pc}

0800b08e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800b08e:	b480      	push	{r7}
 800b090:	b083      	sub	sp, #12
 800b092:	af00      	add	r7, sp, #0
 800b094:	6078      	str	r0, [r7, #4]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	4618      	mov	r0, r3
 800b09c:	370c      	adds	r7, #12
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a4:	4770      	bx	lr

0800b0a6 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800b0a6:	b590      	push	{r4, r7, lr}
 800b0a8:	b083      	sub	sp, #12
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6878      	ldr	r0, [r7, #4]
 800b0b0:	f7ff ffed 	bl	800b08e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800b0b4:	4604      	mov	r4, r0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fa3e 	bl	800b538 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	00db      	lsls	r3, r3, #3
 800b0c0:	4423      	add	r3, r4
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	370c      	adds	r7, #12
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd90      	pop	{r4, r7, pc}

0800b0ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b088      	sub	sp, #32
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	60f8      	str	r0, [r7, #12]
 800b0d2:	60b9      	str	r1, [r7, #8]
 800b0d4:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800b0d6:	f107 0314 	add.w	r3, r7, #20
 800b0da:	68f9      	ldr	r1, [r7, #12]
 800b0dc:	4618      	mov	r0, r3
 800b0de:	f000 fa37 	bl	800b550 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d017      	beq.n	800b11a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800b0ea:	68f8      	ldr	r0, [r7, #12]
 800b0ec:	f000 f84f 	bl	800b18e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	61fb      	str	r3, [r7, #28]
 800b0f4:	f107 021c 	add.w	r2, r7, #28
 800b0f8:	f107 0318 	add.w	r3, r7, #24
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff ff4b 	bl	800af9a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 800b104:	f107 0314 	add.w	r3, r7, #20
 800b108:	68ba      	ldr	r2, [r7, #8]
 800b10a:	69b9      	ldr	r1, [r7, #24]
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f000 fa2e 	bl	800b56e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	3308      	adds	r3, #8
 800b116:	60bb      	str	r3, [r7, #8]
 800b118:	e7e3      	b.n	800b0e2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800b11a:	bf00      	nop
 800b11c:	3720      	adds	r7, #32
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b122:	b480      	push	{r7}
 800b124:	b083      	sub	sp, #12
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4618      	mov	r0, r3
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b138:	b580      	push	{r7, lr}
 800b13a:	b084      	sub	sp, #16
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
 800b140:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	2b00      	cmp	r3, #0
 800b146:	d012      	beq.n	800b16e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 800b148:	6838      	ldr	r0, [r7, #0]
 800b14a:	f000 fa43 	bl	800b5d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b14e:	4603      	mov	r3, r0
 800b150:	4619      	mov	r1, r3
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	f7ff fff0 	bl	800b138 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800b158:	6838      	ldr	r0, [r7, #0]
 800b15a:	f000 fa47 	bl	800b5ec <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b15e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800b160:	6839      	ldr	r1, [r7, #0]
 800b162:	6878      	ldr	r0, [r7, #4]
 800b164:	f000 f968 	bl	800b438 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800b16c:	e7e9      	b.n	800b142 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 800b16e:	bf00      	nop
 800b170:	3710      	adds	r7, #16
 800b172:	46bd      	mov	sp, r7
 800b174:	bd80      	pop	{r7, pc}

0800b176 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800b176:	b480      	push	{r7}
 800b178:	b083      	sub	sp, #12
 800b17a:	af00      	add	r7, sp, #0
 800b17c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	4618      	mov	r0, r3
 800b184:	370c      	adds	r7, #12
 800b186:	46bd      	mov	sp, r7
 800b188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18c:	4770      	bx	lr

0800b18e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b18e:	b580      	push	{r7, lr}
 800b190:	b084      	sub	sp, #16
 800b192:	af00      	add	r7, sp, #0
 800b194:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	1d1a      	adds	r2, r3, #4
 800b19a:	f107 030c 	add.w	r3, r7, #12
 800b19e:	4611      	mov	r1, r2
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	f000 f95a 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}

0800b1b0 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr()
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b082      	sub	sp, #8
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	3310      	adds	r3, #16
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f000 fa2d 	bl	800b61c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b1cc:	b590      	push	{r4, r7, lr}
 800b1ce:	b08d      	sub	sp, #52	; 0x34
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800b1da:	1d3b      	adds	r3, r7, #4
 800b1dc:	4618      	mov	r0, r3
 800b1de:	f000 fa3a 	bl	800b656 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800b1e6:	69bc      	ldr	r4, [r7, #24]
 800b1e8:	68b8      	ldr	r0, [r7, #8]
 800b1ea:	f000 fa0b 	bl	800b604 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	429c      	cmp	r4, r3
 800b1f2:	bf0c      	ite	eq
 800b1f4:	2301      	moveq	r3, #1
 800b1f6:	2300      	movne	r3, #0
 800b1f8:	b2db      	uxtb	r3, r3
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d030      	beq.n	800b260 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x94>
	  if (size() > 0
 800b1fe:	68b8      	ldr	r0, [r7, #8]
 800b200:	f000 fa3a 	bl	800b678 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>
 800b204:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b206:	2b00      	cmp	r3, #0
 800b208:	d013      	beq.n	800b232 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b20a:	68bc      	ldr	r4, [r7, #8]
 800b20c:	68b8      	ldr	r0, [r7, #8]
 800b20e:	f000 fa3f 	bl	800b690 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b212:	4603      	mov	r3, r0
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	4618      	mov	r0, r3
 800b218:	f000 fa46 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b21c:	4603      	mov	r3, r0
 800b21e:	683a      	ldr	r2, [r7, #0]
 800b220:	4619      	mov	r1, r3
 800b222:	4620      	mov	r0, r4
 800b224:	f7ff fea4 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b228:	4603      	mov	r3, r0
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b22e:	2301      	movs	r3, #1
 800b230:	e000      	b.n	800b234 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x68>
 800b232:	2300      	movs	r3, #0
	  if (size() > 0
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00c      	beq.n	800b252 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800b238:	2300      	movs	r3, #0
 800b23a:	61fb      	str	r3, [r7, #28]
 800b23c:	68b8      	ldr	r0, [r7, #8]
 800b23e:	f000 fa27 	bl	800b690 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b242:	4602      	mov	r2, r0
 800b244:	f107 031c 	add.w	r3, r7, #28
 800b248:	4619      	mov	r1, r3
 800b24a:	68f8      	ldr	r0, [r7, #12]
 800b24c:	f7f6 fe2c 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b250:	e0db      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	683a      	ldr	r2, [r7, #0]
 800b256:	68b9      	ldr	r1, [r7, #8]
 800b258:	4618      	mov	r0, r3
 800b25a:	f000 fa31 	bl	800b6c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b25e:	e0d4      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800b260:	68bc      	ldr	r4, [r7, #8]
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	4618      	mov	r0, r3
 800b266:	f000 fa1f 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b26a:	4603      	mov	r3, r0
 800b26c:	461a      	mov	r2, r3
 800b26e:	6839      	ldr	r1, [r7, #0]
 800b270:	4620      	mov	r0, r4
 800b272:	f7ff fe7d 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b276:	4603      	mov	r3, r0
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d057      	beq.n	800b32c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x160>
	  iterator __before = __pos;
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800b280:	69bc      	ldr	r4, [r7, #24]
 800b282:	68b8      	ldr	r0, [r7, #8]
 800b284:	f000 faa1 	bl	800b7ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b288:	4603      	mov	r3, r0
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	429c      	cmp	r4, r3
 800b28e:	bf0c      	ite	eq
 800b290:	2301      	moveq	r3, #1
 800b292:	2300      	movne	r3, #0
 800b294:	b2db      	uxtb	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00d      	beq.n	800b2b6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800b29a:	68b8      	ldr	r0, [r7, #8]
 800b29c:	f000 fa95 	bl	800b7ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b2a0:	4604      	mov	r4, r0
 800b2a2:	68b8      	ldr	r0, [r7, #8]
 800b2a4:	f000 fa91 	bl	800b7ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	4621      	mov	r1, r4
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	f7f6 fea6 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b2b4:	e0a9      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800b2b6:	68bc      	ldr	r4, [r7, #8]
 800b2b8:	f107 0314 	add.w	r3, r7, #20
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fa90 	bl	800b7e2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f000 f9ee 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	4619      	mov	r1, r3
 800b2d2:	4620      	mov	r0, r4
 800b2d4:	f7ff fe4c 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d01f      	beq.n	800b31e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f000 f977 	bl	800b5d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	bf0c      	ite	eq
 800b2ec:	2301      	moveq	r3, #1
 800b2ee:	2300      	movne	r3, #0
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00a      	beq.n	800b30c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	623b      	str	r3, [r7, #32]
 800b2fa:	f107 0214 	add.w	r2, r7, #20
 800b2fe:	f107 0320 	add.w	r3, r7, #32
 800b302:	4619      	mov	r1, r3
 800b304:	68f8      	ldr	r0, [r7, #12]
 800b306:	f7f6 fdcf 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b30a:	e07e      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800b30c:	f107 0218 	add.w	r2, r7, #24
 800b310:	f107 0318 	add.w	r3, r7, #24
 800b314:	4619      	mov	r1, r3
 800b316:	68f8      	ldr	r0, [r7, #12]
 800b318:	f7f6 fe72 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b31c:	e075      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	683a      	ldr	r2, [r7, #0]
 800b322:	68b9      	ldr	r1, [r7, #8]
 800b324:	4618      	mov	r0, r3
 800b326:	f000 f9cb 	bl	800b6c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b32a:	e06e      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800b32c:	68bc      	ldr	r4, [r7, #8]
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	4618      	mov	r0, r3
 800b332:	f000 f9b9 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b336:	4603      	mov	r3, r0
 800b338:	683a      	ldr	r2, [r7, #0]
 800b33a:	4619      	mov	r1, r3
 800b33c:	4620      	mov	r0, r4
 800b33e:	f7ff fe17 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b342:	4603      	mov	r3, r0
 800b344:	2b00      	cmp	r3, #0
 800b346:	d056      	beq.n	800b3f6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x22a>
	  iterator __after = __pos;
 800b348:	69bb      	ldr	r3, [r7, #24]
 800b34a:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800b34c:	69bc      	ldr	r4, [r7, #24]
 800b34e:	68b8      	ldr	r0, [r7, #8]
 800b350:	f000 f99e 	bl	800b690 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b354:	4603      	mov	r3, r0
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	429c      	cmp	r4, r3
 800b35a:	bf0c      	ite	eq
 800b35c:	2301      	moveq	r3, #1
 800b35e:	2300      	movne	r3, #0
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b00      	cmp	r3, #0
 800b364:	d00c      	beq.n	800b380 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800b366:	2300      	movs	r3, #0
 800b368:	627b      	str	r3, [r7, #36]	; 0x24
 800b36a:	68b8      	ldr	r0, [r7, #8]
 800b36c:	f000 f990 	bl	800b690 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b370:	4602      	mov	r2, r0
 800b372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b376:	4619      	mov	r1, r3
 800b378:	68f8      	ldr	r0, [r7, #12]
 800b37a:	f7f6 fd95 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b37e:	e044      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800b380:	68bc      	ldr	r4, [r7, #8]
 800b382:	f107 0310 	add.w	r3, r7, #16
 800b386:	4618      	mov	r0, r3
 800b388:	f000 fa3c 	bl	800b804 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>
 800b38c:	4603      	mov	r3, r0
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 f989 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b396:	4603      	mov	r3, r0
 800b398:	461a      	mov	r2, r3
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	4620      	mov	r0, r4
 800b39e:	f7ff fde7 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d01f      	beq.n	800b3e8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 f912 	bl	800b5d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	bf0c      	ite	eq
 800b3b6:	2301      	moveq	r3, #1
 800b3b8:	2300      	movne	r3, #0
 800b3ba:	b2db      	uxtb	r3, r3
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d00a      	beq.n	800b3d6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3c4:	f107 0218 	add.w	r2, r7, #24
 800b3c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	68f8      	ldr	r0, [r7, #12]
 800b3d0:	f7f6 fd6a 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b3d4:	e019      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800b3d6:	f107 0210 	add.w	r2, r7, #16
 800b3da:	f107 0310 	add.w	r3, r7, #16
 800b3de:	4619      	mov	r1, r3
 800b3e0:	68f8      	ldr	r0, [r7, #12]
 800b3e2:	f7f6 fe0d 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b3e6:	e010      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	683a      	ldr	r2, [r7, #0]
 800b3ec:	68b9      	ldr	r1, [r7, #8]
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	f000 f966 	bl	800b6c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b3f4:	e009      	b.n	800b40a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3fa:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b3fe:	f107 0318 	add.w	r3, r7, #24
 800b402:	4619      	mov	r1, r3
 800b404:	68f8      	ldr	r0, [r7, #12]
 800b406:	f7f6 fe36 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b40a:	68f8      	ldr	r0, [r7, #12]
 800b40c:	3734      	adds	r7, #52	; 0x34
 800b40e:	46bd      	mov	sp, r7
 800b410:	bd90      	pop	{r4, r7, pc}

0800b412 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 800b412:	b580      	push	{r7, lr}
 800b414:	b084      	sub	sp, #16
 800b416:	af00      	add	r7, sp, #0
 800b418:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fa03 	bl	800b826 <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b420:	4602      	mov	r2, r0
 800b422:	f107 030c 	add.w	r3, r7, #12
 800b426:	4611      	mov	r1, r2
 800b428:	4618      	mov	r0, r3
 800b42a:	f000 fa0a 	bl	800b842 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b42e:	4603      	mov	r3, r0
      }
 800b430:	4618      	mov	r0, r3
 800b432:	3710      	adds	r7, #16
 800b434:	46bd      	mov	sp, r7
 800b436:	bd80      	pop	{r7, pc}

0800b438 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b438:	b580      	push	{r7, lr}
 800b43a:	b082      	sub	sp, #8
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800b442:	6839      	ldr	r1, [r7, #0]
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fa08 	bl	800b85a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 fa19 	bl	800b884 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 800b452:	bf00      	nop
 800b454:	3708      	adds	r7, #8
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}

0800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b45a:	b480      	push	{r7}
 800b45c:	b083      	sub	sp, #12
 800b45e:	af00      	add	r7, sp, #0
 800b460:	6078      	str	r0, [r7, #4]
 800b462:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	683a      	ldr	r2, [r7, #0]
 800b468:	601a      	str	r2, [r3, #0]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	4618      	mov	r0, r3
 800b46e:	370c      	adds	r7, #12
 800b470:	46bd      	mov	sp, r7
 800b472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b476:	4770      	bx	lr

0800b478 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>:
 800b478:	b480      	push	{r7}
 800b47a:	b083      	sub	sp, #12
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	4618      	mov	r0, r3
 800b484:	370c      	adds	r7, #12
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr

0800b48e <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b48e:	b580      	push	{r7, lr}
 800b490:	b088      	sub	sp, #32
 800b492:	af00      	add	r7, sp, #0
 800b494:	60f8      	str	r0, [r7, #12]
 800b496:	60b9      	str	r1, [r7, #8]
 800b498:	607a      	str	r2, [r7, #4]
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	61fb      	str	r3, [r7, #28]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	61bb      	str	r3, [r7, #24]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b4a6:	f7f4 ff3b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b4b0:	69b8      	ldr	r0, [r7, #24]
 800b4b2:	f015 fa49 	bl	8020948 <_ZdlPv>
	    return;
 800b4b6:	e005      	b.n	800b4c4 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b4b8:	697a      	ldr	r2, [r7, #20]
 800b4ba:	69b9      	ldr	r1, [r7, #24]
 800b4bc:	69f8      	ldr	r0, [r7, #28]
 800b4be:	f000 fb4a 	bl	800bb56 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b4c2:	bf00      	nop
 800b4c4:	bf00      	nop
 800b4c6:	3720      	adds	r7, #32
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b4cc:	b480      	push	{r7}
 800b4ce:	b083      	sub	sp, #12
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	370c      	adds	r7, #12
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
 800b4ee:	6878      	ldr	r0, [r7, #4]
 800b4f0:	f000 f9f3 	bl	800b8da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3708      	adds	r7, #8
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}

0800b4fe <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b084      	sub	sp, #16
 800b502:	af00      	add	r7, sp, #0
 800b504:	60f8      	str	r0, [r7, #12]
 800b506:	60b9      	str	r1, [r7, #8]
 800b508:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 f9f0 	bl	800b8f0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>
 800b510:	4603      	mov	r3, r0
 800b512:	4619      	mov	r1, r3
 800b514:	68f8      	ldr	r0, [r7, #12]
 800b516:	f000 f9f6 	bl	800b906 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	68b9      	ldr	r1, [r7, #8]
 800b51e:	4618      	mov	r0, r3
 800b520:	f000 f9ff 	bl	800b922 <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3304      	adds	r3, #4
 800b528:	4618      	mov	r0, r3
 800b52a:	f7f4 ff0d 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	4618      	mov	r0, r3
 800b532:	3710      	adds	r7, #16
 800b534:	46bd      	mov	sp, r7
 800b536:	bd80      	pop	{r7, pc}

0800b538 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	4618      	mov	r0, r3
 800b546:	370c      	adds	r7, #12
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr

0800b550 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
 800b558:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	683a      	ldr	r2, [r7, #0]
 800b55e:	601a      	str	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b56e:	b5b0      	push	{r4, r5, r7, lr}
 800b570:	b08a      	sub	sp, #40	; 0x28
 800b572:	af02      	add	r7, sp, #8
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	60b9      	str	r1, [r7, #8]
 800b578:	607a      	str	r2, [r7, #4]
 800b57a:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800b57c:	f107 0318 	add.w	r3, r7, #24
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	4618      	mov	r0, r3
 800b584:	f000 f95d 	bl	800b842 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b588:	4603      	mov	r3, r0
 800b58a:	f107 0010 	add.w	r0, r7, #16
 800b58e:	68ba      	ldr	r2, [r7, #8]
 800b590:	68f9      	ldr	r1, [r7, #12]
 800b592:	f7ff fe1b 	bl	800b1cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
      if (__res.second)
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d00f      	beq.n	800b5bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800b59c:	693c      	ldr	r4, [r7, #16]
 800b59e:	697d      	ldr	r5, [r7, #20]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f9ca 	bl	800b93a <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	462a      	mov	r2, r5
 800b5b0:	4621      	mov	r1, r4
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f000 f9cc 	bl	800b950 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 800b5b8:	4603      	mov	r3, r0
			  __node_gen);
 800b5ba:	e007      	b.n	800b5cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800b5bc:	693a      	ldr	r2, [r7, #16]
 800b5be:	f107 031c 	add.w	r3, r7, #28
 800b5c2:	4611      	mov	r1, r2
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7ff ff48 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b5ca:	69fb      	ldr	r3, [r7, #28]
    }
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3720      	adds	r7, #32
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bdb0      	pop	{r4, r5, r7, pc}

0800b5d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	370c      	adds	r7, #12
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr

0800b5ec <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b5ec:	b480      	push	{r7}
 800b5ee:	b083      	sub	sp, #12
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	370c      	adds	r7, #12
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b602:	4770      	bx	lr

0800b604 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800b604:	b480      	push	{r7}
 800b606:	b083      	sub	sp, #12
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	3304      	adds	r3, #4
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f9dc 	bl	800b9e2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800b62a:	4603      	mov	r3, r0
 800b62c:	4618      	mov	r0, r3
 800b62e:	3708      	adds	r7, #8
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b63c:	6878      	ldr	r0, [r7, #4]
 800b63e:	f000 f9db 	bl	800b9f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b642:	4603      	mov	r3, r0
 800b644:	2101      	movs	r1, #1
 800b646:	4618      	mov	r0, r3
 800b648:	f000 f9e1 	bl	800ba0e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>
 800b64c:	4603      	mov	r3, r0
 800b64e:	4618      	mov	r0, r3
 800b650:	3708      	adds	r7, #8
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}

0800b656 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800b656:	b580      	push	{r7, lr}
 800b658:	b084      	sub	sp, #16
 800b65a:	af00      	add	r7, sp, #0
 800b65c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681a      	ldr	r2, [r3, #0]
 800b662:	f107 030c 	add.w	r3, r7, #12
 800b666:	4611      	mov	r1, r2
 800b668:	4618      	mov	r0, r3
 800b66a:	f7ff fef6 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}

0800b678 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b678:	b480      	push	{r7}
 800b67a:	b083      	sub	sp, #12
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	695b      	ldr	r3, [r3, #20]
 800b684:	4618      	mov	r0, r3
 800b686:	370c      	adds	r7, #12
 800b688:	46bd      	mov	sp, r7
 800b68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68e:	4770      	bx	lr

0800b690 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800b690:	b480      	push	{r7}
 800b692:	b083      	sub	sp, #12
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	3310      	adds	r3, #16
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr

0800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b082      	sub	sp, #8
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f7ff feae 	bl	800b412 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b6b6:	4603      	mov	r3, r0
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b6c0:	b590      	push	{r4, r7, lr}
 800b6c2:	b08b      	sub	sp, #44	; 0x2c
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	60f8      	str	r0, [r7, #12]
 800b6c8:	60b9      	str	r1, [r7, #8]
 800b6ca:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800b6cc:	68b8      	ldr	r0, [r7, #8]
 800b6ce:	f7ff fd52 	bl	800b176 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800b6d6:	68b8      	ldr	r0, [r7, #8]
 800b6d8:	f7ff ff94 	bl	800b604 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800b6e0:	2301      	movs	r3, #1
 800b6e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800b6e6:	69bb      	ldr	r3, [r7, #24]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d020      	beq.n	800b72e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800b6ec:	69bb      	ldr	r3, [r7, #24]
 800b6ee:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800b6f0:	68bc      	ldr	r4, [r7, #8]
 800b6f2:	69bb      	ldr	r3, [r7, #24]
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7ff fe8c 	bl	800b412 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	461a      	mov	r2, r3
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	4620      	mov	r0, r4
 800b702:	f7ff fc35 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b706:	4603      	mov	r3, r0
 800b708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b710:	2b00      	cmp	r3, #0
 800b712:	d005      	beq.n	800b720 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	4618      	mov	r0, r3
 800b718:	f7ff ff68 	bl	800b5ec <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b71c:	4603      	mov	r3, r0
 800b71e:	e004      	b.n	800b72a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6a>
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	4618      	mov	r0, r3
 800b724:	f7ff ff56 	bl	800b5d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b728:	4603      	mov	r3, r0
 800b72a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800b72c:	e7db      	b.n	800b6e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800b72e:	697a      	ldr	r2, [r7, #20]
 800b730:	f107 0310 	add.w	r3, r7, #16
 800b734:	4611      	mov	r1, r2
 800b736:	4618      	mov	r0, r3
 800b738:	f7ff fe8f 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800b73c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b740:	2b00      	cmp	r3, #0
 800b742:	d01d      	beq.n	800b780 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 800b744:	68b8      	ldr	r0, [r7, #8]
 800b746:	f000 f985 	bl	800ba54 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>
 800b74a:	4603      	mov	r3, r0
 800b74c:	61fb      	str	r3, [r7, #28]
 800b74e:	f107 021c 	add.w	r2, r7, #28
 800b752:	f107 0310 	add.w	r3, r7, #16
 800b756:	4611      	mov	r1, r2
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fbf5 	bl	800af48 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800b75e:	4603      	mov	r3, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	d008      	beq.n	800b776 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800b764:	f107 0214 	add.w	r2, r7, #20
 800b768:	f107 0318 	add.w	r3, r7, #24
 800b76c:	4619      	mov	r1, r3
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 f981 	bl	800ba76 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b774:	e025      	b.n	800b7c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800b776:	f107 0310 	add.w	r3, r7, #16
 800b77a:	4618      	mov	r0, r3
 800b77c:	f000 f831 	bl	800b7e2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800b780:	68bc      	ldr	r4, [r7, #8]
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff ff8f 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b78a:	4603      	mov	r3, r0
 800b78c:	687a      	ldr	r2, [r7, #4]
 800b78e:	4619      	mov	r1, r3
 800b790:	4620      	mov	r0, r4
 800b792:	f7ff fbed 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b796:	4603      	mov	r3, r0
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d008      	beq.n	800b7ae <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800b79c:	f107 0214 	add.w	r2, r7, #20
 800b7a0:	f107 0318 	add.w	r3, r7, #24
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	68f8      	ldr	r0, [r7, #12]
 800b7a8:	f000 f965 	bl	800ba76 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b7ac:	e009      	b.n	800b7c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	623b      	str	r3, [r7, #32]
 800b7b2:	f107 0220 	add.w	r2, r7, #32
 800b7b6:	f107 0310 	add.w	r3, r7, #16
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	68f8      	ldr	r0, [r7, #12]
 800b7be:	f7f6 fc5a 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	372c      	adds	r7, #44	; 0x2c
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd90      	pop	{r4, r7, pc}

0800b7ca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800b7ca:	b480      	push	{r7}
 800b7cc:	b083      	sub	sp, #12
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	330c      	adds	r3, #12
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	370c      	adds	r7, #12
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e0:	4770      	bx	lr

0800b7e2 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800b7e2:	b580      	push	{r7, lr}
 800b7e4:	b082      	sub	sp, #8
 800b7e6:	af00      	add	r7, sp, #0
 800b7e8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f015 f918 	bl	8020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800b7f4:	4602      	mov	r2, r0
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	601a      	str	r2, [r3, #0]
	return *this;
 800b7fa:	687b      	ldr	r3, [r7, #4]
      }
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3708      	adds	r7, #8
 800b800:	46bd      	mov	sp, r7
 800b802:	bd80      	pop	{r7, pc}

0800b804 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	4618      	mov	r0, r3
 800b812:	f015 f905 	bl	8020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800b816:	4602      	mov	r2, r0
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	601a      	str	r2, [r3, #0]
	return *this;
 800b81c:	687b      	ldr	r3, [r7, #4]
      }
 800b81e:	4618      	mov	r0, r3
 800b820:	3708      	adds	r7, #8
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr() const
 800b826:	b580      	push	{r7, lr}
 800b828:	b082      	sub	sp, #8
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3310      	adds	r3, #16
 800b832:	4618      	mov	r0, r3
 800b834:	f000 f938 	bl	800baa8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b838:	4603      	mov	r3, r0
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>:
      operator()(const _Pair& __x) const
 800b842:	b480      	push	{r7}
 800b844:	b083      	sub	sp, #12
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	4618      	mov	r0, r3
 800b850:	370c      	adds	r7, #12
 800b852:	46bd      	mov	sp, r7
 800b854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b858:	4770      	bx	lr

0800b85a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b85a:	b590      	push	{r4, r7, lr}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
 800b862:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800b864:	6878      	ldr	r0, [r7, #4]
 800b866:	f000 f8c7 	bl	800b9f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b86a:	4604      	mov	r4, r0
 800b86c:	6838      	ldr	r0, [r7, #0]
 800b86e:	f7ff fc9f 	bl	800b1b0 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b872:	4603      	mov	r3, r0
 800b874:	4619      	mov	r1, r3
 800b876:	4620      	mov	r0, r4
 800b878:	f000 f922 	bl	800bac0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>
      }
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	bd90      	pop	{r4, r7, pc}

0800b884 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f8b2 	bl	800b9f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b894:	4603      	mov	r3, r0
 800b896:	2201      	movs	r2, #1
 800b898:	6839      	ldr	r1, [r7, #0]
 800b89a:	4618      	mov	r0, r3
 800b89c:	f000 f91c 	bl	800bad8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b8a8:	b480      	push	{r7}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	370c      	adds	r7, #12
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr

0800b8be <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b8be:	b580      	push	{r7, lr}
 800b8c0:	b084      	sub	sp, #16
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	60f8      	str	r0, [r7, #12]
 800b8c6:	60b9      	str	r1, [r7, #8]
 800b8c8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b8ca:	68b9      	ldr	r1, [r7, #8]
 800b8cc:	68f8      	ldr	r0, [r7, #12]
 800b8ce:	f000 f92c 	bl	800bb2a <_ZSt8_DestroyIPP6StreamEvT_S3_>
    }
 800b8d2:	bf00      	nop
 800b8d4:	3710      	adds	r7, #16
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	bd80      	pop	{r7, pc}

0800b8da <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b8da:	b480      	push	{r7}
 800b8dc:	b083      	sub	sp, #12
 800b8de:	af00      	add	r7, sp, #0
 800b8e0:	6078      	str	r0, [r7, #4]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	370c      	adds	r7, #12
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800b8f0:	b480      	push	{r7}
 800b8f2:	b083      	sub	sp, #12
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	370c      	adds	r7, #12
 800b8fe:	46bd      	mov	sp, r7
 800b900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b904:	4770      	bx	lr

0800b906 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b906:	b580      	push	{r7, lr}
 800b908:	b082      	sub	sp, #8
 800b90a:	af00      	add	r7, sp, #0
 800b90c:	6078      	str	r0, [r7, #4]
 800b90e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b910:	6839      	ldr	r1, [r7, #0]
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f92e 	bl	800bb74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	4618      	mov	r0, r3
 800b91c:	3708      	adds	r7, #8
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}

0800b922 <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800b922:	b480      	push	{r7}
 800b924:	b083      	sub	sp, #12
 800b926:	af00      	add	r7, sp, #0
 800b928:	6078      	str	r0, [r7, #4]
 800b92a:	6039      	str	r1, [r7, #0]
      { }
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4618      	mov	r0, r3
 800b930:	370c      	adds	r7, #12
 800b932:	46bd      	mov	sp, r7
 800b934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b938:	4770      	bx	lr

0800b93a <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b93a:	b480      	push	{r7}
 800b93c:	b083      	sub	sp, #12
 800b93e:	af00      	add	r7, sp, #0
 800b940:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	4618      	mov	r0, r3
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b950:	b5b0      	push	{r4, r5, r7, lr}
 800b952:	b088      	sub	sp, #32
 800b954:	af00      	add	r7, sp, #0
 800b956:	60f8      	str	r0, [r7, #12]
 800b958:	60b9      	str	r1, [r7, #8]
 800b95a:	607a      	str	r2, [r7, #4]
 800b95c:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d11a      	bne.n	800b99a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800b964:	68f8      	ldr	r0, [r7, #12]
 800b966:	f7ff fe4d 	bl	800b604 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b96a:	4602      	mov	r2, r0
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4293      	cmp	r3, r2
 800b970:	d013      	beq.n	800b99a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b972:	68fc      	ldr	r4, [r7, #12]
 800b974:	f107 0310 	add.w	r3, r7, #16
 800b978:	6839      	ldr	r1, [r7, #0]
 800b97a:	4618      	mov	r0, r3
 800b97c:	f7ff ff61 	bl	800b842 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b980:	4605      	mov	r5, r0
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7ff fe90 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	4629      	mov	r1, r5
 800b98e:	4620      	mov	r0, r4
 800b990:	f7ff faee 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b994:	4603      	mov	r3, r0
 800b996:	2b00      	cmp	r3, #0
 800b998:	d001      	beq.n	800b99e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 800b99a:	2301      	movs	r3, #1
 800b99c:	e000      	b.n	800b9a0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 800b99e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800b9a0:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800b9a2:	6838      	ldr	r0, [r7, #0]
 800b9a4:	f7ff ffc9 	bl	800b93a <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b9ae:	f000 f8ed 	bl	800bb8c <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 800b9b2:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800b9b8:	7ff8      	ldrb	r0, [r7, #31]
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	69b9      	ldr	r1, [r7, #24]
 800b9be:	f015 f833 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	695b      	ldr	r3, [r3, #20]
 800b9c6:	1c5a      	adds	r2, r3, #1
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800b9cc:	f107 0314 	add.w	r3, r7, #20
 800b9d0:	69b9      	ldr	r1, [r7, #24]
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7ff fd41 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b9d8:	697b      	ldr	r3, [r7, #20]
      }
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3720      	adds	r7, #32
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bdb0      	pop	{r4, r5, r7, pc}

0800b9e2 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() noexcept
 800b9e2:	b480      	push	{r7}
 800b9e4:	b083      	sub	sp, #12
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	370c      	adds	r7, #12
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f6:	4770      	bx	lr

0800b9f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800b9f8:	b480      	push	{r7}
 800b9fa:	b083      	sub	sp, #12
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	4618      	mov	r0, r3
 800ba04:	370c      	adds	r7, #12
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr

0800ba0e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b084      	sub	sp, #16
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	6039      	str	r1, [r7, #0]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	60fb      	str	r3, [r7, #12]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ba20:	f7f4 fc7e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d009      	beq.n	800ba3e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ba2a:	68ba      	ldr	r2, [r7, #8]
 800ba2c:	4613      	mov	r3, r2
 800ba2e:	005b      	lsls	r3, r3, #1
 800ba30:	4413      	add	r3, r2
 800ba32:	00db      	lsls	r3, r3, #3
 800ba34:	4618      	mov	r0, r3
 800ba36:	f014 ff8b 	bl	8020950 <_Znwj>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	e006      	b.n	800ba4c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800ba3e:	2200      	movs	r2, #0
 800ba40:	68b9      	ldr	r1, [r7, #8]
 800ba42:	68f8      	ldr	r0, [r7, #12]
 800ba44:	f000 f910 	bl	800bc68 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>
 800ba48:	4603      	mov	r3, r0
 800ba4a:	bf00      	nop
      { return __a.allocate(__n); }
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	68da      	ldr	r2, [r3, #12]
 800ba60:	f107 030c 	add.w	r3, r7, #12
 800ba64:	4611      	mov	r1, r2
 800ba66:	4618      	mov	r0, r3
 800ba68:	f7ff fcf7 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}

0800ba76 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800ba76:	b580      	push	{r7, lr}
 800ba78:	b084      	sub	sp, #16
 800ba7a:	af00      	add	r7, sp, #0
 800ba7c:	60f8      	str	r0, [r7, #12]
 800ba7e:	60b9      	str	r1, [r7, #8]
 800ba80:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800ba82:	68b8      	ldr	r0, [r7, #8]
 800ba84:	f000 f896 	bl	800bbb4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	681a      	ldr	r2, [r3, #0]
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	6878      	ldr	r0, [r7, #4]
 800ba92:	f7f6 fe8c 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800ba96:	4603      	mov	r3, r0
 800ba98:	681a      	ldr	r2, [r3, #0]
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	605a      	str	r2, [r3, #4]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	4618      	mov	r0, r3
 800baa2:	3710      	adds	r7, #16
 800baa4:	46bd      	mov	sp, r7
 800baa6:	bd80      	pop	{r7, pc}

0800baa8 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800baa8:	b580      	push	{r7, lr}
 800baaa:	b082      	sub	sp, #8
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f000 f88a 	bl	800bbca <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800bab6:	4603      	mov	r3, r0
 800bab8:	4618      	mov	r0, r3
 800baba:	3708      	adds	r7, #8
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
 800bac8:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800baca:	6838      	ldr	r0, [r7, #0]
 800bacc:	f000 f888 	bl	800bbe0 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>
	}
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}

0800bad8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bad8:	b580      	push	{r7, lr}
 800bada:	b088      	sub	sp, #32
 800badc:	af00      	add	r7, sp, #0
 800bade:	60f8      	str	r0, [r7, #12]
 800bae0:	60b9      	str	r1, [r7, #8]
 800bae2:	607a      	str	r2, [r7, #4]
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	61fb      	str	r3, [r7, #28]
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	61bb      	str	r3, [r7, #24]
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800baf0:	f7f4 fc16 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800baf4:	4603      	mov	r3, r0
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800bafa:	69b8      	ldr	r0, [r7, #24]
 800bafc:	f014 ff24 	bl	8020948 <_ZdlPv>
	    return;
 800bb00:	e005      	b.n	800bb0e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800bb02:	697a      	ldr	r2, [r7, #20]
 800bb04:	69b9      	ldr	r1, [r7, #24]
 800bb06:	69f8      	ldr	r0, [r7, #28]
 800bb08:	f000 f8d0 	bl	800bcac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 800bb0c:	bf00      	nop
 800bb0e:	bf00      	nop
 800bb10:	3720      	adds	r7, #32
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <_ZSt10destroy_atIP6StreamEvPT_>:
    destroy_at(_Tp* __location)
 800bb16:	b480      	push	{r7}
 800bb18:	b083      	sub	sp, #12
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
    }
 800bb1e:	bf00      	nop
 800bb20:	370c      	adds	r7, #12
 800bb22:	46bd      	mov	sp, r7
 800bb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb28:	4770      	bx	lr

0800bb2a <_ZSt8_DestroyIPP6StreamEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bb2a:	b580      	push	{r7, lr}
 800bb2c:	b082      	sub	sp, #8
 800bb2e:	af00      	add	r7, sp, #0
 800bb30:	6078      	str	r0, [r7, #4]
 800bb32:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800bb34:	f7f4 fbf4 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bb38:	4603      	mov	r3, r0
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d004      	beq.n	800bb48 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f857 	bl	800bbf4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>
 800bb46:	e003      	b.n	800bb50 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x26>
	__destroy(__first, __last);
 800bb48:	6839      	ldr	r1, [r7, #0]
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f000 f86a 	bl	800bc24 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>
    }
 800bb50:	3708      	adds	r7, #8
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}

0800bb56 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800bb56:	b580      	push	{r7, lr}
 800bb58:	b084      	sub	sp, #16
 800bb5a:	af00      	add	r7, sp, #0
 800bb5c:	60f8      	str	r0, [r7, #12]
 800bb5e:	60b9      	str	r1, [r7, #8]
 800bb60:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	009b      	lsls	r3, r3, #2
 800bb66:	4619      	mov	r1, r3
 800bb68:	68b8      	ldr	r0, [r7, #8]
 800bb6a:	f014 feef 	bl	802094c <_ZdlPvj>
      }
 800bb6e:	3710      	adds	r7, #16
 800bb70:	46bd      	mov	sp, r7
 800bb72:	bd80      	pop	{r7, pc}

0800bb74 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800bb74:	b480      	push	{r7}
 800bb76:	b083      	sub	sp, #12
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	6039      	str	r1, [r7, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr

0800bb8c <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681c      	ldr	r4, [r3, #0]
 800bb9a:	6838      	ldr	r0, [r7, #0]
 800bb9c:	f7ff fecd 	bl	800b93a <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bba0:	4603      	mov	r3, r0
 800bba2:	4619      	mov	r1, r3
 800bba4:	4620      	mov	r0, r4
 800bba6:	f000 f848 	bl	800bc3a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	4618      	mov	r0, r3
 800bbae:	370c      	adds	r7, #12
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd90      	pop	{r4, r7, pc}

0800bbb4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bbb4:	b480      	push	{r7}
 800bbb6:	b083      	sub	sp, #12
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	370c      	adds	r7, #12
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc8:	4770      	bx	lr

0800bbca <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() const noexcept
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr

0800bbe0 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>:
    destroy_at(_Tp* __location)
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
    }
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	429a      	cmp	r2, r3
 800bc04:	d00a      	beq.n	800bc1c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 f862 	bl	800bcd0 <_ZSt11__addressofIP6StreamEPT_RS2_>
 800bc0c:	4603      	mov	r3, r0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f000 f869 	bl	800bce6 <_ZSt8_DestroyIP6StreamEvPT_>
	  for (; __first != __last; ++__first)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	3304      	adds	r3, #4
 800bc18:	607b      	str	r3, [r7, #4]
 800bc1a:	e7f0      	b.n	800bbfe <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0xa>
	}
 800bc1c:	bf00      	nop
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800bc24:	b480      	push	{r7}
 800bc26:	b083      	sub	sp, #12
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
 800bc2e:	bf00      	nop
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800bc3a:	b580      	push	{r7, lr}
 800bc3c:	b084      	sub	sp, #16
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
 800bc42:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f7ff fcf5 	bl	800b634 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 800bc4a:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800bc4c:	6838      	ldr	r0, [r7, #0]
 800bc4e:	f7ff fe74 	bl	800b93a <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bc52:	4603      	mov	r3, r0
 800bc54:	461a      	mov	r2, r3
 800bc56:	68f9      	ldr	r1, [r7, #12]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 f84f 	bl	800bcfc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
	}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	f000 f861 	bl	800bd3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	bf8c      	ite	hi
 800bc82:	2301      	movhi	r3, #1
 800bc84:	2300      	movls	r3, #0
 800bc86:	b2db      	uxtb	r3, r3
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d001      	beq.n	800bc90 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bc8c:	f014 ff27 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bc90:	68ba      	ldr	r2, [r7, #8]
 800bc92:	4613      	mov	r3, r2
 800bc94:	005b      	lsls	r3, r3, #1
 800bc96:	4413      	add	r3, r2
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	f014 fe58 	bl	8020950 <_Znwj>
 800bca0:	4603      	mov	r3, r0
 800bca2:	bf00      	nop
      }
 800bca4:	4618      	mov	r0, r3
 800bca6:	3710      	adds	r7, #16
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b084      	sub	sp, #16
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	60f8      	str	r0, [r7, #12]
 800bcb4:	60b9      	str	r1, [r7, #8]
 800bcb6:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	4413      	add	r3, r2
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	68b8      	ldr	r0, [r7, #8]
 800bcc6:	f014 fe41 	bl	802094c <_ZdlPvj>
      }
 800bcca:	3710      	adds	r7, #16
 800bccc:	46bd      	mov	sp, r7
 800bcce:	bd80      	pop	{r7, pc}

0800bcd0 <_ZSt11__addressofIP6StreamEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bcd0:	b480      	push	{r7}
 800bcd2:	b083      	sub	sp, #12
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4618      	mov	r0, r3
 800bcdc:	370c      	adds	r7, #12
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <_ZSt8_DestroyIP6StreamEvPT_>:
    _Destroy(_Tp* __pointer)
 800bce6:	b580      	push	{r7, lr}
 800bce8:	b082      	sub	sp, #8
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800bcee:	6878      	ldr	r0, [r7, #4]
 800bcf0:	f7ff ff11 	bl	800bb16 <_ZSt10destroy_atIP6StreamEvPT_>
    }
 800bcf4:	bf00      	nop
 800bcf6:	3708      	adds	r7, #8
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800bcfc:	b5b0      	push	{r4, r5, r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	60f8      	str	r0, [r7, #12]
 800bd04:	60b9      	str	r1, [r7, #8]
 800bd06:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	4619      	mov	r1, r3
 800bd0c:	2018      	movs	r0, #24
 800bd0e:	f7f4 fb0f 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800bd12:	68f8      	ldr	r0, [r7, #12]
 800bd14:	f7ff fe70 	bl	800b9f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800bd18:	4604      	mov	r4, r0
 800bd1a:	68b8      	ldr	r0, [r7, #8]
 800bd1c:	f7ff fa48 	bl	800b1b0 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800bd20:	4605      	mov	r5, r0
 800bd22:	6878      	ldr	r0, [r7, #4]
 800bd24:	f7ff fe09 	bl	800b93a <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	461a      	mov	r2, r3
 800bd2c:	4629      	mov	r1, r5
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f000 f82c 	bl	800bd8c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 800bd34:	bf00      	nop
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bdb0      	pop	{r4, r5, r7, pc}

0800bd3c <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800bd3c:	b480      	push	{r7}
 800bd3e:	b083      	sub	sp, #12
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800bd44:	4b03      	ldr	r3, [pc, #12]	; (800bd54 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv+0x18>)
      }
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
 800bd52:	bf00      	nop
 800bd54:	05555555 	.word	0x05555555

0800bd58 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800bd58:	b5b0      	push	{r4, r5, r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800bd62:	6838      	ldr	r0, [r7, #0]
 800bd64:	f7ff fde9 	bl	800b93a <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bd68:	4605      	mov	r5, r0
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	2008      	movs	r0, #8
 800bd70:	f7f4 fade 	bl	8000330 <_ZnwjPv>
 800bd74:	4604      	mov	r4, r0
 800bd76:	4623      	mov	r3, r4
 800bd78:	462a      	mov	r2, r5
 800bd7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800bd7e:	e883 0003 	stmia.w	r3, {r0, r1}
 800bd82:	4623      	mov	r3, r4
 800bd84:	4618      	mov	r0, r3
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bdb0      	pop	{r4, r5, r7, pc}

0800bd8c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800bd98:	6878      	ldr	r0, [r7, #4]
 800bd9a:	f7ff fdce 	bl	800b93a <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	4619      	mov	r1, r3
 800bda2:	68b8      	ldr	r0, [r7, #8]
 800bda4:	f7ff ffd8 	bl	800bd58 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>
	}
 800bda8:	bf00      	nop
 800bdaa:	3710      	adds	r7, #16
 800bdac:	46bd      	mov	sp, r7
 800bdae:	bd80      	pop	{r7, pc}

0800bdb0 <_Z41__static_initialization_and_destruction_0ii>:
uint8_t Stream::current_id = 0b1000000;
Precision StreamMessage::precision_mode = _8_bits;
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
																{_16_bits, 65535},
																{_24_bits, 16777215},
																{_32_bits, 4294967295} };
 800bdb0:	b580      	push	{r7, lr}
 800bdb2:	b090      	sub	sp, #64	; 0x40
 800bdb4:	af02      	add	r7, sp, #8
 800bdb6:	6078      	str	r0, [r7, #4]
 800bdb8:	6039      	str	r1, [r7, #0]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d13e      	bne.n	800be3e <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bdc6:	4293      	cmp	r3, r2
 800bdc8:	d139      	bne.n	800be3e <_Z41__static_initialization_and_destruction_0ii+0x8e>
vector<Stream*> Stream::streams;
 800bdca:	4826      	ldr	r0, [pc, #152]	; (800be64 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800bdcc:	f7ff f806 	bl	800addc <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
 800bdd0:	f107 0310 	add.w	r3, r7, #16
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f014 ff0d 	bl	8020bf8 <memset>
 800bdde:	2301      	movs	r3, #1
 800bde0:	743b      	strb	r3, [r7, #16]
 800bde2:	23ff      	movs	r3, #255	; 0xff
 800bde4:	617b      	str	r3, [r7, #20]
 800bde6:	2302      	movs	r3, #2
 800bde8:	763b      	strb	r3, [r7, #24]
 800bdea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bdee:	61fb      	str	r3, [r7, #28]
 800bdf0:	2303      	movs	r3, #3
 800bdf2:	f887 3020 	strb.w	r3, [r7, #32]
 800bdf6:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800bdfa:	627b      	str	r3, [r7, #36]	; 0x24
 800bdfc:	2304      	movs	r3, #4
 800bdfe:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800be02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be08:	f107 0310 	add.w	r3, r7, #16
 800be0c:	60bb      	str	r3, [r7, #8]
 800be0e:	2304      	movs	r3, #4
 800be10:	60fb      	str	r3, [r7, #12]
 800be12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800be16:	4618      	mov	r0, r3
 800be18:	f7ff f82e 	bl	800ae78 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>
 800be1c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800be20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	4613      	mov	r3, r2
 800be28:	f107 0208 	add.w	r2, r7, #8
 800be2c:	ca06      	ldmia	r2, {r1, r2}
 800be2e:	480e      	ldr	r0, [pc, #56]	; (800be68 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800be30:	f7ff f839 	bl	800aea6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800be34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800be38:	4618      	mov	r0, r3
 800be3a:	f7ff f829 	bl	800ae90 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d10a      	bne.n	800be5a <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d105      	bne.n	800be5a <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800be4e:	4806      	ldr	r0, [pc, #24]	; (800be68 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800be50:	f7fe ffd1 	bl	800adf6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>
vector<Stream*> Stream::streams;
 800be54:	4803      	ldr	r0, [pc, #12]	; (800be64 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800be56:	f000 f809 	bl	800be6c <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>
																{_32_bits, 4294967295} };
 800be5a:	bf00      	nop
 800be5c:	3738      	adds	r7, #56	; 0x38
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	2400017c 	.word	0x2400017c
 800be68:	24000188 	.word	0x24000188

0800be6c <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800be6c:	b5b0      	push	{r4, r5, r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681c      	ldr	r4, [r3, #0]
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	4618      	mov	r0, r3
 800be80:	f7ff fd12 	bl	800b8a8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 800be84:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800be86:	461a      	mov	r2, r3
 800be88:	4629      	mov	r1, r5
 800be8a:	4620      	mov	r0, r4
 800be8c:	f7ff fd17 	bl	800b8be <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>
      }
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4618      	mov	r0, r3
 800be94:	f7fe ffd7 	bl	800ae46 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	4618      	mov	r0, r3
 800be9c:	3708      	adds	r7, #8
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bdb0      	pop	{r4, r5, r7, pc}

0800bea2 <_GLOBAL__sub_I__ZN6Stream7streamsE>:
 800bea2:	b580      	push	{r7, lr}
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800beaa:	2001      	movs	r0, #1
 800beac:	f7ff ff80 	bl	800bdb0 <_Z41__static_initialization_and_destruction_0ii>
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <_GLOBAL__sub_D__ZN6Stream7streamsE>:
 800beb2:	b580      	push	{r7, lr}
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800beba:	2000      	movs	r0, #0
 800bebc:	f7ff ff78 	bl	800bdb0 <_Z41__static_initialization_and_destruction_0ii>
 800bec0:	bd80      	pop	{r7, pc}

0800bec2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800bec2:	b580      	push	{r7, lr}
 800bec4:	b082      	sub	sp, #8
 800bec6:	af00      	add	r7, sp, #0
 800bec8:	6078      	str	r0, [r7, #4]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 f82f 	bl	800bf2e <_ZNSaIP5TimerED1Ev>
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}

0800beda <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800beda:	b580      	push	{r7, lr}
 800bedc:	b082      	sub	sp, #8
 800bede:	af00      	add	r7, sp, #0
 800bee0:	6078      	str	r0, [r7, #4]
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4618      	mov	r0, r3
 800bee6:	f000 f812 	bl	800bf0e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4618      	mov	r0, r3
 800beee:	3708      	adds	r7, #8
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>:
      vector() = default;
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b082      	sub	sp, #8
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	4618      	mov	r0, r3
 800bf00:	f7ff ffeb 	bl	800beda <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	4618      	mov	r0, r3
 800bf08:	3708      	adds	r7, #8
 800bf0a:	46bd      	mov	sp, r7
 800bf0c:	bd80      	pop	{r7, pc}

0800bf0e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bf0e:	b580      	push	{r7, lr}
 800bf10:	b082      	sub	sp, #8
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 f82d 	bl	800bf76 <_ZNSaIP5TimerEC1Ev>
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 f835 	bl	800bf8e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4618      	mov	r0, r3
 800bf28:	3708      	adds	r7, #8
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <_ZNSaIP5TimerED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4618      	mov	r0, r3
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	689a      	ldr	r2, [r3, #8]
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	1ad3      	subs	r3, r2, r3
 800bf5a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800bf5c:	461a      	mov	r2, r3
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f829 	bl	800bfb6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff ffab 	bl	800bec2 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3708      	adds	r7, #8
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}

0800bf76 <_ZNSaIP5TimerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800bf76:	b580      	push	{r7, lr}
 800bf78:	b082      	sub	sp, #8
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f000 f82c 	bl	800bfdc <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	4618      	mov	r0, r3
 800bf88:	3708      	adds	r7, #8
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}

0800bf8e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800bf8e:	b480      	push	{r7}
 800bf90:	b083      	sub	sp, #12
 800bf92:	af00      	add	r7, sp, #0
 800bf94:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2200      	movs	r2, #0
 800bf9a:	601a      	str	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	605a      	str	r2, [r3, #4]
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	609a      	str	r2, [r3, #8]
	{ }
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	4618      	mov	r0, r3
 800bfac:	370c      	adds	r7, #12
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr

0800bfb6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800bfb6:	b580      	push	{r7, lr}
 800bfb8:	b084      	sub	sp, #16
 800bfba:	af00      	add	r7, sp, #0
 800bfbc:	60f8      	str	r0, [r7, #12]
 800bfbe:	60b9      	str	r1, [r7, #8]
 800bfc0:	607a      	str	r2, [r7, #4]
	if (__p)
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d005      	beq.n	800bfd4 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	687a      	ldr	r2, [r7, #4]
 800bfcc:	68b9      	ldr	r1, [r7, #8]
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f000 f80f 	bl	800bff2 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>
      }
 800bfd4:	bf00      	nop
 800bfd6:	3710      	adds	r7, #16
 800bfd8:	46bd      	mov	sp, r7
 800bfda:	bd80      	pop	{r7, pc}

0800bfdc <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800bfdc:	b480      	push	{r7}
 800bfde:	b083      	sub	sp, #12
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	370c      	adds	r7, #12
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b088      	sub	sp, #32
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	60f8      	str	r0, [r7, #12]
 800bffa:	60b9      	str	r1, [r7, #8]
 800bffc:	607a      	str	r2, [r7, #4]
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	61fb      	str	r3, [r7, #28]
 800c002:	68bb      	ldr	r3, [r7, #8]
 800c004:	61bb      	str	r3, [r7, #24]
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c00a:	f7f4 f989 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d003      	beq.n	800c01c <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c014:	69b8      	ldr	r0, [r7, #24]
 800c016:	f014 fc97 	bl	8020948 <_ZdlPv>
	    return;
 800c01a:	e005      	b.n	800c028 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c01c:	697a      	ldr	r2, [r7, #20]
 800c01e:	69b9      	ldr	r1, [r7, #24]
 800c020:	69f8      	ldr	r0, [r7, #28]
 800c022:	f000 f83e 	bl	800c0a2 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c026:	bf00      	nop
 800c028:	bf00      	nop
 800c02a:	3720      	adds	r7, #32
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}

0800c030 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4618      	mov	r0, r3
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c052:	68b9      	ldr	r1, [r7, #8]
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f000 f80e 	bl	800c076 <_ZSt8_DestroyIPP5TimerEvT_S3_>
    }
 800c05a:	bf00      	nop
 800c05c:	3710      	adds	r7, #16
 800c05e:	46bd      	mov	sp, r7
 800c060:	bd80      	pop	{r7, pc}

0800c062 <_ZSt10destroy_atIP5TimerEvPT_>:
    destroy_at(_Tp* __location)
 800c062:	b480      	push	{r7}
 800c064:	b083      	sub	sp, #12
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
    }
 800c06a:	bf00      	nop
 800c06c:	370c      	adds	r7, #12
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <_ZSt8_DestroyIPP5TimerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c076:	b580      	push	{r7, lr}
 800c078:	b082      	sub	sp, #8
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c080:	f7f4 f94e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c084:	4603      	mov	r3, r0
 800c086:	2b00      	cmp	r3, #0
 800c088:	d004      	beq.n	800c094 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c08a:	6839      	ldr	r1, [r7, #0]
 800c08c:	6878      	ldr	r0, [r7, #4]
 800c08e:	f000 f817 	bl	800c0c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>
 800c092:	e003      	b.n	800c09c <_ZSt8_DestroyIPP5TimerEvT_S3_+0x26>
	__destroy(__first, __last);
 800c094:	6839      	ldr	r1, [r7, #0]
 800c096:	6878      	ldr	r0, [r7, #4]
 800c098:	f000 f82a 	bl	800c0f0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>
    }
 800c09c:	3708      	adds	r7, #8
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b084      	sub	sp, #16
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	60f8      	str	r0, [r7, #12]
 800c0aa:	60b9      	str	r1, [r7, #8]
 800c0ac:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	68b8      	ldr	r0, [r7, #8]
 800c0b6:	f014 fc49 	bl	802094c <_ZdlPvj>
      }
 800c0ba:	3710      	adds	r7, #16
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b082      	sub	sp, #8
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d00a      	beq.n	800c0e8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f000 f817 	bl	800c106 <_ZSt11__addressofIP5TimerEPT_RS2_>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 f81e 	bl	800c11c <_ZSt8_DestroyIP5TimerEvPT_>
	  for (; __first != __last; ++__first)
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	3304      	adds	r3, #4
 800c0e4:	607b      	str	r3, [r7, #4]
 800c0e6:	e7f0      	b.n	800c0ca <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0xa>
	}
 800c0e8:	bf00      	nop
 800c0ea:	3708      	adds	r7, #8
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}

0800c0f0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c0f0:	b480      	push	{r7}
 800c0f2:	b083      	sub	sp, #12
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	6078      	str	r0, [r7, #4]
 800c0f8:	6039      	str	r1, [r7, #0]
 800c0fa:	bf00      	nop
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <_ZSt11__addressofIP5TimerEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c106:	b480      	push	{r7}
 800c108:	b083      	sub	sp, #12
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	4618      	mov	r0, r3
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr

0800c11c <_ZSt8_DestroyIP5TimerEvPT_>:
    _Destroy(_Tp* __pointer)
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b082      	sub	sp, #8
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c124:	6878      	ldr	r0, [r7, #4]
 800c126:	f7ff ff9c 	bl	800c062 <_ZSt10destroy_atIP5TimerEvPT_>
    }
 800c12a:	bf00      	nop
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
	...

0800c134 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Timer.hpp"

vector<Timer*> Timer::all_timers;
 800c134:	b580      	push	{r7, lr}
 800c136:	b082      	sub	sp, #8
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b01      	cmp	r3, #1
 800c142:	d107      	bne.n	800c154 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c144:	683b      	ldr	r3, [r7, #0]
 800c146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c14a:	4293      	cmp	r3, r2
 800c14c:	d102      	bne.n	800c154 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c14e:	4809      	ldr	r0, [pc, #36]	; (800c174 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c150:	f7ff fed0 	bl	800bef4 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d107      	bne.n	800c16a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c160:	4293      	cmp	r3, r2
 800c162:	d102      	bne.n	800c16a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c164:	4803      	ldr	r0, [pc, #12]	; (800c174 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c166:	f000 f807 	bl	800c178 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>
 800c16a:	bf00      	nop
 800c16c:	3708      	adds	r7, #8
 800c16e:	46bd      	mov	sp, r7
 800c170:	bd80      	pop	{r7, pc}
 800c172:	bf00      	nop
 800c174:	240001a0 	.word	0x240001a0

0800c178 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c178:	b5b0      	push	{r4, r5, r7, lr}
 800c17a:	b082      	sub	sp, #8
 800c17c:	af00      	add	r7, sp, #0
 800c17e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681c      	ldr	r4, [r3, #0]
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7ff ff50 	bl	800c030 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c190:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c192:	461a      	mov	r2, r3
 800c194:	4629      	mov	r1, r5
 800c196:	4620      	mov	r0, r4
 800c198:	f7ff ff55 	bl	800c046 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>
      }
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7ff fed0 	bl	800bf44 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	3708      	adds	r7, #8
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bdb0      	pop	{r4, r5, r7, pc}

0800c1ae <_GLOBAL__sub_I__ZN5Timer10all_timersE>:
 800c1ae:	b580      	push	{r7, lr}
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c1b6:	2001      	movs	r0, #1
 800c1b8:	f7ff ffbc 	bl	800c134 <_Z41__static_initialization_and_destruction_0ii>
 800c1bc:	bd80      	pop	{r7, pc}

0800c1be <_GLOBAL__sub_D__ZN5Timer10all_timersE>:
 800c1be:	b580      	push	{r7, lr}
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c1c6:	2000      	movs	r0, #0
 800c1c8:	f7ff ffb4 	bl	800c134 <_Z41__static_initialization_and_destruction_0ii>
 800c1cc:	bd80      	pop	{r7, pc}

0800c1ce <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>:

class HALTimer {
public:
	IRQn_Type IRQn;
	TIM_HandleTypeDef* tim;
	HALTimer(TIM_HandleTypeDef* tim, IRQn_Type IRQn) : IRQn(IRQn), tim(tim) {  }
 800c1ce:	b480      	push	{r7}
 800c1d0:	b085      	sub	sp, #20
 800c1d2:	af00      	add	r7, sp, #0
 800c1d4:	60f8      	str	r0, [r7, #12]
 800c1d6:	60b9      	str	r1, [r7, #8]
 800c1d8:	4613      	mov	r3, r2
 800c1da:	80fb      	strh	r3, [r7, #6]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	88fa      	ldrh	r2, [r7, #6]
 800c1e0:	801a      	strh	r2, [r3, #0]
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	68ba      	ldr	r2, [r7, #8]
 800c1e6:	605a      	str	r2, [r3, #4]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
	...

0800c1f8 <_Z41__static_initialization_and_destruction_0ii>:

HALTimer _tim1(&htim1, TIM1_TRG_COM_IRQn);
HALTimer _tim2(&htim2, TIM2_IRQn);
HALTimer _tim3(&htim3, TIM3_IRQn);
HALTimer _tim4(&htim4, TIM4_IRQn);
HALTimer _tim8(&htim8, TIM8_TRG_COM_TIM14_IRQn);
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d11d      	bne.n	800c244 <_Z41__static_initialization_and_destruction_0ii+0x4c>
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c20e:	4293      	cmp	r3, r2
 800c210:	d118      	bne.n	800c244 <_Z41__static_initialization_and_destruction_0ii+0x4c>
HALTimer _tim1(&htim1, TIM1_TRG_COM_IRQn);
 800c212:	221a      	movs	r2, #26
 800c214:	490d      	ldr	r1, [pc, #52]	; (800c24c <_Z41__static_initialization_and_destruction_0ii+0x54>)
 800c216:	480e      	ldr	r0, [pc, #56]	; (800c250 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 800c218:	f7ff ffd9 	bl	800c1ce <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
HALTimer _tim2(&htim2, TIM2_IRQn);
 800c21c:	221c      	movs	r2, #28
 800c21e:	490d      	ldr	r1, [pc, #52]	; (800c254 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800c220:	480d      	ldr	r0, [pc, #52]	; (800c258 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800c222:	f7ff ffd4 	bl	800c1ce <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
HALTimer _tim3(&htim3, TIM3_IRQn);
 800c226:	221d      	movs	r2, #29
 800c228:	490c      	ldr	r1, [pc, #48]	; (800c25c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800c22a:	480d      	ldr	r0, [pc, #52]	; (800c260 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 800c22c:	f7ff ffcf 	bl	800c1ce <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
HALTimer _tim4(&htim4, TIM4_IRQn);
 800c230:	221e      	movs	r2, #30
 800c232:	490c      	ldr	r1, [pc, #48]	; (800c264 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800c234:	480c      	ldr	r0, [pc, #48]	; (800c268 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800c236:	f7ff ffca 	bl	800c1ce <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
HALTimer _tim8(&htim8, TIM8_TRG_COM_TIM14_IRQn);
 800c23a:	222d      	movs	r2, #45	; 0x2d
 800c23c:	490b      	ldr	r1, [pc, #44]	; (800c26c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800c23e:	480c      	ldr	r0, [pc, #48]	; (800c270 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800c240:	f7ff ffc5 	bl	800c1ce <_ZN8HALTimerC1EP17TIM_HandleTypeDef9IRQn_Type>
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	24000d40 	.word	0x24000d40
 800c250:	240001ac 	.word	0x240001ac
 800c254:	24000d8c 	.word	0x24000d8c
 800c258:	240001b4 	.word	0x240001b4
 800c25c:	24000dd8 	.word	0x24000dd8
 800c260:	240001bc 	.word	0x240001bc
 800c264:	24000e24 	.word	0x24000e24
 800c268:	240001c4 	.word	0x240001c4
 800c26c:	24000f54 	.word	0x24000f54
 800c270:	240001cc 	.word	0x240001cc

0800c274 <_GLOBAL__sub_I__tim1>:
 800c274:	b580      	push	{r7, lr}
 800c276:	af00      	add	r7, sp, #0
 800c278:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c27c:	2001      	movs	r0, #1
 800c27e:	f7ff ffbb 	bl	800c1f8 <_Z41__static_initialization_and_destruction_0ii>
 800c282:	bd80      	pop	{r7, pc}

0800c284 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f000 f834 	bl	800c2fa <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	4618      	mov	r0, r3
 800c296:	3708      	adds	r7, #8
 800c298:	46bd      	mov	sp, r7
 800c29a:	bd80      	pop	{r7, pc}

0800c29c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 800c29c:	b580      	push	{r7, lr}
 800c29e:	b082      	sub	sp, #8
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	f000 f812 	bl	800c2d0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	3708      	adds	r7, #8
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	bd80      	pop	{r7, pc}

0800c2b6 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>:
      map() = default;
 800c2b6:	b580      	push	{r7, lr}
 800c2b8:	b082      	sub	sp, #8
 800c2ba:	af00      	add	r7, sp, #0
 800c2bc:	6078      	str	r0, [r7, #4]
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	f7ff ffeb 	bl	800c29c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f82e 	bl	800c33a <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	4618      	mov	r0, r3
 800c2e2:	f000 f836 	bl	800c352 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	3304      	adds	r3, #4
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f7f4 f82c 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}

0800c2fa <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c2fa:	b480      	push	{r7}
 800c2fc:	b083      	sub	sp, #12
 800c2fe:	af00      	add	r7, sp, #0
 800c300:	6078      	str	r0, [r7, #4]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4618      	mov	r0, r3
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f844 	bl	800c3a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800c31e:	4603      	mov	r3, r0
 800c320:	4619      	mov	r1, r3
 800c322:	6878      	ldr	r0, [r7, #4]
 800c324:	f000 f820 	bl	800c368 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f7ff ffaa 	bl	800c284 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	4618      	mov	r0, r3
 800c334:	3708      	adds	r7, #8
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b082      	sub	sp, #8
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 f83b 	bl	800c3be <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>:
      _Rb_tree_key_compare()
 800c352:	b480      	push	{r7}
 800c354:	b083      	sub	sp, #12
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
      { }
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	4618      	mov	r0, r3
 800c35e:	370c      	adds	r7, #12
 800c360:	46bd      	mov	sp, r7
 800c362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c366:	4770      	bx	lr

0800c368 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c368:	b580      	push	{r7, lr}
 800c36a:	b084      	sub	sp, #16
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d012      	beq.n	800c39e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800c378:	6838      	ldr	r0, [r7, #0]
 800c37a:	f000 f82b 	bl	800c3d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c37e:	4603      	mov	r3, r0
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f7ff fff0 	bl	800c368 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800c388:	6838      	ldr	r0, [r7, #0]
 800c38a:	f000 f82f 	bl	800c3ec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c38e:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c390:	6839      	ldr	r1, [r7, #0]
 800c392:	6878      	ldr	r0, [r7, #4]
 800c394:	f000 f836 	bl	800c404 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c39c:	e7e9      	b.n	800c372 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800c39e:	bf00      	nop
 800c3a0:	3710      	adds	r7, #16
 800c3a2:	46bd      	mov	sp, r7
 800c3a4:	bd80      	pop	{r7, pc}

0800c3a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c3a6:	b480      	push	{r7}
 800c3a8:	b083      	sub	sp, #12
 800c3aa:	af00      	add	r7, sp, #0
 800c3ac:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c3be:	b480      	push	{r7}
 800c3c0:	b083      	sub	sp, #12
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	370c      	adds	r7, #12
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c3d4:	b480      	push	{r7}
 800c3d6:	b083      	sub	sp, #12
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	370c      	adds	r7, #12
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	689b      	ldr	r3, [r3, #8]
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	370c      	adds	r7, #12
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c402:	4770      	bx	lr

0800c404 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c404:	b580      	push	{r7, lr}
 800c406:	b082      	sub	sp, #8
 800c408:	af00      	add	r7, sp, #0
 800c40a:	6078      	str	r0, [r7, #4]
 800c40c:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800c40e:	6839      	ldr	r1, [r7, #0]
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f808 	bl	800c426 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 800c416:	6839      	ldr	r1, [r7, #0]
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f000 f819 	bl	800c450 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 800c41e:	bf00      	nop
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c426:	b590      	push	{r4, r7, lr}
 800c428:	b083      	sub	sp, #12
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800c430:	6878      	ldr	r0, [r7, #4]
 800c432:	f000 f81f 	bl	800c474 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c436:	4604      	mov	r4, r0
 800c438:	6838      	ldr	r0, [r7, #0]
 800c43a:	f7f9 f815 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 800c43e:	4603      	mov	r3, r0
 800c440:	4619      	mov	r1, r3
 800c442:	4620      	mov	r0, r4
 800c444:	f000 f821 	bl	800c48a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>
      }
 800c448:	bf00      	nop
 800c44a:	370c      	adds	r7, #12
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd90      	pop	{r4, r7, pc}

0800c450 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c450:	b580      	push	{r7, lr}
 800c452:	b082      	sub	sp, #8
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 f80a 	bl	800c474 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c460:	4603      	mov	r3, r0
 800c462:	2201      	movs	r2, #1
 800c464:	6839      	ldr	r1, [r7, #0]
 800c466:	4618      	mov	r0, r3
 800c468:	f000 f81b 	bl	800c4a2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>
 800c46c:	bf00      	nop
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4618      	mov	r0, r3
 800c480:	370c      	adds	r7, #12
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr

0800c48a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c48a:	b580      	push	{r7, lr}
 800c48c:	b082      	sub	sp, #8
 800c48e:	af00      	add	r7, sp, #0
 800c490:	6078      	str	r0, [r7, #4]
 800c492:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800c494:	6838      	ldr	r0, [r7, #0]
 800c496:	f000 f823 	bl	800c4e0 <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>
	}
 800c49a:	bf00      	nop
 800c49c:	3708      	adds	r7, #8
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b088      	sub	sp, #32
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	60f8      	str	r0, [r7, #12]
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	607a      	str	r2, [r7, #4]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	61fb      	str	r3, [r7, #28]
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	61bb      	str	r3, [r7, #24]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c4ba:	f7f3 ff31 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d003      	beq.n	800c4cc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800c4c4:	69b8      	ldr	r0, [r7, #24]
 800c4c6:	f014 fa3f 	bl	8020948 <_ZdlPv>
	    return;
 800c4ca:	e005      	b.n	800c4d8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	69b9      	ldr	r1, [r7, #24]
 800c4d0:	69f8      	ldr	r0, [r7, #28]
 800c4d2:	f000 f80f 	bl	800c4f4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800c4d6:	bf00      	nop
 800c4d8:	bf00      	nop
 800c4da:	3720      	adds	r7, #32
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	bd80      	pop	{r7, pc}

0800c4e0 <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>:
    destroy_at(_Tp* __location)
 800c4e0:	b480      	push	{r7}
 800c4e2:	b083      	sub	sp, #12
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
    }
 800c4e8:	bf00      	nop
 800c4ea:	370c      	adds	r7, #12
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f2:	4770      	bx	lr

0800c4f4 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b084      	sub	sp, #16
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	60b9      	str	r1, [r7, #8]
 800c4fe:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	4613      	mov	r3, r2
 800c504:	005b      	lsls	r3, r3, #1
 800c506:	4413      	add	r3, r2
 800c508:	00db      	lsls	r3, r3, #3
 800c50a:	4619      	mov	r1, r3
 800c50c:	68b8      	ldr	r0, [r7, #8]
 800c50e:	f014 fa1d 	bl	802094c <_ZdlPvj>
      }
 800c512:	3710      	adds	r7, #16
 800c514:	46bd      	mov	sp, r7
 800c516:	bd80      	pop	{r7, pc}

0800c518 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>:
      ~map() = default;
 800c518:	b580      	push	{r7, lr}
 800c51a:	b082      	sub	sp, #8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	4618      	mov	r0, r3
 800c524:	f7ff fef4 	bl	800c310 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4618      	mov	r0, r3
 800c52c:	3708      	adds	r7, #8
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Models/Packet.hpp"

map<uint16_t, Packet*> Packet::all_packets;
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
 800c53c:	6039      	str	r1, [r7, #0]
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d107      	bne.n	800c554 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c54a:	4293      	cmp	r3, r2
 800c54c:	d102      	bne.n	800c554 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c54e:	4809      	ldr	r0, [pc, #36]	; (800c574 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c550:	f7ff feb1 	bl	800c2b6 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d107      	bne.n	800c56a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c560:	4293      	cmp	r3, r2
 800c562:	d102      	bne.n	800c56a <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c564:	4803      	ldr	r0, [pc, #12]	; (800c574 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c566:	f7ff ffd7 	bl	800c518 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>
 800c56a:	bf00      	nop
 800c56c:	3708      	adds	r7, #8
 800c56e:	46bd      	mov	sp, r7
 800c570:	bd80      	pop	{r7, pc}
 800c572:	bf00      	nop
 800c574:	240001d4 	.word	0x240001d4

0800c578 <_GLOBAL__sub_I__ZN6Packet11all_packetsE>:
 800c578:	b580      	push	{r7, lr}
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c580:	2001      	movs	r0, #1
 800c582:	f7ff ffd7 	bl	800c534 <_Z41__static_initialization_and_destruction_0ii>
 800c586:	bd80      	pop	{r7, pc}

0800c588 <_GLOBAL__sub_D__ZN6Packet11all_packetsE>:
 800c588:	b580      	push	{r7, lr}
 800c58a:	af00      	add	r7, sp, #0
 800c58c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c590:	2000      	movs	r0, #0
 800c592:	f7ff ffcf 	bl	800c534 <_Z41__static_initialization_and_destruction_0ii>
 800c596:	bd80      	pop	{r7, pc}

0800c598 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f000 f86f 	bl	800c684 <_ZNSaIP3PinED1Ev>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3708      	adds	r7, #8
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b082      	sub	sp, #8
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f000 f852 	bl	800c664 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4618      	mov	r0, r3
 800c5c4:	3708      	adds	r7, #8
 800c5c6:	46bd      	mov	sp, r7
 800c5c8:	bd80      	pop	{r7, pc}

0800c5ca <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>:
      vector() = default;
 800c5ca:	b580      	push	{r7, lr}
 800c5cc:	b082      	sub	sp, #8
 800c5ce:	af00      	add	r7, sp, #0
 800c5d0:	6078      	str	r0, [r7, #4]
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	f7ff ffeb 	bl	800c5b0 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3708      	adds	r7, #8
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>:
#include "Mini-STLIB/Models/Pin.hpp"

vector<Pin*> Pin::all_pins;

Pin::Pin(GPIO_TypeDef* port, uint16_t pin) : port(port), pin(pin) {
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	60b9      	str	r1, [r7, #8]
 800c5ee:	4613      	mov	r3, r2
 800c5f0:	80fb      	strh	r3, [r7, #6]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	68ba      	ldr	r2, [r7, #8]
 800c5f6:	601a      	str	r2, [r3, #0]
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	88fa      	ldrh	r2, [r7, #6]
 800c5fc:	809a      	strh	r2, [r3, #4]
	Pin::all_pins.push_back(this);
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	617b      	str	r3, [r7, #20]
 800c602:	f107 0314 	add.w	r3, r7, #20
 800c606:	4619      	mov	r1, r3
 800c608:	4803      	ldr	r0, [pc, #12]	; (800c618 <_ZN3PinC1EP12GPIO_TypeDeft+0x34>)
 800c60a:	f000 f85f 	bl	800c6cc <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>
}
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	4618      	mov	r0, r3
 800c612:	3718      	adds	r7, #24
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}
 800c618:	240001ec 	.word	0x240001ec

0800c61c <_ZN3Pin15get_pin_from_idEt>:

optional<Pin*> Pin::get_pin_from_id(uint16_t id){
 800c61c:	b590      	push	{r4, r7, lr}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	460b      	mov	r3, r1
 800c626:	807b      	strh	r3, [r7, #2]
	if(id < Pin::all_pins.size())
 800c628:	887c      	ldrh	r4, [r7, #2]
 800c62a:	480d      	ldr	r0, [pc, #52]	; (800c660 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c62c:	f000 f85f 	bl	800c6ee <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800c630:	4603      	mov	r3, r0
 800c632:	429c      	cmp	r4, r3
 800c634:	bf34      	ite	cc
 800c636:	2301      	movcc	r3, #1
 800c638:	2300      	movcs	r3, #0
 800c63a:	b2db      	uxtb	r3, r3
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d00a      	beq.n	800c656 <_ZN3Pin15get_pin_from_idEt+0x3a>
		return Pin::all_pins[id];
 800c640:	887b      	ldrh	r3, [r7, #2]
 800c642:	4619      	mov	r1, r3
 800c644:	4806      	ldr	r0, [pc, #24]	; (800c660 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c646:	f000 f862 	bl	800c70e <_ZNSt6vectorIP3PinSaIS1_EEixEj>
 800c64a:	4603      	mov	r3, r0
 800c64c:	4619      	mov	r1, r3
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f000 f86d 	bl	800c72e <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>
 800c654:	e000      	b.n	800c658 <_ZN3Pin15get_pin_from_idEt+0x3c>
}
 800c656:	bf00      	nop
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd90      	pop	{r4, r7, pc}
 800c660:	240001ec 	.word	0x240001ec

0800c664 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c664:	b580      	push	{r7, lr}
 800c666:	b082      	sub	sp, #8
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	f000 f872 	bl	800c756 <_ZNSaIP3PinEC1Ev>
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	4618      	mov	r0, r3
 800c676:	f000 f87a 	bl	800c76e <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	4618      	mov	r0, r3
 800c67e:	3708      	adds	r7, #8
 800c680:	46bd      	mov	sp, r7
 800c682:	bd80      	pop	{r7, pc}

0800c684 <_ZNSaIP3PinED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c684:	b480      	push	{r7}
 800c686:	b083      	sub	sp, #12
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	4618      	mov	r0, r3
 800c690:	370c      	adds	r7, #12
 800c692:	46bd      	mov	sp, r7
 800c694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c698:	4770      	bx	lr

0800c69a <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	689a      	ldr	r2, [r3, #8]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	1ad3      	subs	r3, r2, r3
 800c6b0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f000 f86e 	bl	800c796 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	4618      	mov	r0, r3
 800c6be:	f7ff ff6b 	bl	800c598 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b082      	sub	sp, #8
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c6d6:	6838      	ldr	r0, [r7, #0]
 800c6d8:	f000 f870 	bl	800c7bc <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	4619      	mov	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f876 	bl	800c7d2 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800c6e6:	bf00      	nop
 800c6e8:	3708      	adds	r7, #8
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}

0800c6ee <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c6ee:	b480      	push	{r7}
 800c6f0:	b083      	sub	sp, #12
 800c6f2:	af00      	add	r7, sp, #0
 800c6f4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	685a      	ldr	r2, [r3, #4]
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	1ad3      	subs	r3, r2, r3
 800c700:	109b      	asrs	r3, r3, #2
 800c702:	4618      	mov	r0, r3
 800c704:	370c      	adds	r7, #12
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr

0800c70e <_ZNSt6vectorIP3PinSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c70e:	b480      	push	{r7}
 800c710:	b083      	sub	sp, #12
 800c712:	af00      	add	r7, sp, #0
 800c714:	6078      	str	r0, [r7, #4]
 800c716:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	009b      	lsls	r3, r3, #2
 800c720:	4413      	add	r3, r2
      }
 800c722:	4618      	mov	r0, r3
 800c724:	370c      	adds	r7, #12
 800c726:	46bd      	mov	sp, r7
 800c728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c72c:	4770      	bx	lr

0800c72e <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800c72e:	b5b0      	push	{r4, r5, r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800c738:	687c      	ldr	r4, [r7, #4]
 800c73a:	6838      	ldr	r0, [r7, #0]
 800c73c:	f000 f87b 	bl	800c836 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c740:	4603      	mov	r3, r0
 800c742:	461a      	mov	r2, r3
 800c744:	4629      	mov	r1, r5
 800c746:	4620      	mov	r0, r4
 800c748:	f000 f891 	bl	800c86e <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	4618      	mov	r0, r3
 800c750:	3708      	adds	r7, #8
 800c752:	46bd      	mov	sp, r7
 800c754:	bdb0      	pop	{r4, r5, r7, pc}

0800c756 <_ZNSaIP3PinEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c756:	b580      	push	{r7, lr}
 800c758:	b082      	sub	sp, #8
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
 800c75e:	6878      	ldr	r0, [r7, #4]
 800c760:	f000 f89a 	bl	800c898 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4618      	mov	r0, r3
 800c768:	3708      	adds	r7, #8
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}

0800c76e <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2200      	movs	r2, #0
 800c77a:	601a      	str	r2, [r3, #0]
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	605a      	str	r2, [r3, #4]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	609a      	str	r2, [r3, #8]
	{ }
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	4618      	mov	r0, r3
 800c78c:	370c      	adds	r7, #12
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr

0800c796 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c796:	b580      	push	{r7, lr}
 800c798:	b084      	sub	sp, #16
 800c79a:	af00      	add	r7, sp, #0
 800c79c:	60f8      	str	r0, [r7, #12]
 800c79e:	60b9      	str	r1, [r7, #8]
 800c7a0:	607a      	str	r2, [r7, #4]
	if (__p)
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d005      	beq.n	800c7b4 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	68b9      	ldr	r1, [r7, #8]
 800c7ae:	4618      	mov	r0, r3
 800c7b0:	f000 f87d 	bl	800c8ae <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>
      }
 800c7b4:	bf00      	nop
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}

0800c7bc <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c7bc:	b480      	push	{r7}
 800c7be:	b083      	sub	sp, #12
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	370c      	adds	r7, #12
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr

0800c7d2 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c7d2:	b5b0      	push	{r4, r5, r7, lr}
 800c7d4:	b082      	sub	sp, #8
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685a      	ldr	r2, [r3, #4]
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	689b      	ldr	r3, [r3, #8]
 800c7e4:	429a      	cmp	r2, r3
 800c7e6:	d011      	beq.n	800c80c <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c7e8:	687c      	ldr	r4, [r7, #4]
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	685d      	ldr	r5, [r3, #4]
 800c7ee:	6838      	ldr	r0, [r7, #0]
 800c7f0:	f000 f87c 	bl	800c8ec <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7f4:	4603      	mov	r3, r0
 800c7f6:	461a      	mov	r2, r3
 800c7f8:	4629      	mov	r1, r5
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 f896 	bl	800c92c <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	1d1a      	adds	r2, r3, #4
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	605a      	str	r2, [r3, #4]
 800c80a:	e00c      	b.n	800c826 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f000 f89f 	bl	800c950 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800c812:	4604      	mov	r4, r0
 800c814:	6838      	ldr	r0, [r7, #0]
 800c816:	f000 f869 	bl	800c8ec <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c81a:	4603      	mov	r3, r0
 800c81c:	461a      	mov	r2, r3
 800c81e:	4621      	mov	r1, r4
 800c820:	6878      	ldr	r0, [r7, #4]
 800c822:	f000 f8a7 	bl	800c974 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f920 	bl	800ca6c <_ZNSt6vectorIP3PinSaIS1_EE4backEv>
 800c82c:	4603      	mov	r3, r0
      }
 800c82e:	4618      	mov	r0, r3
 800c830:	3708      	adds	r7, #8
 800c832:	46bd      	mov	sp, r7
 800c834:	bdb0      	pop	{r4, r5, r7, pc}

0800c836 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c836:	b480      	push	{r7}
 800c838:	b083      	sub	sp, #12
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	4618      	mov	r0, r3
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800c84c:	b590      	push	{r4, r7, lr}
 800c84e:	b085      	sub	sp, #20
 800c850:	af00      	add	r7, sp, #0
 800c852:	60f8      	str	r0, [r7, #12]
 800c854:	7239      	strb	r1, [r7, #8]
 800c856:	607a      	str	r2, [r7, #4]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	687a      	ldr	r2, [r7, #4]
 800c85c:	4621      	mov	r1, r4
 800c85e:	4618      	mov	r0, r3
 800c860:	f000 f931 	bl	800cac6 <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	4618      	mov	r0, r3
 800c868:	3714      	adds	r7, #20
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd90      	pop	{r4, r7, pc}

0800c86e <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800c86e:	b5b0      	push	{r4, r5, r7, lr}
 800c870:	b084      	sub	sp, #16
 800c872:	af00      	add	r7, sp, #0
 800c874:	60f8      	str	r0, [r7, #12]
 800c876:	7239      	strb	r1, [r7, #8]
 800c878:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800c87a:	68fc      	ldr	r4, [r7, #12]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7ff ffda 	bl	800c836 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c882:	4603      	mov	r3, r0
 800c884:	461a      	mov	r2, r3
 800c886:	4629      	mov	r1, r5
 800c888:	4620      	mov	r0, r4
 800c88a:	f7ff ffdf 	bl	800c84c <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	4618      	mov	r0, r3
 800c892:	3710      	adds	r7, #16
 800c894:	46bd      	mov	sp, r7
 800c896:	bdb0      	pop	{r4, r5, r7, pc}

0800c898 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c898:	b480      	push	{r7}
 800c89a:	b083      	sub	sp, #12
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	370c      	adds	r7, #12
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ac:	4770      	bx	lr

0800c8ae <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b088      	sub	sp, #32
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	60f8      	str	r0, [r7, #12]
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	607a      	str	r2, [r7, #4]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	61fb      	str	r3, [r7, #28]
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	61bb      	str	r3, [r7, #24]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c8c6:	f7f3 fd2b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d003      	beq.n	800c8d8 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c8d0:	69b8      	ldr	r0, [r7, #24]
 800c8d2:	f014 f839 	bl	8020948 <_ZdlPv>
	    return;
 800c8d6:	e005      	b.n	800c8e4 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c8d8:	697a      	ldr	r2, [r7, #20]
 800c8da:	69b9      	ldr	r1, [r7, #24]
 800c8dc:	69f8      	ldr	r0, [r7, #28]
 800c8de:	f000 f9f7 	bl	800ccd0 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c8e2:	bf00      	nop
 800c8e4:	bf00      	nop
 800c8e6:	3720      	adds	r7, #32
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	bd80      	pop	{r7, pc}

0800c8ec <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	370c      	adds	r7, #12
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c900:	4770      	bx	lr

0800c902 <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800c902:	b590      	push	{r4, r7, lr}
 800c904:	b083      	sub	sp, #12
 800c906:	af00      	add	r7, sp, #0
 800c908:	6078      	str	r0, [r7, #4]
 800c90a:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800c90c:	6838      	ldr	r0, [r7, #0]
 800c90e:	f7ff ffed 	bl	800c8ec <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c912:	4603      	mov	r3, r0
 800c914:	681c      	ldr	r4, [r3, #0]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	4619      	mov	r1, r3
 800c91a:	2004      	movs	r0, #4
 800c91c:	f7f3 fd08 	bl	8000330 <_ZnwjPv>
 800c920:	4603      	mov	r3, r0
 800c922:	601c      	str	r4, [r3, #0]
 800c924:	4618      	mov	r0, r3
 800c926:	370c      	adds	r7, #12
 800c928:	46bd      	mov	sp, r7
 800c92a:	bd90      	pop	{r4, r7, pc}

0800c92c <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	60f8      	str	r0, [r7, #12]
 800c934:	60b9      	str	r1, [r7, #8]
 800c936:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800c938:	6878      	ldr	r0, [r7, #4]
 800c93a:	f7ff ffd7 	bl	800c8ec <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c93e:	4603      	mov	r3, r0
 800c940:	4619      	mov	r1, r3
 800c942:	68b8      	ldr	r0, [r7, #8]
 800c944:	f7ff ffdd 	bl	800c902 <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800c948:	bf00      	nop
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c950:	b580      	push	{r7, lr}
 800c952:	b084      	sub	sp, #16
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	1d1a      	adds	r2, r3, #4
 800c95c:	f107 030c 	add.w	r3, r7, #12
 800c960:	4611      	mov	r1, r2
 800c962:	4618      	mov	r0, r3
 800c964:	f000 f8c7 	bl	800caf6 <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c974:	b5b0      	push	{r4, r5, r7, lr}
 800c976:	b08c      	sub	sp, #48	; 0x30
 800c978:	af00      	add	r7, sp, #0
 800c97a:	60f8      	str	r0, [r7, #12]
 800c97c:	60b9      	str	r1, [r7, #8]
 800c97e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c980:	4a39      	ldr	r2, [pc, #228]	; (800ca68 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800c982:	2101      	movs	r1, #1
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f000 f8c6 	bl	800cb16 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>
 800c98a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f000 f903 	bl	800cba4 <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	617b      	str	r3, [r7, #20]
 800c9a2:	f107 0214 	add.w	r2, r7, #20
 800c9a6:	f107 0308 	add.w	r3, r7, #8
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 f909 	bl	800cbc4 <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 f917 	bl	800cbee <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>
 800c9c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c9c2:	69fb      	ldr	r3, [r7, #28]
 800c9c4:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800c9c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c9c8:	6a3b      	ldr	r3, [r7, #32]
 800c9ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c9cc:	69fa      	ldr	r2, [r7, #28]
 800c9ce:	18d5      	adds	r5, r2, r3
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f7ff ff8b 	bl	800c8ec <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c9d6:	4603      	mov	r3, r0
 800c9d8:	461a      	mov	r2, r3
 800c9da:	4629      	mov	r1, r5
 800c9dc:	4620      	mov	r0, r4
 800c9de:	f7ff ffa5 	bl	800c92c <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c9e6:	f107 0308 	add.w	r3, r7, #8
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 f927 	bl	800cc3e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 f92c 	bl	800cc54 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800c9fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c9fe:	69fa      	ldr	r2, [r7, #28]
 800ca00:	4621      	mov	r1, r4
 800ca02:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca04:	f000 f907 	bl	800cc16 <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800ca08:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800ca0a:	69bb      	ldr	r3, [r7, #24]
 800ca0c:	3304      	adds	r3, #4
 800ca0e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ca10:	f107 0308 	add.w	r3, r7, #8
 800ca14:	4618      	mov	r0, r3
 800ca16:	f000 f912 	bl	800cc3e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	4618      	mov	r0, r3
 800ca22:	f000 f917 	bl	800cc54 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800ca26:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ca28:	69ba      	ldr	r2, [r7, #24]
 800ca2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca2c:	4620      	mov	r0, r4
 800ca2e:	f000 f8f2 	bl	800cc16 <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800ca32:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800ca34:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	689a      	ldr	r2, [r3, #8]
 800ca3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca3c:	1ad3      	subs	r3, r2, r3
 800ca3e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800ca40:	461a      	mov	r2, r3
 800ca42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca44:	f7ff fea7 	bl	800c796 <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	69fa      	ldr	r2, [r7, #28]
 800ca4c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	69ba      	ldr	r2, [r7, #24]
 800ca52:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ca54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	69fa      	ldr	r2, [r7, #28]
 800ca5a:	441a      	add	r2, r3
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	609a      	str	r2, [r3, #8]
    }
 800ca60:	bf00      	nop
 800ca62:	3730      	adds	r7, #48	; 0x30
 800ca64:	46bd      	mov	sp, r7
 800ca66:	bdb0      	pop	{r4, r5, r7, pc}
 800ca68:	08021000 	.word	0x08021000

0800ca6c <_ZNSt6vectorIP3PinSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800ca74:	6878      	ldr	r0, [r7, #4]
 800ca76:	f7ff ff6b 	bl	800c950 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	60fb      	str	r3, [r7, #12]
 800ca7e:	f107 030c 	add.w	r3, r7, #12
 800ca82:	2101      	movs	r1, #1
 800ca84:	4618      	mov	r0, r3
 800ca86:	f000 f8fe 	bl	800cc86 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	60bb      	str	r3, [r7, #8]
 800ca8e:	f107 0308 	add.w	r3, r7, #8
 800ca92:	4618      	mov	r0, r3
 800ca94:	f000 f910 	bl	800ccb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>
 800ca98:	4603      	mov	r3, r0
      }
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	3710      	adds	r7, #16
 800ca9e:	46bd      	mov	sp, r7
 800caa0:	bd80      	pop	{r7, pc}

0800caa2 <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 800caa2:	b580      	push	{r7, lr}
 800caa4:	b084      	sub	sp, #16
 800caa6:	af00      	add	r7, sp, #0
 800caa8:	60f8      	str	r0, [r7, #12]
 800caaa:	7239      	strb	r1, [r7, #8]
 800caac:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f7ff fec1 	bl	800c836 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800cab4:	4603      	mov	r3, r0
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	601a      	str	r2, [r3, #0]
	    { }
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4618      	mov	r0, r3
 800cac0:	3710      	adds	r7, #16
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 800cac6:	b5b0      	push	{r4, r5, r7, lr}
 800cac8:	b084      	sub	sp, #16
 800caca:	af00      	add	r7, sp, #0
 800cacc:	60f8      	str	r0, [r7, #12]
 800cace:	7239      	strb	r1, [r7, #8]
 800cad0:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 800cad2:	68fc      	ldr	r4, [r7, #12]
 800cad4:	6878      	ldr	r0, [r7, #4]
 800cad6:	f7ff feae 	bl	800c836 <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800cada:	4603      	mov	r3, r0
 800cadc:	461a      	mov	r2, r3
 800cade:	4629      	mov	r1, r5
 800cae0:	4620      	mov	r0, r4
 800cae2:	f7ff ffde 	bl	800caa2 <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	2201      	movs	r2, #1
 800caea:	711a      	strb	r2, [r3, #4]
	{ }
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	4618      	mov	r0, r3
 800caf0:	3710      	adds	r7, #16
 800caf2:	46bd      	mov	sp, r7
 800caf4:	bdb0      	pop	{r4, r5, r7, pc}

0800caf6 <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800caf6:	b480      	push	{r7}
 800caf8:	b083      	sub	sp, #12
 800cafa:	af00      	add	r7, sp, #0
 800cafc:	6078      	str	r0, [r7, #4]
 800cafe:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	681a      	ldr	r2, [r3, #0]
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	601a      	str	r2, [r3, #0]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr

0800cb16 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800cb16:	b590      	push	{r4, r7, lr}
 800cb18:	b087      	sub	sp, #28
 800cb1a:	af00      	add	r7, sp, #0
 800cb1c:	60f8      	str	r0, [r7, #12]
 800cb1e:	60b9      	str	r1, [r7, #8]
 800cb20:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f000 f8e3 	bl	800ccee <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb28:	4604      	mov	r4, r0
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f7ff fddf 	bl	800c6ee <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb30:	4603      	mov	r3, r0
 800cb32:	1ae2      	subs	r2, r4, r3
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	bf34      	ite	cc
 800cb3a:	2301      	movcc	r3, #1
 800cb3c:	2300      	movcs	r3, #0
 800cb3e:	b2db      	uxtb	r3, r3
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f013 ffcd 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cb4a:	68f8      	ldr	r0, [r7, #12]
 800cb4c:	f7ff fdcf 	bl	800c6ee <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb50:	4604      	mov	r4, r0
 800cb52:	68f8      	ldr	r0, [r7, #12]
 800cb54:	f7ff fdcb 	bl	800c6ee <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb58:	4603      	mov	r3, r0
 800cb5a:	613b      	str	r3, [r7, #16]
 800cb5c:	f107 0208 	add.w	r2, r7, #8
 800cb60:	f107 0310 	add.w	r3, r7, #16
 800cb64:	4611      	mov	r1, r2
 800cb66:	4618      	mov	r0, r3
 800cb68:	f7f5 fe73 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	4423      	add	r3, r4
 800cb72:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f7ff fdba 	bl	800c6ee <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb7a:	4602      	mov	r2, r0
 800cb7c:	697b      	ldr	r3, [r7, #20]
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d306      	bcc.n	800cb90 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800cb82:	68f8      	ldr	r0, [r7, #12]
 800cb84:	f000 f8b3 	bl	800ccee <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb88:	4602      	mov	r2, r0
 800cb8a:	697b      	ldr	r3, [r7, #20]
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d904      	bls.n	800cb9a <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x84>
 800cb90:	68f8      	ldr	r0, [r7, #12]
 800cb92:	f000 f8ac 	bl	800ccee <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb96:	4603      	mov	r3, r0
 800cb98:	e000      	b.n	800cb9c <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x86>
 800cb9a:	697b      	ldr	r3, [r7, #20]
      }
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	371c      	adds	r7, #28
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd90      	pop	{r4, r7, pc}

0800cba4 <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800cbac:	687a      	ldr	r2, [r7, #4]
 800cbae:	f107 030c 	add.w	r3, r7, #12
 800cbb2:	4611      	mov	r1, r2
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	f7ff ff9e 	bl	800caf6 <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cbc4:	b590      	push	{r4, r7, lr}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f835 	bl	800cc3e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	681c      	ldr	r4, [r3, #0]
 800cbd8:	6838      	ldr	r0, [r7, #0]
 800cbda:	f000 f830 	bl	800cc3e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	1ae3      	subs	r3, r4, r3
 800cbe4:	109b      	asrs	r3, r3, #2
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	370c      	adds	r7, #12
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd90      	pop	{r4, r7, pc}

0800cbee <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cbee:	b580      	push	{r7, lr}
 800cbf0:	b082      	sub	sp, #8
 800cbf2:	af00      	add	r7, sp, #0
 800cbf4:	6078      	str	r0, [r7, #4]
 800cbf6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d006      	beq.n	800cc0c <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x1e>
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	4618      	mov	r0, r3
 800cc04:	f000 f884 	bl	800cd10 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>
 800cc08:	4603      	mov	r3, r0
 800cc0a:	e000      	b.n	800cc0e <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x20>
 800cc0c:	2300      	movs	r3, #0
      }
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}

0800cc16 <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cc16:	b590      	push	{r4, r7, lr}
 800cc18:	b087      	sub	sp, #28
 800cc1a:	af02      	add	r7, sp, #8
 800cc1c:	60f8      	str	r0, [r7, #12]
 800cc1e:	60b9      	str	r1, [r7, #8]
 800cc20:	607a      	str	r2, [r7, #4]
 800cc22:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cc24:	f88d 4000 	strb.w	r4, [sp]
 800cc28:	683b      	ldr	r3, [r7, #0]
 800cc2a:	687a      	ldr	r2, [r7, #4]
 800cc2c:	68b9      	ldr	r1, [r7, #8]
 800cc2e:	68f8      	ldr	r0, [r7, #12]
 800cc30:	f000 f88e 	bl	800cd50 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800cc34:	4603      	mov	r3, r0
      }
 800cc36:	4618      	mov	r0, r3
 800cc38:	3714      	adds	r7, #20
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd90      	pop	{r4, r7, pc}

0800cc3e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cc3e:	b480      	push	{r7}
 800cc40:	b083      	sub	sp, #12
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4618      	mov	r0, r3
 800cc4a:	370c      	adds	r7, #12
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800cc54:	b480      	push	{r7}
 800cc56:	b083      	sub	sp, #12
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	4618      	mov	r0, r3
 800cc60:	370c      	adds	r7, #12
 800cc62:	46bd      	mov	sp, r7
 800cc64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc68:	4770      	bx	lr

0800cc6a <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	60f8      	str	r0, [r7, #12]
 800cc72:	60b9      	str	r1, [r7, #8]
 800cc74:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800cc76:	68b9      	ldr	r1, [r7, #8]
 800cc78:	68f8      	ldr	r0, [r7, #12]
 800cc7a:	f000 f885 	bl	800cd88 <_ZSt8_DestroyIPP3PinEvT_S3_>
    }
 800cc7e:	bf00      	nop
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b084      	sub	sp, #16
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
 800cc8e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681a      	ldr	r2, [r3, #0]
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	009b      	lsls	r3, r3, #2
 800cc98:	425b      	negs	r3, r3
 800cc9a:	4413      	add	r3, r2
 800cc9c:	60fb      	str	r3, [r7, #12]
 800cc9e:	f107 020c 	add.w	r2, r7, #12
 800cca2:	f107 0308 	add.w	r3, r7, #8
 800cca6:	4611      	mov	r1, r2
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7ff ff24 	bl	800caf6 <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ccae:	68bb      	ldr	r3, [r7, #8]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	3710      	adds	r7, #16
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}

0800ccb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b084      	sub	sp, #16
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	60f8      	str	r0, [r7, #12]
 800ccd8:	60b9      	str	r1, [r7, #8]
 800ccda:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4619      	mov	r1, r3
 800cce2:	68b8      	ldr	r0, [r7, #8]
 800cce4:	f013 fe32 	bl	802094c <_ZdlPvj>
      }
 800cce8:	3710      	adds	r7, #16
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}

0800ccee <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ccee:	b580      	push	{r7, lr}
 800ccf0:	b082      	sub	sp, #8
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f000 f881 	bl	800ce00 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f863 	bl	800cdcc <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>
 800cd06:	4603      	mov	r3, r0
 800cd08:	4618      	mov	r0, r3
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	60fb      	str	r3, [r7, #12]
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800cd22:	f7f3 fafd 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cd26:	4603      	mov	r3, r0
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d006      	beq.n	800cd3a <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4618      	mov	r0, r3
 800cd32:	f013 fe0d 	bl	8020950 <_Znwj>
 800cd36:	4603      	mov	r3, r0
 800cd38:	e006      	b.n	800cd48 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	68b9      	ldr	r1, [r7, #8]
 800cd3e:	68f8      	ldr	r0, [r7, #12]
 800cd40:	f000 f8a9 	bl	800ce96 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>
 800cd44:	4603      	mov	r3, r0
 800cd46:	bf00      	nop
      { return __a.allocate(__n); }
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	60f8      	str	r0, [r7, #12]
 800cd58:	60b9      	str	r1, [r7, #8]
 800cd5a:	607a      	str	r2, [r7, #4]
 800cd5c:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	687a      	ldr	r2, [r7, #4]
 800cd62:	68b9      	ldr	r1, [r7, #8]
 800cd64:	68f8      	ldr	r0, [r7, #12]
 800cd66:	f000 f856 	bl	800ce16 <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cd6a:	4603      	mov	r3, r0
      }
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <_ZSt10destroy_atIP3PinEvPT_>:
    destroy_at(_Tp* __location)
 800cd74:	b480      	push	{r7}
 800cd76:	b083      	sub	sp, #12
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
    }
 800cd7c:	bf00      	nop
 800cd7e:	370c      	adds	r7, #12
 800cd80:	46bd      	mov	sp, r7
 800cd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd86:	4770      	bx	lr

0800cd88 <_ZSt8_DestroyIPP3PinEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b082      	sub	sp, #8
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
 800cd90:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800cd92:	f7f3 fac5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cd96:	4603      	mov	r3, r0
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <_ZSt8_DestroyIPP3PinEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 f856 	bl	800ce50 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>
 800cda4:	e003      	b.n	800cdae <_ZSt8_DestroyIPP3PinEvT_S3_+0x26>
	__destroy(__first, __last);
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 f869 	bl	800ce80 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>
    }
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800cdbc:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	370c      	adds	r7, #12
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdca:	4770      	bx	lr

0800cdcc <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cdd4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cdd8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cdda:	6878      	ldr	r0, [r7, #4]
 800cddc:	f7ff ffea 	bl	800cdb4 <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>
 800cde0:	4603      	mov	r3, r0
 800cde2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cde4:	f107 0208 	add.w	r2, r7, #8
 800cde8:	f107 030c 	add.w	r3, r7, #12
 800cdec:	4611      	mov	r1, r2
 800cdee:	4618      	mov	r0, r3
 800cdf0:	f7f5 fff9 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	681b      	ldr	r3, [r3, #0]
      }
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3710      	adds	r7, #16
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd80      	pop	{r7, pc}

0800ce00 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800ce00:	b480      	push	{r7}
 800ce02:	b083      	sub	sp, #12
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	370c      	adds	r7, #12
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce14:	4770      	bx	lr

0800ce16 <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ce16:	b5b0      	push	{r4, r5, r7, lr}
 800ce18:	b084      	sub	sp, #16
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	60f8      	str	r0, [r7, #12]
 800ce1e:	60b9      	str	r1, [r7, #8]
 800ce20:	607a      	str	r2, [r7, #4]
 800ce22:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800ce24:	68f8      	ldr	r0, [r7, #12]
 800ce26:	f000 f855 	bl	800ced4 <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce2a:	4604      	mov	r4, r0
 800ce2c:	68b8      	ldr	r0, [r7, #8]
 800ce2e:	f000 f851 	bl	800ced4 <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce32:	4605      	mov	r5, r0
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 f84d 	bl	800ced4 <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce3a:	4602      	mov	r2, r0
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	4629      	mov	r1, r5
 800ce40:	4620      	mov	r0, r4
 800ce42:	f000 f852 	bl	800ceea <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ce46:	4603      	mov	r3, r0
    }
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3710      	adds	r7, #16
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	bdb0      	pop	{r4, r5, r7, pc}

0800ce50 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	683b      	ldr	r3, [r7, #0]
 800ce5e:	429a      	cmp	r2, r3
 800ce60:	d00a      	beq.n	800ce78 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ce62:	6878      	ldr	r0, [r7, #4]
 800ce64:	f000 f85f 	bl	800cf26 <_ZSt11__addressofIP3PinEPT_RS2_>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f000 f866 	bl	800cf3c <_ZSt8_DestroyIP3PinEvPT_>
	  for (; __first != __last; ++__first)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	3304      	adds	r3, #4
 800ce74:	607b      	str	r3, [r7, #4]
 800ce76:	e7f0      	b.n	800ce5a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0xa>
	}
 800ce78:	bf00      	nop
 800ce7a:	3708      	adds	r7, #8
 800ce7c:	46bd      	mov	sp, r7
 800ce7e:	bd80      	pop	{r7, pc}

0800ce80 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ce80:	b480      	push	{r7}
 800ce82:	b083      	sub	sp, #12
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
 800ce88:	6039      	str	r1, [r7, #0]
 800ce8a:	bf00      	nop
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr

0800ce96 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ce96:	b580      	push	{r7, lr}
 800ce98:	b084      	sub	sp, #16
 800ce9a:	af00      	add	r7, sp, #0
 800ce9c:	60f8      	str	r0, [r7, #12]
 800ce9e:	60b9      	str	r1, [r7, #8]
 800cea0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800cea2:	68f8      	ldr	r0, [r7, #12]
 800cea4:	f000 f855 	bl	800cf52 <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>
 800cea8:	4602      	mov	r2, r0
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	4293      	cmp	r3, r2
 800ceae:	bf8c      	ite	hi
 800ceb0:	2301      	movhi	r3, #1
 800ceb2:	2300      	movls	r3, #0
 800ceb4:	b2db      	uxtb	r3, r3
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d001      	beq.n	800cebe <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ceba:	f013 fe10 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	009b      	lsls	r3, r3, #2
 800cec2:	4618      	mov	r0, r3
 800cec4:	f013 fd44 	bl	8020950 <_Znwj>
 800cec8:	4603      	mov	r3, r0
 800ceca:	bf00      	nop
      }
 800cecc:	4618      	mov	r0, r3
 800cece:	3710      	adds	r7, #16
 800ced0:	46bd      	mov	sp, r7
 800ced2:	bd80      	pop	{r7, pc}

0800ced4 <_ZSt12__niter_baseIPP3PinET_S3_>:
    __niter_base(_Iterator __it)
 800ced4:	b480      	push	{r7}
 800ced6:	b083      	sub	sp, #12
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
    { return __it; }
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	4618      	mov	r0, r3
 800cee0:	370c      	adds	r7, #12
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr

0800ceea <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800ceea:	b580      	push	{r7, lr}
 800ceec:	b086      	sub	sp, #24
 800ceee:	af00      	add	r7, sp, #0
 800cef0:	60f8      	str	r0, [r7, #12]
 800cef2:	60b9      	str	r1, [r7, #8]
 800cef4:	607a      	str	r2, [r7, #4]
 800cef6:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800cef8:	68ba      	ldr	r2, [r7, #8]
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	1ad3      	subs	r3, r2, r3
 800cefe:	109b      	asrs	r3, r3, #2
 800cf00:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800cf02:	697b      	ldr	r3, [r7, #20]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	dd06      	ble.n	800cf16 <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	009b      	lsls	r3, r3, #2
 800cf0c:	461a      	mov	r2, r3
 800cf0e:	68f9      	ldr	r1, [r7, #12]
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f013 fe57 	bl	8020bc4 <memmove>
      return __result + __count;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	4413      	add	r3, r2
    }
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3718      	adds	r7, #24
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}

0800cf26 <_ZSt11__addressofIP3PinEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cf26:	b480      	push	{r7}
 800cf28:	b083      	sub	sp, #12
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	4618      	mov	r0, r3
 800cf32:	370c      	adds	r7, #12
 800cf34:	46bd      	mov	sp, r7
 800cf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3a:	4770      	bx	lr

0800cf3c <_ZSt8_DestroyIP3PinEvPT_>:
    _Destroy(_Tp* __pointer)
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f7ff ff15 	bl	800cd74 <_ZSt10destroy_atIP3PinEvPT_>
    }
 800cf4a:	bf00      	nop
 800cf4c:	3708      	adds	r7, #8
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cf52:	b480      	push	{r7}
 800cf54:	b083      	sub	sp, #12
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cf5a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800cf5e:	4618      	mov	r0, r3
 800cf60:	370c      	adds	r7, #12
 800cf62:	46bd      	mov	sp, r7
 800cf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf68:	4770      	bx	lr
	...

0800cf6c <_Z41__static_initialization_and_destruction_0ii>:
Pin PF10(GPIOF, GPIO_PIN_10);
Pin PF11(GPIOF, GPIO_PIN_11);
Pin PF12(GPIOF, GPIO_PIN_12);
Pin PF13(GPIOF, GPIO_PIN_13);
Pin PF14(GPIOF, GPIO_PIN_14);
Pin PF15(GPIOF, GPIO_PIN_15);
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	6078      	str	r0, [r7, #4]
 800cf74:	6039      	str	r1, [r7, #0]
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	f040 82ad 	bne.w	800d4d8 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800cf7e:	683b      	ldr	r3, [r7, #0]
 800cf80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf84:	4293      	cmp	r3, r2
 800cf86:	f040 82a7 	bne.w	800d4d8 <_Z41__static_initialization_and_destruction_0ii+0x56c>
vector<Pin*> Pin::all_pins;
 800cf8a:	48ba      	ldr	r0, [pc, #744]	; (800d274 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800cf8c:	f7ff fb1d 	bl	800c5ca <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>
Pin PA0(GPIOA, GPIO_PIN_0);
 800cf90:	2201      	movs	r2, #1
 800cf92:	49b9      	ldr	r1, [pc, #740]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf94:	48b9      	ldr	r0, [pc, #740]	; (800d27c <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800cf96:	f7ff fb25 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA1(GPIOA, GPIO_PIN_1);
 800cf9a:	2202      	movs	r2, #2
 800cf9c:	49b6      	ldr	r1, [pc, #728]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf9e:	48b8      	ldr	r0, [pc, #736]	; (800d280 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800cfa0:	f7ff fb20 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA2(GPIOA, GPIO_PIN_2);
 800cfa4:	2204      	movs	r2, #4
 800cfa6:	49b4      	ldr	r1, [pc, #720]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfa8:	48b6      	ldr	r0, [pc, #728]	; (800d284 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800cfaa:	f7ff fb1b 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA3(GPIOA, GPIO_PIN_3);
 800cfae:	2208      	movs	r2, #8
 800cfb0:	49b1      	ldr	r1, [pc, #708]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfb2:	48b5      	ldr	r0, [pc, #724]	; (800d288 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800cfb4:	f7ff fb16 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA4(GPIOA, GPIO_PIN_4);
 800cfb8:	2210      	movs	r2, #16
 800cfba:	49af      	ldr	r1, [pc, #700]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfbc:	48b3      	ldr	r0, [pc, #716]	; (800d28c <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800cfbe:	f7ff fb11 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA5(GPIOA, GPIO_PIN_5);
 800cfc2:	2220      	movs	r2, #32
 800cfc4:	49ac      	ldr	r1, [pc, #688]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfc6:	48b2      	ldr	r0, [pc, #712]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800cfc8:	f7ff fb0c 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA6(GPIOA, GPIO_PIN_6);
 800cfcc:	2240      	movs	r2, #64	; 0x40
 800cfce:	49aa      	ldr	r1, [pc, #680]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfd0:	48b0      	ldr	r0, [pc, #704]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800cfd2:	f7ff fb07 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA7(GPIOA, GPIO_PIN_7);
 800cfd6:	2280      	movs	r2, #128	; 0x80
 800cfd8:	49a7      	ldr	r1, [pc, #668]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfda:	48af      	ldr	r0, [pc, #700]	; (800d298 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800cfdc:	f7ff fb02 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA8(GPIOA, GPIO_PIN_8);
 800cfe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfe4:	49a4      	ldr	r1, [pc, #656]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfe6:	48ad      	ldr	r0, [pc, #692]	; (800d29c <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800cfe8:	f7ff fafc 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA9(GPIOA, GPIO_PIN_9);
 800cfec:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cff0:	49a1      	ldr	r1, [pc, #644]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cff2:	48ab      	ldr	r0, [pc, #684]	; (800d2a0 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800cff4:	f7ff faf6 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA10(GPIOA, GPIO_PIN_10);
 800cff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cffc:	499e      	ldr	r1, [pc, #632]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cffe:	48a9      	ldr	r0, [pc, #676]	; (800d2a4 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800d000:	f7ff faf0 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA11(GPIOA, GPIO_PIN_11);
 800d004:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d008:	499b      	ldr	r1, [pc, #620]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d00a:	48a7      	ldr	r0, [pc, #668]	; (800d2a8 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800d00c:	f7ff faea 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA12(GPIOA, GPIO_PIN_12);
 800d010:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d014:	4998      	ldr	r1, [pc, #608]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d016:	48a5      	ldr	r0, [pc, #660]	; (800d2ac <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800d018:	f7ff fae4 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA13(GPIOA, GPIO_PIN_13);
 800d01c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d020:	4995      	ldr	r1, [pc, #596]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d022:	48a3      	ldr	r0, [pc, #652]	; (800d2b0 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800d024:	f7ff fade 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA14(GPIOA, GPIO_PIN_14);
 800d028:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d02c:	4992      	ldr	r1, [pc, #584]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d02e:	48a1      	ldr	r0, [pc, #644]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800d030:	f7ff fad8 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA15(GPIOA, GPIO_PIN_15);
 800d034:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d038:	498f      	ldr	r1, [pc, #572]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d03a:	489f      	ldr	r0, [pc, #636]	; (800d2b8 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800d03c:	f7ff fad2 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB0(GPIOB, GPIO_PIN_0);
 800d040:	2201      	movs	r2, #1
 800d042:	499e      	ldr	r1, [pc, #632]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d044:	489e      	ldr	r0, [pc, #632]	; (800d2c0 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800d046:	f7ff facd 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB1(GPIOB, GPIO_PIN_1);
 800d04a:	2202      	movs	r2, #2
 800d04c:	499b      	ldr	r1, [pc, #620]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d04e:	489d      	ldr	r0, [pc, #628]	; (800d2c4 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800d050:	f7ff fac8 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB2(GPIOB, GPIO_PIN_2);
 800d054:	2204      	movs	r2, #4
 800d056:	4999      	ldr	r1, [pc, #612]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d058:	489b      	ldr	r0, [pc, #620]	; (800d2c8 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800d05a:	f7ff fac3 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB3(GPIOB, GPIO_PIN_3);
 800d05e:	2208      	movs	r2, #8
 800d060:	4996      	ldr	r1, [pc, #600]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d062:	489a      	ldr	r0, [pc, #616]	; (800d2cc <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800d064:	f7ff fabe 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB4(GPIOB, GPIO_PIN_4);
 800d068:	2210      	movs	r2, #16
 800d06a:	4994      	ldr	r1, [pc, #592]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d06c:	4898      	ldr	r0, [pc, #608]	; (800d2d0 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800d06e:	f7ff fab9 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB5(GPIOB, GPIO_PIN_5);
 800d072:	2220      	movs	r2, #32
 800d074:	4991      	ldr	r1, [pc, #580]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d076:	4897      	ldr	r0, [pc, #604]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800d078:	f7ff fab4 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB6(GPIOB, GPIO_PIN_6);
 800d07c:	2240      	movs	r2, #64	; 0x40
 800d07e:	498f      	ldr	r1, [pc, #572]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d080:	4895      	ldr	r0, [pc, #596]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800d082:	f7ff faaf 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB7(GPIOB, GPIO_PIN_7);
 800d086:	2280      	movs	r2, #128	; 0x80
 800d088:	498c      	ldr	r1, [pc, #560]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d08a:	4894      	ldr	r0, [pc, #592]	; (800d2dc <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800d08c:	f7ff faaa 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB8(GPIOB, GPIO_PIN_8);
 800d090:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d094:	4989      	ldr	r1, [pc, #548]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d096:	4892      	ldr	r0, [pc, #584]	; (800d2e0 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800d098:	f7ff faa4 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB9(GPIOB, GPIO_PIN_9);
 800d09c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d0a0:	4986      	ldr	r1, [pc, #536]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0a2:	4890      	ldr	r0, [pc, #576]	; (800d2e4 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800d0a4:	f7ff fa9e 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB10(GPIOB, GPIO_PIN_10);
 800d0a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0ac:	4983      	ldr	r1, [pc, #524]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0ae:	488e      	ldr	r0, [pc, #568]	; (800d2e8 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800d0b0:	f7ff fa98 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB11(GPIOB, GPIO_PIN_11);
 800d0b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d0b8:	4980      	ldr	r1, [pc, #512]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0ba:	488c      	ldr	r0, [pc, #560]	; (800d2ec <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800d0bc:	f7ff fa92 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB12(GPIOB, GPIO_PIN_12);
 800d0c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d0c4:	497d      	ldr	r1, [pc, #500]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0c6:	488a      	ldr	r0, [pc, #552]	; (800d2f0 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800d0c8:	f7ff fa8c 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB13(GPIOB, GPIO_PIN_13);
 800d0cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d0d0:	497a      	ldr	r1, [pc, #488]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0d2:	4888      	ldr	r0, [pc, #544]	; (800d2f4 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800d0d4:	f7ff fa86 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB14(GPIOB, GPIO_PIN_14);
 800d0d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d0dc:	4977      	ldr	r1, [pc, #476]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0de:	4886      	ldr	r0, [pc, #536]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800d0e0:	f7ff fa80 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB15(GPIOB, GPIO_PIN_15);
 800d0e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d0e8:	4974      	ldr	r1, [pc, #464]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0ea:	4884      	ldr	r0, [pc, #528]	; (800d2fc <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800d0ec:	f7ff fa7a 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC0(GPIOC, GPIO_PIN_0);
 800d0f0:	2201      	movs	r2, #1
 800d0f2:	4983      	ldr	r1, [pc, #524]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0f4:	4883      	ldr	r0, [pc, #524]	; (800d304 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800d0f6:	f7ff fa75 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC1(GPIOC, GPIO_PIN_1);
 800d0fa:	2202      	movs	r2, #2
 800d0fc:	4980      	ldr	r1, [pc, #512]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0fe:	4882      	ldr	r0, [pc, #520]	; (800d308 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800d100:	f7ff fa70 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC2(GPIOC, GPIO_PIN_2);
 800d104:	2204      	movs	r2, #4
 800d106:	497e      	ldr	r1, [pc, #504]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d108:	4880      	ldr	r0, [pc, #512]	; (800d30c <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800d10a:	f7ff fa6b 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC3(GPIOC, GPIO_PIN_3);
 800d10e:	2208      	movs	r2, #8
 800d110:	497b      	ldr	r1, [pc, #492]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d112:	487f      	ldr	r0, [pc, #508]	; (800d310 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800d114:	f7ff fa66 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC4(GPIOC, GPIO_PIN_4);
 800d118:	2210      	movs	r2, #16
 800d11a:	4979      	ldr	r1, [pc, #484]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d11c:	487d      	ldr	r0, [pc, #500]	; (800d314 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800d11e:	f7ff fa61 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC5(GPIOC, GPIO_PIN_5);
 800d122:	2220      	movs	r2, #32
 800d124:	4976      	ldr	r1, [pc, #472]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d126:	487c      	ldr	r0, [pc, #496]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800d128:	f7ff fa5c 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC6(GPIOC, GPIO_PIN_6);
 800d12c:	2240      	movs	r2, #64	; 0x40
 800d12e:	4974      	ldr	r1, [pc, #464]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d130:	487a      	ldr	r0, [pc, #488]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800d132:	f7ff fa57 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC7(GPIOC, GPIO_PIN_7);
 800d136:	2280      	movs	r2, #128	; 0x80
 800d138:	4971      	ldr	r1, [pc, #452]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d13a:	4879      	ldr	r0, [pc, #484]	; (800d320 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800d13c:	f7ff fa52 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC8(GPIOC, GPIO_PIN_8);
 800d140:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d144:	496e      	ldr	r1, [pc, #440]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d146:	4877      	ldr	r0, [pc, #476]	; (800d324 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800d148:	f7ff fa4c 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC9(GPIOC, GPIO_PIN_9);
 800d14c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d150:	496b      	ldr	r1, [pc, #428]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d152:	4875      	ldr	r0, [pc, #468]	; (800d328 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800d154:	f7ff fa46 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC10(GPIOC, GPIO_PIN_10);
 800d158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d15c:	4968      	ldr	r1, [pc, #416]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d15e:	4873      	ldr	r0, [pc, #460]	; (800d32c <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800d160:	f7ff fa40 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC11(GPIOC, GPIO_PIN_11);
 800d164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d168:	4965      	ldr	r1, [pc, #404]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d16a:	4871      	ldr	r0, [pc, #452]	; (800d330 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800d16c:	f7ff fa3a 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC12(GPIOC, GPIO_PIN_12);
 800d170:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d174:	4962      	ldr	r1, [pc, #392]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d176:	486f      	ldr	r0, [pc, #444]	; (800d334 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800d178:	f7ff fa34 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC13(GPIOC, GPIO_PIN_13);
 800d17c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d180:	495f      	ldr	r1, [pc, #380]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d182:	486d      	ldr	r0, [pc, #436]	; (800d338 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800d184:	f7ff fa2e 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC14(GPIOC, GPIO_PIN_14);
 800d188:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d18c:	495c      	ldr	r1, [pc, #368]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d18e:	486b      	ldr	r0, [pc, #428]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800d190:	f7ff fa28 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC15(GPIOC, GPIO_PIN_15);
 800d194:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d198:	4959      	ldr	r1, [pc, #356]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d19a:	4869      	ldr	r0, [pc, #420]	; (800d340 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800d19c:	f7ff fa22 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD0(GPIOD, GPIO_PIN_0);
 800d1a0:	2201      	movs	r2, #1
 800d1a2:	4968      	ldr	r1, [pc, #416]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1a4:	4868      	ldr	r0, [pc, #416]	; (800d348 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800d1a6:	f7ff fa1d 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD1(GPIOD, GPIO_PIN_1);
 800d1aa:	2202      	movs	r2, #2
 800d1ac:	4965      	ldr	r1, [pc, #404]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ae:	4867      	ldr	r0, [pc, #412]	; (800d34c <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800d1b0:	f7ff fa18 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD2(GPIOD, GPIO_PIN_2);
 800d1b4:	2204      	movs	r2, #4
 800d1b6:	4963      	ldr	r1, [pc, #396]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1b8:	4865      	ldr	r0, [pc, #404]	; (800d350 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800d1ba:	f7ff fa13 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD3(GPIOD, GPIO_PIN_3);
 800d1be:	2208      	movs	r2, #8
 800d1c0:	4960      	ldr	r1, [pc, #384]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1c2:	4864      	ldr	r0, [pc, #400]	; (800d354 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800d1c4:	f7ff fa0e 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD4(GPIOD, GPIO_PIN_4);
 800d1c8:	2210      	movs	r2, #16
 800d1ca:	495e      	ldr	r1, [pc, #376]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1cc:	4862      	ldr	r0, [pc, #392]	; (800d358 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800d1ce:	f7ff fa09 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD5(GPIOD, GPIO_PIN_5);
 800d1d2:	2220      	movs	r2, #32
 800d1d4:	495b      	ldr	r1, [pc, #364]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1d6:	4861      	ldr	r0, [pc, #388]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800d1d8:	f7ff fa04 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD6(GPIOD, GPIO_PIN_6);
 800d1dc:	2240      	movs	r2, #64	; 0x40
 800d1de:	4959      	ldr	r1, [pc, #356]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1e0:	485f      	ldr	r0, [pc, #380]	; (800d360 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800d1e2:	f7ff f9ff 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD7(GPIOD, GPIO_PIN_7);
 800d1e6:	2280      	movs	r2, #128	; 0x80
 800d1e8:	4956      	ldr	r1, [pc, #344]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ea:	485e      	ldr	r0, [pc, #376]	; (800d364 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800d1ec:	f7ff f9fa 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD8(GPIOD, GPIO_PIN_8);
 800d1f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1f4:	4953      	ldr	r1, [pc, #332]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1f6:	485c      	ldr	r0, [pc, #368]	; (800d368 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800d1f8:	f7ff f9f4 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD9(GPIOD, GPIO_PIN_9);
 800d1fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d200:	4950      	ldr	r1, [pc, #320]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d202:	485a      	ldr	r0, [pc, #360]	; (800d36c <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800d204:	f7ff f9ee 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD10(GPIOD, GPIO_PIN_10);
 800d208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d20c:	494d      	ldr	r1, [pc, #308]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d20e:	4858      	ldr	r0, [pc, #352]	; (800d370 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800d210:	f7ff f9e8 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD11(GPIOD, GPIO_PIN_11);
 800d214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d218:	494a      	ldr	r1, [pc, #296]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d21a:	4856      	ldr	r0, [pc, #344]	; (800d374 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800d21c:	f7ff f9e2 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD12(GPIOD, GPIO_PIN_12);
 800d220:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d224:	4947      	ldr	r1, [pc, #284]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d226:	4854      	ldr	r0, [pc, #336]	; (800d378 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800d228:	f7ff f9dc 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD13(GPIOD, GPIO_PIN_13);
 800d22c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d230:	4944      	ldr	r1, [pc, #272]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d232:	4852      	ldr	r0, [pc, #328]	; (800d37c <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800d234:	f7ff f9d6 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD14(GPIOD, GPIO_PIN_14);
 800d238:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d23c:	4941      	ldr	r1, [pc, #260]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d23e:	4850      	ldr	r0, [pc, #320]	; (800d380 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800d240:	f7ff f9d0 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD15(GPIOD, GPIO_PIN_15);
 800d244:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d248:	493e      	ldr	r1, [pc, #248]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d24a:	484e      	ldr	r0, [pc, #312]	; (800d384 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800d24c:	f7ff f9ca 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE0(GPIOE, GPIO_PIN_0);
 800d250:	2201      	movs	r2, #1
 800d252:	494d      	ldr	r1, [pc, #308]	; (800d388 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d254:	484d      	ldr	r0, [pc, #308]	; (800d38c <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800d256:	f7ff f9c5 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE1(GPIOE, GPIO_PIN_1);
 800d25a:	2202      	movs	r2, #2
 800d25c:	494a      	ldr	r1, [pc, #296]	; (800d388 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d25e:	484c      	ldr	r0, [pc, #304]	; (800d390 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800d260:	f7ff f9c0 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE2(GPIOE, GPIO_PIN_2);
 800d264:	2204      	movs	r2, #4
 800d266:	4948      	ldr	r1, [pc, #288]	; (800d388 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d268:	484a      	ldr	r0, [pc, #296]	; (800d394 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800d26a:	f7ff f9bb 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE3(GPIOE, GPIO_PIN_3);
 800d26e:	2208      	movs	r2, #8
 800d270:	e092      	b.n	800d398 <_Z41__static_initialization_and_destruction_0ii+0x42c>
 800d272:	bf00      	nop
 800d274:	240001ec 	.word	0x240001ec
 800d278:	58020000 	.word	0x58020000
 800d27c:	240001f8 	.word	0x240001f8
 800d280:	24000200 	.word	0x24000200
 800d284:	24000208 	.word	0x24000208
 800d288:	24000210 	.word	0x24000210
 800d28c:	24000218 	.word	0x24000218
 800d290:	24000220 	.word	0x24000220
 800d294:	24000228 	.word	0x24000228
 800d298:	24000230 	.word	0x24000230
 800d29c:	24000238 	.word	0x24000238
 800d2a0:	24000240 	.word	0x24000240
 800d2a4:	24000248 	.word	0x24000248
 800d2a8:	24000250 	.word	0x24000250
 800d2ac:	24000258 	.word	0x24000258
 800d2b0:	24000260 	.word	0x24000260
 800d2b4:	24000268 	.word	0x24000268
 800d2b8:	24000270 	.word	0x24000270
 800d2bc:	58020400 	.word	0x58020400
 800d2c0:	24000278 	.word	0x24000278
 800d2c4:	24000280 	.word	0x24000280
 800d2c8:	24000288 	.word	0x24000288
 800d2cc:	24000290 	.word	0x24000290
 800d2d0:	24000298 	.word	0x24000298
 800d2d4:	240002a0 	.word	0x240002a0
 800d2d8:	240002a8 	.word	0x240002a8
 800d2dc:	240002b0 	.word	0x240002b0
 800d2e0:	240002b8 	.word	0x240002b8
 800d2e4:	240002c0 	.word	0x240002c0
 800d2e8:	240002c8 	.word	0x240002c8
 800d2ec:	240002d0 	.word	0x240002d0
 800d2f0:	240002d8 	.word	0x240002d8
 800d2f4:	240002e0 	.word	0x240002e0
 800d2f8:	240002e8 	.word	0x240002e8
 800d2fc:	240002f0 	.word	0x240002f0
 800d300:	58020800 	.word	0x58020800
 800d304:	240002f8 	.word	0x240002f8
 800d308:	24000300 	.word	0x24000300
 800d30c:	24000308 	.word	0x24000308
 800d310:	24000310 	.word	0x24000310
 800d314:	24000318 	.word	0x24000318
 800d318:	24000320 	.word	0x24000320
 800d31c:	24000328 	.word	0x24000328
 800d320:	24000330 	.word	0x24000330
 800d324:	24000338 	.word	0x24000338
 800d328:	24000340 	.word	0x24000340
 800d32c:	24000348 	.word	0x24000348
 800d330:	24000350 	.word	0x24000350
 800d334:	24000358 	.word	0x24000358
 800d338:	24000360 	.word	0x24000360
 800d33c:	24000368 	.word	0x24000368
 800d340:	24000370 	.word	0x24000370
 800d344:	58020c00 	.word	0x58020c00
 800d348:	24000378 	.word	0x24000378
 800d34c:	24000380 	.word	0x24000380
 800d350:	24000388 	.word	0x24000388
 800d354:	24000390 	.word	0x24000390
 800d358:	24000398 	.word	0x24000398
 800d35c:	240003a0 	.word	0x240003a0
 800d360:	240003a8 	.word	0x240003a8
 800d364:	240003b0 	.word	0x240003b0
 800d368:	240003b8 	.word	0x240003b8
 800d36c:	240003c0 	.word	0x240003c0
 800d370:	240003c8 	.word	0x240003c8
 800d374:	240003d0 	.word	0x240003d0
 800d378:	240003d8 	.word	0x240003d8
 800d37c:	240003e0 	.word	0x240003e0
 800d380:	240003e8 	.word	0x240003e8
 800d384:	240003f0 	.word	0x240003f0
 800d388:	58021000 	.word	0x58021000
 800d38c:	240003f8 	.word	0x240003f8
 800d390:	24000400 	.word	0x24000400
 800d394:	24000408 	.word	0x24000408
 800d398:	4957      	ldr	r1, [pc, #348]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d39a:	4858      	ldr	r0, [pc, #352]	; (800d4fc <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800d39c:	f7ff f922 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE4(GPIOE, GPIO_PIN_4);
 800d3a0:	2210      	movs	r2, #16
 800d3a2:	4955      	ldr	r1, [pc, #340]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3a4:	4856      	ldr	r0, [pc, #344]	; (800d500 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 800d3a6:	f7ff f91d 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE5(GPIOE, GPIO_PIN_5);
 800d3aa:	2220      	movs	r2, #32
 800d3ac:	4952      	ldr	r1, [pc, #328]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ae:	4855      	ldr	r0, [pc, #340]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800d3b0:	f7ff f918 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE6(GPIOE, GPIO_PIN_6);
 800d3b4:	2240      	movs	r2, #64	; 0x40
 800d3b6:	4950      	ldr	r1, [pc, #320]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3b8:	4853      	ldr	r0, [pc, #332]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800d3ba:	f7ff f913 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE7(GPIOE, GPIO_PIN_7);
 800d3be:	2280      	movs	r2, #128	; 0x80
 800d3c0:	494d      	ldr	r1, [pc, #308]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3c2:	4852      	ldr	r0, [pc, #328]	; (800d50c <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 800d3c4:	f7ff f90e 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE8(GPIOE, GPIO_PIN_8);
 800d3c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3cc:	494a      	ldr	r1, [pc, #296]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ce:	4850      	ldr	r0, [pc, #320]	; (800d510 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 800d3d0:	f7ff f908 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE9(GPIOE, GPIO_PIN_9);
 800d3d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3d8:	4947      	ldr	r1, [pc, #284]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3da:	484e      	ldr	r0, [pc, #312]	; (800d514 <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 800d3dc:	f7ff f902 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE10(GPIOE, GPIO_PIN_10);
 800d3e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d3e4:	4944      	ldr	r1, [pc, #272]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3e6:	484c      	ldr	r0, [pc, #304]	; (800d518 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 800d3e8:	f7ff f8fc 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE11(GPIOE, GPIO_PIN_11);
 800d3ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3f0:	4941      	ldr	r1, [pc, #260]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3f2:	484a      	ldr	r0, [pc, #296]	; (800d51c <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 800d3f4:	f7ff f8f6 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE12(GPIOE, GPIO_PIN_12);
 800d3f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3fc:	493e      	ldr	r1, [pc, #248]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3fe:	4848      	ldr	r0, [pc, #288]	; (800d520 <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 800d400:	f7ff f8f0 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE13(GPIOE, GPIO_PIN_13);
 800d404:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d408:	493b      	ldr	r1, [pc, #236]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d40a:	4846      	ldr	r0, [pc, #280]	; (800d524 <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 800d40c:	f7ff f8ea 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE14(GPIOE, GPIO_PIN_14);
 800d410:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d414:	4938      	ldr	r1, [pc, #224]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d416:	4844      	ldr	r0, [pc, #272]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800d418:	f7ff f8e4 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE15(GPIOE, GPIO_PIN_15);
 800d41c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d420:	4935      	ldr	r1, [pc, #212]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d422:	4842      	ldr	r0, [pc, #264]	; (800d52c <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800d424:	f7ff f8de 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF0(GPIOF, GPIO_PIN_0);
 800d428:	2201      	movs	r2, #1
 800d42a:	4941      	ldr	r1, [pc, #260]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d42c:	4841      	ldr	r0, [pc, #260]	; (800d534 <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800d42e:	f7ff f8d9 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF1(GPIOF, GPIO_PIN_1);
 800d432:	2202      	movs	r2, #2
 800d434:	493e      	ldr	r1, [pc, #248]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d436:	4840      	ldr	r0, [pc, #256]	; (800d538 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d438:	f7ff f8d4 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF2(GPIOF, GPIO_PIN_2);
 800d43c:	2204      	movs	r2, #4
 800d43e:	493c      	ldr	r1, [pc, #240]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d440:	483e      	ldr	r0, [pc, #248]	; (800d53c <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800d442:	f7ff f8cf 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF3(GPIOF, GPIO_PIN_3);
 800d446:	2208      	movs	r2, #8
 800d448:	4939      	ldr	r1, [pc, #228]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d44a:	483d      	ldr	r0, [pc, #244]	; (800d540 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d44c:	f7ff f8ca 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF4(GPIOF, GPIO_PIN_4);
 800d450:	2210      	movs	r2, #16
 800d452:	4937      	ldr	r1, [pc, #220]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d454:	483b      	ldr	r0, [pc, #236]	; (800d544 <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800d456:	f7ff f8c5 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF5(GPIOF, GPIO_PIN_5);
 800d45a:	2220      	movs	r2, #32
 800d45c:	4934      	ldr	r1, [pc, #208]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d45e:	483a      	ldr	r0, [pc, #232]	; (800d548 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800d460:	f7ff f8c0 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF6(GPIOF, GPIO_PIN_6);
 800d464:	2240      	movs	r2, #64	; 0x40
 800d466:	4932      	ldr	r1, [pc, #200]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d468:	4838      	ldr	r0, [pc, #224]	; (800d54c <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800d46a:	f7ff f8bb 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF7(GPIOF, GPIO_PIN_7);
 800d46e:	2280      	movs	r2, #128	; 0x80
 800d470:	492f      	ldr	r1, [pc, #188]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d472:	4837      	ldr	r0, [pc, #220]	; (800d550 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800d474:	f7ff f8b6 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF8(GPIOF, GPIO_PIN_8);
 800d478:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d47c:	492c      	ldr	r1, [pc, #176]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d47e:	4835      	ldr	r0, [pc, #212]	; (800d554 <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800d480:	f7ff f8b0 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF9(GPIOF, GPIO_PIN_9);
 800d484:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d488:	4929      	ldr	r1, [pc, #164]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d48a:	4833      	ldr	r0, [pc, #204]	; (800d558 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800d48c:	f7ff f8aa 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF10(GPIOF, GPIO_PIN_10);
 800d490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d494:	4926      	ldr	r1, [pc, #152]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d496:	4831      	ldr	r0, [pc, #196]	; (800d55c <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800d498:	f7ff f8a4 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF11(GPIOF, GPIO_PIN_11);
 800d49c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d4a0:	4923      	ldr	r1, [pc, #140]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4a2:	482f      	ldr	r0, [pc, #188]	; (800d560 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800d4a4:	f7ff f89e 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF12(GPIOF, GPIO_PIN_12);
 800d4a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d4ac:	4920      	ldr	r1, [pc, #128]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4ae:	482d      	ldr	r0, [pc, #180]	; (800d564 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800d4b0:	f7ff f898 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF13(GPIOF, GPIO_PIN_13);
 800d4b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d4b8:	491d      	ldr	r1, [pc, #116]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4ba:	482b      	ldr	r0, [pc, #172]	; (800d568 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800d4bc:	f7ff f892 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF14(GPIOF, GPIO_PIN_14);
 800d4c0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d4c4:	491a      	ldr	r1, [pc, #104]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4c6:	4829      	ldr	r0, [pc, #164]	; (800d56c <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800d4c8:	f7ff f88c 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d4cc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d4d0:	4917      	ldr	r1, [pc, #92]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4d2:	4827      	ldr	r0, [pc, #156]	; (800d570 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800d4d4:	f7ff f886 	bl	800c5e4 <_ZN3PinC1EP12GPIO_TypeDeft>
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d107      	bne.n	800d4ee <_Z41__static_initialization_and_destruction_0ii+0x582>
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	d102      	bne.n	800d4ee <_Z41__static_initialization_and_destruction_0ii+0x582>
vector<Pin*> Pin::all_pins;
 800d4e8:	4822      	ldr	r0, [pc, #136]	; (800d574 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800d4ea:	f000 f845 	bl	800d578 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d4ee:	bf00      	nop
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	58021000 	.word	0x58021000
 800d4fc:	24000410 	.word	0x24000410
 800d500:	24000418 	.word	0x24000418
 800d504:	24000420 	.word	0x24000420
 800d508:	24000428 	.word	0x24000428
 800d50c:	24000430 	.word	0x24000430
 800d510:	24000438 	.word	0x24000438
 800d514:	24000440 	.word	0x24000440
 800d518:	24000448 	.word	0x24000448
 800d51c:	24000450 	.word	0x24000450
 800d520:	24000458 	.word	0x24000458
 800d524:	24000460 	.word	0x24000460
 800d528:	24000468 	.word	0x24000468
 800d52c:	24000470 	.word	0x24000470
 800d530:	58021400 	.word	0x58021400
 800d534:	24000478 	.word	0x24000478
 800d538:	24000480 	.word	0x24000480
 800d53c:	24000488 	.word	0x24000488
 800d540:	24000490 	.word	0x24000490
 800d544:	24000498 	.word	0x24000498
 800d548:	240004a0 	.word	0x240004a0
 800d54c:	240004a8 	.word	0x240004a8
 800d550:	240004b0 	.word	0x240004b0
 800d554:	240004b8 	.word	0x240004b8
 800d558:	240004c0 	.word	0x240004c0
 800d55c:	240004c8 	.word	0x240004c8
 800d560:	240004d0 	.word	0x240004d0
 800d564:	240004d8 	.word	0x240004d8
 800d568:	240004e0 	.word	0x240004e0
 800d56c:	240004e8 	.word	0x240004e8
 800d570:	240004f0 	.word	0x240004f0
 800d574:	240001ec 	.word	0x240001ec

0800d578 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d578:	b5b0      	push	{r4, r5, r7, lr}
 800d57a:	b082      	sub	sp, #8
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681c      	ldr	r4, [r3, #0]
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff fb62 	bl	800cc54 <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800d590:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d592:	461a      	mov	r2, r3
 800d594:	4629      	mov	r1, r5
 800d596:	4620      	mov	r0, r4
 800d598:	f7ff fb67 	bl	800cc6a <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>
      }
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	4618      	mov	r0, r3
 800d5a0:	f7ff f87b 	bl	800c69a <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	3708      	adds	r7, #8
 800d5aa:	46bd      	mov	sp, r7
 800d5ac:	bdb0      	pop	{r4, r5, r7, pc}

0800d5ae <_GLOBAL__sub_I__ZN3Pin8all_pinsE>:
 800d5ae:	b580      	push	{r7, lr}
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5b6:	2001      	movs	r0, #1
 800d5b8:	f7ff fcd8 	bl	800cf6c <_Z41__static_initialization_and_destruction_0ii>
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <_GLOBAL__sub_D__ZN3Pin8all_pinsE>:
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d5c6:	2000      	movs	r0, #0
 800d5c8:	f7ff fcd0 	bl	800cf6c <_Z41__static_initialization_and_destruction_0ii>
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800d5ce:	b480      	push	{r7}
 800d5d0:	b083      	sub	sp, #12
 800d5d2:	af00      	add	r7, sp, #0
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	4618      	mov	r0, r3
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800d5e4:	b480      	push	{r7}
 800d5e6:	b083      	sub	sp, #12
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	370c      	adds	r7, #12
 800d5f2:	46bd      	mov	sp, r7
 800d5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800d5fa:	b480      	push	{r7}
 800d5fc:	b083      	sub	sp, #12
 800d5fe:	af00      	add	r7, sp, #0
 800d600:	6078      	str	r0, [r7, #4]
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2200      	movs	r2, #0
 800d606:	609a      	str	r2, [r3, #8]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	4618      	mov	r0, r3
 800d60c:	370c      	adds	r7, #12
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	689b      	ldr	r3, [r3, #8]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d005      	beq.n	800d632 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	689b      	ldr	r3, [r3, #8]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	6879      	ldr	r1, [r7, #4]
 800d62e:	2203      	movs	r2, #3
 800d630:	4798      	blx	r3
    }
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	4618      	mov	r0, r3
 800d636:	3708      	adds	r7, #8
 800d638:	46bd      	mov	sp, r7
 800d63a:	bd80      	pop	{r7, pc}

0800d63c <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800d63c:	b480      	push	{r7}
 800d63e:	b083      	sub	sp, #12
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	bf0c      	ite	eq
 800d64c:	2301      	moveq	r3, #1
 800d64e:	2300      	movne	r3, #0
 800d650:	b2db      	uxtb	r3, r3
 800d652:	4618      	mov	r0, r3
 800d654:	370c      	adds	r7, #12
 800d656:	46bd      	mov	sp, r7
 800d658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65c:	4770      	bx	lr

0800d65e <_ZN5Timer3minEff>:
	OPERATION_MODE current_operation_mode;
	UNITS current_units;
	uint32_t current_value;
	function<void()> current_func;

	float min(float n1, float n2){
 800d65e:	b480      	push	{r7}
 800d660:	b085      	sub	sp, #20
 800d662:	af00      	add	r7, sp, #0
 800d664:	60f8      	str	r0, [r7, #12]
 800d666:	ed87 0a02 	vstr	s0, [r7, #8]
 800d66a:	edc7 0a01 	vstr	s1, [r7, #4]
		if(n1 < n2)
 800d66e:	ed97 7a02 	vldr	s14, [r7, #8]
 800d672:	edd7 7a01 	vldr	s15, [r7, #4]
 800d676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d67a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d67e:	d501      	bpl.n	800d684 <_ZN5Timer3minEff+0x26>
			return n1;
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	e000      	b.n	800d686 <_ZN5Timer3minEff+0x28>
		return n2;
 800d684:	687b      	ldr	r3, [r7, #4]
	}
 800d686:	ee07 3a90 	vmov	s15, r3
 800d68a:	eeb0 0a67 	vmov.f32	s0, s15
 800d68e:	3714      	adds	r7, #20
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <_ZN5Timer9interruptEv>:

	void interrupt() {
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
		switch(current_operation_mode) {
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	781b      	ldrb	r3, [r3, #0]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d002      	beq.n	800d6ae <_ZN5Timer9interruptEv+0x16>
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d003      	beq.n	800d6b4 <_ZN5Timer9interruptEv+0x1c>
			reset();
		case CYCLIC:
			current_func();
			break;
		}
	}
 800d6ac:	e008      	b.n	800d6c0 <_ZN5Timer9interruptEv+0x28>
			reset();
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f000 f96a 	bl	800d988 <_ZN5Timer5resetEv>
			current_func();
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	3308      	adds	r3, #8
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	f002 fbf8 	bl	800feae <_ZNKSt8functionIFvvEEclEv>
			break;
 800d6be:	bf00      	nop
	}
 800d6c0:	bf00      	nop
 800d6c2:	3708      	adds	r7, #8
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}

0800d6c8 <_ZN5Timer10to_secondsENS_5UNITSE>:

	static uint32_t to_seconds(UNITS units){
 800d6c8:	b480      	push	{r7}
 800d6ca:	b083      	sub	sp, #12
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	4603      	mov	r3, r0
 800d6d0:	71fb      	strb	r3, [r7, #7]
		if(units == SECONDS)
 800d6d2:	79fb      	ldrb	r3, [r7, #7]
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d101      	bne.n	800d6dc <_ZN5Timer10to_secondsENS_5UNITSE+0x14>
			return 1;
 800d6d8:	2301      	movs	r3, #1
 800d6da:	e010      	b.n	800d6fe <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MILLISECONDS)
 800d6dc:	79fb      	ldrb	r3, [r7, #7]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d102      	bne.n	800d6e8 <_ZN5Timer10to_secondsENS_5UNITSE+0x20>
			return 1000;
 800d6e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6e6:	e00a      	b.n	800d6fe <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MICROSEONDS)
 800d6e8:	79fb      	ldrb	r3, [r7, #7]
 800d6ea:	2b02      	cmp	r3, #2
 800d6ec:	d101      	bne.n	800d6f2 <_ZN5Timer10to_secondsENS_5UNITSE+0x2a>
			return 1000000;
 800d6ee:	4b07      	ldr	r3, [pc, #28]	; (800d70c <_ZN5Timer10to_secondsENS_5UNITSE+0x44>)
 800d6f0:	e005      	b.n	800d6fe <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == NANOSECONDS)
 800d6f2:	79fb      	ldrb	r3, [r7, #7]
 800d6f4:	2b03      	cmp	r3, #3
 800d6f6:	d101      	bne.n	800d6fc <_ZN5Timer10to_secondsENS_5UNITSE+0x34>
			return 1000000000;
 800d6f8:	4b05      	ldr	r3, [pc, #20]	; (800d710 <_ZN5Timer10to_secondsENS_5UNITSE+0x48>)
 800d6fa:	e000      	b.n	800d6fe <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		return 0;
 800d6fc:	2300      	movs	r3, #0
	}
 800d6fe:	4618      	mov	r0, r3
 800d700:	370c      	adds	r7, #12
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr
 800d70a:	bf00      	nop
 800d70c:	000f4240 	.word	0x000f4240
 800d710:	3b9aca00 	.word	0x3b9aca00

0800d714 <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800d714:	b580      	push	{r7, lr}
 800d716:	b082      	sub	sp, #8
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	4618      	mov	r0, r3
 800d720:	f7ff ff79 	bl	800d616 <_ZNSt14_Function_baseD1Ev>
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	4618      	mov	r0, r3
 800d728:	3708      	adds	r7, #8
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
	...

0800d730 <_ZN5TimerC1EP17TIM_HandleTypeDef>:

public:
	TIM_HandleTypeDef* timer;
	uint32_t frequency;

	Timer(TIM_HandleTypeDef* timer) : timer(timer){
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	3308      	adds	r3, #8
 800d73e:	4618      	mov	r0, r3
 800d740:	f002 fbcb 	bl	800feda <_ZNSt8functionIFvvEEC1Ev>
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	683a      	ldr	r2, [r7, #0]
 800d748:	619a      	str	r2, [r3, #24]
		Timer::all_timers.push_back(this);
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	60fb      	str	r3, [r7, #12]
 800d74e:	f107 030c 	add.w	r3, r7, #12
 800d752:	4619      	mov	r1, r3
 800d754:	4803      	ldr	r0, [pc, #12]	; (800d764 <_ZN5TimerC1EP17TIM_HandleTypeDef+0x34>)
 800d756:	f002 fbcd 	bl	800fef4 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>
	}
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	4618      	mov	r0, r3
 800d75e:	3710      	adds	r7, #16
 800d760:	46bd      	mov	sp, r7
 800d762:	bd80      	pop	{r7, pc}
 800d764:	240001a0 	.word	0x240001a0

0800d768 <_ZN5Timer10set_periodEmNS_5UNITSE>:

	void set_period(uint32_t time, UNITS units){
 800d768:	b580      	push	{r7, lr}
 800d76a:	b08a      	sub	sp, #40	; 0x28
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	4613      	mov	r3, r2
 800d774:	71fb      	strb	r3, [r7, #7]
		timer->Instance->CNT = 0;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	699b      	ldr	r3, [r3, #24]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	2200      	movs	r2, #0
 800d77e:	625a      	str	r2, [r3, #36]	; 0x24
		float target_freq = to_seconds(units) / time;
 800d780:	79fb      	ldrb	r3, [r7, #7]
 800d782:	4618      	mov	r0, r3
 800d784:	f7ff ffa0 	bl	800d6c8 <_ZN5Timer10to_secondsENS_5UNITSE>
 800d788:	4602      	mov	r2, r0
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	fbb2 f3f3 	udiv	r3, r2, r3
 800d790:	ee07 3a90 	vmov	s15, r3
 800d794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d798:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d79c:	eddf 6a27 	vldr	s13, [pc, #156]	; 800d83c <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d7a0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d7a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d7a8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d7ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d7b0:	edc7 7a08 	vstr	s15, [r7, #32]
		float actual_psc = min(ideal_psc, 65536.0);
 800d7b4:	eddf 0a22 	vldr	s1, [pc, #136]	; 800d840 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d7b8:	ed97 0a08 	vldr	s0, [r7, #32]
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f7ff ff4e 	bl	800d65e <_ZN5Timer3minEff>
 800d7c2:	ed87 0a07 	vstr	s0, [r7, #28]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d7c6:	edd7 7a07 	vldr	s15, [r7, #28]
 800d7ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7ce:	ee17 2a90 	vmov	r2, s15
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	699b      	ldr	r3, [r3, #24]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	3a01      	subs	r2, #1
 800d7da:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	699b      	ldr	r3, [r3, #24]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7e4:	3301      	adds	r3, #1
 800d7e6:	ee07 3a90 	vmov	s15, r3
 800d7ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d7ee:	eddf 6a13 	vldr	s13, [pc, #76]	; 800d83c <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d7f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7f6:	edc7 7a06 	vstr	s15, [r7, #24]
		float ideal_arr = current_psc_freq / target_freq;
 800d7fa:	edd7 6a06 	vldr	s13, [r7, #24]
 800d7fe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d806:	edc7 7a05 	vstr	s15, [r7, #20]
		float actual_arr = min(ideal_arr, 65536.0);
 800d80a:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d840 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d80e:	ed97 0a05 	vldr	s0, [r7, #20]
 800d812:	68f8      	ldr	r0, [r7, #12]
 800d814:	f7ff ff23 	bl	800d65e <_ZN5Timer3minEff>
 800d818:	ed87 0a04 	vstr	s0, [r7, #16]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d81c:	edd7 7a04 	vldr	s15, [r7, #16]
 800d820:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d824:	ee17 2a90 	vmov	r2, s15
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	699b      	ldr	r3, [r3, #24]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	3a01      	subs	r2, #1
 800d830:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d832:	bf00      	nop
 800d834:	3728      	adds	r7, #40	; 0x28
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	4d832156 	.word	0x4d832156
 800d840:	47800000 	.word	0x47800000

0800d844 <_ZN5Timer13set_frequencyEm>:

	void set_frequency(uint32_t target_freq){
 800d844:	b580      	push	{r7, lr}
 800d846:	b088      	sub	sp, #32
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
		timer->Instance->CNT = 0;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	699b      	ldr	r3, [r3, #24]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2200      	movs	r2, #0
 800d856:	625a      	str	r2, [r3, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d858:	683b      	ldr	r3, [r7, #0]
 800d85a:	ee07 3a90 	vmov	s15, r3
 800d85e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d862:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d904 <_ZN5Timer13set_frequencyEm+0xc0>
 800d866:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d86a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d86e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d872:	edc7 7a07 	vstr	s15, [r7, #28]
		float actual_psc = min(ideal_psc, 65536.0);
 800d876:	eddf 0a24 	vldr	s1, [pc, #144]	; 800d908 <_ZN5Timer13set_frequencyEm+0xc4>
 800d87a:	ed97 0a07 	vldr	s0, [r7, #28]
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f7ff feed 	bl	800d65e <_ZN5Timer3minEff>
 800d884:	ed87 0a06 	vstr	s0, [r7, #24]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d888:	edd7 7a06 	vldr	s15, [r7, #24]
 800d88c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d890:	ee17 2a90 	vmov	r2, s15
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	699b      	ldr	r3, [r3, #24]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	3a01      	subs	r2, #1
 800d89c:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8a6:	3301      	adds	r3, #1
 800d8a8:	ee07 3a90 	vmov	s15, r3
 800d8ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8b0:	eddf 6a14 	vldr	s13, [pc, #80]	; 800d904 <_ZN5Timer13set_frequencyEm+0xc0>
 800d8b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8b8:	edc7 7a05 	vstr	s15, [r7, #20]
		float ideal_arr = current_psc_freq / target_freq;
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	ee07 3a90 	vmov	s15, r3
 800d8c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d8c6:	edd7 6a05 	vldr	s13, [r7, #20]
 800d8ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8ce:	edc7 7a04 	vstr	s15, [r7, #16]
		float actual_arr = min(ideal_arr, 65536.0);
 800d8d2:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d908 <_ZN5Timer13set_frequencyEm+0xc4>
 800d8d6:	ed97 0a04 	vldr	s0, [r7, #16]
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f7ff febf 	bl	800d65e <_ZN5Timer3minEff>
 800d8e0:	ed87 0a03 	vstr	s0, [r7, #12]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d8e4:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8ec:	ee17 2a90 	vmov	r2, s15
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	699b      	ldr	r3, [r3, #24]
 800d8f4:	681b      	ldr	r3, [r3, #0]
 800d8f6:	3a01      	subs	r2, #1
 800d8f8:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d8fa:	bf00      	nop
 800d8fc:	3720      	adds	r7, #32
 800d8fe:	46bd      	mov	sp, r7
 800d900:	bd80      	pop	{r7, pc}
 800d902:	bf00      	nop
 800d904:	4d832156 	.word	0x4d832156
 800d908:	47800000 	.word	0x47800000

0800d90c <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>:

	void execute_every(function<void()> func, uint32_t time, UNITS units){
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	60f8      	str	r0, [r7, #12]
 800d914:	60b9      	str	r1, [r7, #8]
 800d916:	607a      	str	r2, [r7, #4]
 800d918:	70fb      	strb	r3, [r7, #3]
		current_operation_mode = CYCLIC;
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	2201      	movs	r2, #1
 800d91e:	701a      	strb	r2, [r3, #0]
		current_units = units;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	78fa      	ldrb	r2, [r7, #3]
 800d924:	705a      	strb	r2, [r3, #1]
		current_func = func;
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	3308      	adds	r3, #8
 800d92a:	68b9      	ldr	r1, [r7, #8]
 800d92c:	4618      	mov	r0, r3
 800d92e:	f002 faf2 	bl	800ff16 <_ZNSt8functionIFvvEEaSERKS1_>
		set_period(time, units);
 800d932:	78fb      	ldrb	r3, [r7, #3]
 800d934:	461a      	mov	r2, r3
 800d936:	6879      	ldr	r1, [r7, #4]
 800d938:	68f8      	ldr	r0, [r7, #12]
 800d93a:	f7ff ff15 	bl	800d768 <_ZN5Timer10set_periodEmNS_5UNITSE>
		HAL_TIM_Base_Start_IT(timer);
 800d93e:	68fb      	ldr	r3, [r7, #12]
 800d940:	699b      	ldr	r3, [r3, #24]
 800d942:	4618      	mov	r0, r3
 800d944:	f010 fed6 	bl	801e6f4 <HAL_TIM_Base_Start_IT>
	}
 800d948:	bf00      	nop
 800d94a:	3710      	adds	r7, #16
 800d94c:	46bd      	mov	sp, r7
 800d94e:	bd80      	pop	{r7, pc}

0800d950 <_ZN5Timer10execute_atESt8functionIFvvEEm>:

	void execute_at(function<void()> func, uint32_t target_freq){
 800d950:	b580      	push	{r7, lr}
 800d952:	b084      	sub	sp, #16
 800d954:	af00      	add	r7, sp, #0
 800d956:	60f8      	str	r0, [r7, #12]
 800d958:	60b9      	str	r1, [r7, #8]
 800d95a:	607a      	str	r2, [r7, #4]
		current_operation_mode = CYCLIC;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	2201      	movs	r2, #1
 800d960:	701a      	strb	r2, [r3, #0]
		current_func = func;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	3308      	adds	r3, #8
 800d966:	68b9      	ldr	r1, [r7, #8]
 800d968:	4618      	mov	r0, r3
 800d96a:	f002 fad4 	bl	800ff16 <_ZNSt8functionIFvvEEaSERKS1_>
		set_frequency(target_freq);
 800d96e:	6879      	ldr	r1, [r7, #4]
 800d970:	68f8      	ldr	r0, [r7, #12]
 800d972:	f7ff ff67 	bl	800d844 <_ZN5Timer13set_frequencyEm>
		HAL_TIM_Base_Start_IT(timer);
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	699b      	ldr	r3, [r3, #24]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f010 feba 	bl	801e6f4 <HAL_TIM_Base_Start_IT>
	}
 800d980:	bf00      	nop
 800d982:	3710      	adds	r7, #16
 800d984:	46bd      	mov	sp, r7
 800d986:	bd80      	pop	{r7, pc}

0800d988 <_ZN5Timer5resetEv>:

	void reset(){
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	699b      	ldr	r3, [r3, #24]
 800d994:	4618      	mov	r0, r3
 800d996:	f010 ff33 	bl	801e800 <HAL_TIM_Base_Stop_IT>
		current_operation_mode = NONE;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	701a      	strb	r2, [r3, #0]
	}
 800d9a0:	bf00      	nop
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d9a8:	b480      	push	{r7}
 800d9aa:	b083      	sub	sp, #12
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	370c      	adds	r7, #12
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800d9be:	b590      	push	{r4, r7, lr}
 800d9c0:	b083      	sub	sp, #12
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
 800d9c6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f7ff ffed 	bl	800d9a8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	681c      	ldr	r4, [r3, #0]
 800d9d2:	6838      	ldr	r0, [r7, #0]
 800d9d4:	f7ff ffe8 	bl	800d9a8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	429c      	cmp	r4, r3
 800d9de:	bf0c      	ite	eq
 800d9e0:	2301      	moveq	r3, #1
 800d9e2:	2300      	movne	r3, #0
 800d9e4:	b2db      	uxtb	r3, r3
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	370c      	adds	r7, #12
 800d9ea:	46bd      	mov	sp, r7
 800d9ec:	bd90      	pop	{r4, r7, pc}

0800d9ee <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d9ee:	b480      	push	{r7}
 800d9f0:	b083      	sub	sp, #12
 800d9f2:	af00      	add	r7, sp, #0
 800d9f4:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	1d1a      	adds	r2, r3, #4
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	601a      	str	r2, [r3, #0]
	return *this;
 800da00:	687b      	ldr	r3, [r7, #4]
      }
 800da02:	4618      	mov	r0, r3
 800da04:	370c      	adds	r7, #12
 800da06:	46bd      	mov	sp, r7
 800da08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0c:	4770      	bx	lr

0800da0e <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800da0e:	b480      	push	{r7}
 800da10:	b083      	sub	sp, #12
 800da12:	af00      	add	r7, sp, #0
 800da14:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	4618      	mov	r0, r3
 800da1c:	370c      	adds	r7, #12
 800da1e:	46bd      	mov	sp, r7
 800da20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da24:	4770      	bx	lr
	...

0800da28 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>:

	void start_interrupt(){
		HAL_TIM_Base_Start_IT(timer);
	}

	static void interrupt_all_timers(TIM_HandleTypeDef* timer){
 800da28:	b580      	push	{r7, lr}
 800da2a:	b086      	sub	sp, #24
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
		for(auto software_timer : Timer::all_timers){
 800da30:	4b19      	ldr	r3, [pc, #100]	; (800da98 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x70>)
 800da32:	617b      	str	r3, [r7, #20]
 800da34:	6978      	ldr	r0, [r7, #20]
 800da36:	f002 fa89 	bl	800ff4c <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 800da3a:	4603      	mov	r3, r0
 800da3c:	60fb      	str	r3, [r7, #12]
 800da3e:	6978      	ldr	r0, [r7, #20]
 800da40:	f002 fa94 	bl	800ff6c <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 800da44:	4603      	mov	r3, r0
 800da46:	60bb      	str	r3, [r7, #8]
 800da48:	f107 0208 	add.w	r2, r7, #8
 800da4c:	f107 030c 	add.w	r3, r7, #12
 800da50:	4611      	mov	r1, r2
 800da52:	4618      	mov	r0, r3
 800da54:	f7ff ffb3 	bl	800d9be <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800da58:	4603      	mov	r3, r0
 800da5a:	f083 0301 	eor.w	r3, r3, #1
 800da5e:	b2db      	uxtb	r3, r3
 800da60:	2b00      	cmp	r3, #0
 800da62:	d015      	beq.n	800da90 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x68>
 800da64:	f107 030c 	add.w	r3, r7, #12
 800da68:	4618      	mov	r0, r3
 800da6a:	f7ff ffd0 	bl	800da0e <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 800da6e:	4603      	mov	r3, r0
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	613b      	str	r3, [r7, #16]
			if(software_timer->timer == timer)
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	699b      	ldr	r3, [r3, #24]
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d102      	bne.n	800da84 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x5c>
				software_timer->interrupt();
 800da7e:	6938      	ldr	r0, [r7, #16]
 800da80:	f7ff fe0a 	bl	800d698 <_ZN5Timer9interruptEv>
		for(auto software_timer : Timer::all_timers){
 800da84:	f107 030c 	add.w	r3, r7, #12
 800da88:	4618      	mov	r0, r3
 800da8a:	f7ff ffb0 	bl	800d9ee <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>
 800da8e:	e7db      	b.n	800da48 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x20>
		}
	}
 800da90:	bf00      	nop
 800da92:	3718      	adds	r7, #24
 800da94:	46bd      	mov	sp, r7
 800da96:	bd80      	pop	{r7, pc}
 800da98:	240001a0 	.word	0x240001a0

0800da9c <_ZN13StreamMessageC1EPfff>:
	size_t size;
	float min, max;
	void* ptr;
	bool  do_scale;

	StreamMessage(float* ptr, float min, float max) : ptr(ptr), min(min), max(max){
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	ed87 0a01 	vstr	s0, [r7, #4]
 800daaa:	edc7 0a00 	vstr	s1, [r7]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	2200      	movs	r2, #0
 800dab2:	601a      	str	r2, [r3, #0]
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	687a      	ldr	r2, [r7, #4]
 800dab8:	609a      	str	r2, [r3, #8]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	683a      	ldr	r2, [r7, #0]
 800dabe:	60da      	str	r2, [r3, #12]
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	68ba      	ldr	r2, [r7, #8]
 800dac4:	611a      	str	r2, [r3, #16]
		do_scale = true;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2201      	movs	r2, #1
 800daca:	751a      	strb	r2, [r3, #20]
		size = precision_mode;
 800dacc:	4b05      	ldr	r3, [pc, #20]	; (800dae4 <_ZN13StreamMessageC1EPfff+0x48>)
 800dace:	781b      	ldrb	r3, [r3, #0]
 800dad0:	461a      	mov	r2, r3
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	605a      	str	r2, [r3, #4]
	}
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	4618      	mov	r0, r3
 800dada:	3714      	adds	r7, #20
 800dadc:	46bd      	mov	sp, r7
 800dade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae2:	4770      	bx	lr
 800dae4:	24000001 	.word	0x24000001

0800dae8 <_ZN13StreamMessageC1EPh>:

	StreamMessage(uint8_t* ptr) : ptr(ptr){
 800dae8:	b480      	push	{r7}
 800daea:	b083      	sub	sp, #12
 800daec:	af00      	add	r7, sp, #0
 800daee:	6078      	str	r0, [r7, #4]
 800daf0:	6039      	str	r1, [r7, #0]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	2200      	movs	r2, #0
 800daf6:	601a      	str	r2, [r3, #0]
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	611a      	str	r2, [r3, #16]
		do_scale = false;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2200      	movs	r2, #0
 800db02:	751a      	strb	r2, [r3, #20]
		size = 1;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	2201      	movs	r2, #1
 800db08:	605a      	str	r2, [r3, #4]
	}
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	4618      	mov	r0, r3
 800db0e:	370c      	adds	r7, #12
 800db10:	46bd      	mov	sp, r7
 800db12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db16:	4770      	bx	lr

0800db18 <_ZN13StreamMessage7unparseEPh>:

	void unparse(uint8_t* d) {
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
 800db20:	6039      	str	r1, [r7, #0]
		if(do_scale){
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	7d1b      	ldrb	r3, [r3, #20]
 800db26:	2b00      	cmp	r3, #0
 800db28:	d03f      	beq.n	800dbaa <_ZN13StreamMessage7unparseEPh+0x92>
			if(ic != nullptr)
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d004      	beq.n	800db3c <_ZN13StreamMessage7unparseEPh+0x24>
				ic->get_duty();
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4618      	mov	r0, r3
 800db38:	f7fb fdec 	bl	8009714 <_ZN12InputCapture8get_dutyEv>
			float scale = (*((float*) ptr) - min) / (max - min);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	ed93 7a00 	vldr	s14, [r3]
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	edd3 7a02 	vldr	s15, [r3, #8]
 800db4a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	ed93 7a03 	vldr	s14, [r3, #12]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	edd3 7a02 	vldr	s15, [r3, #8]
 800db5a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db62:	edc7 7a05 	vstr	s15, [r7, #20]
			uint32_t data = (uint32_t) (scale * precision_max[(Precision) size]);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	685b      	ldr	r3, [r3, #4]
 800db6a:	b2db      	uxtb	r3, r3
 800db6c:	74fb      	strb	r3, [r7, #19]
 800db6e:	f107 0313 	add.w	r3, r7, #19
 800db72:	4619      	mov	r1, r3
 800db74:	4813      	ldr	r0, [pc, #76]	; (800dbc4 <_ZN13StreamMessage7unparseEPh+0xac>)
 800db76:	f002 fa0b 	bl	800ff90 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>
 800db7a:	4603      	mov	r3, r0
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	ee07 3a90 	vmov	s15, r3
 800db82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db86:	edd7 7a05 	vldr	s15, [r7, #20]
 800db8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db92:	ee17 3a90 	vmov	r3, s15
 800db96:	60fb      	str	r3, [r7, #12]
			memcpy(d, &data, size);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	f107 030c 	add.w	r3, r7, #12
 800dba0:	4619      	mov	r1, r3
 800dba2:	6838      	ldr	r0, [r7, #0]
 800dba4:	f013 f800 	bl	8020ba8 <memcpy>
		}else{
			memcpy(d, ptr, size);
		}
	}
 800dba8:	e007      	b.n	800dbba <_ZN13StreamMessage7unparseEPh+0xa2>
			memcpy(d, ptr, size);
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6919      	ldr	r1, [r3, #16]
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	685b      	ldr	r3, [r3, #4]
 800dbb2:	461a      	mov	r2, r3
 800dbb4:	6838      	ldr	r0, [r7, #0]
 800dbb6:	f012 fff7 	bl	8020ba8 <memcpy>
	}
 800dbba:	bf00      	nop
 800dbbc:	3718      	adds	r7, #24
 800dbbe:	46bd      	mov	sp, r7
 800dbc0:	bd80      	pop	{r7, pc}
 800dbc2:	bf00      	nop
 800dbc4:	24000188 	.word	0x24000188

0800dbc8 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>:

	static StreamMessage* FromAnalogIn(AnalogIn* in){
 800dbc8:	b590      	push	{r4, r7, lr}
 800dbca:	b083      	sub	sp, #12
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->voltage, 0, 3.3);
 800dbd0:	2018      	movs	r0, #24
 800dbd2:	f012 febd 	bl	8020950 <_Znwj>
 800dbd6:	4603      	mov	r3, r0
 800dbd8:	461c      	mov	r4, r3
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	3314      	adds	r3, #20
 800dbde:	eddf 0a06 	vldr	s1, [pc, #24]	; 800dbf8 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x30>
 800dbe2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800dbfc <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x34>
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	4620      	mov	r0, r4
 800dbea:	f7ff ff57 	bl	800da9c <_ZN13StreamMessageC1EPfff>
 800dbee:	4623      	mov	r3, r4
	}
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	370c      	adds	r7, #12
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	bd90      	pop	{r4, r7, pc}
 800dbf8:	40533333 	.word	0x40533333
 800dbfc:	00000000 	.word	0x00000000

0800dc00 <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>:

	static StreamMessage* FromDigigalIn(DigitalIn* in){
 800dc00:	b590      	push	{r4, r7, lr}
 800dc02:	b083      	sub	sp, #12
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
		return new StreamMessage((uint8_t*) &in->state);
 800dc08:	2018      	movs	r0, #24
 800dc0a:	f012 fea1 	bl	8020950 <_Znwj>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	461c      	mov	r4, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	3308      	adds	r3, #8
 800dc16:	4619      	mov	r1, r3
 800dc18:	4620      	mov	r0, r4
 800dc1a:	f7ff ff65 	bl	800dae8 <_ZN13StreamMessageC1EPh>
 800dc1e:	4623      	mov	r3, r4
	}
 800dc20:	4618      	mov	r0, r3
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd90      	pop	{r4, r7, pc}

0800dc28 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>:

	static StreamMessage* FromInputCapture(InputCapture* in){
 800dc28:	b590      	push	{r4, r7, lr}
 800dc2a:	b085      	sub	sp, #20
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
		StreamMessage* sm = new StreamMessage(&in->duty, 0, 100);
 800dc30:	2018      	movs	r0, #24
 800dc32:	f012 fe8d 	bl	8020950 <_Znwj>
 800dc36:	4603      	mov	r3, r0
 800dc38:	461c      	mov	r4, r3
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	33c0      	adds	r3, #192	; 0xc0
 800dc3e:	eddf 0a08 	vldr	s1, [pc, #32]	; 800dc60 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x38>
 800dc42:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dc64 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x3c>
 800dc46:	4619      	mov	r1, r3
 800dc48:	4620      	mov	r0, r4
 800dc4a:	f7ff ff27 	bl	800da9c <_ZN13StreamMessageC1EPfff>
 800dc4e:	60fc      	str	r4, [r7, #12]
		sm->ic = in;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	687a      	ldr	r2, [r7, #4]
 800dc54:	601a      	str	r2, [r3, #0]
		return sm;
 800dc56:	68fb      	ldr	r3, [r7, #12]
	}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	3714      	adds	r7, #20
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	bd90      	pop	{r4, r7, pc}
 800dc60:	42c80000 	.word	0x42c80000
 800dc64:	00000000 	.word	0x00000000

0800dc68 <_ZN13StreamMessage7FromPinEP3Pin>:

	static optional<StreamMessage*> FromPin(Pin* pin){
 800dc68:	b580      	push	{r7, lr}
 800dc6a:	b086      	sub	sp, #24
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
 800dc70:	6039      	str	r1, [r7, #0]
		if(pin->mode == ANALOG_INPUT)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	799b      	ldrb	r3, [r3, #6]
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d112      	bne.n	800dca0 <_ZN13StreamMessage7FromPinEP3Pin+0x38>
			return FromAnalogIn(AnalogIn::analog_in_from_pin[pin]);
 800dc7a:	463b      	mov	r3, r7
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	4822      	ldr	r0, [pc, #136]	; (800dd08 <_ZN13StreamMessage7FromPinEP3Pin+0xa0>)
 800dc80:	f7f2 fe6e 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dc84:	4603      	mov	r3, r0
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	4618      	mov	r0, r3
 800dc8a:	f7ff ff9d 	bl	800dbc8 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>
 800dc8e:	4603      	mov	r3, r0
 800dc90:	60fb      	str	r3, [r7, #12]
 800dc92:	f107 030c 	add.w	r3, r7, #12
 800dc96:	4619      	mov	r1, r3
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f002 f9d9 	bl	8010050 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
		if(pin->mode == DIGITAL_INPUT)
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
		if(pin->mode == INPUT_CAPTURE)
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
	}
 800dc9e:	e02e      	b.n	800dcfe <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == DIGITAL_INPUT)
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	799b      	ldrb	r3, [r3, #6]
 800dca4:	2b03      	cmp	r3, #3
 800dca6:	d112      	bne.n	800dcce <_ZN13StreamMessage7FromPinEP3Pin+0x66>
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
 800dca8:	463b      	mov	r3, r7
 800dcaa:	4619      	mov	r1, r3
 800dcac:	4817      	ldr	r0, [pc, #92]	; (800dd0c <_ZN13StreamMessage7FromPinEP3Pin+0xa4>)
 800dcae:	f7f8 fd15 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4618      	mov	r0, r3
 800dcb8:	f7ff ffa2 	bl	800dc00 <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>
 800dcbc:	4603      	mov	r3, r0
 800dcbe:	613b      	str	r3, [r7, #16]
 800dcc0:	f107 0310 	add.w	r3, r7, #16
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f002 f9c2 	bl	8010050 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dccc:	e017      	b.n	800dcfe <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == INPUT_CAPTURE)
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	799b      	ldrb	r3, [r3, #6]
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d112      	bne.n	800dcfc <_ZN13StreamMessage7FromPinEP3Pin+0x94>
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
 800dcd6:	463b      	mov	r3, r7
 800dcd8:	4619      	mov	r1, r3
 800dcda:	480d      	ldr	r0, [pc, #52]	; (800dd10 <_ZN13StreamMessage7FromPinEP3Pin+0xa8>)
 800dcdc:	f7fb fddc 	bl	8009898 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dce0:	4603      	mov	r3, r0
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7ff ff9f 	bl	800dc28 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>
 800dcea:	4603      	mov	r3, r0
 800dcec:	617b      	str	r3, [r7, #20]
 800dcee:	f107 0314 	add.w	r3, r7, #20
 800dcf2:	4619      	mov	r1, r3
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f002 f9ab 	bl	8010050 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dcfa:	e000      	b.n	800dcfe <_ZN13StreamMessage7FromPinEP3Pin+0x96>
 800dcfc:	bf00      	nop
 800dcfe:	6878      	ldr	r0, [r7, #4]
 800dd00:	3718      	adds	r7, #24
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	240000bc 	.word	0x240000bc
 800dd0c:	2400011c 	.word	0x2400011c
 800dd10:	24000164 	.word	0x24000164

0800dd14 <_ZN13StreamMessage18set_precision_modeEh>:

	static bool set_precision_mode(uint8_t precision){
 800dd14:	b480      	push	{r7}
 800dd16:	b083      	sub	sp, #12
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	71fb      	strb	r3, [r7, #7]
		if(precision < 0 || precision > 4)
 800dd1e:	79fb      	ldrb	r3, [r7, #7]
 800dd20:	2b04      	cmp	r3, #4
 800dd22:	d901      	bls.n	800dd28 <_ZN13StreamMessage18set_precision_modeEh+0x14>
			return false;
 800dd24:	2300      	movs	r3, #0
 800dd26:	e003      	b.n	800dd30 <_ZN13StreamMessage18set_precision_modeEh+0x1c>
		precision_mode = (Precision) precision;
 800dd28:	4a04      	ldr	r2, [pc, #16]	; (800dd3c <_ZN13StreamMessage18set_precision_modeEh+0x28>)
 800dd2a:	79fb      	ldrb	r3, [r7, #7]
 800dd2c:	7013      	strb	r3, [r2, #0]
		return true;
 800dd2e:	2301      	movs	r3, #1
	}
 800dd30:	4618      	mov	r0, r3
 800dd32:	370c      	adds	r7, #12
 800dd34:	46bd      	mov	sp, r7
 800dd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3a:	4770      	bx	lr
 800dd3c:	24000001 	.word	0x24000001

0800dd40 <_ZN6Stream12is_availableEjj>:
	unsigned int size = 0;
	uint8_t id;
	Timer* timer;
	Can* can;

	bool is_available(unsigned int frequency, unsigned int size){
 800dd40:	b480      	push	{r7}
 800dd42:	b087      	sub	sp, #28
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	60f8      	str	r0, [r7, #12]
 800dd48:	60b9      	str	r1, [r7, #8]
 800dd4a:	607a      	str	r2, [r7, #4]
		bool is_occupied		= this ->state == OCCUPIED;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	781b      	ldrb	r3, [r3, #0]
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	bf0c      	ite	eq
 800dd54:	2301      	moveq	r3, #1
 800dd56:	2300      	movne	r3, #0
 800dd58:	75fb      	strb	r3, [r7, #23]
		bool is_full			= (this->size + size) > 64 ;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	695a      	ldr	r2, [r3, #20]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4413      	add	r3, r2
 800dd62:	2b40      	cmp	r3, #64	; 0x40
 800dd64:	bf8c      	ite	hi
 800dd66:	2301      	movhi	r3, #1
 800dd68:	2300      	movls	r3, #0
 800dd6a:	75bb      	strb	r3, [r7, #22]
		bool frequencies_match	= this->frequency == frequency;
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	685b      	ldr	r3, [r3, #4]
 800dd70:	68ba      	ldr	r2, [r7, #8]
 800dd72:	429a      	cmp	r2, r3
 800dd74:	bf0c      	ite	eq
 800dd76:	2301      	moveq	r3, #1
 800dd78:	2300      	movne	r3, #0
 800dd7a:	757b      	strb	r3, [r7, #21]
		return !is_occupied || (frequencies_match && !is_full);
 800dd7c:	7dfb      	ldrb	r3, [r7, #23]
 800dd7e:	f083 0301 	eor.w	r3, r3, #1
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d108      	bne.n	800dd9a <_ZN6Stream12is_availableEjj+0x5a>
 800dd88:	7d7b      	ldrb	r3, [r7, #21]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d007      	beq.n	800dd9e <_ZN6Stream12is_availableEjj+0x5e>
 800dd8e:	7dbb      	ldrb	r3, [r7, #22]
 800dd90:	f083 0301 	eor.w	r3, r3, #1
 800dd94:	b2db      	uxtb	r3, r3
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d001      	beq.n	800dd9e <_ZN6Stream12is_availableEjj+0x5e>
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e000      	b.n	800dda0 <_ZN6Stream12is_availableEjj+0x60>
 800dd9e:	2300      	movs	r3, #0
	}
 800dda0:	4618      	mov	r0, r3
 800dda2:	371c      	adds	r7, #28
 800dda4:	46bd      	mov	sp, r7
 800dda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddaa:	4770      	bx	lr

0800ddac <_ZN6Stream16send_ok_responseEht>:

	void send_ok_response(uint8_t offset, uint16_t response_code){
 800ddac:	b580      	push	{r7, lr}
 800ddae:	b082      	sub	sp, #8
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	6078      	str	r0, [r7, #4]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	70fb      	strb	r3, [r7, #3]
 800ddb8:	4613      	mov	r3, r2
 800ddba:	803b      	strh	r3, [r7, #0]
		can->TxData[0] = Can::Ok;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6a1b      	ldr	r3, [r3, #32]
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		can->TxData[1] = id;
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6a1b      	ldr	r3, [r3, #32]
 800ddca:	687a      	ldr	r2, [r7, #4]
 800ddcc:	7e12      	ldrb	r2, [r2, #24]
 800ddce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		can->TxData[2] = offset;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	6a1b      	ldr	r3, [r3, #32]
 800ddd6:	78fa      	ldrb	r2, [r7, #3]
 800ddd8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		can->send_message(response_code, 3);
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6a1b      	ldr	r3, [r3, #32]
 800dde0:	8839      	ldrh	r1, [r7, #0]
 800dde2:	2203      	movs	r2, #3
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7f6 ffc3 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800ddea:	bf00      	nop
 800ddec:	3708      	adds	r7, #8
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}

0800ddf2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ddf2:	b580      	push	{r7, lr}
 800ddf4:	b082      	sub	sp, #8
 800ddf6:	af00      	add	r7, sp, #0
 800ddf8:	6078      	str	r0, [r7, #4]
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f002 f95c 	bl	80100b8 <_ZNSaIP13StreamMessageED1Ev>
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	4618      	mov	r0, r3
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b082      	sub	sp, #8
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	4618      	mov	r0, r3
 800de16:	f002 f93f 	bl	8010098 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	4618      	mov	r0, r3
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}

0800de24 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>:
      vector() = default;
 800de24:	b580      	push	{r7, lr}
 800de26:	b082      	sub	sp, #8
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff ffeb 	bl	800de0a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	4618      	mov	r0, r3
 800de38:	3708      	adds	r7, #8
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}
	...

0800de40 <_ZN6StreamC1EP5TimerP3Can>:
		return true;
	}

public:

	Stream(Timer* timer, Can* can) : timer(timer), can(can) {
 800de40:	b580      	push	{r7, lr}
 800de42:	b086      	sub	sp, #24
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2200      	movs	r2, #0
 800de50:	701a      	strb	r2, [r3, #0]
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	3308      	adds	r3, #8
 800de56:	4618      	mov	r0, r3
 800de58:	f7ff ffe4 	bl	800de24 <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2200      	movs	r2, #0
 800de60:	615a      	str	r2, [r3, #20]
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	68ba      	ldr	r2, [r7, #8]
 800de66:	61da      	str	r2, [r3, #28]
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	621a      	str	r2, [r3, #32]
		Stream::streams.push_back(this);
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	617b      	str	r3, [r7, #20]
 800de72:	f107 0314 	add.w	r3, r7, #20
 800de76:	4619      	mov	r1, r3
 800de78:	4808      	ldr	r0, [pc, #32]	; (800de9c <_ZN6StreamC1EP5TimerP3Can+0x5c>)
 800de7a:	f002 f95c 	bl	8010136 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>
		id = current_id;
 800de7e:	4b08      	ldr	r3, [pc, #32]	; (800dea0 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de80:	781a      	ldrb	r2, [r3, #0]
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	761a      	strb	r2, [r3, #24]
		current_id ++;
 800de86:	4b06      	ldr	r3, [pc, #24]	; (800dea0 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	3301      	adds	r3, #1
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	4b04      	ldr	r3, [pc, #16]	; (800dea0 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de90:	701a      	strb	r2, [r3, #0]
	}
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	4618      	mov	r0, r3
 800de96:	3718      	adds	r7, #24
 800de98:	46bd      	mov	sp, r7
 800de9a:	bd80      	pop	{r7, pc}
 800de9c:	2400017c 	.word	0x2400017c
 800dea0:	24000000 	.word	0x24000000

0800dea4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800dea4:	b480      	push	{r7}
 800dea6:	b083      	sub	sp, #12
 800dea8:	af00      	add	r7, sp, #0
 800deaa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	4618      	mov	r0, r3
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800deba:	b590      	push	{r4, r7, lr}
 800debc:	b083      	sub	sp, #12
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
 800dec2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7ff ffed 	bl	800dea4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800deca:	4603      	mov	r3, r0
 800decc:	681c      	ldr	r4, [r3, #0]
 800dece:	6838      	ldr	r0, [r7, #0]
 800ded0:	f7ff ffe8 	bl	800dea4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800ded4:	4603      	mov	r3, r0
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	429c      	cmp	r4, r3
 800deda:	bf0c      	ite	eq
 800dedc:	2301      	moveq	r3, #1
 800dede:	2300      	movne	r3, #0
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	4618      	mov	r0, r3
 800dee4:	370c      	adds	r7, #12
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd90      	pop	{r4, r7, pc}

0800deea <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800deea:	b480      	push	{r7}
 800deec:	b083      	sub	sp, #12
 800deee:	af00      	add	r7, sp, #0
 800def0:	6078      	str	r0, [r7, #4]
	++_M_current;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	1d1a      	adds	r2, r3, #4
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	601a      	str	r2, [r3, #0]
	return *this;
 800defc:	687b      	ldr	r3, [r7, #4]
      }
 800defe:	4618      	mov	r0, r3
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800df0a:	b480      	push	{r7}
 800df0c:	b083      	sub	sp, #12
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	4618      	mov	r0, r3
 800df18:	370c      	adds	r7, #12
 800df1a:	46bd      	mov	sp, r7
 800df1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df20:	4770      	bx	lr

0800df22 <_ZN6Stream17send_all_messagesEv>:

	void send_all_messages(){
 800df22:	b580      	push	{r7, lr}
 800df24:	b088      	sub	sp, #32
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
		unsigned int current_position = 0;
 800df2a:	2300      	movs	r3, #0
 800df2c:	61fb      	str	r3, [r7, #28]
		memset(can->TxData, 255, Can::MAX_MESSAGE_SIZE);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6a1b      	ldr	r3, [r3, #32]
 800df32:	3350      	adds	r3, #80	; 0x50
 800df34:	2240      	movs	r2, #64	; 0x40
 800df36:	21ff      	movs	r1, #255	; 0xff
 800df38:	4618      	mov	r0, r3
 800df3a:	f012 fe5d 	bl	8020bf8 <memset>
		for(auto message : messages){
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3308      	adds	r3, #8
 800df42:	61bb      	str	r3, [r7, #24]
 800df44:	69b8      	ldr	r0, [r7, #24]
 800df46:	f002 f907 	bl	8010158 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800df4a:	4603      	mov	r3, r0
 800df4c:	613b      	str	r3, [r7, #16]
 800df4e:	69b8      	ldr	r0, [r7, #24]
 800df50:	f002 f912 	bl	8010178 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 800df54:	4603      	mov	r3, r0
 800df56:	60fb      	str	r3, [r7, #12]
 800df58:	f107 020c 	add.w	r2, r7, #12
 800df5c:	f107 0310 	add.w	r3, r7, #16
 800df60:	4611      	mov	r1, r2
 800df62:	4618      	mov	r0, r3
 800df64:	f7ff ffa9 	bl	800deba <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800df68:	4603      	mov	r3, r0
 800df6a:	f083 0301 	eor.w	r3, r3, #1
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	2b00      	cmp	r3, #0
 800df72:	d01b      	beq.n	800dfac <_ZN6Stream17send_all_messagesEv+0x8a>
 800df74:	f107 0310 	add.w	r3, r7, #16
 800df78:	4618      	mov	r0, r3
 800df7a:	f7ff ffc6 	bl	800df0a <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>
 800df7e:	4603      	mov	r3, r0
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	617b      	str	r3, [r7, #20]
			message->unparse(&can->TxData[current_position]);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6a1a      	ldr	r2, [r3, #32]
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	3350      	adds	r3, #80	; 0x50
 800df8c:	4413      	add	r3, r2
 800df8e:	4619      	mov	r1, r3
 800df90:	6978      	ldr	r0, [r7, #20]
 800df92:	f7ff fdc1 	bl	800db18 <_ZN13StreamMessage7unparseEPh>
			current_position += message->size;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	69fa      	ldr	r2, [r7, #28]
 800df9c:	4413      	add	r3, r2
 800df9e:	61fb      	str	r3, [r7, #28]
		for(auto message : messages){
 800dfa0:	f107 0310 	add.w	r3, r7, #16
 800dfa4:	4618      	mov	r0, r3
 800dfa6:	f7ff ffa0 	bl	800deea <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>
 800dfaa:	e7d5      	b.n	800df58 <_ZN6Stream17send_all_messagesEv+0x36>
		}
		can->send_message(id, this->size);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	6a18      	ldr	r0, [r3, #32]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	7e1b      	ldrb	r3, [r3, #24]
 800dfb4:	b299      	uxth	r1, r3
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	695b      	ldr	r3, [r3, #20]
 800dfba:	461a      	mov	r2, r3
 800dfbc:	f7f6 fed8 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800dfc0:	bf00      	nop
 800dfc2:	3720      	adds	r7, #32
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>:

	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
		messages.push_back(message);
		if(state == FREE){
			state = OCCUPIED;
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b082      	sub	sp, #8
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f7ff ffa4 	bl	800df22 <_ZN6Stream17send_all_messagesEv>
 800dfda:	bf00      	nop
 800dfdc:	3708      	adds	r7, #8
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <_ZN6Stream11add_messageEmP13StreamMessaget>:
	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
 800dfe2:	b590      	push	{r4, r7, lr}
 800dfe4:	b089      	sub	sp, #36	; 0x24
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	60f8      	str	r0, [r7, #12]
 800dfea:	60b9      	str	r1, [r7, #8]
 800dfec:	607a      	str	r2, [r7, #4]
 800dfee:	807b      	strh	r3, [r7, #2]
		messages.push_back(message);
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	3308      	adds	r3, #8
 800dff4:	1d3a      	adds	r2, r7, #4
 800dff6:	4611      	mov	r1, r2
 800dff8:	4618      	mov	r0, r3
 800dffa:	f002 f8ce 	bl	801019a <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>
		if(state == FREE){
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d117      	bne.n	800e036 <_ZN6Stream11add_messageEmP13StreamMessaget+0x54>
			state = OCCUPIED;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2201      	movs	r2, #1
 800e00a:	701a      	strb	r2, [r3, #0]
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800e00c:	68fb      	ldr	r3, [r7, #12]
 800e00e:	69dc      	ldr	r4, [r3, #28]
 800e010:	68fa      	ldr	r2, [r7, #12]
 800e012:	f107 0310 	add.w	r3, r7, #16
 800e016:	4611      	mov	r1, r2
 800e018:	4618      	mov	r0, r3
 800e01a:	f002 f8e3 	bl	80101e4 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>
 800e01e:	f107 0310 	add.w	r3, r7, #16
 800e022:	68ba      	ldr	r2, [r7, #8]
 800e024:	4619      	mov	r1, r3
 800e026:	4620      	mov	r0, r4
 800e028:	f7ff fc92 	bl	800d950 <_ZN5Timer10execute_atESt8functionIFvvEEm>
 800e02c:	f107 0310 	add.w	r3, r7, #16
 800e030:	4618      	mov	r0, r3
 800e032:	f7ff fb6f 	bl	800d714 <_ZNSt8functionIFvvEED1Ev>
		};
		this -> frequency = frequency;
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	68ba      	ldr	r2, [r7, #8]
 800e03a:	605a      	str	r2, [r3, #4]
		send_ok_response(size, response_code);
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	695b      	ldr	r3, [r3, #20]
 800e040:	b2db      	uxtb	r3, r3
 800e042:	887a      	ldrh	r2, [r7, #2]
 800e044:	4619      	mov	r1, r3
 800e046:	68f8      	ldr	r0, [r7, #12]
 800e048:	f7ff feb0 	bl	800ddac <_ZN6Stream16send_ok_responseEht>
 		size += message->size;
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	695a      	ldr	r2, [r3, #20]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	441a      	add	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	615a      	str	r2, [r3, #20]
	}
 800e05a:	bf00      	nop
 800e05c:	3724      	adds	r7, #36	; 0x24
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd90      	pop	{r4, r7, pc}

0800e062 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e062:	b480      	push	{r7}
 800e064:	b083      	sub	sp, #12
 800e066:	af00      	add	r7, sp, #0
 800e068:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	791b      	ldrb	r3, [r3, #4]
 800e06e:	4618      	mov	r0, r3
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e078:	4770      	bx	lr

0800e07a <_ZNRSt8optionalIP13StreamMessageE5valueEv>:
      value()&
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b082      	sub	sp, #8
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f7ff ffed 	bl	800e062 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e088:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d004      	beq.n	800e098 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x1e>
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f002 f8de 	bl	8010250 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e094:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e096:	e001      	b.n	800e09c <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x22>
 800e098:	f7f6 fca7 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e09c:	4618      	mov	r0, r3
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}

0800e0a4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e0a4:	b480      	push	{r7}
 800e0a6:	b083      	sub	sp, #12
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	4618      	mov	r0, r3
 800e0b0:	370c      	adds	r7, #12
 800e0b2:	46bd      	mov	sp, r7
 800e0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b8:	4770      	bx	lr

0800e0ba <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e0ba:	b590      	push	{r4, r7, lr}
 800e0bc:	b083      	sub	sp, #12
 800e0be:	af00      	add	r7, sp, #0
 800e0c0:	6078      	str	r0, [r7, #4]
 800e0c2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff ffed 	bl	800e0a4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	681c      	ldr	r4, [r3, #0]
 800e0ce:	6838      	ldr	r0, [r7, #0]
 800e0d0:	f7ff ffe8 	bl	800e0a4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	429c      	cmp	r4, r3
 800e0da:	bf0c      	ite	eq
 800e0dc:	2301      	moveq	r3, #1
 800e0de:	2300      	movne	r3, #0
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	370c      	adds	r7, #12
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd90      	pop	{r4, r7, pc}

0800e0ea <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e0ea:	b480      	push	{r7}
 800e0ec:	b083      	sub	sp, #12
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	1d1a      	adds	r2, r3, #4
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	601a      	str	r2, [r3, #0]
	return *this;
 800e0fc:	687b      	ldr	r3, [r7, #4]
      }
 800e0fe:	4618      	mov	r0, r3
 800e100:	370c      	adds	r7, #12
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr

0800e10a <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e10a:	b480      	push	{r7}
 800e10c:	b083      	sub	sp, #12
 800e10e:	af00      	add	r7, sp, #0
 800e110:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	681b      	ldr	r3, [r3, #0]
 800e116:	4618      	mov	r0, r3
 800e118:	370c      	adds	r7, #12
 800e11a:	46bd      	mov	sp, r7
 800e11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e120:	4770      	bx	lr
	...

0800e124 <_ZN6Stream10add_streamEjP3Pint>:

	static bool add_stream(unsigned int frequency, Pin* pin, uint16_t response_code) {
 800e124:	b580      	push	{r7, lr}
 800e126:	b08c      	sub	sp, #48	; 0x30
 800e128:	af00      	add	r7, sp, #0
 800e12a:	60f8      	str	r0, [r7, #12]
 800e12c:	60b9      	str	r1, [r7, #8]
 800e12e:	4613      	mov	r3, r2
 800e130:	80fb      	strh	r3, [r7, #6]
		optional<StreamMessage*> message_optional = StreamMessage::FromPin(pin);
 800e132:	f107 031c 	add.w	r3, r7, #28
 800e136:	68b9      	ldr	r1, [r7, #8]
 800e138:	4618      	mov	r0, r3
 800e13a:	f7ff fd95 	bl	800dc68 <_ZN13StreamMessage7FromPinEP3Pin>
		if(message_optional){
 800e13e:	f107 031c 	add.w	r3, r7, #28
 800e142:	4618      	mov	r0, r3
 800e144:	f002 f878 	bl	8010238 <_ZNKSt8optionalIP13StreamMessageEcvbEv>
 800e148:	4603      	mov	r3, r0
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d041      	beq.n	800e1d2 <_ZN6Stream10add_streamEjP3Pint+0xae>
			StreamMessage* message = message_optional.value();
 800e14e:	f107 031c 	add.w	r3, r7, #28
 800e152:	4618      	mov	r0, r3
 800e154:	f7ff ff91 	bl	800e07a <_ZNRSt8optionalIP13StreamMessageE5valueEv>
 800e158:	4603      	mov	r3, r0
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(auto s : streams){
 800e15e:	4b1f      	ldr	r3, [pc, #124]	; (800e1dc <_ZN6Stream10add_streamEjP3Pint+0xb8>)
 800e160:	62bb      	str	r3, [r7, #40]	; 0x28
 800e162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e164:	f002 f881 	bl	801026a <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800e168:	4603      	mov	r3, r0
 800e16a:	61bb      	str	r3, [r7, #24]
 800e16c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e16e:	f002 f88c 	bl	801028a <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800e172:	4603      	mov	r3, r0
 800e174:	617b      	str	r3, [r7, #20]
 800e176:	f107 0214 	add.w	r2, r7, #20
 800e17a:	f107 0318 	add.w	r3, r7, #24
 800e17e:	4611      	mov	r1, r2
 800e180:	4618      	mov	r0, r3
 800e182:	f7ff ff9a 	bl	800e0ba <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e186:	4603      	mov	r3, r0
 800e188:	f083 0301 	eor.w	r3, r3, #1
 800e18c:	b2db      	uxtb	r3, r3
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d01f      	beq.n	800e1d2 <_ZN6Stream10add_streamEjP3Pint+0xae>
 800e192:	f107 0318 	add.w	r3, r7, #24
 800e196:	4618      	mov	r0, r3
 800e198:	f7ff ffb7 	bl	800e10a <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800e19c:	4603      	mov	r3, r0
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	627b      	str	r3, [r7, #36]	; 0x24
				if(s->is_available(frequency, message->size)){
 800e1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1a4:	685b      	ldr	r3, [r3, #4]
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	68f9      	ldr	r1, [r7, #12]
 800e1aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ac:	f7ff fdc8 	bl	800dd40 <_ZN6Stream12is_availableEjj>
 800e1b0:	4603      	mov	r3, r0
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d007      	beq.n	800e1c6 <_ZN6Stream10add_streamEjP3Pint+0xa2>
					s->add_message(frequency, message, response_code);
 800e1b6:	88fb      	ldrh	r3, [r7, #6]
 800e1b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e1ba:	68f9      	ldr	r1, [r7, #12]
 800e1bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1be:	f7ff ff10 	bl	800dfe2 <_ZN6Stream11add_messageEmP13StreamMessaget>
					return true;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e006      	b.n	800e1d4 <_ZN6Stream10add_streamEjP3Pint+0xb0>
			for(auto s : streams){
 800e1c6:	f107 0318 	add.w	r3, r7, #24
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7ff ff8d 	bl	800e0ea <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800e1d0:	e7d1      	b.n	800e176 <_ZN6Stream10add_streamEjP3Pint+0x52>
				}
			}
		}
		return false;
 800e1d2:	2300      	movs	r3, #0
	}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3730      	adds	r7, #48	; 0x30
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	2400017c 	.word	0x2400017c

0800e1e0 <_Z5startv>:
Stream stream1(&timer_14, &main_can);
Stream stream2(&timer_15, &main_can);
Stream stream3(&timer_16, &main_can);
Stream stream4(&timer_17, &main_can);

void start() {
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	af00      	add	r7, sp, #0
	InputCapture::start_all_input_captures();
 800e1e4:	f7fb fa14 	bl	8009610 <_ZN12InputCapture24start_all_input_capturesEv>
	AnalogOut::start_all_analog_outs();
 800e1e8:	f7f5 f8cc 	bl	8003384 <_ZN9AnalogOut21start_all_analog_outsEv>
	AnalogIn::start_all_analog_ins();
 800e1ec:	f7f2 fa56 	bl	800069c <_ZN8AnalogIn20start_all_analog_insEv>
	Can::start_all_cans();
 800e1f0:	f7f6 fd22 	bl	8004c38 <_ZN3Can14start_all_cansEv>
}
 800e1f4:	bf00      	nop
 800e1f6:	bd80      	pop	{r7, pc}

0800e1f8 <HAL_TIM_IC_CaptureCallback>:

// INTERRUPTIONS
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
 800e1f8:	b580      	push	{r7, lr}
 800e1fa:	b082      	sub	sp, #8
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
	InputCapture::interrupt_of_all_input_captures(timer);
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f7fb fa35 	bl	8009670 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>
}
 800e206:	bf00      	nop
 800e208:	3708      	adds	r7, #8
 800e20a:	46bd      	mov	sp, r7
 800e20c:	bd80      	pop	{r7, pc}

0800e20e <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800e20e:	b580      	push	{r7, lr}
 800e210:	b082      	sub	sp, #8
 800e212:	af00      	add	r7, sp, #0
 800e214:	6078      	str	r0, [r7, #4]
	AnalogIn::interrupt_all_analog_ins();
 800e216:	f7f2 fa71 	bl	80006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>
}
 800e21a:	bf00      	nop
 800e21c:	3708      	adds	r7, #8
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd80      	pop	{r7, pc}

0800e222 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 800e222:	b580      	push	{r7, lr}
 800e224:	b082      	sub	sp, #8
 800e226:	af00      	add	r7, sp, #0
 800e228:	6078      	str	r0, [r7, #4]
	Timer::interrupt_all_timers(tim);
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f7ff fbfc 	bl	800da28 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}

0800e238 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800e242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e246:	4805      	ldr	r0, [pc, #20]	; (800e25c <HAL_FDCAN_RxFifo0Callback+0x24>)
 800e248:	f00c fdf3 	bl	801ae32 <HAL_GPIO_TogglePin>
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
 800e24c:	6839      	ldr	r1, [r7, #0]
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f7f6 fec4 	bl	8004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}
 800e25c:	58021800 	.word	0x58021800

0800e260 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	791b      	ldrb	r3, [r3, #4]
 800e26c:	4618      	mov	r0, r3
 800e26e:	370c      	adds	r7, #12
 800e270:	46bd      	mov	sp, r7
 800e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e276:	4770      	bx	lr

0800e278 <_ZNRSt8optionalIP3PinE5valueEv>:
      value()&
 800e278:	b580      	push	{r7, lr}
 800e27a:	b082      	sub	sp, #8
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f7ff ffed 	bl	800e260 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e286:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d004      	beq.n	800e296 <_ZNRSt8optionalIP3PinE5valueEv+0x1e>
 800e28c:	6878      	ldr	r0, [r7, #4]
 800e28e:	f002 f8ed 	bl	801046c <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e292:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e294:	e001      	b.n	800e29a <_ZNRSt8optionalIP3PinE5valueEv+0x22>
 800e296:	f7f6 fba8 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e29a:	4618      	mov	r0, r3
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
	...

0800e2a4 <_Z23read_analog_in_callbackv>:

// MESSAGE CALLBACKS

void read_analog_in_callback(){
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	b084      	sub	sp, #16
 800e2a8:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e2aa:	4b14      	ldr	r3, [pc, #80]	; (800e2fc <_Z23read_analog_in_callbackv+0x58>)
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	b29a      	uxth	r2, r3
 800e2b0:	1d3b      	adds	r3, r7, #4
 800e2b2:	4611      	mov	r1, r2
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	f7fe f9b1 	bl	800c61c <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e2ba:	1d3b      	adds	r3, r7, #4
 800e2bc:	4618      	mov	r0, r3
 800e2be:	f002 f8c9 	bl	8010454 <_ZNKSt8optionalIP3PinEcvbEv>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d016      	beq.n	800e2f6 <_Z23read_analog_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e2c8:	1d3b      	adds	r3, r7, #4
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	f7ff ffd4 	bl	800e278 <_ZNRSt8optionalIP3PinE5valueEv>
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	603b      	str	r3, [r7, #0]
		AnalogIn* in = AnalogIn::analog_in_from_pin[pin];
 800e2d6:	463b      	mov	r3, r7
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4809      	ldr	r0, [pc, #36]	; (800e300 <_Z23read_analog_in_callbackv+0x5c>)
 800e2dc:	f7f2 fb40 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_ANALOG_IN_REPLY, (uint8_t*) &in->voltage, sizeof(float));
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f103 0214 	add.w	r2, r3, #20
 800e2ec:	2304      	movs	r3, #4
 800e2ee:	215d      	movs	r1, #93	; 0x5d
 800e2f0:	4804      	ldr	r0, [pc, #16]	; (800e304 <_Z23read_analog_in_callbackv+0x60>)
 800e2f2:	f7f6 fce5 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e2f6:	3710      	adds	r7, #16
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}
 800e2fc:	24000a24 	.word	0x24000a24
 800e300:	240000bc 	.word	0x240000bc
 800e304:	24000954 	.word	0x24000954

0800e308 <_Z24read_digital_in_callbackv>:

void read_digital_in_callback(){
 800e308:	b580      	push	{r7, lr}
 800e30a:	b084      	sub	sp, #16
 800e30c:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e30e:	4b14      	ldr	r3, [pc, #80]	; (800e360 <_Z24read_digital_in_callbackv+0x58>)
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	b29a      	uxth	r2, r3
 800e314:	1d3b      	adds	r3, r7, #4
 800e316:	4611      	mov	r1, r2
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe f97f 	bl	800c61c <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e31e:	1d3b      	adds	r3, r7, #4
 800e320:	4618      	mov	r0, r3
 800e322:	f002 f897 	bl	8010454 <_ZNKSt8optionalIP3PinEcvbEv>
 800e326:	4603      	mov	r3, r0
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d016      	beq.n	800e35a <_Z24read_digital_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e32c:	1d3b      	adds	r3, r7, #4
 800e32e:	4618      	mov	r0, r3
 800e330:	f7ff ffa2 	bl	800e278 <_ZNRSt8optionalIP3PinE5valueEv>
 800e334:	4603      	mov	r3, r0
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	603b      	str	r3, [r7, #0]
		DigitalIn* in = DigitalIn::pin_to_digital_in[pin];
 800e33a:	463b      	mov	r3, r7
 800e33c:	4619      	mov	r1, r3
 800e33e:	4809      	ldr	r0, [pc, #36]	; (800e364 <_Z24read_digital_in_callbackv+0x5c>)
 800e340:	f7f8 f9cc 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e344:	4603      	mov	r3, r0
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_DIGITAL_IN_REPLY, (uint8_t*) &in->state, sizeof(uint8_t));
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f103 0208 	add.w	r2, r3, #8
 800e350:	2301      	movs	r3, #1
 800e352:	215e      	movs	r1, #94	; 0x5e
 800e354:	4804      	ldr	r0, [pc, #16]	; (800e368 <_Z24read_digital_in_callbackv+0x60>)
 800e356:	f7f6 fcb3 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e35a:	3710      	adds	r7, #16
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}
 800e360:	24000a24 	.word	0x24000a24
 800e364:	2400011c 	.word	0x2400011c
 800e368:	24000954 	.word	0x24000954

0800e36c <_Z27read_input_capture_callbackv>:

int MSG_INDEX = 0;
void read_input_capture_callback(){
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b084      	sub	sp, #16
 800e370:	af00      	add	r7, sp, #0
	MSG_INDEX += 1;
 800e372:	4b18      	ldr	r3, [pc, #96]	; (800e3d4 <_Z27read_input_capture_callbackv+0x68>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	3301      	adds	r3, #1
 800e378:	4a16      	ldr	r2, [pc, #88]	; (800e3d4 <_Z27read_input_capture_callbackv+0x68>)
 800e37a:	6013      	str	r3, [r2, #0]
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e37c:	4b16      	ldr	r3, [pc, #88]	; (800e3d8 <_Z27read_input_capture_callbackv+0x6c>)
 800e37e:	781b      	ldrb	r3, [r3, #0]
 800e380:	b29a      	uxth	r2, r3
 800e382:	1d3b      	adds	r3, r7, #4
 800e384:	4611      	mov	r1, r2
 800e386:	4618      	mov	r0, r3
 800e388:	f7fe f948 	bl	800c61c <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e38c:	1d3b      	adds	r3, r7, #4
 800e38e:	4618      	mov	r0, r3
 800e390:	f002 f860 	bl	8010454 <_ZNKSt8optionalIP3PinEcvbEv>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d019      	beq.n	800e3ce <_Z27read_input_capture_callbackv+0x62>
		Pin* pin = pin_optional.value();
 800e39a:	1d3b      	adds	r3, r7, #4
 800e39c:	4618      	mov	r0, r3
 800e39e:	f7ff ff6b 	bl	800e278 <_ZNRSt8optionalIP3PinE5valueEv>
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	603b      	str	r3, [r7, #0]
		InputCapture* in = InputCapture::pin_to_input_capture[pin];
 800e3a8:	463b      	mov	r3, r7
 800e3aa:	4619      	mov	r1, r3
 800e3ac:	480b      	ldr	r0, [pc, #44]	; (800e3dc <_Z27read_input_capture_callbackv+0x70>)
 800e3ae:	f7fb fa73 	bl	8009898 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	681b      	ldr	r3, [r3, #0]
 800e3b6:	60fb      	str	r3, [r7, #12]
		in->get_duty();
 800e3b8:	68f8      	ldr	r0, [r7, #12]
 800e3ba:	f7fb f9ab 	bl	8009714 <_ZN12InputCapture8get_dutyEv>
		main_can.send_message(ID_READ_INPUT_CAPTURE_REPLY, (uint8_t*) &in->duty, sizeof(float));
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 800e3c4:	2304      	movs	r3, #4
 800e3c6:	215c      	movs	r1, #92	; 0x5c
 800e3c8:	4805      	ldr	r0, [pc, #20]	; (800e3e0 <_Z27read_input_capture_callbackv+0x74>)
 800e3ca:	f7f6 fc79 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}
 800e3d4:	24000bb4 	.word	0x24000bb4
 800e3d8:	24000a24 	.word	0x24000a24
 800e3dc:	24000164 	.word	0x24000164
 800e3e0:	24000954 	.word	0x24000954

0800e3e4 <_Z29stream_input_capture_callbackv>:
		if(pin->mode == INPUT_CAPTURE)
			id = ID_STREAM_INPUT_CAPTURE_REPLY;
	}
}

void stream_input_capture_callback(){
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b084      	sub	sp, #16
 800e3e8:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e3ea:	4b10      	ldr	r3, [pc, #64]	; (800e42c <_Z29stream_input_capture_callbackv+0x48>)
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	b29a      	uxth	r2, r3
 800e3f0:	1d3b      	adds	r3, r7, #4
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fe f911 	bl	800c61c <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e3fa:	1d3b      	adds	r3, r7, #4
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	f002 f829 	bl	8010454 <_ZNKSt8optionalIP3PinEcvbEv>
 800e402:	4603      	mov	r3, r0
 800e404:	2b00      	cmp	r3, #0
 800e406:	d00d      	beq.n	800e424 <_Z29stream_input_capture_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e408:	1d3b      	adds	r3, r7, #4
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7ff ff34 	bl	800e278 <_ZNRSt8optionalIP3PinE5valueEv>
 800e410:	4603      	mov	r3, r0
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_INPUT_CAPTURE_REPLY);
 800e416:	4b06      	ldr	r3, [pc, #24]	; (800e430 <_Z29stream_input_capture_callbackv+0x4c>)
 800e418:	881b      	ldrh	r3, [r3, #0]
 800e41a:	225f      	movs	r2, #95	; 0x5f
 800e41c:	68f9      	ldr	r1, [r7, #12]
 800e41e:	4618      	mov	r0, r3
 800e420:	f7ff fe80 	bl	800e124 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e424:	bf00      	nop
 800e426:	3710      	adds	r7, #16
 800e428:	46bd      	mov	sp, r7
 800e42a:	bd80      	pop	{r7, pc}
 800e42c:	24000a2c 	.word	0x24000a2c
 800e430:	24000a2e 	.word	0x24000a2e

0800e434 <_Z25strean_analog_in_callbackv>:

void strean_analog_in_callback(){
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e43a:	4b10      	ldr	r3, [pc, #64]	; (800e47c <_Z25strean_analog_in_callbackv+0x48>)
 800e43c:	781b      	ldrb	r3, [r3, #0]
 800e43e:	b29a      	uxth	r2, r3
 800e440:	1d3b      	adds	r3, r7, #4
 800e442:	4611      	mov	r1, r2
 800e444:	4618      	mov	r0, r3
 800e446:	f7fe f8e9 	bl	800c61c <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e44a:	1d3b      	adds	r3, r7, #4
 800e44c:	4618      	mov	r0, r3
 800e44e:	f002 f801 	bl	8010454 <_ZNKSt8optionalIP3PinEcvbEv>
 800e452:	4603      	mov	r3, r0
 800e454:	2b00      	cmp	r3, #0
 800e456:	d00d      	beq.n	800e474 <_Z25strean_analog_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e458:	1d3b      	adds	r3, r7, #4
 800e45a:	4618      	mov	r0, r3
 800e45c:	f7ff ff0c 	bl	800e278 <_ZNRSt8optionalIP3PinE5valueEv>
 800e460:	4603      	mov	r3, r0
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_ANALOG_IN_REPLY);
 800e466:	4b06      	ldr	r3, [pc, #24]	; (800e480 <_Z25strean_analog_in_callbackv+0x4c>)
 800e468:	881b      	ldrh	r3, [r3, #0]
 800e46a:	2260      	movs	r2, #96	; 0x60
 800e46c:	68f9      	ldr	r1, [r7, #12]
 800e46e:	4618      	mov	r0, r3
 800e470:	f7ff fe58 	bl	800e124 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e474:	bf00      	nop
 800e476:	3710      	adds	r7, #16
 800e478:	46bd      	mov	sp, r7
 800e47a:	bd80      	pop	{r7, pc}
 800e47c:	24000a2c 	.word	0x24000a2c
 800e480:	24000a2e 	.word	0x24000a2e

0800e484 <_Z26stream_digital_in_callbackv>:

void stream_digital_in_callback(){
 800e484:	b580      	push	{r7, lr}
 800e486:	b084      	sub	sp, #16
 800e488:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e48a:	4b10      	ldr	r3, [pc, #64]	; (800e4cc <_Z26stream_digital_in_callbackv+0x48>)
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	b29a      	uxth	r2, r3
 800e490:	1d3b      	adds	r3, r7, #4
 800e492:	4611      	mov	r1, r2
 800e494:	4618      	mov	r0, r3
 800e496:	f7fe f8c1 	bl	800c61c <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e49a:	1d3b      	adds	r3, r7, #4
 800e49c:	4618      	mov	r0, r3
 800e49e:	f001 ffd9 	bl	8010454 <_ZNKSt8optionalIP3PinEcvbEv>
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00d      	beq.n	800e4c4 <_Z26stream_digital_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e4a8:	1d3b      	adds	r3, r7, #4
 800e4aa:	4618      	mov	r0, r3
 800e4ac:	f7ff fee4 	bl	800e278 <_ZNRSt8optionalIP3PinE5valueEv>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_DIGITAL_IN_REPLY);
 800e4b6:	4b06      	ldr	r3, [pc, #24]	; (800e4d0 <_Z26stream_digital_in_callbackv+0x4c>)
 800e4b8:	881b      	ldrh	r3, [r3, #0]
 800e4ba:	2261      	movs	r2, #97	; 0x61
 800e4bc:	68f9      	ldr	r1, [r7, #12]
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7ff fe30 	bl	800e124 <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e4c4:	bf00      	nop
 800e4c6:	3710      	adds	r7, #16
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	bd80      	pop	{r7, pc}
 800e4cc:	24000a2c 	.word	0x24000a2c
 800e4d0:	24000a2e 	.word	0x24000a2e

0800e4d4 <_Z19write_once_callbackv>:


void write_once_callback(){
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(write_once_pin);
 800e4da:	4b2f      	ldr	r3, [pc, #188]	; (800e598 <_Z19write_once_callbackv+0xc4>)
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	b29a      	uxth	r2, r3
 800e4e0:	f107 0308 	add.w	r3, r7, #8
 800e4e4:	4611      	mov	r1, r2
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	f7fe f898 	bl	800c61c <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e4ec:	f107 0308 	add.w	r3, r7, #8
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	f001 ffaf 	bl	8010454 <_ZNKSt8optionalIP3PinEcvbEv>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d04a      	beq.n	800e592 <_Z19write_once_callbackv+0xbe>
		Pin* pin = pin_optional.value();
 800e4fc:	f107 0308 	add.w	r3, r7, #8
 800e500:	4618      	mov	r0, r3
 800e502:	f7ff feb9 	bl	800e278 <_ZNRSt8optionalIP3PinE5valueEv>
 800e506:	4603      	mov	r3, r0
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	607b      	str	r3, [r7, #4]

		if(pin->mode == DIGITAL_OUTPUT && DigitalOut::pin_to_digital_out.contains(pin)) {
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	799b      	ldrb	r3, [r3, #6]
 800e510:	2b04      	cmp	r3, #4
 800e512:	d109      	bne.n	800e528 <_Z19write_once_callbackv+0x54>
 800e514:	1d3b      	adds	r3, r7, #4
 800e516:	4619      	mov	r1, r3
 800e518:	4820      	ldr	r0, [pc, #128]	; (800e59c <_Z19write_once_callbackv+0xc8>)
 800e51a:	f001 ffb4 	bl	8010486 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e51e:	4603      	mov	r3, r0
 800e520:	2b00      	cmp	r3, #0
 800e522:	d001      	beq.n	800e528 <_Z19write_once_callbackv+0x54>
 800e524:	2301      	movs	r3, #1
 800e526:	e000      	b.n	800e52a <_Z19write_once_callbackv+0x56>
 800e528:	2300      	movs	r3, #0
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d00f      	beq.n	800e54e <_Z19write_once_callbackv+0x7a>
			DigitalOut* out = DigitalOut::pin_to_digital_out[pin];
 800e52e:	1d3b      	adds	r3, r7, #4
 800e530:	4619      	mov	r1, r3
 800e532:	481a      	ldr	r0, [pc, #104]	; (800e59c <_Z19write_once_callbackv+0xc8>)
 800e534:	f7f9 fc98 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e538:	4603      	mov	r3, r0
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	613b      	str	r3, [r7, #16]
			out->set_to((DigitalOut::DigitalOutState) write_once_value);
 800e53e:	4b18      	ldr	r3, [pc, #96]	; (800e5a0 <_Z19write_once_callbackv+0xcc>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	b2db      	uxtb	r3, r3
 800e544:	4619      	mov	r1, r3
 800e546:	6938      	ldr	r0, [r7, #16]
 800e548:	f7f9 fbdc 	bl	8007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>
			return;
 800e54c:	e021      	b.n	800e592 <_Z19write_once_callbackv+0xbe>
		}

		if(pin->mode == ANALOG_OUTPUT && AnalogOut::pin_to_analog_out.contains(pin)) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	799b      	ldrb	r3, [r3, #6]
 800e552:	2b05      	cmp	r3, #5
 800e554:	d109      	bne.n	800e56a <_Z19write_once_callbackv+0x96>
 800e556:	1d3b      	adds	r3, r7, #4
 800e558:	4619      	mov	r1, r3
 800e55a:	4812      	ldr	r0, [pc, #72]	; (800e5a4 <_Z19write_once_callbackv+0xd0>)
 800e55c:	f001 ffb5 	bl	80104ca <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d001      	beq.n	800e56a <_Z19write_once_callbackv+0x96>
 800e566:	2301      	movs	r3, #1
 800e568:	e000      	b.n	800e56c <_Z19write_once_callbackv+0x98>
 800e56a:	2300      	movs	r3, #0
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d010      	beq.n	800e592 <_Z19write_once_callbackv+0xbe>
			AnalogOut* out = AnalogOut::pin_to_analog_out[pin];
 800e570:	1d3b      	adds	r3, r7, #4
 800e572:	4619      	mov	r1, r3
 800e574:	480b      	ldr	r0, [pc, #44]	; (800e5a4 <_Z19write_once_callbackv+0xd0>)
 800e576:	f7f4 ffaf 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e57a:	4603      	mov	r3, r0
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	617b      	str	r3, [r7, #20]
			out->set_voltage(*((float*) &write_once_value));
 800e580:	4b07      	ldr	r3, [pc, #28]	; (800e5a0 <_Z19write_once_callbackv+0xcc>)
 800e582:	edd3 7a00 	vldr	s15, [r3]
 800e586:	eeb0 0a67 	vmov.f32	s0, s15
 800e58a:	6978      	ldr	r0, [r7, #20]
 800e58c:	f7f4 fe32 	bl	80031f4 <_ZN9AnalogOut11set_voltageEf>
			return;
 800e590:	bf00      	nop
		}
	}
}
 800e592:	3718      	adds	r7, #24
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	24000a25 	.word	0x24000a25
 800e59c:	24000140 	.word	0x24000140
 800e5a0:	24000a28 	.word	0x24000a28
 800e5a4:	240000e0 	.word	0x240000e0

0800e5a8 <_Z22set_precision_callbackv>:

void set_precision_callback() {
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	af00      	add	r7, sp, #0
	if(StreamMessage::set_precision_mode(set_precision_value)){
 800e5ac:	4b0b      	ldr	r3, [pc, #44]	; (800e5dc <_Z22set_precision_callbackv+0x34>)
 800e5ae:	781b      	ldrb	r3, [r3, #0]
 800e5b0:	4618      	mov	r0, r3
 800e5b2:	f7ff fbaf 	bl	800dd14 <_ZN13StreamMessage18set_precision_modeEh>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d009      	beq.n	800e5d0 <_Z22set_precision_callbackv+0x28>
		main_can.TxData[0] = 0;
 800e5bc:	4b08      	ldr	r3, [pc, #32]	; (800e5e0 <_Z22set_precision_callbackv+0x38>)
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		main_can.send_message(ID_SET_PRECISION,1);
 800e5c4:	2201      	movs	r2, #1
 800e5c6:	2159      	movs	r1, #89	; 0x59
 800e5c8:	4805      	ldr	r0, [pc, #20]	; (800e5e0 <_Z22set_precision_callbackv+0x38>)
 800e5ca:	f7f6 fbd1 	bl	8004d70 <_ZN3Can12send_messageEtm>
		return;
 800e5ce:	e004      	b.n	800e5da <_Z22set_precision_callbackv+0x32>
	}
	main_can.send_error_message(ID_INFO_MESSAGE, "Error: cannot change precision");
 800e5d0:	4a04      	ldr	r2, [pc, #16]	; (800e5e4 <_Z22set_precision_callbackv+0x3c>)
 800e5d2:	215b      	movs	r1, #91	; 0x5b
 800e5d4:	4802      	ldr	r0, [pc, #8]	; (800e5e0 <_Z22set_precision_callbackv+0x38>)
 800e5d6:	f7f6 fc0e 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e5da:	bd80      	pop	{r7, pc}
 800e5dc:	24000a30 	.word	0x24000a30
 800e5e0:	24000954 	.word	0x24000954
 800e5e4:	0802101c 	.word	0x0802101c

0800e5e8 <_Z22cancel_stream_callbackv>:

void cancel_stream_callback(){
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800e5ec:	f009 f807 	bl	80175fe <HAL_NVIC_SystemReset>
}
 800e5f0:	bf00      	nop
 800e5f2:	bd80      	pop	{r7, pc}

0800e5f4 <_ZZN8TUDTests5setupEvENKUlvE_clEv>:

	static void setup(){
		start();

		// ANALOG OUT
		timer_7.execute_every([](){
 800e5f4:	b480      	push	{r7}
 800e5f6:	b083      	sub	sp, #12
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
//			for(auto analog_out : AnalogOut::all_analog_outs)
//				analog_out->set_voltage(sin(sin_index / 1000.0 * 3.1415) * 1.65 + 1.65);
//			sin_index ++;
			//main_can.send_ok_message();
		}, 1000, Timer::MICROSEONDS);
 800e5fc:	bf00      	nop
 800e5fe:	370c      	adds	r7, #12
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr

0800e608 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>:

		// GPIO IN
		timer_13.execute_every([](){
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
			for(auto in : DigitalIn::all_digital_ins)
 800e610:	4b17      	ldr	r3, [pc, #92]	; (800e670 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x68>)
 800e612:	617b      	str	r3, [r7, #20]
 800e614:	6978      	ldr	r0, [r7, #20]
 800e616:	f7f8 fdaa 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 800e61a:	4603      	mov	r3, r0
 800e61c:	60fb      	str	r3, [r7, #12]
 800e61e:	6978      	ldr	r0, [r7, #20]
 800e620:	f7f8 fa8a 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 800e624:	4603      	mov	r3, r0
 800e626:	60bb      	str	r3, [r7, #8]
 800e628:	f107 0208 	add.w	r2, r7, #8
 800e62c:	f107 030c 	add.w	r3, r7, #12
 800e630:	4611      	mov	r1, r2
 800e632:	4618      	mov	r0, r3
 800e634:	f000 f81e 	bl	800e674 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e638:	4603      	mov	r3, r0
 800e63a:	f083 0301 	eor.w	r3, r3, #1
 800e63e:	b2db      	uxtb	r3, r3
 800e640:	2b00      	cmp	r3, #0
 800e642:	d010      	beq.n	800e666 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x5e>
 800e644:	f107 030c 	add.w	r3, r7, #12
 800e648:	4618      	mov	r0, r3
 800e64a:	f7f8 fe1a 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 800e64e:	4603      	mov	r3, r0
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	613b      	str	r3, [r7, #16]
				in->get_value();
 800e654:	6938      	ldr	r0, [r7, #16]
 800e656:	f7f7 ffa7 	bl	80065a8 <_ZN9DigitalIn9get_valueEv>
			for(auto in : DigitalIn::all_digital_ins)
 800e65a:	f107 030c 	add.w	r3, r7, #12
 800e65e:	4618      	mov	r0, r3
 800e660:	f000 f820 	bl	800e6a4 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>
 800e664:	e7e0      	b.n	800e628 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x20>
		}, 1000, Timer::MICROSEONDS);
 800e666:	bf00      	nop
 800e668:	3718      	adds	r7, #24
 800e66a:	46bd      	mov	sp, r7
 800e66c:	bd80      	pop	{r7, pc}
 800e66e:	bf00      	nop
 800e670:	24000110 	.word	0x24000110

0800e674 <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e674:	b590      	push	{r4, r7, lr}
 800e676:	b083      	sub	sp, #12
 800e678:	af00      	add	r7, sp, #0
 800e67a:	6078      	str	r0, [r7, #4]
 800e67c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e67e:	6878      	ldr	r0, [r7, #4]
 800e680:	f7f8 fdc2 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e684:	4603      	mov	r3, r0
 800e686:	681c      	ldr	r4, [r3, #0]
 800e688:	6838      	ldr	r0, [r7, #0]
 800e68a:	f7f8 fdbd 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e68e:	4603      	mov	r3, r0
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	429c      	cmp	r4, r3
 800e694:	bf0c      	ite	eq
 800e696:	2301      	moveq	r3, #1
 800e698:	2300      	movne	r3, #0
 800e69a:	b2db      	uxtb	r3, r3
 800e69c:	4618      	mov	r0, r3
 800e69e:	370c      	adds	r7, #12
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd90      	pop	{r4, r7, pc}

0800e6a4 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e6a4:	b480      	push	{r7}
 800e6a6:	b083      	sub	sp, #12
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	1d1a      	adds	r2, r3, #4
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	601a      	str	r2, [r3, #0]
	return *this;
 800e6b6:	687b      	ldr	r3, [r7, #4]
      }
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	370c      	adds	r7, #12
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6c2:	4770      	bx	lr

0800e6c4 <_ZN8TUDTests5setupEv>:
	static void setup(){
 800e6c4:	b5b0      	push	{r4, r5, r7, lr}
 800e6c6:	b088      	sub	sp, #32
 800e6c8:	af00      	add	r7, sp, #0
		start();
 800e6ca:	f7ff fd89 	bl	800e1e0 <_Z5startv>
		timer_7.execute_every([](){
 800e6ce:	463b      	mov	r3, r7
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f001 ff1c 	bl	8010510 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>
 800e6d8:	4639      	mov	r1, r7
 800e6da:	2302      	movs	r3, #2
 800e6dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6e0:	480e      	ldr	r0, [pc, #56]	; (800e71c <_ZN8TUDTests5setupEv+0x58>)
 800e6e2:	f7ff f913 	bl	800d90c <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e6e6:	463b      	mov	r3, r7
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	f7ff f813 	bl	800d714 <_ZNSt8functionIFvvEED1Ev>
		timer_13.execute_every([](){
 800e6ee:	f107 0310 	add.w	r3, r7, #16
 800e6f2:	4621      	mov	r1, r4
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	f001 ff35 	bl	8010564 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>
 800e6fa:	f107 0110 	add.w	r1, r7, #16
 800e6fe:	2302      	movs	r3, #2
 800e700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e704:	4806      	ldr	r0, [pc, #24]	; (800e720 <_ZN8TUDTests5setupEv+0x5c>)
 800e706:	f7ff f901 	bl	800d90c <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e70a:	f107 0310 	add.w	r3, r7, #16
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff f800 	bl	800d714 <_ZNSt8functionIFvvEED1Ev>
	}
 800e714:	bf00      	nop
 800e716:	3720      	adds	r7, #32
 800e718:	46bd      	mov	sp, r7
 800e71a:	bdb0      	pop	{r4, r5, r7, pc}
 800e71c:	24000894 	.word	0x24000894
 800e720:	240008b4 	.word	0x240008b4

0800e724 <_ZN8TUDTests4loopEv>:

	static void loop() {
 800e724:	b480      	push	{r7}
 800e726:	af00      	add	r7, sp, #0
//		HAL_Delay(2000);
//
//		for(auto base : DigitalOut::all_digital_outs)
//			base->turn_low();
//		HAL_Delay(2000);
	}
 800e728:	bf00      	nop
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr
	...

0800e734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e738:	f006 fd1c 	bl	8015174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e73c:	f000 f83a 	bl	800e7b4 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800e740:	f000 f8b6 	bl	800e8b0 <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e744:	f001 fa72 	bl	800fc2c <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800e748:	f001 fa50 	bl	800fbec <_ZL11MX_DMA_Initv>
  MX_TIM12_Init();
 800e74c:	f000 ff36 	bl	800f5bc <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 800e750:	f001 f8cc 	bl	800f8ec <_ZL13MX_TIM23_Initv>
  MX_TIM1_Init();
 800e754:	f000 f9d6 	bl	800eb04 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800e758:	f000 fa9a 	bl	800ec90 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800e75c:	f000 fb7c 	bl	800ee58 <_ZL12MX_TIM3_Initv>
  MX_TIM24_Init();
 800e760:	f001 f984 	bl	800fa6c <_ZL13MX_TIM24_Initv>
  MX_FDCAN1_Init();
 800e764:	f000 f964 	bl	800ea30 <_ZL14MX_FDCAN1_Initv>
  MX_TIM4_Init();
 800e768:	f000 fc38 	bl	800efdc <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 800e76c:	f000 f8d8 	bl	800e920 <_ZL12MX_ADC1_Initv>
  MX_TIM8_Init();
 800e770:	f000 fe26 	bl	800f3c0 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 800e774:	f000 fda4 	bl	800f2c0 <_ZL12MX_TIM6_Initv>
  MX_TIM5_Init();
 800e778:	f000 fcf2 	bl	800f160 <_ZL12MX_TIM5_Initv>
  MX_TIM7_Init();
 800e77c:	f000 fde0 	bl	800f340 <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 800e780:	f000 ffac 	bl	800f6dc <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 800e784:	f000 ffd2 	bl	800f72c <_ZL13MX_TIM14_Initv>
  MX_TIM15_Init();
 800e788:	f000 fff8 	bl	800f77c <_ZL13MX_TIM15_Initv>
  MX_TIM16_Init();
 800e78c:	f001 f856 	bl	800f83c <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 800e790:	f001 f880 	bl	800f894 <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  TUDTests::setup();
 800e794:	f7ff ff96 	bl	800e6c4 <_ZN8TUDTests5setupEv>

  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);   // main channel
 800e798:	2100      	movs	r1, #0
 800e79a:	4805      	ldr	r0, [pc, #20]	; (800e7b0 <main+0x7c>)
 800e79c:	f010 fb50 	bl	801ee40 <HAL_TIM_IC_Start_IT>
  HAL_TIM_IC_Start(&htim4, TIM_CHANNEL_2);   // indirect channel
 800e7a0:	2104      	movs	r1, #4
 800e7a2:	4803      	ldr	r0, [pc, #12]	; (800e7b0 <main+0x7c>)
 800e7a4:	f010 fa3a 	bl	801ec1c <HAL_TIM_IC_Start>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		TUDTests::loop();
 800e7a8:	f7ff ffbc 	bl	800e724 <_ZN8TUDTests4loopEv>
 800e7ac:	e7fc      	b.n	800e7a8 <main+0x74>
 800e7ae:	bf00      	nop
 800e7b0:	24000e24 	.word	0x24000e24

0800e7b4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b09c      	sub	sp, #112	; 0x70
 800e7b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e7ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7be:	224c      	movs	r2, #76	; 0x4c
 800e7c0:	2100      	movs	r1, #0
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	f012 fa18 	bl	8020bf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e7c8:	1d3b      	adds	r3, r7, #4
 800e7ca:	2220      	movs	r2, #32
 800e7cc:	2100      	movs	r1, #0
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f012 fa12 	bl	8020bf8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800e7d4:	2002      	movs	r0, #2
 800e7d6:	f00c fb47 	bl	801ae68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800e7da:	2300      	movs	r3, #0
 800e7dc:	603b      	str	r3, [r7, #0]
 800e7de:	4b33      	ldr	r3, [pc, #204]	; (800e8ac <_Z18SystemClock_Configv+0xf8>)
 800e7e0:	699b      	ldr	r3, [r3, #24]
 800e7e2:	4a32      	ldr	r2, [pc, #200]	; (800e8ac <_Z18SystemClock_Configv+0xf8>)
 800e7e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800e7e8:	6193      	str	r3, [r2, #24]
 800e7ea:	4b30      	ldr	r3, [pc, #192]	; (800e8ac <_Z18SystemClock_Configv+0xf8>)
 800e7ec:	699b      	ldr	r3, [r3, #24]
 800e7ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e7f2:	603b      	str	r3, [r7, #0]
 800e7f4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800e7f6:	4b2d      	ldr	r3, [pc, #180]	; (800e8ac <_Z18SystemClock_Configv+0xf8>)
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e802:	bf14      	ite	ne
 800e804:	2301      	movne	r3, #1
 800e806:	2300      	moveq	r3, #0
 800e808:	b2db      	uxtb	r3, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d000      	beq.n	800e810 <_Z18SystemClock_Configv+0x5c>
 800e80e:	e7f2      	b.n	800e7f6 <_Z18SystemClock_Configv+0x42>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e810:	2301      	movs	r3, #1
 800e812:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e814:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800e818:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e81a:	2302      	movs	r3, #2
 800e81c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e81e:	2302      	movs	r3, #2
 800e820:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e822:	2304      	movs	r3, #4
 800e824:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800e826:	f240 1313 	movw	r3, #275	; 0x113
 800e82a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800e82c:	2301      	movs	r3, #1
 800e82e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e830:	2304      	movs	r3, #4
 800e832:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e834:	2302      	movs	r3, #2
 800e836:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800e838:	2304      	movs	r3, #4
 800e83a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800e83c:	2300      	movs	r3, #0
 800e83e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800e840:	2300      	movs	r3, #0
 800e842:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e848:	4618      	mov	r0, r3
 800e84a:	f00c fb47 	bl	801aedc <HAL_RCC_OscConfig>
 800e84e:	4603      	mov	r3, r0
 800e850:	2b00      	cmp	r3, #0
 800e852:	bf14      	ite	ne
 800e854:	2301      	movne	r3, #1
 800e856:	2300      	moveq	r3, #0
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 800e85e:	f001 fb21 	bl	800fea4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e862:	233f      	movs	r3, #63	; 0x3f
 800e864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e866:	2303      	movs	r3, #3
 800e868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800e86a:	2300      	movs	r3, #0
 800e86c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800e86e:	2308      	movs	r3, #8
 800e870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800e872:	2340      	movs	r3, #64	; 0x40
 800e874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800e876:	2340      	movs	r3, #64	; 0x40
 800e878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800e87a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e87e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800e880:	2340      	movs	r3, #64	; 0x40
 800e882:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e884:	1d3b      	adds	r3, r7, #4
 800e886:	2103      	movs	r1, #3
 800e888:	4618      	mov	r0, r3
 800e88a:	f00c ff01 	bl	801b690 <HAL_RCC_ClockConfig>
 800e88e:	4603      	mov	r3, r0
 800e890:	2b00      	cmp	r3, #0
 800e892:	bf14      	ite	ne
 800e894:	2301      	movne	r3, #1
 800e896:	2300      	moveq	r3, #0
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d001      	beq.n	800e8a2 <_Z18SystemClock_Configv+0xee>
  {
    Error_Handler();
 800e89e:	f001 fb01 	bl	800fea4 <Error_Handler>
  }
}
 800e8a2:	bf00      	nop
 800e8a4:	3770      	adds	r7, #112	; 0x70
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}
 800e8aa:	bf00      	nop
 800e8ac:	58024800 	.word	0x58024800

0800e8b0 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b0ae      	sub	sp, #184	; 0xb8
 800e8b4:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e8b6:	463b      	mov	r3, r7
 800e8b8:	22b8      	movs	r2, #184	; 0xb8
 800e8ba:	2100      	movs	r1, #0
 800e8bc:	4618      	mov	r0, r3
 800e8be:	f012 f99b 	bl	8020bf8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 800e8c2:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 800e8c6:	f04f 0300 	mov.w	r3, #0
 800e8ca:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800e8ce:	2301      	movs	r3, #1
 800e8d0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 30;
 800e8d2:	231e      	movs	r3, #30
 800e8d4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800e8d6:	2304      	movs	r3, #4
 800e8d8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800e8da:	2304      	movs	r3, #4
 800e8dc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800e8de:	2302      	movs	r3, #2
 800e8e0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800e8e2:	23c0      	movs	r3, #192	; 0xc0
 800e8e4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800e8e6:	2300      	movs	r3, #0
 800e8e8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800e8ee:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e8f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800e8f4:	2300      	movs	r3, #0
 800e8f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e8fa:	463b      	mov	r3, r7
 800e8fc:	4618      	mov	r0, r3
 800e8fe:	f00d fa3d 	bl	801bd7c <HAL_RCCEx_PeriphCLKConfig>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	bf14      	ite	ne
 800e908:	2301      	movne	r3, #1
 800e90a:	2300      	moveq	r3, #0
 800e90c:	b2db      	uxtb	r3, r3
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d001      	beq.n	800e916 <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800e912:	f001 fac7 	bl	800fea4 <Error_Handler>
  }
}
 800e916:	bf00      	nop
 800e918:	37b8      	adds	r7, #184	; 0xb8
 800e91a:	46bd      	mov	sp, r7
 800e91c:	bd80      	pop	{r7, pc}
	...

0800e920 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b08c      	sub	sp, #48	; 0x30
 800e924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800e926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e92a:	2200      	movs	r2, #0
 800e92c:	601a      	str	r2, [r3, #0]
 800e92e:	605a      	str	r2, [r3, #4]
 800e930:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e932:	463b      	mov	r3, r7
 800e934:	2224      	movs	r2, #36	; 0x24
 800e936:	2100      	movs	r1, #0
 800e938:	4618      	mov	r0, r3
 800e93a:	f012 f95d 	bl	8020bf8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800e93e:	4b39      	ldr	r3, [pc, #228]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e940:	4a39      	ldr	r2, [pc, #228]	; (800ea28 <_ZL12MX_ADC1_Initv+0x108>)
 800e942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800e944:	4b37      	ldr	r3, [pc, #220]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e946:	2200      	movs	r2, #0
 800e948:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800e94a:	4b36      	ldr	r3, [pc, #216]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e94c:	2200      	movs	r2, #0
 800e94e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e950:	4b34      	ldr	r3, [pc, #208]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e952:	2200      	movs	r2, #0
 800e954:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800e956:	4b33      	ldr	r3, [pc, #204]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e958:	2208      	movs	r2, #8
 800e95a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e95c:	4b31      	ldr	r3, [pc, #196]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e95e:	2200      	movs	r2, #0
 800e960:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e962:	4b30      	ldr	r3, [pc, #192]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e964:	2200      	movs	r2, #0
 800e966:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800e968:	4b2e      	ldr	r3, [pc, #184]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e96a:	2201      	movs	r2, #1
 800e96c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e96e:	4b2d      	ldr	r3, [pc, #180]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e970:	2200      	movs	r2, #0
 800e972:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800e976:	4b2b      	ldr	r3, [pc, #172]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e978:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800e97c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e97e:	4b29      	ldr	r3, [pc, #164]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e984:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800e986:	4b27      	ldr	r3, [pc, #156]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e988:	2203      	movs	r2, #3
 800e98a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800e98c:	4b25      	ldr	r3, [pc, #148]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e98e:	2200      	movs	r2, #0
 800e990:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800e992:	4b24      	ldr	r3, [pc, #144]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e994:	2200      	movs	r2, #0
 800e996:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800e998:	4b22      	ldr	r3, [pc, #136]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e99a:	2200      	movs	r2, #0
 800e99c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e9a0:	4820      	ldr	r0, [pc, #128]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e9a2:	f006 ff65 	bl	8015870 <HAL_ADC_Init>
 800e9a6:	4603      	mov	r3, r0
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	bf14      	ite	ne
 800e9ac:	2301      	movne	r3, #1
 800e9ae:	2300      	moveq	r3, #0
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d001      	beq.n	800e9ba <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 800e9b6:	f001 fa75 	bl	800fea4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800e9ba:	2300      	movs	r3, #0
 800e9bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800e9be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9c2:	4619      	mov	r1, r3
 800e9c4:	4817      	ldr	r0, [pc, #92]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800e9c6:	f008 fc1f 	bl	8017208 <HAL_ADCEx_MultiModeConfigChannel>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	bf14      	ite	ne
 800e9d0:	2301      	movne	r3, #1
 800e9d2:	2300      	moveq	r3, #0
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d001      	beq.n	800e9de <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 800e9da:	f001 fa63 	bl	800fea4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800e9de:	4b13      	ldr	r3, [pc, #76]	; (800ea2c <_ZL12MX_ADC1_Initv+0x10c>)
 800e9e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e9e2:	2306      	movs	r3, #6
 800e9e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e9ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e9ee:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e9f0:	2304      	movs	r3, #4
 800e9f2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800e9f4:	2300      	movs	r3, #0
 800e9f6:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e9fe:	463b      	mov	r3, r7
 800ea00:	4619      	mov	r1, r3
 800ea02:	4808      	ldr	r0, [pc, #32]	; (800ea24 <_ZL12MX_ADC1_Initv+0x104>)
 800ea04:	f007 fc70 	bl	80162e8 <HAL_ADC_ConfigChannel>
 800ea08:	4603      	mov	r3, r0
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	bf14      	ite	ne
 800ea0e:	2301      	movne	r3, #1
 800ea10:	2300      	moveq	r3, #0
 800ea12:	b2db      	uxtb	r3, r3
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d001      	beq.n	800ea1c <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800ea18:	f001 fa44 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ea1c:	bf00      	nop
 800ea1e:	3730      	adds	r7, #48	; 0x30
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	24000bb8 	.word	0x24000bb8
 800ea28:	40022000 	.word	0x40022000
 800ea2c:	0c900008 	.word	0x0c900008

0800ea30 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800ea34:	4b31      	ldr	r3, [pc, #196]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea36:	4a32      	ldr	r2, [pc, #200]	; (800eb00 <_ZL14MX_FDCAN1_Initv+0xd0>)
 800ea38:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800ea3a:	4b30      	ldr	r3, [pc, #192]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea3c:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ea40:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800ea42:	4b2e      	ldr	r3, [pc, #184]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea44:	2200      	movs	r2, #0
 800ea46:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800ea48:	4b2c      	ldr	r3, [pc, #176]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800ea4e:	4b2b      	ldr	r3, [pc, #172]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea50:	2200      	movs	r2, #0
 800ea52:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800ea54:	4b29      	ldr	r3, [pc, #164]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea56:	2200      	movs	r2, #0
 800ea58:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 800ea5a:	4b28      	ldr	r3, [pc, #160]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea5c:	2203      	movs	r2, #3
 800ea5e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800ea60:	4b26      	ldr	r3, [pc, #152]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea62:	2202      	movs	r2, #2
 800ea64:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 800ea66:	4b25      	ldr	r3, [pc, #148]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea68:	220f      	movs	r2, #15
 800ea6a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 800ea6c:	4b23      	ldr	r3, [pc, #140]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea6e:	2204      	movs	r2, #4
 800ea70:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 3;
 800ea72:	4b22      	ldr	r3, [pc, #136]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea74:	2203      	movs	r2, #3
 800ea76:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800ea78:	4b20      	ldr	r3, [pc, #128]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea7a:	2201      	movs	r2, #1
 800ea7c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 800ea7e:	4b1f      	ldr	r3, [pc, #124]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea80:	2203      	movs	r2, #3
 800ea82:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800ea84:	4b1d      	ldr	r3, [pc, #116]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea86:	2201      	movs	r2, #1
 800ea88:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800ea8a:	4b1c      	ldr	r3, [pc, #112]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800ea90:	4b1a      	ldr	r3, [pc, #104]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea92:	2200      	movs	r2, #0
 800ea94:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800ea96:	4b19      	ldr	r3, [pc, #100]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea98:	2200      	movs	r2, #0
 800ea9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800ea9c:	4b17      	ldr	r3, [pc, #92]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea9e:	2220      	movs	r2, #32
 800eaa0:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800eaa2:	4b16      	ldr	r3, [pc, #88]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaa4:	2212      	movs	r2, #18
 800eaa6:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800eaa8:	4b14      	ldr	r3, [pc, #80]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaaa:	2200      	movs	r2, #0
 800eaac:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800eaae:	4b13      	ldr	r3, [pc, #76]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eab0:	2204      	movs	r2, #4
 800eab2:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800eab4:	4b11      	ldr	r3, [pc, #68]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eab6:	2200      	movs	r2, #0
 800eab8:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800eaba:	4b10      	ldr	r3, [pc, #64]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eabc:	2204      	movs	r2, #4
 800eabe:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800eac0:	4b0e      	ldr	r3, [pc, #56]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800eac6:	4b0d      	ldr	r3, [pc, #52]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800eacc:	4b0b      	ldr	r3, [pc, #44]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eace:	2220      	movs	r2, #32
 800ead0:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800ead2:	4b0a      	ldr	r3, [pc, #40]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ead4:	2200      	movs	r2, #0
 800ead6:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800ead8:	4b08      	ldr	r3, [pc, #32]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eada:	2212      	movs	r2, #18
 800eadc:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800eade:	4807      	ldr	r0, [pc, #28]	; (800eafc <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eae0:	f00a fe74 	bl	80197cc <HAL_FDCAN_Init>
 800eae4:	4603      	mov	r3, r0
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	bf14      	ite	ne
 800eaea:	2301      	movne	r3, #1
 800eaec:	2300      	moveq	r3, #0
 800eaee:	b2db      	uxtb	r3, r3
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d001      	beq.n	800eaf8 <_ZL14MX_FDCAN1_Initv+0xc8>
  {
    Error_Handler();
 800eaf4:	f001 f9d6 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800eaf8:	bf00      	nop
 800eafa:	bd80      	pop	{r7, pc}
 800eafc:	24000ca0 	.word	0x24000ca0
 800eb00:	4000a000 	.word	0x4000a000

0800eb04 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b090      	sub	sp, #64	; 0x40
 800eb08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eb0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eb0e:	2200      	movs	r2, #0
 800eb10:	601a      	str	r2, [r3, #0]
 800eb12:	605a      	str	r2, [r3, #4]
 800eb14:	609a      	str	r2, [r3, #8]
 800eb16:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800eb18:	f107 031c 	add.w	r3, r7, #28
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	601a      	str	r2, [r3, #0]
 800eb20:	605a      	str	r2, [r3, #4]
 800eb22:	609a      	str	r2, [r3, #8]
 800eb24:	60da      	str	r2, [r3, #12]
 800eb26:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800eb28:	f107 030c 	add.w	r3, r7, #12
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	601a      	str	r2, [r3, #0]
 800eb30:	605a      	str	r2, [r3, #4]
 800eb32:	609a      	str	r2, [r3, #8]
 800eb34:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eb36:	463b      	mov	r3, r7
 800eb38:	2200      	movs	r2, #0
 800eb3a:	601a      	str	r2, [r3, #0]
 800eb3c:	605a      	str	r2, [r3, #4]
 800eb3e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800eb40:	4b51      	ldr	r3, [pc, #324]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb42:	4a52      	ldr	r2, [pc, #328]	; (800ec8c <_ZL12MX_TIM1_Initv+0x188>)
 800eb44:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800eb46:	4b50      	ldr	r3, [pc, #320]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb48:	2200      	movs	r2, #0
 800eb4a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb4c:	4b4e      	ldr	r3, [pc, #312]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb4e:	2200      	movs	r2, #0
 800eb50:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 27500 - 1;
 800eb52:	4b4d      	ldr	r3, [pc, #308]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb54:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800eb58:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eb5a:	4b4b      	ldr	r3, [pc, #300]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800eb60:	4b49      	ldr	r3, [pc, #292]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb62:	2200      	movs	r2, #0
 800eb64:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eb66:	4b48      	ldr	r3, [pc, #288]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb68:	2200      	movs	r2, #0
 800eb6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800eb6c:	4846      	ldr	r0, [pc, #280]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb6e:	f00f fceb 	bl	801e548 <HAL_TIM_Base_Init>
 800eb72:	4603      	mov	r3, r0
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	bf14      	ite	ne
 800eb78:	2301      	movne	r3, #1
 800eb7a:	2300      	moveq	r3, #0
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d001      	beq.n	800eb86 <_ZL12MX_TIM1_Initv+0x82>
  {
    Error_Handler();
 800eb82:	f001 f98f 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800eb86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb8a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800eb8c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eb90:	4619      	mov	r1, r3
 800eb92:	483d      	ldr	r0, [pc, #244]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800eb94:	f010 fd82 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	bf14      	ite	ne
 800eb9e:	2301      	movne	r3, #1
 800eba0:	2300      	moveq	r3, #0
 800eba2:	b2db      	uxtb	r3, r3
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <_ZL12MX_TIM1_Initv+0xa8>
  {
    Error_Handler();
 800eba8:	f001 f97c 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800ebac:	4836      	ldr	r0, [pc, #216]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800ebae:	f00f ffd3 	bl	801eb58 <HAL_TIM_IC_Init>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	bf14      	ite	ne
 800ebb8:	2301      	movne	r3, #1
 800ebba:	2300      	moveq	r3, #0
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d001      	beq.n	800ebc6 <_ZL12MX_TIM1_Initv+0xc2>
  {
    Error_Handler();
 800ebc2:	f001 f96f 	bl	800fea4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800ebc6:	2304      	movs	r3, #4
 800ebc8:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800ebca:	2350      	movs	r3, #80	; 0x50
 800ebcc:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800ebd6:	2300      	movs	r3, #0
 800ebd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800ebda:	f107 031c 	add.w	r3, r7, #28
 800ebde:	4619      	mov	r1, r3
 800ebe0:	4829      	ldr	r0, [pc, #164]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800ebe2:	f010 fe53 	bl	801f88c <HAL_TIM_SlaveConfigSynchro>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	bf14      	ite	ne
 800ebec:	2301      	movne	r3, #1
 800ebee:	2300      	moveq	r3, #0
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d001      	beq.n	800ebfa <_ZL12MX_TIM1_Initv+0xf6>
  {
    Error_Handler();
 800ebf6:	f001 f955 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ebfe:	2301      	movs	r3, #1
 800ec00:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ec02:	2300      	movs	r3, #0
 800ec04:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800ec06:	2300      	movs	r3, #0
 800ec08:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ec0a:	f107 030c 	add.w	r3, r7, #12
 800ec0e:	2200      	movs	r2, #0
 800ec10:	4619      	mov	r1, r3
 800ec12:	481d      	ldr	r0, [pc, #116]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800ec14:	f010 fb91 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800ec18:	4603      	mov	r3, r0
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	bf14      	ite	ne
 800ec1e:	2301      	movne	r3, #1
 800ec20:	2300      	moveq	r3, #0
 800ec22:	b2db      	uxtb	r3, r3
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d001      	beq.n	800ec2c <_ZL12MX_TIM1_Initv+0x128>
  {
    Error_Handler();
 800ec28:	f001 f93c 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ec2c:	2302      	movs	r3, #2
 800ec2e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800ec30:	2302      	movs	r3, #2
 800ec32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ec34:	f107 030c 	add.w	r3, r7, #12
 800ec38:	2204      	movs	r2, #4
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	4812      	ldr	r0, [pc, #72]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800ec3e:	f010 fb7c 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	bf14      	ite	ne
 800ec48:	2301      	movne	r3, #1
 800ec4a:	2300      	moveq	r3, #0
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d001      	beq.n	800ec56 <_ZL12MX_TIM1_Initv+0x152>
  {
    Error_Handler();
 800ec52:	f001 f927 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ec56:	2300      	movs	r3, #0
 800ec58:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ec5e:	2300      	movs	r3, #0
 800ec60:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800ec62:	463b      	mov	r3, r7
 800ec64:	4619      	mov	r1, r3
 800ec66:	4808      	ldr	r0, [pc, #32]	; (800ec88 <_ZL12MX_TIM1_Initv+0x184>)
 800ec68:	f011 fd14 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	bf14      	ite	ne
 800ec72:	2301      	movne	r3, #1
 800ec74:	2300      	moveq	r3, #0
 800ec76:	b2db      	uxtb	r3, r3
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d001      	beq.n	800ec80 <_ZL12MX_TIM1_Initv+0x17c>
  {
    Error_Handler();
 800ec7c:	f001 f912 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ec80:	bf00      	nop
 800ec82:	3740      	adds	r7, #64	; 0x40
 800ec84:	46bd      	mov	sp, r7
 800ec86:	bd80      	pop	{r7, pc}
 800ec88:	24000d40 	.word	0x24000d40
 800ec8c:	40010000 	.word	0x40010000

0800ec90 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b090      	sub	sp, #64	; 0x40
 800ec94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ec96:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	601a      	str	r2, [r3, #0]
 800ec9e:	605a      	str	r2, [r3, #4]
 800eca0:	609a      	str	r2, [r3, #8]
 800eca2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eca4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]
 800ecac:	605a      	str	r2, [r3, #4]
 800ecae:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ecb0:	f107 0314 	add.w	r3, r7, #20
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	601a      	str	r2, [r3, #0]
 800ecb8:	605a      	str	r2, [r3, #4]
 800ecba:	609a      	str	r2, [r3, #8]
 800ecbc:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800ecbe:	463b      	mov	r3, r7
 800ecc0:	2200      	movs	r2, #0
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	605a      	str	r2, [r3, #4]
 800ecc6:	609a      	str	r2, [r3, #8]
 800ecc8:	60da      	str	r2, [r3, #12]
 800ecca:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800eccc:	4b61      	ldr	r3, [pc, #388]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ecce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ecd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ecd4:	4b5f      	ldr	r3, [pc, #380]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ecda:	4b5e      	ldr	r3, [pc, #376]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800ece0:	4b5c      	ldr	r3, [pc, #368]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ece2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ece6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ece8:	4b5a      	ldr	r3, [pc, #360]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ecea:	2200      	movs	r2, #0
 800ecec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ecee:	4b59      	ldr	r3, [pc, #356]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ecf4:	4857      	ldr	r0, [pc, #348]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ecf6:	f00f fc27 	bl	801e548 <HAL_TIM_Base_Init>
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	bf14      	ite	ne
 800ed00:	2301      	movne	r3, #1
 800ed02:	2300      	moveq	r3, #0
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d001      	beq.n	800ed0e <_ZL12MX_TIM2_Initv+0x7e>
  {
    Error_Handler();
 800ed0a:	f001 f8cb 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ed0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ed12:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ed14:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ed18:	4619      	mov	r1, r3
 800ed1a:	484e      	ldr	r0, [pc, #312]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ed1c:	f010 fcbe 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800ed20:	4603      	mov	r3, r0
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	bf14      	ite	ne
 800ed26:	2301      	movne	r3, #1
 800ed28:	2300      	moveq	r3, #0
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d001      	beq.n	800ed34 <_ZL12MX_TIM2_Initv+0xa4>
  {
    Error_Handler();
 800ed30:	f001 f8b8 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800ed34:	4847      	ldr	r0, [pc, #284]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ed36:	f00f ff0f 	bl	801eb58 <HAL_TIM_IC_Init>
 800ed3a:	4603      	mov	r3, r0
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	bf14      	ite	ne
 800ed40:	2301      	movne	r3, #1
 800ed42:	2300      	moveq	r3, #0
 800ed44:	b2db      	uxtb	r3, r3
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d001      	beq.n	800ed4e <_ZL12MX_TIM2_Initv+0xbe>
  {
    Error_Handler();
 800ed4a:	f001 f8ab 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	627b      	str	r3, [r7, #36]	; 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ed52:	2300      	movs	r3, #0
 800ed54:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ed56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	483d      	ldr	r0, [pc, #244]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ed5e:	f011 fc99 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800ed62:	4603      	mov	r3, r0
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	bf14      	ite	ne
 800ed68:	2301      	movne	r3, #1
 800ed6a:	2300      	moveq	r3, #0
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d001      	beq.n	800ed76 <_ZL12MX_TIM2_Initv+0xe6>
  {
    Error_Handler();
 800ed72:	f001 f897 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ed76:	230a      	movs	r3, #10
 800ed78:	617b      	str	r3, [r7, #20]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	61bb      	str	r3, [r7, #24]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ed7e:	2300      	movs	r3, #0
 800ed80:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICFilter = 0;
 800ed82:	2300      	movs	r3, #0
 800ed84:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ed86:	f107 0314 	add.w	r3, r7, #20
 800ed8a:	2208      	movs	r2, #8
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	4831      	ldr	r0, [pc, #196]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ed90:	f010 fad3 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800ed94:	4603      	mov	r3, r0
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	bf14      	ite	ne
 800ed9a:	2301      	movne	r3, #1
 800ed9c:	2300      	moveq	r3, #0
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d001      	beq.n	800eda8 <_ZL12MX_TIM2_Initv+0x118>
  {
    Error_Handler();
 800eda4:	f001 f87e 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800eda8:	f107 0314 	add.w	r3, r7, #20
 800edac:	220c      	movs	r2, #12
 800edae:	4619      	mov	r1, r3
 800edb0:	4828      	ldr	r0, [pc, #160]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800edb2:	f010 fac2 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800edb6:	4603      	mov	r3, r0
 800edb8:	2b00      	cmp	r3, #0
 800edba:	bf14      	ite	ne
 800edbc:	2301      	movne	r3, #1
 800edbe:	2300      	moveq	r3, #0
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d001      	beq.n	800edca <_ZL12MX_TIM2_Initv+0x13a>
  {
    Error_Handler();
 800edc6:	f001 f86d 	bl	800fea4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800edca:	2304      	movs	r3, #4
 800edcc:	603b      	str	r3, [r7, #0]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800edce:	2350      	movs	r3, #80	; 0x50
 800edd0:	607b      	str	r3, [r7, #4]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800edd2:	2300      	movs	r3, #0
 800edd4:	60bb      	str	r3, [r7, #8]
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800edd6:	2300      	movs	r3, #0
 800edd8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.TriggerFilter = 0;
 800edda:	2300      	movs	r3, #0
 800eddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800edde:	463b      	mov	r3, r7
 800ede0:	4619      	mov	r1, r3
 800ede2:	481c      	ldr	r0, [pc, #112]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ede4:	f010 fd52 	bl	801f88c <HAL_TIM_SlaveConfigSynchro>
 800ede8:	4603      	mov	r3, r0
 800edea:	2b00      	cmp	r3, #0
 800edec:	bf14      	ite	ne
 800edee:	2301      	movne	r3, #1
 800edf0:	2300      	moveq	r3, #0
 800edf2:	b2db      	uxtb	r3, r3
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d001      	beq.n	800edfc <_ZL12MX_TIM2_Initv+0x16c>
  {
    Error_Handler();
 800edf8:	f001 f854 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800edfc:	2300      	movs	r3, #0
 800edfe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ee00:	f107 0314 	add.w	r3, r7, #20
 800ee04:	2200      	movs	r2, #0
 800ee06:	4619      	mov	r1, r3
 800ee08:	4812      	ldr	r0, [pc, #72]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ee0a:	f010 fa96 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800ee0e:	4603      	mov	r3, r0
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	bf14      	ite	ne
 800ee14:	2301      	movne	r3, #1
 800ee16:	2300      	moveq	r3, #0
 800ee18:	b2db      	uxtb	r3, r3
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d001      	beq.n	800ee22 <_ZL12MX_TIM2_Initv+0x192>
  {
    Error_Handler();
 800ee1e:	f001 f841 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ee22:	2302      	movs	r3, #2
 800ee24:	617b      	str	r3, [r7, #20]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800ee26:	2302      	movs	r3, #2
 800ee28:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ee2a:	f107 0314 	add.w	r3, r7, #20
 800ee2e:	2204      	movs	r2, #4
 800ee30:	4619      	mov	r1, r3
 800ee32:	4808      	ldr	r0, [pc, #32]	; (800ee54 <_ZL12MX_TIM2_Initv+0x1c4>)
 800ee34:	f010 fa81 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800ee38:	4603      	mov	r3, r0
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	bf14      	ite	ne
 800ee3e:	2301      	movne	r3, #1
 800ee40:	2300      	moveq	r3, #0
 800ee42:	b2db      	uxtb	r3, r3
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d001      	beq.n	800ee4c <_ZL12MX_TIM2_Initv+0x1bc>
  {
    Error_Handler();
 800ee48:	f001 f82c 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ee4c:	bf00      	nop
 800ee4e:	3740      	adds	r7, #64	; 0x40
 800ee50:	46bd      	mov	sp, r7
 800ee52:	bd80      	pop	{r7, pc}
 800ee54:	24000d8c 	.word	0x24000d8c

0800ee58 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b090      	sub	sp, #64	; 0x40
 800ee5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ee5e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800ee62:	2200      	movs	r2, #0
 800ee64:	601a      	str	r2, [r3, #0]
 800ee66:	605a      	str	r2, [r3, #4]
 800ee68:	609a      	str	r2, [r3, #8]
 800ee6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800ee6c:	f107 031c 	add.w	r3, r7, #28
 800ee70:	2200      	movs	r2, #0
 800ee72:	601a      	str	r2, [r3, #0]
 800ee74:	605a      	str	r2, [r3, #4]
 800ee76:	609a      	str	r2, [r3, #8]
 800ee78:	60da      	str	r2, [r3, #12]
 800ee7a:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ee7c:	f107 030c 	add.w	r3, r7, #12
 800ee80:	2200      	movs	r2, #0
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	605a      	str	r2, [r3, #4]
 800ee86:	609a      	str	r2, [r3, #8]
 800ee88:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ee8a:	463b      	mov	r3, r7
 800ee8c:	2200      	movs	r2, #0
 800ee8e:	601a      	str	r2, [r3, #0]
 800ee90:	605a      	str	r2, [r3, #4]
 800ee92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ee94:	4b4f      	ldr	r3, [pc, #316]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800ee96:	4a50      	ldr	r2, [pc, #320]	; (800efd8 <_ZL12MX_TIM3_Initv+0x180>)
 800ee98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ee9a:	4b4e      	ldr	r3, [pc, #312]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800ee9c:	2200      	movs	r2, #0
 800ee9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eea0:	4b4c      	ldr	r3, [pc, #304]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800eea2:	2200      	movs	r2, #0
 800eea4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63353;
 800eea6:	4b4b      	ldr	r3, [pc, #300]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800eea8:	f24f 7279 	movw	r2, #63353	; 0xf779
 800eeac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eeae:	4b49      	ldr	r3, [pc, #292]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eeb4:	4b47      	ldr	r3, [pc, #284]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800eeb6:	2200      	movs	r2, #0
 800eeb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800eeba:	4846      	ldr	r0, [pc, #280]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800eebc:	f00f fb44 	bl	801e548 <HAL_TIM_Base_Init>
 800eec0:	4603      	mov	r3, r0
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	bf14      	ite	ne
 800eec6:	2301      	movne	r3, #1
 800eec8:	2300      	moveq	r3, #0
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d001      	beq.n	800eed4 <_ZL12MX_TIM3_Initv+0x7c>
  {
    Error_Handler();
 800eed0:	f000 ffe8 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800eed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eed8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800eeda:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800eede:	4619      	mov	r1, r3
 800eee0:	483c      	ldr	r0, [pc, #240]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800eee2:	f010 fbdb 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	bf14      	ite	ne
 800eeec:	2301      	movne	r3, #1
 800eeee:	2300      	moveq	r3, #0
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d001      	beq.n	800eefa <_ZL12MX_TIM3_Initv+0xa2>
  {
    Error_Handler();
 800eef6:	f000 ffd5 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800eefa:	4836      	ldr	r0, [pc, #216]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800eefc:	f00f fe2c 	bl	801eb58 <HAL_TIM_IC_Init>
 800ef00:	4603      	mov	r3, r0
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	bf14      	ite	ne
 800ef06:	2301      	movne	r3, #1
 800ef08:	2300      	moveq	r3, #0
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <_ZL12MX_TIM3_Initv+0xbc>
  {
    Error_Handler();
 800ef10:	f000 ffc8 	bl	800fea4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800ef14:	2304      	movs	r3, #4
 800ef16:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800ef18:	2350      	movs	r3, #80	; 0x50
 800ef1a:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800ef20:	2300      	movs	r3, #0
 800ef22:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800ef24:	2300      	movs	r3, #0
 800ef26:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800ef28:	f107 031c 	add.w	r3, r7, #28
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4829      	ldr	r0, [pc, #164]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800ef30:	f010 fcac 	bl	801f88c <HAL_TIM_SlaveConfigSynchro>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bf14      	ite	ne
 800ef3a:	2301      	movne	r3, #1
 800ef3c:	2300      	moveq	r3, #0
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <_ZL12MX_TIM3_Initv+0xf0>
  {
    Error_Handler();
 800ef44:	f000 ffae 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ef50:	2300      	movs	r3, #0
 800ef52:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800ef54:	2300      	movs	r3, #0
 800ef56:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ef58:	f107 030c 	add.w	r3, r7, #12
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	4619      	mov	r1, r3
 800ef60:	481c      	ldr	r0, [pc, #112]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800ef62:	f010 f9ea 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800ef66:	4603      	mov	r3, r0
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	bf14      	ite	ne
 800ef6c:	2301      	movne	r3, #1
 800ef6e:	2300      	moveq	r3, #0
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d001      	beq.n	800ef7a <_ZL12MX_TIM3_Initv+0x122>
  {
    Error_Handler();
 800ef76:	f000 ff95 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800ef7a:	2302      	movs	r3, #2
 800ef7c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800ef7e:	2302      	movs	r3, #2
 800ef80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ef82:	f107 030c 	add.w	r3, r7, #12
 800ef86:	2204      	movs	r2, #4
 800ef88:	4619      	mov	r1, r3
 800ef8a:	4812      	ldr	r0, [pc, #72]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800ef8c:	f010 f9d5 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800ef90:	4603      	mov	r3, r0
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	bf14      	ite	ne
 800ef96:	2301      	movne	r3, #1
 800ef98:	2300      	moveq	r3, #0
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d001      	beq.n	800efa4 <_ZL12MX_TIM3_Initv+0x14c>
  {
    Error_Handler();
 800efa0:	f000 ff80 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800efa4:	2300      	movs	r3, #0
 800efa6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800efa8:	2300      	movs	r3, #0
 800efaa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800efac:	463b      	mov	r3, r7
 800efae:	4619      	mov	r1, r3
 800efb0:	4808      	ldr	r0, [pc, #32]	; (800efd4 <_ZL12MX_TIM3_Initv+0x17c>)
 800efb2:	f011 fb6f 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	bf14      	ite	ne
 800efbc:	2301      	movne	r3, #1
 800efbe:	2300      	moveq	r3, #0
 800efc0:	b2db      	uxtb	r3, r3
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <_ZL12MX_TIM3_Initv+0x172>
  {
    Error_Handler();
 800efc6:	f000 ff6d 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800efca:	bf00      	nop
 800efcc:	3740      	adds	r7, #64	; 0x40
 800efce:	46bd      	mov	sp, r7
 800efd0:	bd80      	pop	{r7, pc}
 800efd2:	bf00      	nop
 800efd4:	24000dd8 	.word	0x24000dd8
 800efd8:	40000400 	.word	0x40000400

0800efdc <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b090      	sub	sp, #64	; 0x40
 800efe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800efe2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800efe6:	2200      	movs	r2, #0
 800efe8:	601a      	str	r2, [r3, #0]
 800efea:	605a      	str	r2, [r3, #4]
 800efec:	609a      	str	r2, [r3, #8]
 800efee:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800eff0:	f107 031c 	add.w	r3, r7, #28
 800eff4:	2200      	movs	r2, #0
 800eff6:	601a      	str	r2, [r3, #0]
 800eff8:	605a      	str	r2, [r3, #4]
 800effa:	609a      	str	r2, [r3, #8]
 800effc:	60da      	str	r2, [r3, #12]
 800effe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800f000:	f107 030c 	add.w	r3, r7, #12
 800f004:	2200      	movs	r2, #0
 800f006:	601a      	str	r2, [r3, #0]
 800f008:	605a      	str	r2, [r3, #4]
 800f00a:	609a      	str	r2, [r3, #8]
 800f00c:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f00e:	463b      	mov	r3, r7
 800f010:	2200      	movs	r2, #0
 800f012:	601a      	str	r2, [r3, #0]
 800f014:	605a      	str	r2, [r3, #4]
 800f016:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800f018:	4b4f      	ldr	r3, [pc, #316]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f01a:	4a50      	ldr	r2, [pc, #320]	; (800f15c <_ZL12MX_TIM4_Initv+0x180>)
 800f01c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800f01e:	4b4e      	ldr	r3, [pc, #312]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f020:	2200      	movs	r2, #0
 800f022:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f024:	4b4c      	ldr	r3, [pc, #304]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f026:	2200      	movs	r2, #0
 800f028:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800f02a:	4b4b      	ldr	r3, [pc, #300]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f02c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f030:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f032:	4b49      	ldr	r3, [pc, #292]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f034:	2200      	movs	r2, #0
 800f036:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f038:	4b47      	ldr	r3, [pc, #284]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f03a:	2200      	movs	r2, #0
 800f03c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800f03e:	4846      	ldr	r0, [pc, #280]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f040:	f00f fa82 	bl	801e548 <HAL_TIM_Base_Init>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	bf14      	ite	ne
 800f04a:	2301      	movne	r3, #1
 800f04c:	2300      	moveq	r3, #0
 800f04e:	b2db      	uxtb	r3, r3
 800f050:	2b00      	cmp	r3, #0
 800f052:	d001      	beq.n	800f058 <_ZL12MX_TIM4_Initv+0x7c>
  {
    Error_Handler();
 800f054:	f000 ff26 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f058:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f05c:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800f05e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800f062:	4619      	mov	r1, r3
 800f064:	483c      	ldr	r0, [pc, #240]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f066:	f010 fb19 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800f06a:	4603      	mov	r3, r0
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	bf14      	ite	ne
 800f070:	2301      	movne	r3, #1
 800f072:	2300      	moveq	r3, #0
 800f074:	b2db      	uxtb	r3, r3
 800f076:	2b00      	cmp	r3, #0
 800f078:	d001      	beq.n	800f07e <_ZL12MX_TIM4_Initv+0xa2>
  {
    Error_Handler();
 800f07a:	f000 ff13 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800f07e:	4836      	ldr	r0, [pc, #216]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f080:	f00f fd6a 	bl	801eb58 <HAL_TIM_IC_Init>
 800f084:	4603      	mov	r3, r0
 800f086:	2b00      	cmp	r3, #0
 800f088:	bf14      	ite	ne
 800f08a:	2301      	movne	r3, #1
 800f08c:	2300      	moveq	r3, #0
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <_ZL12MX_TIM4_Initv+0xbc>
  {
    Error_Handler();
 800f094:	f000 ff06 	bl	800fea4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 800f098:	2304      	movs	r3, #4
 800f09a:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 800f09c:	2350      	movs	r3, #80	; 0x50
 800f09e:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800f0ac:	f107 031c 	add.w	r3, r7, #28
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	4829      	ldr	r0, [pc, #164]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f0b4:	f010 fbea 	bl	801f88c <HAL_TIM_SlaveConfigSynchro>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	bf14      	ite	ne
 800f0be:	2301      	movne	r3, #1
 800f0c0:	2300      	moveq	r3, #0
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d001      	beq.n	800f0cc <_ZL12MX_TIM4_Initv+0xf0>
  {
    Error_Handler();
 800f0c8:	f000 feec 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 800f0d8:	2300      	movs	r3, #0
 800f0da:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f0dc:	f107 030c 	add.w	r3, r7, #12
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	4619      	mov	r1, r3
 800f0e4:	481c      	ldr	r0, [pc, #112]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f0e6:	f010 f928 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	bf14      	ite	ne
 800f0f0:	2301      	movne	r3, #1
 800f0f2:	2300      	moveq	r3, #0
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <_ZL12MX_TIM4_Initv+0x122>
  {
    Error_Handler();
 800f0fa:	f000 fed3 	bl	800fea4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800f0fe:	2302      	movs	r3, #2
 800f100:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 800f102:	2302      	movs	r3, #2
 800f104:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f106:	f107 030c 	add.w	r3, r7, #12
 800f10a:	2204      	movs	r2, #4
 800f10c:	4619      	mov	r1, r3
 800f10e:	4812      	ldr	r0, [pc, #72]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f110:	f010 f913 	bl	801f33a <HAL_TIM_IC_ConfigChannel>
 800f114:	4603      	mov	r3, r0
 800f116:	2b00      	cmp	r3, #0
 800f118:	bf14      	ite	ne
 800f11a:	2301      	movne	r3, #1
 800f11c:	2300      	moveq	r3, #0
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	2b00      	cmp	r3, #0
 800f122:	d001      	beq.n	800f128 <_ZL12MX_TIM4_Initv+0x14c>
  {
    Error_Handler();
 800f124:	f000 febe 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f128:	2300      	movs	r3, #0
 800f12a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f12c:	2300      	movs	r3, #0
 800f12e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f130:	463b      	mov	r3, r7
 800f132:	4619      	mov	r1, r3
 800f134:	4808      	ldr	r0, [pc, #32]	; (800f158 <_ZL12MX_TIM4_Initv+0x17c>)
 800f136:	f011 faad 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800f13a:	4603      	mov	r3, r0
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	bf14      	ite	ne
 800f140:	2301      	movne	r3, #1
 800f142:	2300      	moveq	r3, #0
 800f144:	b2db      	uxtb	r3, r3
 800f146:	2b00      	cmp	r3, #0
 800f148:	d001      	beq.n	800f14e <_ZL12MX_TIM4_Initv+0x172>
  {
    Error_Handler();
 800f14a:	f000 feab 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f14e:	bf00      	nop
 800f150:	3740      	adds	r7, #64	; 0x40
 800f152:	46bd      	mov	sp, r7
 800f154:	bd80      	pop	{r7, pc}
 800f156:	bf00      	nop
 800f158:	24000e24 	.word	0x24000e24
 800f15c:	40000800 	.word	0x40000800

0800f160 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f160:	b580      	push	{r7, lr}
 800f162:	b08e      	sub	sp, #56	; 0x38
 800f164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f166:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f16a:	2200      	movs	r2, #0
 800f16c:	601a      	str	r2, [r3, #0]
 800f16e:	605a      	str	r2, [r3, #4]
 800f170:	609a      	str	r2, [r3, #8]
 800f172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f174:	f107 031c 	add.w	r3, r7, #28
 800f178:	2200      	movs	r2, #0
 800f17a:	601a      	str	r2, [r3, #0]
 800f17c:	605a      	str	r2, [r3, #4]
 800f17e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f180:	463b      	mov	r3, r7
 800f182:	2200      	movs	r2, #0
 800f184:	601a      	str	r2, [r3, #0]
 800f186:	605a      	str	r2, [r3, #4]
 800f188:	609a      	str	r2, [r3, #8]
 800f18a:	60da      	str	r2, [r3, #12]
 800f18c:	611a      	str	r2, [r3, #16]
 800f18e:	615a      	str	r2, [r3, #20]
 800f190:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f192:	4b49      	ldr	r3, [pc, #292]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f194:	4a49      	ldr	r2, [pc, #292]	; (800f2bc <_ZL12MX_TIM5_Initv+0x15c>)
 800f196:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f198:	4b47      	ldr	r3, [pc, #284]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f19a:	2200      	movs	r2, #0
 800f19c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f19e:	4b46      	ldr	r3, [pc, #280]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 27500 - 1;
 800f1a4:	4b44      	ldr	r3, [pc, #272]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f1a6:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f1aa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f1ac:	4b42      	ldr	r3, [pc, #264]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f1b2:	4b41      	ldr	r3, [pc, #260]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f1b8:	483f      	ldr	r0, [pc, #252]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f1ba:	f00f f9c5 	bl	801e548 <HAL_TIM_Base_Init>
 800f1be:	4603      	mov	r3, r0
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	bf14      	ite	ne
 800f1c4:	2301      	movne	r3, #1
 800f1c6:	2300      	moveq	r3, #0
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	d001      	beq.n	800f1d2 <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800f1ce:	f000 fe69 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f1d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f1d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f1d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f1dc:	4619      	mov	r1, r3
 800f1de:	4836      	ldr	r0, [pc, #216]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f1e0:	f010 fa5c 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	bf14      	ite	ne
 800f1ea:	2301      	movne	r3, #1
 800f1ec:	2300      	moveq	r3, #0
 800f1ee:	b2db      	uxtb	r3, r3
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d001      	beq.n	800f1f8 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800f1f4:	f000 fe56 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f1f8:	482f      	ldr	r0, [pc, #188]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f1fa:	f00f fb30 	bl	801e85e <HAL_TIM_PWM_Init>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	bf14      	ite	ne
 800f204:	2301      	movne	r3, #1
 800f206:	2300      	moveq	r3, #0
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d001      	beq.n	800f212 <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800f20e:	f000 fe49 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f212:	2300      	movs	r3, #0
 800f214:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f216:	2300      	movs	r3, #0
 800f218:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f21a:	f107 031c 	add.w	r3, r7, #28
 800f21e:	4619      	mov	r1, r3
 800f220:	4825      	ldr	r0, [pc, #148]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f222:	f011 fa37 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	bf14      	ite	ne
 800f22c:	2301      	movne	r3, #1
 800f22e:	2300      	moveq	r3, #0
 800f230:	b2db      	uxtb	r3, r3
 800f232:	2b00      	cmp	r3, #0
 800f234:	d001      	beq.n	800f23a <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800f236:	f000 fe35 	bl	800fea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f23a:	2360      	movs	r3, #96	; 0x60
 800f23c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f23e:	2300      	movs	r3, #0
 800f240:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f242:	2300      	movs	r3, #0
 800f244:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f246:	2300      	movs	r3, #0
 800f248:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f24a:	463b      	mov	r3, r7
 800f24c:	2200      	movs	r2, #0
 800f24e:	4619      	mov	r1, r3
 800f250:	4819      	ldr	r0, [pc, #100]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f252:	f010 f90f 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f256:	4603      	mov	r3, r0
 800f258:	2b00      	cmp	r3, #0
 800f25a:	bf14      	ite	ne
 800f25c:	2301      	movne	r3, #1
 800f25e:	2300      	moveq	r3, #0
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b00      	cmp	r3, #0
 800f264:	d001      	beq.n	800f26a <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800f266:	f000 fe1d 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f26a:	463b      	mov	r3, r7
 800f26c:	2208      	movs	r2, #8
 800f26e:	4619      	mov	r1, r3
 800f270:	4811      	ldr	r0, [pc, #68]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f272:	f010 f8ff 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	bf14      	ite	ne
 800f27c:	2301      	movne	r3, #1
 800f27e:	2300      	moveq	r3, #0
 800f280:	b2db      	uxtb	r3, r3
 800f282:	2b00      	cmp	r3, #0
 800f284:	d001      	beq.n	800f28a <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800f286:	f000 fe0d 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f28a:	463b      	mov	r3, r7
 800f28c:	220c      	movs	r2, #12
 800f28e:	4619      	mov	r1, r3
 800f290:	4809      	ldr	r0, [pc, #36]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f292:	f010 f8ef 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	bf14      	ite	ne
 800f29c:	2301      	movne	r3, #1
 800f29e:	2300      	moveq	r3, #0
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d001      	beq.n	800f2aa <_ZL12MX_TIM5_Initv+0x14a>
  {
    Error_Handler();
 800f2a6:	f000 fdfd 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f2aa:	4803      	ldr	r0, [pc, #12]	; (800f2b8 <_ZL12MX_TIM5_Initv+0x158>)
 800f2ac:	f005 fc9c 	bl	8014be8 <HAL_TIM_MspPostInit>

}
 800f2b0:	bf00      	nop
 800f2b2:	3738      	adds	r7, #56	; 0x38
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}
 800f2b8:	24000e70 	.word	0x24000e70
 800f2bc:	40000c00 	.word	0x40000c00

0800f2c0 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f2c6:	1d3b      	adds	r3, r7, #4
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	601a      	str	r2, [r3, #0]
 800f2cc:	605a      	str	r2, [r3, #4]
 800f2ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f2d0:	4b19      	ldr	r3, [pc, #100]	; (800f338 <_ZL12MX_TIM6_Initv+0x78>)
 800f2d2:	4a1a      	ldr	r2, [pc, #104]	; (800f33c <_ZL12MX_TIM6_Initv+0x7c>)
 800f2d4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275 -1;
 800f2d6:	4b18      	ldr	r3, [pc, #96]	; (800f338 <_ZL12MX_TIM6_Initv+0x78>)
 800f2d8:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f2dc:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f2de:	4b16      	ldr	r3, [pc, #88]	; (800f338 <_ZL12MX_TIM6_Initv+0x78>)
 800f2e0:	2200      	movs	r2, #0
 800f2e2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800f2e4:	4b14      	ldr	r3, [pc, #80]	; (800f338 <_ZL12MX_TIM6_Initv+0x78>)
 800f2e6:	22c7      	movs	r2, #199	; 0xc7
 800f2e8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f2ea:	4b13      	ldr	r3, [pc, #76]	; (800f338 <_ZL12MX_TIM6_Initv+0x78>)
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f2f0:	4811      	ldr	r0, [pc, #68]	; (800f338 <_ZL12MX_TIM6_Initv+0x78>)
 800f2f2:	f00f f929 	bl	801e548 <HAL_TIM_Base_Init>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	bf14      	ite	ne
 800f2fc:	2301      	movne	r3, #1
 800f2fe:	2300      	moveq	r3, #0
 800f300:	b2db      	uxtb	r3, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	d001      	beq.n	800f30a <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800f306:	f000 fdcd 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f30a:	2320      	movs	r3, #32
 800f30c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f30e:	2300      	movs	r3, #0
 800f310:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f312:	1d3b      	adds	r3, r7, #4
 800f314:	4619      	mov	r1, r3
 800f316:	4808      	ldr	r0, [pc, #32]	; (800f338 <_ZL12MX_TIM6_Initv+0x78>)
 800f318:	f011 f9bc 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b00      	cmp	r3, #0
 800f320:	bf14      	ite	ne
 800f322:	2301      	movne	r3, #1
 800f324:	2300      	moveq	r3, #0
 800f326:	b2db      	uxtb	r3, r3
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d001      	beq.n	800f330 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800f32c:	f000 fdba 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f330:	bf00      	nop
 800f332:	3710      	adds	r7, #16
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}
 800f338:	24000ebc 	.word	0x24000ebc
 800f33c:	40001000 	.word	0x40001000

0800f340 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f346:	1d3b      	adds	r3, r7, #4
 800f348:	2200      	movs	r2, #0
 800f34a:	601a      	str	r2, [r3, #0]
 800f34c:	605a      	str	r2, [r3, #4]
 800f34e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800f350:	4b19      	ldr	r3, [pc, #100]	; (800f3b8 <_ZL12MX_TIM7_Initv+0x78>)
 800f352:	4a1a      	ldr	r2, [pc, #104]	; (800f3bc <_ZL12MX_TIM7_Initv+0x7c>)
 800f354:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800f356:	4b18      	ldr	r3, [pc, #96]	; (800f3b8 <_ZL12MX_TIM7_Initv+0x78>)
 800f358:	2200      	movs	r2, #0
 800f35a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f35c:	4b16      	ldr	r3, [pc, #88]	; (800f3b8 <_ZL12MX_TIM7_Initv+0x78>)
 800f35e:	2200      	movs	r2, #0
 800f360:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800f362:	4b15      	ldr	r3, [pc, #84]	; (800f3b8 <_ZL12MX_TIM7_Initv+0x78>)
 800f364:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f368:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f36a:	4b13      	ldr	r3, [pc, #76]	; (800f3b8 <_ZL12MX_TIM7_Initv+0x78>)
 800f36c:	2200      	movs	r2, #0
 800f36e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800f370:	4811      	ldr	r0, [pc, #68]	; (800f3b8 <_ZL12MX_TIM7_Initv+0x78>)
 800f372:	f00f f8e9 	bl	801e548 <HAL_TIM_Base_Init>
 800f376:	4603      	mov	r3, r0
 800f378:	2b00      	cmp	r3, #0
 800f37a:	bf14      	ite	ne
 800f37c:	2301      	movne	r3, #1
 800f37e:	2300      	moveq	r3, #0
 800f380:	b2db      	uxtb	r3, r3
 800f382:	2b00      	cmp	r3, #0
 800f384:	d001      	beq.n	800f38a <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800f386:	f000 fd8d 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f38a:	2300      	movs	r3, #0
 800f38c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f38e:	2300      	movs	r3, #0
 800f390:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800f392:	1d3b      	adds	r3, r7, #4
 800f394:	4619      	mov	r1, r3
 800f396:	4808      	ldr	r0, [pc, #32]	; (800f3b8 <_ZL12MX_TIM7_Initv+0x78>)
 800f398:	f011 f97c 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800f39c:	4603      	mov	r3, r0
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	bf14      	ite	ne
 800f3a2:	2301      	movne	r3, #1
 800f3a4:	2300      	moveq	r3, #0
 800f3a6:	b2db      	uxtb	r3, r3
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d001      	beq.n	800f3b0 <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800f3ac:	f000 fd7a 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800f3b0:	bf00      	nop
 800f3b2:	3710      	adds	r7, #16
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}
 800f3b8:	24000f08 	.word	0x24000f08
 800f3bc:	40001400 	.word	0x40001400

0800f3c0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b09c      	sub	sp, #112	; 0x70
 800f3c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f3c6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	601a      	str	r2, [r3, #0]
 800f3ce:	605a      	str	r2, [r3, #4]
 800f3d0:	609a      	str	r2, [r3, #8]
 800f3d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f3d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f3d8:	2200      	movs	r2, #0
 800f3da:	601a      	str	r2, [r3, #0]
 800f3dc:	605a      	str	r2, [r3, #4]
 800f3de:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f3e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	601a      	str	r2, [r3, #0]
 800f3e8:	605a      	str	r2, [r3, #4]
 800f3ea:	609a      	str	r2, [r3, #8]
 800f3ec:	60da      	str	r2, [r3, #12]
 800f3ee:	611a      	str	r2, [r3, #16]
 800f3f0:	615a      	str	r2, [r3, #20]
 800f3f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f3f4:	1d3b      	adds	r3, r7, #4
 800f3f6:	2234      	movs	r2, #52	; 0x34
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	f011 fbfc 	bl	8020bf8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f400:	4b6c      	ldr	r3, [pc, #432]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f402:	4a6d      	ldr	r2, [pc, #436]	; (800f5b8 <_ZL12MX_TIM8_Initv+0x1f8>)
 800f404:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800f406:	4b6b      	ldr	r3, [pc, #428]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f408:	2200      	movs	r2, #0
 800f40a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f40c:	4b69      	ldr	r3, [pc, #420]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f40e:	2200      	movs	r2, #0
 800f410:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27500 - 1;
 800f412:	4b68      	ldr	r3, [pc, #416]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f414:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f418:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f41a:	4b66      	ldr	r3, [pc, #408]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f41c:	2200      	movs	r2, #0
 800f41e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f420:	4b64      	ldr	r3, [pc, #400]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f422:	2200      	movs	r2, #0
 800f424:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f426:	4b63      	ldr	r3, [pc, #396]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f428:	2200      	movs	r2, #0
 800f42a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f42c:	4861      	ldr	r0, [pc, #388]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f42e:	f00f f88b 	bl	801e548 <HAL_TIM_Base_Init>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	bf14      	ite	ne
 800f438:	2301      	movne	r3, #1
 800f43a:	2300      	moveq	r3, #0
 800f43c:	b2db      	uxtb	r3, r3
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d001      	beq.n	800f446 <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 800f442:	f000 fd2f 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f44a:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f44c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f450:	4619      	mov	r1, r3
 800f452:	4858      	ldr	r0, [pc, #352]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f454:	f010 f922 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800f458:	4603      	mov	r3, r0
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	bf14      	ite	ne
 800f45e:	2301      	movne	r3, #1
 800f460:	2300      	moveq	r3, #0
 800f462:	b2db      	uxtb	r3, r3
 800f464:	2b00      	cmp	r3, #0
 800f466:	d001      	beq.n	800f46c <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800f468:	f000 fd1c 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f46c:	4851      	ldr	r0, [pc, #324]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f46e:	f00f f9f6 	bl	801e85e <HAL_TIM_PWM_Init>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	bf14      	ite	ne
 800f478:	2301      	movne	r3, #1
 800f47a:	2300      	moveq	r3, #0
 800f47c:	b2db      	uxtb	r3, r3
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d001      	beq.n	800f486 <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 800f482:	f000 fd0f 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f486:	2300      	movs	r3, #0
 800f488:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f48a:	2300      	movs	r3, #0
 800f48c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f48e:	2300      	movs	r3, #0
 800f490:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f492:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f496:	4619      	mov	r1, r3
 800f498:	4846      	ldr	r0, [pc, #280]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f49a:	f011 f8fb 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	bf14      	ite	ne
 800f4a4:	2301      	movne	r3, #1
 800f4a6:	2300      	moveq	r3, #0
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d001      	beq.n	800f4b2 <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 800f4ae:	f000 fcf9 	bl	800fea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f4b2:	2360      	movs	r3, #96	; 0x60
 800f4b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800f4b6:	2300      	movs	r3, #0
 800f4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f4ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	4837      	ldr	r0, [pc, #220]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f4d8:	f00f ffcc 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	bf14      	ite	ne
 800f4e2:	2301      	movne	r3, #1
 800f4e4:	2300      	moveq	r3, #0
 800f4e6:	b2db      	uxtb	r3, r3
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d001      	beq.n	800f4f0 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 800f4ec:	f000 fcda 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f4f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f4f4:	2204      	movs	r2, #4
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	482e      	ldr	r0, [pc, #184]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f4fa:	f00f ffbb 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f4fe:	4603      	mov	r3, r0
 800f500:	2b00      	cmp	r3, #0
 800f502:	bf14      	ite	ne
 800f504:	2301      	movne	r3, #1
 800f506:	2300      	moveq	r3, #0
 800f508:	b2db      	uxtb	r3, r3
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d001      	beq.n	800f512 <_ZL12MX_TIM8_Initv+0x152>
  {
    Error_Handler();
 800f50e:	f000 fcc9 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f512:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f516:	2208      	movs	r2, #8
 800f518:	4619      	mov	r1, r3
 800f51a:	4826      	ldr	r0, [pc, #152]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f51c:	f00f ffaa 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	bf14      	ite	ne
 800f526:	2301      	movne	r3, #1
 800f528:	2300      	moveq	r3, #0
 800f52a:	b2db      	uxtb	r3, r3
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d001      	beq.n	800f534 <_ZL12MX_TIM8_Initv+0x174>
  {
    Error_Handler();
 800f530:	f000 fcb8 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f534:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f538:	220c      	movs	r2, #12
 800f53a:	4619      	mov	r1, r3
 800f53c:	481d      	ldr	r0, [pc, #116]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f53e:	f00f ff99 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f542:	4603      	mov	r3, r0
 800f544:	2b00      	cmp	r3, #0
 800f546:	bf14      	ite	ne
 800f548:	2301      	movne	r3, #1
 800f54a:	2300      	moveq	r3, #0
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <_ZL12MX_TIM8_Initv+0x196>
  {
    Error_Handler();
 800f552:	f000 fca7 	bl	800fea4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f556:	2300      	movs	r3, #0
 800f558:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f55a:	2300      	movs	r3, #0
 800f55c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f55e:	2300      	movs	r3, #0
 800f560:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f566:	2300      	movs	r3, #0
 800f568:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f56a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f56e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f570:	2300      	movs	r3, #0
 800f572:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f574:	2300      	movs	r3, #0
 800f576:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f578:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f57c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f57e:	2300      	movs	r3, #0
 800f580:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f582:	2300      	movs	r3, #0
 800f584:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f586:	1d3b      	adds	r3, r7, #4
 800f588:	4619      	mov	r1, r3
 800f58a:	480a      	ldr	r0, [pc, #40]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f58c:	f011 f91e 	bl	80207cc <HAL_TIMEx_ConfigBreakDeadTime>
 800f590:	4603      	mov	r3, r0
 800f592:	2b00      	cmp	r3, #0
 800f594:	bf14      	ite	ne
 800f596:	2301      	movne	r3, #1
 800f598:	2300      	moveq	r3, #0
 800f59a:	b2db      	uxtb	r3, r3
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d001      	beq.n	800f5a4 <_ZL12MX_TIM8_Initv+0x1e4>
  {
    Error_Handler();
 800f5a0:	f000 fc80 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f5a4:	4803      	ldr	r0, [pc, #12]	; (800f5b4 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f5a6:	f005 fb1f 	bl	8014be8 <HAL_TIM_MspPostInit>

}
 800f5aa:	bf00      	nop
 800f5ac:	3770      	adds	r7, #112	; 0x70
 800f5ae:	46bd      	mov	sp, r7
 800f5b0:	bd80      	pop	{r7, pc}
 800f5b2:	bf00      	nop
 800f5b4:	24000f54 	.word	0x24000f54
 800f5b8:	40010400 	.word	0x40010400

0800f5bc <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b08e      	sub	sp, #56	; 0x38
 800f5c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f5c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5c6:	2200      	movs	r2, #0
 800f5c8:	601a      	str	r2, [r3, #0]
 800f5ca:	605a      	str	r2, [r3, #4]
 800f5cc:	609a      	str	r2, [r3, #8]
 800f5ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f5d0:	f107 031c 	add.w	r3, r7, #28
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	601a      	str	r2, [r3, #0]
 800f5d8:	605a      	str	r2, [r3, #4]
 800f5da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f5dc:	463b      	mov	r3, r7
 800f5de:	2200      	movs	r2, #0
 800f5e0:	601a      	str	r2, [r3, #0]
 800f5e2:	605a      	str	r2, [r3, #4]
 800f5e4:	609a      	str	r2, [r3, #8]
 800f5e6:	60da      	str	r2, [r3, #12]
 800f5e8:	611a      	str	r2, [r3, #16]
 800f5ea:	615a      	str	r2, [r3, #20]
 800f5ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800f5ee:	4b39      	ldr	r3, [pc, #228]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f5f0:	4a39      	ldr	r2, [pc, #228]	; (800f6d8 <_ZL13MX_TIM12_Initv+0x11c>)
 800f5f2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800f5f4:	4b37      	ldr	r3, [pc, #220]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f5f6:	2200      	movs	r2, #0
 800f5f8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f5fa:	4b36      	ldr	r3, [pc, #216]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 27500 - 1;
 800f600:	4b34      	ldr	r3, [pc, #208]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f602:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f606:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f608:	4b32      	ldr	r3, [pc, #200]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f60a:	2200      	movs	r2, #0
 800f60c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f60e:	4b31      	ldr	r3, [pc, #196]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f610:	2200      	movs	r2, #0
 800f612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800f614:	482f      	ldr	r0, [pc, #188]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f616:	f00e ff97 	bl	801e548 <HAL_TIM_Base_Init>
 800f61a:	4603      	mov	r3, r0
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	bf14      	ite	ne
 800f620:	2301      	movne	r3, #1
 800f622:	2300      	moveq	r3, #0
 800f624:	b2db      	uxtb	r3, r3
 800f626:	2b00      	cmp	r3, #0
 800f628:	d001      	beq.n	800f62e <_ZL13MX_TIM12_Initv+0x72>
  {
    Error_Handler();
 800f62a:	f000 fc3b 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f62e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f632:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800f634:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f638:	4619      	mov	r1, r3
 800f63a:	4826      	ldr	r0, [pc, #152]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f63c:	f010 f82e 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800f640:	4603      	mov	r3, r0
 800f642:	2b00      	cmp	r3, #0
 800f644:	bf14      	ite	ne
 800f646:	2301      	movne	r3, #1
 800f648:	2300      	moveq	r3, #0
 800f64a:	b2db      	uxtb	r3, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d001      	beq.n	800f654 <_ZL13MX_TIM12_Initv+0x98>
  {
    Error_Handler();
 800f650:	f000 fc28 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800f654:	481f      	ldr	r0, [pc, #124]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f656:	f00f f902 	bl	801e85e <HAL_TIM_PWM_Init>
 800f65a:	4603      	mov	r3, r0
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	bf14      	ite	ne
 800f660:	2301      	movne	r3, #1
 800f662:	2300      	moveq	r3, #0
 800f664:	b2db      	uxtb	r3, r3
 800f666:	2b00      	cmp	r3, #0
 800f668:	d001      	beq.n	800f66e <_ZL13MX_TIM12_Initv+0xb2>
  {
    Error_Handler();
 800f66a:	f000 fc1b 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f66e:	2300      	movs	r3, #0
 800f670:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f672:	2300      	movs	r3, #0
 800f674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim12, &sMasterConfig) != HAL_OK)
 800f676:	f107 031c 	add.w	r3, r7, #28
 800f67a:	4619      	mov	r1, r3
 800f67c:	4815      	ldr	r0, [pc, #84]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f67e:	f011 f809 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800f682:	4603      	mov	r3, r0
 800f684:	2b00      	cmp	r3, #0
 800f686:	bf14      	ite	ne
 800f688:	2301      	movne	r3, #1
 800f68a:	2300      	moveq	r3, #0
 800f68c:	b2db      	uxtb	r3, r3
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d001      	beq.n	800f696 <_ZL13MX_TIM12_Initv+0xda>
  {
    Error_Handler();
 800f692:	f000 fc07 	bl	800fea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f696:	2360      	movs	r3, #96	; 0x60
 800f698:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f69a:	2300      	movs	r3, #0
 800f69c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f6a6:	463b      	mov	r3, r7
 800f6a8:	2200      	movs	r2, #0
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	4809      	ldr	r0, [pc, #36]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f6ae:	f00f fee1 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	bf14      	ite	ne
 800f6b8:	2301      	movne	r3, #1
 800f6ba:	2300      	moveq	r3, #0
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <_ZL13MX_TIM12_Initv+0x10a>
  {
    Error_Handler();
 800f6c2:	f000 fbef 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800f6c6:	4803      	ldr	r0, [pc, #12]	; (800f6d4 <_ZL13MX_TIM12_Initv+0x118>)
 800f6c8:	f005 fa8e 	bl	8014be8 <HAL_TIM_MspPostInit>

}
 800f6cc:	bf00      	nop
 800f6ce:	3738      	adds	r7, #56	; 0x38
 800f6d0:	46bd      	mov	sp, r7
 800f6d2:	bd80      	pop	{r7, pc}
 800f6d4:	24000fa0 	.word	0x24000fa0
 800f6d8:	40001800 	.word	0x40001800

0800f6dc <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800f6e0:	4b10      	ldr	r3, [pc, #64]	; (800f724 <_ZL13MX_TIM13_Initv+0x48>)
 800f6e2:	4a11      	ldr	r2, [pc, #68]	; (800f728 <_ZL13MX_TIM13_Initv+0x4c>)
 800f6e4:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800f6e6:	4b0f      	ldr	r3, [pc, #60]	; (800f724 <_ZL13MX_TIM13_Initv+0x48>)
 800f6e8:	2200      	movs	r2, #0
 800f6ea:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f6ec:	4b0d      	ldr	r3, [pc, #52]	; (800f724 <_ZL13MX_TIM13_Initv+0x48>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800f6f2:	4b0c      	ldr	r3, [pc, #48]	; (800f724 <_ZL13MX_TIM13_Initv+0x48>)
 800f6f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6f8:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f6fa:	4b0a      	ldr	r3, [pc, #40]	; (800f724 <_ZL13MX_TIM13_Initv+0x48>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f700:	4b08      	ldr	r3, [pc, #32]	; (800f724 <_ZL13MX_TIM13_Initv+0x48>)
 800f702:	2200      	movs	r2, #0
 800f704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800f706:	4807      	ldr	r0, [pc, #28]	; (800f724 <_ZL13MX_TIM13_Initv+0x48>)
 800f708:	f00e ff1e 	bl	801e548 <HAL_TIM_Base_Init>
 800f70c:	4603      	mov	r3, r0
 800f70e:	2b00      	cmp	r3, #0
 800f710:	bf14      	ite	ne
 800f712:	2301      	movne	r3, #1
 800f714:	2300      	moveq	r3, #0
 800f716:	b2db      	uxtb	r3, r3
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d001      	beq.n	800f720 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800f71c:	f000 fbc2 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800f720:	bf00      	nop
 800f722:	bd80      	pop	{r7, pc}
 800f724:	24000fec 	.word	0x24000fec
 800f728:	40001c00 	.word	0x40001c00

0800f72c <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800f730:	4b10      	ldr	r3, [pc, #64]	; (800f774 <_ZL13MX_TIM14_Initv+0x48>)
 800f732:	4a11      	ldr	r2, [pc, #68]	; (800f778 <_ZL13MX_TIM14_Initv+0x4c>)
 800f734:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800f736:	4b0f      	ldr	r3, [pc, #60]	; (800f774 <_ZL13MX_TIM14_Initv+0x48>)
 800f738:	2200      	movs	r2, #0
 800f73a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f73c:	4b0d      	ldr	r3, [pc, #52]	; (800f774 <_ZL13MX_TIM14_Initv+0x48>)
 800f73e:	2200      	movs	r2, #0
 800f740:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800f742:	4b0c      	ldr	r3, [pc, #48]	; (800f774 <_ZL13MX_TIM14_Initv+0x48>)
 800f744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f748:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f74a:	4b0a      	ldr	r3, [pc, #40]	; (800f774 <_ZL13MX_TIM14_Initv+0x48>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f750:	4b08      	ldr	r3, [pc, #32]	; (800f774 <_ZL13MX_TIM14_Initv+0x48>)
 800f752:	2200      	movs	r2, #0
 800f754:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800f756:	4807      	ldr	r0, [pc, #28]	; (800f774 <_ZL13MX_TIM14_Initv+0x48>)
 800f758:	f00e fef6 	bl	801e548 <HAL_TIM_Base_Init>
 800f75c:	4603      	mov	r3, r0
 800f75e:	2b00      	cmp	r3, #0
 800f760:	bf14      	ite	ne
 800f762:	2301      	movne	r3, #1
 800f764:	2300      	moveq	r3, #0
 800f766:	b2db      	uxtb	r3, r3
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d001      	beq.n	800f770 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 800f76c:	f000 fb9a 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800f770:	bf00      	nop
 800f772:	bd80      	pop	{r7, pc}
 800f774:	24001038 	.word	0x24001038
 800f778:	40002000 	.word	0x40002000

0800f77c <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b088      	sub	sp, #32
 800f780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f782:	f107 0310 	add.w	r3, r7, #16
 800f786:	2200      	movs	r2, #0
 800f788:	601a      	str	r2, [r3, #0]
 800f78a:	605a      	str	r2, [r3, #4]
 800f78c:	609a      	str	r2, [r3, #8]
 800f78e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f790:	1d3b      	adds	r3, r7, #4
 800f792:	2200      	movs	r2, #0
 800f794:	601a      	str	r2, [r3, #0]
 800f796:	605a      	str	r2, [r3, #4]
 800f798:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800f79a:	4b26      	ldr	r3, [pc, #152]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f79c:	4a26      	ldr	r2, [pc, #152]	; (800f838 <_ZL13MX_TIM15_Initv+0xbc>)
 800f79e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800f7a0:	4b24      	ldr	r3, [pc, #144]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7a6:	4b23      	ldr	r3, [pc, #140]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800f7ac:	4b21      	ldr	r3, [pc, #132]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7b2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f7b4:	4b1f      	ldr	r3, [pc, #124]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800f7ba:	4b1e      	ldr	r3, [pc, #120]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7bc:	2200      	movs	r2, #0
 800f7be:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f7c0:	4b1c      	ldr	r3, [pc, #112]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800f7c6:	481b      	ldr	r0, [pc, #108]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7c8:	f00e febe 	bl	801e548 <HAL_TIM_Base_Init>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	bf14      	ite	ne
 800f7d2:	2301      	movne	r3, #1
 800f7d4:	2300      	moveq	r3, #0
 800f7d6:	b2db      	uxtb	r3, r3
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d001      	beq.n	800f7e0 <_ZL13MX_TIM15_Initv+0x64>
  {
    Error_Handler();
 800f7dc:	f000 fb62 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f7e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f7e4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800f7e6:	f107 0310 	add.w	r3, r7, #16
 800f7ea:	4619      	mov	r1, r3
 800f7ec:	4811      	ldr	r0, [pc, #68]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f7ee:	f00f ff55 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	bf14      	ite	ne
 800f7f8:	2301      	movne	r3, #1
 800f7fa:	2300      	moveq	r3, #0
 800f7fc:	b2db      	uxtb	r3, r3
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d001      	beq.n	800f806 <_ZL13MX_TIM15_Initv+0x8a>
  {
    Error_Handler();
 800f802:	f000 fb4f 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f806:	2300      	movs	r3, #0
 800f808:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f80a:	2300      	movs	r3, #0
 800f80c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800f80e:	1d3b      	adds	r3, r7, #4
 800f810:	4619      	mov	r1, r3
 800f812:	4808      	ldr	r0, [pc, #32]	; (800f834 <_ZL13MX_TIM15_Initv+0xb8>)
 800f814:	f010 ff3e 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800f818:	4603      	mov	r3, r0
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	bf14      	ite	ne
 800f81e:	2301      	movne	r3, #1
 800f820:	2300      	moveq	r3, #0
 800f822:	b2db      	uxtb	r3, r3
 800f824:	2b00      	cmp	r3, #0
 800f826:	d001      	beq.n	800f82c <_ZL13MX_TIM15_Initv+0xb0>
  {
    Error_Handler();
 800f828:	f000 fb3c 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800f82c:	bf00      	nop
 800f82e:	3720      	adds	r7, #32
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	24001084 	.word	0x24001084
 800f838:	40014000 	.word	0x40014000

0800f83c <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800f840:	4b12      	ldr	r3, [pc, #72]	; (800f88c <_ZL13MX_TIM16_Initv+0x50>)
 800f842:	4a13      	ldr	r2, [pc, #76]	; (800f890 <_ZL13MX_TIM16_Initv+0x54>)
 800f844:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800f846:	4b11      	ldr	r3, [pc, #68]	; (800f88c <_ZL13MX_TIM16_Initv+0x50>)
 800f848:	2200      	movs	r2, #0
 800f84a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f84c:	4b0f      	ldr	r3, [pc, #60]	; (800f88c <_ZL13MX_TIM16_Initv+0x50>)
 800f84e:	2200      	movs	r2, #0
 800f850:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800f852:	4b0e      	ldr	r3, [pc, #56]	; (800f88c <_ZL13MX_TIM16_Initv+0x50>)
 800f854:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f858:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f85a:	4b0c      	ldr	r3, [pc, #48]	; (800f88c <_ZL13MX_TIM16_Initv+0x50>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f860:	4b0a      	ldr	r3, [pc, #40]	; (800f88c <_ZL13MX_TIM16_Initv+0x50>)
 800f862:	2200      	movs	r2, #0
 800f864:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f866:	4b09      	ldr	r3, [pc, #36]	; (800f88c <_ZL13MX_TIM16_Initv+0x50>)
 800f868:	2200      	movs	r2, #0
 800f86a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f86c:	4807      	ldr	r0, [pc, #28]	; (800f88c <_ZL13MX_TIM16_Initv+0x50>)
 800f86e:	f00e fe6b 	bl	801e548 <HAL_TIM_Base_Init>
 800f872:	4603      	mov	r3, r0
 800f874:	2b00      	cmp	r3, #0
 800f876:	bf14      	ite	ne
 800f878:	2301      	movne	r3, #1
 800f87a:	2300      	moveq	r3, #0
 800f87c:	b2db      	uxtb	r3, r3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d001      	beq.n	800f886 <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800f882:	f000 fb0f 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800f886:	bf00      	nop
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	240010d0 	.word	0x240010d0
 800f890:	40014400 	.word	0x40014400

0800f894 <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800f898:	4b12      	ldr	r3, [pc, #72]	; (800f8e4 <_ZL13MX_TIM17_Initv+0x50>)
 800f89a:	4a13      	ldr	r2, [pc, #76]	; (800f8e8 <_ZL13MX_TIM17_Initv+0x54>)
 800f89c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800f89e:	4b11      	ldr	r3, [pc, #68]	; (800f8e4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f8a4:	4b0f      	ldr	r3, [pc, #60]	; (800f8e4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8a6:	2200      	movs	r2, #0
 800f8a8:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800f8aa:	4b0e      	ldr	r3, [pc, #56]	; (800f8e4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8b0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f8b2:	4b0c      	ldr	r3, [pc, #48]	; (800f8e4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800f8b8:	4b0a      	ldr	r3, [pc, #40]	; (800f8e4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8ba:	2200      	movs	r2, #0
 800f8bc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f8be:	4b09      	ldr	r3, [pc, #36]	; (800f8e4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8c0:	2200      	movs	r2, #0
 800f8c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800f8c4:	4807      	ldr	r0, [pc, #28]	; (800f8e4 <_ZL13MX_TIM17_Initv+0x50>)
 800f8c6:	f00e fe3f 	bl	801e548 <HAL_TIM_Base_Init>
 800f8ca:	4603      	mov	r3, r0
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	bf14      	ite	ne
 800f8d0:	2301      	movne	r3, #1
 800f8d2:	2300      	moveq	r3, #0
 800f8d4:	b2db      	uxtb	r3, r3
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d001      	beq.n	800f8de <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 800f8da:	f000 fae3 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800f8de:	bf00      	nop
 800f8e0:	bd80      	pop	{r7, pc}
 800f8e2:	bf00      	nop
 800f8e4:	2400111c 	.word	0x2400111c
 800f8e8:	40014800 	.word	0x40014800

0800f8ec <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b08e      	sub	sp, #56	; 0x38
 800f8f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f8f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	601a      	str	r2, [r3, #0]
 800f8fa:	605a      	str	r2, [r3, #4]
 800f8fc:	609a      	str	r2, [r3, #8]
 800f8fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f900:	f107 031c 	add.w	r3, r7, #28
 800f904:	2200      	movs	r2, #0
 800f906:	601a      	str	r2, [r3, #0]
 800f908:	605a      	str	r2, [r3, #4]
 800f90a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f90c:	463b      	mov	r3, r7
 800f90e:	2200      	movs	r2, #0
 800f910:	601a      	str	r2, [r3, #0]
 800f912:	605a      	str	r2, [r3, #4]
 800f914:	609a      	str	r2, [r3, #8]
 800f916:	60da      	str	r2, [r3, #12]
 800f918:	611a      	str	r2, [r3, #16]
 800f91a:	615a      	str	r2, [r3, #20]
 800f91c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800f91e:	4b51      	ldr	r3, [pc, #324]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f920:	4a51      	ldr	r2, [pc, #324]	; (800fa68 <_ZL13MX_TIM23_Initv+0x17c>)
 800f922:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800f924:	4b4f      	ldr	r3, [pc, #316]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f926:	2200      	movs	r2, #0
 800f928:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f92a:	4b4e      	ldr	r3, [pc, #312]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f92c:	2200      	movs	r2, #0
 800f92e:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 27500 - 1;
 800f930:	4b4c      	ldr	r3, [pc, #304]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f932:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f936:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f938:	4b4a      	ldr	r3, [pc, #296]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f93a:	2200      	movs	r2, #0
 800f93c:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f93e:	4b49      	ldr	r3, [pc, #292]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f940:	2200      	movs	r2, #0
 800f942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800f944:	4847      	ldr	r0, [pc, #284]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f946:	f00e fdff 	bl	801e548 <HAL_TIM_Base_Init>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	bf14      	ite	ne
 800f950:	2301      	movne	r3, #1
 800f952:	2300      	moveq	r3, #0
 800f954:	b2db      	uxtb	r3, r3
 800f956:	2b00      	cmp	r3, #0
 800f958:	d001      	beq.n	800f95e <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 800f95a:	f000 faa3 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f95e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f962:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800f964:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f968:	4619      	mov	r1, r3
 800f96a:	483e      	ldr	r0, [pc, #248]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f96c:	f00f fe96 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800f970:	4603      	mov	r3, r0
 800f972:	2b00      	cmp	r3, #0
 800f974:	bf14      	ite	ne
 800f976:	2301      	movne	r3, #1
 800f978:	2300      	moveq	r3, #0
 800f97a:	b2db      	uxtb	r3, r3
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d001      	beq.n	800f984 <_ZL13MX_TIM23_Initv+0x98>
  {
    Error_Handler();
 800f980:	f000 fa90 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800f984:	4837      	ldr	r0, [pc, #220]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f986:	f00e ff6a 	bl	801e85e <HAL_TIM_PWM_Init>
 800f98a:	4603      	mov	r3, r0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	bf14      	ite	ne
 800f990:	2301      	movne	r3, #1
 800f992:	2300      	moveq	r3, #0
 800f994:	b2db      	uxtb	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d001      	beq.n	800f99e <_ZL13MX_TIM23_Initv+0xb2>
  {
    Error_Handler();
 800f99a:	f000 fa83 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800f9a6:	f107 031c 	add.w	r3, r7, #28
 800f9aa:	4619      	mov	r1, r3
 800f9ac:	482d      	ldr	r0, [pc, #180]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f9ae:	f010 fe71 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800f9b2:	4603      	mov	r3, r0
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	bf14      	ite	ne
 800f9b8:	2301      	movne	r3, #1
 800f9ba:	2300      	moveq	r3, #0
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d001      	beq.n	800f9c6 <_ZL13MX_TIM23_Initv+0xda>
  {
    Error_Handler();
 800f9c2:	f000 fa6f 	bl	800fea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f9c6:	2360      	movs	r3, #96	; 0x60
 800f9c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f9ca:	2300      	movs	r3, #0
 800f9cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f9d6:	463b      	mov	r3, r7
 800f9d8:	2200      	movs	r2, #0
 800f9da:	4619      	mov	r1, r3
 800f9dc:	4821      	ldr	r0, [pc, #132]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f9de:	f00f fd49 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	bf14      	ite	ne
 800f9e8:	2301      	movne	r3, #1
 800f9ea:	2300      	moveq	r3, #0
 800f9ec:	b2db      	uxtb	r3, r3
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d001      	beq.n	800f9f6 <_ZL13MX_TIM23_Initv+0x10a>
  {
    Error_Handler();
 800f9f2:	f000 fa57 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f9f6:	463b      	mov	r3, r7
 800f9f8:	2204      	movs	r2, #4
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	4819      	ldr	r0, [pc, #100]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800f9fe:	f00f fd39 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	bf14      	ite	ne
 800fa08:	2301      	movne	r3, #1
 800fa0a:	2300      	moveq	r3, #0
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d001      	beq.n	800fa16 <_ZL13MX_TIM23_Initv+0x12a>
  {
    Error_Handler();
 800fa12:	f000 fa47 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fa16:	463b      	mov	r3, r7
 800fa18:	2208      	movs	r2, #8
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	4811      	ldr	r0, [pc, #68]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800fa1e:	f00f fd29 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800fa22:	4603      	mov	r3, r0
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	bf14      	ite	ne
 800fa28:	2301      	movne	r3, #1
 800fa2a:	2300      	moveq	r3, #0
 800fa2c:	b2db      	uxtb	r3, r3
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d001      	beq.n	800fa36 <_ZL13MX_TIM23_Initv+0x14a>
  {
    Error_Handler();
 800fa32:	f000 fa37 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fa36:	463b      	mov	r3, r7
 800fa38:	220c      	movs	r2, #12
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	4809      	ldr	r0, [pc, #36]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800fa3e:	f00f fd19 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bf14      	ite	ne
 800fa48:	2301      	movne	r3, #1
 800fa4a:	2300      	moveq	r3, #0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d001      	beq.n	800fa56 <_ZL13MX_TIM23_Initv+0x16a>
  {
    Error_Handler();
 800fa52:	f000 fa27 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 800fa56:	4803      	ldr	r0, [pc, #12]	; (800fa64 <_ZL13MX_TIM23_Initv+0x178>)
 800fa58:	f005 f8c6 	bl	8014be8 <HAL_TIM_MspPostInit>

}
 800fa5c:	bf00      	nop
 800fa5e:	3738      	adds	r7, #56	; 0x38
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}
 800fa64:	24001168 	.word	0x24001168
 800fa68:	4000e000 	.word	0x4000e000

0800fa6c <_ZL13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800fa6c:	b580      	push	{r7, lr}
 800fa6e:	b08e      	sub	sp, #56	; 0x38
 800fa70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800fa72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa76:	2200      	movs	r2, #0
 800fa78:	601a      	str	r2, [r3, #0]
 800fa7a:	605a      	str	r2, [r3, #4]
 800fa7c:	609a      	str	r2, [r3, #8]
 800fa7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800fa80:	f107 031c 	add.w	r3, r7, #28
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]
 800fa88:	605a      	str	r2, [r3, #4]
 800fa8a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800fa8c:	463b      	mov	r3, r7
 800fa8e:	2200      	movs	r2, #0
 800fa90:	601a      	str	r2, [r3, #0]
 800fa92:	605a      	str	r2, [r3, #4]
 800fa94:	609a      	str	r2, [r3, #8]
 800fa96:	60da      	str	r2, [r3, #12]
 800fa98:	611a      	str	r2, [r3, #16]
 800fa9a:	615a      	str	r2, [r3, #20]
 800fa9c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800fa9e:	4b51      	ldr	r3, [pc, #324]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800faa0:	4a51      	ldr	r2, [pc, #324]	; (800fbe8 <_ZL13MX_TIM24_Initv+0x17c>)
 800faa2:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800faa4:	4b4f      	ldr	r3, [pc, #316]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800faa6:	2200      	movs	r2, #0
 800faa8:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800faaa:	4b4e      	ldr	r3, [pc, #312]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800faac:	2200      	movs	r2, #0
 800faae:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 27500 - 1;
 800fab0:	4b4c      	ldr	r3, [pc, #304]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fab2:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800fab6:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800fab8:	4b4a      	ldr	r3, [pc, #296]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800faba:	2200      	movs	r2, #0
 800fabc:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800fabe:	4b49      	ldr	r3, [pc, #292]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fac0:	2200      	movs	r2, #0
 800fac2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800fac4:	4847      	ldr	r0, [pc, #284]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fac6:	f00e fd3f 	bl	801e548 <HAL_TIM_Base_Init>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	bf14      	ite	ne
 800fad0:	2301      	movne	r3, #1
 800fad2:	2300      	moveq	r3, #0
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d001      	beq.n	800fade <_ZL13MX_TIM24_Initv+0x72>
  {
    Error_Handler();
 800fada:	f000 f9e3 	bl	800fea4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fade:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fae2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800fae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fae8:	4619      	mov	r1, r3
 800faea:	483e      	ldr	r0, [pc, #248]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800faec:	f00f fdd6 	bl	801f69c <HAL_TIM_ConfigClockSource>
 800faf0:	4603      	mov	r3, r0
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	bf14      	ite	ne
 800faf6:	2301      	movne	r3, #1
 800faf8:	2300      	moveq	r3, #0
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d001      	beq.n	800fb04 <_ZL13MX_TIM24_Initv+0x98>
  {
    Error_Handler();
 800fb00:	f000 f9d0 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 800fb04:	4837      	ldr	r0, [pc, #220]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb06:	f00e feaa 	bl	801e85e <HAL_TIM_PWM_Init>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bf14      	ite	ne
 800fb10:	2301      	movne	r3, #1
 800fb12:	2300      	moveq	r3, #0
 800fb14:	b2db      	uxtb	r3, r3
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d001      	beq.n	800fb1e <_ZL13MX_TIM24_Initv+0xb2>
  {
    Error_Handler();
 800fb1a:	f000 f9c3 	bl	800fea4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fb1e:	2300      	movs	r3, #0
 800fb20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fb22:	2300      	movs	r3, #0
 800fb24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800fb26:	f107 031c 	add.w	r3, r7, #28
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	482d      	ldr	r0, [pc, #180]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb2e:	f010 fdb1 	bl	8020694 <HAL_TIMEx_MasterConfigSynchronization>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	bf14      	ite	ne
 800fb38:	2301      	movne	r3, #1
 800fb3a:	2300      	moveq	r3, #0
 800fb3c:	b2db      	uxtb	r3, r3
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d001      	beq.n	800fb46 <_ZL13MX_TIM24_Initv+0xda>
  {
    Error_Handler();
 800fb42:	f000 f9af 	bl	800fea4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fb46:	2360      	movs	r3, #96	; 0x60
 800fb48:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fb52:	2300      	movs	r3, #0
 800fb54:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fb56:	463b      	mov	r3, r7
 800fb58:	2200      	movs	r2, #0
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	4821      	ldr	r0, [pc, #132]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb5e:	f00f fc89 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800fb62:	4603      	mov	r3, r0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	bf14      	ite	ne
 800fb68:	2301      	movne	r3, #1
 800fb6a:	2300      	moveq	r3, #0
 800fb6c:	b2db      	uxtb	r3, r3
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d001      	beq.n	800fb76 <_ZL13MX_TIM24_Initv+0x10a>
  {
    Error_Handler();
 800fb72:	f000 f997 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800fb76:	463b      	mov	r3, r7
 800fb78:	2204      	movs	r2, #4
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	4819      	ldr	r0, [pc, #100]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb7e:	f00f fc79 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	bf14      	ite	ne
 800fb88:	2301      	movne	r3, #1
 800fb8a:	2300      	moveq	r3, #0
 800fb8c:	b2db      	uxtb	r3, r3
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d001      	beq.n	800fb96 <_ZL13MX_TIM24_Initv+0x12a>
  {
    Error_Handler();
 800fb92:	f000 f987 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800fb96:	463b      	mov	r3, r7
 800fb98:	2208      	movs	r2, #8
 800fb9a:	4619      	mov	r1, r3
 800fb9c:	4811      	ldr	r0, [pc, #68]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fb9e:	f00f fc69 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	bf14      	ite	ne
 800fba8:	2301      	movne	r3, #1
 800fbaa:	2300      	moveq	r3, #0
 800fbac:	b2db      	uxtb	r3, r3
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d001      	beq.n	800fbb6 <_ZL13MX_TIM24_Initv+0x14a>
  {
    Error_Handler();
 800fbb2:	f000 f977 	bl	800fea4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800fbb6:	463b      	mov	r3, r7
 800fbb8:	220c      	movs	r2, #12
 800fbba:	4619      	mov	r1, r3
 800fbbc:	4809      	ldr	r0, [pc, #36]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fbbe:	f00f fc59 	bl	801f474 <HAL_TIM_PWM_ConfigChannel>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	bf14      	ite	ne
 800fbc8:	2301      	movne	r3, #1
 800fbca:	2300      	moveq	r3, #0
 800fbcc:	b2db      	uxtb	r3, r3
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d001      	beq.n	800fbd6 <_ZL13MX_TIM24_Initv+0x16a>
  {
    Error_Handler();
 800fbd2:	f000 f967 	bl	800fea4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 800fbd6:	4803      	ldr	r0, [pc, #12]	; (800fbe4 <_ZL13MX_TIM24_Initv+0x178>)
 800fbd8:	f005 f806 	bl	8014be8 <HAL_TIM_MspPostInit>

}
 800fbdc:	bf00      	nop
 800fbde:	3738      	adds	r7, #56	; 0x38
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	bd80      	pop	{r7, pc}
 800fbe4:	240011b4 	.word	0x240011b4
 800fbe8:	4000e400 	.word	0x4000e400

0800fbec <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b082      	sub	sp, #8
 800fbf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fbf2:	4b0d      	ldr	r3, [pc, #52]	; (800fc28 <_ZL11MX_DMA_Initv+0x3c>)
 800fbf4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fbf8:	4a0b      	ldr	r2, [pc, #44]	; (800fc28 <_ZL11MX_DMA_Initv+0x3c>)
 800fbfa:	f043 0301 	orr.w	r3, r3, #1
 800fbfe:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fc02:	4b09      	ldr	r3, [pc, #36]	; (800fc28 <_ZL11MX_DMA_Initv+0x3c>)
 800fc04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fc08:	f003 0301 	and.w	r3, r3, #1
 800fc0c:	607b      	str	r3, [r7, #4]
 800fc0e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 800fc10:	2200      	movs	r2, #0
 800fc12:	2101      	movs	r1, #1
 800fc14:	200c      	movs	r0, #12
 800fc16:	f007 fcca 	bl	80175ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800fc1a:	200c      	movs	r0, #12
 800fc1c:	f007 fce1 	bl	80175e2 <HAL_NVIC_EnableIRQ>

}
 800fc20:	bf00      	nop
 800fc22:	3708      	adds	r7, #8
 800fc24:	46bd      	mov	sp, r7
 800fc26:	bd80      	pop	{r7, pc}
 800fc28:	58024400 	.word	0x58024400

0800fc2c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800fc2c:	b580      	push	{r7, lr}
 800fc2e:	b08e      	sub	sp, #56	; 0x38
 800fc30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fc36:	2200      	movs	r2, #0
 800fc38:	601a      	str	r2, [r3, #0]
 800fc3a:	605a      	str	r2, [r3, #4]
 800fc3c:	609a      	str	r2, [r3, #8]
 800fc3e:	60da      	str	r2, [r3, #12]
 800fc40:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fc42:	4b90      	ldr	r3, [pc, #576]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc48:	4a8e      	ldr	r2, [pc, #568]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc4a:	f043 0304 	orr.w	r3, r3, #4
 800fc4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc52:	4b8c      	ldr	r3, [pc, #560]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc58:	f003 0304 	and.w	r3, r3, #4
 800fc5c:	623b      	str	r3, [r7, #32]
 800fc5e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800fc60:	4b88      	ldr	r3, [pc, #544]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc66:	4a87      	ldr	r2, [pc, #540]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc68:	f043 0320 	orr.w	r3, r3, #32
 800fc6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc70:	4b84      	ldr	r3, [pc, #528]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc76:	f003 0320 	and.w	r3, r3, #32
 800fc7a:	61fb      	str	r3, [r7, #28]
 800fc7c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fc7e:	4b81      	ldr	r3, [pc, #516]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc84:	4a7f      	ldr	r2, [pc, #508]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc8e:	4b7d      	ldr	r3, [pc, #500]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc98:	61bb      	str	r3, [r7, #24]
 800fc9a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc9c:	4b79      	ldr	r3, [pc, #484]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fc9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fca2:	4a78      	ldr	r2, [pc, #480]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fca4:	f043 0301 	orr.w	r3, r3, #1
 800fca8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fcac:	4b75      	ldr	r3, [pc, #468]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fcae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcb2:	f003 0301 	and.w	r3, r3, #1
 800fcb6:	617b      	str	r3, [r7, #20]
 800fcb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fcba:	4b72      	ldr	r3, [pc, #456]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fcbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcc0:	4a70      	ldr	r2, [pc, #448]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fcc2:	f043 0310 	orr.w	r3, r3, #16
 800fcc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fcca:	4b6e      	ldr	r3, [pc, #440]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcd0:	f003 0310 	and.w	r3, r3, #16
 800fcd4:	613b      	str	r3, [r7, #16]
 800fcd6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fcd8:	4b6a      	ldr	r3, [pc, #424]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fcda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcde:	4a69      	ldr	r2, [pc, #420]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fce0:	f043 0302 	orr.w	r3, r3, #2
 800fce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fce8:	4b66      	ldr	r3, [pc, #408]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fcea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcee:	f003 0302 	and.w	r3, r3, #2
 800fcf2:	60fb      	str	r3, [r7, #12]
 800fcf4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fcf6:	4b63      	ldr	r3, [pc, #396]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fcf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fcfc:	4a61      	ldr	r2, [pc, #388]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fcfe:	f043 0308 	orr.w	r3, r3, #8
 800fd02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fd06:	4b5f      	ldr	r3, [pc, #380]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fd08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd0c:	f003 0308 	and.w	r3, r3, #8
 800fd10:	60bb      	str	r3, [r7, #8]
 800fd12:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800fd14:	4b5b      	ldr	r3, [pc, #364]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fd16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd1a:	4a5a      	ldr	r2, [pc, #360]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fd1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fd24:	4b57      	ldr	r3, [pc, #348]	; (800fe84 <_ZL12MX_GPIO_Initv+0x258>)
 800fd26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fd2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fd2e:	607b      	str	r3, [r7, #4]
 800fd30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800fd32:	2200      	movs	r2, #0
 800fd34:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800fd38:	4853      	ldr	r0, [pc, #332]	; (800fe88 <_ZL12MX_GPIO_Initv+0x25c>)
 800fd3a:	f00b f861 	bl	801ae00 <HAL_GPIO_WritePin>
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|SENSOR_OPEN_COLLECTOR_5_Pin, GPIO_PIN_RESET);
 800fd3e:	2200      	movs	r2, #0
 800fd40:	21c0      	movs	r1, #192	; 0xc0
 800fd42:	4852      	ldr	r0, [pc, #328]	; (800fe8c <_ZL12MX_GPIO_Initv+0x260>)
 800fd44:	f00b f85c 	bl	801ae00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800fd48:	2200      	movs	r2, #0
 800fd4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fd4e:	4850      	ldr	r0, [pc, #320]	; (800fe90 <_ZL12MX_GPIO_Initv+0x264>)
 800fd50:	f00b f856 	bl	801ae00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800fd54:	2200      	movs	r2, #0
 800fd56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fd5a:	484e      	ldr	r0, [pc, #312]	; (800fe94 <_ZL12MX_GPIO_Initv+0x268>)
 800fd5c:	f00b f850 	bl	801ae00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_OPEN_COLLECTOR_6_GPIO_Port, SENSOR_OPEN_COLLECTOR_6_Pin, GPIO_PIN_RESET);
 800fd60:	2200      	movs	r2, #0
 800fd62:	2180      	movs	r1, #128	; 0x80
 800fd64:	484c      	ldr	r0, [pc, #304]	; (800fe98 <_ZL12MX_GPIO_Initv+0x26c>)
 800fd66:	f00b f84b 	bl	801ae00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fd70:	4849      	ldr	r0, [pc, #292]	; (800fe98 <_ZL12MX_GPIO_Initv+0x26c>)
 800fd72:	f00b f845 	bl	801ae00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800fd76:	2200      	movs	r2, #0
 800fd78:	2102      	movs	r1, #2
 800fd7a:	4848      	ldr	r0, [pc, #288]	; (800fe9c <_ZL12MX_GPIO_Initv+0x270>)
 800fd7c:	f00b f840 	bl	801ae00 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_1_Pin SENSOR_OPEN_COLLECTOR_2_Pin SENSOR_OPEN_COLLECTOR_3_Pin SENSOR_OPEN_COLLECTOR_7_Pin
                           SENSOR_OPEN_COLLECTOR_8_Pin SENSOR_OPEN_COLLECTOR_9_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800fd80:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800fd84:	627b      	str	r3, [r7, #36]	; 0x24
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd86:	2301      	movs	r3, #1
 800fd88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd8a:	2302      	movs	r3, #2
 800fd8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd8e:	2300      	movs	r3, #0
 800fd90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fd92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd96:	4619      	mov	r1, r3
 800fd98:	483b      	ldr	r0, [pc, #236]	; (800fe88 <_ZL12MX_GPIO_Initv+0x25c>)
 800fd9a:	f00a fe71 	bl	801aa80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fd9e:	2340      	movs	r3, #64	; 0x40
 800fda0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fda2:	2301      	movs	r3, #1
 800fda4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fda6:	2300      	movs	r3, #0
 800fda8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fdaa:	2300      	movs	r3, #0
 800fdac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800fdae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdb2:	4619      	mov	r1, r3
 800fdb4:	4835      	ldr	r0, [pc, #212]	; (800fe8c <_ZL12MX_GPIO_Initv+0x260>)
 800fdb6:	f00a fe63 	bl	801aa80 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_OPEN_COLLECTOR_5_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_5_Pin;
 800fdba:	2380      	movs	r3, #128	; 0x80
 800fdbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fdbe:	2301      	movs	r3, #1
 800fdc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fdc2:	2302      	movs	r3, #2
 800fdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SENSOR_OPEN_COLLECTOR_5_GPIO_Port, &GPIO_InitStruct);
 800fdca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdce:	4619      	mov	r1, r3
 800fdd0:	482e      	ldr	r0, [pc, #184]	; (800fe8c <_ZL12MX_GPIO_Initv+0x260>)
 800fdd2:	f00a fe55 	bl	801aa80 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_1_Pin ACTUATOR_24V_3_Pin ACTUATOR_24V_2_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_1_Pin|ACTUATOR_24V_3_Pin|ACTUATOR_24V_2_Pin;
 800fdd6:	230e      	movs	r3, #14
 800fdd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fdda:	2300      	movs	r3, #0
 800fddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fdde:	2302      	movs	r3, #2
 800fde0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fde2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fde6:	4619      	mov	r1, r3
 800fde8:	4827      	ldr	r0, [pc, #156]	; (800fe88 <_ZL12MX_GPIO_Initv+0x25c>)
 800fdea:	f00a fe49 	bl	801aa80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fdee:	2340      	movs	r3, #64	; 0x40
 800fdf0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fdf2:	2303      	movs	r3, #3
 800fdf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fdfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdfe:	4619      	mov	r1, r3
 800fe00:	4827      	ldr	r0, [pc, #156]	; (800fea0 <_ZL12MX_GPIO_Initv+0x274>)
 800fe02:	f00a fe3d 	bl	801aa80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800fe06:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fe0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe0c:	2301      	movs	r3, #1
 800fe0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fe10:	2302      	movs	r3, #2
 800fe12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe14:	2300      	movs	r3, #0
 800fe16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fe18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe1c:	4619      	mov	r1, r3
 800fe1e:	481c      	ldr	r0, [pc, #112]	; (800fe90 <_ZL12MX_GPIO_Initv+0x264>)
 800fe20:	f00a fe2e 	bl	801aa80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800fe24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fe28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe2a:	2301      	movs	r3, #1
 800fe2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe32:	2300      	movs	r3, #0
 800fe34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fe36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe3a:	4619      	mov	r1, r3
 800fe3c:	4815      	ldr	r0, [pc, #84]	; (800fe94 <_ZL12MX_GPIO_Initv+0x268>)
 800fe3e:	f00a fe1f 	bl	801aa80 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_6_Pin OE_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_6_Pin|OE_Pin;
 800fe42:	f44f 7320 	mov.w	r3, #640	; 0x280
 800fe46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe48:	2301      	movs	r3, #1
 800fe4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fe4c:	2302      	movs	r3, #2
 800fe4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe50:	2300      	movs	r3, #0
 800fe52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fe54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe58:	4619      	mov	r1, r3
 800fe5a:	480f      	ldr	r0, [pc, #60]	; (800fe98 <_ZL12MX_GPIO_Initv+0x26c>)
 800fe5c:	f00a fe10 	bl	801aa80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800fe60:	2302      	movs	r3, #2
 800fe62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fe64:	2301      	movs	r3, #1
 800fe66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fe68:	2300      	movs	r3, #0
 800fe6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fe6c:	2300      	movs	r3, #0
 800fe6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800fe70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fe74:	4619      	mov	r1, r3
 800fe76:	4809      	ldr	r0, [pc, #36]	; (800fe9c <_ZL12MX_GPIO_Initv+0x270>)
 800fe78:	f00a fe02 	bl	801aa80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800fe7c:	bf00      	nop
 800fe7e:	3738      	adds	r7, #56	; 0x38
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}
 800fe84:	58024400 	.word	0x58024400
 800fe88:	58020800 	.word	0x58020800
 800fe8c:	58021400 	.word	0x58021400
 800fe90:	58020c00 	.word	0x58020c00
 800fe94:	58021800 	.word	0x58021800
 800fe98:	58020400 	.word	0x58020400
 800fe9c:	58021000 	.word	0x58021000
 800fea0:	58020000 	.word	0x58020000

0800fea4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fea4:	b480      	push	{r7}
 800fea6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800fea8:	b672      	cpsid	i
}
 800feaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800feac:	e7fe      	b.n	800feac <Error_Handler+0x8>

0800feae <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800feae:	b580      	push	{r7, lr}
 800feb0:	b082      	sub	sp, #8
 800feb2:	af00      	add	r7, sp, #0
 800feb4:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	f7fd fbbf 	bl	800d63c <_ZNKSt14_Function_base8_M_emptyEv>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d001      	beq.n	800fec8 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800fec4:	f010 fe11 	bl	8020aea <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	68db      	ldr	r3, [r3, #12]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	4610      	mov	r0, r2
 800fed0:	4798      	blx	r3
 800fed2:	bf00      	nop
    }
 800fed4:	3708      	adds	r7, #8
 800fed6:	46bd      	mov	sp, r7
 800fed8:	bd80      	pop	{r7, pc}

0800feda <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 800feda:	b580      	push	{r7, lr}
 800fedc:	b082      	sub	sp, #8
 800fede:	af00      	add	r7, sp, #0
 800fee0:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	4618      	mov	r0, r3
 800fee6:	f7fd fb88 	bl	800d5fa <_ZNSt14_Function_baseC1Ev>
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	4618      	mov	r0, r3
 800feee:	3708      	adds	r7, #8
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}

0800fef4 <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800fef4:	b580      	push	{r7, lr}
 800fef6:	b082      	sub	sp, #8
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
 800fefc:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800fefe:	6838      	ldr	r0, [r7, #0]
 800ff00:	f000 fb5a 	bl	80105b8 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>
 800ff04:	4603      	mov	r3, r0
 800ff06:	4619      	mov	r1, r3
 800ff08:	6878      	ldr	r0, [r7, #4]
 800ff0a:	f000 fb60 	bl	80105ce <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800ff0e:	bf00      	nop
 800ff10:	3708      	adds	r7, #8
 800ff12:	46bd      	mov	sp, r7
 800ff14:	bd80      	pop	{r7, pc}

0800ff16 <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 800ff16:	b580      	push	{r7, lr}
 800ff18:	b086      	sub	sp, #24
 800ff1a:	af00      	add	r7, sp, #0
 800ff1c:	6078      	str	r0, [r7, #4]
 800ff1e:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800ff20:	f107 0308 	add.w	r3, r7, #8
 800ff24:	6839      	ldr	r1, [r7, #0]
 800ff26:	4618      	mov	r0, r3
 800ff28:	f000 fb83 	bl	8010632 <_ZNSt8functionIFvvEEC1ERKS1_>
 800ff2c:	f107 0308 	add.w	r3, r7, #8
 800ff30:	6879      	ldr	r1, [r7, #4]
 800ff32:	4618      	mov	r0, r3
 800ff34:	f000 fb9f 	bl	8010676 <_ZNSt8functionIFvvEE4swapERS1_>
 800ff38:	f107 0308 	add.w	r3, r7, #8
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	f7fd fbe9 	bl	800d714 <_ZNSt8functionIFvvEED1Ev>
	return *this;
 800ff42:	687b      	ldr	r3, [r7, #4]
      }
 800ff44:	4618      	mov	r0, r3
 800ff46:	3718      	adds	r7, #24
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}

0800ff4c <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800ff54:	687a      	ldr	r2, [r7, #4]
 800ff56:	f107 030c 	add.w	r3, r7, #12
 800ff5a:	4611      	mov	r1, r2
 800ff5c:	4618      	mov	r0, r3
 800ff5e:	f000 fbab 	bl	80106b8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	4618      	mov	r0, r3
 800ff66:	3710      	adds	r7, #16
 800ff68:	46bd      	mov	sp, r7
 800ff6a:	bd80      	pop	{r7, pc}

0800ff6c <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b084      	sub	sp, #16
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	1d1a      	adds	r2, r3, #4
 800ff78:	f107 030c 	add.w	r3, r7, #12
 800ff7c:	4611      	mov	r1, r2
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f000 fb9a 	bl	80106b8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	4618      	mov	r0, r3
 800ff88:	3710      	adds	r7, #16
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	bd80      	pop	{r7, pc}
	...

0800ff90 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>:
      operator[](key_type&& __k)
 800ff90:	b590      	push	{r4, r7, lr}
 800ff92:	b08b      	sub	sp, #44	; 0x2c
 800ff94:	af02      	add	r7, sp, #8
 800ff96:	6078      	str	r0, [r7, #4]
 800ff98:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800ff9a:	6839      	ldr	r1, [r7, #0]
 800ff9c:	6878      	ldr	r0, [r7, #4]
 800ff9e:	f000 fb9b 	bl	80106d8 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>
 800ffa2:	4603      	mov	r3, r0
 800ffa4:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800ffa6:	6878      	ldr	r0, [r7, #4]
 800ffa8:	f000 fba5 	bl	80106f6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>
 800ffac:	4603      	mov	r3, r0
 800ffae:	60fb      	str	r3, [r7, #12]
 800ffb0:	f107 020c 	add.w	r2, r7, #12
 800ffb4:	f107 0308 	add.w	r3, r7, #8
 800ffb8:	4611      	mov	r1, r2
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7fa ffc4 	bl	800af48 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d112      	bne.n	800ffec <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x5c>
 800ffc6:	6878      	ldr	r0, [r7, #4]
 800ffc8:	f000 fba2 	bl	8010710 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>
 800ffcc:	f107 0308 	add.w	r3, r7, #8
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f000 fbaa 	bl	801072a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 800ffd6:	4603      	mov	r3, r0
 800ffd8:	461a      	mov	r2, r3
 800ffda:	f107 0310 	add.w	r3, r7, #16
 800ffde:	6839      	ldr	r1, [r7, #0]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f7fa ffc5 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d001      	beq.n	800fff0 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x60>
 800ffec:	2301      	movs	r3, #1
 800ffee:	e000      	b.n	800fff2 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x62>
 800fff0:	2300      	movs	r3, #0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d01f      	beq.n	8010036 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800fff6:	687c      	ldr	r4, [r7, #4]
 800fff8:	f107 0208 	add.w	r2, r7, #8
 800fffc:	f107 0314 	add.w	r3, r7, #20
 8010000:	4611      	mov	r1, r2
 8010002:	4618      	mov	r0, r3
 8010004:	f7fa ffc9 	bl	800af9a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					std::forward_as_tuple(std::move(__k)),
 8010008:	6838      	ldr	r0, [r7, #0]
 801000a:	f000 fb9c 	bl	8010746 <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>
 801000e:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010010:	f107 0318 	add.w	r3, r7, #24
 8010014:	4611      	mov	r1, r2
 8010016:	4618      	mov	r0, r3
 8010018:	f000 fba0 	bl	801075c <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>
 801001c:	f107 0218 	add.w	r2, r7, #24
 8010020:	f107 031c 	add.w	r3, r7, #28
 8010024:	9300      	str	r3, [sp, #0]
 8010026:	4613      	mov	r3, r2
 8010028:	4a08      	ldr	r2, [pc, #32]	; (801004c <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xbc>)
 801002a:	6979      	ldr	r1, [r7, #20]
 801002c:	4620      	mov	r0, r4
 801002e:	f000 fba6 	bl	801077e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 8010032:	4603      	mov	r3, r0
 8010034:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8010036:	f107 0308 	add.w	r3, r7, #8
 801003a:	4618      	mov	r0, r3
 801003c:	f000 fb75 	bl	801072a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 8010040:	4603      	mov	r3, r0
 8010042:	3304      	adds	r3, #4
      }
 8010044:	4618      	mov	r0, r3
 8010046:	3724      	adds	r7, #36	; 0x24
 8010048:	46bd      	mov	sp, r7
 801004a:	bd90      	pop	{r4, r7, pc}
 801004c:	080210a4 	.word	0x080210a4

08010050 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 8010050:	b5b0      	push	{r4, r5, r7, lr}
 8010052:	b082      	sub	sp, #8
 8010054:	af00      	add	r7, sp, #0
 8010056:	6078      	str	r0, [r7, #4]
 8010058:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 801005a:	687c      	ldr	r4, [r7, #4]
 801005c:	6838      	ldr	r0, [r7, #0]
 801005e:	f000 fbcc 	bl	80107fa <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8010062:	4603      	mov	r3, r0
 8010064:	461a      	mov	r2, r3
 8010066:	4629      	mov	r1, r5
 8010068:	4620      	mov	r0, r4
 801006a:	f000 fbe2 	bl	8010832 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	4618      	mov	r0, r3
 8010072:	3708      	adds	r7, #8
 8010074:	46bd      	mov	sp, r7
 8010076:	bdb0      	pop	{r4, r5, r7, pc}

08010078 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8010078:	b480      	push	{r7}
 801007a:	b083      	sub	sp, #12
 801007c:	af00      	add	r7, sp, #0
 801007e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	685a      	ldr	r2, [r3, #4]
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	1ad3      	subs	r3, r2, r3
 801008a:	109b      	asrs	r3, r3, #2
 801008c:	4618      	mov	r0, r3
 801008e:	370c      	adds	r7, #12
 8010090:	46bd      	mov	sp, r7
 8010092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010096:	4770      	bx	lr

08010098 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010098:	b580      	push	{r7, lr}
 801009a:	b082      	sub	sp, #8
 801009c:	af00      	add	r7, sp, #0
 801009e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80100a0:	6878      	ldr	r0, [r7, #4]
 80100a2:	f000 fbdb 	bl	801085c <_ZNSaIP13StreamMessageEC1Ev>
 80100a6:	687b      	ldr	r3, [r7, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f000 fbe3 	bl	8010874 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	4618      	mov	r0, r3
 80100b2:	3708      	adds	r7, #8
 80100b4:	46bd      	mov	sp, r7
 80100b6:	bd80      	pop	{r7, pc}

080100b8 <_ZNSaIP13StreamMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
 80100be:	6078      	str	r0, [r7, #4]
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	4618      	mov	r0, r3
 80100c4:	370c      	adds	r7, #12
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr

080100ce <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80100ce:	b580      	push	{r7, lr}
 80100d0:	b082      	sub	sp, #8
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	689a      	ldr	r2, [r3, #8]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80100e6:	461a      	mov	r2, r3
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	f000 fbd7 	bl	801089c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      }
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fd fe7e 	bl	800ddf2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	4618      	mov	r0, r3
 80100fa:	3708      	adds	r7, #8
 80100fc:	46bd      	mov	sp, r7
 80100fe:	bd80      	pop	{r7, pc}

08010100 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010100:	b5b0      	push	{r4, r5, r7, lr}
 8010102:	b082      	sub	sp, #8
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681c      	ldr	r4, [r3, #0]
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	4618      	mov	r0, r3
 8010114:	f000 fbd5 	bl	80108c2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010118:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 801011a:	461a      	mov	r2, r3
 801011c:	4629      	mov	r1, r5
 801011e:	4620      	mov	r0, r4
 8010120:	f000 fbda 	bl	80108d8 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>
      }
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff ffd1 	bl	80100ce <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	4618      	mov	r0, r3
 8010130:	3708      	adds	r7, #8
 8010132:	46bd      	mov	sp, r7
 8010134:	bdb0      	pop	{r4, r5, r7, pc}

08010136 <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8010136:	b580      	push	{r7, lr}
 8010138:	b082      	sub	sp, #8
 801013a:	af00      	add	r7, sp, #0
 801013c:	6078      	str	r0, [r7, #4]
 801013e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010140:	6838      	ldr	r0, [r7, #0]
 8010142:	f000 fbd7 	bl	80108f4 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>
 8010146:	4603      	mov	r3, r0
 8010148:	4619      	mov	r1, r3
 801014a:	6878      	ldr	r0, [r7, #4]
 801014c:	f000 fbdd 	bl	801090a <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8010150:	bf00      	nop
 8010152:	3708      	adds	r7, #8
 8010154:	46bd      	mov	sp, r7
 8010156:	bd80      	pop	{r7, pc}

08010158 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8010158:	b580      	push	{r7, lr}
 801015a:	b084      	sub	sp, #16
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	f107 030c 	add.w	r3, r7, #12
 8010166:	4611      	mov	r1, r2
 8010168:	4618      	mov	r0, r3
 801016a:	f000 fc00 	bl	801096e <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801016e:	68fb      	ldr	r3, [r7, #12]
 8010170:	4618      	mov	r0, r3
 8010172:	3710      	adds	r7, #16
 8010174:	46bd      	mov	sp, r7
 8010176:	bd80      	pop	{r7, pc}

08010178 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8010178:	b580      	push	{r7, lr}
 801017a:	b084      	sub	sp, #16
 801017c:	af00      	add	r7, sp, #0
 801017e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	1d1a      	adds	r2, r3, #4
 8010184:	f107 030c 	add.w	r3, r7, #12
 8010188:	4611      	mov	r1, r2
 801018a:	4618      	mov	r0, r3
 801018c:	f000 fbef 	bl	801096e <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	4618      	mov	r0, r3
 8010194:	3710      	adds	r7, #16
 8010196:	46bd      	mov	sp, r7
 8010198:	bd80      	pop	{r7, pc}

0801019a <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 801019a:	b580      	push	{r7, lr}
 801019c:	b082      	sub	sp, #8
 801019e:	af00      	add	r7, sp, #0
 80101a0:	6078      	str	r0, [r7, #4]
 80101a2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	685a      	ldr	r2, [r3, #4]
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	689b      	ldr	r3, [r3, #8]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d00c      	beq.n	80101ca <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80101b0:	6878      	ldr	r0, [r7, #4]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	685b      	ldr	r3, [r3, #4]
 80101b6:	683a      	ldr	r2, [r7, #0]
 80101b8:	4619      	mov	r1, r3
 80101ba:	f000 fbfd 	bl	80109b8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	685b      	ldr	r3, [r3, #4]
 80101c2:	1d1a      	adds	r2, r3, #4
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	605a      	str	r2, [r3, #4]
      }
 80101c8:	e008      	b.n	80101dc <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 80101ca:	6878      	ldr	r0, [r7, #4]
 80101cc:	f7ff ffd4 	bl	8010178 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 80101d0:	4603      	mov	r3, r0
 80101d2:	683a      	ldr	r2, [r7, #0]
 80101d4:	4619      	mov	r1, r3
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	f000 fc00 	bl	80109dc <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80101dc:	bf00      	nop
 80101de:	3708      	adds	r7, #8
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 80101e4:	b590      	push	{r4, r7, lr}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
      : _Function_base()
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7fd fa02 	bl	800d5fa <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80101f6:	463b      	mov	r3, r7
 80101f8:	4618      	mov	r0, r3
 80101fa:	f000 fc6b 	bl	8010ad4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>
 80101fe:	4603      	mov	r3, r0
 8010200:	2b00      	cmp	r3, #0
 8010202:	d00f      	beq.n	8010224 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010204:	687c      	ldr	r4, [r7, #4]
 8010206:	463b      	mov	r3, r7
 8010208:	4618      	mov	r0, r3
 801020a:	f000 fc6e 	bl	8010aea <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 801020e:	4603      	mov	r3, r0
 8010210:	4619      	mov	r1, r3
 8010212:	4620      	mov	r0, r4
 8010214:	f000 fc74 	bl	8010b00 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	4a05      	ldr	r2, [pc, #20]	; (8010230 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x4c>)
 801021c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4a04      	ldr	r2, [pc, #16]	; (8010234 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x50>)
 8010222:	609a      	str	r2, [r3, #8]
      }
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	4618      	mov	r0, r3
 8010228:	370c      	adds	r7, #12
 801022a:	46bd      	mov	sp, r7
 801022c:	bd90      	pop	{r4, r7, pc}
 801022e:	bf00      	nop
 8010230:	08010b25 	.word	0x08010b25
 8010234:	08010b43 	.word	0x08010b43

08010238 <_ZNKSt8optionalIP13StreamMessageEcvbEv>:
      constexpr explicit operator bool() const noexcept
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8010240:	6878      	ldr	r0, [r7, #4]
 8010242:	f7fd ff0e 	bl	800e062 <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 8010246:	4603      	mov	r3, r0
 8010248:	4618      	mov	r0, r3
 801024a:	3708      	adds	r7, #8
 801024c:	46bd      	mov	sp, r7
 801024e:	bd80      	pop	{r7, pc}

08010250 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8010250:	b580      	push	{r7, lr}
 8010252:	b082      	sub	sp, #8
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	4618      	mov	r0, r3
 801025c:	f000 fc90 	bl	8010b80 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>
 8010260:	4603      	mov	r3, r0
      }
 8010262:	4618      	mov	r0, r3
 8010264:	3708      	adds	r7, #8
 8010266:	46bd      	mov	sp, r7
 8010268:	bd80      	pop	{r7, pc}

0801026a <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801026a:	b580      	push	{r7, lr}
 801026c:	b084      	sub	sp, #16
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010272:	687a      	ldr	r2, [r7, #4]
 8010274:	f107 030c 	add.w	r3, r7, #12
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f000 fc8b 	bl	8010b96 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	4618      	mov	r0, r3
 8010284:	3710      	adds	r7, #16
 8010286:	46bd      	mov	sp, r7
 8010288:	bd80      	pop	{r7, pc}

0801028a <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801028a:	b580      	push	{r7, lr}
 801028c:	b084      	sub	sp, #16
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	1d1a      	adds	r2, r3, #4
 8010296:	f107 030c 	add.w	r3, r7, #12
 801029a:	4611      	mov	r1, r2
 801029c:	4618      	mov	r0, r3
 801029e:	f000 fc7a 	bl	8010b96 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	4618      	mov	r0, r3
 80102a6:	3710      	adds	r7, #16
 80102a8:	46bd      	mov	sp, r7
 80102aa:	bd80      	pop	{r7, pc}

080102ac <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80102ac:	b580      	push	{r7, lr}
 80102ae:	b082      	sub	sp, #8
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 fc8e 	bl	8010bd6 <_ZNSaIP5FieldIJEEED1Ev>
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	4618      	mov	r0, r3
 80102be:	3708      	adds	r7, #8
 80102c0:	46bd      	mov	sp, r7
 80102c2:	bd80      	pop	{r7, pc}

080102c4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>:
      _Vector_base() = default;
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b082      	sub	sp, #8
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	6078      	str	r0, [r7, #4]
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	4618      	mov	r0, r3
 80102d0:	f000 fc71 	bl	8010bb6 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	4618      	mov	r0, r3
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>:
      vector() = default;
 80102de:	b580      	push	{r7, lr}
 80102e0:	b082      	sub	sp, #8
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7ff ffeb 	bl	80102c4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4618      	mov	r0, r3
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}

080102f8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80102f8:	b590      	push	{r4, r7, lr}
 80102fa:	b085      	sub	sp, #20
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	607a      	str	r2, [r7, #4]
 8010302:	603b      	str	r3, [r7, #0]
 8010304:	460b      	mov	r3, r1
 8010306:	817b      	strh	r3, [r7, #10]
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2200      	movs	r2, #0
 801030c:	601a      	str	r2, [r3, #0]
 801030e:	897a      	ldrh	r2, [r7, #10]
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	809a      	strh	r2, [r3, #4]
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	3308      	adds	r3, #8
 8010318:	4618      	mov	r0, r3
 801031a:	f7ff ffe0 	bl	80102de <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	687a      	ldr	r2, [r7, #4]
 8010322:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010324:	6839      	ldr	r1, [r7, #0]
 8010326:	68f8      	ldr	r0, [r7, #12]
 8010328:	f000 fc94 	bl	8010c54 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 801032c:	68fc      	ldr	r4, [r7, #12]
 801032e:	f107 030a 	add.w	r3, r7, #10
 8010332:	4619      	mov	r1, r3
 8010334:	4804      	ldr	r0, [pc, #16]	; (8010348 <_ZN6PacketC1IJhEEEtPFvvEDpPT_+0x50>)
 8010336:	f000 fcb1 	bl	8010c9c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 801033a:	4603      	mov	r3, r0
 801033c:	601c      	str	r4, [r3, #0]
    }
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	4618      	mov	r0, r3
 8010342:	3714      	adds	r7, #20
 8010344:	46bd      	mov	sp, r7
 8010346:	bd90      	pop	{r4, r7, pc}
 8010348:	240001d4 	.word	0x240001d4

0801034c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 801034c:	b590      	push	{r4, r7, lr}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	60f8      	str	r0, [r7, #12]
 8010354:	607a      	str	r2, [r7, #4]
 8010356:	603b      	str	r3, [r7, #0]
 8010358:	460b      	mov	r3, r1
 801035a:	817b      	strh	r3, [r7, #10]
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2200      	movs	r2, #0
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	897a      	ldrh	r2, [r7, #10]
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	809a      	strh	r2, [r3, #4]
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	3308      	adds	r3, #8
 801036c:	4618      	mov	r0, r3
 801036e:	f7ff ffb6 	bl	80102de <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010378:	6a3a      	ldr	r2, [r7, #32]
 801037a:	6839      	ldr	r1, [r7, #0]
 801037c:	68f8      	ldr	r0, [r7, #12]
 801037e:	f000 fce9 	bl	8010d54 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010382:	68fc      	ldr	r4, [r7, #12]
 8010384:	f107 030a 	add.w	r3, r7, #10
 8010388:	4619      	mov	r1, r3
 801038a:	4805      	ldr	r0, [pc, #20]	; (80103a0 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_+0x54>)
 801038c:	f000 fc86 	bl	8010c9c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010390:	4603      	mov	r3, r0
 8010392:	601c      	str	r4, [r3, #0]
    }
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	4618      	mov	r0, r3
 8010398:	3714      	adds	r7, #20
 801039a:	46bd      	mov	sp, r7
 801039c:	bd90      	pop	{r4, r7, pc}
 801039e:	bf00      	nop
 80103a0:	240001d4 	.word	0x240001d4

080103a4 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80103a4:	b590      	push	{r4, r7, lr}
 80103a6:	b085      	sub	sp, #20
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	60f8      	str	r0, [r7, #12]
 80103ac:	607a      	str	r2, [r7, #4]
 80103ae:	603b      	str	r3, [r7, #0]
 80103b0:	460b      	mov	r3, r1
 80103b2:	817b      	strh	r3, [r7, #10]
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	2200      	movs	r2, #0
 80103b8:	601a      	str	r2, [r3, #0]
 80103ba:	897a      	ldrh	r2, [r7, #10]
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	809a      	strh	r2, [r3, #4]
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	3308      	adds	r3, #8
 80103c4:	4618      	mov	r0, r3
 80103c6:	f7ff ff8a 	bl	80102de <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	687a      	ldr	r2, [r7, #4]
 80103ce:	615a      	str	r2, [r3, #20]
        build(fields...);
 80103d0:	6a3a      	ldr	r2, [r7, #32]
 80103d2:	6839      	ldr	r1, [r7, #0]
 80103d4:	68f8      	ldr	r0, [r7, #12]
 80103d6:	f000 fce5 	bl	8010da4 <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 80103da:	68fc      	ldr	r4, [r7, #12]
 80103dc:	f107 030a 	add.w	r3, r7, #10
 80103e0:	4619      	mov	r1, r3
 80103e2:	4805      	ldr	r0, [pc, #20]	; (80103f8 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_+0x54>)
 80103e4:	f000 fc5a 	bl	8010c9c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 80103e8:	4603      	mov	r3, r0
 80103ea:	601c      	str	r4, [r3, #0]
    }
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	4618      	mov	r0, r3
 80103f0:	3714      	adds	r7, #20
 80103f2:	46bd      	mov	sp, r7
 80103f4:	bd90      	pop	{r4, r7, pc}
 80103f6:	bf00      	nop
 80103f8:	240001d4 	.word	0x240001d4

080103fc <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80103fc:	b590      	push	{r4, r7, lr}
 80103fe:	b085      	sub	sp, #20
 8010400:	af00      	add	r7, sp, #0
 8010402:	60f8      	str	r0, [r7, #12]
 8010404:	607a      	str	r2, [r7, #4]
 8010406:	603b      	str	r3, [r7, #0]
 8010408:	460b      	mov	r3, r1
 801040a:	817b      	strh	r3, [r7, #10]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2200      	movs	r2, #0
 8010410:	601a      	str	r2, [r3, #0]
 8010412:	897a      	ldrh	r2, [r7, #10]
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	809a      	strh	r2, [r3, #4]
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	3308      	adds	r3, #8
 801041c:	4618      	mov	r0, r3
 801041e:	f7ff ff5e 	bl	80102de <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010422:	68fb      	ldr	r3, [r7, #12]
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010428:	6a3a      	ldr	r2, [r7, #32]
 801042a:	6839      	ldr	r1, [r7, #0]
 801042c:	68f8      	ldr	r0, [r7, #12]
 801042e:	f000 fce1 	bl	8010df4 <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010432:	68fc      	ldr	r4, [r7, #12]
 8010434:	f107 030a 	add.w	r3, r7, #10
 8010438:	4619      	mov	r1, r3
 801043a:	4805      	ldr	r0, [pc, #20]	; (8010450 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_+0x54>)
 801043c:	f000 fc2e 	bl	8010c9c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010440:	4603      	mov	r3, r0
 8010442:	601c      	str	r4, [r3, #0]
    }
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	4618      	mov	r0, r3
 8010448:	3714      	adds	r7, #20
 801044a:	46bd      	mov	sp, r7
 801044c:	bd90      	pop	{r4, r7, pc}
 801044e:	bf00      	nop
 8010450:	240001d4 	.word	0x240001d4

08010454 <_ZNKSt8optionalIP3PinEcvbEv>:
      constexpr explicit operator bool() const noexcept
 8010454:	b580      	push	{r7, lr}
 8010456:	b082      	sub	sp, #8
 8010458:	af00      	add	r7, sp, #0
 801045a:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f7fd feff 	bl	800e260 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 8010462:	4603      	mov	r3, r0
 8010464:	4618      	mov	r0, r3
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}

0801046c <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 801046c:	b580      	push	{r7, lr}
 801046e:	b082      	sub	sp, #8
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	f000 fce4 	bl	8010e44 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>
 801047c:	4603      	mov	r3, r0
      }
 801047e:	4618      	mov	r0, r3
 8010480:	3708      	adds	r7, #8
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 8010486:	b580      	push	{r7, lr}
 8010488:	b084      	sub	sp, #16
 801048a:	af00      	add	r7, sp, #0
 801048c:	6078      	str	r0, [r7, #4]
 801048e:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6839      	ldr	r1, [r7, #0]
 8010494:	4618      	mov	r0, r3
 8010496:	f000 fce0 	bl	8010e5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 801049a:	4603      	mov	r3, r0
 801049c:	60bb      	str	r3, [r7, #8]
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	4618      	mov	r0, r3
 80104a2:	f000 fd19 	bl	8010ed8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80104a6:	4603      	mov	r3, r0
 80104a8:	60fb      	str	r3, [r7, #12]
 80104aa:	f107 020c 	add.w	r2, r7, #12
 80104ae:	f107 0308 	add.w	r3, r7, #8
 80104b2:	4611      	mov	r1, r2
 80104b4:	4618      	mov	r0, r3
 80104b6:	f000 fd20 	bl	8010efa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 80104ba:	4603      	mov	r3, r0
 80104bc:	f083 0301 	eor.w	r3, r3, #1
 80104c0:	b2db      	uxtb	r3, r3
 80104c2:	4618      	mov	r0, r3
 80104c4:	3710      	adds	r7, #16
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}

080104ca <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b084      	sub	sp, #16
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	6839      	ldr	r1, [r7, #0]
 80104d8:	4618      	mov	r0, r3
 80104da:	f000 fd22 	bl	8010f22 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80104de:	4603      	mov	r3, r0
 80104e0:	60bb      	str	r3, [r7, #8]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	4618      	mov	r0, r3
 80104e6:	f000 fd5b 	bl	8010fa0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80104ea:	4603      	mov	r3, r0
 80104ec:	60fb      	str	r3, [r7, #12]
 80104ee:	f107 020c 	add.w	r2, r7, #12
 80104f2:	f107 0308 	add.w	r3, r7, #8
 80104f6:	4611      	mov	r1, r2
 80104f8:	4618      	mov	r0, r3
 80104fa:	f000 fd62 	bl	8010fc2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 80104fe:	4603      	mov	r3, r0
 8010500:	f083 0301 	eor.w	r3, r3, #1
 8010504:	b2db      	uxtb	r3, r3
 8010506:	4618      	mov	r0, r3
 8010508:	3710      	adds	r7, #16
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
	...

08010510 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010510:	b590      	push	{r4, r7, lr}
 8010512:	b083      	sub	sp, #12
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
 8010518:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	4618      	mov	r0, r3
 801051e:	f7fd f86c 	bl	800d5fa <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8010522:	463b      	mov	r3, r7
 8010524:	4618      	mov	r0, r3
 8010526:	f000 fd60 	bl	8010fea <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>
 801052a:	4603      	mov	r3, r0
 801052c:	2b00      	cmp	r3, #0
 801052e:	d00f      	beq.n	8010550 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010530:	687c      	ldr	r4, [r7, #4]
 8010532:	463b      	mov	r3, r7
 8010534:	4618      	mov	r0, r3
 8010536:	f000 fd63 	bl	8011000 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 801053a:	4603      	mov	r3, r0
 801053c:	4619      	mov	r1, r3
 801053e:	4620      	mov	r0, r4
 8010540:	f000 fd69 	bl	8011016 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	4a05      	ldr	r2, [pc, #20]	; (801055c <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x4c>)
 8010548:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	4a04      	ldr	r2, [pc, #16]	; (8010560 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x50>)
 801054e:	609a      	str	r2, [r3, #8]
      }
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	370c      	adds	r7, #12
 8010556:	46bd      	mov	sp, r7
 8010558:	bd90      	pop	{r4, r7, pc}
 801055a:	bf00      	nop
 801055c:	0801103b 	.word	0x0801103b
 8010560:	08011059 	.word	0x08011059

08010564 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010564:	b590      	push	{r4, r7, lr}
 8010566:	b083      	sub	sp, #12
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
 801056c:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	f7fd f842 	bl	800d5fa <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8010576:	463b      	mov	r3, r7
 8010578:	4618      	mov	r0, r3
 801057a:	f000 fd8c 	bl	8011096 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>
 801057e:	4603      	mov	r3, r0
 8010580:	2b00      	cmp	r3, #0
 8010582:	d00f      	beq.n	80105a4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010584:	687c      	ldr	r4, [r7, #4]
 8010586:	463b      	mov	r3, r7
 8010588:	4618      	mov	r0, r3
 801058a:	f000 fd8f 	bl	80110ac <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 801058e:	4603      	mov	r3, r0
 8010590:	4619      	mov	r1, r3
 8010592:	4620      	mov	r0, r4
 8010594:	f000 fd95 	bl	80110c2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	4a05      	ldr	r2, [pc, #20]	; (80105b0 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x4c>)
 801059c:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	4a04      	ldr	r2, [pc, #16]	; (80105b4 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x50>)
 80105a2:	609a      	str	r2, [r3, #8]
      }
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	370c      	adds	r7, #12
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd90      	pop	{r4, r7, pc}
 80105ae:	bf00      	nop
 80105b0:	080110e7 	.word	0x080110e7
 80105b4:	08011105 	.word	0x08011105

080105b8 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80105b8:	b480      	push	{r7}
 80105ba:	b083      	sub	sp, #12
 80105bc:	af00      	add	r7, sp, #0
 80105be:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	4618      	mov	r0, r3
 80105c4:	370c      	adds	r7, #12
 80105c6:	46bd      	mov	sp, r7
 80105c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105cc:	4770      	bx	lr

080105ce <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80105ce:	b5b0      	push	{r4, r5, r7, lr}
 80105d0:	b082      	sub	sp, #8
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
 80105d6:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	685a      	ldr	r2, [r3, #4]
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	689b      	ldr	r3, [r3, #8]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d011      	beq.n	8010608 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80105e4:	687c      	ldr	r4, [r7, #4]
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	685d      	ldr	r5, [r3, #4]
 80105ea:	6838      	ldr	r0, [r7, #0]
 80105ec:	f000 fda9 	bl	8011142 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80105f0:	4603      	mov	r3, r0
 80105f2:	461a      	mov	r2, r3
 80105f4:	4629      	mov	r1, r5
 80105f6:	4620      	mov	r0, r4
 80105f8:	f000 fdc3 	bl	8011182 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	1d1a      	adds	r2, r3, #4
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	605a      	str	r2, [r3, #4]
 8010606:	e00c      	b.n	8010622 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010608:	6878      	ldr	r0, [r7, #4]
 801060a:	f7ff fcaf 	bl	800ff6c <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 801060e:	4604      	mov	r4, r0
 8010610:	6838      	ldr	r0, [r7, #0]
 8010612:	f000 fd96 	bl	8011142 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010616:	4603      	mov	r3, r0
 8010618:	461a      	mov	r2, r3
 801061a:	4621      	mov	r1, r4
 801061c:	6878      	ldr	r0, [r7, #4]
 801061e:	f000 fdc3 	bl	80111a8 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010622:	6878      	ldr	r0, [r7, #4]
 8010624:	f000 fe3c 	bl	80112a0 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>
 8010628:	4603      	mov	r3, r0
      }
 801062a:	4618      	mov	r0, r3
 801062c:	3708      	adds	r7, #8
 801062e:	46bd      	mov	sp, r7
 8010630:	bdb0      	pop	{r4, r5, r7, pc}

08010632 <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 8010632:	b580      	push	{r7, lr}
 8010634:	b082      	sub	sp, #8
 8010636:	af00      	add	r7, sp, #0
 8010638:	6078      	str	r0, [r7, #4]
 801063a:	6039      	str	r1, [r7, #0]
    : _Function_base()
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	4618      	mov	r0, r3
 8010640:	f7fc ffdb 	bl	800d5fa <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 8010644:	6838      	ldr	r0, [r7, #0]
 8010646:	f000 fe46 	bl	80112d6 <_ZNKSt8functionIFvvEEcvbEv>
 801064a:	4603      	mov	r3, r0
 801064c:	2b00      	cmp	r3, #0
 801064e:	d00d      	beq.n	801066c <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010650:	683b      	ldr	r3, [r7, #0]
 8010652:	689b      	ldr	r3, [r3, #8]
 8010654:	6878      	ldr	r0, [r7, #4]
 8010656:	6839      	ldr	r1, [r7, #0]
 8010658:	2202      	movs	r2, #2
 801065a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	68da      	ldr	r2, [r3, #12]
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 8010664:	683b      	ldr	r3, [r7, #0]
 8010666:	689a      	ldr	r2, [r3, #8]
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	609a      	str	r2, [r3, #8]
    }
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	4618      	mov	r0, r3
 8010670:	3708      	adds	r7, #8
 8010672:	46bd      	mov	sp, r7
 8010674:	bd80      	pop	{r7, pc}

08010676 <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 8010676:	b580      	push	{r7, lr}
 8010678:	b082      	sub	sp, #8
 801067a:	af00      	add	r7, sp, #0
 801067c:	6078      	str	r0, [r7, #4]
 801067e:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	683a      	ldr	r2, [r7, #0]
 8010684:	4611      	mov	r1, r2
 8010686:	4618      	mov	r0, r3
 8010688:	f000 fe35 	bl	80112f6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	f103 0208 	add.w	r2, r3, #8
 8010692:	683b      	ldr	r3, [r7, #0]
 8010694:	3308      	adds	r3, #8
 8010696:	4619      	mov	r1, r3
 8010698:	4610      	mov	r0, r2
 801069a:	f000 fe53 	bl	8011344 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f103 020c 	add.w	r2, r3, #12
 80106a4:	683b      	ldr	r3, [r7, #0]
 80106a6:	330c      	adds	r3, #12
 80106a8:	4619      	mov	r1, r3
 80106aa:	4610      	mov	r0, r2
 80106ac:	f000 fe69 	bl	8011382 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80106b0:	bf00      	nop
 80106b2:	3708      	adds	r7, #8
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80106b8:	b480      	push	{r7}
 80106ba:	b083      	sub	sp, #12
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80106c2:	683b      	ldr	r3, [r7, #0]
 80106c4:	681a      	ldr	r2, [r3, #0]
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	601a      	str	r2, [r3, #0]
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4618      	mov	r0, r3
 80106ce:	370c      	adds	r7, #12
 80106d0:	46bd      	mov	sp, r7
 80106d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106d6:	4770      	bx	lr

080106d8 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 80106d8:	b580      	push	{r7, lr}
 80106da:	b082      	sub	sp, #8
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	6839      	ldr	r1, [r7, #0]
 80106e6:	4618      	mov	r0, r3
 80106e8:	f000 fe6a 	bl	80113c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>
 80106ec:	4603      	mov	r3, r0
 80106ee:	4618      	mov	r0, r3
 80106f0:	3708      	adds	r7, #8
 80106f2:	46bd      	mov	sp, r7
 80106f4:	bd80      	pop	{r7, pc}

080106f6 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80106f6:	b580      	push	{r7, lr}
 80106f8:	b082      	sub	sp, #8
 80106fa:	af00      	add	r7, sp, #0
 80106fc:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	4618      	mov	r0, r3
 8010702:	f7fa fd44 	bl	800b18e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 8010706:	4603      	mov	r3, r0
 8010708:	4618      	mov	r0, r3
 801070a:	3708      	adds	r7, #8
 801070c:	46bd      	mov	sp, r7
 801070e:	bd80      	pop	{r7, pc}

08010710 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>:
      key_comp() const
 8010710:	b590      	push	{r4, r7, lr}
 8010712:	b083      	sub	sp, #12
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	4618      	mov	r0, r3
 801071c:	f000 fe67 	bl	80113ee <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>
 8010720:	bf00      	nop
 8010722:	4620      	mov	r0, r4
 8010724:	370c      	adds	r7, #12
 8010726:	46bd      	mov	sp, r7
 8010728:	bd90      	pop	{r4, r7, pc}

0801072a <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 801072a:	b580      	push	{r7, lr}
 801072c:	b082      	sub	sp, #8
 801072e:	af00      	add	r7, sp, #0
 8010730:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	4618      	mov	r0, r3
 8010738:	f7fa fd3a 	bl	800b1b0 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 801073c:	4603      	mov	r3, r0
 801073e:	4618      	mov	r0, r3
 8010740:	3708      	adds	r7, #8
 8010742:	46bd      	mov	sp, r7
 8010744:	bd80      	pop	{r7, pc}

08010746 <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8010746:	b480      	push	{r7}
 8010748:	b083      	sub	sp, #12
 801074a:	af00      	add	r7, sp, #0
 801074c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	4618      	mov	r0, r3
 8010752:	370c      	adds	r7, #12
 8010754:	46bd      	mov	sp, r7
 8010756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801075a:	4770      	bx	lr

0801075c <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 801075c:	b580      	push	{r7, lr}
 801075e:	b082      	sub	sp, #8
 8010760:	af00      	add	r7, sp, #0
 8010762:	6078      	str	r0, [r7, #4]
 8010764:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 8010766:	6838      	ldr	r0, [r7, #0]
 8010768:	f000 fe4c 	bl	8011404 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 801076c:	4603      	mov	r3, r0
 801076e:	4619      	mov	r1, r3
 8010770:	6878      	ldr	r0, [r7, #4]
 8010772:	f000 fe52 	bl	801141a <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}

0801077e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801077e:	b5b0      	push	{r4, r5, r7, lr}
 8010780:	b088      	sub	sp, #32
 8010782:	af00      	add	r7, sp, #0
 8010784:	60f8      	str	r0, [r7, #12]
 8010786:	60b9      	str	r1, [r7, #8]
 8010788:	607a      	str	r2, [r7, #4]
 801078a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 801078c:	6878      	ldr	r0, [r7, #4]
 801078e:	f7f0 fd6a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8010792:	4604      	mov	r4, r0
 8010794:	6838      	ldr	r0, [r7, #0]
 8010796:	f000 fe53 	bl	8011440 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801079a:	4605      	mov	r5, r0
 801079c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801079e:	f7f0 fd78 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80107a2:	4603      	mov	r3, r0
 80107a4:	462a      	mov	r2, r5
 80107a6:	4621      	mov	r1, r4
 80107a8:	68f8      	ldr	r0, [r7, #12]
 80107aa:	f000 fe54 	bl	8011456 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 80107ae:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80107b0:	69f8      	ldr	r0, [r7, #28]
 80107b2:	f7fa fe2e 	bl	800b412 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80107b6:	4603      	mov	r3, r0
 80107b8:	f107 0010 	add.w	r0, r7, #16
 80107bc:	68ba      	ldr	r2, [r7, #8]
 80107be:	68f9      	ldr	r1, [r7, #12]
 80107c0:	f7fa fd04 	bl	800b1cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
	    if (__res.second)
 80107c4:	697b      	ldr	r3, [r7, #20]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d007      	beq.n	80107da <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80107ca:	6939      	ldr	r1, [r7, #16]
 80107cc:	697a      	ldr	r2, [r7, #20]
 80107ce:	69fb      	ldr	r3, [r7, #28]
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	f000 fe63 	bl	801149c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 80107d6:	4603      	mov	r3, r0
 80107d8:	e00b      	b.n	80107f2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 80107da:	69f9      	ldr	r1, [r7, #28]
 80107dc:	68f8      	ldr	r0, [r7, #12]
 80107de:	f7fa fe2b 	bl	800b438 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 80107e2:	693a      	ldr	r2, [r7, #16]
 80107e4:	f107 0318 	add.w	r3, r7, #24
 80107e8:	4611      	mov	r1, r2
 80107ea:	4618      	mov	r0, r3
 80107ec:	f7fa fe35 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 80107f0:	69bb      	ldr	r3, [r7, #24]
      }
 80107f2:	4618      	mov	r0, r3
 80107f4:	3720      	adds	r7, #32
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bdb0      	pop	{r4, r5, r7, pc}

080107fa <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80107fa:	b480      	push	{r7}
 80107fc:	b083      	sub	sp, #12
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8010810:	b590      	push	{r4, r7, lr}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	7239      	strb	r1, [r7, #8]
 801081a:	607a      	str	r2, [r7, #4]
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	687a      	ldr	r2, [r7, #4]
 8010820:	4621      	mov	r1, r4
 8010822:	4618      	mov	r0, r3
 8010824:	f000 fe89 	bl	801153a <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	4618      	mov	r0, r3
 801082c:	3714      	adds	r7, #20
 801082e:	46bd      	mov	sp, r7
 8010830:	bd90      	pop	{r4, r7, pc}

08010832 <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8010832:	b5b0      	push	{r4, r5, r7, lr}
 8010834:	b084      	sub	sp, #16
 8010836:	af00      	add	r7, sp, #0
 8010838:	60f8      	str	r0, [r7, #12]
 801083a:	7239      	strb	r1, [r7, #8]
 801083c:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 801083e:	68fc      	ldr	r4, [r7, #12]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7ff ffda 	bl	80107fa <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8010846:	4603      	mov	r3, r0
 8010848:	461a      	mov	r2, r3
 801084a:	4629      	mov	r1, r5
 801084c:	4620      	mov	r0, r4
 801084e:	f7ff ffdf 	bl	8010810 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	4618      	mov	r0, r3
 8010856:	3710      	adds	r7, #16
 8010858:	46bd      	mov	sp, r7
 801085a:	bdb0      	pop	{r4, r5, r7, pc}

0801085c <_ZNSaIP13StreamMessageEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801085c:	b580      	push	{r7, lr}
 801085e:	b082      	sub	sp, #8
 8010860:	af00      	add	r7, sp, #0
 8010862:	6078      	str	r0, [r7, #4]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 fe80 	bl	801156a <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	4618      	mov	r0, r3
 801086e:	3708      	adds	r7, #8
 8010870:	46bd      	mov	sp, r7
 8010872:	bd80      	pop	{r7, pc}

08010874 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8010874:	b480      	push	{r7}
 8010876:	b083      	sub	sp, #12
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	2200      	movs	r2, #0
 8010880:	601a      	str	r2, [r3, #0]
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	2200      	movs	r2, #0
 8010886:	605a      	str	r2, [r3, #4]
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2200      	movs	r2, #0
 801088c:	609a      	str	r2, [r3, #8]
	{ }
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	4618      	mov	r0, r3
 8010892:	370c      	adds	r7, #12
 8010894:	46bd      	mov	sp, r7
 8010896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801089a:	4770      	bx	lr

0801089c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 801089c:	b580      	push	{r7, lr}
 801089e:	b084      	sub	sp, #16
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	60f8      	str	r0, [r7, #12]
 80108a4:	60b9      	str	r1, [r7, #8]
 80108a6:	607a      	str	r2, [r7, #4]
	if (__p)
 80108a8:	68bb      	ldr	r3, [r7, #8]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d005      	beq.n	80108ba <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	68b9      	ldr	r1, [r7, #8]
 80108b4:	4618      	mov	r0, r3
 80108b6:	f000 fe63 	bl	8011580 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>
      }
 80108ba:	bf00      	nop
 80108bc:	3710      	adds	r7, #16
 80108be:	46bd      	mov	sp, r7
 80108c0:	bd80      	pop	{r7, pc}

080108c2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80108c2:	b480      	push	{r7}
 80108c4:	b083      	sub	sp, #12
 80108c6:	af00      	add	r7, sp, #0
 80108c8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	4618      	mov	r0, r3
 80108ce:	370c      	adds	r7, #12
 80108d0:	46bd      	mov	sp, r7
 80108d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d6:	4770      	bx	lr

080108d8 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80108d8:	b580      	push	{r7, lr}
 80108da:	b084      	sub	sp, #16
 80108dc:	af00      	add	r7, sp, #0
 80108de:	60f8      	str	r0, [r7, #12]
 80108e0:	60b9      	str	r1, [r7, #8]
 80108e2:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80108e4:	68b9      	ldr	r1, [r7, #8]
 80108e6:	68f8      	ldr	r0, [r7, #12]
 80108e8:	f000 fe69 	bl	80115be <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>
    }
 80108ec:	bf00      	nop
 80108ee:	3710      	adds	r7, #16
 80108f0:	46bd      	mov	sp, r7
 80108f2:	bd80      	pop	{r7, pc}

080108f4 <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80108f4:	b480      	push	{r7}
 80108f6:	b083      	sub	sp, #12
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	4618      	mov	r0, r3
 8010900:	370c      	adds	r7, #12
 8010902:	46bd      	mov	sp, r7
 8010904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010908:	4770      	bx	lr

0801090a <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 801090a:	b5b0      	push	{r4, r5, r7, lr}
 801090c:	b082      	sub	sp, #8
 801090e:	af00      	add	r7, sp, #0
 8010910:	6078      	str	r0, [r7, #4]
 8010912:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	685a      	ldr	r2, [r3, #4]
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	429a      	cmp	r2, r3
 801091e:	d011      	beq.n	8010944 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010920:	687c      	ldr	r4, [r7, #4]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	685d      	ldr	r5, [r3, #4]
 8010926:	6838      	ldr	r0, [r7, #0]
 8010928:	f000 fe5f 	bl	80115ea <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 801092c:	4603      	mov	r3, r0
 801092e:	461a      	mov	r2, r3
 8010930:	4629      	mov	r1, r5
 8010932:	4620      	mov	r0, r4
 8010934:	f000 fe79 	bl	801162a <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	685b      	ldr	r3, [r3, #4]
 801093c:	1d1a      	adds	r2, r3, #4
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	605a      	str	r2, [r3, #4]
 8010942:	e00c      	b.n	801095e <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f7ff fca0 	bl	801028a <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 801094a:	4604      	mov	r4, r0
 801094c:	6838      	ldr	r0, [r7, #0]
 801094e:	f000 fe4c 	bl	80115ea <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010952:	4603      	mov	r3, r0
 8010954:	461a      	mov	r2, r3
 8010956:	4621      	mov	r1, r4
 8010958:	6878      	ldr	r0, [r7, #4]
 801095a:	f000 fe79 	bl	8011650 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 801095e:	6878      	ldr	r0, [r7, #4]
 8010960:	f000 fef2 	bl	8011748 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>
 8010964:	4603      	mov	r3, r0
      }
 8010966:	4618      	mov	r0, r3
 8010968:	3708      	adds	r7, #8
 801096a:	46bd      	mov	sp, r7
 801096c:	bdb0      	pop	{r4, r5, r7, pc}

0801096e <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801096e:	b480      	push	{r7}
 8010970:	b083      	sub	sp, #12
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
 8010976:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010978:	683b      	ldr	r3, [r7, #0]
 801097a:	681a      	ldr	r2, [r3, #0]
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	601a      	str	r2, [r3, #0]
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	4618      	mov	r0, r3
 8010984:	370c      	adds	r7, #12
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr

0801098e <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801098e:	b590      	push	{r4, r7, lr}
 8010990:	b083      	sub	sp, #12
 8010992:	af00      	add	r7, sp, #0
 8010994:	6078      	str	r0, [r7, #4]
 8010996:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8010998:	6838      	ldr	r0, [r7, #0]
 801099a:	f000 fef0 	bl	801177e <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 801099e:	4603      	mov	r3, r0
 80109a0:	681c      	ldr	r4, [r3, #0]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	4619      	mov	r1, r3
 80109a6:	2004      	movs	r0, #4
 80109a8:	f7ef fcc2 	bl	8000330 <_ZnwjPv>
 80109ac:	4603      	mov	r3, r0
 80109ae:	601c      	str	r4, [r3, #0]
 80109b0:	4618      	mov	r0, r3
 80109b2:	370c      	adds	r7, #12
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd90      	pop	{r4, r7, pc}

080109b8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b084      	sub	sp, #16
 80109bc:	af00      	add	r7, sp, #0
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80109c4:	6878      	ldr	r0, [r7, #4]
 80109c6:	f000 feda 	bl	801177e <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 80109ca:	4603      	mov	r3, r0
 80109cc:	4619      	mov	r1, r3
 80109ce:	68b8      	ldr	r0, [r7, #8]
 80109d0:	f7ff ffdd 	bl	801098e <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	}
 80109d4:	bf00      	nop
 80109d6:	3710      	adds	r7, #16
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}

080109dc <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80109dc:	b5b0      	push	{r4, r5, r7, lr}
 80109de:	b08c      	sub	sp, #48	; 0x30
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	60f8      	str	r0, [r7, #12]
 80109e4:	60b9      	str	r1, [r7, #8]
 80109e6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80109e8:	4a39      	ldr	r2, [pc, #228]	; (8010ad0 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80109ea:	2101      	movs	r1, #1
 80109ec:	68f8      	ldr	r0, [r7, #12]
 80109ee:	f000 fed1 	bl	8011794 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>
 80109f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010a00:	68f8      	ldr	r0, [r7, #12]
 8010a02:	f7ff fba9 	bl	8010158 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 8010a06:	4603      	mov	r3, r0
 8010a08:	617b      	str	r3, [r7, #20]
 8010a0a:	f107 0214 	add.w	r2, r7, #20
 8010a0e:	f107 0308 	add.w	r3, r7, #8
 8010a12:	4611      	mov	r1, r2
 8010a14:	4618      	mov	r0, r3
 8010a16:	f000 ff04 	bl	8011822 <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010a1e:	68fb      	ldr	r3, [r7, #12]
 8010a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010a22:	4618      	mov	r0, r3
 8010a24:	f000 ff12 	bl	801184c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>
 8010a28:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010a2e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010a30:	6a3b      	ldr	r3, [r7, #32]
 8010a32:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8010a34:	69fa      	ldr	r2, [r7, #28]
 8010a36:	18d5      	adds	r5, r2, r3
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f000 fea0 	bl	801177e <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	461a      	mov	r2, r3
 8010a42:	4629      	mov	r1, r5
 8010a44:	4620      	mov	r0, r4
 8010a46:	f7ff ffb7 	bl	80109b8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010a4a:	2300      	movs	r3, #0
 8010a4c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010a4e:	f107 0308 	add.w	r3, r7, #8
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fd fa26 	bl	800dea4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7ff ff2f 	bl	80108c2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010a64:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010a66:	69fa      	ldr	r2, [r7, #28]
 8010a68:	4621      	mov	r1, r4
 8010a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010a6c:	f000 ff02 	bl	8011874 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010a70:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8010a72:	69bb      	ldr	r3, [r7, #24]
 8010a74:	3304      	adds	r3, #4
 8010a76:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010a78:	f107 0308 	add.w	r3, r7, #8
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7fd fa11 	bl	800dea4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010a82:	4603      	mov	r3, r0
 8010a84:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	4618      	mov	r0, r3
 8010a8a:	f7ff ff1a 	bl	80108c2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010a8e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8010a90:	69ba      	ldr	r2, [r7, #24]
 8010a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a94:	4620      	mov	r0, r4
 8010a96:	f000 feed 	bl	8011874 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8010a9a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8010a9c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	689a      	ldr	r2, [r3, #8]
 8010aa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aa4:	1ad3      	subs	r3, r2, r3
 8010aa6:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8010aa8:	461a      	mov	r2, r3
 8010aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010aac:	f7ff fef6 	bl	801089c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	69fa      	ldr	r2, [r7, #28]
 8010ab4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	69ba      	ldr	r2, [r7, #24]
 8010aba:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8010abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010abe:	009b      	lsls	r3, r3, #2
 8010ac0:	69fa      	ldr	r2, [r7, #28]
 8010ac2:	441a      	add	r2, r3
 8010ac4:	68fb      	ldr	r3, [r7, #12]
 8010ac6:	609a      	str	r2, [r3, #8]
    }
 8010ac8:	bf00      	nop
 8010aca:	3730      	adds	r7, #48	; 0x30
 8010acc:	46bd      	mov	sp, r7
 8010ace:	bdb0      	pop	{r4, r5, r7, pc}
 8010ad0:	0802103c 	.word	0x0802103c

08010ad4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010ad4:	b480      	push	{r7}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010adc:	2301      	movs	r3, #1
 8010ade:	4618      	mov	r0, r3
 8010ae0:	370c      	adds	r7, #12
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr

08010aea <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8010aea:	b480      	push	{r7}
 8010aec:	b083      	sub	sp, #12
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	4618      	mov	r0, r3
 8010af6:	370c      	adds	r7, #12
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr

08010b00 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010b00:	b590      	push	{r4, r7, lr}
 8010b02:	b083      	sub	sp, #12
 8010b04:	af00      	add	r7, sp, #0
 8010b06:	6078      	str	r0, [r7, #4]
 8010b08:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010b0a:	6838      	ldr	r0, [r7, #0]
 8010b0c:	f7ff ffed 	bl	8010aea <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8010b10:	4603      	mov	r3, r0
 8010b12:	4622      	mov	r2, r4
 8010b14:	4619      	mov	r1, r3
 8010b16:	6878      	ldr	r0, [r7, #4]
 8010b18:	f000 fec0 	bl	801189c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8010b1c:	bf00      	nop
 8010b1e:	370c      	adds	r7, #12
 8010b20:	46bd      	mov	sp, r7
 8010b22:	bd90      	pop	{r4, r7, pc}

08010b24 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 fece 	bl	80118ce <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010b32:	4603      	mov	r3, r0
 8010b34:	4618      	mov	r0, r3
 8010b36:	f000 feda 	bl	80118ee <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 8010b3a:	bf00      	nop
      }
 8010b3c:	3708      	adds	r7, #8
 8010b3e:	46bd      	mov	sp, r7
 8010b40:	bd80      	pop	{r7, pc}

08010b42 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010b42:	b590      	push	{r4, r7, lr}
 8010b44:	b085      	sub	sp, #20
 8010b46:	af00      	add	r7, sp, #0
 8010b48:	60f8      	str	r0, [r7, #12]
 8010b4a:	60b9      	str	r1, [r7, #8]
 8010b4c:	4613      	mov	r3, r2
 8010b4e:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010b50:	79fb      	ldrb	r3, [r7, #7]
 8010b52:	2b01      	cmp	r3, #1
 8010b54:	d109      	bne.n	8010b6a <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010b56:	68b8      	ldr	r0, [r7, #8]
 8010b58:	f000 feb9 	bl	80118ce <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010b5c:	4604      	mov	r4, r0
 8010b5e:	68f8      	ldr	r0, [r7, #12]
 8010b60:	f000 fed5 	bl	801190e <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 8010b64:	4603      	mov	r3, r0
 8010b66:	601c      	str	r4, [r3, #0]
	    break;
 8010b68:	e005      	b.n	8010b76 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010b6a:	79fb      	ldrb	r3, [r7, #7]
 8010b6c:	461a      	mov	r2, r3
 8010b6e:	68b9      	ldr	r1, [r7, #8]
 8010b70:	68f8      	ldr	r0, [r7, #12]
 8010b72:	f000 fed8 	bl	8011926 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8010b76:	2300      	movs	r3, #0
      }
 8010b78:	4618      	mov	r0, r3
 8010b7a:	3714      	adds	r7, #20
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	bd90      	pop	{r4, r7, pc}

08010b80 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>:
      _M_get() noexcept
 8010b80:	b480      	push	{r7}
 8010b82:	b083      	sub	sp, #12
 8010b84:	af00      	add	r7, sp, #0
 8010b86:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	370c      	adds	r7, #12
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr

08010b96 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010b96:	b480      	push	{r7}
 8010b98:	b083      	sub	sp, #12
 8010b9a:	af00      	add	r7, sp, #0
 8010b9c:	6078      	str	r0, [r7, #4]
 8010b9e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010ba0:	683b      	ldr	r3, [r7, #0]
 8010ba2:	681a      	ldr	r2, [r3, #0]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	601a      	str	r2, [r3, #0]
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	4618      	mov	r0, r3
 8010bac:	370c      	adds	r7, #12
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb4:	4770      	bx	lr

08010bb6 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010bb6:	b580      	push	{r7, lr}
 8010bb8:	b082      	sub	sp, #8
 8010bba:	af00      	add	r7, sp, #0
 8010bbc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 fedc 	bl	801197c <_ZNSaIP5FieldIJEEEC1Ev>
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	f000 fee4 	bl	8011994 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	4618      	mov	r0, r3
 8010bd0:	3708      	adds	r7, #8
 8010bd2:	46bd      	mov	sp, r7
 8010bd4:	bd80      	pop	{r7, pc}

08010bd6 <_ZNSaIP5FieldIJEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010bd6:	b480      	push	{r7}
 8010bd8:	b083      	sub	sp, #12
 8010bda:	af00      	add	r7, sp, #0
 8010bdc:	6078      	str	r0, [r7, #4]
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	4618      	mov	r0, r3
 8010be2:	370c      	adds	r7, #12
 8010be4:	46bd      	mov	sp, r7
 8010be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bea:	4770      	bx	lr

08010bec <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	689a      	ldr	r2, [r3, #8]
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	1ad3      	subs	r3, r2, r3
 8010c02:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8010c04:	461a      	mov	r2, r3
 8010c06:	6878      	ldr	r0, [r7, #4]
 8010c08:	f000 fed8 	bl	80119bc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      }
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7ff fb4c 	bl	80102ac <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	4618      	mov	r0, r3
 8010c18:	3708      	adds	r7, #8
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}

08010c1e <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010c1e:	b5b0      	push	{r4, r5, r7, lr}
 8010c20:	b082      	sub	sp, #8
 8010c22:	af00      	add	r7, sp, #0
 8010c24:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681c      	ldr	r4, [r3, #0]
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f000 fed6 	bl	80119e2 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8010c36:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010c38:	461a      	mov	r2, r3
 8010c3a:	4629      	mov	r1, r5
 8010c3c:	4620      	mov	r0, r4
 8010c3e:	f000 fedb 	bl	80119f8 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>
      }
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7ff ffd1 	bl	8010bec <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	4618      	mov	r0, r3
 8010c4e:	3708      	adds	r7, #8
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bdb0      	pop	{r4, r5, r7, pc}

08010c54 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010c54:	b590      	push	{r4, r7, lr}
 8010c56:	b085      	sub	sp, #20
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	681b      	ldr	r3, [r3, #0]
 8010c62:	1c5a      	adds	r2, r3, #1
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010c68:	2008      	movs	r0, #8
 8010c6a:	f00f fe71 	bl	8020950 <_Znwj>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	461c      	mov	r4, r3
 8010c72:	6839      	ldr	r1, [r7, #0]
 8010c74:	4620      	mov	r0, r4
 8010c76:	f000 fedd 	bl	8011a34 <_ZN5FieldIJhEEC1EPh>
 8010c7a:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f103 0208 	add.w	r2, r3, #8
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	60bb      	str	r3, [r7, #8]
 8010c86:	f107 0308 	add.w	r3, r7, #8
 8010c8a:	4619      	mov	r1, r3
 8010c8c:	4610      	mov	r0, r2
 8010c8e:	f000 fee7 	bl	8011a60 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8010c92:	bf00      	nop
    }
 8010c94:	3714      	adds	r7, #20
 8010c96:	46bd      	mov	sp, r7
 8010c98:	bd90      	pop	{r4, r7, pc}
	...

08010c9c <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8010c9c:	b590      	push	{r4, r7, lr}
 8010c9e:	b08b      	sub	sp, #44	; 0x2c
 8010ca0:	af02      	add	r7, sp, #8
 8010ca2:	6078      	str	r0, [r7, #4]
 8010ca4:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8010ca6:	6839      	ldr	r1, [r7, #0]
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f000 feea 	bl	8011a82 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 8010cae:	4603      	mov	r3, r0
 8010cb0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f7f4 fa4b 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8010cb8:	4603      	mov	r3, r0
 8010cba:	60fb      	str	r3, [r7, #12]
 8010cbc:	f107 020c 	add.w	r2, r7, #12
 8010cc0:	f107 0308 	add.w	r3, r7, #8
 8010cc4:	4611      	mov	r1, r2
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7f4 fa4e 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d112      	bne.n	8010cf8 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 fee4 	bl	8011aa0 <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 8010cd8:	f107 0308 	add.w	r3, r7, #8
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7f4 fa68 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	461a      	mov	r2, r3
 8010ce6:	f107 0310 	add.w	r3, r7, #16
 8010cea:	6839      	ldr	r1, [r7, #0]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f000 fee4 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d001      	beq.n	8010cfc <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	e000      	b.n	8010cfe <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 8010cfc:	2300      	movs	r3, #0
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d01b      	beq.n	8010d3a <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010d02:	687c      	ldr	r4, [r7, #4]
 8010d04:	f107 0208 	add.w	r2, r7, #8
 8010d08:	f107 0314 	add.w	r3, r7, #20
 8010d0c:	4611      	mov	r1, r2
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f000 fef7 	bl	8011b02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 8010d14:	f107 0318 	add.w	r3, r7, #24
 8010d18:	6839      	ldr	r1, [r7, #0]
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f000 fee2 	bl	8011ae4 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010d20:	f107 0218 	add.w	r2, r7, #24
 8010d24:	f107 031c 	add.w	r3, r7, #28
 8010d28:	9300      	str	r3, [sp, #0]
 8010d2a:	4613      	mov	r3, r2
 8010d2c:	4a08      	ldr	r2, [pc, #32]	; (8010d50 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 8010d2e:	6979      	ldr	r1, [r7, #20]
 8010d30:	4620      	mov	r0, r4
 8010d32:	f000 fef6 	bl	8011b22 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8010d36:	4603      	mov	r3, r0
 8010d38:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8010d3a:	f107 0308 	add.w	r3, r7, #8
 8010d3e:	4618      	mov	r0, r3
 8010d40:	f7f4 fa37 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8010d44:	4603      	mov	r3, r0
 8010d46:	3304      	adds	r3, #4
      }
 8010d48:	4618      	mov	r0, r3
 8010d4a:	3724      	adds	r7, #36	; 0x24
 8010d4c:	46bd      	mov	sp, r7
 8010d4e:	bd90      	pop	{r4, r7, pc}
 8010d50:	080210a4 	.word	0x080210a4

08010d54 <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010d54:	b590      	push	{r4, r7, lr}
 8010d56:	b087      	sub	sp, #28
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	1c5a      	adds	r2, r3, #1
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010d6a:	2008      	movs	r0, #8
 8010d6c:	f00f fdf0 	bl	8020950 <_Znwj>
 8010d70:	4603      	mov	r3, r0
 8010d72:	461c      	mov	r4, r3
 8010d74:	68b9      	ldr	r1, [r7, #8]
 8010d76:	4620      	mov	r0, r4
 8010d78:	f000 fe5c 	bl	8011a34 <_ZN5FieldIJhEEC1EPh>
 8010d7c:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	f103 0208 	add.w	r2, r3, #8
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	613b      	str	r3, [r7, #16]
 8010d88:	f107 0310 	add.w	r3, r7, #16
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	4610      	mov	r0, r2
 8010d90:	f000 fe66 	bl	8011a60 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010d94:	6879      	ldr	r1, [r7, #4]
 8010d96:	68f8      	ldr	r0, [r7, #12]
 8010d98:	f000 ff01 	bl	8011b9e <_ZN6Packet5buildItJEEEvPT_DpPT0_>
    }
 8010d9c:	bf00      	nop
 8010d9e:	371c      	adds	r7, #28
 8010da0:	46bd      	mov	sp, r7
 8010da2:	bd90      	pop	{r4, r7, pc}

08010da4 <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010da4:	b590      	push	{r4, r7, lr}
 8010da6:	b087      	sub	sp, #28
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	60f8      	str	r0, [r7, #12]
 8010dac:	60b9      	str	r1, [r7, #8]
 8010dae:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	1c5a      	adds	r2, r3, #1
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010dba:	2008      	movs	r0, #8
 8010dbc:	f00f fdc8 	bl	8020950 <_Znwj>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	461c      	mov	r4, r3
 8010dc4:	68b9      	ldr	r1, [r7, #8]
 8010dc6:	4620      	mov	r0, r4
 8010dc8:	f000 fe34 	bl	8011a34 <_ZN5FieldIJhEEC1EPh>
 8010dcc:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	f103 0208 	add.w	r2, r3, #8
 8010dd4:	697b      	ldr	r3, [r7, #20]
 8010dd6:	613b      	str	r3, [r7, #16]
 8010dd8:	f107 0310 	add.w	r3, r7, #16
 8010ddc:	4619      	mov	r1, r3
 8010dde:	4610      	mov	r0, r2
 8010de0:	f000 fe3e 	bl	8011a60 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010de4:	6879      	ldr	r1, [r7, #4]
 8010de6:	68f8      	ldr	r0, [r7, #12]
 8010de8:	f000 fefc 	bl	8011be4 <_ZN6Packet5buildImJEEEvPT_DpPT0_>
    }
 8010dec:	bf00      	nop
 8010dee:	371c      	adds	r7, #28
 8010df0:	46bd      	mov	sp, r7
 8010df2:	bd90      	pop	{r4, r7, pc}

08010df4 <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010df4:	b590      	push	{r4, r7, lr}
 8010df6:	b087      	sub	sp, #28
 8010df8:	af00      	add	r7, sp, #0
 8010dfa:	60f8      	str	r0, [r7, #12]
 8010dfc:	60b9      	str	r1, [r7, #8]
 8010dfe:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	1c5a      	adds	r2, r3, #1
 8010e06:	68fb      	ldr	r3, [r7, #12]
 8010e08:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010e0a:	2008      	movs	r0, #8
 8010e0c:	f00f fda0 	bl	8020950 <_Znwj>
 8010e10:	4603      	mov	r3, r0
 8010e12:	461c      	mov	r4, r3
 8010e14:	68b9      	ldr	r1, [r7, #8]
 8010e16:	4620      	mov	r0, r4
 8010e18:	f000 fe0c 	bl	8011a34 <_ZN5FieldIJhEEC1EPh>
 8010e1c:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	f103 0208 	add.w	r2, r3, #8
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	613b      	str	r3, [r7, #16]
 8010e28:	f107 0310 	add.w	r3, r7, #16
 8010e2c:	4619      	mov	r1, r3
 8010e2e:	4610      	mov	r0, r2
 8010e30:	f000 fe16 	bl	8011a60 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010e34:	6879      	ldr	r1, [r7, #4]
 8010e36:	68f8      	ldr	r0, [r7, #12]
 8010e38:	f7ff ff0c 	bl	8010c54 <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
    }
 8010e3c:	bf00      	nop
 8010e3e:	371c      	adds	r7, #28
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd90      	pop	{r4, r7, pc}

08010e44 <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>:
      _M_get() noexcept
 8010e44:	b480      	push	{r7}
 8010e46:	b083      	sub	sp, #12
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	4618      	mov	r0, r3
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010e5a:	b5b0      	push	{r4, r5, r7, lr}
 8010e5c:	b084      	sub	sp, #16
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 fee0 	bl	8011c2a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 fee8 	bl	8011c42 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010e72:	4602      	mov	r2, r0
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	4621      	mov	r1, r4
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 feee 	bl	8011c5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f000 f828 	bl	8010ed8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	60fb      	str	r3, [r7, #12]
 8010e8c:	f107 020c 	add.w	r2, r7, #12
 8010e90:	f107 0308 	add.w	r3, r7, #8
 8010e94:	4611      	mov	r1, r2
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 f82f 	bl	8010efa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8010e9c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d110      	bne.n	8010ec4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010ea2:	687c      	ldr	r4, [r7, #4]
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7f7 fe6d 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010eb0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f7f0 f80e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d004      	beq.n	8010ece <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 f807 	bl	8010ed8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	e000      	b.n	8010ed0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010ece:	68bb      	ldr	r3, [r7, #8]
    }
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bdb0      	pop	{r4, r5, r7, pc}

08010ed8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	1d1a      	adds	r2, r3, #4
 8010ee4:	f107 030c 	add.w	r3, r7, #12
 8010ee8:	4611      	mov	r1, r2
 8010eea:	4618      	mov	r0, r3
 8010eec:	f000 fee8 	bl	8011cc0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010efa:	b480      	push	{r7}
 8010efc:	b083      	sub	sp, #12
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	6078      	str	r0, [r7, #4]
 8010f02:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	bf0c      	ite	eq
 8010f10:	2301      	moveq	r3, #1
 8010f12:	2300      	movne	r3, #0
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	4618      	mov	r0, r3
 8010f18:	370c      	adds	r7, #12
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr

08010f22 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010f22:	b5b0      	push	{r4, r5, r7, lr}
 8010f24:	b084      	sub	sp, #16
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
 8010f2a:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f000 fed6 	bl	8011cde <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010f32:	4604      	mov	r4, r0
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f000 fede 	bl	8011cf6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	683b      	ldr	r3, [r7, #0]
 8010f3e:	4621      	mov	r1, r4
 8010f40:	6878      	ldr	r0, [r7, #4]
 8010f42:	f000 fee4 	bl	8011d0e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010f46:	4603      	mov	r3, r0
 8010f48:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f828 	bl	8010fa0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010f50:	4603      	mov	r3, r0
 8010f52:	60fb      	str	r3, [r7, #12]
 8010f54:	f107 020c 	add.w	r2, r7, #12
 8010f58:	f107 0308 	add.w	r3, r7, #8
 8010f5c:	4611      	mov	r1, r2
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f000 f82f 	bl	8010fc2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8010f64:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d110      	bne.n	8010f8c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010f6a:	687c      	ldr	r4, [r7, #4]
 8010f6c:	683b      	ldr	r3, [r7, #0]
 8010f6e:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010f70:	68bb      	ldr	r3, [r7, #8]
 8010f72:	4618      	mov	r0, r3
 8010f74:	f7f3 f92a 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010f78:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	461a      	mov	r2, r3
 8010f7e:	4629      	mov	r1, r5
 8010f80:	4620      	mov	r0, r4
 8010f82:	f7ef ffaa 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010f86:	4603      	mov	r3, r0
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d004      	beq.n	8010f96 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 f807 	bl	8010fa0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010f92:	4603      	mov	r3, r0
 8010f94:	e000      	b.n	8010f98 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010f96:	68bb      	ldr	r3, [r7, #8]
    }
 8010f98:	4618      	mov	r0, r3
 8010f9a:	3710      	adds	r7, #16
 8010f9c:	46bd      	mov	sp, r7
 8010f9e:	bdb0      	pop	{r4, r5, r7, pc}

08010fa0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b084      	sub	sp, #16
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	1d1a      	adds	r2, r3, #4
 8010fac:	f107 030c 	add.w	r3, r7, #12
 8010fb0:	4611      	mov	r1, r2
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f000 fede 	bl	8011d74 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	4618      	mov	r0, r3
 8010fbc:	3710      	adds	r7, #16
 8010fbe:	46bd      	mov	sp, r7
 8010fc0:	bd80      	pop	{r7, pc}

08010fc2 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010fc2:	b480      	push	{r7}
 8010fc4:	b083      	sub	sp, #12
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
 8010fca:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	681a      	ldr	r2, [r3, #0]
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	bf0c      	ite	eq
 8010fd8:	2301      	moveq	r3, #1
 8010fda:	2300      	movne	r3, #0
 8010fdc:	b2db      	uxtb	r3, r3
 8010fde:	4618      	mov	r0, r3
 8010fe0:	370c      	adds	r7, #12
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr

08010fea <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010fea:	b480      	push	{r7}
 8010fec:	b083      	sub	sp, #12
 8010fee:	af00      	add	r7, sp, #0
 8010ff0:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010ff2:	2301      	movs	r3, #1
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	370c      	adds	r7, #12
 8010ff8:	46bd      	mov	sp, r7
 8010ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ffe:	4770      	bx	lr

08011000 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8011000:	b480      	push	{r7}
 8011002:	b083      	sub	sp, #12
 8011004:	af00      	add	r7, sp, #0
 8011006:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	4618      	mov	r0, r3
 801100c:	370c      	adds	r7, #12
 801100e:	46bd      	mov	sp, r7
 8011010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011014:	4770      	bx	lr

08011016 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8011016:	b590      	push	{r4, r7, lr}
 8011018:	b083      	sub	sp, #12
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
 801101e:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8011020:	6838      	ldr	r0, [r7, #0]
 8011022:	f7ff ffed 	bl	8011000 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8011026:	4603      	mov	r3, r0
 8011028:	4622      	mov	r2, r4
 801102a:	4619      	mov	r1, r3
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f000 feb0 	bl	8011d92 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8011032:	bf00      	nop
 8011034:	370c      	adds	r7, #12
 8011036:	46bd      	mov	sp, r7
 8011038:	bd90      	pop	{r4, r7, pc}

0801103a <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801103a:	b580      	push	{r7, lr}
 801103c:	b082      	sub	sp, #8
 801103e:	af00      	add	r7, sp, #0
 8011040:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 feba 	bl	8011dbc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011048:	4603      	mov	r3, r0
 801104a:	4618      	mov	r0, r3
 801104c:	f000 fec6 	bl	8011ddc <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8011050:	bf00      	nop
      }
 8011052:	3708      	adds	r7, #8
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011058:	b590      	push	{r4, r7, lr}
 801105a:	b085      	sub	sp, #20
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	4613      	mov	r3, r2
 8011064:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011066:	79fb      	ldrb	r3, [r7, #7]
 8011068:	2b01      	cmp	r3, #1
 801106a:	d109      	bne.n	8011080 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 801106c:	68b8      	ldr	r0, [r7, #8]
 801106e:	f000 fea5 	bl	8011dbc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011072:	4604      	mov	r4, r0
 8011074:	68f8      	ldr	r0, [r7, #12]
 8011076:	f000 fec1 	bl	8011dfc <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 801107a:	4603      	mov	r3, r0
 801107c:	601c      	str	r4, [r3, #0]
	    break;
 801107e:	e005      	b.n	801108c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8011080:	79fb      	ldrb	r3, [r7, #7]
 8011082:	461a      	mov	r2, r3
 8011084:	68b9      	ldr	r1, [r7, #8]
 8011086:	68f8      	ldr	r0, [r7, #12]
 8011088:	f000 fec4 	bl	8011e14 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 801108c:	2300      	movs	r3, #0
      }
 801108e:	4618      	mov	r0, r3
 8011090:	3714      	adds	r7, #20
 8011092:	46bd      	mov	sp, r7
 8011094:	bd90      	pop	{r4, r7, pc}

08011096 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8011096:	b480      	push	{r7}
 8011098:	b083      	sub	sp, #12
 801109a:	af00      	add	r7, sp, #0
 801109c:	6078      	str	r0, [r7, #4]
	  { return true; }
 801109e:	2301      	movs	r3, #1
 80110a0:	4618      	mov	r0, r3
 80110a2:	370c      	adds	r7, #12
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr

080110ac <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80110ac:	b480      	push	{r7}
 80110ae:	b083      	sub	sp, #12
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4618      	mov	r0, r3
 80110b8:	370c      	adds	r7, #12
 80110ba:	46bd      	mov	sp, r7
 80110bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c0:	4770      	bx	lr

080110c2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 80110c2:	b590      	push	{r4, r7, lr}
 80110c4:	b083      	sub	sp, #12
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	6078      	str	r0, [r7, #4]
 80110ca:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 80110cc:	6838      	ldr	r0, [r7, #0]
 80110ce:	f7ff ffed 	bl	80110ac <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 80110d2:	4603      	mov	r3, r0
 80110d4:	4622      	mov	r2, r4
 80110d6:	4619      	mov	r1, r3
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f000 fec6 	bl	8011e6a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 80110de:	bf00      	nop
 80110e0:	370c      	adds	r7, #12
 80110e2:	46bd      	mov	sp, r7
 80110e4:	bd90      	pop	{r4, r7, pc}

080110e6 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80110e6:	b580      	push	{r7, lr}
 80110e8:	b082      	sub	sp, #8
 80110ea:	af00      	add	r7, sp, #0
 80110ec:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80110ee:	6878      	ldr	r0, [r7, #4]
 80110f0:	f000 fed0 	bl	8011e94 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 80110f4:	4603      	mov	r3, r0
 80110f6:	4618      	mov	r0, r3
 80110f8:	f000 fedc 	bl	8011eb4 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 80110fc:	bf00      	nop
      }
 80110fe:	3708      	adds	r7, #8
 8011100:	46bd      	mov	sp, r7
 8011102:	bd80      	pop	{r7, pc}

08011104 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8011104:	b590      	push	{r4, r7, lr}
 8011106:	b085      	sub	sp, #20
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	4613      	mov	r3, r2
 8011110:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8011112:	79fb      	ldrb	r3, [r7, #7]
 8011114:	2b01      	cmp	r3, #1
 8011116:	d109      	bne.n	801112c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011118:	68b8      	ldr	r0, [r7, #8]
 801111a:	f000 febb 	bl	8011e94 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 801111e:	4604      	mov	r4, r0
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f000 fed7 	bl	8011ed4 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 8011126:	4603      	mov	r3, r0
 8011128:	601c      	str	r4, [r3, #0]
	    break;
 801112a:	e005      	b.n	8011138 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 801112c:	79fb      	ldrb	r3, [r7, #7]
 801112e:	461a      	mov	r2, r3
 8011130:	68b9      	ldr	r1, [r7, #8]
 8011132:	68f8      	ldr	r0, [r7, #12]
 8011134:	f000 feda 	bl	8011eec <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8011138:	2300      	movs	r3, #0
      }
 801113a:	4618      	mov	r0, r3
 801113c:	3714      	adds	r7, #20
 801113e:	46bd      	mov	sp, r7
 8011140:	bd90      	pop	{r4, r7, pc}

08011142 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011142:	b480      	push	{r7}
 8011144:	b083      	sub	sp, #12
 8011146:	af00      	add	r7, sp, #0
 8011148:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	4618      	mov	r0, r3
 801114e:	370c      	adds	r7, #12
 8011150:	46bd      	mov	sp, r7
 8011152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011156:	4770      	bx	lr

08011158 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011158:	b590      	push	{r4, r7, lr}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011162:	6838      	ldr	r0, [r7, #0]
 8011164:	f7ff ffed 	bl	8011142 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011168:	4603      	mov	r3, r0
 801116a:	681c      	ldr	r4, [r3, #0]
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4619      	mov	r1, r3
 8011170:	2004      	movs	r0, #4
 8011172:	f7ef f8dd 	bl	8000330 <_ZnwjPv>
 8011176:	4603      	mov	r3, r0
 8011178:	601c      	str	r4, [r3, #0]
 801117a:	4618      	mov	r0, r3
 801117c:	370c      	adds	r7, #12
 801117e:	46bd      	mov	sp, r7
 8011180:	bd90      	pop	{r4, r7, pc}

08011182 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011182:	b580      	push	{r7, lr}
 8011184:	b084      	sub	sp, #16
 8011186:	af00      	add	r7, sp, #0
 8011188:	60f8      	str	r0, [r7, #12]
 801118a:	60b9      	str	r1, [r7, #8]
 801118c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801118e:	6878      	ldr	r0, [r7, #4]
 8011190:	f7ff ffd7 	bl	8011142 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011194:	4603      	mov	r3, r0
 8011196:	4619      	mov	r1, r3
 8011198:	68b8      	ldr	r0, [r7, #8]
 801119a:	f7ff ffdd 	bl	8011158 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 801119e:	bf00      	nop
 80111a0:	3710      	adds	r7, #16
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80111a8:	b5b0      	push	{r4, r5, r7, lr}
 80111aa:	b08c      	sub	sp, #48	; 0x30
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80111b4:	4a39      	ldr	r2, [pc, #228]	; (801129c <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80111b6:	2101      	movs	r1, #1
 80111b8:	68f8      	ldr	r0, [r7, #12]
 80111ba:	f000 fec2 	bl	8011f42 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>
 80111be:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80111c0:	68fb      	ldr	r3, [r7, #12]
 80111c2:	681b      	ldr	r3, [r3, #0]
 80111c4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80111c6:	68fb      	ldr	r3, [r7, #12]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80111cc:	68f8      	ldr	r0, [r7, #12]
 80111ce:	f7fe febd 	bl	800ff4c <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 80111d2:	4603      	mov	r3, r0
 80111d4:	617b      	str	r3, [r7, #20]
 80111d6:	f107 0214 	add.w	r2, r7, #20
 80111da:	f107 0308 	add.w	r3, r7, #8
 80111de:	4611      	mov	r1, r2
 80111e0:	4618      	mov	r0, r3
 80111e2:	f000 fef5 	bl	8011fd0 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80111e6:	4603      	mov	r3, r0
 80111e8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80111ee:	4618      	mov	r0, r3
 80111f0:	f000 ff03 	bl	8011ffa <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>
 80111f4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80111fa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80111fc:	6a3b      	ldr	r3, [r7, #32]
 80111fe:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011200:	69fa      	ldr	r2, [r7, #28]
 8011202:	18d5      	adds	r5, r2, r3
 8011204:	6878      	ldr	r0, [r7, #4]
 8011206:	f7ff ff9c 	bl	8011142 <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 801120a:	4603      	mov	r3, r0
 801120c:	461a      	mov	r2, r3
 801120e:	4629      	mov	r1, r5
 8011210:	4620      	mov	r0, r4
 8011212:	f7ff ffb6 	bl	8011182 <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8011216:	2300      	movs	r3, #0
 8011218:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801121a:	f107 0308 	add.w	r3, r7, #8
 801121e:	4618      	mov	r0, r3
 8011220:	f7fc fbc2 	bl	800d9a8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011224:	4603      	mov	r3, r0
 8011226:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	4618      	mov	r0, r3
 801122c:	f7fa ff00 	bl	800c030 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011230:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011232:	69fa      	ldr	r2, [r7, #28]
 8011234:	4621      	mov	r1, r4
 8011236:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011238:	f000 fef3 	bl	8012022 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801123c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801123e:	69bb      	ldr	r3, [r7, #24]
 8011240:	3304      	adds	r3, #4
 8011242:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011244:	f107 0308 	add.w	r3, r7, #8
 8011248:	4618      	mov	r0, r3
 801124a:	f7fc fbad 	bl	800d9a8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 801124e:	4603      	mov	r3, r0
 8011250:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011252:	68fb      	ldr	r3, [r7, #12]
 8011254:	4618      	mov	r0, r3
 8011256:	f7fa feeb 	bl	800c030 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 801125a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801125c:	69ba      	ldr	r2, [r7, #24]
 801125e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011260:	4620      	mov	r0, r4
 8011262:	f000 fede 	bl	8012022 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011266:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011268:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	689a      	ldr	r2, [r3, #8]
 801126e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011270:	1ad3      	subs	r3, r2, r3
 8011272:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011274:	461a      	mov	r2, r3
 8011276:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011278:	f7fa fe9d 	bl	800bfb6 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	69fa      	ldr	r2, [r7, #28]
 8011280:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	69ba      	ldr	r2, [r7, #24]
 8011286:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801128a:	009b      	lsls	r3, r3, #2
 801128c:	69fa      	ldr	r2, [r7, #28]
 801128e:	441a      	add	r2, r3
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	609a      	str	r2, [r3, #8]
    }
 8011294:	bf00      	nop
 8011296:	3730      	adds	r7, #48	; 0x30
 8011298:	46bd      	mov	sp, r7
 801129a:	bdb0      	pop	{r4, r5, r7, pc}
 801129c:	0802103c 	.word	0x0802103c

080112a0 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b084      	sub	sp, #16
 80112a4:	af00      	add	r7, sp, #0
 80112a6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80112a8:	6878      	ldr	r0, [r7, #4]
 80112aa:	f7fe fe5f 	bl	800ff6c <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 80112ae:	4603      	mov	r3, r0
 80112b0:	60fb      	str	r3, [r7, #12]
 80112b2:	f107 030c 	add.w	r3, r7, #12
 80112b6:	2101      	movs	r1, #1
 80112b8:	4618      	mov	r0, r3
 80112ba:	f000 fec6 	bl	801204a <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>
 80112be:	4603      	mov	r3, r0
 80112c0:	60bb      	str	r3, [r7, #8]
 80112c2:	f107 0308 	add.w	r3, r7, #8
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fc fba1 	bl	800da0e <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 80112cc:	4603      	mov	r3, r0
      }
 80112ce:	4618      	mov	r0, r3
 80112d0:	3710      	adds	r7, #16
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bd80      	pop	{r7, pc}

080112d6 <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 80112d6:	b580      	push	{r7, lr}
 80112d8:	b082      	sub	sp, #8
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7fc f9ab 	bl	800d63c <_ZNKSt14_Function_base8_M_emptyEv>
 80112e6:	4603      	mov	r3, r0
 80112e8:	f083 0301 	eor.w	r3, r3, #1
 80112ec:	b2db      	uxtb	r3, r3
 80112ee:	4618      	mov	r0, r3
 80112f0:	3708      	adds	r7, #8
 80112f2:	46bd      	mov	sp, r7
 80112f4:	bd80      	pop	{r7, pc}

080112f6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 80112f6:	b580      	push	{r7, lr}
 80112f8:	b084      	sub	sp, #16
 80112fa:	af00      	add	r7, sp, #0
 80112fc:	6078      	str	r0, [r7, #4]
 80112fe:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f000 febb 	bl	801207c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011306:	4602      	mov	r2, r0
 8011308:	f107 0308 	add.w	r3, r7, #8
 801130c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011310:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8011314:	6838      	ldr	r0, [r7, #0]
 8011316:	f000 feb1 	bl	801207c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801131a:	4602      	mov	r2, r0
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011322:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8011326:	f107 0308 	add.w	r3, r7, #8
 801132a:	4618      	mov	r0, r3
 801132c:	f000 fea6 	bl	801207c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011330:	4602      	mov	r2, r0
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011338:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801133c:	bf00      	nop
 801133e:	3710      	adds	r7, #16
 8011340:	46bd      	mov	sp, r7
 8011342:	bd80      	pop	{r7, pc}

08011344 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8011344:	b580      	push	{r7, lr}
 8011346:	b084      	sub	sp, #16
 8011348:	af00      	add	r7, sp, #0
 801134a:	6078      	str	r0, [r7, #4]
 801134c:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 fe9f 	bl	8012092 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011354:	4603      	mov	r3, r0
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 801135a:	6838      	ldr	r0, [r7, #0]
 801135c:	f000 fe99 	bl	8012092 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011360:	4603      	mov	r3, r0
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8011368:	f107 030c 	add.w	r3, r7, #12
 801136c:	4618      	mov	r0, r3
 801136e:	f000 fe90 	bl	8012092 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011372:	4603      	mov	r3, r0
 8011374:	681a      	ldr	r2, [r3, #0]
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	601a      	str	r2, [r3, #0]
    }
 801137a:	bf00      	nop
 801137c:	3710      	adds	r7, #16
 801137e:	46bd      	mov	sp, r7
 8011380:	bd80      	pop	{r7, pc}

08011382 <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 8011382:	b580      	push	{r7, lr}
 8011384:	b084      	sub	sp, #16
 8011386:	af00      	add	r7, sp, #0
 8011388:	6078      	str	r0, [r7, #4]
 801138a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f000 fe8b 	bl	80120a8 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 8011392:	4603      	mov	r3, r0
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011398:	6838      	ldr	r0, [r7, #0]
 801139a:	f000 fe85 	bl	80120a8 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 801139e:	4603      	mov	r3, r0
 80113a0:	681a      	ldr	r2, [r3, #0]
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80113a6:	f107 030c 	add.w	r3, r7, #12
 80113aa:	4618      	mov	r0, r3
 80113ac:	f000 fe7c 	bl	80120a8 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80113b0:	4603      	mov	r3, r0
 80113b2:	681a      	ldr	r2, [r3, #0]
 80113b4:	683b      	ldr	r3, [r7, #0]
 80113b6:	601a      	str	r2, [r3, #0]
    }
 80113b8:	bf00      	nop
 80113ba:	3710      	adds	r7, #16
 80113bc:	46bd      	mov	sp, r7
 80113be:	bd80      	pop	{r7, pc}

080113c0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 80113c0:	b590      	push	{r4, r7, lr}
 80113c2:	b083      	sub	sp, #12
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
 80113c8:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	f7f9 fed3 	bl	800b176 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 80113d0:	4604      	mov	r4, r0
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f7fa f916 	bl	800b604 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80113d8:	4602      	mov	r2, r0
 80113da:	683b      	ldr	r3, [r7, #0]
 80113dc:	4621      	mov	r1, r4
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f000 fe6d 	bl	80120be <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>
 80113e4:	4603      	mov	r3, r0
 80113e6:	4618      	mov	r0, r3
 80113e8:	370c      	adds	r7, #12
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd90      	pop	{r4, r7, pc}

080113ee <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>:
      key_comp() const
 80113ee:	b480      	push	{r7}
 80113f0:	b083      	sub	sp, #12
 80113f2:	af00      	add	r7, sp, #0
 80113f4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80113f6:	bf00      	nop
 80113f8:	4618      	mov	r0, r3
 80113fa:	370c      	adds	r7, #12
 80113fc:	46bd      	mov	sp, r7
 80113fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011402:	4770      	bx	lr

08011404 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011404:	b480      	push	{r7}
 8011406:	b083      	sub	sp, #12
 8011408:	af00      	add	r7, sp, #0
 801140a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	4618      	mov	r0, r3
 8011410:	370c      	adds	r7, #12
 8011412:	46bd      	mov	sp, r7
 8011414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011418:	4770      	bx	lr

0801141a <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 801141a:	b590      	push	{r4, r7, lr}
 801141c:	b083      	sub	sp, #12
 801141e:	af00      	add	r7, sp, #0
 8011420:	6078      	str	r0, [r7, #4]
 8011422:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 8011424:	687c      	ldr	r4, [r7, #4]
 8011426:	6838      	ldr	r0, [r7, #0]
 8011428:	f7ff ffec 	bl	8011404 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 801142c:	4603      	mov	r3, r0
 801142e:	4619      	mov	r1, r3
 8011430:	4620      	mov	r0, r4
 8011432:	f000 fe75 	bl	8012120 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	4618      	mov	r0, r3
 801143a:	370c      	adds	r7, #12
 801143c:	46bd      	mov	sp, r7
 801143e:	bd90      	pop	{r4, r7, pc}

08011440 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011440:	b480      	push	{r7}
 8011442:	b083      	sub	sp, #12
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	4618      	mov	r0, r3
 801144c:	370c      	adds	r7, #12
 801144e:	46bd      	mov	sp, r7
 8011450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011454:	4770      	bx	lr

08011456 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8011456:	b5b0      	push	{r4, r5, r7, lr}
 8011458:	b088      	sub	sp, #32
 801145a:	af02      	add	r7, sp, #8
 801145c:	60f8      	str	r0, [r7, #12]
 801145e:	60b9      	str	r1, [r7, #8]
 8011460:	607a      	str	r2, [r7, #4]
 8011462:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8011464:	68f8      	ldr	r0, [r7, #12]
 8011466:	f7fa f8e5 	bl	800b634 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 801146a:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 801146c:	68b8      	ldr	r0, [r7, #8]
 801146e:	f7ef fefa 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011472:	4604      	mov	r4, r0
 8011474:	6878      	ldr	r0, [r7, #4]
 8011476:	f7ff ffe3 	bl	8011440 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801147a:	4605      	mov	r5, r0
 801147c:	6838      	ldr	r0, [r7, #0]
 801147e:	f7ef ff08 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011482:	4603      	mov	r3, r0
 8011484:	9300      	str	r3, [sp, #0]
 8011486:	462b      	mov	r3, r5
 8011488:	4622      	mov	r2, r4
 801148a:	6979      	ldr	r1, [r7, #20]
 801148c:	68f8      	ldr	r0, [r7, #12]
 801148e:	f000 fe5a 	bl	8012146 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 8011492:	697b      	ldr	r3, [r7, #20]
	}
 8011494:	4618      	mov	r0, r3
 8011496:	3718      	adds	r7, #24
 8011498:	46bd      	mov	sp, r7
 801149a:	bdb0      	pop	{r4, r5, r7, pc}

0801149c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801149c:	b5b0      	push	{r4, r5, r7, lr}
 801149e:	b086      	sub	sp, #24
 80114a0:	af00      	add	r7, sp, #0
 80114a2:	60f8      	str	r0, [r7, #12]
 80114a4:	60b9      	str	r1, [r7, #8]
 80114a6:	607a      	str	r2, [r7, #4]
 80114a8:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d117      	bne.n	80114e0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80114b0:	68f8      	ldr	r0, [r7, #12]
 80114b2:	f7fa f8a7 	bl	800b604 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80114b6:	4602      	mov	r2, r0
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	4293      	cmp	r3, r2
 80114bc:	d010      	beq.n	80114e0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80114be:	68fc      	ldr	r4, [r7, #12]
 80114c0:	6838      	ldr	r0, [r7, #0]
 80114c2:	f7f9 ffa6 	bl	800b412 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80114c6:	4605      	mov	r5, r0
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7fa f8ed 	bl	800b6a8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80114ce:	4603      	mov	r3, r0
 80114d0:	461a      	mov	r2, r3
 80114d2:	4629      	mov	r1, r5
 80114d4:	4620      	mov	r0, r4
 80114d6:	f7f9 fd4b 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 80114da:	4603      	mov	r3, r0
 80114dc:	2b00      	cmp	r3, #0
 80114de:	d001      	beq.n	80114e4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 80114e0:	2301      	movs	r3, #1
 80114e2:	e000      	b.n	80114e6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 80114e4:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80114e6:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80114ec:	7df8      	ldrb	r0, [r7, #23]
 80114ee:	687a      	ldr	r2, [r7, #4]
 80114f0:	6839      	ldr	r1, [r7, #0]
 80114f2:	f00f fa99 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	695b      	ldr	r3, [r3, #20]
 80114fa:	1c5a      	adds	r2, r3, #1
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8011500:	f107 0310 	add.w	r3, r7, #16
 8011504:	6839      	ldr	r1, [r7, #0]
 8011506:	4618      	mov	r0, r3
 8011508:	f7f9 ffa7 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 801150c:	693b      	ldr	r3, [r7, #16]
    }
 801150e:	4618      	mov	r0, r3
 8011510:	3718      	adds	r7, #24
 8011512:	46bd      	mov	sp, r7
 8011514:	bdb0      	pop	{r4, r5, r7, pc}

08011516 <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8011516:	b580      	push	{r7, lr}
 8011518:	b084      	sub	sp, #16
 801151a:	af00      	add	r7, sp, #0
 801151c:	60f8      	str	r0, [r7, #12]
 801151e:	7239      	strb	r1, [r7, #8]
 8011520:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8011522:	6878      	ldr	r0, [r7, #4]
 8011524:	f7ff f969 	bl	80107fa <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011528:	4603      	mov	r3, r0
 801152a:	681a      	ldr	r2, [r3, #0]
 801152c:	68fb      	ldr	r3, [r7, #12]
 801152e:	601a      	str	r2, [r3, #0]
	    { }
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	4618      	mov	r0, r3
 8011534:	3710      	adds	r7, #16
 8011536:	46bd      	mov	sp, r7
 8011538:	bd80      	pop	{r7, pc}

0801153a <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 801153a:	b5b0      	push	{r4, r5, r7, lr}
 801153c:	b084      	sub	sp, #16
 801153e:	af00      	add	r7, sp, #0
 8011540:	60f8      	str	r0, [r7, #12]
 8011542:	7239      	strb	r1, [r7, #8]
 8011544:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 8011546:	68fc      	ldr	r4, [r7, #12]
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f7ff f956 	bl	80107fa <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 801154e:	4603      	mov	r3, r0
 8011550:	461a      	mov	r2, r3
 8011552:	4629      	mov	r1, r5
 8011554:	4620      	mov	r0, r4
 8011556:	f7ff ffde 	bl	8011516 <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	2201      	movs	r2, #1
 801155e:	711a      	strb	r2, [r3, #4]
	{ }
 8011560:	68fb      	ldr	r3, [r7, #12]
 8011562:	4618      	mov	r0, r3
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bdb0      	pop	{r4, r5, r7, pc}

0801156a <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801156a:	b480      	push	{r7}
 801156c:	b083      	sub	sp, #12
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	4618      	mov	r0, r3
 8011576:	370c      	adds	r7, #12
 8011578:	46bd      	mov	sp, r7
 801157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801157e:	4770      	bx	lr

08011580 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8011580:	b580      	push	{r7, lr}
 8011582:	b088      	sub	sp, #32
 8011584:	af00      	add	r7, sp, #0
 8011586:	60f8      	str	r0, [r7, #12]
 8011588:	60b9      	str	r1, [r7, #8]
 801158a:	607a      	str	r2, [r7, #4]
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	61fb      	str	r3, [r7, #28]
 8011590:	68bb      	ldr	r3, [r7, #8]
 8011592:	61bb      	str	r3, [r7, #24]
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8011598:	f7ee fec2 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d003      	beq.n	80115aa <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80115a2:	69b8      	ldr	r0, [r7, #24]
 80115a4:	f00f f9d0 	bl	8020948 <_ZdlPv>
	    return;
 80115a8:	e005      	b.n	80115b6 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80115aa:	697a      	ldr	r2, [r7, #20]
 80115ac:	69b9      	ldr	r1, [r7, #24]
 80115ae:	69f8      	ldr	r0, [r7, #28]
 80115b0:	f001 fb65 	bl	8012c7e <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop
 80115b8:	3720      	adds	r7, #32
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}

080115be <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80115be:	b580      	push	{r7, lr}
 80115c0:	b082      	sub	sp, #8
 80115c2:	af00      	add	r7, sp, #0
 80115c4:	6078      	str	r0, [r7, #4]
 80115c6:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80115c8:	f7ee feaa 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80115cc:	4603      	mov	r3, r0
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d004      	beq.n	80115dc <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80115d2:	6839      	ldr	r1, [r7, #0]
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f000 fde3 	bl	80121a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>
 80115da:	e003      	b.n	80115e4 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x26>
	__destroy(__first, __last);
 80115dc:	6839      	ldr	r1, [r7, #0]
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f000 fdf6 	bl	80121d0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>
    }
 80115e4:	3708      	adds	r7, #8
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}

080115ea <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80115ea:	b480      	push	{r7}
 80115ec:	b083      	sub	sp, #12
 80115ee:	af00      	add	r7, sp, #0
 80115f0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	4618      	mov	r0, r3
 80115f6:	370c      	adds	r7, #12
 80115f8:	46bd      	mov	sp, r7
 80115fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115fe:	4770      	bx	lr

08011600 <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011600:	b590      	push	{r4, r7, lr}
 8011602:	b083      	sub	sp, #12
 8011604:	af00      	add	r7, sp, #0
 8011606:	6078      	str	r0, [r7, #4]
 8011608:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801160a:	6838      	ldr	r0, [r7, #0]
 801160c:	f7ff ffed 	bl	80115ea <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011610:	4603      	mov	r3, r0
 8011612:	681c      	ldr	r4, [r3, #0]
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4619      	mov	r1, r3
 8011618:	2004      	movs	r0, #4
 801161a:	f7ee fe89 	bl	8000330 <_ZnwjPv>
 801161e:	4603      	mov	r3, r0
 8011620:	601c      	str	r4, [r3, #0]
 8011622:	4618      	mov	r0, r3
 8011624:	370c      	adds	r7, #12
 8011626:	46bd      	mov	sp, r7
 8011628:	bd90      	pop	{r4, r7, pc}

0801162a <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 801162a:	b580      	push	{r7, lr}
 801162c:	b084      	sub	sp, #16
 801162e:	af00      	add	r7, sp, #0
 8011630:	60f8      	str	r0, [r7, #12]
 8011632:	60b9      	str	r1, [r7, #8]
 8011634:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8011636:	6878      	ldr	r0, [r7, #4]
 8011638:	f7ff ffd7 	bl	80115ea <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 801163c:	4603      	mov	r3, r0
 801163e:	4619      	mov	r1, r3
 8011640:	68b8      	ldr	r0, [r7, #8]
 8011642:	f7ff ffdd 	bl	8011600 <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8011646:	bf00      	nop
 8011648:	3710      	adds	r7, #16
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
	...

08011650 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011650:	b5b0      	push	{r4, r5, r7, lr}
 8011652:	b08c      	sub	sp, #48	; 0x30
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 801165c:	4a39      	ldr	r2, [pc, #228]	; (8011744 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 801165e:	2101      	movs	r1, #1
 8011660:	68f8      	ldr	r0, [r7, #12]
 8011662:	f000 fdc0 	bl	80121e6 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>
 8011666:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	685b      	ldr	r3, [r3, #4]
 8011672:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011674:	68f8      	ldr	r0, [r7, #12]
 8011676:	f7fe fdf8 	bl	801026a <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 801167a:	4603      	mov	r3, r0
 801167c:	617b      	str	r3, [r7, #20]
 801167e:	f107 0214 	add.w	r2, r7, #20
 8011682:	f107 0308 	add.w	r3, r7, #8
 8011686:	4611      	mov	r1, r2
 8011688:	4618      	mov	r0, r3
 801168a:	f000 fdf3 	bl	8012274 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801168e:	4603      	mov	r3, r0
 8011690:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011692:	68fb      	ldr	r3, [r7, #12]
 8011694:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011696:	4618      	mov	r0, r3
 8011698:	f000 fe01 	bl	801229e <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>
 801169c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801169e:	69fb      	ldr	r3, [r7, #28]
 80116a0:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80116a2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80116a8:	69fa      	ldr	r2, [r7, #28]
 80116aa:	18d5      	adds	r5, r2, r3
 80116ac:	6878      	ldr	r0, [r7, #4]
 80116ae:	f7ff ff9c 	bl	80115ea <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 80116b2:	4603      	mov	r3, r0
 80116b4:	461a      	mov	r2, r3
 80116b6:	4629      	mov	r1, r5
 80116b8:	4620      	mov	r0, r4
 80116ba:	f7ff ffb6 	bl	801162a <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80116be:	2300      	movs	r3, #0
 80116c0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80116c2:	f107 0308 	add.w	r3, r7, #8
 80116c6:	4618      	mov	r0, r3
 80116c8:	f7fc fcec 	bl	800e0a4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80116cc:	4603      	mov	r3, r0
 80116ce:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	4618      	mov	r0, r3
 80116d4:	f7fa f8e8 	bl	800b8a8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 80116d8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80116da:	69fa      	ldr	r2, [r7, #28]
 80116dc:	4621      	mov	r1, r4
 80116de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80116e0:	f000 fdf1 	bl	80122c6 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80116e4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80116e6:	69bb      	ldr	r3, [r7, #24]
 80116e8:	3304      	adds	r3, #4
 80116ea:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80116ec:	f107 0308 	add.w	r3, r7, #8
 80116f0:	4618      	mov	r0, r3
 80116f2:	f7fc fcd7 	bl	800e0a4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80116f6:	4603      	mov	r3, r0
 80116f8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	4618      	mov	r0, r3
 80116fe:	f7fa f8d3 	bl	800b8a8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8011702:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011704:	69ba      	ldr	r2, [r7, #24]
 8011706:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011708:	4620      	mov	r0, r4
 801170a:	f000 fddc 	bl	80122c6 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801170e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011710:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	689a      	ldr	r2, [r3, #8]
 8011716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011718:	1ad3      	subs	r3, r2, r3
 801171a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 801171c:	461a      	mov	r2, r3
 801171e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011720:	f7f9 fc6b 	bl	800affa <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	69fa      	ldr	r2, [r7, #28]
 8011728:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	69ba      	ldr	r2, [r7, #24]
 801172e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011732:	009b      	lsls	r3, r3, #2
 8011734:	69fa      	ldr	r2, [r7, #28]
 8011736:	441a      	add	r2, r3
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	609a      	str	r2, [r3, #8]
    }
 801173c:	bf00      	nop
 801173e:	3730      	adds	r7, #48	; 0x30
 8011740:	46bd      	mov	sp, r7
 8011742:	bdb0      	pop	{r4, r5, r7, pc}
 8011744:	0802103c 	.word	0x0802103c

08011748 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011748:	b580      	push	{r7, lr}
 801174a:	b084      	sub	sp, #16
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011750:	6878      	ldr	r0, [r7, #4]
 8011752:	f7fe fd9a 	bl	801028a <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 8011756:	4603      	mov	r3, r0
 8011758:	60fb      	str	r3, [r7, #12]
 801175a:	f107 030c 	add.w	r3, r7, #12
 801175e:	2101      	movs	r1, #1
 8011760:	4618      	mov	r0, r3
 8011762:	f000 fdc4 	bl	80122ee <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>
 8011766:	4603      	mov	r3, r0
 8011768:	60bb      	str	r3, [r7, #8]
 801176a:	f107 0308 	add.w	r3, r7, #8
 801176e:	4618      	mov	r0, r3
 8011770:	f7fc fccb 	bl	800e10a <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 8011774:	4603      	mov	r3, r0
      }
 8011776:	4618      	mov	r0, r3
 8011778:	3710      	adds	r7, #16
 801177a:	46bd      	mov	sp, r7
 801177c:	bd80      	pop	{r7, pc}

0801177e <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801177e:	b480      	push	{r7}
 8011780:	b083      	sub	sp, #12
 8011782:	af00      	add	r7, sp, #0
 8011784:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	4618      	mov	r0, r3
 801178a:	370c      	adds	r7, #12
 801178c:	46bd      	mov	sp, r7
 801178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011792:	4770      	bx	lr

08011794 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011794:	b590      	push	{r4, r7, lr}
 8011796:	b087      	sub	sp, #28
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80117a0:	68f8      	ldr	r0, [r7, #12]
 80117a2:	f000 fdbd 	bl	8012320 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 80117a6:	4604      	mov	r4, r0
 80117a8:	68f8      	ldr	r0, [r7, #12]
 80117aa:	f7fe fc65 	bl	8010078 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80117ae:	4603      	mov	r3, r0
 80117b0:	1ae2      	subs	r2, r4, r3
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	429a      	cmp	r2, r3
 80117b6:	bf34      	ite	cc
 80117b8:	2301      	movcc	r3, #1
 80117ba:	2300      	movcs	r3, #0
 80117bc:	b2db      	uxtb	r3, r3
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d002      	beq.n	80117c8 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f00f f98e 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f7fe fc55 	bl	8010078 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80117ce:	4604      	mov	r4, r0
 80117d0:	68f8      	ldr	r0, [r7, #12]
 80117d2:	f7fe fc51 	bl	8010078 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80117d6:	4603      	mov	r3, r0
 80117d8:	613b      	str	r3, [r7, #16]
 80117da:	f107 0208 	add.w	r2, r7, #8
 80117de:	f107 0310 	add.w	r3, r7, #16
 80117e2:	4611      	mov	r1, r2
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7f1 f834 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 80117ea:	4603      	mov	r3, r0
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	4423      	add	r3, r4
 80117f0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	f7fe fc40 	bl	8010078 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80117f8:	4602      	mov	r2, r0
 80117fa:	697b      	ldr	r3, [r7, #20]
 80117fc:	4293      	cmp	r3, r2
 80117fe:	d306      	bcc.n	801180e <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	f000 fd8d 	bl	8012320 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011806:	4602      	mov	r2, r0
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	4293      	cmp	r3, r2
 801180c:	d904      	bls.n	8011818 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x84>
 801180e:	68f8      	ldr	r0, [r7, #12]
 8011810:	f000 fd86 	bl	8012320 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 8011814:	4603      	mov	r3, r0
 8011816:	e000      	b.n	801181a <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011818:	697b      	ldr	r3, [r7, #20]
      }
 801181a:	4618      	mov	r0, r3
 801181c:	371c      	adds	r7, #28
 801181e:	46bd      	mov	sp, r7
 8011820:	bd90      	pop	{r4, r7, pc}

08011822 <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011822:	b590      	push	{r4, r7, lr}
 8011824:	b083      	sub	sp, #12
 8011826:	af00      	add	r7, sp, #0
 8011828:	6078      	str	r0, [r7, #4]
 801182a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801182c:	6878      	ldr	r0, [r7, #4]
 801182e:	f7fc fb39 	bl	800dea4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8011832:	4603      	mov	r3, r0
 8011834:	681c      	ldr	r4, [r3, #0]
 8011836:	6838      	ldr	r0, [r7, #0]
 8011838:	f7fc fb34 	bl	800dea4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 801183c:	4603      	mov	r3, r0
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	1ae3      	subs	r3, r4, r3
 8011842:	109b      	asrs	r3, r3, #2
 8011844:	4618      	mov	r0, r3
 8011846:	370c      	adds	r7, #12
 8011848:	46bd      	mov	sp, r7
 801184a:	bd90      	pop	{r4, r7, pc}

0801184c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d006      	beq.n	801186a <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x1e>
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	6839      	ldr	r1, [r7, #0]
 8011860:	4618      	mov	r0, r3
 8011862:	f000 fd6e 	bl	8012342 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>
 8011866:	4603      	mov	r3, r0
 8011868:	e000      	b.n	801186c <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x20>
 801186a:	2300      	movs	r3, #0
      }
 801186c:	4618      	mov	r0, r3
 801186e:	3708      	adds	r7, #8
 8011870:	46bd      	mov	sp, r7
 8011872:	bd80      	pop	{r7, pc}

08011874 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011874:	b590      	push	{r4, r7, lr}
 8011876:	b087      	sub	sp, #28
 8011878:	af02      	add	r7, sp, #8
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	607a      	str	r2, [r7, #4]
 8011880:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011882:	f88d 4000 	strb.w	r4, [sp]
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	68b9      	ldr	r1, [r7, #8]
 801188c:	68f8      	ldr	r0, [r7, #12]
 801188e:	f000 fd78 	bl	8012382 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011892:	4603      	mov	r3, r0
      }
 8011894:	4618      	mov	r0, r3
 8011896:	3714      	adds	r7, #20
 8011898:	46bd      	mov	sp, r7
 801189a:	bd90      	pop	{r4, r7, pc}

0801189c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 801189c:	b590      	push	{r4, r7, lr}
 801189e:	b085      	sub	sp, #20
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	60f8      	str	r0, [r7, #12]
 80118a4:	60b9      	str	r1, [r7, #8]
 80118a6:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80118a8:	68b8      	ldr	r0, [r7, #8]
 80118aa:	f7ff f91e 	bl	8010aea <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 80118ae:	4604      	mov	r4, r0
 80118b0:	68f8      	ldr	r0, [r7, #12]
 80118b2:	f7fb fe8c 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 80118b6:	4603      	mov	r3, r0
 80118b8:	4619      	mov	r1, r3
 80118ba:	2004      	movs	r0, #4
 80118bc:	f7ee fd38 	bl	8000330 <_ZnwjPv>
 80118c0:	4602      	mov	r2, r0
 80118c2:	6823      	ldr	r3, [r4, #0]
 80118c4:	6013      	str	r3, [r2, #0]
 80118c6:	bf00      	nop
 80118c8:	3714      	adds	r7, #20
 80118ca:	46bd      	mov	sp, r7
 80118cc:	bd90      	pop	{r4, r7, pc}

080118ce <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 80118ce:	b580      	push	{r7, lr}
 80118d0:	b084      	sub	sp, #16
 80118d2:	af00      	add	r7, sp, #0
 80118d4:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 80118d6:	6878      	ldr	r0, [r7, #4]
 80118d8:	f000 fd6f 	bl	80123ba <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 80118dc:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 80118de:	68f8      	ldr	r0, [r7, #12]
 80118e0:	f000 fd77 	bl	80123d2 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>
 80118e4:	4603      	mov	r3, r0
	}
 80118e6:	4618      	mov	r0, r3
 80118e8:	3710      	adds	r7, #16
 80118ea:	46bd      	mov	sp, r7
 80118ec:	bd80      	pop	{r7, pc}

080118ee <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 80118ee:	b590      	push	{r4, r7, lr}
 80118f0:	b083      	sub	sp, #12
 80118f2:	af00      	add	r7, sp, #0
 80118f4:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f000 fd76 	bl	80123e8 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 80118fc:	4603      	mov	r3, r0
 80118fe:	4619      	mov	r1, r3
 8011900:	4620      	mov	r0, r4
 8011902:	f000 fd7c 	bl	80123fe <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 8011906:	bf00      	nop
 8011908:	370c      	adds	r7, #12
 801190a:	46bd      	mov	sp, r7
 801190c:	bd90      	pop	{r4, r7, pc}

0801190e <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 801190e:	b580      	push	{r7, lr}
 8011910:	b082      	sub	sp, #8
 8011912:	af00      	add	r7, sp, #0
 8011914:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011916:	6878      	ldr	r0, [r7, #4]
 8011918:	f7fb fe59 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 801191c:	4603      	mov	r3, r0
 801191e:	4618      	mov	r0, r3
 8011920:	3708      	adds	r7, #8
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}

08011926 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011926:	b5b0      	push	{r4, r5, r7, lr}
 8011928:	b084      	sub	sp, #16
 801192a:	af00      	add	r7, sp, #0
 801192c:	60f8      	str	r0, [r7, #12]
 801192e:	60b9      	str	r1, [r7, #8]
 8011930:	4613      	mov	r3, r2
 8011932:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011934:	79fb      	ldrb	r3, [r7, #7]
 8011936:	2b03      	cmp	r3, #3
 8011938:	d016      	beq.n	8011968 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 801193a:	2b03      	cmp	r3, #3
 801193c:	dc19      	bgt.n	8011972 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 801193e:	2b01      	cmp	r3, #1
 8011940:	d002      	beq.n	8011948 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 8011942:	2b02      	cmp	r3, #2
 8011944:	d00a      	beq.n	801195c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 8011946:	e014      	b.n	8011972 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011948:	68b8      	ldr	r0, [r7, #8]
 801194a:	f7ff ffc0 	bl	80118ce <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 801194e:	4604      	mov	r4, r0
 8011950:	68f8      	ldr	r0, [r7, #12]
 8011952:	f7ff ffdc 	bl	801190e <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 8011956:	4603      	mov	r3, r0
 8011958:	601c      	str	r4, [r3, #0]
	      break;
 801195a:	e00a      	b.n	8011972 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 801195c:	462a      	mov	r2, r5
 801195e:	68b9      	ldr	r1, [r7, #8]
 8011960:	68f8      	ldr	r0, [r7, #12]
 8011962:	f000 fd5c 	bl	801241e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 8011966:	e004      	b.n	8011972 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011968:	4621      	mov	r1, r4
 801196a:	68f8      	ldr	r0, [r7, #12]
 801196c:	f000 fd70 	bl	8012450 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011970:	bf00      	nop
	  return false;
 8011972:	2300      	movs	r3, #0
	}
 8011974:	4618      	mov	r0, r3
 8011976:	3710      	adds	r7, #16
 8011978:	46bd      	mov	sp, r7
 801197a:	bdb0      	pop	{r4, r5, r7, pc}

0801197c <_ZNSaIP5FieldIJEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 801197c:	b580      	push	{r7, lr}
 801197e:	b082      	sub	sp, #8
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f000 fd6f 	bl	8012468 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4618      	mov	r0, r3
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}

08011994 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8011994:	b480      	push	{r7}
 8011996:	b083      	sub	sp, #12
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	601a      	str	r2, [r3, #0]
 80119a2:	687b      	ldr	r3, [r7, #4]
 80119a4:	2200      	movs	r2, #0
 80119a6:	605a      	str	r2, [r3, #4]
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	2200      	movs	r2, #0
 80119ac:	609a      	str	r2, [r3, #8]
	{ }
 80119ae:	687b      	ldr	r3, [r7, #4]
 80119b0:	4618      	mov	r0, r3
 80119b2:	370c      	adds	r7, #12
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80119bc:	b580      	push	{r7, lr}
 80119be:	b084      	sub	sp, #16
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	60f8      	str	r0, [r7, #12]
 80119c4:	60b9      	str	r1, [r7, #8]
 80119c6:	607a      	str	r2, [r7, #4]
	if (__p)
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d005      	beq.n	80119da <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	687a      	ldr	r2, [r7, #4]
 80119d2:	68b9      	ldr	r1, [r7, #8]
 80119d4:	4618      	mov	r0, r3
 80119d6:	f000 fd52 	bl	801247e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>
      }
 80119da:	bf00      	nop
 80119dc:	3710      	adds	r7, #16
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}

080119e2 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80119e2:	b480      	push	{r7}
 80119e4:	b083      	sub	sp, #12
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	4618      	mov	r0, r3
 80119ee:	370c      	adds	r7, #12
 80119f0:	46bd      	mov	sp, r7
 80119f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f6:	4770      	bx	lr

080119f8 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80119f8:	b580      	push	{r7, lr}
 80119fa:	b084      	sub	sp, #16
 80119fc:	af00      	add	r7, sp, #0
 80119fe:	60f8      	str	r0, [r7, #12]
 8011a00:	60b9      	str	r1, [r7, #8]
 8011a02:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8011a04:	68b9      	ldr	r1, [r7, #8]
 8011a06:	68f8      	ldr	r0, [r7, #12]
 8011a08:	f000 fd58 	bl	80124bc <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>
    }
 8011a0c:	bf00      	nop
 8011a0e:	3710      	adds	r7, #16
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}

08011a14 <_ZN5FieldIJEEC1Ev>:
class Field<> {
 8011a14:	b480      	push	{r7}
 8011a16:	b083      	sub	sp, #12
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	6078      	str	r0, [r7, #4]
 8011a1c:	4a04      	ldr	r2, [pc, #16]	; (8011a30 <_ZN5FieldIJEEC1Ev+0x1c>)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	601a      	str	r2, [r3, #0]
 8011a22:	687b      	ldr	r3, [r7, #4]
 8011a24:	4618      	mov	r0, r3
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	080210ec 	.word	0x080210ec

08011a34 <_ZN5FieldIJhEEC1EPh>:
    Field(T* ptr) : ptr(ptr) { }
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
 8011a3c:	6039      	str	r1, [r7, #0]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7ff ffe7 	bl	8011a14 <_ZN5FieldIJEEC1Ev>
 8011a46:	4a05      	ldr	r2, [pc, #20]	; (8011a5c <_ZN5FieldIJhEEC1EPh+0x28>)
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	601a      	str	r2, [r3, #0]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	683a      	ldr	r2, [r7, #0]
 8011a50:	605a      	str	r2, [r3, #4]
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	4618      	mov	r0, r3
 8011a56:	3708      	adds	r7, #8
 8011a58:	46bd      	mov	sp, r7
 8011a5a:	bd80      	pop	{r7, pc}
 8011a5c:	080210d8 	.word	0x080210d8

08011a60 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>:
      push_back(value_type&& __x)
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b082      	sub	sp, #8
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8011a6a:	6838      	ldr	r0, [r7, #0]
 8011a6c:	f000 fd3c 	bl	80124e8 <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>
 8011a70:	4603      	mov	r3, r0
 8011a72:	4619      	mov	r1, r3
 8011a74:	6878      	ldr	r0, [r7, #4]
 8011a76:	f000 fd42 	bl	80124fe <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 8011a7a:	bf00      	nop
 8011a7c:	3708      	adds	r7, #8
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b082      	sub	sp, #8
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	6078      	str	r0, [r7, #4]
 8011a8a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	6839      	ldr	r1, [r7, #0]
 8011a90:	4618      	mov	r0, r3
 8011a92:	f000 fd66 	bl	8012562 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 8011a96:	4603      	mov	r3, r0
 8011a98:	4618      	mov	r0, r3
 8011a9a:	3708      	adds	r7, #8
 8011a9c:	46bd      	mov	sp, r7
 8011a9e:	bd80      	pop	{r7, pc}

08011aa0 <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 8011aa0:	b590      	push	{r4, r7, lr}
 8011aa2:	b083      	sub	sp, #12
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	4618      	mov	r0, r3
 8011aac:	f000 fd70 	bl	8012590 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 8011ab0:	bf00      	nop
 8011ab2:	4620      	mov	r0, r4
 8011ab4:	370c      	adds	r7, #12
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd90      	pop	{r4, r7, pc}

08011aba <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 8011aba:	b480      	push	{r7}
 8011abc:	b085      	sub	sp, #20
 8011abe:	af00      	add	r7, sp, #0
 8011ac0:	60f8      	str	r0, [r7, #12]
 8011ac2:	60b9      	str	r1, [r7, #8]
 8011ac4:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	881a      	ldrh	r2, [r3, #0]
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	881b      	ldrh	r3, [r3, #0]
 8011ace:	429a      	cmp	r2, r3
 8011ad0:	bf34      	ite	cc
 8011ad2:	2301      	movcc	r3, #1
 8011ad4:	2300      	movcs	r3, #0
 8011ad6:	b2db      	uxtb	r3, r3
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3714      	adds	r7, #20
 8011adc:	46bd      	mov	sp, r7
 8011ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae2:	4770      	bx	lr

08011ae4 <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b082      	sub	sp, #8
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
 8011aec:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6839      	ldr	r1, [r7, #0]
 8011af2:	4618      	mov	r0, r3
 8011af4:	f000 fd57 	bl	80125a6 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	4618      	mov	r0, r3
 8011afc:	3708      	adds	r7, #8
 8011afe:	46bd      	mov	sp, r7
 8011b00:	bd80      	pop	{r7, pc}

08011b02 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8011b02:	b480      	push	{r7}
 8011b04:	b083      	sub	sp, #12
 8011b06:	af00      	add	r7, sp, #0
 8011b08:	6078      	str	r0, [r7, #4]
 8011b0a:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8011b0c:	683b      	ldr	r3, [r7, #0]
 8011b0e:	681a      	ldr	r2, [r3, #0]
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	601a      	str	r2, [r3, #0]
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	4618      	mov	r0, r3
 8011b18:	370c      	adds	r7, #12
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b20:	4770      	bx	lr

08011b22 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011b22:	b5b0      	push	{r4, r5, r7, lr}
 8011b24:	b088      	sub	sp, #32
 8011b26:	af00      	add	r7, sp, #0
 8011b28:	60f8      	str	r0, [r7, #12]
 8011b2a:	60b9      	str	r1, [r7, #8]
 8011b2c:	607a      	str	r2, [r7, #4]
 8011b2e:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f7ef fb98 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011b36:	4604      	mov	r4, r0
 8011b38:	6838      	ldr	r0, [r7, #0]
 8011b3a:	f000 fd43 	bl	80125c4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011b3e:	4605      	mov	r5, r0
 8011b40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b42:	f7ef fba6 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011b46:	4603      	mov	r3, r0
 8011b48:	462a      	mov	r2, r5
 8011b4a:	4621      	mov	r1, r4
 8011b4c:	68f8      	ldr	r0, [r7, #12]
 8011b4e:	f000 fd44 	bl	80125da <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8011b52:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8011b54:	69f8      	ldr	r0, [r7, #28]
 8011b56:	f000 fe86 	bl	8012866 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	f107 0010 	add.w	r0, r7, #16
 8011b60:	68ba      	ldr	r2, [r7, #8]
 8011b62:	68f9      	ldr	r1, [r7, #12]
 8011b64:	f000 fd5c 	bl	8012620 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d007      	beq.n	8011b7e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8011b6e:	6939      	ldr	r1, [r7, #16]
 8011b70:	697a      	ldr	r2, [r7, #20]
 8011b72:	69fb      	ldr	r3, [r7, #28]
 8011b74:	68f8      	ldr	r0, [r7, #12]
 8011b76:	f000 fe89 	bl	801288c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	e00b      	b.n	8011b96 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8011b7e:	69f9      	ldr	r1, [r7, #28]
 8011b80:	68f8      	ldr	r0, [r7, #12]
 8011b82:	f7fa fc3f 	bl	800c404 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8011b86:	693a      	ldr	r2, [r7, #16]
 8011b88:	f107 0318 	add.w	r3, r7, #24
 8011b8c:	4611      	mov	r1, r2
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f7f3 fe09 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8011b94:	69bb      	ldr	r3, [r7, #24]
      }
 8011b96:	4618      	mov	r0, r3
 8011b98:	3720      	adds	r7, #32
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	bdb0      	pop	{r4, r5, r7, pc}

08011b9e <_ZN6Packet5buildItJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011b9e:	b590      	push	{r4, r7, lr}
 8011ba0:	b085      	sub	sp, #20
 8011ba2:	af00      	add	r7, sp, #0
 8011ba4:	6078      	str	r0, [r7, #4]
 8011ba6:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	1c9a      	adds	r2, r3, #2
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011bb2:	2008      	movs	r0, #8
 8011bb4:	f00e fecc 	bl	8020950 <_Znwj>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	461c      	mov	r4, r3
 8011bbc:	6839      	ldr	r1, [r7, #0]
 8011bbe:	4620      	mov	r0, r4
 8011bc0:	f000 fea2 	bl	8012908 <_ZN5FieldIJtEEC1EPt>
 8011bc4:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	f103 0208 	add.w	r2, r3, #8
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	60bb      	str	r3, [r7, #8]
 8011bd0:	f107 0308 	add.w	r3, r7, #8
 8011bd4:	4619      	mov	r1, r3
 8011bd6:	4610      	mov	r0, r2
 8011bd8:	f7ff ff42 	bl	8011a60 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011bdc:	bf00      	nop
    }
 8011bde:	3714      	adds	r7, #20
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd90      	pop	{r4, r7, pc}

08011be4 <_ZN6Packet5buildImJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011be4:	b590      	push	{r4, r7, lr}
 8011be6:	b085      	sub	sp, #20
 8011be8:	af00      	add	r7, sp, #0
 8011bea:	6078      	str	r0, [r7, #4]
 8011bec:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	1d1a      	adds	r2, r3, #4
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011bf8:	2008      	movs	r0, #8
 8011bfa:	f00e fea9 	bl	8020950 <_Znwj>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	461c      	mov	r4, r3
 8011c02:	6839      	ldr	r1, [r7, #0]
 8011c04:	4620      	mov	r0, r4
 8011c06:	f000 fe95 	bl	8012934 <_ZN5FieldIJmEEC1EPm>
 8011c0a:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f103 0208 	add.w	r2, r3, #8
 8011c12:	68fb      	ldr	r3, [r7, #12]
 8011c14:	60bb      	str	r3, [r7, #8]
 8011c16:	f107 0308 	add.w	r3, r7, #8
 8011c1a:	4619      	mov	r1, r3
 8011c1c:	4610      	mov	r0, r2
 8011c1e:	f7ff ff1f 	bl	8011a60 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011c22:	bf00      	nop
    }
 8011c24:	3714      	adds	r7, #20
 8011c26:	46bd      	mov	sp, r7
 8011c28:	bd90      	pop	{r4, r7, pc}

08011c2a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011c2a:	b480      	push	{r7}
 8011c2c:	b083      	sub	sp, #12
 8011c2e:	af00      	add	r7, sp, #0
 8011c30:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	689b      	ldr	r3, [r3, #8]
      }
 8011c36:	4618      	mov	r0, r3
 8011c38:	370c      	adds	r7, #12
 8011c3a:	46bd      	mov	sp, r7
 8011c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c40:	4770      	bx	lr

08011c42 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011c42:	b480      	push	{r7}
 8011c44:	b083      	sub	sp, #12
 8011c46:	af00      	add	r7, sp, #0
 8011c48:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	3304      	adds	r3, #4
 8011c4e:	4618      	mov	r0, r3
 8011c50:	370c      	adds	r7, #12
 8011c52:	46bd      	mov	sp, r7
 8011c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c58:	4770      	bx	lr

08011c5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011c5a:	b590      	push	{r4, r7, lr}
 8011c5c:	b087      	sub	sp, #28
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	60f8      	str	r0, [r7, #12]
 8011c62:	60b9      	str	r1, [r7, #8]
 8011c64:	607a      	str	r2, [r7, #4]
 8011c66:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d01d      	beq.n	8011caa <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011c6e:	68fc      	ldr	r4, [r7, #12]
 8011c70:	68b8      	ldr	r0, [r7, #8]
 8011c72:	f7f6 fd63 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011c76:	4603      	mov	r3, r0
 8011c78:	6819      	ldr	r1, [r3, #0]
 8011c7a:	683b      	ldr	r3, [r7, #0]
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	461a      	mov	r2, r3
 8011c80:	4620      	mov	r0, r4
 8011c82:	f7ef f92a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011c86:	4603      	mov	r3, r0
 8011c88:	f083 0301 	eor.w	r3, r3, #1
 8011c8c:	b2db      	uxtb	r3, r3
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d006      	beq.n	8011ca0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	607b      	str	r3, [r7, #4]
 8011c96:	68b8      	ldr	r0, [r7, #8]
 8011c98:	f000 fe62 	bl	8012960 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011c9c:	60b8      	str	r0, [r7, #8]
 8011c9e:	e7e3      	b.n	8011c68 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011ca0:	68b8      	ldr	r0, [r7, #8]
 8011ca2:	f000 fe69 	bl	8012978 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011ca6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011ca8:	e7de      	b.n	8011c68 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011caa:	f107 0314 	add.w	r3, r7, #20
 8011cae:	6879      	ldr	r1, [r7, #4]
 8011cb0:	4618      	mov	r0, r3
 8011cb2:	f000 f805 	bl	8011cc0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8011cb6:	697b      	ldr	r3, [r7, #20]
    }
 8011cb8:	4618      	mov	r0, r3
 8011cba:	371c      	adds	r7, #28
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd90      	pop	{r4, r7, pc}

08011cc0 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011cc0:	b480      	push	{r7}
 8011cc2:	b083      	sub	sp, #12
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
 8011cc8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	683a      	ldr	r2, [r7, #0]
 8011cce:	601a      	str	r2, [r3, #0]
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	370c      	adds	r7, #12
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011cde:	b480      	push	{r7}
 8011ce0:	b083      	sub	sp, #12
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	689b      	ldr	r3, [r3, #8]
      }
 8011cea:	4618      	mov	r0, r3
 8011cec:	370c      	adds	r7, #12
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr

08011cf6 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011cf6:	b480      	push	{r7}
 8011cf8:	b083      	sub	sp, #12
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	3304      	adds	r3, #4
 8011d02:	4618      	mov	r0, r3
 8011d04:	370c      	adds	r7, #12
 8011d06:	46bd      	mov	sp, r7
 8011d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d0c:	4770      	bx	lr

08011d0e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011d0e:	b590      	push	{r4, r7, lr}
 8011d10:	b087      	sub	sp, #28
 8011d12:	af00      	add	r7, sp, #0
 8011d14:	60f8      	str	r0, [r7, #12]
 8011d16:	60b9      	str	r1, [r7, #8]
 8011d18:	607a      	str	r2, [r7, #4]
 8011d1a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d01d      	beq.n	8011d5e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011d22:	68fc      	ldr	r4, [r7, #12]
 8011d24:	68b8      	ldr	r0, [r7, #8]
 8011d26:	f7f2 f861 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011d2a:	4603      	mov	r3, r0
 8011d2c:	6819      	ldr	r1, [r3, #0]
 8011d2e:	683b      	ldr	r3, [r7, #0]
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	461a      	mov	r2, r3
 8011d34:	4620      	mov	r0, r4
 8011d36:	f7ef f8d0 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	f083 0301 	eor.w	r3, r3, #1
 8011d40:	b2db      	uxtb	r3, r3
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d006      	beq.n	8011d54 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011d46:	68bb      	ldr	r3, [r7, #8]
 8011d48:	607b      	str	r3, [r7, #4]
 8011d4a:	68b8      	ldr	r0, [r7, #8]
 8011d4c:	f000 fe20 	bl	8012990 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011d50:	60b8      	str	r0, [r7, #8]
 8011d52:	e7e3      	b.n	8011d1c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011d54:	68b8      	ldr	r0, [r7, #8]
 8011d56:	f000 fe27 	bl	80129a8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011d5a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011d5c:	e7de      	b.n	8011d1c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011d5e:	f107 0314 	add.w	r3, r7, #20
 8011d62:	6879      	ldr	r1, [r7, #4]
 8011d64:	4618      	mov	r0, r3
 8011d66:	f000 f805 	bl	8011d74 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8011d6a:	697b      	ldr	r3, [r7, #20]
    }
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	371c      	adds	r7, #28
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd90      	pop	{r4, r7, pc}

08011d74 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011d74:	b480      	push	{r7}
 8011d76:	b083      	sub	sp, #12
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
 8011d7c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	683a      	ldr	r2, [r7, #0]
 8011d82:	601a      	str	r2, [r3, #0]
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	4618      	mov	r0, r3
 8011d88:	370c      	adds	r7, #12
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr

08011d92 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011d92:	b580      	push	{r7, lr}
 8011d94:	b084      	sub	sp, #16
 8011d96:	af00      	add	r7, sp, #0
 8011d98:	60f8      	str	r0, [r7, #12]
 8011d9a:	60b9      	str	r1, [r7, #8]
 8011d9c:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011d9e:	68b8      	ldr	r0, [r7, #8]
 8011da0:	f7ff f92e 	bl	8011000 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8011da4:	68f8      	ldr	r0, [r7, #12]
 8011da6:	f7fb fc12 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8011daa:	4603      	mov	r3, r0
 8011dac:	4619      	mov	r1, r3
 8011dae:	2001      	movs	r0, #1
 8011db0:	f7ee fabe 	bl	8000330 <_ZnwjPv>
 8011db4:	bf00      	nop
 8011db6:	3710      	adds	r7, #16
 8011db8:	46bd      	mov	sp, r7
 8011dba:	bd80      	pop	{r7, pc}

08011dbc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011dbc:	b580      	push	{r7, lr}
 8011dbe:	b084      	sub	sp, #16
 8011dc0:	af00      	add	r7, sp, #0
 8011dc2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011dc4:	6878      	ldr	r0, [r7, #4]
 8011dc6:	f000 fdfb 	bl	80129c0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8011dca:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011dcc:	68f8      	ldr	r0, [r7, #12]
 8011dce:	f000 fe03 	bl	80129d8 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>
 8011dd2:	4603      	mov	r3, r0
	}
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	3710      	adds	r7, #16
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011ddc:	b590      	push	{r4, r7, lr}
 8011dde:	b083      	sub	sp, #12
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011de4:	6878      	ldr	r0, [r7, #4]
 8011de6:	f000 fe02 	bl	80129ee <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011dea:	4603      	mov	r3, r0
 8011dec:	4619      	mov	r1, r3
 8011dee:	4620      	mov	r0, r4
 8011df0:	f000 fe08 	bl	8012a04 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011df4:	bf00      	nop
 8011df6:	370c      	adds	r7, #12
 8011df8:	46bd      	mov	sp, r7
 8011dfa:	bd90      	pop	{r4, r7, pc}

08011dfc <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f7fb fbe2 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011e14:	b5b0      	push	{r4, r5, r7, lr}
 8011e16:	b084      	sub	sp, #16
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	60b9      	str	r1, [r7, #8]
 8011e1e:	4613      	mov	r3, r2
 8011e20:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011e22:	79fb      	ldrb	r3, [r7, #7]
 8011e24:	2b03      	cmp	r3, #3
 8011e26:	d016      	beq.n	8011e56 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011e28:	2b03      	cmp	r3, #3
 8011e2a:	dc19      	bgt.n	8011e60 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	d002      	beq.n	8011e36 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011e30:	2b02      	cmp	r3, #2
 8011e32:	d00a      	beq.n	8011e4a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011e34:	e014      	b.n	8011e60 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011e36:	68b8      	ldr	r0, [r7, #8]
 8011e38:	f7ff ffc0 	bl	8011dbc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011e3c:	4604      	mov	r4, r0
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f7ff ffdc 	bl	8011dfc <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8011e44:	4603      	mov	r3, r0
 8011e46:	601c      	str	r4, [r3, #0]
	      break;
 8011e48:	e00a      	b.n	8011e60 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011e4a:	462a      	mov	r2, r5
 8011e4c:	68b9      	ldr	r1, [r7, #8]
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f000 fde8 	bl	8012a24 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8011e54:	e004      	b.n	8011e60 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011e56:	4621      	mov	r1, r4
 8011e58:	68f8      	ldr	r0, [r7, #12]
 8011e5a:	f000 fdf8 	bl	8012a4e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011e5e:	bf00      	nop
	  return false;
 8011e60:	2300      	movs	r3, #0
	}
 8011e62:	4618      	mov	r0, r3
 8011e64:	3710      	adds	r7, #16
 8011e66:	46bd      	mov	sp, r7
 8011e68:	bdb0      	pop	{r4, r5, r7, pc}

08011e6a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011e6a:	b580      	push	{r7, lr}
 8011e6c:	b084      	sub	sp, #16
 8011e6e:	af00      	add	r7, sp, #0
 8011e70:	60f8      	str	r0, [r7, #12]
 8011e72:	60b9      	str	r1, [r7, #8]
 8011e74:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011e76:	68b8      	ldr	r0, [r7, #8]
 8011e78:	f7ff f918 	bl	80110ac <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 8011e7c:	68f8      	ldr	r0, [r7, #12]
 8011e7e:	f7fb fba6 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8011e82:	4603      	mov	r3, r0
 8011e84:	4619      	mov	r1, r3
 8011e86:	2001      	movs	r0, #1
 8011e88:	f7ee fa52 	bl	8000330 <_ZnwjPv>
 8011e8c:	bf00      	nop
 8011e8e:	3710      	adds	r7, #16
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}

08011e94 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b084      	sub	sp, #16
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f000 fde2 	bl	8012a66 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8011ea2:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011ea4:	68f8      	ldr	r0, [r7, #12]
 8011ea6:	f000 fdea 	bl	8012a7e <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>
 8011eaa:	4603      	mov	r3, r0
	}
 8011eac:	4618      	mov	r0, r3
 8011eae:	3710      	adds	r7, #16
 8011eb0:	46bd      	mov	sp, r7
 8011eb2:	bd80      	pop	{r7, pc}

08011eb4 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011eb4:	b590      	push	{r4, r7, lr}
 8011eb6:	b083      	sub	sp, #12
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011ebc:	6878      	ldr	r0, [r7, #4]
 8011ebe:	f000 fde9 	bl	8012a94 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	4619      	mov	r1, r3
 8011ec6:	4620      	mov	r0, r4
 8011ec8:	f000 fdef 	bl	8012aaa <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011ecc:	bf00      	nop
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	bd90      	pop	{r4, r7, pc}

08011ed4 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8011ed4:	b580      	push	{r7, lr}
 8011ed6:	b082      	sub	sp, #8
 8011ed8:	af00      	add	r7, sp, #0
 8011eda:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011edc:	6878      	ldr	r0, [r7, #4]
 8011ede:	f7fb fb76 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	3708      	adds	r7, #8
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd80      	pop	{r7, pc}

08011eec <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011eec:	b5b0      	push	{r4, r5, r7, lr}
 8011eee:	b084      	sub	sp, #16
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	60f8      	str	r0, [r7, #12]
 8011ef4:	60b9      	str	r1, [r7, #8]
 8011ef6:	4613      	mov	r3, r2
 8011ef8:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011efa:	79fb      	ldrb	r3, [r7, #7]
 8011efc:	2b03      	cmp	r3, #3
 8011efe:	d016      	beq.n	8011f2e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011f00:	2b03      	cmp	r3, #3
 8011f02:	dc19      	bgt.n	8011f38 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8011f04:	2b01      	cmp	r3, #1
 8011f06:	d002      	beq.n	8011f0e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011f08:	2b02      	cmp	r3, #2
 8011f0a:	d00a      	beq.n	8011f22 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011f0c:	e014      	b.n	8011f38 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011f0e:	68b8      	ldr	r0, [r7, #8]
 8011f10:	f7ff ffc0 	bl	8011e94 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8011f14:	4604      	mov	r4, r0
 8011f16:	68f8      	ldr	r0, [r7, #12]
 8011f18:	f7ff ffdc 	bl	8011ed4 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	601c      	str	r4, [r3, #0]
	      break;
 8011f20:	e00a      	b.n	8011f38 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011f22:	462a      	mov	r2, r5
 8011f24:	68b9      	ldr	r1, [r7, #8]
 8011f26:	68f8      	ldr	r0, [r7, #12]
 8011f28:	f000 fdcf 	bl	8012aca <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8011f2c:	e004      	b.n	8011f38 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011f2e:	4621      	mov	r1, r4
 8011f30:	68f8      	ldr	r0, [r7, #12]
 8011f32:	f000 fddf 	bl	8012af4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011f36:	bf00      	nop
	  return false;
 8011f38:	2300      	movs	r3, #0
	}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	3710      	adds	r7, #16
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	bdb0      	pop	{r4, r5, r7, pc}

08011f42 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011f42:	b590      	push	{r4, r7, lr}
 8011f44:	b087      	sub	sp, #28
 8011f46:	af00      	add	r7, sp, #0
 8011f48:	60f8      	str	r0, [r7, #12]
 8011f4a:	60b9      	str	r1, [r7, #8]
 8011f4c:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011f4e:	68f8      	ldr	r0, [r7, #12]
 8011f50:	f000 fddc 	bl	8012b0c <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011f54:	4604      	mov	r4, r0
 8011f56:	68f8      	ldr	r0, [r7, #12]
 8011f58:	f000 fde9 	bl	8012b2e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	1ae2      	subs	r2, r4, r3
 8011f60:	68bb      	ldr	r3, [r7, #8]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	bf34      	ite	cc
 8011f66:	2301      	movcc	r3, #1
 8011f68:	2300      	movcs	r3, #0
 8011f6a:	b2db      	uxtb	r3, r3
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d002      	beq.n	8011f76 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011f70:	6878      	ldr	r0, [r7, #4]
 8011f72:	f00e fdb7 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011f76:	68f8      	ldr	r0, [r7, #12]
 8011f78:	f000 fdd9 	bl	8012b2e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011f7c:	4604      	mov	r4, r0
 8011f7e:	68f8      	ldr	r0, [r7, #12]
 8011f80:	f000 fdd5 	bl	8012b2e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011f84:	4603      	mov	r3, r0
 8011f86:	613b      	str	r3, [r7, #16]
 8011f88:	f107 0208 	add.w	r2, r7, #8
 8011f8c:	f107 0310 	add.w	r3, r7, #16
 8011f90:	4611      	mov	r1, r2
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7f0 fc5d 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	4423      	add	r3, r4
 8011f9e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f000 fdc4 	bl	8012b2e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011fa6:	4602      	mov	r2, r0
 8011fa8:	697b      	ldr	r3, [r7, #20]
 8011faa:	4293      	cmp	r3, r2
 8011fac:	d306      	bcc.n	8011fbc <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011fae:	68f8      	ldr	r0, [r7, #12]
 8011fb0:	f000 fdac 	bl	8012b0c <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011fb4:	4602      	mov	r2, r0
 8011fb6:	697b      	ldr	r3, [r7, #20]
 8011fb8:	4293      	cmp	r3, r2
 8011fba:	d904      	bls.n	8011fc6 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011fbc:	68f8      	ldr	r0, [r7, #12]
 8011fbe:	f000 fda5 	bl	8012b0c <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011fc2:	4603      	mov	r3, r0
 8011fc4:	e000      	b.n	8011fc8 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011fc6:	697b      	ldr	r3, [r7, #20]
      }
 8011fc8:	4618      	mov	r0, r3
 8011fca:	371c      	adds	r7, #28
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bd90      	pop	{r4, r7, pc}

08011fd0 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011fd0:	b590      	push	{r4, r7, lr}
 8011fd2:	b083      	sub	sp, #12
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	6078      	str	r0, [r7, #4]
 8011fd8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011fda:	6878      	ldr	r0, [r7, #4]
 8011fdc:	f7fb fce4 	bl	800d9a8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	681c      	ldr	r4, [r3, #0]
 8011fe4:	6838      	ldr	r0, [r7, #0]
 8011fe6:	f7fb fcdf 	bl	800d9a8 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011fea:	4603      	mov	r3, r0
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	1ae3      	subs	r3, r4, r3
 8011ff0:	109b      	asrs	r3, r3, #2
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	370c      	adds	r7, #12
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	bd90      	pop	{r4, r7, pc}

08011ffa <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011ffa:	b580      	push	{r7, lr}
 8011ffc:	b082      	sub	sp, #8
 8011ffe:	af00      	add	r7, sp, #0
 8012000:	6078      	str	r0, [r7, #4]
 8012002:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d006      	beq.n	8012018 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x1e>
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	6839      	ldr	r1, [r7, #0]
 801200e:	4618      	mov	r0, r3
 8012010:	f000 fd9d 	bl	8012b4e <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>
 8012014:	4603      	mov	r3, r0
 8012016:	e000      	b.n	801201a <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x20>
 8012018:	2300      	movs	r3, #0
      }
 801201a:	4618      	mov	r0, r3
 801201c:	3708      	adds	r7, #8
 801201e:	46bd      	mov	sp, r7
 8012020:	bd80      	pop	{r7, pc}

08012022 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8012022:	b590      	push	{r4, r7, lr}
 8012024:	b087      	sub	sp, #28
 8012026:	af02      	add	r7, sp, #8
 8012028:	60f8      	str	r0, [r7, #12]
 801202a:	60b9      	str	r1, [r7, #8]
 801202c:	607a      	str	r2, [r7, #4]
 801202e:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8012030:	f88d 4000 	strb.w	r4, [sp]
 8012034:	683b      	ldr	r3, [r7, #0]
 8012036:	687a      	ldr	r2, [r7, #4]
 8012038:	68b9      	ldr	r1, [r7, #8]
 801203a:	68f8      	ldr	r0, [r7, #12]
 801203c:	f000 fda7 	bl	8012b8e <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8012040:	4603      	mov	r3, r0
      }
 8012042:	4618      	mov	r0, r3
 8012044:	3714      	adds	r7, #20
 8012046:	46bd      	mov	sp, r7
 8012048:	bd90      	pop	{r4, r7, pc}

0801204a <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 801204a:	b580      	push	{r7, lr}
 801204c:	b084      	sub	sp, #16
 801204e:	af00      	add	r7, sp, #0
 8012050:	6078      	str	r0, [r7, #4]
 8012052:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	681a      	ldr	r2, [r3, #0]
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	009b      	lsls	r3, r3, #2
 801205c:	425b      	negs	r3, r3
 801205e:	4413      	add	r3, r2
 8012060:	60fb      	str	r3, [r7, #12]
 8012062:	f107 020c 	add.w	r2, r7, #12
 8012066:	f107 0308 	add.w	r3, r7, #8
 801206a:	4611      	mov	r1, r2
 801206c:	4618      	mov	r0, r3
 801206e:	f7fe fb23 	bl	80106b8 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012072:	68bb      	ldr	r3, [r7, #8]
 8012074:	4618      	mov	r0, r3
 8012076:	3710      	adds	r7, #16
 8012078:	46bd      	mov	sp, r7
 801207a:	bd80      	pop	{r7, pc}

0801207c <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 801207c:	b480      	push	{r7}
 801207e:	b083      	sub	sp, #12
 8012080:	af00      	add	r7, sp, #0
 8012082:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	4618      	mov	r0, r3
 8012088:	370c      	adds	r7, #12
 801208a:	46bd      	mov	sp, r7
 801208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012090:	4770      	bx	lr

08012092 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8012092:	b480      	push	{r7}
 8012094:	b083      	sub	sp, #12
 8012096:	af00      	add	r7, sp, #0
 8012098:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	4618      	mov	r0, r3
 801209e:	370c      	adds	r7, #12
 80120a0:	46bd      	mov	sp, r7
 80120a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a6:	4770      	bx	lr

080120a8 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 80120a8:	b480      	push	{r7}
 80120aa:	b083      	sub	sp, #12
 80120ac:	af00      	add	r7, sp, #0
 80120ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	4618      	mov	r0, r3
 80120b4:	370c      	adds	r7, #12
 80120b6:	46bd      	mov	sp, r7
 80120b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120bc:	4770      	bx	lr

080120be <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80120be:	b590      	push	{r4, r7, lr}
 80120c0:	b087      	sub	sp, #28
 80120c2:	af00      	add	r7, sp, #0
 80120c4:	60f8      	str	r0, [r7, #12]
 80120c6:	60b9      	str	r1, [r7, #8]
 80120c8:	607a      	str	r2, [r7, #4]
 80120ca:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80120cc:	68bb      	ldr	r3, [r7, #8]
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d01b      	beq.n	801210a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80120d2:	68fc      	ldr	r4, [r7, #12]
 80120d4:	68b8      	ldr	r0, [r7, #8]
 80120d6:	f7f9 f99c 	bl	800b412 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80120da:	4603      	mov	r3, r0
 80120dc:	683a      	ldr	r2, [r7, #0]
 80120de:	4619      	mov	r1, r3
 80120e0:	4620      	mov	r0, r4
 80120e2:	f7f8 ff45 	bl	800af70 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 80120e6:	4603      	mov	r3, r0
 80120e8:	f083 0301 	eor.w	r3, r3, #1
 80120ec:	b2db      	uxtb	r3, r3
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d006      	beq.n	8012100 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 80120f2:	68bb      	ldr	r3, [r7, #8]
 80120f4:	607b      	str	r3, [r7, #4]
 80120f6:	68b8      	ldr	r0, [r7, #8]
 80120f8:	f7f9 fa78 	bl	800b5ec <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 80120fc:	60b8      	str	r0, [r7, #8]
 80120fe:	e7e5      	b.n	80120cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8012100:	68b8      	ldr	r0, [r7, #8]
 8012102:	f7f9 fa67 	bl	800b5d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012106:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012108:	e7e0      	b.n	80120cc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 801210a:	f107 0314 	add.w	r3, r7, #20
 801210e:	6879      	ldr	r1, [r7, #4]
 8012110:	4618      	mov	r0, r3
 8012112:	f7f9 f9a2 	bl	800b45a <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8012116:	697b      	ldr	r3, [r7, #20]
    }
 8012118:	4618      	mov	r0, r3
 801211a:	371c      	adds	r7, #28
 801211c:	46bd      	mov	sp, r7
 801211e:	bd90      	pop	{r4, r7, pc}

08012120 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8012120:	b590      	push	{r4, r7, lr}
 8012122:	b083      	sub	sp, #12
 8012124:	af00      	add	r7, sp, #0
 8012126:	6078      	str	r0, [r7, #4]
 8012128:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 801212a:	687c      	ldr	r4, [r7, #4]
 801212c:	6838      	ldr	r0, [r7, #0]
 801212e:	f7ff f969 	bl	8011404 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8012132:	4603      	mov	r3, r0
 8012134:	4619      	mov	r1, r3
 8012136:	4620      	mov	r0, r4
 8012138:	f000 fd3b 	bl	8012bb2 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	4618      	mov	r0, r3
 8012140:	370c      	adds	r7, #12
 8012142:	46bd      	mov	sp, r7
 8012144:	bd90      	pop	{r4, r7, pc}

08012146 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801214a:	b086      	sub	sp, #24
 801214c:	af02      	add	r7, sp, #8
 801214e:	60f8      	str	r0, [r7, #12]
 8012150:	60b9      	str	r1, [r7, #8]
 8012152:	607a      	str	r2, [r7, #4]
 8012154:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	4619      	mov	r1, r3
 801215a:	2018      	movs	r0, #24
 801215c:	f7ee f8e8 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012160:	68f8      	ldr	r0, [r7, #12]
 8012162:	f7f9 fc49 	bl	800b9f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 8012166:	4604      	mov	r4, r0
 8012168:	68b8      	ldr	r0, [r7, #8]
 801216a:	f7f9 f821 	bl	800b1b0 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 801216e:	4605      	mov	r5, r0
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	f7ef f878 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012176:	4606      	mov	r6, r0
 8012178:	6838      	ldr	r0, [r7, #0]
 801217a:	f7ff f961 	bl	8011440 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 801217e:	4680      	mov	r8, r0
 8012180:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012182:	f7ef f886 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012186:	4603      	mov	r3, r0
 8012188:	9300      	str	r3, [sp, #0]
 801218a:	4643      	mov	r3, r8
 801218c:	4632      	mov	r2, r6
 801218e:	4629      	mov	r1, r5
 8012190:	4620      	mov	r0, r4
 8012192:	f000 fd58 	bl	8012c46 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 8012196:	bf00      	nop
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080121a0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80121a0:	b580      	push	{r7, lr}
 80121a2:	b082      	sub	sp, #8
 80121a4:	af00      	add	r7, sp, #0
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80121aa:	687a      	ldr	r2, [r7, #4]
 80121ac:	683b      	ldr	r3, [r7, #0]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d00a      	beq.n	80121c8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f000 fd72 	bl	8012c9c <_ZSt11__addressofIP13StreamMessageEPT_RS2_>
 80121b8:	4603      	mov	r3, r0
 80121ba:	4618      	mov	r0, r3
 80121bc:	f000 fd79 	bl	8012cb2 <_ZSt8_DestroyIP13StreamMessageEvPT_>
	  for (; __first != __last; ++__first)
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	3304      	adds	r3, #4
 80121c4:	607b      	str	r3, [r7, #4]
 80121c6:	e7f0      	b.n	80121aa <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0xa>
	}
 80121c8:	bf00      	nop
 80121ca:	3708      	adds	r7, #8
 80121cc:	46bd      	mov	sp, r7
 80121ce:	bd80      	pop	{r7, pc}

080121d0 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80121d0:	b480      	push	{r7}
 80121d2:	b083      	sub	sp, #12
 80121d4:	af00      	add	r7, sp, #0
 80121d6:	6078      	str	r0, [r7, #4]
 80121d8:	6039      	str	r1, [r7, #0]
 80121da:	bf00      	nop
 80121dc:	370c      	adds	r7, #12
 80121de:	46bd      	mov	sp, r7
 80121e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121e4:	4770      	bx	lr

080121e6 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80121e6:	b590      	push	{r4, r7, lr}
 80121e8:	b087      	sub	sp, #28
 80121ea:	af00      	add	r7, sp, #0
 80121ec:	60f8      	str	r0, [r7, #12]
 80121ee:	60b9      	str	r1, [r7, #8]
 80121f0:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80121f2:	68f8      	ldr	r0, [r7, #12]
 80121f4:	f000 fd68 	bl	8012cc8 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 80121f8:	4604      	mov	r4, r0
 80121fa:	68f8      	ldr	r0, [r7, #12]
 80121fc:	f000 fd75 	bl	8012cea <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012200:	4603      	mov	r3, r0
 8012202:	1ae2      	subs	r2, r4, r3
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	429a      	cmp	r2, r3
 8012208:	bf34      	ite	cc
 801220a:	2301      	movcc	r3, #1
 801220c:	2300      	movcs	r3, #0
 801220e:	b2db      	uxtb	r3, r3
 8012210:	2b00      	cmp	r3, #0
 8012212:	d002      	beq.n	801221a <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8012214:	6878      	ldr	r0, [r7, #4]
 8012216:	f00e fc65 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801221a:	68f8      	ldr	r0, [r7, #12]
 801221c:	f000 fd65 	bl	8012cea <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012220:	4604      	mov	r4, r0
 8012222:	68f8      	ldr	r0, [r7, #12]
 8012224:	f000 fd61 	bl	8012cea <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012228:	4603      	mov	r3, r0
 801222a:	613b      	str	r3, [r7, #16]
 801222c:	f107 0208 	add.w	r2, r7, #8
 8012230:	f107 0310 	add.w	r3, r7, #16
 8012234:	4611      	mov	r1, r2
 8012236:	4618      	mov	r0, r3
 8012238:	f7f0 fb0b 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 801223c:	4603      	mov	r3, r0
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	4423      	add	r3, r4
 8012242:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8012244:	68f8      	ldr	r0, [r7, #12]
 8012246:	f000 fd50 	bl	8012cea <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 801224a:	4602      	mov	r2, r0
 801224c:	697b      	ldr	r3, [r7, #20]
 801224e:	4293      	cmp	r3, r2
 8012250:	d306      	bcc.n	8012260 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8012252:	68f8      	ldr	r0, [r7, #12]
 8012254:	f000 fd38 	bl	8012cc8 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012258:	4602      	mov	r2, r0
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	4293      	cmp	r3, r2
 801225e:	d904      	bls.n	801226a <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f000 fd31 	bl	8012cc8 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012266:	4603      	mov	r3, r0
 8012268:	e000      	b.n	801226c <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x86>
 801226a:	697b      	ldr	r3, [r7, #20]
      }
 801226c:	4618      	mov	r0, r3
 801226e:	371c      	adds	r7, #28
 8012270:	46bd      	mov	sp, r7
 8012272:	bd90      	pop	{r4, r7, pc}

08012274 <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8012274:	b590      	push	{r4, r7, lr}
 8012276:	b083      	sub	sp, #12
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	f7fb ff10 	bl	800e0a4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8012284:	4603      	mov	r3, r0
 8012286:	681c      	ldr	r4, [r3, #0]
 8012288:	6838      	ldr	r0, [r7, #0]
 801228a:	f7fb ff0b 	bl	800e0a4 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 801228e:	4603      	mov	r3, r0
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	1ae3      	subs	r3, r4, r3
 8012294:	109b      	asrs	r3, r3, #2
 8012296:	4618      	mov	r0, r3
 8012298:	370c      	adds	r7, #12
 801229a:	46bd      	mov	sp, r7
 801229c:	bd90      	pop	{r4, r7, pc}

0801229e <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801229e:	b580      	push	{r7, lr}
 80122a0:	b082      	sub	sp, #8
 80122a2:	af00      	add	r7, sp, #0
 80122a4:	6078      	str	r0, [r7, #4]
 80122a6:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80122a8:	683b      	ldr	r3, [r7, #0]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d006      	beq.n	80122bc <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x1e>
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6839      	ldr	r1, [r7, #0]
 80122b2:	4618      	mov	r0, r3
 80122b4:	f000 fd29 	bl	8012d0a <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>
 80122b8:	4603      	mov	r3, r0
 80122ba:	e000      	b.n	80122be <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x20>
 80122bc:	2300      	movs	r3, #0
      }
 80122be:	4618      	mov	r0, r3
 80122c0:	3708      	adds	r7, #8
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd80      	pop	{r7, pc}

080122c6 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80122c6:	b590      	push	{r4, r7, lr}
 80122c8:	b087      	sub	sp, #28
 80122ca:	af02      	add	r7, sp, #8
 80122cc:	60f8      	str	r0, [r7, #12]
 80122ce:	60b9      	str	r1, [r7, #8]
 80122d0:	607a      	str	r2, [r7, #4]
 80122d2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80122d4:	f88d 4000 	strb.w	r4, [sp]
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	687a      	ldr	r2, [r7, #4]
 80122dc:	68b9      	ldr	r1, [r7, #8]
 80122de:	68f8      	ldr	r0, [r7, #12]
 80122e0:	f000 fd33 	bl	8012d4a <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80122e4:	4603      	mov	r3, r0
      }
 80122e6:	4618      	mov	r0, r3
 80122e8:	3714      	adds	r7, #20
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd90      	pop	{r4, r7, pc}

080122ee <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80122ee:	b580      	push	{r7, lr}
 80122f0:	b084      	sub	sp, #16
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
 80122f6:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	681a      	ldr	r2, [r3, #0]
 80122fc:	683b      	ldr	r3, [r7, #0]
 80122fe:	009b      	lsls	r3, r3, #2
 8012300:	425b      	negs	r3, r3
 8012302:	4413      	add	r3, r2
 8012304:	60fb      	str	r3, [r7, #12]
 8012306:	f107 020c 	add.w	r2, r7, #12
 801230a:	f107 0308 	add.w	r3, r7, #8
 801230e:	4611      	mov	r1, r2
 8012310:	4618      	mov	r0, r3
 8012312:	f7fe fc40 	bl	8010b96 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	4618      	mov	r0, r3
 801231a:	3710      	adds	r7, #16
 801231c:	46bd      	mov	sp, r7
 801231e:	bd80      	pop	{r7, pc}

08012320 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4618      	mov	r0, r3
 801232c:	f000 fd45 	bl	8012dba <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8012330:	4603      	mov	r3, r0
 8012332:	4618      	mov	r0, r3
 8012334:	f000 fd27 	bl	8012d86 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>
 8012338:	4603      	mov	r3, r0
 801233a:	4618      	mov	r0, r3
 801233c:	3708      	adds	r7, #8
 801233e:	46bd      	mov	sp, r7
 8012340:	bd80      	pop	{r7, pc}

08012342 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012342:	b580      	push	{r7, lr}
 8012344:	b084      	sub	sp, #16
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
 801234a:	6039      	str	r1, [r7, #0]
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	60fb      	str	r3, [r7, #12]
 8012350:	683b      	ldr	r3, [r7, #0]
 8012352:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012354:	f7ed ffe4 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d006      	beq.n	801236c <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	009b      	lsls	r3, r3, #2
 8012362:	4618      	mov	r0, r3
 8012364:	f00e faf4 	bl	8020950 <_Znwj>
 8012368:	4603      	mov	r3, r0
 801236a:	e006      	b.n	801237a <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801236c:	2200      	movs	r2, #0
 801236e:	68b9      	ldr	r1, [r7, #8]
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f001 f8b6 	bl	80134e2 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>
 8012376:	4603      	mov	r3, r0
 8012378:	bf00      	nop
      { return __a.allocate(__n); }
 801237a:	4618      	mov	r0, r3
 801237c:	3710      	adds	r7, #16
 801237e:	46bd      	mov	sp, r7
 8012380:	bd80      	pop	{r7, pc}

08012382 <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012382:	b580      	push	{r7, lr}
 8012384:	b084      	sub	sp, #16
 8012386:	af00      	add	r7, sp, #0
 8012388:	60f8      	str	r0, [r7, #12]
 801238a:	60b9      	str	r1, [r7, #8]
 801238c:	607a      	str	r2, [r7, #4]
 801238e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	687a      	ldr	r2, [r7, #4]
 8012394:	68b9      	ldr	r1, [r7, #8]
 8012396:	68f8      	ldr	r0, [r7, #12]
 8012398:	f000 fd1a 	bl	8012dd0 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>
 801239c:	4603      	mov	r3, r0
      }
 801239e:	4618      	mov	r0, r3
 80123a0:	3710      	adds	r7, #16
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}

080123a6 <_ZSt10destroy_atIP13StreamMessageEvPT_>:
    destroy_at(_Tp* __location)
 80123a6:	b480      	push	{r7}
 80123a8:	b083      	sub	sp, #12
 80123aa:	af00      	add	r7, sp, #0
 80123ac:	6078      	str	r0, [r7, #4]
    }
 80123ae:	bf00      	nop
 80123b0:	370c      	adds	r7, #12
 80123b2:	46bd      	mov	sp, r7
 80123b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b8:	4770      	bx	lr

080123ba <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>:
      _M_access() const
 80123ba:	b580      	push	{r7, lr}
 80123bc:	b082      	sub	sp, #8
 80123be:	af00      	add	r7, sp, #0
 80123c0:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80123c2:	6878      	ldr	r0, [r7, #4]
 80123c4:	f7fb f90e 	bl	800d5e4 <_ZNKSt9_Any_data9_M_accessEv>
 80123c8:	4603      	mov	r3, r0
 80123ca:	4618      	mov	r0, r3
 80123cc:	3708      	adds	r7, #8
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80123d2:	b480      	push	{r7}
 80123d4:	b083      	sub	sp, #12
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80123da:	687b      	ldr	r3, [r7, #4]
 80123dc:	4618      	mov	r0, r3
 80123de:	370c      	adds	r7, #12
 80123e0:	46bd      	mov	sp, r7
 80123e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e6:	4770      	bx	lr

080123e8 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80123e8:	b480      	push	{r7}
 80123ea:	b083      	sub	sp, #12
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	4618      	mov	r0, r3
 80123f4:	370c      	adds	r7, #12
 80123f6:	46bd      	mov	sp, r7
 80123f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123fc:	4770      	bx	lr

080123fe <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80123fe:	b580      	push	{r7, lr}
 8012400:	b082      	sub	sp, #8
 8012402:	af00      	add	r7, sp, #0
 8012404:	7138      	strb	r0, [r7, #4]
 8012406:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012408:	6838      	ldr	r0, [r7, #0]
 801240a:	f7ff ffed 	bl	80123e8 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 801240e:	4603      	mov	r3, r0
 8012410:	4618      	mov	r0, r3
 8012412:	f7fb fdd9 	bl	800dfc8 <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>
 8012416:	bf00      	nop
 8012418:	3708      	adds	r7, #8
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}

0801241e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 801241e:	b590      	push	{r4, r7, lr}
 8012420:	b085      	sub	sp, #20
 8012422:	af00      	add	r7, sp, #0
 8012424:	60f8      	str	r0, [r7, #12]
 8012426:	60b9      	str	r1, [r7, #8]
 8012428:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 801242a:	68b8      	ldr	r0, [r7, #8]
 801242c:	f7ff ffc5 	bl	80123ba <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 8012430:	4604      	mov	r4, r0
 8012432:	68f8      	ldr	r0, [r7, #12]
 8012434:	f7fb f8cb 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8012438:	4603      	mov	r3, r0
 801243a:	4619      	mov	r1, r3
 801243c:	2004      	movs	r0, #4
 801243e:	f7ed ff77 	bl	8000330 <_ZnwjPv>
 8012442:	4602      	mov	r2, r0
 8012444:	6823      	ldr	r3, [r4, #0]
 8012446:	6013      	str	r3, [r2, #0]
	}
 8012448:	bf00      	nop
 801244a:	3714      	adds	r7, #20
 801244c:	46bd      	mov	sp, r7
 801244e:	bd90      	pop	{r4, r7, pc}

08012450 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012450:	b580      	push	{r7, lr}
 8012452:	b082      	sub	sp, #8
 8012454:	af00      	add	r7, sp, #0
 8012456:	6078      	str	r0, [r7, #4]
 8012458:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 801245a:	6878      	ldr	r0, [r7, #4]
 801245c:	f000 fcd5 	bl	8012e0a <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
	}
 8012460:	bf00      	nop
 8012462:	3708      	adds	r7, #8
 8012464:	46bd      	mov	sp, r7
 8012466:	bd80      	pop	{r7, pc}

08012468 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>:
 8012468:	b480      	push	{r7}
 801246a:	b083      	sub	sp, #12
 801246c:	af00      	add	r7, sp, #0
 801246e:	6078      	str	r0, [r7, #4]
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	4618      	mov	r0, r3
 8012474:	370c      	adds	r7, #12
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr

0801247e <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801247e:	b580      	push	{r7, lr}
 8012480:	b088      	sub	sp, #32
 8012482:	af00      	add	r7, sp, #0
 8012484:	60f8      	str	r0, [r7, #12]
 8012486:	60b9      	str	r1, [r7, #8]
 8012488:	607a      	str	r2, [r7, #4]
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	61fb      	str	r3, [r7, #28]
 801248e:	68bb      	ldr	r3, [r7, #8]
 8012490:	61bb      	str	r3, [r7, #24]
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8012496:	f7ed ff43 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d003      	beq.n	80124a8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 80124a0:	69b8      	ldr	r0, [r7, #24]
 80124a2:	f00e fa51 	bl	8020948 <_ZdlPv>
	    return;
 80124a6:	e005      	b.n	80124b4 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80124a8:	697a      	ldr	r2, [r7, #20]
 80124aa:	69b9      	ldr	r1, [r7, #24]
 80124ac:	69f8      	ldr	r0, [r7, #28]
 80124ae:	f001 f860 	bl	8013572 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 80124b2:	bf00      	nop
 80124b4:	bf00      	nop
 80124b6:	3720      	adds	r7, #32
 80124b8:	46bd      	mov	sp, r7
 80124ba:	bd80      	pop	{r7, pc}

080124bc <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80124bc:	b580      	push	{r7, lr}
 80124be:	b082      	sub	sp, #8
 80124c0:	af00      	add	r7, sp, #0
 80124c2:	6078      	str	r0, [r7, #4]
 80124c4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80124c6:	f7ed ff2b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80124ca:	4603      	mov	r3, r0
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d004      	beq.n	80124da <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80124d0:	6839      	ldr	r1, [r7, #0]
 80124d2:	6878      	ldr	r0, [r7, #4]
 80124d4:	f000 fca5 	bl	8012e22 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>
 80124d8:	e003      	b.n	80124e2 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x26>
	__destroy(__first, __last);
 80124da:	6839      	ldr	r1, [r7, #0]
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 fcb8 	bl	8012e52 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>
    }
 80124e2:	3708      	adds	r7, #8
 80124e4:	46bd      	mov	sp, r7
 80124e6:	bd80      	pop	{r7, pc}

080124e8 <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80124e8:	b480      	push	{r7}
 80124ea:	b083      	sub	sp, #12
 80124ec:	af00      	add	r7, sp, #0
 80124ee:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	4618      	mov	r0, r3
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr

080124fe <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      vector<_Tp, _Alloc>::
 80124fe:	b5b0      	push	{r4, r5, r7, lr}
 8012500:	b082      	sub	sp, #8
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
 8012506:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	689b      	ldr	r3, [r3, #8]
 8012510:	429a      	cmp	r2, r3
 8012512:	d011      	beq.n	8012538 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8012514:	687c      	ldr	r4, [r7, #4]
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	685d      	ldr	r5, [r3, #4]
 801251a:	6838      	ldr	r0, [r7, #0]
 801251c:	f000 fca4 	bl	8012e68 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012520:	4603      	mov	r3, r0
 8012522:	461a      	mov	r2, r3
 8012524:	4629      	mov	r1, r5
 8012526:	4620      	mov	r0, r4
 8012528:	f000 fcbe 	bl	8012ea8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	685b      	ldr	r3, [r3, #4]
 8012530:	1d1a      	adds	r2, r3, #4
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	605a      	str	r2, [r3, #4]
 8012536:	e00c      	b.n	8012552 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8012538:	6878      	ldr	r0, [r7, #4]
 801253a:	f7f2 fdea 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 801253e:	4604      	mov	r4, r0
 8012540:	6838      	ldr	r0, [r7, #0]
 8012542:	f000 fc91 	bl	8012e68 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012546:	4603      	mov	r3, r0
 8012548:	461a      	mov	r2, r3
 801254a:	4621      	mov	r1, r4
 801254c:	6878      	ldr	r0, [r7, #4]
 801254e:	f000 fcbd 	bl	8012ecc <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
 8012552:	6878      	ldr	r0, [r7, #4]
 8012554:	f000 fd36 	bl	8012fc4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>
 8012558:	4603      	mov	r3, r0
      }
 801255a:	4618      	mov	r0, r3
 801255c:	3708      	adds	r7, #8
 801255e:	46bd      	mov	sp, r7
 8012560:	bdb0      	pop	{r4, r5, r7, pc}

08012562 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 8012562:	b590      	push	{r4, r7, lr}
 8012564:	b083      	sub	sp, #12
 8012566:	af00      	add	r7, sp, #0
 8012568:	6078      	str	r0, [r7, #4]
 801256a:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f7f9 ff1a 	bl	800c3a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 8012572:	4604      	mov	r4, r0
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f000 fd40 	bl	8012ffa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801257a:	4602      	mov	r2, r0
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	4621      	mov	r1, r4
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 fd46 	bl	8013012 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 8012586:	4603      	mov	r3, r0
 8012588:	4618      	mov	r0, r3
 801258a:	370c      	adds	r7, #12
 801258c:	46bd      	mov	sp, r7
 801258e:	bd90      	pop	{r4, r7, pc}

08012590 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 8012590:	b480      	push	{r7}
 8012592:	b083      	sub	sp, #12
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8012598:	bf00      	nop
 801259a:	4618      	mov	r0, r3
 801259c:	370c      	adds	r7, #12
 801259e:	46bd      	mov	sp, r7
 80125a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a4:	4770      	bx	lr

080125a6 <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 80125a6:	b580      	push	{r7, lr}
 80125a8:	b082      	sub	sp, #8
 80125aa:	af00      	add	r7, sp, #0
 80125ac:	6078      	str	r0, [r7, #4]
 80125ae:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6839      	ldr	r1, [r7, #0]
 80125b4:	4618      	mov	r0, r3
 80125b6:	f000 fd5d 	bl	8013074 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	4618      	mov	r0, r3
 80125be:	3708      	adds	r7, #8
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80125c4:	b480      	push	{r7}
 80125c6:	b083      	sub	sp, #12
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	4618      	mov	r0, r3
 80125d0:	370c      	adds	r7, #12
 80125d2:	46bd      	mov	sp, r7
 80125d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d8:	4770      	bx	lr

080125da <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80125da:	b5b0      	push	{r4, r5, r7, lr}
 80125dc:	b088      	sub	sp, #32
 80125de:	af02      	add	r7, sp, #8
 80125e0:	60f8      	str	r0, [r7, #12]
 80125e2:	60b9      	str	r1, [r7, #8]
 80125e4:	607a      	str	r2, [r7, #4]
 80125e6:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80125e8:	68f8      	ldr	r0, [r7, #12]
 80125ea:	f000 fd52 	bl	8013092 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 80125ee:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80125f0:	68b8      	ldr	r0, [r7, #8]
 80125f2:	f7ee fe38 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80125f6:	4604      	mov	r4, r0
 80125f8:	6878      	ldr	r0, [r7, #4]
 80125fa:	f7ff ffe3 	bl	80125c4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80125fe:	4605      	mov	r5, r0
 8012600:	6838      	ldr	r0, [r7, #0]
 8012602:	f7ee fe46 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012606:	4603      	mov	r3, r0
 8012608:	9300      	str	r3, [sp, #0]
 801260a:	462b      	mov	r3, r5
 801260c:	4622      	mov	r2, r4
 801260e:	6979      	ldr	r1, [r7, #20]
 8012610:	68f8      	ldr	r0, [r7, #12]
 8012612:	f000 fd4f 	bl	80130b4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 8012616:	697b      	ldr	r3, [r7, #20]
	}
 8012618:	4618      	mov	r0, r3
 801261a:	3718      	adds	r7, #24
 801261c:	46bd      	mov	sp, r7
 801261e:	bdb0      	pop	{r4, r5, r7, pc}

08012620 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012620:	b590      	push	{r4, r7, lr}
 8012622:	b08d      	sub	sp, #52	; 0x34
 8012624:	af00      	add	r7, sp, #0
 8012626:	60f8      	str	r0, [r7, #12]
 8012628:	60b9      	str	r1, [r7, #8]
 801262a:	607a      	str	r2, [r7, #4]
 801262c:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 801262e:	1d3b      	adds	r3, r7, #4
 8012630:	4618      	mov	r0, r3
 8012632:	f000 fd6c 	bl	801310e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>
 8012636:	4603      	mov	r3, r0
 8012638:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 801263a:	69bc      	ldr	r4, [r7, #24]
 801263c:	68b8      	ldr	r0, [r7, #8]
 801263e:	f000 fcdc 	bl	8012ffa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8012642:	4603      	mov	r3, r0
 8012644:	429c      	cmp	r4, r3
 8012646:	bf0c      	ite	eq
 8012648:	2301      	moveq	r3, #1
 801264a:	2300      	movne	r3, #0
 801264c:	b2db      	uxtb	r3, r3
 801264e:	2b00      	cmp	r3, #0
 8012650:	d030      	beq.n	80126b4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 8012652:	68b8      	ldr	r0, [r7, #8]
 8012654:	f000 fd6c 	bl	8013130 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8012658:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 801265a:	2b00      	cmp	r3, #0
 801265c:	d013      	beq.n	8012686 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 801265e:	68bc      	ldr	r4, [r7, #8]
 8012660:	68b8      	ldr	r0, [r7, #8]
 8012662:	f000 fd71 	bl	8013148 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012666:	4603      	mov	r3, r0
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	4618      	mov	r0, r3
 801266c:	f000 fd78 	bl	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012670:	4603      	mov	r3, r0
 8012672:	683a      	ldr	r2, [r7, #0]
 8012674:	4619      	mov	r1, r3
 8012676:	4620      	mov	r0, r4
 8012678:	f7ff fa1f 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 801267c:	4603      	mov	r3, r0
 801267e:	2b00      	cmp	r3, #0
 8012680:	d001      	beq.n	8012686 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8012682:	2301      	movs	r3, #1
 8012684:	e000      	b.n	8012688 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 8012686:	2300      	movs	r3, #0
	  if (size() > 0
 8012688:	2b00      	cmp	r3, #0
 801268a:	d00c      	beq.n	80126a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 801268c:	2300      	movs	r3, #0
 801268e:	61fb      	str	r3, [r7, #28]
 8012690:	68b8      	ldr	r0, [r7, #8]
 8012692:	f000 fd59 	bl	8013148 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 8012696:	4602      	mov	r2, r0
 8012698:	f107 031c 	add.w	r3, r7, #28
 801269c:	4619      	mov	r1, r3
 801269e:	68f8      	ldr	r0, [r7, #12]
 80126a0:	f7ef fc02 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80126a4:	e0db      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80126a6:	68fb      	ldr	r3, [r7, #12]
 80126a8:	683a      	ldr	r2, [r7, #0]
 80126aa:	68b9      	ldr	r1, [r7, #8]
 80126ac:	4618      	mov	r0, r3
 80126ae:	f000 fd63 	bl	8013178 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80126b2:	e0d4      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80126b4:	68bc      	ldr	r4, [r7, #8]
 80126b6:	69bb      	ldr	r3, [r7, #24]
 80126b8:	4618      	mov	r0, r3
 80126ba:	f000 fd51 	bl	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80126be:	4603      	mov	r3, r0
 80126c0:	461a      	mov	r2, r3
 80126c2:	6839      	ldr	r1, [r7, #0]
 80126c4:	4620      	mov	r0, r4
 80126c6:	f7ff f9f8 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d057      	beq.n	8012780 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80126d4:	69bc      	ldr	r4, [r7, #24]
 80126d6:	68b8      	ldr	r0, [r7, #8]
 80126d8:	f000 fdd3 	bl	8013282 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80126dc:	4603      	mov	r3, r0
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	429c      	cmp	r4, r3
 80126e2:	bf0c      	ite	eq
 80126e4:	2301      	moveq	r3, #1
 80126e6:	2300      	movne	r3, #0
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00d      	beq.n	801270a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 80126ee:	68b8      	ldr	r0, [r7, #8]
 80126f0:	f000 fdc7 	bl	8013282 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80126f4:	4604      	mov	r4, r0
 80126f6:	68b8      	ldr	r0, [r7, #8]
 80126f8:	f000 fdc3 	bl	8013282 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 80126fc:	4603      	mov	r3, r0
 80126fe:	461a      	mov	r2, r3
 8012700:	4621      	mov	r1, r4
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f7ef fc7c 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012708:	e0a9      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 801270a:	68bc      	ldr	r4, [r7, #8]
 801270c:	f107 0314 	add.w	r3, r7, #20
 8012710:	4618      	mov	r0, r3
 8012712:	f000 fdc2 	bl	801329a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
 8012716:	4603      	mov	r3, r0
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	4618      	mov	r0, r3
 801271c:	f000 fd20 	bl	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012720:	4603      	mov	r3, r0
 8012722:	683a      	ldr	r2, [r7, #0]
 8012724:	4619      	mov	r1, r3
 8012726:	4620      	mov	r0, r4
 8012728:	f7ff f9c7 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 801272c:	4603      	mov	r3, r0
 801272e:	2b00      	cmp	r3, #0
 8012730:	d01f      	beq.n	8012772 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 8012732:	697b      	ldr	r3, [r7, #20]
 8012734:	4618      	mov	r0, r3
 8012736:	f7f9 fe4d 	bl	800c3d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801273a:	4603      	mov	r3, r0
 801273c:	2b00      	cmp	r3, #0
 801273e:	bf0c      	ite	eq
 8012740:	2301      	moveq	r3, #1
 8012742:	2300      	movne	r3, #0
 8012744:	b2db      	uxtb	r3, r3
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00a      	beq.n	8012760 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 801274a:	2300      	movs	r3, #0
 801274c:	623b      	str	r3, [r7, #32]
 801274e:	f107 0214 	add.w	r2, r7, #20
 8012752:	f107 0320 	add.w	r3, r7, #32
 8012756:	4619      	mov	r1, r3
 8012758:	68f8      	ldr	r0, [r7, #12]
 801275a:	f7ef fba5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801275e:	e07e      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8012760:	f107 0218 	add.w	r2, r7, #24
 8012764:	f107 0318 	add.w	r3, r7, #24
 8012768:	4619      	mov	r1, r3
 801276a:	68f8      	ldr	r0, [r7, #12]
 801276c:	f7ef fc48 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012770:	e075      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	683a      	ldr	r2, [r7, #0]
 8012776:	68b9      	ldr	r1, [r7, #8]
 8012778:	4618      	mov	r0, r3
 801277a:	f000 fcfd 	bl	8013178 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 801277e:	e06e      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8012780:	68bc      	ldr	r4, [r7, #8]
 8012782:	69bb      	ldr	r3, [r7, #24]
 8012784:	4618      	mov	r0, r3
 8012786:	f000 fceb 	bl	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801278a:	4603      	mov	r3, r0
 801278c:	683a      	ldr	r2, [r7, #0]
 801278e:	4619      	mov	r1, r3
 8012790:	4620      	mov	r0, r4
 8012792:	f7ff f992 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 8012796:	4603      	mov	r3, r0
 8012798:	2b00      	cmp	r3, #0
 801279a:	d056      	beq.n	801284a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 801279c:	69bb      	ldr	r3, [r7, #24]
 801279e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80127a0:	69bc      	ldr	r4, [r7, #24]
 80127a2:	68b8      	ldr	r0, [r7, #8]
 80127a4:	f000 fcd0 	bl	8013148 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80127a8:	4603      	mov	r3, r0
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	429c      	cmp	r4, r3
 80127ae:	bf0c      	ite	eq
 80127b0:	2301      	moveq	r3, #1
 80127b2:	2300      	movne	r3, #0
 80127b4:	b2db      	uxtb	r3, r3
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d00c      	beq.n	80127d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80127ba:	2300      	movs	r3, #0
 80127bc:	627b      	str	r3, [r7, #36]	; 0x24
 80127be:	68b8      	ldr	r0, [r7, #8]
 80127c0:	f000 fcc2 	bl	8013148 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80127c4:	4602      	mov	r2, r0
 80127c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80127ca:	4619      	mov	r1, r3
 80127cc:	68f8      	ldr	r0, [r7, #12]
 80127ce:	f7ef fb6b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80127d2:	e044      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80127d4:	68bc      	ldr	r4, [r7, #8]
 80127d6:	f107 0310 	add.w	r3, r7, #16
 80127da:	4618      	mov	r0, r3
 80127dc:	f7f2 fcd8 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 80127e0:	4603      	mov	r3, r0
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	4618      	mov	r0, r3
 80127e6:	f000 fcbb 	bl	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80127ea:	4603      	mov	r3, r0
 80127ec:	461a      	mov	r2, r3
 80127ee:	6839      	ldr	r1, [r7, #0]
 80127f0:	4620      	mov	r0, r4
 80127f2:	f7ff f962 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 80127f6:	4603      	mov	r3, r0
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d01f      	beq.n	801283c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 80127fc:	69bb      	ldr	r3, [r7, #24]
 80127fe:	4618      	mov	r0, r3
 8012800:	f7f9 fde8 	bl	800c3d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012804:	4603      	mov	r3, r0
 8012806:	2b00      	cmp	r3, #0
 8012808:	bf0c      	ite	eq
 801280a:	2301      	moveq	r3, #1
 801280c:	2300      	movne	r3, #0
 801280e:	b2db      	uxtb	r3, r3
 8012810:	2b00      	cmp	r3, #0
 8012812:	d00a      	beq.n	801282a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 8012814:	2300      	movs	r3, #0
 8012816:	62bb      	str	r3, [r7, #40]	; 0x28
 8012818:	f107 0218 	add.w	r2, r7, #24
 801281c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012820:	4619      	mov	r1, r3
 8012822:	68f8      	ldr	r0, [r7, #12]
 8012824:	f7ef fb40 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012828:	e019      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 801282a:	f107 0210 	add.w	r2, r7, #16
 801282e:	f107 0310 	add.w	r3, r7, #16
 8012832:	4619      	mov	r1, r3
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f7ef fbe3 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 801283a:	e010      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	683a      	ldr	r2, [r7, #0]
 8012840:	68b9      	ldr	r1, [r7, #8]
 8012842:	4618      	mov	r0, r3
 8012844:	f000 fc98 	bl	8013178 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8012848:	e009      	b.n	801285e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 801284a:	2300      	movs	r3, #0
 801284c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801284e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8012852:	f107 0318 	add.w	r3, r7, #24
 8012856:	4619      	mov	r1, r3
 8012858:	68f8      	ldr	r0, [r7, #12]
 801285a:	f7ef fc0c 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801285e:	68f8      	ldr	r0, [r7, #12]
 8012860:	3734      	adds	r7, #52	; 0x34
 8012862:	46bd      	mov	sp, r7
 8012864:	bd90      	pop	{r4, r7, pc}

08012866 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 8012866:	b580      	push	{r7, lr}
 8012868:	b084      	sub	sp, #16
 801286a:	af00      	add	r7, sp, #0
 801286c:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f000 fd24 	bl	80132bc <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8012874:	4602      	mov	r2, r0
 8012876:	f107 030c 	add.w	r3, r7, #12
 801287a:	4611      	mov	r1, r2
 801287c:	4618      	mov	r0, r3
 801287e:	f000 fd2b 	bl	80132d8 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>
 8012882:	4603      	mov	r3, r0
      }
 8012884:	4618      	mov	r0, r3
 8012886:	3710      	adds	r7, #16
 8012888:	46bd      	mov	sp, r7
 801288a:	bd80      	pop	{r7, pc}

0801288c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 801288c:	b5b0      	push	{r4, r5, r7, lr}
 801288e:	b086      	sub	sp, #24
 8012890:	af00      	add	r7, sp, #0
 8012892:	60f8      	str	r0, [r7, #12]
 8012894:	60b9      	str	r1, [r7, #8]
 8012896:	607a      	str	r2, [r7, #4]
 8012898:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d117      	bne.n	80128d0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80128a0:	68f8      	ldr	r0, [r7, #12]
 80128a2:	f000 fbaa 	bl	8012ffa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80128a6:	4602      	mov	r2, r0
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	4293      	cmp	r3, r2
 80128ac:	d010      	beq.n	80128d0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80128ae:	68fc      	ldr	r4, [r7, #12]
 80128b0:	6838      	ldr	r0, [r7, #0]
 80128b2:	f7ff ffd8 	bl	8012866 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80128b6:	4605      	mov	r5, r0
 80128b8:	6878      	ldr	r0, [r7, #4]
 80128ba:	f000 fc51 	bl	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80128be:	4603      	mov	r3, r0
 80128c0:	461a      	mov	r2, r3
 80128c2:	4629      	mov	r1, r5
 80128c4:	4620      	mov	r0, r4
 80128c6:	f7ff f8f8 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 80128ca:	4603      	mov	r3, r0
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d001      	beq.n	80128d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 80128d0:	2301      	movs	r3, #1
 80128d2:	e000      	b.n	80128d6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 80128d4:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80128d6:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80128dc:	7df8      	ldrb	r0, [r7, #23]
 80128de:	687a      	ldr	r2, [r7, #4]
 80128e0:	6839      	ldr	r1, [r7, #0]
 80128e2:	f00e f8a1 	bl	8020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	695b      	ldr	r3, [r3, #20]
 80128ea:	1c5a      	adds	r2, r3, #1
 80128ec:	68fb      	ldr	r3, [r7, #12]
 80128ee:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80128f0:	f107 0310 	add.w	r3, r7, #16
 80128f4:	6839      	ldr	r1, [r7, #0]
 80128f6:	4618      	mov	r0, r3
 80128f8:	f7f2 ff55 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 80128fc:	693b      	ldr	r3, [r7, #16]
    }
 80128fe:	4618      	mov	r0, r3
 8012900:	3718      	adds	r7, #24
 8012902:	46bd      	mov	sp, r7
 8012904:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012908 <_ZN5FieldIJtEEC1EPt>:
    Field(T* ptr) : ptr(ptr) { }
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	4618      	mov	r0, r3
 8012916:	f7ff f87d 	bl	8011a14 <_ZN5FieldIJEEC1Ev>
 801291a:	4a05      	ldr	r2, [pc, #20]	; (8012930 <_ZN5FieldIJtEEC1EPt+0x28>)
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	601a      	str	r2, [r3, #0]
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	683a      	ldr	r2, [r7, #0]
 8012924:	605a      	str	r2, [r3, #4]
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	4618      	mov	r0, r3
 801292a:	3708      	adds	r7, #8
 801292c:	46bd      	mov	sp, r7
 801292e:	bd80      	pop	{r7, pc}
 8012930:	080210c4 	.word	0x080210c4

08012934 <_ZN5FieldIJmEEC1EPm>:
 8012934:	b580      	push	{r7, lr}
 8012936:	b082      	sub	sp, #8
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	6039      	str	r1, [r7, #0]
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	4618      	mov	r0, r3
 8012942:	f7ff f867 	bl	8011a14 <_ZN5FieldIJEEC1Ev>
 8012946:	4a05      	ldr	r2, [pc, #20]	; (801295c <_ZN5FieldIJmEEC1EPm+0x28>)
 8012948:	687b      	ldr	r3, [r7, #4]
 801294a:	601a      	str	r2, [r3, #0]
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	683a      	ldr	r2, [r7, #0]
 8012950:	605a      	str	r2, [r3, #4]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	4618      	mov	r0, r3
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}
 801295c:	080210b0 	.word	0x080210b0

08012960 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012960:	b480      	push	{r7}
 8012962:	b083      	sub	sp, #12
 8012964:	af00      	add	r7, sp, #0
 8012966:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	689b      	ldr	r3, [r3, #8]
 801296c:	4618      	mov	r0, r3
 801296e:	370c      	adds	r7, #12
 8012970:	46bd      	mov	sp, r7
 8012972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012976:	4770      	bx	lr

08012978 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012978:	b480      	push	{r7}
 801297a:	b083      	sub	sp, #12
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	68db      	ldr	r3, [r3, #12]
 8012984:	4618      	mov	r0, r3
 8012986:	370c      	adds	r7, #12
 8012988:	46bd      	mov	sp, r7
 801298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801298e:	4770      	bx	lr

08012990 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012990:	b480      	push	{r7}
 8012992:	b083      	sub	sp, #12
 8012994:	af00      	add	r7, sp, #0
 8012996:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	689b      	ldr	r3, [r3, #8]
 801299c:	4618      	mov	r0, r3
 801299e:	370c      	adds	r7, #12
 80129a0:	46bd      	mov	sp, r7
 80129a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a6:	4770      	bx	lr

080129a8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80129a8:	b480      	push	{r7}
 80129aa:	b083      	sub	sp, #12
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	68db      	ldr	r3, [r3, #12]
 80129b4:	4618      	mov	r0, r3
 80129b6:	370c      	adds	r7, #12
 80129b8:	46bd      	mov	sp, r7
 80129ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129be:	4770      	bx	lr

080129c0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>:
      _M_access() const
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b082      	sub	sp, #8
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80129c8:	6878      	ldr	r0, [r7, #4]
 80129ca:	f7fa fe0b 	bl	800d5e4 <_ZNKSt9_Any_data9_M_accessEv>
 80129ce:	4603      	mov	r3, r0
 80129d0:	4618      	mov	r0, r3
 80129d2:	3708      	adds	r7, #8
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80129d8:	b480      	push	{r7}
 80129da:	b083      	sub	sp, #12
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	4618      	mov	r0, r3
 80129e4:	370c      	adds	r7, #12
 80129e6:	46bd      	mov	sp, r7
 80129e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ec:	4770      	bx	lr

080129ee <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80129ee:	b480      	push	{r7}
 80129f0:	b083      	sub	sp, #12
 80129f2:	af00      	add	r7, sp, #0
 80129f4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	4618      	mov	r0, r3
 80129fa:	370c      	adds	r7, #12
 80129fc:	46bd      	mov	sp, r7
 80129fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a02:	4770      	bx	lr

08012a04 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012a04:	b580      	push	{r7, lr}
 8012a06:	b082      	sub	sp, #8
 8012a08:	af00      	add	r7, sp, #0
 8012a0a:	7138      	strb	r0, [r7, #4]
 8012a0c:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012a0e:	6838      	ldr	r0, [r7, #0]
 8012a10:	f7ff ffed 	bl	80129ee <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8012a14:	4603      	mov	r3, r0
 8012a16:	4618      	mov	r0, r3
 8012a18:	f7fb fdec 	bl	800e5f4 <_ZZN8TUDTests5setupEvENKUlvE_clEv>
 8012a1c:	bf00      	nop
 8012a1e:	3708      	adds	r7, #8
 8012a20:	46bd      	mov	sp, r7
 8012a22:	bd80      	pop	{r7, pc}

08012a24 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b084      	sub	sp, #16
 8012a28:	af00      	add	r7, sp, #0
 8012a2a:	60f8      	str	r0, [r7, #12]
 8012a2c:	60b9      	str	r1, [r7, #8]
 8012a2e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012a30:	68b8      	ldr	r0, [r7, #8]
 8012a32:	f7ff ffc5 	bl	80129c0 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8012a36:	68f8      	ldr	r0, [r7, #12]
 8012a38:	f7fa fdc9 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8012a3c:	4603      	mov	r3, r0
 8012a3e:	4619      	mov	r1, r3
 8012a40:	2001      	movs	r0, #1
 8012a42:	f7ed fc75 	bl	8000330 <_ZnwjPv>
	}
 8012a46:	bf00      	nop
 8012a48:	3710      	adds	r7, #16
 8012a4a:	46bd      	mov	sp, r7
 8012a4c:	bd80      	pop	{r7, pc}

08012a4e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012a4e:	b580      	push	{r7, lr}
 8012a50:	b082      	sub	sp, #8
 8012a52:	af00      	add	r7, sp, #0
 8012a54:	6078      	str	r0, [r7, #4]
 8012a56:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012a58:	6878      	ldr	r0, [r7, #4]
 8012a5a:	f000 fc49 	bl	80132f0 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>
	}
 8012a5e:	bf00      	nop
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>:
      _M_access() const
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b082      	sub	sp, #8
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f7fa fdb8 	bl	800d5e4 <_ZNKSt9_Any_data9_M_accessEv>
 8012a74:	4603      	mov	r3, r0
 8012a76:	4618      	mov	r0, r3
 8012a78:	3708      	adds	r7, #8
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}

08012a7e <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012a7e:	b480      	push	{r7}
 8012a80:	b083      	sub	sp, #12
 8012a82:	af00      	add	r7, sp, #0
 8012a84:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	4618      	mov	r0, r3
 8012a8a:	370c      	adds	r7, #12
 8012a8c:	46bd      	mov	sp, r7
 8012a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a92:	4770      	bx	lr

08012a94 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012a94:	b480      	push	{r7}
 8012a96:	b083      	sub	sp, #12
 8012a98:	af00      	add	r7, sp, #0
 8012a9a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	4618      	mov	r0, r3
 8012aa0:	370c      	adds	r7, #12
 8012aa2:	46bd      	mov	sp, r7
 8012aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aa8:	4770      	bx	lr

08012aaa <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012aaa:	b580      	push	{r7, lr}
 8012aac:	b082      	sub	sp, #8
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	7138      	strb	r0, [r7, #4]
 8012ab2:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012ab4:	6838      	ldr	r0, [r7, #0]
 8012ab6:	f7ff ffed 	bl	8012a94 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 8012aba:	4603      	mov	r3, r0
 8012abc:	4618      	mov	r0, r3
 8012abe:	f7fb fda3 	bl	800e608 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>
 8012ac2:	bf00      	nop
 8012ac4:	3708      	adds	r7, #8
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}

08012aca <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012aca:	b580      	push	{r7, lr}
 8012acc:	b084      	sub	sp, #16
 8012ace:	af00      	add	r7, sp, #0
 8012ad0:	60f8      	str	r0, [r7, #12]
 8012ad2:	60b9      	str	r1, [r7, #8]
 8012ad4:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012ad6:	68b8      	ldr	r0, [r7, #8]
 8012ad8:	f7ff ffc5 	bl	8012a66 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8012adc:	68f8      	ldr	r0, [r7, #12]
 8012ade:	f7fa fd76 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	4619      	mov	r1, r3
 8012ae6:	2001      	movs	r0, #1
 8012ae8:	f7ed fc22 	bl	8000330 <_ZnwjPv>
	}
 8012aec:	bf00      	nop
 8012aee:	3710      	adds	r7, #16
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012afe:	6878      	ldr	r0, [r7, #4]
 8012b00:	f000 fc02 	bl	8013308 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>
	}
 8012b04:	bf00      	nop
 8012b06:	3708      	adds	r7, #8
 8012b08:	46bd      	mov	sp, r7
 8012b0a:	bd80      	pop	{r7, pc}

08012b0c <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012b0c:	b580      	push	{r7, lr}
 8012b0e:	b082      	sub	sp, #8
 8012b10:	af00      	add	r7, sp, #0
 8012b12:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	4618      	mov	r0, r3
 8012b18:	f000 fc28 	bl	801336c <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012b1c:	4603      	mov	r3, r0
 8012b1e:	4618      	mov	r0, r3
 8012b20:	f000 fc0a 	bl	8013338 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>
 8012b24:	4603      	mov	r3, r0
 8012b26:	4618      	mov	r0, r3
 8012b28:	3708      	adds	r7, #8
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}

08012b2e <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012b2e:	b480      	push	{r7}
 8012b30:	b083      	sub	sp, #12
 8012b32:	af00      	add	r7, sp, #0
 8012b34:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	685a      	ldr	r2, [r3, #4]
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	1ad3      	subs	r3, r2, r3
 8012b40:	109b      	asrs	r3, r3, #2
 8012b42:	4618      	mov	r0, r3
 8012b44:	370c      	adds	r7, #12
 8012b46:	46bd      	mov	sp, r7
 8012b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4c:	4770      	bx	lr

08012b4e <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012b4e:	b580      	push	{r7, lr}
 8012b50:	b084      	sub	sp, #16
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]
 8012b56:	6039      	str	r1, [r7, #0]
 8012b58:	687b      	ldr	r3, [r7, #4]
 8012b5a:	60fb      	str	r3, [r7, #12]
 8012b5c:	683b      	ldr	r3, [r7, #0]
 8012b5e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012b60:	f7ed fbde 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012b64:	4603      	mov	r3, r0
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d006      	beq.n	8012b78 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	4618      	mov	r0, r3
 8012b70:	f00d feee 	bl	8020950 <_Znwj>
 8012b74:	4603      	mov	r3, r0
 8012b76:	e006      	b.n	8012b86 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012b78:	2200      	movs	r2, #0
 8012b7a:	68b9      	ldr	r1, [r7, #8]
 8012b7c:	68f8      	ldr	r0, [r7, #12]
 8012b7e:	f000 fe58 	bl	8013832 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>
 8012b82:	4603      	mov	r3, r0
 8012b84:	bf00      	nop
      { return __a.allocate(__n); }
 8012b86:	4618      	mov	r0, r3
 8012b88:	3710      	adds	r7, #16
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}

08012b8e <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012b8e:	b580      	push	{r7, lr}
 8012b90:	b084      	sub	sp, #16
 8012b92:	af00      	add	r7, sp, #0
 8012b94:	60f8      	str	r0, [r7, #12]
 8012b96:	60b9      	str	r1, [r7, #8]
 8012b98:	607a      	str	r2, [r7, #4]
 8012b9a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012b9c:	683b      	ldr	r3, [r7, #0]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	68b9      	ldr	r1, [r7, #8]
 8012ba2:	68f8      	ldr	r0, [r7, #12]
 8012ba4:	f000 fbed 	bl	8013382 <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012ba8:	4603      	mov	r3, r0
      }
 8012baa:	4618      	mov	r0, r3
 8012bac:	3710      	adds	r7, #16
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd80      	pop	{r7, pc}

08012bb2 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8012bb2:	b580      	push	{r7, lr}
 8012bb4:	b082      	sub	sp, #8
 8012bb6:	af00      	add	r7, sp, #0
 8012bb8:	6078      	str	r0, [r7, #4]
 8012bba:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8012bbc:	6838      	ldr	r0, [r7, #0]
 8012bbe:	f7fe fc21 	bl	8011404 <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8012bc2:	4602      	mov	r2, r0
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	601a      	str	r2, [r3, #0]
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	4618      	mov	r0, r3
 8012bcc:	3708      	adds	r7, #8
 8012bce:	46bd      	mov	sp, r7
 8012bd0:	bd80      	pop	{r7, pc}

08012bd2 <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8012bd2:	b580      	push	{r7, lr}
 8012bd4:	b082      	sub	sp, #8
 8012bd6:	af00      	add	r7, sp, #0
 8012bd8:	6078      	str	r0, [r7, #4]
 8012bda:	6039      	str	r1, [r7, #0]
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	683a      	ldr	r2, [r7, #0]
 8012be0:	4611      	mov	r1, r2
 8012be2:	4618      	mov	r0, r3
 8012be4:	f000 fbea 	bl	80133bc <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	4618      	mov	r0, r3
 8012bec:	3708      	adds	r7, #8
 8012bee:	46bd      	mov	sp, r7
 8012bf0:	bd80      	pop	{r7, pc}

08012bf2 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012bf2:	b5b0      	push	{r4, r5, r7, lr}
 8012bf4:	b088      	sub	sp, #32
 8012bf6:	af00      	add	r7, sp, #0
 8012bf8:	60f8      	str	r0, [r7, #12]
 8012bfa:	60b9      	str	r1, [r7, #8]
 8012bfc:	607a      	str	r2, [r7, #4]
 8012bfe:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012c00:	68b8      	ldr	r0, [r7, #8]
 8012c02:	f7ee fb30 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7fe fc1a 	bl	8011440 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012c0c:	4602      	mov	r2, r0
 8012c0e:	f107 0318 	add.w	r3, r7, #24
 8012c12:	4611      	mov	r1, r2
 8012c14:	4618      	mov	r0, r3
 8012c16:	f7ff ffdc 	bl	8012bd2 <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>
 8012c1a:	f107 0418 	add.w	r4, r7, #24
 8012c1e:	6838      	ldr	r0, [r7, #0]
 8012c20:	f7ee fb37 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	4619      	mov	r1, r3
 8012c28:	2008      	movs	r0, #8
 8012c2a:	f7ed fb81 	bl	8000330 <_ZnwjPv>
 8012c2e:	4605      	mov	r5, r0
 8012c30:	7f3b      	ldrb	r3, [r7, #28]
 8012c32:	4622      	mov	r2, r4
 8012c34:	7d39      	ldrb	r1, [r7, #20]
 8012c36:	4628      	mov	r0, r5
 8012c38:	f000 fbf1 	bl	801341e <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8012c3c:	462b      	mov	r3, r5
 8012c3e:	4618      	mov	r0, r3
 8012c40:	3720      	adds	r7, #32
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bdb0      	pop	{r4, r5, r7, pc}

08012c46 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012c46:	b5b0      	push	{r4, r5, r7, lr}
 8012c48:	b084      	sub	sp, #16
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	60f8      	str	r0, [r7, #12]
 8012c4e:	60b9      	str	r1, [r7, #8]
 8012c50:	607a      	str	r2, [r7, #4]
 8012c52:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012c54:	6878      	ldr	r0, [r7, #4]
 8012c56:	f7ee fb06 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012c5a:	4604      	mov	r4, r0
 8012c5c:	6838      	ldr	r0, [r7, #0]
 8012c5e:	f7fe fbef 	bl	8011440 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012c62:	4605      	mov	r5, r0
 8012c64:	6a38      	ldr	r0, [r7, #32]
 8012c66:	f7ee fb14 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012c6a:	4603      	mov	r3, r0
 8012c6c:	462a      	mov	r2, r5
 8012c6e:	4621      	mov	r1, r4
 8012c70:	68b8      	ldr	r0, [r7, #8]
 8012c72:	f7ff ffbe 	bl	8012bf2 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 8012c76:	bf00      	nop
 8012c78:	3710      	adds	r7, #16
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	bdb0      	pop	{r4, r5, r7, pc}

08012c7e <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8012c7e:	b580      	push	{r7, lr}
 8012c80:	b084      	sub	sp, #16
 8012c82:	af00      	add	r7, sp, #0
 8012c84:	60f8      	str	r0, [r7, #12]
 8012c86:	60b9      	str	r1, [r7, #8]
 8012c88:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	4619      	mov	r1, r3
 8012c90:	68b8      	ldr	r0, [r7, #8]
 8012c92:	f00d fe5b 	bl	802094c <_ZdlPvj>
      }
 8012c96:	3710      	adds	r7, #16
 8012c98:	46bd      	mov	sp, r7
 8012c9a:	bd80      	pop	{r7, pc}

08012c9c <_ZSt11__addressofIP13StreamMessageEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012c9c:	b480      	push	{r7}
 8012c9e:	b083      	sub	sp, #12
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	370c      	adds	r7, #12
 8012caa:	46bd      	mov	sp, r7
 8012cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cb0:	4770      	bx	lr

08012cb2 <_ZSt8_DestroyIP13StreamMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 8012cb2:	b580      	push	{r7, lr}
 8012cb4:	b082      	sub	sp, #8
 8012cb6:	af00      	add	r7, sp, #0
 8012cb8:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8012cba:	6878      	ldr	r0, [r7, #4]
 8012cbc:	f7ff fb73 	bl	80123a6 <_ZSt10destroy_atIP13StreamMessageEvPT_>
    }
 8012cc0:	bf00      	nop
 8012cc2:	3708      	adds	r7, #8
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}

08012cc8 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	f000 fbdd 	bl	8013492 <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8012cd8:	4603      	mov	r3, r0
 8012cda:	4618      	mov	r0, r3
 8012cdc:	f000 fbbf 	bl	801345e <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	3708      	adds	r7, #8
 8012ce6:	46bd      	mov	sp, r7
 8012ce8:	bd80      	pop	{r7, pc}

08012cea <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012cea:	b480      	push	{r7}
 8012cec:	b083      	sub	sp, #12
 8012cee:	af00      	add	r7, sp, #0
 8012cf0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	685a      	ldr	r2, [r3, #4]
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	1ad3      	subs	r3, r2, r3
 8012cfc:	109b      	asrs	r3, r3, #2
 8012cfe:	4618      	mov	r0, r3
 8012d00:	370c      	adds	r7, #12
 8012d02:	46bd      	mov	sp, r7
 8012d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d08:	4770      	bx	lr

08012d0a <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012d0a:	b580      	push	{r7, lr}
 8012d0c:	b084      	sub	sp, #16
 8012d0e:	af00      	add	r7, sp, #0
 8012d10:	6078      	str	r0, [r7, #4]
 8012d12:	6039      	str	r1, [r7, #0]
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	60fb      	str	r3, [r7, #12]
 8012d18:	683b      	ldr	r3, [r7, #0]
 8012d1a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012d1c:	f7ed fb00 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012d20:	4603      	mov	r3, r0
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d006      	beq.n	8012d34 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	009b      	lsls	r3, r3, #2
 8012d2a:	4618      	mov	r0, r3
 8012d2c:	f00d fe10 	bl	8020950 <_Znwj>
 8012d30:	4603      	mov	r3, r0
 8012d32:	e006      	b.n	8012d42 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012d34:	2200      	movs	r2, #0
 8012d36:	68b9      	ldr	r1, [r7, #8]
 8012d38:	68f8      	ldr	r0, [r7, #12]
 8012d3a:	f000 fde7 	bl	801390c <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>
 8012d3e:	4603      	mov	r3, r0
 8012d40:	bf00      	nop
      { return __a.allocate(__n); }
 8012d42:	4618      	mov	r0, r3
 8012d44:	3710      	adds	r7, #16
 8012d46:	46bd      	mov	sp, r7
 8012d48:	bd80      	pop	{r7, pc}

08012d4a <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012d4a:	b580      	push	{r7, lr}
 8012d4c:	b084      	sub	sp, #16
 8012d4e:	af00      	add	r7, sp, #0
 8012d50:	60f8      	str	r0, [r7, #12]
 8012d52:	60b9      	str	r1, [r7, #8]
 8012d54:	607a      	str	r2, [r7, #4]
 8012d56:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012d58:	683b      	ldr	r3, [r7, #0]
 8012d5a:	687a      	ldr	r2, [r7, #4]
 8012d5c:	68b9      	ldr	r1, [r7, #8]
 8012d5e:	68f8      	ldr	r0, [r7, #12]
 8012d60:	f000 fba2 	bl	80134a8 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012d64:	4603      	mov	r3, r0
      }
 8012d66:	4618      	mov	r0, r3
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}

08012d6e <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8012d6e:	b480      	push	{r7}
 8012d70:	b083      	sub	sp, #12
 8012d72:	af00      	add	r7, sp, #0
 8012d74:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8012d76:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8012d7a:	4618      	mov	r0, r3
 8012d7c:	370c      	adds	r7, #12
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr

08012d86 <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012d86:	b580      	push	{r7, lr}
 8012d88:	b084      	sub	sp, #16
 8012d8a:	af00      	add	r7, sp, #0
 8012d8c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012d8e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012d92:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f7ff ffea 	bl	8012d6e <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012d9e:	f107 0208 	add.w	r2, r7, #8
 8012da2:	f107 030c 	add.w	r3, r7, #12
 8012da6:	4611      	mov	r1, r2
 8012da8:	4618      	mov	r0, r3
 8012daa:	f7f0 f81c 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8012dae:	4603      	mov	r3, r0
 8012db0:	681b      	ldr	r3, [r3, #0]
      }
 8012db2:	4618      	mov	r0, r3
 8012db4:	3710      	adds	r7, #16
 8012db6:	46bd      	mov	sp, r7
 8012db8:	bd80      	pop	{r7, pc}

08012dba <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012dba:	b480      	push	{r7}
 8012dbc:	b083      	sub	sp, #12
 8012dbe:	af00      	add	r7, sp, #0
 8012dc0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	370c      	adds	r7, #12
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dce:	4770      	bx	lr

08012dd0 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012dd0:	b5b0      	push	{r4, r5, r7, lr}
 8012dd2:	b084      	sub	sp, #16
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	607a      	str	r2, [r7, #4]
 8012ddc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012dde:	68f8      	ldr	r0, [r7, #12]
 8012de0:	f000 fb9e 	bl	8013520 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012de4:	4604      	mov	r4, r0
 8012de6:	68b8      	ldr	r0, [r7, #8]
 8012de8:	f000 fb9a 	bl	8013520 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012dec:	4605      	mov	r5, r0
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f000 fb96 	bl	8013520 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012df4:	4602      	mov	r2, r0
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	4629      	mov	r1, r5
 8012dfa:	4620      	mov	r0, r4
 8012dfc:	f000 fb9b 	bl	8013536 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012e00:	4603      	mov	r3, r0
    }
 8012e02:	4618      	mov	r0, r3
 8012e04:	3710      	adds	r7, #16
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bdb0      	pop	{r4, r5, r7, pc}

08012e0a <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 8012e0a:	b580      	push	{r7, lr}
 8012e0c:	b082      	sub	sp, #8
 8012e0e:	af00      	add	r7, sp, #0
 8012e10:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012e12:	6878      	ldr	r0, [r7, #4]
 8012e14:	f7fa fbdb 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8012e18:	4603      	mov	r3, r0
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3708      	adds	r7, #8
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}

08012e22 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012e22:	b580      	push	{r7, lr}
 8012e24:	b082      	sub	sp, #8
 8012e26:	af00      	add	r7, sp, #0
 8012e28:	6078      	str	r0, [r7, #4]
 8012e2a:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012e2c:	687a      	ldr	r2, [r7, #4]
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	429a      	cmp	r2, r3
 8012e32:	d00a      	beq.n	8012e4a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8012e34:	6878      	ldr	r0, [r7, #4]
 8012e36:	f000 fbab 	bl	8013590 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f000 fbb2 	bl	80135a6 <_ZSt8_DestroyIP5FieldIJEEEvPT_>
	  for (; __first != __last; ++__first)
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	3304      	adds	r3, #4
 8012e46:	607b      	str	r3, [r7, #4]
 8012e48:	e7f0      	b.n	8012e2c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0xa>
	}
 8012e4a:	bf00      	nop
 8012e4c:	3708      	adds	r7, #8
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}

08012e52 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012e52:	b480      	push	{r7}
 8012e54:	b083      	sub	sp, #12
 8012e56:	af00      	add	r7, sp, #0
 8012e58:	6078      	str	r0, [r7, #4]
 8012e5a:	6039      	str	r1, [r7, #0]
 8012e5c:	bf00      	nop
 8012e5e:	370c      	adds	r7, #12
 8012e60:	46bd      	mov	sp, r7
 8012e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e66:	4770      	bx	lr

08012e68 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012e68:	b480      	push	{r7}
 8012e6a:	b083      	sub	sp, #12
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	4618      	mov	r0, r3
 8012e74:	370c      	adds	r7, #12
 8012e76:	46bd      	mov	sp, r7
 8012e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7c:	4770      	bx	lr

08012e7e <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012e7e:	b590      	push	{r4, r7, lr}
 8012e80:	b083      	sub	sp, #12
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012e88:	6838      	ldr	r0, [r7, #0]
 8012e8a:	f7ff ffed 	bl	8012e68 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	681c      	ldr	r4, [r3, #0]
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	4619      	mov	r1, r3
 8012e96:	2004      	movs	r0, #4
 8012e98:	f7ed fa4a 	bl	8000330 <_ZnwjPv>
 8012e9c:	4603      	mov	r3, r0
 8012e9e:	601c      	str	r4, [r3, #0]
 8012ea0:	4618      	mov	r0, r3
 8012ea2:	370c      	adds	r7, #12
 8012ea4:	46bd      	mov	sp, r7
 8012ea6:	bd90      	pop	{r4, r7, pc}

08012ea8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012ea8:	b580      	push	{r7, lr}
 8012eaa:	b084      	sub	sp, #16
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f7ff ffd7 	bl	8012e68 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	4619      	mov	r1, r3
 8012ebe:	68b8      	ldr	r0, [r7, #8]
 8012ec0:	f7ff ffdd 	bl	8012e7e <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 8012ec4:	bf00      	nop
 8012ec6:	3710      	adds	r7, #16
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012ecc:	b5b0      	push	{r4, r5, r7, lr}
 8012ece:	b08c      	sub	sp, #48	; 0x30
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8012ed8:	4a39      	ldr	r2, [pc, #228]	; (8012fc0 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8012eda:	2101      	movs	r1, #1
 8012edc:	68f8      	ldr	r0, [r7, #12]
 8012ede:	f000 fb6d 	bl	80135bc <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>
 8012ee2:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8012eea:	68fb      	ldr	r3, [r7, #12]
 8012eec:	685b      	ldr	r3, [r3, #4]
 8012eee:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8012ef0:	68f8      	ldr	r0, [r7, #12]
 8012ef2:	f7f2 f8fe 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8012ef6:	4603      	mov	r3, r0
 8012ef8:	617b      	str	r3, [r7, #20]
 8012efa:	f107 0214 	add.w	r2, r7, #20
 8012efe:	f107 0308 	add.w	r3, r7, #8
 8012f02:	4611      	mov	r1, r2
 8012f04:	4618      	mov	r0, r3
 8012f06:	f000 fba0 	bl	801364a <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012f12:	4618      	mov	r0, r3
 8012f14:	f000 fbae 	bl	8013674 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>
 8012f18:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8012f1a:	69fb      	ldr	r3, [r7, #28]
 8012f1c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8012f1e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8012f20:	6a3b      	ldr	r3, [r7, #32]
 8012f22:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8012f24:	69fa      	ldr	r2, [r7, #28]
 8012f26:	18d5      	adds	r5, r2, r3
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f7ff ff9d 	bl	8012e68 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012f2e:	4603      	mov	r3, r0
 8012f30:	461a      	mov	r2, r3
 8012f32:	4629      	mov	r1, r5
 8012f34:	4620      	mov	r0, r4
 8012f36:	f7ff ffb7 	bl	8012ea8 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012f3e:	f107 0308 	add.w	r3, r7, #8
 8012f42:	4618      	mov	r0, r3
 8012f44:	f7f1 fd55 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8012f48:	4603      	mov	r3, r0
 8012f4a:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fe fd47 	bl	80119e2 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8012f54:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012f56:	69fa      	ldr	r2, [r7, #28]
 8012f58:	4621      	mov	r1, r4
 8012f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012f5c:	f000 fb9e 	bl	801369c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8012f60:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8012f62:	69bb      	ldr	r3, [r7, #24]
 8012f64:	3304      	adds	r3, #4
 8012f66:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012f68:	f107 0308 	add.w	r3, r7, #8
 8012f6c:	4618      	mov	r0, r3
 8012f6e:	f7f1 fd40 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8012f72:	4603      	mov	r3, r0
 8012f74:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7fe fd32 	bl	80119e2 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8012f7e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012f80:	69ba      	ldr	r2, [r7, #24]
 8012f82:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f84:	4620      	mov	r0, r4
 8012f86:	f000 fb89 	bl	801369c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8012f8a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8012f8c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	689a      	ldr	r2, [r3, #8]
 8012f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f94:	1ad3      	subs	r3, r2, r3
 8012f96:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8012f98:	461a      	mov	r2, r3
 8012f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012f9c:	f7fe fd0e 	bl	80119bc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	69fa      	ldr	r2, [r7, #28]
 8012fa4:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	69ba      	ldr	r2, [r7, #24]
 8012faa:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fae:	009b      	lsls	r3, r3, #2
 8012fb0:	69fa      	ldr	r2, [r7, #28]
 8012fb2:	441a      	add	r2, r3
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	609a      	str	r2, [r3, #8]
    }
 8012fb8:	bf00      	nop
 8012fba:	3730      	adds	r7, #48	; 0x30
 8012fbc:	46bd      	mov	sp, r7
 8012fbe:	bdb0      	pop	{r4, r5, r7, pc}
 8012fc0:	0802103c 	.word	0x0802103c

08012fc4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8012fc4:	b580      	push	{r7, lr}
 8012fc6:	b084      	sub	sp, #16
 8012fc8:	af00      	add	r7, sp, #0
 8012fca:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8012fcc:	6878      	ldr	r0, [r7, #4]
 8012fce:	f7f2 f8a0 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012fd2:	4603      	mov	r3, r0
 8012fd4:	60fb      	str	r3, [r7, #12]
 8012fd6:	f107 030c 	add.w	r3, r7, #12
 8012fda:	2101      	movs	r1, #1
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f000 fb71 	bl	80136c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	60bb      	str	r3, [r7, #8]
 8012fe6:	f107 0308 	add.w	r3, r7, #8
 8012fea:	4618      	mov	r0, r3
 8012fec:	f7f1 fd34 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8012ff0:	4603      	mov	r3, r0
      }
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3710      	adds	r7, #16
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}

08012ffa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012ffa:	b480      	push	{r7}
 8012ffc:	b083      	sub	sp, #12
 8012ffe:	af00      	add	r7, sp, #0
 8013000:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	3304      	adds	r3, #4
 8013006:	4618      	mov	r0, r3
 8013008:	370c      	adds	r7, #12
 801300a:	46bd      	mov	sp, r7
 801300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013010:	4770      	bx	lr

08013012 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013012:	b590      	push	{r4, r7, lr}
 8013014:	b087      	sub	sp, #28
 8013016:	af00      	add	r7, sp, #0
 8013018:	60f8      	str	r0, [r7, #12]
 801301a:	60b9      	str	r1, [r7, #8]
 801301c:	607a      	str	r2, [r7, #4]
 801301e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8013020:	68bb      	ldr	r3, [r7, #8]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d01b      	beq.n	801305e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8013026:	68fc      	ldr	r4, [r7, #12]
 8013028:	68b8      	ldr	r0, [r7, #8]
 801302a:	f7ff fc1c 	bl	8012866 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801302e:	4603      	mov	r3, r0
 8013030:	683a      	ldr	r2, [r7, #0]
 8013032:	4619      	mov	r1, r3
 8013034:	4620      	mov	r0, r4
 8013036:	f7fe fd40 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 801303a:	4603      	mov	r3, r0
 801303c:	f083 0301 	eor.w	r3, r3, #1
 8013040:	b2db      	uxtb	r3, r3
 8013042:	2b00      	cmp	r3, #0
 8013044:	d006      	beq.n	8013054 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	607b      	str	r3, [r7, #4]
 801304a:	68b8      	ldr	r0, [r7, #8]
 801304c:	f7f9 f9ce 	bl	800c3ec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8013050:	60b8      	str	r0, [r7, #8]
 8013052:	e7e5      	b.n	8013020 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8013054:	68b8      	ldr	r0, [r7, #8]
 8013056:	f7f9 f9bd 	bl	800c3d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801305a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 801305c:	e7e0      	b.n	8013020 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 801305e:	f107 0314 	add.w	r3, r7, #20
 8013062:	6879      	ldr	r1, [r7, #4]
 8013064:	4618      	mov	r0, r3
 8013066:	f7f2 fb9e 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 801306a:	697b      	ldr	r3, [r7, #20]
    }
 801306c:	4618      	mov	r0, r3
 801306e:	371c      	adds	r7, #28
 8013070:	46bd      	mov	sp, r7
 8013072:	bd90      	pop	{r4, r7, pc}

08013074 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8013074:	b480      	push	{r7}
 8013076:	b083      	sub	sp, #12
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	683a      	ldr	r2, [r7, #0]
 8013082:	601a      	str	r2, [r3, #0]
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	4618      	mov	r0, r3
 8013088:	370c      	adds	r7, #12
 801308a:	46bd      	mov	sp, r7
 801308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013090:	4770      	bx	lr

08013092 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8013092:	b580      	push	{r7, lr}
 8013094:	b082      	sub	sp, #8
 8013096:	af00      	add	r7, sp, #0
 8013098:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 801309a:	6878      	ldr	r0, [r7, #4]
 801309c:	f7f9 f9ea 	bl	800c474 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2101      	movs	r1, #1
 80130a4:	4618      	mov	r0, r3
 80130a6:	f000 fb26 	bl	80136f6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>
 80130aa:	4603      	mov	r3, r0
 80130ac:	4618      	mov	r0, r3
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 80130b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80130b8:	b086      	sub	sp, #24
 80130ba:	af02      	add	r7, sp, #8
 80130bc:	60f8      	str	r0, [r7, #12]
 80130be:	60b9      	str	r1, [r7, #8]
 80130c0:	607a      	str	r2, [r7, #4]
 80130c2:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 80130c4:	68bb      	ldr	r3, [r7, #8]
 80130c6:	4619      	mov	r1, r3
 80130c8:	2018      	movs	r0, #24
 80130ca:	f7ed f931 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 80130ce:	68f8      	ldr	r0, [r7, #12]
 80130d0:	f7f9 f9d0 	bl	800c474 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 80130d4:	4604      	mov	r4, r0
 80130d6:	68b8      	ldr	r0, [r7, #8]
 80130d8:	f7f2 f9c6 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 80130dc:	4605      	mov	r5, r0
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7ee f8c1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80130e4:	4606      	mov	r6, r0
 80130e6:	6838      	ldr	r0, [r7, #0]
 80130e8:	f7ff fa6c 	bl	80125c4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80130ec:	4680      	mov	r8, r0
 80130ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80130f0:	f7ee f8cf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80130f4:	4603      	mov	r3, r0
 80130f6:	9300      	str	r3, [sp, #0]
 80130f8:	4643      	mov	r3, r8
 80130fa:	4632      	mov	r2, r6
 80130fc:	4629      	mov	r1, r5
 80130fe:	4620      	mov	r0, r4
 8013100:	f000 fb56 	bl	80137b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 8013104:	bf00      	nop
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801310e <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 801310e:	b580      	push	{r7, lr}
 8013110:	b084      	sub	sp, #16
 8013112:	af00      	add	r7, sp, #0
 8013114:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681a      	ldr	r2, [r3, #0]
 801311a:	f107 030c 	add.w	r3, r7, #12
 801311e:	4611      	mov	r1, r2
 8013120:	4618      	mov	r0, r3
 8013122:	f7f2 fb40 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	4618      	mov	r0, r3
 801312a:	3710      	adds	r7, #16
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013130:	b480      	push	{r7}
 8013132:	b083      	sub	sp, #12
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	695b      	ldr	r3, [r3, #20]
 801313c:	4618      	mov	r0, r3
 801313e:	370c      	adds	r7, #12
 8013140:	46bd      	mov	sp, r7
 8013142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013146:	4770      	bx	lr

08013148 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8013148:	b480      	push	{r7}
 801314a:	b083      	sub	sp, #12
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	3310      	adds	r3, #16
 8013154:	4618      	mov	r0, r3
 8013156:	370c      	adds	r7, #12
 8013158:	46bd      	mov	sp, r7
 801315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801315e:	4770      	bx	lr

08013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8013160:	b580      	push	{r7, lr}
 8013162:	b082      	sub	sp, #8
 8013164:	af00      	add	r7, sp, #0
 8013166:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8013168:	6878      	ldr	r0, [r7, #4]
 801316a:	f7ff fb7c 	bl	8012866 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 801316e:	4603      	mov	r3, r0
 8013170:	4618      	mov	r0, r3
 8013172:	3708      	adds	r7, #8
 8013174:	46bd      	mov	sp, r7
 8013176:	bd80      	pop	{r7, pc}

08013178 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8013178:	b590      	push	{r4, r7, lr}
 801317a:	b08b      	sub	sp, #44	; 0x2c
 801317c:	af00      	add	r7, sp, #0
 801317e:	60f8      	str	r0, [r7, #12]
 8013180:	60b9      	str	r1, [r7, #8]
 8013182:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8013184:	68b8      	ldr	r0, [r7, #8]
 8013186:	f7f9 f90e 	bl	800c3a6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 801318a:	4603      	mov	r3, r0
 801318c:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 801318e:	68b8      	ldr	r0, [r7, #8]
 8013190:	f7ff ff33 	bl	8012ffa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 8013194:	4603      	mov	r3, r0
 8013196:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8013198:	2301      	movs	r3, #1
 801319a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 801319e:	69bb      	ldr	r3, [r7, #24]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d020      	beq.n	80131e6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80131a8:	68bc      	ldr	r4, [r7, #8]
 80131aa:	69bb      	ldr	r3, [r7, #24]
 80131ac:	4618      	mov	r0, r3
 80131ae:	f7ff fb5a 	bl	8012866 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80131b2:	4603      	mov	r3, r0
 80131b4:	461a      	mov	r2, r3
 80131b6:	6879      	ldr	r1, [r7, #4]
 80131b8:	4620      	mov	r0, r4
 80131ba:	f7fe fc7e 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 80131be:	4603      	mov	r3, r0
 80131c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80131c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d005      	beq.n	80131d8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 80131cc:	69bb      	ldr	r3, [r7, #24]
 80131ce:	4618      	mov	r0, r3
 80131d0:	f7f9 f90c 	bl	800c3ec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 80131d4:	4603      	mov	r3, r0
 80131d6:	e004      	b.n	80131e2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 80131d8:	69bb      	ldr	r3, [r7, #24]
 80131da:	4618      	mov	r0, r3
 80131dc:	f7f9 f8fa 	bl	800c3d4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 80131e0:	4603      	mov	r3, r0
 80131e2:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 80131e4:	e7db      	b.n	801319e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 80131e6:	697a      	ldr	r2, [r7, #20]
 80131e8:	f107 0310 	add.w	r3, r7, #16
 80131ec:	4611      	mov	r1, r2
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7f2 fad9 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 80131f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d01d      	beq.n	8013238 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 80131fc:	68b8      	ldr	r0, [r7, #8]
 80131fe:	f7f2 f911 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8013202:	4603      	mov	r3, r0
 8013204:	61fb      	str	r3, [r7, #28]
 8013206:	f107 021c 	add.w	r2, r7, #28
 801320a:	f107 0310 	add.w	r3, r7, #16
 801320e:	4611      	mov	r1, r2
 8013210:	4618      	mov	r0, r3
 8013212:	f7f1 ffa9 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8013216:	4603      	mov	r3, r0
 8013218:	2b00      	cmp	r3, #0
 801321a:	d008      	beq.n	801322e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 801321c:	f107 0214 	add.w	r2, r7, #20
 8013220:	f107 0318 	add.w	r3, r7, #24
 8013224:	4619      	mov	r1, r3
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	f000 fade 	bl	80137e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 801322c:	e025      	b.n	801327a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 801322e:	f107 0310 	add.w	r3, r7, #16
 8013232:	4618      	mov	r0, r3
 8013234:	f000 f831 	bl	801329a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8013238:	68bc      	ldr	r4, [r7, #8]
 801323a:	693b      	ldr	r3, [r7, #16]
 801323c:	4618      	mov	r0, r3
 801323e:	f7ff ff8f 	bl	8013160 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8013242:	4603      	mov	r3, r0
 8013244:	687a      	ldr	r2, [r7, #4]
 8013246:	4619      	mov	r1, r3
 8013248:	4620      	mov	r0, r4
 801324a:	f7fe fc36 	bl	8011aba <_ZNKSt4lessItEclERKtS2_>
 801324e:	4603      	mov	r3, r0
 8013250:	2b00      	cmp	r3, #0
 8013252:	d008      	beq.n	8013266 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 8013254:	f107 0214 	add.w	r2, r7, #20
 8013258:	f107 0318 	add.w	r3, r7, #24
 801325c:	4619      	mov	r1, r3
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f000 fac2 	bl	80137e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8013264:	e009      	b.n	801327a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 8013266:	2300      	movs	r3, #0
 8013268:	623b      	str	r3, [r7, #32]
 801326a:	f107 0220 	add.w	r2, r7, #32
 801326e:	f107 0310 	add.w	r3, r7, #16
 8013272:	4619      	mov	r1, r3
 8013274:	68f8      	ldr	r0, [r7, #12]
 8013276:	f7ee fefe 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 801327a:	68f8      	ldr	r0, [r7, #12]
 801327c:	372c      	adds	r7, #44	; 0x2c
 801327e:	46bd      	mov	sp, r7
 8013280:	bd90      	pop	{r4, r7, pc}

08013282 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8013282:	b480      	push	{r7}
 8013284:	b083      	sub	sp, #12
 8013286:	af00      	add	r7, sp, #0
 8013288:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	330c      	adds	r3, #12
 801328e:	4618      	mov	r0, r3
 8013290:	370c      	adds	r7, #12
 8013292:	46bd      	mov	sp, r7
 8013294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013298:	4770      	bx	lr

0801329a <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 801329a:	b580      	push	{r7, lr}
 801329c:	b082      	sub	sp, #8
 801329e:	af00      	add	r7, sp, #0
 80132a0:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4618      	mov	r0, r3
 80132a8:	f00d fbbc 	bl	8020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80132ac:	4602      	mov	r2, r0
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	601a      	str	r2, [r3, #0]
	return *this;
 80132b2:	687b      	ldr	r3, [r7, #4]
      }
 80132b4:	4618      	mov	r0, r3
 80132b6:	3708      	adds	r7, #8
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}

080132bc <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr() const
 80132bc:	b580      	push	{r7, lr}
 80132be:	b082      	sub	sp, #8
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	3310      	adds	r3, #16
 80132c8:	4618      	mov	r0, r3
 80132ca:	f000 faa6 	bl	801381a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 80132ce:	4603      	mov	r3, r0
 80132d0:	4618      	mov	r0, r3
 80132d2:	3708      	adds	r7, #8
 80132d4:	46bd      	mov	sp, r7
 80132d6:	bd80      	pop	{r7, pc}

080132d8 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>:
      operator()(const _Pair& __x) const
 80132d8:	b480      	push	{r7}
 80132da:	b083      	sub	sp, #12
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80132e2:	683b      	ldr	r3, [r7, #0]
 80132e4:	4618      	mov	r0, r3
 80132e6:	370c      	adds	r7, #12
 80132e8:	46bd      	mov	sp, r7
 80132ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132ee:	4770      	bx	lr

080132f0 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 80132f0:	b580      	push	{r7, lr}
 80132f2:	b082      	sub	sp, #8
 80132f4:	af00      	add	r7, sp, #0
 80132f6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80132f8:	6878      	ldr	r0, [r7, #4]
 80132fa:	f7fa f968 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 80132fe:	4603      	mov	r3, r0
 8013300:	4618      	mov	r0, r3
 8013302:	3708      	adds	r7, #8
 8013304:	46bd      	mov	sp, r7
 8013306:	bd80      	pop	{r7, pc}

08013308 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8013308:	b580      	push	{r7, lr}
 801330a:	b082      	sub	sp, #8
 801330c:	af00      	add	r7, sp, #0
 801330e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013310:	6878      	ldr	r0, [r7, #4]
 8013312:	f7fa f95c 	bl	800d5ce <_ZNSt9_Any_data9_M_accessEv>
 8013316:	4603      	mov	r3, r0
 8013318:	4618      	mov	r0, r3
 801331a:	3708      	adds	r7, #8
 801331c:	46bd      	mov	sp, r7
 801331e:	bd80      	pop	{r7, pc}

08013320 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013320:	b480      	push	{r7}
 8013322:	b083      	sub	sp, #12
 8013324:	af00      	add	r7, sp, #0
 8013326:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013328:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 801332c:	4618      	mov	r0, r3
 801332e:	370c      	adds	r7, #12
 8013330:	46bd      	mov	sp, r7
 8013332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013336:	4770      	bx	lr

08013338 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013340:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013344:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013346:	6878      	ldr	r0, [r7, #4]
 8013348:	f7ff ffea 	bl	8013320 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>
 801334c:	4603      	mov	r3, r0
 801334e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013350:	f107 0208 	add.w	r2, r7, #8
 8013354:	f107 030c 	add.w	r3, r7, #12
 8013358:	4611      	mov	r1, r2
 801335a:	4618      	mov	r0, r3
 801335c:	f7ef fd43 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013360:	4603      	mov	r3, r0
 8013362:	681b      	ldr	r3, [r3, #0]
      }
 8013364:	4618      	mov	r0, r3
 8013366:	3710      	adds	r7, #16
 8013368:	46bd      	mov	sp, r7
 801336a:	bd80      	pop	{r7, pc}

0801336c <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801336c:	b480      	push	{r7}
 801336e:	b083      	sub	sp, #12
 8013370:	af00      	add	r7, sp, #0
 8013372:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	4618      	mov	r0, r3
 8013378:	370c      	adds	r7, #12
 801337a:	46bd      	mov	sp, r7
 801337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013380:	4770      	bx	lr

08013382 <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013382:	b5b0      	push	{r4, r5, r7, lr}
 8013384:	b084      	sub	sp, #16
 8013386:	af00      	add	r7, sp, #0
 8013388:	60f8      	str	r0, [r7, #12]
 801338a:	60b9      	str	r1, [r7, #8]
 801338c:	607a      	str	r2, [r7, #4]
 801338e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013390:	68f8      	ldr	r0, [r7, #12]
 8013392:	f000 fa6d 	bl	8013870 <_ZSt12__niter_baseIPP5TimerET_S3_>
 8013396:	4604      	mov	r4, r0
 8013398:	68b8      	ldr	r0, [r7, #8]
 801339a:	f000 fa69 	bl	8013870 <_ZSt12__niter_baseIPP5TimerET_S3_>
 801339e:	4605      	mov	r5, r0
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f000 fa65 	bl	8013870 <_ZSt12__niter_baseIPP5TimerET_S3_>
 80133a6:	4602      	mov	r2, r0
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	4629      	mov	r1, r5
 80133ac:	4620      	mov	r0, r4
 80133ae:	f000 fa6a 	bl	8013886 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80133b2:	4603      	mov	r3, r0
    }
 80133b4:	4618      	mov	r0, r3
 80133b6:	3710      	adds	r7, #16
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bdb0      	pop	{r4, r5, r7, pc}

080133bc <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80133bc:	b590      	push	{r4, r7, lr}
 80133be:	b083      	sub	sp, #12
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80133c6:	687c      	ldr	r4, [r7, #4]
 80133c8:	6838      	ldr	r0, [r7, #0]
 80133ca:	f000 fa7a 	bl	80138c2 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 80133ce:	4603      	mov	r3, r0
 80133d0:	4618      	mov	r0, r3
 80133d2:	f000 fa83 	bl	80138dc <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 80133d6:	4603      	mov	r3, r0
 80133d8:	4619      	mov	r1, r3
 80133da:	4620      	mov	r0, r4
 80133dc:	f7ff fbe9 	bl	8012bb2 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	4618      	mov	r0, r3
 80133e4:	370c      	adds	r7, #12
 80133e6:	46bd      	mov	sp, r7
 80133e8:	bd90      	pop	{r4, r7, pc}

080133ea <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80133ea:	b580      	push	{r7, lr}
 80133ec:	b084      	sub	sp, #16
 80133ee:	af00      	add	r7, sp, #0
 80133f0:	60f8      	str	r0, [r7, #12]
 80133f2:	60b9      	str	r1, [r7, #8]
 80133f4:	607a      	str	r2, [r7, #4]
 80133f6:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80133f8:	68b8      	ldr	r0, [r7, #8]
 80133fa:	f000 fa7a 	bl	80138f2 <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80133fe:	4603      	mov	r3, r0
 8013400:	4618      	mov	r0, r3
 8013402:	f000 fa6b 	bl	80138dc <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 8013406:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013408:	781a      	ldrb	r2, [r3, #0]
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	701a      	strb	r2, [r3, #0]
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2200      	movs	r2, #0
 8013412:	605a      	str	r2, [r3, #4]
      { }
 8013414:	68fb      	ldr	r3, [r7, #12]
 8013416:	4618      	mov	r0, r3
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}

0801341e <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 801341e:	b5b0      	push	{r4, r5, r7, lr}
 8013420:	b086      	sub	sp, #24
 8013422:	af02      	add	r7, sp, #8
 8013424:	60f8      	str	r0, [r7, #12]
 8013426:	7239      	strb	r1, [r7, #8]
 8013428:	607a      	str	r2, [r7, #4]
 801342a:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 801342c:	463a      	mov	r2, r7
 801342e:	f88d 4000 	strb.w	r4, [sp]
 8013432:	462b      	mov	r3, r5
 8013434:	6879      	ldr	r1, [r7, #4]
 8013436:	68f8      	ldr	r0, [r7, #12]
 8013438:	f7ff ffd7 	bl	80133ea <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	4618      	mov	r0, r3
 8013440:	3710      	adds	r7, #16
 8013442:	46bd      	mov	sp, r7
 8013444:	bdb0      	pop	{r4, r5, r7, pc}

08013446 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013446:	b480      	push	{r7}
 8013448:	b083      	sub	sp, #12
 801344a:	af00      	add	r7, sp, #0
 801344c:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 801344e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013452:	4618      	mov	r0, r3
 8013454:	370c      	adds	r7, #12
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr

0801345e <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801345e:	b580      	push	{r7, lr}
 8013460:	b084      	sub	sp, #16
 8013462:	af00      	add	r7, sp, #0
 8013464:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013466:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801346a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801346c:	6878      	ldr	r0, [r7, #4]
 801346e:	f7ff ffea 	bl	8013446 <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>
 8013472:	4603      	mov	r3, r0
 8013474:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013476:	f107 0208 	add.w	r2, r7, #8
 801347a:	f107 030c 	add.w	r3, r7, #12
 801347e:	4611      	mov	r1, r2
 8013480:	4618      	mov	r0, r3
 8013482:	f7ef fcb0 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013486:	4603      	mov	r3, r0
 8013488:	681b      	ldr	r3, [r3, #0]
      }
 801348a:	4618      	mov	r0, r3
 801348c:	3710      	adds	r7, #16
 801348e:	46bd      	mov	sp, r7
 8013490:	bd80      	pop	{r7, pc}

08013492 <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013492:	b480      	push	{r7}
 8013494:	b083      	sub	sp, #12
 8013496:	af00      	add	r7, sp, #0
 8013498:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801349a:	687b      	ldr	r3, [r7, #4]
 801349c:	4618      	mov	r0, r3
 801349e:	370c      	adds	r7, #12
 80134a0:	46bd      	mov	sp, r7
 80134a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a6:	4770      	bx	lr

080134a8 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80134a8:	b5b0      	push	{r4, r5, r7, lr}
 80134aa:	b084      	sub	sp, #16
 80134ac:	af00      	add	r7, sp, #0
 80134ae:	60f8      	str	r0, [r7, #12]
 80134b0:	60b9      	str	r1, [r7, #8]
 80134b2:	607a      	str	r2, [r7, #4]
 80134b4:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f000 fa47 	bl	801394a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80134bc:	4604      	mov	r4, r0
 80134be:	68b8      	ldr	r0, [r7, #8]
 80134c0:	f000 fa43 	bl	801394a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80134c4:	4605      	mov	r5, r0
 80134c6:	6878      	ldr	r0, [r7, #4]
 80134c8:	f000 fa3f 	bl	801394a <_ZSt12__niter_baseIPP6StreamET_S3_>
 80134cc:	4602      	mov	r2, r0
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	4629      	mov	r1, r5
 80134d2:	4620      	mov	r0, r4
 80134d4:	f000 fa44 	bl	8013960 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80134d8:	4603      	mov	r3, r0
    }
 80134da:	4618      	mov	r0, r3
 80134dc:	3710      	adds	r7, #16
 80134de:	46bd      	mov	sp, r7
 80134e0:	bdb0      	pop	{r4, r5, r7, pc}

080134e2 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80134e2:	b580      	push	{r7, lr}
 80134e4:	b084      	sub	sp, #16
 80134e6:	af00      	add	r7, sp, #0
 80134e8:	60f8      	str	r0, [r7, #12]
 80134ea:	60b9      	str	r1, [r7, #8]
 80134ec:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80134ee:	68f8      	ldr	r0, [r7, #12]
 80134f0:	f000 fa54 	bl	801399c <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>
 80134f4:	4602      	mov	r2, r0
 80134f6:	68bb      	ldr	r3, [r7, #8]
 80134f8:	4293      	cmp	r3, r2
 80134fa:	bf8c      	ite	hi
 80134fc:	2301      	movhi	r3, #1
 80134fe:	2300      	movls	r3, #0
 8013500:	b2db      	uxtb	r3, r3
 8013502:	2b00      	cmp	r3, #0
 8013504:	d001      	beq.n	801350a <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013506:	f00d faea 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	4618      	mov	r0, r3
 8013510:	f00d fa1e 	bl	8020950 <_Znwj>
 8013514:	4603      	mov	r3, r0
 8013516:	bf00      	nop
      }
 8013518:	4618      	mov	r0, r3
 801351a:	3710      	adds	r7, #16
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}

08013520 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>:
    __niter_base(_Iterator __it)
 8013520:	b480      	push	{r7}
 8013522:	b083      	sub	sp, #12
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	4618      	mov	r0, r3
 801352c:	370c      	adds	r7, #12
 801352e:	46bd      	mov	sp, r7
 8013530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013534:	4770      	bx	lr

08013536 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013536:	b580      	push	{r7, lr}
 8013538:	b086      	sub	sp, #24
 801353a:	af00      	add	r7, sp, #0
 801353c:	60f8      	str	r0, [r7, #12]
 801353e:	60b9      	str	r1, [r7, #8]
 8013540:	607a      	str	r2, [r7, #4]
 8013542:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013544:	68ba      	ldr	r2, [r7, #8]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	1ad3      	subs	r3, r2, r3
 801354a:	109b      	asrs	r3, r3, #2
 801354c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801354e:	697b      	ldr	r3, [r7, #20]
 8013550:	2b00      	cmp	r3, #0
 8013552:	dd06      	ble.n	8013562 <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013554:	697b      	ldr	r3, [r7, #20]
 8013556:	009b      	lsls	r3, r3, #2
 8013558:	461a      	mov	r2, r3
 801355a:	68f9      	ldr	r1, [r7, #12]
 801355c:	6878      	ldr	r0, [r7, #4]
 801355e:	f00d fb31 	bl	8020bc4 <memmove>
      return __result + __count;
 8013562:	697b      	ldr	r3, [r7, #20]
 8013564:	009b      	lsls	r3, r3, #2
 8013566:	687a      	ldr	r2, [r7, #4]
 8013568:	4413      	add	r3, r2
    }
 801356a:	4618      	mov	r0, r3
 801356c:	3718      	adds	r7, #24
 801356e:	46bd      	mov	sp, r7
 8013570:	bd80      	pop	{r7, pc}

08013572 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 8013572:	b580      	push	{r7, lr}
 8013574:	b084      	sub	sp, #16
 8013576:	af00      	add	r7, sp, #0
 8013578:	60f8      	str	r0, [r7, #12]
 801357a:	60b9      	str	r1, [r7, #8]
 801357c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 801357e:	687b      	ldr	r3, [r7, #4]
 8013580:	009b      	lsls	r3, r3, #2
 8013582:	4619      	mov	r1, r3
 8013584:	68b8      	ldr	r0, [r7, #8]
 8013586:	f00d f9e1 	bl	802094c <_ZdlPvj>
      }
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}

08013590 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8013590:	b480      	push	{r7}
 8013592:	b083      	sub	sp, #12
 8013594:	af00      	add	r7, sp, #0
 8013596:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	4618      	mov	r0, r3
 801359c:	370c      	adds	r7, #12
 801359e:	46bd      	mov	sp, r7
 80135a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a4:	4770      	bx	lr

080135a6 <_ZSt8_DestroyIP5FieldIJEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80135a6:	b580      	push	{r7, lr}
 80135a8:	b082      	sub	sp, #8
 80135aa:	af00      	add	r7, sp, #0
 80135ac:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f000 fa00 	bl	80139b4 <_ZSt10destroy_atIP5FieldIJEEEvPT_>
    }
 80135b4:	bf00      	nop
 80135b6:	3708      	adds	r7, #8
 80135b8:	46bd      	mov	sp, r7
 80135ba:	bd80      	pop	{r7, pc}

080135bc <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80135bc:	b590      	push	{r4, r7, lr}
 80135be:	b087      	sub	sp, #28
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	60f8      	str	r0, [r7, #12]
 80135c4:	60b9      	str	r1, [r7, #8]
 80135c6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80135c8:	68f8      	ldr	r0, [r7, #12]
 80135ca:	f000 f9fd 	bl	80139c8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 80135ce:	4604      	mov	r4, r0
 80135d0:	68f8      	ldr	r0, [r7, #12]
 80135d2:	f000 fa0a 	bl	80139ea <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80135d6:	4603      	mov	r3, r0
 80135d8:	1ae2      	subs	r2, r4, r3
 80135da:	68bb      	ldr	r3, [r7, #8]
 80135dc:	429a      	cmp	r2, r3
 80135de:	bf34      	ite	cc
 80135e0:	2301      	movcc	r3, #1
 80135e2:	2300      	movcs	r3, #0
 80135e4:	b2db      	uxtb	r3, r3
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d002      	beq.n	80135f0 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80135ea:	6878      	ldr	r0, [r7, #4]
 80135ec:	f00d fa7a 	bl	8020ae4 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80135f0:	68f8      	ldr	r0, [r7, #12]
 80135f2:	f000 f9fa 	bl	80139ea <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80135f6:	4604      	mov	r4, r0
 80135f8:	68f8      	ldr	r0, [r7, #12]
 80135fa:	f000 f9f6 	bl	80139ea <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 80135fe:	4603      	mov	r3, r0
 8013600:	613b      	str	r3, [r7, #16]
 8013602:	f107 0208 	add.w	r2, r7, #8
 8013606:	f107 0310 	add.w	r3, r7, #16
 801360a:	4611      	mov	r1, r2
 801360c:	4618      	mov	r0, r3
 801360e:	f7ef f920 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8013612:	4603      	mov	r3, r0
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	4423      	add	r3, r4
 8013618:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801361a:	68f8      	ldr	r0, [r7, #12]
 801361c:	f000 f9e5 	bl	80139ea <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013620:	4602      	mov	r2, r0
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	4293      	cmp	r3, r2
 8013626:	d306      	bcc.n	8013636 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8013628:	68f8      	ldr	r0, [r7, #12]
 801362a:	f000 f9cd 	bl	80139c8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 801362e:	4602      	mov	r2, r0
 8013630:	697b      	ldr	r3, [r7, #20]
 8013632:	4293      	cmp	r3, r2
 8013634:	d904      	bls.n	8013640 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x84>
 8013636:	68f8      	ldr	r0, [r7, #12]
 8013638:	f000 f9c6 	bl	80139c8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 801363c:	4603      	mov	r3, r0
 801363e:	e000      	b.n	8013642 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x86>
 8013640:	697b      	ldr	r3, [r7, #20]
      }
 8013642:	4618      	mov	r0, r3
 8013644:	371c      	adds	r7, #28
 8013646:	46bd      	mov	sp, r7
 8013648:	bd90      	pop	{r4, r7, pc}

0801364a <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801364a:	b590      	push	{r4, r7, lr}
 801364c:	b083      	sub	sp, #12
 801364e:	af00      	add	r7, sp, #0
 8013650:	6078      	str	r0, [r7, #4]
 8013652:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8013654:	6878      	ldr	r0, [r7, #4]
 8013656:	f7f1 f9cc 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 801365a:	4603      	mov	r3, r0
 801365c:	681c      	ldr	r4, [r3, #0]
 801365e:	6838      	ldr	r0, [r7, #0]
 8013660:	f7f1 f9c7 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8013664:	4603      	mov	r3, r0
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	1ae3      	subs	r3, r4, r3
 801366a:	109b      	asrs	r3, r3, #2
 801366c:	4618      	mov	r0, r3
 801366e:	370c      	adds	r7, #12
 8013670:	46bd      	mov	sp, r7
 8013672:	bd90      	pop	{r4, r7, pc}

08013674 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801367e:	683b      	ldr	r3, [r7, #0]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d006      	beq.n	8013692 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x1e>
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6839      	ldr	r1, [r7, #0]
 8013688:	4618      	mov	r0, r3
 801368a:	f000 f9be 	bl	8013a0a <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>
 801368e:	4603      	mov	r3, r0
 8013690:	e000      	b.n	8013694 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x20>
 8013692:	2300      	movs	r3, #0
      }
 8013694:	4618      	mov	r0, r3
 8013696:	3708      	adds	r7, #8
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}

0801369c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 801369c:	b590      	push	{r4, r7, lr}
 801369e:	b087      	sub	sp, #28
 80136a0:	af02      	add	r7, sp, #8
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	607a      	str	r2, [r7, #4]
 80136a8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80136aa:	f88d 4000 	strb.w	r4, [sp]
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	687a      	ldr	r2, [r7, #4]
 80136b2:	68b9      	ldr	r1, [r7, #8]
 80136b4:	68f8      	ldr	r0, [r7, #12]
 80136b6:	f000 f9c8 	bl	8013a4a <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 80136ba:	4603      	mov	r3, r0
      }
 80136bc:	4618      	mov	r0, r3
 80136be:	3714      	adds	r7, #20
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd90      	pop	{r4, r7, pc}

080136c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b084      	sub	sp, #16
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
 80136cc:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	681a      	ldr	r2, [r3, #0]
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	009b      	lsls	r3, r3, #2
 80136d6:	425b      	negs	r3, r3
 80136d8:	4413      	add	r3, r2
 80136da:	60fb      	str	r3, [r7, #12]
 80136dc:	f107 020c 	add.w	r2, r7, #12
 80136e0:	f107 0308 	add.w	r3, r7, #8
 80136e4:	4611      	mov	r1, r2
 80136e6:	4618      	mov	r0, r3
 80136e8:	f7f1 fe8c 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 80136ec:	68bb      	ldr	r3, [r7, #8]
 80136ee:	4618      	mov	r0, r3
 80136f0:	3710      	adds	r7, #16
 80136f2:	46bd      	mov	sp, r7
 80136f4:	bd80      	pop	{r7, pc}

080136f6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 80136f6:	b580      	push	{r7, lr}
 80136f8:	b084      	sub	sp, #16
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
 80136fe:	6039      	str	r1, [r7, #0]
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	60fb      	str	r3, [r7, #12]
 8013704:	683b      	ldr	r3, [r7, #0]
 8013706:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013708:	f7ec fe0a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 801370c:	4603      	mov	r3, r0
 801370e:	2b00      	cmp	r3, #0
 8013710:	d009      	beq.n	8013726 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013712:	68ba      	ldr	r2, [r7, #8]
 8013714:	4613      	mov	r3, r2
 8013716:	005b      	lsls	r3, r3, #1
 8013718:	4413      	add	r3, r2
 801371a:	00db      	lsls	r3, r3, #3
 801371c:	4618      	mov	r0, r3
 801371e:	f00d f917 	bl	8020950 <_Znwj>
 8013722:	4603      	mov	r3, r0
 8013724:	e006      	b.n	8013734 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013726:	2200      	movs	r2, #0
 8013728:	68b9      	ldr	r1, [r7, #8]
 801372a:	68f8      	ldr	r0, [r7, #12]
 801372c:	f000 fa78 	bl	8013c20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>
 8013730:	4603      	mov	r3, r0
 8013732:	bf00      	nop
      { return __a.allocate(__n); }
 8013734:	4618      	mov	r0, r3
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 801373c:	b580      	push	{r7, lr}
 801373e:	b082      	sub	sp, #8
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
 8013744:	6039      	str	r1, [r7, #0]
 8013746:	687b      	ldr	r3, [r7, #4]
 8013748:	683a      	ldr	r2, [r7, #0]
 801374a:	4611      	mov	r1, r2
 801374c:	4618      	mov	r0, r3
 801374e:	f000 f98e 	bl	8013a6e <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	4618      	mov	r0, r3
 8013756:	3708      	adds	r7, #8
 8013758:	46bd      	mov	sp, r7
 801375a:	bd80      	pop	{r7, pc}

0801375c <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 801375c:	b5b0      	push	{r4, r5, r7, lr}
 801375e:	b088      	sub	sp, #32
 8013760:	af00      	add	r7, sp, #0
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
 8013768:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801376a:	68b8      	ldr	r0, [r7, #8]
 801376c:	f7ed fd7b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7fe ff27 	bl	80125c4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013776:	4602      	mov	r2, r0
 8013778:	f107 0318 	add.w	r3, r7, #24
 801377c:	4611      	mov	r1, r2
 801377e:	4618      	mov	r0, r3
 8013780:	f7ff ffdc 	bl	801373c <_ZNSt5tupleIJRKtEEC1EOS2_>
 8013784:	f107 0418 	add.w	r4, r7, #24
 8013788:	6838      	ldr	r0, [r7, #0]
 801378a:	f7ed fd82 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	4619      	mov	r1, r3
 8013792:	2008      	movs	r0, #8
 8013794:	f7ec fdcc 	bl	8000330 <_ZnwjPv>
 8013798:	4605      	mov	r5, r0
 801379a:	7f3b      	ldrb	r3, [r7, #28]
 801379c:	4622      	mov	r2, r4
 801379e:	7d39      	ldrb	r1, [r7, #20]
 80137a0:	4628      	mov	r0, r5
 80137a2:	f000 f995 	bl	8013ad0 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 80137a6:	462b      	mov	r3, r5
 80137a8:	4618      	mov	r0, r3
 80137aa:	3720      	adds	r7, #32
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bdb0      	pop	{r4, r5, r7, pc}

080137b0 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80137b0:	b5b0      	push	{r4, r5, r7, lr}
 80137b2:	b084      	sub	sp, #16
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	60f8      	str	r0, [r7, #12]
 80137b8:	60b9      	str	r1, [r7, #8]
 80137ba:	607a      	str	r2, [r7, #4]
 80137bc:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	f7ed fd51 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80137c4:	4604      	mov	r4, r0
 80137c6:	6838      	ldr	r0, [r7, #0]
 80137c8:	f7fe fefc 	bl	80125c4 <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80137cc:	4605      	mov	r5, r0
 80137ce:	6a38      	ldr	r0, [r7, #32]
 80137d0:	f7ed fd5f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80137d4:	4603      	mov	r3, r0
 80137d6:	462a      	mov	r2, r5
 80137d8:	4621      	mov	r1, r4
 80137da:	68b8      	ldr	r0, [r7, #8]
 80137dc:	f7ff ffbe 	bl	801375c <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 80137e0:	bf00      	nop
 80137e2:	3710      	adds	r7, #16
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bdb0      	pop	{r4, r5, r7, pc}

080137e8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b084      	sub	sp, #16
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	60f8      	str	r0, [r7, #12]
 80137f0:	60b9      	str	r1, [r7, #8]
 80137f2:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80137f4:	68b8      	ldr	r0, [r7, #8]
 80137f6:	f000 f97f 	bl	8013af8 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>
 80137fa:	4603      	mov	r3, r0
 80137fc:	681a      	ldr	r2, [r3, #0]
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	601a      	str	r2, [r3, #0]
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	f7ee ffd3 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8013808:	4603      	mov	r3, r0
 801380a:	681a      	ldr	r2, [r3, #0]
 801380c:	68fb      	ldr	r3, [r7, #12]
 801380e:	605a      	str	r2, [r3, #4]
 8013810:	68fb      	ldr	r3, [r7, #12]
 8013812:	4618      	mov	r0, r3
 8013814:	3710      	adds	r7, #16
 8013816:	46bd      	mov	sp, r7
 8013818:	bd80      	pop	{r7, pc}

0801381a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() const noexcept
 801381a:	b580      	push	{r7, lr}
 801381c:	b082      	sub	sp, #8
 801381e:	af00      	add	r7, sp, #0
 8013820:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 f973 	bl	8013b0e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 8013828:	4603      	mov	r3, r0
 801382a:	4618      	mov	r0, r3
 801382c:	3708      	adds	r7, #8
 801382e:	46bd      	mov	sp, r7
 8013830:	bd80      	pop	{r7, pc}

08013832 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013832:	b580      	push	{r7, lr}
 8013834:	b084      	sub	sp, #16
 8013836:	af00      	add	r7, sp, #0
 8013838:	60f8      	str	r0, [r7, #12]
 801383a:	60b9      	str	r1, [r7, #8]
 801383c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 801383e:	68f8      	ldr	r0, [r7, #12]
 8013840:	f000 f970 	bl	8013b24 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>
 8013844:	4602      	mov	r2, r0
 8013846:	68bb      	ldr	r3, [r7, #8]
 8013848:	4293      	cmp	r3, r2
 801384a:	bf8c      	ite	hi
 801384c:	2301      	movhi	r3, #1
 801384e:	2300      	movls	r3, #0
 8013850:	b2db      	uxtb	r3, r3
 8013852:	2b00      	cmp	r3, #0
 8013854:	d001      	beq.n	801385a <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013856:	f00d f942 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801385a:	68bb      	ldr	r3, [r7, #8]
 801385c:	009b      	lsls	r3, r3, #2
 801385e:	4618      	mov	r0, r3
 8013860:	f00d f876 	bl	8020950 <_Znwj>
 8013864:	4603      	mov	r3, r0
 8013866:	bf00      	nop
      }
 8013868:	4618      	mov	r0, r3
 801386a:	3710      	adds	r7, #16
 801386c:	46bd      	mov	sp, r7
 801386e:	bd80      	pop	{r7, pc}

08013870 <_ZSt12__niter_baseIPP5TimerET_S3_>:
    __niter_base(_Iterator __it)
 8013870:	b480      	push	{r7}
 8013872:	b083      	sub	sp, #12
 8013874:	af00      	add	r7, sp, #0
 8013876:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	4618      	mov	r0, r3
 801387c:	370c      	adds	r7, #12
 801387e:	46bd      	mov	sp, r7
 8013880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013884:	4770      	bx	lr

08013886 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013886:	b580      	push	{r7, lr}
 8013888:	b086      	sub	sp, #24
 801388a:	af00      	add	r7, sp, #0
 801388c:	60f8      	str	r0, [r7, #12]
 801388e:	60b9      	str	r1, [r7, #8]
 8013890:	607a      	str	r2, [r7, #4]
 8013892:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013894:	68ba      	ldr	r2, [r7, #8]
 8013896:	68fb      	ldr	r3, [r7, #12]
 8013898:	1ad3      	subs	r3, r2, r3
 801389a:	109b      	asrs	r3, r3, #2
 801389c:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801389e:	697b      	ldr	r3, [r7, #20]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	dd06      	ble.n	80138b2 <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	009b      	lsls	r3, r3, #2
 80138a8:	461a      	mov	r2, r3
 80138aa:	68f9      	ldr	r1, [r7, #12]
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f00d f989 	bl	8020bc4 <memmove>
      return __result + __count;
 80138b2:	697b      	ldr	r3, [r7, #20]
 80138b4:	009b      	lsls	r3, r3, #2
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	4413      	add	r3, r2
    }
 80138ba:	4618      	mov	r0, r3
 80138bc:	3718      	adds	r7, #24
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}

080138c2 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80138c2:	b580      	push	{r7, lr}
 80138c4:	b082      	sub	sp, #8
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f000 f935 	bl	8013b3c <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>
 80138d2:	4603      	mov	r3, r0
 80138d4:	4618      	mov	r0, r3
 80138d6:	3708      	adds	r7, #8
 80138d8:	46bd      	mov	sp, r7
 80138da:	bd80      	pop	{r7, pc}

080138dc <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80138dc:	b480      	push	{r7}
 80138de:	b083      	sub	sp, #12
 80138e0:	af00      	add	r7, sp, #0
 80138e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	4618      	mov	r0, r3
 80138e8:	370c      	adds	r7, #12
 80138ea:	46bd      	mov	sp, r7
 80138ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f0:	4770      	bx	lr

080138f2 <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 80138f2:	b580      	push	{r7, lr}
 80138f4:	b082      	sub	sp, #8
 80138f6:	af00      	add	r7, sp, #0
 80138f8:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	4618      	mov	r0, r3
 80138fe:	f000 f929 	bl	8013b54 <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013902:	4603      	mov	r3, r0
 8013904:	4618      	mov	r0, r3
 8013906:	3708      	adds	r7, #8
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}

0801390c <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801390c:	b580      	push	{r7, lr}
 801390e:	b084      	sub	sp, #16
 8013910:	af00      	add	r7, sp, #0
 8013912:	60f8      	str	r0, [r7, #12]
 8013914:	60b9      	str	r1, [r7, #8]
 8013916:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013918:	68f8      	ldr	r0, [r7, #12]
 801391a:	f000 f927 	bl	8013b6c <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>
 801391e:	4602      	mov	r2, r0
 8013920:	68bb      	ldr	r3, [r7, #8]
 8013922:	4293      	cmp	r3, r2
 8013924:	bf8c      	ite	hi
 8013926:	2301      	movhi	r3, #1
 8013928:	2300      	movls	r3, #0
 801392a:	b2db      	uxtb	r3, r3
 801392c:	2b00      	cmp	r3, #0
 801392e:	d001      	beq.n	8013934 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013930:	f00d f8d5 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	009b      	lsls	r3, r3, #2
 8013938:	4618      	mov	r0, r3
 801393a:	f00d f809 	bl	8020950 <_Znwj>
 801393e:	4603      	mov	r3, r0
 8013940:	bf00      	nop
      }
 8013942:	4618      	mov	r0, r3
 8013944:	3710      	adds	r7, #16
 8013946:	46bd      	mov	sp, r7
 8013948:	bd80      	pop	{r7, pc}

0801394a <_ZSt12__niter_baseIPP6StreamET_S3_>:
    __niter_base(_Iterator __it)
 801394a:	b480      	push	{r7}
 801394c:	b083      	sub	sp, #12
 801394e:	af00      	add	r7, sp, #0
 8013950:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	4618      	mov	r0, r3
 8013956:	370c      	adds	r7, #12
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr

08013960 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013960:	b580      	push	{r7, lr}
 8013962:	b086      	sub	sp, #24
 8013964:	af00      	add	r7, sp, #0
 8013966:	60f8      	str	r0, [r7, #12]
 8013968:	60b9      	str	r1, [r7, #8]
 801396a:	607a      	str	r2, [r7, #4]
 801396c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801396e:	68ba      	ldr	r2, [r7, #8]
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	1ad3      	subs	r3, r2, r3
 8013974:	109b      	asrs	r3, r3, #2
 8013976:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013978:	697b      	ldr	r3, [r7, #20]
 801397a:	2b00      	cmp	r3, #0
 801397c:	dd06      	ble.n	801398c <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801397e:	697b      	ldr	r3, [r7, #20]
 8013980:	009b      	lsls	r3, r3, #2
 8013982:	461a      	mov	r2, r3
 8013984:	68f9      	ldr	r1, [r7, #12]
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f00d f91c 	bl	8020bc4 <memmove>
      return __result + __count;
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	009b      	lsls	r3, r3, #2
 8013990:	687a      	ldr	r2, [r7, #4]
 8013992:	4413      	add	r3, r2
    }
 8013994:	4618      	mov	r0, r3
 8013996:	3718      	adds	r7, #24
 8013998:	46bd      	mov	sp, r7
 801399a:	bd80      	pop	{r7, pc}

0801399c <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 801399c:	b480      	push	{r7}
 801399e:	b083      	sub	sp, #12
 80139a0:	af00      	add	r7, sp, #0
 80139a2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80139a4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80139a8:	4618      	mov	r0, r3
 80139aa:	370c      	adds	r7, #12
 80139ac:	46bd      	mov	sp, r7
 80139ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b2:	4770      	bx	lr

080139b4 <_ZSt10destroy_atIP5FieldIJEEEvPT_>:
    destroy_at(_Tp* __location)
 80139b4:	b480      	push	{r7}
 80139b6:	b083      	sub	sp, #12
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
    }
 80139bc:	bf00      	nop
 80139be:	370c      	adds	r7, #12
 80139c0:	46bd      	mov	sp, r7
 80139c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139c6:	4770      	bx	lr

080139c8 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80139c8:	b580      	push	{r7, lr}
 80139ca:	b082      	sub	sp, #8
 80139cc:	af00      	add	r7, sp, #0
 80139ce:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4618      	mov	r0, r3
 80139d4:	f000 f8fc 	bl	8013bd0 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 80139d8:	4603      	mov	r3, r0
 80139da:	4618      	mov	r0, r3
 80139dc:	f000 f8de 	bl	8013b9c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>
 80139e0:	4603      	mov	r3, r0
 80139e2:	4618      	mov	r0, r3
 80139e4:	3708      	adds	r7, #8
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd80      	pop	{r7, pc}

080139ea <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80139ea:	b480      	push	{r7}
 80139ec:	b083      	sub	sp, #12
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	685a      	ldr	r2, [r3, #4]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	681b      	ldr	r3, [r3, #0]
 80139fa:	1ad3      	subs	r3, r2, r3
 80139fc:	109b      	asrs	r3, r3, #2
 80139fe:	4618      	mov	r0, r3
 8013a00:	370c      	adds	r7, #12
 8013a02:	46bd      	mov	sp, r7
 8013a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a08:	4770      	bx	lr

08013a0a <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8013a0a:	b580      	push	{r7, lr}
 8013a0c:	b084      	sub	sp, #16
 8013a0e:	af00      	add	r7, sp, #0
 8013a10:	6078      	str	r0, [r7, #4]
 8013a12:	6039      	str	r1, [r7, #0]
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	60fb      	str	r3, [r7, #12]
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013a1c:	f7ec fc80 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013a20:	4603      	mov	r3, r0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d006      	beq.n	8013a34 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013a26:	68bb      	ldr	r3, [r7, #8]
 8013a28:	009b      	lsls	r3, r3, #2
 8013a2a:	4618      	mov	r0, r3
 8013a2c:	f00c ff90 	bl	8020950 <_Znwj>
 8013a30:	4603      	mov	r3, r0
 8013a32:	e006      	b.n	8013a42 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8013a34:	2200      	movs	r2, #0
 8013a36:	68b9      	ldr	r1, [r7, #8]
 8013a38:	68f8      	ldr	r0, [r7, #12]
 8013a3a:	f000 f938 	bl	8013cae <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	bf00      	nop
      { return __a.allocate(__n); }
 8013a42:	4618      	mov	r0, r3
 8013a44:	3710      	adds	r7, #16
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8013a4a:	b580      	push	{r7, lr}
 8013a4c:	b084      	sub	sp, #16
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	60f8      	str	r0, [r7, #12]
 8013a52:	60b9      	str	r1, [r7, #8]
 8013a54:	607a      	str	r2, [r7, #4]
 8013a56:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8013a58:	683b      	ldr	r3, [r7, #0]
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	68b9      	ldr	r1, [r7, #8]
 8013a5e:	68f8      	ldr	r0, [r7, #12]
 8013a60:	f000 f8c1 	bl	8013be6 <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>
 8013a64:	4603      	mov	r3, r0
      }
 8013a66:	4618      	mov	r0, r3
 8013a68:	3710      	adds	r7, #16
 8013a6a:	46bd      	mov	sp, r7
 8013a6c:	bd80      	pop	{r7, pc}

08013a6e <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8013a6e:	b590      	push	{r4, r7, lr}
 8013a70:	b083      	sub	sp, #12
 8013a72:	af00      	add	r7, sp, #0
 8013a74:	6078      	str	r0, [r7, #4]
 8013a76:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8013a78:	687c      	ldr	r4, [r7, #4]
 8013a7a:	6838      	ldr	r0, [r7, #0]
 8013a7c:	f000 f8f2 	bl	8013c64 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8013a80:	4603      	mov	r3, r0
 8013a82:	4618      	mov	r0, r3
 8013a84:	f000 f8fb 	bl	8013c7e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8013a88:	4603      	mov	r3, r0
 8013a8a:	4619      	mov	r1, r3
 8013a8c:	4620      	mov	r0, r4
 8013a8e:	f7ff faf1 	bl	8013074 <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	4618      	mov	r0, r3
 8013a96:	370c      	adds	r7, #12
 8013a98:	46bd      	mov	sp, r7
 8013a9a:	bd90      	pop	{r4, r7, pc}

08013a9c <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b084      	sub	sp, #16
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
 8013aa8:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013aaa:	68b8      	ldr	r0, [r7, #8]
 8013aac:	f000 f8f2 	bl	8013c94 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8013ab0:	4603      	mov	r3, r0
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f000 f8e3 	bl	8013c7e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8013ab8:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013aba:	881a      	ldrh	r2, [r3, #0]
 8013abc:	68fb      	ldr	r3, [r7, #12]
 8013abe:	801a      	strh	r2, [r3, #0]
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	605a      	str	r2, [r3, #4]
      { }
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3710      	adds	r7, #16
 8013acc:	46bd      	mov	sp, r7
 8013ace:	bd80      	pop	{r7, pc}

08013ad0 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8013ad0:	b5b0      	push	{r4, r5, r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af02      	add	r7, sp, #8
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	7239      	strb	r1, [r7, #8]
 8013ada:	607a      	str	r2, [r7, #4]
 8013adc:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013ade:	463a      	mov	r2, r7
 8013ae0:	f88d 4000 	strb.w	r4, [sp]
 8013ae4:	462b      	mov	r3, r5
 8013ae6:	6879      	ldr	r1, [r7, #4]
 8013ae8:	68f8      	ldr	r0, [r7, #12]
 8013aea:	f7ff ffd7 	bl	8013a9c <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8013aee:	68fb      	ldr	r3, [r7, #12]
 8013af0:	4618      	mov	r0, r3
 8013af2:	3710      	adds	r7, #16
 8013af4:	46bd      	mov	sp, r7
 8013af6:	bdb0      	pop	{r4, r5, r7, pc}

08013af8 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013af8:	b480      	push	{r7}
 8013afa:	b083      	sub	sp, #12
 8013afc:	af00      	add	r7, sp, #0
 8013afe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	4618      	mov	r0, r3
 8013b04:	370c      	adds	r7, #12
 8013b06:	46bd      	mov	sp, r7
 8013b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b0c:	4770      	bx	lr

08013b0e <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() const noexcept
 8013b0e:	b480      	push	{r7}
 8013b10:	b083      	sub	sp, #12
 8013b12:	af00      	add	r7, sp, #0
 8013b14:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	4618      	mov	r0, r3
 8013b1a:	370c      	adds	r7, #12
 8013b1c:	46bd      	mov	sp, r7
 8013b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b22:	4770      	bx	lr

08013b24 <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b24:	b480      	push	{r7}
 8013b26:	b083      	sub	sp, #12
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b2c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013b30:	4618      	mov	r0, r3
 8013b32:	370c      	adds	r7, #12
 8013b34:	46bd      	mov	sp, r7
 8013b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3a:	4770      	bx	lr

08013b3c <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013b3c:	b480      	push	{r7}
 8013b3e:	b083      	sub	sp, #12
 8013b40:	af00      	add	r7, sp, #0
 8013b42:	6078      	str	r0, [r7, #4]
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	681b      	ldr	r3, [r3, #0]
 8013b48:	4618      	mov	r0, r3
 8013b4a:	370c      	adds	r7, #12
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr

08013b54 <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b082      	sub	sp, #8
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013b5c:	6878      	ldr	r0, [r7, #4]
 8013b5e:	f7ff feb0 	bl	80138c2 <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 8013b62:	4603      	mov	r3, r0
 8013b64:	4618      	mov	r0, r3
 8013b66:	3708      	adds	r7, #8
 8013b68:	46bd      	mov	sp, r7
 8013b6a:	bd80      	pop	{r7, pc}

08013b6c <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013b6c:	b480      	push	{r7}
 8013b6e:	b083      	sub	sp, #12
 8013b70:	af00      	add	r7, sp, #0
 8013b72:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013b74:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013b78:	4618      	mov	r0, r3
 8013b7a:	370c      	adds	r7, #12
 8013b7c:	46bd      	mov	sp, r7
 8013b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b82:	4770      	bx	lr

08013b84 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013b84:	b480      	push	{r7}
 8013b86:	b083      	sub	sp, #12
 8013b88:	af00      	add	r7, sp, #0
 8013b8a:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013b8c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013b90:	4618      	mov	r0, r3
 8013b92:	370c      	adds	r7, #12
 8013b94:	46bd      	mov	sp, r7
 8013b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b9a:	4770      	bx	lr

08013b9c <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b084      	sub	sp, #16
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013ba4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013ba8:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f7ff ffea 	bl	8013b84 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013bb4:	f107 0208 	add.w	r2, r7, #8
 8013bb8:	f107 030c 	add.w	r3, r7, #12
 8013bbc:	4611      	mov	r1, r2
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f7ef f911 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013bc4:	4603      	mov	r3, r0
 8013bc6:	681b      	ldr	r3, [r3, #0]
      }
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3710      	adds	r7, #16
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	4618      	mov	r0, r3
 8013bdc:	370c      	adds	r7, #12
 8013bde:	46bd      	mov	sp, r7
 8013be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be4:	4770      	bx	lr

08013be6 <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013be6:	b5b0      	push	{r4, r5, r7, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	60f8      	str	r0, [r7, #12]
 8013bee:	60b9      	str	r1, [r7, #8]
 8013bf0:	607a      	str	r2, [r7, #4]
 8013bf2:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013bf4:	68f8      	ldr	r0, [r7, #12]
 8013bf6:	f000 f879 	bl	8013cec <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013bfa:	4604      	mov	r4, r0
 8013bfc:	68b8      	ldr	r0, [r7, #8]
 8013bfe:	f000 f875 	bl	8013cec <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013c02:	4605      	mov	r5, r0
 8013c04:	6878      	ldr	r0, [r7, #4]
 8013c06:	f000 f871 	bl	8013cec <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013c0a:	4602      	mov	r2, r0
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	4629      	mov	r1, r5
 8013c10:	4620      	mov	r0, r4
 8013c12:	f000 f876 	bl	8013d02 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>
 8013c16:	4603      	mov	r3, r0
    }
 8013c18:	4618      	mov	r0, r3
 8013c1a:	3710      	adds	r7, #16
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	bdb0      	pop	{r4, r5, r7, pc}

08013c20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013c20:	b580      	push	{r7, lr}
 8013c22:	b084      	sub	sp, #16
 8013c24:	af00      	add	r7, sp, #0
 8013c26:	60f8      	str	r0, [r7, #12]
 8013c28:	60b9      	str	r1, [r7, #8]
 8013c2a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013c2c:	68f8      	ldr	r0, [r7, #12]
 8013c2e:	f000 f887 	bl	8013d40 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>
 8013c32:	4602      	mov	r2, r0
 8013c34:	68bb      	ldr	r3, [r7, #8]
 8013c36:	4293      	cmp	r3, r2
 8013c38:	bf8c      	ite	hi
 8013c3a:	2301      	movhi	r3, #1
 8013c3c:	2300      	movls	r3, #0
 8013c3e:	b2db      	uxtb	r3, r3
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d001      	beq.n	8013c48 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013c44:	f00c ff4b 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013c48:	68ba      	ldr	r2, [r7, #8]
 8013c4a:	4613      	mov	r3, r2
 8013c4c:	005b      	lsls	r3, r3, #1
 8013c4e:	4413      	add	r3, r2
 8013c50:	00db      	lsls	r3, r3, #3
 8013c52:	4618      	mov	r0, r3
 8013c54:	f00c fe7c 	bl	8020950 <_Znwj>
 8013c58:	4603      	mov	r3, r0
 8013c5a:	bf00      	nop
      }
 8013c5c:	4618      	mov	r0, r3
 8013c5e:	3710      	adds	r7, #16
 8013c60:	46bd      	mov	sp, r7
 8013c62:	bd80      	pop	{r7, pc}

08013c64 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	4618      	mov	r0, r3
 8013c70:	f000 f874 	bl	8013d5c <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 8013c74:	4603      	mov	r3, r0
 8013c76:	4618      	mov	r0, r3
 8013c78:	3708      	adds	r7, #8
 8013c7a:	46bd      	mov	sp, r7
 8013c7c:	bd80      	pop	{r7, pc}

08013c7e <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013c7e:	b480      	push	{r7}
 8013c80:	b083      	sub	sp, #12
 8013c82:	af00      	add	r7, sp, #0
 8013c84:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	4618      	mov	r0, r3
 8013c8a:	370c      	adds	r7, #12
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c92:	4770      	bx	lr

08013c94 <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8013c94:	b580      	push	{r7, lr}
 8013c96:	b082      	sub	sp, #8
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f000 f868 	bl	8013d74 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	4618      	mov	r0, r3
 8013ca8:	3708      	adds	r7, #8
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}

08013cae <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013cae:	b580      	push	{r7, lr}
 8013cb0:	b084      	sub	sp, #16
 8013cb2:	af00      	add	r7, sp, #0
 8013cb4:	60f8      	str	r0, [r7, #12]
 8013cb6:	60b9      	str	r1, [r7, #8]
 8013cb8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013cba:	68f8      	ldr	r0, [r7, #12]
 8013cbc:	f000 f866 	bl	8013d8c <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>
 8013cc0:	4602      	mov	r2, r0
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	4293      	cmp	r3, r2
 8013cc6:	bf8c      	ite	hi
 8013cc8:	2301      	movhi	r3, #1
 8013cca:	2300      	movls	r3, #0
 8013ccc:	b2db      	uxtb	r3, r3
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d001      	beq.n	8013cd6 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013cd2:	f00c ff04 	bl	8020ade <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013cd6:	68bb      	ldr	r3, [r7, #8]
 8013cd8:	009b      	lsls	r3, r3, #2
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f00c fe38 	bl	8020950 <_Znwj>
 8013ce0:	4603      	mov	r3, r0
 8013ce2:	bf00      	nop
      }
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	3710      	adds	r7, #16
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	bd80      	pop	{r7, pc}

08013cec <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>:
    __niter_base(_Iterator __it)
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	370c      	adds	r7, #12
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr

08013d02 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013d02:	b580      	push	{r7, lr}
 8013d04:	b086      	sub	sp, #24
 8013d06:	af00      	add	r7, sp, #0
 8013d08:	60f8      	str	r0, [r7, #12]
 8013d0a:	60b9      	str	r1, [r7, #8]
 8013d0c:	607a      	str	r2, [r7, #4]
 8013d0e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013d10:	68ba      	ldr	r2, [r7, #8]
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	1ad3      	subs	r3, r2, r3
 8013d16:	109b      	asrs	r3, r3, #2
 8013d18:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013d1a:	697b      	ldr	r3, [r7, #20]
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	dd06      	ble.n	8013d2e <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013d20:	697b      	ldr	r3, [r7, #20]
 8013d22:	009b      	lsls	r3, r3, #2
 8013d24:	461a      	mov	r2, r3
 8013d26:	68f9      	ldr	r1, [r7, #12]
 8013d28:	6878      	ldr	r0, [r7, #4]
 8013d2a:	f00c ff4b 	bl	8020bc4 <memmove>
      return __result + __count;
 8013d2e:	697b      	ldr	r3, [r7, #20]
 8013d30:	009b      	lsls	r3, r3, #2
 8013d32:	687a      	ldr	r2, [r7, #4]
 8013d34:	4413      	add	r3, r2
    }
 8013d36:	4618      	mov	r0, r3
 8013d38:	3718      	adds	r7, #24
 8013d3a:	46bd      	mov	sp, r7
 8013d3c:	bd80      	pop	{r7, pc}
	...

08013d40 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013d40:	b480      	push	{r7}
 8013d42:	b083      	sub	sp, #12
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013d48:	4b03      	ldr	r3, [pc, #12]	; (8013d58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv+0x18>)
      }
 8013d4a:	4618      	mov	r0, r3
 8013d4c:	370c      	adds	r7, #12
 8013d4e:	46bd      	mov	sp, r7
 8013d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d54:	4770      	bx	lr
 8013d56:	bf00      	nop
 8013d58:	05555555 	.word	0x05555555

08013d5c <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013d5c:	b480      	push	{r7}
 8013d5e:	b083      	sub	sp, #12
 8013d60:	af00      	add	r7, sp, #0
 8013d62:	6078      	str	r0, [r7, #4]
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	4618      	mov	r0, r3
 8013d6a:	370c      	adds	r7, #12
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d72:	4770      	bx	lr

08013d74 <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013d74:	b580      	push	{r7, lr}
 8013d76:	b082      	sub	sp, #8
 8013d78:	af00      	add	r7, sp, #0
 8013d7a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f7ff ff71 	bl	8013c64 <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8013d82:	4603      	mov	r3, r0
 8013d84:	4618      	mov	r0, r3
 8013d86:	3708      	adds	r7, #8
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013d8c:	b480      	push	{r7}
 8013d8e:	b083      	sub	sp, #12
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013d94:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013d98:	4618      	mov	r0, r3
 8013d9a:	370c      	adds	r7, #12
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da2:	4770      	bx	lr

08013da4 <_ZN6StreamD1Ev>:
class Stream {
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b082      	sub	sp, #8
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	3308      	adds	r3, #8
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7fc f9a5 	bl	8010100 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	4618      	mov	r0, r3
 8013dba:	3708      	adds	r7, #8
 8013dbc:	46bd      	mov	sp, r7
 8013dbe:	bd80      	pop	{r7, pc}

08013dc0 <_ZN6PacketD1Ev>:
class Packet {
 8013dc0:	b580      	push	{r7, lr}
 8013dc2:	b082      	sub	sp, #8
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	3308      	adds	r3, #8
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7fc ff26 	bl	8010c1e <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3708      	adds	r7, #8
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd80      	pop	{r7, pc}

08013ddc <_ZN5TimerD1Ev>:
class Timer {
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b082      	sub	sp, #8
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	3308      	adds	r3, #8
 8013de8:	4618      	mov	r0, r3
 8013dea:	f7f9 fc93 	bl	800d714 <_ZNSt8functionIFvvEED1Ev>
 8013dee:	687b      	ldr	r3, [r7, #4]
 8013df0:	4618      	mov	r0, r3
 8013df2:	3708      	adds	r7, #8
 8013df4:	46bd      	mov	sp, r7
 8013df6:	bd80      	pop	{r7, pc}

08013df8 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8013df8:	b580      	push	{r7, lr}
 8013dfa:	b084      	sub	sp, #16
 8013dfc:	af02      	add	r7, sp, #8
 8013dfe:	6078      	str	r0, [r7, #4]
 8013e00:	6039      	str	r1, [r7, #0]
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2b01      	cmp	r3, #1
 8013e06:	f040 8148 	bne.w	801409a <_Z41__static_initialization_and_destruction_0ii+0x2a2>
 8013e0a:	683b      	ldr	r3, [r7, #0]
 8013e0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013e10:	4293      	cmp	r3, r2
 8013e12:	f040 8142 	bne.w	801409a <_Z41__static_initialization_and_destruction_0ii+0x2a2>
InputCapture ic_PB4	(&htim3, TIM_CHANNEL_1, &PB4);
 8013e16:	4bac      	ldr	r3, [pc, #688]	; (80140c8 <_Z41__static_initialization_and_destruction_0ii+0x2d0>)
 8013e18:	2200      	movs	r2, #0
 8013e1a:	49ac      	ldr	r1, [pc, #688]	; (80140cc <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8013e1c:	48ac      	ldr	r0, [pc, #688]	; (80140d0 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013e1e:	f7f5 fb1b 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, &PD12);
 8013e22:	4bac      	ldr	r3, [pc, #688]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8013e24:	2200      	movs	r2, #0
 8013e26:	49ac      	ldr	r1, [pc, #688]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8013e28:	48ac      	ldr	r0, [pc, #688]	; (80140dc <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8013e2a:	f7f5 fb15 	bl	8009458 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
DigitalIn digital_in_PC1(&PC1);
 8013e2e:	49ac      	ldr	r1, [pc, #688]	; (80140e0 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8013e30:	48ac      	ldr	r0, [pc, #688]	; (80140e4 <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013e32:	f7f2 fb91 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC2(&PC2);
 8013e36:	49ac      	ldr	r1, [pc, #688]	; (80140e8 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8013e38:	48ac      	ldr	r0, [pc, #688]	; (80140ec <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8013e3a:	f7f2 fb8d 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC3(&PC3);
 8013e3e:	49ac      	ldr	r1, [pc, #688]	; (80140f0 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8013e40:	48ac      	ldr	r0, [pc, #688]	; (80140f4 <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8013e42:	f7f2 fb89 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
AnalogIn analog_in_PA6(&hadc1, &htim6, &PA6);
 8013e46:	4bac      	ldr	r3, [pc, #688]	; (80140f8 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8013e48:	4aac      	ldr	r2, [pc, #688]	; (80140fc <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8013e4a:	49ad      	ldr	r1, [pc, #692]	; (8014100 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8013e4c:	48ad      	ldr	r0, [pc, #692]	; (8014104 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8013e4e:	f7ec fb4d 	bl	80004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>
AnalogOut analog_out_PF1 (3.3, &htim23, TIM_CHANNEL_2, &PF1);
 8013e52:	4bad      	ldr	r3, [pc, #692]	; (8014108 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8013e54:	2204      	movs	r2, #4
 8013e56:	49ad      	ldr	r1, [pc, #692]	; (801410c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8013e58:	ed9f 0aad 	vldr	s0, [pc, #692]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013e5c:	48ad      	ldr	r0, [pc, #692]	; (8014114 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8013e5e:	f7ef f997 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF0 (3.3, &htim23, TIM_CHANNEL_1, &PF0);
 8013e62:	4bad      	ldr	r3, [pc, #692]	; (8014118 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013e64:	2200      	movs	r2, #0
 8013e66:	49a9      	ldr	r1, [pc, #676]	; (801410c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8013e68:	ed9f 0aa9 	vldr	s0, [pc, #676]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013e6c:	48ab      	ldr	r0, [pc, #684]	; (801411c <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8013e6e:	f7ef f98f 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA0 (3.3, &htim5, 	TIM_CHANNEL_1, &PA0);
 8013e72:	4bab      	ldr	r3, [pc, #684]	; (8014120 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8013e74:	2200      	movs	r2, #0
 8013e76:	49ab      	ldr	r1, [pc, #684]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013e78:	ed9f 0aa5 	vldr	s0, [pc, #660]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013e7c:	48aa      	ldr	r0, [pc, #680]	; (8014128 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8013e7e:	f7ef f987 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA2 (3.3, &htim5, 	TIM_CHANNEL_3, &PA2);
 8013e82:	4baa      	ldr	r3, [pc, #680]	; (801412c <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8013e84:	2208      	movs	r2, #8
 8013e86:	49a7      	ldr	r1, [pc, #668]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013e88:	ed9f 0aa1 	vldr	s0, [pc, #644]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013e8c:	48a8      	ldr	r0, [pc, #672]	; (8014130 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8013e8e:	f7ef f97f 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA3 (3.3, &htim5, 	TIM_CHANNEL_4, &PA3);
 8013e92:	4ba8      	ldr	r3, [pc, #672]	; (8014134 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8013e94:	220c      	movs	r2, #12
 8013e96:	49a3      	ldr	r1, [pc, #652]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013e98:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013e9c:	48a6      	ldr	r0, [pc, #664]	; (8014138 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8013e9e:	f7ef f977 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC7 (3.3, &htim8, 	TIM_CHANNEL_2, &PC7);
 8013ea2:	4ba6      	ldr	r3, [pc, #664]	; (801413c <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8013ea4:	2204      	movs	r2, #4
 8013ea6:	49a6      	ldr	r1, [pc, #664]	; (8014140 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8013ea8:	ed9f 0a99 	vldr	s0, [pc, #612]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013eac:	48a5      	ldr	r0, [pc, #660]	; (8014144 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8013eae:	f7ef f96f 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC6 (3.3, &htim8, 	TIM_CHANNEL_1, &PC6);
 8013eb2:	4ba5      	ldr	r3, [pc, #660]	; (8014148 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	49a2      	ldr	r1, [pc, #648]	; (8014140 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8013eb8:	ed9f 0a95 	vldr	s0, [pc, #596]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013ebc:	48a3      	ldr	r0, [pc, #652]	; (801414c <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8013ebe:	f7ef f967 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC8 (3.3, &htim8, 	TIM_CHANNEL_3, &PC8);
 8013ec2:	4ba3      	ldr	r3, [pc, #652]	; (8014150 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8013ec4:	2208      	movs	r2, #8
 8013ec6:	499e      	ldr	r1, [pc, #632]	; (8014140 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8013ec8:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013ecc:	48a1      	ldr	r0, [pc, #644]	; (8014154 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8013ece:	f7ef f95f 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC9 (3.3, &htim8, 	TIM_CHANNEL_4, &PC9);
 8013ed2:	4ba1      	ldr	r3, [pc, #644]	; (8014158 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8013ed4:	220c      	movs	r2, #12
 8013ed6:	499a      	ldr	r1, [pc, #616]	; (8014140 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8013ed8:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013edc:	489f      	ldr	r0, [pc, #636]	; (801415c <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8013ede:	f7ef f957 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF2 (3.3, &htim23, TIM_CHANNEL_3, &PF2);
 8013ee2:	4b9f      	ldr	r3, [pc, #636]	; (8014160 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8013ee4:	2208      	movs	r2, #8
 8013ee6:	4989      	ldr	r1, [pc, #548]	; (801410c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8013ee8:	ed9f 0a89 	vldr	s0, [pc, #548]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013eec:	489d      	ldr	r0, [pc, #628]	; (8014164 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8013eee:	f7ef f94f 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, &PF13);
 8013ef2:	4b9d      	ldr	r3, [pc, #628]	; (8014168 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8013ef4:	2208      	movs	r2, #8
 8013ef6:	499d      	ldr	r1, [pc, #628]	; (801416c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8013ef8:	ed9f 0a85 	vldr	s0, [pc, #532]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013efc:	489c      	ldr	r0, [pc, #624]	; (8014170 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8013efe:	f7ef f947 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, &PF12);
 8013f02:	4b9c      	ldr	r3, [pc, #624]	; (8014174 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8013f04:	2204      	movs	r2, #4
 8013f06:	4999      	ldr	r1, [pc, #612]	; (801416c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8013f08:	ed9f 0a81 	vldr	s0, [pc, #516]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013f0c:	489a      	ldr	r0, [pc, #616]	; (8014178 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8013f0e:	f7ef f93f 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, &PB14);
 8013f12:	4b9a      	ldr	r3, [pc, #616]	; (801417c <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013f14:	2200      	movs	r2, #0
 8013f16:	499a      	ldr	r1, [pc, #616]	; (8014180 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8013f18:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013f1c:	4899      	ldr	r0, [pc, #612]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013f1e:	f7ef f937 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, &PF14);
 8013f22:	4b99      	ldr	r3, [pc, #612]	; (8014188 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8013f24:	220c      	movs	r2, #12
 8013f26:	4991      	ldr	r1, [pc, #580]	; (801416c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8013f28:	ed9f 0a79 	vldr	s0, [pc, #484]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013f2c:	4897      	ldr	r0, [pc, #604]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013f2e:	f7ef f92f 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF3 (3.3, &htim23, TIM_CHANNEL_4, &PF3);
 8013f32:	4b97      	ldr	r3, [pc, #604]	; (8014190 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8013f34:	220c      	movs	r2, #12
 8013f36:	4975      	ldr	r1, [pc, #468]	; (801410c <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8013f38:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013f3c:	4895      	ldr	r0, [pc, #596]	; (8014194 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013f3e:	f7ef f927 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, &PF11);
 8013f42:	4b95      	ldr	r3, [pc, #596]	; (8014198 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 8013f44:	2200      	movs	r2, #0
 8013f46:	4989      	ldr	r1, [pc, #548]	; (801416c <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8013f48:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8014110 <_Z41__static_initialization_and_destruction_0ii+0x318>
 8013f4c:	4893      	ldr	r0, [pc, #588]	; (801419c <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8013f4e:	f7ef f91f 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
DigitalOut digital_out_PC10(&PC10);
 8013f52:	4993      	ldr	r1, [pc, #588]	; (80141a0 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8013f54:	4893      	ldr	r0, [pc, #588]	; (80141a4 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8013f56:	f7f3 fead 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC11(&PC11);
 8013f5a:	4993      	ldr	r1, [pc, #588]	; (80141a8 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013f5c:	4893      	ldr	r0, [pc, #588]	; (80141ac <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013f5e:	f7f3 fea9 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC12(&PC12);
 8013f62:	4993      	ldr	r1, [pc, #588]	; (80141b0 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8013f64:	4893      	ldr	r0, [pc, #588]	; (80141b4 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8013f66:	f7f3 fea5 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC13(&PC13);
 8013f6a:	4993      	ldr	r1, [pc, #588]	; (80141b8 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8013f6c:	4893      	ldr	r0, [pc, #588]	; (80141bc <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8013f6e:	f7f3 fea1 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC14(&PC14);
 8013f72:	4993      	ldr	r1, [pc, #588]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8013f74:	4893      	ldr	r0, [pc, #588]	; (80141c4 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8013f76:	f7f3 fe9d 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC15(&PC15);
 8013f7a:	4993      	ldr	r1, [pc, #588]	; (80141c8 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8013f7c:	4893      	ldr	r0, [pc, #588]	; (80141cc <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8013f7e:	f7f3 fe99 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF6 (&PF6);
 8013f82:	4993      	ldr	r1, [pc, #588]	; (80141d0 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8013f84:	4893      	ldr	r0, [pc, #588]	; (80141d4 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8013f86:	f7f3 fe95 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF7 (&PF7);
 8013f8a:	4993      	ldr	r1, [pc, #588]	; (80141d8 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8013f8c:	4893      	ldr	r0, [pc, #588]	; (80141dc <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8013f8e:	f7f3 fe91 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB7 (&PB7);
 8013f92:	4993      	ldr	r1, [pc, #588]	; (80141e0 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8013f94:	4893      	ldr	r0, [pc, #588]	; (80141e4 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8013f96:	f7f3 fe8d 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB9 (&PB9);
 8013f9a:	4993      	ldr	r1, [pc, #588]	; (80141e8 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8013f9c:	4893      	ldr	r0, [pc, #588]	; (80141ec <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013f9e:	f7f3 fe89 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PD8 (&PD8);
 8013fa2:	4993      	ldr	r1, [pc, #588]	; (80141f0 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8013fa4:	4893      	ldr	r0, [pc, #588]	; (80141f4 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8013fa6:	f7f3 fe85 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
Timer timer_7(&htim7);
 8013faa:	4993      	ldr	r1, [pc, #588]	; (80141f8 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8013fac:	4893      	ldr	r0, [pc, #588]	; (80141fc <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8013fae:	f7f9 fbbf 	bl	800d730 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_13(&htim13);
 8013fb2:	4993      	ldr	r1, [pc, #588]	; (8014200 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8013fb4:	4893      	ldr	r0, [pc, #588]	; (8014204 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8013fb6:	f7f9 fbbb 	bl	800d730 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_14(&htim14);
 8013fba:	4993      	ldr	r1, [pc, #588]	; (8014208 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8013fbc:	4893      	ldr	r0, [pc, #588]	; (801420c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8013fbe:	f7f9 fbb7 	bl	800d730 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_15(&htim15);
 8013fc2:	4993      	ldr	r1, [pc, #588]	; (8014210 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8013fc4:	4893      	ldr	r0, [pc, #588]	; (8014214 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8013fc6:	f7f9 fbb3 	bl	800d730 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_16(&htim16);
 8013fca:	4993      	ldr	r1, [pc, #588]	; (8014218 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8013fcc:	4893      	ldr	r0, [pc, #588]	; (801421c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8013fce:	f7f9 fbaf 	bl	800d730 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_17(&htim17);
 8013fd2:	4993      	ldr	r1, [pc, #588]	; (8014220 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8013fd4:	4893      	ldr	r0, [pc, #588]	; (8014224 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8013fd6:	f7f9 fbab 	bl	800d730 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Can main_can(&hfdcan1);
 8013fda:	4993      	ldr	r1, [pc, #588]	; (8014228 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8013fdc:	4893      	ldr	r0, [pc, #588]	; (801422c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8013fde:	f7f0 fdd3 	bl	8004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 8013fe2:	4b93      	ldr	r3, [pc, #588]	; (8014230 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8013fe4:	4a93      	ldr	r2, [pc, #588]	; (8014234 <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8013fe6:	2151      	movs	r1, #81	; 0x51
 8013fe8:	4893      	ldr	r0, [pc, #588]	; (8014238 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8013fea:	f7fc f985 	bl	80102f8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 8013fee:	4b90      	ldr	r3, [pc, #576]	; (8014230 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8013ff0:	4a92      	ldr	r2, [pc, #584]	; (801423c <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8013ff2:	2152      	movs	r1, #82	; 0x52
 8013ff4:	4892      	ldr	r0, [pc, #584]	; (8014240 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8013ff6:	f7fc f97f 	bl	80102f8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 8013ffa:	4b8d      	ldr	r3, [pc, #564]	; (8014230 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8013ffc:	4a91      	ldr	r2, [pc, #580]	; (8014244 <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8013ffe:	2153      	movs	r1, #83	; 0x53
 8014000:	4891      	ldr	r0, [pc, #580]	; (8014248 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8014002:	f7fc f979 	bl	80102f8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 8014006:	4b91      	ldr	r3, [pc, #580]	; (801424c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8014008:	9300      	str	r3, [sp, #0]
 801400a:	4b91      	ldr	r3, [pc, #580]	; (8014250 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 801400c:	4a91      	ldr	r2, [pc, #580]	; (8014254 <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 801400e:	2154      	movs	r1, #84	; 0x54
 8014010:	4891      	ldr	r0, [pc, #580]	; (8014258 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8014012:	f7fc f99b 	bl	801034c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 8014016:	4b8d      	ldr	r3, [pc, #564]	; (801424c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8014018:	9300      	str	r3, [sp, #0]
 801401a:	4b8d      	ldr	r3, [pc, #564]	; (8014250 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 801401c:	4a8f      	ldr	r2, [pc, #572]	; (801425c <_Z41__static_initialization_and_destruction_0ii+0x464>)
 801401e:	2155      	movs	r1, #85	; 0x55
 8014020:	488f      	ldr	r0, [pc, #572]	; (8014260 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 8014022:	f7fc f993 	bl	801034c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 8014026:	4b89      	ldr	r3, [pc, #548]	; (801424c <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8014028:	9300      	str	r3, [sp, #0]
 801402a:	4b89      	ldr	r3, [pc, #548]	; (8014250 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 801402c:	4a8d      	ldr	r2, [pc, #564]	; (8014264 <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 801402e:	2156      	movs	r1, #86	; 0x56
 8014030:	488d      	ldr	r0, [pc, #564]	; (8014268 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8014032:	f7fc f98b 	bl	801034c <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 8014036:	4b8d      	ldr	r3, [pc, #564]	; (801426c <_Z41__static_initialization_and_destruction_0ii+0x474>)
 8014038:	9300      	str	r3, [sp, #0]
 801403a:	4b8d      	ldr	r3, [pc, #564]	; (8014270 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 801403c:	4a8d      	ldr	r2, [pc, #564]	; (8014274 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 801403e:	2158      	movs	r1, #88	; 0x58
 8014040:	488d      	ldr	r0, [pc, #564]	; (8014278 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 8014042:	f7fc f9af 	bl	80103a4 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 8014046:	4b89      	ldr	r3, [pc, #548]	; (801426c <_Z41__static_initialization_and_destruction_0ii+0x474>)
 8014048:	9300      	str	r3, [sp, #0]
 801404a:	4b89      	ldr	r3, [pc, #548]	; (8014270 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 801404c:	4a89      	ldr	r2, [pc, #548]	; (8014274 <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 801404e:	2157      	movs	r1, #87	; 0x57
 8014050:	488a      	ldr	r0, [pc, #552]	; (801427c <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8014052:	f7fc f9a7 	bl	80103a4 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 8014056:	4b8a      	ldr	r3, [pc, #552]	; (8014280 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8014058:	9300      	str	r3, [sp, #0]
 801405a:	4b8a      	ldr	r3, [pc, #552]	; (8014284 <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 801405c:	4a8a      	ldr	r2, [pc, #552]	; (8014288 <_Z41__static_initialization_and_destruction_0ii+0x490>)
 801405e:	210a      	movs	r1, #10
 8014060:	488a      	ldr	r0, [pc, #552]	; (801428c <_Z41__static_initialization_and_destruction_0ii+0x494>)
 8014062:	f7fc f9cb 	bl	80103fc <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 8014066:	4b8a      	ldr	r3, [pc, #552]	; (8014290 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8014068:	4a8a      	ldr	r2, [pc, #552]	; (8014294 <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 801406a:	2159      	movs	r1, #89	; 0x59
 801406c:	488a      	ldr	r0, [pc, #552]	; (8014298 <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 801406e:	f7fc f943 	bl	80102f8 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Stream stream1(&timer_14, &main_can);
 8014072:	4a6e      	ldr	r2, [pc, #440]	; (801422c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8014074:	4965      	ldr	r1, [pc, #404]	; (801420c <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8014076:	4889      	ldr	r0, [pc, #548]	; (801429c <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 8014078:	f7f9 fee2 	bl	800de40 <_ZN6StreamC1EP5TimerP3Can>
Stream stream2(&timer_15, &main_can);
 801407c:	4a6b      	ldr	r2, [pc, #428]	; (801422c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 801407e:	4965      	ldr	r1, [pc, #404]	; (8014214 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8014080:	4887      	ldr	r0, [pc, #540]	; (80142a0 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 8014082:	f7f9 fedd 	bl	800de40 <_ZN6StreamC1EP5TimerP3Can>
Stream stream3(&timer_16, &main_can);
 8014086:	4a69      	ldr	r2, [pc, #420]	; (801422c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8014088:	4964      	ldr	r1, [pc, #400]	; (801421c <_Z41__static_initialization_and_destruction_0ii+0x424>)
 801408a:	4886      	ldr	r0, [pc, #536]	; (80142a4 <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 801408c:	f7f9 fed8 	bl	800de40 <_ZN6StreamC1EP5TimerP3Can>
Stream stream4(&timer_17, &main_can);
 8014090:	4a66      	ldr	r2, [pc, #408]	; (801422c <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8014092:	4964      	ldr	r1, [pc, #400]	; (8014224 <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8014094:	4884      	ldr	r0, [pc, #528]	; (80142a8 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 8014096:	f7f9 fed3 	bl	800de40 <_ZN6StreamC1EP5TimerP3Can>
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	2b00      	cmp	r3, #0
 801409e:	f040 8135 	bne.w	801430c <_Z41__static_initialization_and_destruction_0ii+0x514>
 80140a2:	683b      	ldr	r3, [r7, #0]
 80140a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140a8:	4293      	cmp	r3, r2
 80140aa:	f040 812f 	bne.w	801430c <_Z41__static_initialization_and_destruction_0ii+0x514>
 80140ae:	487e      	ldr	r0, [pc, #504]	; (80142a8 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 80140b0:	f7ff fe78 	bl	8013da4 <_ZN6StreamD1Ev>
Stream stream3(&timer_16, &main_can);
 80140b4:	487b      	ldr	r0, [pc, #492]	; (80142a4 <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 80140b6:	f7ff fe75 	bl	8013da4 <_ZN6StreamD1Ev>
Stream stream2(&timer_15, &main_can);
 80140ba:	4879      	ldr	r0, [pc, #484]	; (80142a0 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 80140bc:	f7ff fe72 	bl	8013da4 <_ZN6StreamD1Ev>
Stream stream1(&timer_14, &main_can);
 80140c0:	4876      	ldr	r0, [pc, #472]	; (801429c <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 80140c2:	f7ff fe6f 	bl	8013da4 <_ZN6StreamD1Ev>
 80140c6:	e0f1      	b.n	80142ac <_Z41__static_initialization_and_destruction_0ii+0x4b4>
 80140c8:	24000298 	.word	0x24000298
 80140cc:	24000dd8 	.word	0x24000dd8
 80140d0:	240004f8 	.word	0x240004f8
 80140d4:	240003d8 	.word	0x240003d8
 80140d8:	24000e24 	.word	0x24000e24
 80140dc:	240005bc 	.word	0x240005bc
 80140e0:	24000300 	.word	0x24000300
 80140e4:	24000680 	.word	0x24000680
 80140e8:	24000308 	.word	0x24000308
 80140ec:	2400068c 	.word	0x2400068c
 80140f0:	24000310 	.word	0x24000310
 80140f4:	24000698 	.word	0x24000698
 80140f8:	24000228 	.word	0x24000228
 80140fc:	24000ebc 	.word	0x24000ebc
 8014100:	24000bb8 	.word	0x24000bb8
 8014104:	240006a4 	.word	0x240006a4
 8014108:	24000480 	.word	0x24000480
 801410c:	24001168 	.word	0x24001168
 8014110:	40533333 	.word	0x40533333
 8014114:	240006bc 	.word	0x240006bc
 8014118:	24000478 	.word	0x24000478
 801411c:	240006d4 	.word	0x240006d4
 8014120:	240001f8 	.word	0x240001f8
 8014124:	24000e70 	.word	0x24000e70
 8014128:	240006ec 	.word	0x240006ec
 801412c:	24000208 	.word	0x24000208
 8014130:	24000704 	.word	0x24000704
 8014134:	24000210 	.word	0x24000210
 8014138:	2400071c 	.word	0x2400071c
 801413c:	24000330 	.word	0x24000330
 8014140:	24000f54 	.word	0x24000f54
 8014144:	24000734 	.word	0x24000734
 8014148:	24000328 	.word	0x24000328
 801414c:	2400074c 	.word	0x2400074c
 8014150:	24000338 	.word	0x24000338
 8014154:	24000764 	.word	0x24000764
 8014158:	24000340 	.word	0x24000340
 801415c:	2400077c 	.word	0x2400077c
 8014160:	24000488 	.word	0x24000488
 8014164:	24000794 	.word	0x24000794
 8014168:	240004e0 	.word	0x240004e0
 801416c:	240011b4 	.word	0x240011b4
 8014170:	240007ac 	.word	0x240007ac
 8014174:	240004d8 	.word	0x240004d8
 8014178:	240007c4 	.word	0x240007c4
 801417c:	240002e8 	.word	0x240002e8
 8014180:	24000fa0 	.word	0x24000fa0
 8014184:	240007dc 	.word	0x240007dc
 8014188:	240004e8 	.word	0x240004e8
 801418c:	240007f4 	.word	0x240007f4
 8014190:	24000490 	.word	0x24000490
 8014194:	2400080c 	.word	0x2400080c
 8014198:	240004d0 	.word	0x240004d0
 801419c:	24000824 	.word	0x24000824
 80141a0:	24000348 	.word	0x24000348
 80141a4:	2400083c 	.word	0x2400083c
 80141a8:	24000350 	.word	0x24000350
 80141ac:	24000844 	.word	0x24000844
 80141b0:	24000358 	.word	0x24000358
 80141b4:	2400084c 	.word	0x2400084c
 80141b8:	24000360 	.word	0x24000360
 80141bc:	24000854 	.word	0x24000854
 80141c0:	24000368 	.word	0x24000368
 80141c4:	2400085c 	.word	0x2400085c
 80141c8:	24000370 	.word	0x24000370
 80141cc:	24000864 	.word	0x24000864
 80141d0:	240004a8 	.word	0x240004a8
 80141d4:	2400086c 	.word	0x2400086c
 80141d8:	240004b0 	.word	0x240004b0
 80141dc:	24000874 	.word	0x24000874
 80141e0:	240002b0 	.word	0x240002b0
 80141e4:	2400087c 	.word	0x2400087c
 80141e8:	240002c0 	.word	0x240002c0
 80141ec:	24000884 	.word	0x24000884
 80141f0:	240003b8 	.word	0x240003b8
 80141f4:	2400088c 	.word	0x2400088c
 80141f8:	24000f08 	.word	0x24000f08
 80141fc:	24000894 	.word	0x24000894
 8014200:	24000fec 	.word	0x24000fec
 8014204:	240008b4 	.word	0x240008b4
 8014208:	24001038 	.word	0x24001038
 801420c:	240008d4 	.word	0x240008d4
 8014210:	24001084 	.word	0x24001084
 8014214:	240008f4 	.word	0x240008f4
 8014218:	240010d0 	.word	0x240010d0
 801421c:	24000914 	.word	0x24000914
 8014220:	2400111c 	.word	0x2400111c
 8014224:	24000934 	.word	0x24000934
 8014228:	24000ca0 	.word	0x24000ca0
 801422c:	24000954 	.word	0x24000954
 8014230:	24000a24 	.word	0x24000a24
 8014234:	0800e36d 	.word	0x0800e36d
 8014238:	24000a34 	.word	0x24000a34
 801423c:	0800e2a5 	.word	0x0800e2a5
 8014240:	24000a4c 	.word	0x24000a4c
 8014244:	0800e309 	.word	0x0800e309
 8014248:	24000a64 	.word	0x24000a64
 801424c:	24000a2e 	.word	0x24000a2e
 8014250:	24000a2c 	.word	0x24000a2c
 8014254:	0800e3e5 	.word	0x0800e3e5
 8014258:	24000a7c 	.word	0x24000a7c
 801425c:	0800e435 	.word	0x0800e435
 8014260:	24000a94 	.word	0x24000a94
 8014264:	0800e485 	.word	0x0800e485
 8014268:	24000aac 	.word	0x24000aac
 801426c:	24000a28 	.word	0x24000a28
 8014270:	24000a25 	.word	0x24000a25
 8014274:	0800e4d5 	.word	0x0800e4d5
 8014278:	24000ac4 	.word	0x24000ac4
 801427c:	24000adc 	.word	0x24000adc
 8014280:	24000a32 	.word	0x24000a32
 8014284:	24000a31 	.word	0x24000a31
 8014288:	0800e5e9 	.word	0x0800e5e9
 801428c:	24000af4 	.word	0x24000af4
 8014290:	24000a30 	.word	0x24000a30
 8014294:	0800e5a9 	.word	0x0800e5a9
 8014298:	24000b0c 	.word	0x24000b0c
 801429c:	24000b24 	.word	0x24000b24
 80142a0:	24000b48 	.word	0x24000b48
 80142a4:	24000b6c 	.word	0x24000b6c
 80142a8:	24000b90 	.word	0x24000b90
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 80142ac:	4819      	ldr	r0, [pc, #100]	; (8014314 <_Z41__static_initialization_and_destruction_0ii+0x51c>)
 80142ae:	f7ff fd87 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 80142b2:	4819      	ldr	r0, [pc, #100]	; (8014318 <_Z41__static_initialization_and_destruction_0ii+0x520>)
 80142b4:	f7ff fd84 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 80142b8:	4818      	ldr	r0, [pc, #96]	; (801431c <_Z41__static_initialization_and_destruction_0ii+0x524>)
 80142ba:	f7ff fd81 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 80142be:	4818      	ldr	r0, [pc, #96]	; (8014320 <_Z41__static_initialization_and_destruction_0ii+0x528>)
 80142c0:	f7ff fd7e 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 80142c4:	4817      	ldr	r0, [pc, #92]	; (8014324 <_Z41__static_initialization_and_destruction_0ii+0x52c>)
 80142c6:	f7ff fd7b 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 80142ca:	4817      	ldr	r0, [pc, #92]	; (8014328 <_Z41__static_initialization_and_destruction_0ii+0x530>)
 80142cc:	f7ff fd78 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 80142d0:	4816      	ldr	r0, [pc, #88]	; (801432c <_Z41__static_initialization_and_destruction_0ii+0x534>)
 80142d2:	f7ff fd75 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 80142d6:	4816      	ldr	r0, [pc, #88]	; (8014330 <_Z41__static_initialization_and_destruction_0ii+0x538>)
 80142d8:	f7ff fd72 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 80142dc:	4815      	ldr	r0, [pc, #84]	; (8014334 <_Z41__static_initialization_and_destruction_0ii+0x53c>)
 80142de:	f7ff fd6f 	bl	8013dc0 <_ZN6PacketD1Ev>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 80142e2:	4815      	ldr	r0, [pc, #84]	; (8014338 <_Z41__static_initialization_and_destruction_0ii+0x540>)
 80142e4:	f7ff fd6c 	bl	8013dc0 <_ZN6PacketD1Ev>
Timer timer_17(&htim17);
 80142e8:	4814      	ldr	r0, [pc, #80]	; (801433c <_Z41__static_initialization_and_destruction_0ii+0x544>)
 80142ea:	f7ff fd77 	bl	8013ddc <_ZN5TimerD1Ev>
Timer timer_16(&htim16);
 80142ee:	4814      	ldr	r0, [pc, #80]	; (8014340 <_Z41__static_initialization_and_destruction_0ii+0x548>)
 80142f0:	f7ff fd74 	bl	8013ddc <_ZN5TimerD1Ev>
Timer timer_15(&htim15);
 80142f4:	4813      	ldr	r0, [pc, #76]	; (8014344 <_Z41__static_initialization_and_destruction_0ii+0x54c>)
 80142f6:	f7ff fd71 	bl	8013ddc <_ZN5TimerD1Ev>
Timer timer_14(&htim14);
 80142fa:	4813      	ldr	r0, [pc, #76]	; (8014348 <_Z41__static_initialization_and_destruction_0ii+0x550>)
 80142fc:	f7ff fd6e 	bl	8013ddc <_ZN5TimerD1Ev>
Timer timer_13(&htim13);
 8014300:	4812      	ldr	r0, [pc, #72]	; (801434c <_Z41__static_initialization_and_destruction_0ii+0x554>)
 8014302:	f7ff fd6b 	bl	8013ddc <_ZN5TimerD1Ev>
Timer timer_7(&htim7);
 8014306:	4812      	ldr	r0, [pc, #72]	; (8014350 <_Z41__static_initialization_and_destruction_0ii+0x558>)
 8014308:	f7ff fd68 	bl	8013ddc <_ZN5TimerD1Ev>
 801430c:	bf00      	nop
 801430e:	3708      	adds	r7, #8
 8014310:	46bd      	mov	sp, r7
 8014312:	bd80      	pop	{r7, pc}
 8014314:	24000b0c 	.word	0x24000b0c
 8014318:	24000af4 	.word	0x24000af4
 801431c:	24000adc 	.word	0x24000adc
 8014320:	24000ac4 	.word	0x24000ac4
 8014324:	24000aac 	.word	0x24000aac
 8014328:	24000a94 	.word	0x24000a94
 801432c:	24000a7c 	.word	0x24000a7c
 8014330:	24000a64 	.word	0x24000a64
 8014334:	24000a4c 	.word	0x24000a4c
 8014338:	24000a34 	.word	0x24000a34
 801433c:	24000934 	.word	0x24000934
 8014340:	24000914 	.word	0x24000914
 8014344:	240008f4 	.word	0x240008f4
 8014348:	240008d4 	.word	0x240008d4
 801434c:	240008b4 	.word	0x240008b4
 8014350:	24000894 	.word	0x24000894

08014354 <_ZN5FieldIJmEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014354:	b480      	push	{r7}
 8014356:	b083      	sub	sp, #12
 8014358:	af00      	add	r7, sp, #0
 801435a:	6078      	str	r0, [r7, #4]
 801435c:	6039      	str	r1, [r7, #0]
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	685b      	ldr	r3, [r3, #4]
 8014362:	683a      	ldr	r2, [r7, #0]
 8014364:	6812      	ldr	r2, [r2, #0]
 8014366:	601a      	str	r2, [r3, #0]
 8014368:	bf00      	nop
 801436a:	370c      	adds	r7, #12
 801436c:	46bd      	mov	sp, r7
 801436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014372:	4770      	bx	lr

08014374 <_ZN5FieldIJmEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014374:	b480      	push	{r7}
 8014376:	b083      	sub	sp, #12
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
 801437c:	6039      	str	r1, [r7, #0]
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	685b      	ldr	r3, [r3, #4]
 8014382:	681a      	ldr	r2, [r3, #0]
 8014384:	683b      	ldr	r3, [r7, #0]
 8014386:	601a      	str	r2, [r3, #0]
 8014388:	bf00      	nop
 801438a:	370c      	adds	r7, #12
 801438c:	46bd      	mov	sp, r7
 801438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014392:	4770      	bx	lr

08014394 <_ZN5FieldIJmEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014394:	b480      	push	{r7}
 8014396:	b083      	sub	sp, #12
 8014398:	af00      	add	r7, sp, #0
 801439a:	6078      	str	r0, [r7, #4]
 801439c:	2304      	movs	r3, #4
 801439e:	4618      	mov	r0, r3
 80143a0:	370c      	adds	r7, #12
 80143a2:	46bd      	mov	sp, r7
 80143a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143a8:	4770      	bx	lr

080143aa <_ZN5FieldIJtEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 80143aa:	b480      	push	{r7}
 80143ac:	b083      	sub	sp, #12
 80143ae:	af00      	add	r7, sp, #0
 80143b0:	6078      	str	r0, [r7, #4]
 80143b2:	6039      	str	r1, [r7, #0]
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	685b      	ldr	r3, [r3, #4]
 80143b8:	683a      	ldr	r2, [r7, #0]
 80143ba:	8812      	ldrh	r2, [r2, #0]
 80143bc:	801a      	strh	r2, [r3, #0]
 80143be:	bf00      	nop
 80143c0:	370c      	adds	r7, #12
 80143c2:	46bd      	mov	sp, r7
 80143c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143c8:	4770      	bx	lr

080143ca <_ZN5FieldIJtEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 80143ca:	b480      	push	{r7}
 80143cc:	b083      	sub	sp, #12
 80143ce:	af00      	add	r7, sp, #0
 80143d0:	6078      	str	r0, [r7, #4]
 80143d2:	6039      	str	r1, [r7, #0]
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	685b      	ldr	r3, [r3, #4]
 80143d8:	881a      	ldrh	r2, [r3, #0]
 80143da:	683b      	ldr	r3, [r7, #0]
 80143dc:	801a      	strh	r2, [r3, #0]
 80143de:	bf00      	nop
 80143e0:	370c      	adds	r7, #12
 80143e2:	46bd      	mov	sp, r7
 80143e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e8:	4770      	bx	lr

080143ea <_ZN5FieldIJtEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 80143ea:	b480      	push	{r7}
 80143ec:	b083      	sub	sp, #12
 80143ee:	af00      	add	r7, sp, #0
 80143f0:	6078      	str	r0, [r7, #4]
 80143f2:	2302      	movs	r3, #2
 80143f4:	4618      	mov	r0, r3
 80143f6:	370c      	adds	r7, #12
 80143f8:	46bd      	mov	sp, r7
 80143fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143fe:	4770      	bx	lr

08014400 <_ZN5FieldIJhEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014400:	b480      	push	{r7}
 8014402:	b083      	sub	sp, #12
 8014404:	af00      	add	r7, sp, #0
 8014406:	6078      	str	r0, [r7, #4]
 8014408:	6039      	str	r1, [r7, #0]
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	683a      	ldr	r2, [r7, #0]
 8014410:	7812      	ldrb	r2, [r2, #0]
 8014412:	701a      	strb	r2, [r3, #0]
 8014414:	bf00      	nop
 8014416:	370c      	adds	r7, #12
 8014418:	46bd      	mov	sp, r7
 801441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801441e:	4770      	bx	lr

08014420 <_ZN5FieldIJhEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014420:	b480      	push	{r7}
 8014422:	b083      	sub	sp, #12
 8014424:	af00      	add	r7, sp, #0
 8014426:	6078      	str	r0, [r7, #4]
 8014428:	6039      	str	r1, [r7, #0]
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	685b      	ldr	r3, [r3, #4]
 801442e:	781a      	ldrb	r2, [r3, #0]
 8014430:	683b      	ldr	r3, [r7, #0]
 8014432:	701a      	strb	r2, [r3, #0]
 8014434:	bf00      	nop
 8014436:	370c      	adds	r7, #12
 8014438:	46bd      	mov	sp, r7
 801443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801443e:	4770      	bx	lr

08014440 <_ZN5FieldIJhEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014440:	b480      	push	{r7}
 8014442:	b083      	sub	sp, #12
 8014444:	af00      	add	r7, sp, #0
 8014446:	6078      	str	r0, [r7, #4]
 8014448:	2301      	movs	r3, #1
 801444a:	4618      	mov	r0, r3
 801444c:	370c      	adds	r7, #12
 801444e:	46bd      	mov	sp, r7
 8014450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014454:	4770      	bx	lr

08014456 <_GLOBAL__sub_I_data_adc_1>:
 8014456:	b580      	push	{r7, lr}
 8014458:	af00      	add	r7, sp, #0
 801445a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801445e:	2001      	movs	r0, #1
 8014460:	f7ff fcca 	bl	8013df8 <_Z41__static_initialization_and_destruction_0ii>
 8014464:	bd80      	pop	{r7, pc}

08014466 <_GLOBAL__sub_D_data_adc_1>:
 8014466:	b580      	push	{r7, lr}
 8014468:	af00      	add	r7, sp, #0
 801446a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801446e:	2000      	movs	r0, #0
 8014470:	f7ff fcc2 	bl	8013df8 <_Z41__static_initialization_and_destruction_0ii>
 8014474:	bd80      	pop	{r7, pc}
	...

08014478 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8014478:	b580      	push	{r7, lr}
 801447a:	b082      	sub	sp, #8
 801447c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801447e:	4b1b      	ldr	r3, [pc, #108]	; (80144ec <HAL_MspInit+0x74>)
 8014480:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014484:	4a19      	ldr	r2, [pc, #100]	; (80144ec <HAL_MspInit+0x74>)
 8014486:	f043 0302 	orr.w	r3, r3, #2
 801448a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801448e:	4b17      	ldr	r3, [pc, #92]	; (80144ec <HAL_MspInit+0x74>)
 8014490:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8014494:	f003 0302 	and.w	r3, r3, #2
 8014498:	607b      	str	r3, [r7, #4]
 801449a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 801449c:	2200      	movs	r2, #0
 801449e:	2101      	movs	r1, #1
 80144a0:	f06f 000b 	mvn.w	r0, #11
 80144a4:	f003 f883 	bl	80175ae <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 80144a8:	2200      	movs	r2, #0
 80144aa:	2101      	movs	r1, #1
 80144ac:	f06f 000a 	mvn.w	r0, #10
 80144b0:	f003 f87d 	bl	80175ae <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 80144b4:	2200      	movs	r2, #0
 80144b6:	2101      	movs	r1, #1
 80144b8:	f06f 0009 	mvn.w	r0, #9
 80144bc:	f003 f877 	bl	80175ae <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 80144c0:	2200      	movs	r2, #0
 80144c2:	2101      	movs	r1, #1
 80144c4:	f06f 0004 	mvn.w	r0, #4
 80144c8:	f003 f871 	bl	80175ae <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 80144cc:	2200      	movs	r2, #0
 80144ce:	2101      	movs	r1, #1
 80144d0:	f06f 0003 	mvn.w	r0, #3
 80144d4:	f003 f86b 	bl	80175ae <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 80144d8:	2200      	movs	r2, #0
 80144da:	2101      	movs	r1, #1
 80144dc:	f06f 0001 	mvn.w	r0, #1
 80144e0:	f003 f865 	bl	80175ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80144e4:	bf00      	nop
 80144e6:	3708      	adds	r7, #8
 80144e8:	46bd      	mov	sp, r7
 80144ea:	bd80      	pop	{r7, pc}
 80144ec:	58024400 	.word	0x58024400

080144f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80144f0:	b580      	push	{r7, lr}
 80144f2:	b08a      	sub	sp, #40	; 0x28
 80144f4:	af00      	add	r7, sp, #0
 80144f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80144f8:	f107 0314 	add.w	r3, r7, #20
 80144fc:	2200      	movs	r2, #0
 80144fe:	601a      	str	r2, [r3, #0]
 8014500:	605a      	str	r2, [r3, #4]
 8014502:	609a      	str	r2, [r3, #8]
 8014504:	60da      	str	r2, [r3, #12]
 8014506:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8014508:	687b      	ldr	r3, [r7, #4]
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	4a34      	ldr	r2, [pc, #208]	; (80145e0 <HAL_ADC_MspInit+0xf0>)
 801450e:	4293      	cmp	r3, r2
 8014510:	d161      	bne.n	80145d6 <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8014512:	4b34      	ldr	r3, [pc, #208]	; (80145e4 <HAL_ADC_MspInit+0xf4>)
 8014514:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014518:	4a32      	ldr	r2, [pc, #200]	; (80145e4 <HAL_ADC_MspInit+0xf4>)
 801451a:	f043 0320 	orr.w	r3, r3, #32
 801451e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8014522:	4b30      	ldr	r3, [pc, #192]	; (80145e4 <HAL_ADC_MspInit+0xf4>)
 8014524:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014528:	f003 0320 	and.w	r3, r3, #32
 801452c:	613b      	str	r3, [r7, #16]
 801452e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014530:	4b2c      	ldr	r3, [pc, #176]	; (80145e4 <HAL_ADC_MspInit+0xf4>)
 8014532:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014536:	4a2b      	ldr	r2, [pc, #172]	; (80145e4 <HAL_ADC_MspInit+0xf4>)
 8014538:	f043 0301 	orr.w	r3, r3, #1
 801453c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014540:	4b28      	ldr	r3, [pc, #160]	; (80145e4 <HAL_ADC_MspInit+0xf4>)
 8014542:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014546:	f003 0301 	and.w	r3, r3, #1
 801454a:	60fb      	str	r3, [r7, #12]
 801454c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 801454e:	2340      	movs	r3, #64	; 0x40
 8014550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8014552:	2303      	movs	r3, #3
 8014554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014556:	2300      	movs	r3, #0
 8014558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801455a:	f107 0314 	add.w	r3, r7, #20
 801455e:	4619      	mov	r1, r3
 8014560:	4821      	ldr	r0, [pc, #132]	; (80145e8 <HAL_ADC_MspInit+0xf8>)
 8014562:	f006 fa8d 	bl	801aa80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 8014566:	4b21      	ldr	r3, [pc, #132]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 8014568:	4a21      	ldr	r2, [pc, #132]	; (80145f0 <HAL_ADC_MspInit+0x100>)
 801456a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 801456c:	4b1f      	ldr	r3, [pc, #124]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 801456e:	2209      	movs	r2, #9
 8014570:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8014572:	4b1e      	ldr	r3, [pc, #120]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 8014574:	2200      	movs	r2, #0
 8014576:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8014578:	4b1c      	ldr	r3, [pc, #112]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 801457a:	2200      	movs	r2, #0
 801457c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 801457e:	4b1b      	ldr	r3, [pc, #108]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 8014580:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014584:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8014586:	4b19      	ldr	r3, [pc, #100]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 8014588:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801458c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 801458e:	4b17      	ldr	r3, [pc, #92]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 8014590:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014594:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8014596:	4b15      	ldr	r3, [pc, #84]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 8014598:	f44f 7280 	mov.w	r2, #256	; 0x100
 801459c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 801459e:	4b13      	ldr	r3, [pc, #76]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 80145a0:	2200      	movs	r2, #0
 80145a2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80145a4:	4b11      	ldr	r3, [pc, #68]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 80145a6:	2200      	movs	r2, #0
 80145a8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80145aa:	4810      	ldr	r0, [pc, #64]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 80145ac:	f003 f838 	bl	8017620 <HAL_DMA_Init>
 80145b0:	4603      	mov	r3, r0
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d001      	beq.n	80145ba <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 80145b6:	f7fb fc75 	bl	800fea4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	4a0b      	ldr	r2, [pc, #44]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 80145be:	659a      	str	r2, [r3, #88]	; 0x58
 80145c0:	4a0a      	ldr	r2, [pc, #40]	; (80145ec <HAL_ADC_MspInit+0xfc>)
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 80145c6:	2200      	movs	r2, #0
 80145c8:	2101      	movs	r1, #1
 80145ca:	2012      	movs	r0, #18
 80145cc:	f002 ffef 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80145d0:	2012      	movs	r0, #18
 80145d2:	f003 f806 	bl	80175e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80145d6:	bf00      	nop
 80145d8:	3728      	adds	r7, #40	; 0x28
 80145da:	46bd      	mov	sp, r7
 80145dc:	bd80      	pop	{r7, pc}
 80145de:	bf00      	nop
 80145e0:	40022000 	.word	0x40022000
 80145e4:	58024400 	.word	0x58024400
 80145e8:	58020000 	.word	0x58020000
 80145ec:	24000c28 	.word	0x24000c28
 80145f0:	40020028 	.word	0x40020028

080145f4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80145f4:	b580      	push	{r7, lr}
 80145f6:	b08a      	sub	sp, #40	; 0x28
 80145f8:	af00      	add	r7, sp, #0
 80145fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80145fc:	f107 0314 	add.w	r3, r7, #20
 8014600:	2200      	movs	r2, #0
 8014602:	601a      	str	r2, [r3, #0]
 8014604:	605a      	str	r2, [r3, #4]
 8014606:	609a      	str	r2, [r3, #8]
 8014608:	60da      	str	r2, [r3, #12]
 801460a:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a22      	ldr	r2, [pc, #136]	; (801469c <HAL_FDCAN_MspInit+0xa8>)
 8014612:	4293      	cmp	r3, r2
 8014614:	d13e      	bne.n	8014694 <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8014616:	4b22      	ldr	r3, [pc, #136]	; (80146a0 <HAL_FDCAN_MspInit+0xac>)
 8014618:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801461c:	4a20      	ldr	r2, [pc, #128]	; (80146a0 <HAL_FDCAN_MspInit+0xac>)
 801461e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014622:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014626:	4b1e      	ldr	r3, [pc, #120]	; (80146a0 <HAL_FDCAN_MspInit+0xac>)
 8014628:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 801462c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014630:	613b      	str	r3, [r7, #16]
 8014632:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014634:	4b1a      	ldr	r3, [pc, #104]	; (80146a0 <HAL_FDCAN_MspInit+0xac>)
 8014636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801463a:	4a19      	ldr	r2, [pc, #100]	; (80146a0 <HAL_FDCAN_MspInit+0xac>)
 801463c:	f043 0301 	orr.w	r3, r3, #1
 8014640:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014644:	4b16      	ldr	r3, [pc, #88]	; (80146a0 <HAL_FDCAN_MspInit+0xac>)
 8014646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801464a:	f003 0301 	and.w	r3, r3, #1
 801464e:	60fb      	str	r3, [r7, #12]
 8014650:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8014652:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8014656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014658:	2302      	movs	r3, #2
 801465a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801465c:	2300      	movs	r3, #0
 801465e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014660:	2300      	movs	r3, #0
 8014662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8014664:	2309      	movs	r3, #9
 8014666:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014668:	f107 0314 	add.w	r3, r7, #20
 801466c:	4619      	mov	r1, r3
 801466e:	480d      	ldr	r0, [pc, #52]	; (80146a4 <HAL_FDCAN_MspInit+0xb0>)
 8014670:	f006 fa06 	bl	801aa80 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 8014674:	2200      	movs	r2, #0
 8014676:	2101      	movs	r1, #1
 8014678:	2013      	movs	r0, #19
 801467a:	f002 ff98 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 801467e:	2013      	movs	r0, #19
 8014680:	f002 ffaf 	bl	80175e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 1, 0);
 8014684:	2200      	movs	r2, #0
 8014686:	2101      	movs	r1, #1
 8014688:	2015      	movs	r0, #21
 801468a:	f002 ff90 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 801468e:	2015      	movs	r0, #21
 8014690:	f002 ffa7 	bl	80175e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8014694:	bf00      	nop
 8014696:	3728      	adds	r7, #40	; 0x28
 8014698:	46bd      	mov	sp, r7
 801469a:	bd80      	pop	{r7, pc}
 801469c:	4000a000 	.word	0x4000a000
 80146a0:	58024400 	.word	0x58024400
 80146a4:	58020000 	.word	0x58020000

080146a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b09c      	sub	sp, #112	; 0x70
 80146ac:	af00      	add	r7, sp, #0
 80146ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80146b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80146b4:	2200      	movs	r2, #0
 80146b6:	601a      	str	r2, [r3, #0]
 80146b8:	605a      	str	r2, [r3, #4]
 80146ba:	609a      	str	r2, [r3, #8]
 80146bc:	60da      	str	r2, [r3, #12]
 80146be:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80146c0:	687b      	ldr	r3, [r7, #4]
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	4ab3      	ldr	r2, [pc, #716]	; (8014994 <HAL_TIM_Base_MspInit+0x2ec>)
 80146c6:	4293      	cmp	r3, r2
 80146c8:	d137      	bne.n	801473a <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80146ca:	4bb3      	ldr	r3, [pc, #716]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80146cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80146d0:	4ab1      	ldr	r2, [pc, #708]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80146d2:	f043 0301 	orr.w	r3, r3, #1
 80146d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80146da:	4baf      	ldr	r3, [pc, #700]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80146dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80146e0:	f003 0301 	and.w	r3, r3, #1
 80146e4:	65bb      	str	r3, [r7, #88]	; 0x58
 80146e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80146e8:	4bab      	ldr	r3, [pc, #684]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80146ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80146ee:	4aaa      	ldr	r2, [pc, #680]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80146f0:	f043 0310 	orr.w	r3, r3, #16
 80146f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80146f8:	4ba7      	ldr	r3, [pc, #668]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80146fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80146fe:	f003 0310 	and.w	r3, r3, #16
 8014702:	657b      	str	r3, [r7, #84]	; 0x54
 8014704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8014706:	f44f 7300 	mov.w	r3, #512	; 0x200
 801470a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801470c:	2302      	movs	r3, #2
 801470e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014710:	2300      	movs	r3, #0
 8014712:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014714:	2300      	movs	r3, #0
 8014716:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8014718:	2301      	movs	r3, #1
 801471a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 801471c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014720:	4619      	mov	r1, r3
 8014722:	489e      	ldr	r0, [pc, #632]	; (801499c <HAL_TIM_Base_MspInit+0x2f4>)
 8014724:	f006 f9ac 	bl	801aa80 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8014728:	2200      	movs	r2, #0
 801472a:	2101      	movs	r1, #1
 801472c:	201b      	movs	r0, #27
 801472e:	f002 ff3e 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8014732:	201b      	movs	r0, #27
 8014734:	f002 ff55 	bl	80175e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8014738:	e23e      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM2)
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014742:	d156      	bne.n	80147f2 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8014744:	4b94      	ldr	r3, [pc, #592]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014746:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801474a:	4a93      	ldr	r2, [pc, #588]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801474c:	f043 0301 	orr.w	r3, r3, #1
 8014750:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014754:	4b90      	ldr	r3, [pc, #576]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014756:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801475a:	f003 0301 	and.w	r3, r3, #1
 801475e:	653b      	str	r3, [r7, #80]	; 0x50
 8014760:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014762:	4b8d      	ldr	r3, [pc, #564]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014764:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014768:	4a8b      	ldr	r2, [pc, #556]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801476a:	f043 0301 	orr.w	r3, r3, #1
 801476e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014772:	4b89      	ldr	r3, [pc, #548]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014778:	f003 0301 	and.w	r3, r3, #1
 801477c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801477e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014780:	4b85      	ldr	r3, [pc, #532]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014786:	4a84      	ldr	r2, [pc, #528]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014788:	f043 0302 	orr.w	r3, r3, #2
 801478c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014790:	4b81      	ldr	r3, [pc, #516]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014796:	f003 0302 	and.w	r3, r3, #2
 801479a:	64bb      	str	r3, [r7, #72]	; 0x48
 801479c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pin = SENSOR_3V_1A5_Pin;
 801479e:	2320      	movs	r3, #32
 80147a0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147a2:	2302      	movs	r3, #2
 80147a4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80147a6:	2302      	movs	r3, #2
 80147a8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147aa:	2300      	movs	r3, #0
 80147ac:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80147ae:	2301      	movs	r3, #1
 80147b0:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SENSOR_3V_1A5_GPIO_Port, &GPIO_InitStruct);
 80147b2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80147b6:	4619      	mov	r1, r3
 80147b8:	4879      	ldr	r0, [pc, #484]	; (80149a0 <HAL_TIM_Base_MspInit+0x2f8>)
 80147ba:	f006 f961 	bl	801aa80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_5_Pin|SENSOR_3V_8_Pin;
 80147be:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80147c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147c4:	2302      	movs	r3, #2
 80147c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147c8:	2300      	movs	r3, #0
 80147ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80147cc:	2300      	movs	r3, #0
 80147ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80147d0:	2301      	movs	r3, #1
 80147d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80147d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80147d8:	4619      	mov	r1, r3
 80147da:	4872      	ldr	r0, [pc, #456]	; (80149a4 <HAL_TIM_Base_MspInit+0x2fc>)
 80147dc:	f006 f950 	bl	801aa80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80147e0:	2200      	movs	r2, #0
 80147e2:	2100      	movs	r1, #0
 80147e4:	201c      	movs	r0, #28
 80147e6:	f002 fee2 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80147ea:	201c      	movs	r0, #28
 80147ec:	f002 fef9 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 80147f0:	e1e2      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM3)
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	4a6c      	ldr	r2, [pc, #432]	; (80149a8 <HAL_TIM_Base_MspInit+0x300>)
 80147f8:	4293      	cmp	r3, r2
 80147fa:	d136      	bne.n	801486a <HAL_TIM_Base_MspInit+0x1c2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80147fc:	4b66      	ldr	r3, [pc, #408]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80147fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014802:	4a65      	ldr	r2, [pc, #404]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014804:	f043 0302 	orr.w	r3, r3, #2
 8014808:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 801480c:	4b62      	ldr	r3, [pc, #392]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801480e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014812:	f003 0302 	and.w	r3, r3, #2
 8014816:	647b      	str	r3, [r7, #68]	; 0x44
 8014818:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801481a:	4b5f      	ldr	r3, [pc, #380]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801481c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014820:	4a5d      	ldr	r2, [pc, #372]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014822:	f043 0302 	orr.w	r3, r3, #2
 8014826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801482a:	4b5b      	ldr	r3, [pc, #364]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801482c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014830:	f003 0302 	and.w	r3, r3, #2
 8014834:	643b      	str	r3, [r7, #64]	; 0x40
 8014836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8014838:	2310      	movs	r3, #16
 801483a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801483c:	2302      	movs	r3, #2
 801483e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014840:	2302      	movs	r3, #2
 8014842:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014844:	2300      	movs	r3, #0
 8014846:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8014848:	2302      	movs	r3, #2
 801484a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801484c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014850:	4619      	mov	r1, r3
 8014852:	4854      	ldr	r0, [pc, #336]	; (80149a4 <HAL_TIM_Base_MspInit+0x2fc>)
 8014854:	f006 f914 	bl	801aa80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8014858:	2200      	movs	r2, #0
 801485a:	2101      	movs	r1, #1
 801485c:	201d      	movs	r0, #29
 801485e:	f002 fea6 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8014862:	201d      	movs	r0, #29
 8014864:	f002 febd 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014868:	e1a6      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM4)
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	4a4f      	ldr	r2, [pc, #316]	; (80149ac <HAL_TIM_Base_MspInit+0x304>)
 8014870:	4293      	cmp	r3, r2
 8014872:	d137      	bne.n	80148e4 <HAL_TIM_Base_MspInit+0x23c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8014874:	4b48      	ldr	r3, [pc, #288]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801487a:	4a47      	ldr	r2, [pc, #284]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801487c:	f043 0304 	orr.w	r3, r3, #4
 8014880:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014884:	4b44      	ldr	r3, [pc, #272]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801488a:	f003 0304 	and.w	r3, r3, #4
 801488e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014892:	4b41      	ldr	r3, [pc, #260]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014898:	4a3f      	ldr	r2, [pc, #252]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801489a:	f043 0308 	orr.w	r3, r3, #8
 801489e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80148a2:	4b3d      	ldr	r3, [pc, #244]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80148a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80148a8:	f003 0308 	and.w	r3, r3, #8
 80148ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80148ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = PWM_5V_6_Pin|PWM_5V_10_Pin|PWM_5V_11_Pin;
 80148b0:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 80148b4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148b6:	2302      	movs	r3, #2
 80148b8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80148ba:	2300      	movs	r3, #0
 80148bc:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148be:	2300      	movs	r3, #0
 80148c0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80148c2:	2302      	movs	r3, #2
 80148c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80148c6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148ca:	4619      	mov	r1, r3
 80148cc:	4838      	ldr	r0, [pc, #224]	; (80149b0 <HAL_TIM_Base_MspInit+0x308>)
 80148ce:	f006 f8d7 	bl	801aa80 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 80148d2:	2200      	movs	r2, #0
 80148d4:	2101      	movs	r1, #1
 80148d6:	201e      	movs	r0, #30
 80148d8:	f002 fe69 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80148dc:	201e      	movs	r0, #30
 80148de:	f002 fe80 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 80148e2:	e169      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM5)
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	4a32      	ldr	r2, [pc, #200]	; (80149b4 <HAL_TIM_Base_MspInit+0x30c>)
 80148ea:	4293      	cmp	r3, r2
 80148ec:	d117      	bne.n	801491e <HAL_TIM_Base_MspInit+0x276>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80148ee:	4b2a      	ldr	r3, [pc, #168]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80148f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80148f4:	4a28      	ldr	r2, [pc, #160]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 80148f6:	f043 0308 	orr.w	r3, r3, #8
 80148fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80148fe:	4b26      	ldr	r3, [pc, #152]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014900:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014904:	f003 0308 	and.w	r3, r3, #8
 8014908:	637b      	str	r3, [r7, #52]	; 0x34
 801490a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 801490c:	2200      	movs	r2, #0
 801490e:	2101      	movs	r1, #1
 8014910:	2032      	movs	r0, #50	; 0x32
 8014912:	f002 fe4c 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8014916:	2032      	movs	r0, #50	; 0x32
 8014918:	f002 fe63 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 801491c:	e14c      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM6)
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	4a25      	ldr	r2, [pc, #148]	; (80149b8 <HAL_TIM_Base_MspInit+0x310>)
 8014924:	4293      	cmp	r3, r2
 8014926:	d117      	bne.n	8014958 <HAL_TIM_Base_MspInit+0x2b0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8014928:	4b1b      	ldr	r3, [pc, #108]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801492a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801492e:	4a1a      	ldr	r2, [pc, #104]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014930:	f043 0310 	orr.w	r3, r3, #16
 8014934:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014938:	4b17      	ldr	r3, [pc, #92]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801493a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801493e:	f003 0310 	and.w	r3, r3, #16
 8014942:	633b      	str	r3, [r7, #48]	; 0x30
 8014944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8014946:	2200      	movs	r2, #0
 8014948:	2101      	movs	r1, #1
 801494a:	2036      	movs	r0, #54	; 0x36
 801494c:	f002 fe2f 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8014950:	2036      	movs	r0, #54	; 0x36
 8014952:	f002 fe46 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014956:	e12f      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM7)
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681b      	ldr	r3, [r3, #0]
 801495c:	4a17      	ldr	r2, [pc, #92]	; (80149bc <HAL_TIM_Base_MspInit+0x314>)
 801495e:	4293      	cmp	r3, r2
 8014960:	d12e      	bne.n	80149c0 <HAL_TIM_Base_MspInit+0x318>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8014962:	4b0d      	ldr	r3, [pc, #52]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014964:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014968:	4a0b      	ldr	r2, [pc, #44]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 801496a:	f043 0320 	orr.w	r3, r3, #32
 801496e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014972:	4b09      	ldr	r3, [pc, #36]	; (8014998 <HAL_TIM_Base_MspInit+0x2f0>)
 8014974:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014978:	f003 0320 	and.w	r3, r3, #32
 801497c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801497e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8014980:	2200      	movs	r2, #0
 8014982:	2101      	movs	r1, #1
 8014984:	2037      	movs	r0, #55	; 0x37
 8014986:	f002 fe12 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 801498a:	2037      	movs	r0, #55	; 0x37
 801498c:	f002 fe29 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014990:	e112      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
 8014992:	bf00      	nop
 8014994:	40010000 	.word	0x40010000
 8014998:	58024400 	.word	0x58024400
 801499c:	58021000 	.word	0x58021000
 80149a0:	58020000 	.word	0x58020000
 80149a4:	58020400 	.word	0x58020400
 80149a8:	40000400 	.word	0x40000400
 80149ac:	40000800 	.word	0x40000800
 80149b0:	58020c00 	.word	0x58020c00
 80149b4:	40000c00 	.word	0x40000c00
 80149b8:	40001000 	.word	0x40001000
 80149bc:	40001400 	.word	0x40001400
  else if(htim_base->Instance==TIM8)
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	4a7e      	ldr	r2, [pc, #504]	; (8014bc0 <HAL_TIM_Base_MspInit+0x518>)
 80149c6:	4293      	cmp	r3, r2
 80149c8:	d127      	bne.n	8014a1a <HAL_TIM_Base_MspInit+0x372>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80149ca:	4b7e      	ldr	r3, [pc, #504]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 80149cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80149d0:	4a7c      	ldr	r2, [pc, #496]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 80149d2:	f043 0302 	orr.w	r3, r3, #2
 80149d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80149da:	4b7a      	ldr	r3, [pc, #488]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 80149dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80149e0:	f003 0302 	and.w	r3, r3, #2
 80149e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80149e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 80149e8:	2200      	movs	r2, #0
 80149ea:	2101      	movs	r1, #1
 80149ec:	202c      	movs	r0, #44	; 0x2c
 80149ee:	f002 fdde 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80149f2:	202c      	movs	r0, #44	; 0x2c
 80149f4:	f002 fdf5 	bl	80175e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 80149f8:	2200      	movs	r2, #0
 80149fa:	2101      	movs	r1, #1
 80149fc:	202d      	movs	r0, #45	; 0x2d
 80149fe:	f002 fdd6 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014a02:	202d      	movs	r0, #45	; 0x2d
 8014a04:	f002 fded 	bl	80175e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8014a08:	2200      	movs	r2, #0
 8014a0a:	2101      	movs	r1, #1
 8014a0c:	202e      	movs	r0, #46	; 0x2e
 8014a0e:	f002 fdce 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8014a12:	202e      	movs	r0, #46	; 0x2e
 8014a14:	f002 fde5 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014a18:	e0ce      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM12)
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	4a6a      	ldr	r2, [pc, #424]	; (8014bc8 <HAL_TIM_Base_MspInit+0x520>)
 8014a20:	4293      	cmp	r3, r2
 8014a22:	d10f      	bne.n	8014a44 <HAL_TIM_Base_MspInit+0x39c>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8014a24:	4b67      	ldr	r3, [pc, #412]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a2a:	4a66      	ldr	r2, [pc, #408]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a34:	4b63      	ldr	r3, [pc, #396]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8014a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014a42:	e0b9      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM13)
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	4a60      	ldr	r2, [pc, #384]	; (8014bcc <HAL_TIM_Base_MspInit+0x524>)
 8014a4a:	4293      	cmp	r3, r2
 8014a4c:	d117      	bne.n	8014a7e <HAL_TIM_Base_MspInit+0x3d6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8014a4e:	4b5d      	ldr	r3, [pc, #372]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a54:	4a5b      	ldr	r2, [pc, #364]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a5e:	4b59      	ldr	r3, [pc, #356]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014a68:	623b      	str	r3, [r7, #32]
 8014a6a:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	2101      	movs	r1, #1
 8014a70:	202c      	movs	r0, #44	; 0x2c
 8014a72:	f002 fd9c 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014a76:	202c      	movs	r0, #44	; 0x2c
 8014a78:	f002 fdb3 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014a7c:	e09c      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM14)
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	4a53      	ldr	r2, [pc, #332]	; (8014bd0 <HAL_TIM_Base_MspInit+0x528>)
 8014a84:	4293      	cmp	r3, r2
 8014a86:	d117      	bne.n	8014ab8 <HAL_TIM_Base_MspInit+0x410>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8014a88:	4b4e      	ldr	r3, [pc, #312]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a8e:	4a4d      	ldr	r2, [pc, #308]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014a94:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a98:	4b4a      	ldr	r3, [pc, #296]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014a9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014aa2:	61fb      	str	r3, [r7, #28]
 8014aa4:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	2101      	movs	r1, #1
 8014aaa:	202d      	movs	r0, #45	; 0x2d
 8014aac:	f002 fd7f 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014ab0:	202d      	movs	r0, #45	; 0x2d
 8014ab2:	f002 fd96 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014ab6:	e07f      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM15)
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	4a45      	ldr	r2, [pc, #276]	; (8014bd4 <HAL_TIM_Base_MspInit+0x52c>)
 8014abe:	4293      	cmp	r3, r2
 8014ac0:	d117      	bne.n	8014af2 <HAL_TIM_Base_MspInit+0x44a>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8014ac2:	4b40      	ldr	r3, [pc, #256]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014ac4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014ac8:	4a3e      	ldr	r2, [pc, #248]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014aca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014ace:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014ad2:	4b3c      	ldr	r3, [pc, #240]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014ad4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014ad8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014adc:	61bb      	str	r3, [r7, #24]
 8014ade:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	2101      	movs	r1, #1
 8014ae4:	2074      	movs	r0, #116	; 0x74
 8014ae6:	f002 fd62 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8014aea:	2074      	movs	r0, #116	; 0x74
 8014aec:	f002 fd79 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014af0:	e062      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM16)
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	4a38      	ldr	r2, [pc, #224]	; (8014bd8 <HAL_TIM_Base_MspInit+0x530>)
 8014af8:	4293      	cmp	r3, r2
 8014afa:	d117      	bne.n	8014b2c <HAL_TIM_Base_MspInit+0x484>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8014afc:	4b31      	ldr	r3, [pc, #196]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014afe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b02:	4a30      	ldr	r2, [pc, #192]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014b08:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014b0c:	4b2d      	ldr	r3, [pc, #180]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b16:	617b      	str	r3, [r7, #20]
 8014b18:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8014b1a:	2200      	movs	r2, #0
 8014b1c:	2101      	movs	r1, #1
 8014b1e:	2075      	movs	r0, #117	; 0x75
 8014b20:	f002 fd45 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8014b24:	2075      	movs	r0, #117	; 0x75
 8014b26:	f002 fd5c 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014b2a:	e045      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM17)
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	681b      	ldr	r3, [r3, #0]
 8014b30:	4a2a      	ldr	r2, [pc, #168]	; (8014bdc <HAL_TIM_Base_MspInit+0x534>)
 8014b32:	4293      	cmp	r3, r2
 8014b34:	d117      	bne.n	8014b66 <HAL_TIM_Base_MspInit+0x4be>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8014b36:	4b23      	ldr	r3, [pc, #140]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b3c:	4a21      	ldr	r2, [pc, #132]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014b42:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014b46:	4b1f      	ldr	r3, [pc, #124]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014b50:	613b      	str	r3, [r7, #16]
 8014b52:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 8014b54:	2200      	movs	r2, #0
 8014b56:	2101      	movs	r1, #1
 8014b58:	2076      	movs	r0, #118	; 0x76
 8014b5a:	f002 fd28 	bl	80175ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8014b5e:	2076      	movs	r0, #118	; 0x76
 8014b60:	f002 fd3f 	bl	80175e2 <HAL_NVIC_EnableIRQ>
}
 8014b64:	e028      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM23)
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	4a1d      	ldr	r2, [pc, #116]	; (8014be0 <HAL_TIM_Base_MspInit+0x538>)
 8014b6c:	4293      	cmp	r3, r2
 8014b6e:	d10f      	bne.n	8014b90 <HAL_TIM_Base_MspInit+0x4e8>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8014b70:	4b14      	ldr	r3, [pc, #80]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b72:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014b76:	4a13      	ldr	r2, [pc, #76]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014b7c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014b80:	4b10      	ldr	r3, [pc, #64]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b82:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014b8a:	60fb      	str	r3, [r7, #12]
 8014b8c:	68fb      	ldr	r3, [r7, #12]
}
 8014b8e:	e013      	b.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
  else if(htim_base->Instance==TIM24)
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	4a13      	ldr	r2, [pc, #76]	; (8014be4 <HAL_TIM_Base_MspInit+0x53c>)
 8014b96:	4293      	cmp	r3, r2
 8014b98:	d10e      	bne.n	8014bb8 <HAL_TIM_Base_MspInit+0x510>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8014b9a:	4b0a      	ldr	r3, [pc, #40]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014b9c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014ba0:	4a08      	ldr	r2, [pc, #32]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014ba2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014ba6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014baa:	4b06      	ldr	r3, [pc, #24]	; (8014bc4 <HAL_TIM_Base_MspInit+0x51c>)
 8014bac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014bb4:	60bb      	str	r3, [r7, #8]
 8014bb6:	68bb      	ldr	r3, [r7, #8]
}
 8014bb8:	bf00      	nop
 8014bba:	3770      	adds	r7, #112	; 0x70
 8014bbc:	46bd      	mov	sp, r7
 8014bbe:	bd80      	pop	{r7, pc}
 8014bc0:	40010400 	.word	0x40010400
 8014bc4:	58024400 	.word	0x58024400
 8014bc8:	40001800 	.word	0x40001800
 8014bcc:	40001c00 	.word	0x40001c00
 8014bd0:	40002000 	.word	0x40002000
 8014bd4:	40014000 	.word	0x40014000
 8014bd8:	40014400 	.word	0x40014400
 8014bdc:	40014800 	.word	0x40014800
 8014be0:	4000e000 	.word	0x4000e000
 8014be4:	4000e400 	.word	0x4000e400

08014be8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b08c      	sub	sp, #48	; 0x30
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014bf0:	f107 031c 	add.w	r3, r7, #28
 8014bf4:	2200      	movs	r2, #0
 8014bf6:	601a      	str	r2, [r3, #0]
 8014bf8:	605a      	str	r2, [r3, #4]
 8014bfa:	609a      	str	r2, [r3, #8]
 8014bfc:	60da      	str	r2, [r3, #12]
 8014bfe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	4a66      	ldr	r2, [pc, #408]	; (8014da0 <HAL_TIM_MspPostInit+0x1b8>)
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d11f      	bne.n	8014c4a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014c0a:	4b66      	ldr	r3, [pc, #408]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c10:	4a64      	ldr	r2, [pc, #400]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014c12:	f043 0301 	orr.w	r3, r3, #1
 8014c16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014c1a:	4b62      	ldr	r3, [pc, #392]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c20:	f003 0301 	and.w	r3, r3, #1
 8014c24:	61bb      	str	r3, [r7, #24]
 8014c26:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8014c28:	230d      	movs	r3, #13
 8014c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c2c:	2302      	movs	r3, #2
 8014c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c30:	2300      	movs	r3, #0
 8014c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014c34:	2300      	movs	r3, #0
 8014c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8014c38:	2302      	movs	r3, #2
 8014c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014c3c:	f107 031c 	add.w	r3, r7, #28
 8014c40:	4619      	mov	r1, r3
 8014c42:	4859      	ldr	r0, [pc, #356]	; (8014da8 <HAL_TIM_MspPostInit+0x1c0>)
 8014c44:	f005 ff1c 	bl	801aa80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 8014c48:	e0a5      	b.n	8014d96 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM8)
 8014c4a:	687b      	ldr	r3, [r7, #4]
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	4a57      	ldr	r2, [pc, #348]	; (8014dac <HAL_TIM_MspPostInit+0x1c4>)
 8014c50:	4293      	cmp	r3, r2
 8014c52:	d130      	bne.n	8014cb6 <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014c54:	4b53      	ldr	r3, [pc, #332]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014c56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c5a:	4a52      	ldr	r2, [pc, #328]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014c5c:	f043 0304 	orr.w	r3, r3, #4
 8014c60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014c64:	4b4f      	ldr	r3, [pc, #316]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c6a:	f003 0304 	and.w	r3, r3, #4
 8014c6e:	617b      	str	r3, [r7, #20]
 8014c70:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014c72:	2340      	movs	r3, #64	; 0x40
 8014c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c76:	2302      	movs	r3, #2
 8014c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014c7a:	2302      	movs	r3, #2
 8014c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014c7e:	2300      	movs	r3, #0
 8014c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014c82:	2303      	movs	r3, #3
 8014c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014c86:	f107 031c 	add.w	r3, r7, #28
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	4848      	ldr	r0, [pc, #288]	; (8014db0 <HAL_TIM_MspPostInit+0x1c8>)
 8014c8e:	f005 fef7 	bl	801aa80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_6_Pin|SENSOR_3V_11_Pin|SENSOR_3V_5C9_Pin;
 8014c92:	f44f 7360 	mov.w	r3, #896	; 0x380
 8014c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014c98:	2302      	movs	r3, #2
 8014c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014ca4:	2303      	movs	r3, #3
 8014ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014ca8:	f107 031c 	add.w	r3, r7, #28
 8014cac:	4619      	mov	r1, r3
 8014cae:	4840      	ldr	r0, [pc, #256]	; (8014db0 <HAL_TIM_MspPostInit+0x1c8>)
 8014cb0:	f005 fee6 	bl	801aa80 <HAL_GPIO_Init>
}
 8014cb4:	e06f      	b.n	8014d96 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM12)
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	4a3e      	ldr	r2, [pc, #248]	; (8014db4 <HAL_TIM_MspPostInit+0x1cc>)
 8014cbc:	4293      	cmp	r3, r2
 8014cbe:	d120      	bne.n	8014d02 <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014cc0:	4b38      	ldr	r3, [pc, #224]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014cc6:	4a37      	ldr	r2, [pc, #220]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014cc8:	f043 0302 	orr.w	r3, r3, #2
 8014ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014cd0:	4b34      	ldr	r3, [pc, #208]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014cd6:	f003 0302 	and.w	r3, r3, #2
 8014cda:	613b      	str	r3, [r7, #16]
 8014cdc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENSOR_3V_14B14_Pin;
 8014cde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014ce2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ce4:	2302      	movs	r3, #2
 8014ce6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014cec:	2300      	movs	r3, #0
 8014cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8014cf0:	2302      	movs	r3, #2
 8014cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR_3V_14B14_GPIO_Port, &GPIO_InitStruct);
 8014cf4:	f107 031c 	add.w	r3, r7, #28
 8014cf8:	4619      	mov	r1, r3
 8014cfa:	482f      	ldr	r0, [pc, #188]	; (8014db8 <HAL_TIM_MspPostInit+0x1d0>)
 8014cfc:	f005 fec0 	bl	801aa80 <HAL_GPIO_Init>
}
 8014d00:	e049      	b.n	8014d96 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM23)
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	681b      	ldr	r3, [r3, #0]
 8014d06:	4a2d      	ldr	r2, [pc, #180]	; (8014dbc <HAL_TIM_MspPostInit+0x1d4>)
 8014d08:	4293      	cmp	r3, r2
 8014d0a:	d11f      	bne.n	8014d4c <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014d0c:	4b25      	ldr	r3, [pc, #148]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d12:	4a24      	ldr	r2, [pc, #144]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d14:	f043 0320 	orr.w	r3, r3, #32
 8014d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d1c:	4b21      	ldr	r3, [pc, #132]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d22:	f003 0320 	and.w	r3, r3, #32
 8014d26:	60fb      	str	r3, [r7, #12]
 8014d28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_3V_2_Pin|SENSOR_3V_1_Pin|SENSOR_3V_3_Pin|SENSOR_3V_15_Pin;
 8014d2a:	230f      	movs	r3, #15
 8014d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d2e:	2302      	movs	r3, #2
 8014d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d32:	2300      	movs	r3, #0
 8014d34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d36:	2300      	movs	r3, #0
 8014d38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8014d3a:	230d      	movs	r3, #13
 8014d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014d3e:	f107 031c 	add.w	r3, r7, #28
 8014d42:	4619      	mov	r1, r3
 8014d44:	481e      	ldr	r0, [pc, #120]	; (8014dc0 <HAL_TIM_MspPostInit+0x1d8>)
 8014d46:	f005 fe9b 	bl	801aa80 <HAL_GPIO_Init>
}
 8014d4a:	e024      	b.n	8014d96 <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM24)
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	681b      	ldr	r3, [r3, #0]
 8014d50:	4a1c      	ldr	r2, [pc, #112]	; (8014dc4 <HAL_TIM_MspPostInit+0x1dc>)
 8014d52:	4293      	cmp	r3, r2
 8014d54:	d11f      	bne.n	8014d96 <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014d56:	4b13      	ldr	r3, [pc, #76]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d5c:	4a11      	ldr	r2, [pc, #68]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d5e:	f043 0320 	orr.w	r3, r3, #32
 8014d62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d66:	4b0f      	ldr	r3, [pc, #60]	; (8014da4 <HAL_TIM_MspPostInit+0x1bc>)
 8014d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d6c:	f003 0320 	and.w	r3, r3, #32
 8014d70:	60bb      	str	r3, [r7, #8]
 8014d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENSOR_3V_16_Pin|SENSOR_3V_10_Pin|SENSOR_3V_9_Pin|SENSOR_3V_14_Pin;
 8014d74:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8014d78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d7a:	2302      	movs	r3, #2
 8014d7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d7e:	2300      	movs	r3, #0
 8014d80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d82:	2300      	movs	r3, #0
 8014d84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8014d86:	230e      	movs	r3, #14
 8014d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014d8a:	f107 031c 	add.w	r3, r7, #28
 8014d8e:	4619      	mov	r1, r3
 8014d90:	480b      	ldr	r0, [pc, #44]	; (8014dc0 <HAL_TIM_MspPostInit+0x1d8>)
 8014d92:	f005 fe75 	bl	801aa80 <HAL_GPIO_Init>
}
 8014d96:	bf00      	nop
 8014d98:	3730      	adds	r7, #48	; 0x30
 8014d9a:	46bd      	mov	sp, r7
 8014d9c:	bd80      	pop	{r7, pc}
 8014d9e:	bf00      	nop
 8014da0:	40000c00 	.word	0x40000c00
 8014da4:	58024400 	.word	0x58024400
 8014da8:	58020000 	.word	0x58020000
 8014dac:	40010400 	.word	0x40010400
 8014db0:	58020800 	.word	0x58020800
 8014db4:	40001800 	.word	0x40001800
 8014db8:	58020400 	.word	0x58020400
 8014dbc:	4000e000 	.word	0x4000e000
 8014dc0:	58021400 	.word	0x58021400
 8014dc4:	4000e400 	.word	0x4000e400

08014dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014dc8:	b480      	push	{r7}
 8014dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8014dcc:	e7fe      	b.n	8014dcc <NMI_Handler+0x4>

08014dce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014dce:	b480      	push	{r7}
 8014dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014dd2:	e7fe      	b.n	8014dd2 <HardFault_Handler+0x4>

08014dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014dd4:	b480      	push	{r7}
 8014dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014dd8:	e7fe      	b.n	8014dd8 <MemManage_Handler+0x4>

08014dda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014dda:	b480      	push	{r7}
 8014ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014dde:	e7fe      	b.n	8014dde <BusFault_Handler+0x4>

08014de0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014de0:	b480      	push	{r7}
 8014de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014de4:	e7fe      	b.n	8014de4 <UsageFault_Handler+0x4>

08014de6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014de6:	b480      	push	{r7}
 8014de8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014dea:	bf00      	nop
 8014dec:	46bd      	mov	sp, r7
 8014dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df2:	4770      	bx	lr

08014df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014df4:	b480      	push	{r7}
 8014df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014df8:	bf00      	nop
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e00:	4770      	bx	lr

08014e02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014e02:	b480      	push	{r7}
 8014e04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014e06:	bf00      	nop
 8014e08:	46bd      	mov	sp, r7
 8014e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e0e:	4770      	bx	lr

08014e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014e10:	b580      	push	{r7, lr}
 8014e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014e14:	f000 fa20 	bl	8015258 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014e18:	bf00      	nop
 8014e1a:	bd80      	pop	{r7, pc}

08014e1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8014e20:	4802      	ldr	r0, [pc, #8]	; (8014e2c <DMA1_Stream1_IRQHandler+0x10>)
 8014e22:	f003 f9c1 	bl	80181a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8014e26:	bf00      	nop
 8014e28:	bd80      	pop	{r7, pc}
 8014e2a:	bf00      	nop
 8014e2c:	24000c28 	.word	0x24000c28

08014e30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8014e30:	b580      	push	{r7, lr}
 8014e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8014e34:	4802      	ldr	r0, [pc, #8]	; (8014e40 <ADC_IRQHandler+0x10>)
 8014e36:	f000 ffff 	bl	8015e38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8014e3a:	bf00      	nop
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	24000bb8 	.word	0x24000bb8

08014e44 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8014e44:	b580      	push	{r7, lr}
 8014e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014e48:	4802      	ldr	r0, [pc, #8]	; (8014e54 <FDCAN1_IT0_IRQHandler+0x10>)
 8014e4a:	f005 f90b 	bl	801a064 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8014e4e:	bf00      	nop
 8014e50:	bd80      	pop	{r7, pc}
 8014e52:	bf00      	nop
 8014e54:	24000ca0 	.word	0x24000ca0

08014e58 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014e5c:	4802      	ldr	r0, [pc, #8]	; (8014e68 <FDCAN1_IT1_IRQHandler+0x10>)
 8014e5e:	f005 f901 	bl	801a064 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8014e62:	bf00      	nop
 8014e64:	bd80      	pop	{r7, pc}
 8014e66:	bf00      	nop
 8014e68:	24000ca0 	.word	0x24000ca0

08014e6c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8014e6c:	b580      	push	{r7, lr}
 8014e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014e70:	4802      	ldr	r0, [pc, #8]	; (8014e7c <TIM1_CC_IRQHandler+0x10>)
 8014e72:	f00a f943 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8014e76:	bf00      	nop
 8014e78:	bd80      	pop	{r7, pc}
 8014e7a:	bf00      	nop
 8014e7c:	24000d40 	.word	0x24000d40

08014e80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8014e80:	b580      	push	{r7, lr}
 8014e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8014e84:	4802      	ldr	r0, [pc, #8]	; (8014e90 <TIM2_IRQHandler+0x10>)
 8014e86:	f00a f939 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8014e8a:	bf00      	nop
 8014e8c:	bd80      	pop	{r7, pc}
 8014e8e:	bf00      	nop
 8014e90:	24000d8c 	.word	0x24000d8c

08014e94 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8014e98:	4802      	ldr	r0, [pc, #8]	; (8014ea4 <TIM3_IRQHandler+0x10>)
 8014e9a:	f00a f92f 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8014e9e:	bf00      	nop
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	24000dd8 	.word	0x24000dd8

08014ea8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014eac:	4802      	ldr	r0, [pc, #8]	; (8014eb8 <TIM4_IRQHandler+0x10>)
 8014eae:	f00a f925 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014eb2:	bf00      	nop
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	24000e24 	.word	0x24000e24

08014ebc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014ec0:	4803      	ldr	r0, [pc, #12]	; (8014ed0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8014ec2:	f00a f91b 	bl	801f0fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8014ec6:	4803      	ldr	r0, [pc, #12]	; (8014ed4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8014ec8:	f00a f918 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8014ecc:	bf00      	nop
 8014ece:	bd80      	pop	{r7, pc}
 8014ed0:	24000f54 	.word	0x24000f54
 8014ed4:	24000fec 	.word	0x24000fec

08014ed8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014edc:	4803      	ldr	r0, [pc, #12]	; (8014eec <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8014ede:	f00a f90d 	bl	801f0fc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8014ee2:	4803      	ldr	r0, [pc, #12]	; (8014ef0 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8014ee4:	f00a f90a 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8014ee8:	bf00      	nop
 8014eea:	bd80      	pop	{r7, pc}
 8014eec:	24000f54 	.word	0x24000f54
 8014ef0:	24001038 	.word	0x24001038

08014ef4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014ef8:	4802      	ldr	r0, [pc, #8]	; (8014f04 <TIM8_CC_IRQHandler+0x10>)
 8014efa:	f00a f8ff 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8014efe:	bf00      	nop
 8014f00:	bd80      	pop	{r7, pc}
 8014f02:	bf00      	nop
 8014f04:	24000f54 	.word	0x24000f54

08014f08 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014f08:	b580      	push	{r7, lr}
 8014f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8014f0c:	4802      	ldr	r0, [pc, #8]	; (8014f18 <TIM5_IRQHandler+0x10>)
 8014f0e:	f00a f8f5 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014f12:	bf00      	nop
 8014f14:	bd80      	pop	{r7, pc}
 8014f16:	bf00      	nop
 8014f18:	24000e70 	.word	0x24000e70

08014f1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014f20:	4802      	ldr	r0, [pc, #8]	; (8014f2c <TIM6_DAC_IRQHandler+0x10>)
 8014f22:	f00a f8eb 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8014f26:	bf00      	nop
 8014f28:	bd80      	pop	{r7, pc}
 8014f2a:	bf00      	nop
 8014f2c:	24000ebc 	.word	0x24000ebc

08014f30 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014f30:	b580      	push	{r7, lr}
 8014f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8014f34:	4802      	ldr	r0, [pc, #8]	; (8014f40 <TIM7_IRQHandler+0x10>)
 8014f36:	f00a f8e1 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014f3a:	bf00      	nop
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	24000f08 	.word	0x24000f08

08014f44 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8014f44:	b580      	push	{r7, lr}
 8014f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8014f48:	4802      	ldr	r0, [pc, #8]	; (8014f54 <TIM15_IRQHandler+0x10>)
 8014f4a:	f00a f8d7 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8014f4e:	bf00      	nop
 8014f50:	bd80      	pop	{r7, pc}
 8014f52:	bf00      	nop
 8014f54:	24001084 	.word	0x24001084

08014f58 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8014f5c:	4802      	ldr	r0, [pc, #8]	; (8014f68 <TIM16_IRQHandler+0x10>)
 8014f5e:	f00a f8cd 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8014f62:	bf00      	nop
 8014f64:	bd80      	pop	{r7, pc}
 8014f66:	bf00      	nop
 8014f68:	240010d0 	.word	0x240010d0

08014f6c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8014f70:	4802      	ldr	r0, [pc, #8]	; (8014f7c <TIM17_IRQHandler+0x10>)
 8014f72:	f00a f8c3 	bl	801f0fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8014f76:	bf00      	nop
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	2400111c 	.word	0x2400111c

08014f80 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014f80:	b480      	push	{r7}
 8014f82:	af00      	add	r7, sp, #0
  return 1;
 8014f84:	2301      	movs	r3, #1
}
 8014f86:	4618      	mov	r0, r3
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8e:	4770      	bx	lr

08014f90 <_kill>:

int _kill(int pid, int sig)
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
 8014f98:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8014f9a:	f00b fdcb 	bl	8020b34 <__errno>
 8014f9e:	4603      	mov	r3, r0
 8014fa0:	2216      	movs	r2, #22
 8014fa2:	601a      	str	r2, [r3, #0]
  return -1;
 8014fa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3708      	adds	r7, #8
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bd80      	pop	{r7, pc}

08014fb0 <_exit>:

void _exit (int status)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b082      	sub	sp, #8
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8014fb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014fbc:	6878      	ldr	r0, [r7, #4]
 8014fbe:	f7ff ffe7 	bl	8014f90 <_kill>
  while (1) {}    /* Make sure we hang here */
 8014fc2:	e7fe      	b.n	8014fc2 <_exit+0x12>

08014fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b086      	sub	sp, #24
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014fcc:	4a14      	ldr	r2, [pc, #80]	; (8015020 <_sbrk+0x5c>)
 8014fce:	4b15      	ldr	r3, [pc, #84]	; (8015024 <_sbrk+0x60>)
 8014fd0:	1ad3      	subs	r3, r2, r3
 8014fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014fd4:	697b      	ldr	r3, [r7, #20]
 8014fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8014fd8:	4b13      	ldr	r3, [pc, #76]	; (8015028 <_sbrk+0x64>)
 8014fda:	681b      	ldr	r3, [r3, #0]
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d102      	bne.n	8014fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014fe0:	4b11      	ldr	r3, [pc, #68]	; (8015028 <_sbrk+0x64>)
 8014fe2:	4a12      	ldr	r2, [pc, #72]	; (801502c <_sbrk+0x68>)
 8014fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8014fe6:	4b10      	ldr	r3, [pc, #64]	; (8015028 <_sbrk+0x64>)
 8014fe8:	681a      	ldr	r2, [r3, #0]
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	4413      	add	r3, r2
 8014fee:	693a      	ldr	r2, [r7, #16]
 8014ff0:	429a      	cmp	r2, r3
 8014ff2:	d207      	bcs.n	8015004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8014ff4:	f00b fd9e 	bl	8020b34 <__errno>
 8014ff8:	4603      	mov	r3, r0
 8014ffa:	220c      	movs	r2, #12
 8014ffc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8014ffe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015002:	e009      	b.n	8015018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8015004:	4b08      	ldr	r3, [pc, #32]	; (8015028 <_sbrk+0x64>)
 8015006:	681b      	ldr	r3, [r3, #0]
 8015008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 801500a:	4b07      	ldr	r3, [pc, #28]	; (8015028 <_sbrk+0x64>)
 801500c:	681a      	ldr	r2, [r3, #0]
 801500e:	687b      	ldr	r3, [r7, #4]
 8015010:	4413      	add	r3, r2
 8015012:	4a05      	ldr	r2, [pc, #20]	; (8015028 <_sbrk+0x64>)
 8015014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8015016:	68fb      	ldr	r3, [r7, #12]
}
 8015018:	4618      	mov	r0, r3
 801501a:	3718      	adds	r7, #24
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}
 8015020:	24050000 	.word	0x24050000
 8015024:	00000400 	.word	0x00000400
 8015028:	24001200 	.word	0x24001200
 801502c:	24001220 	.word	0x24001220

08015030 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8015030:	b480      	push	{r7}
 8015032:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8015034:	4b32      	ldr	r3, [pc, #200]	; (8015100 <SystemInit+0xd0>)
 8015036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801503a:	4a31      	ldr	r2, [pc, #196]	; (8015100 <SystemInit+0xd0>)
 801503c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8015044:	4b2f      	ldr	r3, [pc, #188]	; (8015104 <SystemInit+0xd4>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	f003 030f 	and.w	r3, r3, #15
 801504c:	2b06      	cmp	r3, #6
 801504e:	d807      	bhi.n	8015060 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015050:	4b2c      	ldr	r3, [pc, #176]	; (8015104 <SystemInit+0xd4>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	f023 030f 	bic.w	r3, r3, #15
 8015058:	4a2a      	ldr	r2, [pc, #168]	; (8015104 <SystemInit+0xd4>)
 801505a:	f043 0307 	orr.w	r3, r3, #7
 801505e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8015060:	4b29      	ldr	r3, [pc, #164]	; (8015108 <SystemInit+0xd8>)
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	4a28      	ldr	r2, [pc, #160]	; (8015108 <SystemInit+0xd8>)
 8015066:	f043 0301 	orr.w	r3, r3, #1
 801506a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 801506c:	4b26      	ldr	r3, [pc, #152]	; (8015108 <SystemInit+0xd8>)
 801506e:	2200      	movs	r2, #0
 8015070:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8015072:	4b25      	ldr	r3, [pc, #148]	; (8015108 <SystemInit+0xd8>)
 8015074:	681a      	ldr	r2, [r3, #0]
 8015076:	4924      	ldr	r1, [pc, #144]	; (8015108 <SystemInit+0xd8>)
 8015078:	4b24      	ldr	r3, [pc, #144]	; (801510c <SystemInit+0xdc>)
 801507a:	4013      	ands	r3, r2
 801507c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 801507e:	4b21      	ldr	r3, [pc, #132]	; (8015104 <SystemInit+0xd4>)
 8015080:	681b      	ldr	r3, [r3, #0]
 8015082:	f003 0308 	and.w	r3, r3, #8
 8015086:	2b00      	cmp	r3, #0
 8015088:	d007      	beq.n	801509a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 801508a:	4b1e      	ldr	r3, [pc, #120]	; (8015104 <SystemInit+0xd4>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	f023 030f 	bic.w	r3, r3, #15
 8015092:	4a1c      	ldr	r2, [pc, #112]	; (8015104 <SystemInit+0xd4>)
 8015094:	f043 0307 	orr.w	r3, r3, #7
 8015098:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 801509a:	4b1b      	ldr	r3, [pc, #108]	; (8015108 <SystemInit+0xd8>)
 801509c:	2200      	movs	r2, #0
 801509e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80150a0:	4b19      	ldr	r3, [pc, #100]	; (8015108 <SystemInit+0xd8>)
 80150a2:	2200      	movs	r2, #0
 80150a4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80150a6:	4b18      	ldr	r3, [pc, #96]	; (8015108 <SystemInit+0xd8>)
 80150a8:	2200      	movs	r2, #0
 80150aa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80150ac:	4b16      	ldr	r3, [pc, #88]	; (8015108 <SystemInit+0xd8>)
 80150ae:	4a18      	ldr	r2, [pc, #96]	; (8015110 <SystemInit+0xe0>)
 80150b0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80150b2:	4b15      	ldr	r3, [pc, #84]	; (8015108 <SystemInit+0xd8>)
 80150b4:	4a17      	ldr	r2, [pc, #92]	; (8015114 <SystemInit+0xe4>)
 80150b6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80150b8:	4b13      	ldr	r3, [pc, #76]	; (8015108 <SystemInit+0xd8>)
 80150ba:	4a17      	ldr	r2, [pc, #92]	; (8015118 <SystemInit+0xe8>)
 80150bc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80150be:	4b12      	ldr	r3, [pc, #72]	; (8015108 <SystemInit+0xd8>)
 80150c0:	2200      	movs	r2, #0
 80150c2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80150c4:	4b10      	ldr	r3, [pc, #64]	; (8015108 <SystemInit+0xd8>)
 80150c6:	4a14      	ldr	r2, [pc, #80]	; (8015118 <SystemInit+0xe8>)
 80150c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80150ca:	4b0f      	ldr	r3, [pc, #60]	; (8015108 <SystemInit+0xd8>)
 80150cc:	2200      	movs	r2, #0
 80150ce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80150d0:	4b0d      	ldr	r3, [pc, #52]	; (8015108 <SystemInit+0xd8>)
 80150d2:	4a11      	ldr	r2, [pc, #68]	; (8015118 <SystemInit+0xe8>)
 80150d4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80150d6:	4b0c      	ldr	r3, [pc, #48]	; (8015108 <SystemInit+0xd8>)
 80150d8:	2200      	movs	r2, #0
 80150da:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80150dc:	4b0a      	ldr	r3, [pc, #40]	; (8015108 <SystemInit+0xd8>)
 80150de:	681b      	ldr	r3, [r3, #0]
 80150e0:	4a09      	ldr	r2, [pc, #36]	; (8015108 <SystemInit+0xd8>)
 80150e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80150e6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80150e8:	4b07      	ldr	r3, [pc, #28]	; (8015108 <SystemInit+0xd8>)
 80150ea:	2200      	movs	r2, #0
 80150ec:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80150ee:	4b0b      	ldr	r3, [pc, #44]	; (801511c <SystemInit+0xec>)
 80150f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80150f4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80150f6:	bf00      	nop
 80150f8:	46bd      	mov	sp, r7
 80150fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150fe:	4770      	bx	lr
 8015100:	e000ed00 	.word	0xe000ed00
 8015104:	52002000 	.word	0x52002000
 8015108:	58024400 	.word	0x58024400
 801510c:	eaf6ed7f 	.word	0xeaf6ed7f
 8015110:	02020200 	.word	0x02020200
 8015114:	01ff0000 	.word	0x01ff0000
 8015118:	01010280 	.word	0x01010280
 801511c:	52004000 	.word	0x52004000

08015120 <Reset_Handler>:
 8015120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015158 <LoopFillZerobss+0xe>
 8015124:	f7ff ff84 	bl	8015030 <SystemInit>
 8015128:	480c      	ldr	r0, [pc, #48]	; (801515c <LoopFillZerobss+0x12>)
 801512a:	490d      	ldr	r1, [pc, #52]	; (8015160 <LoopFillZerobss+0x16>)
 801512c:	4a0d      	ldr	r2, [pc, #52]	; (8015164 <LoopFillZerobss+0x1a>)
 801512e:	2300      	movs	r3, #0
 8015130:	e002      	b.n	8015138 <LoopCopyDataInit>

08015132 <CopyDataInit>:
 8015132:	58d4      	ldr	r4, [r2, r3]
 8015134:	50c4      	str	r4, [r0, r3]
 8015136:	3304      	adds	r3, #4

08015138 <LoopCopyDataInit>:
 8015138:	18c4      	adds	r4, r0, r3
 801513a:	428c      	cmp	r4, r1
 801513c:	d3f9      	bcc.n	8015132 <CopyDataInit>
 801513e:	4a0a      	ldr	r2, [pc, #40]	; (8015168 <LoopFillZerobss+0x1e>)
 8015140:	4c0a      	ldr	r4, [pc, #40]	; (801516c <LoopFillZerobss+0x22>)
 8015142:	2300      	movs	r3, #0
 8015144:	e001      	b.n	801514a <LoopFillZerobss>

08015146 <FillZerobss>:
 8015146:	6013      	str	r3, [r2, #0]
 8015148:	3204      	adds	r2, #4

0801514a <LoopFillZerobss>:
 801514a:	42a2      	cmp	r2, r4
 801514c:	d3fb      	bcc.n	8015146 <FillZerobss>
 801514e:	f00b fcf7 	bl	8020b40 <__libc_init_array>
 8015152:	f7f9 faef 	bl	800e734 <main>
 8015156:	4770      	bx	lr
 8015158:	24050000 	.word	0x24050000
 801515c:	24000000 	.word	0x24000000
 8015160:	2400007c 	.word	0x2400007c
 8015164:	08021184 	.word	0x08021184
 8015168:	2400007c 	.word	0x2400007c
 801516c:	2400121c 	.word	0x2400121c

08015170 <ADC3_IRQHandler>:
 8015170:	e7fe      	b.n	8015170 <ADC3_IRQHandler>
	...

08015174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 801517a:	2003      	movs	r0, #3
 801517c:	f002 fa0c 	bl	8017598 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8015180:	f006 fc3c 	bl	801b9fc <HAL_RCC_GetSysClockFreq>
 8015184:	4602      	mov	r2, r0
 8015186:	4b15      	ldr	r3, [pc, #84]	; (80151dc <HAL_Init+0x68>)
 8015188:	699b      	ldr	r3, [r3, #24]
 801518a:	0a1b      	lsrs	r3, r3, #8
 801518c:	f003 030f 	and.w	r3, r3, #15
 8015190:	4913      	ldr	r1, [pc, #76]	; (80151e0 <HAL_Init+0x6c>)
 8015192:	5ccb      	ldrb	r3, [r1, r3]
 8015194:	f003 031f 	and.w	r3, r3, #31
 8015198:	fa22 f303 	lsr.w	r3, r2, r3
 801519c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801519e:	4b0f      	ldr	r3, [pc, #60]	; (80151dc <HAL_Init+0x68>)
 80151a0:	699b      	ldr	r3, [r3, #24]
 80151a2:	f003 030f 	and.w	r3, r3, #15
 80151a6:	4a0e      	ldr	r2, [pc, #56]	; (80151e0 <HAL_Init+0x6c>)
 80151a8:	5cd3      	ldrb	r3, [r2, r3]
 80151aa:	f003 031f 	and.w	r3, r3, #31
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	fa22 f303 	lsr.w	r3, r2, r3
 80151b4:	4a0b      	ldr	r2, [pc, #44]	; (80151e4 <HAL_Init+0x70>)
 80151b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80151b8:	4a0b      	ldr	r2, [pc, #44]	; (80151e8 <HAL_Init+0x74>)
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80151be:	2001      	movs	r0, #1
 80151c0:	f000 f814 	bl	80151ec <HAL_InitTick>
 80151c4:	4603      	mov	r3, r0
 80151c6:	2b00      	cmp	r3, #0
 80151c8:	d001      	beq.n	80151ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80151ca:	2301      	movs	r3, #1
 80151cc:	e002      	b.n	80151d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80151ce:	f7ff f953 	bl	8014478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80151d2:	2300      	movs	r3, #0
}
 80151d4:	4618      	mov	r0, r3
 80151d6:	3708      	adds	r7, #8
 80151d8:	46bd      	mov	sp, r7
 80151da:	bd80      	pop	{r7, pc}
 80151dc:	58024400 	.word	0x58024400
 80151e0:	080210f8 	.word	0x080210f8
 80151e4:	24000008 	.word	0x24000008
 80151e8:	24000004 	.word	0x24000004

080151ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80151f4:	4b15      	ldr	r3, [pc, #84]	; (801524c <HAL_InitTick+0x60>)
 80151f6:	781b      	ldrb	r3, [r3, #0]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d101      	bne.n	8015200 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80151fc:	2301      	movs	r3, #1
 80151fe:	e021      	b.n	8015244 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8015200:	4b13      	ldr	r3, [pc, #76]	; (8015250 <HAL_InitTick+0x64>)
 8015202:	681a      	ldr	r2, [r3, #0]
 8015204:	4b11      	ldr	r3, [pc, #68]	; (801524c <HAL_InitTick+0x60>)
 8015206:	781b      	ldrb	r3, [r3, #0]
 8015208:	4619      	mov	r1, r3
 801520a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801520e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015212:	fbb2 f3f3 	udiv	r3, r2, r3
 8015216:	4618      	mov	r0, r3
 8015218:	f002 f9f5 	bl	8017606 <HAL_SYSTICK_Config>
 801521c:	4603      	mov	r3, r0
 801521e:	2b00      	cmp	r3, #0
 8015220:	d001      	beq.n	8015226 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8015222:	2301      	movs	r3, #1
 8015224:	e00e      	b.n	8015244 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	2b0f      	cmp	r3, #15
 801522a:	d80a      	bhi.n	8015242 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 801522c:	2200      	movs	r2, #0
 801522e:	6879      	ldr	r1, [r7, #4]
 8015230:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015234:	f002 f9bb 	bl	80175ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015238:	4a06      	ldr	r2, [pc, #24]	; (8015254 <HAL_InitTick+0x68>)
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801523e:	2300      	movs	r3, #0
 8015240:	e000      	b.n	8015244 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8015242:	2301      	movs	r3, #1
}
 8015244:	4618      	mov	r0, r3
 8015246:	3708      	adds	r7, #8
 8015248:	46bd      	mov	sp, r7
 801524a:	bd80      	pop	{r7, pc}
 801524c:	24000010 	.word	0x24000010
 8015250:	24000004 	.word	0x24000004
 8015254:	2400000c 	.word	0x2400000c

08015258 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015258:	b480      	push	{r7}
 801525a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 801525c:	4b06      	ldr	r3, [pc, #24]	; (8015278 <HAL_IncTick+0x20>)
 801525e:	781b      	ldrb	r3, [r3, #0]
 8015260:	461a      	mov	r2, r3
 8015262:	4b06      	ldr	r3, [pc, #24]	; (801527c <HAL_IncTick+0x24>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	4413      	add	r3, r2
 8015268:	4a04      	ldr	r2, [pc, #16]	; (801527c <HAL_IncTick+0x24>)
 801526a:	6013      	str	r3, [r2, #0]
}
 801526c:	bf00      	nop
 801526e:	46bd      	mov	sp, r7
 8015270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015274:	4770      	bx	lr
 8015276:	bf00      	nop
 8015278:	24000010 	.word	0x24000010
 801527c:	24001204 	.word	0x24001204

08015280 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015280:	b480      	push	{r7}
 8015282:	af00      	add	r7, sp, #0
  return uwTick;
 8015284:	4b03      	ldr	r3, [pc, #12]	; (8015294 <HAL_GetTick+0x14>)
 8015286:	681b      	ldr	r3, [r3, #0]
}
 8015288:	4618      	mov	r0, r3
 801528a:	46bd      	mov	sp, r7
 801528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015290:	4770      	bx	lr
 8015292:	bf00      	nop
 8015294:	24001204 	.word	0x24001204

08015298 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8015298:	b480      	push	{r7}
 801529a:	b083      	sub	sp, #12
 801529c:	af00      	add	r7, sp, #0
 801529e:	6078      	str	r0, [r7, #4]
 80152a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	689b      	ldr	r3, [r3, #8]
 80152a6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80152aa:	683b      	ldr	r3, [r7, #0]
 80152ac:	431a      	orrs	r2, r3
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	609a      	str	r2, [r3, #8]
}
 80152b2:	bf00      	nop
 80152b4:	370c      	adds	r7, #12
 80152b6:	46bd      	mov	sp, r7
 80152b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152bc:	4770      	bx	lr

080152be <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80152be:	b480      	push	{r7}
 80152c0:	b083      	sub	sp, #12
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	6078      	str	r0, [r7, #4]
 80152c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	689b      	ldr	r3, [r3, #8]
 80152cc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80152d0:	683b      	ldr	r3, [r7, #0]
 80152d2:	431a      	orrs	r2, r3
 80152d4:	687b      	ldr	r3, [r7, #4]
 80152d6:	609a      	str	r2, [r3, #8]
}
 80152d8:	bf00      	nop
 80152da:	370c      	adds	r7, #12
 80152dc:	46bd      	mov	sp, r7
 80152de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152e2:	4770      	bx	lr

080152e4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80152e4:	b480      	push	{r7}
 80152e6:	b083      	sub	sp, #12
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	689b      	ldr	r3, [r3, #8]
 80152f0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	370c      	adds	r7, #12
 80152f8:	46bd      	mov	sp, r7
 80152fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152fe:	4770      	bx	lr

08015300 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8015300:	b480      	push	{r7}
 8015302:	b087      	sub	sp, #28
 8015304:	af00      	add	r7, sp, #0
 8015306:	60f8      	str	r0, [r7, #12]
 8015308:	60b9      	str	r1, [r7, #8]
 801530a:	607a      	str	r2, [r7, #4]
 801530c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	3360      	adds	r3, #96	; 0x60
 8015312:	461a      	mov	r2, r3
 8015314:	68bb      	ldr	r3, [r7, #8]
 8015316:	009b      	lsls	r3, r3, #2
 8015318:	4413      	add	r3, r2
 801531a:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 801531c:	68fb      	ldr	r3, [r7, #12]
 801531e:	4a10      	ldr	r2, [pc, #64]	; (8015360 <LL_ADC_SetOffset+0x60>)
 8015320:	4293      	cmp	r3, r2
 8015322:	d10b      	bne.n	801533c <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 8015324:	697b      	ldr	r3, [r7, #20]
 8015326:	681b      	ldr	r3, [r3, #0]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801532e:	683b      	ldr	r3, [r7, #0]
 8015330:	4313      	orrs	r3, r2
 8015332:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8015336:	697b      	ldr	r3, [r7, #20]
 8015338:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 801533a:	e00b      	b.n	8015354 <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 801533c:	697b      	ldr	r3, [r7, #20]
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	430b      	orrs	r3, r1
 801534e:	431a      	orrs	r2, r3
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	601a      	str	r2, [r3, #0]
}
 8015354:	bf00      	nop
 8015356:	371c      	adds	r7, #28
 8015358:	46bd      	mov	sp, r7
 801535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535e:	4770      	bx	lr
 8015360:	58026000 	.word	0x58026000

08015364 <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8015364:	b480      	push	{r7}
 8015366:	b085      	sub	sp, #20
 8015368:	af00      	add	r7, sp, #0
 801536a:	6078      	str	r0, [r7, #4]
 801536c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	3360      	adds	r3, #96	; 0x60
 8015372:	461a      	mov	r2, r3
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	009b      	lsls	r3, r3, #2
 8015378:	4413      	add	r3, r2
 801537a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 801537c:	68fb      	ldr	r3, [r7, #12]
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8015384:	4618      	mov	r0, r3
 8015386:	3714      	adds	r7, #20
 8015388:	46bd      	mov	sp, r7
 801538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801538e:	4770      	bx	lr

08015390 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8015390:	b480      	push	{r7}
 8015392:	b085      	sub	sp, #20
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	60b9      	str	r1, [r7, #8]
 801539a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 801539c:	68fb      	ldr	r3, [r7, #12]
 801539e:	691b      	ldr	r3, [r3, #16]
 80153a0:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80153a4:	68bb      	ldr	r3, [r7, #8]
 80153a6:	f003 031f 	and.w	r3, r3, #31
 80153aa:	6879      	ldr	r1, [r7, #4]
 80153ac:	fa01 f303 	lsl.w	r3, r1, r3
 80153b0:	431a      	orrs	r2, r3
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	611a      	str	r2, [r3, #16]
}
 80153b6:	bf00      	nop
 80153b8:	3714      	adds	r7, #20
 80153ba:	46bd      	mov	sp, r7
 80153bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153c0:	4770      	bx	lr
	...

080153c4 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80153c4:	b480      	push	{r7}
 80153c6:	b087      	sub	sp, #28
 80153c8:	af00      	add	r7, sp, #0
 80153ca:	60f8      	str	r0, [r7, #12]
 80153cc:	60b9      	str	r1, [r7, #8]
 80153ce:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 80153d0:	68fb      	ldr	r3, [r7, #12]
 80153d2:	4a0c      	ldr	r2, [pc, #48]	; (8015404 <LL_ADC_SetOffsetSignedSaturation+0x40>)
 80153d4:	4293      	cmp	r3, r2
 80153d6:	d00e      	beq.n	80153f6 <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	3360      	adds	r3, #96	; 0x60
 80153dc:	461a      	mov	r2, r3
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	009b      	lsls	r3, r3, #2
 80153e2:	4413      	add	r3, r2
 80153e4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80153e6:	697b      	ldr	r3, [r7, #20]
 80153e8:	681b      	ldr	r3, [r3, #0]
 80153ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	431a      	orrs	r2, r3
 80153f2:	697b      	ldr	r3, [r7, #20]
 80153f4:	601a      	str	r2, [r3, #0]
  }
}
 80153f6:	bf00      	nop
 80153f8:	371c      	adds	r7, #28
 80153fa:	46bd      	mov	sp, r7
 80153fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015400:	4770      	bx	lr
 8015402:	bf00      	nop
 8015404:	58026000 	.word	0x58026000

08015408 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8015408:	b480      	push	{r7}
 801540a:	b087      	sub	sp, #28
 801540c:	af00      	add	r7, sp, #0
 801540e:	60f8      	str	r0, [r7, #12]
 8015410:	60b9      	str	r1, [r7, #8]
 8015412:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	4a0c      	ldr	r2, [pc, #48]	; (8015448 <LL_ADC_SetOffsetSaturation+0x40>)
 8015418:	4293      	cmp	r3, r2
 801541a:	d10e      	bne.n	801543a <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	3360      	adds	r3, #96	; 0x60
 8015420:	461a      	mov	r2, r3
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	009b      	lsls	r3, r3, #2
 8015426:	4413      	add	r3, r2
 8015428:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 801542a:	697b      	ldr	r3, [r7, #20]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	431a      	orrs	r2, r3
 8015436:	697b      	ldr	r3, [r7, #20]
 8015438:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 801543a:	bf00      	nop
 801543c:	371c      	adds	r7, #28
 801543e:	46bd      	mov	sp, r7
 8015440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015444:	4770      	bx	lr
 8015446:	bf00      	nop
 8015448:	58026000 	.word	0x58026000

0801544c <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 801544c:	b480      	push	{r7}
 801544e:	b087      	sub	sp, #28
 8015450:	af00      	add	r7, sp, #0
 8015452:	60f8      	str	r0, [r7, #12]
 8015454:	60b9      	str	r1, [r7, #8]
 8015456:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	4a0c      	ldr	r2, [pc, #48]	; (801548c <LL_ADC_SetOffsetSign+0x40>)
 801545c:	4293      	cmp	r3, r2
 801545e:	d10e      	bne.n	801547e <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015460:	68fb      	ldr	r3, [r7, #12]
 8015462:	3360      	adds	r3, #96	; 0x60
 8015464:	461a      	mov	r2, r3
 8015466:	68bb      	ldr	r3, [r7, #8]
 8015468:	009b      	lsls	r3, r3, #2
 801546a:	4413      	add	r3, r2
 801546c:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 801546e:	697b      	ldr	r3, [r7, #20]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	431a      	orrs	r2, r3
 801547a:	697b      	ldr	r3, [r7, #20]
 801547c:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 801547e:	bf00      	nop
 8015480:	371c      	adds	r7, #28
 8015482:	46bd      	mov	sp, r7
 8015484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015488:	4770      	bx	lr
 801548a:	bf00      	nop
 801548c:	58026000 	.word	0x58026000

08015490 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8015490:	b480      	push	{r7}
 8015492:	b087      	sub	sp, #28
 8015494:	af00      	add	r7, sp, #0
 8015496:	60f8      	str	r0, [r7, #12]
 8015498:	60b9      	str	r1, [r7, #8]
 801549a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	3360      	adds	r3, #96	; 0x60
 80154a0:	461a      	mov	r2, r3
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	009b      	lsls	r3, r3, #2
 80154a6:	4413      	add	r3, r2
 80154a8:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	4a0c      	ldr	r2, [pc, #48]	; (80154e0 <LL_ADC_SetOffsetState+0x50>)
 80154ae:	4293      	cmp	r3, r2
 80154b0:	d108      	bne.n	80154c4 <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 80154b2:	697b      	ldr	r3, [r7, #20]
 80154b4:	681b      	ldr	r3, [r3, #0]
 80154b6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	431a      	orrs	r2, r3
 80154be:	697b      	ldr	r3, [r7, #20]
 80154c0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 80154c2:	e007      	b.n	80154d4 <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 80154c4:	697b      	ldr	r3, [r7, #20]
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	431a      	orrs	r2, r3
 80154d0:	697b      	ldr	r3, [r7, #20]
 80154d2:	601a      	str	r2, [r3, #0]
}
 80154d4:	bf00      	nop
 80154d6:	371c      	adds	r7, #28
 80154d8:	46bd      	mov	sp, r7
 80154da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154de:	4770      	bx	lr
 80154e0:	58026000 	.word	0x58026000

080154e4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d101      	bne.n	80154fc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80154f8:	2301      	movs	r3, #1
 80154fa:	e000      	b.n	80154fe <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80154fc:	2300      	movs	r3, #0
}
 80154fe:	4618      	mov	r0, r3
 8015500:	370c      	adds	r7, #12
 8015502:	46bd      	mov	sp, r7
 8015504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015508:	4770      	bx	lr

0801550a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 801550a:	b480      	push	{r7}
 801550c:	b087      	sub	sp, #28
 801550e:	af00      	add	r7, sp, #0
 8015510:	60f8      	str	r0, [r7, #12]
 8015512:	60b9      	str	r1, [r7, #8]
 8015514:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8015516:	68fb      	ldr	r3, [r7, #12]
 8015518:	3330      	adds	r3, #48	; 0x30
 801551a:	461a      	mov	r2, r3
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	0a1b      	lsrs	r3, r3, #8
 8015520:	009b      	lsls	r3, r3, #2
 8015522:	f003 030c 	and.w	r3, r3, #12
 8015526:	4413      	add	r3, r2
 8015528:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	681a      	ldr	r2, [r3, #0]
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	f003 031f 	and.w	r3, r3, #31
 8015534:	211f      	movs	r1, #31
 8015536:	fa01 f303 	lsl.w	r3, r1, r3
 801553a:	43db      	mvns	r3, r3
 801553c:	401a      	ands	r2, r3
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	0e9b      	lsrs	r3, r3, #26
 8015542:	f003 011f 	and.w	r1, r3, #31
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	f003 031f 	and.w	r3, r3, #31
 801554c:	fa01 f303 	lsl.w	r3, r1, r3
 8015550:	431a      	orrs	r2, r3
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8015556:	bf00      	nop
 8015558:	371c      	adds	r7, #28
 801555a:	46bd      	mov	sp, r7
 801555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015560:	4770      	bx	lr

08015562 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8015562:	b480      	push	{r7}
 8015564:	b083      	sub	sp, #12
 8015566:	af00      	add	r7, sp, #0
 8015568:	6078      	str	r0, [r7, #4]
 801556a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	68db      	ldr	r3, [r3, #12]
 8015570:	f023 0203 	bic.w	r2, r3, #3
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	431a      	orrs	r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	60da      	str	r2, [r3, #12]
}
 801557c:	bf00      	nop
 801557e:	370c      	adds	r7, #12
 8015580:	46bd      	mov	sp, r7
 8015582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015586:	4770      	bx	lr

08015588 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8015588:	b480      	push	{r7}
 801558a:	b083      	sub	sp, #12
 801558c:	af00      	add	r7, sp, #0
 801558e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	68db      	ldr	r3, [r3, #12]
 8015594:	f043 0201 	orr.w	r2, r3, #1
 8015598:	687b      	ldr	r3, [r7, #4]
 801559a:	60da      	str	r2, [r3, #12]
}
 801559c:	bf00      	nop
 801559e:	370c      	adds	r7, #12
 80155a0:	46bd      	mov	sp, r7
 80155a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a6:	4770      	bx	lr

080155a8 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80155a8:	b480      	push	{r7}
 80155aa:	b083      	sub	sp, #12
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
 80155b0:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	4a08      	ldr	r2, [pc, #32]	; (80155d8 <LL_ADC_REG_SetDMATransferMode+0x30>)
 80155b6:	4293      	cmp	r3, r2
 80155b8:	d107      	bne.n	80155ca <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	68db      	ldr	r3, [r3, #12]
 80155be:	f023 0203 	bic.w	r2, r3, #3
 80155c2:	683b      	ldr	r3, [r7, #0]
 80155c4:	431a      	orrs	r2, r3
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	60da      	str	r2, [r3, #12]
  }
}
 80155ca:	bf00      	nop
 80155cc:	370c      	adds	r7, #12
 80155ce:	46bd      	mov	sp, r7
 80155d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d4:	4770      	bx	lr
 80155d6:	bf00      	nop
 80155d8:	58026000 	.word	0x58026000

080155dc <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80155dc:	b480      	push	{r7}
 80155de:	b083      	sub	sp, #12
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80155e8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	d101      	bne.n	80155f4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80155f0:	2301      	movs	r3, #1
 80155f2:	e000      	b.n	80155f6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80155f4:	2300      	movs	r3, #0
}
 80155f6:	4618      	mov	r0, r3
 80155f8:	370c      	adds	r7, #12
 80155fa:	46bd      	mov	sp, r7
 80155fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015600:	4770      	bx	lr

08015602 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8015602:	b480      	push	{r7}
 8015604:	b087      	sub	sp, #28
 8015606:	af00      	add	r7, sp, #0
 8015608:	60f8      	str	r0, [r7, #12]
 801560a:	60b9      	str	r1, [r7, #8]
 801560c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 801560e:	68fb      	ldr	r3, [r7, #12]
 8015610:	3314      	adds	r3, #20
 8015612:	461a      	mov	r2, r3
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	0e5b      	lsrs	r3, r3, #25
 8015618:	009b      	lsls	r3, r3, #2
 801561a:	f003 0304 	and.w	r3, r3, #4
 801561e:	4413      	add	r3, r2
 8015620:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	681a      	ldr	r2, [r3, #0]
 8015626:	68bb      	ldr	r3, [r7, #8]
 8015628:	0d1b      	lsrs	r3, r3, #20
 801562a:	f003 031f 	and.w	r3, r3, #31
 801562e:	2107      	movs	r1, #7
 8015630:	fa01 f303 	lsl.w	r3, r1, r3
 8015634:	43db      	mvns	r3, r3
 8015636:	401a      	ands	r2, r3
 8015638:	68bb      	ldr	r3, [r7, #8]
 801563a:	0d1b      	lsrs	r3, r3, #20
 801563c:	f003 031f 	and.w	r3, r3, #31
 8015640:	6879      	ldr	r1, [r7, #4]
 8015642:	fa01 f303 	lsl.w	r3, r1, r3
 8015646:	431a      	orrs	r2, r3
 8015648:	697b      	ldr	r3, [r7, #20]
 801564a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 801564c:	bf00      	nop
 801564e:	371c      	adds	r7, #28
 8015650:	46bd      	mov	sp, r7
 8015652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015656:	4770      	bx	lr

08015658 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8015658:	b480      	push	{r7}
 801565a:	b085      	sub	sp, #20
 801565c:	af00      	add	r7, sp, #0
 801565e:	60f8      	str	r0, [r7, #12]
 8015660:	60b9      	str	r1, [r7, #8]
 8015662:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	4a1a      	ldr	r2, [pc, #104]	; (80156d0 <LL_ADC_SetChannelSingleDiff+0x78>)
 8015668:	4293      	cmp	r3, r2
 801566a:	d115      	bne.n	8015698 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8015672:	68bb      	ldr	r3, [r7, #8]
 8015674:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015678:	43db      	mvns	r3, r3
 801567a:	401a      	ands	r2, r3
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f003 0318 	and.w	r3, r3, #24
 8015682:	4914      	ldr	r1, [pc, #80]	; (80156d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 8015684:	40d9      	lsrs	r1, r3
 8015686:	68bb      	ldr	r3, [r7, #8]
 8015688:	400b      	ands	r3, r1
 801568a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801568e:	431a      	orrs	r2, r3
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8015696:	e014      	b.n	80156c2 <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8015698:	68fb      	ldr	r3, [r7, #12]
 801569a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156a4:	43db      	mvns	r3, r3
 80156a6:	401a      	ands	r2, r3
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f003 0318 	and.w	r3, r3, #24
 80156ae:	4909      	ldr	r1, [pc, #36]	; (80156d4 <LL_ADC_SetChannelSingleDiff+0x7c>)
 80156b0:	40d9      	lsrs	r1, r3
 80156b2:	68bb      	ldr	r3, [r7, #8]
 80156b4:	400b      	ands	r3, r1
 80156b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156ba:	431a      	orrs	r2, r3
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 80156c2:	bf00      	nop
 80156c4:	3714      	adds	r7, #20
 80156c6:	46bd      	mov	sp, r7
 80156c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156cc:	4770      	bx	lr
 80156ce:	bf00      	nop
 80156d0:	58026000 	.word	0x58026000
 80156d4:	000fffff 	.word	0x000fffff

080156d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
 80156de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	689b      	ldr	r3, [r3, #8]
 80156e4:	f003 031f 	and.w	r3, r3, #31
}
 80156e8:	4618      	mov	r0, r3
 80156ea:	370c      	adds	r7, #12
 80156ec:	46bd      	mov	sp, r7
 80156ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f2:	4770      	bx	lr

080156f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80156f4:	b480      	push	{r7}
 80156f6:	b083      	sub	sp, #12
 80156f8:	af00      	add	r7, sp, #0
 80156fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	689b      	ldr	r3, [r3, #8]
 8015700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8015704:	4618      	mov	r0, r3
 8015706:	370c      	adds	r7, #12
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr

08015710 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8015710:	b480      	push	{r7}
 8015712:	b083      	sub	sp, #12
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	689a      	ldr	r2, [r3, #8]
 801571c:	4b04      	ldr	r3, [pc, #16]	; (8015730 <LL_ADC_DisableDeepPowerDown+0x20>)
 801571e:	4013      	ands	r3, r2
 8015720:	687a      	ldr	r2, [r7, #4]
 8015722:	6093      	str	r3, [r2, #8]
}
 8015724:	bf00      	nop
 8015726:	370c      	adds	r7, #12
 8015728:	46bd      	mov	sp, r7
 801572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801572e:	4770      	bx	lr
 8015730:	5fffffc0 	.word	0x5fffffc0

08015734 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8015734:	b480      	push	{r7}
 8015736:	b083      	sub	sp, #12
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	689b      	ldr	r3, [r3, #8]
 8015740:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8015744:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8015748:	d101      	bne.n	801574e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 801574a:	2301      	movs	r3, #1
 801574c:	e000      	b.n	8015750 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 801574e:	2300      	movs	r3, #0
}
 8015750:	4618      	mov	r0, r3
 8015752:	370c      	adds	r7, #12
 8015754:	46bd      	mov	sp, r7
 8015756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801575a:	4770      	bx	lr

0801575c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 801575c:	b480      	push	{r7}
 801575e:	b083      	sub	sp, #12
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	689a      	ldr	r2, [r3, #8]
 8015768:	4b05      	ldr	r3, [pc, #20]	; (8015780 <LL_ADC_EnableInternalRegulator+0x24>)
 801576a:	4013      	ands	r3, r2
 801576c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8015774:	bf00      	nop
 8015776:	370c      	adds	r7, #12
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr
 8015780:	6fffffc0 	.word	0x6fffffc0

08015784 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8015784:	b480      	push	{r7}
 8015786:	b083      	sub	sp, #12
 8015788:	af00      	add	r7, sp, #0
 801578a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	689b      	ldr	r3, [r3, #8]
 8015790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015794:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015798:	d101      	bne.n	801579e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 801579a:	2301      	movs	r3, #1
 801579c:	e000      	b.n	80157a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 801579e:	2300      	movs	r3, #0
}
 80157a0:	4618      	mov	r0, r3
 80157a2:	370c      	adds	r7, #12
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr

080157ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b083      	sub	sp, #12
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	689a      	ldr	r2, [r3, #8]
 80157b8:	4b05      	ldr	r3, [pc, #20]	; (80157d0 <LL_ADC_Enable+0x24>)
 80157ba:	4013      	ands	r3, r2
 80157bc:	f043 0201 	orr.w	r2, r3, #1
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80157c4:	bf00      	nop
 80157c6:	370c      	adds	r7, #12
 80157c8:	46bd      	mov	sp, r7
 80157ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ce:	4770      	bx	lr
 80157d0:	7fffffc0 	.word	0x7fffffc0

080157d4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80157d4:	b480      	push	{r7}
 80157d6:	b083      	sub	sp, #12
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	689b      	ldr	r3, [r3, #8]
 80157e0:	f003 0301 	and.w	r3, r3, #1
 80157e4:	2b01      	cmp	r3, #1
 80157e6:	d101      	bne.n	80157ec <LL_ADC_IsEnabled+0x18>
 80157e8:	2301      	movs	r3, #1
 80157ea:	e000      	b.n	80157ee <LL_ADC_IsEnabled+0x1a>
 80157ec:	2300      	movs	r3, #0
}
 80157ee:	4618      	mov	r0, r3
 80157f0:	370c      	adds	r7, #12
 80157f2:	46bd      	mov	sp, r7
 80157f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f8:	4770      	bx	lr
	...

080157fc <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80157fc:	b480      	push	{r7}
 80157fe:	b083      	sub	sp, #12
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	689a      	ldr	r2, [r3, #8]
 8015808:	4b05      	ldr	r3, [pc, #20]	; (8015820 <LL_ADC_REG_StartConversion+0x24>)
 801580a:	4013      	ands	r3, r2
 801580c:	f043 0204 	orr.w	r2, r3, #4
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8015814:	bf00      	nop
 8015816:	370c      	adds	r7, #12
 8015818:	46bd      	mov	sp, r7
 801581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801581e:	4770      	bx	lr
 8015820:	7fffffc0 	.word	0x7fffffc0

08015824 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	689b      	ldr	r3, [r3, #8]
 8015830:	f003 0304 	and.w	r3, r3, #4
 8015834:	2b04      	cmp	r3, #4
 8015836:	d101      	bne.n	801583c <LL_ADC_REG_IsConversionOngoing+0x18>
 8015838:	2301      	movs	r3, #1
 801583a:	e000      	b.n	801583e <LL_ADC_REG_IsConversionOngoing+0x1a>
 801583c:	2300      	movs	r3, #0
}
 801583e:	4618      	mov	r0, r3
 8015840:	370c      	adds	r7, #12
 8015842:	46bd      	mov	sp, r7
 8015844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015848:	4770      	bx	lr

0801584a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801584a:	b480      	push	{r7}
 801584c:	b083      	sub	sp, #12
 801584e:	af00      	add	r7, sp, #0
 8015850:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	689b      	ldr	r3, [r3, #8]
 8015856:	f003 0308 	and.w	r3, r3, #8
 801585a:	2b08      	cmp	r3, #8
 801585c:	d101      	bne.n	8015862 <LL_ADC_INJ_IsConversionOngoing+0x18>
 801585e:	2301      	movs	r3, #1
 8015860:	e000      	b.n	8015864 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8015862:	2300      	movs	r3, #0
}
 8015864:	4618      	mov	r0, r3
 8015866:	370c      	adds	r7, #12
 8015868:	46bd      	mov	sp, r7
 801586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586e:	4770      	bx	lr

08015870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8015870:	b590      	push	{r4, r7, lr}
 8015872:	b089      	sub	sp, #36	; 0x24
 8015874:	af00      	add	r7, sp, #0
 8015876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8015878:	2300      	movs	r3, #0
 801587a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 801587c:	2300      	movs	r3, #0
 801587e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2b00      	cmp	r3, #0
 8015884:	d101      	bne.n	801588a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8015886:	2301      	movs	r3, #1
 8015888:	e1ee      	b.n	8015c68 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	691b      	ldr	r3, [r3, #16]
 801588e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015894:	2b00      	cmp	r3, #0
 8015896:	d109      	bne.n	80158ac <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8015898:	6878      	ldr	r0, [r7, #4]
 801589a:	f7fe fe29 	bl	80144f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	2200      	movs	r2, #0
 80158a2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	2200      	movs	r2, #0
 80158a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	681b      	ldr	r3, [r3, #0]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7ff ff3f 	bl	8015734 <LL_ADC_IsDeepPowerDownEnabled>
 80158b6:	4603      	mov	r3, r0
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d004      	beq.n	80158c6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	4618      	mov	r0, r3
 80158c2:	f7ff ff25 	bl	8015710 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	681b      	ldr	r3, [r3, #0]
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7ff ff5a 	bl	8015784 <LL_ADC_IsInternalRegulatorEnabled>
 80158d0:	4603      	mov	r3, r0
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	d114      	bne.n	8015900 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	4618      	mov	r0, r3
 80158dc:	f7ff ff3e 	bl	801575c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80158e0:	4b8e      	ldr	r3, [pc, #568]	; (8015b1c <HAL_ADC_Init+0x2ac>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	099b      	lsrs	r3, r3, #6
 80158e6:	4a8e      	ldr	r2, [pc, #568]	; (8015b20 <HAL_ADC_Init+0x2b0>)
 80158e8:	fba2 2303 	umull	r2, r3, r2, r3
 80158ec:	099b      	lsrs	r3, r3, #6
 80158ee:	3301      	adds	r3, #1
 80158f0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80158f2:	e002      	b.n	80158fa <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	3b01      	subs	r3, #1
 80158f8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80158fa:	68bb      	ldr	r3, [r7, #8]
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	d1f9      	bne.n	80158f4 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	4618      	mov	r0, r3
 8015906:	f7ff ff3d 	bl	8015784 <LL_ADC_IsInternalRegulatorEnabled>
 801590a:	4603      	mov	r3, r0
 801590c:	2b00      	cmp	r3, #0
 801590e:	d10d      	bne.n	801592c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015910:	687b      	ldr	r3, [r7, #4]
 8015912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015914:	f043 0210 	orr.w	r2, r3, #16
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015920:	f043 0201 	orr.w	r2, r3, #1
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 8015928:	2301      	movs	r3, #1
 801592a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	681b      	ldr	r3, [r3, #0]
 8015930:	4618      	mov	r0, r3
 8015932:	f7ff ff77 	bl	8015824 <LL_ADC_REG_IsConversionOngoing>
 8015936:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801593c:	f003 0310 	and.w	r3, r3, #16
 8015940:	2b00      	cmp	r3, #0
 8015942:	f040 8188 	bne.w	8015c56 <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	2b00      	cmp	r3, #0
 801594a:	f040 8184 	bne.w	8015c56 <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015952:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8015956:	f043 0202 	orr.w	r2, r3, #2
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	681b      	ldr	r3, [r3, #0]
 8015962:	4618      	mov	r0, r3
 8015964:	f7ff ff36 	bl	80157d4 <LL_ADC_IsEnabled>
 8015968:	4603      	mov	r3, r0
 801596a:	2b00      	cmp	r3, #0
 801596c:	d136      	bne.n	80159dc <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	4a6c      	ldr	r2, [pc, #432]	; (8015b24 <HAL_ADC_Init+0x2b4>)
 8015974:	4293      	cmp	r3, r2
 8015976:	d004      	beq.n	8015982 <HAL_ADC_Init+0x112>
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	4a6a      	ldr	r2, [pc, #424]	; (8015b28 <HAL_ADC_Init+0x2b8>)
 801597e:	4293      	cmp	r3, r2
 8015980:	d10e      	bne.n	80159a0 <HAL_ADC_Init+0x130>
 8015982:	4868      	ldr	r0, [pc, #416]	; (8015b24 <HAL_ADC_Init+0x2b4>)
 8015984:	f7ff ff26 	bl	80157d4 <LL_ADC_IsEnabled>
 8015988:	4604      	mov	r4, r0
 801598a:	4867      	ldr	r0, [pc, #412]	; (8015b28 <HAL_ADC_Init+0x2b8>)
 801598c:	f7ff ff22 	bl	80157d4 <LL_ADC_IsEnabled>
 8015990:	4603      	mov	r3, r0
 8015992:	4323      	orrs	r3, r4
 8015994:	2b00      	cmp	r3, #0
 8015996:	bf0c      	ite	eq
 8015998:	2301      	moveq	r3, #1
 801599a:	2300      	movne	r3, #0
 801599c:	b2db      	uxtb	r3, r3
 801599e:	e008      	b.n	80159b2 <HAL_ADC_Init+0x142>
 80159a0:	4862      	ldr	r0, [pc, #392]	; (8015b2c <HAL_ADC_Init+0x2bc>)
 80159a2:	f7ff ff17 	bl	80157d4 <LL_ADC_IsEnabled>
 80159a6:	4603      	mov	r3, r0
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	bf0c      	ite	eq
 80159ac:	2301      	moveq	r3, #1
 80159ae:	2300      	movne	r3, #0
 80159b0:	b2db      	uxtb	r3, r3
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d012      	beq.n	80159dc <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	4a5a      	ldr	r2, [pc, #360]	; (8015b24 <HAL_ADC_Init+0x2b4>)
 80159bc:	4293      	cmp	r3, r2
 80159be:	d004      	beq.n	80159ca <HAL_ADC_Init+0x15a>
 80159c0:	687b      	ldr	r3, [r7, #4]
 80159c2:	681b      	ldr	r3, [r3, #0]
 80159c4:	4a58      	ldr	r2, [pc, #352]	; (8015b28 <HAL_ADC_Init+0x2b8>)
 80159c6:	4293      	cmp	r3, r2
 80159c8:	d101      	bne.n	80159ce <HAL_ADC_Init+0x15e>
 80159ca:	4a59      	ldr	r2, [pc, #356]	; (8015b30 <HAL_ADC_Init+0x2c0>)
 80159cc:	e000      	b.n	80159d0 <HAL_ADC_Init+0x160>
 80159ce:	4a59      	ldr	r2, [pc, #356]	; (8015b34 <HAL_ADC_Init+0x2c4>)
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	685b      	ldr	r3, [r3, #4]
 80159d4:	4619      	mov	r1, r3
 80159d6:	4610      	mov	r0, r2
 80159d8:	f7ff fc5e 	bl	8015298 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4a52      	ldr	r2, [pc, #328]	; (8015b2c <HAL_ADC_Init+0x2bc>)
 80159e2:	4293      	cmp	r3, r2
 80159e4:	d129      	bne.n	8015a3a <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	7e5b      	ldrb	r3, [r3, #25]
 80159ea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80159f0:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 80159f6:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	689b      	ldr	r3, [r3, #8]
 80159fc:	2b08      	cmp	r3, #8
 80159fe:	d013      	beq.n	8015a28 <HAL_ADC_Init+0x1b8>
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	689b      	ldr	r3, [r3, #8]
 8015a04:	2b0c      	cmp	r3, #12
 8015a06:	d00d      	beq.n	8015a24 <HAL_ADC_Init+0x1b4>
 8015a08:	687b      	ldr	r3, [r7, #4]
 8015a0a:	689b      	ldr	r3, [r3, #8]
 8015a0c:	2b1c      	cmp	r3, #28
 8015a0e:	d007      	beq.n	8015a20 <HAL_ADC_Init+0x1b0>
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	689b      	ldr	r3, [r3, #8]
 8015a14:	2b18      	cmp	r3, #24
 8015a16:	d101      	bne.n	8015a1c <HAL_ADC_Init+0x1ac>
 8015a18:	2318      	movs	r3, #24
 8015a1a:	e006      	b.n	8015a2a <HAL_ADC_Init+0x1ba>
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	e004      	b.n	8015a2a <HAL_ADC_Init+0x1ba>
 8015a20:	2310      	movs	r3, #16
 8015a22:	e002      	b.n	8015a2a <HAL_ADC_Init+0x1ba>
 8015a24:	2308      	movs	r3, #8
 8015a26:	e000      	b.n	8015a2a <HAL_ADC_Init+0x1ba>
 8015a28:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8015a2a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a32:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015a34:	4313      	orrs	r3, r2
 8015a36:	61bb      	str	r3, [r7, #24]
 8015a38:	e00e      	b.n	8015a58 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	7e5b      	ldrb	r3, [r3, #25]
 8015a3e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015a44:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8015a4a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a52:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015a54:	4313      	orrs	r3, r2
 8015a56:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015a5e:	2b01      	cmp	r3, #1
 8015a60:	d106      	bne.n	8015a70 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8015a62:	687b      	ldr	r3, [r7, #4]
 8015a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a66:	3b01      	subs	r3, #1
 8015a68:	045b      	lsls	r3, r3, #17
 8015a6a:	69ba      	ldr	r2, [r7, #24]
 8015a6c:	4313      	orrs	r3, r2
 8015a6e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d009      	beq.n	8015a8c <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015a7c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015a84:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015a86:	69ba      	ldr	r2, [r7, #24]
 8015a88:	4313      	orrs	r3, r2
 8015a8a:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	4a26      	ldr	r2, [pc, #152]	; (8015b2c <HAL_ADC_Init+0x2bc>)
 8015a92:	4293      	cmp	r3, r2
 8015a94:	d115      	bne.n	8015ac2 <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	681b      	ldr	r3, [r3, #0]
 8015a9a:	68da      	ldr	r2, [r3, #12]
 8015a9c:	4b26      	ldr	r3, [pc, #152]	; (8015b38 <HAL_ADC_Init+0x2c8>)
 8015a9e:	4013      	ands	r3, r2
 8015aa0:	687a      	ldr	r2, [r7, #4]
 8015aa2:	6812      	ldr	r2, [r2, #0]
 8015aa4:	69b9      	ldr	r1, [r7, #24]
 8015aa6:	430b      	orrs	r3, r1
 8015aa8:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	691b      	ldr	r3, [r3, #16]
 8015ab0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	430a      	orrs	r2, r1
 8015abe:	611a      	str	r2, [r3, #16]
 8015ac0:	e009      	b.n	8015ad6 <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	68da      	ldr	r2, [r3, #12]
 8015ac8:	4b1c      	ldr	r3, [pc, #112]	; (8015b3c <HAL_ADC_Init+0x2cc>)
 8015aca:	4013      	ands	r3, r2
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	6812      	ldr	r2, [r2, #0]
 8015ad0:	69b9      	ldr	r1, [r7, #24]
 8015ad2:	430b      	orrs	r3, r1
 8015ad4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	681b      	ldr	r3, [r3, #0]
 8015ada:	4618      	mov	r0, r3
 8015adc:	f7ff fea2 	bl	8015824 <LL_ADC_REG_IsConversionOngoing>
 8015ae0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	681b      	ldr	r3, [r3, #0]
 8015ae6:	4618      	mov	r0, r3
 8015ae8:	f7ff feaf 	bl	801584a <LL_ADC_INJ_IsConversionOngoing>
 8015aec:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8015aee:	693b      	ldr	r3, [r7, #16]
 8015af0:	2b00      	cmp	r3, #0
 8015af2:	f040 808e 	bne.w	8015c12 <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	2b00      	cmp	r3, #0
 8015afa:	f040 808a 	bne.w	8015c12 <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	681b      	ldr	r3, [r3, #0]
 8015b02:	4a0a      	ldr	r2, [pc, #40]	; (8015b2c <HAL_ADC_Init+0x2bc>)
 8015b04:	4293      	cmp	r3, r2
 8015b06:	d11b      	bne.n	8015b40 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015b08:	687b      	ldr	r3, [r7, #4]
 8015b0a:	7e1b      	ldrb	r3, [r3, #24]
 8015b0c:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015b14:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8015b16:	4313      	orrs	r3, r2
 8015b18:	61bb      	str	r3, [r7, #24]
 8015b1a:	e018      	b.n	8015b4e <HAL_ADC_Init+0x2de>
 8015b1c:	24000004 	.word	0x24000004
 8015b20:	053e2d63 	.word	0x053e2d63
 8015b24:	40022000 	.word	0x40022000
 8015b28:	40022100 	.word	0x40022100
 8015b2c:	58026000 	.word	0x58026000
 8015b30:	40022300 	.word	0x40022300
 8015b34:	58026300 	.word	0x58026300
 8015b38:	fff04007 	.word	0xfff04007
 8015b3c:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	7e1b      	ldrb	r3, [r3, #24]
 8015b44:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8015b4a:	4313      	orrs	r3, r2
 8015b4c:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	68da      	ldr	r2, [r3, #12]
 8015b54:	4b46      	ldr	r3, [pc, #280]	; (8015c70 <HAL_ADC_Init+0x400>)
 8015b56:	4013      	ands	r3, r2
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	6812      	ldr	r2, [r2, #0]
 8015b5c:	69b9      	ldr	r1, [r7, #24]
 8015b5e:	430b      	orrs	r3, r1
 8015b60:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015b68:	2b01      	cmp	r3, #1
 8015b6a:	d137      	bne.n	8015bdc <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b70:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	4a3f      	ldr	r2, [pc, #252]	; (8015c74 <HAL_ADC_Init+0x404>)
 8015b78:	4293      	cmp	r3, r2
 8015b7a:	d116      	bne.n	8015baa <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	691a      	ldr	r2, [r3, #16]
 8015b82:	4b3d      	ldr	r3, [pc, #244]	; (8015c78 <HAL_ADC_Init+0x408>)
 8015b84:	4013      	ands	r3, r2
 8015b86:	687a      	ldr	r2, [r7, #4]
 8015b88:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8015b8a:	687a      	ldr	r2, [r7, #4]
 8015b8c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015b8e:	4311      	orrs	r1, r2
 8015b90:	687a      	ldr	r2, [r7, #4]
 8015b92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015b94:	4311      	orrs	r1, r2
 8015b96:	687a      	ldr	r2, [r7, #4]
 8015b98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015b9a:	430a      	orrs	r2, r1
 8015b9c:	431a      	orrs	r2, r3
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	681b      	ldr	r3, [r3, #0]
 8015ba2:	f042 0201 	orr.w	r2, r2, #1
 8015ba6:	611a      	str	r2, [r3, #16]
 8015ba8:	e020      	b.n	8015bec <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	691a      	ldr	r2, [r3, #16]
 8015bb0:	4b32      	ldr	r3, [pc, #200]	; (8015c7c <HAL_ADC_Init+0x40c>)
 8015bb2:	4013      	ands	r3, r2
 8015bb4:	687a      	ldr	r2, [r7, #4]
 8015bb6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8015bb8:	3a01      	subs	r2, #1
 8015bba:	0411      	lsls	r1, r2, #16
 8015bbc:	687a      	ldr	r2, [r7, #4]
 8015bbe:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015bc0:	4311      	orrs	r1, r2
 8015bc2:	687a      	ldr	r2, [r7, #4]
 8015bc4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015bc6:	4311      	orrs	r1, r2
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015bcc:	430a      	orrs	r2, r1
 8015bce:	431a      	orrs	r2, r3
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	681b      	ldr	r3, [r3, #0]
 8015bd4:	f042 0201 	orr.w	r2, r2, #1
 8015bd8:	611a      	str	r2, [r3, #16]
 8015bda:	e007      	b.n	8015bec <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	691a      	ldr	r2, [r3, #16]
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	f022 0201 	bic.w	r2, r2, #1
 8015bea:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	691b      	ldr	r3, [r3, #16]
 8015bf2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	681b      	ldr	r3, [r3, #0]
 8015bfe:	430a      	orrs	r2, r1
 8015c00:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	4a1b      	ldr	r2, [pc, #108]	; (8015c74 <HAL_ADC_Init+0x404>)
 8015c08:	4293      	cmp	r3, r2
 8015c0a:	d002      	beq.n	8015c12 <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f001 f9b5 	bl	8016f7c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	691b      	ldr	r3, [r3, #16]
 8015c16:	2b01      	cmp	r3, #1
 8015c18:	d10c      	bne.n	8015c34 <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8015c1a:	687b      	ldr	r3, [r7, #4]
 8015c1c:	681b      	ldr	r3, [r3, #0]
 8015c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c20:	f023 010f 	bic.w	r1, r3, #15
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	69db      	ldr	r3, [r3, #28]
 8015c28:	1e5a      	subs	r2, r3, #1
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	430a      	orrs	r2, r1
 8015c30:	631a      	str	r2, [r3, #48]	; 0x30
 8015c32:	e007      	b.n	8015c44 <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	f022 020f 	bic.w	r2, r2, #15
 8015c42:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015c48:	f023 0303 	bic.w	r3, r3, #3
 8015c4c:	f043 0201 	orr.w	r2, r3, #1
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	661a      	str	r2, [r3, #96]	; 0x60
 8015c54:	e007      	b.n	8015c66 <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015c5a:	f043 0210 	orr.w	r2, r3, #16
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8015c62:	2301      	movs	r3, #1
 8015c64:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8015c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3724      	adds	r7, #36	; 0x24
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd90      	pop	{r4, r7, pc}
 8015c70:	ffffbffc 	.word	0xffffbffc
 8015c74:	58026000 	.word	0x58026000
 8015c78:	fc00f81f 	.word	0xfc00f81f
 8015c7c:	fc00f81e 	.word	0xfc00f81e

08015c80 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8015c80:	b580      	push	{r7, lr}
 8015c82:	b086      	sub	sp, #24
 8015c84:	af00      	add	r7, sp, #0
 8015c86:	60f8      	str	r0, [r7, #12]
 8015c88:	60b9      	str	r1, [r7, #8]
 8015c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015c8c:	68fb      	ldr	r3, [r7, #12]
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	4a60      	ldr	r2, [pc, #384]	; (8015e14 <HAL_ADC_Start_DMA+0x194>)
 8015c92:	4293      	cmp	r3, r2
 8015c94:	d004      	beq.n	8015ca0 <HAL_ADC_Start_DMA+0x20>
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	4a5f      	ldr	r2, [pc, #380]	; (8015e18 <HAL_ADC_Start_DMA+0x198>)
 8015c9c:	4293      	cmp	r3, r2
 8015c9e:	d101      	bne.n	8015ca4 <HAL_ADC_Start_DMA+0x24>
 8015ca0:	4b5e      	ldr	r3, [pc, #376]	; (8015e1c <HAL_ADC_Start_DMA+0x19c>)
 8015ca2:	e000      	b.n	8015ca6 <HAL_ADC_Start_DMA+0x26>
 8015ca4:	4b5e      	ldr	r3, [pc, #376]	; (8015e20 <HAL_ADC_Start_DMA+0x1a0>)
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7ff fd16 	bl	80156d8 <LL_ADC_GetMultimode>
 8015cac:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015cae:	68fb      	ldr	r3, [r7, #12]
 8015cb0:	681b      	ldr	r3, [r3, #0]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f7ff fdb6 	bl	8015824 <LL_ADC_REG_IsConversionOngoing>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	f040 80a2 	bne.w	8015e04 <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8015cc6:	2b01      	cmp	r3, #1
 8015cc8:	d101      	bne.n	8015cce <HAL_ADC_Start_DMA+0x4e>
 8015cca:	2302      	movs	r3, #2
 8015ccc:	e09d      	b.n	8015e0a <HAL_ADC_Start_DMA+0x18a>
 8015cce:	68fb      	ldr	r3, [r7, #12]
 8015cd0:	2201      	movs	r2, #1
 8015cd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015cd6:	693b      	ldr	r3, [r7, #16]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d006      	beq.n	8015cea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015cdc:	693b      	ldr	r3, [r7, #16]
 8015cde:	2b05      	cmp	r3, #5
 8015ce0:	d003      	beq.n	8015cea <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015ce2:	693b      	ldr	r3, [r7, #16]
 8015ce4:	2b09      	cmp	r3, #9
 8015ce6:	f040 8086 	bne.w	8015df6 <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8015cea:	68f8      	ldr	r0, [r7, #12]
 8015cec:	f001 f828 	bl	8016d40 <ADC_Enable>
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8015cf4:	7dfb      	ldrb	r3, [r7, #23]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d178      	bne.n	8015dec <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015cfe:	4b49      	ldr	r3, [pc, #292]	; (8015e24 <HAL_ADC_Start_DMA+0x1a4>)
 8015d00:	4013      	ands	r3, r2
 8015d02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015d0a:	68fb      	ldr	r3, [r7, #12]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	4a42      	ldr	r2, [pc, #264]	; (8015e18 <HAL_ADC_Start_DMA+0x198>)
 8015d10:	4293      	cmp	r3, r2
 8015d12:	d002      	beq.n	8015d1a <HAL_ADC_Start_DMA+0x9a>
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	e000      	b.n	8015d1c <HAL_ADC_Start_DMA+0x9c>
 8015d1a:	4b3e      	ldr	r3, [pc, #248]	; (8015e14 <HAL_ADC_Start_DMA+0x194>)
 8015d1c:	68fa      	ldr	r2, [r7, #12]
 8015d1e:	6812      	ldr	r2, [r2, #0]
 8015d20:	4293      	cmp	r3, r2
 8015d22:	d002      	beq.n	8015d2a <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d105      	bne.n	8015d36 <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8015d2a:	68fb      	ldr	r3, [r7, #12]
 8015d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d2e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015d3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d006      	beq.n	8015d50 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8015d42:	68fb      	ldr	r3, [r7, #12]
 8015d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015d46:	f023 0206 	bic.w	r2, r3, #6
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	665a      	str	r2, [r3, #100]	; 0x64
 8015d4e:	e002      	b.n	8015d56 <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8015d50:	68fb      	ldr	r3, [r7, #12]
 8015d52:	2200      	movs	r2, #0
 8015d54:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d5a:	4a33      	ldr	r2, [pc, #204]	; (8015e28 <HAL_ADC_Start_DMA+0x1a8>)
 8015d5c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015d5e:	68fb      	ldr	r3, [r7, #12]
 8015d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d62:	4a32      	ldr	r2, [pc, #200]	; (8015e2c <HAL_ADC_Start_DMA+0x1ac>)
 8015d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8015d66:	68fb      	ldr	r3, [r7, #12]
 8015d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015d6a:	4a31      	ldr	r2, [pc, #196]	; (8015e30 <HAL_ADC_Start_DMA+0x1b0>)
 8015d6c:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	221c      	movs	r2, #28
 8015d74:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8015d76:	68fb      	ldr	r3, [r7, #12]
 8015d78:	2200      	movs	r2, #0
 8015d7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	685a      	ldr	r2, [r3, #4]
 8015d84:	68fb      	ldr	r3, [r7, #12]
 8015d86:	681b      	ldr	r3, [r3, #0]
 8015d88:	f042 0210 	orr.w	r2, r2, #16
 8015d8c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015d8e:	68fb      	ldr	r3, [r7, #12]
 8015d90:	681b      	ldr	r3, [r3, #0]
 8015d92:	4a28      	ldr	r2, [pc, #160]	; (8015e34 <HAL_ADC_Start_DMA+0x1b4>)
 8015d94:	4293      	cmp	r3, r2
 8015d96:	d10f      	bne.n	8015db8 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	68fb      	ldr	r3, [r7, #12]
 8015d9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015da2:	005b      	lsls	r3, r3, #1
 8015da4:	4619      	mov	r1, r3
 8015da6:	4610      	mov	r0, r2
 8015da8:	f7ff fbfe 	bl	80155a8 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8015dac:	68fb      	ldr	r3, [r7, #12]
 8015dae:	681b      	ldr	r3, [r3, #0]
 8015db0:	4618      	mov	r0, r3
 8015db2:	f7ff fbe9 	bl	8015588 <LL_ADC_EnableDMAReq>
 8015db6:	e007      	b.n	8015dc8 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	681a      	ldr	r2, [r3, #0]
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dc0:	4619      	mov	r1, r3
 8015dc2:	4610      	mov	r0, r2
 8015dc4:	f7ff fbcd 	bl	8015562 <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	681b      	ldr	r3, [r3, #0]
 8015dd0:	3340      	adds	r3, #64	; 0x40
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	68ba      	ldr	r2, [r7, #8]
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f001 ff7c 	bl	8017cd4 <HAL_DMA_Start_IT>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8015de0:	68fb      	ldr	r3, [r7, #12]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7ff fd09 	bl	80157fc <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8015dea:	e00d      	b.n	8015e08 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015dec:	68fb      	ldr	r3, [r7, #12]
 8015dee:	2200      	movs	r2, #0
 8015df0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8015df4:	e008      	b.n	8015e08 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8015df6:	2301      	movs	r3, #1
 8015df8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	2200      	movs	r2, #0
 8015dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8015e02:	e001      	b.n	8015e08 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8015e04:	2302      	movs	r3, #2
 8015e06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8015e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e0a:	4618      	mov	r0, r3
 8015e0c:	3718      	adds	r7, #24
 8015e0e:	46bd      	mov	sp, r7
 8015e10:	bd80      	pop	{r7, pc}
 8015e12:	bf00      	nop
 8015e14:	40022000 	.word	0x40022000
 8015e18:	40022100 	.word	0x40022100
 8015e1c:	40022300 	.word	0x40022300
 8015e20:	58026300 	.word	0x58026300
 8015e24:	fffff0fe 	.word	0xfffff0fe
 8015e28:	08016e55 	.word	0x08016e55
 8015e2c:	08016f2d 	.word	0x08016f2d
 8015e30:	08016f49 	.word	0x08016f49
 8015e34:	58026000 	.word	0x58026000

08015e38 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8015e38:	b580      	push	{r7, lr}
 8015e3a:	b08a      	sub	sp, #40	; 0x28
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8015e40:	2300      	movs	r3, #0
 8015e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	685b      	ldr	r3, [r3, #4]
 8015e52:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	4a87      	ldr	r2, [pc, #540]	; (8016078 <HAL_ADC_IRQHandler+0x240>)
 8015e5a:	4293      	cmp	r3, r2
 8015e5c:	d004      	beq.n	8015e68 <HAL_ADC_IRQHandler+0x30>
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	4a86      	ldr	r2, [pc, #536]	; (801607c <HAL_ADC_IRQHandler+0x244>)
 8015e64:	4293      	cmp	r3, r2
 8015e66:	d101      	bne.n	8015e6c <HAL_ADC_IRQHandler+0x34>
 8015e68:	4b85      	ldr	r3, [pc, #532]	; (8016080 <HAL_ADC_IRQHandler+0x248>)
 8015e6a:	e000      	b.n	8015e6e <HAL_ADC_IRQHandler+0x36>
 8015e6c:	4b85      	ldr	r3, [pc, #532]	; (8016084 <HAL_ADC_IRQHandler+0x24c>)
 8015e6e:	4618      	mov	r0, r3
 8015e70:	f7ff fc32 	bl	80156d8 <LL_ADC_GetMultimode>
 8015e74:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8015e76:	69fb      	ldr	r3, [r7, #28]
 8015e78:	f003 0302 	and.w	r3, r3, #2
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d017      	beq.n	8015eb0 <HAL_ADC_IRQHandler+0x78>
 8015e80:	69bb      	ldr	r3, [r7, #24]
 8015e82:	f003 0302 	and.w	r3, r3, #2
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d012      	beq.n	8015eb0 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e8e:	f003 0310 	and.w	r3, r3, #16
 8015e92:	2b00      	cmp	r3, #0
 8015e94:	d105      	bne.n	8015ea2 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015e9a:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f001 f9a6 	bl	80171f4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	2202      	movs	r2, #2
 8015eae:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015eb0:	69fb      	ldr	r3, [r7, #28]
 8015eb2:	f003 0304 	and.w	r3, r3, #4
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d004      	beq.n	8015ec4 <HAL_ADC_IRQHandler+0x8c>
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	f003 0304 	and.w	r3, r3, #4
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d10a      	bne.n	8015eda <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015ec4:	69fb      	ldr	r3, [r7, #28]
 8015ec6:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	f000 8083 	beq.w	8015fd6 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015ed0:	69bb      	ldr	r3, [r7, #24]
 8015ed2:	f003 0308 	and.w	r3, r3, #8
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d07d      	beq.n	8015fd6 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015ede:	f003 0310 	and.w	r3, r3, #16
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d105      	bne.n	8015ef2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015eea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	681b      	ldr	r3, [r3, #0]
 8015ef6:	4618      	mov	r0, r3
 8015ef8:	f7ff faf4 	bl	80154e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8015efc:	4603      	mov	r3, r0
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d062      	beq.n	8015fc8 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	681b      	ldr	r3, [r3, #0]
 8015f06:	4a5d      	ldr	r2, [pc, #372]	; (801607c <HAL_ADC_IRQHandler+0x244>)
 8015f08:	4293      	cmp	r3, r2
 8015f0a:	d002      	beq.n	8015f12 <HAL_ADC_IRQHandler+0xda>
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	e000      	b.n	8015f14 <HAL_ADC_IRQHandler+0xdc>
 8015f12:	4b59      	ldr	r3, [pc, #356]	; (8016078 <HAL_ADC_IRQHandler+0x240>)
 8015f14:	687a      	ldr	r2, [r7, #4]
 8015f16:	6812      	ldr	r2, [r2, #0]
 8015f18:	4293      	cmp	r3, r2
 8015f1a:	d008      	beq.n	8015f2e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015f1c:	697b      	ldr	r3, [r7, #20]
 8015f1e:	2b00      	cmp	r3, #0
 8015f20:	d005      	beq.n	8015f2e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015f22:	697b      	ldr	r3, [r7, #20]
 8015f24:	2b05      	cmp	r3, #5
 8015f26:	d002      	beq.n	8015f2e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015f28:	697b      	ldr	r3, [r7, #20]
 8015f2a:	2b09      	cmp	r3, #9
 8015f2c:	d104      	bne.n	8015f38 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	68db      	ldr	r3, [r3, #12]
 8015f34:	623b      	str	r3, [r7, #32]
 8015f36:	e00c      	b.n	8015f52 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	4a4f      	ldr	r2, [pc, #316]	; (801607c <HAL_ADC_IRQHandler+0x244>)
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d002      	beq.n	8015f48 <HAL_ADC_IRQHandler+0x110>
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	e000      	b.n	8015f4a <HAL_ADC_IRQHandler+0x112>
 8015f48:	4b4b      	ldr	r3, [pc, #300]	; (8016078 <HAL_ADC_IRQHandler+0x240>)
 8015f4a:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8015f4c:	693b      	ldr	r3, [r7, #16]
 8015f4e:	68db      	ldr	r3, [r3, #12]
 8015f50:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8015f52:	6a3b      	ldr	r3, [r7, #32]
 8015f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d135      	bne.n	8015fc8 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	681b      	ldr	r3, [r3, #0]
 8015f62:	f003 0308 	and.w	r3, r3, #8
 8015f66:	2b08      	cmp	r3, #8
 8015f68:	d12e      	bne.n	8015fc8 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7ff fc58 	bl	8015824 <LL_ADC_REG_IsConversionOngoing>
 8015f74:	4603      	mov	r3, r0
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d11a      	bne.n	8015fb0 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	685a      	ldr	r2, [r3, #4]
 8015f80:	687b      	ldr	r3, [r7, #4]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	f022 020c 	bic.w	r2, r2, #12
 8015f88:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d112      	bne.n	8015fc8 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015fa6:	f043 0201 	orr.w	r2, r3, #1
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	661a      	str	r2, [r3, #96]	; 0x60
 8015fae:	e00b      	b.n	8015fc8 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015fb4:	f043 0210 	orr.w	r2, r3, #16
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015fc0:	f043 0201 	orr.w	r2, r3, #1
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8015fc8:	6878      	ldr	r0, [r7, #4]
 8015fca:	f7f8 f920 	bl	800e20e <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	681b      	ldr	r3, [r3, #0]
 8015fd2:	220c      	movs	r2, #12
 8015fd4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8015fd6:	69fb      	ldr	r3, [r7, #28]
 8015fd8:	f003 0320 	and.w	r3, r3, #32
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d004      	beq.n	8015fea <HAL_ADC_IRQHandler+0x1b2>
 8015fe0:	69bb      	ldr	r3, [r7, #24]
 8015fe2:	f003 0320 	and.w	r3, r3, #32
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d10b      	bne.n	8016002 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8015fea:	69fb      	ldr	r3, [r7, #28]
 8015fec:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	f000 80a0 	beq.w	8016136 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8015ff6:	69bb      	ldr	r3, [r7, #24]
 8015ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	f000 809a 	beq.w	8016136 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016006:	f003 0310 	and.w	r3, r3, #16
 801600a:	2b00      	cmp	r3, #0
 801600c:	d105      	bne.n	801601a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016012:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	4618      	mov	r0, r3
 8016020:	f7ff fadc 	bl	80155dc <LL_ADC_INJ_IsTriggerSourceSWStart>
 8016024:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	4618      	mov	r0, r3
 801602c:	f7ff fa5a 	bl	80154e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8016030:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016032:	687b      	ldr	r3, [r7, #4]
 8016034:	681b      	ldr	r3, [r3, #0]
 8016036:	4a11      	ldr	r2, [pc, #68]	; (801607c <HAL_ADC_IRQHandler+0x244>)
 8016038:	4293      	cmp	r3, r2
 801603a:	d002      	beq.n	8016042 <HAL_ADC_IRQHandler+0x20a>
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	681b      	ldr	r3, [r3, #0]
 8016040:	e000      	b.n	8016044 <HAL_ADC_IRQHandler+0x20c>
 8016042:	4b0d      	ldr	r3, [pc, #52]	; (8016078 <HAL_ADC_IRQHandler+0x240>)
 8016044:	687a      	ldr	r2, [r7, #4]
 8016046:	6812      	ldr	r2, [r2, #0]
 8016048:	4293      	cmp	r3, r2
 801604a:	d008      	beq.n	801605e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801604c:	697b      	ldr	r3, [r7, #20]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d005      	beq.n	801605e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8016052:	697b      	ldr	r3, [r7, #20]
 8016054:	2b06      	cmp	r3, #6
 8016056:	d002      	beq.n	801605e <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	2b07      	cmp	r3, #7
 801605c:	d104      	bne.n	8016068 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801605e:	687b      	ldr	r3, [r7, #4]
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	68db      	ldr	r3, [r3, #12]
 8016064:	623b      	str	r3, [r7, #32]
 8016066:	e014      	b.n	8016092 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	4a03      	ldr	r2, [pc, #12]	; (801607c <HAL_ADC_IRQHandler+0x244>)
 801606e:	4293      	cmp	r3, r2
 8016070:	d00a      	beq.n	8016088 <HAL_ADC_IRQHandler+0x250>
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	e008      	b.n	801608a <HAL_ADC_IRQHandler+0x252>
 8016078:	40022000 	.word	0x40022000
 801607c:	40022100 	.word	0x40022100
 8016080:	40022300 	.word	0x40022300
 8016084:	58026300 	.word	0x58026300
 8016088:	4b84      	ldr	r3, [pc, #528]	; (801629c <HAL_ADC_IRQHandler+0x464>)
 801608a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	68db      	ldr	r3, [r3, #12]
 8016090:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8016092:	68fb      	ldr	r3, [r7, #12]
 8016094:	2b00      	cmp	r3, #0
 8016096:	d047      	beq.n	8016128 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8016098:	6a3b      	ldr	r3, [r7, #32]
 801609a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d007      	beq.n	80160b2 <HAL_ADC_IRQHandler+0x27a>
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d03f      	beq.n	8016128 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80160a8:	6a3b      	ldr	r3, [r7, #32]
 80160aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d13a      	bne.n	8016128 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80160b2:	687b      	ldr	r3, [r7, #4]
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80160bc:	2b40      	cmp	r3, #64	; 0x40
 80160be:	d133      	bne.n	8016128 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80160c0:	6a3b      	ldr	r3, [r7, #32]
 80160c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d12e      	bne.n	8016128 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80160ca:	687b      	ldr	r3, [r7, #4]
 80160cc:	681b      	ldr	r3, [r3, #0]
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7ff fbbb 	bl	801584a <LL_ADC_INJ_IsConversionOngoing>
 80160d4:	4603      	mov	r3, r0
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d11a      	bne.n	8016110 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	681b      	ldr	r3, [r3, #0]
 80160de:	685a      	ldr	r2, [r3, #4]
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80160e8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80160f6:	687b      	ldr	r3, [r7, #4]
 80160f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80160fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d112      	bne.n	8016128 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016106:	f043 0201 	orr.w	r2, r3, #1
 801610a:	687b      	ldr	r3, [r7, #4]
 801610c:	661a      	str	r2, [r3, #96]	; 0x60
 801610e:	e00b      	b.n	8016128 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016114:	f043 0210 	orr.w	r2, r3, #16
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801611c:	687b      	ldr	r3, [r7, #4]
 801611e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016120:	f043 0201 	orr.w	r2, r3, #1
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f001 f83b 	bl	80171a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	2260      	movs	r2, #96	; 0x60
 8016134:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8016136:	69fb      	ldr	r3, [r7, #28]
 8016138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801613c:	2b00      	cmp	r3, #0
 801613e:	d011      	beq.n	8016164 <HAL_ADC_IRQHandler+0x32c>
 8016140:	69bb      	ldr	r3, [r7, #24]
 8016142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016146:	2b00      	cmp	r3, #0
 8016148:	d00c      	beq.n	8016164 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801614e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f000 f8b2 	bl	80162c0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	2280      	movs	r2, #128	; 0x80
 8016162:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8016164:	69fb      	ldr	r3, [r7, #28]
 8016166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801616a:	2b00      	cmp	r3, #0
 801616c:	d012      	beq.n	8016194 <HAL_ADC_IRQHandler+0x35c>
 801616e:	69bb      	ldr	r3, [r7, #24]
 8016170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016174:	2b00      	cmp	r3, #0
 8016176:	d00d      	beq.n	8016194 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801617c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f001 f821 	bl	80171cc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	681b      	ldr	r3, [r3, #0]
 801618e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016192:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8016194:	69fb      	ldr	r3, [r7, #28]
 8016196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801619a:	2b00      	cmp	r3, #0
 801619c:	d012      	beq.n	80161c4 <HAL_ADC_IRQHandler+0x38c>
 801619e:	69bb      	ldr	r3, [r7, #24]
 80161a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80161a4:	2b00      	cmp	r3, #0
 80161a6:	d00d      	beq.n	80161c4 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80161b4:	6878      	ldr	r0, [r7, #4]
 80161b6:	f001 f813 	bl	80171e0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80161c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80161c4:	69fb      	ldr	r3, [r7, #28]
 80161c6:	f003 0310 	and.w	r3, r3, #16
 80161ca:	2b00      	cmp	r3, #0
 80161cc:	d043      	beq.n	8016256 <HAL_ADC_IRQHandler+0x41e>
 80161ce:	69bb      	ldr	r3, [r7, #24]
 80161d0:	f003 0310 	and.w	r3, r3, #16
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d03e      	beq.n	8016256 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d102      	bne.n	80161e6 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 80161e0:	2301      	movs	r3, #1
 80161e2:	627b      	str	r3, [r7, #36]	; 0x24
 80161e4:	e021      	b.n	801622a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80161e6:	697b      	ldr	r3, [r7, #20]
 80161e8:	2b00      	cmp	r3, #0
 80161ea:	d015      	beq.n	8016218 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	4a2a      	ldr	r2, [pc, #168]	; (801629c <HAL_ADC_IRQHandler+0x464>)
 80161f2:	4293      	cmp	r3, r2
 80161f4:	d004      	beq.n	8016200 <HAL_ADC_IRQHandler+0x3c8>
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	681b      	ldr	r3, [r3, #0]
 80161fa:	4a29      	ldr	r2, [pc, #164]	; (80162a0 <HAL_ADC_IRQHandler+0x468>)
 80161fc:	4293      	cmp	r3, r2
 80161fe:	d101      	bne.n	8016204 <HAL_ADC_IRQHandler+0x3cc>
 8016200:	4b28      	ldr	r3, [pc, #160]	; (80162a4 <HAL_ADC_IRQHandler+0x46c>)
 8016202:	e000      	b.n	8016206 <HAL_ADC_IRQHandler+0x3ce>
 8016204:	4b28      	ldr	r3, [pc, #160]	; (80162a8 <HAL_ADC_IRQHandler+0x470>)
 8016206:	4618      	mov	r0, r3
 8016208:	f7ff fa74 	bl	80156f4 <LL_ADC_GetMultiDMATransfer>
 801620c:	4603      	mov	r3, r0
 801620e:	2b00      	cmp	r3, #0
 8016210:	d00b      	beq.n	801622a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8016212:	2301      	movs	r3, #1
 8016214:	627b      	str	r3, [r7, #36]	; 0x24
 8016216:	e008      	b.n	801622a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	681b      	ldr	r3, [r3, #0]
 801621c:	68db      	ldr	r3, [r3, #12]
 801621e:	f003 0303 	and.w	r3, r3, #3
 8016222:	2b00      	cmp	r3, #0
 8016224:	d001      	beq.n	801622a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8016226:	2301      	movs	r3, #1
 8016228:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 801622a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801622c:	2b01      	cmp	r3, #1
 801622e:	d10e      	bne.n	801624e <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8016230:	687b      	ldr	r3, [r7, #4]
 8016232:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016234:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016238:	687b      	ldr	r3, [r7, #4]
 801623a:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 801623c:	687b      	ldr	r3, [r7, #4]
 801623e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016240:	f043 0202 	orr.w	r2, r3, #2
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f000 f843 	bl	80162d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	2210      	movs	r2, #16
 8016254:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8016256:	69fb      	ldr	r3, [r7, #28]
 8016258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801625c:	2b00      	cmp	r3, #0
 801625e:	d018      	beq.n	8016292 <HAL_ADC_IRQHandler+0x45a>
 8016260:	69bb      	ldr	r3, [r7, #24]
 8016262:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016266:	2b00      	cmp	r3, #0
 8016268:	d013      	beq.n	8016292 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 801626a:	687b      	ldr	r3, [r7, #4]
 801626c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801626e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801627a:	f043 0208 	orr.w	r2, r3, #8
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801628a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f000 ff93 	bl	80171b8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8016292:	bf00      	nop
 8016294:	3728      	adds	r7, #40	; 0x28
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	40022000 	.word	0x40022000
 80162a0:	40022100 	.word	0x40022100
 80162a4:	40022300 	.word	0x40022300
 80162a8:	58026300 	.word	0x58026300

080162ac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80162ac:	b480      	push	{r7}
 80162ae:	b083      	sub	sp, #12
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80162b4:	bf00      	nop
 80162b6:	370c      	adds	r7, #12
 80162b8:	46bd      	mov	sp, r7
 80162ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162be:	4770      	bx	lr

080162c0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80162c0:	b480      	push	{r7}
 80162c2:	b083      	sub	sp, #12
 80162c4:	af00      	add	r7, sp, #0
 80162c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80162c8:	bf00      	nop
 80162ca:	370c      	adds	r7, #12
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr

080162d4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80162d4:	b480      	push	{r7}
 80162d6:	b083      	sub	sp, #12
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80162dc:	bf00      	nop
 80162de:	370c      	adds	r7, #12
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr

080162e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80162e8:	b590      	push	{r4, r7, lr}
 80162ea:	b0b9      	sub	sp, #228	; 0xe4
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
 80162f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80162f2:	2300      	movs	r3, #0
 80162f4:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80162f8:	2300      	movs	r3, #0
 80162fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 80162fc:	687b      	ldr	r3, [r7, #4]
 80162fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016302:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	68db      	ldr	r3, [r3, #12]
 8016308:	4aa9      	ldr	r2, [pc, #676]	; (80165b0 <HAL_ADC_ConfigChannel+0x2c8>)
 801630a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8016312:	2b01      	cmp	r3, #1
 8016314:	d102      	bne.n	801631c <HAL_ADC_ConfigChannel+0x34>
 8016316:	2302      	movs	r3, #2
 8016318:	f000 bcfa 	b.w	8016d10 <HAL_ADC_ConfigChannel+0xa28>
 801631c:	687b      	ldr	r3, [r7, #4]
 801631e:	2201      	movs	r2, #1
 8016320:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	4618      	mov	r0, r3
 801632a:	f7ff fa7b 	bl	8015824 <LL_ADC_REG_IsConversionOngoing>
 801632e:	4603      	mov	r3, r0
 8016330:	2b00      	cmp	r3, #0
 8016332:	f040 84de 	bne.w	8016cf2 <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681b      	ldr	r3, [r3, #0]
 801633a:	4a9e      	ldr	r2, [pc, #632]	; (80165b4 <HAL_ADC_ConfigChannel+0x2cc>)
 801633c:	4293      	cmp	r3, r2
 801633e:	d033      	beq.n	80163a8 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8016340:	683b      	ldr	r3, [r7, #0]
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016348:	2b00      	cmp	r3, #0
 801634a:	d108      	bne.n	801635e <HAL_ADC_ConfigChannel+0x76>
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	0e9b      	lsrs	r3, r3, #26
 8016352:	f003 031f 	and.w	r3, r3, #31
 8016356:	2201      	movs	r2, #1
 8016358:	fa02 f303 	lsl.w	r3, r2, r3
 801635c:	e01d      	b.n	801639a <HAL_ADC_ConfigChannel+0xb2>
 801635e:	683b      	ldr	r3, [r7, #0]
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016366:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801636a:	fa93 f3a3 	rbit	r3, r3
 801636e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8016372:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016376:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801637a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801637e:	2b00      	cmp	r3, #0
 8016380:	d101      	bne.n	8016386 <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 8016382:	2320      	movs	r3, #32
 8016384:	e004      	b.n	8016390 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 8016386:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801638a:	fab3 f383 	clz	r3, r3
 801638e:	b2db      	uxtb	r3, r3
 8016390:	f003 031f 	and.w	r3, r3, #31
 8016394:	2201      	movs	r2, #1
 8016396:	fa02 f303 	lsl.w	r3, r2, r3
 801639a:	687a      	ldr	r2, [r7, #4]
 801639c:	6812      	ldr	r2, [r2, #0]
 801639e:	69d1      	ldr	r1, [r2, #28]
 80163a0:	687a      	ldr	r2, [r7, #4]
 80163a2:	6812      	ldr	r2, [r2, #0]
 80163a4:	430b      	orrs	r3, r1
 80163a6:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	6818      	ldr	r0, [r3, #0]
 80163ac:	683b      	ldr	r3, [r7, #0]
 80163ae:	6859      	ldr	r1, [r3, #4]
 80163b0:	683b      	ldr	r3, [r7, #0]
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	461a      	mov	r2, r3
 80163b6:	f7ff f8a8 	bl	801550a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80163ba:	687b      	ldr	r3, [r7, #4]
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	4618      	mov	r0, r3
 80163c0:	f7ff fa30 	bl	8015824 <LL_ADC_REG_IsConversionOngoing>
 80163c4:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7ff fa3c 	bl	801584a <LL_ADC_INJ_IsConversionOngoing>
 80163d2:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80163d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80163da:	2b00      	cmp	r3, #0
 80163dc:	f040 8270 	bne.w	80168c0 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80163e0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	f040 826b 	bne.w	80168c0 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80163ea:	687b      	ldr	r3, [r7, #4]
 80163ec:	6818      	ldr	r0, [r3, #0]
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	6819      	ldr	r1, [r3, #0]
 80163f2:	683b      	ldr	r3, [r7, #0]
 80163f4:	689b      	ldr	r3, [r3, #8]
 80163f6:	461a      	mov	r2, r3
 80163f8:	f7ff f903 	bl	8015602 <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	681b      	ldr	r3, [r3, #0]
 8016400:	4a6c      	ldr	r2, [pc, #432]	; (80165b4 <HAL_ADC_ConfigChannel+0x2cc>)
 8016402:	4293      	cmp	r3, r2
 8016404:	d10d      	bne.n	8016422 <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	695a      	ldr	r2, [r3, #20]
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	68db      	ldr	r3, [r3, #12]
 8016410:	08db      	lsrs	r3, r3, #3
 8016412:	f003 0303 	and.w	r3, r3, #3
 8016416:	005b      	lsls	r3, r3, #1
 8016418:	fa02 f303 	lsl.w	r3, r2, r3
 801641c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016420:	e032      	b.n	8016488 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8016422:	4b65      	ldr	r3, [pc, #404]	; (80165b8 <HAL_ADC_ConfigChannel+0x2d0>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801642a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801642e:	d10b      	bne.n	8016448 <HAL_ADC_ConfigChannel+0x160>
 8016430:	683b      	ldr	r3, [r7, #0]
 8016432:	695a      	ldr	r2, [r3, #20]
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	681b      	ldr	r3, [r3, #0]
 8016438:	68db      	ldr	r3, [r3, #12]
 801643a:	089b      	lsrs	r3, r3, #2
 801643c:	f003 0307 	and.w	r3, r3, #7
 8016440:	005b      	lsls	r3, r3, #1
 8016442:	fa02 f303 	lsl.w	r3, r2, r3
 8016446:	e01d      	b.n	8016484 <HAL_ADC_ConfigChannel+0x19c>
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	681b      	ldr	r3, [r3, #0]
 801644c:	68db      	ldr	r3, [r3, #12]
 801644e:	f003 0310 	and.w	r3, r3, #16
 8016452:	2b00      	cmp	r3, #0
 8016454:	d10b      	bne.n	801646e <HAL_ADC_ConfigChannel+0x186>
 8016456:	683b      	ldr	r3, [r7, #0]
 8016458:	695a      	ldr	r2, [r3, #20]
 801645a:	687b      	ldr	r3, [r7, #4]
 801645c:	681b      	ldr	r3, [r3, #0]
 801645e:	68db      	ldr	r3, [r3, #12]
 8016460:	089b      	lsrs	r3, r3, #2
 8016462:	f003 0307 	and.w	r3, r3, #7
 8016466:	005b      	lsls	r3, r3, #1
 8016468:	fa02 f303 	lsl.w	r3, r2, r3
 801646c:	e00a      	b.n	8016484 <HAL_ADC_ConfigChannel+0x19c>
 801646e:	683b      	ldr	r3, [r7, #0]
 8016470:	695a      	ldr	r2, [r3, #20]
 8016472:	687b      	ldr	r3, [r7, #4]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	68db      	ldr	r3, [r3, #12]
 8016478:	089b      	lsrs	r3, r3, #2
 801647a:	f003 0304 	and.w	r3, r3, #4
 801647e:	005b      	lsls	r3, r3, #1
 8016480:	fa02 f303 	lsl.w	r3, r2, r3
 8016484:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8016488:	683b      	ldr	r3, [r7, #0]
 801648a:	691b      	ldr	r3, [r3, #16]
 801648c:	2b04      	cmp	r3, #4
 801648e:	d048      	beq.n	8016522 <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	6818      	ldr	r0, [r3, #0]
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	6919      	ldr	r1, [r3, #16]
 8016498:	683b      	ldr	r3, [r7, #0]
 801649a:	681a      	ldr	r2, [r3, #0]
 801649c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80164a0:	f7fe ff2e 	bl	8015300 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	4a42      	ldr	r2, [pc, #264]	; (80165b4 <HAL_ADC_ConfigChannel+0x2cc>)
 80164aa:	4293      	cmp	r3, r2
 80164ac:	d119      	bne.n	80164e2 <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	6818      	ldr	r0, [r3, #0]
 80164b2:	683b      	ldr	r3, [r7, #0]
 80164b4:	6919      	ldr	r1, [r3, #16]
 80164b6:	683b      	ldr	r3, [r7, #0]
 80164b8:	69db      	ldr	r3, [r3, #28]
 80164ba:	461a      	mov	r2, r3
 80164bc:	f7fe ffc6 	bl	801544c <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	6818      	ldr	r0, [r3, #0]
 80164c4:	683b      	ldr	r3, [r7, #0]
 80164c6:	6919      	ldr	r1, [r3, #16]
 80164c8:	683b      	ldr	r3, [r7, #0]
 80164ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80164ce:	2b01      	cmp	r3, #1
 80164d0:	d102      	bne.n	80164d8 <HAL_ADC_ConfigChannel+0x1f0>
 80164d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80164d6:	e000      	b.n	80164da <HAL_ADC_ConfigChannel+0x1f2>
 80164d8:	2300      	movs	r3, #0
 80164da:	461a      	mov	r2, r3
 80164dc:	f7fe ff94 	bl	8015408 <LL_ADC_SetOffsetSaturation>
 80164e0:	e1ee      	b.n	80168c0 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80164e2:	687b      	ldr	r3, [r7, #4]
 80164e4:	6818      	ldr	r0, [r3, #0]
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	6919      	ldr	r1, [r3, #16]
 80164ea:	683b      	ldr	r3, [r7, #0]
 80164ec:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80164f0:	2b01      	cmp	r3, #1
 80164f2:	d102      	bne.n	80164fa <HAL_ADC_ConfigChannel+0x212>
 80164f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80164f8:	e000      	b.n	80164fc <HAL_ADC_ConfigChannel+0x214>
 80164fa:	2300      	movs	r3, #0
 80164fc:	461a      	mov	r2, r3
 80164fe:	f7fe ff61 	bl	80153c4 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	6818      	ldr	r0, [r3, #0]
 8016506:	683b      	ldr	r3, [r7, #0]
 8016508:	6919      	ldr	r1, [r3, #16]
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	7e1b      	ldrb	r3, [r3, #24]
 801650e:	2b01      	cmp	r3, #1
 8016510:	d102      	bne.n	8016518 <HAL_ADC_ConfigChannel+0x230>
 8016512:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016516:	e000      	b.n	801651a <HAL_ADC_ConfigChannel+0x232>
 8016518:	2300      	movs	r3, #0
 801651a:	461a      	mov	r2, r3
 801651c:	f7fe ff38 	bl	8015390 <LL_ADC_SetDataRightShift>
 8016520:	e1ce      	b.n	80168c0 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	4a23      	ldr	r2, [pc, #140]	; (80165b4 <HAL_ADC_ConfigChannel+0x2cc>)
 8016528:	4293      	cmp	r3, r2
 801652a:	f040 8181 	bne.w	8016830 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	2100      	movs	r1, #0
 8016534:	4618      	mov	r0, r3
 8016536:	f7fe ff15 	bl	8015364 <LL_ADC_GetOffsetChannel>
 801653a:	4603      	mov	r3, r0
 801653c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016540:	2b00      	cmp	r3, #0
 8016542:	d10a      	bne.n	801655a <HAL_ADC_ConfigChannel+0x272>
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	2100      	movs	r1, #0
 801654a:	4618      	mov	r0, r3
 801654c:	f7fe ff0a 	bl	8015364 <LL_ADC_GetOffsetChannel>
 8016550:	4603      	mov	r3, r0
 8016552:	0e9b      	lsrs	r3, r3, #26
 8016554:	f003 021f 	and.w	r2, r3, #31
 8016558:	e01e      	b.n	8016598 <HAL_ADC_ConfigChannel+0x2b0>
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	2100      	movs	r1, #0
 8016560:	4618      	mov	r0, r3
 8016562:	f7fe feff 	bl	8015364 <LL_ADC_GetOffsetChannel>
 8016566:	4603      	mov	r3, r0
 8016568:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801656c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8016570:	fa93 f3a3 	rbit	r3, r3
 8016574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8016578:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801657c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8016580:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016584:	2b00      	cmp	r3, #0
 8016586:	d101      	bne.n	801658c <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8016588:	2320      	movs	r3, #32
 801658a:	e004      	b.n	8016596 <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 801658c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016590:	fab3 f383 	clz	r3, r3
 8016594:	b2db      	uxtb	r3, r3
 8016596:	461a      	mov	r2, r3
 8016598:	683b      	ldr	r3, [r7, #0]
 801659a:	681b      	ldr	r3, [r3, #0]
 801659c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80165a0:	2b00      	cmp	r3, #0
 80165a2:	d10b      	bne.n	80165bc <HAL_ADC_ConfigChannel+0x2d4>
 80165a4:	683b      	ldr	r3, [r7, #0]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	0e9b      	lsrs	r3, r3, #26
 80165aa:	f003 031f 	and.w	r3, r3, #31
 80165ae:	e01e      	b.n	80165ee <HAL_ADC_ConfigChannel+0x306>
 80165b0:	47ff0000 	.word	0x47ff0000
 80165b4:	58026000 	.word	0x58026000
 80165b8:	5c001000 	.word	0x5c001000
 80165bc:	683b      	ldr	r3, [r7, #0]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80165c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80165c8:	fa93 f3a3 	rbit	r3, r3
 80165cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80165d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80165d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80165d8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d101      	bne.n	80165e4 <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 80165e0:	2320      	movs	r3, #32
 80165e2:	e004      	b.n	80165ee <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 80165e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80165e8:	fab3 f383 	clz	r3, r3
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	429a      	cmp	r2, r3
 80165f0:	d106      	bne.n	8016600 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80165f2:	687b      	ldr	r3, [r7, #4]
 80165f4:	681b      	ldr	r3, [r3, #0]
 80165f6:	2200      	movs	r2, #0
 80165f8:	2100      	movs	r1, #0
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7fe ff48 	bl	8015490 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	681b      	ldr	r3, [r3, #0]
 8016604:	2101      	movs	r1, #1
 8016606:	4618      	mov	r0, r3
 8016608:	f7fe feac 	bl	8015364 <LL_ADC_GetOffsetChannel>
 801660c:	4603      	mov	r3, r0
 801660e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016612:	2b00      	cmp	r3, #0
 8016614:	d10a      	bne.n	801662c <HAL_ADC_ConfigChannel+0x344>
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	2101      	movs	r1, #1
 801661c:	4618      	mov	r0, r3
 801661e:	f7fe fea1 	bl	8015364 <LL_ADC_GetOffsetChannel>
 8016622:	4603      	mov	r3, r0
 8016624:	0e9b      	lsrs	r3, r3, #26
 8016626:	f003 021f 	and.w	r2, r3, #31
 801662a:	e01e      	b.n	801666a <HAL_ADC_ConfigChannel+0x382>
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	2101      	movs	r1, #1
 8016632:	4618      	mov	r0, r3
 8016634:	f7fe fe96 	bl	8015364 <LL_ADC_GetOffsetChannel>
 8016638:	4603      	mov	r3, r0
 801663a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801663e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8016642:	fa93 f3a3 	rbit	r3, r3
 8016646:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 801664a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801664e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8016652:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016656:	2b00      	cmp	r3, #0
 8016658:	d101      	bne.n	801665e <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 801665a:	2320      	movs	r3, #32
 801665c:	e004      	b.n	8016668 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 801665e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8016662:	fab3 f383 	clz	r3, r3
 8016666:	b2db      	uxtb	r3, r3
 8016668:	461a      	mov	r2, r3
 801666a:	683b      	ldr	r3, [r7, #0]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016672:	2b00      	cmp	r3, #0
 8016674:	d105      	bne.n	8016682 <HAL_ADC_ConfigChannel+0x39a>
 8016676:	683b      	ldr	r3, [r7, #0]
 8016678:	681b      	ldr	r3, [r3, #0]
 801667a:	0e9b      	lsrs	r3, r3, #26
 801667c:	f003 031f 	and.w	r3, r3, #31
 8016680:	e018      	b.n	80166b4 <HAL_ADC_ConfigChannel+0x3cc>
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	681b      	ldr	r3, [r3, #0]
 8016686:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801668a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801668e:	fa93 f3a3 	rbit	r3, r3
 8016692:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8016696:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801669a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 801669e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	d101      	bne.n	80166aa <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 80166a6:	2320      	movs	r3, #32
 80166a8:	e004      	b.n	80166b4 <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 80166aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80166ae:	fab3 f383 	clz	r3, r3
 80166b2:	b2db      	uxtb	r3, r3
 80166b4:	429a      	cmp	r2, r3
 80166b6:	d106      	bne.n	80166c6 <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	2200      	movs	r2, #0
 80166be:	2101      	movs	r1, #1
 80166c0:	4618      	mov	r0, r3
 80166c2:	f7fe fee5 	bl	8015490 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80166c6:	687b      	ldr	r3, [r7, #4]
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	2102      	movs	r1, #2
 80166cc:	4618      	mov	r0, r3
 80166ce:	f7fe fe49 	bl	8015364 <LL_ADC_GetOffsetChannel>
 80166d2:	4603      	mov	r3, r0
 80166d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d10a      	bne.n	80166f2 <HAL_ADC_ConfigChannel+0x40a>
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	2102      	movs	r1, #2
 80166e2:	4618      	mov	r0, r3
 80166e4:	f7fe fe3e 	bl	8015364 <LL_ADC_GetOffsetChannel>
 80166e8:	4603      	mov	r3, r0
 80166ea:	0e9b      	lsrs	r3, r3, #26
 80166ec:	f003 021f 	and.w	r2, r3, #31
 80166f0:	e01e      	b.n	8016730 <HAL_ADC_ConfigChannel+0x448>
 80166f2:	687b      	ldr	r3, [r7, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	2102      	movs	r1, #2
 80166f8:	4618      	mov	r0, r3
 80166fa:	f7fe fe33 	bl	8015364 <LL_ADC_GetOffsetChannel>
 80166fe:	4603      	mov	r3, r0
 8016700:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016704:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016708:	fa93 f3a3 	rbit	r3, r3
 801670c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8016710:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8016714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8016718:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801671c:	2b00      	cmp	r3, #0
 801671e:	d101      	bne.n	8016724 <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8016720:	2320      	movs	r3, #32
 8016722:	e004      	b.n	801672e <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 8016724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016728:	fab3 f383 	clz	r3, r3
 801672c:	b2db      	uxtb	r3, r3
 801672e:	461a      	mov	r2, r3
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016738:	2b00      	cmp	r3, #0
 801673a:	d105      	bne.n	8016748 <HAL_ADC_ConfigChannel+0x460>
 801673c:	683b      	ldr	r3, [r7, #0]
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	0e9b      	lsrs	r3, r3, #26
 8016742:	f003 031f 	and.w	r3, r3, #31
 8016746:	e014      	b.n	8016772 <HAL_ADC_ConfigChannel+0x48a>
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801674e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8016750:	fa93 f3a3 	rbit	r3, r3
 8016754:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8016756:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8016758:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 801675c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016760:	2b00      	cmp	r3, #0
 8016762:	d101      	bne.n	8016768 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 8016764:	2320      	movs	r3, #32
 8016766:	e004      	b.n	8016772 <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 8016768:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801676c:	fab3 f383 	clz	r3, r3
 8016770:	b2db      	uxtb	r3, r3
 8016772:	429a      	cmp	r2, r3
 8016774:	d106      	bne.n	8016784 <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	2200      	movs	r2, #0
 801677c:	2102      	movs	r1, #2
 801677e:	4618      	mov	r0, r3
 8016780:	f7fe fe86 	bl	8015490 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	2103      	movs	r1, #3
 801678a:	4618      	mov	r0, r3
 801678c:	f7fe fdea 	bl	8015364 <LL_ADC_GetOffsetChannel>
 8016790:	4603      	mov	r3, r0
 8016792:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016796:	2b00      	cmp	r3, #0
 8016798:	d10a      	bne.n	80167b0 <HAL_ADC_ConfigChannel+0x4c8>
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	681b      	ldr	r3, [r3, #0]
 801679e:	2103      	movs	r1, #3
 80167a0:	4618      	mov	r0, r3
 80167a2:	f7fe fddf 	bl	8015364 <LL_ADC_GetOffsetChannel>
 80167a6:	4603      	mov	r3, r0
 80167a8:	0e9b      	lsrs	r3, r3, #26
 80167aa:	f003 021f 	and.w	r2, r3, #31
 80167ae:	e017      	b.n	80167e0 <HAL_ADC_ConfigChannel+0x4f8>
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	2103      	movs	r1, #3
 80167b6:	4618      	mov	r0, r3
 80167b8:	f7fe fdd4 	bl	8015364 <LL_ADC_GetOffsetChannel>
 80167bc:	4603      	mov	r3, r0
 80167be:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80167c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80167c2:	fa93 f3a3 	rbit	r3, r3
 80167c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80167c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80167ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80167cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d101      	bne.n	80167d6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80167d2:	2320      	movs	r3, #32
 80167d4:	e003      	b.n	80167de <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80167d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80167d8:	fab3 f383 	clz	r3, r3
 80167dc:	b2db      	uxtb	r3, r3
 80167de:	461a      	mov	r2, r3
 80167e0:	683b      	ldr	r3, [r7, #0]
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80167e8:	2b00      	cmp	r3, #0
 80167ea:	d105      	bne.n	80167f8 <HAL_ADC_ConfigChannel+0x510>
 80167ec:	683b      	ldr	r3, [r7, #0]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	0e9b      	lsrs	r3, r3, #26
 80167f2:	f003 031f 	and.w	r3, r3, #31
 80167f6:	e011      	b.n	801681c <HAL_ADC_ConfigChannel+0x534>
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	681b      	ldr	r3, [r3, #0]
 80167fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80167fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016800:	fa93 f3a3 	rbit	r3, r3
 8016804:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8016806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016808:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 801680a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801680c:	2b00      	cmp	r3, #0
 801680e:	d101      	bne.n	8016814 <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8016810:	2320      	movs	r3, #32
 8016812:	e003      	b.n	801681c <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 8016814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016816:	fab3 f383 	clz	r3, r3
 801681a:	b2db      	uxtb	r3, r3
 801681c:	429a      	cmp	r2, r3
 801681e:	d14f      	bne.n	80168c0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	2200      	movs	r2, #0
 8016826:	2103      	movs	r1, #3
 8016828:	4618      	mov	r0, r3
 801682a:	f7fe fe31 	bl	8015490 <LL_ADC_SetOffsetState>
 801682e:	e047      	b.n	80168c0 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016836:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801683a:	683b      	ldr	r3, [r7, #0]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	069b      	lsls	r3, r3, #26
 8016840:	429a      	cmp	r2, r3
 8016842:	d107      	bne.n	8016854 <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	681b      	ldr	r3, [r3, #0]
 801684e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016852:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	681b      	ldr	r3, [r3, #0]
 8016858:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801685a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	069b      	lsls	r3, r3, #26
 8016864:	429a      	cmp	r2, r3
 8016866:	d107      	bne.n	8016878 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016876:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801687e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016882:	683b      	ldr	r3, [r7, #0]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	069b      	lsls	r3, r3, #26
 8016888:	429a      	cmp	r2, r3
 801688a:	d107      	bne.n	801689c <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 801689a:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	681b      	ldr	r3, [r3, #0]
 80168a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80168a6:	683b      	ldr	r3, [r7, #0]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	069b      	lsls	r3, r3, #26
 80168ac:	429a      	cmp	r2, r3
 80168ae:	d107      	bne.n	80168c0 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80168b6:	687b      	ldr	r3, [r7, #4]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80168be:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	681b      	ldr	r3, [r3, #0]
 80168c4:	4618      	mov	r0, r3
 80168c6:	f7fe ff85 	bl	80157d4 <LL_ADC_IsEnabled>
 80168ca:	4603      	mov	r3, r0
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	f040 8219 	bne.w	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6818      	ldr	r0, [r3, #0]
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	6819      	ldr	r1, [r3, #0]
 80168da:	683b      	ldr	r3, [r7, #0]
 80168dc:	68db      	ldr	r3, [r3, #12]
 80168de:	461a      	mov	r2, r3
 80168e0:	f7fe feba 	bl	8015658 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	68db      	ldr	r3, [r3, #12]
 80168e8:	4aa1      	ldr	r2, [pc, #644]	; (8016b70 <HAL_ADC_ConfigChannel+0x888>)
 80168ea:	4293      	cmp	r3, r2
 80168ec:	f040 812e 	bne.w	8016b4c <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80168fc:	2b00      	cmp	r3, #0
 80168fe:	d10b      	bne.n	8016918 <HAL_ADC_ConfigChannel+0x630>
 8016900:	683b      	ldr	r3, [r7, #0]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	0e9b      	lsrs	r3, r3, #26
 8016906:	3301      	adds	r3, #1
 8016908:	f003 031f 	and.w	r3, r3, #31
 801690c:	2b09      	cmp	r3, #9
 801690e:	bf94      	ite	ls
 8016910:	2301      	movls	r3, #1
 8016912:	2300      	movhi	r3, #0
 8016914:	b2db      	uxtb	r3, r3
 8016916:	e019      	b.n	801694c <HAL_ADC_ConfigChannel+0x664>
 8016918:	683b      	ldr	r3, [r7, #0]
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801691e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016920:	fa93 f3a3 	rbit	r3, r3
 8016924:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8016926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016928:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 801692a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801692c:	2b00      	cmp	r3, #0
 801692e:	d101      	bne.n	8016934 <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 8016930:	2320      	movs	r3, #32
 8016932:	e003      	b.n	801693c <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 8016934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8016936:	fab3 f383 	clz	r3, r3
 801693a:	b2db      	uxtb	r3, r3
 801693c:	3301      	adds	r3, #1
 801693e:	f003 031f 	and.w	r3, r3, #31
 8016942:	2b09      	cmp	r3, #9
 8016944:	bf94      	ite	ls
 8016946:	2301      	movls	r3, #1
 8016948:	2300      	movhi	r3, #0
 801694a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801694c:	2b00      	cmp	r3, #0
 801694e:	d079      	beq.n	8016a44 <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016958:	2b00      	cmp	r3, #0
 801695a:	d107      	bne.n	801696c <HAL_ADC_ConfigChannel+0x684>
 801695c:	683b      	ldr	r3, [r7, #0]
 801695e:	681b      	ldr	r3, [r3, #0]
 8016960:	0e9b      	lsrs	r3, r3, #26
 8016962:	3301      	adds	r3, #1
 8016964:	069b      	lsls	r3, r3, #26
 8016966:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801696a:	e015      	b.n	8016998 <HAL_ADC_ConfigChannel+0x6b0>
 801696c:	683b      	ldr	r3, [r7, #0]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016974:	fa93 f3a3 	rbit	r3, r3
 8016978:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 801697a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801697c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 801697e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016980:	2b00      	cmp	r3, #0
 8016982:	d101      	bne.n	8016988 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 8016984:	2320      	movs	r3, #32
 8016986:	e003      	b.n	8016990 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8016988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801698a:	fab3 f383 	clz	r3, r3
 801698e:	b2db      	uxtb	r3, r3
 8016990:	3301      	adds	r3, #1
 8016992:	069b      	lsls	r3, r3, #26
 8016994:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016998:	683b      	ldr	r3, [r7, #0]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d109      	bne.n	80169b8 <HAL_ADC_ConfigChannel+0x6d0>
 80169a4:	683b      	ldr	r3, [r7, #0]
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	0e9b      	lsrs	r3, r3, #26
 80169aa:	3301      	adds	r3, #1
 80169ac:	f003 031f 	and.w	r3, r3, #31
 80169b0:	2101      	movs	r1, #1
 80169b2:	fa01 f303 	lsl.w	r3, r1, r3
 80169b6:	e017      	b.n	80169e8 <HAL_ADC_ConfigChannel+0x700>
 80169b8:	683b      	ldr	r3, [r7, #0]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80169c0:	fa93 f3a3 	rbit	r3, r3
 80169c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80169c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80169c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80169ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169cc:	2b00      	cmp	r3, #0
 80169ce:	d101      	bne.n	80169d4 <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 80169d0:	2320      	movs	r3, #32
 80169d2:	e003      	b.n	80169dc <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 80169d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80169d6:	fab3 f383 	clz	r3, r3
 80169da:	b2db      	uxtb	r3, r3
 80169dc:	3301      	adds	r3, #1
 80169de:	f003 031f 	and.w	r3, r3, #31
 80169e2:	2101      	movs	r1, #1
 80169e4:	fa01 f303 	lsl.w	r3, r1, r3
 80169e8:	ea42 0103 	orr.w	r1, r2, r3
 80169ec:	683b      	ldr	r3, [r7, #0]
 80169ee:	681b      	ldr	r3, [r3, #0]
 80169f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d10a      	bne.n	8016a0e <HAL_ADC_ConfigChannel+0x726>
 80169f8:	683b      	ldr	r3, [r7, #0]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	0e9b      	lsrs	r3, r3, #26
 80169fe:	3301      	adds	r3, #1
 8016a00:	f003 021f 	and.w	r2, r3, #31
 8016a04:	4613      	mov	r3, r2
 8016a06:	005b      	lsls	r3, r3, #1
 8016a08:	4413      	add	r3, r2
 8016a0a:	051b      	lsls	r3, r3, #20
 8016a0c:	e018      	b.n	8016a40 <HAL_ADC_ConfigChannel+0x758>
 8016a0e:	683b      	ldr	r3, [r7, #0]
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a16:	fa93 f3a3 	rbit	r3, r3
 8016a1a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8016a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8016a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d101      	bne.n	8016a2a <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8016a26:	2320      	movs	r3, #32
 8016a28:	e003      	b.n	8016a32 <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8016a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a2c:	fab3 f383 	clz	r3, r3
 8016a30:	b2db      	uxtb	r3, r3
 8016a32:	3301      	adds	r3, #1
 8016a34:	f003 021f 	and.w	r2, r3, #31
 8016a38:	4613      	mov	r3, r2
 8016a3a:	005b      	lsls	r3, r3, #1
 8016a3c:	4413      	add	r3, r2
 8016a3e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016a40:	430b      	orrs	r3, r1
 8016a42:	e07e      	b.n	8016b42 <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016a44:	683b      	ldr	r3, [r7, #0]
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a4c:	2b00      	cmp	r3, #0
 8016a4e:	d107      	bne.n	8016a60 <HAL_ADC_ConfigChannel+0x778>
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	681b      	ldr	r3, [r3, #0]
 8016a54:	0e9b      	lsrs	r3, r3, #26
 8016a56:	3301      	adds	r3, #1
 8016a58:	069b      	lsls	r3, r3, #26
 8016a5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016a5e:	e015      	b.n	8016a8c <HAL_ADC_ConfigChannel+0x7a4>
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a68:	fa93 f3a3 	rbit	r3, r3
 8016a6c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8016a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8016a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d101      	bne.n	8016a7c <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8016a78:	2320      	movs	r3, #32
 8016a7a:	e003      	b.n	8016a84 <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8016a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a7e:	fab3 f383 	clz	r3, r3
 8016a82:	b2db      	uxtb	r3, r3
 8016a84:	3301      	adds	r3, #1
 8016a86:	069b      	lsls	r3, r3, #26
 8016a88:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	681b      	ldr	r3, [r3, #0]
 8016a90:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d109      	bne.n	8016aac <HAL_ADC_ConfigChannel+0x7c4>
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	0e9b      	lsrs	r3, r3, #26
 8016a9e:	3301      	adds	r3, #1
 8016aa0:	f003 031f 	and.w	r3, r3, #31
 8016aa4:	2101      	movs	r1, #1
 8016aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8016aaa:	e017      	b.n	8016adc <HAL_ADC_ConfigChannel+0x7f4>
 8016aac:	683b      	ldr	r3, [r7, #0]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ab2:	69fb      	ldr	r3, [r7, #28]
 8016ab4:	fa93 f3a3 	rbit	r3, r3
 8016ab8:	61bb      	str	r3, [r7, #24]
  return result;
 8016aba:	69bb      	ldr	r3, [r7, #24]
 8016abc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8016abe:	6a3b      	ldr	r3, [r7, #32]
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d101      	bne.n	8016ac8 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8016ac4:	2320      	movs	r3, #32
 8016ac6:	e003      	b.n	8016ad0 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8016ac8:	6a3b      	ldr	r3, [r7, #32]
 8016aca:	fab3 f383 	clz	r3, r3
 8016ace:	b2db      	uxtb	r3, r3
 8016ad0:	3301      	adds	r3, #1
 8016ad2:	f003 031f 	and.w	r3, r3, #31
 8016ad6:	2101      	movs	r1, #1
 8016ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8016adc:	ea42 0103 	orr.w	r1, r2, r3
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	681b      	ldr	r3, [r3, #0]
 8016ae4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d10d      	bne.n	8016b08 <HAL_ADC_ConfigChannel+0x820>
 8016aec:	683b      	ldr	r3, [r7, #0]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	0e9b      	lsrs	r3, r3, #26
 8016af2:	3301      	adds	r3, #1
 8016af4:	f003 021f 	and.w	r2, r3, #31
 8016af8:	4613      	mov	r3, r2
 8016afa:	005b      	lsls	r3, r3, #1
 8016afc:	4413      	add	r3, r2
 8016afe:	3b1e      	subs	r3, #30
 8016b00:	051b      	lsls	r3, r3, #20
 8016b02:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016b06:	e01b      	b.n	8016b40 <HAL_ADC_ConfigChannel+0x858>
 8016b08:	683b      	ldr	r3, [r7, #0]
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016b0e:	693b      	ldr	r3, [r7, #16]
 8016b10:	fa93 f3a3 	rbit	r3, r3
 8016b14:	60fb      	str	r3, [r7, #12]
  return result;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8016b1a:	697b      	ldr	r3, [r7, #20]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d101      	bne.n	8016b24 <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8016b20:	2320      	movs	r3, #32
 8016b22:	e003      	b.n	8016b2c <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8016b24:	697b      	ldr	r3, [r7, #20]
 8016b26:	fab3 f383 	clz	r3, r3
 8016b2a:	b2db      	uxtb	r3, r3
 8016b2c:	3301      	adds	r3, #1
 8016b2e:	f003 021f 	and.w	r2, r3, #31
 8016b32:	4613      	mov	r3, r2
 8016b34:	005b      	lsls	r3, r3, #1
 8016b36:	4413      	add	r3, r2
 8016b38:	3b1e      	subs	r3, #30
 8016b3a:	051b      	lsls	r3, r3, #20
 8016b3c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016b40:	430b      	orrs	r3, r1
 8016b42:	683a      	ldr	r2, [r7, #0]
 8016b44:	6892      	ldr	r2, [r2, #8]
 8016b46:	4619      	mov	r1, r3
 8016b48:	f7fe fd5b 	bl	8015602 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8016b4c:	683b      	ldr	r3, [r7, #0]
 8016b4e:	681b      	ldr	r3, [r3, #0]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	f280 80d7 	bge.w	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	681b      	ldr	r3, [r3, #0]
 8016b5a:	4a06      	ldr	r2, [pc, #24]	; (8016b74 <HAL_ADC_ConfigChannel+0x88c>)
 8016b5c:	4293      	cmp	r3, r2
 8016b5e:	d004      	beq.n	8016b6a <HAL_ADC_ConfigChannel+0x882>
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	681b      	ldr	r3, [r3, #0]
 8016b64:	4a04      	ldr	r2, [pc, #16]	; (8016b78 <HAL_ADC_ConfigChannel+0x890>)
 8016b66:	4293      	cmp	r3, r2
 8016b68:	d10a      	bne.n	8016b80 <HAL_ADC_ConfigChannel+0x898>
 8016b6a:	4b04      	ldr	r3, [pc, #16]	; (8016b7c <HAL_ADC_ConfigChannel+0x894>)
 8016b6c:	e009      	b.n	8016b82 <HAL_ADC_ConfigChannel+0x89a>
 8016b6e:	bf00      	nop
 8016b70:	47ff0000 	.word	0x47ff0000
 8016b74:	40022000 	.word	0x40022000
 8016b78:	40022100 	.word	0x40022100
 8016b7c:	40022300 	.word	0x40022300
 8016b80:	4b65      	ldr	r3, [pc, #404]	; (8016d18 <HAL_ADC_ConfigChannel+0xa30>)
 8016b82:	4618      	mov	r0, r3
 8016b84:	f7fe fbae 	bl	80152e4 <LL_ADC_GetCommonPathInternalCh>
 8016b88:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	4a62      	ldr	r2, [pc, #392]	; (8016d1c <HAL_ADC_ConfigChannel+0xa34>)
 8016b92:	4293      	cmp	r3, r2
 8016b94:	d004      	beq.n	8016ba0 <HAL_ADC_ConfigChannel+0x8b8>
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	4a61      	ldr	r2, [pc, #388]	; (8016d20 <HAL_ADC_ConfigChannel+0xa38>)
 8016b9c:	4293      	cmp	r3, r2
 8016b9e:	d10e      	bne.n	8016bbe <HAL_ADC_ConfigChannel+0x8d6>
 8016ba0:	485e      	ldr	r0, [pc, #376]	; (8016d1c <HAL_ADC_ConfigChannel+0xa34>)
 8016ba2:	f7fe fe17 	bl	80157d4 <LL_ADC_IsEnabled>
 8016ba6:	4604      	mov	r4, r0
 8016ba8:	485d      	ldr	r0, [pc, #372]	; (8016d20 <HAL_ADC_ConfigChannel+0xa38>)
 8016baa:	f7fe fe13 	bl	80157d4 <LL_ADC_IsEnabled>
 8016bae:	4603      	mov	r3, r0
 8016bb0:	4323      	orrs	r3, r4
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	bf0c      	ite	eq
 8016bb6:	2301      	moveq	r3, #1
 8016bb8:	2300      	movne	r3, #0
 8016bba:	b2db      	uxtb	r3, r3
 8016bbc:	e008      	b.n	8016bd0 <HAL_ADC_ConfigChannel+0x8e8>
 8016bbe:	4859      	ldr	r0, [pc, #356]	; (8016d24 <HAL_ADC_ConfigChannel+0xa3c>)
 8016bc0:	f7fe fe08 	bl	80157d4 <LL_ADC_IsEnabled>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	bf0c      	ite	eq
 8016bca:	2301      	moveq	r3, #1
 8016bcc:	2300      	movne	r3, #0
 8016bce:	b2db      	uxtb	r3, r3
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	f000 8084 	beq.w	8016cde <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	4a53      	ldr	r2, [pc, #332]	; (8016d28 <HAL_ADC_ConfigChannel+0xa40>)
 8016bdc:	4293      	cmp	r3, r2
 8016bde:	d132      	bne.n	8016c46 <HAL_ADC_ConfigChannel+0x95e>
 8016be0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016be4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d12c      	bne.n	8016c46 <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016bec:	687b      	ldr	r3, [r7, #4]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	4a4c      	ldr	r2, [pc, #304]	; (8016d24 <HAL_ADC_ConfigChannel+0xa3c>)
 8016bf2:	4293      	cmp	r3, r2
 8016bf4:	f040 8086 	bne.w	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	4a47      	ldr	r2, [pc, #284]	; (8016d1c <HAL_ADC_ConfigChannel+0xa34>)
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	d004      	beq.n	8016c0c <HAL_ADC_ConfigChannel+0x924>
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	4a46      	ldr	r2, [pc, #280]	; (8016d20 <HAL_ADC_ConfigChannel+0xa38>)
 8016c08:	4293      	cmp	r3, r2
 8016c0a:	d101      	bne.n	8016c10 <HAL_ADC_ConfigChannel+0x928>
 8016c0c:	4a47      	ldr	r2, [pc, #284]	; (8016d2c <HAL_ADC_ConfigChannel+0xa44>)
 8016c0e:	e000      	b.n	8016c12 <HAL_ADC_ConfigChannel+0x92a>
 8016c10:	4a41      	ldr	r2, [pc, #260]	; (8016d18 <HAL_ADC_ConfigChannel+0xa30>)
 8016c12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016c16:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016c1a:	4619      	mov	r1, r3
 8016c1c:	4610      	mov	r0, r2
 8016c1e:	f7fe fb4e 	bl	80152be <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016c22:	4b43      	ldr	r3, [pc, #268]	; (8016d30 <HAL_ADC_ConfigChannel+0xa48>)
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	099b      	lsrs	r3, r3, #6
 8016c28:	4a42      	ldr	r2, [pc, #264]	; (8016d34 <HAL_ADC_ConfigChannel+0xa4c>)
 8016c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8016c2e:	099b      	lsrs	r3, r3, #6
 8016c30:	3301      	adds	r3, #1
 8016c32:	005b      	lsls	r3, r3, #1
 8016c34:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016c36:	e002      	b.n	8016c3e <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	3b01      	subs	r3, #1
 8016c3c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016c3e:	68bb      	ldr	r3, [r7, #8]
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d1f9      	bne.n	8016c38 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016c44:	e05e      	b.n	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8016c46:	683b      	ldr	r3, [r7, #0]
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	4a3b      	ldr	r2, [pc, #236]	; (8016d38 <HAL_ADC_ConfigChannel+0xa50>)
 8016c4c:	4293      	cmp	r3, r2
 8016c4e:	d120      	bne.n	8016c92 <HAL_ADC_ConfigChannel+0x9aa>
 8016c50:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d11a      	bne.n	8016c92 <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	4a30      	ldr	r2, [pc, #192]	; (8016d24 <HAL_ADC_ConfigChannel+0xa3c>)
 8016c62:	4293      	cmp	r3, r2
 8016c64:	d14e      	bne.n	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	681b      	ldr	r3, [r3, #0]
 8016c6a:	4a2c      	ldr	r2, [pc, #176]	; (8016d1c <HAL_ADC_ConfigChannel+0xa34>)
 8016c6c:	4293      	cmp	r3, r2
 8016c6e:	d004      	beq.n	8016c7a <HAL_ADC_ConfigChannel+0x992>
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	4a2a      	ldr	r2, [pc, #168]	; (8016d20 <HAL_ADC_ConfigChannel+0xa38>)
 8016c76:	4293      	cmp	r3, r2
 8016c78:	d101      	bne.n	8016c7e <HAL_ADC_ConfigChannel+0x996>
 8016c7a:	4a2c      	ldr	r2, [pc, #176]	; (8016d2c <HAL_ADC_ConfigChannel+0xa44>)
 8016c7c:	e000      	b.n	8016c80 <HAL_ADC_ConfigChannel+0x998>
 8016c7e:	4a26      	ldr	r2, [pc, #152]	; (8016d18 <HAL_ADC_ConfigChannel+0xa30>)
 8016c80:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016c84:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016c88:	4619      	mov	r1, r3
 8016c8a:	4610      	mov	r0, r2
 8016c8c:	f7fe fb17 	bl	80152be <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016c90:	e038      	b.n	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	681b      	ldr	r3, [r3, #0]
 8016c96:	4a29      	ldr	r2, [pc, #164]	; (8016d3c <HAL_ADC_ConfigChannel+0xa54>)
 8016c98:	4293      	cmp	r3, r2
 8016c9a:	d133      	bne.n	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
 8016c9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016ca0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d12d      	bne.n	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	4a1d      	ldr	r2, [pc, #116]	; (8016d24 <HAL_ADC_ConfigChannel+0xa3c>)
 8016cae:	4293      	cmp	r3, r2
 8016cb0:	d128      	bne.n	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8016cb2:	687b      	ldr	r3, [r7, #4]
 8016cb4:	681b      	ldr	r3, [r3, #0]
 8016cb6:	4a19      	ldr	r2, [pc, #100]	; (8016d1c <HAL_ADC_ConfigChannel+0xa34>)
 8016cb8:	4293      	cmp	r3, r2
 8016cba:	d004      	beq.n	8016cc6 <HAL_ADC_ConfigChannel+0x9de>
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	4a17      	ldr	r2, [pc, #92]	; (8016d20 <HAL_ADC_ConfigChannel+0xa38>)
 8016cc2:	4293      	cmp	r3, r2
 8016cc4:	d101      	bne.n	8016cca <HAL_ADC_ConfigChannel+0x9e2>
 8016cc6:	4a19      	ldr	r2, [pc, #100]	; (8016d2c <HAL_ADC_ConfigChannel+0xa44>)
 8016cc8:	e000      	b.n	8016ccc <HAL_ADC_ConfigChannel+0x9e4>
 8016cca:	4a13      	ldr	r2, [pc, #76]	; (8016d18 <HAL_ADC_ConfigChannel+0xa30>)
 8016ccc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016cd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016cd4:	4619      	mov	r1, r3
 8016cd6:	4610      	mov	r0, r2
 8016cd8:	f7fe faf1 	bl	80152be <LL_ADC_SetCommonPathInternalCh>
 8016cdc:	e012      	b.n	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ce2:	f043 0220 	orr.w	r2, r3, #32
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8016cea:	2301      	movs	r3, #1
 8016cec:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8016cf0:	e008      	b.n	8016d04 <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016cf6:	f043 0220 	orr.w	r2, r3, #32
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8016cfe:	2301      	movs	r3, #1
 8016d00:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016d04:	687b      	ldr	r3, [r7, #4]
 8016d06:	2200      	movs	r2, #0
 8016d08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8016d0c:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	37e4      	adds	r7, #228	; 0xe4
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd90      	pop	{r4, r7, pc}
 8016d18:	58026300 	.word	0x58026300
 8016d1c:	40022000 	.word	0x40022000
 8016d20:	40022100 	.word	0x40022100
 8016d24:	58026000 	.word	0x58026000
 8016d28:	c7520000 	.word	0xc7520000
 8016d2c:	40022300 	.word	0x40022300
 8016d30:	24000004 	.word	0x24000004
 8016d34:	053e2d63 	.word	0x053e2d63
 8016d38:	c3210000 	.word	0xc3210000
 8016d3c:	cb840000 	.word	0xcb840000

08016d40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b084      	sub	sp, #16
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	681b      	ldr	r3, [r3, #0]
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	f7fe fd41 	bl	80157d4 <LL_ADC_IsEnabled>
 8016d52:	4603      	mov	r3, r0
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d16e      	bne.n	8016e36 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	689a      	ldr	r2, [r3, #8]
 8016d5e:	4b38      	ldr	r3, [pc, #224]	; (8016e40 <ADC_Enable+0x100>)
 8016d60:	4013      	ands	r3, r2
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d00d      	beq.n	8016d82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d6a:	f043 0210 	orr.w	r2, r3, #16
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016d76:	f043 0201 	orr.w	r2, r3, #1
 8016d7a:	687b      	ldr	r3, [r7, #4]
 8016d7c:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8016d7e:	2301      	movs	r3, #1
 8016d80:	e05a      	b.n	8016e38 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	4618      	mov	r0, r3
 8016d88:	f7fe fd10 	bl	80157ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8016d8c:	f7fe fa78 	bl	8015280 <HAL_GetTick>
 8016d90:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	4a2b      	ldr	r2, [pc, #172]	; (8016e44 <ADC_Enable+0x104>)
 8016d98:	4293      	cmp	r3, r2
 8016d9a:	d004      	beq.n	8016da6 <ADC_Enable+0x66>
 8016d9c:	687b      	ldr	r3, [r7, #4]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	4a29      	ldr	r2, [pc, #164]	; (8016e48 <ADC_Enable+0x108>)
 8016da2:	4293      	cmp	r3, r2
 8016da4:	d101      	bne.n	8016daa <ADC_Enable+0x6a>
 8016da6:	4b29      	ldr	r3, [pc, #164]	; (8016e4c <ADC_Enable+0x10c>)
 8016da8:	e000      	b.n	8016dac <ADC_Enable+0x6c>
 8016daa:	4b29      	ldr	r3, [pc, #164]	; (8016e50 <ADC_Enable+0x110>)
 8016dac:	4618      	mov	r0, r3
 8016dae:	f7fe fc93 	bl	80156d8 <LL_ADC_GetMultimode>
 8016db2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	4a23      	ldr	r2, [pc, #140]	; (8016e48 <ADC_Enable+0x108>)
 8016dba:	4293      	cmp	r3, r2
 8016dbc:	d002      	beq.n	8016dc4 <ADC_Enable+0x84>
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	e000      	b.n	8016dc6 <ADC_Enable+0x86>
 8016dc4:	4b1f      	ldr	r3, [pc, #124]	; (8016e44 <ADC_Enable+0x104>)
 8016dc6:	687a      	ldr	r2, [r7, #4]
 8016dc8:	6812      	ldr	r2, [r2, #0]
 8016dca:	4293      	cmp	r3, r2
 8016dcc:	d02c      	beq.n	8016e28 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016dce:	68bb      	ldr	r3, [r7, #8]
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	d130      	bne.n	8016e36 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016dd4:	e028      	b.n	8016e28 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681b      	ldr	r3, [r3, #0]
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7fe fcfa 	bl	80157d4 <LL_ADC_IsEnabled>
 8016de0:	4603      	mov	r3, r0
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	d104      	bne.n	8016df0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	681b      	ldr	r3, [r3, #0]
 8016dea:	4618      	mov	r0, r3
 8016dec:	f7fe fcde 	bl	80157ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8016df0:	f7fe fa46 	bl	8015280 <HAL_GetTick>
 8016df4:	4602      	mov	r2, r0
 8016df6:	68fb      	ldr	r3, [r7, #12]
 8016df8:	1ad3      	subs	r3, r2, r3
 8016dfa:	2b02      	cmp	r3, #2
 8016dfc:	d914      	bls.n	8016e28 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	f003 0301 	and.w	r3, r3, #1
 8016e08:	2b01      	cmp	r3, #1
 8016e0a:	d00d      	beq.n	8016e28 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e10:	f043 0210 	orr.w	r2, r3, #16
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016e1c:	f043 0201 	orr.w	r2, r3, #1
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8016e24:	2301      	movs	r3, #1
 8016e26:	e007      	b.n	8016e38 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	681b      	ldr	r3, [r3, #0]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	f003 0301 	and.w	r3, r3, #1
 8016e32:	2b01      	cmp	r3, #1
 8016e34:	d1cf      	bne.n	8016dd6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8016e36:	2300      	movs	r3, #0
}
 8016e38:	4618      	mov	r0, r3
 8016e3a:	3710      	adds	r7, #16
 8016e3c:	46bd      	mov	sp, r7
 8016e3e:	bd80      	pop	{r7, pc}
 8016e40:	8000003f 	.word	0x8000003f
 8016e44:	40022000 	.word	0x40022000
 8016e48:	40022100 	.word	0x40022100
 8016e4c:	40022300 	.word	0x40022300
 8016e50:	58026300 	.word	0x58026300

08016e54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8016e54:	b580      	push	{r7, lr}
 8016e56:	b084      	sub	sp, #16
 8016e58:	af00      	add	r7, sp, #0
 8016e5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016e60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8016e62:	68fb      	ldr	r3, [r7, #12]
 8016e64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d14b      	bne.n	8016f06 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016e76:	68fb      	ldr	r3, [r7, #12]
 8016e78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681b      	ldr	r3, [r3, #0]
 8016e7e:	681b      	ldr	r3, [r3, #0]
 8016e80:	f003 0308 	and.w	r3, r3, #8
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d021      	beq.n	8016ecc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	4618      	mov	r0, r3
 8016e8e:	f7fe fb29 	bl	80154e4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8016e92:	4603      	mov	r3, r0
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d032      	beq.n	8016efe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8016e98:	68fb      	ldr	r3, [r7, #12]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	68db      	ldr	r3, [r3, #12]
 8016e9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016ea2:	2b00      	cmp	r3, #0
 8016ea4:	d12b      	bne.n	8016efe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016eb2:	68fb      	ldr	r3, [r7, #12]
 8016eb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016eb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d11f      	bne.n	8016efe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016ebe:	68fb      	ldr	r3, [r7, #12]
 8016ec0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ec2:	f043 0201 	orr.w	r2, r3, #1
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	661a      	str	r2, [r3, #96]	; 0x60
 8016eca:	e018      	b.n	8016efe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	681b      	ldr	r3, [r3, #0]
 8016ed0:	68db      	ldr	r3, [r3, #12]
 8016ed2:	f003 0303 	and.w	r3, r3, #3
 8016ed6:	2b00      	cmp	r3, #0
 8016ed8:	d111      	bne.n	8016efe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ede:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016ee2:	68fb      	ldr	r3, [r7, #12]
 8016ee4:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016eea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016eee:	2b00      	cmp	r3, #0
 8016ef0:	d105      	bne.n	8016efe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ef6:	f043 0201 	orr.w	r2, r3, #1
 8016efa:	68fb      	ldr	r3, [r7, #12]
 8016efc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8016efe:	68f8      	ldr	r0, [r7, #12]
 8016f00:	f7f7 f985 	bl	800e20e <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8016f04:	e00e      	b.n	8016f24 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8016f06:	68fb      	ldr	r3, [r7, #12]
 8016f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f0a:	f003 0310 	and.w	r3, r3, #16
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d003      	beq.n	8016f1a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8016f12:	68f8      	ldr	r0, [r7, #12]
 8016f14:	f7ff f9de 	bl	80162d4 <HAL_ADC_ErrorCallback>
}
 8016f18:	e004      	b.n	8016f24 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f20:	6878      	ldr	r0, [r7, #4]
 8016f22:	4798      	blx	r3
}
 8016f24:	bf00      	nop
 8016f26:	3710      	adds	r7, #16
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}

08016f2c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b084      	sub	sp, #16
 8016f30:	af00      	add	r7, sp, #0
 8016f32:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016f34:	687b      	ldr	r3, [r7, #4]
 8016f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f38:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8016f3a:	68f8      	ldr	r0, [r7, #12]
 8016f3c:	f7ff f9b6 	bl	80162ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8016f40:	bf00      	nop
 8016f42:	3710      	adds	r7, #16
 8016f44:	46bd      	mov	sp, r7
 8016f46:	bd80      	pop	{r7, pc}

08016f48 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b084      	sub	sp, #16
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016f54:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8016f56:	68fb      	ldr	r3, [r7, #12]
 8016f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8016f62:	68fb      	ldr	r3, [r7, #12]
 8016f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016f66:	f043 0204 	orr.w	r2, r3, #4
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8016f6e:	68f8      	ldr	r0, [r7, #12]
 8016f70:	f7ff f9b0 	bl	80162d4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8016f74:	bf00      	nop
 8016f76:	3710      	adds	r7, #16
 8016f78:	46bd      	mov	sp, r7
 8016f7a:	bd80      	pop	{r7, pc}

08016f7c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8016f7c:	b580      	push	{r7, lr}
 8016f7e:	b084      	sub	sp, #16
 8016f80:	af00      	add	r7, sp, #0
 8016f82:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	4a6c      	ldr	r2, [pc, #432]	; (801713c <ADC_ConfigureBoostMode+0x1c0>)
 8016f8a:	4293      	cmp	r3, r2
 8016f8c:	d004      	beq.n	8016f98 <ADC_ConfigureBoostMode+0x1c>
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	4a6b      	ldr	r2, [pc, #428]	; (8017140 <ADC_ConfigureBoostMode+0x1c4>)
 8016f94:	4293      	cmp	r3, r2
 8016f96:	d109      	bne.n	8016fac <ADC_ConfigureBoostMode+0x30>
 8016f98:	4b6a      	ldr	r3, [pc, #424]	; (8017144 <ADC_ConfigureBoostMode+0x1c8>)
 8016f9a:	689b      	ldr	r3, [r3, #8]
 8016f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	bf14      	ite	ne
 8016fa4:	2301      	movne	r3, #1
 8016fa6:	2300      	moveq	r3, #0
 8016fa8:	b2db      	uxtb	r3, r3
 8016faa:	e008      	b.n	8016fbe <ADC_ConfigureBoostMode+0x42>
 8016fac:	4b66      	ldr	r3, [pc, #408]	; (8017148 <ADC_ConfigureBoostMode+0x1cc>)
 8016fae:	689b      	ldr	r3, [r3, #8]
 8016fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8016fb4:	2b00      	cmp	r3, #0
 8016fb6:	bf14      	ite	ne
 8016fb8:	2301      	movne	r3, #1
 8016fba:	2300      	moveq	r3, #0
 8016fbc:	b2db      	uxtb	r3, r3
 8016fbe:	2b00      	cmp	r3, #0
 8016fc0:	d01c      	beq.n	8016ffc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8016fc2:	f004 fe95 	bl	801bcf0 <HAL_RCC_GetHCLKFreq>
 8016fc6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	685b      	ldr	r3, [r3, #4]
 8016fcc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8016fd0:	d010      	beq.n	8016ff4 <ADC_ConfigureBoostMode+0x78>
 8016fd2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8016fd6:	d873      	bhi.n	80170c0 <ADC_ConfigureBoostMode+0x144>
 8016fd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016fdc:	d002      	beq.n	8016fe4 <ADC_ConfigureBoostMode+0x68>
 8016fde:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016fe2:	d16d      	bne.n	80170c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	685b      	ldr	r3, [r3, #4]
 8016fe8:	0c1b      	lsrs	r3, r3, #16
 8016fea:	68fa      	ldr	r2, [r7, #12]
 8016fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8016ff0:	60fb      	str	r3, [r7, #12]
        break;
 8016ff2:	e068      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	089b      	lsrs	r3, r3, #2
 8016ff8:	60fb      	str	r3, [r7, #12]
        break;
 8016ffa:	e064      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8016ffc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8017000:	f04f 0100 	mov.w	r1, #0
 8017004:	f006 f85a 	bl	801d0bc <HAL_RCCEx_GetPeriphCLKFreq>
 8017008:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	685b      	ldr	r3, [r3, #4]
 801700e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8017012:	d051      	beq.n	80170b8 <ADC_ConfigureBoostMode+0x13c>
 8017014:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8017018:	d854      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 801701a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 801701e:	d047      	beq.n	80170b0 <ADC_ConfigureBoostMode+0x134>
 8017020:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8017024:	d84e      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 8017026:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 801702a:	d03d      	beq.n	80170a8 <ADC_ConfigureBoostMode+0x12c>
 801702c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8017030:	d848      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 8017032:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017036:	d033      	beq.n	80170a0 <ADC_ConfigureBoostMode+0x124>
 8017038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801703c:	d842      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 801703e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8017042:	d029      	beq.n	8017098 <ADC_ConfigureBoostMode+0x11c>
 8017044:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8017048:	d83c      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 801704a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 801704e:	d01a      	beq.n	8017086 <ADC_ConfigureBoostMode+0x10a>
 8017050:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8017054:	d836      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 8017056:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 801705a:	d014      	beq.n	8017086 <ADC_ConfigureBoostMode+0x10a>
 801705c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8017060:	d830      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 8017062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8017066:	d00e      	beq.n	8017086 <ADC_ConfigureBoostMode+0x10a>
 8017068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801706c:	d82a      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 801706e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8017072:	d008      	beq.n	8017086 <ADC_ConfigureBoostMode+0x10a>
 8017074:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8017078:	d824      	bhi.n	80170c4 <ADC_ConfigureBoostMode+0x148>
 801707a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801707e:	d002      	beq.n	8017086 <ADC_ConfigureBoostMode+0x10a>
 8017080:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8017084:	d11e      	bne.n	80170c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	685b      	ldr	r3, [r3, #4]
 801708a:	0c9b      	lsrs	r3, r3, #18
 801708c:	005b      	lsls	r3, r3, #1
 801708e:	68fa      	ldr	r2, [r7, #12]
 8017090:	fbb2 f3f3 	udiv	r3, r2, r3
 8017094:	60fb      	str	r3, [r7, #12]
        break;
 8017096:	e016      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	091b      	lsrs	r3, r3, #4
 801709c:	60fb      	str	r3, [r7, #12]
        break;
 801709e:	e012      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	095b      	lsrs	r3, r3, #5
 80170a4:	60fb      	str	r3, [r7, #12]
        break;
 80170a6:	e00e      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	099b      	lsrs	r3, r3, #6
 80170ac:	60fb      	str	r3, [r7, #12]
        break;
 80170ae:	e00a      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80170b0:	68fb      	ldr	r3, [r7, #12]
 80170b2:	09db      	lsrs	r3, r3, #7
 80170b4:	60fb      	str	r3, [r7, #12]
        break;
 80170b6:	e006      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	0a1b      	lsrs	r3, r3, #8
 80170bc:	60fb      	str	r3, [r7, #12]
        break;
 80170be:	e002      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80170c0:	bf00      	nop
 80170c2:	e000      	b.n	80170c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80170c4:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	085b      	lsrs	r3, r3, #1
 80170ca:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 80170cc:	68fb      	ldr	r3, [r7, #12]
 80170ce:	4a1f      	ldr	r2, [pc, #124]	; (801714c <ADC_ConfigureBoostMode+0x1d0>)
 80170d0:	4293      	cmp	r3, r2
 80170d2:	d808      	bhi.n	80170e6 <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	689a      	ldr	r2, [r3, #8]
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	681b      	ldr	r3, [r3, #0]
 80170de:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80170e2:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80170e4:	e025      	b.n	8017132 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	4a19      	ldr	r2, [pc, #100]	; (8017150 <ADC_ConfigureBoostMode+0x1d4>)
 80170ea:	4293      	cmp	r3, r2
 80170ec:	d80a      	bhi.n	8017104 <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	689b      	ldr	r3, [r3, #8]
 80170f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017100:	609a      	str	r2, [r3, #8]
}
 8017102:	e016      	b.n	8017132 <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	4a13      	ldr	r2, [pc, #76]	; (8017154 <ADC_ConfigureBoostMode+0x1d8>)
 8017108:	4293      	cmp	r3, r2
 801710a:	d80a      	bhi.n	8017122 <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	681b      	ldr	r3, [r3, #0]
 8017110:	689b      	ldr	r3, [r3, #8]
 8017112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	681b      	ldr	r3, [r3, #0]
 801711a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 801711e:	609a      	str	r2, [r3, #8]
}
 8017120:	e007      	b.n	8017132 <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	689a      	ldr	r2, [r3, #8]
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	681b      	ldr	r3, [r3, #0]
 801712c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8017130:	609a      	str	r2, [r3, #8]
}
 8017132:	bf00      	nop
 8017134:	3710      	adds	r7, #16
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}
 801713a:	bf00      	nop
 801713c:	40022000 	.word	0x40022000
 8017140:	40022100 	.word	0x40022100
 8017144:	40022300 	.word	0x40022300
 8017148:	58026300 	.word	0x58026300
 801714c:	005f5e10 	.word	0x005f5e10
 8017150:	00bebc20 	.word	0x00bebc20
 8017154:	017d7840 	.word	0x017d7840

08017158 <LL_ADC_IsEnabled>:
{
 8017158:	b480      	push	{r7}
 801715a:	b083      	sub	sp, #12
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	689b      	ldr	r3, [r3, #8]
 8017164:	f003 0301 	and.w	r3, r3, #1
 8017168:	2b01      	cmp	r3, #1
 801716a:	d101      	bne.n	8017170 <LL_ADC_IsEnabled+0x18>
 801716c:	2301      	movs	r3, #1
 801716e:	e000      	b.n	8017172 <LL_ADC_IsEnabled+0x1a>
 8017170:	2300      	movs	r3, #0
}
 8017172:	4618      	mov	r0, r3
 8017174:	370c      	adds	r7, #12
 8017176:	46bd      	mov	sp, r7
 8017178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717c:	4770      	bx	lr

0801717e <LL_ADC_REG_IsConversionOngoing>:
{
 801717e:	b480      	push	{r7}
 8017180:	b083      	sub	sp, #12
 8017182:	af00      	add	r7, sp, #0
 8017184:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	689b      	ldr	r3, [r3, #8]
 801718a:	f003 0304 	and.w	r3, r3, #4
 801718e:	2b04      	cmp	r3, #4
 8017190:	d101      	bne.n	8017196 <LL_ADC_REG_IsConversionOngoing+0x18>
 8017192:	2301      	movs	r3, #1
 8017194:	e000      	b.n	8017198 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8017196:	2300      	movs	r3, #0
}
 8017198:	4618      	mov	r0, r3
 801719a:	370c      	adds	r7, #12
 801719c:	46bd      	mov	sp, r7
 801719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a2:	4770      	bx	lr

080171a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80171a4:	b480      	push	{r7}
 80171a6:	b083      	sub	sp, #12
 80171a8:	af00      	add	r7, sp, #0
 80171aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80171ac:	bf00      	nop
 80171ae:	370c      	adds	r7, #12
 80171b0:	46bd      	mov	sp, r7
 80171b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171b6:	4770      	bx	lr

080171b8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80171b8:	b480      	push	{r7}
 80171ba:	b083      	sub	sp, #12
 80171bc:	af00      	add	r7, sp, #0
 80171be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80171c0:	bf00      	nop
 80171c2:	370c      	adds	r7, #12
 80171c4:	46bd      	mov	sp, r7
 80171c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171ca:	4770      	bx	lr

080171cc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80171cc:	b480      	push	{r7}
 80171ce:	b083      	sub	sp, #12
 80171d0:	af00      	add	r7, sp, #0
 80171d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80171d4:	bf00      	nop
 80171d6:	370c      	adds	r7, #12
 80171d8:	46bd      	mov	sp, r7
 80171da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171de:	4770      	bx	lr

080171e0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80171e0:	b480      	push	{r7}
 80171e2:	b083      	sub	sp, #12
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80171e8:	bf00      	nop
 80171ea:	370c      	adds	r7, #12
 80171ec:	46bd      	mov	sp, r7
 80171ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f2:	4770      	bx	lr

080171f4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80171f4:	b480      	push	{r7}
 80171f6:	b083      	sub	sp, #12
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80171fc:	bf00      	nop
 80171fe:	370c      	adds	r7, #12
 8017200:	46bd      	mov	sp, r7
 8017202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017206:	4770      	bx	lr

08017208 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8017208:	b590      	push	{r4, r7, lr}
 801720a:	b0a3      	sub	sp, #140	; 0x8c
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
 8017210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8017212:	2300      	movs	r3, #0
 8017214:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8017218:	687b      	ldr	r3, [r7, #4]
 801721a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801721e:	2b01      	cmp	r3, #1
 8017220:	d101      	bne.n	8017226 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8017222:	2302      	movs	r3, #2
 8017224:	e0c1      	b.n	80173aa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	2201      	movs	r2, #1
 801722a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 801722e:	2300      	movs	r3, #0
 8017230:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8017232:	2300      	movs	r3, #0
 8017234:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8017236:	687b      	ldr	r3, [r7, #4]
 8017238:	681b      	ldr	r3, [r3, #0]
 801723a:	4a5e      	ldr	r2, [pc, #376]	; (80173b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 801723c:	4293      	cmp	r3, r2
 801723e:	d102      	bne.n	8017246 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8017240:	4b5d      	ldr	r3, [pc, #372]	; (80173b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017242:	60fb      	str	r3, [r7, #12]
 8017244:	e001      	b.n	801724a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8017246:	2300      	movs	r3, #0
 8017248:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 801724a:	68fb      	ldr	r3, [r7, #12]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d10b      	bne.n	8017268 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017254:	f043 0220 	orr.w	r2, r3, #32
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2200      	movs	r2, #0
 8017260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 8017264:	2301      	movs	r3, #1
 8017266:	e0a0      	b.n	80173aa <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8017268:	68fb      	ldr	r3, [r7, #12]
 801726a:	4618      	mov	r0, r3
 801726c:	f7ff ff87 	bl	801717e <LL_ADC_REG_IsConversionOngoing>
 8017270:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	4618      	mov	r0, r3
 801727a:	f7ff ff80 	bl	801717e <LL_ADC_REG_IsConversionOngoing>
 801727e:	4603      	mov	r3, r0
 8017280:	2b00      	cmp	r3, #0
 8017282:	f040 8081 	bne.w	8017388 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8017286:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801728a:	2b00      	cmp	r3, #0
 801728c:	d17c      	bne.n	8017388 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	4a48      	ldr	r2, [pc, #288]	; (80173b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017294:	4293      	cmp	r3, r2
 8017296:	d004      	beq.n	80172a2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8017298:	687b      	ldr	r3, [r7, #4]
 801729a:	681b      	ldr	r3, [r3, #0]
 801729c:	4a46      	ldr	r2, [pc, #280]	; (80173b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801729e:	4293      	cmp	r3, r2
 80172a0:	d101      	bne.n	80172a6 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 80172a2:	4b46      	ldr	r3, [pc, #280]	; (80173bc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80172a4:	e000      	b.n	80172a8 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80172a6:	4b46      	ldr	r3, [pc, #280]	; (80173c0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80172a8:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	681b      	ldr	r3, [r3, #0]
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d039      	beq.n	8017326 <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80172b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80172b4:	689b      	ldr	r3, [r3, #8]
 80172b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	685b      	ldr	r3, [r3, #4]
 80172be:	431a      	orrs	r2, r3
 80172c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80172c2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80172c4:	687b      	ldr	r3, [r7, #4]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	4a3a      	ldr	r2, [pc, #232]	; (80173b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80172ca:	4293      	cmp	r3, r2
 80172cc:	d004      	beq.n	80172d8 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	681b      	ldr	r3, [r3, #0]
 80172d2:	4a39      	ldr	r2, [pc, #228]	; (80173b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80172d4:	4293      	cmp	r3, r2
 80172d6:	d10e      	bne.n	80172f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
 80172d8:	4836      	ldr	r0, [pc, #216]	; (80173b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80172da:	f7ff ff3d 	bl	8017158 <LL_ADC_IsEnabled>
 80172de:	4604      	mov	r4, r0
 80172e0:	4835      	ldr	r0, [pc, #212]	; (80173b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80172e2:	f7ff ff39 	bl	8017158 <LL_ADC_IsEnabled>
 80172e6:	4603      	mov	r3, r0
 80172e8:	4323      	orrs	r3, r4
 80172ea:	2b00      	cmp	r3, #0
 80172ec:	bf0c      	ite	eq
 80172ee:	2301      	moveq	r3, #1
 80172f0:	2300      	movne	r3, #0
 80172f2:	b2db      	uxtb	r3, r3
 80172f4:	e008      	b.n	8017308 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80172f6:	4833      	ldr	r0, [pc, #204]	; (80173c4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80172f8:	f7ff ff2e 	bl	8017158 <LL_ADC_IsEnabled>
 80172fc:	4603      	mov	r3, r0
 80172fe:	2b00      	cmp	r3, #0
 8017300:	bf0c      	ite	eq
 8017302:	2301      	moveq	r3, #1
 8017304:	2300      	movne	r3, #0
 8017306:	b2db      	uxtb	r3, r3
 8017308:	2b00      	cmp	r3, #0
 801730a:	d047      	beq.n	801739c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 801730c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801730e:	689a      	ldr	r2, [r3, #8]
 8017310:	4b2d      	ldr	r3, [pc, #180]	; (80173c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8017312:	4013      	ands	r3, r2
 8017314:	683a      	ldr	r2, [r7, #0]
 8017316:	6811      	ldr	r1, [r2, #0]
 8017318:	683a      	ldr	r2, [r7, #0]
 801731a:	6892      	ldr	r2, [r2, #8]
 801731c:	430a      	orrs	r2, r1
 801731e:	431a      	orrs	r2, r3
 8017320:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017322:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017324:	e03a      	b.n	801739c <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8017326:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017328:	689b      	ldr	r3, [r3, #8]
 801732a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 801732e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017330:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8017332:	687b      	ldr	r3, [r7, #4]
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	4a1f      	ldr	r2, [pc, #124]	; (80173b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017338:	4293      	cmp	r3, r2
 801733a:	d004      	beq.n	8017346 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	4a1d      	ldr	r2, [pc, #116]	; (80173b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017342:	4293      	cmp	r3, r2
 8017344:	d10e      	bne.n	8017364 <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 8017346:	481b      	ldr	r0, [pc, #108]	; (80173b4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017348:	f7ff ff06 	bl	8017158 <LL_ADC_IsEnabled>
 801734c:	4604      	mov	r4, r0
 801734e:	481a      	ldr	r0, [pc, #104]	; (80173b8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017350:	f7ff ff02 	bl	8017158 <LL_ADC_IsEnabled>
 8017354:	4603      	mov	r3, r0
 8017356:	4323      	orrs	r3, r4
 8017358:	2b00      	cmp	r3, #0
 801735a:	bf0c      	ite	eq
 801735c:	2301      	moveq	r3, #1
 801735e:	2300      	movne	r3, #0
 8017360:	b2db      	uxtb	r3, r3
 8017362:	e008      	b.n	8017376 <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 8017364:	4817      	ldr	r0, [pc, #92]	; (80173c4 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8017366:	f7ff fef7 	bl	8017158 <LL_ADC_IsEnabled>
 801736a:	4603      	mov	r3, r0
 801736c:	2b00      	cmp	r3, #0
 801736e:	bf0c      	ite	eq
 8017370:	2301      	moveq	r3, #1
 8017372:	2300      	movne	r3, #0
 8017374:	b2db      	uxtb	r3, r3
 8017376:	2b00      	cmp	r3, #0
 8017378:	d010      	beq.n	801739c <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 801737a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801737c:	689a      	ldr	r2, [r3, #8]
 801737e:	4b12      	ldr	r3, [pc, #72]	; (80173c8 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8017380:	4013      	ands	r3, r2
 8017382:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8017384:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017386:	e009      	b.n	801739c <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017388:	687b      	ldr	r3, [r7, #4]
 801738a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801738c:	f043 0220 	orr.w	r2, r3, #32
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8017394:	2301      	movs	r3, #1
 8017396:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 801739a:	e000      	b.n	801739e <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801739c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	2200      	movs	r2, #0
 80173a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 80173a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 80173aa:	4618      	mov	r0, r3
 80173ac:	378c      	adds	r7, #140	; 0x8c
 80173ae:	46bd      	mov	sp, r7
 80173b0:	bd90      	pop	{r4, r7, pc}
 80173b2:	bf00      	nop
 80173b4:	40022000 	.word	0x40022000
 80173b8:	40022100 	.word	0x40022100
 80173bc:	40022300 	.word	0x40022300
 80173c0:	58026300 	.word	0x58026300
 80173c4:	58026000 	.word	0x58026000
 80173c8:	fffff0e0 	.word	0xfffff0e0

080173cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80173cc:	b480      	push	{r7}
 80173ce:	b085      	sub	sp, #20
 80173d0:	af00      	add	r7, sp, #0
 80173d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f003 0307 	and.w	r3, r3, #7
 80173da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80173dc:	4b0b      	ldr	r3, [pc, #44]	; (801740c <__NVIC_SetPriorityGrouping+0x40>)
 80173de:	68db      	ldr	r3, [r3, #12]
 80173e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80173e2:	68ba      	ldr	r2, [r7, #8]
 80173e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80173e8:	4013      	ands	r3, r2
 80173ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80173f0:	68bb      	ldr	r3, [r7, #8]
 80173f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80173f4:	4b06      	ldr	r3, [pc, #24]	; (8017410 <__NVIC_SetPriorityGrouping+0x44>)
 80173f6:	4313      	orrs	r3, r2
 80173f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80173fa:	4a04      	ldr	r2, [pc, #16]	; (801740c <__NVIC_SetPriorityGrouping+0x40>)
 80173fc:	68bb      	ldr	r3, [r7, #8]
 80173fe:	60d3      	str	r3, [r2, #12]
}
 8017400:	bf00      	nop
 8017402:	3714      	adds	r7, #20
 8017404:	46bd      	mov	sp, r7
 8017406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801740a:	4770      	bx	lr
 801740c:	e000ed00 	.word	0xe000ed00
 8017410:	05fa0000 	.word	0x05fa0000

08017414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8017414:	b480      	push	{r7}
 8017416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017418:	4b04      	ldr	r3, [pc, #16]	; (801742c <__NVIC_GetPriorityGrouping+0x18>)
 801741a:	68db      	ldr	r3, [r3, #12]
 801741c:	0a1b      	lsrs	r3, r3, #8
 801741e:	f003 0307 	and.w	r3, r3, #7
}
 8017422:	4618      	mov	r0, r3
 8017424:	46bd      	mov	sp, r7
 8017426:	f85d 7b04 	ldr.w	r7, [sp], #4
 801742a:	4770      	bx	lr
 801742c:	e000ed00 	.word	0xe000ed00

08017430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8017430:	b480      	push	{r7}
 8017432:	b083      	sub	sp, #12
 8017434:	af00      	add	r7, sp, #0
 8017436:	4603      	mov	r3, r0
 8017438:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 801743a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801743e:	2b00      	cmp	r3, #0
 8017440:	db0b      	blt.n	801745a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8017442:	88fb      	ldrh	r3, [r7, #6]
 8017444:	f003 021f 	and.w	r2, r3, #31
 8017448:	4907      	ldr	r1, [pc, #28]	; (8017468 <__NVIC_EnableIRQ+0x38>)
 801744a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801744e:	095b      	lsrs	r3, r3, #5
 8017450:	2001      	movs	r0, #1
 8017452:	fa00 f202 	lsl.w	r2, r0, r2
 8017456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 801745a:	bf00      	nop
 801745c:	370c      	adds	r7, #12
 801745e:	46bd      	mov	sp, r7
 8017460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017464:	4770      	bx	lr
 8017466:	bf00      	nop
 8017468:	e000e100 	.word	0xe000e100

0801746c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 801746c:	b480      	push	{r7}
 801746e:	b083      	sub	sp, #12
 8017470:	af00      	add	r7, sp, #0
 8017472:	4603      	mov	r3, r0
 8017474:	6039      	str	r1, [r7, #0]
 8017476:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8017478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801747c:	2b00      	cmp	r3, #0
 801747e:	db0a      	blt.n	8017496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017480:	683b      	ldr	r3, [r7, #0]
 8017482:	b2da      	uxtb	r2, r3
 8017484:	490c      	ldr	r1, [pc, #48]	; (80174b8 <__NVIC_SetPriority+0x4c>)
 8017486:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801748a:	0112      	lsls	r2, r2, #4
 801748c:	b2d2      	uxtb	r2, r2
 801748e:	440b      	add	r3, r1
 8017490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8017494:	e00a      	b.n	80174ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8017496:	683b      	ldr	r3, [r7, #0]
 8017498:	b2da      	uxtb	r2, r3
 801749a:	4908      	ldr	r1, [pc, #32]	; (80174bc <__NVIC_SetPriority+0x50>)
 801749c:	88fb      	ldrh	r3, [r7, #6]
 801749e:	f003 030f 	and.w	r3, r3, #15
 80174a2:	3b04      	subs	r3, #4
 80174a4:	0112      	lsls	r2, r2, #4
 80174a6:	b2d2      	uxtb	r2, r2
 80174a8:	440b      	add	r3, r1
 80174aa:	761a      	strb	r2, [r3, #24]
}
 80174ac:	bf00      	nop
 80174ae:	370c      	adds	r7, #12
 80174b0:	46bd      	mov	sp, r7
 80174b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b6:	4770      	bx	lr
 80174b8:	e000e100 	.word	0xe000e100
 80174bc:	e000ed00 	.word	0xe000ed00

080174c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80174c0:	b480      	push	{r7}
 80174c2:	b089      	sub	sp, #36	; 0x24
 80174c4:	af00      	add	r7, sp, #0
 80174c6:	60f8      	str	r0, [r7, #12]
 80174c8:	60b9      	str	r1, [r7, #8]
 80174ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80174cc:	68fb      	ldr	r3, [r7, #12]
 80174ce:	f003 0307 	and.w	r3, r3, #7
 80174d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80174d4:	69fb      	ldr	r3, [r7, #28]
 80174d6:	f1c3 0307 	rsb	r3, r3, #7
 80174da:	2b04      	cmp	r3, #4
 80174dc:	bf28      	it	cs
 80174de:	2304      	movcs	r3, #4
 80174e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80174e2:	69fb      	ldr	r3, [r7, #28]
 80174e4:	3304      	adds	r3, #4
 80174e6:	2b06      	cmp	r3, #6
 80174e8:	d902      	bls.n	80174f0 <NVIC_EncodePriority+0x30>
 80174ea:	69fb      	ldr	r3, [r7, #28]
 80174ec:	3b03      	subs	r3, #3
 80174ee:	e000      	b.n	80174f2 <NVIC_EncodePriority+0x32>
 80174f0:	2300      	movs	r3, #0
 80174f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80174f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80174f8:	69bb      	ldr	r3, [r7, #24]
 80174fa:	fa02 f303 	lsl.w	r3, r2, r3
 80174fe:	43da      	mvns	r2, r3
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	401a      	ands	r2, r3
 8017504:	697b      	ldr	r3, [r7, #20]
 8017506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017508:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801750c:	697b      	ldr	r3, [r7, #20]
 801750e:	fa01 f303 	lsl.w	r3, r1, r3
 8017512:	43d9      	mvns	r1, r3
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017518:	4313      	orrs	r3, r2
         );
}
 801751a:	4618      	mov	r0, r3
 801751c:	3724      	adds	r7, #36	; 0x24
 801751e:	46bd      	mov	sp, r7
 8017520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017524:	4770      	bx	lr
	...

08017528 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8017528:	b480      	push	{r7}
 801752a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 801752c:	f3bf 8f4f 	dsb	sy
}
 8017530:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8017532:	4b06      	ldr	r3, [pc, #24]	; (801754c <__NVIC_SystemReset+0x24>)
 8017534:	68db      	ldr	r3, [r3, #12]
 8017536:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801753a:	4904      	ldr	r1, [pc, #16]	; (801754c <__NVIC_SystemReset+0x24>)
 801753c:	4b04      	ldr	r3, [pc, #16]	; (8017550 <__NVIC_SystemReset+0x28>)
 801753e:	4313      	orrs	r3, r2
 8017540:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8017542:	f3bf 8f4f 	dsb	sy
}
 8017546:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8017548:	bf00      	nop
 801754a:	e7fd      	b.n	8017548 <__NVIC_SystemReset+0x20>
 801754c:	e000ed00 	.word	0xe000ed00
 8017550:	05fa0004 	.word	0x05fa0004

08017554 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 801755c:	687b      	ldr	r3, [r7, #4]
 801755e:	3b01      	subs	r3, #1
 8017560:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8017564:	d301      	bcc.n	801756a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8017566:	2301      	movs	r3, #1
 8017568:	e00f      	b.n	801758a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801756a:	4a0a      	ldr	r2, [pc, #40]	; (8017594 <SysTick_Config+0x40>)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	3b01      	subs	r3, #1
 8017570:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8017572:	210f      	movs	r1, #15
 8017574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017578:	f7ff ff78 	bl	801746c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801757c:	4b05      	ldr	r3, [pc, #20]	; (8017594 <SysTick_Config+0x40>)
 801757e:	2200      	movs	r2, #0
 8017580:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8017582:	4b04      	ldr	r3, [pc, #16]	; (8017594 <SysTick_Config+0x40>)
 8017584:	2207      	movs	r2, #7
 8017586:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017588:	2300      	movs	r3, #0
}
 801758a:	4618      	mov	r0, r3
 801758c:	3708      	adds	r7, #8
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}
 8017592:	bf00      	nop
 8017594:	e000e010 	.word	0xe000e010

08017598 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017598:	b580      	push	{r7, lr}
 801759a:	b082      	sub	sp, #8
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80175a0:	6878      	ldr	r0, [r7, #4]
 80175a2:	f7ff ff13 	bl	80173cc <__NVIC_SetPriorityGrouping>
}
 80175a6:	bf00      	nop
 80175a8:	3708      	adds	r7, #8
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}

080175ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80175ae:	b580      	push	{r7, lr}
 80175b0:	b086      	sub	sp, #24
 80175b2:	af00      	add	r7, sp, #0
 80175b4:	4603      	mov	r3, r0
 80175b6:	60b9      	str	r1, [r7, #8]
 80175b8:	607a      	str	r2, [r7, #4]
 80175ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80175bc:	f7ff ff2a 	bl	8017414 <__NVIC_GetPriorityGrouping>
 80175c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80175c2:	687a      	ldr	r2, [r7, #4]
 80175c4:	68b9      	ldr	r1, [r7, #8]
 80175c6:	6978      	ldr	r0, [r7, #20]
 80175c8:	f7ff ff7a 	bl	80174c0 <NVIC_EncodePriority>
 80175cc:	4602      	mov	r2, r0
 80175ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80175d2:	4611      	mov	r1, r2
 80175d4:	4618      	mov	r0, r3
 80175d6:	f7ff ff49 	bl	801746c <__NVIC_SetPriority>
}
 80175da:	bf00      	nop
 80175dc:	3718      	adds	r7, #24
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}

080175e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80175e2:	b580      	push	{r7, lr}
 80175e4:	b082      	sub	sp, #8
 80175e6:	af00      	add	r7, sp, #0
 80175e8:	4603      	mov	r3, r0
 80175ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80175ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80175f0:	4618      	mov	r0, r3
 80175f2:	f7ff ff1d 	bl	8017430 <__NVIC_EnableIRQ>
}
 80175f6:	bf00      	nop
 80175f8:	3708      	adds	r7, #8
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80175fe:	b580      	push	{r7, lr}
 8017600:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8017602:	f7ff ff91 	bl	8017528 <__NVIC_SystemReset>

08017606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8017606:	b580      	push	{r7, lr}
 8017608:	b082      	sub	sp, #8
 801760a:	af00      	add	r7, sp, #0
 801760c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801760e:	6878      	ldr	r0, [r7, #4]
 8017610:	f7ff ffa0 	bl	8017554 <SysTick_Config>
 8017614:	4603      	mov	r3, r0
}
 8017616:	4618      	mov	r0, r3
 8017618:	3708      	adds	r7, #8
 801761a:	46bd      	mov	sp, r7
 801761c:	bd80      	pop	{r7, pc}
	...

08017620 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017620:	b580      	push	{r7, lr}
 8017622:	b086      	sub	sp, #24
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8017628:	f7fd fe2a 	bl	8015280 <HAL_GetTick>
 801762c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	2b00      	cmp	r3, #0
 8017632:	d101      	bne.n	8017638 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8017634:	2301      	movs	r3, #1
 8017636:	e314      	b.n	8017c62 <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017638:	687b      	ldr	r3, [r7, #4]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	4a66      	ldr	r2, [pc, #408]	; (80177d8 <HAL_DMA_Init+0x1b8>)
 801763e:	4293      	cmp	r3, r2
 8017640:	d04a      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 8017642:	687b      	ldr	r3, [r7, #4]
 8017644:	681b      	ldr	r3, [r3, #0]
 8017646:	4a65      	ldr	r2, [pc, #404]	; (80177dc <HAL_DMA_Init+0x1bc>)
 8017648:	4293      	cmp	r3, r2
 801764a:	d045      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 801764c:	687b      	ldr	r3, [r7, #4]
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	4a63      	ldr	r2, [pc, #396]	; (80177e0 <HAL_DMA_Init+0x1c0>)
 8017652:	4293      	cmp	r3, r2
 8017654:	d040      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	4a62      	ldr	r2, [pc, #392]	; (80177e4 <HAL_DMA_Init+0x1c4>)
 801765c:	4293      	cmp	r3, r2
 801765e:	d03b      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	681b      	ldr	r3, [r3, #0]
 8017664:	4a60      	ldr	r2, [pc, #384]	; (80177e8 <HAL_DMA_Init+0x1c8>)
 8017666:	4293      	cmp	r3, r2
 8017668:	d036      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681b      	ldr	r3, [r3, #0]
 801766e:	4a5f      	ldr	r2, [pc, #380]	; (80177ec <HAL_DMA_Init+0x1cc>)
 8017670:	4293      	cmp	r3, r2
 8017672:	d031      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	4a5d      	ldr	r2, [pc, #372]	; (80177f0 <HAL_DMA_Init+0x1d0>)
 801767a:	4293      	cmp	r3, r2
 801767c:	d02c      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	4a5c      	ldr	r2, [pc, #368]	; (80177f4 <HAL_DMA_Init+0x1d4>)
 8017684:	4293      	cmp	r3, r2
 8017686:	d027      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	681b      	ldr	r3, [r3, #0]
 801768c:	4a5a      	ldr	r2, [pc, #360]	; (80177f8 <HAL_DMA_Init+0x1d8>)
 801768e:	4293      	cmp	r3, r2
 8017690:	d022      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 8017692:	687b      	ldr	r3, [r7, #4]
 8017694:	681b      	ldr	r3, [r3, #0]
 8017696:	4a59      	ldr	r2, [pc, #356]	; (80177fc <HAL_DMA_Init+0x1dc>)
 8017698:	4293      	cmp	r3, r2
 801769a:	d01d      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	681b      	ldr	r3, [r3, #0]
 80176a0:	4a57      	ldr	r2, [pc, #348]	; (8017800 <HAL_DMA_Init+0x1e0>)
 80176a2:	4293      	cmp	r3, r2
 80176a4:	d018      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	4a56      	ldr	r2, [pc, #344]	; (8017804 <HAL_DMA_Init+0x1e4>)
 80176ac:	4293      	cmp	r3, r2
 80176ae:	d013      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	4a54      	ldr	r2, [pc, #336]	; (8017808 <HAL_DMA_Init+0x1e8>)
 80176b6:	4293      	cmp	r3, r2
 80176b8:	d00e      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	4a53      	ldr	r2, [pc, #332]	; (801780c <HAL_DMA_Init+0x1ec>)
 80176c0:	4293      	cmp	r3, r2
 80176c2:	d009      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	4a51      	ldr	r2, [pc, #324]	; (8017810 <HAL_DMA_Init+0x1f0>)
 80176ca:	4293      	cmp	r3, r2
 80176cc:	d004      	beq.n	80176d8 <HAL_DMA_Init+0xb8>
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	4a50      	ldr	r2, [pc, #320]	; (8017814 <HAL_DMA_Init+0x1f4>)
 80176d4:	4293      	cmp	r3, r2
 80176d6:	d101      	bne.n	80176dc <HAL_DMA_Init+0xbc>
 80176d8:	2301      	movs	r3, #1
 80176da:	e000      	b.n	80176de <HAL_DMA_Init+0xbe>
 80176dc:	2300      	movs	r3, #0
 80176de:	2b00      	cmp	r3, #0
 80176e0:	f000 813c 	beq.w	801795c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	2202      	movs	r2, #2
 80176e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	2200      	movs	r2, #0
 80176f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	4a37      	ldr	r2, [pc, #220]	; (80177d8 <HAL_DMA_Init+0x1b8>)
 80176fa:	4293      	cmp	r3, r2
 80176fc:	d04a      	beq.n	8017794 <HAL_DMA_Init+0x174>
 80176fe:	687b      	ldr	r3, [r7, #4]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	4a36      	ldr	r2, [pc, #216]	; (80177dc <HAL_DMA_Init+0x1bc>)
 8017704:	4293      	cmp	r3, r2
 8017706:	d045      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	4a34      	ldr	r2, [pc, #208]	; (80177e0 <HAL_DMA_Init+0x1c0>)
 801770e:	4293      	cmp	r3, r2
 8017710:	d040      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	4a33      	ldr	r2, [pc, #204]	; (80177e4 <HAL_DMA_Init+0x1c4>)
 8017718:	4293      	cmp	r3, r2
 801771a:	d03b      	beq.n	8017794 <HAL_DMA_Init+0x174>
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	681b      	ldr	r3, [r3, #0]
 8017720:	4a31      	ldr	r2, [pc, #196]	; (80177e8 <HAL_DMA_Init+0x1c8>)
 8017722:	4293      	cmp	r3, r2
 8017724:	d036      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017726:	687b      	ldr	r3, [r7, #4]
 8017728:	681b      	ldr	r3, [r3, #0]
 801772a:	4a30      	ldr	r2, [pc, #192]	; (80177ec <HAL_DMA_Init+0x1cc>)
 801772c:	4293      	cmp	r3, r2
 801772e:	d031      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017730:	687b      	ldr	r3, [r7, #4]
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	4a2e      	ldr	r2, [pc, #184]	; (80177f0 <HAL_DMA_Init+0x1d0>)
 8017736:	4293      	cmp	r3, r2
 8017738:	d02c      	beq.n	8017794 <HAL_DMA_Init+0x174>
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	4a2d      	ldr	r2, [pc, #180]	; (80177f4 <HAL_DMA_Init+0x1d4>)
 8017740:	4293      	cmp	r3, r2
 8017742:	d027      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	681b      	ldr	r3, [r3, #0]
 8017748:	4a2b      	ldr	r2, [pc, #172]	; (80177f8 <HAL_DMA_Init+0x1d8>)
 801774a:	4293      	cmp	r3, r2
 801774c:	d022      	beq.n	8017794 <HAL_DMA_Init+0x174>
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	681b      	ldr	r3, [r3, #0]
 8017752:	4a2a      	ldr	r2, [pc, #168]	; (80177fc <HAL_DMA_Init+0x1dc>)
 8017754:	4293      	cmp	r3, r2
 8017756:	d01d      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017758:	687b      	ldr	r3, [r7, #4]
 801775a:	681b      	ldr	r3, [r3, #0]
 801775c:	4a28      	ldr	r2, [pc, #160]	; (8017800 <HAL_DMA_Init+0x1e0>)
 801775e:	4293      	cmp	r3, r2
 8017760:	d018      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017762:	687b      	ldr	r3, [r7, #4]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	4a27      	ldr	r2, [pc, #156]	; (8017804 <HAL_DMA_Init+0x1e4>)
 8017768:	4293      	cmp	r3, r2
 801776a:	d013      	beq.n	8017794 <HAL_DMA_Init+0x174>
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	4a25      	ldr	r2, [pc, #148]	; (8017808 <HAL_DMA_Init+0x1e8>)
 8017772:	4293      	cmp	r3, r2
 8017774:	d00e      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	4a24      	ldr	r2, [pc, #144]	; (801780c <HAL_DMA_Init+0x1ec>)
 801777c:	4293      	cmp	r3, r2
 801777e:	d009      	beq.n	8017794 <HAL_DMA_Init+0x174>
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	4a22      	ldr	r2, [pc, #136]	; (8017810 <HAL_DMA_Init+0x1f0>)
 8017786:	4293      	cmp	r3, r2
 8017788:	d004      	beq.n	8017794 <HAL_DMA_Init+0x174>
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	4a21      	ldr	r2, [pc, #132]	; (8017814 <HAL_DMA_Init+0x1f4>)
 8017790:	4293      	cmp	r3, r2
 8017792:	d108      	bne.n	80177a6 <HAL_DMA_Init+0x186>
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	681a      	ldr	r2, [r3, #0]
 801779a:	687b      	ldr	r3, [r7, #4]
 801779c:	681b      	ldr	r3, [r3, #0]
 801779e:	f022 0201 	bic.w	r2, r2, #1
 80177a2:	601a      	str	r2, [r3, #0]
 80177a4:	e007      	b.n	80177b6 <HAL_DMA_Init+0x196>
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	681a      	ldr	r2, [r3, #0]
 80177ac:	687b      	ldr	r3, [r7, #4]
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	f022 0201 	bic.w	r2, r2, #1
 80177b4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80177b6:	e02f      	b.n	8017818 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80177b8:	f7fd fd62 	bl	8015280 <HAL_GetTick>
 80177bc:	4602      	mov	r2, r0
 80177be:	693b      	ldr	r3, [r7, #16]
 80177c0:	1ad3      	subs	r3, r2, r3
 80177c2:	2b05      	cmp	r3, #5
 80177c4:	d928      	bls.n	8017818 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	2220      	movs	r2, #32
 80177ca:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	2203      	movs	r2, #3
 80177d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80177d4:	2301      	movs	r3, #1
 80177d6:	e244      	b.n	8017c62 <HAL_DMA_Init+0x642>
 80177d8:	40020010 	.word	0x40020010
 80177dc:	40020028 	.word	0x40020028
 80177e0:	40020040 	.word	0x40020040
 80177e4:	40020058 	.word	0x40020058
 80177e8:	40020070 	.word	0x40020070
 80177ec:	40020088 	.word	0x40020088
 80177f0:	400200a0 	.word	0x400200a0
 80177f4:	400200b8 	.word	0x400200b8
 80177f8:	40020410 	.word	0x40020410
 80177fc:	40020428 	.word	0x40020428
 8017800:	40020440 	.word	0x40020440
 8017804:	40020458 	.word	0x40020458
 8017808:	40020470 	.word	0x40020470
 801780c:	40020488 	.word	0x40020488
 8017810:	400204a0 	.word	0x400204a0
 8017814:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017818:	687b      	ldr	r3, [r7, #4]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	681b      	ldr	r3, [r3, #0]
 801781e:	f003 0301 	and.w	r3, r3, #1
 8017822:	2b00      	cmp	r3, #0
 8017824:	d1c8      	bne.n	80177b8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8017826:	687b      	ldr	r3, [r7, #4]
 8017828:	681b      	ldr	r3, [r3, #0]
 801782a:	681b      	ldr	r3, [r3, #0]
 801782c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801782e:	697a      	ldr	r2, [r7, #20]
 8017830:	4b84      	ldr	r3, [pc, #528]	; (8017a44 <HAL_DMA_Init+0x424>)
 8017832:	4013      	ands	r3, r2
 8017834:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801783e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	691b      	ldr	r3, [r3, #16]
 8017844:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801784a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	699b      	ldr	r3, [r3, #24]
 8017850:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8017856:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	6a1b      	ldr	r3, [r3, #32]
 801785c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801785e:	697a      	ldr	r2, [r7, #20]
 8017860:	4313      	orrs	r3, r2
 8017862:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017868:	2b04      	cmp	r3, #4
 801786a:	d107      	bne.n	801787c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017874:	4313      	orrs	r3, r2
 8017876:	697a      	ldr	r2, [r7, #20]
 8017878:	4313      	orrs	r3, r2
 801787a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	685b      	ldr	r3, [r3, #4]
 8017880:	2b28      	cmp	r3, #40	; 0x28
 8017882:	d903      	bls.n	801788c <HAL_DMA_Init+0x26c>
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	685b      	ldr	r3, [r3, #4]
 8017888:	2b2e      	cmp	r3, #46	; 0x2e
 801788a:	d91f      	bls.n	80178cc <HAL_DMA_Init+0x2ac>
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	685b      	ldr	r3, [r3, #4]
 8017890:	2b3e      	cmp	r3, #62	; 0x3e
 8017892:	d903      	bls.n	801789c <HAL_DMA_Init+0x27c>
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	685b      	ldr	r3, [r3, #4]
 8017898:	2b42      	cmp	r3, #66	; 0x42
 801789a:	d917      	bls.n	80178cc <HAL_DMA_Init+0x2ac>
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	685b      	ldr	r3, [r3, #4]
 80178a0:	2b46      	cmp	r3, #70	; 0x46
 80178a2:	d903      	bls.n	80178ac <HAL_DMA_Init+0x28c>
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	685b      	ldr	r3, [r3, #4]
 80178a8:	2b48      	cmp	r3, #72	; 0x48
 80178aa:	d90f      	bls.n	80178cc <HAL_DMA_Init+0x2ac>
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	2b4e      	cmp	r3, #78	; 0x4e
 80178b2:	d903      	bls.n	80178bc <HAL_DMA_Init+0x29c>
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	685b      	ldr	r3, [r3, #4]
 80178b8:	2b52      	cmp	r3, #82	; 0x52
 80178ba:	d907      	bls.n	80178cc <HAL_DMA_Init+0x2ac>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	2b73      	cmp	r3, #115	; 0x73
 80178c2:	d905      	bls.n	80178d0 <HAL_DMA_Init+0x2b0>
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	685b      	ldr	r3, [r3, #4]
 80178c8:	2b77      	cmp	r3, #119	; 0x77
 80178ca:	d801      	bhi.n	80178d0 <HAL_DMA_Init+0x2b0>
 80178cc:	2301      	movs	r3, #1
 80178ce:	e000      	b.n	80178d2 <HAL_DMA_Init+0x2b2>
 80178d0:	2300      	movs	r3, #0
 80178d2:	2b00      	cmp	r3, #0
 80178d4:	d003      	beq.n	80178de <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80178d6:	697b      	ldr	r3, [r7, #20]
 80178d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80178dc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	681b      	ldr	r3, [r3, #0]
 80178e2:	697a      	ldr	r2, [r7, #20]
 80178e4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681b      	ldr	r3, [r3, #0]
 80178ea:	695b      	ldr	r3, [r3, #20]
 80178ec:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80178ee:	697b      	ldr	r3, [r7, #20]
 80178f0:	f023 0307 	bic.w	r3, r3, #7
 80178f4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178fa:	697a      	ldr	r2, [r7, #20]
 80178fc:	4313      	orrs	r3, r2
 80178fe:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017904:	2b04      	cmp	r3, #4
 8017906:	d117      	bne.n	8017938 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801790c:	697a      	ldr	r2, [r7, #20]
 801790e:	4313      	orrs	r3, r2
 8017910:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017916:	2b00      	cmp	r3, #0
 8017918:	d00e      	beq.n	8017938 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 801791a:	6878      	ldr	r0, [r7, #4]
 801791c:	f001 fdcc 	bl	80194b8 <DMA_CheckFifoParam>
 8017920:	4603      	mov	r3, r0
 8017922:	2b00      	cmp	r3, #0
 8017924:	d008      	beq.n	8017938 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	2240      	movs	r2, #64	; 0x40
 801792a:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	2201      	movs	r2, #1
 8017930:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8017934:	2301      	movs	r3, #1
 8017936:	e194      	b.n	8017c62 <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	697a      	ldr	r2, [r7, #20]
 801793e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017940:	6878      	ldr	r0, [r7, #4]
 8017942:	f001 fd07 	bl	8019354 <DMA_CalcBaseAndBitshift>
 8017946:	4603      	mov	r3, r0
 8017948:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801794e:	f003 031f 	and.w	r3, r3, #31
 8017952:	223f      	movs	r2, #63	; 0x3f
 8017954:	409a      	lsls	r2, r3
 8017956:	68bb      	ldr	r3, [r7, #8]
 8017958:	609a      	str	r2, [r3, #8]
 801795a:	e0ca      	b.n	8017af2 <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	4a39      	ldr	r2, [pc, #228]	; (8017a48 <HAL_DMA_Init+0x428>)
 8017962:	4293      	cmp	r3, r2
 8017964:	d022      	beq.n	80179ac <HAL_DMA_Init+0x38c>
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	4a38      	ldr	r2, [pc, #224]	; (8017a4c <HAL_DMA_Init+0x42c>)
 801796c:	4293      	cmp	r3, r2
 801796e:	d01d      	beq.n	80179ac <HAL_DMA_Init+0x38c>
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	4a36      	ldr	r2, [pc, #216]	; (8017a50 <HAL_DMA_Init+0x430>)
 8017976:	4293      	cmp	r3, r2
 8017978:	d018      	beq.n	80179ac <HAL_DMA_Init+0x38c>
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	681b      	ldr	r3, [r3, #0]
 801797e:	4a35      	ldr	r2, [pc, #212]	; (8017a54 <HAL_DMA_Init+0x434>)
 8017980:	4293      	cmp	r3, r2
 8017982:	d013      	beq.n	80179ac <HAL_DMA_Init+0x38c>
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	4a33      	ldr	r2, [pc, #204]	; (8017a58 <HAL_DMA_Init+0x438>)
 801798a:	4293      	cmp	r3, r2
 801798c:	d00e      	beq.n	80179ac <HAL_DMA_Init+0x38c>
 801798e:	687b      	ldr	r3, [r7, #4]
 8017990:	681b      	ldr	r3, [r3, #0]
 8017992:	4a32      	ldr	r2, [pc, #200]	; (8017a5c <HAL_DMA_Init+0x43c>)
 8017994:	4293      	cmp	r3, r2
 8017996:	d009      	beq.n	80179ac <HAL_DMA_Init+0x38c>
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	4a30      	ldr	r2, [pc, #192]	; (8017a60 <HAL_DMA_Init+0x440>)
 801799e:	4293      	cmp	r3, r2
 80179a0:	d004      	beq.n	80179ac <HAL_DMA_Init+0x38c>
 80179a2:	687b      	ldr	r3, [r7, #4]
 80179a4:	681b      	ldr	r3, [r3, #0]
 80179a6:	4a2f      	ldr	r2, [pc, #188]	; (8017a64 <HAL_DMA_Init+0x444>)
 80179a8:	4293      	cmp	r3, r2
 80179aa:	d101      	bne.n	80179b0 <HAL_DMA_Init+0x390>
 80179ac:	2301      	movs	r3, #1
 80179ae:	e000      	b.n	80179b2 <HAL_DMA_Init+0x392>
 80179b0:	2300      	movs	r3, #0
 80179b2:	2b00      	cmp	r3, #0
 80179b4:	f000 8094 	beq.w	8017ae0 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	681b      	ldr	r3, [r3, #0]
 80179bc:	4a22      	ldr	r2, [pc, #136]	; (8017a48 <HAL_DMA_Init+0x428>)
 80179be:	4293      	cmp	r3, r2
 80179c0:	d021      	beq.n	8017a06 <HAL_DMA_Init+0x3e6>
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	4a21      	ldr	r2, [pc, #132]	; (8017a4c <HAL_DMA_Init+0x42c>)
 80179c8:	4293      	cmp	r3, r2
 80179ca:	d01c      	beq.n	8017a06 <HAL_DMA_Init+0x3e6>
 80179cc:	687b      	ldr	r3, [r7, #4]
 80179ce:	681b      	ldr	r3, [r3, #0]
 80179d0:	4a1f      	ldr	r2, [pc, #124]	; (8017a50 <HAL_DMA_Init+0x430>)
 80179d2:	4293      	cmp	r3, r2
 80179d4:	d017      	beq.n	8017a06 <HAL_DMA_Init+0x3e6>
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	4a1e      	ldr	r2, [pc, #120]	; (8017a54 <HAL_DMA_Init+0x434>)
 80179dc:	4293      	cmp	r3, r2
 80179de:	d012      	beq.n	8017a06 <HAL_DMA_Init+0x3e6>
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	4a1c      	ldr	r2, [pc, #112]	; (8017a58 <HAL_DMA_Init+0x438>)
 80179e6:	4293      	cmp	r3, r2
 80179e8:	d00d      	beq.n	8017a06 <HAL_DMA_Init+0x3e6>
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	681b      	ldr	r3, [r3, #0]
 80179ee:	4a1b      	ldr	r2, [pc, #108]	; (8017a5c <HAL_DMA_Init+0x43c>)
 80179f0:	4293      	cmp	r3, r2
 80179f2:	d008      	beq.n	8017a06 <HAL_DMA_Init+0x3e6>
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	4a19      	ldr	r2, [pc, #100]	; (8017a60 <HAL_DMA_Init+0x440>)
 80179fa:	4293      	cmp	r3, r2
 80179fc:	d003      	beq.n	8017a06 <HAL_DMA_Init+0x3e6>
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	4a18      	ldr	r2, [pc, #96]	; (8017a64 <HAL_DMA_Init+0x444>)
 8017a04:	4293      	cmp	r3, r2
 8017a06:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017a08:	687b      	ldr	r3, [r7, #4]
 8017a0a:	2202      	movs	r2, #2
 8017a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	2200      	movs	r2, #0
 8017a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8017a20:	697a      	ldr	r2, [r7, #20]
 8017a22:	4b11      	ldr	r3, [pc, #68]	; (8017a68 <HAL_DMA_Init+0x448>)
 8017a24:	4013      	ands	r3, r2
 8017a26:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	689b      	ldr	r3, [r3, #8]
 8017a2c:	2b40      	cmp	r3, #64	; 0x40
 8017a2e:	d01d      	beq.n	8017a6c <HAL_DMA_Init+0x44c>
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	689b      	ldr	r3, [r3, #8]
 8017a34:	2b80      	cmp	r3, #128	; 0x80
 8017a36:	d102      	bne.n	8017a3e <HAL_DMA_Init+0x41e>
 8017a38:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017a3c:	e017      	b.n	8017a6e <HAL_DMA_Init+0x44e>
 8017a3e:	2300      	movs	r3, #0
 8017a40:	e015      	b.n	8017a6e <HAL_DMA_Init+0x44e>
 8017a42:	bf00      	nop
 8017a44:	fe10803f 	.word	0xfe10803f
 8017a48:	58025408 	.word	0x58025408
 8017a4c:	5802541c 	.word	0x5802541c
 8017a50:	58025430 	.word	0x58025430
 8017a54:	58025444 	.word	0x58025444
 8017a58:	58025458 	.word	0x58025458
 8017a5c:	5802546c 	.word	0x5802546c
 8017a60:	58025480 	.word	0x58025480
 8017a64:	58025494 	.word	0x58025494
 8017a68:	fffe000f 	.word	0xfffe000f
 8017a6c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017a6e:	687a      	ldr	r2, [r7, #4]
 8017a70:	68d2      	ldr	r2, [r2, #12]
 8017a72:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017a74:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	691b      	ldr	r3, [r3, #16]
 8017a7a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017a7c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	695b      	ldr	r3, [r3, #20]
 8017a82:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017a84:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	699b      	ldr	r3, [r3, #24]
 8017a8a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017a8c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	69db      	ldr	r3, [r3, #28]
 8017a92:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017a94:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	6a1b      	ldr	r3, [r3, #32]
 8017a9a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017a9c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017a9e:	697a      	ldr	r2, [r7, #20]
 8017aa0:	4313      	orrs	r3, r2
 8017aa2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8017aa4:	687b      	ldr	r3, [r7, #4]
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	697a      	ldr	r2, [r7, #20]
 8017aaa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8017aac:	687b      	ldr	r3, [r7, #4]
 8017aae:	681b      	ldr	r3, [r3, #0]
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	4b6e      	ldr	r3, [pc, #440]	; (8017c6c <HAL_DMA_Init+0x64c>)
 8017ab4:	4413      	add	r3, r2
 8017ab6:	4a6e      	ldr	r2, [pc, #440]	; (8017c70 <HAL_DMA_Init+0x650>)
 8017ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8017abc:	091b      	lsrs	r3, r3, #4
 8017abe:	009a      	lsls	r2, r3, #2
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017ac4:	6878      	ldr	r0, [r7, #4]
 8017ac6:	f001 fc45 	bl	8019354 <DMA_CalcBaseAndBitshift>
 8017aca:	4603      	mov	r3, r0
 8017acc:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017ad2:	f003 031f 	and.w	r3, r3, #31
 8017ad6:	2201      	movs	r2, #1
 8017ad8:	409a      	lsls	r2, r3
 8017ada:	68fb      	ldr	r3, [r7, #12]
 8017adc:	605a      	str	r2, [r3, #4]
 8017ade:	e008      	b.n	8017af2 <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	2240      	movs	r2, #64	; 0x40
 8017ae4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	2203      	movs	r2, #3
 8017aea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8017aee:	2301      	movs	r3, #1
 8017af0:	e0b7      	b.n	8017c62 <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	4a5f      	ldr	r2, [pc, #380]	; (8017c74 <HAL_DMA_Init+0x654>)
 8017af8:	4293      	cmp	r3, r2
 8017afa:	d072      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	681b      	ldr	r3, [r3, #0]
 8017b00:	4a5d      	ldr	r2, [pc, #372]	; (8017c78 <HAL_DMA_Init+0x658>)
 8017b02:	4293      	cmp	r3, r2
 8017b04:	d06d      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	4a5c      	ldr	r2, [pc, #368]	; (8017c7c <HAL_DMA_Init+0x65c>)
 8017b0c:	4293      	cmp	r3, r2
 8017b0e:	d068      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	4a5a      	ldr	r2, [pc, #360]	; (8017c80 <HAL_DMA_Init+0x660>)
 8017b16:	4293      	cmp	r3, r2
 8017b18:	d063      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b1a:	687b      	ldr	r3, [r7, #4]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	4a59      	ldr	r2, [pc, #356]	; (8017c84 <HAL_DMA_Init+0x664>)
 8017b20:	4293      	cmp	r3, r2
 8017b22:	d05e      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	4a57      	ldr	r2, [pc, #348]	; (8017c88 <HAL_DMA_Init+0x668>)
 8017b2a:	4293      	cmp	r3, r2
 8017b2c:	d059      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	681b      	ldr	r3, [r3, #0]
 8017b32:	4a56      	ldr	r2, [pc, #344]	; (8017c8c <HAL_DMA_Init+0x66c>)
 8017b34:	4293      	cmp	r3, r2
 8017b36:	d054      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	681b      	ldr	r3, [r3, #0]
 8017b3c:	4a54      	ldr	r2, [pc, #336]	; (8017c90 <HAL_DMA_Init+0x670>)
 8017b3e:	4293      	cmp	r3, r2
 8017b40:	d04f      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	681b      	ldr	r3, [r3, #0]
 8017b46:	4a53      	ldr	r2, [pc, #332]	; (8017c94 <HAL_DMA_Init+0x674>)
 8017b48:	4293      	cmp	r3, r2
 8017b4a:	d04a      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b4c:	687b      	ldr	r3, [r7, #4]
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	4a51      	ldr	r2, [pc, #324]	; (8017c98 <HAL_DMA_Init+0x678>)
 8017b52:	4293      	cmp	r3, r2
 8017b54:	d045      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	681b      	ldr	r3, [r3, #0]
 8017b5a:	4a50      	ldr	r2, [pc, #320]	; (8017c9c <HAL_DMA_Init+0x67c>)
 8017b5c:	4293      	cmp	r3, r2
 8017b5e:	d040      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b60:	687b      	ldr	r3, [r7, #4]
 8017b62:	681b      	ldr	r3, [r3, #0]
 8017b64:	4a4e      	ldr	r2, [pc, #312]	; (8017ca0 <HAL_DMA_Init+0x680>)
 8017b66:	4293      	cmp	r3, r2
 8017b68:	d03b      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	4a4d      	ldr	r2, [pc, #308]	; (8017ca4 <HAL_DMA_Init+0x684>)
 8017b70:	4293      	cmp	r3, r2
 8017b72:	d036      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	4a4b      	ldr	r2, [pc, #300]	; (8017ca8 <HAL_DMA_Init+0x688>)
 8017b7a:	4293      	cmp	r3, r2
 8017b7c:	d031      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	4a4a      	ldr	r2, [pc, #296]	; (8017cac <HAL_DMA_Init+0x68c>)
 8017b84:	4293      	cmp	r3, r2
 8017b86:	d02c      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	4a48      	ldr	r2, [pc, #288]	; (8017cb0 <HAL_DMA_Init+0x690>)
 8017b8e:	4293      	cmp	r3, r2
 8017b90:	d027      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	4a47      	ldr	r2, [pc, #284]	; (8017cb4 <HAL_DMA_Init+0x694>)
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	d022      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	4a45      	ldr	r2, [pc, #276]	; (8017cb8 <HAL_DMA_Init+0x698>)
 8017ba2:	4293      	cmp	r3, r2
 8017ba4:	d01d      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	4a44      	ldr	r2, [pc, #272]	; (8017cbc <HAL_DMA_Init+0x69c>)
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d018      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	4a42      	ldr	r2, [pc, #264]	; (8017cc0 <HAL_DMA_Init+0x6a0>)
 8017bb6:	4293      	cmp	r3, r2
 8017bb8:	d013      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4a41      	ldr	r2, [pc, #260]	; (8017cc4 <HAL_DMA_Init+0x6a4>)
 8017bc0:	4293      	cmp	r3, r2
 8017bc2:	d00e      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	4a3f      	ldr	r2, [pc, #252]	; (8017cc8 <HAL_DMA_Init+0x6a8>)
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	d009      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	4a3e      	ldr	r2, [pc, #248]	; (8017ccc <HAL_DMA_Init+0x6ac>)
 8017bd4:	4293      	cmp	r3, r2
 8017bd6:	d004      	beq.n	8017be2 <HAL_DMA_Init+0x5c2>
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	4a3c      	ldr	r2, [pc, #240]	; (8017cd0 <HAL_DMA_Init+0x6b0>)
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d101      	bne.n	8017be6 <HAL_DMA_Init+0x5c6>
 8017be2:	2301      	movs	r3, #1
 8017be4:	e000      	b.n	8017be8 <HAL_DMA_Init+0x5c8>
 8017be6:	2300      	movs	r3, #0
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d032      	beq.n	8017c52 <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017bec:	6878      	ldr	r0, [r7, #4]
 8017bee:	f001 fcdf 	bl	80195b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	689b      	ldr	r3, [r3, #8]
 8017bf6:	2b80      	cmp	r3, #128	; 0x80
 8017bf8:	d102      	bne.n	8017c00 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2200      	movs	r2, #0
 8017bfe:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	685a      	ldr	r2, [r3, #4]
 8017c04:	687b      	ldr	r3, [r7, #4]
 8017c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017c08:	b2d2      	uxtb	r2, r2
 8017c0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017c0c:	687b      	ldr	r3, [r7, #4]
 8017c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017c10:	687a      	ldr	r2, [r7, #4]
 8017c12:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017c14:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8017c16:	687b      	ldr	r3, [r7, #4]
 8017c18:	685b      	ldr	r3, [r3, #4]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d010      	beq.n	8017c40 <HAL_DMA_Init+0x620>
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	685b      	ldr	r3, [r3, #4]
 8017c22:	2b08      	cmp	r3, #8
 8017c24:	d80c      	bhi.n	8017c40 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017c26:	6878      	ldr	r0, [r7, #4]
 8017c28:	f001 fd5c 	bl	80196e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c30:	2200      	movs	r2, #0
 8017c32:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017c34:	687b      	ldr	r3, [r7, #4]
 8017c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017c38:	687a      	ldr	r2, [r7, #4]
 8017c3a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8017c3c:	605a      	str	r2, [r3, #4]
 8017c3e:	e008      	b.n	8017c52 <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8017c40:	687b      	ldr	r3, [r7, #4]
 8017c42:	2200      	movs	r2, #0
 8017c44:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	2200      	movs	r2, #0
 8017c4a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8017c4c:	687b      	ldr	r3, [r7, #4]
 8017c4e:	2200      	movs	r2, #0
 8017c50:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	2200      	movs	r2, #0
 8017c56:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	2201      	movs	r2, #1
 8017c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8017c60:	2300      	movs	r3, #0
}
 8017c62:	4618      	mov	r0, r3
 8017c64:	3718      	adds	r7, #24
 8017c66:	46bd      	mov	sp, r7
 8017c68:	bd80      	pop	{r7, pc}
 8017c6a:	bf00      	nop
 8017c6c:	a7fdabf8 	.word	0xa7fdabf8
 8017c70:	cccccccd 	.word	0xcccccccd
 8017c74:	40020010 	.word	0x40020010
 8017c78:	40020028 	.word	0x40020028
 8017c7c:	40020040 	.word	0x40020040
 8017c80:	40020058 	.word	0x40020058
 8017c84:	40020070 	.word	0x40020070
 8017c88:	40020088 	.word	0x40020088
 8017c8c:	400200a0 	.word	0x400200a0
 8017c90:	400200b8 	.word	0x400200b8
 8017c94:	40020410 	.word	0x40020410
 8017c98:	40020428 	.word	0x40020428
 8017c9c:	40020440 	.word	0x40020440
 8017ca0:	40020458 	.word	0x40020458
 8017ca4:	40020470 	.word	0x40020470
 8017ca8:	40020488 	.word	0x40020488
 8017cac:	400204a0 	.word	0x400204a0
 8017cb0:	400204b8 	.word	0x400204b8
 8017cb4:	58025408 	.word	0x58025408
 8017cb8:	5802541c 	.word	0x5802541c
 8017cbc:	58025430 	.word	0x58025430
 8017cc0:	58025444 	.word	0x58025444
 8017cc4:	58025458 	.word	0x58025458
 8017cc8:	5802546c 	.word	0x5802546c
 8017ccc:	58025480 	.word	0x58025480
 8017cd0:	58025494 	.word	0x58025494

08017cd4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b086      	sub	sp, #24
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	60f8      	str	r0, [r7, #12]
 8017cdc:	60b9      	str	r1, [r7, #8]
 8017cde:	607a      	str	r2, [r7, #4]
 8017ce0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017ce2:	2300      	movs	r3, #0
 8017ce4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017ce6:	68fb      	ldr	r3, [r7, #12]
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d101      	bne.n	8017cf0 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8017cec:	2301      	movs	r3, #1
 8017cee:	e226      	b.n	801813e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8017cf0:	68fb      	ldr	r3, [r7, #12]
 8017cf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017cf6:	2b01      	cmp	r3, #1
 8017cf8:	d101      	bne.n	8017cfe <HAL_DMA_Start_IT+0x2a>
 8017cfa:	2302      	movs	r3, #2
 8017cfc:	e21f      	b.n	801813e <HAL_DMA_Start_IT+0x46a>
 8017cfe:	68fb      	ldr	r3, [r7, #12]
 8017d00:	2201      	movs	r2, #1
 8017d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8017d06:	68fb      	ldr	r3, [r7, #12]
 8017d08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017d0c:	b2db      	uxtb	r3, r3
 8017d0e:	2b01      	cmp	r3, #1
 8017d10:	f040 820a 	bne.w	8018128 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017d14:	68fb      	ldr	r3, [r7, #12]
 8017d16:	2202      	movs	r2, #2
 8017d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017d1c:	68fb      	ldr	r3, [r7, #12]
 8017d1e:	2200      	movs	r2, #0
 8017d20:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017d22:	68fb      	ldr	r3, [r7, #12]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	4a68      	ldr	r2, [pc, #416]	; (8017ec8 <HAL_DMA_Start_IT+0x1f4>)
 8017d28:	4293      	cmp	r3, r2
 8017d2a:	d04a      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	681b      	ldr	r3, [r3, #0]
 8017d30:	4a66      	ldr	r2, [pc, #408]	; (8017ecc <HAL_DMA_Start_IT+0x1f8>)
 8017d32:	4293      	cmp	r3, r2
 8017d34:	d045      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d36:	68fb      	ldr	r3, [r7, #12]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	4a65      	ldr	r2, [pc, #404]	; (8017ed0 <HAL_DMA_Start_IT+0x1fc>)
 8017d3c:	4293      	cmp	r3, r2
 8017d3e:	d040      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d40:	68fb      	ldr	r3, [r7, #12]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	4a63      	ldr	r2, [pc, #396]	; (8017ed4 <HAL_DMA_Start_IT+0x200>)
 8017d46:	4293      	cmp	r3, r2
 8017d48:	d03b      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d4a:	68fb      	ldr	r3, [r7, #12]
 8017d4c:	681b      	ldr	r3, [r3, #0]
 8017d4e:	4a62      	ldr	r2, [pc, #392]	; (8017ed8 <HAL_DMA_Start_IT+0x204>)
 8017d50:	4293      	cmp	r3, r2
 8017d52:	d036      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	4a60      	ldr	r2, [pc, #384]	; (8017edc <HAL_DMA_Start_IT+0x208>)
 8017d5a:	4293      	cmp	r3, r2
 8017d5c:	d031      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	4a5f      	ldr	r2, [pc, #380]	; (8017ee0 <HAL_DMA_Start_IT+0x20c>)
 8017d64:	4293      	cmp	r3, r2
 8017d66:	d02c      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	4a5d      	ldr	r2, [pc, #372]	; (8017ee4 <HAL_DMA_Start_IT+0x210>)
 8017d6e:	4293      	cmp	r3, r2
 8017d70:	d027      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	4a5c      	ldr	r2, [pc, #368]	; (8017ee8 <HAL_DMA_Start_IT+0x214>)
 8017d78:	4293      	cmp	r3, r2
 8017d7a:	d022      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	681b      	ldr	r3, [r3, #0]
 8017d80:	4a5a      	ldr	r2, [pc, #360]	; (8017eec <HAL_DMA_Start_IT+0x218>)
 8017d82:	4293      	cmp	r3, r2
 8017d84:	d01d      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d86:	68fb      	ldr	r3, [r7, #12]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4a59      	ldr	r2, [pc, #356]	; (8017ef0 <HAL_DMA_Start_IT+0x21c>)
 8017d8c:	4293      	cmp	r3, r2
 8017d8e:	d018      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d90:	68fb      	ldr	r3, [r7, #12]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	4a57      	ldr	r2, [pc, #348]	; (8017ef4 <HAL_DMA_Start_IT+0x220>)
 8017d96:	4293      	cmp	r3, r2
 8017d98:	d013      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	4a56      	ldr	r2, [pc, #344]	; (8017ef8 <HAL_DMA_Start_IT+0x224>)
 8017da0:	4293      	cmp	r3, r2
 8017da2:	d00e      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4a54      	ldr	r2, [pc, #336]	; (8017efc <HAL_DMA_Start_IT+0x228>)
 8017daa:	4293      	cmp	r3, r2
 8017dac:	d009      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	4a53      	ldr	r2, [pc, #332]	; (8017f00 <HAL_DMA_Start_IT+0x22c>)
 8017db4:	4293      	cmp	r3, r2
 8017db6:	d004      	beq.n	8017dc2 <HAL_DMA_Start_IT+0xee>
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	4a51      	ldr	r2, [pc, #324]	; (8017f04 <HAL_DMA_Start_IT+0x230>)
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d108      	bne.n	8017dd4 <HAL_DMA_Start_IT+0x100>
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	681a      	ldr	r2, [r3, #0]
 8017dc8:	68fb      	ldr	r3, [r7, #12]
 8017dca:	681b      	ldr	r3, [r3, #0]
 8017dcc:	f022 0201 	bic.w	r2, r2, #1
 8017dd0:	601a      	str	r2, [r3, #0]
 8017dd2:	e007      	b.n	8017de4 <HAL_DMA_Start_IT+0x110>
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	681a      	ldr	r2, [r3, #0]
 8017dda:	68fb      	ldr	r3, [r7, #12]
 8017ddc:	681b      	ldr	r3, [r3, #0]
 8017dde:	f022 0201 	bic.w	r2, r2, #1
 8017de2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017de4:	683b      	ldr	r3, [r7, #0]
 8017de6:	687a      	ldr	r2, [r7, #4]
 8017de8:	68b9      	ldr	r1, [r7, #8]
 8017dea:	68f8      	ldr	r0, [r7, #12]
 8017dec:	f001 f906 	bl	8018ffc <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017df0:	68fb      	ldr	r3, [r7, #12]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	4a34      	ldr	r2, [pc, #208]	; (8017ec8 <HAL_DMA_Start_IT+0x1f4>)
 8017df6:	4293      	cmp	r3, r2
 8017df8:	d04a      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017dfa:	68fb      	ldr	r3, [r7, #12]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	4a33      	ldr	r2, [pc, #204]	; (8017ecc <HAL_DMA_Start_IT+0x1f8>)
 8017e00:	4293      	cmp	r3, r2
 8017e02:	d045      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e04:	68fb      	ldr	r3, [r7, #12]
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	4a31      	ldr	r2, [pc, #196]	; (8017ed0 <HAL_DMA_Start_IT+0x1fc>)
 8017e0a:	4293      	cmp	r3, r2
 8017e0c:	d040      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e0e:	68fb      	ldr	r3, [r7, #12]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	4a30      	ldr	r2, [pc, #192]	; (8017ed4 <HAL_DMA_Start_IT+0x200>)
 8017e14:	4293      	cmp	r3, r2
 8017e16:	d03b      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	4a2e      	ldr	r2, [pc, #184]	; (8017ed8 <HAL_DMA_Start_IT+0x204>)
 8017e1e:	4293      	cmp	r3, r2
 8017e20:	d036      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	4a2d      	ldr	r2, [pc, #180]	; (8017edc <HAL_DMA_Start_IT+0x208>)
 8017e28:	4293      	cmp	r3, r2
 8017e2a:	d031      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e2c:	68fb      	ldr	r3, [r7, #12]
 8017e2e:	681b      	ldr	r3, [r3, #0]
 8017e30:	4a2b      	ldr	r2, [pc, #172]	; (8017ee0 <HAL_DMA_Start_IT+0x20c>)
 8017e32:	4293      	cmp	r3, r2
 8017e34:	d02c      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	4a2a      	ldr	r2, [pc, #168]	; (8017ee4 <HAL_DMA_Start_IT+0x210>)
 8017e3c:	4293      	cmp	r3, r2
 8017e3e:	d027      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	4a28      	ldr	r2, [pc, #160]	; (8017ee8 <HAL_DMA_Start_IT+0x214>)
 8017e46:	4293      	cmp	r3, r2
 8017e48:	d022      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e4a:	68fb      	ldr	r3, [r7, #12]
 8017e4c:	681b      	ldr	r3, [r3, #0]
 8017e4e:	4a27      	ldr	r2, [pc, #156]	; (8017eec <HAL_DMA_Start_IT+0x218>)
 8017e50:	4293      	cmp	r3, r2
 8017e52:	d01d      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e54:	68fb      	ldr	r3, [r7, #12]
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	4a25      	ldr	r2, [pc, #148]	; (8017ef0 <HAL_DMA_Start_IT+0x21c>)
 8017e5a:	4293      	cmp	r3, r2
 8017e5c:	d018      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e5e:	68fb      	ldr	r3, [r7, #12]
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	4a24      	ldr	r2, [pc, #144]	; (8017ef4 <HAL_DMA_Start_IT+0x220>)
 8017e64:	4293      	cmp	r3, r2
 8017e66:	d013      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	4a22      	ldr	r2, [pc, #136]	; (8017ef8 <HAL_DMA_Start_IT+0x224>)
 8017e6e:	4293      	cmp	r3, r2
 8017e70:	d00e      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	4a21      	ldr	r2, [pc, #132]	; (8017efc <HAL_DMA_Start_IT+0x228>)
 8017e78:	4293      	cmp	r3, r2
 8017e7a:	d009      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	4a1f      	ldr	r2, [pc, #124]	; (8017f00 <HAL_DMA_Start_IT+0x22c>)
 8017e82:	4293      	cmp	r3, r2
 8017e84:	d004      	beq.n	8017e90 <HAL_DMA_Start_IT+0x1bc>
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4a1e      	ldr	r2, [pc, #120]	; (8017f04 <HAL_DMA_Start_IT+0x230>)
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	d101      	bne.n	8017e94 <HAL_DMA_Start_IT+0x1c0>
 8017e90:	2301      	movs	r3, #1
 8017e92:	e000      	b.n	8017e96 <HAL_DMA_Start_IT+0x1c2>
 8017e94:	2300      	movs	r3, #0
 8017e96:	2b00      	cmp	r3, #0
 8017e98:	d036      	beq.n	8017f08 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	f023 021e 	bic.w	r2, r3, #30
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	f042 0216 	orr.w	r2, r2, #22
 8017eac:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	d03e      	beq.n	8017f34 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8017eb6:	68fb      	ldr	r3, [r7, #12]
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	681a      	ldr	r2, [r3, #0]
 8017ebc:	68fb      	ldr	r3, [r7, #12]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	f042 0208 	orr.w	r2, r2, #8
 8017ec4:	601a      	str	r2, [r3, #0]
 8017ec6:	e035      	b.n	8017f34 <HAL_DMA_Start_IT+0x260>
 8017ec8:	40020010 	.word	0x40020010
 8017ecc:	40020028 	.word	0x40020028
 8017ed0:	40020040 	.word	0x40020040
 8017ed4:	40020058 	.word	0x40020058
 8017ed8:	40020070 	.word	0x40020070
 8017edc:	40020088 	.word	0x40020088
 8017ee0:	400200a0 	.word	0x400200a0
 8017ee4:	400200b8 	.word	0x400200b8
 8017ee8:	40020410 	.word	0x40020410
 8017eec:	40020428 	.word	0x40020428
 8017ef0:	40020440 	.word	0x40020440
 8017ef4:	40020458 	.word	0x40020458
 8017ef8:	40020470 	.word	0x40020470
 8017efc:	40020488 	.word	0x40020488
 8017f00:	400204a0 	.word	0x400204a0
 8017f04:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8017f08:	68fb      	ldr	r3, [r7, #12]
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	681b      	ldr	r3, [r3, #0]
 8017f0e:	f023 020e 	bic.w	r2, r3, #14
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	f042 020a 	orr.w	r2, r2, #10
 8017f1a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f20:	2b00      	cmp	r3, #0
 8017f22:	d007      	beq.n	8017f34 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8017f24:	68fb      	ldr	r3, [r7, #12]
 8017f26:	681b      	ldr	r3, [r3, #0]
 8017f28:	681a      	ldr	r2, [r3, #0]
 8017f2a:	68fb      	ldr	r3, [r7, #12]
 8017f2c:	681b      	ldr	r3, [r3, #0]
 8017f2e:	f042 0204 	orr.w	r2, r2, #4
 8017f32:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	4a83      	ldr	r2, [pc, #524]	; (8018148 <HAL_DMA_Start_IT+0x474>)
 8017f3a:	4293      	cmp	r3, r2
 8017f3c:	d072      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	4a82      	ldr	r2, [pc, #520]	; (801814c <HAL_DMA_Start_IT+0x478>)
 8017f44:	4293      	cmp	r3, r2
 8017f46:	d06d      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f48:	68fb      	ldr	r3, [r7, #12]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	4a80      	ldr	r2, [pc, #512]	; (8018150 <HAL_DMA_Start_IT+0x47c>)
 8017f4e:	4293      	cmp	r3, r2
 8017f50:	d068      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	681b      	ldr	r3, [r3, #0]
 8017f56:	4a7f      	ldr	r2, [pc, #508]	; (8018154 <HAL_DMA_Start_IT+0x480>)
 8017f58:	4293      	cmp	r3, r2
 8017f5a:	d063      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	4a7d      	ldr	r2, [pc, #500]	; (8018158 <HAL_DMA_Start_IT+0x484>)
 8017f62:	4293      	cmp	r3, r2
 8017f64:	d05e      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	4a7c      	ldr	r2, [pc, #496]	; (801815c <HAL_DMA_Start_IT+0x488>)
 8017f6c:	4293      	cmp	r3, r2
 8017f6e:	d059      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	681b      	ldr	r3, [r3, #0]
 8017f74:	4a7a      	ldr	r2, [pc, #488]	; (8018160 <HAL_DMA_Start_IT+0x48c>)
 8017f76:	4293      	cmp	r3, r2
 8017f78:	d054      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f7a:	68fb      	ldr	r3, [r7, #12]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	4a79      	ldr	r2, [pc, #484]	; (8018164 <HAL_DMA_Start_IT+0x490>)
 8017f80:	4293      	cmp	r3, r2
 8017f82:	d04f      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	4a77      	ldr	r2, [pc, #476]	; (8018168 <HAL_DMA_Start_IT+0x494>)
 8017f8a:	4293      	cmp	r3, r2
 8017f8c:	d04a      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f8e:	68fb      	ldr	r3, [r7, #12]
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	4a76      	ldr	r2, [pc, #472]	; (801816c <HAL_DMA_Start_IT+0x498>)
 8017f94:	4293      	cmp	r3, r2
 8017f96:	d045      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	681b      	ldr	r3, [r3, #0]
 8017f9c:	4a74      	ldr	r2, [pc, #464]	; (8018170 <HAL_DMA_Start_IT+0x49c>)
 8017f9e:	4293      	cmp	r3, r2
 8017fa0:	d040      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	4a73      	ldr	r2, [pc, #460]	; (8018174 <HAL_DMA_Start_IT+0x4a0>)
 8017fa8:	4293      	cmp	r3, r2
 8017faa:	d03b      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4a71      	ldr	r2, [pc, #452]	; (8018178 <HAL_DMA_Start_IT+0x4a4>)
 8017fb2:	4293      	cmp	r3, r2
 8017fb4:	d036      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	4a70      	ldr	r2, [pc, #448]	; (801817c <HAL_DMA_Start_IT+0x4a8>)
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	d031      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	4a6e      	ldr	r2, [pc, #440]	; (8018180 <HAL_DMA_Start_IT+0x4ac>)
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	d02c      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4a6d      	ldr	r2, [pc, #436]	; (8018184 <HAL_DMA_Start_IT+0x4b0>)
 8017fd0:	4293      	cmp	r3, r2
 8017fd2:	d027      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	4a6b      	ldr	r2, [pc, #428]	; (8018188 <HAL_DMA_Start_IT+0x4b4>)
 8017fda:	4293      	cmp	r3, r2
 8017fdc:	d022      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	4a6a      	ldr	r2, [pc, #424]	; (801818c <HAL_DMA_Start_IT+0x4b8>)
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	d01d      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	4a68      	ldr	r2, [pc, #416]	; (8018190 <HAL_DMA_Start_IT+0x4bc>)
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	d018      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	4a67      	ldr	r2, [pc, #412]	; (8018194 <HAL_DMA_Start_IT+0x4c0>)
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	d013      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	4a65      	ldr	r2, [pc, #404]	; (8018198 <HAL_DMA_Start_IT+0x4c4>)
 8018002:	4293      	cmp	r3, r2
 8018004:	d00e      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	4a64      	ldr	r2, [pc, #400]	; (801819c <HAL_DMA_Start_IT+0x4c8>)
 801800c:	4293      	cmp	r3, r2
 801800e:	d009      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	4a62      	ldr	r2, [pc, #392]	; (80181a0 <HAL_DMA_Start_IT+0x4cc>)
 8018016:	4293      	cmp	r3, r2
 8018018:	d004      	beq.n	8018024 <HAL_DMA_Start_IT+0x350>
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	4a61      	ldr	r2, [pc, #388]	; (80181a4 <HAL_DMA_Start_IT+0x4d0>)
 8018020:	4293      	cmp	r3, r2
 8018022:	d101      	bne.n	8018028 <HAL_DMA_Start_IT+0x354>
 8018024:	2301      	movs	r3, #1
 8018026:	e000      	b.n	801802a <HAL_DMA_Start_IT+0x356>
 8018028:	2300      	movs	r3, #0
 801802a:	2b00      	cmp	r3, #0
 801802c:	d01a      	beq.n	8018064 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018032:	681b      	ldr	r3, [r3, #0]
 8018034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018038:	2b00      	cmp	r3, #0
 801803a:	d007      	beq.n	801804c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 801803c:	68fb      	ldr	r3, [r7, #12]
 801803e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018040:	681a      	ldr	r2, [r3, #0]
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8018046:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 801804a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018050:	2b00      	cmp	r3, #0
 8018052:	d007      	beq.n	8018064 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8018054:	68fb      	ldr	r3, [r7, #12]
 8018056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018058:	681a      	ldr	r2, [r3, #0]
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801805e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8018062:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	681b      	ldr	r3, [r3, #0]
 8018068:	4a37      	ldr	r2, [pc, #220]	; (8018148 <HAL_DMA_Start_IT+0x474>)
 801806a:	4293      	cmp	r3, r2
 801806c:	d04a      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 801806e:	68fb      	ldr	r3, [r7, #12]
 8018070:	681b      	ldr	r3, [r3, #0]
 8018072:	4a36      	ldr	r2, [pc, #216]	; (801814c <HAL_DMA_Start_IT+0x478>)
 8018074:	4293      	cmp	r3, r2
 8018076:	d045      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 8018078:	68fb      	ldr	r3, [r7, #12]
 801807a:	681b      	ldr	r3, [r3, #0]
 801807c:	4a34      	ldr	r2, [pc, #208]	; (8018150 <HAL_DMA_Start_IT+0x47c>)
 801807e:	4293      	cmp	r3, r2
 8018080:	d040      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	681b      	ldr	r3, [r3, #0]
 8018086:	4a33      	ldr	r2, [pc, #204]	; (8018154 <HAL_DMA_Start_IT+0x480>)
 8018088:	4293      	cmp	r3, r2
 801808a:	d03b      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 801808c:	68fb      	ldr	r3, [r7, #12]
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	4a31      	ldr	r2, [pc, #196]	; (8018158 <HAL_DMA_Start_IT+0x484>)
 8018092:	4293      	cmp	r3, r2
 8018094:	d036      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 8018096:	68fb      	ldr	r3, [r7, #12]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	4a30      	ldr	r2, [pc, #192]	; (801815c <HAL_DMA_Start_IT+0x488>)
 801809c:	4293      	cmp	r3, r2
 801809e:	d031      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180a0:	68fb      	ldr	r3, [r7, #12]
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	4a2e      	ldr	r2, [pc, #184]	; (8018160 <HAL_DMA_Start_IT+0x48c>)
 80180a6:	4293      	cmp	r3, r2
 80180a8:	d02c      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180aa:	68fb      	ldr	r3, [r7, #12]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	4a2d      	ldr	r2, [pc, #180]	; (8018164 <HAL_DMA_Start_IT+0x490>)
 80180b0:	4293      	cmp	r3, r2
 80180b2:	d027      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	4a2b      	ldr	r2, [pc, #172]	; (8018168 <HAL_DMA_Start_IT+0x494>)
 80180ba:	4293      	cmp	r3, r2
 80180bc:	d022      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	681b      	ldr	r3, [r3, #0]
 80180c2:	4a2a      	ldr	r2, [pc, #168]	; (801816c <HAL_DMA_Start_IT+0x498>)
 80180c4:	4293      	cmp	r3, r2
 80180c6:	d01d      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180c8:	68fb      	ldr	r3, [r7, #12]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	4a28      	ldr	r2, [pc, #160]	; (8018170 <HAL_DMA_Start_IT+0x49c>)
 80180ce:	4293      	cmp	r3, r2
 80180d0:	d018      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	681b      	ldr	r3, [r3, #0]
 80180d6:	4a27      	ldr	r2, [pc, #156]	; (8018174 <HAL_DMA_Start_IT+0x4a0>)
 80180d8:	4293      	cmp	r3, r2
 80180da:	d013      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4a25      	ldr	r2, [pc, #148]	; (8018178 <HAL_DMA_Start_IT+0x4a4>)
 80180e2:	4293      	cmp	r3, r2
 80180e4:	d00e      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	4a24      	ldr	r2, [pc, #144]	; (801817c <HAL_DMA_Start_IT+0x4a8>)
 80180ec:	4293      	cmp	r3, r2
 80180ee:	d009      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	4a22      	ldr	r2, [pc, #136]	; (8018180 <HAL_DMA_Start_IT+0x4ac>)
 80180f6:	4293      	cmp	r3, r2
 80180f8:	d004      	beq.n	8018104 <HAL_DMA_Start_IT+0x430>
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	4a21      	ldr	r2, [pc, #132]	; (8018184 <HAL_DMA_Start_IT+0x4b0>)
 8018100:	4293      	cmp	r3, r2
 8018102:	d108      	bne.n	8018116 <HAL_DMA_Start_IT+0x442>
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	681a      	ldr	r2, [r3, #0]
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	681b      	ldr	r3, [r3, #0]
 801810e:	f042 0201 	orr.w	r2, r2, #1
 8018112:	601a      	str	r2, [r3, #0]
 8018114:	e012      	b.n	801813c <HAL_DMA_Start_IT+0x468>
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	681a      	ldr	r2, [r3, #0]
 801811c:	68fb      	ldr	r3, [r7, #12]
 801811e:	681b      	ldr	r3, [r3, #0]
 8018120:	f042 0201 	orr.w	r2, r2, #1
 8018124:	601a      	str	r2, [r3, #0]
 8018126:	e009      	b.n	801813c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801812e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	2200      	movs	r2, #0
 8018134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8018138:	2301      	movs	r3, #1
 801813a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 801813c:	7dfb      	ldrb	r3, [r7, #23]
}
 801813e:	4618      	mov	r0, r3
 8018140:	3718      	adds	r7, #24
 8018142:	46bd      	mov	sp, r7
 8018144:	bd80      	pop	{r7, pc}
 8018146:	bf00      	nop
 8018148:	40020010 	.word	0x40020010
 801814c:	40020028 	.word	0x40020028
 8018150:	40020040 	.word	0x40020040
 8018154:	40020058 	.word	0x40020058
 8018158:	40020070 	.word	0x40020070
 801815c:	40020088 	.word	0x40020088
 8018160:	400200a0 	.word	0x400200a0
 8018164:	400200b8 	.word	0x400200b8
 8018168:	40020410 	.word	0x40020410
 801816c:	40020428 	.word	0x40020428
 8018170:	40020440 	.word	0x40020440
 8018174:	40020458 	.word	0x40020458
 8018178:	40020470 	.word	0x40020470
 801817c:	40020488 	.word	0x40020488
 8018180:	400204a0 	.word	0x400204a0
 8018184:	400204b8 	.word	0x400204b8
 8018188:	58025408 	.word	0x58025408
 801818c:	5802541c 	.word	0x5802541c
 8018190:	58025430 	.word	0x58025430
 8018194:	58025444 	.word	0x58025444
 8018198:	58025458 	.word	0x58025458
 801819c:	5802546c 	.word	0x5802546c
 80181a0:	58025480 	.word	0x58025480
 80181a4:	58025494 	.word	0x58025494

080181a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80181a8:	b580      	push	{r7, lr}
 80181aa:	b08a      	sub	sp, #40	; 0x28
 80181ac:	af00      	add	r7, sp, #0
 80181ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80181b0:	2300      	movs	r3, #0
 80181b2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80181b4:	4b67      	ldr	r3, [pc, #412]	; (8018354 <HAL_DMA_IRQHandler+0x1ac>)
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	4a67      	ldr	r2, [pc, #412]	; (8018358 <HAL_DMA_IRQHandler+0x1b0>)
 80181ba:	fba2 2303 	umull	r2, r3, r2, r3
 80181be:	0a9b      	lsrs	r3, r3, #10
 80181c0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80181c6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80181cc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80181ce:	6a3b      	ldr	r3, [r7, #32]
 80181d0:	681b      	ldr	r3, [r3, #0]
 80181d2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80181d4:	69fb      	ldr	r3, [r7, #28]
 80181d6:	681b      	ldr	r3, [r3, #0]
 80181d8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80181da:	687b      	ldr	r3, [r7, #4]
 80181dc:	681b      	ldr	r3, [r3, #0]
 80181de:	4a5f      	ldr	r2, [pc, #380]	; (801835c <HAL_DMA_IRQHandler+0x1b4>)
 80181e0:	4293      	cmp	r3, r2
 80181e2:	d04a      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 80181e4:	687b      	ldr	r3, [r7, #4]
 80181e6:	681b      	ldr	r3, [r3, #0]
 80181e8:	4a5d      	ldr	r2, [pc, #372]	; (8018360 <HAL_DMA_IRQHandler+0x1b8>)
 80181ea:	4293      	cmp	r3, r2
 80181ec:	d045      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	681b      	ldr	r3, [r3, #0]
 80181f2:	4a5c      	ldr	r2, [pc, #368]	; (8018364 <HAL_DMA_IRQHandler+0x1bc>)
 80181f4:	4293      	cmp	r3, r2
 80181f6:	d040      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	681b      	ldr	r3, [r3, #0]
 80181fc:	4a5a      	ldr	r2, [pc, #360]	; (8018368 <HAL_DMA_IRQHandler+0x1c0>)
 80181fe:	4293      	cmp	r3, r2
 8018200:	d03b      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	4a59      	ldr	r2, [pc, #356]	; (801836c <HAL_DMA_IRQHandler+0x1c4>)
 8018208:	4293      	cmp	r3, r2
 801820a:	d036      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 801820c:	687b      	ldr	r3, [r7, #4]
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	4a57      	ldr	r2, [pc, #348]	; (8018370 <HAL_DMA_IRQHandler+0x1c8>)
 8018212:	4293      	cmp	r3, r2
 8018214:	d031      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 8018216:	687b      	ldr	r3, [r7, #4]
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	4a56      	ldr	r2, [pc, #344]	; (8018374 <HAL_DMA_IRQHandler+0x1cc>)
 801821c:	4293      	cmp	r3, r2
 801821e:	d02c      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 8018220:	687b      	ldr	r3, [r7, #4]
 8018222:	681b      	ldr	r3, [r3, #0]
 8018224:	4a54      	ldr	r2, [pc, #336]	; (8018378 <HAL_DMA_IRQHandler+0x1d0>)
 8018226:	4293      	cmp	r3, r2
 8018228:	d027      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	681b      	ldr	r3, [r3, #0]
 801822e:	4a53      	ldr	r2, [pc, #332]	; (801837c <HAL_DMA_IRQHandler+0x1d4>)
 8018230:	4293      	cmp	r3, r2
 8018232:	d022      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	681b      	ldr	r3, [r3, #0]
 8018238:	4a51      	ldr	r2, [pc, #324]	; (8018380 <HAL_DMA_IRQHandler+0x1d8>)
 801823a:	4293      	cmp	r3, r2
 801823c:	d01d      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	4a50      	ldr	r2, [pc, #320]	; (8018384 <HAL_DMA_IRQHandler+0x1dc>)
 8018244:	4293      	cmp	r3, r2
 8018246:	d018      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 8018248:	687b      	ldr	r3, [r7, #4]
 801824a:	681b      	ldr	r3, [r3, #0]
 801824c:	4a4e      	ldr	r2, [pc, #312]	; (8018388 <HAL_DMA_IRQHandler+0x1e0>)
 801824e:	4293      	cmp	r3, r2
 8018250:	d013      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	4a4d      	ldr	r2, [pc, #308]	; (801838c <HAL_DMA_IRQHandler+0x1e4>)
 8018258:	4293      	cmp	r3, r2
 801825a:	d00e      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	4a4b      	ldr	r2, [pc, #300]	; (8018390 <HAL_DMA_IRQHandler+0x1e8>)
 8018262:	4293      	cmp	r3, r2
 8018264:	d009      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	4a4a      	ldr	r2, [pc, #296]	; (8018394 <HAL_DMA_IRQHandler+0x1ec>)
 801826c:	4293      	cmp	r3, r2
 801826e:	d004      	beq.n	801827a <HAL_DMA_IRQHandler+0xd2>
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	4a48      	ldr	r2, [pc, #288]	; (8018398 <HAL_DMA_IRQHandler+0x1f0>)
 8018276:	4293      	cmp	r3, r2
 8018278:	d101      	bne.n	801827e <HAL_DMA_IRQHandler+0xd6>
 801827a:	2301      	movs	r3, #1
 801827c:	e000      	b.n	8018280 <HAL_DMA_IRQHandler+0xd8>
 801827e:	2300      	movs	r3, #0
 8018280:	2b00      	cmp	r3, #0
 8018282:	f000 842b 	beq.w	8018adc <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801828a:	f003 031f 	and.w	r3, r3, #31
 801828e:	2208      	movs	r2, #8
 8018290:	409a      	lsls	r2, r3
 8018292:	69bb      	ldr	r3, [r7, #24]
 8018294:	4013      	ands	r3, r2
 8018296:	2b00      	cmp	r3, #0
 8018298:	f000 80a2 	beq.w	80183e0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801829c:	687b      	ldr	r3, [r7, #4]
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	4a2e      	ldr	r2, [pc, #184]	; (801835c <HAL_DMA_IRQHandler+0x1b4>)
 80182a2:	4293      	cmp	r3, r2
 80182a4:	d04a      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	681b      	ldr	r3, [r3, #0]
 80182aa:	4a2d      	ldr	r2, [pc, #180]	; (8018360 <HAL_DMA_IRQHandler+0x1b8>)
 80182ac:	4293      	cmp	r3, r2
 80182ae:	d045      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182b0:	687b      	ldr	r3, [r7, #4]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	4a2b      	ldr	r2, [pc, #172]	; (8018364 <HAL_DMA_IRQHandler+0x1bc>)
 80182b6:	4293      	cmp	r3, r2
 80182b8:	d040      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	4a2a      	ldr	r2, [pc, #168]	; (8018368 <HAL_DMA_IRQHandler+0x1c0>)
 80182c0:	4293      	cmp	r3, r2
 80182c2:	d03b      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182c4:	687b      	ldr	r3, [r7, #4]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	4a28      	ldr	r2, [pc, #160]	; (801836c <HAL_DMA_IRQHandler+0x1c4>)
 80182ca:	4293      	cmp	r3, r2
 80182cc:	d036      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182ce:	687b      	ldr	r3, [r7, #4]
 80182d0:	681b      	ldr	r3, [r3, #0]
 80182d2:	4a27      	ldr	r2, [pc, #156]	; (8018370 <HAL_DMA_IRQHandler+0x1c8>)
 80182d4:	4293      	cmp	r3, r2
 80182d6:	d031      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182d8:	687b      	ldr	r3, [r7, #4]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	4a25      	ldr	r2, [pc, #148]	; (8018374 <HAL_DMA_IRQHandler+0x1cc>)
 80182de:	4293      	cmp	r3, r2
 80182e0:	d02c      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	4a24      	ldr	r2, [pc, #144]	; (8018378 <HAL_DMA_IRQHandler+0x1d0>)
 80182e8:	4293      	cmp	r3, r2
 80182ea:	d027      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	681b      	ldr	r3, [r3, #0]
 80182f0:	4a22      	ldr	r2, [pc, #136]	; (801837c <HAL_DMA_IRQHandler+0x1d4>)
 80182f2:	4293      	cmp	r3, r2
 80182f4:	d022      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 80182f6:	687b      	ldr	r3, [r7, #4]
 80182f8:	681b      	ldr	r3, [r3, #0]
 80182fa:	4a21      	ldr	r2, [pc, #132]	; (8018380 <HAL_DMA_IRQHandler+0x1d8>)
 80182fc:	4293      	cmp	r3, r2
 80182fe:	d01d      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 8018300:	687b      	ldr	r3, [r7, #4]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	4a1f      	ldr	r2, [pc, #124]	; (8018384 <HAL_DMA_IRQHandler+0x1dc>)
 8018306:	4293      	cmp	r3, r2
 8018308:	d018      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 801830a:	687b      	ldr	r3, [r7, #4]
 801830c:	681b      	ldr	r3, [r3, #0]
 801830e:	4a1e      	ldr	r2, [pc, #120]	; (8018388 <HAL_DMA_IRQHandler+0x1e0>)
 8018310:	4293      	cmp	r3, r2
 8018312:	d013      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4a1c      	ldr	r2, [pc, #112]	; (801838c <HAL_DMA_IRQHandler+0x1e4>)
 801831a:	4293      	cmp	r3, r2
 801831c:	d00e      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	4a1b      	ldr	r2, [pc, #108]	; (8018390 <HAL_DMA_IRQHandler+0x1e8>)
 8018324:	4293      	cmp	r3, r2
 8018326:	d009      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	4a19      	ldr	r2, [pc, #100]	; (8018394 <HAL_DMA_IRQHandler+0x1ec>)
 801832e:	4293      	cmp	r3, r2
 8018330:	d004      	beq.n	801833c <HAL_DMA_IRQHandler+0x194>
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	4a18      	ldr	r2, [pc, #96]	; (8018398 <HAL_DMA_IRQHandler+0x1f0>)
 8018338:	4293      	cmp	r3, r2
 801833a:	d12f      	bne.n	801839c <HAL_DMA_IRQHandler+0x1f4>
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	f003 0304 	and.w	r3, r3, #4
 8018346:	2b00      	cmp	r3, #0
 8018348:	bf14      	ite	ne
 801834a:	2301      	movne	r3, #1
 801834c:	2300      	moveq	r3, #0
 801834e:	b2db      	uxtb	r3, r3
 8018350:	e02e      	b.n	80183b0 <HAL_DMA_IRQHandler+0x208>
 8018352:	bf00      	nop
 8018354:	24000004 	.word	0x24000004
 8018358:	1b4e81b5 	.word	0x1b4e81b5
 801835c:	40020010 	.word	0x40020010
 8018360:	40020028 	.word	0x40020028
 8018364:	40020040 	.word	0x40020040
 8018368:	40020058 	.word	0x40020058
 801836c:	40020070 	.word	0x40020070
 8018370:	40020088 	.word	0x40020088
 8018374:	400200a0 	.word	0x400200a0
 8018378:	400200b8 	.word	0x400200b8
 801837c:	40020410 	.word	0x40020410
 8018380:	40020428 	.word	0x40020428
 8018384:	40020440 	.word	0x40020440
 8018388:	40020458 	.word	0x40020458
 801838c:	40020470 	.word	0x40020470
 8018390:	40020488 	.word	0x40020488
 8018394:	400204a0 	.word	0x400204a0
 8018398:	400204b8 	.word	0x400204b8
 801839c:	687b      	ldr	r3, [r7, #4]
 801839e:	681b      	ldr	r3, [r3, #0]
 80183a0:	681b      	ldr	r3, [r3, #0]
 80183a2:	f003 0308 	and.w	r3, r3, #8
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	bf14      	ite	ne
 80183aa:	2301      	movne	r3, #1
 80183ac:	2300      	moveq	r3, #0
 80183ae:	b2db      	uxtb	r3, r3
 80183b0:	2b00      	cmp	r3, #0
 80183b2:	d015      	beq.n	80183e0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	681a      	ldr	r2, [r3, #0]
 80183ba:	687b      	ldr	r3, [r7, #4]
 80183bc:	681b      	ldr	r3, [r3, #0]
 80183be:	f022 0204 	bic.w	r2, r2, #4
 80183c2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80183c4:	687b      	ldr	r3, [r7, #4]
 80183c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183c8:	f003 031f 	and.w	r3, r3, #31
 80183cc:	2208      	movs	r2, #8
 80183ce:	409a      	lsls	r2, r3
 80183d0:	6a3b      	ldr	r3, [r7, #32]
 80183d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80183d8:	f043 0201 	orr.w	r2, r3, #1
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80183e4:	f003 031f 	and.w	r3, r3, #31
 80183e8:	69ba      	ldr	r2, [r7, #24]
 80183ea:	fa22 f303 	lsr.w	r3, r2, r3
 80183ee:	f003 0301 	and.w	r3, r3, #1
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	d06e      	beq.n	80184d4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	681b      	ldr	r3, [r3, #0]
 80183fa:	4a69      	ldr	r2, [pc, #420]	; (80185a0 <HAL_DMA_IRQHandler+0x3f8>)
 80183fc:	4293      	cmp	r3, r2
 80183fe:	d04a      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018400:	687b      	ldr	r3, [r7, #4]
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	4a67      	ldr	r2, [pc, #412]	; (80185a4 <HAL_DMA_IRQHandler+0x3fc>)
 8018406:	4293      	cmp	r3, r2
 8018408:	d045      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 801840a:	687b      	ldr	r3, [r7, #4]
 801840c:	681b      	ldr	r3, [r3, #0]
 801840e:	4a66      	ldr	r2, [pc, #408]	; (80185a8 <HAL_DMA_IRQHandler+0x400>)
 8018410:	4293      	cmp	r3, r2
 8018412:	d040      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	4a64      	ldr	r2, [pc, #400]	; (80185ac <HAL_DMA_IRQHandler+0x404>)
 801841a:	4293      	cmp	r3, r2
 801841c:	d03b      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	4a63      	ldr	r2, [pc, #396]	; (80185b0 <HAL_DMA_IRQHandler+0x408>)
 8018424:	4293      	cmp	r3, r2
 8018426:	d036      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018428:	687b      	ldr	r3, [r7, #4]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	4a61      	ldr	r2, [pc, #388]	; (80185b4 <HAL_DMA_IRQHandler+0x40c>)
 801842e:	4293      	cmp	r3, r2
 8018430:	d031      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	4a60      	ldr	r2, [pc, #384]	; (80185b8 <HAL_DMA_IRQHandler+0x410>)
 8018438:	4293      	cmp	r3, r2
 801843a:	d02c      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	681b      	ldr	r3, [r3, #0]
 8018440:	4a5e      	ldr	r2, [pc, #376]	; (80185bc <HAL_DMA_IRQHandler+0x414>)
 8018442:	4293      	cmp	r3, r2
 8018444:	d027      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	4a5d      	ldr	r2, [pc, #372]	; (80185c0 <HAL_DMA_IRQHandler+0x418>)
 801844c:	4293      	cmp	r3, r2
 801844e:	d022      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	681b      	ldr	r3, [r3, #0]
 8018454:	4a5b      	ldr	r2, [pc, #364]	; (80185c4 <HAL_DMA_IRQHandler+0x41c>)
 8018456:	4293      	cmp	r3, r2
 8018458:	d01d      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 801845a:	687b      	ldr	r3, [r7, #4]
 801845c:	681b      	ldr	r3, [r3, #0]
 801845e:	4a5a      	ldr	r2, [pc, #360]	; (80185c8 <HAL_DMA_IRQHandler+0x420>)
 8018460:	4293      	cmp	r3, r2
 8018462:	d018      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018464:	687b      	ldr	r3, [r7, #4]
 8018466:	681b      	ldr	r3, [r3, #0]
 8018468:	4a58      	ldr	r2, [pc, #352]	; (80185cc <HAL_DMA_IRQHandler+0x424>)
 801846a:	4293      	cmp	r3, r2
 801846c:	d013      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	4a57      	ldr	r2, [pc, #348]	; (80185d0 <HAL_DMA_IRQHandler+0x428>)
 8018474:	4293      	cmp	r3, r2
 8018476:	d00e      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	4a55      	ldr	r2, [pc, #340]	; (80185d4 <HAL_DMA_IRQHandler+0x42c>)
 801847e:	4293      	cmp	r3, r2
 8018480:	d009      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	4a54      	ldr	r2, [pc, #336]	; (80185d8 <HAL_DMA_IRQHandler+0x430>)
 8018488:	4293      	cmp	r3, r2
 801848a:	d004      	beq.n	8018496 <HAL_DMA_IRQHandler+0x2ee>
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	4a52      	ldr	r2, [pc, #328]	; (80185dc <HAL_DMA_IRQHandler+0x434>)
 8018492:	4293      	cmp	r3, r2
 8018494:	d10a      	bne.n	80184ac <HAL_DMA_IRQHandler+0x304>
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	695b      	ldr	r3, [r3, #20]
 801849c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	bf14      	ite	ne
 80184a4:	2301      	movne	r3, #1
 80184a6:	2300      	moveq	r3, #0
 80184a8:	b2db      	uxtb	r3, r3
 80184aa:	e003      	b.n	80184b4 <HAL_DMA_IRQHandler+0x30c>
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	2300      	movs	r3, #0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d00d      	beq.n	80184d4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184bc:	f003 031f 	and.w	r3, r3, #31
 80184c0:	2201      	movs	r2, #1
 80184c2:	409a      	lsls	r2, r3
 80184c4:	6a3b      	ldr	r3, [r7, #32]
 80184c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184cc:	f043 0202 	orr.w	r2, r3, #2
 80184d0:	687b      	ldr	r3, [r7, #4]
 80184d2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80184d8:	f003 031f 	and.w	r3, r3, #31
 80184dc:	2204      	movs	r2, #4
 80184de:	409a      	lsls	r2, r3
 80184e0:	69bb      	ldr	r3, [r7, #24]
 80184e2:	4013      	ands	r3, r2
 80184e4:	2b00      	cmp	r3, #0
 80184e6:	f000 808f 	beq.w	8018608 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80184ea:	687b      	ldr	r3, [r7, #4]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	4a2c      	ldr	r2, [pc, #176]	; (80185a0 <HAL_DMA_IRQHandler+0x3f8>)
 80184f0:	4293      	cmp	r3, r2
 80184f2:	d04a      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 80184f4:	687b      	ldr	r3, [r7, #4]
 80184f6:	681b      	ldr	r3, [r3, #0]
 80184f8:	4a2a      	ldr	r2, [pc, #168]	; (80185a4 <HAL_DMA_IRQHandler+0x3fc>)
 80184fa:	4293      	cmp	r3, r2
 80184fc:	d045      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	681b      	ldr	r3, [r3, #0]
 8018502:	4a29      	ldr	r2, [pc, #164]	; (80185a8 <HAL_DMA_IRQHandler+0x400>)
 8018504:	4293      	cmp	r3, r2
 8018506:	d040      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	681b      	ldr	r3, [r3, #0]
 801850c:	4a27      	ldr	r2, [pc, #156]	; (80185ac <HAL_DMA_IRQHandler+0x404>)
 801850e:	4293      	cmp	r3, r2
 8018510:	d03b      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018512:	687b      	ldr	r3, [r7, #4]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	4a26      	ldr	r2, [pc, #152]	; (80185b0 <HAL_DMA_IRQHandler+0x408>)
 8018518:	4293      	cmp	r3, r2
 801851a:	d036      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	681b      	ldr	r3, [r3, #0]
 8018520:	4a24      	ldr	r2, [pc, #144]	; (80185b4 <HAL_DMA_IRQHandler+0x40c>)
 8018522:	4293      	cmp	r3, r2
 8018524:	d031      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	4a23      	ldr	r2, [pc, #140]	; (80185b8 <HAL_DMA_IRQHandler+0x410>)
 801852c:	4293      	cmp	r3, r2
 801852e:	d02c      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	4a21      	ldr	r2, [pc, #132]	; (80185bc <HAL_DMA_IRQHandler+0x414>)
 8018536:	4293      	cmp	r3, r2
 8018538:	d027      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 801853a:	687b      	ldr	r3, [r7, #4]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	4a20      	ldr	r2, [pc, #128]	; (80185c0 <HAL_DMA_IRQHandler+0x418>)
 8018540:	4293      	cmp	r3, r2
 8018542:	d022      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018544:	687b      	ldr	r3, [r7, #4]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	4a1e      	ldr	r2, [pc, #120]	; (80185c4 <HAL_DMA_IRQHandler+0x41c>)
 801854a:	4293      	cmp	r3, r2
 801854c:	d01d      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	4a1d      	ldr	r2, [pc, #116]	; (80185c8 <HAL_DMA_IRQHandler+0x420>)
 8018554:	4293      	cmp	r3, r2
 8018556:	d018      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	4a1b      	ldr	r2, [pc, #108]	; (80185cc <HAL_DMA_IRQHandler+0x424>)
 801855e:	4293      	cmp	r3, r2
 8018560:	d013      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	4a1a      	ldr	r2, [pc, #104]	; (80185d0 <HAL_DMA_IRQHandler+0x428>)
 8018568:	4293      	cmp	r3, r2
 801856a:	d00e      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	4a18      	ldr	r2, [pc, #96]	; (80185d4 <HAL_DMA_IRQHandler+0x42c>)
 8018572:	4293      	cmp	r3, r2
 8018574:	d009      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	4a17      	ldr	r2, [pc, #92]	; (80185d8 <HAL_DMA_IRQHandler+0x430>)
 801857c:	4293      	cmp	r3, r2
 801857e:	d004      	beq.n	801858a <HAL_DMA_IRQHandler+0x3e2>
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4a15      	ldr	r2, [pc, #84]	; (80185dc <HAL_DMA_IRQHandler+0x434>)
 8018586:	4293      	cmp	r3, r2
 8018588:	d12a      	bne.n	80185e0 <HAL_DMA_IRQHandler+0x438>
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	681b      	ldr	r3, [r3, #0]
 8018590:	f003 0302 	and.w	r3, r3, #2
 8018594:	2b00      	cmp	r3, #0
 8018596:	bf14      	ite	ne
 8018598:	2301      	movne	r3, #1
 801859a:	2300      	moveq	r3, #0
 801859c:	b2db      	uxtb	r3, r3
 801859e:	e023      	b.n	80185e8 <HAL_DMA_IRQHandler+0x440>
 80185a0:	40020010 	.word	0x40020010
 80185a4:	40020028 	.word	0x40020028
 80185a8:	40020040 	.word	0x40020040
 80185ac:	40020058 	.word	0x40020058
 80185b0:	40020070 	.word	0x40020070
 80185b4:	40020088 	.word	0x40020088
 80185b8:	400200a0 	.word	0x400200a0
 80185bc:	400200b8 	.word	0x400200b8
 80185c0:	40020410 	.word	0x40020410
 80185c4:	40020428 	.word	0x40020428
 80185c8:	40020440 	.word	0x40020440
 80185cc:	40020458 	.word	0x40020458
 80185d0:	40020470 	.word	0x40020470
 80185d4:	40020488 	.word	0x40020488
 80185d8:	400204a0 	.word	0x400204a0
 80185dc:	400204b8 	.word	0x400204b8
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	2300      	movs	r3, #0
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d00d      	beq.n	8018608 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80185f0:	f003 031f 	and.w	r3, r3, #31
 80185f4:	2204      	movs	r2, #4
 80185f6:	409a      	lsls	r2, r3
 80185f8:	6a3b      	ldr	r3, [r7, #32]
 80185fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018600:	f043 0204 	orr.w	r2, r3, #4
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801860c:	f003 031f 	and.w	r3, r3, #31
 8018610:	2210      	movs	r2, #16
 8018612:	409a      	lsls	r2, r3
 8018614:	69bb      	ldr	r3, [r7, #24]
 8018616:	4013      	ands	r3, r2
 8018618:	2b00      	cmp	r3, #0
 801861a:	f000 80a6 	beq.w	801876a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	4a85      	ldr	r2, [pc, #532]	; (8018838 <HAL_DMA_IRQHandler+0x690>)
 8018624:	4293      	cmp	r3, r2
 8018626:	d04a      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	4a83      	ldr	r2, [pc, #524]	; (801883c <HAL_DMA_IRQHandler+0x694>)
 801862e:	4293      	cmp	r3, r2
 8018630:	d045      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	4a82      	ldr	r2, [pc, #520]	; (8018840 <HAL_DMA_IRQHandler+0x698>)
 8018638:	4293      	cmp	r3, r2
 801863a:	d040      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	4a80      	ldr	r2, [pc, #512]	; (8018844 <HAL_DMA_IRQHandler+0x69c>)
 8018642:	4293      	cmp	r3, r2
 8018644:	d03b      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	4a7f      	ldr	r2, [pc, #508]	; (8018848 <HAL_DMA_IRQHandler+0x6a0>)
 801864c:	4293      	cmp	r3, r2
 801864e:	d036      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	4a7d      	ldr	r2, [pc, #500]	; (801884c <HAL_DMA_IRQHandler+0x6a4>)
 8018656:	4293      	cmp	r3, r2
 8018658:	d031      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	4a7c      	ldr	r2, [pc, #496]	; (8018850 <HAL_DMA_IRQHandler+0x6a8>)
 8018660:	4293      	cmp	r3, r2
 8018662:	d02c      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	4a7a      	ldr	r2, [pc, #488]	; (8018854 <HAL_DMA_IRQHandler+0x6ac>)
 801866a:	4293      	cmp	r3, r2
 801866c:	d027      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	4a79      	ldr	r2, [pc, #484]	; (8018858 <HAL_DMA_IRQHandler+0x6b0>)
 8018674:	4293      	cmp	r3, r2
 8018676:	d022      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 8018678:	687b      	ldr	r3, [r7, #4]
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	4a77      	ldr	r2, [pc, #476]	; (801885c <HAL_DMA_IRQHandler+0x6b4>)
 801867e:	4293      	cmp	r3, r2
 8018680:	d01d      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	4a76      	ldr	r2, [pc, #472]	; (8018860 <HAL_DMA_IRQHandler+0x6b8>)
 8018688:	4293      	cmp	r3, r2
 801868a:	d018      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	4a74      	ldr	r2, [pc, #464]	; (8018864 <HAL_DMA_IRQHandler+0x6bc>)
 8018692:	4293      	cmp	r3, r2
 8018694:	d013      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	4a73      	ldr	r2, [pc, #460]	; (8018868 <HAL_DMA_IRQHandler+0x6c0>)
 801869c:	4293      	cmp	r3, r2
 801869e:	d00e      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	4a71      	ldr	r2, [pc, #452]	; (801886c <HAL_DMA_IRQHandler+0x6c4>)
 80186a6:	4293      	cmp	r3, r2
 80186a8:	d009      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	4a70      	ldr	r2, [pc, #448]	; (8018870 <HAL_DMA_IRQHandler+0x6c8>)
 80186b0:	4293      	cmp	r3, r2
 80186b2:	d004      	beq.n	80186be <HAL_DMA_IRQHandler+0x516>
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	4a6e      	ldr	r2, [pc, #440]	; (8018874 <HAL_DMA_IRQHandler+0x6cc>)
 80186ba:	4293      	cmp	r3, r2
 80186bc:	d10a      	bne.n	80186d4 <HAL_DMA_IRQHandler+0x52c>
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	f003 0308 	and.w	r3, r3, #8
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	bf14      	ite	ne
 80186cc:	2301      	movne	r3, #1
 80186ce:	2300      	moveq	r3, #0
 80186d0:	b2db      	uxtb	r3, r3
 80186d2:	e009      	b.n	80186e8 <HAL_DMA_IRQHandler+0x540>
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	681b      	ldr	r3, [r3, #0]
 80186d8:	681b      	ldr	r3, [r3, #0]
 80186da:	f003 0304 	and.w	r3, r3, #4
 80186de:	2b00      	cmp	r3, #0
 80186e0:	bf14      	ite	ne
 80186e2:	2301      	movne	r3, #1
 80186e4:	2300      	moveq	r3, #0
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	2b00      	cmp	r3, #0
 80186ea:	d03e      	beq.n	801876a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80186f0:	f003 031f 	and.w	r3, r3, #31
 80186f4:	2210      	movs	r2, #16
 80186f6:	409a      	lsls	r2, r3
 80186f8:	6a3b      	ldr	r3, [r7, #32]
 80186fa:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80186fc:	687b      	ldr	r3, [r7, #4]
 80186fe:	681b      	ldr	r3, [r3, #0]
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8018706:	2b00      	cmp	r3, #0
 8018708:	d018      	beq.n	801873c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801870a:	687b      	ldr	r3, [r7, #4]
 801870c:	681b      	ldr	r3, [r3, #0]
 801870e:	681b      	ldr	r3, [r3, #0]
 8018710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8018714:	2b00      	cmp	r3, #0
 8018716:	d108      	bne.n	801872a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801871c:	2b00      	cmp	r3, #0
 801871e:	d024      	beq.n	801876a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018724:	6878      	ldr	r0, [r7, #4]
 8018726:	4798      	blx	r3
 8018728:	e01f      	b.n	801876a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801872a:	687b      	ldr	r3, [r7, #4]
 801872c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801872e:	2b00      	cmp	r3, #0
 8018730:	d01b      	beq.n	801876a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8018732:	687b      	ldr	r3, [r7, #4]
 8018734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	4798      	blx	r3
 801873a:	e016      	b.n	801876a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801873c:	687b      	ldr	r3, [r7, #4]
 801873e:	681b      	ldr	r3, [r3, #0]
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018746:	2b00      	cmp	r3, #0
 8018748:	d107      	bne.n	801875a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	681b      	ldr	r3, [r3, #0]
 801874e:	681a      	ldr	r2, [r3, #0]
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	f022 0208 	bic.w	r2, r2, #8
 8018758:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801875e:	2b00      	cmp	r3, #0
 8018760:	d003      	beq.n	801876a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018766:	6878      	ldr	r0, [r7, #4]
 8018768:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801876e:	f003 031f 	and.w	r3, r3, #31
 8018772:	2220      	movs	r2, #32
 8018774:	409a      	lsls	r2, r3
 8018776:	69bb      	ldr	r3, [r7, #24]
 8018778:	4013      	ands	r3, r2
 801877a:	2b00      	cmp	r3, #0
 801877c:	f000 8110 	beq.w	80189a0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	681b      	ldr	r3, [r3, #0]
 8018784:	4a2c      	ldr	r2, [pc, #176]	; (8018838 <HAL_DMA_IRQHandler+0x690>)
 8018786:	4293      	cmp	r3, r2
 8018788:	d04a      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	681b      	ldr	r3, [r3, #0]
 801878e:	4a2b      	ldr	r2, [pc, #172]	; (801883c <HAL_DMA_IRQHandler+0x694>)
 8018790:	4293      	cmp	r3, r2
 8018792:	d045      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	681b      	ldr	r3, [r3, #0]
 8018798:	4a29      	ldr	r2, [pc, #164]	; (8018840 <HAL_DMA_IRQHandler+0x698>)
 801879a:	4293      	cmp	r3, r2
 801879c:	d040      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 801879e:	687b      	ldr	r3, [r7, #4]
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	4a28      	ldr	r2, [pc, #160]	; (8018844 <HAL_DMA_IRQHandler+0x69c>)
 80187a4:	4293      	cmp	r3, r2
 80187a6:	d03b      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	4a26      	ldr	r2, [pc, #152]	; (8018848 <HAL_DMA_IRQHandler+0x6a0>)
 80187ae:	4293      	cmp	r3, r2
 80187b0:	d036      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	4a25      	ldr	r2, [pc, #148]	; (801884c <HAL_DMA_IRQHandler+0x6a4>)
 80187b8:	4293      	cmp	r3, r2
 80187ba:	d031      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	4a23      	ldr	r2, [pc, #140]	; (8018850 <HAL_DMA_IRQHandler+0x6a8>)
 80187c2:	4293      	cmp	r3, r2
 80187c4:	d02c      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187c6:	687b      	ldr	r3, [r7, #4]
 80187c8:	681b      	ldr	r3, [r3, #0]
 80187ca:	4a22      	ldr	r2, [pc, #136]	; (8018854 <HAL_DMA_IRQHandler+0x6ac>)
 80187cc:	4293      	cmp	r3, r2
 80187ce:	d027      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	681b      	ldr	r3, [r3, #0]
 80187d4:	4a20      	ldr	r2, [pc, #128]	; (8018858 <HAL_DMA_IRQHandler+0x6b0>)
 80187d6:	4293      	cmp	r3, r2
 80187d8:	d022      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	681b      	ldr	r3, [r3, #0]
 80187de:	4a1f      	ldr	r2, [pc, #124]	; (801885c <HAL_DMA_IRQHandler+0x6b4>)
 80187e0:	4293      	cmp	r3, r2
 80187e2:	d01d      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187e4:	687b      	ldr	r3, [r7, #4]
 80187e6:	681b      	ldr	r3, [r3, #0]
 80187e8:	4a1d      	ldr	r2, [pc, #116]	; (8018860 <HAL_DMA_IRQHandler+0x6b8>)
 80187ea:	4293      	cmp	r3, r2
 80187ec:	d018      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	4a1c      	ldr	r2, [pc, #112]	; (8018864 <HAL_DMA_IRQHandler+0x6bc>)
 80187f4:	4293      	cmp	r3, r2
 80187f6:	d013      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	4a1a      	ldr	r2, [pc, #104]	; (8018868 <HAL_DMA_IRQHandler+0x6c0>)
 80187fe:	4293      	cmp	r3, r2
 8018800:	d00e      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	4a19      	ldr	r2, [pc, #100]	; (801886c <HAL_DMA_IRQHandler+0x6c4>)
 8018808:	4293      	cmp	r3, r2
 801880a:	d009      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	4a17      	ldr	r2, [pc, #92]	; (8018870 <HAL_DMA_IRQHandler+0x6c8>)
 8018812:	4293      	cmp	r3, r2
 8018814:	d004      	beq.n	8018820 <HAL_DMA_IRQHandler+0x678>
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	4a16      	ldr	r2, [pc, #88]	; (8018874 <HAL_DMA_IRQHandler+0x6cc>)
 801881c:	4293      	cmp	r3, r2
 801881e:	d12b      	bne.n	8018878 <HAL_DMA_IRQHandler+0x6d0>
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	681b      	ldr	r3, [r3, #0]
 8018826:	f003 0310 	and.w	r3, r3, #16
 801882a:	2b00      	cmp	r3, #0
 801882c:	bf14      	ite	ne
 801882e:	2301      	movne	r3, #1
 8018830:	2300      	moveq	r3, #0
 8018832:	b2db      	uxtb	r3, r3
 8018834:	e02a      	b.n	801888c <HAL_DMA_IRQHandler+0x6e4>
 8018836:	bf00      	nop
 8018838:	40020010 	.word	0x40020010
 801883c:	40020028 	.word	0x40020028
 8018840:	40020040 	.word	0x40020040
 8018844:	40020058 	.word	0x40020058
 8018848:	40020070 	.word	0x40020070
 801884c:	40020088 	.word	0x40020088
 8018850:	400200a0 	.word	0x400200a0
 8018854:	400200b8 	.word	0x400200b8
 8018858:	40020410 	.word	0x40020410
 801885c:	40020428 	.word	0x40020428
 8018860:	40020440 	.word	0x40020440
 8018864:	40020458 	.word	0x40020458
 8018868:	40020470 	.word	0x40020470
 801886c:	40020488 	.word	0x40020488
 8018870:	400204a0 	.word	0x400204a0
 8018874:	400204b8 	.word	0x400204b8
 8018878:	687b      	ldr	r3, [r7, #4]
 801887a:	681b      	ldr	r3, [r3, #0]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	f003 0302 	and.w	r3, r3, #2
 8018882:	2b00      	cmp	r3, #0
 8018884:	bf14      	ite	ne
 8018886:	2301      	movne	r3, #1
 8018888:	2300      	moveq	r3, #0
 801888a:	b2db      	uxtb	r3, r3
 801888c:	2b00      	cmp	r3, #0
 801888e:	f000 8087 	beq.w	80189a0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018896:	f003 031f 	and.w	r3, r3, #31
 801889a:	2220      	movs	r2, #32
 801889c:	409a      	lsls	r2, r3
 801889e:	6a3b      	ldr	r3, [r7, #32]
 80188a0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80188a2:	687b      	ldr	r3, [r7, #4]
 80188a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80188a8:	b2db      	uxtb	r3, r3
 80188aa:	2b04      	cmp	r3, #4
 80188ac:	d139      	bne.n	8018922 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80188ae:	687b      	ldr	r3, [r7, #4]
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	681a      	ldr	r2, [r3, #0]
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	681b      	ldr	r3, [r3, #0]
 80188b8:	f022 0216 	bic.w	r2, r2, #22
 80188bc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	695a      	ldr	r2, [r3, #20]
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	681b      	ldr	r3, [r3, #0]
 80188c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80188cc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80188d2:	2b00      	cmp	r3, #0
 80188d4:	d103      	bne.n	80188de <HAL_DMA_IRQHandler+0x736>
 80188d6:	687b      	ldr	r3, [r7, #4]
 80188d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d007      	beq.n	80188ee <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80188de:	687b      	ldr	r3, [r7, #4]
 80188e0:	681b      	ldr	r3, [r3, #0]
 80188e2:	681a      	ldr	r2, [r3, #0]
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	f022 0208 	bic.w	r2, r2, #8
 80188ec:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80188f2:	f003 031f 	and.w	r3, r3, #31
 80188f6:	223f      	movs	r2, #63	; 0x3f
 80188f8:	409a      	lsls	r2, r3
 80188fa:	6a3b      	ldr	r3, [r7, #32]
 80188fc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	2201      	movs	r2, #1
 8018902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	2200      	movs	r2, #0
 801890a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 801890e:	687b      	ldr	r3, [r7, #4]
 8018910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018912:	2b00      	cmp	r3, #0
 8018914:	f000 834a 	beq.w	8018fac <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801891c:	6878      	ldr	r0, [r7, #4]
 801891e:	4798      	blx	r3
          }
          return;
 8018920:	e344      	b.n	8018fac <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801892c:	2b00      	cmp	r3, #0
 801892e:	d018      	beq.n	8018962 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018930:	687b      	ldr	r3, [r7, #4]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	681b      	ldr	r3, [r3, #0]
 8018936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801893a:	2b00      	cmp	r3, #0
 801893c:	d108      	bne.n	8018950 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018942:	2b00      	cmp	r3, #0
 8018944:	d02c      	beq.n	80189a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801894a:	6878      	ldr	r0, [r7, #4]
 801894c:	4798      	blx	r3
 801894e:	e027      	b.n	80189a0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018954:	2b00      	cmp	r3, #0
 8018956:	d023      	beq.n	80189a0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	4798      	blx	r3
 8018960:	e01e      	b.n	80189a0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801896c:	2b00      	cmp	r3, #0
 801896e:	d10f      	bne.n	8018990 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8018970:	687b      	ldr	r3, [r7, #4]
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	681a      	ldr	r2, [r3, #0]
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	681b      	ldr	r3, [r3, #0]
 801897a:	f022 0210 	bic.w	r2, r2, #16
 801897e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	2201      	movs	r2, #1
 8018984:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8018988:	687b      	ldr	r3, [r7, #4]
 801898a:	2200      	movs	r2, #0
 801898c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018994:	2b00      	cmp	r3, #0
 8018996:	d003      	beq.n	80189a0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8018998:	687b      	ldr	r3, [r7, #4]
 801899a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801899c:	6878      	ldr	r0, [r7, #4]
 801899e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80189a0:	687b      	ldr	r3, [r7, #4]
 80189a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	f000 8306 	beq.w	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80189ae:	f003 0301 	and.w	r3, r3, #1
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	f000 8088 	beq.w	8018ac8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	2204      	movs	r2, #4
 80189bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	4a7a      	ldr	r2, [pc, #488]	; (8018bb0 <HAL_DMA_IRQHandler+0xa08>)
 80189c6:	4293      	cmp	r3, r2
 80189c8:	d04a      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 80189ca:	687b      	ldr	r3, [r7, #4]
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	4a79      	ldr	r2, [pc, #484]	; (8018bb4 <HAL_DMA_IRQHandler+0xa0c>)
 80189d0:	4293      	cmp	r3, r2
 80189d2:	d045      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	681b      	ldr	r3, [r3, #0]
 80189d8:	4a77      	ldr	r2, [pc, #476]	; (8018bb8 <HAL_DMA_IRQHandler+0xa10>)
 80189da:	4293      	cmp	r3, r2
 80189dc:	d040      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	4a76      	ldr	r2, [pc, #472]	; (8018bbc <HAL_DMA_IRQHandler+0xa14>)
 80189e4:	4293      	cmp	r3, r2
 80189e6:	d03b      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	4a74      	ldr	r2, [pc, #464]	; (8018bc0 <HAL_DMA_IRQHandler+0xa18>)
 80189ee:	4293      	cmp	r3, r2
 80189f0:	d036      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	681b      	ldr	r3, [r3, #0]
 80189f6:	4a73      	ldr	r2, [pc, #460]	; (8018bc4 <HAL_DMA_IRQHandler+0xa1c>)
 80189f8:	4293      	cmp	r3, r2
 80189fa:	d031      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	681b      	ldr	r3, [r3, #0]
 8018a00:	4a71      	ldr	r2, [pc, #452]	; (8018bc8 <HAL_DMA_IRQHandler+0xa20>)
 8018a02:	4293      	cmp	r3, r2
 8018a04:	d02c      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a06:	687b      	ldr	r3, [r7, #4]
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	4a70      	ldr	r2, [pc, #448]	; (8018bcc <HAL_DMA_IRQHandler+0xa24>)
 8018a0c:	4293      	cmp	r3, r2
 8018a0e:	d027      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	4a6e      	ldr	r2, [pc, #440]	; (8018bd0 <HAL_DMA_IRQHandler+0xa28>)
 8018a16:	4293      	cmp	r3, r2
 8018a18:	d022      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	4a6d      	ldr	r2, [pc, #436]	; (8018bd4 <HAL_DMA_IRQHandler+0xa2c>)
 8018a20:	4293      	cmp	r3, r2
 8018a22:	d01d      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a24:	687b      	ldr	r3, [r7, #4]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	4a6b      	ldr	r2, [pc, #428]	; (8018bd8 <HAL_DMA_IRQHandler+0xa30>)
 8018a2a:	4293      	cmp	r3, r2
 8018a2c:	d018      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	681b      	ldr	r3, [r3, #0]
 8018a32:	4a6a      	ldr	r2, [pc, #424]	; (8018bdc <HAL_DMA_IRQHandler+0xa34>)
 8018a34:	4293      	cmp	r3, r2
 8018a36:	d013      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	4a68      	ldr	r2, [pc, #416]	; (8018be0 <HAL_DMA_IRQHandler+0xa38>)
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d00e      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	4a67      	ldr	r2, [pc, #412]	; (8018be4 <HAL_DMA_IRQHandler+0xa3c>)
 8018a48:	4293      	cmp	r3, r2
 8018a4a:	d009      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	4a65      	ldr	r2, [pc, #404]	; (8018be8 <HAL_DMA_IRQHandler+0xa40>)
 8018a52:	4293      	cmp	r3, r2
 8018a54:	d004      	beq.n	8018a60 <HAL_DMA_IRQHandler+0x8b8>
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	4a64      	ldr	r2, [pc, #400]	; (8018bec <HAL_DMA_IRQHandler+0xa44>)
 8018a5c:	4293      	cmp	r3, r2
 8018a5e:	d108      	bne.n	8018a72 <HAL_DMA_IRQHandler+0x8ca>
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	681a      	ldr	r2, [r3, #0]
 8018a66:	687b      	ldr	r3, [r7, #4]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	f022 0201 	bic.w	r2, r2, #1
 8018a6e:	601a      	str	r2, [r3, #0]
 8018a70:	e007      	b.n	8018a82 <HAL_DMA_IRQHandler+0x8da>
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	681b      	ldr	r3, [r3, #0]
 8018a76:	681a      	ldr	r2, [r3, #0]
 8018a78:	687b      	ldr	r3, [r7, #4]
 8018a7a:	681b      	ldr	r3, [r3, #0]
 8018a7c:	f022 0201 	bic.w	r2, r2, #1
 8018a80:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8018a82:	68fb      	ldr	r3, [r7, #12]
 8018a84:	3301      	adds	r3, #1
 8018a86:	60fb      	str	r3, [r7, #12]
 8018a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a8a:	429a      	cmp	r2, r3
 8018a8c:	d307      	bcc.n	8018a9e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8018a8e:	687b      	ldr	r3, [r7, #4]
 8018a90:	681b      	ldr	r3, [r3, #0]
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	f003 0301 	and.w	r3, r3, #1
 8018a98:	2b00      	cmp	r3, #0
 8018a9a:	d1f2      	bne.n	8018a82 <HAL_DMA_IRQHandler+0x8da>
 8018a9c:	e000      	b.n	8018aa0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8018a9e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8018aa0:	687b      	ldr	r3, [r7, #4]
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	681b      	ldr	r3, [r3, #0]
 8018aa6:	f003 0301 	and.w	r3, r3, #1
 8018aaa:	2b00      	cmp	r3, #0
 8018aac:	d004      	beq.n	8018ab8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8018aae:	687b      	ldr	r3, [r7, #4]
 8018ab0:	2203      	movs	r2, #3
 8018ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8018ab6:	e003      	b.n	8018ac0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8018ab8:	687b      	ldr	r3, [r7, #4]
 8018aba:	2201      	movs	r2, #1
 8018abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	2200      	movs	r2, #0
 8018ac4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8018ac8:	687b      	ldr	r3, [r7, #4]
 8018aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	f000 8272 	beq.w	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ad6:	6878      	ldr	r0, [r7, #4]
 8018ad8:	4798      	blx	r3
 8018ada:	e26c      	b.n	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	4a43      	ldr	r2, [pc, #268]	; (8018bf0 <HAL_DMA_IRQHandler+0xa48>)
 8018ae2:	4293      	cmp	r3, r2
 8018ae4:	d022      	beq.n	8018b2c <HAL_DMA_IRQHandler+0x984>
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	4a42      	ldr	r2, [pc, #264]	; (8018bf4 <HAL_DMA_IRQHandler+0xa4c>)
 8018aec:	4293      	cmp	r3, r2
 8018aee:	d01d      	beq.n	8018b2c <HAL_DMA_IRQHandler+0x984>
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	4a40      	ldr	r2, [pc, #256]	; (8018bf8 <HAL_DMA_IRQHandler+0xa50>)
 8018af6:	4293      	cmp	r3, r2
 8018af8:	d018      	beq.n	8018b2c <HAL_DMA_IRQHandler+0x984>
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	681b      	ldr	r3, [r3, #0]
 8018afe:	4a3f      	ldr	r2, [pc, #252]	; (8018bfc <HAL_DMA_IRQHandler+0xa54>)
 8018b00:	4293      	cmp	r3, r2
 8018b02:	d013      	beq.n	8018b2c <HAL_DMA_IRQHandler+0x984>
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	681b      	ldr	r3, [r3, #0]
 8018b08:	4a3d      	ldr	r2, [pc, #244]	; (8018c00 <HAL_DMA_IRQHandler+0xa58>)
 8018b0a:	4293      	cmp	r3, r2
 8018b0c:	d00e      	beq.n	8018b2c <HAL_DMA_IRQHandler+0x984>
 8018b0e:	687b      	ldr	r3, [r7, #4]
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	4a3c      	ldr	r2, [pc, #240]	; (8018c04 <HAL_DMA_IRQHandler+0xa5c>)
 8018b14:	4293      	cmp	r3, r2
 8018b16:	d009      	beq.n	8018b2c <HAL_DMA_IRQHandler+0x984>
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	4a3a      	ldr	r2, [pc, #232]	; (8018c08 <HAL_DMA_IRQHandler+0xa60>)
 8018b1e:	4293      	cmp	r3, r2
 8018b20:	d004      	beq.n	8018b2c <HAL_DMA_IRQHandler+0x984>
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	4a39      	ldr	r2, [pc, #228]	; (8018c0c <HAL_DMA_IRQHandler+0xa64>)
 8018b28:	4293      	cmp	r3, r2
 8018b2a:	d101      	bne.n	8018b30 <HAL_DMA_IRQHandler+0x988>
 8018b2c:	2301      	movs	r3, #1
 8018b2e:	e000      	b.n	8018b32 <HAL_DMA_IRQHandler+0x98a>
 8018b30:	2300      	movs	r3, #0
 8018b32:	2b00      	cmp	r3, #0
 8018b34:	f000 823f 	beq.w	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	681b      	ldr	r3, [r3, #0]
 8018b3c:	681b      	ldr	r3, [r3, #0]
 8018b3e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b44:	f003 031f 	and.w	r3, r3, #31
 8018b48:	2204      	movs	r2, #4
 8018b4a:	409a      	lsls	r2, r3
 8018b4c:	697b      	ldr	r3, [r7, #20]
 8018b4e:	4013      	ands	r3, r2
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	f000 80cd 	beq.w	8018cf0 <HAL_DMA_IRQHandler+0xb48>
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	f003 0304 	and.w	r3, r3, #4
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	f000 80c7 	beq.w	8018cf0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8018b62:	687b      	ldr	r3, [r7, #4]
 8018b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018b66:	f003 031f 	and.w	r3, r3, #31
 8018b6a:	2204      	movs	r2, #4
 8018b6c:	409a      	lsls	r2, r3
 8018b6e:	69fb      	ldr	r3, [r7, #28]
 8018b70:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018b72:	693b      	ldr	r3, [r7, #16]
 8018b74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d049      	beq.n	8018c10 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018b7c:	693b      	ldr	r3, [r7, #16]
 8018b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018b82:	2b00      	cmp	r3, #0
 8018b84:	d109      	bne.n	8018b9a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	f000 8210 	beq.w	8018fb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018b94:	6878      	ldr	r0, [r7, #4]
 8018b96:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018b98:	e20a      	b.n	8018fb0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	f000 8206 	beq.w	8018fb0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8018ba4:	687b      	ldr	r3, [r7, #4]
 8018ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ba8:	6878      	ldr	r0, [r7, #4]
 8018baa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018bac:	e200      	b.n	8018fb0 <HAL_DMA_IRQHandler+0xe08>
 8018bae:	bf00      	nop
 8018bb0:	40020010 	.word	0x40020010
 8018bb4:	40020028 	.word	0x40020028
 8018bb8:	40020040 	.word	0x40020040
 8018bbc:	40020058 	.word	0x40020058
 8018bc0:	40020070 	.word	0x40020070
 8018bc4:	40020088 	.word	0x40020088
 8018bc8:	400200a0 	.word	0x400200a0
 8018bcc:	400200b8 	.word	0x400200b8
 8018bd0:	40020410 	.word	0x40020410
 8018bd4:	40020428 	.word	0x40020428
 8018bd8:	40020440 	.word	0x40020440
 8018bdc:	40020458 	.word	0x40020458
 8018be0:	40020470 	.word	0x40020470
 8018be4:	40020488 	.word	0x40020488
 8018be8:	400204a0 	.word	0x400204a0
 8018bec:	400204b8 	.word	0x400204b8
 8018bf0:	58025408 	.word	0x58025408
 8018bf4:	5802541c 	.word	0x5802541c
 8018bf8:	58025430 	.word	0x58025430
 8018bfc:	58025444 	.word	0x58025444
 8018c00:	58025458 	.word	0x58025458
 8018c04:	5802546c 	.word	0x5802546c
 8018c08:	58025480 	.word	0x58025480
 8018c0c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018c10:	693b      	ldr	r3, [r7, #16]
 8018c12:	f003 0320 	and.w	r3, r3, #32
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d160      	bne.n	8018cdc <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	4a7f      	ldr	r2, [pc, #508]	; (8018e1c <HAL_DMA_IRQHandler+0xc74>)
 8018c20:	4293      	cmp	r3, r2
 8018c22:	d04a      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c24:	687b      	ldr	r3, [r7, #4]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	4a7d      	ldr	r2, [pc, #500]	; (8018e20 <HAL_DMA_IRQHandler+0xc78>)
 8018c2a:	4293      	cmp	r3, r2
 8018c2c:	d045      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c2e:	687b      	ldr	r3, [r7, #4]
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	4a7c      	ldr	r2, [pc, #496]	; (8018e24 <HAL_DMA_IRQHandler+0xc7c>)
 8018c34:	4293      	cmp	r3, r2
 8018c36:	d040      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c38:	687b      	ldr	r3, [r7, #4]
 8018c3a:	681b      	ldr	r3, [r3, #0]
 8018c3c:	4a7a      	ldr	r2, [pc, #488]	; (8018e28 <HAL_DMA_IRQHandler+0xc80>)
 8018c3e:	4293      	cmp	r3, r2
 8018c40:	d03b      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	4a79      	ldr	r2, [pc, #484]	; (8018e2c <HAL_DMA_IRQHandler+0xc84>)
 8018c48:	4293      	cmp	r3, r2
 8018c4a:	d036      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	4a77      	ldr	r2, [pc, #476]	; (8018e30 <HAL_DMA_IRQHandler+0xc88>)
 8018c52:	4293      	cmp	r3, r2
 8018c54:	d031      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c56:	687b      	ldr	r3, [r7, #4]
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	4a76      	ldr	r2, [pc, #472]	; (8018e34 <HAL_DMA_IRQHandler+0xc8c>)
 8018c5c:	4293      	cmp	r3, r2
 8018c5e:	d02c      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	681b      	ldr	r3, [r3, #0]
 8018c64:	4a74      	ldr	r2, [pc, #464]	; (8018e38 <HAL_DMA_IRQHandler+0xc90>)
 8018c66:	4293      	cmp	r3, r2
 8018c68:	d027      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	681b      	ldr	r3, [r3, #0]
 8018c6e:	4a73      	ldr	r2, [pc, #460]	; (8018e3c <HAL_DMA_IRQHandler+0xc94>)
 8018c70:	4293      	cmp	r3, r2
 8018c72:	d022      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c74:	687b      	ldr	r3, [r7, #4]
 8018c76:	681b      	ldr	r3, [r3, #0]
 8018c78:	4a71      	ldr	r2, [pc, #452]	; (8018e40 <HAL_DMA_IRQHandler+0xc98>)
 8018c7a:	4293      	cmp	r3, r2
 8018c7c:	d01d      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	681b      	ldr	r3, [r3, #0]
 8018c82:	4a70      	ldr	r2, [pc, #448]	; (8018e44 <HAL_DMA_IRQHandler+0xc9c>)
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d018      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	681b      	ldr	r3, [r3, #0]
 8018c8c:	4a6e      	ldr	r2, [pc, #440]	; (8018e48 <HAL_DMA_IRQHandler+0xca0>)
 8018c8e:	4293      	cmp	r3, r2
 8018c90:	d013      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4a6d      	ldr	r2, [pc, #436]	; (8018e4c <HAL_DMA_IRQHandler+0xca4>)
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	d00e      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	4a6b      	ldr	r2, [pc, #428]	; (8018e50 <HAL_DMA_IRQHandler+0xca8>)
 8018ca2:	4293      	cmp	r3, r2
 8018ca4:	d009      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4a6a      	ldr	r2, [pc, #424]	; (8018e54 <HAL_DMA_IRQHandler+0xcac>)
 8018cac:	4293      	cmp	r3, r2
 8018cae:	d004      	beq.n	8018cba <HAL_DMA_IRQHandler+0xb12>
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4a68      	ldr	r2, [pc, #416]	; (8018e58 <HAL_DMA_IRQHandler+0xcb0>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d108      	bne.n	8018ccc <HAL_DMA_IRQHandler+0xb24>
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	681a      	ldr	r2, [r3, #0]
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	f022 0208 	bic.w	r2, r2, #8
 8018cc8:	601a      	str	r2, [r3, #0]
 8018cca:	e007      	b.n	8018cdc <HAL_DMA_IRQHandler+0xb34>
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	681a      	ldr	r2, [r3, #0]
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	681b      	ldr	r3, [r3, #0]
 8018cd6:	f022 0204 	bic.w	r2, r2, #4
 8018cda:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	f000 8165 	beq.w	8018fb0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cea:	6878      	ldr	r0, [r7, #4]
 8018cec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018cee:	e15f      	b.n	8018fb0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018cf4:	f003 031f 	and.w	r3, r3, #31
 8018cf8:	2202      	movs	r2, #2
 8018cfa:	409a      	lsls	r2, r3
 8018cfc:	697b      	ldr	r3, [r7, #20]
 8018cfe:	4013      	ands	r3, r2
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	f000 80c5 	beq.w	8018e90 <HAL_DMA_IRQHandler+0xce8>
 8018d06:	693b      	ldr	r3, [r7, #16]
 8018d08:	f003 0302 	and.w	r3, r3, #2
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	f000 80bf 	beq.w	8018e90 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8018d12:	687b      	ldr	r3, [r7, #4]
 8018d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d16:	f003 031f 	and.w	r3, r3, #31
 8018d1a:	2202      	movs	r2, #2
 8018d1c:	409a      	lsls	r2, r3
 8018d1e:	69fb      	ldr	r3, [r7, #28]
 8018d20:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018d22:	693b      	ldr	r3, [r7, #16]
 8018d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d018      	beq.n	8018d5e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018d2c:	693b      	ldr	r3, [r7, #16]
 8018d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d109      	bne.n	8018d4a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d3a:	2b00      	cmp	r3, #0
 8018d3c:	f000 813a 	beq.w	8018fb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018d44:	6878      	ldr	r0, [r7, #4]
 8018d46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018d48:	e134      	b.n	8018fb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	f000 8130 	beq.w	8018fb4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d58:	6878      	ldr	r0, [r7, #4]
 8018d5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018d5c:	e12a      	b.n	8018fb4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018d5e:	693b      	ldr	r3, [r7, #16]
 8018d60:	f003 0320 	and.w	r3, r3, #32
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	f040 8089 	bne.w	8018e7c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	681b      	ldr	r3, [r3, #0]
 8018d6e:	4a2b      	ldr	r2, [pc, #172]	; (8018e1c <HAL_DMA_IRQHandler+0xc74>)
 8018d70:	4293      	cmp	r3, r2
 8018d72:	d04a      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	681b      	ldr	r3, [r3, #0]
 8018d78:	4a29      	ldr	r2, [pc, #164]	; (8018e20 <HAL_DMA_IRQHandler+0xc78>)
 8018d7a:	4293      	cmp	r3, r2
 8018d7c:	d045      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	4a28      	ldr	r2, [pc, #160]	; (8018e24 <HAL_DMA_IRQHandler+0xc7c>)
 8018d84:	4293      	cmp	r3, r2
 8018d86:	d040      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	4a26      	ldr	r2, [pc, #152]	; (8018e28 <HAL_DMA_IRQHandler+0xc80>)
 8018d8e:	4293      	cmp	r3, r2
 8018d90:	d03b      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018d92:	687b      	ldr	r3, [r7, #4]
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	4a25      	ldr	r2, [pc, #148]	; (8018e2c <HAL_DMA_IRQHandler+0xc84>)
 8018d98:	4293      	cmp	r3, r2
 8018d9a:	d036      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018d9c:	687b      	ldr	r3, [r7, #4]
 8018d9e:	681b      	ldr	r3, [r3, #0]
 8018da0:	4a23      	ldr	r2, [pc, #140]	; (8018e30 <HAL_DMA_IRQHandler+0xc88>)
 8018da2:	4293      	cmp	r3, r2
 8018da4:	d031      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018da6:	687b      	ldr	r3, [r7, #4]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	4a22      	ldr	r2, [pc, #136]	; (8018e34 <HAL_DMA_IRQHandler+0xc8c>)
 8018dac:	4293      	cmp	r3, r2
 8018dae:	d02c      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018db0:	687b      	ldr	r3, [r7, #4]
 8018db2:	681b      	ldr	r3, [r3, #0]
 8018db4:	4a20      	ldr	r2, [pc, #128]	; (8018e38 <HAL_DMA_IRQHandler+0xc90>)
 8018db6:	4293      	cmp	r3, r2
 8018db8:	d027      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	4a1f      	ldr	r2, [pc, #124]	; (8018e3c <HAL_DMA_IRQHandler+0xc94>)
 8018dc0:	4293      	cmp	r3, r2
 8018dc2:	d022      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	4a1d      	ldr	r2, [pc, #116]	; (8018e40 <HAL_DMA_IRQHandler+0xc98>)
 8018dca:	4293      	cmp	r3, r2
 8018dcc:	d01d      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	681b      	ldr	r3, [r3, #0]
 8018dd2:	4a1c      	ldr	r2, [pc, #112]	; (8018e44 <HAL_DMA_IRQHandler+0xc9c>)
 8018dd4:	4293      	cmp	r3, r2
 8018dd6:	d018      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	681b      	ldr	r3, [r3, #0]
 8018ddc:	4a1a      	ldr	r2, [pc, #104]	; (8018e48 <HAL_DMA_IRQHandler+0xca0>)
 8018dde:	4293      	cmp	r3, r2
 8018de0:	d013      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	4a19      	ldr	r2, [pc, #100]	; (8018e4c <HAL_DMA_IRQHandler+0xca4>)
 8018de8:	4293      	cmp	r3, r2
 8018dea:	d00e      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	4a17      	ldr	r2, [pc, #92]	; (8018e50 <HAL_DMA_IRQHandler+0xca8>)
 8018df2:	4293      	cmp	r3, r2
 8018df4:	d009      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	4a16      	ldr	r2, [pc, #88]	; (8018e54 <HAL_DMA_IRQHandler+0xcac>)
 8018dfc:	4293      	cmp	r3, r2
 8018dfe:	d004      	beq.n	8018e0a <HAL_DMA_IRQHandler+0xc62>
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	4a14      	ldr	r2, [pc, #80]	; (8018e58 <HAL_DMA_IRQHandler+0xcb0>)
 8018e06:	4293      	cmp	r3, r2
 8018e08:	d128      	bne.n	8018e5c <HAL_DMA_IRQHandler+0xcb4>
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	681a      	ldr	r2, [r3, #0]
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	681b      	ldr	r3, [r3, #0]
 8018e14:	f022 0214 	bic.w	r2, r2, #20
 8018e18:	601a      	str	r2, [r3, #0]
 8018e1a:	e027      	b.n	8018e6c <HAL_DMA_IRQHandler+0xcc4>
 8018e1c:	40020010 	.word	0x40020010
 8018e20:	40020028 	.word	0x40020028
 8018e24:	40020040 	.word	0x40020040
 8018e28:	40020058 	.word	0x40020058
 8018e2c:	40020070 	.word	0x40020070
 8018e30:	40020088 	.word	0x40020088
 8018e34:	400200a0 	.word	0x400200a0
 8018e38:	400200b8 	.word	0x400200b8
 8018e3c:	40020410 	.word	0x40020410
 8018e40:	40020428 	.word	0x40020428
 8018e44:	40020440 	.word	0x40020440
 8018e48:	40020458 	.word	0x40020458
 8018e4c:	40020470 	.word	0x40020470
 8018e50:	40020488 	.word	0x40020488
 8018e54:	400204a0 	.word	0x400204a0
 8018e58:	400204b8 	.word	0x400204b8
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	681a      	ldr	r2, [r3, #0]
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	681b      	ldr	r3, [r3, #0]
 8018e66:	f022 020a 	bic.w	r2, r2, #10
 8018e6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	2201      	movs	r2, #1
 8018e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	2200      	movs	r2, #0
 8018e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e80:	2b00      	cmp	r3, #0
 8018e82:	f000 8097 	beq.w	8018fb4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018e8a:	6878      	ldr	r0, [r7, #4]
 8018e8c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018e8e:	e091      	b.n	8018fb4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018e94:	f003 031f 	and.w	r3, r3, #31
 8018e98:	2208      	movs	r2, #8
 8018e9a:	409a      	lsls	r2, r3
 8018e9c:	697b      	ldr	r3, [r7, #20]
 8018e9e:	4013      	ands	r3, r2
 8018ea0:	2b00      	cmp	r3, #0
 8018ea2:	f000 8088 	beq.w	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
 8018ea6:	693b      	ldr	r3, [r7, #16]
 8018ea8:	f003 0308 	and.w	r3, r3, #8
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	f000 8082 	beq.w	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	4a41      	ldr	r2, [pc, #260]	; (8018fbc <HAL_DMA_IRQHandler+0xe14>)
 8018eb8:	4293      	cmp	r3, r2
 8018eba:	d04a      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	681b      	ldr	r3, [r3, #0]
 8018ec0:	4a3f      	ldr	r2, [pc, #252]	; (8018fc0 <HAL_DMA_IRQHandler+0xe18>)
 8018ec2:	4293      	cmp	r3, r2
 8018ec4:	d045      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	681b      	ldr	r3, [r3, #0]
 8018eca:	4a3e      	ldr	r2, [pc, #248]	; (8018fc4 <HAL_DMA_IRQHandler+0xe1c>)
 8018ecc:	4293      	cmp	r3, r2
 8018ece:	d040      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	4a3c      	ldr	r2, [pc, #240]	; (8018fc8 <HAL_DMA_IRQHandler+0xe20>)
 8018ed6:	4293      	cmp	r3, r2
 8018ed8:	d03b      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	4a3b      	ldr	r2, [pc, #236]	; (8018fcc <HAL_DMA_IRQHandler+0xe24>)
 8018ee0:	4293      	cmp	r3, r2
 8018ee2:	d036      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	4a39      	ldr	r2, [pc, #228]	; (8018fd0 <HAL_DMA_IRQHandler+0xe28>)
 8018eea:	4293      	cmp	r3, r2
 8018eec:	d031      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	681b      	ldr	r3, [r3, #0]
 8018ef2:	4a38      	ldr	r2, [pc, #224]	; (8018fd4 <HAL_DMA_IRQHandler+0xe2c>)
 8018ef4:	4293      	cmp	r3, r2
 8018ef6:	d02c      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	4a36      	ldr	r2, [pc, #216]	; (8018fd8 <HAL_DMA_IRQHandler+0xe30>)
 8018efe:	4293      	cmp	r3, r2
 8018f00:	d027      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018f02:	687b      	ldr	r3, [r7, #4]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	4a35      	ldr	r2, [pc, #212]	; (8018fdc <HAL_DMA_IRQHandler+0xe34>)
 8018f08:	4293      	cmp	r3, r2
 8018f0a:	d022      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	681b      	ldr	r3, [r3, #0]
 8018f10:	4a33      	ldr	r2, [pc, #204]	; (8018fe0 <HAL_DMA_IRQHandler+0xe38>)
 8018f12:	4293      	cmp	r3, r2
 8018f14:	d01d      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018f16:	687b      	ldr	r3, [r7, #4]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	4a32      	ldr	r2, [pc, #200]	; (8018fe4 <HAL_DMA_IRQHandler+0xe3c>)
 8018f1c:	4293      	cmp	r3, r2
 8018f1e:	d018      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018f20:	687b      	ldr	r3, [r7, #4]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	4a30      	ldr	r2, [pc, #192]	; (8018fe8 <HAL_DMA_IRQHandler+0xe40>)
 8018f26:	4293      	cmp	r3, r2
 8018f28:	d013      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	4a2f      	ldr	r2, [pc, #188]	; (8018fec <HAL_DMA_IRQHandler+0xe44>)
 8018f30:	4293      	cmp	r3, r2
 8018f32:	d00e      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	4a2d      	ldr	r2, [pc, #180]	; (8018ff0 <HAL_DMA_IRQHandler+0xe48>)
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	d009      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	4a2c      	ldr	r2, [pc, #176]	; (8018ff4 <HAL_DMA_IRQHandler+0xe4c>)
 8018f44:	4293      	cmp	r3, r2
 8018f46:	d004      	beq.n	8018f52 <HAL_DMA_IRQHandler+0xdaa>
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	4a2a      	ldr	r2, [pc, #168]	; (8018ff8 <HAL_DMA_IRQHandler+0xe50>)
 8018f4e:	4293      	cmp	r3, r2
 8018f50:	d108      	bne.n	8018f64 <HAL_DMA_IRQHandler+0xdbc>
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	681a      	ldr	r2, [r3, #0]
 8018f58:	687b      	ldr	r3, [r7, #4]
 8018f5a:	681b      	ldr	r3, [r3, #0]
 8018f5c:	f022 021c 	bic.w	r2, r2, #28
 8018f60:	601a      	str	r2, [r3, #0]
 8018f62:	e007      	b.n	8018f74 <HAL_DMA_IRQHandler+0xdcc>
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	681b      	ldr	r3, [r3, #0]
 8018f68:	681a      	ldr	r2, [r3, #0]
 8018f6a:	687b      	ldr	r3, [r7, #4]
 8018f6c:	681b      	ldr	r3, [r3, #0]
 8018f6e:	f022 020e 	bic.w	r2, r2, #14
 8018f72:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f78:	f003 031f 	and.w	r3, r3, #31
 8018f7c:	2201      	movs	r2, #1
 8018f7e:	409a      	lsls	r2, r3
 8018f80:	69fb      	ldr	r3, [r7, #28]
 8018f82:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2201      	movs	r2, #1
 8018f88:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	2201      	movs	r2, #1
 8018f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	2200      	movs	r2, #0
 8018f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018f9e:	2b00      	cmp	r3, #0
 8018fa0:	d009      	beq.n	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018fa6:	6878      	ldr	r0, [r7, #4]
 8018fa8:	4798      	blx	r3
 8018faa:	e004      	b.n	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8018fac:	bf00      	nop
 8018fae:	e002      	b.n	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018fb0:	bf00      	nop
 8018fb2:	e000      	b.n	8018fb6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018fb4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8018fb6:	3728      	adds	r7, #40	; 0x28
 8018fb8:	46bd      	mov	sp, r7
 8018fba:	bd80      	pop	{r7, pc}
 8018fbc:	40020010 	.word	0x40020010
 8018fc0:	40020028 	.word	0x40020028
 8018fc4:	40020040 	.word	0x40020040
 8018fc8:	40020058 	.word	0x40020058
 8018fcc:	40020070 	.word	0x40020070
 8018fd0:	40020088 	.word	0x40020088
 8018fd4:	400200a0 	.word	0x400200a0
 8018fd8:	400200b8 	.word	0x400200b8
 8018fdc:	40020410 	.word	0x40020410
 8018fe0:	40020428 	.word	0x40020428
 8018fe4:	40020440 	.word	0x40020440
 8018fe8:	40020458 	.word	0x40020458
 8018fec:	40020470 	.word	0x40020470
 8018ff0:	40020488 	.word	0x40020488
 8018ff4:	400204a0 	.word	0x400204a0
 8018ff8:	400204b8 	.word	0x400204b8

08018ffc <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8018ffc:	b480      	push	{r7}
 8018ffe:	b087      	sub	sp, #28
 8019000:	af00      	add	r7, sp, #0
 8019002:	60f8      	str	r0, [r7, #12]
 8019004:	60b9      	str	r1, [r7, #8]
 8019006:	607a      	str	r2, [r7, #4]
 8019008:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801900e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019010:	68fb      	ldr	r3, [r7, #12]
 8019012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019014:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	681b      	ldr	r3, [r3, #0]
 801901a:	4a7f      	ldr	r2, [pc, #508]	; (8019218 <DMA_SetConfig+0x21c>)
 801901c:	4293      	cmp	r3, r2
 801901e:	d072      	beq.n	8019106 <DMA_SetConfig+0x10a>
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	4a7d      	ldr	r2, [pc, #500]	; (801921c <DMA_SetConfig+0x220>)
 8019026:	4293      	cmp	r3, r2
 8019028:	d06d      	beq.n	8019106 <DMA_SetConfig+0x10a>
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	681b      	ldr	r3, [r3, #0]
 801902e:	4a7c      	ldr	r2, [pc, #496]	; (8019220 <DMA_SetConfig+0x224>)
 8019030:	4293      	cmp	r3, r2
 8019032:	d068      	beq.n	8019106 <DMA_SetConfig+0x10a>
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	4a7a      	ldr	r2, [pc, #488]	; (8019224 <DMA_SetConfig+0x228>)
 801903a:	4293      	cmp	r3, r2
 801903c:	d063      	beq.n	8019106 <DMA_SetConfig+0x10a>
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	681b      	ldr	r3, [r3, #0]
 8019042:	4a79      	ldr	r2, [pc, #484]	; (8019228 <DMA_SetConfig+0x22c>)
 8019044:	4293      	cmp	r3, r2
 8019046:	d05e      	beq.n	8019106 <DMA_SetConfig+0x10a>
 8019048:	68fb      	ldr	r3, [r7, #12]
 801904a:	681b      	ldr	r3, [r3, #0]
 801904c:	4a77      	ldr	r2, [pc, #476]	; (801922c <DMA_SetConfig+0x230>)
 801904e:	4293      	cmp	r3, r2
 8019050:	d059      	beq.n	8019106 <DMA_SetConfig+0x10a>
 8019052:	68fb      	ldr	r3, [r7, #12]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	4a76      	ldr	r2, [pc, #472]	; (8019230 <DMA_SetConfig+0x234>)
 8019058:	4293      	cmp	r3, r2
 801905a:	d054      	beq.n	8019106 <DMA_SetConfig+0x10a>
 801905c:	68fb      	ldr	r3, [r7, #12]
 801905e:	681b      	ldr	r3, [r3, #0]
 8019060:	4a74      	ldr	r2, [pc, #464]	; (8019234 <DMA_SetConfig+0x238>)
 8019062:	4293      	cmp	r3, r2
 8019064:	d04f      	beq.n	8019106 <DMA_SetConfig+0x10a>
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	4a73      	ldr	r2, [pc, #460]	; (8019238 <DMA_SetConfig+0x23c>)
 801906c:	4293      	cmp	r3, r2
 801906e:	d04a      	beq.n	8019106 <DMA_SetConfig+0x10a>
 8019070:	68fb      	ldr	r3, [r7, #12]
 8019072:	681b      	ldr	r3, [r3, #0]
 8019074:	4a71      	ldr	r2, [pc, #452]	; (801923c <DMA_SetConfig+0x240>)
 8019076:	4293      	cmp	r3, r2
 8019078:	d045      	beq.n	8019106 <DMA_SetConfig+0x10a>
 801907a:	68fb      	ldr	r3, [r7, #12]
 801907c:	681b      	ldr	r3, [r3, #0]
 801907e:	4a70      	ldr	r2, [pc, #448]	; (8019240 <DMA_SetConfig+0x244>)
 8019080:	4293      	cmp	r3, r2
 8019082:	d040      	beq.n	8019106 <DMA_SetConfig+0x10a>
 8019084:	68fb      	ldr	r3, [r7, #12]
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	4a6e      	ldr	r2, [pc, #440]	; (8019244 <DMA_SetConfig+0x248>)
 801908a:	4293      	cmp	r3, r2
 801908c:	d03b      	beq.n	8019106 <DMA_SetConfig+0x10a>
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	4a6d      	ldr	r2, [pc, #436]	; (8019248 <DMA_SetConfig+0x24c>)
 8019094:	4293      	cmp	r3, r2
 8019096:	d036      	beq.n	8019106 <DMA_SetConfig+0x10a>
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	4a6b      	ldr	r2, [pc, #428]	; (801924c <DMA_SetConfig+0x250>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	d031      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	4a6a      	ldr	r2, [pc, #424]	; (8019250 <DMA_SetConfig+0x254>)
 80190a8:	4293      	cmp	r3, r2
 80190aa:	d02c      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	4a68      	ldr	r2, [pc, #416]	; (8019254 <DMA_SetConfig+0x258>)
 80190b2:	4293      	cmp	r3, r2
 80190b4:	d027      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4a67      	ldr	r2, [pc, #412]	; (8019258 <DMA_SetConfig+0x25c>)
 80190bc:	4293      	cmp	r3, r2
 80190be:	d022      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	4a65      	ldr	r2, [pc, #404]	; (801925c <DMA_SetConfig+0x260>)
 80190c6:	4293      	cmp	r3, r2
 80190c8:	d01d      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	4a64      	ldr	r2, [pc, #400]	; (8019260 <DMA_SetConfig+0x264>)
 80190d0:	4293      	cmp	r3, r2
 80190d2:	d018      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	4a62      	ldr	r2, [pc, #392]	; (8019264 <DMA_SetConfig+0x268>)
 80190da:	4293      	cmp	r3, r2
 80190dc:	d013      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	4a61      	ldr	r2, [pc, #388]	; (8019268 <DMA_SetConfig+0x26c>)
 80190e4:	4293      	cmp	r3, r2
 80190e6:	d00e      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	4a5f      	ldr	r2, [pc, #380]	; (801926c <DMA_SetConfig+0x270>)
 80190ee:	4293      	cmp	r3, r2
 80190f0:	d009      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	4a5e      	ldr	r2, [pc, #376]	; (8019270 <DMA_SetConfig+0x274>)
 80190f8:	4293      	cmp	r3, r2
 80190fa:	d004      	beq.n	8019106 <DMA_SetConfig+0x10a>
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	4a5c      	ldr	r2, [pc, #368]	; (8019274 <DMA_SetConfig+0x278>)
 8019102:	4293      	cmp	r3, r2
 8019104:	d101      	bne.n	801910a <DMA_SetConfig+0x10e>
 8019106:	2301      	movs	r3, #1
 8019108:	e000      	b.n	801910c <DMA_SetConfig+0x110>
 801910a:	2300      	movs	r3, #0
 801910c:	2b00      	cmp	r3, #0
 801910e:	d00d      	beq.n	801912c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019114:	68fa      	ldr	r2, [r7, #12]
 8019116:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019118:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801911e:	2b00      	cmp	r3, #0
 8019120:	d004      	beq.n	801912c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019126:	68fa      	ldr	r2, [r7, #12]
 8019128:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801912a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801912c:	68fb      	ldr	r3, [r7, #12]
 801912e:	681b      	ldr	r3, [r3, #0]
 8019130:	4a39      	ldr	r2, [pc, #228]	; (8019218 <DMA_SetConfig+0x21c>)
 8019132:	4293      	cmp	r3, r2
 8019134:	d04a      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	4a38      	ldr	r2, [pc, #224]	; (801921c <DMA_SetConfig+0x220>)
 801913c:	4293      	cmp	r3, r2
 801913e:	d045      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 8019140:	68fb      	ldr	r3, [r7, #12]
 8019142:	681b      	ldr	r3, [r3, #0]
 8019144:	4a36      	ldr	r2, [pc, #216]	; (8019220 <DMA_SetConfig+0x224>)
 8019146:	4293      	cmp	r3, r2
 8019148:	d040      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 801914a:	68fb      	ldr	r3, [r7, #12]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	4a35      	ldr	r2, [pc, #212]	; (8019224 <DMA_SetConfig+0x228>)
 8019150:	4293      	cmp	r3, r2
 8019152:	d03b      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 8019154:	68fb      	ldr	r3, [r7, #12]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	4a33      	ldr	r2, [pc, #204]	; (8019228 <DMA_SetConfig+0x22c>)
 801915a:	4293      	cmp	r3, r2
 801915c:	d036      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	681b      	ldr	r3, [r3, #0]
 8019162:	4a32      	ldr	r2, [pc, #200]	; (801922c <DMA_SetConfig+0x230>)
 8019164:	4293      	cmp	r3, r2
 8019166:	d031      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 8019168:	68fb      	ldr	r3, [r7, #12]
 801916a:	681b      	ldr	r3, [r3, #0]
 801916c:	4a30      	ldr	r2, [pc, #192]	; (8019230 <DMA_SetConfig+0x234>)
 801916e:	4293      	cmp	r3, r2
 8019170:	d02c      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 8019172:	68fb      	ldr	r3, [r7, #12]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	4a2f      	ldr	r2, [pc, #188]	; (8019234 <DMA_SetConfig+0x238>)
 8019178:	4293      	cmp	r3, r2
 801917a:	d027      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 801917c:	68fb      	ldr	r3, [r7, #12]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	4a2d      	ldr	r2, [pc, #180]	; (8019238 <DMA_SetConfig+0x23c>)
 8019182:	4293      	cmp	r3, r2
 8019184:	d022      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 8019186:	68fb      	ldr	r3, [r7, #12]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	4a2c      	ldr	r2, [pc, #176]	; (801923c <DMA_SetConfig+0x240>)
 801918c:	4293      	cmp	r3, r2
 801918e:	d01d      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 8019190:	68fb      	ldr	r3, [r7, #12]
 8019192:	681b      	ldr	r3, [r3, #0]
 8019194:	4a2a      	ldr	r2, [pc, #168]	; (8019240 <DMA_SetConfig+0x244>)
 8019196:	4293      	cmp	r3, r2
 8019198:	d018      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	4a29      	ldr	r2, [pc, #164]	; (8019244 <DMA_SetConfig+0x248>)
 80191a0:	4293      	cmp	r3, r2
 80191a2:	d013      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	4a27      	ldr	r2, [pc, #156]	; (8019248 <DMA_SetConfig+0x24c>)
 80191aa:	4293      	cmp	r3, r2
 80191ac:	d00e      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	4a26      	ldr	r2, [pc, #152]	; (801924c <DMA_SetConfig+0x250>)
 80191b4:	4293      	cmp	r3, r2
 80191b6:	d009      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	4a24      	ldr	r2, [pc, #144]	; (8019250 <DMA_SetConfig+0x254>)
 80191be:	4293      	cmp	r3, r2
 80191c0:	d004      	beq.n	80191cc <DMA_SetConfig+0x1d0>
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	4a23      	ldr	r2, [pc, #140]	; (8019254 <DMA_SetConfig+0x258>)
 80191c8:	4293      	cmp	r3, r2
 80191ca:	d101      	bne.n	80191d0 <DMA_SetConfig+0x1d4>
 80191cc:	2301      	movs	r3, #1
 80191ce:	e000      	b.n	80191d2 <DMA_SetConfig+0x1d6>
 80191d0:	2300      	movs	r3, #0
 80191d2:	2b00      	cmp	r3, #0
 80191d4:	d059      	beq.n	801928a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80191da:	f003 031f 	and.w	r3, r3, #31
 80191de:	223f      	movs	r2, #63	; 0x3f
 80191e0:	409a      	lsls	r2, r3
 80191e2:	697b      	ldr	r3, [r7, #20]
 80191e4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80191e6:	68fb      	ldr	r3, [r7, #12]
 80191e8:	681b      	ldr	r3, [r3, #0]
 80191ea:	681a      	ldr	r2, [r3, #0]
 80191ec:	68fb      	ldr	r3, [r7, #12]
 80191ee:	681b      	ldr	r3, [r3, #0]
 80191f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80191f4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	681b      	ldr	r3, [r3, #0]
 80191fa:	683a      	ldr	r2, [r7, #0]
 80191fc:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	689b      	ldr	r3, [r3, #8]
 8019202:	2b40      	cmp	r3, #64	; 0x40
 8019204:	d138      	bne.n	8019278 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8019206:	68fb      	ldr	r3, [r7, #12]
 8019208:	681b      	ldr	r3, [r3, #0]
 801920a:	687a      	ldr	r2, [r7, #4]
 801920c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 801920e:	68fb      	ldr	r3, [r7, #12]
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	68ba      	ldr	r2, [r7, #8]
 8019214:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8019216:	e086      	b.n	8019326 <DMA_SetConfig+0x32a>
 8019218:	40020010 	.word	0x40020010
 801921c:	40020028 	.word	0x40020028
 8019220:	40020040 	.word	0x40020040
 8019224:	40020058 	.word	0x40020058
 8019228:	40020070 	.word	0x40020070
 801922c:	40020088 	.word	0x40020088
 8019230:	400200a0 	.word	0x400200a0
 8019234:	400200b8 	.word	0x400200b8
 8019238:	40020410 	.word	0x40020410
 801923c:	40020428 	.word	0x40020428
 8019240:	40020440 	.word	0x40020440
 8019244:	40020458 	.word	0x40020458
 8019248:	40020470 	.word	0x40020470
 801924c:	40020488 	.word	0x40020488
 8019250:	400204a0 	.word	0x400204a0
 8019254:	400204b8 	.word	0x400204b8
 8019258:	58025408 	.word	0x58025408
 801925c:	5802541c 	.word	0x5802541c
 8019260:	58025430 	.word	0x58025430
 8019264:	58025444 	.word	0x58025444
 8019268:	58025458 	.word	0x58025458
 801926c:	5802546c 	.word	0x5802546c
 8019270:	58025480 	.word	0x58025480
 8019274:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8019278:	68fb      	ldr	r3, [r7, #12]
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	68ba      	ldr	r2, [r7, #8]
 801927e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8019280:	68fb      	ldr	r3, [r7, #12]
 8019282:	681b      	ldr	r3, [r3, #0]
 8019284:	687a      	ldr	r2, [r7, #4]
 8019286:	60da      	str	r2, [r3, #12]
}
 8019288:	e04d      	b.n	8019326 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	681b      	ldr	r3, [r3, #0]
 801928e:	4a29      	ldr	r2, [pc, #164]	; (8019334 <DMA_SetConfig+0x338>)
 8019290:	4293      	cmp	r3, r2
 8019292:	d022      	beq.n	80192da <DMA_SetConfig+0x2de>
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	4a27      	ldr	r2, [pc, #156]	; (8019338 <DMA_SetConfig+0x33c>)
 801929a:	4293      	cmp	r3, r2
 801929c:	d01d      	beq.n	80192da <DMA_SetConfig+0x2de>
 801929e:	68fb      	ldr	r3, [r7, #12]
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	4a26      	ldr	r2, [pc, #152]	; (801933c <DMA_SetConfig+0x340>)
 80192a4:	4293      	cmp	r3, r2
 80192a6:	d018      	beq.n	80192da <DMA_SetConfig+0x2de>
 80192a8:	68fb      	ldr	r3, [r7, #12]
 80192aa:	681b      	ldr	r3, [r3, #0]
 80192ac:	4a24      	ldr	r2, [pc, #144]	; (8019340 <DMA_SetConfig+0x344>)
 80192ae:	4293      	cmp	r3, r2
 80192b0:	d013      	beq.n	80192da <DMA_SetConfig+0x2de>
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	4a23      	ldr	r2, [pc, #140]	; (8019344 <DMA_SetConfig+0x348>)
 80192b8:	4293      	cmp	r3, r2
 80192ba:	d00e      	beq.n	80192da <DMA_SetConfig+0x2de>
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	681b      	ldr	r3, [r3, #0]
 80192c0:	4a21      	ldr	r2, [pc, #132]	; (8019348 <DMA_SetConfig+0x34c>)
 80192c2:	4293      	cmp	r3, r2
 80192c4:	d009      	beq.n	80192da <DMA_SetConfig+0x2de>
 80192c6:	68fb      	ldr	r3, [r7, #12]
 80192c8:	681b      	ldr	r3, [r3, #0]
 80192ca:	4a20      	ldr	r2, [pc, #128]	; (801934c <DMA_SetConfig+0x350>)
 80192cc:	4293      	cmp	r3, r2
 80192ce:	d004      	beq.n	80192da <DMA_SetConfig+0x2de>
 80192d0:	68fb      	ldr	r3, [r7, #12]
 80192d2:	681b      	ldr	r3, [r3, #0]
 80192d4:	4a1e      	ldr	r2, [pc, #120]	; (8019350 <DMA_SetConfig+0x354>)
 80192d6:	4293      	cmp	r3, r2
 80192d8:	d101      	bne.n	80192de <DMA_SetConfig+0x2e2>
 80192da:	2301      	movs	r3, #1
 80192dc:	e000      	b.n	80192e0 <DMA_SetConfig+0x2e4>
 80192de:	2300      	movs	r3, #0
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d020      	beq.n	8019326 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80192e8:	f003 031f 	and.w	r3, r3, #31
 80192ec:	2201      	movs	r2, #1
 80192ee:	409a      	lsls	r2, r3
 80192f0:	693b      	ldr	r3, [r7, #16]
 80192f2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	683a      	ldr	r2, [r7, #0]
 80192fa:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80192fc:	68fb      	ldr	r3, [r7, #12]
 80192fe:	689b      	ldr	r3, [r3, #8]
 8019300:	2b40      	cmp	r3, #64	; 0x40
 8019302:	d108      	bne.n	8019316 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8019304:	68fb      	ldr	r3, [r7, #12]
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	687a      	ldr	r2, [r7, #4]
 801930a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	68ba      	ldr	r2, [r7, #8]
 8019312:	60da      	str	r2, [r3, #12]
}
 8019314:	e007      	b.n	8019326 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	68ba      	ldr	r2, [r7, #8]
 801931c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 801931e:	68fb      	ldr	r3, [r7, #12]
 8019320:	681b      	ldr	r3, [r3, #0]
 8019322:	687a      	ldr	r2, [r7, #4]
 8019324:	60da      	str	r2, [r3, #12]
}
 8019326:	bf00      	nop
 8019328:	371c      	adds	r7, #28
 801932a:	46bd      	mov	sp, r7
 801932c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019330:	4770      	bx	lr
 8019332:	bf00      	nop
 8019334:	58025408 	.word	0x58025408
 8019338:	5802541c 	.word	0x5802541c
 801933c:	58025430 	.word	0x58025430
 8019340:	58025444 	.word	0x58025444
 8019344:	58025458 	.word	0x58025458
 8019348:	5802546c 	.word	0x5802546c
 801934c:	58025480 	.word	0x58025480
 8019350:	58025494 	.word	0x58025494

08019354 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8019354:	b480      	push	{r7}
 8019356:	b085      	sub	sp, #20
 8019358:	af00      	add	r7, sp, #0
 801935a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	4a42      	ldr	r2, [pc, #264]	; (801946c <DMA_CalcBaseAndBitshift+0x118>)
 8019362:	4293      	cmp	r3, r2
 8019364:	d04a      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	4a41      	ldr	r2, [pc, #260]	; (8019470 <DMA_CalcBaseAndBitshift+0x11c>)
 801936c:	4293      	cmp	r3, r2
 801936e:	d045      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 8019370:	687b      	ldr	r3, [r7, #4]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	4a3f      	ldr	r2, [pc, #252]	; (8019474 <DMA_CalcBaseAndBitshift+0x120>)
 8019376:	4293      	cmp	r3, r2
 8019378:	d040      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	4a3e      	ldr	r2, [pc, #248]	; (8019478 <DMA_CalcBaseAndBitshift+0x124>)
 8019380:	4293      	cmp	r3, r2
 8019382:	d03b      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	4a3c      	ldr	r2, [pc, #240]	; (801947c <DMA_CalcBaseAndBitshift+0x128>)
 801938a:	4293      	cmp	r3, r2
 801938c:	d036      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	4a3b      	ldr	r2, [pc, #236]	; (8019480 <DMA_CalcBaseAndBitshift+0x12c>)
 8019394:	4293      	cmp	r3, r2
 8019396:	d031      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	681b      	ldr	r3, [r3, #0]
 801939c:	4a39      	ldr	r2, [pc, #228]	; (8019484 <DMA_CalcBaseAndBitshift+0x130>)
 801939e:	4293      	cmp	r3, r2
 80193a0:	d02c      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	681b      	ldr	r3, [r3, #0]
 80193a6:	4a38      	ldr	r2, [pc, #224]	; (8019488 <DMA_CalcBaseAndBitshift+0x134>)
 80193a8:	4293      	cmp	r3, r2
 80193aa:	d027      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	4a36      	ldr	r2, [pc, #216]	; (801948c <DMA_CalcBaseAndBitshift+0x138>)
 80193b2:	4293      	cmp	r3, r2
 80193b4:	d022      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193b6:	687b      	ldr	r3, [r7, #4]
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	4a35      	ldr	r2, [pc, #212]	; (8019490 <DMA_CalcBaseAndBitshift+0x13c>)
 80193bc:	4293      	cmp	r3, r2
 80193be:	d01d      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	4a33      	ldr	r2, [pc, #204]	; (8019494 <DMA_CalcBaseAndBitshift+0x140>)
 80193c6:	4293      	cmp	r3, r2
 80193c8:	d018      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	4a32      	ldr	r2, [pc, #200]	; (8019498 <DMA_CalcBaseAndBitshift+0x144>)
 80193d0:	4293      	cmp	r3, r2
 80193d2:	d013      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	4a30      	ldr	r2, [pc, #192]	; (801949c <DMA_CalcBaseAndBitshift+0x148>)
 80193da:	4293      	cmp	r3, r2
 80193dc:	d00e      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	4a2f      	ldr	r2, [pc, #188]	; (80194a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80193e4:	4293      	cmp	r3, r2
 80193e6:	d009      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	4a2d      	ldr	r2, [pc, #180]	; (80194a4 <DMA_CalcBaseAndBitshift+0x150>)
 80193ee:	4293      	cmp	r3, r2
 80193f0:	d004      	beq.n	80193fc <DMA_CalcBaseAndBitshift+0xa8>
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	4a2c      	ldr	r2, [pc, #176]	; (80194a8 <DMA_CalcBaseAndBitshift+0x154>)
 80193f8:	4293      	cmp	r3, r2
 80193fa:	d101      	bne.n	8019400 <DMA_CalcBaseAndBitshift+0xac>
 80193fc:	2301      	movs	r3, #1
 80193fe:	e000      	b.n	8019402 <DMA_CalcBaseAndBitshift+0xae>
 8019400:	2300      	movs	r3, #0
 8019402:	2b00      	cmp	r3, #0
 8019404:	d024      	beq.n	8019450 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	b2db      	uxtb	r3, r3
 801940c:	3b10      	subs	r3, #16
 801940e:	4a27      	ldr	r2, [pc, #156]	; (80194ac <DMA_CalcBaseAndBitshift+0x158>)
 8019410:	fba2 2303 	umull	r2, r3, r2, r3
 8019414:	091b      	lsrs	r3, r3, #4
 8019416:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	f003 0307 	and.w	r3, r3, #7
 801941e:	4a24      	ldr	r2, [pc, #144]	; (80194b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8019420:	5cd3      	ldrb	r3, [r2, r3]
 8019422:	461a      	mov	r2, r3
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	2b03      	cmp	r3, #3
 801942c:	d908      	bls.n	8019440 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	461a      	mov	r2, r3
 8019434:	4b1f      	ldr	r3, [pc, #124]	; (80194b4 <DMA_CalcBaseAndBitshift+0x160>)
 8019436:	4013      	ands	r3, r2
 8019438:	1d1a      	adds	r2, r3, #4
 801943a:	687b      	ldr	r3, [r7, #4]
 801943c:	659a      	str	r2, [r3, #88]	; 0x58
 801943e:	e00d      	b.n	801945c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	681b      	ldr	r3, [r3, #0]
 8019444:	461a      	mov	r2, r3
 8019446:	4b1b      	ldr	r3, [pc, #108]	; (80194b4 <DMA_CalcBaseAndBitshift+0x160>)
 8019448:	4013      	ands	r3, r2
 801944a:	687a      	ldr	r2, [r7, #4]
 801944c:	6593      	str	r3, [r2, #88]	; 0x58
 801944e:	e005      	b.n	801945c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8019458:	687b      	ldr	r3, [r7, #4]
 801945a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 801945c:	687b      	ldr	r3, [r7, #4]
 801945e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8019460:	4618      	mov	r0, r3
 8019462:	3714      	adds	r7, #20
 8019464:	46bd      	mov	sp, r7
 8019466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801946a:	4770      	bx	lr
 801946c:	40020010 	.word	0x40020010
 8019470:	40020028 	.word	0x40020028
 8019474:	40020040 	.word	0x40020040
 8019478:	40020058 	.word	0x40020058
 801947c:	40020070 	.word	0x40020070
 8019480:	40020088 	.word	0x40020088
 8019484:	400200a0 	.word	0x400200a0
 8019488:	400200b8 	.word	0x400200b8
 801948c:	40020410 	.word	0x40020410
 8019490:	40020428 	.word	0x40020428
 8019494:	40020440 	.word	0x40020440
 8019498:	40020458 	.word	0x40020458
 801949c:	40020470 	.word	0x40020470
 80194a0:	40020488 	.word	0x40020488
 80194a4:	400204a0 	.word	0x400204a0
 80194a8:	400204b8 	.word	0x400204b8
 80194ac:	aaaaaaab 	.word	0xaaaaaaab
 80194b0:	08021108 	.word	0x08021108
 80194b4:	fffffc00 	.word	0xfffffc00

080194b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80194b8:	b480      	push	{r7}
 80194ba:	b085      	sub	sp, #20
 80194bc:	af00      	add	r7, sp, #0
 80194be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80194c0:	2300      	movs	r3, #0
 80194c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80194c4:	687b      	ldr	r3, [r7, #4]
 80194c6:	699b      	ldr	r3, [r3, #24]
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d120      	bne.n	801950e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194d0:	2b03      	cmp	r3, #3
 80194d2:	d858      	bhi.n	8019586 <DMA_CheckFifoParam+0xce>
 80194d4:	a201      	add	r2, pc, #4	; (adr r2, 80194dc <DMA_CheckFifoParam+0x24>)
 80194d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194da:	bf00      	nop
 80194dc:	080194ed 	.word	0x080194ed
 80194e0:	080194ff 	.word	0x080194ff
 80194e4:	080194ed 	.word	0x080194ed
 80194e8:	08019587 	.word	0x08019587
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80194ec:	687b      	ldr	r3, [r7, #4]
 80194ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80194f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d048      	beq.n	801958a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80194f8:	2301      	movs	r3, #1
 80194fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80194fc:	e045      	b.n	801958a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019506:	d142      	bne.n	801958e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8019508:	2301      	movs	r3, #1
 801950a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801950c:	e03f      	b.n	801958e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	699b      	ldr	r3, [r3, #24]
 8019512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8019516:	d123      	bne.n	8019560 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801951c:	2b03      	cmp	r3, #3
 801951e:	d838      	bhi.n	8019592 <DMA_CheckFifoParam+0xda>
 8019520:	a201      	add	r2, pc, #4	; (adr r2, 8019528 <DMA_CheckFifoParam+0x70>)
 8019522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019526:	bf00      	nop
 8019528:	08019539 	.word	0x08019539
 801952c:	0801953f 	.word	0x0801953f
 8019530:	08019539 	.word	0x08019539
 8019534:	08019551 	.word	0x08019551
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8019538:	2301      	movs	r3, #1
 801953a:	73fb      	strb	r3, [r7, #15]
        break;
 801953c:	e030      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801953e:	687b      	ldr	r3, [r7, #4]
 8019540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019542:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019546:	2b00      	cmp	r3, #0
 8019548:	d025      	beq.n	8019596 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801954a:	2301      	movs	r3, #1
 801954c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801954e:	e022      	b.n	8019596 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019554:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8019558:	d11f      	bne.n	801959a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801955a:	2301      	movs	r3, #1
 801955c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801955e:	e01c      	b.n	801959a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019564:	2b02      	cmp	r3, #2
 8019566:	d902      	bls.n	801956e <DMA_CheckFifoParam+0xb6>
 8019568:	2b03      	cmp	r3, #3
 801956a:	d003      	beq.n	8019574 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801956c:	e018      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801956e:	2301      	movs	r3, #1
 8019570:	73fb      	strb	r3, [r7, #15]
        break;
 8019572:	e015      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019578:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801957c:	2b00      	cmp	r3, #0
 801957e:	d00e      	beq.n	801959e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8019580:	2301      	movs	r3, #1
 8019582:	73fb      	strb	r3, [r7, #15]
    break;
 8019584:	e00b      	b.n	801959e <DMA_CheckFifoParam+0xe6>
        break;
 8019586:	bf00      	nop
 8019588:	e00a      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>
        break;
 801958a:	bf00      	nop
 801958c:	e008      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>
        break;
 801958e:	bf00      	nop
 8019590:	e006      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>
        break;
 8019592:	bf00      	nop
 8019594:	e004      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>
        break;
 8019596:	bf00      	nop
 8019598:	e002      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>
        break;
 801959a:	bf00      	nop
 801959c:	e000      	b.n	80195a0 <DMA_CheckFifoParam+0xe8>
    break;
 801959e:	bf00      	nop
    }
  }

  return status;
 80195a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80195a2:	4618      	mov	r0, r3
 80195a4:	3714      	adds	r7, #20
 80195a6:	46bd      	mov	sp, r7
 80195a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195ac:	4770      	bx	lr
 80195ae:	bf00      	nop

080195b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80195b0:	b480      	push	{r7}
 80195b2:	b085      	sub	sp, #20
 80195b4:	af00      	add	r7, sp, #0
 80195b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	681b      	ldr	r3, [r3, #0]
 80195bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	681b      	ldr	r3, [r3, #0]
 80195c2:	4a38      	ldr	r2, [pc, #224]	; (80196a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80195c4:	4293      	cmp	r3, r2
 80195c6:	d022      	beq.n	801960e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	681b      	ldr	r3, [r3, #0]
 80195cc:	4a36      	ldr	r2, [pc, #216]	; (80196a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80195ce:	4293      	cmp	r3, r2
 80195d0:	d01d      	beq.n	801960e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	681b      	ldr	r3, [r3, #0]
 80195d6:	4a35      	ldr	r2, [pc, #212]	; (80196ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80195d8:	4293      	cmp	r3, r2
 80195da:	d018      	beq.n	801960e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	4a33      	ldr	r2, [pc, #204]	; (80196b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80195e2:	4293      	cmp	r3, r2
 80195e4:	d013      	beq.n	801960e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	4a32      	ldr	r2, [pc, #200]	; (80196b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80195ec:	4293      	cmp	r3, r2
 80195ee:	d00e      	beq.n	801960e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	681b      	ldr	r3, [r3, #0]
 80195f4:	4a30      	ldr	r2, [pc, #192]	; (80196b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80195f6:	4293      	cmp	r3, r2
 80195f8:	d009      	beq.n	801960e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	681b      	ldr	r3, [r3, #0]
 80195fe:	4a2f      	ldr	r2, [pc, #188]	; (80196bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8019600:	4293      	cmp	r3, r2
 8019602:	d004      	beq.n	801960e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019604:	687b      	ldr	r3, [r7, #4]
 8019606:	681b      	ldr	r3, [r3, #0]
 8019608:	4a2d      	ldr	r2, [pc, #180]	; (80196c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801960a:	4293      	cmp	r3, r2
 801960c:	d101      	bne.n	8019612 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801960e:	2301      	movs	r3, #1
 8019610:	e000      	b.n	8019614 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8019612:	2300      	movs	r3, #0
 8019614:	2b00      	cmp	r3, #0
 8019616:	d01a      	beq.n	801964e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	b2db      	uxtb	r3, r3
 801961e:	3b08      	subs	r3, #8
 8019620:	4a28      	ldr	r2, [pc, #160]	; (80196c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8019622:	fba2 2303 	umull	r2, r3, r2, r3
 8019626:	091b      	lsrs	r3, r3, #4
 8019628:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801962a:	68fa      	ldr	r2, [r7, #12]
 801962c:	4b26      	ldr	r3, [pc, #152]	; (80196c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801962e:	4413      	add	r3, r2
 8019630:	009b      	lsls	r3, r3, #2
 8019632:	461a      	mov	r2, r3
 8019634:	687b      	ldr	r3, [r7, #4]
 8019636:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8019638:	687b      	ldr	r3, [r7, #4]
 801963a:	4a24      	ldr	r2, [pc, #144]	; (80196cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801963c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	f003 031f 	and.w	r3, r3, #31
 8019644:	2201      	movs	r2, #1
 8019646:	409a      	lsls	r2, r3
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801964c:	e024      	b.n	8019698 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	681b      	ldr	r3, [r3, #0]
 8019652:	b2db      	uxtb	r3, r3
 8019654:	3b10      	subs	r3, #16
 8019656:	4a1e      	ldr	r2, [pc, #120]	; (80196d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8019658:	fba2 2303 	umull	r2, r3, r2, r3
 801965c:	091b      	lsrs	r3, r3, #4
 801965e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8019660:	68bb      	ldr	r3, [r7, #8]
 8019662:	4a1c      	ldr	r2, [pc, #112]	; (80196d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8019664:	4293      	cmp	r3, r2
 8019666:	d806      	bhi.n	8019676 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8019668:	68bb      	ldr	r3, [r7, #8]
 801966a:	4a1b      	ldr	r2, [pc, #108]	; (80196d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801966c:	4293      	cmp	r3, r2
 801966e:	d902      	bls.n	8019676 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	3308      	adds	r3, #8
 8019674:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8019676:	68fa      	ldr	r2, [r7, #12]
 8019678:	4b18      	ldr	r3, [pc, #96]	; (80196dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801967a:	4413      	add	r3, r2
 801967c:	009b      	lsls	r3, r3, #2
 801967e:	461a      	mov	r2, r3
 8019680:	687b      	ldr	r3, [r7, #4]
 8019682:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	4a16      	ldr	r2, [pc, #88]	; (80196e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8019688:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	f003 031f 	and.w	r3, r3, #31
 8019690:	2201      	movs	r2, #1
 8019692:	409a      	lsls	r2, r3
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	669a      	str	r2, [r3, #104]	; 0x68
}
 8019698:	bf00      	nop
 801969a:	3714      	adds	r7, #20
 801969c:	46bd      	mov	sp, r7
 801969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196a2:	4770      	bx	lr
 80196a4:	58025408 	.word	0x58025408
 80196a8:	5802541c 	.word	0x5802541c
 80196ac:	58025430 	.word	0x58025430
 80196b0:	58025444 	.word	0x58025444
 80196b4:	58025458 	.word	0x58025458
 80196b8:	5802546c 	.word	0x5802546c
 80196bc:	58025480 	.word	0x58025480
 80196c0:	58025494 	.word	0x58025494
 80196c4:	cccccccd 	.word	0xcccccccd
 80196c8:	16009600 	.word	0x16009600
 80196cc:	58025880 	.word	0x58025880
 80196d0:	aaaaaaab 	.word	0xaaaaaaab
 80196d4:	400204b8 	.word	0x400204b8
 80196d8:	4002040f 	.word	0x4002040f
 80196dc:	10008200 	.word	0x10008200
 80196e0:	40020880 	.word	0x40020880

080196e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80196e4:	b480      	push	{r7}
 80196e6:	b085      	sub	sp, #20
 80196e8:	af00      	add	r7, sp, #0
 80196ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	685b      	ldr	r3, [r3, #4]
 80196f0:	b2db      	uxtb	r3, r3
 80196f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	2b00      	cmp	r3, #0
 80196f8:	d04a      	beq.n	8019790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80196fa:	68fb      	ldr	r3, [r7, #12]
 80196fc:	2b08      	cmp	r3, #8
 80196fe:	d847      	bhi.n	8019790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019700:	687b      	ldr	r3, [r7, #4]
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	4a25      	ldr	r2, [pc, #148]	; (801979c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8019706:	4293      	cmp	r3, r2
 8019708:	d022      	beq.n	8019750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801970a:	687b      	ldr	r3, [r7, #4]
 801970c:	681b      	ldr	r3, [r3, #0]
 801970e:	4a24      	ldr	r2, [pc, #144]	; (80197a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8019710:	4293      	cmp	r3, r2
 8019712:	d01d      	beq.n	8019750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	4a22      	ldr	r2, [pc, #136]	; (80197a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801971a:	4293      	cmp	r3, r2
 801971c:	d018      	beq.n	8019750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	4a21      	ldr	r2, [pc, #132]	; (80197a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8019724:	4293      	cmp	r3, r2
 8019726:	d013      	beq.n	8019750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	4a1f      	ldr	r2, [pc, #124]	; (80197ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801972e:	4293      	cmp	r3, r2
 8019730:	d00e      	beq.n	8019750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	4a1e      	ldr	r2, [pc, #120]	; (80197b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8019738:	4293      	cmp	r3, r2
 801973a:	d009      	beq.n	8019750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	681b      	ldr	r3, [r3, #0]
 8019740:	4a1c      	ldr	r2, [pc, #112]	; (80197b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8019742:	4293      	cmp	r3, r2
 8019744:	d004      	beq.n	8019750 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	681b      	ldr	r3, [r3, #0]
 801974a:	4a1b      	ldr	r2, [pc, #108]	; (80197b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801974c:	4293      	cmp	r3, r2
 801974e:	d101      	bne.n	8019754 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8019750:	2301      	movs	r3, #1
 8019752:	e000      	b.n	8019756 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8019754:	2300      	movs	r3, #0
 8019756:	2b00      	cmp	r3, #0
 8019758:	d00a      	beq.n	8019770 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801975a:	68fa      	ldr	r2, [r7, #12]
 801975c:	4b17      	ldr	r3, [pc, #92]	; (80197bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801975e:	4413      	add	r3, r2
 8019760:	009b      	lsls	r3, r3, #2
 8019762:	461a      	mov	r2, r3
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	4a15      	ldr	r2, [pc, #84]	; (80197c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801976c:	671a      	str	r2, [r3, #112]	; 0x70
 801976e:	e009      	b.n	8019784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8019770:	68fa      	ldr	r2, [r7, #12]
 8019772:	4b14      	ldr	r3, [pc, #80]	; (80197c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8019774:	4413      	add	r3, r2
 8019776:	009b      	lsls	r3, r3, #2
 8019778:	461a      	mov	r2, r3
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	4a11      	ldr	r2, [pc, #68]	; (80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8019782:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8019784:	68fb      	ldr	r3, [r7, #12]
 8019786:	3b01      	subs	r3, #1
 8019788:	2201      	movs	r2, #1
 801978a:	409a      	lsls	r2, r3
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8019790:	bf00      	nop
 8019792:	3714      	adds	r7, #20
 8019794:	46bd      	mov	sp, r7
 8019796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801979a:	4770      	bx	lr
 801979c:	58025408 	.word	0x58025408
 80197a0:	5802541c 	.word	0x5802541c
 80197a4:	58025430 	.word	0x58025430
 80197a8:	58025444 	.word	0x58025444
 80197ac:	58025458 	.word	0x58025458
 80197b0:	5802546c 	.word	0x5802546c
 80197b4:	58025480 	.word	0x58025480
 80197b8:	58025494 	.word	0x58025494
 80197bc:	1600963f 	.word	0x1600963f
 80197c0:	58025940 	.word	0x58025940
 80197c4:	1000823f 	.word	0x1000823f
 80197c8:	40020940 	.word	0x40020940

080197cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b098      	sub	sp, #96	; 0x60
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80197d4:	4a84      	ldr	r2, [pc, #528]	; (80199e8 <HAL_FDCAN_Init+0x21c>)
 80197d6:	f107 030c 	add.w	r3, r7, #12
 80197da:	4611      	mov	r1, r2
 80197dc:	224c      	movs	r2, #76	; 0x4c
 80197de:	4618      	mov	r0, r3
 80197e0:	f007 f9e2 	bl	8020ba8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	2b00      	cmp	r3, #0
 80197e8:	d101      	bne.n	80197ee <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80197ea:	2301      	movs	r3, #1
 80197ec:	e1c6      	b.n	8019b7c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80197ee:	687b      	ldr	r3, [r7, #4]
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	4a7e      	ldr	r2, [pc, #504]	; (80199ec <HAL_FDCAN_Init+0x220>)
 80197f4:	4293      	cmp	r3, r2
 80197f6:	d106      	bne.n	8019806 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	681b      	ldr	r3, [r3, #0]
 80197fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019800:	461a      	mov	r2, r3
 8019802:	687b      	ldr	r3, [r7, #4]
 8019804:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801980c:	b2db      	uxtb	r3, r3
 801980e:	2b00      	cmp	r3, #0
 8019810:	d106      	bne.n	8019820 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8019812:	687b      	ldr	r3, [r7, #4]
 8019814:	2200      	movs	r2, #0
 8019816:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 801981a:	6878      	ldr	r0, [r7, #4]
 801981c:	f7fa feea 	bl	80145f4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8019820:	687b      	ldr	r3, [r7, #4]
 8019822:	681b      	ldr	r3, [r3, #0]
 8019824:	699a      	ldr	r2, [r3, #24]
 8019826:	687b      	ldr	r3, [r7, #4]
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	f022 0210 	bic.w	r2, r2, #16
 801982e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019830:	f7fb fd26 	bl	8015280 <HAL_GetTick>
 8019834:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8019836:	e014      	b.n	8019862 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8019838:	f7fb fd22 	bl	8015280 <HAL_GetTick>
 801983c:	4602      	mov	r2, r0
 801983e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019840:	1ad3      	subs	r3, r2, r3
 8019842:	2b0a      	cmp	r3, #10
 8019844:	d90d      	bls.n	8019862 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801984c:	f043 0201 	orr.w	r2, r3, #1
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	2203      	movs	r2, #3
 801985a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 801985e:	2301      	movs	r3, #1
 8019860:	e18c      	b.n	8019b7c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	681b      	ldr	r3, [r3, #0]
 8019866:	699b      	ldr	r3, [r3, #24]
 8019868:	f003 0308 	and.w	r3, r3, #8
 801986c:	2b08      	cmp	r3, #8
 801986e:	d0e3      	beq.n	8019838 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	699a      	ldr	r2, [r3, #24]
 8019876:	687b      	ldr	r3, [r7, #4]
 8019878:	681b      	ldr	r3, [r3, #0]
 801987a:	f042 0201 	orr.w	r2, r2, #1
 801987e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8019880:	f7fb fcfe 	bl	8015280 <HAL_GetTick>
 8019884:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8019886:	e014      	b.n	80198b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8019888:	f7fb fcfa 	bl	8015280 <HAL_GetTick>
 801988c:	4602      	mov	r2, r0
 801988e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019890:	1ad3      	subs	r3, r2, r3
 8019892:	2b0a      	cmp	r3, #10
 8019894:	d90d      	bls.n	80198b2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8019896:	687b      	ldr	r3, [r7, #4]
 8019898:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801989c:	f043 0201 	orr.w	r2, r3, #1
 80198a0:	687b      	ldr	r3, [r7, #4]
 80198a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80198a6:	687b      	ldr	r3, [r7, #4]
 80198a8:	2203      	movs	r2, #3
 80198aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80198ae:	2301      	movs	r3, #1
 80198b0:	e164      	b.n	8019b7c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	681b      	ldr	r3, [r3, #0]
 80198b6:	699b      	ldr	r3, [r3, #24]
 80198b8:	f003 0301 	and.w	r3, r3, #1
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d0e3      	beq.n	8019888 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	699a      	ldr	r2, [r3, #24]
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	681b      	ldr	r3, [r3, #0]
 80198ca:	f042 0202 	orr.w	r2, r2, #2
 80198ce:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80198d0:	687b      	ldr	r3, [r7, #4]
 80198d2:	7c1b      	ldrb	r3, [r3, #16]
 80198d4:	2b01      	cmp	r3, #1
 80198d6:	d108      	bne.n	80198ea <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	699a      	ldr	r2, [r3, #24]
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80198e6:	619a      	str	r2, [r3, #24]
 80198e8:	e007      	b.n	80198fa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80198ea:	687b      	ldr	r3, [r7, #4]
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	699a      	ldr	r2, [r3, #24]
 80198f0:	687b      	ldr	r3, [r7, #4]
 80198f2:	681b      	ldr	r3, [r3, #0]
 80198f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80198f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	7c5b      	ldrb	r3, [r3, #17]
 80198fe:	2b01      	cmp	r3, #1
 8019900:	d108      	bne.n	8019914 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	681b      	ldr	r3, [r3, #0]
 8019906:	699a      	ldr	r2, [r3, #24]
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019910:	619a      	str	r2, [r3, #24]
 8019912:	e007      	b.n	8019924 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	681b      	ldr	r3, [r3, #0]
 8019918:	699a      	ldr	r2, [r3, #24]
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8019922:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	7c9b      	ldrb	r3, [r3, #18]
 8019928:	2b01      	cmp	r3, #1
 801992a:	d108      	bne.n	801993e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 801992c:	687b      	ldr	r3, [r7, #4]
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	699a      	ldr	r2, [r3, #24]
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	681b      	ldr	r3, [r3, #0]
 8019936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801993a:	619a      	str	r2, [r3, #24]
 801993c:	e007      	b.n	801994e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	699a      	ldr	r2, [r3, #24]
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801994c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	699b      	ldr	r3, [r3, #24]
 8019954:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	689a      	ldr	r2, [r3, #8]
 801995c:	687b      	ldr	r3, [r7, #4]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	430a      	orrs	r2, r1
 8019962:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8019964:	687b      	ldr	r3, [r7, #4]
 8019966:	681b      	ldr	r3, [r3, #0]
 8019968:	699a      	ldr	r2, [r3, #24]
 801996a:	687b      	ldr	r3, [r7, #4]
 801996c:	681b      	ldr	r3, [r3, #0]
 801996e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8019972:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	681b      	ldr	r3, [r3, #0]
 8019978:	691a      	ldr	r2, [r3, #16]
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	f022 0210 	bic.w	r2, r2, #16
 8019982:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8019984:	687b      	ldr	r3, [r7, #4]
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	2b01      	cmp	r3, #1
 801998a:	d108      	bne.n	801999e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	699a      	ldr	r2, [r3, #24]
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	f042 0204 	orr.w	r2, r2, #4
 801999a:	619a      	str	r2, [r3, #24]
 801999c:	e030      	b.n	8019a00 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	68db      	ldr	r3, [r3, #12]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	d02c      	beq.n	8019a00 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	68db      	ldr	r3, [r3, #12]
 80199aa:	2b02      	cmp	r3, #2
 80199ac:	d020      	beq.n	80199f0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	699a      	ldr	r2, [r3, #24]
 80199b4:	687b      	ldr	r3, [r7, #4]
 80199b6:	681b      	ldr	r3, [r3, #0]
 80199b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80199bc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80199be:	687b      	ldr	r3, [r7, #4]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	691a      	ldr	r2, [r3, #16]
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	681b      	ldr	r3, [r3, #0]
 80199c8:	f042 0210 	orr.w	r2, r2, #16
 80199cc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	68db      	ldr	r3, [r3, #12]
 80199d2:	2b03      	cmp	r3, #3
 80199d4:	d114      	bne.n	8019a00 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	699a      	ldr	r2, [r3, #24]
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	f042 0220 	orr.w	r2, r2, #32
 80199e4:	619a      	str	r2, [r3, #24]
 80199e6:	e00b      	b.n	8019a00 <HAL_FDCAN_Init+0x234>
 80199e8:	08021058 	.word	0x08021058
 80199ec:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80199f0:	687b      	ldr	r3, [r7, #4]
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	699a      	ldr	r2, [r3, #24]
 80199f6:	687b      	ldr	r3, [r7, #4]
 80199f8:	681b      	ldr	r3, [r3, #0]
 80199fa:	f042 0220 	orr.w	r2, r2, #32
 80199fe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a00:	687b      	ldr	r3, [r7, #4]
 8019a02:	699b      	ldr	r3, [r3, #24]
 8019a04:	3b01      	subs	r3, #1
 8019a06:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	69db      	ldr	r3, [r3, #28]
 8019a0c:	3b01      	subs	r3, #1
 8019a0e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a10:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	6a1b      	ldr	r3, [r3, #32]
 8019a16:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8019a18:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	695b      	ldr	r3, [r3, #20]
 8019a20:	3b01      	subs	r3, #1
 8019a22:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019a28:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a2a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	689b      	ldr	r3, [r3, #8]
 8019a30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019a34:	d115      	bne.n	8019a62 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a3a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a40:	3b01      	subs	r3, #1
 8019a42:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019a44:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a4a:	3b01      	subs	r3, #1
 8019a4c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019a4e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019a56:	3b01      	subs	r3, #1
 8019a58:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019a5e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019a60:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8019a62:	687b      	ldr	r3, [r7, #4]
 8019a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019a66:	2b00      	cmp	r3, #0
 8019a68:	d00a      	beq.n	8019a80 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8019a6a:	687b      	ldr	r3, [r7, #4]
 8019a6c:	681b      	ldr	r3, [r3, #0]
 8019a6e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	681b      	ldr	r3, [r3, #0]
 8019a7a:	430a      	orrs	r2, r1
 8019a7c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019a84:	687b      	ldr	r3, [r7, #4]
 8019a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019a88:	4413      	add	r3, r2
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d011      	beq.n	8019ab2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	681b      	ldr	r3, [r3, #0]
 8019a92:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019a96:	f023 0107 	bic.w	r1, r3, #7
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019a9e:	009b      	lsls	r3, r3, #2
 8019aa0:	3360      	adds	r3, #96	; 0x60
 8019aa2:	443b      	add	r3, r7
 8019aa4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019aa8:	687b      	ldr	r3, [r7, #4]
 8019aaa:	681b      	ldr	r3, [r3, #0]
 8019aac:	430a      	orrs	r2, r1
 8019aae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8019ab2:	687b      	ldr	r3, [r7, #4]
 8019ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d011      	beq.n	8019ade <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	681b      	ldr	r3, [r3, #0]
 8019abe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019ac2:	f023 0107 	bic.w	r1, r3, #7
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019aca:	009b      	lsls	r3, r3, #2
 8019acc:	3360      	adds	r3, #96	; 0x60
 8019ace:	443b      	add	r3, r7
 8019ad0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	681b      	ldr	r3, [r3, #0]
 8019ad8:	430a      	orrs	r2, r1
 8019ada:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8019ade:	687b      	ldr	r3, [r7, #4]
 8019ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019ae2:	2b00      	cmp	r3, #0
 8019ae4:	d012      	beq.n	8019b0c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	681b      	ldr	r3, [r3, #0]
 8019aea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019aee:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8019af2:	687b      	ldr	r3, [r7, #4]
 8019af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019af6:	009b      	lsls	r3, r3, #2
 8019af8:	3360      	adds	r3, #96	; 0x60
 8019afa:	443b      	add	r3, r7
 8019afc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019b00:	011a      	lsls	r2, r3, #4
 8019b02:	687b      	ldr	r3, [r7, #4]
 8019b04:	681b      	ldr	r3, [r3, #0]
 8019b06:	430a      	orrs	r2, r1
 8019b08:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8019b0c:	687b      	ldr	r3, [r7, #4]
 8019b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d012      	beq.n	8019b3a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019b1c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b24:	009b      	lsls	r3, r3, #2
 8019b26:	3360      	adds	r3, #96	; 0x60
 8019b28:	443b      	add	r3, r7
 8019b2a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019b2e:	021a      	lsls	r2, r3, #8
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	430a      	orrs	r2, r1
 8019b36:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	4a11      	ldr	r2, [pc, #68]	; (8019b84 <HAL_FDCAN_Init+0x3b8>)
 8019b40:	4293      	cmp	r3, r2
 8019b42:	d107      	bne.n	8019b54 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	685b      	ldr	r3, [r3, #4]
 8019b48:	689a      	ldr	r2, [r3, #8]
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	685b      	ldr	r3, [r3, #4]
 8019b4e:	f022 0203 	bic.w	r2, r2, #3
 8019b52:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8019b54:	687b      	ldr	r3, [r7, #4]
 8019b56:	2200      	movs	r2, #0
 8019b58:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019b5c:	687b      	ldr	r3, [r7, #4]
 8019b5e:	2200      	movs	r2, #0
 8019b60:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	2201      	movs	r2, #1
 8019b68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8019b6c:	6878      	ldr	r0, [r7, #4]
 8019b6e:	f000 fd83 	bl	801a678 <FDCAN_CalcultateRamBlockAddresses>
 8019b72:	4603      	mov	r3, r0
 8019b74:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8019b78:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8019b7c:	4618      	mov	r0, r3
 8019b7e:	3760      	adds	r7, #96	; 0x60
 8019b80:	46bd      	mov	sp, r7
 8019b82:	bd80      	pop	{r7, pc}
 8019b84:	4000a000 	.word	0x4000a000

08019b88 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8019b88:	b480      	push	{r7}
 8019b8a:	b083      	sub	sp, #12
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019b96:	b2db      	uxtb	r3, r3
 8019b98:	2b01      	cmp	r3, #1
 8019b9a:	d111      	bne.n	8019bc0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	2202      	movs	r2, #2
 8019ba0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	681b      	ldr	r3, [r3, #0]
 8019ba8:	699a      	ldr	r2, [r3, #24]
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	681b      	ldr	r3, [r3, #0]
 8019bae:	f022 0201 	bic.w	r2, r2, #1
 8019bb2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	e008      	b.n	8019bd2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8019bc0:	687b      	ldr	r3, [r7, #4]
 8019bc2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019bc6:	f043 0204 	orr.w	r2, r3, #4
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019bd0:	2301      	movs	r3, #1
  }
}
 8019bd2:	4618      	mov	r0, r3
 8019bd4:	370c      	adds	r7, #12
 8019bd6:	46bd      	mov	sp, r7
 8019bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bdc:	4770      	bx	lr

08019bde <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8019bde:	b580      	push	{r7, lr}
 8019be0:	b086      	sub	sp, #24
 8019be2:	af00      	add	r7, sp, #0
 8019be4:	60f8      	str	r0, [r7, #12]
 8019be6:	60b9      	str	r1, [r7, #8]
 8019be8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8019bea:	68fb      	ldr	r3, [r7, #12]
 8019bec:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019bf0:	b2db      	uxtb	r3, r3
 8019bf2:	2b02      	cmp	r3, #2
 8019bf4:	d141      	bne.n	8019c7a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8019bf6:	68fb      	ldr	r3, [r7, #12]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019bfe:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d109      	bne.n	8019c1a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019c06:	68fb      	ldr	r3, [r7, #12]
 8019c08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c0c:	f043 0220 	orr.w	r2, r3, #32
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019c16:	2301      	movs	r3, #1
 8019c18:	e038      	b.n	8019c8c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8019c1a:	68fb      	ldr	r3, [r7, #12]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019c22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019c26:	2b00      	cmp	r3, #0
 8019c28:	d009      	beq.n	8019c3e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8019c2a:	68fb      	ldr	r3, [r7, #12]
 8019c2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019c3a:	2301      	movs	r3, #1
 8019c3c:	e026      	b.n	8019c8c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8019c3e:	68fb      	ldr	r3, [r7, #12]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019c46:	0c1b      	lsrs	r3, r3, #16
 8019c48:	f003 031f 	and.w	r3, r3, #31
 8019c4c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	687a      	ldr	r2, [r7, #4]
 8019c52:	68b9      	ldr	r1, [r7, #8]
 8019c54:	68f8      	ldr	r0, [r7, #12]
 8019c56:	f000 fe95 	bl	801a984 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	2101      	movs	r1, #1
 8019c60:	697a      	ldr	r2, [r7, #20]
 8019c62:	fa01 f202 	lsl.w	r2, r1, r2
 8019c66:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8019c6a:	2201      	movs	r2, #1
 8019c6c:	697b      	ldr	r3, [r7, #20]
 8019c6e:	409a      	lsls	r2, r3
 8019c70:	68fb      	ldr	r3, [r7, #12]
 8019c72:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8019c76:	2300      	movs	r3, #0
 8019c78:	e008      	b.n	8019c8c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019c7a:	68fb      	ldr	r3, [r7, #12]
 8019c7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c80:	f043 0208 	orr.w	r2, r3, #8
 8019c84:	68fb      	ldr	r3, [r7, #12]
 8019c86:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019c8a:	2301      	movs	r3, #1
  }
}
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	3718      	adds	r7, #24
 8019c90:	46bd      	mov	sp, r7
 8019c92:	bd80      	pop	{r7, pc}

08019c94 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8019c94:	b480      	push	{r7}
 8019c96:	b08b      	sub	sp, #44	; 0x2c
 8019c98:	af00      	add	r7, sp, #0
 8019c9a:	60f8      	str	r0, [r7, #12]
 8019c9c:	60b9      	str	r1, [r7, #8]
 8019c9e:	607a      	str	r2, [r7, #4]
 8019ca0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8019ca2:	2300      	movs	r3, #0
 8019ca4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019cac:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8019cae:	7efb      	ldrb	r3, [r7, #27]
 8019cb0:	2b02      	cmp	r3, #2
 8019cb2:	f040 814b 	bne.w	8019f4c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019cb6:	68bb      	ldr	r3, [r7, #8]
 8019cb8:	2b40      	cmp	r3, #64	; 0x40
 8019cba:	d14d      	bne.n	8019d58 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8019cbc:	68fb      	ldr	r3, [r7, #12]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019cc4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d109      	bne.n	8019ce0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019ccc:	68fb      	ldr	r3, [r7, #12]
 8019cce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019cd2:	f043 0220 	orr.w	r2, r3, #32
 8019cd6:	68fb      	ldr	r3, [r7, #12]
 8019cd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019cdc:	2301      	movs	r3, #1
 8019cde:	e13e      	b.n	8019f5e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8019ce0:	68fb      	ldr	r3, [r7, #12]
 8019ce2:	681b      	ldr	r3, [r3, #0]
 8019ce4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019cec:	2b00      	cmp	r3, #0
 8019cee:	d109      	bne.n	8019d04 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019cf0:	68fb      	ldr	r3, [r7, #12]
 8019cf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019cf6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019cfa:	68fb      	ldr	r3, [r7, #12]
 8019cfc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019d00:	2301      	movs	r3, #1
 8019d02:	e12c      	b.n	8019f5e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019d0c:	0e1b      	lsrs	r3, r3, #24
 8019d0e:	f003 0301 	and.w	r3, r3, #1
 8019d12:	2b01      	cmp	r3, #1
 8019d14:	d10b      	bne.n	8019d2e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019d16:	68fb      	ldr	r3, [r7, #12]
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019d1e:	0fdb      	lsrs	r3, r3, #31
 8019d20:	f003 0301 	and.w	r3, r3, #1
 8019d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019d28:	d101      	bne.n	8019d2e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019d2a:	2301      	movs	r3, #1
 8019d2c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8019d2e:	68fb      	ldr	r3, [r7, #12]
 8019d30:	681b      	ldr	r3, [r3, #0]
 8019d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019d36:	0a1b      	lsrs	r3, r3, #8
 8019d38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019d3c:	69fa      	ldr	r2, [r7, #28]
 8019d3e:	4413      	add	r3, r2
 8019d40:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019d4a:	69f9      	ldr	r1, [r7, #28]
 8019d4c:	fb01 f303 	mul.w	r3, r1, r3
 8019d50:	009b      	lsls	r3, r3, #2
 8019d52:	4413      	add	r3, r2
 8019d54:	627b      	str	r3, [r7, #36]	; 0x24
 8019d56:	e069      	b.n	8019e2c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019d58:	68bb      	ldr	r3, [r7, #8]
 8019d5a:	2b41      	cmp	r3, #65	; 0x41
 8019d5c:	d14d      	bne.n	8019dfa <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8019d5e:	68fb      	ldr	r3, [r7, #12]
 8019d60:	681b      	ldr	r3, [r3, #0]
 8019d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019d66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d109      	bne.n	8019d82 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019d6e:	68fb      	ldr	r3, [r7, #12]
 8019d70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d74:	f043 0220 	orr.w	r2, r3, #32
 8019d78:	68fb      	ldr	r3, [r7, #12]
 8019d7a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019d7e:	2301      	movs	r3, #1
 8019d80:	e0ed      	b.n	8019f5e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8019d82:	68fb      	ldr	r3, [r7, #12]
 8019d84:	681b      	ldr	r3, [r3, #0]
 8019d86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d109      	bne.n	8019da6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019d92:	68fb      	ldr	r3, [r7, #12]
 8019d94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d98:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019d9c:	68fb      	ldr	r3, [r7, #12]
 8019d9e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019da2:	2301      	movs	r3, #1
 8019da4:	e0db      	b.n	8019f5e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019dae:	0e1b      	lsrs	r3, r3, #24
 8019db0:	f003 0301 	and.w	r3, r3, #1
 8019db4:	2b01      	cmp	r3, #1
 8019db6:	d10b      	bne.n	8019dd0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019db8:	68fb      	ldr	r3, [r7, #12]
 8019dba:	681b      	ldr	r3, [r3, #0]
 8019dbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019dc0:	0fdb      	lsrs	r3, r3, #31
 8019dc2:	f003 0301 	and.w	r3, r3, #1
 8019dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019dca:	d101      	bne.n	8019dd0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019dcc:	2301      	movs	r3, #1
 8019dce:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8019dd0:	68fb      	ldr	r3, [r7, #12]
 8019dd2:	681b      	ldr	r3, [r3, #0]
 8019dd4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019dd8:	0a1b      	lsrs	r3, r3, #8
 8019dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019dde:	69fa      	ldr	r2, [r7, #28]
 8019de0:	4413      	add	r3, r2
 8019de2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019dec:	69f9      	ldr	r1, [r7, #28]
 8019dee:	fb01 f303 	mul.w	r3, r1, r3
 8019df2:	009b      	lsls	r3, r3, #2
 8019df4:	4413      	add	r3, r2
 8019df6:	627b      	str	r3, [r7, #36]	; 0x24
 8019df8:	e018      	b.n	8019e2c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019dfe:	68ba      	ldr	r2, [r7, #8]
 8019e00:	429a      	cmp	r2, r3
 8019e02:	d309      	bcc.n	8019e18 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019e04:	68fb      	ldr	r3, [r7, #12]
 8019e06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e0a:	f043 0220 	orr.w	r2, r3, #32
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019e14:	2301      	movs	r3, #1
 8019e16:	e0a2      	b.n	8019f5e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8019e18:	68fb      	ldr	r3, [r7, #12]
 8019e1a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8019e1c:	68fb      	ldr	r3, [r7, #12]
 8019e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e20:	68b9      	ldr	r1, [r7, #8]
 8019e22:	fb01 f303 	mul.w	r3, r1, r3
 8019e26:	009b      	lsls	r3, r3, #2
 8019e28:	4413      	add	r3, r2
 8019e2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8019e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8019e34:	687b      	ldr	r3, [r7, #4]
 8019e36:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	685b      	ldr	r3, [r3, #4]
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d107      	bne.n	8019e50 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8019e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	0c9b      	lsrs	r3, r3, #18
 8019e46:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8019e4a:	687b      	ldr	r3, [r7, #4]
 8019e4c:	601a      	str	r2, [r3, #0]
 8019e4e:	e005      	b.n	8019e5c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8019e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8019e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8019e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e6a:	681b      	ldr	r3, [r3, #0]
 8019e6c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8019e70:	687b      	ldr	r3, [r7, #4]
 8019e72:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8019e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e76:	3304      	adds	r3, #4
 8019e78:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8019e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	b29a      	uxth	r2, r3
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8019e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8019e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8019e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8019ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eaa:	681b      	ldr	r3, [r3, #0]
 8019eac:	0e1b      	lsrs	r3, r3, #24
 8019eae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8019eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eb8:	681b      	ldr	r3, [r3, #0]
 8019eba:	0fda      	lsrs	r2, r3, #31
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8019ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ec2:	3304      	adds	r3, #4
 8019ec4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8019ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ec8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019eca:	2300      	movs	r3, #0
 8019ecc:	623b      	str	r3, [r7, #32]
 8019ece:	e00a      	b.n	8019ee6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8019ed0:	697a      	ldr	r2, [r7, #20]
 8019ed2:	6a3b      	ldr	r3, [r7, #32]
 8019ed4:	441a      	add	r2, r3
 8019ed6:	6839      	ldr	r1, [r7, #0]
 8019ed8:	6a3b      	ldr	r3, [r7, #32]
 8019eda:	440b      	add	r3, r1
 8019edc:	7812      	ldrb	r2, [r2, #0]
 8019ede:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019ee0:	6a3b      	ldr	r3, [r7, #32]
 8019ee2:	3301      	adds	r3, #1
 8019ee4:	623b      	str	r3, [r7, #32]
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	68db      	ldr	r3, [r3, #12]
 8019eea:	0c1b      	lsrs	r3, r3, #16
 8019eec:	4a1f      	ldr	r2, [pc, #124]	; (8019f6c <HAL_FDCAN_GetRxMessage+0x2d8>)
 8019eee:	5cd3      	ldrb	r3, [r2, r3]
 8019ef0:	461a      	mov	r2, r3
 8019ef2:	6a3b      	ldr	r3, [r7, #32]
 8019ef4:	4293      	cmp	r3, r2
 8019ef6:	d3eb      	bcc.n	8019ed0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019ef8:	68bb      	ldr	r3, [r7, #8]
 8019efa:	2b40      	cmp	r3, #64	; 0x40
 8019efc:	d105      	bne.n	8019f0a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8019efe:	68fb      	ldr	r3, [r7, #12]
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	69fa      	ldr	r2, [r7, #28]
 8019f04:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8019f08:	e01e      	b.n	8019f48 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	2b41      	cmp	r3, #65	; 0x41
 8019f0e:	d105      	bne.n	8019f1c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	69fa      	ldr	r2, [r7, #28]
 8019f16:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8019f1a:	e015      	b.n	8019f48 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8019f1c:	68bb      	ldr	r3, [r7, #8]
 8019f1e:	2b1f      	cmp	r3, #31
 8019f20:	d808      	bhi.n	8019f34 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8019f22:	68fb      	ldr	r3, [r7, #12]
 8019f24:	681b      	ldr	r3, [r3, #0]
 8019f26:	2101      	movs	r1, #1
 8019f28:	68ba      	ldr	r2, [r7, #8]
 8019f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8019f2e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8019f32:	e009      	b.n	8019f48 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8019f34:	68bb      	ldr	r3, [r7, #8]
 8019f36:	f003 021f 	and.w	r2, r3, #31
 8019f3a:	68fb      	ldr	r3, [r7, #12]
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	2101      	movs	r1, #1
 8019f40:	fa01 f202 	lsl.w	r2, r1, r2
 8019f44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8019f48:	2300      	movs	r3, #0
 8019f4a:	e008      	b.n	8019f5e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019f52:	f043 0208 	orr.w	r2, r3, #8
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019f5c:	2301      	movs	r3, #1
  }
}
 8019f5e:	4618      	mov	r0, r3
 8019f60:	372c      	adds	r7, #44	; 0x2c
 8019f62:	46bd      	mov	sp, r7
 8019f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f68:	4770      	bx	lr
 8019f6a:	bf00      	nop
 8019f6c:	08021110 	.word	0x08021110

08019f70 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8019f70:	b480      	push	{r7}
 8019f72:	b087      	sub	sp, #28
 8019f74:	af00      	add	r7, sp, #0
 8019f76:	60f8      	str	r0, [r7, #12]
 8019f78:	60b9      	str	r1, [r7, #8]
 8019f7a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019f7c:	68fb      	ldr	r3, [r7, #12]
 8019f7e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019f82:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8019f84:	7dfb      	ldrb	r3, [r7, #23]
 8019f86:	2b01      	cmp	r3, #1
 8019f88:	d002      	beq.n	8019f90 <HAL_FDCAN_ActivateNotification+0x20>
 8019f8a:	7dfb      	ldrb	r3, [r7, #23]
 8019f8c:	2b02      	cmp	r3, #2
 8019f8e:	d155      	bne.n	801a03c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	681b      	ldr	r3, [r3, #0]
 8019f94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019f96:	68bb      	ldr	r3, [r7, #8]
 8019f98:	4013      	ands	r3, r2
 8019f9a:	2b00      	cmp	r3, #0
 8019f9c:	d108      	bne.n	8019fb0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	681b      	ldr	r3, [r3, #0]
 8019fa2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	681b      	ldr	r3, [r3, #0]
 8019fa8:	f042 0201 	orr.w	r2, r2, #1
 8019fac:	65da      	str	r2, [r3, #92]	; 0x5c
 8019fae:	e014      	b.n	8019fda <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8019fb6:	68bb      	ldr	r3, [r7, #8]
 8019fb8:	4013      	ands	r3, r2
 8019fba:	68ba      	ldr	r2, [r7, #8]
 8019fbc:	429a      	cmp	r2, r3
 8019fbe:	d108      	bne.n	8019fd2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	f042 0202 	orr.w	r2, r2, #2
 8019fce:	65da      	str	r2, [r3, #92]	; 0x5c
 8019fd0:	e003      	b.n	8019fda <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	2203      	movs	r2, #3
 8019fd8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8019fda:	68bb      	ldr	r3, [r7, #8]
 8019fdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019fe0:	2b00      	cmp	r3, #0
 8019fe2:	d009      	beq.n	8019ff8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8019fec:	68fb      	ldr	r3, [r7, #12]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	687a      	ldr	r2, [r7, #4]
 8019ff2:	430a      	orrs	r2, r1
 8019ff4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8019ff8:	68bb      	ldr	r3, [r7, #8]
 8019ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019ffe:	2b00      	cmp	r3, #0
 801a000:	d009      	beq.n	801a016 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 801a002:	68fb      	ldr	r3, [r7, #12]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	687a      	ldr	r2, [r7, #4]
 801a010:	430a      	orrs	r2, r1
 801a012:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a01c:	68ba      	ldr	r2, [r7, #8]
 801a01e:	4b0f      	ldr	r3, [pc, #60]	; (801a05c <HAL_FDCAN_ActivateNotification+0xec>)
 801a020:	4013      	ands	r3, r2
 801a022:	68fa      	ldr	r2, [r7, #12]
 801a024:	6812      	ldr	r2, [r2, #0]
 801a026:	430b      	orrs	r3, r1
 801a028:	6553      	str	r3, [r2, #84]	; 0x54
 801a02a:	4b0d      	ldr	r3, [pc, #52]	; (801a060 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a02c:	695a      	ldr	r2, [r3, #20]
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	0f9b      	lsrs	r3, r3, #30
 801a032:	490b      	ldr	r1, [pc, #44]	; (801a060 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a034:	4313      	orrs	r3, r2
 801a036:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 801a038:	2300      	movs	r3, #0
 801a03a:	e008      	b.n	801a04e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 801a03c:	68fb      	ldr	r3, [r7, #12]
 801a03e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a042:	f043 0202 	orr.w	r2, r3, #2
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a04c:	2301      	movs	r3, #1
  }
}
 801a04e:	4618      	mov	r0, r3
 801a050:	371c      	adds	r7, #28
 801a052:	46bd      	mov	sp, r7
 801a054:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a058:	4770      	bx	lr
 801a05a:	bf00      	nop
 801a05c:	3fcfffff 	.word	0x3fcfffff
 801a060:	4000a800 	.word	0x4000a800

0801a064 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 801a064:	b580      	push	{r7, lr}
 801a066:	b096      	sub	sp, #88	; 0x58
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 801a06c:	4b9a      	ldr	r3, [pc, #616]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a06e:	691b      	ldr	r3, [r3, #16]
 801a070:	079b      	lsls	r3, r3, #30
 801a072:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 801a074:	4b98      	ldr	r3, [pc, #608]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a076:	695b      	ldr	r3, [r3, #20]
 801a078:	079b      	lsls	r3, r3, #30
 801a07a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a07c:	4013      	ands	r3, r2
 801a07e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 801a080:	687b      	ldr	r3, [r7, #4]
 801a082:	681b      	ldr	r3, [r3, #0]
 801a084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a086:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801a08a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a092:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a094:	4013      	ands	r3, r2
 801a096:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	681b      	ldr	r3, [r3, #0]
 801a09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a09e:	f003 030f 	and.w	r3, r3, #15
 801a0a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a0ac:	4013      	ands	r3, r2
 801a0ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a0ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a0c4:	4013      	ands	r3, r2
 801a0c6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0ce:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 801a0d2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 801a0d4:	687b      	ldr	r3, [r7, #4]
 801a0d6:	681b      	ldr	r3, [r3, #0]
 801a0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a0dc:	4013      	ands	r3, r2
 801a0de:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	681b      	ldr	r3, [r3, #0]
 801a0e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0e6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 801a0ea:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a0f4:	4013      	ands	r3, r2
 801a0f6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a0fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a106:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 801a108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a10a:	0a1b      	lsrs	r3, r3, #8
 801a10c:	f003 0301 	and.w	r3, r3, #1
 801a110:	2b00      	cmp	r3, #0
 801a112:	d010      	beq.n	801a136 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 801a114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a116:	0a1b      	lsrs	r3, r3, #8
 801a118:	f003 0301 	and.w	r3, r3, #1
 801a11c:	2b00      	cmp	r3, #0
 801a11e:	d00a      	beq.n	801a136 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 801a120:	687b      	ldr	r3, [r7, #4]
 801a122:	681b      	ldr	r3, [r3, #0]
 801a124:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a128:	651a      	str	r2, [r3, #80]	; 0x50
 801a12a:	4b6b      	ldr	r3, [pc, #428]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a12c:	2200      	movs	r2, #0
 801a12e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 801a130:	6878      	ldr	r0, [r7, #4]
 801a132:	f000 fa54 	bl	801a5de <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 801a136:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a138:	0a9b      	lsrs	r3, r3, #10
 801a13a:	f003 0301 	and.w	r3, r3, #1
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d01d      	beq.n	801a17e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 801a142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a144:	0a9b      	lsrs	r3, r3, #10
 801a146:	f003 0301 	and.w	r3, r3, #1
 801a14a:	2b00      	cmp	r3, #0
 801a14c:	d017      	beq.n	801a17e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 801a14e:	687b      	ldr	r3, [r7, #4]
 801a150:	681b      	ldr	r3, [r3, #0]
 801a152:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a156:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a162:	4013      	ands	r3, r2
 801a164:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	681b      	ldr	r3, [r3, #0]
 801a16a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a16e:	651a      	str	r2, [r3, #80]	; 0x50
 801a170:	4b59      	ldr	r3, [pc, #356]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a172:	2200      	movs	r2, #0
 801a174:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 801a176:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a178:	6878      	ldr	r0, [r7, #4]
 801a17a:	f000 fa07 	bl	801a58c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 801a17e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a180:	2b00      	cmp	r3, #0
 801a182:	d00d      	beq.n	801a1a0 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 801a184:	687b      	ldr	r3, [r7, #4]
 801a186:	681a      	ldr	r2, [r3, #0]
 801a188:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a18a:	4b54      	ldr	r3, [pc, #336]	; (801a2dc <HAL_FDCAN_IRQHandler+0x278>)
 801a18c:	400b      	ands	r3, r1
 801a18e:	6513      	str	r3, [r2, #80]	; 0x50
 801a190:	4a51      	ldr	r2, [pc, #324]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a194:	0f9b      	lsrs	r3, r3, #30
 801a196:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 801a198:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a19a:	6878      	ldr	r0, [r7, #4]
 801a19c:	f000 f9c0 	bl	801a520 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 801a1a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d00d      	beq.n	801a1c2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681a      	ldr	r2, [r3, #0]
 801a1aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a1ac:	4b4b      	ldr	r3, [pc, #300]	; (801a2dc <HAL_FDCAN_IRQHandler+0x278>)
 801a1ae:	400b      	ands	r3, r1
 801a1b0:	6513      	str	r3, [r2, #80]	; 0x50
 801a1b2:	4a49      	ldr	r2, [pc, #292]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a1b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a1b6:	0f9b      	lsrs	r3, r3, #30
 801a1b8:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 801a1ba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a1bc:	6878      	ldr	r0, [r7, #4]
 801a1be:	f000 f9ba 	bl	801a536 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 801a1c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d00d      	beq.n	801a1e4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681a      	ldr	r2, [r3, #0]
 801a1cc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a1ce:	4b43      	ldr	r3, [pc, #268]	; (801a2dc <HAL_FDCAN_IRQHandler+0x278>)
 801a1d0:	400b      	ands	r3, r1
 801a1d2:	6513      	str	r3, [r2, #80]	; 0x50
 801a1d4:	4a40      	ldr	r2, [pc, #256]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a1d8:	0f9b      	lsrs	r3, r3, #30
 801a1da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 801a1dc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a1de:	6878      	ldr	r0, [r7, #4]
 801a1e0:	f7f4 f82a 	bl	800e238 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 801a1e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1e6:	2b00      	cmp	r3, #0
 801a1e8:	d00d      	beq.n	801a206 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	681a      	ldr	r2, [r3, #0]
 801a1ee:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a1f0:	4b3a      	ldr	r3, [pc, #232]	; (801a2dc <HAL_FDCAN_IRQHandler+0x278>)
 801a1f2:	400b      	ands	r3, r1
 801a1f4:	6513      	str	r3, [r2, #80]	; 0x50
 801a1f6:	4a38      	ldr	r2, [pc, #224]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a1f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a1fa:	0f9b      	lsrs	r3, r3, #30
 801a1fc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 801a1fe:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a200:	6878      	ldr	r0, [r7, #4]
 801a202:	f000 f9a3 	bl	801a54c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 801a206:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a208:	0adb      	lsrs	r3, r3, #11
 801a20a:	f003 0301 	and.w	r3, r3, #1
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d010      	beq.n	801a234 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 801a212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a214:	0adb      	lsrs	r3, r3, #11
 801a216:	f003 0301 	and.w	r3, r3, #1
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d00a      	beq.n	801a234 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a226:	651a      	str	r2, [r3, #80]	; 0x50
 801a228:	4b2b      	ldr	r3, [pc, #172]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a22a:	2200      	movs	r2, #0
 801a22c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 801a22e:	6878      	ldr	r0, [r7, #4]
 801a230:	f000 f997 	bl	801a562 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 801a234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a236:	0a5b      	lsrs	r3, r3, #9
 801a238:	f003 0301 	and.w	r3, r3, #1
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d01d      	beq.n	801a27c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 801a240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a242:	0a5b      	lsrs	r3, r3, #9
 801a244:	f003 0301 	and.w	r3, r3, #1
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d017      	beq.n	801a27c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a254:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681b      	ldr	r3, [r3, #0]
 801a25a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a260:	4013      	ands	r3, r2
 801a262:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a26c:	651a      	str	r2, [r3, #80]	; 0x50
 801a26e:	4b1a      	ldr	r3, [pc, #104]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a270:	2200      	movs	r2, #0
 801a272:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 801a274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a276:	6878      	ldr	r0, [r7, #4]
 801a278:	f000 f97d 	bl	801a576 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a27c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a27e:	0cdb      	lsrs	r3, r3, #19
 801a280:	f003 0301 	and.w	r3, r3, #1
 801a284:	2b00      	cmp	r3, #0
 801a286:	d010      	beq.n	801a2aa <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a28a:	0cdb      	lsrs	r3, r3, #19
 801a28c:	f003 0301 	and.w	r3, r3, #1
 801a290:	2b00      	cmp	r3, #0
 801a292:	d00a      	beq.n	801a2aa <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a29c:	651a      	str	r2, [r3, #80]	; 0x50
 801a29e:	4b0e      	ldr	r3, [pc, #56]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a2a0:	2200      	movs	r2, #0
 801a2a2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 801a2a4:	6878      	ldr	r0, [r7, #4]
 801a2a6:	f000 f97c 	bl	801a5a2 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 801a2aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2ac:	0c1b      	lsrs	r3, r3, #16
 801a2ae:	f003 0301 	and.w	r3, r3, #1
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d016      	beq.n	801a2e4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 801a2b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2b8:	0c1b      	lsrs	r3, r3, #16
 801a2ba:	f003 0301 	and.w	r3, r3, #1
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d010      	beq.n	801a2e4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	681b      	ldr	r3, [r3, #0]
 801a2c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a2ca:	651a      	str	r2, [r3, #80]	; 0x50
 801a2cc:	4b02      	ldr	r3, [pc, #8]	; (801a2d8 <HAL_FDCAN_IRQHandler+0x274>)
 801a2ce:	2200      	movs	r2, #0
 801a2d0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	e004      	b.n	801a2e0 <HAL_FDCAN_IRQHandler+0x27c>
 801a2d6:	bf00      	nop
 801a2d8:	4000a800 	.word	0x4000a800
 801a2dc:	3fcfffff 	.word	0x3fcfffff
 801a2e0:	f000 f969 	bl	801a5b6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 801a2e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2e6:	0c9b      	lsrs	r3, r3, #18
 801a2e8:	f003 0301 	and.w	r3, r3, #1
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d010      	beq.n	801a312 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 801a2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2f2:	0c9b      	lsrs	r3, r3, #18
 801a2f4:	f003 0301 	and.w	r3, r3, #1
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d00a      	beq.n	801a312 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 801a2fc:	687b      	ldr	r3, [r7, #4]
 801a2fe:	681b      	ldr	r3, [r3, #0]
 801a300:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a304:	651a      	str	r2, [r3, #80]	; 0x50
 801a306:	4b83      	ldr	r3, [pc, #524]	; (801a514 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a308:	2200      	movs	r2, #0
 801a30a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 801a30c:	6878      	ldr	r0, [r7, #4]
 801a30e:	f000 f95c 	bl	801a5ca <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 801a312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a314:	0c5b      	lsrs	r3, r3, #17
 801a316:	f003 0301 	and.w	r3, r3, #1
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d015      	beq.n	801a34a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 801a31e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a320:	0c5b      	lsrs	r3, r3, #17
 801a322:	f003 0301 	and.w	r3, r3, #1
 801a326:	2b00      	cmp	r3, #0
 801a328:	d00f      	beq.n	801a34a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	681b      	ldr	r3, [r3, #0]
 801a32e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801a332:	651a      	str	r2, [r3, #80]	; 0x50
 801a334:	4b77      	ldr	r3, [pc, #476]	; (801a514 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a336:	2200      	movs	r2, #0
 801a338:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a340:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 801a34a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a34c:	2b00      	cmp	r3, #0
 801a34e:	d00d      	beq.n	801a36c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 801a350:	687b      	ldr	r3, [r7, #4]
 801a352:	681a      	ldr	r2, [r3, #0]
 801a354:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a356:	4b70      	ldr	r3, [pc, #448]	; (801a518 <HAL_FDCAN_IRQHandler+0x4b4>)
 801a358:	400b      	ands	r3, r1
 801a35a:	6513      	str	r3, [r2, #80]	; 0x50
 801a35c:	4a6d      	ldr	r2, [pc, #436]	; (801a514 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a35e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a360:	0f9b      	lsrs	r3, r3, #30
 801a362:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 801a364:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a366:	6878      	ldr	r0, [r7, #4]
 801a368:	f000 f94d 	bl	801a606 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 801a36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d011      	beq.n	801a396 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 801a372:	687b      	ldr	r3, [r7, #4]
 801a374:	681a      	ldr	r2, [r3, #0]
 801a376:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a378:	4b67      	ldr	r3, [pc, #412]	; (801a518 <HAL_FDCAN_IRQHandler+0x4b4>)
 801a37a:	400b      	ands	r3, r1
 801a37c:	6513      	str	r3, [r2, #80]	; 0x50
 801a37e:	4a65      	ldr	r2, [pc, #404]	; (801a514 <HAL_FDCAN_IRQHandler+0x4b0>)
 801a380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a382:	0f9b      	lsrs	r3, r3, #30
 801a384:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 801a386:	687b      	ldr	r3, [r7, #4]
 801a388:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a38e:	431a      	orrs	r2, r3
 801a390:	687b      	ldr	r3, [r7, #4]
 801a392:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 801a396:	687b      	ldr	r3, [r7, #4]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	4a60      	ldr	r2, [pc, #384]	; (801a51c <HAL_FDCAN_IRQHandler+0x4b8>)
 801a39c:	4293      	cmp	r3, r2
 801a39e:	f040 80ac 	bne.w	801a4fa <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	685b      	ldr	r3, [r3, #4]
 801a3a6:	689b      	ldr	r3, [r3, #8]
 801a3a8:	f003 0303 	and.w	r3, r3, #3
 801a3ac:	2b00      	cmp	r3, #0
 801a3ae:	f000 80a4 	beq.w	801a4fa <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	685b      	ldr	r3, [r3, #4]
 801a3b6:	6a1b      	ldr	r3, [r3, #32]
 801a3b8:	f003 030f 	and.w	r3, r3, #15
 801a3bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	685b      	ldr	r3, [r3, #4]
 801a3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a3c6:	4013      	ands	r3, r2
 801a3c8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	685b      	ldr	r3, [r3, #4]
 801a3ce:	6a1b      	ldr	r3, [r3, #32]
 801a3d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a3d4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 801a3d6:	687b      	ldr	r3, [r7, #4]
 801a3d8:	685b      	ldr	r3, [r3, #4]
 801a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a3de:	4013      	ands	r3, r2
 801a3e0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 801a3e2:	687b      	ldr	r3, [r7, #4]
 801a3e4:	685b      	ldr	r3, [r3, #4]
 801a3e6:	6a1b      	ldr	r3, [r3, #32]
 801a3e8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801a3ec:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 801a3ee:	687b      	ldr	r3, [r7, #4]
 801a3f0:	685b      	ldr	r3, [r3, #4]
 801a3f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a3f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a3f6:	4013      	ands	r3, r2
 801a3f8:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 801a3fa:	687b      	ldr	r3, [r7, #4]
 801a3fc:	685b      	ldr	r3, [r3, #4]
 801a3fe:	6a1b      	ldr	r3, [r3, #32]
 801a400:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 801a404:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	685b      	ldr	r3, [r3, #4]
 801a40a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a40c:	6a3a      	ldr	r2, [r7, #32]
 801a40e:	4013      	ands	r3, r2
 801a410:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 801a412:	687b      	ldr	r3, [r7, #4]
 801a414:	685b      	ldr	r3, [r3, #4]
 801a416:	6a1b      	ldr	r3, [r3, #32]
 801a418:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 801a41c:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	685b      	ldr	r3, [r3, #4]
 801a422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a424:	69fa      	ldr	r2, [r7, #28]
 801a426:	4013      	ands	r3, r2
 801a428:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	685b      	ldr	r3, [r3, #4]
 801a42e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a430:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	685b      	ldr	r3, [r3, #4]
 801a436:	6a1b      	ldr	r3, [r3, #32]
 801a438:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 801a43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a43c:	2b00      	cmp	r3, #0
 801a43e:	d007      	beq.n	801a450 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 801a440:	687b      	ldr	r3, [r7, #4]
 801a442:	685b      	ldr	r3, [r3, #4]
 801a444:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a446:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 801a448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a44a:	6878      	ldr	r0, [r7, #4]
 801a44c:	f000 f8e6 	bl	801a61c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 801a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a452:	2b00      	cmp	r3, #0
 801a454:	d007      	beq.n	801a466 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	685b      	ldr	r3, [r3, #4]
 801a45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a45c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 801a45e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a460:	6878      	ldr	r0, [r7, #4]
 801a462:	f000 f8e6 	bl	801a632 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 801a466:	69bb      	ldr	r3, [r7, #24]
 801a468:	099b      	lsrs	r3, r3, #6
 801a46a:	f003 0301 	and.w	r3, r3, #1
 801a46e:	2b00      	cmp	r3, #0
 801a470:	d01a      	beq.n	801a4a8 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 801a472:	697b      	ldr	r3, [r7, #20]
 801a474:	099b      	lsrs	r3, r3, #6
 801a476:	f003 0301 	and.w	r3, r3, #1
 801a47a:	2b00      	cmp	r3, #0
 801a47c:	d014      	beq.n	801a4a8 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	685b      	ldr	r3, [r3, #4]
 801a482:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a484:	0c1b      	lsrs	r3, r3, #16
 801a486:	b29b      	uxth	r3, r3
 801a488:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a490:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a494:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	685b      	ldr	r3, [r3, #4]
 801a49a:	2240      	movs	r2, #64	; 0x40
 801a49c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 801a49e:	68fa      	ldr	r2, [r7, #12]
 801a4a0:	6939      	ldr	r1, [r7, #16]
 801a4a2:	6878      	ldr	r0, [r7, #4]
 801a4a4:	f000 f8d0 	bl	801a648 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 801a4a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4aa:	2b00      	cmp	r3, #0
 801a4ac:	d007      	beq.n	801a4be <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	685b      	ldr	r3, [r3, #4]
 801a4b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a4b4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 801a4b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a4b8:	6878      	ldr	r0, [r7, #4]
 801a4ba:	f000 f8d1 	bl	801a660 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 801a4be:	6a3b      	ldr	r3, [r7, #32]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d00b      	beq.n	801a4dc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	685b      	ldr	r3, [r3, #4]
 801a4c8:	6a3a      	ldr	r2, [r7, #32]
 801a4ca:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 801a4cc:	687b      	ldr	r3, [r7, #4]
 801a4ce:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a4d2:	6a3b      	ldr	r3, [r7, #32]
 801a4d4:	431a      	orrs	r2, r3
 801a4d6:	687b      	ldr	r3, [r7, #4]
 801a4d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 801a4dc:	69fb      	ldr	r3, [r7, #28]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d00b      	beq.n	801a4fa <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	685b      	ldr	r3, [r3, #4]
 801a4e6:	69fa      	ldr	r2, [r7, #28]
 801a4e8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a4f0:	69fb      	ldr	r3, [r7, #28]
 801a4f2:	431a      	orrs	r2, r3
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 801a4fa:	687b      	ldr	r3, [r7, #4]
 801a4fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a500:	2b00      	cmp	r3, #0
 801a502:	d002      	beq.n	801a50a <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 801a504:	6878      	ldr	r0, [r7, #4]
 801a506:	f000 f874 	bl	801a5f2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 801a50a:	bf00      	nop
 801a50c:	3758      	adds	r7, #88	; 0x58
 801a50e:	46bd      	mov	sp, r7
 801a510:	bd80      	pop	{r7, pc}
 801a512:	bf00      	nop
 801a514:	4000a800 	.word	0x4000a800
 801a518:	3fcfffff 	.word	0x3fcfffff
 801a51c:	4000a000 	.word	0x4000a000

0801a520 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 801a520:	b480      	push	{r7}
 801a522:	b083      	sub	sp, #12
 801a524:	af00      	add	r7, sp, #0
 801a526:	6078      	str	r0, [r7, #4]
 801a528:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 801a52a:	bf00      	nop
 801a52c:	370c      	adds	r7, #12
 801a52e:	46bd      	mov	sp, r7
 801a530:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a534:	4770      	bx	lr

0801a536 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 801a536:	b480      	push	{r7}
 801a538:	b083      	sub	sp, #12
 801a53a:	af00      	add	r7, sp, #0
 801a53c:	6078      	str	r0, [r7, #4]
 801a53e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 801a540:	bf00      	nop
 801a542:	370c      	adds	r7, #12
 801a544:	46bd      	mov	sp, r7
 801a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a54a:	4770      	bx	lr

0801a54c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 801a54c:	b480      	push	{r7}
 801a54e:	b083      	sub	sp, #12
 801a550:	af00      	add	r7, sp, #0
 801a552:	6078      	str	r0, [r7, #4]
 801a554:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 801a556:	bf00      	nop
 801a558:	370c      	adds	r7, #12
 801a55a:	46bd      	mov	sp, r7
 801a55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a560:	4770      	bx	lr

0801a562 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a562:	b480      	push	{r7}
 801a564:	b083      	sub	sp, #12
 801a566:	af00      	add	r7, sp, #0
 801a568:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 801a56a:	bf00      	nop
 801a56c:	370c      	adds	r7, #12
 801a56e:	46bd      	mov	sp, r7
 801a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a574:	4770      	bx	lr

0801a576 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a576:	b480      	push	{r7}
 801a578:	b083      	sub	sp, #12
 801a57a:	af00      	add	r7, sp, #0
 801a57c:	6078      	str	r0, [r7, #4]
 801a57e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 801a580:	bf00      	nop
 801a582:	370c      	adds	r7, #12
 801a584:	46bd      	mov	sp, r7
 801a586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58a:	4770      	bx	lr

0801a58c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a58c:	b480      	push	{r7}
 801a58e:	b083      	sub	sp, #12
 801a590:	af00      	add	r7, sp, #0
 801a592:	6078      	str	r0, [r7, #4]
 801a594:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 801a596:	bf00      	nop
 801a598:	370c      	adds	r7, #12
 801a59a:	46bd      	mov	sp, r7
 801a59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5a0:	4770      	bx	lr

0801a5a2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a5a2:	b480      	push	{r7}
 801a5a4:	b083      	sub	sp, #12
 801a5a6:	af00      	add	r7, sp, #0
 801a5a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 801a5aa:	bf00      	nop
 801a5ac:	370c      	adds	r7, #12
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5b4:	4770      	bx	lr

0801a5b6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a5b6:	b480      	push	{r7}
 801a5b8:	b083      	sub	sp, #12
 801a5ba:	af00      	add	r7, sp, #0
 801a5bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 801a5be:	bf00      	nop
 801a5c0:	370c      	adds	r7, #12
 801a5c2:	46bd      	mov	sp, r7
 801a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c8:	4770      	bx	lr

0801a5ca <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a5ca:	b480      	push	{r7}
 801a5cc:	b083      	sub	sp, #12
 801a5ce:	af00      	add	r7, sp, #0
 801a5d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 801a5d2:	bf00      	nop
 801a5d4:	370c      	adds	r7, #12
 801a5d6:	46bd      	mov	sp, r7
 801a5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5dc:	4770      	bx	lr

0801a5de <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a5de:	b480      	push	{r7}
 801a5e0:	b083      	sub	sp, #12
 801a5e2:	af00      	add	r7, sp, #0
 801a5e4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 801a5e6:	bf00      	nop
 801a5e8:	370c      	adds	r7, #12
 801a5ea:	46bd      	mov	sp, r7
 801a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f0:	4770      	bx	lr

0801a5f2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a5f2:	b480      	push	{r7}
 801a5f4:	b083      	sub	sp, #12
 801a5f6:	af00      	add	r7, sp, #0
 801a5f8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 801a5fa:	bf00      	nop
 801a5fc:	370c      	adds	r7, #12
 801a5fe:	46bd      	mov	sp, r7
 801a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a604:	4770      	bx	lr

0801a606 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 801a606:	b480      	push	{r7}
 801a608:	b083      	sub	sp, #12
 801a60a:	af00      	add	r7, sp, #0
 801a60c:	6078      	str	r0, [r7, #4]
 801a60e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 801a610:	bf00      	nop
 801a612:	370c      	adds	r7, #12
 801a614:	46bd      	mov	sp, r7
 801a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a61a:	4770      	bx	lr

0801a61c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 801a61c:	b480      	push	{r7}
 801a61e:	b083      	sub	sp, #12
 801a620:	af00      	add	r7, sp, #0
 801a622:	6078      	str	r0, [r7, #4]
 801a624:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 801a626:	bf00      	nop
 801a628:	370c      	adds	r7, #12
 801a62a:	46bd      	mov	sp, r7
 801a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a630:	4770      	bx	lr

0801a632 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 801a632:	b480      	push	{r7}
 801a634:	b083      	sub	sp, #12
 801a636:	af00      	add	r7, sp, #0
 801a638:	6078      	str	r0, [r7, #4]
 801a63a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 801a63c:	bf00      	nop
 801a63e:	370c      	adds	r7, #12
 801a640:	46bd      	mov	sp, r7
 801a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a646:	4770      	bx	lr

0801a648 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 801a648:	b480      	push	{r7}
 801a64a:	b085      	sub	sp, #20
 801a64c:	af00      	add	r7, sp, #0
 801a64e:	60f8      	str	r0, [r7, #12]
 801a650:	60b9      	str	r1, [r7, #8]
 801a652:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 801a654:	bf00      	nop
 801a656:	3714      	adds	r7, #20
 801a658:	46bd      	mov	sp, r7
 801a65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a65e:	4770      	bx	lr

0801a660 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 801a660:	b480      	push	{r7}
 801a662:	b083      	sub	sp, #12
 801a664:	af00      	add	r7, sp, #0
 801a666:	6078      	str	r0, [r7, #4]
 801a668:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 801a66a:	bf00      	nop
 801a66c:	370c      	adds	r7, #12
 801a66e:	46bd      	mov	sp, r7
 801a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a674:	4770      	bx	lr
	...

0801a678 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 801a678:	b480      	push	{r7}
 801a67a:	b085      	sub	sp, #20
 801a67c:	af00      	add	r7, sp, #0
 801a67e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a684:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 801a686:	687b      	ldr	r3, [r7, #4]
 801a688:	681b      	ldr	r3, [r3, #0]
 801a68a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a68e:	4ba7      	ldr	r3, [pc, #668]	; (801a92c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a690:	4013      	ands	r3, r2
 801a692:	68ba      	ldr	r2, [r7, #8]
 801a694:	0091      	lsls	r1, r2, #2
 801a696:	687a      	ldr	r2, [r7, #4]
 801a698:	6812      	ldr	r2, [r2, #0]
 801a69a:	430b      	orrs	r3, r1
 801a69c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a6a8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 801a6ac:	687b      	ldr	r3, [r7, #4]
 801a6ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6b0:	041a      	lsls	r2, r3, #16
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	430a      	orrs	r2, r1
 801a6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a6c0:	68ba      	ldr	r2, [r7, #8]
 801a6c2:	4413      	add	r3, r2
 801a6c4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a6ce:	4b97      	ldr	r3, [pc, #604]	; (801a92c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a6d0:	4013      	ands	r3, r2
 801a6d2:	68ba      	ldr	r2, [r7, #8]
 801a6d4:	0091      	lsls	r1, r2, #2
 801a6d6:	687a      	ldr	r2, [r7, #4]
 801a6d8:	6812      	ldr	r2, [r2, #0]
 801a6da:	430b      	orrs	r3, r1
 801a6dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a6e8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a6f0:	041a      	lsls	r2, r3, #16
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	430a      	orrs	r2, r1
 801a6f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a700:	005b      	lsls	r3, r3, #1
 801a702:	68ba      	ldr	r2, [r7, #8]
 801a704:	4413      	add	r3, r2
 801a706:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 801a708:	687b      	ldr	r3, [r7, #4]
 801a70a:	681b      	ldr	r3, [r3, #0]
 801a70c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801a710:	4b86      	ldr	r3, [pc, #536]	; (801a92c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a712:	4013      	ands	r3, r2
 801a714:	68ba      	ldr	r2, [r7, #8]
 801a716:	0091      	lsls	r1, r2, #2
 801a718:	687a      	ldr	r2, [r7, #4]
 801a71a:	6812      	ldr	r2, [r2, #0]
 801a71c:	430b      	orrs	r3, r1
 801a71e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a72a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a732:	041a      	lsls	r2, r3, #16
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	681b      	ldr	r3, [r3, #0]
 801a738:	430a      	orrs	r2, r1
 801a73a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801a746:	fb02 f303 	mul.w	r3, r2, r3
 801a74a:	68ba      	ldr	r2, [r7, #8]
 801a74c:	4413      	add	r3, r2
 801a74e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 801a750:	687b      	ldr	r3, [r7, #4]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801a758:	4b74      	ldr	r3, [pc, #464]	; (801a92c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a75a:	4013      	ands	r3, r2
 801a75c:	68ba      	ldr	r2, [r7, #8]
 801a75e:	0091      	lsls	r1, r2, #2
 801a760:	687a      	ldr	r2, [r7, #4]
 801a762:	6812      	ldr	r2, [r2, #0]
 801a764:	430b      	orrs	r3, r1
 801a766:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a772:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a776:	687b      	ldr	r3, [r7, #4]
 801a778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a77a:	041a      	lsls	r2, r3, #16
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	681b      	ldr	r3, [r3, #0]
 801a780:	430a      	orrs	r2, r1
 801a782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a78a:	687a      	ldr	r2, [r7, #4]
 801a78c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801a78e:	fb02 f303 	mul.w	r3, r2, r3
 801a792:	68ba      	ldr	r2, [r7, #8]
 801a794:	4413      	add	r3, r2
 801a796:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 801a798:	687b      	ldr	r3, [r7, #4]
 801a79a:	681b      	ldr	r3, [r3, #0]
 801a79c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a7a0:	4b62      	ldr	r3, [pc, #392]	; (801a92c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a7a2:	4013      	ands	r3, r2
 801a7a4:	68ba      	ldr	r2, [r7, #8]
 801a7a6:	0091      	lsls	r1, r2, #2
 801a7a8:	687a      	ldr	r2, [r7, #4]
 801a7aa:	6812      	ldr	r2, [r2, #0]
 801a7ac:	430b      	orrs	r3, r1
 801a7ae:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a7b6:	687a      	ldr	r2, [r7, #4]
 801a7b8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801a7ba:	fb02 f303 	mul.w	r3, r2, r3
 801a7be:	68ba      	ldr	r2, [r7, #8]
 801a7c0:	4413      	add	r3, r2
 801a7c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801a7cc:	4b57      	ldr	r3, [pc, #348]	; (801a92c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a7ce:	4013      	ands	r3, r2
 801a7d0:	68ba      	ldr	r2, [r7, #8]
 801a7d2:	0091      	lsls	r1, r2, #2
 801a7d4:	687a      	ldr	r2, [r7, #4]
 801a7d6:	6812      	ldr	r2, [r2, #0]
 801a7d8:	430b      	orrs	r3, r1
 801a7da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801a7e6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a7ea:	687b      	ldr	r3, [r7, #4]
 801a7ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a7ee:	041a      	lsls	r2, r3, #16
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	430a      	orrs	r2, r1
 801a7f6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 801a7fa:	687b      	ldr	r3, [r7, #4]
 801a7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a7fe:	005b      	lsls	r3, r3, #1
 801a800:	68ba      	ldr	r2, [r7, #8]
 801a802:	4413      	add	r3, r2
 801a804:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801a80e:	4b47      	ldr	r3, [pc, #284]	; (801a92c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a810:	4013      	ands	r3, r2
 801a812:	68ba      	ldr	r2, [r7, #8]
 801a814:	0091      	lsls	r1, r2, #2
 801a816:	687a      	ldr	r2, [r7, #4]
 801a818:	6812      	ldr	r2, [r2, #0]
 801a81a:	430b      	orrs	r3, r1
 801a81c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	681b      	ldr	r3, [r3, #0]
 801a824:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a828:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a830:	041a      	lsls	r2, r3, #16
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	430a      	orrs	r2, r1
 801a838:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a844:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a84c:	061a      	lsls	r2, r3, #24
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	681b      	ldr	r3, [r3, #0]
 801a852:	430a      	orrs	r2, r1
 801a854:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a85c:	4b34      	ldr	r3, [pc, #208]	; (801a930 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 801a85e:	4413      	add	r3, r2
 801a860:	009a      	lsls	r2, r3, #2
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 801a866:	687b      	ldr	r3, [r7, #4]
 801a868:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a86a:	687b      	ldr	r3, [r7, #4]
 801a86c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a86e:	009b      	lsls	r3, r3, #2
 801a870:	441a      	add	r2, r3
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a87e:	00db      	lsls	r3, r3, #3
 801a880:	441a      	add	r2, r3
 801a882:	687b      	ldr	r3, [r7, #4]
 801a884:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 801a886:	687b      	ldr	r3, [r7, #4]
 801a888:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a88e:	6879      	ldr	r1, [r7, #4]
 801a890:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801a892:	fb01 f303 	mul.w	r3, r1, r3
 801a896:	009b      	lsls	r3, r3, #2
 801a898:	441a      	add	r2, r3
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a8a6:	6879      	ldr	r1, [r7, #4]
 801a8a8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 801a8aa:	fb01 f303 	mul.w	r3, r1, r3
 801a8ae:	009b      	lsls	r3, r3, #2
 801a8b0:	441a      	add	r2, r3
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a8ba:	687b      	ldr	r3, [r7, #4]
 801a8bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8be:	6879      	ldr	r1, [r7, #4]
 801a8c0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801a8c2:	fb01 f303 	mul.w	r3, r1, r3
 801a8c6:	009b      	lsls	r3, r3, #2
 801a8c8:	441a      	add	r2, r3
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801a8d6:	687b      	ldr	r3, [r7, #4]
 801a8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a8da:	00db      	lsls	r3, r3, #3
 801a8dc:	441a      	add	r2, r3
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8ee:	6879      	ldr	r1, [r7, #4]
 801a8f0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801a8f2:	fb01 f303 	mul.w	r3, r1, r3
 801a8f6:	009b      	lsls	r3, r3, #2
 801a8f8:	441a      	add	r2, r3
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 801a900:	687b      	ldr	r3, [r7, #4]
 801a902:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a906:	687b      	ldr	r3, [r7, #4]
 801a908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a90a:	6879      	ldr	r1, [r7, #4]
 801a90c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801a90e:	fb01 f303 	mul.w	r3, r1, r3
 801a912:	009b      	lsls	r3, r3, #2
 801a914:	441a      	add	r2, r3
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 801a91c:	687b      	ldr	r3, [r7, #4]
 801a91e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a922:	4a04      	ldr	r2, [pc, #16]	; (801a934 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 801a924:	4293      	cmp	r3, r2
 801a926:	d915      	bls.n	801a954 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 801a928:	e006      	b.n	801a938 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 801a92a:	bf00      	nop
 801a92c:	ffff0003 	.word	0xffff0003
 801a930:	10002b00 	.word	0x10002b00
 801a934:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a93e:	f043 0220 	orr.w	r2, r3, #32
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	2203      	movs	r2, #3
 801a94c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 801a950:	2301      	movs	r3, #1
 801a952:	e010      	b.n	801a976 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801a954:	687b      	ldr	r3, [r7, #4]
 801a956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a958:	60fb      	str	r3, [r7, #12]
 801a95a:	e005      	b.n	801a968 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 801a95c:	68fb      	ldr	r3, [r7, #12]
 801a95e:	2200      	movs	r2, #0
 801a960:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	3304      	adds	r3, #4
 801a966:	60fb      	str	r3, [r7, #12]
 801a968:	687b      	ldr	r3, [r7, #4]
 801a96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a96e:	68fa      	ldr	r2, [r7, #12]
 801a970:	429a      	cmp	r2, r3
 801a972:	d3f3      	bcc.n	801a95c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 801a974:	2300      	movs	r3, #0
}
 801a976:	4618      	mov	r0, r3
 801a978:	3714      	adds	r7, #20
 801a97a:	46bd      	mov	sp, r7
 801a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a980:	4770      	bx	lr
 801a982:	bf00      	nop

0801a984 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 801a984:	b480      	push	{r7}
 801a986:	b089      	sub	sp, #36	; 0x24
 801a988:	af00      	add	r7, sp, #0
 801a98a:	60f8      	str	r0, [r7, #12]
 801a98c:	60b9      	str	r1, [r7, #8]
 801a98e:	607a      	str	r2, [r7, #4]
 801a990:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 801a992:	68bb      	ldr	r3, [r7, #8]
 801a994:	685b      	ldr	r3, [r3, #4]
 801a996:	2b00      	cmp	r3, #0
 801a998:	d10a      	bne.n	801a9b0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801a99a:	68bb      	ldr	r3, [r7, #8]
 801a99c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 801a99e:	68bb      	ldr	r3, [r7, #8]
 801a9a0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 801a9a2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 801a9a4:	68bb      	ldr	r3, [r7, #8]
 801a9a6:	681b      	ldr	r3, [r3, #0]
 801a9a8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801a9aa:	4313      	orrs	r3, r2
 801a9ac:	61fb      	str	r3, [r7, #28]
 801a9ae:	e00a      	b.n	801a9c6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801a9b0:	68bb      	ldr	r3, [r7, #8]
 801a9b2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 801a9b4:	68bb      	ldr	r3, [r7, #8]
 801a9b6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 801a9b8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 801a9ba:	68bb      	ldr	r3, [r7, #8]
 801a9bc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 801a9be:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801a9c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801a9c4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801a9c6:	68bb      	ldr	r3, [r7, #8]
 801a9c8:	6a1b      	ldr	r3, [r3, #32]
 801a9ca:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 801a9cc:	68bb      	ldr	r3, [r7, #8]
 801a9ce:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801a9d0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 801a9d2:	68bb      	ldr	r3, [r7, #8]
 801a9d4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 801a9d6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 801a9d8:	68bb      	ldr	r3, [r7, #8]
 801a9da:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 801a9dc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 801a9de:	68bb      	ldr	r3, [r7, #8]
 801a9e0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801a9e2:	4313      	orrs	r3, r2
 801a9e4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a9ec:	68fb      	ldr	r3, [r7, #12]
 801a9ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801a9f0:	6839      	ldr	r1, [r7, #0]
 801a9f2:	fb01 f303 	mul.w	r3, r1, r3
 801a9f6:	009b      	lsls	r3, r3, #2
 801a9f8:	4413      	add	r3, r2
 801a9fa:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 801a9fc:	69bb      	ldr	r3, [r7, #24]
 801a9fe:	69fa      	ldr	r2, [r7, #28]
 801aa00:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801aa02:	69bb      	ldr	r3, [r7, #24]
 801aa04:	3304      	adds	r3, #4
 801aa06:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 801aa08:	69bb      	ldr	r3, [r7, #24]
 801aa0a:	693a      	ldr	r2, [r7, #16]
 801aa0c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801aa0e:	69bb      	ldr	r3, [r7, #24]
 801aa10:	3304      	adds	r3, #4
 801aa12:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801aa14:	2300      	movs	r3, #0
 801aa16:	617b      	str	r3, [r7, #20]
 801aa18:	e020      	b.n	801aa5c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aa1a:	697b      	ldr	r3, [r7, #20]
 801aa1c:	3303      	adds	r3, #3
 801aa1e:	687a      	ldr	r2, [r7, #4]
 801aa20:	4413      	add	r3, r2
 801aa22:	781b      	ldrb	r3, [r3, #0]
 801aa24:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801aa26:	697b      	ldr	r3, [r7, #20]
 801aa28:	3302      	adds	r3, #2
 801aa2a:	6879      	ldr	r1, [r7, #4]
 801aa2c:	440b      	add	r3, r1
 801aa2e:	781b      	ldrb	r3, [r3, #0]
 801aa30:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aa32:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801aa34:	697b      	ldr	r3, [r7, #20]
 801aa36:	3301      	adds	r3, #1
 801aa38:	6879      	ldr	r1, [r7, #4]
 801aa3a:	440b      	add	r3, r1
 801aa3c:	781b      	ldrb	r3, [r3, #0]
 801aa3e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801aa40:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 801aa42:	6879      	ldr	r1, [r7, #4]
 801aa44:	697a      	ldr	r2, [r7, #20]
 801aa46:	440a      	add	r2, r1
 801aa48:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801aa4a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aa4c:	69bb      	ldr	r3, [r7, #24]
 801aa4e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 801aa50:	69bb      	ldr	r3, [r7, #24]
 801aa52:	3304      	adds	r3, #4
 801aa54:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801aa56:	697b      	ldr	r3, [r7, #20]
 801aa58:	3304      	adds	r3, #4
 801aa5a:	617b      	str	r3, [r7, #20]
 801aa5c:	68bb      	ldr	r3, [r7, #8]
 801aa5e:	68db      	ldr	r3, [r3, #12]
 801aa60:	0c1b      	lsrs	r3, r3, #16
 801aa62:	4a06      	ldr	r2, [pc, #24]	; (801aa7c <FDCAN_CopyMessageToRAM+0xf8>)
 801aa64:	5cd3      	ldrb	r3, [r2, r3]
 801aa66:	461a      	mov	r2, r3
 801aa68:	697b      	ldr	r3, [r7, #20]
 801aa6a:	4293      	cmp	r3, r2
 801aa6c:	d3d5      	bcc.n	801aa1a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 801aa6e:	bf00      	nop
 801aa70:	bf00      	nop
 801aa72:	3724      	adds	r7, #36	; 0x24
 801aa74:	46bd      	mov	sp, r7
 801aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aa7a:	4770      	bx	lr
 801aa7c:	08021110 	.word	0x08021110

0801aa80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801aa80:	b480      	push	{r7}
 801aa82:	b089      	sub	sp, #36	; 0x24
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	6078      	str	r0, [r7, #4]
 801aa88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801aa8a:	2300      	movs	r3, #0
 801aa8c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801aa8e:	4b86      	ldr	r3, [pc, #536]	; (801aca8 <HAL_GPIO_Init+0x228>)
 801aa90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801aa92:	e18c      	b.n	801adae <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801aa94:	683b      	ldr	r3, [r7, #0]
 801aa96:	681a      	ldr	r2, [r3, #0]
 801aa98:	2101      	movs	r1, #1
 801aa9a:	69fb      	ldr	r3, [r7, #28]
 801aa9c:	fa01 f303 	lsl.w	r3, r1, r3
 801aaa0:	4013      	ands	r3, r2
 801aaa2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801aaa4:	693b      	ldr	r3, [r7, #16]
 801aaa6:	2b00      	cmp	r3, #0
 801aaa8:	f000 817e 	beq.w	801ada8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801aaac:	683b      	ldr	r3, [r7, #0]
 801aaae:	685b      	ldr	r3, [r3, #4]
 801aab0:	f003 0303 	and.w	r3, r3, #3
 801aab4:	2b01      	cmp	r3, #1
 801aab6:	d005      	beq.n	801aac4 <HAL_GPIO_Init+0x44>
 801aab8:	683b      	ldr	r3, [r7, #0]
 801aaba:	685b      	ldr	r3, [r3, #4]
 801aabc:	f003 0303 	and.w	r3, r3, #3
 801aac0:	2b02      	cmp	r3, #2
 801aac2:	d130      	bne.n	801ab26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	689b      	ldr	r3, [r3, #8]
 801aac8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801aaca:	69fb      	ldr	r3, [r7, #28]
 801aacc:	005b      	lsls	r3, r3, #1
 801aace:	2203      	movs	r2, #3
 801aad0:	fa02 f303 	lsl.w	r3, r2, r3
 801aad4:	43db      	mvns	r3, r3
 801aad6:	69ba      	ldr	r2, [r7, #24]
 801aad8:	4013      	ands	r3, r2
 801aada:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801aadc:	683b      	ldr	r3, [r7, #0]
 801aade:	68da      	ldr	r2, [r3, #12]
 801aae0:	69fb      	ldr	r3, [r7, #28]
 801aae2:	005b      	lsls	r3, r3, #1
 801aae4:	fa02 f303 	lsl.w	r3, r2, r3
 801aae8:	69ba      	ldr	r2, [r7, #24]
 801aaea:	4313      	orrs	r3, r2
 801aaec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801aaee:	687b      	ldr	r3, [r7, #4]
 801aaf0:	69ba      	ldr	r2, [r7, #24]
 801aaf2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	685b      	ldr	r3, [r3, #4]
 801aaf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801aafa:	2201      	movs	r2, #1
 801aafc:	69fb      	ldr	r3, [r7, #28]
 801aafe:	fa02 f303 	lsl.w	r3, r2, r3
 801ab02:	43db      	mvns	r3, r3
 801ab04:	69ba      	ldr	r2, [r7, #24]
 801ab06:	4013      	ands	r3, r2
 801ab08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ab0a:	683b      	ldr	r3, [r7, #0]
 801ab0c:	685b      	ldr	r3, [r3, #4]
 801ab0e:	091b      	lsrs	r3, r3, #4
 801ab10:	f003 0201 	and.w	r2, r3, #1
 801ab14:	69fb      	ldr	r3, [r7, #28]
 801ab16:	fa02 f303 	lsl.w	r3, r2, r3
 801ab1a:	69ba      	ldr	r2, [r7, #24]
 801ab1c:	4313      	orrs	r3, r2
 801ab1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801ab20:	687b      	ldr	r3, [r7, #4]
 801ab22:	69ba      	ldr	r2, [r7, #24]
 801ab24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ab26:	683b      	ldr	r3, [r7, #0]
 801ab28:	685b      	ldr	r3, [r3, #4]
 801ab2a:	f003 0303 	and.w	r3, r3, #3
 801ab2e:	2b03      	cmp	r3, #3
 801ab30:	d017      	beq.n	801ab62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	68db      	ldr	r3, [r3, #12]
 801ab36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801ab38:	69fb      	ldr	r3, [r7, #28]
 801ab3a:	005b      	lsls	r3, r3, #1
 801ab3c:	2203      	movs	r2, #3
 801ab3e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab42:	43db      	mvns	r3, r3
 801ab44:	69ba      	ldr	r2, [r7, #24]
 801ab46:	4013      	ands	r3, r2
 801ab48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801ab4a:	683b      	ldr	r3, [r7, #0]
 801ab4c:	689a      	ldr	r2, [r3, #8]
 801ab4e:	69fb      	ldr	r3, [r7, #28]
 801ab50:	005b      	lsls	r3, r3, #1
 801ab52:	fa02 f303 	lsl.w	r3, r2, r3
 801ab56:	69ba      	ldr	r2, [r7, #24]
 801ab58:	4313      	orrs	r3, r2
 801ab5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	69ba      	ldr	r2, [r7, #24]
 801ab60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801ab62:	683b      	ldr	r3, [r7, #0]
 801ab64:	685b      	ldr	r3, [r3, #4]
 801ab66:	f003 0303 	and.w	r3, r3, #3
 801ab6a:	2b02      	cmp	r3, #2
 801ab6c:	d123      	bne.n	801abb6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801ab6e:	69fb      	ldr	r3, [r7, #28]
 801ab70:	08da      	lsrs	r2, r3, #3
 801ab72:	687b      	ldr	r3, [r7, #4]
 801ab74:	3208      	adds	r2, #8
 801ab76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801ab7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801ab7c:	69fb      	ldr	r3, [r7, #28]
 801ab7e:	f003 0307 	and.w	r3, r3, #7
 801ab82:	009b      	lsls	r3, r3, #2
 801ab84:	220f      	movs	r2, #15
 801ab86:	fa02 f303 	lsl.w	r3, r2, r3
 801ab8a:	43db      	mvns	r3, r3
 801ab8c:	69ba      	ldr	r2, [r7, #24]
 801ab8e:	4013      	ands	r3, r2
 801ab90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801ab92:	683b      	ldr	r3, [r7, #0]
 801ab94:	691a      	ldr	r2, [r3, #16]
 801ab96:	69fb      	ldr	r3, [r7, #28]
 801ab98:	f003 0307 	and.w	r3, r3, #7
 801ab9c:	009b      	lsls	r3, r3, #2
 801ab9e:	fa02 f303 	lsl.w	r3, r2, r3
 801aba2:	69ba      	ldr	r2, [r7, #24]
 801aba4:	4313      	orrs	r3, r2
 801aba6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801aba8:	69fb      	ldr	r3, [r7, #28]
 801abaa:	08da      	lsrs	r2, r3, #3
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	3208      	adds	r2, #8
 801abb0:	69b9      	ldr	r1, [r7, #24]
 801abb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801abb6:	687b      	ldr	r3, [r7, #4]
 801abb8:	681b      	ldr	r3, [r3, #0]
 801abba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801abbc:	69fb      	ldr	r3, [r7, #28]
 801abbe:	005b      	lsls	r3, r3, #1
 801abc0:	2203      	movs	r2, #3
 801abc2:	fa02 f303 	lsl.w	r3, r2, r3
 801abc6:	43db      	mvns	r3, r3
 801abc8:	69ba      	ldr	r2, [r7, #24]
 801abca:	4013      	ands	r3, r2
 801abcc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801abce:	683b      	ldr	r3, [r7, #0]
 801abd0:	685b      	ldr	r3, [r3, #4]
 801abd2:	f003 0203 	and.w	r2, r3, #3
 801abd6:	69fb      	ldr	r3, [r7, #28]
 801abd8:	005b      	lsls	r3, r3, #1
 801abda:	fa02 f303 	lsl.w	r3, r2, r3
 801abde:	69ba      	ldr	r2, [r7, #24]
 801abe0:	4313      	orrs	r3, r2
 801abe2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	69ba      	ldr	r2, [r7, #24]
 801abe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801abea:	683b      	ldr	r3, [r7, #0]
 801abec:	685b      	ldr	r3, [r3, #4]
 801abee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	f000 80d8 	beq.w	801ada8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801abf8:	4b2c      	ldr	r3, [pc, #176]	; (801acac <HAL_GPIO_Init+0x22c>)
 801abfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801abfe:	4a2b      	ldr	r2, [pc, #172]	; (801acac <HAL_GPIO_Init+0x22c>)
 801ac00:	f043 0302 	orr.w	r3, r3, #2
 801ac04:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801ac08:	4b28      	ldr	r3, [pc, #160]	; (801acac <HAL_GPIO_Init+0x22c>)
 801ac0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ac0e:	f003 0302 	and.w	r3, r3, #2
 801ac12:	60fb      	str	r3, [r7, #12]
 801ac14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ac16:	4a26      	ldr	r2, [pc, #152]	; (801acb0 <HAL_GPIO_Init+0x230>)
 801ac18:	69fb      	ldr	r3, [r7, #28]
 801ac1a:	089b      	lsrs	r3, r3, #2
 801ac1c:	3302      	adds	r3, #2
 801ac1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ac24:	69fb      	ldr	r3, [r7, #28]
 801ac26:	f003 0303 	and.w	r3, r3, #3
 801ac2a:	009b      	lsls	r3, r3, #2
 801ac2c:	220f      	movs	r2, #15
 801ac2e:	fa02 f303 	lsl.w	r3, r2, r3
 801ac32:	43db      	mvns	r3, r3
 801ac34:	69ba      	ldr	r2, [r7, #24]
 801ac36:	4013      	ands	r3, r2
 801ac38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801ac3a:	687b      	ldr	r3, [r7, #4]
 801ac3c:	4a1d      	ldr	r2, [pc, #116]	; (801acb4 <HAL_GPIO_Init+0x234>)
 801ac3e:	4293      	cmp	r3, r2
 801ac40:	d04a      	beq.n	801acd8 <HAL_GPIO_Init+0x258>
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	4a1c      	ldr	r2, [pc, #112]	; (801acb8 <HAL_GPIO_Init+0x238>)
 801ac46:	4293      	cmp	r3, r2
 801ac48:	d02b      	beq.n	801aca2 <HAL_GPIO_Init+0x222>
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	4a1b      	ldr	r2, [pc, #108]	; (801acbc <HAL_GPIO_Init+0x23c>)
 801ac4e:	4293      	cmp	r3, r2
 801ac50:	d025      	beq.n	801ac9e <HAL_GPIO_Init+0x21e>
 801ac52:	687b      	ldr	r3, [r7, #4]
 801ac54:	4a1a      	ldr	r2, [pc, #104]	; (801acc0 <HAL_GPIO_Init+0x240>)
 801ac56:	4293      	cmp	r3, r2
 801ac58:	d01f      	beq.n	801ac9a <HAL_GPIO_Init+0x21a>
 801ac5a:	687b      	ldr	r3, [r7, #4]
 801ac5c:	4a19      	ldr	r2, [pc, #100]	; (801acc4 <HAL_GPIO_Init+0x244>)
 801ac5e:	4293      	cmp	r3, r2
 801ac60:	d019      	beq.n	801ac96 <HAL_GPIO_Init+0x216>
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	4a18      	ldr	r2, [pc, #96]	; (801acc8 <HAL_GPIO_Init+0x248>)
 801ac66:	4293      	cmp	r3, r2
 801ac68:	d013      	beq.n	801ac92 <HAL_GPIO_Init+0x212>
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	4a17      	ldr	r2, [pc, #92]	; (801accc <HAL_GPIO_Init+0x24c>)
 801ac6e:	4293      	cmp	r3, r2
 801ac70:	d00d      	beq.n	801ac8e <HAL_GPIO_Init+0x20e>
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	4a16      	ldr	r2, [pc, #88]	; (801acd0 <HAL_GPIO_Init+0x250>)
 801ac76:	4293      	cmp	r3, r2
 801ac78:	d007      	beq.n	801ac8a <HAL_GPIO_Init+0x20a>
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	4a15      	ldr	r2, [pc, #84]	; (801acd4 <HAL_GPIO_Init+0x254>)
 801ac7e:	4293      	cmp	r3, r2
 801ac80:	d101      	bne.n	801ac86 <HAL_GPIO_Init+0x206>
 801ac82:	2309      	movs	r3, #9
 801ac84:	e029      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801ac86:	230a      	movs	r3, #10
 801ac88:	e027      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801ac8a:	2307      	movs	r3, #7
 801ac8c:	e025      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801ac8e:	2306      	movs	r3, #6
 801ac90:	e023      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801ac92:	2305      	movs	r3, #5
 801ac94:	e021      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801ac96:	2304      	movs	r3, #4
 801ac98:	e01f      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801ac9a:	2303      	movs	r3, #3
 801ac9c:	e01d      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801ac9e:	2302      	movs	r3, #2
 801aca0:	e01b      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801aca2:	2301      	movs	r3, #1
 801aca4:	e019      	b.n	801acda <HAL_GPIO_Init+0x25a>
 801aca6:	bf00      	nop
 801aca8:	58000080 	.word	0x58000080
 801acac:	58024400 	.word	0x58024400
 801acb0:	58000400 	.word	0x58000400
 801acb4:	58020000 	.word	0x58020000
 801acb8:	58020400 	.word	0x58020400
 801acbc:	58020800 	.word	0x58020800
 801acc0:	58020c00 	.word	0x58020c00
 801acc4:	58021000 	.word	0x58021000
 801acc8:	58021400 	.word	0x58021400
 801accc:	58021800 	.word	0x58021800
 801acd0:	58021c00 	.word	0x58021c00
 801acd4:	58022400 	.word	0x58022400
 801acd8:	2300      	movs	r3, #0
 801acda:	69fa      	ldr	r2, [r7, #28]
 801acdc:	f002 0203 	and.w	r2, r2, #3
 801ace0:	0092      	lsls	r2, r2, #2
 801ace2:	4093      	lsls	r3, r2
 801ace4:	69ba      	ldr	r2, [r7, #24]
 801ace6:	4313      	orrs	r3, r2
 801ace8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801acea:	4938      	ldr	r1, [pc, #224]	; (801adcc <HAL_GPIO_Init+0x34c>)
 801acec:	69fb      	ldr	r3, [r7, #28]
 801acee:	089b      	lsrs	r3, r3, #2
 801acf0:	3302      	adds	r3, #2
 801acf2:	69ba      	ldr	r2, [r7, #24]
 801acf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801acf8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801acfc:	681b      	ldr	r3, [r3, #0]
 801acfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ad00:	693b      	ldr	r3, [r7, #16]
 801ad02:	43db      	mvns	r3, r3
 801ad04:	69ba      	ldr	r2, [r7, #24]
 801ad06:	4013      	ands	r3, r2
 801ad08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	685b      	ldr	r3, [r3, #4]
 801ad0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d003      	beq.n	801ad1e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801ad16:	69ba      	ldr	r2, [r7, #24]
 801ad18:	693b      	ldr	r3, [r7, #16]
 801ad1a:	4313      	orrs	r3, r2
 801ad1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801ad1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad22:	69bb      	ldr	r3, [r7, #24]
 801ad24:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801ad26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad2a:	685b      	ldr	r3, [r3, #4]
 801ad2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ad2e:	693b      	ldr	r3, [r7, #16]
 801ad30:	43db      	mvns	r3, r3
 801ad32:	69ba      	ldr	r2, [r7, #24]
 801ad34:	4013      	ands	r3, r2
 801ad36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801ad38:	683b      	ldr	r3, [r7, #0]
 801ad3a:	685b      	ldr	r3, [r3, #4]
 801ad3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d003      	beq.n	801ad4c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801ad44:	69ba      	ldr	r2, [r7, #24]
 801ad46:	693b      	ldr	r3, [r7, #16]
 801ad48:	4313      	orrs	r3, r2
 801ad4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801ad4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad50:	69bb      	ldr	r3, [r7, #24]
 801ad52:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801ad54:	697b      	ldr	r3, [r7, #20]
 801ad56:	685b      	ldr	r3, [r3, #4]
 801ad58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ad5a:	693b      	ldr	r3, [r7, #16]
 801ad5c:	43db      	mvns	r3, r3
 801ad5e:	69ba      	ldr	r2, [r7, #24]
 801ad60:	4013      	ands	r3, r2
 801ad62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801ad64:	683b      	ldr	r3, [r7, #0]
 801ad66:	685b      	ldr	r3, [r3, #4]
 801ad68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d003      	beq.n	801ad78 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801ad70:	69ba      	ldr	r2, [r7, #24]
 801ad72:	693b      	ldr	r3, [r7, #16]
 801ad74:	4313      	orrs	r3, r2
 801ad76:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801ad78:	697b      	ldr	r3, [r7, #20]
 801ad7a:	69ba      	ldr	r2, [r7, #24]
 801ad7c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801ad7e:	697b      	ldr	r3, [r7, #20]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ad84:	693b      	ldr	r3, [r7, #16]
 801ad86:	43db      	mvns	r3, r3
 801ad88:	69ba      	ldr	r2, [r7, #24]
 801ad8a:	4013      	ands	r3, r2
 801ad8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ad8e:	683b      	ldr	r3, [r7, #0]
 801ad90:	685b      	ldr	r3, [r3, #4]
 801ad92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ad96:	2b00      	cmp	r3, #0
 801ad98:	d003      	beq.n	801ada2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801ad9a:	69ba      	ldr	r2, [r7, #24]
 801ad9c:	693b      	ldr	r3, [r7, #16]
 801ad9e:	4313      	orrs	r3, r2
 801ada0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801ada2:	697b      	ldr	r3, [r7, #20]
 801ada4:	69ba      	ldr	r2, [r7, #24]
 801ada6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801ada8:	69fb      	ldr	r3, [r7, #28]
 801adaa:	3301      	adds	r3, #1
 801adac:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801adae:	683b      	ldr	r3, [r7, #0]
 801adb0:	681a      	ldr	r2, [r3, #0]
 801adb2:	69fb      	ldr	r3, [r7, #28]
 801adb4:	fa22 f303 	lsr.w	r3, r2, r3
 801adb8:	2b00      	cmp	r3, #0
 801adba:	f47f ae6b 	bne.w	801aa94 <HAL_GPIO_Init+0x14>
  }
}
 801adbe:	bf00      	nop
 801adc0:	bf00      	nop
 801adc2:	3724      	adds	r7, #36	; 0x24
 801adc4:	46bd      	mov	sp, r7
 801adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adca:	4770      	bx	lr
 801adcc:	58000400 	.word	0x58000400

0801add0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801add0:	b480      	push	{r7}
 801add2:	b085      	sub	sp, #20
 801add4:	af00      	add	r7, sp, #0
 801add6:	6078      	str	r0, [r7, #4]
 801add8:	460b      	mov	r3, r1
 801adda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	691a      	ldr	r2, [r3, #16]
 801ade0:	887b      	ldrh	r3, [r7, #2]
 801ade2:	4013      	ands	r3, r2
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d002      	beq.n	801adee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801ade8:	2301      	movs	r3, #1
 801adea:	73fb      	strb	r3, [r7, #15]
 801adec:	e001      	b.n	801adf2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801adee:	2300      	movs	r3, #0
 801adf0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801adf2:	7bfb      	ldrb	r3, [r7, #15]
}
 801adf4:	4618      	mov	r0, r3
 801adf6:	3714      	adds	r7, #20
 801adf8:	46bd      	mov	sp, r7
 801adfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801adfe:	4770      	bx	lr

0801ae00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ae00:	b480      	push	{r7}
 801ae02:	b083      	sub	sp, #12
 801ae04:	af00      	add	r7, sp, #0
 801ae06:	6078      	str	r0, [r7, #4]
 801ae08:	460b      	mov	r3, r1
 801ae0a:	807b      	strh	r3, [r7, #2]
 801ae0c:	4613      	mov	r3, r2
 801ae0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ae10:	787b      	ldrb	r3, [r7, #1]
 801ae12:	2b00      	cmp	r3, #0
 801ae14:	d003      	beq.n	801ae1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ae16:	887a      	ldrh	r2, [r7, #2]
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ae1c:	e003      	b.n	801ae26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ae1e:	887b      	ldrh	r3, [r7, #2]
 801ae20:	041a      	lsls	r2, r3, #16
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	619a      	str	r2, [r3, #24]
}
 801ae26:	bf00      	nop
 801ae28:	370c      	adds	r7, #12
 801ae2a:	46bd      	mov	sp, r7
 801ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae30:	4770      	bx	lr

0801ae32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801ae32:	b480      	push	{r7}
 801ae34:	b085      	sub	sp, #20
 801ae36:	af00      	add	r7, sp, #0
 801ae38:	6078      	str	r0, [r7, #4]
 801ae3a:	460b      	mov	r3, r1
 801ae3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	695b      	ldr	r3, [r3, #20]
 801ae42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801ae44:	887a      	ldrh	r2, [r7, #2]
 801ae46:	68fb      	ldr	r3, [r7, #12]
 801ae48:	4013      	ands	r3, r2
 801ae4a:	041a      	lsls	r2, r3, #16
 801ae4c:	68fb      	ldr	r3, [r7, #12]
 801ae4e:	43d9      	mvns	r1, r3
 801ae50:	887b      	ldrh	r3, [r7, #2]
 801ae52:	400b      	ands	r3, r1
 801ae54:	431a      	orrs	r2, r3
 801ae56:	687b      	ldr	r3, [r7, #4]
 801ae58:	619a      	str	r2, [r3, #24]
}
 801ae5a:	bf00      	nop
 801ae5c:	3714      	adds	r7, #20
 801ae5e:	46bd      	mov	sp, r7
 801ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae64:	4770      	bx	lr
	...

0801ae68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801ae68:	b580      	push	{r7, lr}
 801ae6a:	b084      	sub	sp, #16
 801ae6c:	af00      	add	r7, sp, #0
 801ae6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801ae70:	4b19      	ldr	r3, [pc, #100]	; (801aed8 <HAL_PWREx_ConfigSupply+0x70>)
 801ae72:	68db      	ldr	r3, [r3, #12]
 801ae74:	f003 0304 	and.w	r3, r3, #4
 801ae78:	2b04      	cmp	r3, #4
 801ae7a:	d00a      	beq.n	801ae92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801ae7c:	4b16      	ldr	r3, [pc, #88]	; (801aed8 <HAL_PWREx_ConfigSupply+0x70>)
 801ae7e:	68db      	ldr	r3, [r3, #12]
 801ae80:	f003 0307 	and.w	r3, r3, #7
 801ae84:	687a      	ldr	r2, [r7, #4]
 801ae86:	429a      	cmp	r2, r3
 801ae88:	d001      	beq.n	801ae8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	e01f      	b.n	801aece <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801ae8e:	2300      	movs	r3, #0
 801ae90:	e01d      	b.n	801aece <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801ae92:	4b11      	ldr	r3, [pc, #68]	; (801aed8 <HAL_PWREx_ConfigSupply+0x70>)
 801ae94:	68db      	ldr	r3, [r3, #12]
 801ae96:	f023 0207 	bic.w	r2, r3, #7
 801ae9a:	490f      	ldr	r1, [pc, #60]	; (801aed8 <HAL_PWREx_ConfigSupply+0x70>)
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	4313      	orrs	r3, r2
 801aea0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801aea2:	f7fa f9ed 	bl	8015280 <HAL_GetTick>
 801aea6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801aea8:	e009      	b.n	801aebe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801aeaa:	f7fa f9e9 	bl	8015280 <HAL_GetTick>
 801aeae:	4602      	mov	r2, r0
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	1ad3      	subs	r3, r2, r3
 801aeb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801aeb8:	d901      	bls.n	801aebe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801aeba:	2301      	movs	r3, #1
 801aebc:	e007      	b.n	801aece <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801aebe:	4b06      	ldr	r3, [pc, #24]	; (801aed8 <HAL_PWREx_ConfigSupply+0x70>)
 801aec0:	685b      	ldr	r3, [r3, #4]
 801aec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801aec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801aeca:	d1ee      	bne.n	801aeaa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801aecc:	2300      	movs	r3, #0
}
 801aece:	4618      	mov	r0, r3
 801aed0:	3710      	adds	r7, #16
 801aed2:	46bd      	mov	sp, r7
 801aed4:	bd80      	pop	{r7, pc}
 801aed6:	bf00      	nop
 801aed8:	58024800 	.word	0x58024800

0801aedc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801aedc:	b580      	push	{r7, lr}
 801aede:	b08c      	sub	sp, #48	; 0x30
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	2b00      	cmp	r3, #0
 801aee8:	d101      	bne.n	801aeee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801aeea:	2301      	movs	r3, #1
 801aeec:	e3c8      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801aeee:	687b      	ldr	r3, [r7, #4]
 801aef0:	681b      	ldr	r3, [r3, #0]
 801aef2:	f003 0301 	and.w	r3, r3, #1
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	f000 8087 	beq.w	801b00a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801aefc:	4b88      	ldr	r3, [pc, #544]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801aefe:	691b      	ldr	r3, [r3, #16]
 801af00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801af04:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801af06:	4b86      	ldr	r3, [pc, #536]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af0a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801af0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af0e:	2b10      	cmp	r3, #16
 801af10:	d007      	beq.n	801af22 <HAL_RCC_OscConfig+0x46>
 801af12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af14:	2b18      	cmp	r3, #24
 801af16:	d110      	bne.n	801af3a <HAL_RCC_OscConfig+0x5e>
 801af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af1a:	f003 0303 	and.w	r3, r3, #3
 801af1e:	2b02      	cmp	r3, #2
 801af20:	d10b      	bne.n	801af3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801af22:	4b7f      	ldr	r3, [pc, #508]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d06c      	beq.n	801b008 <HAL_RCC_OscConfig+0x12c>
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	685b      	ldr	r3, [r3, #4]
 801af32:	2b00      	cmp	r3, #0
 801af34:	d168      	bne.n	801b008 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801af36:	2301      	movs	r3, #1
 801af38:	e3a2      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	685b      	ldr	r3, [r3, #4]
 801af3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801af42:	d106      	bne.n	801af52 <HAL_RCC_OscConfig+0x76>
 801af44:	4b76      	ldr	r3, [pc, #472]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	4a75      	ldr	r2, [pc, #468]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801af4e:	6013      	str	r3, [r2, #0]
 801af50:	e02e      	b.n	801afb0 <HAL_RCC_OscConfig+0xd4>
 801af52:	687b      	ldr	r3, [r7, #4]
 801af54:	685b      	ldr	r3, [r3, #4]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d10c      	bne.n	801af74 <HAL_RCC_OscConfig+0x98>
 801af5a:	4b71      	ldr	r3, [pc, #452]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af5c:	681b      	ldr	r3, [r3, #0]
 801af5e:	4a70      	ldr	r2, [pc, #448]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801af64:	6013      	str	r3, [r2, #0]
 801af66:	4b6e      	ldr	r3, [pc, #440]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	4a6d      	ldr	r2, [pc, #436]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801af70:	6013      	str	r3, [r2, #0]
 801af72:	e01d      	b.n	801afb0 <HAL_RCC_OscConfig+0xd4>
 801af74:	687b      	ldr	r3, [r7, #4]
 801af76:	685b      	ldr	r3, [r3, #4]
 801af78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801af7c:	d10c      	bne.n	801af98 <HAL_RCC_OscConfig+0xbc>
 801af7e:	4b68      	ldr	r3, [pc, #416]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af80:	681b      	ldr	r3, [r3, #0]
 801af82:	4a67      	ldr	r2, [pc, #412]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801af88:	6013      	str	r3, [r2, #0]
 801af8a:	4b65      	ldr	r3, [pc, #404]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	4a64      	ldr	r2, [pc, #400]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801af94:	6013      	str	r3, [r2, #0]
 801af96:	e00b      	b.n	801afb0 <HAL_RCC_OscConfig+0xd4>
 801af98:	4b61      	ldr	r3, [pc, #388]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af9a:	681b      	ldr	r3, [r3, #0]
 801af9c:	4a60      	ldr	r2, [pc, #384]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801af9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801afa2:	6013      	str	r3, [r2, #0]
 801afa4:	4b5e      	ldr	r3, [pc, #376]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801afa6:	681b      	ldr	r3, [r3, #0]
 801afa8:	4a5d      	ldr	r2, [pc, #372]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801afaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801afae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801afb0:	687b      	ldr	r3, [r7, #4]
 801afb2:	685b      	ldr	r3, [r3, #4]
 801afb4:	2b00      	cmp	r3, #0
 801afb6:	d013      	beq.n	801afe0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801afb8:	f7fa f962 	bl	8015280 <HAL_GetTick>
 801afbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801afbe:	e008      	b.n	801afd2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801afc0:	f7fa f95e 	bl	8015280 <HAL_GetTick>
 801afc4:	4602      	mov	r2, r0
 801afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afc8:	1ad3      	subs	r3, r2, r3
 801afca:	2b64      	cmp	r3, #100	; 0x64
 801afcc:	d901      	bls.n	801afd2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801afce:	2303      	movs	r3, #3
 801afd0:	e356      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801afd2:	4b53      	ldr	r3, [pc, #332]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d0f0      	beq.n	801afc0 <HAL_RCC_OscConfig+0xe4>
 801afde:	e014      	b.n	801b00a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801afe0:	f7fa f94e 	bl	8015280 <HAL_GetTick>
 801afe4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801afe6:	e008      	b.n	801affa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801afe8:	f7fa f94a 	bl	8015280 <HAL_GetTick>
 801afec:	4602      	mov	r2, r0
 801afee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff0:	1ad3      	subs	r3, r2, r3
 801aff2:	2b64      	cmp	r3, #100	; 0x64
 801aff4:	d901      	bls.n	801affa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801aff6:	2303      	movs	r3, #3
 801aff8:	e342      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801affa:	4b49      	ldr	r3, [pc, #292]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801affc:	681b      	ldr	r3, [r3, #0]
 801affe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b002:	2b00      	cmp	r3, #0
 801b004:	d1f0      	bne.n	801afe8 <HAL_RCC_OscConfig+0x10c>
 801b006:	e000      	b.n	801b00a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	f003 0302 	and.w	r3, r3, #2
 801b012:	2b00      	cmp	r3, #0
 801b014:	f000 808c 	beq.w	801b130 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b018:	4b41      	ldr	r3, [pc, #260]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b01a:	691b      	ldr	r3, [r3, #16]
 801b01c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b020:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b022:	4b3f      	ldr	r3, [pc, #252]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b026:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801b028:	6a3b      	ldr	r3, [r7, #32]
 801b02a:	2b00      	cmp	r3, #0
 801b02c:	d007      	beq.n	801b03e <HAL_RCC_OscConfig+0x162>
 801b02e:	6a3b      	ldr	r3, [r7, #32]
 801b030:	2b18      	cmp	r3, #24
 801b032:	d137      	bne.n	801b0a4 <HAL_RCC_OscConfig+0x1c8>
 801b034:	69fb      	ldr	r3, [r7, #28]
 801b036:	f003 0303 	and.w	r3, r3, #3
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d132      	bne.n	801b0a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b03e:	4b38      	ldr	r3, [pc, #224]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b040:	681b      	ldr	r3, [r3, #0]
 801b042:	f003 0304 	and.w	r3, r3, #4
 801b046:	2b00      	cmp	r3, #0
 801b048:	d005      	beq.n	801b056 <HAL_RCC_OscConfig+0x17a>
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	68db      	ldr	r3, [r3, #12]
 801b04e:	2b00      	cmp	r3, #0
 801b050:	d101      	bne.n	801b056 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b052:	2301      	movs	r3, #1
 801b054:	e314      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b056:	4b32      	ldr	r3, [pc, #200]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	f023 0219 	bic.w	r2, r3, #25
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	68db      	ldr	r3, [r3, #12]
 801b062:	492f      	ldr	r1, [pc, #188]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b064:	4313      	orrs	r3, r2
 801b066:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b068:	f7fa f90a 	bl	8015280 <HAL_GetTick>
 801b06c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b06e:	e008      	b.n	801b082 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b070:	f7fa f906 	bl	8015280 <HAL_GetTick>
 801b074:	4602      	mov	r2, r0
 801b076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b078:	1ad3      	subs	r3, r2, r3
 801b07a:	2b02      	cmp	r3, #2
 801b07c:	d901      	bls.n	801b082 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801b07e:	2303      	movs	r3, #3
 801b080:	e2fe      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b082:	4b27      	ldr	r3, [pc, #156]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	f003 0304 	and.w	r3, r3, #4
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d0f0      	beq.n	801b070 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b08e:	4b24      	ldr	r3, [pc, #144]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b090:	685b      	ldr	r3, [r3, #4]
 801b092:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	691b      	ldr	r3, [r3, #16]
 801b09a:	061b      	lsls	r3, r3, #24
 801b09c:	4920      	ldr	r1, [pc, #128]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b09e:	4313      	orrs	r3, r2
 801b0a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b0a2:	e045      	b.n	801b130 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	68db      	ldr	r3, [r3, #12]
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d026      	beq.n	801b0fa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b0ac:	4b1c      	ldr	r3, [pc, #112]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	f023 0219 	bic.w	r2, r3, #25
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	68db      	ldr	r3, [r3, #12]
 801b0b8:	4919      	ldr	r1, [pc, #100]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b0ba:	4313      	orrs	r3, r2
 801b0bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b0be:	f7fa f8df 	bl	8015280 <HAL_GetTick>
 801b0c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b0c4:	e008      	b.n	801b0d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b0c6:	f7fa f8db 	bl	8015280 <HAL_GetTick>
 801b0ca:	4602      	mov	r2, r0
 801b0cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0ce:	1ad3      	subs	r3, r2, r3
 801b0d0:	2b02      	cmp	r3, #2
 801b0d2:	d901      	bls.n	801b0d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801b0d4:	2303      	movs	r3, #3
 801b0d6:	e2d3      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b0d8:	4b11      	ldr	r3, [pc, #68]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	f003 0304 	and.w	r3, r3, #4
 801b0e0:	2b00      	cmp	r3, #0
 801b0e2:	d0f0      	beq.n	801b0c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b0e4:	4b0e      	ldr	r3, [pc, #56]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b0e6:	685b      	ldr	r3, [r3, #4]
 801b0e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b0ec:	687b      	ldr	r3, [r7, #4]
 801b0ee:	691b      	ldr	r3, [r3, #16]
 801b0f0:	061b      	lsls	r3, r3, #24
 801b0f2:	490b      	ldr	r1, [pc, #44]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b0f4:	4313      	orrs	r3, r2
 801b0f6:	604b      	str	r3, [r1, #4]
 801b0f8:	e01a      	b.n	801b130 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b0fa:	4b09      	ldr	r3, [pc, #36]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	4a08      	ldr	r2, [pc, #32]	; (801b120 <HAL_RCC_OscConfig+0x244>)
 801b100:	f023 0301 	bic.w	r3, r3, #1
 801b104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b106:	f7fa f8bb 	bl	8015280 <HAL_GetTick>
 801b10a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b10c:	e00a      	b.n	801b124 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b10e:	f7fa f8b7 	bl	8015280 <HAL_GetTick>
 801b112:	4602      	mov	r2, r0
 801b114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b116:	1ad3      	subs	r3, r2, r3
 801b118:	2b02      	cmp	r3, #2
 801b11a:	d903      	bls.n	801b124 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801b11c:	2303      	movs	r3, #3
 801b11e:	e2af      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
 801b120:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b124:	4b96      	ldr	r3, [pc, #600]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	f003 0304 	and.w	r3, r3, #4
 801b12c:	2b00      	cmp	r3, #0
 801b12e:	d1ee      	bne.n	801b10e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b130:	687b      	ldr	r3, [r7, #4]
 801b132:	681b      	ldr	r3, [r3, #0]
 801b134:	f003 0310 	and.w	r3, r3, #16
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d06a      	beq.n	801b212 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b13c:	4b90      	ldr	r3, [pc, #576]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b13e:	691b      	ldr	r3, [r3, #16]
 801b140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b144:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b146:	4b8e      	ldr	r3, [pc, #568]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b14a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b14c:	69bb      	ldr	r3, [r7, #24]
 801b14e:	2b08      	cmp	r3, #8
 801b150:	d007      	beq.n	801b162 <HAL_RCC_OscConfig+0x286>
 801b152:	69bb      	ldr	r3, [r7, #24]
 801b154:	2b18      	cmp	r3, #24
 801b156:	d11b      	bne.n	801b190 <HAL_RCC_OscConfig+0x2b4>
 801b158:	697b      	ldr	r3, [r7, #20]
 801b15a:	f003 0303 	and.w	r3, r3, #3
 801b15e:	2b01      	cmp	r3, #1
 801b160:	d116      	bne.n	801b190 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b162:	4b87      	ldr	r3, [pc, #540]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b164:	681b      	ldr	r3, [r3, #0]
 801b166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b16a:	2b00      	cmp	r3, #0
 801b16c:	d005      	beq.n	801b17a <HAL_RCC_OscConfig+0x29e>
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	69db      	ldr	r3, [r3, #28]
 801b172:	2b80      	cmp	r3, #128	; 0x80
 801b174:	d001      	beq.n	801b17a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b176:	2301      	movs	r3, #1
 801b178:	e282      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b17a:	4b81      	ldr	r3, [pc, #516]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b17c:	68db      	ldr	r3, [r3, #12]
 801b17e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	6a1b      	ldr	r3, [r3, #32]
 801b186:	061b      	lsls	r3, r3, #24
 801b188:	497d      	ldr	r1, [pc, #500]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b18a:	4313      	orrs	r3, r2
 801b18c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b18e:	e040      	b.n	801b212 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801b190:	687b      	ldr	r3, [r7, #4]
 801b192:	69db      	ldr	r3, [r3, #28]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d023      	beq.n	801b1e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b198:	4b79      	ldr	r3, [pc, #484]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b19a:	681b      	ldr	r3, [r3, #0]
 801b19c:	4a78      	ldr	r2, [pc, #480]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b19e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b1a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b1a4:	f7fa f86c 	bl	8015280 <HAL_GetTick>
 801b1a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b1aa:	e008      	b.n	801b1be <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b1ac:	f7fa f868 	bl	8015280 <HAL_GetTick>
 801b1b0:	4602      	mov	r2, r0
 801b1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1b4:	1ad3      	subs	r3, r2, r3
 801b1b6:	2b02      	cmp	r3, #2
 801b1b8:	d901      	bls.n	801b1be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801b1ba:	2303      	movs	r3, #3
 801b1bc:	e260      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b1be:	4b70      	ldr	r3, [pc, #448]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d0f0      	beq.n	801b1ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b1ca:	4b6d      	ldr	r3, [pc, #436]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b1cc:	68db      	ldr	r3, [r3, #12]
 801b1ce:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	6a1b      	ldr	r3, [r3, #32]
 801b1d6:	061b      	lsls	r3, r3, #24
 801b1d8:	4969      	ldr	r1, [pc, #420]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b1da:	4313      	orrs	r3, r2
 801b1dc:	60cb      	str	r3, [r1, #12]
 801b1de:	e018      	b.n	801b212 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b1e0:	4b67      	ldr	r3, [pc, #412]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b1e2:	681b      	ldr	r3, [r3, #0]
 801b1e4:	4a66      	ldr	r2, [pc, #408]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b1e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b1ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b1ec:	f7fa f848 	bl	8015280 <HAL_GetTick>
 801b1f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b1f2:	e008      	b.n	801b206 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b1f4:	f7fa f844 	bl	8015280 <HAL_GetTick>
 801b1f8:	4602      	mov	r2, r0
 801b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b1fc:	1ad3      	subs	r3, r2, r3
 801b1fe:	2b02      	cmp	r3, #2
 801b200:	d901      	bls.n	801b206 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801b202:	2303      	movs	r3, #3
 801b204:	e23c      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b206:	4b5e      	ldr	r3, [pc, #376]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b20e:	2b00      	cmp	r3, #0
 801b210:	d1f0      	bne.n	801b1f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	f003 0308 	and.w	r3, r3, #8
 801b21a:	2b00      	cmp	r3, #0
 801b21c:	d036      	beq.n	801b28c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b21e:	687b      	ldr	r3, [r7, #4]
 801b220:	695b      	ldr	r3, [r3, #20]
 801b222:	2b00      	cmp	r3, #0
 801b224:	d019      	beq.n	801b25a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b226:	4b56      	ldr	r3, [pc, #344]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b22a:	4a55      	ldr	r2, [pc, #340]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b22c:	f043 0301 	orr.w	r3, r3, #1
 801b230:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b232:	f7fa f825 	bl	8015280 <HAL_GetTick>
 801b236:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b238:	e008      	b.n	801b24c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b23a:	f7fa f821 	bl	8015280 <HAL_GetTick>
 801b23e:	4602      	mov	r2, r0
 801b240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b242:	1ad3      	subs	r3, r2, r3
 801b244:	2b02      	cmp	r3, #2
 801b246:	d901      	bls.n	801b24c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 801b248:	2303      	movs	r3, #3
 801b24a:	e219      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b24c:	4b4c      	ldr	r3, [pc, #304]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b24e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b250:	f003 0302 	and.w	r3, r3, #2
 801b254:	2b00      	cmp	r3, #0
 801b256:	d0f0      	beq.n	801b23a <HAL_RCC_OscConfig+0x35e>
 801b258:	e018      	b.n	801b28c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b25a:	4b49      	ldr	r3, [pc, #292]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b25c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b25e:	4a48      	ldr	r2, [pc, #288]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b260:	f023 0301 	bic.w	r3, r3, #1
 801b264:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b266:	f7fa f80b 	bl	8015280 <HAL_GetTick>
 801b26a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b26c:	e008      	b.n	801b280 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b26e:	f7fa f807 	bl	8015280 <HAL_GetTick>
 801b272:	4602      	mov	r2, r0
 801b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b276:	1ad3      	subs	r3, r2, r3
 801b278:	2b02      	cmp	r3, #2
 801b27a:	d901      	bls.n	801b280 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801b27c:	2303      	movs	r3, #3
 801b27e:	e1ff      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b280:	4b3f      	ldr	r3, [pc, #252]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b284:	f003 0302 	and.w	r3, r3, #2
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d1f0      	bne.n	801b26e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b28c:	687b      	ldr	r3, [r7, #4]
 801b28e:	681b      	ldr	r3, [r3, #0]
 801b290:	f003 0320 	and.w	r3, r3, #32
 801b294:	2b00      	cmp	r3, #0
 801b296:	d036      	beq.n	801b306 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	699b      	ldr	r3, [r3, #24]
 801b29c:	2b00      	cmp	r3, #0
 801b29e:	d019      	beq.n	801b2d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b2a0:	4b37      	ldr	r3, [pc, #220]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b2a2:	681b      	ldr	r3, [r3, #0]
 801b2a4:	4a36      	ldr	r2, [pc, #216]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b2a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b2aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b2ac:	f7f9 ffe8 	bl	8015280 <HAL_GetTick>
 801b2b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b2b2:	e008      	b.n	801b2c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b2b4:	f7f9 ffe4 	bl	8015280 <HAL_GetTick>
 801b2b8:	4602      	mov	r2, r0
 801b2ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2bc:	1ad3      	subs	r3, r2, r3
 801b2be:	2b02      	cmp	r3, #2
 801b2c0:	d901      	bls.n	801b2c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801b2c2:	2303      	movs	r3, #3
 801b2c4:	e1dc      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b2c6:	4b2e      	ldr	r3, [pc, #184]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b2c8:	681b      	ldr	r3, [r3, #0]
 801b2ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d0f0      	beq.n	801b2b4 <HAL_RCC_OscConfig+0x3d8>
 801b2d2:	e018      	b.n	801b306 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b2d4:	4b2a      	ldr	r3, [pc, #168]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	4a29      	ldr	r2, [pc, #164]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b2da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b2de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b2e0:	f7f9 ffce 	bl	8015280 <HAL_GetTick>
 801b2e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b2e6:	e008      	b.n	801b2fa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b2e8:	f7f9 ffca 	bl	8015280 <HAL_GetTick>
 801b2ec:	4602      	mov	r2, r0
 801b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2f0:	1ad3      	subs	r3, r2, r3
 801b2f2:	2b02      	cmp	r3, #2
 801b2f4:	d901      	bls.n	801b2fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801b2f6:	2303      	movs	r3, #3
 801b2f8:	e1c2      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b2fa:	4b21      	ldr	r3, [pc, #132]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b2fc:	681b      	ldr	r3, [r3, #0]
 801b2fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b302:	2b00      	cmp	r3, #0
 801b304:	d1f0      	bne.n	801b2e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b306:	687b      	ldr	r3, [r7, #4]
 801b308:	681b      	ldr	r3, [r3, #0]
 801b30a:	f003 0304 	and.w	r3, r3, #4
 801b30e:	2b00      	cmp	r3, #0
 801b310:	f000 8086 	beq.w	801b420 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b314:	4b1b      	ldr	r3, [pc, #108]	; (801b384 <HAL_RCC_OscConfig+0x4a8>)
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	4a1a      	ldr	r2, [pc, #104]	; (801b384 <HAL_RCC_OscConfig+0x4a8>)
 801b31a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b31e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b320:	f7f9 ffae 	bl	8015280 <HAL_GetTick>
 801b324:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b326:	e008      	b.n	801b33a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b328:	f7f9 ffaa 	bl	8015280 <HAL_GetTick>
 801b32c:	4602      	mov	r2, r0
 801b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b330:	1ad3      	subs	r3, r2, r3
 801b332:	2b64      	cmp	r3, #100	; 0x64
 801b334:	d901      	bls.n	801b33a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801b336:	2303      	movs	r3, #3
 801b338:	e1a2      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b33a:	4b12      	ldr	r3, [pc, #72]	; (801b384 <HAL_RCC_OscConfig+0x4a8>)
 801b33c:	681b      	ldr	r3, [r3, #0]
 801b33e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b342:	2b00      	cmp	r3, #0
 801b344:	d0f0      	beq.n	801b328 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	689b      	ldr	r3, [r3, #8]
 801b34a:	2b01      	cmp	r3, #1
 801b34c:	d106      	bne.n	801b35c <HAL_RCC_OscConfig+0x480>
 801b34e:	4b0c      	ldr	r3, [pc, #48]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b352:	4a0b      	ldr	r2, [pc, #44]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b354:	f043 0301 	orr.w	r3, r3, #1
 801b358:	6713      	str	r3, [r2, #112]	; 0x70
 801b35a:	e032      	b.n	801b3c2 <HAL_RCC_OscConfig+0x4e6>
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	689b      	ldr	r3, [r3, #8]
 801b360:	2b00      	cmp	r3, #0
 801b362:	d111      	bne.n	801b388 <HAL_RCC_OscConfig+0x4ac>
 801b364:	4b06      	ldr	r3, [pc, #24]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b368:	4a05      	ldr	r2, [pc, #20]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b36a:	f023 0301 	bic.w	r3, r3, #1
 801b36e:	6713      	str	r3, [r2, #112]	; 0x70
 801b370:	4b03      	ldr	r3, [pc, #12]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b374:	4a02      	ldr	r2, [pc, #8]	; (801b380 <HAL_RCC_OscConfig+0x4a4>)
 801b376:	f023 0304 	bic.w	r3, r3, #4
 801b37a:	6713      	str	r3, [r2, #112]	; 0x70
 801b37c:	e021      	b.n	801b3c2 <HAL_RCC_OscConfig+0x4e6>
 801b37e:	bf00      	nop
 801b380:	58024400 	.word	0x58024400
 801b384:	58024800 	.word	0x58024800
 801b388:	687b      	ldr	r3, [r7, #4]
 801b38a:	689b      	ldr	r3, [r3, #8]
 801b38c:	2b05      	cmp	r3, #5
 801b38e:	d10c      	bne.n	801b3aa <HAL_RCC_OscConfig+0x4ce>
 801b390:	4b83      	ldr	r3, [pc, #524]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b394:	4a82      	ldr	r2, [pc, #520]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b396:	f043 0304 	orr.w	r3, r3, #4
 801b39a:	6713      	str	r3, [r2, #112]	; 0x70
 801b39c:	4b80      	ldr	r3, [pc, #512]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b39e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3a0:	4a7f      	ldr	r2, [pc, #508]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b3a2:	f043 0301 	orr.w	r3, r3, #1
 801b3a6:	6713      	str	r3, [r2, #112]	; 0x70
 801b3a8:	e00b      	b.n	801b3c2 <HAL_RCC_OscConfig+0x4e6>
 801b3aa:	4b7d      	ldr	r3, [pc, #500]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3ae:	4a7c      	ldr	r2, [pc, #496]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b3b0:	f023 0301 	bic.w	r3, r3, #1
 801b3b4:	6713      	str	r3, [r2, #112]	; 0x70
 801b3b6:	4b7a      	ldr	r3, [pc, #488]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b3b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3ba:	4a79      	ldr	r2, [pc, #484]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b3bc:	f023 0304 	bic.w	r3, r3, #4
 801b3c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b3c2:	687b      	ldr	r3, [r7, #4]
 801b3c4:	689b      	ldr	r3, [r3, #8]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d015      	beq.n	801b3f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b3ca:	f7f9 ff59 	bl	8015280 <HAL_GetTick>
 801b3ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b3d0:	e00a      	b.n	801b3e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b3d2:	f7f9 ff55 	bl	8015280 <HAL_GetTick>
 801b3d6:	4602      	mov	r2, r0
 801b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3da:	1ad3      	subs	r3, r2, r3
 801b3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 801b3e0:	4293      	cmp	r3, r2
 801b3e2:	d901      	bls.n	801b3e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801b3e4:	2303      	movs	r3, #3
 801b3e6:	e14b      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b3e8:	4b6d      	ldr	r3, [pc, #436]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b3ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3ec:	f003 0302 	and.w	r3, r3, #2
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	d0ee      	beq.n	801b3d2 <HAL_RCC_OscConfig+0x4f6>
 801b3f4:	e014      	b.n	801b420 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b3f6:	f7f9 ff43 	bl	8015280 <HAL_GetTick>
 801b3fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b3fc:	e00a      	b.n	801b414 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b3fe:	f7f9 ff3f 	bl	8015280 <HAL_GetTick>
 801b402:	4602      	mov	r2, r0
 801b404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b406:	1ad3      	subs	r3, r2, r3
 801b408:	f241 3288 	movw	r2, #5000	; 0x1388
 801b40c:	4293      	cmp	r3, r2
 801b40e:	d901      	bls.n	801b414 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801b410:	2303      	movs	r3, #3
 801b412:	e135      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b414:	4b62      	ldr	r3, [pc, #392]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b418:	f003 0302 	and.w	r3, r3, #2
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	d1ee      	bne.n	801b3fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b420:	687b      	ldr	r3, [r7, #4]
 801b422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b424:	2b00      	cmp	r3, #0
 801b426:	f000 812a 	beq.w	801b67e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801b42a:	4b5d      	ldr	r3, [pc, #372]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b42c:	691b      	ldr	r3, [r3, #16]
 801b42e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b432:	2b18      	cmp	r3, #24
 801b434:	f000 80ba 	beq.w	801b5ac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b43c:	2b02      	cmp	r3, #2
 801b43e:	f040 8095 	bne.w	801b56c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b442:	4b57      	ldr	r3, [pc, #348]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b444:	681b      	ldr	r3, [r3, #0]
 801b446:	4a56      	ldr	r2, [pc, #344]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b44c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b44e:	f7f9 ff17 	bl	8015280 <HAL_GetTick>
 801b452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b454:	e008      	b.n	801b468 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b456:	f7f9 ff13 	bl	8015280 <HAL_GetTick>
 801b45a:	4602      	mov	r2, r0
 801b45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b45e:	1ad3      	subs	r3, r2, r3
 801b460:	2b02      	cmp	r3, #2
 801b462:	d901      	bls.n	801b468 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801b464:	2303      	movs	r3, #3
 801b466:	e10b      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b468:	4b4d      	ldr	r3, [pc, #308]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b46a:	681b      	ldr	r3, [r3, #0]
 801b46c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b470:	2b00      	cmp	r3, #0
 801b472:	d1f0      	bne.n	801b456 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b474:	4b4a      	ldr	r3, [pc, #296]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b476:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b478:	4b4a      	ldr	r3, [pc, #296]	; (801b5a4 <HAL_RCC_OscConfig+0x6c8>)
 801b47a:	4013      	ands	r3, r2
 801b47c:	687a      	ldr	r2, [r7, #4]
 801b47e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801b480:	687a      	ldr	r2, [r7, #4]
 801b482:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b484:	0112      	lsls	r2, r2, #4
 801b486:	430a      	orrs	r2, r1
 801b488:	4945      	ldr	r1, [pc, #276]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b48a:	4313      	orrs	r3, r2
 801b48c:	628b      	str	r3, [r1, #40]	; 0x28
 801b48e:	687b      	ldr	r3, [r7, #4]
 801b490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b492:	3b01      	subs	r3, #1
 801b494:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b49c:	3b01      	subs	r3, #1
 801b49e:	025b      	lsls	r3, r3, #9
 801b4a0:	b29b      	uxth	r3, r3
 801b4a2:	431a      	orrs	r2, r3
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b4a8:	3b01      	subs	r3, #1
 801b4aa:	041b      	lsls	r3, r3, #16
 801b4ac:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801b4b0:	431a      	orrs	r2, r3
 801b4b2:	687b      	ldr	r3, [r7, #4]
 801b4b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b4b6:	3b01      	subs	r3, #1
 801b4b8:	061b      	lsls	r3, r3, #24
 801b4ba:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801b4be:	4938      	ldr	r1, [pc, #224]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b4c0:	4313      	orrs	r3, r2
 801b4c2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801b4c4:	4b36      	ldr	r3, [pc, #216]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b4c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4c8:	4a35      	ldr	r2, [pc, #212]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b4ca:	f023 0301 	bic.w	r3, r3, #1
 801b4ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b4d0:	4b33      	ldr	r3, [pc, #204]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b4d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b4d4:	4b34      	ldr	r3, [pc, #208]	; (801b5a8 <HAL_RCC_OscConfig+0x6cc>)
 801b4d6:	4013      	ands	r3, r2
 801b4d8:	687a      	ldr	r2, [r7, #4]
 801b4da:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b4dc:	00d2      	lsls	r2, r2, #3
 801b4de:	4930      	ldr	r1, [pc, #192]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b4e0:	4313      	orrs	r3, r2
 801b4e2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801b4e4:	4b2e      	ldr	r3, [pc, #184]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4e8:	f023 020c 	bic.w	r2, r3, #12
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b4f0:	492b      	ldr	r1, [pc, #172]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b4f2:	4313      	orrs	r3, r2
 801b4f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801b4f6:	4b2a      	ldr	r3, [pc, #168]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b4fa:	f023 0202 	bic.w	r2, r3, #2
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b502:	4927      	ldr	r1, [pc, #156]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b504:	4313      	orrs	r3, r2
 801b506:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801b508:	4b25      	ldr	r3, [pc, #148]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b50c:	4a24      	ldr	r2, [pc, #144]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b50e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b512:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b514:	4b22      	ldr	r3, [pc, #136]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b518:	4a21      	ldr	r2, [pc, #132]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b51a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b51e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801b520:	4b1f      	ldr	r3, [pc, #124]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b524:	4a1e      	ldr	r2, [pc, #120]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b52a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801b52c:	4b1c      	ldr	r3, [pc, #112]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b52e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b530:	4a1b      	ldr	r2, [pc, #108]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b532:	f043 0301 	orr.w	r3, r3, #1
 801b536:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b538:	4b19      	ldr	r3, [pc, #100]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b53a:	681b      	ldr	r3, [r3, #0]
 801b53c:	4a18      	ldr	r2, [pc, #96]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b53e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b542:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b544:	f7f9 fe9c 	bl	8015280 <HAL_GetTick>
 801b548:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b54a:	e008      	b.n	801b55e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b54c:	f7f9 fe98 	bl	8015280 <HAL_GetTick>
 801b550:	4602      	mov	r2, r0
 801b552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b554:	1ad3      	subs	r3, r2, r3
 801b556:	2b02      	cmp	r3, #2
 801b558:	d901      	bls.n	801b55e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801b55a:	2303      	movs	r3, #3
 801b55c:	e090      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b55e:	4b10      	ldr	r3, [pc, #64]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b566:	2b00      	cmp	r3, #0
 801b568:	d0f0      	beq.n	801b54c <HAL_RCC_OscConfig+0x670>
 801b56a:	e088      	b.n	801b67e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b56c:	4b0c      	ldr	r3, [pc, #48]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b56e:	681b      	ldr	r3, [r3, #0]
 801b570:	4a0b      	ldr	r2, [pc, #44]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b578:	f7f9 fe82 	bl	8015280 <HAL_GetTick>
 801b57c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b57e:	e008      	b.n	801b592 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b580:	f7f9 fe7e 	bl	8015280 <HAL_GetTick>
 801b584:	4602      	mov	r2, r0
 801b586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b588:	1ad3      	subs	r3, r2, r3
 801b58a:	2b02      	cmp	r3, #2
 801b58c:	d901      	bls.n	801b592 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801b58e:	2303      	movs	r3, #3
 801b590:	e076      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b592:	4b03      	ldr	r3, [pc, #12]	; (801b5a0 <HAL_RCC_OscConfig+0x6c4>)
 801b594:	681b      	ldr	r3, [r3, #0]
 801b596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d1f0      	bne.n	801b580 <HAL_RCC_OscConfig+0x6a4>
 801b59e:	e06e      	b.n	801b67e <HAL_RCC_OscConfig+0x7a2>
 801b5a0:	58024400 	.word	0x58024400
 801b5a4:	fffffc0c 	.word	0xfffffc0c
 801b5a8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801b5ac:	4b36      	ldr	r3, [pc, #216]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b5ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b5b0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801b5b2:	4b35      	ldr	r3, [pc, #212]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b5b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5b6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b5bc:	2b01      	cmp	r3, #1
 801b5be:	d031      	beq.n	801b624 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b5c0:	693b      	ldr	r3, [r7, #16]
 801b5c2:	f003 0203 	and.w	r2, r3, #3
 801b5c6:	687b      	ldr	r3, [r7, #4]
 801b5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b5ca:	429a      	cmp	r2, r3
 801b5cc:	d12a      	bne.n	801b624 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b5ce:	693b      	ldr	r3, [r7, #16]
 801b5d0:	091b      	lsrs	r3, r3, #4
 801b5d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b5d6:	687b      	ldr	r3, [r7, #4]
 801b5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b5da:	429a      	cmp	r2, r3
 801b5dc:	d122      	bne.n	801b624 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b5de:	68fb      	ldr	r3, [r7, #12]
 801b5e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b5e8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b5ea:	429a      	cmp	r2, r3
 801b5ec:	d11a      	bne.n	801b624 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b5ee:	68fb      	ldr	r3, [r7, #12]
 801b5f0:	0a5b      	lsrs	r3, r3, #9
 801b5f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b5fa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b5fc:	429a      	cmp	r2, r3
 801b5fe:	d111      	bne.n	801b624 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	0c1b      	lsrs	r3, r3, #16
 801b604:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b608:	687b      	ldr	r3, [r7, #4]
 801b60a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b60c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b60e:	429a      	cmp	r2, r3
 801b610:	d108      	bne.n	801b624 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	0e1b      	lsrs	r3, r3, #24
 801b616:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b61a:	687b      	ldr	r3, [r7, #4]
 801b61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b61e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b620:	429a      	cmp	r2, r3
 801b622:	d001      	beq.n	801b628 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801b624:	2301      	movs	r3, #1
 801b626:	e02b      	b.n	801b680 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801b628:	4b17      	ldr	r3, [pc, #92]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b62a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b62c:	08db      	lsrs	r3, r3, #3
 801b62e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b632:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b638:	693a      	ldr	r2, [r7, #16]
 801b63a:	429a      	cmp	r2, r3
 801b63c:	d01f      	beq.n	801b67e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801b63e:	4b12      	ldr	r3, [pc, #72]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b642:	4a11      	ldr	r2, [pc, #68]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b644:	f023 0301 	bic.w	r3, r3, #1
 801b648:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b64a:	f7f9 fe19 	bl	8015280 <HAL_GetTick>
 801b64e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801b650:	bf00      	nop
 801b652:	f7f9 fe15 	bl	8015280 <HAL_GetTick>
 801b656:	4602      	mov	r2, r0
 801b658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b65a:	4293      	cmp	r3, r2
 801b65c:	d0f9      	beq.n	801b652 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b65e:	4b0a      	ldr	r3, [pc, #40]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b662:	4b0a      	ldr	r3, [pc, #40]	; (801b68c <HAL_RCC_OscConfig+0x7b0>)
 801b664:	4013      	ands	r3, r2
 801b666:	687a      	ldr	r2, [r7, #4]
 801b668:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b66a:	00d2      	lsls	r2, r2, #3
 801b66c:	4906      	ldr	r1, [pc, #24]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b66e:	4313      	orrs	r3, r2
 801b670:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801b672:	4b05      	ldr	r3, [pc, #20]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b676:	4a04      	ldr	r2, [pc, #16]	; (801b688 <HAL_RCC_OscConfig+0x7ac>)
 801b678:	f043 0301 	orr.w	r3, r3, #1
 801b67c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801b67e:	2300      	movs	r3, #0
}
 801b680:	4618      	mov	r0, r3
 801b682:	3730      	adds	r7, #48	; 0x30
 801b684:	46bd      	mov	sp, r7
 801b686:	bd80      	pop	{r7, pc}
 801b688:	58024400 	.word	0x58024400
 801b68c:	ffff0007 	.word	0xffff0007

0801b690 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b690:	b580      	push	{r7, lr}
 801b692:	b086      	sub	sp, #24
 801b694:	af00      	add	r7, sp, #0
 801b696:	6078      	str	r0, [r7, #4]
 801b698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	2b00      	cmp	r3, #0
 801b69e:	d101      	bne.n	801b6a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b6a0:	2301      	movs	r3, #1
 801b6a2:	e19c      	b.n	801b9de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b6a4:	4b8a      	ldr	r3, [pc, #552]	; (801b8d0 <HAL_RCC_ClockConfig+0x240>)
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	f003 030f 	and.w	r3, r3, #15
 801b6ac:	683a      	ldr	r2, [r7, #0]
 801b6ae:	429a      	cmp	r2, r3
 801b6b0:	d910      	bls.n	801b6d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b6b2:	4b87      	ldr	r3, [pc, #540]	; (801b8d0 <HAL_RCC_ClockConfig+0x240>)
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	f023 020f 	bic.w	r2, r3, #15
 801b6ba:	4985      	ldr	r1, [pc, #532]	; (801b8d0 <HAL_RCC_ClockConfig+0x240>)
 801b6bc:	683b      	ldr	r3, [r7, #0]
 801b6be:	4313      	orrs	r3, r2
 801b6c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b6c2:	4b83      	ldr	r3, [pc, #524]	; (801b8d0 <HAL_RCC_ClockConfig+0x240>)
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	f003 030f 	and.w	r3, r3, #15
 801b6ca:	683a      	ldr	r2, [r7, #0]
 801b6cc:	429a      	cmp	r2, r3
 801b6ce:	d001      	beq.n	801b6d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801b6d0:	2301      	movs	r3, #1
 801b6d2:	e184      	b.n	801b9de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	f003 0304 	and.w	r3, r3, #4
 801b6dc:	2b00      	cmp	r3, #0
 801b6de:	d010      	beq.n	801b702 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b6e0:	687b      	ldr	r3, [r7, #4]
 801b6e2:	691a      	ldr	r2, [r3, #16]
 801b6e4:	4b7b      	ldr	r3, [pc, #492]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b6e6:	699b      	ldr	r3, [r3, #24]
 801b6e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b6ec:	429a      	cmp	r2, r3
 801b6ee:	d908      	bls.n	801b702 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b6f0:	4b78      	ldr	r3, [pc, #480]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b6f2:	699b      	ldr	r3, [r3, #24]
 801b6f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b6f8:	687b      	ldr	r3, [r7, #4]
 801b6fa:	691b      	ldr	r3, [r3, #16]
 801b6fc:	4975      	ldr	r1, [pc, #468]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b6fe:	4313      	orrs	r3, r2
 801b700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b702:	687b      	ldr	r3, [r7, #4]
 801b704:	681b      	ldr	r3, [r3, #0]
 801b706:	f003 0308 	and.w	r3, r3, #8
 801b70a:	2b00      	cmp	r3, #0
 801b70c:	d010      	beq.n	801b730 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	695a      	ldr	r2, [r3, #20]
 801b712:	4b70      	ldr	r3, [pc, #448]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b714:	69db      	ldr	r3, [r3, #28]
 801b716:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b71a:	429a      	cmp	r2, r3
 801b71c:	d908      	bls.n	801b730 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b71e:	4b6d      	ldr	r3, [pc, #436]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b720:	69db      	ldr	r3, [r3, #28]
 801b722:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	695b      	ldr	r3, [r3, #20]
 801b72a:	496a      	ldr	r1, [pc, #424]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b72c:	4313      	orrs	r3, r2
 801b72e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	681b      	ldr	r3, [r3, #0]
 801b734:	f003 0310 	and.w	r3, r3, #16
 801b738:	2b00      	cmp	r3, #0
 801b73a:	d010      	beq.n	801b75e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	699a      	ldr	r2, [r3, #24]
 801b740:	4b64      	ldr	r3, [pc, #400]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b742:	69db      	ldr	r3, [r3, #28]
 801b744:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b748:	429a      	cmp	r2, r3
 801b74a:	d908      	bls.n	801b75e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b74c:	4b61      	ldr	r3, [pc, #388]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b74e:	69db      	ldr	r3, [r3, #28]
 801b750:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	699b      	ldr	r3, [r3, #24]
 801b758:	495e      	ldr	r1, [pc, #376]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b75a:	4313      	orrs	r3, r2
 801b75c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b75e:	687b      	ldr	r3, [r7, #4]
 801b760:	681b      	ldr	r3, [r3, #0]
 801b762:	f003 0320 	and.w	r3, r3, #32
 801b766:	2b00      	cmp	r3, #0
 801b768:	d010      	beq.n	801b78c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	69da      	ldr	r2, [r3, #28]
 801b76e:	4b59      	ldr	r3, [pc, #356]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b770:	6a1b      	ldr	r3, [r3, #32]
 801b772:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b776:	429a      	cmp	r2, r3
 801b778:	d908      	bls.n	801b78c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b77a:	4b56      	ldr	r3, [pc, #344]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b77c:	6a1b      	ldr	r3, [r3, #32]
 801b77e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	69db      	ldr	r3, [r3, #28]
 801b786:	4953      	ldr	r1, [pc, #332]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b788:	4313      	orrs	r3, r2
 801b78a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	681b      	ldr	r3, [r3, #0]
 801b790:	f003 0302 	and.w	r3, r3, #2
 801b794:	2b00      	cmp	r3, #0
 801b796:	d010      	beq.n	801b7ba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b798:	687b      	ldr	r3, [r7, #4]
 801b79a:	68da      	ldr	r2, [r3, #12]
 801b79c:	4b4d      	ldr	r3, [pc, #308]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b79e:	699b      	ldr	r3, [r3, #24]
 801b7a0:	f003 030f 	and.w	r3, r3, #15
 801b7a4:	429a      	cmp	r2, r3
 801b7a6:	d908      	bls.n	801b7ba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b7a8:	4b4a      	ldr	r3, [pc, #296]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b7aa:	699b      	ldr	r3, [r3, #24]
 801b7ac:	f023 020f 	bic.w	r2, r3, #15
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	68db      	ldr	r3, [r3, #12]
 801b7b4:	4947      	ldr	r1, [pc, #284]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b7b6:	4313      	orrs	r3, r2
 801b7b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	681b      	ldr	r3, [r3, #0]
 801b7be:	f003 0301 	and.w	r3, r3, #1
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d055      	beq.n	801b872 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801b7c6:	4b43      	ldr	r3, [pc, #268]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b7c8:	699b      	ldr	r3, [r3, #24]
 801b7ca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801b7ce:	687b      	ldr	r3, [r7, #4]
 801b7d0:	689b      	ldr	r3, [r3, #8]
 801b7d2:	4940      	ldr	r1, [pc, #256]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b7d4:	4313      	orrs	r3, r2
 801b7d6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b7d8:	687b      	ldr	r3, [r7, #4]
 801b7da:	685b      	ldr	r3, [r3, #4]
 801b7dc:	2b02      	cmp	r3, #2
 801b7de:	d107      	bne.n	801b7f0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b7e0:	4b3c      	ldr	r3, [pc, #240]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b7e2:	681b      	ldr	r3, [r3, #0]
 801b7e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	d121      	bne.n	801b830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b7ec:	2301      	movs	r3, #1
 801b7ee:	e0f6      	b.n	801b9de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	685b      	ldr	r3, [r3, #4]
 801b7f4:	2b03      	cmp	r3, #3
 801b7f6:	d107      	bne.n	801b808 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b7f8:	4b36      	ldr	r3, [pc, #216]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b7fa:	681b      	ldr	r3, [r3, #0]
 801b7fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b800:	2b00      	cmp	r3, #0
 801b802:	d115      	bne.n	801b830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b804:	2301      	movs	r3, #1
 801b806:	e0ea      	b.n	801b9de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801b808:	687b      	ldr	r3, [r7, #4]
 801b80a:	685b      	ldr	r3, [r3, #4]
 801b80c:	2b01      	cmp	r3, #1
 801b80e:	d107      	bne.n	801b820 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b810:	4b30      	ldr	r3, [pc, #192]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b812:	681b      	ldr	r3, [r3, #0]
 801b814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b818:	2b00      	cmp	r3, #0
 801b81a:	d109      	bne.n	801b830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b81c:	2301      	movs	r3, #1
 801b81e:	e0de      	b.n	801b9de <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b820:	4b2c      	ldr	r3, [pc, #176]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b822:	681b      	ldr	r3, [r3, #0]
 801b824:	f003 0304 	and.w	r3, r3, #4
 801b828:	2b00      	cmp	r3, #0
 801b82a:	d101      	bne.n	801b830 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b82c:	2301      	movs	r3, #1
 801b82e:	e0d6      	b.n	801b9de <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b830:	4b28      	ldr	r3, [pc, #160]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b832:	691b      	ldr	r3, [r3, #16]
 801b834:	f023 0207 	bic.w	r2, r3, #7
 801b838:	687b      	ldr	r3, [r7, #4]
 801b83a:	685b      	ldr	r3, [r3, #4]
 801b83c:	4925      	ldr	r1, [pc, #148]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b83e:	4313      	orrs	r3, r2
 801b840:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b842:	f7f9 fd1d 	bl	8015280 <HAL_GetTick>
 801b846:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b848:	e00a      	b.n	801b860 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b84a:	f7f9 fd19 	bl	8015280 <HAL_GetTick>
 801b84e:	4602      	mov	r2, r0
 801b850:	697b      	ldr	r3, [r7, #20]
 801b852:	1ad3      	subs	r3, r2, r3
 801b854:	f241 3288 	movw	r2, #5000	; 0x1388
 801b858:	4293      	cmp	r3, r2
 801b85a:	d901      	bls.n	801b860 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801b85c:	2303      	movs	r3, #3
 801b85e:	e0be      	b.n	801b9de <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b860:	4b1c      	ldr	r3, [pc, #112]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b862:	691b      	ldr	r3, [r3, #16]
 801b864:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	685b      	ldr	r3, [r3, #4]
 801b86c:	00db      	lsls	r3, r3, #3
 801b86e:	429a      	cmp	r2, r3
 801b870:	d1eb      	bne.n	801b84a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	f003 0302 	and.w	r3, r3, #2
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d010      	beq.n	801b8a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b87e:	687b      	ldr	r3, [r7, #4]
 801b880:	68da      	ldr	r2, [r3, #12]
 801b882:	4b14      	ldr	r3, [pc, #80]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b884:	699b      	ldr	r3, [r3, #24]
 801b886:	f003 030f 	and.w	r3, r3, #15
 801b88a:	429a      	cmp	r2, r3
 801b88c:	d208      	bcs.n	801b8a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b88e:	4b11      	ldr	r3, [pc, #68]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b890:	699b      	ldr	r3, [r3, #24]
 801b892:	f023 020f 	bic.w	r2, r3, #15
 801b896:	687b      	ldr	r3, [r7, #4]
 801b898:	68db      	ldr	r3, [r3, #12]
 801b89a:	490e      	ldr	r1, [pc, #56]	; (801b8d4 <HAL_RCC_ClockConfig+0x244>)
 801b89c:	4313      	orrs	r3, r2
 801b89e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b8a0:	4b0b      	ldr	r3, [pc, #44]	; (801b8d0 <HAL_RCC_ClockConfig+0x240>)
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	f003 030f 	and.w	r3, r3, #15
 801b8a8:	683a      	ldr	r2, [r7, #0]
 801b8aa:	429a      	cmp	r2, r3
 801b8ac:	d214      	bcs.n	801b8d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b8ae:	4b08      	ldr	r3, [pc, #32]	; (801b8d0 <HAL_RCC_ClockConfig+0x240>)
 801b8b0:	681b      	ldr	r3, [r3, #0]
 801b8b2:	f023 020f 	bic.w	r2, r3, #15
 801b8b6:	4906      	ldr	r1, [pc, #24]	; (801b8d0 <HAL_RCC_ClockConfig+0x240>)
 801b8b8:	683b      	ldr	r3, [r7, #0]
 801b8ba:	4313      	orrs	r3, r2
 801b8bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b8be:	4b04      	ldr	r3, [pc, #16]	; (801b8d0 <HAL_RCC_ClockConfig+0x240>)
 801b8c0:	681b      	ldr	r3, [r3, #0]
 801b8c2:	f003 030f 	and.w	r3, r3, #15
 801b8c6:	683a      	ldr	r2, [r7, #0]
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d005      	beq.n	801b8d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801b8cc:	2301      	movs	r3, #1
 801b8ce:	e086      	b.n	801b9de <HAL_RCC_ClockConfig+0x34e>
 801b8d0:	52002000 	.word	0x52002000
 801b8d4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b8d8:	687b      	ldr	r3, [r7, #4]
 801b8da:	681b      	ldr	r3, [r3, #0]
 801b8dc:	f003 0304 	and.w	r3, r3, #4
 801b8e0:	2b00      	cmp	r3, #0
 801b8e2:	d010      	beq.n	801b906 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b8e4:	687b      	ldr	r3, [r7, #4]
 801b8e6:	691a      	ldr	r2, [r3, #16]
 801b8e8:	4b3f      	ldr	r3, [pc, #252]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b8ea:	699b      	ldr	r3, [r3, #24]
 801b8ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b8f0:	429a      	cmp	r2, r3
 801b8f2:	d208      	bcs.n	801b906 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b8f4:	4b3c      	ldr	r3, [pc, #240]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b8f6:	699b      	ldr	r3, [r3, #24]
 801b8f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b8fc:	687b      	ldr	r3, [r7, #4]
 801b8fe:	691b      	ldr	r3, [r3, #16]
 801b900:	4939      	ldr	r1, [pc, #228]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b902:	4313      	orrs	r3, r2
 801b904:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b906:	687b      	ldr	r3, [r7, #4]
 801b908:	681b      	ldr	r3, [r3, #0]
 801b90a:	f003 0308 	and.w	r3, r3, #8
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d010      	beq.n	801b934 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b912:	687b      	ldr	r3, [r7, #4]
 801b914:	695a      	ldr	r2, [r3, #20]
 801b916:	4b34      	ldr	r3, [pc, #208]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b918:	69db      	ldr	r3, [r3, #28]
 801b91a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b91e:	429a      	cmp	r2, r3
 801b920:	d208      	bcs.n	801b934 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b922:	4b31      	ldr	r3, [pc, #196]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b924:	69db      	ldr	r3, [r3, #28]
 801b926:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	695b      	ldr	r3, [r3, #20]
 801b92e:	492e      	ldr	r1, [pc, #184]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b930:	4313      	orrs	r3, r2
 801b932:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b934:	687b      	ldr	r3, [r7, #4]
 801b936:	681b      	ldr	r3, [r3, #0]
 801b938:	f003 0310 	and.w	r3, r3, #16
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d010      	beq.n	801b962 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b940:	687b      	ldr	r3, [r7, #4]
 801b942:	699a      	ldr	r2, [r3, #24]
 801b944:	4b28      	ldr	r3, [pc, #160]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b946:	69db      	ldr	r3, [r3, #28]
 801b948:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b94c:	429a      	cmp	r2, r3
 801b94e:	d208      	bcs.n	801b962 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b950:	4b25      	ldr	r3, [pc, #148]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b952:	69db      	ldr	r3, [r3, #28]
 801b954:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b958:	687b      	ldr	r3, [r7, #4]
 801b95a:	699b      	ldr	r3, [r3, #24]
 801b95c:	4922      	ldr	r1, [pc, #136]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b95e:	4313      	orrs	r3, r2
 801b960:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	681b      	ldr	r3, [r3, #0]
 801b966:	f003 0320 	and.w	r3, r3, #32
 801b96a:	2b00      	cmp	r3, #0
 801b96c:	d010      	beq.n	801b990 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	69da      	ldr	r2, [r3, #28]
 801b972:	4b1d      	ldr	r3, [pc, #116]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b974:	6a1b      	ldr	r3, [r3, #32]
 801b976:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b97a:	429a      	cmp	r2, r3
 801b97c:	d208      	bcs.n	801b990 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b97e:	4b1a      	ldr	r3, [pc, #104]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b980:	6a1b      	ldr	r3, [r3, #32]
 801b982:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b986:	687b      	ldr	r3, [r7, #4]
 801b988:	69db      	ldr	r3, [r3, #28]
 801b98a:	4917      	ldr	r1, [pc, #92]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b98c:	4313      	orrs	r3, r2
 801b98e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801b990:	f000 f834 	bl	801b9fc <HAL_RCC_GetSysClockFreq>
 801b994:	4602      	mov	r2, r0
 801b996:	4b14      	ldr	r3, [pc, #80]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b998:	699b      	ldr	r3, [r3, #24]
 801b99a:	0a1b      	lsrs	r3, r3, #8
 801b99c:	f003 030f 	and.w	r3, r3, #15
 801b9a0:	4912      	ldr	r1, [pc, #72]	; (801b9ec <HAL_RCC_ClockConfig+0x35c>)
 801b9a2:	5ccb      	ldrb	r3, [r1, r3]
 801b9a4:	f003 031f 	and.w	r3, r3, #31
 801b9a8:	fa22 f303 	lsr.w	r3, r2, r3
 801b9ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b9ae:	4b0e      	ldr	r3, [pc, #56]	; (801b9e8 <HAL_RCC_ClockConfig+0x358>)
 801b9b0:	699b      	ldr	r3, [r3, #24]
 801b9b2:	f003 030f 	and.w	r3, r3, #15
 801b9b6:	4a0d      	ldr	r2, [pc, #52]	; (801b9ec <HAL_RCC_ClockConfig+0x35c>)
 801b9b8:	5cd3      	ldrb	r3, [r2, r3]
 801b9ba:	f003 031f 	and.w	r3, r3, #31
 801b9be:	693a      	ldr	r2, [r7, #16]
 801b9c0:	fa22 f303 	lsr.w	r3, r2, r3
 801b9c4:	4a0a      	ldr	r2, [pc, #40]	; (801b9f0 <HAL_RCC_ClockConfig+0x360>)
 801b9c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b9c8:	4a0a      	ldr	r2, [pc, #40]	; (801b9f4 <HAL_RCC_ClockConfig+0x364>)
 801b9ca:	693b      	ldr	r3, [r7, #16]
 801b9cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801b9ce:	4b0a      	ldr	r3, [pc, #40]	; (801b9f8 <HAL_RCC_ClockConfig+0x368>)
 801b9d0:	681b      	ldr	r3, [r3, #0]
 801b9d2:	4618      	mov	r0, r3
 801b9d4:	f7f9 fc0a 	bl	80151ec <HAL_InitTick>
 801b9d8:	4603      	mov	r3, r0
 801b9da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801b9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 801b9de:	4618      	mov	r0, r3
 801b9e0:	3718      	adds	r7, #24
 801b9e2:	46bd      	mov	sp, r7
 801b9e4:	bd80      	pop	{r7, pc}
 801b9e6:	bf00      	nop
 801b9e8:	58024400 	.word	0x58024400
 801b9ec:	080210f8 	.word	0x080210f8
 801b9f0:	24000008 	.word	0x24000008
 801b9f4:	24000004 	.word	0x24000004
 801b9f8:	2400000c 	.word	0x2400000c

0801b9fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801b9fc:	b480      	push	{r7}
 801b9fe:	b089      	sub	sp, #36	; 0x24
 801ba00:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ba02:	4bb3      	ldr	r3, [pc, #716]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba04:	691b      	ldr	r3, [r3, #16]
 801ba06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ba0a:	2b18      	cmp	r3, #24
 801ba0c:	f200 8155 	bhi.w	801bcba <HAL_RCC_GetSysClockFreq+0x2be>
 801ba10:	a201      	add	r2, pc, #4	; (adr r2, 801ba18 <HAL_RCC_GetSysClockFreq+0x1c>)
 801ba12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba16:	bf00      	nop
 801ba18:	0801ba7d 	.word	0x0801ba7d
 801ba1c:	0801bcbb 	.word	0x0801bcbb
 801ba20:	0801bcbb 	.word	0x0801bcbb
 801ba24:	0801bcbb 	.word	0x0801bcbb
 801ba28:	0801bcbb 	.word	0x0801bcbb
 801ba2c:	0801bcbb 	.word	0x0801bcbb
 801ba30:	0801bcbb 	.word	0x0801bcbb
 801ba34:	0801bcbb 	.word	0x0801bcbb
 801ba38:	0801baa3 	.word	0x0801baa3
 801ba3c:	0801bcbb 	.word	0x0801bcbb
 801ba40:	0801bcbb 	.word	0x0801bcbb
 801ba44:	0801bcbb 	.word	0x0801bcbb
 801ba48:	0801bcbb 	.word	0x0801bcbb
 801ba4c:	0801bcbb 	.word	0x0801bcbb
 801ba50:	0801bcbb 	.word	0x0801bcbb
 801ba54:	0801bcbb 	.word	0x0801bcbb
 801ba58:	0801baa9 	.word	0x0801baa9
 801ba5c:	0801bcbb 	.word	0x0801bcbb
 801ba60:	0801bcbb 	.word	0x0801bcbb
 801ba64:	0801bcbb 	.word	0x0801bcbb
 801ba68:	0801bcbb 	.word	0x0801bcbb
 801ba6c:	0801bcbb 	.word	0x0801bcbb
 801ba70:	0801bcbb 	.word	0x0801bcbb
 801ba74:	0801bcbb 	.word	0x0801bcbb
 801ba78:	0801baaf 	.word	0x0801baaf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ba7c:	4b94      	ldr	r3, [pc, #592]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba7e:	681b      	ldr	r3, [r3, #0]
 801ba80:	f003 0320 	and.w	r3, r3, #32
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d009      	beq.n	801ba9c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ba88:	4b91      	ldr	r3, [pc, #580]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba8a:	681b      	ldr	r3, [r3, #0]
 801ba8c:	08db      	lsrs	r3, r3, #3
 801ba8e:	f003 0303 	and.w	r3, r3, #3
 801ba92:	4a90      	ldr	r2, [pc, #576]	; (801bcd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ba94:	fa22 f303 	lsr.w	r3, r2, r3
 801ba98:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801ba9a:	e111      	b.n	801bcc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801ba9c:	4b8d      	ldr	r3, [pc, #564]	; (801bcd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ba9e:	61bb      	str	r3, [r7, #24]
      break;
 801baa0:	e10e      	b.n	801bcc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801baa2:	4b8d      	ldr	r3, [pc, #564]	; (801bcd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801baa4:	61bb      	str	r3, [r7, #24]
      break;
 801baa6:	e10b      	b.n	801bcc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801baa8:	4b8c      	ldr	r3, [pc, #560]	; (801bcdc <HAL_RCC_GetSysClockFreq+0x2e0>)
 801baaa:	61bb      	str	r3, [r7, #24]
      break;
 801baac:	e108      	b.n	801bcc0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801baae:	4b88      	ldr	r3, [pc, #544]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bab2:	f003 0303 	and.w	r3, r3, #3
 801bab6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801bab8:	4b85      	ldr	r3, [pc, #532]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801baba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801babc:	091b      	lsrs	r3, r3, #4
 801babe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bac2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801bac4:	4b82      	ldr	r3, [pc, #520]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bac8:	f003 0301 	and.w	r3, r3, #1
 801bacc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801bace:	4b80      	ldr	r3, [pc, #512]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bad2:	08db      	lsrs	r3, r3, #3
 801bad4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bad8:	68fa      	ldr	r2, [r7, #12]
 801bada:	fb02 f303 	mul.w	r3, r2, r3
 801bade:	ee07 3a90 	vmov	s15, r3
 801bae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bae6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801baea:	693b      	ldr	r3, [r7, #16]
 801baec:	2b00      	cmp	r3, #0
 801baee:	f000 80e1 	beq.w	801bcb4 <HAL_RCC_GetSysClockFreq+0x2b8>
 801baf2:	697b      	ldr	r3, [r7, #20]
 801baf4:	2b02      	cmp	r3, #2
 801baf6:	f000 8083 	beq.w	801bc00 <HAL_RCC_GetSysClockFreq+0x204>
 801bafa:	697b      	ldr	r3, [r7, #20]
 801bafc:	2b02      	cmp	r3, #2
 801bafe:	f200 80a1 	bhi.w	801bc44 <HAL_RCC_GetSysClockFreq+0x248>
 801bb02:	697b      	ldr	r3, [r7, #20]
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d003      	beq.n	801bb10 <HAL_RCC_GetSysClockFreq+0x114>
 801bb08:	697b      	ldr	r3, [r7, #20]
 801bb0a:	2b01      	cmp	r3, #1
 801bb0c:	d056      	beq.n	801bbbc <HAL_RCC_GetSysClockFreq+0x1c0>
 801bb0e:	e099      	b.n	801bc44 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bb10:	4b6f      	ldr	r3, [pc, #444]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb12:	681b      	ldr	r3, [r3, #0]
 801bb14:	f003 0320 	and.w	r3, r3, #32
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d02d      	beq.n	801bb78 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bb1c:	4b6c      	ldr	r3, [pc, #432]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	08db      	lsrs	r3, r3, #3
 801bb22:	f003 0303 	and.w	r3, r3, #3
 801bb26:	4a6b      	ldr	r2, [pc, #428]	; (801bcd4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bb28:	fa22 f303 	lsr.w	r3, r2, r3
 801bb2c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bb2e:	687b      	ldr	r3, [r7, #4]
 801bb30:	ee07 3a90 	vmov	s15, r3
 801bb34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb38:	693b      	ldr	r3, [r7, #16]
 801bb3a:	ee07 3a90 	vmov	s15, r3
 801bb3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb46:	4b62      	ldr	r3, [pc, #392]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb4e:	ee07 3a90 	vmov	s15, r3
 801bb52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb56:	ed97 6a02 	vldr	s12, [r7, #8]
 801bb5a:	eddf 5a61 	vldr	s11, [pc, #388]	; 801bce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bb5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bb62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bb66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bb6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bb6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bb72:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801bb76:	e087      	b.n	801bc88 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bb78:	693b      	ldr	r3, [r7, #16]
 801bb7a:	ee07 3a90 	vmov	s15, r3
 801bb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb82:	eddf 6a58 	vldr	s13, [pc, #352]	; 801bce4 <HAL_RCC_GetSysClockFreq+0x2e8>
 801bb86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bb8a:	4b51      	ldr	r3, [pc, #324]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bb92:	ee07 3a90 	vmov	s15, r3
 801bb96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bb9a:	ed97 6a02 	vldr	s12, [r7, #8]
 801bb9e:	eddf 5a50 	vldr	s11, [pc, #320]	; 801bce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bbaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bbae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bbb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bbb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bbba:	e065      	b.n	801bc88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bbbc:	693b      	ldr	r3, [r7, #16]
 801bbbe:	ee07 3a90 	vmov	s15, r3
 801bbc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bbc6:	eddf 6a48 	vldr	s13, [pc, #288]	; 801bce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801bbca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bbce:	4b40      	ldr	r3, [pc, #256]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbd6:	ee07 3a90 	vmov	s15, r3
 801bbda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bbde:	ed97 6a02 	vldr	s12, [r7, #8]
 801bbe2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801bce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bbe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bbea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bbee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bbf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bbf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bbfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bbfe:	e043      	b.n	801bc88 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc00:	693b      	ldr	r3, [r7, #16]
 801bc02:	ee07 3a90 	vmov	s15, r3
 801bc06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc0a:	eddf 6a38 	vldr	s13, [pc, #224]	; 801bcec <HAL_RCC_GetSysClockFreq+0x2f0>
 801bc0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc12:	4b2f      	ldr	r3, [pc, #188]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc1a:	ee07 3a90 	vmov	s15, r3
 801bc1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc22:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc26:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801bce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bc2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bc42:	e021      	b.n	801bc88 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc44:	693b      	ldr	r3, [r7, #16]
 801bc46:	ee07 3a90 	vmov	s15, r3
 801bc4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc4e:	eddf 6a26 	vldr	s13, [pc, #152]	; 801bce8 <HAL_RCC_GetSysClockFreq+0x2ec>
 801bc52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc56:	4b1e      	ldr	r3, [pc, #120]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc5e:	ee07 3a90 	vmov	s15, r3
 801bc62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc66:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc6a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801bce0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bc6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc82:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bc86:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801bc88:	4b11      	ldr	r3, [pc, #68]	; (801bcd0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc8c:	0a5b      	lsrs	r3, r3, #9
 801bc8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bc92:	3301      	adds	r3, #1
 801bc94:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801bc96:	683b      	ldr	r3, [r7, #0]
 801bc98:	ee07 3a90 	vmov	s15, r3
 801bc9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bca0:	edd7 6a07 	vldr	s13, [r7, #28]
 801bca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bcac:	ee17 3a90 	vmov	r3, s15
 801bcb0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801bcb2:	e005      	b.n	801bcc0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801bcb4:	2300      	movs	r3, #0
 801bcb6:	61bb      	str	r3, [r7, #24]
      break;
 801bcb8:	e002      	b.n	801bcc0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801bcba:	4b07      	ldr	r3, [pc, #28]	; (801bcd8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bcbc:	61bb      	str	r3, [r7, #24]
      break;
 801bcbe:	bf00      	nop
  }

  return sysclockfreq;
 801bcc0:	69bb      	ldr	r3, [r7, #24]
}
 801bcc2:	4618      	mov	r0, r3
 801bcc4:	3724      	adds	r7, #36	; 0x24
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bccc:	4770      	bx	lr
 801bcce:	bf00      	nop
 801bcd0:	58024400 	.word	0x58024400
 801bcd4:	03d09000 	.word	0x03d09000
 801bcd8:	003d0900 	.word	0x003d0900
 801bcdc:	007a1200 	.word	0x007a1200
 801bce0:	46000000 	.word	0x46000000
 801bce4:	4c742400 	.word	0x4c742400
 801bce8:	4a742400 	.word	0x4a742400
 801bcec:	4af42400 	.word	0x4af42400

0801bcf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b082      	sub	sp, #8
 801bcf4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801bcf6:	f7ff fe81 	bl	801b9fc <HAL_RCC_GetSysClockFreq>
 801bcfa:	4602      	mov	r2, r0
 801bcfc:	4b10      	ldr	r3, [pc, #64]	; (801bd40 <HAL_RCC_GetHCLKFreq+0x50>)
 801bcfe:	699b      	ldr	r3, [r3, #24]
 801bd00:	0a1b      	lsrs	r3, r3, #8
 801bd02:	f003 030f 	and.w	r3, r3, #15
 801bd06:	490f      	ldr	r1, [pc, #60]	; (801bd44 <HAL_RCC_GetHCLKFreq+0x54>)
 801bd08:	5ccb      	ldrb	r3, [r1, r3]
 801bd0a:	f003 031f 	and.w	r3, r3, #31
 801bd0e:	fa22 f303 	lsr.w	r3, r2, r3
 801bd12:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bd14:	4b0a      	ldr	r3, [pc, #40]	; (801bd40 <HAL_RCC_GetHCLKFreq+0x50>)
 801bd16:	699b      	ldr	r3, [r3, #24]
 801bd18:	f003 030f 	and.w	r3, r3, #15
 801bd1c:	4a09      	ldr	r2, [pc, #36]	; (801bd44 <HAL_RCC_GetHCLKFreq+0x54>)
 801bd1e:	5cd3      	ldrb	r3, [r2, r3]
 801bd20:	f003 031f 	and.w	r3, r3, #31
 801bd24:	687a      	ldr	r2, [r7, #4]
 801bd26:	fa22 f303 	lsr.w	r3, r2, r3
 801bd2a:	4a07      	ldr	r2, [pc, #28]	; (801bd48 <HAL_RCC_GetHCLKFreq+0x58>)
 801bd2c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bd2e:	4a07      	ldr	r2, [pc, #28]	; (801bd4c <HAL_RCC_GetHCLKFreq+0x5c>)
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801bd34:	4b04      	ldr	r3, [pc, #16]	; (801bd48 <HAL_RCC_GetHCLKFreq+0x58>)
 801bd36:	681b      	ldr	r3, [r3, #0]
}
 801bd38:	4618      	mov	r0, r3
 801bd3a:	3708      	adds	r7, #8
 801bd3c:	46bd      	mov	sp, r7
 801bd3e:	bd80      	pop	{r7, pc}
 801bd40:	58024400 	.word	0x58024400
 801bd44:	080210f8 	.word	0x080210f8
 801bd48:	24000008 	.word	0x24000008
 801bd4c:	24000004 	.word	0x24000004

0801bd50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bd50:	b580      	push	{r7, lr}
 801bd52:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801bd54:	f7ff ffcc 	bl	801bcf0 <HAL_RCC_GetHCLKFreq>
 801bd58:	4602      	mov	r2, r0
 801bd5a:	4b06      	ldr	r3, [pc, #24]	; (801bd74 <HAL_RCC_GetPCLK1Freq+0x24>)
 801bd5c:	69db      	ldr	r3, [r3, #28]
 801bd5e:	091b      	lsrs	r3, r3, #4
 801bd60:	f003 0307 	and.w	r3, r3, #7
 801bd64:	4904      	ldr	r1, [pc, #16]	; (801bd78 <HAL_RCC_GetPCLK1Freq+0x28>)
 801bd66:	5ccb      	ldrb	r3, [r1, r3]
 801bd68:	f003 031f 	and.w	r3, r3, #31
 801bd6c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801bd70:	4618      	mov	r0, r3
 801bd72:	bd80      	pop	{r7, pc}
 801bd74:	58024400 	.word	0x58024400
 801bd78:	080210f8 	.word	0x080210f8

0801bd7c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bd7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bd80:	b0c6      	sub	sp, #280	; 0x118
 801bd82:	af00      	add	r7, sp, #0
 801bd84:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801bd88:	2300      	movs	r3, #0
 801bd8a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801bd8e:	2300      	movs	r3, #0
 801bd90:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801bd94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd9c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801bda0:	2500      	movs	r5, #0
 801bda2:	ea54 0305 	orrs.w	r3, r4, r5
 801bda6:	d049      	beq.n	801be3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801bda8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bdac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bdae:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801bdb2:	d02f      	beq.n	801be14 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801bdb4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801bdb8:	d828      	bhi.n	801be0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801bdba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bdbe:	d01a      	beq.n	801bdf6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801bdc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bdc4:	d822      	bhi.n	801be0c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	d003      	beq.n	801bdd2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801bdca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bdce:	d007      	beq.n	801bde0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801bdd0:	e01c      	b.n	801be0c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bdd2:	4bab      	ldr	r3, [pc, #684]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bdd6:	4aaa      	ldr	r2, [pc, #680]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bdd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bddc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bdde:	e01a      	b.n	801be16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801bde0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bde4:	3308      	adds	r3, #8
 801bde6:	2102      	movs	r1, #2
 801bde8:	4618      	mov	r0, r3
 801bdea:	f002 fa49 	bl	801e280 <RCCEx_PLL2_Config>
 801bdee:	4603      	mov	r3, r0
 801bdf0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801bdf4:	e00f      	b.n	801be16 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801bdf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bdfa:	3328      	adds	r3, #40	; 0x28
 801bdfc:	2102      	movs	r1, #2
 801bdfe:	4618      	mov	r0, r3
 801be00:	f002 faf0 	bl	801e3e4 <RCCEx_PLL3_Config>
 801be04:	4603      	mov	r3, r0
 801be06:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801be0a:	e004      	b.n	801be16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801be0c:	2301      	movs	r3, #1
 801be0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801be12:	e000      	b.n	801be16 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801be14:	bf00      	nop
    }

    if (ret == HAL_OK)
 801be16:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d10a      	bne.n	801be34 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801be1e:	4b98      	ldr	r3, [pc, #608]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be22:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801be26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801be2c:	4a94      	ldr	r2, [pc, #592]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be2e:	430b      	orrs	r3, r1
 801be30:	6513      	str	r3, [r2, #80]	; 0x50
 801be32:	e003      	b.n	801be3c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801be34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801be38:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801be3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be44:	f402 7880 	and.w	r8, r2, #256	; 0x100
 801be48:	f04f 0900 	mov.w	r9, #0
 801be4c:	ea58 0309 	orrs.w	r3, r8, r9
 801be50:	d047      	beq.n	801bee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801be52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801be58:	2b04      	cmp	r3, #4
 801be5a:	d82a      	bhi.n	801beb2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801be5c:	a201      	add	r2, pc, #4	; (adr r2, 801be64 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801be5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801be62:	bf00      	nop
 801be64:	0801be79 	.word	0x0801be79
 801be68:	0801be87 	.word	0x0801be87
 801be6c:	0801be9d 	.word	0x0801be9d
 801be70:	0801bebb 	.word	0x0801bebb
 801be74:	0801bebb 	.word	0x0801bebb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801be78:	4b81      	ldr	r3, [pc, #516]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be7c:	4a80      	ldr	r2, [pc, #512]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801be82:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801be84:	e01a      	b.n	801bebc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801be86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be8a:	3308      	adds	r3, #8
 801be8c:	2100      	movs	r1, #0
 801be8e:	4618      	mov	r0, r3
 801be90:	f002 f9f6 	bl	801e280 <RCCEx_PLL2_Config>
 801be94:	4603      	mov	r3, r0
 801be96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801be9a:	e00f      	b.n	801bebc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801be9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bea0:	3328      	adds	r3, #40	; 0x28
 801bea2:	2100      	movs	r1, #0
 801bea4:	4618      	mov	r0, r3
 801bea6:	f002 fa9d 	bl	801e3e4 <RCCEx_PLL3_Config>
 801beaa:	4603      	mov	r3, r0
 801beac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801beb0:	e004      	b.n	801bebc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801beb2:	2301      	movs	r3, #1
 801beb4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801beb8:	e000      	b.n	801bebc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801beba:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bebc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d10a      	bne.n	801beda <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bec4:	4b6e      	ldr	r3, [pc, #440]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bec8:	f023 0107 	bic.w	r1, r3, #7
 801becc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bed2:	4a6b      	ldr	r2, [pc, #428]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bed4:	430b      	orrs	r3, r1
 801bed6:	6513      	str	r3, [r2, #80]	; 0x50
 801bed8:	e003      	b.n	801bee2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801beda:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bede:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801bee2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beea:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 801beee:	f04f 0b00 	mov.w	fp, #0
 801bef2:	ea5a 030b 	orrs.w	r3, sl, fp
 801bef6:	d05b      	beq.n	801bfb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801bef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801befc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801bf00:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801bf04:	d03b      	beq.n	801bf7e <HAL_RCCEx_PeriphCLKConfig+0x202>
 801bf06:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801bf0a:	d834      	bhi.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf0c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bf10:	d037      	beq.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0x206>
 801bf12:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bf16:	d82e      	bhi.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf18:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801bf1c:	d033      	beq.n	801bf86 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801bf1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801bf22:	d828      	bhi.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bf28:	d01a      	beq.n	801bf60 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801bf2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bf2e:	d822      	bhi.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	d003      	beq.n	801bf3c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 801bf34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bf38:	d007      	beq.n	801bf4a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801bf3a:	e01c      	b.n	801bf76 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bf3c:	4b50      	ldr	r3, [pc, #320]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bf40:	4a4f      	ldr	r2, [pc, #316]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bf46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf48:	e01e      	b.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bf4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf4e:	3308      	adds	r3, #8
 801bf50:	2100      	movs	r1, #0
 801bf52:	4618      	mov	r0, r3
 801bf54:	f002 f994 	bl	801e280 <RCCEx_PLL2_Config>
 801bf58:	4603      	mov	r3, r0
 801bf5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801bf5e:	e013      	b.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bf60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf64:	3328      	adds	r3, #40	; 0x28
 801bf66:	2100      	movs	r1, #0
 801bf68:	4618      	mov	r0, r3
 801bf6a:	f002 fa3b 	bl	801e3e4 <RCCEx_PLL3_Config>
 801bf6e:	4603      	mov	r3, r0
 801bf70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf74:	e008      	b.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801bf76:	2301      	movs	r3, #1
 801bf78:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bf7c:	e004      	b.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bf7e:	bf00      	nop
 801bf80:	e002      	b.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bf82:	bf00      	nop
 801bf84:	e000      	b.n	801bf88 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bf86:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf88:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	d10b      	bne.n	801bfa8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801bf90:	4b3b      	ldr	r3, [pc, #236]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf94:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801bf98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf9c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801bfa0:	4a37      	ldr	r2, [pc, #220]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bfa2:	430b      	orrs	r3, r1
 801bfa4:	6593      	str	r3, [r2, #88]	; 0x58
 801bfa6:	e003      	b.n	801bfb0 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bfa8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bfac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801bfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801bfbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801bfc0:	2300      	movs	r3, #0
 801bfc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801bfc6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801bfca:	460b      	mov	r3, r1
 801bfcc:	4313      	orrs	r3, r2
 801bfce:	d05d      	beq.n	801c08c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801bfd0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfd4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801bfd8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801bfdc:	d03b      	beq.n	801c056 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801bfde:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801bfe2:	d834      	bhi.n	801c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801bfe4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801bfe8:	d037      	beq.n	801c05a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801bfea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801bfee:	d82e      	bhi.n	801c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801bff0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801bff4:	d033      	beq.n	801c05e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801bff6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801bffa:	d828      	bhi.n	801c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801bffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c000:	d01a      	beq.n	801c038 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801c002:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c006:	d822      	bhi.n	801c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c008:	2b00      	cmp	r3, #0
 801c00a:	d003      	beq.n	801c014 <HAL_RCCEx_PeriphCLKConfig+0x298>
 801c00c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c010:	d007      	beq.n	801c022 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801c012:	e01c      	b.n	801c04e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c014:	4b1a      	ldr	r3, [pc, #104]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c018:	4a19      	ldr	r2, [pc, #100]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c01a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c01e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c020:	e01e      	b.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c022:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c026:	3308      	adds	r3, #8
 801c028:	2100      	movs	r1, #0
 801c02a:	4618      	mov	r0, r3
 801c02c:	f002 f928 	bl	801e280 <RCCEx_PLL2_Config>
 801c030:	4603      	mov	r3, r0
 801c032:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c036:	e013      	b.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c03c:	3328      	adds	r3, #40	; 0x28
 801c03e:	2100      	movs	r1, #0
 801c040:	4618      	mov	r0, r3
 801c042:	f002 f9cf 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c046:	4603      	mov	r3, r0
 801c048:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c04c:	e008      	b.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c04e:	2301      	movs	r3, #1
 801c050:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c054:	e004      	b.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c056:	bf00      	nop
 801c058:	e002      	b.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c05a:	bf00      	nop
 801c05c:	e000      	b.n	801c060 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c05e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c060:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c064:	2b00      	cmp	r3, #0
 801c066:	d10d      	bne.n	801c084 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c068:	4b05      	ldr	r3, [pc, #20]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c06c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 801c070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c074:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c078:	4a01      	ldr	r2, [pc, #4]	; (801c080 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c07a:	430b      	orrs	r3, r1
 801c07c:	6593      	str	r3, [r2, #88]	; 0x58
 801c07e:	e005      	b.n	801c08c <HAL_RCCEx_PeriphCLKConfig+0x310>
 801c080:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c088:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801c08c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c090:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c094:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 801c098:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801c09c:	2300      	movs	r3, #0
 801c09e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801c0a2:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801c0a6:	460b      	mov	r3, r1
 801c0a8:	4313      	orrs	r3, r2
 801c0aa:	d03a      	beq.n	801c122 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 801c0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c0b2:	2b30      	cmp	r3, #48	; 0x30
 801c0b4:	d01f      	beq.n	801c0f6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801c0b6:	2b30      	cmp	r3, #48	; 0x30
 801c0b8:	d819      	bhi.n	801c0ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c0ba:	2b20      	cmp	r3, #32
 801c0bc:	d00c      	beq.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801c0be:	2b20      	cmp	r3, #32
 801c0c0:	d815      	bhi.n	801c0ee <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c0c2:	2b00      	cmp	r3, #0
 801c0c4:	d019      	beq.n	801c0fa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801c0c6:	2b10      	cmp	r3, #16
 801c0c8:	d111      	bne.n	801c0ee <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c0ca:	4baa      	ldr	r3, [pc, #680]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c0cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c0ce:	4aa9      	ldr	r2, [pc, #676]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c0d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c0d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c0d6:	e011      	b.n	801c0fc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c0d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0dc:	3308      	adds	r3, #8
 801c0de:	2102      	movs	r1, #2
 801c0e0:	4618      	mov	r0, r3
 801c0e2:	f002 f8cd 	bl	801e280 <RCCEx_PLL2_Config>
 801c0e6:	4603      	mov	r3, r0
 801c0e8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c0ec:	e006      	b.n	801c0fc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c0ee:	2301      	movs	r3, #1
 801c0f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c0f4:	e002      	b.n	801c0fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c0f6:	bf00      	nop
 801c0f8:	e000      	b.n	801c0fc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c0fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c100:	2b00      	cmp	r3, #0
 801c102:	d10a      	bne.n	801c11a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801c104:	4b9b      	ldr	r3, [pc, #620]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c106:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c108:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801c10c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c112:	4a98      	ldr	r2, [pc, #608]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c114:	430b      	orrs	r3, r1
 801c116:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c118:	e003      	b.n	801c122 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c11a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c11e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c122:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c12a:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801c12e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c132:	2300      	movs	r3, #0
 801c134:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801c138:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 801c13c:	460b      	mov	r3, r1
 801c13e:	4313      	orrs	r3, r2
 801c140:	d051      	beq.n	801c1e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801c142:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c148:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c14c:	d035      	beq.n	801c1ba <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801c14e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c152:	d82e      	bhi.n	801c1b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c154:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c158:	d031      	beq.n	801c1be <HAL_RCCEx_PeriphCLKConfig+0x442>
 801c15a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c15e:	d828      	bhi.n	801c1b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c160:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c164:	d01a      	beq.n	801c19c <HAL_RCCEx_PeriphCLKConfig+0x420>
 801c166:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c16a:	d822      	bhi.n	801c1b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d003      	beq.n	801c178 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801c170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c174:	d007      	beq.n	801c186 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801c176:	e01c      	b.n	801c1b2 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c178:	4b7e      	ldr	r3, [pc, #504]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c17c:	4a7d      	ldr	r2, [pc, #500]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c17e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c182:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c184:	e01c      	b.n	801c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c186:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c18a:	3308      	adds	r3, #8
 801c18c:	2100      	movs	r1, #0
 801c18e:	4618      	mov	r0, r3
 801c190:	f002 f876 	bl	801e280 <RCCEx_PLL2_Config>
 801c194:	4603      	mov	r3, r0
 801c196:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c19a:	e011      	b.n	801c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c19c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1a0:	3328      	adds	r3, #40	; 0x28
 801c1a2:	2100      	movs	r1, #0
 801c1a4:	4618      	mov	r0, r3
 801c1a6:	f002 f91d 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c1aa:	4603      	mov	r3, r0
 801c1ac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c1b0:	e006      	b.n	801c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c1b2:	2301      	movs	r3, #1
 801c1b4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c1b8:	e002      	b.n	801c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c1ba:	bf00      	nop
 801c1bc:	e000      	b.n	801c1c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c1be:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c1c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c1c4:	2b00      	cmp	r3, #0
 801c1c6:	d10a      	bne.n	801c1de <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c1c8:	4b6a      	ldr	r3, [pc, #424]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c1cc:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801c1d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c1d6:	4a67      	ldr	r2, [pc, #412]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1d8:	430b      	orrs	r3, r1
 801c1da:	6513      	str	r3, [r2, #80]	; 0x50
 801c1dc:	e003      	b.n	801c1e6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c1de:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c1e2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c1e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1ee:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801c1f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c1fc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801c200:	460b      	mov	r3, r1
 801c202:	4313      	orrs	r3, r2
 801c204:	d053      	beq.n	801c2ae <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801c206:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c20a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c20c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c210:	d033      	beq.n	801c27a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801c212:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c216:	d82c      	bhi.n	801c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c218:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c21c:	d02f      	beq.n	801c27e <HAL_RCCEx_PeriphCLKConfig+0x502>
 801c21e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c222:	d826      	bhi.n	801c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c224:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c228:	d02b      	beq.n	801c282 <HAL_RCCEx_PeriphCLKConfig+0x506>
 801c22a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c22e:	d820      	bhi.n	801c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c230:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c234:	d012      	beq.n	801c25c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801c236:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c23a:	d81a      	bhi.n	801c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d022      	beq.n	801c286 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801c240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c244:	d115      	bne.n	801c272 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c24a:	3308      	adds	r3, #8
 801c24c:	2101      	movs	r1, #1
 801c24e:	4618      	mov	r0, r3
 801c250:	f002 f816 	bl	801e280 <RCCEx_PLL2_Config>
 801c254:	4603      	mov	r3, r0
 801c256:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c25a:	e015      	b.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c25c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c260:	3328      	adds	r3, #40	; 0x28
 801c262:	2101      	movs	r1, #1
 801c264:	4618      	mov	r0, r3
 801c266:	f002 f8bd 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c26a:	4603      	mov	r3, r0
 801c26c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c270:	e00a      	b.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c272:	2301      	movs	r3, #1
 801c274:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c278:	e006      	b.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c27a:	bf00      	nop
 801c27c:	e004      	b.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c27e:	bf00      	nop
 801c280:	e002      	b.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c282:	bf00      	nop
 801c284:	e000      	b.n	801c288 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c286:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c288:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c28c:	2b00      	cmp	r3, #0
 801c28e:	d10a      	bne.n	801c2a6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c290:	4b38      	ldr	r3, [pc, #224]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c294:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801c298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c29c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c29e:	4a35      	ldr	r2, [pc, #212]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c2a0:	430b      	orrs	r3, r1
 801c2a2:	6513      	str	r3, [r2, #80]	; 0x50
 801c2a4:	e003      	b.n	801c2ae <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c2a6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c2aa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c2ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2b6:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801c2ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c2be:	2300      	movs	r3, #0
 801c2c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c2c4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c2c8:	460b      	mov	r3, r1
 801c2ca:	4313      	orrs	r3, r2
 801c2cc:	d058      	beq.n	801c380 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801c2ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c2d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c2da:	d033      	beq.n	801c344 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 801c2dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c2e0:	d82c      	bhi.n	801c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c2e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c2e6:	d02f      	beq.n	801c348 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801c2e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c2ec:	d826      	bhi.n	801c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c2ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c2f2:	d02b      	beq.n	801c34c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801c2f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c2f8:	d820      	bhi.n	801c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c2fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c2fe:	d012      	beq.n	801c326 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801c300:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c304:	d81a      	bhi.n	801c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c306:	2b00      	cmp	r3, #0
 801c308:	d022      	beq.n	801c350 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801c30a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c30e:	d115      	bne.n	801c33c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c314:	3308      	adds	r3, #8
 801c316:	2101      	movs	r1, #1
 801c318:	4618      	mov	r0, r3
 801c31a:	f001 ffb1 	bl	801e280 <RCCEx_PLL2_Config>
 801c31e:	4603      	mov	r3, r0
 801c320:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c324:	e015      	b.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c32a:	3328      	adds	r3, #40	; 0x28
 801c32c:	2101      	movs	r1, #1
 801c32e:	4618      	mov	r0, r3
 801c330:	f002 f858 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c334:	4603      	mov	r3, r0
 801c336:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c33a:	e00a      	b.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801c33c:	2301      	movs	r3, #1
 801c33e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c342:	e006      	b.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c344:	bf00      	nop
 801c346:	e004      	b.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c348:	bf00      	nop
 801c34a:	e002      	b.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c34c:	bf00      	nop
 801c34e:	e000      	b.n	801c352 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c350:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c352:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c356:	2b00      	cmp	r3, #0
 801c358:	d10e      	bne.n	801c378 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c35a:	4b06      	ldr	r3, [pc, #24]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c35c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c35e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c366:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c36a:	4a02      	ldr	r2, [pc, #8]	; (801c374 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c36c:	430b      	orrs	r3, r1
 801c36e:	6593      	str	r3, [r2, #88]	; 0x58
 801c370:	e006      	b.n	801c380 <HAL_RCCEx_PeriphCLKConfig+0x604>
 801c372:	bf00      	nop
 801c374:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c378:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c37c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c380:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c384:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c388:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801c38c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c390:	2300      	movs	r3, #0
 801c392:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c396:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801c39a:	460b      	mov	r3, r1
 801c39c:	4313      	orrs	r3, r2
 801c39e:	d037      	beq.n	801c410 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801c3a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c3a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c3aa:	d00e      	beq.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801c3ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c3b0:	d816      	bhi.n	801c3e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 801c3b2:	2b00      	cmp	r3, #0
 801c3b4:	d018      	beq.n	801c3e8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801c3b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c3ba:	d111      	bne.n	801c3e0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c3bc:	4bc4      	ldr	r3, [pc, #784]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c3be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3c0:	4ac3      	ldr	r2, [pc, #780]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c3c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c3c6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c3c8:	e00f      	b.n	801c3ea <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c3ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3ce:	3308      	adds	r3, #8
 801c3d0:	2101      	movs	r1, #1
 801c3d2:	4618      	mov	r0, r3
 801c3d4:	f001 ff54 	bl	801e280 <RCCEx_PLL2_Config>
 801c3d8:	4603      	mov	r3, r0
 801c3da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c3de:	e004      	b.n	801c3ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c3e0:	2301      	movs	r3, #1
 801c3e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c3e6:	e000      	b.n	801c3ea <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801c3e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c3ea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	d10a      	bne.n	801c408 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801c3f2:	4bb7      	ldr	r3, [pc, #732]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c3f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c3f6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801c3fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c400:	4ab3      	ldr	r2, [pc, #716]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c402:	430b      	orrs	r3, r1
 801c404:	6513      	str	r3, [r2, #80]	; 0x50
 801c406:	e003      	b.n	801c410 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c408:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c40c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801c410:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c414:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c418:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 801c41c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c420:	2300      	movs	r3, #0
 801c422:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801c42a:	460b      	mov	r3, r1
 801c42c:	4313      	orrs	r3, r2
 801c42e:	d039      	beq.n	801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801c430:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c434:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c436:	2b03      	cmp	r3, #3
 801c438:	d81c      	bhi.n	801c474 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801c43a:	a201      	add	r2, pc, #4	; (adr r2, 801c440 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801c43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c440:	0801c47d 	.word	0x0801c47d
 801c444:	0801c451 	.word	0x0801c451
 801c448:	0801c45f 	.word	0x0801c45f
 801c44c:	0801c47d 	.word	0x0801c47d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c450:	4b9f      	ldr	r3, [pc, #636]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c454:	4a9e      	ldr	r2, [pc, #632]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c45a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c45c:	e00f      	b.n	801c47e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c45e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c462:	3308      	adds	r3, #8
 801c464:	2102      	movs	r1, #2
 801c466:	4618      	mov	r0, r3
 801c468:	f001 ff0a 	bl	801e280 <RCCEx_PLL2_Config>
 801c46c:	4603      	mov	r3, r0
 801c46e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c472:	e004      	b.n	801c47e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c474:	2301      	movs	r3, #1
 801c476:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c47a:	e000      	b.n	801c47e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801c47c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c47e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c482:	2b00      	cmp	r3, #0
 801c484:	d10a      	bne.n	801c49c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c486:	4b92      	ldr	r3, [pc, #584]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c48a:	f023 0103 	bic.w	r1, r3, #3
 801c48e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c494:	4a8e      	ldr	r2, [pc, #568]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c496:	430b      	orrs	r3, r1
 801c498:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c49a:	e003      	b.n	801c4a4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c49c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c4a0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c4a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4ac:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801c4b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c4b4:	2300      	movs	r3, #0
 801c4b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c4ba:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c4be:	460b      	mov	r3, r1
 801c4c0:	4313      	orrs	r3, r2
 801c4c2:	f000 8099 	beq.w	801c5f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c4c6:	4b83      	ldr	r3, [pc, #524]	; (801c6d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c4c8:	681b      	ldr	r3, [r3, #0]
 801c4ca:	4a82      	ldr	r2, [pc, #520]	; (801c6d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c4cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c4d0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c4d2:	f7f8 fed5 	bl	8015280 <HAL_GetTick>
 801c4d6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c4da:	e00b      	b.n	801c4f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c4dc:	f7f8 fed0 	bl	8015280 <HAL_GetTick>
 801c4e0:	4602      	mov	r2, r0
 801c4e2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c4e6:	1ad3      	subs	r3, r2, r3
 801c4e8:	2b64      	cmp	r3, #100	; 0x64
 801c4ea:	d903      	bls.n	801c4f4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 801c4ec:	2303      	movs	r3, #3
 801c4ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c4f2:	e005      	b.n	801c500 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c4f4:	4b77      	ldr	r3, [pc, #476]	; (801c6d4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d0ed      	beq.n	801c4dc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801c500:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c504:	2b00      	cmp	r3, #0
 801c506:	d173      	bne.n	801c5f0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c508:	4b71      	ldr	r3, [pc, #452]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c50a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c50c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c510:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c514:	4053      	eors	r3, r2
 801c516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d015      	beq.n	801c54a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c51e:	4b6c      	ldr	r3, [pc, #432]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c526:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c52a:	4b69      	ldr	r3, [pc, #420]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c52e:	4a68      	ldr	r2, [pc, #416]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c534:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c536:	4b66      	ldr	r3, [pc, #408]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c53a:	4a65      	ldr	r2, [pc, #404]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c53c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c540:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c542:	4a63      	ldr	r2, [pc, #396]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c544:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c548:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801c54a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c54e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c556:	d118      	bne.n	801c58a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c558:	f7f8 fe92 	bl	8015280 <HAL_GetTick>
 801c55c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c560:	e00d      	b.n	801c57e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c562:	f7f8 fe8d 	bl	8015280 <HAL_GetTick>
 801c566:	4602      	mov	r2, r0
 801c568:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c56c:	1ad2      	subs	r2, r2, r3
 801c56e:	f241 3388 	movw	r3, #5000	; 0x1388
 801c572:	429a      	cmp	r2, r3
 801c574:	d903      	bls.n	801c57e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801c576:	2303      	movs	r3, #3
 801c578:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 801c57c:	e005      	b.n	801c58a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c57e:	4b54      	ldr	r3, [pc, #336]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c582:	f003 0302 	and.w	r3, r3, #2
 801c586:	2b00      	cmp	r3, #0
 801c588:	d0eb      	beq.n	801c562 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801c58a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d129      	bne.n	801c5e6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c592:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c596:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c59a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c59e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c5a2:	d10e      	bne.n	801c5c2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 801c5a4:	4b4a      	ldr	r3, [pc, #296]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5a6:	691b      	ldr	r3, [r3, #16]
 801c5a8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801c5ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c5b4:	091a      	lsrs	r2, r3, #4
 801c5b6:	4b48      	ldr	r3, [pc, #288]	; (801c6d8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801c5b8:	4013      	ands	r3, r2
 801c5ba:	4a45      	ldr	r2, [pc, #276]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5bc:	430b      	orrs	r3, r1
 801c5be:	6113      	str	r3, [r2, #16]
 801c5c0:	e005      	b.n	801c5ce <HAL_RCCEx_PeriphCLKConfig+0x852>
 801c5c2:	4b43      	ldr	r3, [pc, #268]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5c4:	691b      	ldr	r3, [r3, #16]
 801c5c6:	4a42      	ldr	r2, [pc, #264]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c5cc:	6113      	str	r3, [r2, #16]
 801c5ce:	4b40      	ldr	r3, [pc, #256]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5d0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c5da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c5de:	4a3c      	ldr	r2, [pc, #240]	; (801c6d0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5e0:	430b      	orrs	r3, r1
 801c5e2:	6713      	str	r3, [r2, #112]	; 0x70
 801c5e4:	e008      	b.n	801c5f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c5e6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c5ea:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801c5ee:	e003      	b.n	801c5f8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c5f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c5f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801c5f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c600:	f002 0301 	and.w	r3, r2, #1
 801c604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c608:	2300      	movs	r3, #0
 801c60a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c60e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801c612:	460b      	mov	r3, r1
 801c614:	4313      	orrs	r3, r2
 801c616:	f000 808f 	beq.w	801c738 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801c61a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c61e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c620:	2b28      	cmp	r3, #40	; 0x28
 801c622:	d871      	bhi.n	801c708 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801c624:	a201      	add	r2, pc, #4	; (adr r2, 801c62c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801c626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c62a:	bf00      	nop
 801c62c:	0801c711 	.word	0x0801c711
 801c630:	0801c709 	.word	0x0801c709
 801c634:	0801c709 	.word	0x0801c709
 801c638:	0801c709 	.word	0x0801c709
 801c63c:	0801c709 	.word	0x0801c709
 801c640:	0801c709 	.word	0x0801c709
 801c644:	0801c709 	.word	0x0801c709
 801c648:	0801c709 	.word	0x0801c709
 801c64c:	0801c6dd 	.word	0x0801c6dd
 801c650:	0801c709 	.word	0x0801c709
 801c654:	0801c709 	.word	0x0801c709
 801c658:	0801c709 	.word	0x0801c709
 801c65c:	0801c709 	.word	0x0801c709
 801c660:	0801c709 	.word	0x0801c709
 801c664:	0801c709 	.word	0x0801c709
 801c668:	0801c709 	.word	0x0801c709
 801c66c:	0801c6f3 	.word	0x0801c6f3
 801c670:	0801c709 	.word	0x0801c709
 801c674:	0801c709 	.word	0x0801c709
 801c678:	0801c709 	.word	0x0801c709
 801c67c:	0801c709 	.word	0x0801c709
 801c680:	0801c709 	.word	0x0801c709
 801c684:	0801c709 	.word	0x0801c709
 801c688:	0801c709 	.word	0x0801c709
 801c68c:	0801c711 	.word	0x0801c711
 801c690:	0801c709 	.word	0x0801c709
 801c694:	0801c709 	.word	0x0801c709
 801c698:	0801c709 	.word	0x0801c709
 801c69c:	0801c709 	.word	0x0801c709
 801c6a0:	0801c709 	.word	0x0801c709
 801c6a4:	0801c709 	.word	0x0801c709
 801c6a8:	0801c709 	.word	0x0801c709
 801c6ac:	0801c711 	.word	0x0801c711
 801c6b0:	0801c709 	.word	0x0801c709
 801c6b4:	0801c709 	.word	0x0801c709
 801c6b8:	0801c709 	.word	0x0801c709
 801c6bc:	0801c709 	.word	0x0801c709
 801c6c0:	0801c709 	.word	0x0801c709
 801c6c4:	0801c709 	.word	0x0801c709
 801c6c8:	0801c709 	.word	0x0801c709
 801c6cc:	0801c711 	.word	0x0801c711
 801c6d0:	58024400 	.word	0x58024400
 801c6d4:	58024800 	.word	0x58024800
 801c6d8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c6dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6e0:	3308      	adds	r3, #8
 801c6e2:	2101      	movs	r1, #1
 801c6e4:	4618      	mov	r0, r3
 801c6e6:	f001 fdcb 	bl	801e280 <RCCEx_PLL2_Config>
 801c6ea:	4603      	mov	r3, r0
 801c6ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c6f0:	e00f      	b.n	801c712 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c6f6:	3328      	adds	r3, #40	; 0x28
 801c6f8:	2101      	movs	r1, #1
 801c6fa:	4618      	mov	r0, r3
 801c6fc:	f001 fe72 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c700:	4603      	mov	r3, r0
 801c702:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c706:	e004      	b.n	801c712 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c708:	2301      	movs	r3, #1
 801c70a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c70e:	e000      	b.n	801c712 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801c710:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c712:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c716:	2b00      	cmp	r3, #0
 801c718:	d10a      	bne.n	801c730 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801c71a:	4bbf      	ldr	r3, [pc, #764]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c71c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c71e:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801c722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c726:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c728:	4abb      	ldr	r2, [pc, #748]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c72a:	430b      	orrs	r3, r1
 801c72c:	6553      	str	r3, [r2, #84]	; 0x54
 801c72e:	e003      	b.n	801c738 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c730:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c734:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801c738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c740:	f002 0302 	and.w	r3, r2, #2
 801c744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c748:	2300      	movs	r3, #0
 801c74a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c74e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801c752:	460b      	mov	r3, r1
 801c754:	4313      	orrs	r3, r2
 801c756:	d041      	beq.n	801c7dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801c758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c75c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c75e:	2b05      	cmp	r3, #5
 801c760:	d824      	bhi.n	801c7ac <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801c762:	a201      	add	r2, pc, #4	; (adr r2, 801c768 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801c764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c768:	0801c7b5 	.word	0x0801c7b5
 801c76c:	0801c781 	.word	0x0801c781
 801c770:	0801c797 	.word	0x0801c797
 801c774:	0801c7b5 	.word	0x0801c7b5
 801c778:	0801c7b5 	.word	0x0801c7b5
 801c77c:	0801c7b5 	.word	0x0801c7b5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c780:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c784:	3308      	adds	r3, #8
 801c786:	2101      	movs	r1, #1
 801c788:	4618      	mov	r0, r3
 801c78a:	f001 fd79 	bl	801e280 <RCCEx_PLL2_Config>
 801c78e:	4603      	mov	r3, r0
 801c790:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c794:	e00f      	b.n	801c7b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c79a:	3328      	adds	r3, #40	; 0x28
 801c79c:	2101      	movs	r1, #1
 801c79e:	4618      	mov	r0, r3
 801c7a0:	f001 fe20 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c7a4:	4603      	mov	r3, r0
 801c7a6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c7aa:	e004      	b.n	801c7b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c7ac:	2301      	movs	r3, #1
 801c7ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c7b2:	e000      	b.n	801c7b6 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801c7b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c7b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d10a      	bne.n	801c7d4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801c7be:	4b96      	ldr	r3, [pc, #600]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c7c2:	f023 0107 	bic.w	r1, r3, #7
 801c7c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c7cc:	4a92      	ldr	r2, [pc, #584]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c7ce:	430b      	orrs	r3, r1
 801c7d0:	6553      	str	r3, [r2, #84]	; 0x54
 801c7d2:	e003      	b.n	801c7dc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c7d4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c7d8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7e4:	f002 0304 	and.w	r3, r2, #4
 801c7e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c7ec:	2300      	movs	r3, #0
 801c7ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c7f2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c7f6:	460b      	mov	r3, r1
 801c7f8:	4313      	orrs	r3, r2
 801c7fa:	d044      	beq.n	801c886 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801c7fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c804:	2b05      	cmp	r3, #5
 801c806:	d825      	bhi.n	801c854 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 801c808:	a201      	add	r2, pc, #4	; (adr r2, 801c810 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801c80a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c80e:	bf00      	nop
 801c810:	0801c85d 	.word	0x0801c85d
 801c814:	0801c829 	.word	0x0801c829
 801c818:	0801c83f 	.word	0x0801c83f
 801c81c:	0801c85d 	.word	0x0801c85d
 801c820:	0801c85d 	.word	0x0801c85d
 801c824:	0801c85d 	.word	0x0801c85d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c82c:	3308      	adds	r3, #8
 801c82e:	2101      	movs	r1, #1
 801c830:	4618      	mov	r0, r3
 801c832:	f001 fd25 	bl	801e280 <RCCEx_PLL2_Config>
 801c836:	4603      	mov	r3, r0
 801c838:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c83c:	e00f      	b.n	801c85e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c842:	3328      	adds	r3, #40	; 0x28
 801c844:	2101      	movs	r1, #1
 801c846:	4618      	mov	r0, r3
 801c848:	f001 fdcc 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c84c:	4603      	mov	r3, r0
 801c84e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c852:	e004      	b.n	801c85e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c854:	2301      	movs	r3, #1
 801c856:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c85a:	e000      	b.n	801c85e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801c85c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c85e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c862:	2b00      	cmp	r3, #0
 801c864:	d10b      	bne.n	801c87e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c866:	4b6c      	ldr	r3, [pc, #432]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c86a:	f023 0107 	bic.w	r1, r3, #7
 801c86e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c876:	4a68      	ldr	r2, [pc, #416]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c878:	430b      	orrs	r3, r1
 801c87a:	6593      	str	r3, [r2, #88]	; 0x58
 801c87c:	e003      	b.n	801c886 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c87e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c882:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c88e:	f002 0320 	and.w	r3, r2, #32
 801c892:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c896:	2300      	movs	r3, #0
 801c898:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801c89c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801c8a0:	460b      	mov	r3, r1
 801c8a2:	4313      	orrs	r3, r2
 801c8a4:	d055      	beq.n	801c952 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801c8a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c8ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c8b2:	d033      	beq.n	801c91c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801c8b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c8b8:	d82c      	bhi.n	801c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c8be:	d02f      	beq.n	801c920 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 801c8c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c8c4:	d826      	bhi.n	801c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c8c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c8ca:	d02b      	beq.n	801c924 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 801c8cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c8d0:	d820      	bhi.n	801c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c8d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c8d6:	d012      	beq.n	801c8fe <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801c8d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c8dc:	d81a      	bhi.n	801c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d022      	beq.n	801c928 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801c8e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c8e6:	d115      	bne.n	801c914 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c8e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8ec:	3308      	adds	r3, #8
 801c8ee:	2100      	movs	r1, #0
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	f001 fcc5 	bl	801e280 <RCCEx_PLL2_Config>
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c8fc:	e015      	b.n	801c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c902:	3328      	adds	r3, #40	; 0x28
 801c904:	2102      	movs	r1, #2
 801c906:	4618      	mov	r0, r3
 801c908:	f001 fd6c 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c90c:	4603      	mov	r3, r0
 801c90e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c912:	e00a      	b.n	801c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c914:	2301      	movs	r3, #1
 801c916:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c91a:	e006      	b.n	801c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c91c:	bf00      	nop
 801c91e:	e004      	b.n	801c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c920:	bf00      	nop
 801c922:	e002      	b.n	801c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c924:	bf00      	nop
 801c926:	e000      	b.n	801c92a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c928:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c92a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d10b      	bne.n	801c94a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c932:	4b39      	ldr	r3, [pc, #228]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c936:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c93a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c93e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c942:	4a35      	ldr	r2, [pc, #212]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c944:	430b      	orrs	r3, r1
 801c946:	6553      	str	r3, [r2, #84]	; 0x54
 801c948:	e003      	b.n	801c952 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c94a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c94e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801c952:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c95a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801c95e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c962:	2300      	movs	r3, #0
 801c964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c968:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801c96c:	460b      	mov	r3, r1
 801c96e:	4313      	orrs	r3, r2
 801c970:	d058      	beq.n	801ca24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801c972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c97a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c97e:	d033      	beq.n	801c9e8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801c980:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c984:	d82c      	bhi.n	801c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c98a:	d02f      	beq.n	801c9ec <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801c98c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c990:	d826      	bhi.n	801c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c992:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c996:	d02b      	beq.n	801c9f0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801c998:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801c99c:	d820      	bhi.n	801c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c99e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c9a2:	d012      	beq.n	801c9ca <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801c9a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c9a8:	d81a      	bhi.n	801c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d022      	beq.n	801c9f4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801c9ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801c9b2:	d115      	bne.n	801c9e0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c9b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9b8:	3308      	adds	r3, #8
 801c9ba:	2100      	movs	r1, #0
 801c9bc:	4618      	mov	r0, r3
 801c9be:	f001 fc5f 	bl	801e280 <RCCEx_PLL2_Config>
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801c9c8:	e015      	b.n	801c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9ce:	3328      	adds	r3, #40	; 0x28
 801c9d0:	2102      	movs	r1, #2
 801c9d2:	4618      	mov	r0, r3
 801c9d4:	f001 fd06 	bl	801e3e4 <RCCEx_PLL3_Config>
 801c9d8:	4603      	mov	r3, r0
 801c9da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801c9de:	e00a      	b.n	801c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c9e0:	2301      	movs	r3, #1
 801c9e2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c9e6:	e006      	b.n	801c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801c9e8:	bf00      	nop
 801c9ea:	e004      	b.n	801c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801c9ec:	bf00      	nop
 801c9ee:	e002      	b.n	801c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801c9f0:	bf00      	nop
 801c9f2:	e000      	b.n	801c9f6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801c9f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c9f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d10e      	bne.n	801ca1c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801c9fe:	4b06      	ldr	r3, [pc, #24]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ca00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca02:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801ca06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ca0e:	4a02      	ldr	r2, [pc, #8]	; (801ca18 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ca10:	430b      	orrs	r3, r1
 801ca12:	6593      	str	r3, [r2, #88]	; 0x58
 801ca14:	e006      	b.n	801ca24 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801ca16:	bf00      	nop
 801ca18:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca20:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ca24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca2c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801ca30:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801ca34:	2300      	movs	r3, #0
 801ca36:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801ca3a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801ca3e:	460b      	mov	r3, r1
 801ca40:	4313      	orrs	r3, r2
 801ca42:	d055      	beq.n	801caf0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801ca44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ca4c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801ca50:	d033      	beq.n	801caba <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801ca52:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801ca56:	d82c      	bhi.n	801cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801ca58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ca5c:	d02f      	beq.n	801cabe <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801ca5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ca62:	d826      	bhi.n	801cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801ca64:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801ca68:	d02b      	beq.n	801cac2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801ca6a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801ca6e:	d820      	bhi.n	801cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801ca70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ca74:	d012      	beq.n	801ca9c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801ca76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801ca7a:	d81a      	bhi.n	801cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801ca7c:	2b00      	cmp	r3, #0
 801ca7e:	d022      	beq.n	801cac6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801ca80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ca84:	d115      	bne.n	801cab2 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ca86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca8a:	3308      	adds	r3, #8
 801ca8c:	2100      	movs	r1, #0
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f001 fbf6 	bl	801e280 <RCCEx_PLL2_Config>
 801ca94:	4603      	mov	r3, r0
 801ca96:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801ca9a:	e015      	b.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ca9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801caa0:	3328      	adds	r3, #40	; 0x28
 801caa2:	2102      	movs	r1, #2
 801caa4:	4618      	mov	r0, r3
 801caa6:	f001 fc9d 	bl	801e3e4 <RCCEx_PLL3_Config>
 801caaa:	4603      	mov	r3, r0
 801caac:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801cab0:	e00a      	b.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cab2:	2301      	movs	r3, #1
 801cab4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cab8:	e006      	b.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801caba:	bf00      	nop
 801cabc:	e004      	b.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cabe:	bf00      	nop
 801cac0:	e002      	b.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cac2:	bf00      	nop
 801cac4:	e000      	b.n	801cac8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cac6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cac8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cacc:	2b00      	cmp	r3, #0
 801cace:	d10b      	bne.n	801cae8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801cad0:	4ba0      	ldr	r3, [pc, #640]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cad4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801cad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cadc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cae0:	4a9c      	ldr	r2, [pc, #624]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cae2:	430b      	orrs	r3, r1
 801cae4:	6593      	str	r3, [r2, #88]	; 0x58
 801cae6:	e003      	b.n	801caf0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cae8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801caec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801caf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801caf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caf8:	f002 0308 	and.w	r3, r2, #8
 801cafc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cb00:	2300      	movs	r3, #0
 801cb02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cb06:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801cb0a:	460b      	mov	r3, r1
 801cb0c:	4313      	orrs	r3, r2
 801cb0e:	d01e      	beq.n	801cb4e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801cb10:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cb1c:	d10c      	bne.n	801cb38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cb1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb22:	3328      	adds	r3, #40	; 0x28
 801cb24:	2102      	movs	r1, #2
 801cb26:	4618      	mov	r0, r3
 801cb28:	f001 fc5c 	bl	801e3e4 <RCCEx_PLL3_Config>
 801cb2c:	4603      	mov	r3, r0
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	d002      	beq.n	801cb38 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801cb32:	2301      	movs	r3, #1
 801cb34:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801cb38:	4b86      	ldr	r3, [pc, #536]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cb3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801cb40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb48:	4a82      	ldr	r2, [pc, #520]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb4a:	430b      	orrs	r3, r1
 801cb4c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801cb4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb56:	f002 0310 	and.w	r3, r2, #16
 801cb5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cb5e:	2300      	movs	r3, #0
 801cb60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cb64:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801cb68:	460b      	mov	r3, r1
 801cb6a:	4313      	orrs	r3, r2
 801cb6c:	d01e      	beq.n	801cbac <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801cb6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cb76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cb7a:	d10c      	bne.n	801cb96 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cb7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb80:	3328      	adds	r3, #40	; 0x28
 801cb82:	2102      	movs	r1, #2
 801cb84:	4618      	mov	r0, r3
 801cb86:	f001 fc2d 	bl	801e3e4 <RCCEx_PLL3_Config>
 801cb8a:	4603      	mov	r3, r0
 801cb8c:	2b00      	cmp	r3, #0
 801cb8e:	d002      	beq.n	801cb96 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 801cb90:	2301      	movs	r3, #1
 801cb92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801cb96:	4b6f      	ldr	r3, [pc, #444]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801cb9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cba6:	4a6b      	ldr	r2, [pc, #428]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cba8:	430b      	orrs	r3, r1
 801cbaa:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801cbac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbb4:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801cbb8:	67bb      	str	r3, [r7, #120]	; 0x78
 801cbba:	2300      	movs	r3, #0
 801cbbc:	67fb      	str	r3, [r7, #124]	; 0x7c
 801cbbe:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801cbc2:	460b      	mov	r3, r1
 801cbc4:	4313      	orrs	r3, r2
 801cbc6:	d03e      	beq.n	801cc46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801cbc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cbd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cbd4:	d022      	beq.n	801cc1c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801cbd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cbda:	d81b      	bhi.n	801cc14 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d003      	beq.n	801cbe8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 801cbe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cbe4:	d00b      	beq.n	801cbfe <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801cbe6:	e015      	b.n	801cc14 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cbe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbec:	3308      	adds	r3, #8
 801cbee:	2100      	movs	r1, #0
 801cbf0:	4618      	mov	r0, r3
 801cbf2:	f001 fb45 	bl	801e280 <RCCEx_PLL2_Config>
 801cbf6:	4603      	mov	r3, r0
 801cbf8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cbfc:	e00f      	b.n	801cc1e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cbfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc02:	3328      	adds	r3, #40	; 0x28
 801cc04:	2102      	movs	r1, #2
 801cc06:	4618      	mov	r0, r3
 801cc08:	f001 fbec 	bl	801e3e4 <RCCEx_PLL3_Config>
 801cc0c:	4603      	mov	r3, r0
 801cc0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cc12:	e004      	b.n	801cc1e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cc14:	2301      	movs	r3, #1
 801cc16:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cc1a:	e000      	b.n	801cc1e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 801cc1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc1e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc22:	2b00      	cmp	r3, #0
 801cc24:	d10b      	bne.n	801cc3e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cc26:	4b4b      	ldr	r3, [pc, #300]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc2a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801cc2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cc36:	4a47      	ldr	r2, [pc, #284]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc38:	430b      	orrs	r3, r1
 801cc3a:	6593      	str	r3, [r2, #88]	; 0x58
 801cc3c:	e003      	b.n	801cc46 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc3e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc42:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801cc46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc4e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801cc52:	673b      	str	r3, [r7, #112]	; 0x70
 801cc54:	2300      	movs	r3, #0
 801cc56:	677b      	str	r3, [r7, #116]	; 0x74
 801cc58:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801cc5c:	460b      	mov	r3, r1
 801cc5e:	4313      	orrs	r3, r2
 801cc60:	d03b      	beq.n	801ccda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801cc62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cc6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801cc6e:	d01f      	beq.n	801ccb0 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801cc70:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801cc74:	d818      	bhi.n	801cca8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801cc76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801cc7a:	d003      	beq.n	801cc84 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 801cc7c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801cc80:	d007      	beq.n	801cc92 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801cc82:	e011      	b.n	801cca8 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cc84:	4b33      	ldr	r3, [pc, #204]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc88:	4a32      	ldr	r2, [pc, #200]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc8a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cc8e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801cc90:	e00f      	b.n	801ccb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cc92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc96:	3328      	adds	r3, #40	; 0x28
 801cc98:	2101      	movs	r1, #1
 801cc9a:	4618      	mov	r0, r3
 801cc9c:	f001 fba2 	bl	801e3e4 <RCCEx_PLL3_Config>
 801cca0:	4603      	mov	r3, r0
 801cca2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801cca6:	e004      	b.n	801ccb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cca8:	2301      	movs	r3, #1
 801ccaa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ccae:	e000      	b.n	801ccb2 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 801ccb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ccb2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ccb6:	2b00      	cmp	r3, #0
 801ccb8:	d10b      	bne.n	801ccd2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801ccba:	4b26      	ldr	r3, [pc, #152]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ccbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ccbe:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801ccc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ccca:	4a22      	ldr	r2, [pc, #136]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cccc:	430b      	orrs	r3, r1
 801ccce:	6553      	str	r3, [r2, #84]	; 0x54
 801ccd0:	e003      	b.n	801ccda <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ccd2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ccd6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801ccda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccde:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cce2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801cce6:	66bb      	str	r3, [r7, #104]	; 0x68
 801cce8:	2300      	movs	r3, #0
 801ccea:	66fb      	str	r3, [r7, #108]	; 0x6c
 801ccec:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801ccf0:	460b      	mov	r3, r1
 801ccf2:	4313      	orrs	r3, r2
 801ccf4:	d034      	beq.n	801cd60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801ccf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	d003      	beq.n	801cd08 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801cd00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cd04:	d007      	beq.n	801cd16 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801cd06:	e011      	b.n	801cd2c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd08:	4b12      	ldr	r3, [pc, #72]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd0c:	4a11      	ldr	r2, [pc, #68]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cd12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cd14:	e00e      	b.n	801cd34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cd16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd1a:	3308      	adds	r3, #8
 801cd1c:	2102      	movs	r1, #2
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f001 faae 	bl	801e280 <RCCEx_PLL2_Config>
 801cd24:	4603      	mov	r3, r0
 801cd26:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cd2a:	e003      	b.n	801cd34 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 801cd2c:	2301      	movs	r3, #1
 801cd2e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cd32:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d10d      	bne.n	801cd58 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801cd3c:	4b05      	ldr	r3, [pc, #20]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cd40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801cd44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd4a:	4a02      	ldr	r2, [pc, #8]	; (801cd54 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd4c:	430b      	orrs	r3, r1
 801cd4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 801cd50:	e006      	b.n	801cd60 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801cd52:	bf00      	nop
 801cd54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd5c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801cd60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd68:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801cd6c:	663b      	str	r3, [r7, #96]	; 0x60
 801cd6e:	2300      	movs	r3, #0
 801cd70:	667b      	str	r3, [r7, #100]	; 0x64
 801cd72:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801cd76:	460b      	mov	r3, r1
 801cd78:	4313      	orrs	r3, r2
 801cd7a:	d00c      	beq.n	801cd96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cd7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd80:	3328      	adds	r3, #40	; 0x28
 801cd82:	2102      	movs	r1, #2
 801cd84:	4618      	mov	r0, r3
 801cd86:	f001 fb2d 	bl	801e3e4 <RCCEx_PLL3_Config>
 801cd8a:	4603      	mov	r3, r0
 801cd8c:	2b00      	cmp	r3, #0
 801cd8e:	d002      	beq.n	801cd96 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 801cd90:	2301      	movs	r3, #1
 801cd92:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801cd96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd9e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801cda2:	65bb      	str	r3, [r7, #88]	; 0x58
 801cda4:	2300      	movs	r3, #0
 801cda6:	65fb      	str	r3, [r7, #92]	; 0x5c
 801cda8:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801cdac:	460b      	mov	r3, r1
 801cdae:	4313      	orrs	r3, r2
 801cdb0:	d036      	beq.n	801ce20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801cdb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801cdb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cdbc:	d018      	beq.n	801cdf0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801cdbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801cdc2:	d811      	bhi.n	801cde8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801cdc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cdc8:	d014      	beq.n	801cdf4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801cdca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801cdce:	d80b      	bhi.n	801cde8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801cdd0:	2b00      	cmp	r3, #0
 801cdd2:	d011      	beq.n	801cdf8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801cdd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cdd8:	d106      	bne.n	801cde8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cdda:	4bb7      	ldr	r3, [pc, #732]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cdde:	4ab6      	ldr	r2, [pc, #728]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cde0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cde4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801cde6:	e008      	b.n	801cdfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cde8:	2301      	movs	r3, #1
 801cdea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cdee:	e004      	b.n	801cdfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cdf0:	bf00      	nop
 801cdf2:	e002      	b.n	801cdfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cdf4:	bf00      	nop
 801cdf6:	e000      	b.n	801cdfa <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801cdf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cdfa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cdfe:	2b00      	cmp	r3, #0
 801ce00:	d10a      	bne.n	801ce18 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ce02:	4bad      	ldr	r3, [pc, #692]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801ce0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ce10:	4aa9      	ldr	r2, [pc, #676]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce12:	430b      	orrs	r3, r1
 801ce14:	6553      	str	r3, [r2, #84]	; 0x54
 801ce16:	e003      	b.n	801ce20 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce18:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce1c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ce20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce28:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801ce2c:	653b      	str	r3, [r7, #80]	; 0x50
 801ce2e:	2300      	movs	r3, #0
 801ce30:	657b      	str	r3, [r7, #84]	; 0x54
 801ce32:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801ce36:	460b      	mov	r3, r1
 801ce38:	4313      	orrs	r3, r2
 801ce3a:	d009      	beq.n	801ce50 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801ce3c:	4b9e      	ldr	r3, [pc, #632]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ce44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ce4a:	4a9b      	ldr	r2, [pc, #620]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce4c:	430b      	orrs	r3, r1
 801ce4e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801ce50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce54:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce58:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801ce5c:	64bb      	str	r3, [r7, #72]	; 0x48
 801ce5e:	2300      	movs	r3, #0
 801ce60:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ce62:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801ce66:	460b      	mov	r3, r1
 801ce68:	4313      	orrs	r3, r2
 801ce6a:	d009      	beq.n	801ce80 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801ce6c:	4b92      	ldr	r3, [pc, #584]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ce70:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801ce74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801ce7a:	4a8f      	ldr	r2, [pc, #572]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce7c:	430b      	orrs	r3, r1
 801ce7e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801ce80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce88:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801ce8c:	643b      	str	r3, [r7, #64]	; 0x40
 801ce8e:	2300      	movs	r3, #0
 801ce90:	647b      	str	r3, [r7, #68]	; 0x44
 801ce92:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801ce96:	460b      	mov	r3, r1
 801ce98:	4313      	orrs	r3, r2
 801ce9a:	d00e      	beq.n	801ceba <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801ce9c:	4b86      	ldr	r3, [pc, #536]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce9e:	691b      	ldr	r3, [r3, #16]
 801cea0:	4a85      	ldr	r2, [pc, #532]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cea2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801cea6:	6113      	str	r3, [r2, #16]
 801cea8:	4b83      	ldr	r3, [pc, #524]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ceaa:	6919      	ldr	r1, [r3, #16]
 801ceac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ceb0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801ceb4:	4a80      	ldr	r2, [pc, #512]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ceb6:	430b      	orrs	r3, r1
 801ceb8:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801ceba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cec2:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801cec6:	63bb      	str	r3, [r7, #56]	; 0x38
 801cec8:	2300      	movs	r3, #0
 801ceca:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cecc:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801ced0:	460b      	mov	r3, r1
 801ced2:	4313      	orrs	r3, r2
 801ced4:	d009      	beq.n	801ceea <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801ced6:	4b78      	ldr	r3, [pc, #480]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ced8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801ceda:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801cede:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cee4:	4a74      	ldr	r2, [pc, #464]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cee6:	430b      	orrs	r3, r1
 801cee8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801ceea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ceee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cef2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801cef6:	633b      	str	r3, [r7, #48]	; 0x30
 801cef8:	2300      	movs	r3, #0
 801cefa:	637b      	str	r3, [r7, #52]	; 0x34
 801cefc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801cf00:	460b      	mov	r3, r1
 801cf02:	4313      	orrs	r3, r2
 801cf04:	d00a      	beq.n	801cf1c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801cf06:	4b6c      	ldr	r3, [pc, #432]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf0a:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801cf0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf16:	4a68      	ldr	r2, [pc, #416]	; (801d0b8 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf18:	430b      	orrs	r3, r1
 801cf1a:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801cf1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf24:	2100      	movs	r1, #0
 801cf26:	62b9      	str	r1, [r7, #40]	; 0x28
 801cf28:	f003 0301 	and.w	r3, r3, #1
 801cf2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cf2e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801cf32:	460b      	mov	r3, r1
 801cf34:	4313      	orrs	r3, r2
 801cf36:	d011      	beq.n	801cf5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cf38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf3c:	3308      	adds	r3, #8
 801cf3e:	2100      	movs	r1, #0
 801cf40:	4618      	mov	r0, r3
 801cf42:	f001 f99d 	bl	801e280 <RCCEx_PLL2_Config>
 801cf46:	4603      	mov	r3, r0
 801cf48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cf4c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d003      	beq.n	801cf5c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801cf5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf64:	2100      	movs	r1, #0
 801cf66:	6239      	str	r1, [r7, #32]
 801cf68:	f003 0302 	and.w	r3, r3, #2
 801cf6c:	627b      	str	r3, [r7, #36]	; 0x24
 801cf6e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801cf72:	460b      	mov	r3, r1
 801cf74:	4313      	orrs	r3, r2
 801cf76:	d011      	beq.n	801cf9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cf78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf7c:	3308      	adds	r3, #8
 801cf7e:	2101      	movs	r1, #1
 801cf80:	4618      	mov	r0, r3
 801cf82:	f001 f97d 	bl	801e280 <RCCEx_PLL2_Config>
 801cf86:	4603      	mov	r3, r0
 801cf88:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cf8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf90:	2b00      	cmp	r3, #0
 801cf92:	d003      	beq.n	801cf9c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cf98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801cf9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfa4:	2100      	movs	r1, #0
 801cfa6:	61b9      	str	r1, [r7, #24]
 801cfa8:	f003 0304 	and.w	r3, r3, #4
 801cfac:	61fb      	str	r3, [r7, #28]
 801cfae:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801cfb2:	460b      	mov	r3, r1
 801cfb4:	4313      	orrs	r3, r2
 801cfb6:	d011      	beq.n	801cfdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cfb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfbc:	3308      	adds	r3, #8
 801cfbe:	2102      	movs	r1, #2
 801cfc0:	4618      	mov	r0, r3
 801cfc2:	f001 f95d 	bl	801e280 <RCCEx_PLL2_Config>
 801cfc6:	4603      	mov	r3, r0
 801cfc8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cfcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfd0:	2b00      	cmp	r3, #0
 801cfd2:	d003      	beq.n	801cfdc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfd4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfd8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801cfdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfe4:	2100      	movs	r1, #0
 801cfe6:	6139      	str	r1, [r7, #16]
 801cfe8:	f003 0308 	and.w	r3, r3, #8
 801cfec:	617b      	str	r3, [r7, #20]
 801cfee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801cff2:	460b      	mov	r3, r1
 801cff4:	4313      	orrs	r3, r2
 801cff6:	d011      	beq.n	801d01c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cff8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cffc:	3328      	adds	r3, #40	; 0x28
 801cffe:	2100      	movs	r1, #0
 801d000:	4618      	mov	r0, r3
 801d002:	f001 f9ef 	bl	801e3e4 <RCCEx_PLL3_Config>
 801d006:	4603      	mov	r3, r0
 801d008:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 801d00c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d010:	2b00      	cmp	r3, #0
 801d012:	d003      	beq.n	801d01c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d014:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d018:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801d01c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d020:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d024:	2100      	movs	r1, #0
 801d026:	60b9      	str	r1, [r7, #8]
 801d028:	f003 0310 	and.w	r3, r3, #16
 801d02c:	60fb      	str	r3, [r7, #12]
 801d02e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d032:	460b      	mov	r3, r1
 801d034:	4313      	orrs	r3, r2
 801d036:	d011      	beq.n	801d05c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d03c:	3328      	adds	r3, #40	; 0x28
 801d03e:	2101      	movs	r1, #1
 801d040:	4618      	mov	r0, r3
 801d042:	f001 f9cf 	bl	801e3e4 <RCCEx_PLL3_Config>
 801d046:	4603      	mov	r3, r0
 801d048:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d04c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d050:	2b00      	cmp	r3, #0
 801d052:	d003      	beq.n	801d05c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d054:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d058:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d05c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d060:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d064:	2100      	movs	r1, #0
 801d066:	6039      	str	r1, [r7, #0]
 801d068:	f003 0320 	and.w	r3, r3, #32
 801d06c:	607b      	str	r3, [r7, #4]
 801d06e:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d072:	460b      	mov	r3, r1
 801d074:	4313      	orrs	r3, r2
 801d076:	d011      	beq.n	801d09c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d07c:	3328      	adds	r3, #40	; 0x28
 801d07e:	2102      	movs	r1, #2
 801d080:	4618      	mov	r0, r3
 801d082:	f001 f9af 	bl	801e3e4 <RCCEx_PLL3_Config>
 801d086:	4603      	mov	r3, r0
 801d088:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d08c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d090:	2b00      	cmp	r3, #0
 801d092:	d003      	beq.n	801d09c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d094:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d098:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 801d09c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801d0a0:	2b00      	cmp	r3, #0
 801d0a2:	d101      	bne.n	801d0a8 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 801d0a4:	2300      	movs	r3, #0
 801d0a6:	e000      	b.n	801d0aa <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801d0a8:	2301      	movs	r3, #1
}
 801d0aa:	4618      	mov	r0, r3
 801d0ac:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801d0b0:	46bd      	mov	sp, r7
 801d0b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d0b6:	bf00      	nop
 801d0b8:	58024400 	.word	0x58024400

0801d0bc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801d0bc:	b580      	push	{r7, lr}
 801d0be:	b090      	sub	sp, #64	; 0x40
 801d0c0:	af00      	add	r7, sp, #0
 801d0c2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801d0c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d0ca:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801d0ce:	430b      	orrs	r3, r1
 801d0d0:	f040 8094 	bne.w	801d1fc <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801d0d4:	4b9b      	ldr	r3, [pc, #620]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d0d8:	f003 0307 	and.w	r3, r3, #7
 801d0dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0e0:	2b04      	cmp	r3, #4
 801d0e2:	f200 8087 	bhi.w	801d1f4 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801d0e6:	a201      	add	r2, pc, #4	; (adr r2, 801d0ec <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801d0e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d0ec:	0801d101 	.word	0x0801d101
 801d0f0:	0801d129 	.word	0x0801d129
 801d0f4:	0801d151 	.word	0x0801d151
 801d0f8:	0801d1ed 	.word	0x0801d1ed
 801d0fc:	0801d179 	.word	0x0801d179
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d100:	4b90      	ldr	r3, [pc, #576]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d10c:	d108      	bne.n	801d120 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d10e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d112:	4618      	mov	r0, r3
 801d114:	f000 ff62 	bl	801dfdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d11a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d11c:	f000 bc93 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d120:	2300      	movs	r3, #0
 801d122:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d124:	f000 bc8f 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d128:	4b86      	ldr	r3, [pc, #536]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d12a:	681b      	ldr	r3, [r3, #0]
 801d12c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d130:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d134:	d108      	bne.n	801d148 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d136:	f107 0318 	add.w	r3, r7, #24
 801d13a:	4618      	mov	r0, r3
 801d13c:	f000 fca6 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d140:	69bb      	ldr	r3, [r7, #24]
 801d142:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d144:	f000 bc7f 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d148:	2300      	movs	r3, #0
 801d14a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d14c:	f000 bc7b 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d150:	4b7c      	ldr	r3, [pc, #496]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d152:	681b      	ldr	r3, [r3, #0]
 801d154:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d158:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d15c:	d108      	bne.n	801d170 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d15e:	f107 030c 	add.w	r3, r7, #12
 801d162:	4618      	mov	r0, r3
 801d164:	f000 fde6 	bl	801dd34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d168:	68fb      	ldr	r3, [r7, #12]
 801d16a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d16c:	f000 bc6b 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d170:	2300      	movs	r3, #0
 801d172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d174:	f000 bc67 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d178:	4b72      	ldr	r3, [pc, #456]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d17a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d17c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d180:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d182:	4b70      	ldr	r3, [pc, #448]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	f003 0304 	and.w	r3, r3, #4
 801d18a:	2b04      	cmp	r3, #4
 801d18c:	d10c      	bne.n	801d1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801d18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d190:	2b00      	cmp	r3, #0
 801d192:	d109      	bne.n	801d1a8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d194:	4b6b      	ldr	r3, [pc, #428]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d196:	681b      	ldr	r3, [r3, #0]
 801d198:	08db      	lsrs	r3, r3, #3
 801d19a:	f003 0303 	and.w	r3, r3, #3
 801d19e:	4a6a      	ldr	r2, [pc, #424]	; (801d348 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d1a0:	fa22 f303 	lsr.w	r3, r2, r3
 801d1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d1a6:	e01f      	b.n	801d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d1a8:	4b66      	ldr	r3, [pc, #408]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d1b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d1b4:	d106      	bne.n	801d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801d1b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d1bc:	d102      	bne.n	801d1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d1be:	4b63      	ldr	r3, [pc, #396]	; (801d34c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d1c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d1c2:	e011      	b.n	801d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d1c4:	4b5f      	ldr	r3, [pc, #380]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1c6:	681b      	ldr	r3, [r3, #0]
 801d1c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d1cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d1d0:	d106      	bne.n	801d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801d1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d1d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d1d8:	d102      	bne.n	801d1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d1da:	4b5d      	ldr	r3, [pc, #372]	; (801d350 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d1dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d1de:	e003      	b.n	801d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d1e0:	2300      	movs	r3, #0
 801d1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d1e4:	f000 bc2f 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d1e8:	f000 bc2d 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d1ec:	4b59      	ldr	r3, [pc, #356]	; (801d354 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d1ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d1f0:	f000 bc29 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d1f4:	2300      	movs	r3, #0
 801d1f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d1f8:	f000 bc25 	b.w	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801d1fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d200:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801d204:	430b      	orrs	r3, r1
 801d206:	f040 80a7 	bne.w	801d358 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801d20a:	4b4e      	ldr	r3, [pc, #312]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d20e:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801d212:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d21a:	d054      	beq.n	801d2c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801d21c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d21e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d222:	f200 808b 	bhi.w	801d33c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d228:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d22c:	f000 8083 	beq.w	801d336 <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801d230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d232:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d236:	f200 8081 	bhi.w	801d33c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d23a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d23c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d240:	d02f      	beq.n	801d2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801d242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d244:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d248:	d878      	bhi.n	801d33c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d24c:	2b00      	cmp	r3, #0
 801d24e:	d004      	beq.n	801d25a <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801d250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d256:	d012      	beq.n	801d27e <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801d258:	e070      	b.n	801d33c <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d25a:	4b3a      	ldr	r3, [pc, #232]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d25c:	681b      	ldr	r3, [r3, #0]
 801d25e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d262:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d266:	d107      	bne.n	801d278 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d26c:	4618      	mov	r0, r3
 801d26e:	f000 feb5 	bl	801dfdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d274:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d276:	e3e6      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d278:	2300      	movs	r3, #0
 801d27a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d27c:	e3e3      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d27e:	4b31      	ldr	r3, [pc, #196]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d280:	681b      	ldr	r3, [r3, #0]
 801d282:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d286:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d28a:	d107      	bne.n	801d29c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d28c:	f107 0318 	add.w	r3, r7, #24
 801d290:	4618      	mov	r0, r3
 801d292:	f000 fbfb 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d296:	69bb      	ldr	r3, [r7, #24]
 801d298:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d29a:	e3d4      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d29c:	2300      	movs	r3, #0
 801d29e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d2a0:	e3d1      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d2a2:	4b28      	ldr	r3, [pc, #160]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2a4:	681b      	ldr	r3, [r3, #0]
 801d2a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d2aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d2ae:	d107      	bne.n	801d2c0 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d2b0:	f107 030c 	add.w	r3, r7, #12
 801d2b4:	4618      	mov	r0, r3
 801d2b6:	f000 fd3d 	bl	801dd34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d2ba:	68fb      	ldr	r3, [r7, #12]
 801d2bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d2be:	e3c2      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d2c0:	2300      	movs	r3, #0
 801d2c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d2c4:	e3bf      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d2c6:	4b1f      	ldr	r3, [pc, #124]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d2ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d2ce:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d2d0:	4b1c      	ldr	r3, [pc, #112]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2d2:	681b      	ldr	r3, [r3, #0]
 801d2d4:	f003 0304 	and.w	r3, r3, #4
 801d2d8:	2b04      	cmp	r3, #4
 801d2da:	d10c      	bne.n	801d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801d2dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d2de:	2b00      	cmp	r3, #0
 801d2e0:	d109      	bne.n	801d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d2e2:	4b18      	ldr	r3, [pc, #96]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2e4:	681b      	ldr	r3, [r3, #0]
 801d2e6:	08db      	lsrs	r3, r3, #3
 801d2e8:	f003 0303 	and.w	r3, r3, #3
 801d2ec:	4a16      	ldr	r2, [pc, #88]	; (801d348 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d2ee:	fa22 f303 	lsr.w	r3, r2, r3
 801d2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d2f4:	e01e      	b.n	801d334 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d2f6:	4b13      	ldr	r3, [pc, #76]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d2fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d302:	d106      	bne.n	801d312 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801d304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d306:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d30a:	d102      	bne.n	801d312 <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d30c:	4b0f      	ldr	r3, [pc, #60]	; (801d34c <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d30e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d310:	e010      	b.n	801d334 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d312:	4b0c      	ldr	r3, [pc, #48]	; (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d314:	681b      	ldr	r3, [r3, #0]
 801d316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d31a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d31e:	d106      	bne.n	801d32e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801d320:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d326:	d102      	bne.n	801d32e <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d328:	4b09      	ldr	r3, [pc, #36]	; (801d350 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d32a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d32c:	e002      	b.n	801d334 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d32e:	2300      	movs	r3, #0
 801d330:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d332:	e388      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d334:	e387      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d336:	4b07      	ldr	r3, [pc, #28]	; (801d354 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d338:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d33a:	e384      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d33c:	2300      	movs	r3, #0
 801d33e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d340:	e381      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d342:	bf00      	nop
 801d344:	58024400 	.word	0x58024400
 801d348:	03d09000 	.word	0x03d09000
 801d34c:	003d0900 	.word	0x003d0900
 801d350:	007a1200 	.word	0x007a1200
 801d354:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801d358:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d35c:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801d360:	430b      	orrs	r3, r1
 801d362:	f040 809c 	bne.w	801d49e <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801d366:	4b9e      	ldr	r3, [pc, #632]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d36a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801d36e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d372:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d376:	d054      	beq.n	801d422 <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801d378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d37a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d37e:	f200 808b 	bhi.w	801d498 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d384:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d388:	f000 8083 	beq.w	801d492 <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801d38c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d38e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d392:	f200 8081 	bhi.w	801d498 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d398:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d39c:	d02f      	beq.n	801d3fe <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801d39e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3a0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d3a4:	d878      	bhi.n	801d498 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3a8:	2b00      	cmp	r3, #0
 801d3aa:	d004      	beq.n	801d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801d3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d3b2:	d012      	beq.n	801d3da <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801d3b4:	e070      	b.n	801d498 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d3b6:	4b8a      	ldr	r3, [pc, #552]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d3b8:	681b      	ldr	r3, [r3, #0]
 801d3ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d3be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d3c2:	d107      	bne.n	801d3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d3c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d3c8:	4618      	mov	r0, r3
 801d3ca:	f000 fe07 	bl	801dfdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d3d2:	e338      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d3d4:	2300      	movs	r3, #0
 801d3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3d8:	e335      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d3da:	4b81      	ldr	r3, [pc, #516]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d3dc:	681b      	ldr	r3, [r3, #0]
 801d3de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d3e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d3e6:	d107      	bne.n	801d3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d3e8:	f107 0318 	add.w	r3, r7, #24
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	f000 fb4d 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d3f2:	69bb      	ldr	r3, [r7, #24]
 801d3f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d3f6:	e326      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d3f8:	2300      	movs	r3, #0
 801d3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3fc:	e323      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d3fe:	4b78      	ldr	r3, [pc, #480]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d400:	681b      	ldr	r3, [r3, #0]
 801d402:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d406:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d40a:	d107      	bne.n	801d41c <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d40c:	f107 030c 	add.w	r3, r7, #12
 801d410:	4618      	mov	r0, r3
 801d412:	f000 fc8f 	bl	801dd34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d416:	68fb      	ldr	r3, [r7, #12]
 801d418:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d41a:	e314      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d41c:	2300      	movs	r3, #0
 801d41e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d420:	e311      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d422:	4b6f      	ldr	r3, [pc, #444]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d42a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d42c:	4b6c      	ldr	r3, [pc, #432]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d42e:	681b      	ldr	r3, [r3, #0]
 801d430:	f003 0304 	and.w	r3, r3, #4
 801d434:	2b04      	cmp	r3, #4
 801d436:	d10c      	bne.n	801d452 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801d438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d43a:	2b00      	cmp	r3, #0
 801d43c:	d109      	bne.n	801d452 <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d43e:	4b68      	ldr	r3, [pc, #416]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d440:	681b      	ldr	r3, [r3, #0]
 801d442:	08db      	lsrs	r3, r3, #3
 801d444:	f003 0303 	and.w	r3, r3, #3
 801d448:	4a66      	ldr	r2, [pc, #408]	; (801d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d44a:	fa22 f303 	lsr.w	r3, r2, r3
 801d44e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d450:	e01e      	b.n	801d490 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d452:	4b63      	ldr	r3, [pc, #396]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d45e:	d106      	bne.n	801d46e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801d460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d466:	d102      	bne.n	801d46e <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d468:	4b5f      	ldr	r3, [pc, #380]	; (801d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d46a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d46c:	e010      	b.n	801d490 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d46e:	4b5c      	ldr	r3, [pc, #368]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d470:	681b      	ldr	r3, [r3, #0]
 801d472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d47a:	d106      	bne.n	801d48a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801d47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d47e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d482:	d102      	bne.n	801d48a <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d484:	4b59      	ldr	r3, [pc, #356]	; (801d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d486:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d488:	e002      	b.n	801d490 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d48a:	2300      	movs	r3, #0
 801d48c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d48e:	e2da      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d490:	e2d9      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d492:	4b57      	ldr	r3, [pc, #348]	; (801d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d494:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d496:	e2d6      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d498:	2300      	movs	r3, #0
 801d49a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d49c:	e2d3      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801d49e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d4a2:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801d4a6:	430b      	orrs	r3, r1
 801d4a8:	f040 80a7 	bne.w	801d5fa <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801d4ac:	4b4c      	ldr	r3, [pc, #304]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d4b0:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801d4b4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d4bc:	d055      	beq.n	801d56a <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801d4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d4c4:	f200 8096 	bhi.w	801d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4ca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d4ce:	f000 8084 	beq.w	801d5da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801d4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d4d8:	f200 808c 	bhi.w	801d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d4e2:	d030      	beq.n	801d546 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801d4e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d4ea:	f200 8083 	bhi.w	801d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d4ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d004      	beq.n	801d4fe <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d4fa:	d012      	beq.n	801d522 <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801d4fc:	e07a      	b.n	801d5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d4fe:	4b38      	ldr	r3, [pc, #224]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d500:	681b      	ldr	r3, [r3, #0]
 801d502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d50a:	d107      	bne.n	801d51c <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d50c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d510:	4618      	mov	r0, r3
 801d512:	f000 fd63 	bl	801dfdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d518:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d51a:	e294      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d51c:	2300      	movs	r3, #0
 801d51e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d520:	e291      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d522:	4b2f      	ldr	r3, [pc, #188]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d524:	681b      	ldr	r3, [r3, #0]
 801d526:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d52a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d52e:	d107      	bne.n	801d540 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d530:	f107 0318 	add.w	r3, r7, #24
 801d534:	4618      	mov	r0, r3
 801d536:	f000 faa9 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d53a:	69bb      	ldr	r3, [r7, #24]
 801d53c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d53e:	e282      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d540:	2300      	movs	r3, #0
 801d542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d544:	e27f      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d546:	4b26      	ldr	r3, [pc, #152]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d54e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d552:	d107      	bne.n	801d564 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d554:	f107 030c 	add.w	r3, r7, #12
 801d558:	4618      	mov	r0, r3
 801d55a:	f000 fbeb 	bl	801dd34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d562:	e270      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d564:	2300      	movs	r3, #0
 801d566:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d568:	e26d      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d56a:	4b1d      	ldr	r3, [pc, #116]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d56c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d56e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d572:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d574:	4b1a      	ldr	r3, [pc, #104]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d576:	681b      	ldr	r3, [r3, #0]
 801d578:	f003 0304 	and.w	r3, r3, #4
 801d57c:	2b04      	cmp	r3, #4
 801d57e:	d10c      	bne.n	801d59a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801d580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d582:	2b00      	cmp	r3, #0
 801d584:	d109      	bne.n	801d59a <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d586:	4b16      	ldr	r3, [pc, #88]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d588:	681b      	ldr	r3, [r3, #0]
 801d58a:	08db      	lsrs	r3, r3, #3
 801d58c:	f003 0303 	and.w	r3, r3, #3
 801d590:	4a14      	ldr	r2, [pc, #80]	; (801d5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d592:	fa22 f303 	lsr.w	r3, r2, r3
 801d596:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d598:	e01e      	b.n	801d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d59a:	4b11      	ldr	r3, [pc, #68]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d5a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d5a6:	d106      	bne.n	801d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801d5a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d5ae:	d102      	bne.n	801d5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d5b0:	4b0d      	ldr	r3, [pc, #52]	; (801d5e8 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d5b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d5b4:	e010      	b.n	801d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d5b6:	4b0a      	ldr	r3, [pc, #40]	; (801d5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5b8:	681b      	ldr	r3, [r3, #0]
 801d5ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d5be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d5c2:	d106      	bne.n	801d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801d5c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d5ca:	d102      	bne.n	801d5d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d5cc:	4b07      	ldr	r3, [pc, #28]	; (801d5ec <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d5ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d5d0:	e002      	b.n	801d5d8 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d5d2:	2300      	movs	r3, #0
 801d5d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d5d6:	e236      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d5d8:	e235      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d5da:	4b05      	ldr	r3, [pc, #20]	; (801d5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d5dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5de:	e232      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d5e0:	58024400 	.word	0x58024400
 801d5e4:	03d09000 	.word	0x03d09000
 801d5e8:	003d0900 	.word	0x003d0900
 801d5ec:	007a1200 	.word	0x007a1200
 801d5f0:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 801d5f4:	2300      	movs	r3, #0
 801d5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5f8:	e225      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801d5fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d5fe:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 801d602:	430b      	orrs	r3, r1
 801d604:	f040 8085 	bne.w	801d712 <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801d608:	4b9c      	ldr	r3, [pc, #624]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d60a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d60c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801d610:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 801d612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d614:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d618:	d06b      	beq.n	801d6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801d61a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d61c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d620:	d874      	bhi.n	801d70c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d624:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d628:	d056      	beq.n	801d6d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801d62a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d62c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d630:	d86c      	bhi.n	801d70c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d634:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d638:	d03b      	beq.n	801d6b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d63c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d640:	d864      	bhi.n	801d70c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d648:	d021      	beq.n	801d68e <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801d64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d64c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d650:	d85c      	bhi.n	801d70c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d654:	2b00      	cmp	r3, #0
 801d656:	d004      	beq.n	801d662 <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801d658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d65a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d65e:	d004      	beq.n	801d66a <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801d660:	e054      	b.n	801d70c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801d662:	f7fe fb75 	bl	801bd50 <HAL_RCC_GetPCLK1Freq>
 801d666:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d668:	e1ed      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d66a:	4b84      	ldr	r3, [pc, #528]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d672:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d676:	d107      	bne.n	801d688 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d678:	f107 0318 	add.w	r3, r7, #24
 801d67c:	4618      	mov	r0, r3
 801d67e:	f000 fa05 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d682:	69fb      	ldr	r3, [r7, #28]
 801d684:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d686:	e1de      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d688:	2300      	movs	r3, #0
 801d68a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d68c:	e1db      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d68e:	4b7b      	ldr	r3, [pc, #492]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d69a:	d107      	bne.n	801d6ac <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d69c:	f107 030c 	add.w	r3, r7, #12
 801d6a0:	4618      	mov	r0, r3
 801d6a2:	f000 fb47 	bl	801dd34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d6a6:	693b      	ldr	r3, [r7, #16]
 801d6a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d6aa:	e1cc      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d6ac:	2300      	movs	r3, #0
 801d6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d6b0:	e1c9      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d6b2:	4b72      	ldr	r3, [pc, #456]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6b4:	681b      	ldr	r3, [r3, #0]
 801d6b6:	f003 0304 	and.w	r3, r3, #4
 801d6ba:	2b04      	cmp	r3, #4
 801d6bc:	d109      	bne.n	801d6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d6be:	4b6f      	ldr	r3, [pc, #444]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6c0:	681b      	ldr	r3, [r3, #0]
 801d6c2:	08db      	lsrs	r3, r3, #3
 801d6c4:	f003 0303 	and.w	r3, r3, #3
 801d6c8:	4a6d      	ldr	r2, [pc, #436]	; (801d880 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d6ca:	fa22 f303 	lsr.w	r3, r2, r3
 801d6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d6d0:	e1b9      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d6d2:	2300      	movs	r3, #0
 801d6d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d6d6:	e1b6      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d6d8:	4b68      	ldr	r3, [pc, #416]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6da:	681b      	ldr	r3, [r3, #0]
 801d6dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d6e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d6e4:	d102      	bne.n	801d6ec <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801d6e6:	4b67      	ldr	r3, [pc, #412]	; (801d884 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d6e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d6ea:	e1ac      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d6ec:	2300      	movs	r3, #0
 801d6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d6f0:	e1a9      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d6f2:	4b62      	ldr	r3, [pc, #392]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6f4:	681b      	ldr	r3, [r3, #0]
 801d6f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d6fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d6fe:	d102      	bne.n	801d706 <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801d700:	4b61      	ldr	r3, [pc, #388]	; (801d888 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d704:	e19f      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d706:	2300      	movs	r3, #0
 801d708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d70a:	e19c      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d70c:	2300      	movs	r3, #0
 801d70e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d710:	e199      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801d712:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d716:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801d71a:	430b      	orrs	r3, r1
 801d71c:	d173      	bne.n	801d806 <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801d71e:	4b57      	ldr	r3, [pc, #348]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d722:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d726:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d72a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d72e:	d02f      	beq.n	801d790 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801d730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d732:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d736:	d863      	bhi.n	801d800 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d004      	beq.n	801d748 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801d73e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d744:	d012      	beq.n	801d76c <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801d746:	e05b      	b.n	801d800 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d748:	4b4c      	ldr	r3, [pc, #304]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d754:	d107      	bne.n	801d766 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d756:	f107 0318 	add.w	r3, r7, #24
 801d75a:	4618      	mov	r0, r3
 801d75c:	f000 f996 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d760:	69bb      	ldr	r3, [r7, #24]
 801d762:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d764:	e16f      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d766:	2300      	movs	r3, #0
 801d768:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d76a:	e16c      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d76c:	4b43      	ldr	r3, [pc, #268]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d76e:	681b      	ldr	r3, [r3, #0]
 801d770:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d778:	d107      	bne.n	801d78a <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d77a:	f107 030c 	add.w	r3, r7, #12
 801d77e:	4618      	mov	r0, r3
 801d780:	f000 fad8 	bl	801dd34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801d784:	697b      	ldr	r3, [r7, #20]
 801d786:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d788:	e15d      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d78a:	2300      	movs	r3, #0
 801d78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d78e:	e15a      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d790:	4b3a      	ldr	r3, [pc, #232]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d794:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d798:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d79a:	4b38      	ldr	r3, [pc, #224]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	f003 0304 	and.w	r3, r3, #4
 801d7a2:	2b04      	cmp	r3, #4
 801d7a4:	d10c      	bne.n	801d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801d7a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d109      	bne.n	801d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d7ac:	4b33      	ldr	r3, [pc, #204]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7ae:	681b      	ldr	r3, [r3, #0]
 801d7b0:	08db      	lsrs	r3, r3, #3
 801d7b2:	f003 0303 	and.w	r3, r3, #3
 801d7b6:	4a32      	ldr	r2, [pc, #200]	; (801d880 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d7b8:	fa22 f303 	lsr.w	r3, r2, r3
 801d7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d7be:	e01e      	b.n	801d7fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d7c0:	4b2e      	ldr	r3, [pc, #184]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d7c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d7cc:	d106      	bne.n	801d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801d7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d7d4:	d102      	bne.n	801d7dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d7d6:	4b2b      	ldr	r3, [pc, #172]	; (801d884 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d7d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d7da:	e010      	b.n	801d7fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d7dc:	4b27      	ldr	r3, [pc, #156]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7de:	681b      	ldr	r3, [r3, #0]
 801d7e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d7e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d7e8:	d106      	bne.n	801d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801d7ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d7ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d7f0:	d102      	bne.n	801d7f8 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d7f2:	4b25      	ldr	r3, [pc, #148]	; (801d888 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d7f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d7f6:	e002      	b.n	801d7fe <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d7f8:	2300      	movs	r3, #0
 801d7fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d7fc:	e123      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d7fe:	e122      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d800:	2300      	movs	r3, #0
 801d802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d804:	e11f      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801d806:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d80a:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 801d80e:	430b      	orrs	r3, r1
 801d810:	d13c      	bne.n	801d88c <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801d812:	4b1a      	ldr	r3, [pc, #104]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d816:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d81a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d81c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d81e:	2b00      	cmp	r3, #0
 801d820:	d004      	beq.n	801d82c <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801d822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d824:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d828:	d012      	beq.n	801d850 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801d82a:	e023      	b.n	801d874 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d82c:	4b13      	ldr	r3, [pc, #76]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d82e:	681b      	ldr	r3, [r3, #0]
 801d830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d834:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d838:	d107      	bne.n	801d84a <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d83a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d83e:	4618      	mov	r0, r3
 801d840:	f000 fbcc 	bl	801dfdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d846:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d848:	e0fd      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d84a:	2300      	movs	r3, #0
 801d84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d84e:	e0fa      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d850:	4b0a      	ldr	r3, [pc, #40]	; (801d87c <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d852:	681b      	ldr	r3, [r3, #0]
 801d854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d858:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d85c:	d107      	bne.n	801d86e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d85e:	f107 0318 	add.w	r3, r7, #24
 801d862:	4618      	mov	r0, r3
 801d864:	f000 f912 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801d868:	6a3b      	ldr	r3, [r7, #32]
 801d86a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d86c:	e0eb      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d86e:	2300      	movs	r3, #0
 801d870:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d872:	e0e8      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d874:	2300      	movs	r3, #0
 801d876:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d878:	e0e5      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d87a:	bf00      	nop
 801d87c:	58024400 	.word	0x58024400
 801d880:	03d09000 	.word	0x03d09000
 801d884:	003d0900 	.word	0x003d0900
 801d888:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801d88c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d890:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801d894:	430b      	orrs	r3, r1
 801d896:	f040 8085 	bne.w	801d9a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801d89a:	4b6d      	ldr	r3, [pc, #436]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d89e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801d8a2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d8a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d8aa:	d06b      	beq.n	801d984 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 801d8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d8b2:	d874      	bhi.n	801d99e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d8b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d8ba:	d056      	beq.n	801d96a <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 801d8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d8c2:	d86c      	bhi.n	801d99e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8c6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d8ca:	d03b      	beq.n	801d944 <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 801d8cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8ce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d8d2:	d864      	bhi.n	801d99e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d8d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d8da:	d021      	beq.n	801d920 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 801d8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d8e2:	d85c      	bhi.n	801d99e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d8e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d004      	beq.n	801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801d8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d8ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d8f0:	d004      	beq.n	801d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801d8f2:	e054      	b.n	801d99e <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801d8f4:	f000 f8b4 	bl	801da60 <HAL_RCCEx_GetD3PCLK1Freq>
 801d8f8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d8fa:	e0a4      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d8fc:	4b54      	ldr	r3, [pc, #336]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d8fe:	681b      	ldr	r3, [r3, #0]
 801d900:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d908:	d107      	bne.n	801d91a <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d90a:	f107 0318 	add.w	r3, r7, #24
 801d90e:	4618      	mov	r0, r3
 801d910:	f000 f8bc 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d914:	69fb      	ldr	r3, [r7, #28]
 801d916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d918:	e095      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d91a:	2300      	movs	r3, #0
 801d91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d91e:	e092      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d920:	4b4b      	ldr	r3, [pc, #300]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d922:	681b      	ldr	r3, [r3, #0]
 801d924:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d928:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d92c:	d107      	bne.n	801d93e <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d92e:	f107 030c 	add.w	r3, r7, #12
 801d932:	4618      	mov	r0, r3
 801d934:	f000 f9fe 	bl	801dd34 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d938:	693b      	ldr	r3, [r7, #16]
 801d93a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d93c:	e083      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d93e:	2300      	movs	r3, #0
 801d940:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d942:	e080      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d944:	4b42      	ldr	r3, [pc, #264]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d946:	681b      	ldr	r3, [r3, #0]
 801d948:	f003 0304 	and.w	r3, r3, #4
 801d94c:	2b04      	cmp	r3, #4
 801d94e:	d109      	bne.n	801d964 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d950:	4b3f      	ldr	r3, [pc, #252]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d952:	681b      	ldr	r3, [r3, #0]
 801d954:	08db      	lsrs	r3, r3, #3
 801d956:	f003 0303 	and.w	r3, r3, #3
 801d95a:	4a3e      	ldr	r2, [pc, #248]	; (801da54 <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801d95c:	fa22 f303 	lsr.w	r3, r2, r3
 801d960:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d962:	e070      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d964:	2300      	movs	r3, #0
 801d966:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d968:	e06d      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d96a:	4b39      	ldr	r3, [pc, #228]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d96c:	681b      	ldr	r3, [r3, #0]
 801d96e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d976:	d102      	bne.n	801d97e <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801d978:	4b37      	ldr	r3, [pc, #220]	; (801da58 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801d97a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d97c:	e063      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d97e:	2300      	movs	r3, #0
 801d980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d982:	e060      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d984:	4b32      	ldr	r3, [pc, #200]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d986:	681b      	ldr	r3, [r3, #0]
 801d988:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d98c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d990:	d102      	bne.n	801d998 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801d992:	4b32      	ldr	r3, [pc, #200]	; (801da5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801d994:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d996:	e056      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d998:	2300      	movs	r3, #0
 801d99a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d99c:	e053      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801d99e:	2300      	movs	r3, #0
 801d9a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9a2:	e050      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801d9a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d9a8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801d9ac:	430b      	orrs	r3, r1
 801d9ae:	d148      	bne.n	801da42 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801d9b0:	4b27      	ldr	r3, [pc, #156]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d9b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d9b8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d9ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d9c0:	d02a      	beq.n	801da18 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801d9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d9c8:	d838      	bhi.n	801da3c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801d9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9cc:	2b00      	cmp	r3, #0
 801d9ce:	d004      	beq.n	801d9da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801d9d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d9d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d9d6:	d00d      	beq.n	801d9f4 <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801d9d8:	e030      	b.n	801da3c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d9da:	4b1d      	ldr	r3, [pc, #116]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9dc:	681b      	ldr	r3, [r3, #0]
 801d9de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d9e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d9e6:	d102      	bne.n	801d9ee <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801d9e8:	4b1c      	ldr	r3, [pc, #112]	; (801da5c <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801d9ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d9ec:	e02b      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d9ee:	2300      	movs	r3, #0
 801d9f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9f2:	e028      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d9f4:	4b16      	ldr	r3, [pc, #88]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9f6:	681b      	ldr	r3, [r3, #0]
 801d9f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d9fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801da00:	d107      	bne.n	801da12 <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801da02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da06:	4618      	mov	r0, r3
 801da08:	f000 fae8 	bl	801dfdc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801da0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da10:	e019      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da12:	2300      	movs	r3, #0
 801da14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da16:	e016      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801da18:	4b0d      	ldr	r3, [pc, #52]	; (801da50 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da1a:	681b      	ldr	r3, [r3, #0]
 801da1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801da20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801da24:	d107      	bne.n	801da36 <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801da26:	f107 0318 	add.w	r3, r7, #24
 801da2a:	4618      	mov	r0, r3
 801da2c:	f000 f82e 	bl	801da8c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801da30:	69fb      	ldr	r3, [r7, #28]
 801da32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da34:	e007      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da36:	2300      	movs	r3, #0
 801da38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da3a:	e004      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801da3c:	2300      	movs	r3, #0
 801da3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da40:	e001      	b.n	801da46 <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801da42:	2300      	movs	r3, #0
 801da44:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801da46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801da48:	4618      	mov	r0, r3
 801da4a:	3740      	adds	r7, #64	; 0x40
 801da4c:	46bd      	mov	sp, r7
 801da4e:	bd80      	pop	{r7, pc}
 801da50:	58024400 	.word	0x58024400
 801da54:	03d09000 	.word	0x03d09000
 801da58:	003d0900 	.word	0x003d0900
 801da5c:	007a1200 	.word	0x007a1200

0801da60 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801da60:	b580      	push	{r7, lr}
 801da62:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801da64:	f7fe f944 	bl	801bcf0 <HAL_RCC_GetHCLKFreq>
 801da68:	4602      	mov	r2, r0
 801da6a:	4b06      	ldr	r3, [pc, #24]	; (801da84 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801da6c:	6a1b      	ldr	r3, [r3, #32]
 801da6e:	091b      	lsrs	r3, r3, #4
 801da70:	f003 0307 	and.w	r3, r3, #7
 801da74:	4904      	ldr	r1, [pc, #16]	; (801da88 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801da76:	5ccb      	ldrb	r3, [r1, r3]
 801da78:	f003 031f 	and.w	r3, r3, #31
 801da7c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801da80:	4618      	mov	r0, r3
 801da82:	bd80      	pop	{r7, pc}
 801da84:	58024400 	.word	0x58024400
 801da88:	080210f8 	.word	0x080210f8

0801da8c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801da8c:	b480      	push	{r7}
 801da8e:	b089      	sub	sp, #36	; 0x24
 801da90:	af00      	add	r7, sp, #0
 801da92:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801da94:	4ba1      	ldr	r3, [pc, #644]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801da98:	f003 0303 	and.w	r3, r3, #3
 801da9c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801da9e:	4b9f      	ldr	r3, [pc, #636]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801daa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801daa2:	0b1b      	lsrs	r3, r3, #12
 801daa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801daa8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801daaa:	4b9c      	ldr	r3, [pc, #624]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801daac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801daae:	091b      	lsrs	r3, r3, #4
 801dab0:	f003 0301 	and.w	r3, r3, #1
 801dab4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801dab6:	4b99      	ldr	r3, [pc, #612]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801daba:	08db      	lsrs	r3, r3, #3
 801dabc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dac0:	693a      	ldr	r2, [r7, #16]
 801dac2:	fb02 f303 	mul.w	r3, r2, r3
 801dac6:	ee07 3a90 	vmov	s15, r3
 801daca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dace:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801dad2:	697b      	ldr	r3, [r7, #20]
 801dad4:	2b00      	cmp	r3, #0
 801dad6:	f000 8111 	beq.w	801dcfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801dada:	69bb      	ldr	r3, [r7, #24]
 801dadc:	2b02      	cmp	r3, #2
 801dade:	f000 8083 	beq.w	801dbe8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801dae2:	69bb      	ldr	r3, [r7, #24]
 801dae4:	2b02      	cmp	r3, #2
 801dae6:	f200 80a1 	bhi.w	801dc2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801daea:	69bb      	ldr	r3, [r7, #24]
 801daec:	2b00      	cmp	r3, #0
 801daee:	d003      	beq.n	801daf8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801daf0:	69bb      	ldr	r3, [r7, #24]
 801daf2:	2b01      	cmp	r3, #1
 801daf4:	d056      	beq.n	801dba4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801daf6:	e099      	b.n	801dc2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801daf8:	4b88      	ldr	r3, [pc, #544]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dafa:	681b      	ldr	r3, [r3, #0]
 801dafc:	f003 0320 	and.w	r3, r3, #32
 801db00:	2b00      	cmp	r3, #0
 801db02:	d02d      	beq.n	801db60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801db04:	4b85      	ldr	r3, [pc, #532]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	08db      	lsrs	r3, r3, #3
 801db0a:	f003 0303 	and.w	r3, r3, #3
 801db0e:	4a84      	ldr	r2, [pc, #528]	; (801dd20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801db10:	fa22 f303 	lsr.w	r3, r2, r3
 801db14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db16:	68bb      	ldr	r3, [r7, #8]
 801db18:	ee07 3a90 	vmov	s15, r3
 801db1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db20:	697b      	ldr	r3, [r7, #20]
 801db22:	ee07 3a90 	vmov	s15, r3
 801db26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db2e:	4b7b      	ldr	r3, [pc, #492]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db36:	ee07 3a90 	vmov	s15, r3
 801db3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db3e:	ed97 6a03 	vldr	s12, [r7, #12]
 801db42:	eddf 5a78 	vldr	s11, [pc, #480]	; 801dd24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db56:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801db5e:	e087      	b.n	801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db60:	697b      	ldr	r3, [r7, #20]
 801db62:	ee07 3a90 	vmov	s15, r3
 801db66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801dd28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801db6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db72:	4b6a      	ldr	r3, [pc, #424]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db7a:	ee07 3a90 	vmov	s15, r3
 801db7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db82:	ed97 6a03 	vldr	s12, [r7, #12]
 801db86:	eddf 5a67 	vldr	s11, [pc, #412]	; 801dd24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801db96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dba2:	e065      	b.n	801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dba4:	697b      	ldr	r3, [r7, #20]
 801dba6:	ee07 3a90 	vmov	s15, r3
 801dbaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801dd2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dbb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dbb6:	4b59      	ldr	r3, [pc, #356]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dbbe:	ee07 3a90 	vmov	s15, r3
 801dbc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dbc6:	ed97 6a03 	vldr	s12, [r7, #12]
 801dbca:	eddf 5a56 	vldr	s11, [pc, #344]	; 801dd24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dbce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dbd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dbd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dbda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbde:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dbe2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dbe6:	e043      	b.n	801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dbe8:	697b      	ldr	r3, [r7, #20]
 801dbea:	ee07 3a90 	vmov	s15, r3
 801dbee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbf2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801dd30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801dbf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dbfa:	4b48      	ldr	r3, [pc, #288]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc02:	ee07 3a90 	vmov	s15, r3
 801dc06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc0a:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc0e:	eddf 5a45 	vldr	s11, [pc, #276]	; 801dd24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc22:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dc2a:	e021      	b.n	801dc70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dc2c:	697b      	ldr	r3, [r7, #20]
 801dc2e:	ee07 3a90 	vmov	s15, r3
 801dc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc36:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801dd2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dc3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc3e:	4b37      	ldr	r3, [pc, #220]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc46:	ee07 3a90 	vmov	s15, r3
 801dc4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc4e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc52:	eddf 5a34 	vldr	s11, [pc, #208]	; 801dd24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc66:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dc6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801dc70:	4b2a      	ldr	r3, [pc, #168]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc74:	0a5b      	lsrs	r3, r3, #9
 801dc76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dc7a:	ee07 3a90 	vmov	s15, r3
 801dc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dc86:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dc8a:	edd7 6a07 	vldr	s13, [r7, #28]
 801dc8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dc92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dc96:	ee17 2a90 	vmov	r2, s15
 801dc9a:	687b      	ldr	r3, [r7, #4]
 801dc9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801dc9e:	4b1f      	ldr	r3, [pc, #124]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dca2:	0c1b      	lsrs	r3, r3, #16
 801dca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dca8:	ee07 3a90 	vmov	s15, r3
 801dcac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dcb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dcb8:	edd7 6a07 	vldr	s13, [r7, #28]
 801dcbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dcc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dcc4:	ee17 2a90 	vmov	r2, s15
 801dcc8:	687b      	ldr	r3, [r7, #4]
 801dcca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801dccc:	4b13      	ldr	r3, [pc, #76]	; (801dd1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dcce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcd0:	0e1b      	lsrs	r3, r3, #24
 801dcd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dcd6:	ee07 3a90 	vmov	s15, r3
 801dcda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dce2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dce6:	edd7 6a07 	vldr	s13, [r7, #28]
 801dcea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dcee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dcf2:	ee17 2a90 	vmov	r2, s15
 801dcf6:	687b      	ldr	r3, [r7, #4]
 801dcf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801dcfa:	e008      	b.n	801dd0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801dcfc:	687b      	ldr	r3, [r7, #4]
 801dcfe:	2200      	movs	r2, #0
 801dd00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801dd02:	687b      	ldr	r3, [r7, #4]
 801dd04:	2200      	movs	r2, #0
 801dd06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	2200      	movs	r2, #0
 801dd0c:	609a      	str	r2, [r3, #8]
}
 801dd0e:	bf00      	nop
 801dd10:	3724      	adds	r7, #36	; 0x24
 801dd12:	46bd      	mov	sp, r7
 801dd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd18:	4770      	bx	lr
 801dd1a:	bf00      	nop
 801dd1c:	58024400 	.word	0x58024400
 801dd20:	03d09000 	.word	0x03d09000
 801dd24:	46000000 	.word	0x46000000
 801dd28:	4c742400 	.word	0x4c742400
 801dd2c:	4a742400 	.word	0x4a742400
 801dd30:	4af42400 	.word	0x4af42400

0801dd34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801dd34:	b480      	push	{r7}
 801dd36:	b089      	sub	sp, #36	; 0x24
 801dd38:	af00      	add	r7, sp, #0
 801dd3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dd3c:	4ba1      	ldr	r3, [pc, #644]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd40:	f003 0303 	and.w	r3, r3, #3
 801dd44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801dd46:	4b9f      	ldr	r3, [pc, #636]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dd4a:	0d1b      	lsrs	r3, r3, #20
 801dd4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dd50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801dd52:	4b9c      	ldr	r3, [pc, #624]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dd56:	0a1b      	lsrs	r3, r3, #8
 801dd58:	f003 0301 	and.w	r3, r3, #1
 801dd5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801dd5e:	4b99      	ldr	r3, [pc, #612]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801dd62:	08db      	lsrs	r3, r3, #3
 801dd64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd68:	693a      	ldr	r2, [r7, #16]
 801dd6a:	fb02 f303 	mul.w	r3, r2, r3
 801dd6e:	ee07 3a90 	vmov	s15, r3
 801dd72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801dd7a:	697b      	ldr	r3, [r7, #20]
 801dd7c:	2b00      	cmp	r3, #0
 801dd7e:	f000 8111 	beq.w	801dfa4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801dd82:	69bb      	ldr	r3, [r7, #24]
 801dd84:	2b02      	cmp	r3, #2
 801dd86:	f000 8083 	beq.w	801de90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801dd8a:	69bb      	ldr	r3, [r7, #24]
 801dd8c:	2b02      	cmp	r3, #2
 801dd8e:	f200 80a1 	bhi.w	801ded4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801dd92:	69bb      	ldr	r3, [r7, #24]
 801dd94:	2b00      	cmp	r3, #0
 801dd96:	d003      	beq.n	801dda0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801dd98:	69bb      	ldr	r3, [r7, #24]
 801dd9a:	2b01      	cmp	r3, #1
 801dd9c:	d056      	beq.n	801de4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801dd9e:	e099      	b.n	801ded4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dda0:	4b88      	ldr	r3, [pc, #544]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dda2:	681b      	ldr	r3, [r3, #0]
 801dda4:	f003 0320 	and.w	r3, r3, #32
 801dda8:	2b00      	cmp	r3, #0
 801ddaa:	d02d      	beq.n	801de08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ddac:	4b85      	ldr	r3, [pc, #532]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddae:	681b      	ldr	r3, [r3, #0]
 801ddb0:	08db      	lsrs	r3, r3, #3
 801ddb2:	f003 0303 	and.w	r3, r3, #3
 801ddb6:	4a84      	ldr	r2, [pc, #528]	; (801dfc8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801ddb8:	fa22 f303 	lsr.w	r3, r2, r3
 801ddbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ddbe:	68bb      	ldr	r3, [r7, #8]
 801ddc0:	ee07 3a90 	vmov	s15, r3
 801ddc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddc8:	697b      	ldr	r3, [r7, #20]
 801ddca:	ee07 3a90 	vmov	s15, r3
 801ddce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ddd6:	4b7b      	ldr	r3, [pc, #492]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ddda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddde:	ee07 3a90 	vmov	s15, r3
 801dde2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dde6:	ed97 6a03 	vldr	s12, [r7, #12]
 801ddea:	eddf 5a78 	vldr	s11, [pc, #480]	; 801dfcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801ddee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ddf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ddf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801ddfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801de06:	e087      	b.n	801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de08:	697b      	ldr	r3, [r7, #20]
 801de0a:	ee07 3a90 	vmov	s15, r3
 801de0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de12:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801dfd0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801de16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de1a:	4b6a      	ldr	r3, [pc, #424]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de22:	ee07 3a90 	vmov	s15, r3
 801de26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de2a:	ed97 6a03 	vldr	s12, [r7, #12]
 801de2e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801dfcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de42:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801de4a:	e065      	b.n	801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de4c:	697b      	ldr	r3, [r7, #20]
 801de4e:	ee07 3a90 	vmov	s15, r3
 801de52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801dfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801de5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de5e:	4b59      	ldr	r3, [pc, #356]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de66:	ee07 3a90 	vmov	s15, r3
 801de6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de6e:	ed97 6a03 	vldr	s12, [r7, #12]
 801de72:	eddf 5a56 	vldr	s11, [pc, #344]	; 801dfcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801de8e:	e043      	b.n	801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de90:	697b      	ldr	r3, [r7, #20]
 801de92:	ee07 3a90 	vmov	s15, r3
 801de96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de9a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801dfd8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801de9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dea2:	4b48      	ldr	r3, [pc, #288]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801deaa:	ee07 3a90 	vmov	s15, r3
 801deae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801deb2:	ed97 6a03 	vldr	s12, [r7, #12]
 801deb6:	eddf 5a45 	vldr	s11, [pc, #276]	; 801dfcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801deba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801debe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801deca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dece:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ded2:	e021      	b.n	801df18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ded4:	697b      	ldr	r3, [r7, #20]
 801ded6:	ee07 3a90 	vmov	s15, r3
 801deda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dede:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801dfd4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801dee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dee6:	4b37      	ldr	r3, [pc, #220]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801deea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801deee:	ee07 3a90 	vmov	s15, r3
 801def2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801def6:	ed97 6a03 	vldr	s12, [r7, #12]
 801defa:	eddf 5a34 	vldr	s11, [pc, #208]	; 801dfcc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801defe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801df16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801df18:	4b2a      	ldr	r3, [pc, #168]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df1c:	0a5b      	lsrs	r3, r3, #9
 801df1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801df22:	ee07 3a90 	vmov	s15, r3
 801df26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801df32:	edd7 6a07 	vldr	s13, [r7, #28]
 801df36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801df3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801df3e:	ee17 2a90 	vmov	r2, s15
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801df46:	4b1f      	ldr	r3, [pc, #124]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df4a:	0c1b      	lsrs	r3, r3, #16
 801df4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801df50:	ee07 3a90 	vmov	s15, r3
 801df54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801df60:	edd7 6a07 	vldr	s13, [r7, #28]
 801df64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801df68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801df6c:	ee17 2a90 	vmov	r2, s15
 801df70:	687b      	ldr	r3, [r7, #4]
 801df72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801df74:	4b13      	ldr	r3, [pc, #76]	; (801dfc4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df78:	0e1b      	lsrs	r3, r3, #24
 801df7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801df7e:	ee07 3a90 	vmov	s15, r3
 801df82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801df8e:	edd7 6a07 	vldr	s13, [r7, #28]
 801df92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801df96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801df9a:	ee17 2a90 	vmov	r2, s15
 801df9e:	687b      	ldr	r3, [r7, #4]
 801dfa0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801dfa2:	e008      	b.n	801dfb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	2200      	movs	r2, #0
 801dfa8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801dfaa:	687b      	ldr	r3, [r7, #4]
 801dfac:	2200      	movs	r2, #0
 801dfae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801dfb0:	687b      	ldr	r3, [r7, #4]
 801dfb2:	2200      	movs	r2, #0
 801dfb4:	609a      	str	r2, [r3, #8]
}
 801dfb6:	bf00      	nop
 801dfb8:	3724      	adds	r7, #36	; 0x24
 801dfba:	46bd      	mov	sp, r7
 801dfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfc0:	4770      	bx	lr
 801dfc2:	bf00      	nop
 801dfc4:	58024400 	.word	0x58024400
 801dfc8:	03d09000 	.word	0x03d09000
 801dfcc:	46000000 	.word	0x46000000
 801dfd0:	4c742400 	.word	0x4c742400
 801dfd4:	4a742400 	.word	0x4a742400
 801dfd8:	4af42400 	.word	0x4af42400

0801dfdc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801dfdc:	b480      	push	{r7}
 801dfde:	b089      	sub	sp, #36	; 0x24
 801dfe0:	af00      	add	r7, sp, #0
 801dfe2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dfe4:	4ba0      	ldr	r3, [pc, #640]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801dfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dfe8:	f003 0303 	and.w	r3, r3, #3
 801dfec:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801dfee:	4b9e      	ldr	r3, [pc, #632]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801dff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801dff2:	091b      	lsrs	r3, r3, #4
 801dff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801dff8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801dffa:	4b9b      	ldr	r3, [pc, #620]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801dffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dffe:	f003 0301 	and.w	r3, r3, #1
 801e002:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801e004:	4b98      	ldr	r3, [pc, #608]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e008:	08db      	lsrs	r3, r3, #3
 801e00a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e00e:	693a      	ldr	r2, [r7, #16]
 801e010:	fb02 f303 	mul.w	r3, r2, r3
 801e014:	ee07 3a90 	vmov	s15, r3
 801e018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e01c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801e020:	697b      	ldr	r3, [r7, #20]
 801e022:	2b00      	cmp	r3, #0
 801e024:	f000 8111 	beq.w	801e24a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801e028:	69bb      	ldr	r3, [r7, #24]
 801e02a:	2b02      	cmp	r3, #2
 801e02c:	f000 8083 	beq.w	801e136 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801e030:	69bb      	ldr	r3, [r7, #24]
 801e032:	2b02      	cmp	r3, #2
 801e034:	f200 80a1 	bhi.w	801e17a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801e038:	69bb      	ldr	r3, [r7, #24]
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d003      	beq.n	801e046 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801e03e:	69bb      	ldr	r3, [r7, #24]
 801e040:	2b01      	cmp	r3, #1
 801e042:	d056      	beq.n	801e0f2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801e044:	e099      	b.n	801e17a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e046:	4b88      	ldr	r3, [pc, #544]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e048:	681b      	ldr	r3, [r3, #0]
 801e04a:	f003 0320 	and.w	r3, r3, #32
 801e04e:	2b00      	cmp	r3, #0
 801e050:	d02d      	beq.n	801e0ae <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e052:	4b85      	ldr	r3, [pc, #532]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e054:	681b      	ldr	r3, [r3, #0]
 801e056:	08db      	lsrs	r3, r3, #3
 801e058:	f003 0303 	and.w	r3, r3, #3
 801e05c:	4a83      	ldr	r2, [pc, #524]	; (801e26c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801e05e:	fa22 f303 	lsr.w	r3, r2, r3
 801e062:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e064:	68bb      	ldr	r3, [r7, #8]
 801e066:	ee07 3a90 	vmov	s15, r3
 801e06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e06e:	697b      	ldr	r3, [r7, #20]
 801e070:	ee07 3a90 	vmov	s15, r3
 801e074:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e078:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e07c:	4b7a      	ldr	r3, [pc, #488]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e084:	ee07 3a90 	vmov	s15, r3
 801e088:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e08c:	ed97 6a03 	vldr	s12, [r7, #12]
 801e090:	eddf 5a77 	vldr	s11, [pc, #476]	; 801e270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e094:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e098:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e09c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e0a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e0a8:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e0ac:	e087      	b.n	801e1be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e0ae:	697b      	ldr	r3, [r7, #20]
 801e0b0:	ee07 3a90 	vmov	s15, r3
 801e0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0b8:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801e274 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e0bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e0c0:	4b69      	ldr	r3, [pc, #420]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e0c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e0c8:	ee07 3a90 	vmov	s15, r3
 801e0cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e0d0:	ed97 6a03 	vldr	s12, [r7, #12]
 801e0d4:	eddf 5a66 	vldr	s11, [pc, #408]	; 801e270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e0d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e0dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e0e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e0e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e0e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e0ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e0f0:	e065      	b.n	801e1be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e0f2:	697b      	ldr	r3, [r7, #20]
 801e0f4:	ee07 3a90 	vmov	s15, r3
 801e0f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0fc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801e278 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801e100:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e104:	4b58      	ldr	r3, [pc, #352]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e10c:	ee07 3a90 	vmov	s15, r3
 801e110:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e114:	ed97 6a03 	vldr	s12, [r7, #12]
 801e118:	eddf 5a55 	vldr	s11, [pc, #340]	; 801e270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e11c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e120:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e124:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e128:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e12c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e130:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e134:	e043      	b.n	801e1be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e136:	697b      	ldr	r3, [r7, #20]
 801e138:	ee07 3a90 	vmov	s15, r3
 801e13c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e140:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801e27c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801e144:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e148:	4b47      	ldr	r3, [pc, #284]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e150:	ee07 3a90 	vmov	s15, r3
 801e154:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e158:	ed97 6a03 	vldr	s12, [r7, #12]
 801e15c:	eddf 5a44 	vldr	s11, [pc, #272]	; 801e270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e160:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e164:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e168:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e16c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e170:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e174:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e178:	e021      	b.n	801e1be <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e17a:	697b      	ldr	r3, [r7, #20]
 801e17c:	ee07 3a90 	vmov	s15, r3
 801e180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e184:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801e274 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e188:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e18c:	4b36      	ldr	r3, [pc, #216]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e18e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e194:	ee07 3a90 	vmov	s15, r3
 801e198:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e19c:	ed97 6a03 	vldr	s12, [r7, #12]
 801e1a0:	eddf 5a33 	vldr	s11, [pc, #204]	; 801e270 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e1a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e1a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e1ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1b8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e1bc:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801e1be:	4b2a      	ldr	r3, [pc, #168]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e1c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1c2:	0a5b      	lsrs	r3, r3, #9
 801e1c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e1c8:	ee07 3a90 	vmov	s15, r3
 801e1cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e1d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e1d8:	edd7 6a07 	vldr	s13, [r7, #28]
 801e1dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e1e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e1e4:	ee17 2a90 	vmov	r2, s15
 801e1e8:	687b      	ldr	r3, [r7, #4]
 801e1ea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801e1ec:	4b1e      	ldr	r3, [pc, #120]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e1ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1f0:	0c1b      	lsrs	r3, r3, #16
 801e1f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e1f6:	ee07 3a90 	vmov	s15, r3
 801e1fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e202:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e206:	edd7 6a07 	vldr	s13, [r7, #28]
 801e20a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e20e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e212:	ee17 2a90 	vmov	r2, s15
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801e21a:	4b13      	ldr	r3, [pc, #76]	; (801e268 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e21c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e21e:	0e1b      	lsrs	r3, r3, #24
 801e220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e224:	ee07 3a90 	vmov	s15, r3
 801e228:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e22c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e230:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e234:	edd7 6a07 	vldr	s13, [r7, #28]
 801e238:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e23c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e240:	ee17 2a90 	vmov	r2, s15
 801e244:	687b      	ldr	r3, [r7, #4]
 801e246:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801e248:	e008      	b.n	801e25c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801e24a:	687b      	ldr	r3, [r7, #4]
 801e24c:	2200      	movs	r2, #0
 801e24e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801e250:	687b      	ldr	r3, [r7, #4]
 801e252:	2200      	movs	r2, #0
 801e254:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801e256:	687b      	ldr	r3, [r7, #4]
 801e258:	2200      	movs	r2, #0
 801e25a:	609a      	str	r2, [r3, #8]
}
 801e25c:	bf00      	nop
 801e25e:	3724      	adds	r7, #36	; 0x24
 801e260:	46bd      	mov	sp, r7
 801e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e266:	4770      	bx	lr
 801e268:	58024400 	.word	0x58024400
 801e26c:	03d09000 	.word	0x03d09000
 801e270:	46000000 	.word	0x46000000
 801e274:	4c742400 	.word	0x4c742400
 801e278:	4a742400 	.word	0x4a742400
 801e27c:	4af42400 	.word	0x4af42400

0801e280 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801e280:	b580      	push	{r7, lr}
 801e282:	b084      	sub	sp, #16
 801e284:	af00      	add	r7, sp, #0
 801e286:	6078      	str	r0, [r7, #4]
 801e288:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e28a:	2300      	movs	r3, #0
 801e28c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e28e:	4b53      	ldr	r3, [pc, #332]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e292:	f003 0303 	and.w	r3, r3, #3
 801e296:	2b03      	cmp	r3, #3
 801e298:	d101      	bne.n	801e29e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801e29a:	2301      	movs	r3, #1
 801e29c:	e099      	b.n	801e3d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801e29e:	4b4f      	ldr	r3, [pc, #316]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e2a0:	681b      	ldr	r3, [r3, #0]
 801e2a2:	4a4e      	ldr	r2, [pc, #312]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e2a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801e2a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e2aa:	f7f6 ffe9 	bl	8015280 <HAL_GetTick>
 801e2ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e2b0:	e008      	b.n	801e2c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e2b2:	f7f6 ffe5 	bl	8015280 <HAL_GetTick>
 801e2b6:	4602      	mov	r2, r0
 801e2b8:	68bb      	ldr	r3, [r7, #8]
 801e2ba:	1ad3      	subs	r3, r2, r3
 801e2bc:	2b02      	cmp	r3, #2
 801e2be:	d901      	bls.n	801e2c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e2c0:	2303      	movs	r3, #3
 801e2c2:	e086      	b.n	801e3d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e2c4:	4b45      	ldr	r3, [pc, #276]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e2cc:	2b00      	cmp	r3, #0
 801e2ce:	d1f0      	bne.n	801e2b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801e2d0:	4b42      	ldr	r3, [pc, #264]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e2d4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801e2d8:	687b      	ldr	r3, [r7, #4]
 801e2da:	681b      	ldr	r3, [r3, #0]
 801e2dc:	031b      	lsls	r3, r3, #12
 801e2de:	493f      	ldr	r1, [pc, #252]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e2e0:	4313      	orrs	r3, r2
 801e2e2:	628b      	str	r3, [r1, #40]	; 0x28
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	685b      	ldr	r3, [r3, #4]
 801e2e8:	3b01      	subs	r3, #1
 801e2ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	689b      	ldr	r3, [r3, #8]
 801e2f2:	3b01      	subs	r3, #1
 801e2f4:	025b      	lsls	r3, r3, #9
 801e2f6:	b29b      	uxth	r3, r3
 801e2f8:	431a      	orrs	r2, r3
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	68db      	ldr	r3, [r3, #12]
 801e2fe:	3b01      	subs	r3, #1
 801e300:	041b      	lsls	r3, r3, #16
 801e302:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e306:	431a      	orrs	r2, r3
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	691b      	ldr	r3, [r3, #16]
 801e30c:	3b01      	subs	r3, #1
 801e30e:	061b      	lsls	r3, r3, #24
 801e310:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e314:	4931      	ldr	r1, [pc, #196]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e316:	4313      	orrs	r3, r2
 801e318:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801e31a:	4b30      	ldr	r3, [pc, #192]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e31e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	695b      	ldr	r3, [r3, #20]
 801e326:	492d      	ldr	r1, [pc, #180]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e328:	4313      	orrs	r3, r2
 801e32a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801e32c:	4b2b      	ldr	r3, [pc, #172]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e32e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e330:	f023 0220 	bic.w	r2, r3, #32
 801e334:	687b      	ldr	r3, [r7, #4]
 801e336:	699b      	ldr	r3, [r3, #24]
 801e338:	4928      	ldr	r1, [pc, #160]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e33a:	4313      	orrs	r3, r2
 801e33c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801e33e:	4b27      	ldr	r3, [pc, #156]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e342:	4a26      	ldr	r2, [pc, #152]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e344:	f023 0310 	bic.w	r3, r3, #16
 801e348:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801e34a:	4b24      	ldr	r3, [pc, #144]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e34c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e34e:	4b24      	ldr	r3, [pc, #144]	; (801e3e0 <RCCEx_PLL2_Config+0x160>)
 801e350:	4013      	ands	r3, r2
 801e352:	687a      	ldr	r2, [r7, #4]
 801e354:	69d2      	ldr	r2, [r2, #28]
 801e356:	00d2      	lsls	r2, r2, #3
 801e358:	4920      	ldr	r1, [pc, #128]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e35a:	4313      	orrs	r3, r2
 801e35c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e35e:	4b1f      	ldr	r3, [pc, #124]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e362:	4a1e      	ldr	r2, [pc, #120]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e364:	f043 0310 	orr.w	r3, r3, #16
 801e368:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e36a:	683b      	ldr	r3, [r7, #0]
 801e36c:	2b00      	cmp	r3, #0
 801e36e:	d106      	bne.n	801e37e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e370:	4b1a      	ldr	r3, [pc, #104]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e374:	4a19      	ldr	r2, [pc, #100]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e376:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e37a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e37c:	e00f      	b.n	801e39e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e37e:	683b      	ldr	r3, [r7, #0]
 801e380:	2b01      	cmp	r3, #1
 801e382:	d106      	bne.n	801e392 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e384:	4b15      	ldr	r3, [pc, #84]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e388:	4a14      	ldr	r2, [pc, #80]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e38a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e38e:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e390:	e005      	b.n	801e39e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e392:	4b12      	ldr	r3, [pc, #72]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e396:	4a11      	ldr	r2, [pc, #68]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e398:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801e39c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e39e:	4b0f      	ldr	r3, [pc, #60]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e3a0:	681b      	ldr	r3, [r3, #0]
 801e3a2:	4a0e      	ldr	r2, [pc, #56]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e3a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801e3a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e3aa:	f7f6 ff69 	bl	8015280 <HAL_GetTick>
 801e3ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e3b0:	e008      	b.n	801e3c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e3b2:	f7f6 ff65 	bl	8015280 <HAL_GetTick>
 801e3b6:	4602      	mov	r2, r0
 801e3b8:	68bb      	ldr	r3, [r7, #8]
 801e3ba:	1ad3      	subs	r3, r2, r3
 801e3bc:	2b02      	cmp	r3, #2
 801e3be:	d901      	bls.n	801e3c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e3c0:	2303      	movs	r3, #3
 801e3c2:	e006      	b.n	801e3d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e3c4:	4b05      	ldr	r3, [pc, #20]	; (801e3dc <RCCEx_PLL2_Config+0x15c>)
 801e3c6:	681b      	ldr	r3, [r3, #0]
 801e3c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e3cc:	2b00      	cmp	r3, #0
 801e3ce:	d0f0      	beq.n	801e3b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 801e3d2:	4618      	mov	r0, r3
 801e3d4:	3710      	adds	r7, #16
 801e3d6:	46bd      	mov	sp, r7
 801e3d8:	bd80      	pop	{r7, pc}
 801e3da:	bf00      	nop
 801e3dc:	58024400 	.word	0x58024400
 801e3e0:	ffff0007 	.word	0xffff0007

0801e3e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801e3e4:	b580      	push	{r7, lr}
 801e3e6:	b084      	sub	sp, #16
 801e3e8:	af00      	add	r7, sp, #0
 801e3ea:	6078      	str	r0, [r7, #4]
 801e3ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e3ee:	2300      	movs	r3, #0
 801e3f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e3f2:	4b53      	ldr	r3, [pc, #332]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e3f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e3f6:	f003 0303 	and.w	r3, r3, #3
 801e3fa:	2b03      	cmp	r3, #3
 801e3fc:	d101      	bne.n	801e402 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801e3fe:	2301      	movs	r3, #1
 801e400:	e099      	b.n	801e536 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801e402:	4b4f      	ldr	r3, [pc, #316]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e404:	681b      	ldr	r3, [r3, #0]
 801e406:	4a4e      	ldr	r2, [pc, #312]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e40c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e40e:	f7f6 ff37 	bl	8015280 <HAL_GetTick>
 801e412:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e414:	e008      	b.n	801e428 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e416:	f7f6 ff33 	bl	8015280 <HAL_GetTick>
 801e41a:	4602      	mov	r2, r0
 801e41c:	68bb      	ldr	r3, [r7, #8]
 801e41e:	1ad3      	subs	r3, r2, r3
 801e420:	2b02      	cmp	r3, #2
 801e422:	d901      	bls.n	801e428 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e424:	2303      	movs	r3, #3
 801e426:	e086      	b.n	801e536 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e428:	4b45      	ldr	r3, [pc, #276]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e430:	2b00      	cmp	r3, #0
 801e432:	d1f0      	bne.n	801e416 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e434:	4b42      	ldr	r3, [pc, #264]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e438:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	051b      	lsls	r3, r3, #20
 801e442:	493f      	ldr	r1, [pc, #252]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e444:	4313      	orrs	r3, r2
 801e446:	628b      	str	r3, [r1, #40]	; 0x28
 801e448:	687b      	ldr	r3, [r7, #4]
 801e44a:	685b      	ldr	r3, [r3, #4]
 801e44c:	3b01      	subs	r3, #1
 801e44e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	689b      	ldr	r3, [r3, #8]
 801e456:	3b01      	subs	r3, #1
 801e458:	025b      	lsls	r3, r3, #9
 801e45a:	b29b      	uxth	r3, r3
 801e45c:	431a      	orrs	r2, r3
 801e45e:	687b      	ldr	r3, [r7, #4]
 801e460:	68db      	ldr	r3, [r3, #12]
 801e462:	3b01      	subs	r3, #1
 801e464:	041b      	lsls	r3, r3, #16
 801e466:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e46a:	431a      	orrs	r2, r3
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	691b      	ldr	r3, [r3, #16]
 801e470:	3b01      	subs	r3, #1
 801e472:	061b      	lsls	r3, r3, #24
 801e474:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e478:	4931      	ldr	r1, [pc, #196]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e47a:	4313      	orrs	r3, r2
 801e47c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e47e:	4b30      	ldr	r3, [pc, #192]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e482:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801e486:	687b      	ldr	r3, [r7, #4]
 801e488:	695b      	ldr	r3, [r3, #20]
 801e48a:	492d      	ldr	r1, [pc, #180]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e48c:	4313      	orrs	r3, r2
 801e48e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e490:	4b2b      	ldr	r3, [pc, #172]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e494:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801e498:	687b      	ldr	r3, [r7, #4]
 801e49a:	699b      	ldr	r3, [r3, #24]
 801e49c:	4928      	ldr	r1, [pc, #160]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e49e:	4313      	orrs	r3, r2
 801e4a0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e4a2:	4b27      	ldr	r3, [pc, #156]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4a6:	4a26      	ldr	r2, [pc, #152]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e4ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e4ae:	4b24      	ldr	r3, [pc, #144]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e4b2:	4b24      	ldr	r3, [pc, #144]	; (801e544 <RCCEx_PLL3_Config+0x160>)
 801e4b4:	4013      	ands	r3, r2
 801e4b6:	687a      	ldr	r2, [r7, #4]
 801e4b8:	69d2      	ldr	r2, [r2, #28]
 801e4ba:	00d2      	lsls	r2, r2, #3
 801e4bc:	4920      	ldr	r1, [pc, #128]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4be:	4313      	orrs	r3, r2
 801e4c0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e4c2:	4b1f      	ldr	r3, [pc, #124]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4c6:	4a1e      	ldr	r2, [pc, #120]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e4cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e4ce:	683b      	ldr	r3, [r7, #0]
 801e4d0:	2b00      	cmp	r3, #0
 801e4d2:	d106      	bne.n	801e4e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e4d4:	4b1a      	ldr	r3, [pc, #104]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4d8:	4a19      	ldr	r2, [pc, #100]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801e4de:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e4e0:	e00f      	b.n	801e502 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e4e2:	683b      	ldr	r3, [r7, #0]
 801e4e4:	2b01      	cmp	r3, #1
 801e4e6:	d106      	bne.n	801e4f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e4e8:	4b15      	ldr	r3, [pc, #84]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4ec:	4a14      	ldr	r2, [pc, #80]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801e4f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e4f4:	e005      	b.n	801e502 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e4f6:	4b12      	ldr	r3, [pc, #72]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4fa:	4a11      	ldr	r2, [pc, #68]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e4fc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e500:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e502:	4b0f      	ldr	r3, [pc, #60]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e504:	681b      	ldr	r3, [r3, #0]
 801e506:	4a0e      	ldr	r2, [pc, #56]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e50c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e50e:	f7f6 feb7 	bl	8015280 <HAL_GetTick>
 801e512:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e514:	e008      	b.n	801e528 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e516:	f7f6 feb3 	bl	8015280 <HAL_GetTick>
 801e51a:	4602      	mov	r2, r0
 801e51c:	68bb      	ldr	r3, [r7, #8]
 801e51e:	1ad3      	subs	r3, r2, r3
 801e520:	2b02      	cmp	r3, #2
 801e522:	d901      	bls.n	801e528 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e524:	2303      	movs	r3, #3
 801e526:	e006      	b.n	801e536 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e528:	4b05      	ldr	r3, [pc, #20]	; (801e540 <RCCEx_PLL3_Config+0x15c>)
 801e52a:	681b      	ldr	r3, [r3, #0]
 801e52c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e530:	2b00      	cmp	r3, #0
 801e532:	d0f0      	beq.n	801e516 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e534:	7bfb      	ldrb	r3, [r7, #15]
}
 801e536:	4618      	mov	r0, r3
 801e538:	3710      	adds	r7, #16
 801e53a:	46bd      	mov	sp, r7
 801e53c:	bd80      	pop	{r7, pc}
 801e53e:	bf00      	nop
 801e540:	58024400 	.word	0x58024400
 801e544:	ffff0007 	.word	0xffff0007

0801e548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e548:	b580      	push	{r7, lr}
 801e54a:	b082      	sub	sp, #8
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	2b00      	cmp	r3, #0
 801e554:	d101      	bne.n	801e55a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e556:	2301      	movs	r3, #1
 801e558:	e049      	b.n	801e5ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e560:	b2db      	uxtb	r3, r3
 801e562:	2b00      	cmp	r3, #0
 801e564:	d106      	bne.n	801e574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e566:	687b      	ldr	r3, [r7, #4]
 801e568:	2200      	movs	r2, #0
 801e56a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e56e:	6878      	ldr	r0, [r7, #4]
 801e570:	f7f6 f89a 	bl	80146a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e574:	687b      	ldr	r3, [r7, #4]
 801e576:	2202      	movs	r2, #2
 801e578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e57c:	687b      	ldr	r3, [r7, #4]
 801e57e:	681a      	ldr	r2, [r3, #0]
 801e580:	687b      	ldr	r3, [r7, #4]
 801e582:	3304      	adds	r3, #4
 801e584:	4619      	mov	r1, r3
 801e586:	4610      	mov	r0, r2
 801e588:	f001 fa24 	bl	801f9d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	2201      	movs	r2, #1
 801e590:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	2201      	movs	r2, #1
 801e598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e59c:	687b      	ldr	r3, [r7, #4]
 801e59e:	2201      	movs	r2, #1
 801e5a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e5a4:	687b      	ldr	r3, [r7, #4]
 801e5a6:	2201      	movs	r2, #1
 801e5a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	2201      	movs	r2, #1
 801e5b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e5b4:	687b      	ldr	r3, [r7, #4]
 801e5b6:	2201      	movs	r2, #1
 801e5b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	2201      	movs	r2, #1
 801e5c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e5c4:	687b      	ldr	r3, [r7, #4]
 801e5c6:	2201      	movs	r2, #1
 801e5c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e5cc:	687b      	ldr	r3, [r7, #4]
 801e5ce:	2201      	movs	r2, #1
 801e5d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e5d4:	687b      	ldr	r3, [r7, #4]
 801e5d6:	2201      	movs	r2, #1
 801e5d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e5dc:	687b      	ldr	r3, [r7, #4]
 801e5de:	2201      	movs	r2, #1
 801e5e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e5e4:	687b      	ldr	r3, [r7, #4]
 801e5e6:	2201      	movs	r2, #1
 801e5e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e5ec:	2300      	movs	r3, #0
}
 801e5ee:	4618      	mov	r0, r3
 801e5f0:	3708      	adds	r7, #8
 801e5f2:	46bd      	mov	sp, r7
 801e5f4:	bd80      	pop	{r7, pc}
	...

0801e5f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801e5f8:	b480      	push	{r7}
 801e5fa:	b085      	sub	sp, #20
 801e5fc:	af00      	add	r7, sp, #0
 801e5fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e606:	b2db      	uxtb	r3, r3
 801e608:	2b01      	cmp	r3, #1
 801e60a:	d001      	beq.n	801e610 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801e60c:	2301      	movs	r3, #1
 801e60e:	e056      	b.n	801e6be <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e610:	687b      	ldr	r3, [r7, #4]
 801e612:	2202      	movs	r2, #2
 801e614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	681b      	ldr	r3, [r3, #0]
 801e61c:	4a2b      	ldr	r2, [pc, #172]	; (801e6cc <HAL_TIM_Base_Start+0xd4>)
 801e61e:	4293      	cmp	r3, r2
 801e620:	d02c      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e622:	687b      	ldr	r3, [r7, #4]
 801e624:	681b      	ldr	r3, [r3, #0]
 801e626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e62a:	d027      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	681b      	ldr	r3, [r3, #0]
 801e630:	4a27      	ldr	r2, [pc, #156]	; (801e6d0 <HAL_TIM_Base_Start+0xd8>)
 801e632:	4293      	cmp	r3, r2
 801e634:	d022      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e636:	687b      	ldr	r3, [r7, #4]
 801e638:	681b      	ldr	r3, [r3, #0]
 801e63a:	4a26      	ldr	r2, [pc, #152]	; (801e6d4 <HAL_TIM_Base_Start+0xdc>)
 801e63c:	4293      	cmp	r3, r2
 801e63e:	d01d      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e640:	687b      	ldr	r3, [r7, #4]
 801e642:	681b      	ldr	r3, [r3, #0]
 801e644:	4a24      	ldr	r2, [pc, #144]	; (801e6d8 <HAL_TIM_Base_Start+0xe0>)
 801e646:	4293      	cmp	r3, r2
 801e648:	d018      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	681b      	ldr	r3, [r3, #0]
 801e64e:	4a23      	ldr	r2, [pc, #140]	; (801e6dc <HAL_TIM_Base_Start+0xe4>)
 801e650:	4293      	cmp	r3, r2
 801e652:	d013      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	681b      	ldr	r3, [r3, #0]
 801e658:	4a21      	ldr	r2, [pc, #132]	; (801e6e0 <HAL_TIM_Base_Start+0xe8>)
 801e65a:	4293      	cmp	r3, r2
 801e65c:	d00e      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e65e:	687b      	ldr	r3, [r7, #4]
 801e660:	681b      	ldr	r3, [r3, #0]
 801e662:	4a20      	ldr	r2, [pc, #128]	; (801e6e4 <HAL_TIM_Base_Start+0xec>)
 801e664:	4293      	cmp	r3, r2
 801e666:	d009      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	681b      	ldr	r3, [r3, #0]
 801e66c:	4a1e      	ldr	r2, [pc, #120]	; (801e6e8 <HAL_TIM_Base_Start+0xf0>)
 801e66e:	4293      	cmp	r3, r2
 801e670:	d004      	beq.n	801e67c <HAL_TIM_Base_Start+0x84>
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	681b      	ldr	r3, [r3, #0]
 801e676:	4a1d      	ldr	r2, [pc, #116]	; (801e6ec <HAL_TIM_Base_Start+0xf4>)
 801e678:	4293      	cmp	r3, r2
 801e67a:	d115      	bne.n	801e6a8 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e67c:	687b      	ldr	r3, [r7, #4]
 801e67e:	681b      	ldr	r3, [r3, #0]
 801e680:	689a      	ldr	r2, [r3, #8]
 801e682:	4b1b      	ldr	r3, [pc, #108]	; (801e6f0 <HAL_TIM_Base_Start+0xf8>)
 801e684:	4013      	ands	r3, r2
 801e686:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e688:	68fb      	ldr	r3, [r7, #12]
 801e68a:	2b06      	cmp	r3, #6
 801e68c:	d015      	beq.n	801e6ba <HAL_TIM_Base_Start+0xc2>
 801e68e:	68fb      	ldr	r3, [r7, #12]
 801e690:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e694:	d011      	beq.n	801e6ba <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801e696:	687b      	ldr	r3, [r7, #4]
 801e698:	681b      	ldr	r3, [r3, #0]
 801e69a:	681a      	ldr	r2, [r3, #0]
 801e69c:	687b      	ldr	r3, [r7, #4]
 801e69e:	681b      	ldr	r3, [r3, #0]
 801e6a0:	f042 0201 	orr.w	r2, r2, #1
 801e6a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e6a6:	e008      	b.n	801e6ba <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e6a8:	687b      	ldr	r3, [r7, #4]
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	681a      	ldr	r2, [r3, #0]
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	681b      	ldr	r3, [r3, #0]
 801e6b2:	f042 0201 	orr.w	r2, r2, #1
 801e6b6:	601a      	str	r2, [r3, #0]
 801e6b8:	e000      	b.n	801e6bc <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e6ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e6bc:	2300      	movs	r3, #0
}
 801e6be:	4618      	mov	r0, r3
 801e6c0:	3714      	adds	r7, #20
 801e6c2:	46bd      	mov	sp, r7
 801e6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e6c8:	4770      	bx	lr
 801e6ca:	bf00      	nop
 801e6cc:	40010000 	.word	0x40010000
 801e6d0:	40000400 	.word	0x40000400
 801e6d4:	40000800 	.word	0x40000800
 801e6d8:	40000c00 	.word	0x40000c00
 801e6dc:	40010400 	.word	0x40010400
 801e6e0:	40001800 	.word	0x40001800
 801e6e4:	40014000 	.word	0x40014000
 801e6e8:	4000e000 	.word	0x4000e000
 801e6ec:	4000e400 	.word	0x4000e400
 801e6f0:	00010007 	.word	0x00010007

0801e6f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e6f4:	b480      	push	{r7}
 801e6f6:	b085      	sub	sp, #20
 801e6f8:	af00      	add	r7, sp, #0
 801e6fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e6fc:	687b      	ldr	r3, [r7, #4]
 801e6fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e702:	b2db      	uxtb	r3, r3
 801e704:	2b01      	cmp	r3, #1
 801e706:	d001      	beq.n	801e70c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e708:	2301      	movs	r3, #1
 801e70a:	e05e      	b.n	801e7ca <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	2202      	movs	r2, #2
 801e710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	68da      	ldr	r2, [r3, #12]
 801e71a:	687b      	ldr	r3, [r7, #4]
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	f042 0201 	orr.w	r2, r2, #1
 801e722:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e724:	687b      	ldr	r3, [r7, #4]
 801e726:	681b      	ldr	r3, [r3, #0]
 801e728:	4a2b      	ldr	r2, [pc, #172]	; (801e7d8 <HAL_TIM_Base_Start_IT+0xe4>)
 801e72a:	4293      	cmp	r3, r2
 801e72c:	d02c      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e72e:	687b      	ldr	r3, [r7, #4]
 801e730:	681b      	ldr	r3, [r3, #0]
 801e732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e736:	d027      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	4a27      	ldr	r2, [pc, #156]	; (801e7dc <HAL_TIM_Base_Start_IT+0xe8>)
 801e73e:	4293      	cmp	r3, r2
 801e740:	d022      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e742:	687b      	ldr	r3, [r7, #4]
 801e744:	681b      	ldr	r3, [r3, #0]
 801e746:	4a26      	ldr	r2, [pc, #152]	; (801e7e0 <HAL_TIM_Base_Start_IT+0xec>)
 801e748:	4293      	cmp	r3, r2
 801e74a:	d01d      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	681b      	ldr	r3, [r3, #0]
 801e750:	4a24      	ldr	r2, [pc, #144]	; (801e7e4 <HAL_TIM_Base_Start_IT+0xf0>)
 801e752:	4293      	cmp	r3, r2
 801e754:	d018      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	681b      	ldr	r3, [r3, #0]
 801e75a:	4a23      	ldr	r2, [pc, #140]	; (801e7e8 <HAL_TIM_Base_Start_IT+0xf4>)
 801e75c:	4293      	cmp	r3, r2
 801e75e:	d013      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	681b      	ldr	r3, [r3, #0]
 801e764:	4a21      	ldr	r2, [pc, #132]	; (801e7ec <HAL_TIM_Base_Start_IT+0xf8>)
 801e766:	4293      	cmp	r3, r2
 801e768:	d00e      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	681b      	ldr	r3, [r3, #0]
 801e76e:	4a20      	ldr	r2, [pc, #128]	; (801e7f0 <HAL_TIM_Base_Start_IT+0xfc>)
 801e770:	4293      	cmp	r3, r2
 801e772:	d009      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	681b      	ldr	r3, [r3, #0]
 801e778:	4a1e      	ldr	r2, [pc, #120]	; (801e7f4 <HAL_TIM_Base_Start_IT+0x100>)
 801e77a:	4293      	cmp	r3, r2
 801e77c:	d004      	beq.n	801e788 <HAL_TIM_Base_Start_IT+0x94>
 801e77e:	687b      	ldr	r3, [r7, #4]
 801e780:	681b      	ldr	r3, [r3, #0]
 801e782:	4a1d      	ldr	r2, [pc, #116]	; (801e7f8 <HAL_TIM_Base_Start_IT+0x104>)
 801e784:	4293      	cmp	r3, r2
 801e786:	d115      	bne.n	801e7b4 <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e788:	687b      	ldr	r3, [r7, #4]
 801e78a:	681b      	ldr	r3, [r3, #0]
 801e78c:	689a      	ldr	r2, [r3, #8]
 801e78e:	4b1b      	ldr	r3, [pc, #108]	; (801e7fc <HAL_TIM_Base_Start_IT+0x108>)
 801e790:	4013      	ands	r3, r2
 801e792:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e794:	68fb      	ldr	r3, [r7, #12]
 801e796:	2b06      	cmp	r3, #6
 801e798:	d015      	beq.n	801e7c6 <HAL_TIM_Base_Start_IT+0xd2>
 801e79a:	68fb      	ldr	r3, [r7, #12]
 801e79c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e7a0:	d011      	beq.n	801e7c6 <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	681a      	ldr	r2, [r3, #0]
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	f042 0201 	orr.w	r2, r2, #1
 801e7b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e7b2:	e008      	b.n	801e7c6 <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	681a      	ldr	r2, [r3, #0]
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	f042 0201 	orr.w	r2, r2, #1
 801e7c2:	601a      	str	r2, [r3, #0]
 801e7c4:	e000      	b.n	801e7c8 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e7c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e7c8:	2300      	movs	r3, #0
}
 801e7ca:	4618      	mov	r0, r3
 801e7cc:	3714      	adds	r7, #20
 801e7ce:	46bd      	mov	sp, r7
 801e7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7d4:	4770      	bx	lr
 801e7d6:	bf00      	nop
 801e7d8:	40010000 	.word	0x40010000
 801e7dc:	40000400 	.word	0x40000400
 801e7e0:	40000800 	.word	0x40000800
 801e7e4:	40000c00 	.word	0x40000c00
 801e7e8:	40010400 	.word	0x40010400
 801e7ec:	40001800 	.word	0x40001800
 801e7f0:	40014000 	.word	0x40014000
 801e7f4:	4000e000 	.word	0x4000e000
 801e7f8:	4000e400 	.word	0x4000e400
 801e7fc:	00010007 	.word	0x00010007

0801e800 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801e800:	b480      	push	{r7}
 801e802:	b083      	sub	sp, #12
 801e804:	af00      	add	r7, sp, #0
 801e806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801e808:	687b      	ldr	r3, [r7, #4]
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	68da      	ldr	r2, [r3, #12]
 801e80e:	687b      	ldr	r3, [r7, #4]
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	f022 0201 	bic.w	r2, r2, #1
 801e816:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e818:	687b      	ldr	r3, [r7, #4]
 801e81a:	681b      	ldr	r3, [r3, #0]
 801e81c:	6a1a      	ldr	r2, [r3, #32]
 801e81e:	f241 1311 	movw	r3, #4369	; 0x1111
 801e822:	4013      	ands	r3, r2
 801e824:	2b00      	cmp	r3, #0
 801e826:	d10f      	bne.n	801e848 <HAL_TIM_Base_Stop_IT+0x48>
 801e828:	687b      	ldr	r3, [r7, #4]
 801e82a:	681b      	ldr	r3, [r3, #0]
 801e82c:	6a1a      	ldr	r2, [r3, #32]
 801e82e:	f240 4344 	movw	r3, #1092	; 0x444
 801e832:	4013      	ands	r3, r2
 801e834:	2b00      	cmp	r3, #0
 801e836:	d107      	bne.n	801e848 <HAL_TIM_Base_Stop_IT+0x48>
 801e838:	687b      	ldr	r3, [r7, #4]
 801e83a:	681b      	ldr	r3, [r3, #0]
 801e83c:	681a      	ldr	r2, [r3, #0]
 801e83e:	687b      	ldr	r3, [r7, #4]
 801e840:	681b      	ldr	r3, [r3, #0]
 801e842:	f022 0201 	bic.w	r2, r2, #1
 801e846:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801e848:	687b      	ldr	r3, [r7, #4]
 801e84a:	2201      	movs	r2, #1
 801e84c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e850:	2300      	movs	r3, #0
}
 801e852:	4618      	mov	r0, r3
 801e854:	370c      	adds	r7, #12
 801e856:	46bd      	mov	sp, r7
 801e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e85c:	4770      	bx	lr

0801e85e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e85e:	b580      	push	{r7, lr}
 801e860:	b082      	sub	sp, #8
 801e862:	af00      	add	r7, sp, #0
 801e864:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e866:	687b      	ldr	r3, [r7, #4]
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d101      	bne.n	801e870 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e86c:	2301      	movs	r3, #1
 801e86e:	e049      	b.n	801e904 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e870:	687b      	ldr	r3, [r7, #4]
 801e872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e876:	b2db      	uxtb	r3, r3
 801e878:	2b00      	cmp	r3, #0
 801e87a:	d106      	bne.n	801e88a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e87c:	687b      	ldr	r3, [r7, #4]
 801e87e:	2200      	movs	r2, #0
 801e880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e884:	6878      	ldr	r0, [r7, #4]
 801e886:	f000 f841 	bl	801e90c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	2202      	movs	r2, #2
 801e88e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e892:	687b      	ldr	r3, [r7, #4]
 801e894:	681a      	ldr	r2, [r3, #0]
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	3304      	adds	r3, #4
 801e89a:	4619      	mov	r1, r3
 801e89c:	4610      	mov	r0, r2
 801e89e:	f001 f899 	bl	801f9d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e8a2:	687b      	ldr	r3, [r7, #4]
 801e8a4:	2201      	movs	r2, #1
 801e8a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e8aa:	687b      	ldr	r3, [r7, #4]
 801e8ac:	2201      	movs	r2, #1
 801e8ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	2201      	movs	r2, #1
 801e8b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	2201      	movs	r2, #1
 801e8be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	2201      	movs	r2, #1
 801e8c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e8ca:	687b      	ldr	r3, [r7, #4]
 801e8cc:	2201      	movs	r2, #1
 801e8ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e8d2:	687b      	ldr	r3, [r7, #4]
 801e8d4:	2201      	movs	r2, #1
 801e8d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e8da:	687b      	ldr	r3, [r7, #4]
 801e8dc:	2201      	movs	r2, #1
 801e8de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e8e2:	687b      	ldr	r3, [r7, #4]
 801e8e4:	2201      	movs	r2, #1
 801e8e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	2201      	movs	r2, #1
 801e8ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e8f2:	687b      	ldr	r3, [r7, #4]
 801e8f4:	2201      	movs	r2, #1
 801e8f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	2201      	movs	r2, #1
 801e8fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e902:	2300      	movs	r3, #0
}
 801e904:	4618      	mov	r0, r3
 801e906:	3708      	adds	r7, #8
 801e908:	46bd      	mov	sp, r7
 801e90a:	bd80      	pop	{r7, pc}

0801e90c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801e90c:	b480      	push	{r7}
 801e90e:	b083      	sub	sp, #12
 801e910:	af00      	add	r7, sp, #0
 801e912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801e914:	bf00      	nop
 801e916:	370c      	adds	r7, #12
 801e918:	46bd      	mov	sp, r7
 801e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e91e:	4770      	bx	lr

0801e920 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e920:	b580      	push	{r7, lr}
 801e922:	b084      	sub	sp, #16
 801e924:	af00      	add	r7, sp, #0
 801e926:	6078      	str	r0, [r7, #4]
 801e928:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e92a:	683b      	ldr	r3, [r7, #0]
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d109      	bne.n	801e944 <HAL_TIM_PWM_Start+0x24>
 801e930:	687b      	ldr	r3, [r7, #4]
 801e932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e936:	b2db      	uxtb	r3, r3
 801e938:	2b01      	cmp	r3, #1
 801e93a:	bf14      	ite	ne
 801e93c:	2301      	movne	r3, #1
 801e93e:	2300      	moveq	r3, #0
 801e940:	b2db      	uxtb	r3, r3
 801e942:	e03c      	b.n	801e9be <HAL_TIM_PWM_Start+0x9e>
 801e944:	683b      	ldr	r3, [r7, #0]
 801e946:	2b04      	cmp	r3, #4
 801e948:	d109      	bne.n	801e95e <HAL_TIM_PWM_Start+0x3e>
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801e950:	b2db      	uxtb	r3, r3
 801e952:	2b01      	cmp	r3, #1
 801e954:	bf14      	ite	ne
 801e956:	2301      	movne	r3, #1
 801e958:	2300      	moveq	r3, #0
 801e95a:	b2db      	uxtb	r3, r3
 801e95c:	e02f      	b.n	801e9be <HAL_TIM_PWM_Start+0x9e>
 801e95e:	683b      	ldr	r3, [r7, #0]
 801e960:	2b08      	cmp	r3, #8
 801e962:	d109      	bne.n	801e978 <HAL_TIM_PWM_Start+0x58>
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e96a:	b2db      	uxtb	r3, r3
 801e96c:	2b01      	cmp	r3, #1
 801e96e:	bf14      	ite	ne
 801e970:	2301      	movne	r3, #1
 801e972:	2300      	moveq	r3, #0
 801e974:	b2db      	uxtb	r3, r3
 801e976:	e022      	b.n	801e9be <HAL_TIM_PWM_Start+0x9e>
 801e978:	683b      	ldr	r3, [r7, #0]
 801e97a:	2b0c      	cmp	r3, #12
 801e97c:	d109      	bne.n	801e992 <HAL_TIM_PWM_Start+0x72>
 801e97e:	687b      	ldr	r3, [r7, #4]
 801e980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e984:	b2db      	uxtb	r3, r3
 801e986:	2b01      	cmp	r3, #1
 801e988:	bf14      	ite	ne
 801e98a:	2301      	movne	r3, #1
 801e98c:	2300      	moveq	r3, #0
 801e98e:	b2db      	uxtb	r3, r3
 801e990:	e015      	b.n	801e9be <HAL_TIM_PWM_Start+0x9e>
 801e992:	683b      	ldr	r3, [r7, #0]
 801e994:	2b10      	cmp	r3, #16
 801e996:	d109      	bne.n	801e9ac <HAL_TIM_PWM_Start+0x8c>
 801e998:	687b      	ldr	r3, [r7, #4]
 801e99a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801e99e:	b2db      	uxtb	r3, r3
 801e9a0:	2b01      	cmp	r3, #1
 801e9a2:	bf14      	ite	ne
 801e9a4:	2301      	movne	r3, #1
 801e9a6:	2300      	moveq	r3, #0
 801e9a8:	b2db      	uxtb	r3, r3
 801e9aa:	e008      	b.n	801e9be <HAL_TIM_PWM_Start+0x9e>
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801e9b2:	b2db      	uxtb	r3, r3
 801e9b4:	2b01      	cmp	r3, #1
 801e9b6:	bf14      	ite	ne
 801e9b8:	2301      	movne	r3, #1
 801e9ba:	2300      	moveq	r3, #0
 801e9bc:	b2db      	uxtb	r3, r3
 801e9be:	2b00      	cmp	r3, #0
 801e9c0:	d001      	beq.n	801e9c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801e9c2:	2301      	movs	r3, #1
 801e9c4:	e0ab      	b.n	801eb1e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801e9c6:	683b      	ldr	r3, [r7, #0]
 801e9c8:	2b00      	cmp	r3, #0
 801e9ca:	d104      	bne.n	801e9d6 <HAL_TIM_PWM_Start+0xb6>
 801e9cc:	687b      	ldr	r3, [r7, #4]
 801e9ce:	2202      	movs	r2, #2
 801e9d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e9d4:	e023      	b.n	801ea1e <HAL_TIM_PWM_Start+0xfe>
 801e9d6:	683b      	ldr	r3, [r7, #0]
 801e9d8:	2b04      	cmp	r3, #4
 801e9da:	d104      	bne.n	801e9e6 <HAL_TIM_PWM_Start+0xc6>
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	2202      	movs	r2, #2
 801e9e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e9e4:	e01b      	b.n	801ea1e <HAL_TIM_PWM_Start+0xfe>
 801e9e6:	683b      	ldr	r3, [r7, #0]
 801e9e8:	2b08      	cmp	r3, #8
 801e9ea:	d104      	bne.n	801e9f6 <HAL_TIM_PWM_Start+0xd6>
 801e9ec:	687b      	ldr	r3, [r7, #4]
 801e9ee:	2202      	movs	r2, #2
 801e9f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e9f4:	e013      	b.n	801ea1e <HAL_TIM_PWM_Start+0xfe>
 801e9f6:	683b      	ldr	r3, [r7, #0]
 801e9f8:	2b0c      	cmp	r3, #12
 801e9fa:	d104      	bne.n	801ea06 <HAL_TIM_PWM_Start+0xe6>
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	2202      	movs	r2, #2
 801ea00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ea04:	e00b      	b.n	801ea1e <HAL_TIM_PWM_Start+0xfe>
 801ea06:	683b      	ldr	r3, [r7, #0]
 801ea08:	2b10      	cmp	r3, #16
 801ea0a:	d104      	bne.n	801ea16 <HAL_TIM_PWM_Start+0xf6>
 801ea0c:	687b      	ldr	r3, [r7, #4]
 801ea0e:	2202      	movs	r2, #2
 801ea10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ea14:	e003      	b.n	801ea1e <HAL_TIM_PWM_Start+0xfe>
 801ea16:	687b      	ldr	r3, [r7, #4]
 801ea18:	2202      	movs	r2, #2
 801ea1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ea1e:	687b      	ldr	r3, [r7, #4]
 801ea20:	681b      	ldr	r3, [r3, #0]
 801ea22:	2201      	movs	r2, #1
 801ea24:	6839      	ldr	r1, [r7, #0]
 801ea26:	4618      	mov	r0, r3
 801ea28:	f001 fe0e 	bl	8020648 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801ea2c:	687b      	ldr	r3, [r7, #4]
 801ea2e:	681b      	ldr	r3, [r3, #0]
 801ea30:	4a3d      	ldr	r2, [pc, #244]	; (801eb28 <HAL_TIM_PWM_Start+0x208>)
 801ea32:	4293      	cmp	r3, r2
 801ea34:	d013      	beq.n	801ea5e <HAL_TIM_PWM_Start+0x13e>
 801ea36:	687b      	ldr	r3, [r7, #4]
 801ea38:	681b      	ldr	r3, [r3, #0]
 801ea3a:	4a3c      	ldr	r2, [pc, #240]	; (801eb2c <HAL_TIM_PWM_Start+0x20c>)
 801ea3c:	4293      	cmp	r3, r2
 801ea3e:	d00e      	beq.n	801ea5e <HAL_TIM_PWM_Start+0x13e>
 801ea40:	687b      	ldr	r3, [r7, #4]
 801ea42:	681b      	ldr	r3, [r3, #0]
 801ea44:	4a3a      	ldr	r2, [pc, #232]	; (801eb30 <HAL_TIM_PWM_Start+0x210>)
 801ea46:	4293      	cmp	r3, r2
 801ea48:	d009      	beq.n	801ea5e <HAL_TIM_PWM_Start+0x13e>
 801ea4a:	687b      	ldr	r3, [r7, #4]
 801ea4c:	681b      	ldr	r3, [r3, #0]
 801ea4e:	4a39      	ldr	r2, [pc, #228]	; (801eb34 <HAL_TIM_PWM_Start+0x214>)
 801ea50:	4293      	cmp	r3, r2
 801ea52:	d004      	beq.n	801ea5e <HAL_TIM_PWM_Start+0x13e>
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	4a37      	ldr	r2, [pc, #220]	; (801eb38 <HAL_TIM_PWM_Start+0x218>)
 801ea5a:	4293      	cmp	r3, r2
 801ea5c:	d101      	bne.n	801ea62 <HAL_TIM_PWM_Start+0x142>
 801ea5e:	2301      	movs	r3, #1
 801ea60:	e000      	b.n	801ea64 <HAL_TIM_PWM_Start+0x144>
 801ea62:	2300      	movs	r3, #0
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d007      	beq.n	801ea78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801ea6e:	687b      	ldr	r3, [r7, #4]
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801ea76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	681b      	ldr	r3, [r3, #0]
 801ea7c:	4a2a      	ldr	r2, [pc, #168]	; (801eb28 <HAL_TIM_PWM_Start+0x208>)
 801ea7e:	4293      	cmp	r3, r2
 801ea80:	d02c      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	681b      	ldr	r3, [r3, #0]
 801ea86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ea8a:	d027      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801ea8c:	687b      	ldr	r3, [r7, #4]
 801ea8e:	681b      	ldr	r3, [r3, #0]
 801ea90:	4a2a      	ldr	r2, [pc, #168]	; (801eb3c <HAL_TIM_PWM_Start+0x21c>)
 801ea92:	4293      	cmp	r3, r2
 801ea94:	d022      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	4a29      	ldr	r2, [pc, #164]	; (801eb40 <HAL_TIM_PWM_Start+0x220>)
 801ea9c:	4293      	cmp	r3, r2
 801ea9e:	d01d      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801eaa0:	687b      	ldr	r3, [r7, #4]
 801eaa2:	681b      	ldr	r3, [r3, #0]
 801eaa4:	4a27      	ldr	r2, [pc, #156]	; (801eb44 <HAL_TIM_PWM_Start+0x224>)
 801eaa6:	4293      	cmp	r3, r2
 801eaa8:	d018      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	681b      	ldr	r3, [r3, #0]
 801eaae:	4a1f      	ldr	r2, [pc, #124]	; (801eb2c <HAL_TIM_PWM_Start+0x20c>)
 801eab0:	4293      	cmp	r3, r2
 801eab2:	d013      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	4a23      	ldr	r2, [pc, #140]	; (801eb48 <HAL_TIM_PWM_Start+0x228>)
 801eaba:	4293      	cmp	r3, r2
 801eabc:	d00e      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	681b      	ldr	r3, [r3, #0]
 801eac2:	4a1b      	ldr	r2, [pc, #108]	; (801eb30 <HAL_TIM_PWM_Start+0x210>)
 801eac4:	4293      	cmp	r3, r2
 801eac6:	d009      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	681b      	ldr	r3, [r3, #0]
 801eacc:	4a1f      	ldr	r2, [pc, #124]	; (801eb4c <HAL_TIM_PWM_Start+0x22c>)
 801eace:	4293      	cmp	r3, r2
 801ead0:	d004      	beq.n	801eadc <HAL_TIM_PWM_Start+0x1bc>
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	681b      	ldr	r3, [r3, #0]
 801ead6:	4a1e      	ldr	r2, [pc, #120]	; (801eb50 <HAL_TIM_PWM_Start+0x230>)
 801ead8:	4293      	cmp	r3, r2
 801eada:	d115      	bne.n	801eb08 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	689a      	ldr	r2, [r3, #8]
 801eae2:	4b1c      	ldr	r3, [pc, #112]	; (801eb54 <HAL_TIM_PWM_Start+0x234>)
 801eae4:	4013      	ands	r3, r2
 801eae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eae8:	68fb      	ldr	r3, [r7, #12]
 801eaea:	2b06      	cmp	r3, #6
 801eaec:	d015      	beq.n	801eb1a <HAL_TIM_PWM_Start+0x1fa>
 801eaee:	68fb      	ldr	r3, [r7, #12]
 801eaf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eaf4:	d011      	beq.n	801eb1a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	681b      	ldr	r3, [r3, #0]
 801eafa:	681a      	ldr	r2, [r3, #0]
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	681b      	ldr	r3, [r3, #0]
 801eb00:	f042 0201 	orr.w	r2, r2, #1
 801eb04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb06:	e008      	b.n	801eb1a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801eb08:	687b      	ldr	r3, [r7, #4]
 801eb0a:	681b      	ldr	r3, [r3, #0]
 801eb0c:	681a      	ldr	r2, [r3, #0]
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	f042 0201 	orr.w	r2, r2, #1
 801eb16:	601a      	str	r2, [r3, #0]
 801eb18:	e000      	b.n	801eb1c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801eb1c:	2300      	movs	r3, #0
}
 801eb1e:	4618      	mov	r0, r3
 801eb20:	3710      	adds	r7, #16
 801eb22:	46bd      	mov	sp, r7
 801eb24:	bd80      	pop	{r7, pc}
 801eb26:	bf00      	nop
 801eb28:	40010000 	.word	0x40010000
 801eb2c:	40010400 	.word	0x40010400
 801eb30:	40014000 	.word	0x40014000
 801eb34:	40014400 	.word	0x40014400
 801eb38:	40014800 	.word	0x40014800
 801eb3c:	40000400 	.word	0x40000400
 801eb40:	40000800 	.word	0x40000800
 801eb44:	40000c00 	.word	0x40000c00
 801eb48:	40001800 	.word	0x40001800
 801eb4c:	4000e000 	.word	0x4000e000
 801eb50:	4000e400 	.word	0x4000e400
 801eb54:	00010007 	.word	0x00010007

0801eb58 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801eb58:	b580      	push	{r7, lr}
 801eb5a:	b082      	sub	sp, #8
 801eb5c:	af00      	add	r7, sp, #0
 801eb5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	2b00      	cmp	r3, #0
 801eb64:	d101      	bne.n	801eb6a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801eb66:	2301      	movs	r3, #1
 801eb68:	e049      	b.n	801ebfe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801eb6a:	687b      	ldr	r3, [r7, #4]
 801eb6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801eb70:	b2db      	uxtb	r3, r3
 801eb72:	2b00      	cmp	r3, #0
 801eb74:	d106      	bne.n	801eb84 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	2200      	movs	r2, #0
 801eb7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801eb7e:	6878      	ldr	r0, [r7, #4]
 801eb80:	f000 f841 	bl	801ec06 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	2202      	movs	r2, #2
 801eb88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801eb8c:	687b      	ldr	r3, [r7, #4]
 801eb8e:	681a      	ldr	r2, [r3, #0]
 801eb90:	687b      	ldr	r3, [r7, #4]
 801eb92:	3304      	adds	r3, #4
 801eb94:	4619      	mov	r1, r3
 801eb96:	4610      	mov	r0, r2
 801eb98:	f000 ff1c 	bl	801f9d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	2201      	movs	r2, #1
 801eba0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	2201      	movs	r2, #1
 801eba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ebac:	687b      	ldr	r3, [r7, #4]
 801ebae:	2201      	movs	r2, #1
 801ebb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	2201      	movs	r2, #1
 801ebb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	2201      	movs	r2, #1
 801ebc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ebc4:	687b      	ldr	r3, [r7, #4]
 801ebc6:	2201      	movs	r2, #1
 801ebc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ebcc:	687b      	ldr	r3, [r7, #4]
 801ebce:	2201      	movs	r2, #1
 801ebd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ebd4:	687b      	ldr	r3, [r7, #4]
 801ebd6:	2201      	movs	r2, #1
 801ebd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	2201      	movs	r2, #1
 801ebe0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	2201      	movs	r2, #1
 801ebe8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ebec:	687b      	ldr	r3, [r7, #4]
 801ebee:	2201      	movs	r2, #1
 801ebf0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ebf4:	687b      	ldr	r3, [r7, #4]
 801ebf6:	2201      	movs	r2, #1
 801ebf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ebfc:	2300      	movs	r3, #0
}
 801ebfe:	4618      	mov	r0, r3
 801ec00:	3708      	adds	r7, #8
 801ec02:	46bd      	mov	sp, r7
 801ec04:	bd80      	pop	{r7, pc}

0801ec06 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801ec06:	b480      	push	{r7}
 801ec08:	b083      	sub	sp, #12
 801ec0a:	af00      	add	r7, sp, #0
 801ec0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801ec0e:	bf00      	nop
 801ec10:	370c      	adds	r7, #12
 801ec12:	46bd      	mov	sp, r7
 801ec14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec18:	4770      	bx	lr
	...

0801ec1c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ec1c:	b580      	push	{r7, lr}
 801ec1e:	b084      	sub	sp, #16
 801ec20:	af00      	add	r7, sp, #0
 801ec22:	6078      	str	r0, [r7, #4]
 801ec24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801ec26:	683b      	ldr	r3, [r7, #0]
 801ec28:	2b00      	cmp	r3, #0
 801ec2a:	d104      	bne.n	801ec36 <HAL_TIM_IC_Start+0x1a>
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ec32:	b2db      	uxtb	r3, r3
 801ec34:	e023      	b.n	801ec7e <HAL_TIM_IC_Start+0x62>
 801ec36:	683b      	ldr	r3, [r7, #0]
 801ec38:	2b04      	cmp	r3, #4
 801ec3a:	d104      	bne.n	801ec46 <HAL_TIM_IC_Start+0x2a>
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ec42:	b2db      	uxtb	r3, r3
 801ec44:	e01b      	b.n	801ec7e <HAL_TIM_IC_Start+0x62>
 801ec46:	683b      	ldr	r3, [r7, #0]
 801ec48:	2b08      	cmp	r3, #8
 801ec4a:	d104      	bne.n	801ec56 <HAL_TIM_IC_Start+0x3a>
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ec52:	b2db      	uxtb	r3, r3
 801ec54:	e013      	b.n	801ec7e <HAL_TIM_IC_Start+0x62>
 801ec56:	683b      	ldr	r3, [r7, #0]
 801ec58:	2b0c      	cmp	r3, #12
 801ec5a:	d104      	bne.n	801ec66 <HAL_TIM_IC_Start+0x4a>
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ec62:	b2db      	uxtb	r3, r3
 801ec64:	e00b      	b.n	801ec7e <HAL_TIM_IC_Start+0x62>
 801ec66:	683b      	ldr	r3, [r7, #0]
 801ec68:	2b10      	cmp	r3, #16
 801ec6a:	d104      	bne.n	801ec76 <HAL_TIM_IC_Start+0x5a>
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ec72:	b2db      	uxtb	r3, r3
 801ec74:	e003      	b.n	801ec7e <HAL_TIM_IC_Start+0x62>
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ec7c:	b2db      	uxtb	r3, r3
 801ec7e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801ec80:	683b      	ldr	r3, [r7, #0]
 801ec82:	2b00      	cmp	r3, #0
 801ec84:	d104      	bne.n	801ec90 <HAL_TIM_IC_Start+0x74>
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ec8c:	b2db      	uxtb	r3, r3
 801ec8e:	e013      	b.n	801ecb8 <HAL_TIM_IC_Start+0x9c>
 801ec90:	683b      	ldr	r3, [r7, #0]
 801ec92:	2b04      	cmp	r3, #4
 801ec94:	d104      	bne.n	801eca0 <HAL_TIM_IC_Start+0x84>
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ec9c:	b2db      	uxtb	r3, r3
 801ec9e:	e00b      	b.n	801ecb8 <HAL_TIM_IC_Start+0x9c>
 801eca0:	683b      	ldr	r3, [r7, #0]
 801eca2:	2b08      	cmp	r3, #8
 801eca4:	d104      	bne.n	801ecb0 <HAL_TIM_IC_Start+0x94>
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801ecac:	b2db      	uxtb	r3, r3
 801ecae:	e003      	b.n	801ecb8 <HAL_TIM_IC_Start+0x9c>
 801ecb0:	687b      	ldr	r3, [r7, #4]
 801ecb2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801ecb6:	b2db      	uxtb	r3, r3
 801ecb8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801ecba:	7bfb      	ldrb	r3, [r7, #15]
 801ecbc:	2b01      	cmp	r3, #1
 801ecbe:	d102      	bne.n	801ecc6 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801ecc0:	7bbb      	ldrb	r3, [r7, #14]
 801ecc2:	2b01      	cmp	r3, #1
 801ecc4:	d001      	beq.n	801ecca <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 801ecc6:	2301      	movs	r3, #1
 801ecc8:	e0a1      	b.n	801ee0e <HAL_TIM_IC_Start+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ecca:	683b      	ldr	r3, [r7, #0]
 801eccc:	2b00      	cmp	r3, #0
 801ecce:	d104      	bne.n	801ecda <HAL_TIM_IC_Start+0xbe>
 801ecd0:	687b      	ldr	r3, [r7, #4]
 801ecd2:	2202      	movs	r2, #2
 801ecd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ecd8:	e023      	b.n	801ed22 <HAL_TIM_IC_Start+0x106>
 801ecda:	683b      	ldr	r3, [r7, #0]
 801ecdc:	2b04      	cmp	r3, #4
 801ecde:	d104      	bne.n	801ecea <HAL_TIM_IC_Start+0xce>
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	2202      	movs	r2, #2
 801ece4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ece8:	e01b      	b.n	801ed22 <HAL_TIM_IC_Start+0x106>
 801ecea:	683b      	ldr	r3, [r7, #0]
 801ecec:	2b08      	cmp	r3, #8
 801ecee:	d104      	bne.n	801ecfa <HAL_TIM_IC_Start+0xde>
 801ecf0:	687b      	ldr	r3, [r7, #4]
 801ecf2:	2202      	movs	r2, #2
 801ecf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ecf8:	e013      	b.n	801ed22 <HAL_TIM_IC_Start+0x106>
 801ecfa:	683b      	ldr	r3, [r7, #0]
 801ecfc:	2b0c      	cmp	r3, #12
 801ecfe:	d104      	bne.n	801ed0a <HAL_TIM_IC_Start+0xee>
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	2202      	movs	r2, #2
 801ed04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ed08:	e00b      	b.n	801ed22 <HAL_TIM_IC_Start+0x106>
 801ed0a:	683b      	ldr	r3, [r7, #0]
 801ed0c:	2b10      	cmp	r3, #16
 801ed0e:	d104      	bne.n	801ed1a <HAL_TIM_IC_Start+0xfe>
 801ed10:	687b      	ldr	r3, [r7, #4]
 801ed12:	2202      	movs	r2, #2
 801ed14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ed18:	e003      	b.n	801ed22 <HAL_TIM_IC_Start+0x106>
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	2202      	movs	r2, #2
 801ed1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ed22:	683b      	ldr	r3, [r7, #0]
 801ed24:	2b00      	cmp	r3, #0
 801ed26:	d104      	bne.n	801ed32 <HAL_TIM_IC_Start+0x116>
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	2202      	movs	r2, #2
 801ed2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ed30:	e013      	b.n	801ed5a <HAL_TIM_IC_Start+0x13e>
 801ed32:	683b      	ldr	r3, [r7, #0]
 801ed34:	2b04      	cmp	r3, #4
 801ed36:	d104      	bne.n	801ed42 <HAL_TIM_IC_Start+0x126>
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	2202      	movs	r2, #2
 801ed3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ed40:	e00b      	b.n	801ed5a <HAL_TIM_IC_Start+0x13e>
 801ed42:	683b      	ldr	r3, [r7, #0]
 801ed44:	2b08      	cmp	r3, #8
 801ed46:	d104      	bne.n	801ed52 <HAL_TIM_IC_Start+0x136>
 801ed48:	687b      	ldr	r3, [r7, #4]
 801ed4a:	2202      	movs	r2, #2
 801ed4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ed50:	e003      	b.n	801ed5a <HAL_TIM_IC_Start+0x13e>
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	2202      	movs	r2, #2
 801ed56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ed5a:	687b      	ldr	r3, [r7, #4]
 801ed5c:	681b      	ldr	r3, [r3, #0]
 801ed5e:	2201      	movs	r2, #1
 801ed60:	6839      	ldr	r1, [r7, #0]
 801ed62:	4618      	mov	r0, r3
 801ed64:	f001 fc70 	bl	8020648 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	681b      	ldr	r3, [r3, #0]
 801ed6c:	4a2a      	ldr	r2, [pc, #168]	; (801ee18 <HAL_TIM_IC_Start+0x1fc>)
 801ed6e:	4293      	cmp	r3, r2
 801ed70:	d02c      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	681b      	ldr	r3, [r3, #0]
 801ed76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ed7a:	d027      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	681b      	ldr	r3, [r3, #0]
 801ed80:	4a26      	ldr	r2, [pc, #152]	; (801ee1c <HAL_TIM_IC_Start+0x200>)
 801ed82:	4293      	cmp	r3, r2
 801ed84:	d022      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	681b      	ldr	r3, [r3, #0]
 801ed8a:	4a25      	ldr	r2, [pc, #148]	; (801ee20 <HAL_TIM_IC_Start+0x204>)
 801ed8c:	4293      	cmp	r3, r2
 801ed8e:	d01d      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801ed90:	687b      	ldr	r3, [r7, #4]
 801ed92:	681b      	ldr	r3, [r3, #0]
 801ed94:	4a23      	ldr	r2, [pc, #140]	; (801ee24 <HAL_TIM_IC_Start+0x208>)
 801ed96:	4293      	cmp	r3, r2
 801ed98:	d018      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801ed9a:	687b      	ldr	r3, [r7, #4]
 801ed9c:	681b      	ldr	r3, [r3, #0]
 801ed9e:	4a22      	ldr	r2, [pc, #136]	; (801ee28 <HAL_TIM_IC_Start+0x20c>)
 801eda0:	4293      	cmp	r3, r2
 801eda2:	d013      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	681b      	ldr	r3, [r3, #0]
 801eda8:	4a20      	ldr	r2, [pc, #128]	; (801ee2c <HAL_TIM_IC_Start+0x210>)
 801edaa:	4293      	cmp	r3, r2
 801edac:	d00e      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801edae:	687b      	ldr	r3, [r7, #4]
 801edb0:	681b      	ldr	r3, [r3, #0]
 801edb2:	4a1f      	ldr	r2, [pc, #124]	; (801ee30 <HAL_TIM_IC_Start+0x214>)
 801edb4:	4293      	cmp	r3, r2
 801edb6:	d009      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801edb8:	687b      	ldr	r3, [r7, #4]
 801edba:	681b      	ldr	r3, [r3, #0]
 801edbc:	4a1d      	ldr	r2, [pc, #116]	; (801ee34 <HAL_TIM_IC_Start+0x218>)
 801edbe:	4293      	cmp	r3, r2
 801edc0:	d004      	beq.n	801edcc <HAL_TIM_IC_Start+0x1b0>
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	681b      	ldr	r3, [r3, #0]
 801edc6:	4a1c      	ldr	r2, [pc, #112]	; (801ee38 <HAL_TIM_IC_Start+0x21c>)
 801edc8:	4293      	cmp	r3, r2
 801edca:	d115      	bne.n	801edf8 <HAL_TIM_IC_Start+0x1dc>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801edcc:	687b      	ldr	r3, [r7, #4]
 801edce:	681b      	ldr	r3, [r3, #0]
 801edd0:	689a      	ldr	r2, [r3, #8]
 801edd2:	4b1a      	ldr	r3, [pc, #104]	; (801ee3c <HAL_TIM_IC_Start+0x220>)
 801edd4:	4013      	ands	r3, r2
 801edd6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801edd8:	68bb      	ldr	r3, [r7, #8]
 801edda:	2b06      	cmp	r3, #6
 801eddc:	d015      	beq.n	801ee0a <HAL_TIM_IC_Start+0x1ee>
 801edde:	68bb      	ldr	r3, [r7, #8]
 801ede0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ede4:	d011      	beq.n	801ee0a <HAL_TIM_IC_Start+0x1ee>
    {
      __HAL_TIM_ENABLE(htim);
 801ede6:	687b      	ldr	r3, [r7, #4]
 801ede8:	681b      	ldr	r3, [r3, #0]
 801edea:	681a      	ldr	r2, [r3, #0]
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	f042 0201 	orr.w	r2, r2, #1
 801edf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801edf6:	e008      	b.n	801ee0a <HAL_TIM_IC_Start+0x1ee>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	681b      	ldr	r3, [r3, #0]
 801edfc:	681a      	ldr	r2, [r3, #0]
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	681b      	ldr	r3, [r3, #0]
 801ee02:	f042 0201 	orr.w	r2, r2, #1
 801ee06:	601a      	str	r2, [r3, #0]
 801ee08:	e000      	b.n	801ee0c <HAL_TIM_IC_Start+0x1f0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ee0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ee0c:	2300      	movs	r3, #0
}
 801ee0e:	4618      	mov	r0, r3
 801ee10:	3710      	adds	r7, #16
 801ee12:	46bd      	mov	sp, r7
 801ee14:	bd80      	pop	{r7, pc}
 801ee16:	bf00      	nop
 801ee18:	40010000 	.word	0x40010000
 801ee1c:	40000400 	.word	0x40000400
 801ee20:	40000800 	.word	0x40000800
 801ee24:	40000c00 	.word	0x40000c00
 801ee28:	40010400 	.word	0x40010400
 801ee2c:	40001800 	.word	0x40001800
 801ee30:	40014000 	.word	0x40014000
 801ee34:	4000e000 	.word	0x4000e000
 801ee38:	4000e400 	.word	0x4000e400
 801ee3c:	00010007 	.word	0x00010007

0801ee40 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ee40:	b580      	push	{r7, lr}
 801ee42:	b084      	sub	sp, #16
 801ee44:	af00      	add	r7, sp, #0
 801ee46:	6078      	str	r0, [r7, #4]
 801ee48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ee4a:	2300      	movs	r3, #0
 801ee4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801ee4e:	683b      	ldr	r3, [r7, #0]
 801ee50:	2b00      	cmp	r3, #0
 801ee52:	d104      	bne.n	801ee5e <HAL_TIM_IC_Start_IT+0x1e>
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ee5a:	b2db      	uxtb	r3, r3
 801ee5c:	e023      	b.n	801eea6 <HAL_TIM_IC_Start_IT+0x66>
 801ee5e:	683b      	ldr	r3, [r7, #0]
 801ee60:	2b04      	cmp	r3, #4
 801ee62:	d104      	bne.n	801ee6e <HAL_TIM_IC_Start_IT+0x2e>
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ee6a:	b2db      	uxtb	r3, r3
 801ee6c:	e01b      	b.n	801eea6 <HAL_TIM_IC_Start_IT+0x66>
 801ee6e:	683b      	ldr	r3, [r7, #0]
 801ee70:	2b08      	cmp	r3, #8
 801ee72:	d104      	bne.n	801ee7e <HAL_TIM_IC_Start_IT+0x3e>
 801ee74:	687b      	ldr	r3, [r7, #4]
 801ee76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ee7a:	b2db      	uxtb	r3, r3
 801ee7c:	e013      	b.n	801eea6 <HAL_TIM_IC_Start_IT+0x66>
 801ee7e:	683b      	ldr	r3, [r7, #0]
 801ee80:	2b0c      	cmp	r3, #12
 801ee82:	d104      	bne.n	801ee8e <HAL_TIM_IC_Start_IT+0x4e>
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ee8a:	b2db      	uxtb	r3, r3
 801ee8c:	e00b      	b.n	801eea6 <HAL_TIM_IC_Start_IT+0x66>
 801ee8e:	683b      	ldr	r3, [r7, #0]
 801ee90:	2b10      	cmp	r3, #16
 801ee92:	d104      	bne.n	801ee9e <HAL_TIM_IC_Start_IT+0x5e>
 801ee94:	687b      	ldr	r3, [r7, #4]
 801ee96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ee9a:	b2db      	uxtb	r3, r3
 801ee9c:	e003      	b.n	801eea6 <HAL_TIM_IC_Start_IT+0x66>
 801ee9e:	687b      	ldr	r3, [r7, #4]
 801eea0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801eea4:	b2db      	uxtb	r3, r3
 801eea6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801eea8:	683b      	ldr	r3, [r7, #0]
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d104      	bne.n	801eeb8 <HAL_TIM_IC_Start_IT+0x78>
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801eeb4:	b2db      	uxtb	r3, r3
 801eeb6:	e013      	b.n	801eee0 <HAL_TIM_IC_Start_IT+0xa0>
 801eeb8:	683b      	ldr	r3, [r7, #0]
 801eeba:	2b04      	cmp	r3, #4
 801eebc:	d104      	bne.n	801eec8 <HAL_TIM_IC_Start_IT+0x88>
 801eebe:	687b      	ldr	r3, [r7, #4]
 801eec0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801eec4:	b2db      	uxtb	r3, r3
 801eec6:	e00b      	b.n	801eee0 <HAL_TIM_IC_Start_IT+0xa0>
 801eec8:	683b      	ldr	r3, [r7, #0]
 801eeca:	2b08      	cmp	r3, #8
 801eecc:	d104      	bne.n	801eed8 <HAL_TIM_IC_Start_IT+0x98>
 801eece:	687b      	ldr	r3, [r7, #4]
 801eed0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801eed4:	b2db      	uxtb	r3, r3
 801eed6:	e003      	b.n	801eee0 <HAL_TIM_IC_Start_IT+0xa0>
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801eede:	b2db      	uxtb	r3, r3
 801eee0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801eee2:	7bbb      	ldrb	r3, [r7, #14]
 801eee4:	2b01      	cmp	r3, #1
 801eee6:	d102      	bne.n	801eeee <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801eee8:	7b7b      	ldrb	r3, [r7, #13]
 801eeea:	2b01      	cmp	r3, #1
 801eeec:	d001      	beq.n	801eef2 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801eeee:	2301      	movs	r3, #1
 801eef0:	e0ec      	b.n	801f0cc <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801eef2:	683b      	ldr	r3, [r7, #0]
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d104      	bne.n	801ef02 <HAL_TIM_IC_Start_IT+0xc2>
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	2202      	movs	r2, #2
 801eefc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ef00:	e023      	b.n	801ef4a <HAL_TIM_IC_Start_IT+0x10a>
 801ef02:	683b      	ldr	r3, [r7, #0]
 801ef04:	2b04      	cmp	r3, #4
 801ef06:	d104      	bne.n	801ef12 <HAL_TIM_IC_Start_IT+0xd2>
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	2202      	movs	r2, #2
 801ef0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ef10:	e01b      	b.n	801ef4a <HAL_TIM_IC_Start_IT+0x10a>
 801ef12:	683b      	ldr	r3, [r7, #0]
 801ef14:	2b08      	cmp	r3, #8
 801ef16:	d104      	bne.n	801ef22 <HAL_TIM_IC_Start_IT+0xe2>
 801ef18:	687b      	ldr	r3, [r7, #4]
 801ef1a:	2202      	movs	r2, #2
 801ef1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ef20:	e013      	b.n	801ef4a <HAL_TIM_IC_Start_IT+0x10a>
 801ef22:	683b      	ldr	r3, [r7, #0]
 801ef24:	2b0c      	cmp	r3, #12
 801ef26:	d104      	bne.n	801ef32 <HAL_TIM_IC_Start_IT+0xf2>
 801ef28:	687b      	ldr	r3, [r7, #4]
 801ef2a:	2202      	movs	r2, #2
 801ef2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ef30:	e00b      	b.n	801ef4a <HAL_TIM_IC_Start_IT+0x10a>
 801ef32:	683b      	ldr	r3, [r7, #0]
 801ef34:	2b10      	cmp	r3, #16
 801ef36:	d104      	bne.n	801ef42 <HAL_TIM_IC_Start_IT+0x102>
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	2202      	movs	r2, #2
 801ef3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ef40:	e003      	b.n	801ef4a <HAL_TIM_IC_Start_IT+0x10a>
 801ef42:	687b      	ldr	r3, [r7, #4]
 801ef44:	2202      	movs	r2, #2
 801ef46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ef4a:	683b      	ldr	r3, [r7, #0]
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	d104      	bne.n	801ef5a <HAL_TIM_IC_Start_IT+0x11a>
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	2202      	movs	r2, #2
 801ef54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ef58:	e013      	b.n	801ef82 <HAL_TIM_IC_Start_IT+0x142>
 801ef5a:	683b      	ldr	r3, [r7, #0]
 801ef5c:	2b04      	cmp	r3, #4
 801ef5e:	d104      	bne.n	801ef6a <HAL_TIM_IC_Start_IT+0x12a>
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	2202      	movs	r2, #2
 801ef64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ef68:	e00b      	b.n	801ef82 <HAL_TIM_IC_Start_IT+0x142>
 801ef6a:	683b      	ldr	r3, [r7, #0]
 801ef6c:	2b08      	cmp	r3, #8
 801ef6e:	d104      	bne.n	801ef7a <HAL_TIM_IC_Start_IT+0x13a>
 801ef70:	687b      	ldr	r3, [r7, #4]
 801ef72:	2202      	movs	r2, #2
 801ef74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ef78:	e003      	b.n	801ef82 <HAL_TIM_IC_Start_IT+0x142>
 801ef7a:	687b      	ldr	r3, [r7, #4]
 801ef7c:	2202      	movs	r2, #2
 801ef7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801ef82:	683b      	ldr	r3, [r7, #0]
 801ef84:	2b0c      	cmp	r3, #12
 801ef86:	d841      	bhi.n	801f00c <HAL_TIM_IC_Start_IT+0x1cc>
 801ef88:	a201      	add	r2, pc, #4	; (adr r2, 801ef90 <HAL_TIM_IC_Start_IT+0x150>)
 801ef8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ef8e:	bf00      	nop
 801ef90:	0801efc5 	.word	0x0801efc5
 801ef94:	0801f00d 	.word	0x0801f00d
 801ef98:	0801f00d 	.word	0x0801f00d
 801ef9c:	0801f00d 	.word	0x0801f00d
 801efa0:	0801efd7 	.word	0x0801efd7
 801efa4:	0801f00d 	.word	0x0801f00d
 801efa8:	0801f00d 	.word	0x0801f00d
 801efac:	0801f00d 	.word	0x0801f00d
 801efb0:	0801efe9 	.word	0x0801efe9
 801efb4:	0801f00d 	.word	0x0801f00d
 801efb8:	0801f00d 	.word	0x0801f00d
 801efbc:	0801f00d 	.word	0x0801f00d
 801efc0:	0801effb 	.word	0x0801effb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801efc4:	687b      	ldr	r3, [r7, #4]
 801efc6:	681b      	ldr	r3, [r3, #0]
 801efc8:	68da      	ldr	r2, [r3, #12]
 801efca:	687b      	ldr	r3, [r7, #4]
 801efcc:	681b      	ldr	r3, [r3, #0]
 801efce:	f042 0202 	orr.w	r2, r2, #2
 801efd2:	60da      	str	r2, [r3, #12]
      break;
 801efd4:	e01d      	b.n	801f012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801efd6:	687b      	ldr	r3, [r7, #4]
 801efd8:	681b      	ldr	r3, [r3, #0]
 801efda:	68da      	ldr	r2, [r3, #12]
 801efdc:	687b      	ldr	r3, [r7, #4]
 801efde:	681b      	ldr	r3, [r3, #0]
 801efe0:	f042 0204 	orr.w	r2, r2, #4
 801efe4:	60da      	str	r2, [r3, #12]
      break;
 801efe6:	e014      	b.n	801f012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	681b      	ldr	r3, [r3, #0]
 801efec:	68da      	ldr	r2, [r3, #12]
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	f042 0208 	orr.w	r2, r2, #8
 801eff6:	60da      	str	r2, [r3, #12]
      break;
 801eff8:	e00b      	b.n	801f012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	681b      	ldr	r3, [r3, #0]
 801effe:	68da      	ldr	r2, [r3, #12]
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	f042 0210 	orr.w	r2, r2, #16
 801f008:	60da      	str	r2, [r3, #12]
      break;
 801f00a:	e002      	b.n	801f012 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801f00c:	2301      	movs	r3, #1
 801f00e:	73fb      	strb	r3, [r7, #15]
      break;
 801f010:	bf00      	nop
  }

  if (status == HAL_OK)
 801f012:	7bfb      	ldrb	r3, [r7, #15]
 801f014:	2b00      	cmp	r3, #0
 801f016:	d158      	bne.n	801f0ca <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	681b      	ldr	r3, [r3, #0]
 801f01c:	2201      	movs	r2, #1
 801f01e:	6839      	ldr	r1, [r7, #0]
 801f020:	4618      	mov	r0, r3
 801f022:	f001 fb11 	bl	8020648 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	4a2a      	ldr	r2, [pc, #168]	; (801f0d4 <HAL_TIM_IC_Start_IT+0x294>)
 801f02c:	4293      	cmp	r3, r2
 801f02e:	d02c      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	681b      	ldr	r3, [r3, #0]
 801f034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f038:	d027      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f03a:	687b      	ldr	r3, [r7, #4]
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	4a26      	ldr	r2, [pc, #152]	; (801f0d8 <HAL_TIM_IC_Start_IT+0x298>)
 801f040:	4293      	cmp	r3, r2
 801f042:	d022      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f044:	687b      	ldr	r3, [r7, #4]
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	4a24      	ldr	r2, [pc, #144]	; (801f0dc <HAL_TIM_IC_Start_IT+0x29c>)
 801f04a:	4293      	cmp	r3, r2
 801f04c:	d01d      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	4a23      	ldr	r2, [pc, #140]	; (801f0e0 <HAL_TIM_IC_Start_IT+0x2a0>)
 801f054:	4293      	cmp	r3, r2
 801f056:	d018      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f058:	687b      	ldr	r3, [r7, #4]
 801f05a:	681b      	ldr	r3, [r3, #0]
 801f05c:	4a21      	ldr	r2, [pc, #132]	; (801f0e4 <HAL_TIM_IC_Start_IT+0x2a4>)
 801f05e:	4293      	cmp	r3, r2
 801f060:	d013      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	4a20      	ldr	r2, [pc, #128]	; (801f0e8 <HAL_TIM_IC_Start_IT+0x2a8>)
 801f068:	4293      	cmp	r3, r2
 801f06a:	d00e      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f06c:	687b      	ldr	r3, [r7, #4]
 801f06e:	681b      	ldr	r3, [r3, #0]
 801f070:	4a1e      	ldr	r2, [pc, #120]	; (801f0ec <HAL_TIM_IC_Start_IT+0x2ac>)
 801f072:	4293      	cmp	r3, r2
 801f074:	d009      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f076:	687b      	ldr	r3, [r7, #4]
 801f078:	681b      	ldr	r3, [r3, #0]
 801f07a:	4a1d      	ldr	r2, [pc, #116]	; (801f0f0 <HAL_TIM_IC_Start_IT+0x2b0>)
 801f07c:	4293      	cmp	r3, r2
 801f07e:	d004      	beq.n	801f08a <HAL_TIM_IC_Start_IT+0x24a>
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	4a1b      	ldr	r2, [pc, #108]	; (801f0f4 <HAL_TIM_IC_Start_IT+0x2b4>)
 801f086:	4293      	cmp	r3, r2
 801f088:	d115      	bne.n	801f0b6 <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	689a      	ldr	r2, [r3, #8]
 801f090:	4b19      	ldr	r3, [pc, #100]	; (801f0f8 <HAL_TIM_IC_Start_IT+0x2b8>)
 801f092:	4013      	ands	r3, r2
 801f094:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f096:	68bb      	ldr	r3, [r7, #8]
 801f098:	2b06      	cmp	r3, #6
 801f09a:	d015      	beq.n	801f0c8 <HAL_TIM_IC_Start_IT+0x288>
 801f09c:	68bb      	ldr	r3, [r7, #8]
 801f09e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f0a2:	d011      	beq.n	801f0c8 <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 801f0a4:	687b      	ldr	r3, [r7, #4]
 801f0a6:	681b      	ldr	r3, [r3, #0]
 801f0a8:	681a      	ldr	r2, [r3, #0]
 801f0aa:	687b      	ldr	r3, [r7, #4]
 801f0ac:	681b      	ldr	r3, [r3, #0]
 801f0ae:	f042 0201 	orr.w	r2, r2, #1
 801f0b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f0b4:	e008      	b.n	801f0c8 <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	681a      	ldr	r2, [r3, #0]
 801f0bc:	687b      	ldr	r3, [r7, #4]
 801f0be:	681b      	ldr	r3, [r3, #0]
 801f0c0:	f042 0201 	orr.w	r2, r2, #1
 801f0c4:	601a      	str	r2, [r3, #0]
 801f0c6:	e000      	b.n	801f0ca <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f0c8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801f0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 801f0cc:	4618      	mov	r0, r3
 801f0ce:	3710      	adds	r7, #16
 801f0d0:	46bd      	mov	sp, r7
 801f0d2:	bd80      	pop	{r7, pc}
 801f0d4:	40010000 	.word	0x40010000
 801f0d8:	40000400 	.word	0x40000400
 801f0dc:	40000800 	.word	0x40000800
 801f0e0:	40000c00 	.word	0x40000c00
 801f0e4:	40010400 	.word	0x40010400
 801f0e8:	40001800 	.word	0x40001800
 801f0ec:	40014000 	.word	0x40014000
 801f0f0:	4000e000 	.word	0x4000e000
 801f0f4:	4000e400 	.word	0x4000e400
 801f0f8:	00010007 	.word	0x00010007

0801f0fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801f0fc:	b580      	push	{r7, lr}
 801f0fe:	b082      	sub	sp, #8
 801f100:	af00      	add	r7, sp, #0
 801f102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801f104:	687b      	ldr	r3, [r7, #4]
 801f106:	681b      	ldr	r3, [r3, #0]
 801f108:	691b      	ldr	r3, [r3, #16]
 801f10a:	f003 0302 	and.w	r3, r3, #2
 801f10e:	2b02      	cmp	r3, #2
 801f110:	d122      	bne.n	801f158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801f112:	687b      	ldr	r3, [r7, #4]
 801f114:	681b      	ldr	r3, [r3, #0]
 801f116:	68db      	ldr	r3, [r3, #12]
 801f118:	f003 0302 	and.w	r3, r3, #2
 801f11c:	2b02      	cmp	r3, #2
 801f11e:	d11b      	bne.n	801f158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801f120:	687b      	ldr	r3, [r7, #4]
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	f06f 0202 	mvn.w	r2, #2
 801f128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801f12a:	687b      	ldr	r3, [r7, #4]
 801f12c:	2201      	movs	r2, #1
 801f12e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801f130:	687b      	ldr	r3, [r7, #4]
 801f132:	681b      	ldr	r3, [r3, #0]
 801f134:	699b      	ldr	r3, [r3, #24]
 801f136:	f003 0303 	and.w	r3, r3, #3
 801f13a:	2b00      	cmp	r3, #0
 801f13c:	d003      	beq.n	801f146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801f13e:	6878      	ldr	r0, [r7, #4]
 801f140:	f7ef f85a 	bl	800e1f8 <HAL_TIM_IC_CaptureCallback>
 801f144:	e005      	b.n	801f152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801f146:	6878      	ldr	r0, [r7, #4]
 801f148:	f000 fc26 	bl	801f998 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f14c:	6878      	ldr	r0, [r7, #4]
 801f14e:	f000 fc2d 	bl	801f9ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f152:	687b      	ldr	r3, [r7, #4]
 801f154:	2200      	movs	r2, #0
 801f156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	691b      	ldr	r3, [r3, #16]
 801f15e:	f003 0304 	and.w	r3, r3, #4
 801f162:	2b04      	cmp	r3, #4
 801f164:	d122      	bne.n	801f1ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	681b      	ldr	r3, [r3, #0]
 801f16a:	68db      	ldr	r3, [r3, #12]
 801f16c:	f003 0304 	and.w	r3, r3, #4
 801f170:	2b04      	cmp	r3, #4
 801f172:	d11b      	bne.n	801f1ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801f174:	687b      	ldr	r3, [r7, #4]
 801f176:	681b      	ldr	r3, [r3, #0]
 801f178:	f06f 0204 	mvn.w	r2, #4
 801f17c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801f17e:	687b      	ldr	r3, [r7, #4]
 801f180:	2202      	movs	r2, #2
 801f182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	681b      	ldr	r3, [r3, #0]
 801f188:	699b      	ldr	r3, [r3, #24]
 801f18a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f18e:	2b00      	cmp	r3, #0
 801f190:	d003      	beq.n	801f19a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f192:	6878      	ldr	r0, [r7, #4]
 801f194:	f7ef f830 	bl	800e1f8 <HAL_TIM_IC_CaptureCallback>
 801f198:	e005      	b.n	801f1a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f19a:	6878      	ldr	r0, [r7, #4]
 801f19c:	f000 fbfc 	bl	801f998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f1a0:	6878      	ldr	r0, [r7, #4]
 801f1a2:	f000 fc03 	bl	801f9ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	2200      	movs	r2, #0
 801f1aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	681b      	ldr	r3, [r3, #0]
 801f1b0:	691b      	ldr	r3, [r3, #16]
 801f1b2:	f003 0308 	and.w	r3, r3, #8
 801f1b6:	2b08      	cmp	r3, #8
 801f1b8:	d122      	bne.n	801f200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	681b      	ldr	r3, [r3, #0]
 801f1be:	68db      	ldr	r3, [r3, #12]
 801f1c0:	f003 0308 	and.w	r3, r3, #8
 801f1c4:	2b08      	cmp	r3, #8
 801f1c6:	d11b      	bne.n	801f200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	f06f 0208 	mvn.w	r2, #8
 801f1d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	2204      	movs	r2, #4
 801f1d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f1d8:	687b      	ldr	r3, [r7, #4]
 801f1da:	681b      	ldr	r3, [r3, #0]
 801f1dc:	69db      	ldr	r3, [r3, #28]
 801f1de:	f003 0303 	and.w	r3, r3, #3
 801f1e2:	2b00      	cmp	r3, #0
 801f1e4:	d003      	beq.n	801f1ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f1e6:	6878      	ldr	r0, [r7, #4]
 801f1e8:	f7ef f806 	bl	800e1f8 <HAL_TIM_IC_CaptureCallback>
 801f1ec:	e005      	b.n	801f1fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f1ee:	6878      	ldr	r0, [r7, #4]
 801f1f0:	f000 fbd2 	bl	801f998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f1f4:	6878      	ldr	r0, [r7, #4]
 801f1f6:	f000 fbd9 	bl	801f9ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f1fa:	687b      	ldr	r3, [r7, #4]
 801f1fc:	2200      	movs	r2, #0
 801f1fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f200:	687b      	ldr	r3, [r7, #4]
 801f202:	681b      	ldr	r3, [r3, #0]
 801f204:	691b      	ldr	r3, [r3, #16]
 801f206:	f003 0310 	and.w	r3, r3, #16
 801f20a:	2b10      	cmp	r3, #16
 801f20c:	d122      	bne.n	801f254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f20e:	687b      	ldr	r3, [r7, #4]
 801f210:	681b      	ldr	r3, [r3, #0]
 801f212:	68db      	ldr	r3, [r3, #12]
 801f214:	f003 0310 	and.w	r3, r3, #16
 801f218:	2b10      	cmp	r3, #16
 801f21a:	d11b      	bne.n	801f254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	f06f 0210 	mvn.w	r2, #16
 801f224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	2208      	movs	r2, #8
 801f22a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	681b      	ldr	r3, [r3, #0]
 801f230:	69db      	ldr	r3, [r3, #28]
 801f232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f236:	2b00      	cmp	r3, #0
 801f238:	d003      	beq.n	801f242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f23a:	6878      	ldr	r0, [r7, #4]
 801f23c:	f7ee ffdc 	bl	800e1f8 <HAL_TIM_IC_CaptureCallback>
 801f240:	e005      	b.n	801f24e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f242:	6878      	ldr	r0, [r7, #4]
 801f244:	f000 fba8 	bl	801f998 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f248:	6878      	ldr	r0, [r7, #4]
 801f24a:	f000 fbaf 	bl	801f9ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	2200      	movs	r2, #0
 801f252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f254:	687b      	ldr	r3, [r7, #4]
 801f256:	681b      	ldr	r3, [r3, #0]
 801f258:	691b      	ldr	r3, [r3, #16]
 801f25a:	f003 0301 	and.w	r3, r3, #1
 801f25e:	2b01      	cmp	r3, #1
 801f260:	d10e      	bne.n	801f280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	68db      	ldr	r3, [r3, #12]
 801f268:	f003 0301 	and.w	r3, r3, #1
 801f26c:	2b01      	cmp	r3, #1
 801f26e:	d107      	bne.n	801f280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	681b      	ldr	r3, [r3, #0]
 801f274:	f06f 0201 	mvn.w	r2, #1
 801f278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f27a:	6878      	ldr	r0, [r7, #4]
 801f27c:	f7ee ffd1 	bl	800e222 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f280:	687b      	ldr	r3, [r7, #4]
 801f282:	681b      	ldr	r3, [r3, #0]
 801f284:	691b      	ldr	r3, [r3, #16]
 801f286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f28a:	2b80      	cmp	r3, #128	; 0x80
 801f28c:	d10e      	bne.n	801f2ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f28e:	687b      	ldr	r3, [r7, #4]
 801f290:	681b      	ldr	r3, [r3, #0]
 801f292:	68db      	ldr	r3, [r3, #12]
 801f294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f298:	2b80      	cmp	r3, #128	; 0x80
 801f29a:	d107      	bne.n	801f2ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f29c:	687b      	ldr	r3, [r7, #4]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f2a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f2a6:	6878      	ldr	r0, [r7, #4]
 801f2a8:	f001 fb3a 	bl	8020920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f2ac:	687b      	ldr	r3, [r7, #4]
 801f2ae:	681b      	ldr	r3, [r3, #0]
 801f2b0:	691b      	ldr	r3, [r3, #16]
 801f2b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f2b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f2ba:	d10e      	bne.n	801f2da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f2bc:	687b      	ldr	r3, [r7, #4]
 801f2be:	681b      	ldr	r3, [r3, #0]
 801f2c0:	68db      	ldr	r3, [r3, #12]
 801f2c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f2c6:	2b80      	cmp	r3, #128	; 0x80
 801f2c8:	d107      	bne.n	801f2da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f2ca:	687b      	ldr	r3, [r7, #4]
 801f2cc:	681b      	ldr	r3, [r3, #0]
 801f2ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f2d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f2d4:	6878      	ldr	r0, [r7, #4]
 801f2d6:	f001 fb2d 	bl	8020934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f2da:	687b      	ldr	r3, [r7, #4]
 801f2dc:	681b      	ldr	r3, [r3, #0]
 801f2de:	691b      	ldr	r3, [r3, #16]
 801f2e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f2e4:	2b40      	cmp	r3, #64	; 0x40
 801f2e6:	d10e      	bne.n	801f306 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f2e8:	687b      	ldr	r3, [r7, #4]
 801f2ea:	681b      	ldr	r3, [r3, #0]
 801f2ec:	68db      	ldr	r3, [r3, #12]
 801f2ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f2f2:	2b40      	cmp	r3, #64	; 0x40
 801f2f4:	d107      	bne.n	801f306 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f2f6:	687b      	ldr	r3, [r7, #4]
 801f2f8:	681b      	ldr	r3, [r3, #0]
 801f2fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f2fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f300:	6878      	ldr	r0, [r7, #4]
 801f302:	f000 fb5d 	bl	801f9c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f306:	687b      	ldr	r3, [r7, #4]
 801f308:	681b      	ldr	r3, [r3, #0]
 801f30a:	691b      	ldr	r3, [r3, #16]
 801f30c:	f003 0320 	and.w	r3, r3, #32
 801f310:	2b20      	cmp	r3, #32
 801f312:	d10e      	bne.n	801f332 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f314:	687b      	ldr	r3, [r7, #4]
 801f316:	681b      	ldr	r3, [r3, #0]
 801f318:	68db      	ldr	r3, [r3, #12]
 801f31a:	f003 0320 	and.w	r3, r3, #32
 801f31e:	2b20      	cmp	r3, #32
 801f320:	d107      	bne.n	801f332 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f322:	687b      	ldr	r3, [r7, #4]
 801f324:	681b      	ldr	r3, [r3, #0]
 801f326:	f06f 0220 	mvn.w	r2, #32
 801f32a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f32c:	6878      	ldr	r0, [r7, #4]
 801f32e:	f001 faed 	bl	802090c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f332:	bf00      	nop
 801f334:	3708      	adds	r7, #8
 801f336:	46bd      	mov	sp, r7
 801f338:	bd80      	pop	{r7, pc}

0801f33a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801f33a:	b580      	push	{r7, lr}
 801f33c:	b086      	sub	sp, #24
 801f33e:	af00      	add	r7, sp, #0
 801f340:	60f8      	str	r0, [r7, #12]
 801f342:	60b9      	str	r1, [r7, #8]
 801f344:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f346:	2300      	movs	r3, #0
 801f348:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f34a:	68fb      	ldr	r3, [r7, #12]
 801f34c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f350:	2b01      	cmp	r3, #1
 801f352:	d101      	bne.n	801f358 <HAL_TIM_IC_ConfigChannel+0x1e>
 801f354:	2302      	movs	r3, #2
 801f356:	e088      	b.n	801f46a <HAL_TIM_IC_ConfigChannel+0x130>
 801f358:	68fb      	ldr	r3, [r7, #12]
 801f35a:	2201      	movs	r2, #1
 801f35c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801f360:	687b      	ldr	r3, [r7, #4]
 801f362:	2b00      	cmp	r3, #0
 801f364:	d11b      	bne.n	801f39e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801f366:	68fb      	ldr	r3, [r7, #12]
 801f368:	6818      	ldr	r0, [r3, #0]
 801f36a:	68bb      	ldr	r3, [r7, #8]
 801f36c:	6819      	ldr	r1, [r3, #0]
 801f36e:	68bb      	ldr	r3, [r7, #8]
 801f370:	685a      	ldr	r2, [r3, #4]
 801f372:	68bb      	ldr	r3, [r7, #8]
 801f374:	68db      	ldr	r3, [r3, #12]
 801f376:	f000 ff93 	bl	80202a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801f37a:	68fb      	ldr	r3, [r7, #12]
 801f37c:	681b      	ldr	r3, [r3, #0]
 801f37e:	699a      	ldr	r2, [r3, #24]
 801f380:	68fb      	ldr	r3, [r7, #12]
 801f382:	681b      	ldr	r3, [r3, #0]
 801f384:	f022 020c 	bic.w	r2, r2, #12
 801f388:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801f38a:	68fb      	ldr	r3, [r7, #12]
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	6999      	ldr	r1, [r3, #24]
 801f390:	68bb      	ldr	r3, [r7, #8]
 801f392:	689a      	ldr	r2, [r3, #8]
 801f394:	68fb      	ldr	r3, [r7, #12]
 801f396:	681b      	ldr	r3, [r3, #0]
 801f398:	430a      	orrs	r2, r1
 801f39a:	619a      	str	r2, [r3, #24]
 801f39c:	e060      	b.n	801f460 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801f39e:	687b      	ldr	r3, [r7, #4]
 801f3a0:	2b04      	cmp	r3, #4
 801f3a2:	d11c      	bne.n	801f3de <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801f3a4:	68fb      	ldr	r3, [r7, #12]
 801f3a6:	6818      	ldr	r0, [r3, #0]
 801f3a8:	68bb      	ldr	r3, [r7, #8]
 801f3aa:	6819      	ldr	r1, [r3, #0]
 801f3ac:	68bb      	ldr	r3, [r7, #8]
 801f3ae:	685a      	ldr	r2, [r3, #4]
 801f3b0:	68bb      	ldr	r3, [r7, #8]
 801f3b2:	68db      	ldr	r3, [r3, #12]
 801f3b4:	f001 f823 	bl	80203fe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801f3b8:	68fb      	ldr	r3, [r7, #12]
 801f3ba:	681b      	ldr	r3, [r3, #0]
 801f3bc:	699a      	ldr	r2, [r3, #24]
 801f3be:	68fb      	ldr	r3, [r7, #12]
 801f3c0:	681b      	ldr	r3, [r3, #0]
 801f3c2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f3c6:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801f3c8:	68fb      	ldr	r3, [r7, #12]
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	6999      	ldr	r1, [r3, #24]
 801f3ce:	68bb      	ldr	r3, [r7, #8]
 801f3d0:	689b      	ldr	r3, [r3, #8]
 801f3d2:	021a      	lsls	r2, r3, #8
 801f3d4:	68fb      	ldr	r3, [r7, #12]
 801f3d6:	681b      	ldr	r3, [r3, #0]
 801f3d8:	430a      	orrs	r2, r1
 801f3da:	619a      	str	r2, [r3, #24]
 801f3dc:	e040      	b.n	801f460 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801f3de:	687b      	ldr	r3, [r7, #4]
 801f3e0:	2b08      	cmp	r3, #8
 801f3e2:	d11b      	bne.n	801f41c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	6818      	ldr	r0, [r3, #0]
 801f3e8:	68bb      	ldr	r3, [r7, #8]
 801f3ea:	6819      	ldr	r1, [r3, #0]
 801f3ec:	68bb      	ldr	r3, [r7, #8]
 801f3ee:	685a      	ldr	r2, [r3, #4]
 801f3f0:	68bb      	ldr	r3, [r7, #8]
 801f3f2:	68db      	ldr	r3, [r3, #12]
 801f3f4:	f001 f870 	bl	80204d8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801f3f8:	68fb      	ldr	r3, [r7, #12]
 801f3fa:	681b      	ldr	r3, [r3, #0]
 801f3fc:	69da      	ldr	r2, [r3, #28]
 801f3fe:	68fb      	ldr	r3, [r7, #12]
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	f022 020c 	bic.w	r2, r2, #12
 801f406:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	69d9      	ldr	r1, [r3, #28]
 801f40e:	68bb      	ldr	r3, [r7, #8]
 801f410:	689a      	ldr	r2, [r3, #8]
 801f412:	68fb      	ldr	r3, [r7, #12]
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	430a      	orrs	r2, r1
 801f418:	61da      	str	r2, [r3, #28]
 801f41a:	e021      	b.n	801f460 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801f41c:	687b      	ldr	r3, [r7, #4]
 801f41e:	2b0c      	cmp	r3, #12
 801f420:	d11c      	bne.n	801f45c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801f422:	68fb      	ldr	r3, [r7, #12]
 801f424:	6818      	ldr	r0, [r3, #0]
 801f426:	68bb      	ldr	r3, [r7, #8]
 801f428:	6819      	ldr	r1, [r3, #0]
 801f42a:	68bb      	ldr	r3, [r7, #8]
 801f42c:	685a      	ldr	r2, [r3, #4]
 801f42e:	68bb      	ldr	r3, [r7, #8]
 801f430:	68db      	ldr	r3, [r3, #12]
 801f432:	f001 f88d 	bl	8020550 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801f436:	68fb      	ldr	r3, [r7, #12]
 801f438:	681b      	ldr	r3, [r3, #0]
 801f43a:	69da      	ldr	r2, [r3, #28]
 801f43c:	68fb      	ldr	r3, [r7, #12]
 801f43e:	681b      	ldr	r3, [r3, #0]
 801f440:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f444:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	69d9      	ldr	r1, [r3, #28]
 801f44c:	68bb      	ldr	r3, [r7, #8]
 801f44e:	689b      	ldr	r3, [r3, #8]
 801f450:	021a      	lsls	r2, r3, #8
 801f452:	68fb      	ldr	r3, [r7, #12]
 801f454:	681b      	ldr	r3, [r3, #0]
 801f456:	430a      	orrs	r2, r1
 801f458:	61da      	str	r2, [r3, #28]
 801f45a:	e001      	b.n	801f460 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801f45c:	2301      	movs	r3, #1
 801f45e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	2200      	movs	r2, #0
 801f464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f468:	7dfb      	ldrb	r3, [r7, #23]
}
 801f46a:	4618      	mov	r0, r3
 801f46c:	3718      	adds	r7, #24
 801f46e:	46bd      	mov	sp, r7
 801f470:	bd80      	pop	{r7, pc}
	...

0801f474 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f474:	b580      	push	{r7, lr}
 801f476:	b086      	sub	sp, #24
 801f478:	af00      	add	r7, sp, #0
 801f47a:	60f8      	str	r0, [r7, #12]
 801f47c:	60b9      	str	r1, [r7, #8]
 801f47e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f480:	2300      	movs	r3, #0
 801f482:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f484:	68fb      	ldr	r3, [r7, #12]
 801f486:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f48a:	2b01      	cmp	r3, #1
 801f48c:	d101      	bne.n	801f492 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f48e:	2302      	movs	r3, #2
 801f490:	e0ff      	b.n	801f692 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f492:	68fb      	ldr	r3, [r7, #12]
 801f494:	2201      	movs	r2, #1
 801f496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f49a:	687b      	ldr	r3, [r7, #4]
 801f49c:	2b14      	cmp	r3, #20
 801f49e:	f200 80f0 	bhi.w	801f682 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f4a2:	a201      	add	r2, pc, #4	; (adr r2, 801f4a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f4a8:	0801f4fd 	.word	0x0801f4fd
 801f4ac:	0801f683 	.word	0x0801f683
 801f4b0:	0801f683 	.word	0x0801f683
 801f4b4:	0801f683 	.word	0x0801f683
 801f4b8:	0801f53d 	.word	0x0801f53d
 801f4bc:	0801f683 	.word	0x0801f683
 801f4c0:	0801f683 	.word	0x0801f683
 801f4c4:	0801f683 	.word	0x0801f683
 801f4c8:	0801f57f 	.word	0x0801f57f
 801f4cc:	0801f683 	.word	0x0801f683
 801f4d0:	0801f683 	.word	0x0801f683
 801f4d4:	0801f683 	.word	0x0801f683
 801f4d8:	0801f5bf 	.word	0x0801f5bf
 801f4dc:	0801f683 	.word	0x0801f683
 801f4e0:	0801f683 	.word	0x0801f683
 801f4e4:	0801f683 	.word	0x0801f683
 801f4e8:	0801f601 	.word	0x0801f601
 801f4ec:	0801f683 	.word	0x0801f683
 801f4f0:	0801f683 	.word	0x0801f683
 801f4f4:	0801f683 	.word	0x0801f683
 801f4f8:	0801f641 	.word	0x0801f641
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f4fc:	68fb      	ldr	r3, [r7, #12]
 801f4fe:	681b      	ldr	r3, [r3, #0]
 801f500:	68b9      	ldr	r1, [r7, #8]
 801f502:	4618      	mov	r0, r3
 801f504:	f000 fb0c 	bl	801fb20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f508:	68fb      	ldr	r3, [r7, #12]
 801f50a:	681b      	ldr	r3, [r3, #0]
 801f50c:	699a      	ldr	r2, [r3, #24]
 801f50e:	68fb      	ldr	r3, [r7, #12]
 801f510:	681b      	ldr	r3, [r3, #0]
 801f512:	f042 0208 	orr.w	r2, r2, #8
 801f516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f518:	68fb      	ldr	r3, [r7, #12]
 801f51a:	681b      	ldr	r3, [r3, #0]
 801f51c:	699a      	ldr	r2, [r3, #24]
 801f51e:	68fb      	ldr	r3, [r7, #12]
 801f520:	681b      	ldr	r3, [r3, #0]
 801f522:	f022 0204 	bic.w	r2, r2, #4
 801f526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f528:	68fb      	ldr	r3, [r7, #12]
 801f52a:	681b      	ldr	r3, [r3, #0]
 801f52c:	6999      	ldr	r1, [r3, #24]
 801f52e:	68bb      	ldr	r3, [r7, #8]
 801f530:	691a      	ldr	r2, [r3, #16]
 801f532:	68fb      	ldr	r3, [r7, #12]
 801f534:	681b      	ldr	r3, [r3, #0]
 801f536:	430a      	orrs	r2, r1
 801f538:	619a      	str	r2, [r3, #24]
      break;
 801f53a:	e0a5      	b.n	801f688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f53c:	68fb      	ldr	r3, [r7, #12]
 801f53e:	681b      	ldr	r3, [r3, #0]
 801f540:	68b9      	ldr	r1, [r7, #8]
 801f542:	4618      	mov	r0, r3
 801f544:	f000 fb7c 	bl	801fc40 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f548:	68fb      	ldr	r3, [r7, #12]
 801f54a:	681b      	ldr	r3, [r3, #0]
 801f54c:	699a      	ldr	r2, [r3, #24]
 801f54e:	68fb      	ldr	r3, [r7, #12]
 801f550:	681b      	ldr	r3, [r3, #0]
 801f552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f558:	68fb      	ldr	r3, [r7, #12]
 801f55a:	681b      	ldr	r3, [r3, #0]
 801f55c:	699a      	ldr	r2, [r3, #24]
 801f55e:	68fb      	ldr	r3, [r7, #12]
 801f560:	681b      	ldr	r3, [r3, #0]
 801f562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f568:	68fb      	ldr	r3, [r7, #12]
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	6999      	ldr	r1, [r3, #24]
 801f56e:	68bb      	ldr	r3, [r7, #8]
 801f570:	691b      	ldr	r3, [r3, #16]
 801f572:	021a      	lsls	r2, r3, #8
 801f574:	68fb      	ldr	r3, [r7, #12]
 801f576:	681b      	ldr	r3, [r3, #0]
 801f578:	430a      	orrs	r2, r1
 801f57a:	619a      	str	r2, [r3, #24]
      break;
 801f57c:	e084      	b.n	801f688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f57e:	68fb      	ldr	r3, [r7, #12]
 801f580:	681b      	ldr	r3, [r3, #0]
 801f582:	68b9      	ldr	r1, [r7, #8]
 801f584:	4618      	mov	r0, r3
 801f586:	f000 fbe5 	bl	801fd54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	681b      	ldr	r3, [r3, #0]
 801f58e:	69da      	ldr	r2, [r3, #28]
 801f590:	68fb      	ldr	r3, [r7, #12]
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	f042 0208 	orr.w	r2, r2, #8
 801f598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f59a:	68fb      	ldr	r3, [r7, #12]
 801f59c:	681b      	ldr	r3, [r3, #0]
 801f59e:	69da      	ldr	r2, [r3, #28]
 801f5a0:	68fb      	ldr	r3, [r7, #12]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	f022 0204 	bic.w	r2, r2, #4
 801f5a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f5aa:	68fb      	ldr	r3, [r7, #12]
 801f5ac:	681b      	ldr	r3, [r3, #0]
 801f5ae:	69d9      	ldr	r1, [r3, #28]
 801f5b0:	68bb      	ldr	r3, [r7, #8]
 801f5b2:	691a      	ldr	r2, [r3, #16]
 801f5b4:	68fb      	ldr	r3, [r7, #12]
 801f5b6:	681b      	ldr	r3, [r3, #0]
 801f5b8:	430a      	orrs	r2, r1
 801f5ba:	61da      	str	r2, [r3, #28]
      break;
 801f5bc:	e064      	b.n	801f688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f5be:	68fb      	ldr	r3, [r7, #12]
 801f5c0:	681b      	ldr	r3, [r3, #0]
 801f5c2:	68b9      	ldr	r1, [r7, #8]
 801f5c4:	4618      	mov	r0, r3
 801f5c6:	f000 fc4d 	bl	801fe64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f5ca:	68fb      	ldr	r3, [r7, #12]
 801f5cc:	681b      	ldr	r3, [r3, #0]
 801f5ce:	69da      	ldr	r2, [r3, #28]
 801f5d0:	68fb      	ldr	r3, [r7, #12]
 801f5d2:	681b      	ldr	r3, [r3, #0]
 801f5d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f5d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f5da:	68fb      	ldr	r3, [r7, #12]
 801f5dc:	681b      	ldr	r3, [r3, #0]
 801f5de:	69da      	ldr	r2, [r3, #28]
 801f5e0:	68fb      	ldr	r3, [r7, #12]
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f5e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f5ea:	68fb      	ldr	r3, [r7, #12]
 801f5ec:	681b      	ldr	r3, [r3, #0]
 801f5ee:	69d9      	ldr	r1, [r3, #28]
 801f5f0:	68bb      	ldr	r3, [r7, #8]
 801f5f2:	691b      	ldr	r3, [r3, #16]
 801f5f4:	021a      	lsls	r2, r3, #8
 801f5f6:	68fb      	ldr	r3, [r7, #12]
 801f5f8:	681b      	ldr	r3, [r3, #0]
 801f5fa:	430a      	orrs	r2, r1
 801f5fc:	61da      	str	r2, [r3, #28]
      break;
 801f5fe:	e043      	b.n	801f688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f600:	68fb      	ldr	r3, [r7, #12]
 801f602:	681b      	ldr	r3, [r3, #0]
 801f604:	68b9      	ldr	r1, [r7, #8]
 801f606:	4618      	mov	r0, r3
 801f608:	f000 fc96 	bl	801ff38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	681b      	ldr	r3, [r3, #0]
 801f610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f612:	68fb      	ldr	r3, [r7, #12]
 801f614:	681b      	ldr	r3, [r3, #0]
 801f616:	f042 0208 	orr.w	r2, r2, #8
 801f61a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	681b      	ldr	r3, [r3, #0]
 801f620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f622:	68fb      	ldr	r3, [r7, #12]
 801f624:	681b      	ldr	r3, [r3, #0]
 801f626:	f022 0204 	bic.w	r2, r2, #4
 801f62a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f62c:	68fb      	ldr	r3, [r7, #12]
 801f62e:	681b      	ldr	r3, [r3, #0]
 801f630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f632:	68bb      	ldr	r3, [r7, #8]
 801f634:	691a      	ldr	r2, [r3, #16]
 801f636:	68fb      	ldr	r3, [r7, #12]
 801f638:	681b      	ldr	r3, [r3, #0]
 801f63a:	430a      	orrs	r2, r1
 801f63c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f63e:	e023      	b.n	801f688 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f640:	68fb      	ldr	r3, [r7, #12]
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	68b9      	ldr	r1, [r7, #8]
 801f646:	4618      	mov	r0, r3
 801f648:	f000 fcda 	bl	8020000 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f64c:	68fb      	ldr	r3, [r7, #12]
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f652:	68fb      	ldr	r3, [r7, #12]
 801f654:	681b      	ldr	r3, [r3, #0]
 801f656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f65a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f65c:	68fb      	ldr	r3, [r7, #12]
 801f65e:	681b      	ldr	r3, [r3, #0]
 801f660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f662:	68fb      	ldr	r3, [r7, #12]
 801f664:	681b      	ldr	r3, [r3, #0]
 801f666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f66a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f66c:	68fb      	ldr	r3, [r7, #12]
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f672:	68bb      	ldr	r3, [r7, #8]
 801f674:	691b      	ldr	r3, [r3, #16]
 801f676:	021a      	lsls	r2, r3, #8
 801f678:	68fb      	ldr	r3, [r7, #12]
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	430a      	orrs	r2, r1
 801f67e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f680:	e002      	b.n	801f688 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f682:	2301      	movs	r3, #1
 801f684:	75fb      	strb	r3, [r7, #23]
      break;
 801f686:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f688:	68fb      	ldr	r3, [r7, #12]
 801f68a:	2200      	movs	r2, #0
 801f68c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f690:	7dfb      	ldrb	r3, [r7, #23]
}
 801f692:	4618      	mov	r0, r3
 801f694:	3718      	adds	r7, #24
 801f696:	46bd      	mov	sp, r7
 801f698:	bd80      	pop	{r7, pc}
 801f69a:	bf00      	nop

0801f69c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f69c:	b580      	push	{r7, lr}
 801f69e:	b084      	sub	sp, #16
 801f6a0:	af00      	add	r7, sp, #0
 801f6a2:	6078      	str	r0, [r7, #4]
 801f6a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f6a6:	2300      	movs	r3, #0
 801f6a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f6aa:	687b      	ldr	r3, [r7, #4]
 801f6ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f6b0:	2b01      	cmp	r3, #1
 801f6b2:	d101      	bne.n	801f6b8 <HAL_TIM_ConfigClockSource+0x1c>
 801f6b4:	2302      	movs	r3, #2
 801f6b6:	e0dc      	b.n	801f872 <HAL_TIM_ConfigClockSource+0x1d6>
 801f6b8:	687b      	ldr	r3, [r7, #4]
 801f6ba:	2201      	movs	r2, #1
 801f6bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f6c0:	687b      	ldr	r3, [r7, #4]
 801f6c2:	2202      	movs	r2, #2
 801f6c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f6c8:	687b      	ldr	r3, [r7, #4]
 801f6ca:	681b      	ldr	r3, [r3, #0]
 801f6cc:	689b      	ldr	r3, [r3, #8]
 801f6ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f6d0:	68ba      	ldr	r2, [r7, #8]
 801f6d2:	4b6a      	ldr	r3, [pc, #424]	; (801f87c <HAL_TIM_ConfigClockSource+0x1e0>)
 801f6d4:	4013      	ands	r3, r2
 801f6d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f6d8:	68bb      	ldr	r3, [r7, #8]
 801f6da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801f6de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f6e0:	687b      	ldr	r3, [r7, #4]
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	68ba      	ldr	r2, [r7, #8]
 801f6e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f6e8:	683b      	ldr	r3, [r7, #0]
 801f6ea:	681b      	ldr	r3, [r3, #0]
 801f6ec:	4a64      	ldr	r2, [pc, #400]	; (801f880 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f6ee:	4293      	cmp	r3, r2
 801f6f0:	f000 80a9 	beq.w	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f6f4:	4a62      	ldr	r2, [pc, #392]	; (801f880 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f6f6:	4293      	cmp	r3, r2
 801f6f8:	f200 80ae 	bhi.w	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f6fc:	4a61      	ldr	r2, [pc, #388]	; (801f884 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f6fe:	4293      	cmp	r3, r2
 801f700:	f000 80a1 	beq.w	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f704:	4a5f      	ldr	r2, [pc, #380]	; (801f884 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f706:	4293      	cmp	r3, r2
 801f708:	f200 80a6 	bhi.w	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f70c:	4a5e      	ldr	r2, [pc, #376]	; (801f888 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f70e:	4293      	cmp	r3, r2
 801f710:	f000 8099 	beq.w	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f714:	4a5c      	ldr	r2, [pc, #368]	; (801f888 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f716:	4293      	cmp	r3, r2
 801f718:	f200 809e 	bhi.w	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f71c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f720:	f000 8091 	beq.w	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f724:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f728:	f200 8096 	bhi.w	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f72c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f730:	f000 8089 	beq.w	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f734:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f738:	f200 808e 	bhi.w	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f73c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f740:	d03e      	beq.n	801f7c0 <HAL_TIM_ConfigClockSource+0x124>
 801f742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f746:	f200 8087 	bhi.w	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f74a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f74e:	f000 8086 	beq.w	801f85e <HAL_TIM_ConfigClockSource+0x1c2>
 801f752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f756:	d87f      	bhi.n	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f758:	2b70      	cmp	r3, #112	; 0x70
 801f75a:	d01a      	beq.n	801f792 <HAL_TIM_ConfigClockSource+0xf6>
 801f75c:	2b70      	cmp	r3, #112	; 0x70
 801f75e:	d87b      	bhi.n	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f760:	2b60      	cmp	r3, #96	; 0x60
 801f762:	d050      	beq.n	801f806 <HAL_TIM_ConfigClockSource+0x16a>
 801f764:	2b60      	cmp	r3, #96	; 0x60
 801f766:	d877      	bhi.n	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f768:	2b50      	cmp	r3, #80	; 0x50
 801f76a:	d03c      	beq.n	801f7e6 <HAL_TIM_ConfigClockSource+0x14a>
 801f76c:	2b50      	cmp	r3, #80	; 0x50
 801f76e:	d873      	bhi.n	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f770:	2b40      	cmp	r3, #64	; 0x40
 801f772:	d058      	beq.n	801f826 <HAL_TIM_ConfigClockSource+0x18a>
 801f774:	2b40      	cmp	r3, #64	; 0x40
 801f776:	d86f      	bhi.n	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f778:	2b30      	cmp	r3, #48	; 0x30
 801f77a:	d064      	beq.n	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f77c:	2b30      	cmp	r3, #48	; 0x30
 801f77e:	d86b      	bhi.n	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f780:	2b20      	cmp	r3, #32
 801f782:	d060      	beq.n	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f784:	2b20      	cmp	r3, #32
 801f786:	d867      	bhi.n	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
 801f788:	2b00      	cmp	r3, #0
 801f78a:	d05c      	beq.n	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f78c:	2b10      	cmp	r3, #16
 801f78e:	d05a      	beq.n	801f846 <HAL_TIM_ConfigClockSource+0x1aa>
 801f790:	e062      	b.n	801f858 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f792:	687b      	ldr	r3, [r7, #4]
 801f794:	6818      	ldr	r0, [r3, #0]
 801f796:	683b      	ldr	r3, [r7, #0]
 801f798:	6899      	ldr	r1, [r3, #8]
 801f79a:	683b      	ldr	r3, [r7, #0]
 801f79c:	685a      	ldr	r2, [r3, #4]
 801f79e:	683b      	ldr	r3, [r7, #0]
 801f7a0:	68db      	ldr	r3, [r3, #12]
 801f7a2:	f000 ff31 	bl	8020608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801f7a6:	687b      	ldr	r3, [r7, #4]
 801f7a8:	681b      	ldr	r3, [r3, #0]
 801f7aa:	689b      	ldr	r3, [r3, #8]
 801f7ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801f7ae:	68bb      	ldr	r3, [r7, #8]
 801f7b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801f7b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801f7b6:	687b      	ldr	r3, [r7, #4]
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	68ba      	ldr	r2, [r7, #8]
 801f7bc:	609a      	str	r2, [r3, #8]
      break;
 801f7be:	e04f      	b.n	801f860 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f7c0:	687b      	ldr	r3, [r7, #4]
 801f7c2:	6818      	ldr	r0, [r3, #0]
 801f7c4:	683b      	ldr	r3, [r7, #0]
 801f7c6:	6899      	ldr	r1, [r3, #8]
 801f7c8:	683b      	ldr	r3, [r7, #0]
 801f7ca:	685a      	ldr	r2, [r3, #4]
 801f7cc:	683b      	ldr	r3, [r7, #0]
 801f7ce:	68db      	ldr	r3, [r3, #12]
 801f7d0:	f000 ff1a 	bl	8020608 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	681b      	ldr	r3, [r3, #0]
 801f7d8:	689a      	ldr	r2, [r3, #8]
 801f7da:	687b      	ldr	r3, [r7, #4]
 801f7dc:	681b      	ldr	r3, [r3, #0]
 801f7de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801f7e2:	609a      	str	r2, [r3, #8]
      break;
 801f7e4:	e03c      	b.n	801f860 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f7e6:	687b      	ldr	r3, [r7, #4]
 801f7e8:	6818      	ldr	r0, [r3, #0]
 801f7ea:	683b      	ldr	r3, [r7, #0]
 801f7ec:	6859      	ldr	r1, [r3, #4]
 801f7ee:	683b      	ldr	r3, [r7, #0]
 801f7f0:	68db      	ldr	r3, [r3, #12]
 801f7f2:	461a      	mov	r2, r3
 801f7f4:	f000 fdd4 	bl	80203a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801f7f8:	687b      	ldr	r3, [r7, #4]
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	2150      	movs	r1, #80	; 0x50
 801f7fe:	4618      	mov	r0, r3
 801f800:	f000 fee4 	bl	80205cc <TIM_ITRx_SetConfig>
      break;
 801f804:	e02c      	b.n	801f860 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	6818      	ldr	r0, [r3, #0]
 801f80a:	683b      	ldr	r3, [r7, #0]
 801f80c:	6859      	ldr	r1, [r3, #4]
 801f80e:	683b      	ldr	r3, [r7, #0]
 801f810:	68db      	ldr	r3, [r3, #12]
 801f812:	461a      	mov	r2, r3
 801f814:	f000 fe30 	bl	8020478 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801f818:	687b      	ldr	r3, [r7, #4]
 801f81a:	681b      	ldr	r3, [r3, #0]
 801f81c:	2160      	movs	r1, #96	; 0x60
 801f81e:	4618      	mov	r0, r3
 801f820:	f000 fed4 	bl	80205cc <TIM_ITRx_SetConfig>
      break;
 801f824:	e01c      	b.n	801f860 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	6818      	ldr	r0, [r3, #0]
 801f82a:	683b      	ldr	r3, [r7, #0]
 801f82c:	6859      	ldr	r1, [r3, #4]
 801f82e:	683b      	ldr	r3, [r7, #0]
 801f830:	68db      	ldr	r3, [r3, #12]
 801f832:	461a      	mov	r2, r3
 801f834:	f000 fdb4 	bl	80203a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801f838:	687b      	ldr	r3, [r7, #4]
 801f83a:	681b      	ldr	r3, [r3, #0]
 801f83c:	2140      	movs	r1, #64	; 0x40
 801f83e:	4618      	mov	r0, r3
 801f840:	f000 fec4 	bl	80205cc <TIM_ITRx_SetConfig>
      break;
 801f844:	e00c      	b.n	801f860 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	681a      	ldr	r2, [r3, #0]
 801f84a:	683b      	ldr	r3, [r7, #0]
 801f84c:	681b      	ldr	r3, [r3, #0]
 801f84e:	4619      	mov	r1, r3
 801f850:	4610      	mov	r0, r2
 801f852:	f000 febb 	bl	80205cc <TIM_ITRx_SetConfig>
      break;
 801f856:	e003      	b.n	801f860 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801f858:	2301      	movs	r3, #1
 801f85a:	73fb      	strb	r3, [r7, #15]
      break;
 801f85c:	e000      	b.n	801f860 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801f85e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801f860:	687b      	ldr	r3, [r7, #4]
 801f862:	2201      	movs	r2, #1
 801f864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f868:	687b      	ldr	r3, [r7, #4]
 801f86a:	2200      	movs	r2, #0
 801f86c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f870:	7bfb      	ldrb	r3, [r7, #15]
}
 801f872:	4618      	mov	r0, r3
 801f874:	3710      	adds	r7, #16
 801f876:	46bd      	mov	sp, r7
 801f878:	bd80      	pop	{r7, pc}
 801f87a:	bf00      	nop
 801f87c:	ffceff88 	.word	0xffceff88
 801f880:	00100040 	.word	0x00100040
 801f884:	00100030 	.word	0x00100030
 801f888:	00100020 	.word	0x00100020

0801f88c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 801f88c:	b580      	push	{r7, lr}
 801f88e:	b082      	sub	sp, #8
 801f890:	af00      	add	r7, sp, #0
 801f892:	6078      	str	r0, [r7, #4]
 801f894:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 801f896:	687b      	ldr	r3, [r7, #4]
 801f898:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f89c:	2b01      	cmp	r3, #1
 801f89e:	d101      	bne.n	801f8a4 <HAL_TIM_SlaveConfigSynchro+0x18>
 801f8a0:	2302      	movs	r3, #2
 801f8a2:	e031      	b.n	801f908 <HAL_TIM_SlaveConfigSynchro+0x7c>
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	2201      	movs	r2, #1
 801f8a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f8ac:	687b      	ldr	r3, [r7, #4]
 801f8ae:	2202      	movs	r2, #2
 801f8b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 801f8b4:	6839      	ldr	r1, [r7, #0]
 801f8b6:	6878      	ldr	r0, [r7, #4]
 801f8b8:	f000 fc08 	bl	80200cc <TIM_SlaveTimer_SetConfig>
 801f8bc:	4603      	mov	r3, r0
 801f8be:	2b00      	cmp	r3, #0
 801f8c0:	d009      	beq.n	801f8d6 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 801f8c2:	687b      	ldr	r3, [r7, #4]
 801f8c4:	2201      	movs	r2, #1
 801f8c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 801f8ca:	687b      	ldr	r3, [r7, #4]
 801f8cc:	2200      	movs	r2, #0
 801f8ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 801f8d2:	2301      	movs	r3, #1
 801f8d4:	e018      	b.n	801f908 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	68da      	ldr	r2, [r3, #12]
 801f8dc:	687b      	ldr	r3, [r7, #4]
 801f8de:	681b      	ldr	r3, [r3, #0]
 801f8e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801f8e4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	68da      	ldr	r2, [r3, #12]
 801f8ec:	687b      	ldr	r3, [r7, #4]
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801f8f4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	2201      	movs	r2, #1
 801f8fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f8fe:	687b      	ldr	r3, [r7, #4]
 801f900:	2200      	movs	r2, #0
 801f902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 801f906:	2300      	movs	r3, #0
}
 801f908:	4618      	mov	r0, r3
 801f90a:	3708      	adds	r7, #8
 801f90c:	46bd      	mov	sp, r7
 801f90e:	bd80      	pop	{r7, pc}

0801f910 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f910:	b480      	push	{r7}
 801f912:	b085      	sub	sp, #20
 801f914:	af00      	add	r7, sp, #0
 801f916:	6078      	str	r0, [r7, #4]
 801f918:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801f91a:	2300      	movs	r3, #0
 801f91c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801f91e:	683b      	ldr	r3, [r7, #0]
 801f920:	2b0c      	cmp	r3, #12
 801f922:	d831      	bhi.n	801f988 <HAL_TIM_ReadCapturedValue+0x78>
 801f924:	a201      	add	r2, pc, #4	; (adr r2, 801f92c <HAL_TIM_ReadCapturedValue+0x1c>)
 801f926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f92a:	bf00      	nop
 801f92c:	0801f961 	.word	0x0801f961
 801f930:	0801f989 	.word	0x0801f989
 801f934:	0801f989 	.word	0x0801f989
 801f938:	0801f989 	.word	0x0801f989
 801f93c:	0801f96b 	.word	0x0801f96b
 801f940:	0801f989 	.word	0x0801f989
 801f944:	0801f989 	.word	0x0801f989
 801f948:	0801f989 	.word	0x0801f989
 801f94c:	0801f975 	.word	0x0801f975
 801f950:	0801f989 	.word	0x0801f989
 801f954:	0801f989 	.word	0x0801f989
 801f958:	0801f989 	.word	0x0801f989
 801f95c:	0801f97f 	.word	0x0801f97f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801f960:	687b      	ldr	r3, [r7, #4]
 801f962:	681b      	ldr	r3, [r3, #0]
 801f964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f966:	60fb      	str	r3, [r7, #12]

      break;
 801f968:	e00f      	b.n	801f98a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801f96a:	687b      	ldr	r3, [r7, #4]
 801f96c:	681b      	ldr	r3, [r3, #0]
 801f96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f970:	60fb      	str	r3, [r7, #12]

      break;
 801f972:	e00a      	b.n	801f98a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801f974:	687b      	ldr	r3, [r7, #4]
 801f976:	681b      	ldr	r3, [r3, #0]
 801f978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f97a:	60fb      	str	r3, [r7, #12]

      break;
 801f97c:	e005      	b.n	801f98a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801f97e:	687b      	ldr	r3, [r7, #4]
 801f980:	681b      	ldr	r3, [r3, #0]
 801f982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f984:	60fb      	str	r3, [r7, #12]

      break;
 801f986:	e000      	b.n	801f98a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801f988:	bf00      	nop
  }

  return tmpreg;
 801f98a:	68fb      	ldr	r3, [r7, #12]
}
 801f98c:	4618      	mov	r0, r3
 801f98e:	3714      	adds	r7, #20
 801f990:	46bd      	mov	sp, r7
 801f992:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f996:	4770      	bx	lr

0801f998 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f998:	b480      	push	{r7}
 801f99a:	b083      	sub	sp, #12
 801f99c:	af00      	add	r7, sp, #0
 801f99e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f9a0:	bf00      	nop
 801f9a2:	370c      	adds	r7, #12
 801f9a4:	46bd      	mov	sp, r7
 801f9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9aa:	4770      	bx	lr

0801f9ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f9ac:	b480      	push	{r7}
 801f9ae:	b083      	sub	sp, #12
 801f9b0:	af00      	add	r7, sp, #0
 801f9b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f9b4:	bf00      	nop
 801f9b6:	370c      	adds	r7, #12
 801f9b8:	46bd      	mov	sp, r7
 801f9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9be:	4770      	bx	lr

0801f9c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f9c0:	b480      	push	{r7}
 801f9c2:	b083      	sub	sp, #12
 801f9c4:	af00      	add	r7, sp, #0
 801f9c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f9c8:	bf00      	nop
 801f9ca:	370c      	adds	r7, #12
 801f9cc:	46bd      	mov	sp, r7
 801f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9d2:	4770      	bx	lr

0801f9d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f9d4:	b480      	push	{r7}
 801f9d6:	b085      	sub	sp, #20
 801f9d8:	af00      	add	r7, sp, #0
 801f9da:	6078      	str	r0, [r7, #4]
 801f9dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f9de:	687b      	ldr	r3, [r7, #4]
 801f9e0:	681b      	ldr	r3, [r3, #0]
 801f9e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f9e4:	687b      	ldr	r3, [r7, #4]
 801f9e6:	4a44      	ldr	r2, [pc, #272]	; (801faf8 <TIM_Base_SetConfig+0x124>)
 801f9e8:	4293      	cmp	r3, r2
 801f9ea:	d013      	beq.n	801fa14 <TIM_Base_SetConfig+0x40>
 801f9ec:	687b      	ldr	r3, [r7, #4]
 801f9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f9f2:	d00f      	beq.n	801fa14 <TIM_Base_SetConfig+0x40>
 801f9f4:	687b      	ldr	r3, [r7, #4]
 801f9f6:	4a41      	ldr	r2, [pc, #260]	; (801fafc <TIM_Base_SetConfig+0x128>)
 801f9f8:	4293      	cmp	r3, r2
 801f9fa:	d00b      	beq.n	801fa14 <TIM_Base_SetConfig+0x40>
 801f9fc:	687b      	ldr	r3, [r7, #4]
 801f9fe:	4a40      	ldr	r2, [pc, #256]	; (801fb00 <TIM_Base_SetConfig+0x12c>)
 801fa00:	4293      	cmp	r3, r2
 801fa02:	d007      	beq.n	801fa14 <TIM_Base_SetConfig+0x40>
 801fa04:	687b      	ldr	r3, [r7, #4]
 801fa06:	4a3f      	ldr	r2, [pc, #252]	; (801fb04 <TIM_Base_SetConfig+0x130>)
 801fa08:	4293      	cmp	r3, r2
 801fa0a:	d003      	beq.n	801fa14 <TIM_Base_SetConfig+0x40>
 801fa0c:	687b      	ldr	r3, [r7, #4]
 801fa0e:	4a3e      	ldr	r2, [pc, #248]	; (801fb08 <TIM_Base_SetConfig+0x134>)
 801fa10:	4293      	cmp	r3, r2
 801fa12:	d108      	bne.n	801fa26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801fa14:	68fb      	ldr	r3, [r7, #12]
 801fa16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801fa1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801fa1c:	683b      	ldr	r3, [r7, #0]
 801fa1e:	685b      	ldr	r3, [r3, #4]
 801fa20:	68fa      	ldr	r2, [r7, #12]
 801fa22:	4313      	orrs	r3, r2
 801fa24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	4a33      	ldr	r2, [pc, #204]	; (801faf8 <TIM_Base_SetConfig+0x124>)
 801fa2a:	4293      	cmp	r3, r2
 801fa2c:	d027      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa2e:	687b      	ldr	r3, [r7, #4]
 801fa30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fa34:	d023      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa36:	687b      	ldr	r3, [r7, #4]
 801fa38:	4a30      	ldr	r2, [pc, #192]	; (801fafc <TIM_Base_SetConfig+0x128>)
 801fa3a:	4293      	cmp	r3, r2
 801fa3c:	d01f      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa3e:	687b      	ldr	r3, [r7, #4]
 801fa40:	4a2f      	ldr	r2, [pc, #188]	; (801fb00 <TIM_Base_SetConfig+0x12c>)
 801fa42:	4293      	cmp	r3, r2
 801fa44:	d01b      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa46:	687b      	ldr	r3, [r7, #4]
 801fa48:	4a2e      	ldr	r2, [pc, #184]	; (801fb04 <TIM_Base_SetConfig+0x130>)
 801fa4a:	4293      	cmp	r3, r2
 801fa4c:	d017      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa4e:	687b      	ldr	r3, [r7, #4]
 801fa50:	4a2d      	ldr	r2, [pc, #180]	; (801fb08 <TIM_Base_SetConfig+0x134>)
 801fa52:	4293      	cmp	r3, r2
 801fa54:	d013      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa56:	687b      	ldr	r3, [r7, #4]
 801fa58:	4a2c      	ldr	r2, [pc, #176]	; (801fb0c <TIM_Base_SetConfig+0x138>)
 801fa5a:	4293      	cmp	r3, r2
 801fa5c:	d00f      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa5e:	687b      	ldr	r3, [r7, #4]
 801fa60:	4a2b      	ldr	r2, [pc, #172]	; (801fb10 <TIM_Base_SetConfig+0x13c>)
 801fa62:	4293      	cmp	r3, r2
 801fa64:	d00b      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa66:	687b      	ldr	r3, [r7, #4]
 801fa68:	4a2a      	ldr	r2, [pc, #168]	; (801fb14 <TIM_Base_SetConfig+0x140>)
 801fa6a:	4293      	cmp	r3, r2
 801fa6c:	d007      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa6e:	687b      	ldr	r3, [r7, #4]
 801fa70:	4a29      	ldr	r2, [pc, #164]	; (801fb18 <TIM_Base_SetConfig+0x144>)
 801fa72:	4293      	cmp	r3, r2
 801fa74:	d003      	beq.n	801fa7e <TIM_Base_SetConfig+0xaa>
 801fa76:	687b      	ldr	r3, [r7, #4]
 801fa78:	4a28      	ldr	r2, [pc, #160]	; (801fb1c <TIM_Base_SetConfig+0x148>)
 801fa7a:	4293      	cmp	r3, r2
 801fa7c:	d108      	bne.n	801fa90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801fa7e:	68fb      	ldr	r3, [r7, #12]
 801fa80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fa84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801fa86:	683b      	ldr	r3, [r7, #0]
 801fa88:	68db      	ldr	r3, [r3, #12]
 801fa8a:	68fa      	ldr	r2, [r7, #12]
 801fa8c:	4313      	orrs	r3, r2
 801fa8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801fa90:	68fb      	ldr	r3, [r7, #12]
 801fa92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801fa96:	683b      	ldr	r3, [r7, #0]
 801fa98:	695b      	ldr	r3, [r3, #20]
 801fa9a:	4313      	orrs	r3, r2
 801fa9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801fa9e:	687b      	ldr	r3, [r7, #4]
 801faa0:	68fa      	ldr	r2, [r7, #12]
 801faa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801faa4:	683b      	ldr	r3, [r7, #0]
 801faa6:	689a      	ldr	r2, [r3, #8]
 801faa8:	687b      	ldr	r3, [r7, #4]
 801faaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801faac:	683b      	ldr	r3, [r7, #0]
 801faae:	681a      	ldr	r2, [r3, #0]
 801fab0:	687b      	ldr	r3, [r7, #4]
 801fab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	4a10      	ldr	r2, [pc, #64]	; (801faf8 <TIM_Base_SetConfig+0x124>)
 801fab8:	4293      	cmp	r3, r2
 801faba:	d00f      	beq.n	801fadc <TIM_Base_SetConfig+0x108>
 801fabc:	687b      	ldr	r3, [r7, #4]
 801fabe:	4a12      	ldr	r2, [pc, #72]	; (801fb08 <TIM_Base_SetConfig+0x134>)
 801fac0:	4293      	cmp	r3, r2
 801fac2:	d00b      	beq.n	801fadc <TIM_Base_SetConfig+0x108>
 801fac4:	687b      	ldr	r3, [r7, #4]
 801fac6:	4a11      	ldr	r2, [pc, #68]	; (801fb0c <TIM_Base_SetConfig+0x138>)
 801fac8:	4293      	cmp	r3, r2
 801faca:	d007      	beq.n	801fadc <TIM_Base_SetConfig+0x108>
 801facc:	687b      	ldr	r3, [r7, #4]
 801face:	4a10      	ldr	r2, [pc, #64]	; (801fb10 <TIM_Base_SetConfig+0x13c>)
 801fad0:	4293      	cmp	r3, r2
 801fad2:	d003      	beq.n	801fadc <TIM_Base_SetConfig+0x108>
 801fad4:	687b      	ldr	r3, [r7, #4]
 801fad6:	4a0f      	ldr	r2, [pc, #60]	; (801fb14 <TIM_Base_SetConfig+0x140>)
 801fad8:	4293      	cmp	r3, r2
 801fada:	d103      	bne.n	801fae4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801fadc:	683b      	ldr	r3, [r7, #0]
 801fade:	691a      	ldr	r2, [r3, #16]
 801fae0:	687b      	ldr	r3, [r7, #4]
 801fae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	2201      	movs	r2, #1
 801fae8:	615a      	str	r2, [r3, #20]
}
 801faea:	bf00      	nop
 801faec:	3714      	adds	r7, #20
 801faee:	46bd      	mov	sp, r7
 801faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801faf4:	4770      	bx	lr
 801faf6:	bf00      	nop
 801faf8:	40010000 	.word	0x40010000
 801fafc:	40000400 	.word	0x40000400
 801fb00:	40000800 	.word	0x40000800
 801fb04:	40000c00 	.word	0x40000c00
 801fb08:	40010400 	.word	0x40010400
 801fb0c:	40014000 	.word	0x40014000
 801fb10:	40014400 	.word	0x40014400
 801fb14:	40014800 	.word	0x40014800
 801fb18:	4000e000 	.word	0x4000e000
 801fb1c:	4000e400 	.word	0x4000e400

0801fb20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fb20:	b480      	push	{r7}
 801fb22:	b087      	sub	sp, #28
 801fb24:	af00      	add	r7, sp, #0
 801fb26:	6078      	str	r0, [r7, #4]
 801fb28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801fb2a:	687b      	ldr	r3, [r7, #4]
 801fb2c:	6a1b      	ldr	r3, [r3, #32]
 801fb2e:	f023 0201 	bic.w	r2, r3, #1
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	6a1b      	ldr	r3, [r3, #32]
 801fb3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fb3c:	687b      	ldr	r3, [r7, #4]
 801fb3e:	685b      	ldr	r3, [r3, #4]
 801fb40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	699b      	ldr	r3, [r3, #24]
 801fb46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801fb48:	68fa      	ldr	r2, [r7, #12]
 801fb4a:	4b37      	ldr	r3, [pc, #220]	; (801fc28 <TIM_OC1_SetConfig+0x108>)
 801fb4c:	4013      	ands	r3, r2
 801fb4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801fb50:	68fb      	ldr	r3, [r7, #12]
 801fb52:	f023 0303 	bic.w	r3, r3, #3
 801fb56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fb58:	683b      	ldr	r3, [r7, #0]
 801fb5a:	681b      	ldr	r3, [r3, #0]
 801fb5c:	68fa      	ldr	r2, [r7, #12]
 801fb5e:	4313      	orrs	r3, r2
 801fb60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801fb62:	697b      	ldr	r3, [r7, #20]
 801fb64:	f023 0302 	bic.w	r3, r3, #2
 801fb68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801fb6a:	683b      	ldr	r3, [r7, #0]
 801fb6c:	689b      	ldr	r3, [r3, #8]
 801fb6e:	697a      	ldr	r2, [r7, #20]
 801fb70:	4313      	orrs	r3, r2
 801fb72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801fb74:	687b      	ldr	r3, [r7, #4]
 801fb76:	4a2d      	ldr	r2, [pc, #180]	; (801fc2c <TIM_OC1_SetConfig+0x10c>)
 801fb78:	4293      	cmp	r3, r2
 801fb7a:	d00f      	beq.n	801fb9c <TIM_OC1_SetConfig+0x7c>
 801fb7c:	687b      	ldr	r3, [r7, #4]
 801fb7e:	4a2c      	ldr	r2, [pc, #176]	; (801fc30 <TIM_OC1_SetConfig+0x110>)
 801fb80:	4293      	cmp	r3, r2
 801fb82:	d00b      	beq.n	801fb9c <TIM_OC1_SetConfig+0x7c>
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	4a2b      	ldr	r2, [pc, #172]	; (801fc34 <TIM_OC1_SetConfig+0x114>)
 801fb88:	4293      	cmp	r3, r2
 801fb8a:	d007      	beq.n	801fb9c <TIM_OC1_SetConfig+0x7c>
 801fb8c:	687b      	ldr	r3, [r7, #4]
 801fb8e:	4a2a      	ldr	r2, [pc, #168]	; (801fc38 <TIM_OC1_SetConfig+0x118>)
 801fb90:	4293      	cmp	r3, r2
 801fb92:	d003      	beq.n	801fb9c <TIM_OC1_SetConfig+0x7c>
 801fb94:	687b      	ldr	r3, [r7, #4]
 801fb96:	4a29      	ldr	r2, [pc, #164]	; (801fc3c <TIM_OC1_SetConfig+0x11c>)
 801fb98:	4293      	cmp	r3, r2
 801fb9a:	d10c      	bne.n	801fbb6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801fb9c:	697b      	ldr	r3, [r7, #20]
 801fb9e:	f023 0308 	bic.w	r3, r3, #8
 801fba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801fba4:	683b      	ldr	r3, [r7, #0]
 801fba6:	68db      	ldr	r3, [r3, #12]
 801fba8:	697a      	ldr	r2, [r7, #20]
 801fbaa:	4313      	orrs	r3, r2
 801fbac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801fbae:	697b      	ldr	r3, [r7, #20]
 801fbb0:	f023 0304 	bic.w	r3, r3, #4
 801fbb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	4a1c      	ldr	r2, [pc, #112]	; (801fc2c <TIM_OC1_SetConfig+0x10c>)
 801fbba:	4293      	cmp	r3, r2
 801fbbc:	d00f      	beq.n	801fbde <TIM_OC1_SetConfig+0xbe>
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	4a1b      	ldr	r2, [pc, #108]	; (801fc30 <TIM_OC1_SetConfig+0x110>)
 801fbc2:	4293      	cmp	r3, r2
 801fbc4:	d00b      	beq.n	801fbde <TIM_OC1_SetConfig+0xbe>
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	4a1a      	ldr	r2, [pc, #104]	; (801fc34 <TIM_OC1_SetConfig+0x114>)
 801fbca:	4293      	cmp	r3, r2
 801fbcc:	d007      	beq.n	801fbde <TIM_OC1_SetConfig+0xbe>
 801fbce:	687b      	ldr	r3, [r7, #4]
 801fbd0:	4a19      	ldr	r2, [pc, #100]	; (801fc38 <TIM_OC1_SetConfig+0x118>)
 801fbd2:	4293      	cmp	r3, r2
 801fbd4:	d003      	beq.n	801fbde <TIM_OC1_SetConfig+0xbe>
 801fbd6:	687b      	ldr	r3, [r7, #4]
 801fbd8:	4a18      	ldr	r2, [pc, #96]	; (801fc3c <TIM_OC1_SetConfig+0x11c>)
 801fbda:	4293      	cmp	r3, r2
 801fbdc:	d111      	bne.n	801fc02 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801fbde:	693b      	ldr	r3, [r7, #16]
 801fbe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801fbe4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801fbe6:	693b      	ldr	r3, [r7, #16]
 801fbe8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801fbec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801fbee:	683b      	ldr	r3, [r7, #0]
 801fbf0:	695b      	ldr	r3, [r3, #20]
 801fbf2:	693a      	ldr	r2, [r7, #16]
 801fbf4:	4313      	orrs	r3, r2
 801fbf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801fbf8:	683b      	ldr	r3, [r7, #0]
 801fbfa:	699b      	ldr	r3, [r3, #24]
 801fbfc:	693a      	ldr	r2, [r7, #16]
 801fbfe:	4313      	orrs	r3, r2
 801fc00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fc02:	687b      	ldr	r3, [r7, #4]
 801fc04:	693a      	ldr	r2, [r7, #16]
 801fc06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fc08:	687b      	ldr	r3, [r7, #4]
 801fc0a:	68fa      	ldr	r2, [r7, #12]
 801fc0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801fc0e:	683b      	ldr	r3, [r7, #0]
 801fc10:	685a      	ldr	r2, [r3, #4]
 801fc12:	687b      	ldr	r3, [r7, #4]
 801fc14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fc16:	687b      	ldr	r3, [r7, #4]
 801fc18:	697a      	ldr	r2, [r7, #20]
 801fc1a:	621a      	str	r2, [r3, #32]
}
 801fc1c:	bf00      	nop
 801fc1e:	371c      	adds	r7, #28
 801fc20:	46bd      	mov	sp, r7
 801fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc26:	4770      	bx	lr
 801fc28:	fffeff8f 	.word	0xfffeff8f
 801fc2c:	40010000 	.word	0x40010000
 801fc30:	40010400 	.word	0x40010400
 801fc34:	40014000 	.word	0x40014000
 801fc38:	40014400 	.word	0x40014400
 801fc3c:	40014800 	.word	0x40014800

0801fc40 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fc40:	b480      	push	{r7}
 801fc42:	b087      	sub	sp, #28
 801fc44:	af00      	add	r7, sp, #0
 801fc46:	6078      	str	r0, [r7, #4]
 801fc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	6a1b      	ldr	r3, [r3, #32]
 801fc4e:	f023 0210 	bic.w	r2, r3, #16
 801fc52:	687b      	ldr	r3, [r7, #4]
 801fc54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fc56:	687b      	ldr	r3, [r7, #4]
 801fc58:	6a1b      	ldr	r3, [r3, #32]
 801fc5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fc5c:	687b      	ldr	r3, [r7, #4]
 801fc5e:	685b      	ldr	r3, [r3, #4]
 801fc60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fc62:	687b      	ldr	r3, [r7, #4]
 801fc64:	699b      	ldr	r3, [r3, #24]
 801fc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801fc68:	68fa      	ldr	r2, [r7, #12]
 801fc6a:	4b34      	ldr	r3, [pc, #208]	; (801fd3c <TIM_OC2_SetConfig+0xfc>)
 801fc6c:	4013      	ands	r3, r2
 801fc6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801fc70:	68fb      	ldr	r3, [r7, #12]
 801fc72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fc76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fc78:	683b      	ldr	r3, [r7, #0]
 801fc7a:	681b      	ldr	r3, [r3, #0]
 801fc7c:	021b      	lsls	r3, r3, #8
 801fc7e:	68fa      	ldr	r2, [r7, #12]
 801fc80:	4313      	orrs	r3, r2
 801fc82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801fc84:	697b      	ldr	r3, [r7, #20]
 801fc86:	f023 0320 	bic.w	r3, r3, #32
 801fc8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801fc8c:	683b      	ldr	r3, [r7, #0]
 801fc8e:	689b      	ldr	r3, [r3, #8]
 801fc90:	011b      	lsls	r3, r3, #4
 801fc92:	697a      	ldr	r2, [r7, #20]
 801fc94:	4313      	orrs	r3, r2
 801fc96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801fc98:	687b      	ldr	r3, [r7, #4]
 801fc9a:	4a29      	ldr	r2, [pc, #164]	; (801fd40 <TIM_OC2_SetConfig+0x100>)
 801fc9c:	4293      	cmp	r3, r2
 801fc9e:	d003      	beq.n	801fca8 <TIM_OC2_SetConfig+0x68>
 801fca0:	687b      	ldr	r3, [r7, #4]
 801fca2:	4a28      	ldr	r2, [pc, #160]	; (801fd44 <TIM_OC2_SetConfig+0x104>)
 801fca4:	4293      	cmp	r3, r2
 801fca6:	d10d      	bne.n	801fcc4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801fca8:	697b      	ldr	r3, [r7, #20]
 801fcaa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fcae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801fcb0:	683b      	ldr	r3, [r7, #0]
 801fcb2:	68db      	ldr	r3, [r3, #12]
 801fcb4:	011b      	lsls	r3, r3, #4
 801fcb6:	697a      	ldr	r2, [r7, #20]
 801fcb8:	4313      	orrs	r3, r2
 801fcba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801fcbc:	697b      	ldr	r3, [r7, #20]
 801fcbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fcc2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fcc4:	687b      	ldr	r3, [r7, #4]
 801fcc6:	4a1e      	ldr	r2, [pc, #120]	; (801fd40 <TIM_OC2_SetConfig+0x100>)
 801fcc8:	4293      	cmp	r3, r2
 801fcca:	d00f      	beq.n	801fcec <TIM_OC2_SetConfig+0xac>
 801fccc:	687b      	ldr	r3, [r7, #4]
 801fcce:	4a1d      	ldr	r2, [pc, #116]	; (801fd44 <TIM_OC2_SetConfig+0x104>)
 801fcd0:	4293      	cmp	r3, r2
 801fcd2:	d00b      	beq.n	801fcec <TIM_OC2_SetConfig+0xac>
 801fcd4:	687b      	ldr	r3, [r7, #4]
 801fcd6:	4a1c      	ldr	r2, [pc, #112]	; (801fd48 <TIM_OC2_SetConfig+0x108>)
 801fcd8:	4293      	cmp	r3, r2
 801fcda:	d007      	beq.n	801fcec <TIM_OC2_SetConfig+0xac>
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	4a1b      	ldr	r2, [pc, #108]	; (801fd4c <TIM_OC2_SetConfig+0x10c>)
 801fce0:	4293      	cmp	r3, r2
 801fce2:	d003      	beq.n	801fcec <TIM_OC2_SetConfig+0xac>
 801fce4:	687b      	ldr	r3, [r7, #4]
 801fce6:	4a1a      	ldr	r2, [pc, #104]	; (801fd50 <TIM_OC2_SetConfig+0x110>)
 801fce8:	4293      	cmp	r3, r2
 801fcea:	d113      	bne.n	801fd14 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801fcec:	693b      	ldr	r3, [r7, #16]
 801fcee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fcf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801fcf4:	693b      	ldr	r3, [r7, #16]
 801fcf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fcfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801fcfc:	683b      	ldr	r3, [r7, #0]
 801fcfe:	695b      	ldr	r3, [r3, #20]
 801fd00:	009b      	lsls	r3, r3, #2
 801fd02:	693a      	ldr	r2, [r7, #16]
 801fd04:	4313      	orrs	r3, r2
 801fd06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801fd08:	683b      	ldr	r3, [r7, #0]
 801fd0a:	699b      	ldr	r3, [r3, #24]
 801fd0c:	009b      	lsls	r3, r3, #2
 801fd0e:	693a      	ldr	r2, [r7, #16]
 801fd10:	4313      	orrs	r3, r2
 801fd12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fd14:	687b      	ldr	r3, [r7, #4]
 801fd16:	693a      	ldr	r2, [r7, #16]
 801fd18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	68fa      	ldr	r2, [r7, #12]
 801fd1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801fd20:	683b      	ldr	r3, [r7, #0]
 801fd22:	685a      	ldr	r2, [r3, #4]
 801fd24:	687b      	ldr	r3, [r7, #4]
 801fd26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fd28:	687b      	ldr	r3, [r7, #4]
 801fd2a:	697a      	ldr	r2, [r7, #20]
 801fd2c:	621a      	str	r2, [r3, #32]
}
 801fd2e:	bf00      	nop
 801fd30:	371c      	adds	r7, #28
 801fd32:	46bd      	mov	sp, r7
 801fd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fd38:	4770      	bx	lr
 801fd3a:	bf00      	nop
 801fd3c:	feff8fff 	.word	0xfeff8fff
 801fd40:	40010000 	.word	0x40010000
 801fd44:	40010400 	.word	0x40010400
 801fd48:	40014000 	.word	0x40014000
 801fd4c:	40014400 	.word	0x40014400
 801fd50:	40014800 	.word	0x40014800

0801fd54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fd54:	b480      	push	{r7}
 801fd56:	b087      	sub	sp, #28
 801fd58:	af00      	add	r7, sp, #0
 801fd5a:	6078      	str	r0, [r7, #4]
 801fd5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	6a1b      	ldr	r3, [r3, #32]
 801fd62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	6a1b      	ldr	r3, [r3, #32]
 801fd6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	685b      	ldr	r3, [r3, #4]
 801fd74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	69db      	ldr	r3, [r3, #28]
 801fd7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801fd7c:	68fa      	ldr	r2, [r7, #12]
 801fd7e:	4b33      	ldr	r3, [pc, #204]	; (801fe4c <TIM_OC3_SetConfig+0xf8>)
 801fd80:	4013      	ands	r3, r2
 801fd82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801fd84:	68fb      	ldr	r3, [r7, #12]
 801fd86:	f023 0303 	bic.w	r3, r3, #3
 801fd8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fd8c:	683b      	ldr	r3, [r7, #0]
 801fd8e:	681b      	ldr	r3, [r3, #0]
 801fd90:	68fa      	ldr	r2, [r7, #12]
 801fd92:	4313      	orrs	r3, r2
 801fd94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801fd96:	697b      	ldr	r3, [r7, #20]
 801fd98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801fd9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801fd9e:	683b      	ldr	r3, [r7, #0]
 801fda0:	689b      	ldr	r3, [r3, #8]
 801fda2:	021b      	lsls	r3, r3, #8
 801fda4:	697a      	ldr	r2, [r7, #20]
 801fda6:	4313      	orrs	r3, r2
 801fda8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	4a28      	ldr	r2, [pc, #160]	; (801fe50 <TIM_OC3_SetConfig+0xfc>)
 801fdae:	4293      	cmp	r3, r2
 801fdb0:	d003      	beq.n	801fdba <TIM_OC3_SetConfig+0x66>
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	4a27      	ldr	r2, [pc, #156]	; (801fe54 <TIM_OC3_SetConfig+0x100>)
 801fdb6:	4293      	cmp	r3, r2
 801fdb8:	d10d      	bne.n	801fdd6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801fdba:	697b      	ldr	r3, [r7, #20]
 801fdbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fdc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801fdc2:	683b      	ldr	r3, [r7, #0]
 801fdc4:	68db      	ldr	r3, [r3, #12]
 801fdc6:	021b      	lsls	r3, r3, #8
 801fdc8:	697a      	ldr	r2, [r7, #20]
 801fdca:	4313      	orrs	r3, r2
 801fdcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801fdce:	697b      	ldr	r3, [r7, #20]
 801fdd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fdd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	4a1d      	ldr	r2, [pc, #116]	; (801fe50 <TIM_OC3_SetConfig+0xfc>)
 801fdda:	4293      	cmp	r3, r2
 801fddc:	d00f      	beq.n	801fdfe <TIM_OC3_SetConfig+0xaa>
 801fdde:	687b      	ldr	r3, [r7, #4]
 801fde0:	4a1c      	ldr	r2, [pc, #112]	; (801fe54 <TIM_OC3_SetConfig+0x100>)
 801fde2:	4293      	cmp	r3, r2
 801fde4:	d00b      	beq.n	801fdfe <TIM_OC3_SetConfig+0xaa>
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	4a1b      	ldr	r2, [pc, #108]	; (801fe58 <TIM_OC3_SetConfig+0x104>)
 801fdea:	4293      	cmp	r3, r2
 801fdec:	d007      	beq.n	801fdfe <TIM_OC3_SetConfig+0xaa>
 801fdee:	687b      	ldr	r3, [r7, #4]
 801fdf0:	4a1a      	ldr	r2, [pc, #104]	; (801fe5c <TIM_OC3_SetConfig+0x108>)
 801fdf2:	4293      	cmp	r3, r2
 801fdf4:	d003      	beq.n	801fdfe <TIM_OC3_SetConfig+0xaa>
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	4a19      	ldr	r2, [pc, #100]	; (801fe60 <TIM_OC3_SetConfig+0x10c>)
 801fdfa:	4293      	cmp	r3, r2
 801fdfc:	d113      	bne.n	801fe26 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801fdfe:	693b      	ldr	r3, [r7, #16]
 801fe00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fe04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801fe06:	693b      	ldr	r3, [r7, #16]
 801fe08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fe0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801fe0e:	683b      	ldr	r3, [r7, #0]
 801fe10:	695b      	ldr	r3, [r3, #20]
 801fe12:	011b      	lsls	r3, r3, #4
 801fe14:	693a      	ldr	r2, [r7, #16]
 801fe16:	4313      	orrs	r3, r2
 801fe18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801fe1a:	683b      	ldr	r3, [r7, #0]
 801fe1c:	699b      	ldr	r3, [r3, #24]
 801fe1e:	011b      	lsls	r3, r3, #4
 801fe20:	693a      	ldr	r2, [r7, #16]
 801fe22:	4313      	orrs	r3, r2
 801fe24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fe26:	687b      	ldr	r3, [r7, #4]
 801fe28:	693a      	ldr	r2, [r7, #16]
 801fe2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fe2c:	687b      	ldr	r3, [r7, #4]
 801fe2e:	68fa      	ldr	r2, [r7, #12]
 801fe30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801fe32:	683b      	ldr	r3, [r7, #0]
 801fe34:	685a      	ldr	r2, [r3, #4]
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fe3a:	687b      	ldr	r3, [r7, #4]
 801fe3c:	697a      	ldr	r2, [r7, #20]
 801fe3e:	621a      	str	r2, [r3, #32]
}
 801fe40:	bf00      	nop
 801fe42:	371c      	adds	r7, #28
 801fe44:	46bd      	mov	sp, r7
 801fe46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe4a:	4770      	bx	lr
 801fe4c:	fffeff8f 	.word	0xfffeff8f
 801fe50:	40010000 	.word	0x40010000
 801fe54:	40010400 	.word	0x40010400
 801fe58:	40014000 	.word	0x40014000
 801fe5c:	40014400 	.word	0x40014400
 801fe60:	40014800 	.word	0x40014800

0801fe64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fe64:	b480      	push	{r7}
 801fe66:	b087      	sub	sp, #28
 801fe68:	af00      	add	r7, sp, #0
 801fe6a:	6078      	str	r0, [r7, #4]
 801fe6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	6a1b      	ldr	r3, [r3, #32]
 801fe72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801fe76:	687b      	ldr	r3, [r7, #4]
 801fe78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fe7a:	687b      	ldr	r3, [r7, #4]
 801fe7c:	6a1b      	ldr	r3, [r3, #32]
 801fe7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fe80:	687b      	ldr	r3, [r7, #4]
 801fe82:	685b      	ldr	r3, [r3, #4]
 801fe84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	69db      	ldr	r3, [r3, #28]
 801fe8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801fe8c:	68fa      	ldr	r2, [r7, #12]
 801fe8e:	4b24      	ldr	r3, [pc, #144]	; (801ff20 <TIM_OC4_SetConfig+0xbc>)
 801fe90:	4013      	ands	r3, r2
 801fe92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801fe94:	68fb      	ldr	r3, [r7, #12]
 801fe96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fe9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fe9c:	683b      	ldr	r3, [r7, #0]
 801fe9e:	681b      	ldr	r3, [r3, #0]
 801fea0:	021b      	lsls	r3, r3, #8
 801fea2:	68fa      	ldr	r2, [r7, #12]
 801fea4:	4313      	orrs	r3, r2
 801fea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801fea8:	693b      	ldr	r3, [r7, #16]
 801feaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801feae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801feb0:	683b      	ldr	r3, [r7, #0]
 801feb2:	689b      	ldr	r3, [r3, #8]
 801feb4:	031b      	lsls	r3, r3, #12
 801feb6:	693a      	ldr	r2, [r7, #16]
 801feb8:	4313      	orrs	r3, r2
 801feba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801febc:	687b      	ldr	r3, [r7, #4]
 801febe:	4a19      	ldr	r2, [pc, #100]	; (801ff24 <TIM_OC4_SetConfig+0xc0>)
 801fec0:	4293      	cmp	r3, r2
 801fec2:	d00f      	beq.n	801fee4 <TIM_OC4_SetConfig+0x80>
 801fec4:	687b      	ldr	r3, [r7, #4]
 801fec6:	4a18      	ldr	r2, [pc, #96]	; (801ff28 <TIM_OC4_SetConfig+0xc4>)
 801fec8:	4293      	cmp	r3, r2
 801feca:	d00b      	beq.n	801fee4 <TIM_OC4_SetConfig+0x80>
 801fecc:	687b      	ldr	r3, [r7, #4]
 801fece:	4a17      	ldr	r2, [pc, #92]	; (801ff2c <TIM_OC4_SetConfig+0xc8>)
 801fed0:	4293      	cmp	r3, r2
 801fed2:	d007      	beq.n	801fee4 <TIM_OC4_SetConfig+0x80>
 801fed4:	687b      	ldr	r3, [r7, #4]
 801fed6:	4a16      	ldr	r2, [pc, #88]	; (801ff30 <TIM_OC4_SetConfig+0xcc>)
 801fed8:	4293      	cmp	r3, r2
 801feda:	d003      	beq.n	801fee4 <TIM_OC4_SetConfig+0x80>
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	4a15      	ldr	r2, [pc, #84]	; (801ff34 <TIM_OC4_SetConfig+0xd0>)
 801fee0:	4293      	cmp	r3, r2
 801fee2:	d109      	bne.n	801fef8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801fee4:	697b      	ldr	r3, [r7, #20]
 801fee6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801feea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801feec:	683b      	ldr	r3, [r7, #0]
 801feee:	695b      	ldr	r3, [r3, #20]
 801fef0:	019b      	lsls	r3, r3, #6
 801fef2:	697a      	ldr	r2, [r7, #20]
 801fef4:	4313      	orrs	r3, r2
 801fef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fef8:	687b      	ldr	r3, [r7, #4]
 801fefa:	697a      	ldr	r2, [r7, #20]
 801fefc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fefe:	687b      	ldr	r3, [r7, #4]
 801ff00:	68fa      	ldr	r2, [r7, #12]
 801ff02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801ff04:	683b      	ldr	r3, [r7, #0]
 801ff06:	685a      	ldr	r2, [r3, #4]
 801ff08:	687b      	ldr	r3, [r7, #4]
 801ff0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ff0c:	687b      	ldr	r3, [r7, #4]
 801ff0e:	693a      	ldr	r2, [r7, #16]
 801ff10:	621a      	str	r2, [r3, #32]
}
 801ff12:	bf00      	nop
 801ff14:	371c      	adds	r7, #28
 801ff16:	46bd      	mov	sp, r7
 801ff18:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff1c:	4770      	bx	lr
 801ff1e:	bf00      	nop
 801ff20:	feff8fff 	.word	0xfeff8fff
 801ff24:	40010000 	.word	0x40010000
 801ff28:	40010400 	.word	0x40010400
 801ff2c:	40014000 	.word	0x40014000
 801ff30:	40014400 	.word	0x40014400
 801ff34:	40014800 	.word	0x40014800

0801ff38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801ff38:	b480      	push	{r7}
 801ff3a:	b087      	sub	sp, #28
 801ff3c:	af00      	add	r7, sp, #0
 801ff3e:	6078      	str	r0, [r7, #4]
 801ff40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	6a1b      	ldr	r3, [r3, #32]
 801ff46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801ff4e:	687b      	ldr	r3, [r7, #4]
 801ff50:	6a1b      	ldr	r3, [r3, #32]
 801ff52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801ff54:	687b      	ldr	r3, [r7, #4]
 801ff56:	685b      	ldr	r3, [r3, #4]
 801ff58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801ff5a:	687b      	ldr	r3, [r7, #4]
 801ff5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ff5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801ff60:	68fa      	ldr	r2, [r7, #12]
 801ff62:	4b21      	ldr	r3, [pc, #132]	; (801ffe8 <TIM_OC5_SetConfig+0xb0>)
 801ff64:	4013      	ands	r3, r2
 801ff66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801ff68:	683b      	ldr	r3, [r7, #0]
 801ff6a:	681b      	ldr	r3, [r3, #0]
 801ff6c:	68fa      	ldr	r2, [r7, #12]
 801ff6e:	4313      	orrs	r3, r2
 801ff70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801ff72:	693b      	ldr	r3, [r7, #16]
 801ff74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801ff78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801ff7a:	683b      	ldr	r3, [r7, #0]
 801ff7c:	689b      	ldr	r3, [r3, #8]
 801ff7e:	041b      	lsls	r3, r3, #16
 801ff80:	693a      	ldr	r2, [r7, #16]
 801ff82:	4313      	orrs	r3, r2
 801ff84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801ff86:	687b      	ldr	r3, [r7, #4]
 801ff88:	4a18      	ldr	r2, [pc, #96]	; (801ffec <TIM_OC5_SetConfig+0xb4>)
 801ff8a:	4293      	cmp	r3, r2
 801ff8c:	d00f      	beq.n	801ffae <TIM_OC5_SetConfig+0x76>
 801ff8e:	687b      	ldr	r3, [r7, #4]
 801ff90:	4a17      	ldr	r2, [pc, #92]	; (801fff0 <TIM_OC5_SetConfig+0xb8>)
 801ff92:	4293      	cmp	r3, r2
 801ff94:	d00b      	beq.n	801ffae <TIM_OC5_SetConfig+0x76>
 801ff96:	687b      	ldr	r3, [r7, #4]
 801ff98:	4a16      	ldr	r2, [pc, #88]	; (801fff4 <TIM_OC5_SetConfig+0xbc>)
 801ff9a:	4293      	cmp	r3, r2
 801ff9c:	d007      	beq.n	801ffae <TIM_OC5_SetConfig+0x76>
 801ff9e:	687b      	ldr	r3, [r7, #4]
 801ffa0:	4a15      	ldr	r2, [pc, #84]	; (801fff8 <TIM_OC5_SetConfig+0xc0>)
 801ffa2:	4293      	cmp	r3, r2
 801ffa4:	d003      	beq.n	801ffae <TIM_OC5_SetConfig+0x76>
 801ffa6:	687b      	ldr	r3, [r7, #4]
 801ffa8:	4a14      	ldr	r2, [pc, #80]	; (801fffc <TIM_OC5_SetConfig+0xc4>)
 801ffaa:	4293      	cmp	r3, r2
 801ffac:	d109      	bne.n	801ffc2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801ffae:	697b      	ldr	r3, [r7, #20]
 801ffb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801ffb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801ffb6:	683b      	ldr	r3, [r7, #0]
 801ffb8:	695b      	ldr	r3, [r3, #20]
 801ffba:	021b      	lsls	r3, r3, #8
 801ffbc:	697a      	ldr	r2, [r7, #20]
 801ffbe:	4313      	orrs	r3, r2
 801ffc0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801ffc2:	687b      	ldr	r3, [r7, #4]
 801ffc4:	697a      	ldr	r2, [r7, #20]
 801ffc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	68fa      	ldr	r2, [r7, #12]
 801ffcc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801ffce:	683b      	ldr	r3, [r7, #0]
 801ffd0:	685a      	ldr	r2, [r3, #4]
 801ffd2:	687b      	ldr	r3, [r7, #4]
 801ffd4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801ffd6:	687b      	ldr	r3, [r7, #4]
 801ffd8:	693a      	ldr	r2, [r7, #16]
 801ffda:	621a      	str	r2, [r3, #32]
}
 801ffdc:	bf00      	nop
 801ffde:	371c      	adds	r7, #28
 801ffe0:	46bd      	mov	sp, r7
 801ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ffe6:	4770      	bx	lr
 801ffe8:	fffeff8f 	.word	0xfffeff8f
 801ffec:	40010000 	.word	0x40010000
 801fff0:	40010400 	.word	0x40010400
 801fff4:	40014000 	.word	0x40014000
 801fff8:	40014400 	.word	0x40014400
 801fffc:	40014800 	.word	0x40014800

08020000 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8020000:	b480      	push	{r7}
 8020002:	b087      	sub	sp, #28
 8020004:	af00      	add	r7, sp, #0
 8020006:	6078      	str	r0, [r7, #4]
 8020008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 802000a:	687b      	ldr	r3, [r7, #4]
 802000c:	6a1b      	ldr	r3, [r3, #32]
 802000e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8020012:	687b      	ldr	r3, [r7, #4]
 8020014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8020016:	687b      	ldr	r3, [r7, #4]
 8020018:	6a1b      	ldr	r3, [r3, #32]
 802001a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 802001c:	687b      	ldr	r3, [r7, #4]
 802001e:	685b      	ldr	r3, [r3, #4]
 8020020:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8020022:	687b      	ldr	r3, [r7, #4]
 8020024:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8020028:	68fa      	ldr	r2, [r7, #12]
 802002a:	4b22      	ldr	r3, [pc, #136]	; (80200b4 <TIM_OC6_SetConfig+0xb4>)
 802002c:	4013      	ands	r3, r2
 802002e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8020030:	683b      	ldr	r3, [r7, #0]
 8020032:	681b      	ldr	r3, [r3, #0]
 8020034:	021b      	lsls	r3, r3, #8
 8020036:	68fa      	ldr	r2, [r7, #12]
 8020038:	4313      	orrs	r3, r2
 802003a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 802003c:	693b      	ldr	r3, [r7, #16]
 802003e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8020042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8020044:	683b      	ldr	r3, [r7, #0]
 8020046:	689b      	ldr	r3, [r3, #8]
 8020048:	051b      	lsls	r3, r3, #20
 802004a:	693a      	ldr	r2, [r7, #16]
 802004c:	4313      	orrs	r3, r2
 802004e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8020050:	687b      	ldr	r3, [r7, #4]
 8020052:	4a19      	ldr	r2, [pc, #100]	; (80200b8 <TIM_OC6_SetConfig+0xb8>)
 8020054:	4293      	cmp	r3, r2
 8020056:	d00f      	beq.n	8020078 <TIM_OC6_SetConfig+0x78>
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	4a18      	ldr	r2, [pc, #96]	; (80200bc <TIM_OC6_SetConfig+0xbc>)
 802005c:	4293      	cmp	r3, r2
 802005e:	d00b      	beq.n	8020078 <TIM_OC6_SetConfig+0x78>
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	4a17      	ldr	r2, [pc, #92]	; (80200c0 <TIM_OC6_SetConfig+0xc0>)
 8020064:	4293      	cmp	r3, r2
 8020066:	d007      	beq.n	8020078 <TIM_OC6_SetConfig+0x78>
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	4a16      	ldr	r2, [pc, #88]	; (80200c4 <TIM_OC6_SetConfig+0xc4>)
 802006c:	4293      	cmp	r3, r2
 802006e:	d003      	beq.n	8020078 <TIM_OC6_SetConfig+0x78>
 8020070:	687b      	ldr	r3, [r7, #4]
 8020072:	4a15      	ldr	r2, [pc, #84]	; (80200c8 <TIM_OC6_SetConfig+0xc8>)
 8020074:	4293      	cmp	r3, r2
 8020076:	d109      	bne.n	802008c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8020078:	697b      	ldr	r3, [r7, #20]
 802007a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 802007e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8020080:	683b      	ldr	r3, [r7, #0]
 8020082:	695b      	ldr	r3, [r3, #20]
 8020084:	029b      	lsls	r3, r3, #10
 8020086:	697a      	ldr	r2, [r7, #20]
 8020088:	4313      	orrs	r3, r2
 802008a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 802008c:	687b      	ldr	r3, [r7, #4]
 802008e:	697a      	ldr	r2, [r7, #20]
 8020090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	68fa      	ldr	r2, [r7, #12]
 8020096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8020098:	683b      	ldr	r3, [r7, #0]
 802009a:	685a      	ldr	r2, [r3, #4]
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	693a      	ldr	r2, [r7, #16]
 80200a4:	621a      	str	r2, [r3, #32]
}
 80200a6:	bf00      	nop
 80200a8:	371c      	adds	r7, #28
 80200aa:	46bd      	mov	sp, r7
 80200ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200b0:	4770      	bx	lr
 80200b2:	bf00      	nop
 80200b4:	feff8fff 	.word	0xfeff8fff
 80200b8:	40010000 	.word	0x40010000
 80200bc:	40010400 	.word	0x40010400
 80200c0:	40014000 	.word	0x40014000
 80200c4:	40014400 	.word	0x40014400
 80200c8:	40014800 	.word	0x40014800

080200cc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80200cc:	b580      	push	{r7, lr}
 80200ce:	b086      	sub	sp, #24
 80200d0:	af00      	add	r7, sp, #0
 80200d2:	6078      	str	r0, [r7, #4]
 80200d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80200d6:	2300      	movs	r3, #0
 80200d8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80200da:	687b      	ldr	r3, [r7, #4]
 80200dc:	681b      	ldr	r3, [r3, #0]
 80200de:	689b      	ldr	r3, [r3, #8]
 80200e0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80200e2:	693a      	ldr	r2, [r7, #16]
 80200e4:	4b65      	ldr	r3, [pc, #404]	; (802027c <TIM_SlaveTimer_SetConfig+0x1b0>)
 80200e6:	4013      	ands	r3, r2
 80200e8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80200ea:	683b      	ldr	r3, [r7, #0]
 80200ec:	685b      	ldr	r3, [r3, #4]
 80200ee:	693a      	ldr	r2, [r7, #16]
 80200f0:	4313      	orrs	r3, r2
 80200f2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80200f4:	693a      	ldr	r2, [r7, #16]
 80200f6:	4b62      	ldr	r3, [pc, #392]	; (8020280 <TIM_SlaveTimer_SetConfig+0x1b4>)
 80200f8:	4013      	ands	r3, r2
 80200fa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80200fc:	683b      	ldr	r3, [r7, #0]
 80200fe:	681b      	ldr	r3, [r3, #0]
 8020100:	693a      	ldr	r2, [r7, #16]
 8020102:	4313      	orrs	r3, r2
 8020104:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8020106:	687b      	ldr	r3, [r7, #4]
 8020108:	681b      	ldr	r3, [r3, #0]
 802010a:	693a      	ldr	r2, [r7, #16]
 802010c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 802010e:	683b      	ldr	r3, [r7, #0]
 8020110:	685b      	ldr	r3, [r3, #4]
 8020112:	4a5c      	ldr	r2, [pc, #368]	; (8020284 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8020114:	4293      	cmp	r3, r2
 8020116:	f000 80ab 	beq.w	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 802011a:	4a5a      	ldr	r2, [pc, #360]	; (8020284 <TIM_SlaveTimer_SetConfig+0x1b8>)
 802011c:	4293      	cmp	r3, r2
 802011e:	f200 80a4 	bhi.w	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 8020122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8020126:	f000 80a3 	beq.w	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 802012a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 802012e:	f200 809c 	bhi.w	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 8020132:	4a55      	ldr	r2, [pc, #340]	; (8020288 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8020134:	4293      	cmp	r3, r2
 8020136:	f000 809b 	beq.w	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 802013a:	4a53      	ldr	r2, [pc, #332]	; (8020288 <TIM_SlaveTimer_SetConfig+0x1bc>)
 802013c:	4293      	cmp	r3, r2
 802013e:	f200 8094 	bhi.w	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 8020142:	4a52      	ldr	r2, [pc, #328]	; (802028c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8020144:	4293      	cmp	r3, r2
 8020146:	f000 8093 	beq.w	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 802014a:	4a50      	ldr	r2, [pc, #320]	; (802028c <TIM_SlaveTimer_SetConfig+0x1c0>)
 802014c:	4293      	cmp	r3, r2
 802014e:	f200 808c 	bhi.w	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 8020152:	4a4f      	ldr	r2, [pc, #316]	; (8020290 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8020154:	4293      	cmp	r3, r2
 8020156:	f000 808b 	beq.w	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 802015a:	4a4d      	ldr	r2, [pc, #308]	; (8020290 <TIM_SlaveTimer_SetConfig+0x1c4>)
 802015c:	4293      	cmp	r3, r2
 802015e:	f200 8084 	bhi.w	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 8020162:	4a4c      	ldr	r2, [pc, #304]	; (8020294 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8020164:	4293      	cmp	r3, r2
 8020166:	f000 8083 	beq.w	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 802016a:	4a4a      	ldr	r2, [pc, #296]	; (8020294 <TIM_SlaveTimer_SetConfig+0x1c8>)
 802016c:	4293      	cmp	r3, r2
 802016e:	d87c      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 8020170:	4a49      	ldr	r2, [pc, #292]	; (8020298 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8020172:	4293      	cmp	r3, r2
 8020174:	d07c      	beq.n	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 8020176:	4a48      	ldr	r2, [pc, #288]	; (8020298 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8020178:	4293      	cmp	r3, r2
 802017a:	d876      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 802017c:	4a47      	ldr	r2, [pc, #284]	; (802029c <TIM_SlaveTimer_SetConfig+0x1d0>)
 802017e:	4293      	cmp	r3, r2
 8020180:	d076      	beq.n	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 8020182:	4a46      	ldr	r2, [pc, #280]	; (802029c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8020184:	4293      	cmp	r3, r2
 8020186:	d870      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 8020188:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 802018c:	d070      	beq.n	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 802018e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8020192:	d86a      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 8020194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8020198:	d06a      	beq.n	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 802019a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802019e:	d864      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 80201a0:	2b70      	cmp	r3, #112	; 0x70
 80201a2:	d01a      	beq.n	80201da <TIM_SlaveTimer_SetConfig+0x10e>
 80201a4:	2b70      	cmp	r3, #112	; 0x70
 80201a6:	d860      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 80201a8:	2b60      	cmp	r3, #96	; 0x60
 80201aa:	d054      	beq.n	8020256 <TIM_SlaveTimer_SetConfig+0x18a>
 80201ac:	2b60      	cmp	r3, #96	; 0x60
 80201ae:	d85c      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 80201b0:	2b50      	cmp	r3, #80	; 0x50
 80201b2:	d046      	beq.n	8020242 <TIM_SlaveTimer_SetConfig+0x176>
 80201b4:	2b50      	cmp	r3, #80	; 0x50
 80201b6:	d858      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 80201b8:	2b40      	cmp	r3, #64	; 0x40
 80201ba:	d019      	beq.n	80201f0 <TIM_SlaveTimer_SetConfig+0x124>
 80201bc:	2b40      	cmp	r3, #64	; 0x40
 80201be:	d854      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 80201c0:	2b30      	cmp	r3, #48	; 0x30
 80201c2:	d055      	beq.n	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 80201c4:	2b30      	cmp	r3, #48	; 0x30
 80201c6:	d850      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 80201c8:	2b20      	cmp	r3, #32
 80201ca:	d051      	beq.n	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 80201cc:	2b20      	cmp	r3, #32
 80201ce:	d84c      	bhi.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
 80201d0:	2b00      	cmp	r3, #0
 80201d2:	d04d      	beq.n	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 80201d4:	2b10      	cmp	r3, #16
 80201d6:	d04b      	beq.n	8020270 <TIM_SlaveTimer_SetConfig+0x1a4>
 80201d8:	e047      	b.n	802026a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	6818      	ldr	r0, [r3, #0]
 80201de:	683b      	ldr	r3, [r7, #0]
 80201e0:	68d9      	ldr	r1, [r3, #12]
 80201e2:	683b      	ldr	r3, [r7, #0]
 80201e4:	689a      	ldr	r2, [r3, #8]
 80201e6:	683b      	ldr	r3, [r7, #0]
 80201e8:	691b      	ldr	r3, [r3, #16]
 80201ea:	f000 fa0d 	bl	8020608 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 80201ee:	e040      	b.n	8020272 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80201f0:	683b      	ldr	r3, [r7, #0]
 80201f2:	681b      	ldr	r3, [r3, #0]
 80201f4:	2b05      	cmp	r3, #5
 80201f6:	d101      	bne.n	80201fc <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 80201f8:	2301      	movs	r3, #1
 80201fa:	e03b      	b.n	8020274 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80201fc:	687b      	ldr	r3, [r7, #4]
 80201fe:	681b      	ldr	r3, [r3, #0]
 8020200:	6a1b      	ldr	r3, [r3, #32]
 8020202:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8020204:	687b      	ldr	r3, [r7, #4]
 8020206:	681b      	ldr	r3, [r3, #0]
 8020208:	6a1a      	ldr	r2, [r3, #32]
 802020a:	687b      	ldr	r3, [r7, #4]
 802020c:	681b      	ldr	r3, [r3, #0]
 802020e:	f022 0201 	bic.w	r2, r2, #1
 8020212:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8020214:	687b      	ldr	r3, [r7, #4]
 8020216:	681b      	ldr	r3, [r3, #0]
 8020218:	699b      	ldr	r3, [r3, #24]
 802021a:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802021c:	68bb      	ldr	r3, [r7, #8]
 802021e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020222:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8020224:	683b      	ldr	r3, [r7, #0]
 8020226:	691b      	ldr	r3, [r3, #16]
 8020228:	011b      	lsls	r3, r3, #4
 802022a:	68ba      	ldr	r2, [r7, #8]
 802022c:	4313      	orrs	r3, r2
 802022e:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8020230:	687b      	ldr	r3, [r7, #4]
 8020232:	681b      	ldr	r3, [r3, #0]
 8020234:	68ba      	ldr	r2, [r7, #8]
 8020236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8020238:	687b      	ldr	r3, [r7, #4]
 802023a:	681b      	ldr	r3, [r3, #0]
 802023c:	68fa      	ldr	r2, [r7, #12]
 802023e:	621a      	str	r2, [r3, #32]
      break;
 8020240:	e017      	b.n	8020272 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	6818      	ldr	r0, [r3, #0]
 8020246:	683b      	ldr	r3, [r7, #0]
 8020248:	6899      	ldr	r1, [r3, #8]
 802024a:	683b      	ldr	r3, [r7, #0]
 802024c:	691b      	ldr	r3, [r3, #16]
 802024e:	461a      	mov	r2, r3
 8020250:	f000 f8a6 	bl	80203a0 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8020254:	e00d      	b.n	8020272 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8020256:	687b      	ldr	r3, [r7, #4]
 8020258:	6818      	ldr	r0, [r3, #0]
 802025a:	683b      	ldr	r3, [r7, #0]
 802025c:	6899      	ldr	r1, [r3, #8]
 802025e:	683b      	ldr	r3, [r7, #0]
 8020260:	691b      	ldr	r3, [r3, #16]
 8020262:	461a      	mov	r2, r3
 8020264:	f000 f908 	bl	8020478 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8020268:	e003      	b.n	8020272 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 802026a:	2301      	movs	r3, #1
 802026c:	75fb      	strb	r3, [r7, #23]
      break;
 802026e:	e000      	b.n	8020272 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8020270:	bf00      	nop
  }

  return status;
 8020272:	7dfb      	ldrb	r3, [r7, #23]
}
 8020274:	4618      	mov	r0, r3
 8020276:	3718      	adds	r7, #24
 8020278:	46bd      	mov	sp, r7
 802027a:	bd80      	pop	{r7, pc}
 802027c:	ffcfff8f 	.word	0xffcfff8f
 8020280:	fffefff8 	.word	0xfffefff8
 8020284:	00200010 	.word	0x00200010
 8020288:	00100070 	.word	0x00100070
 802028c:	00100060 	.word	0x00100060
 8020290:	00100050 	.word	0x00100050
 8020294:	00100040 	.word	0x00100040
 8020298:	00100030 	.word	0x00100030
 802029c:	00100020 	.word	0x00100020

080202a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80202a0:	b480      	push	{r7}
 80202a2:	b087      	sub	sp, #28
 80202a4:	af00      	add	r7, sp, #0
 80202a6:	60f8      	str	r0, [r7, #12]
 80202a8:	60b9      	str	r1, [r7, #8]
 80202aa:	607a      	str	r2, [r7, #4]
 80202ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80202ae:	68fb      	ldr	r3, [r7, #12]
 80202b0:	6a1b      	ldr	r3, [r3, #32]
 80202b2:	f023 0201 	bic.w	r2, r3, #1
 80202b6:	68fb      	ldr	r3, [r7, #12]
 80202b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	699b      	ldr	r3, [r3, #24]
 80202be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80202c0:	68fb      	ldr	r3, [r7, #12]
 80202c2:	6a1b      	ldr	r3, [r3, #32]
 80202c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80202c6:	68fb      	ldr	r3, [r7, #12]
 80202c8:	4a2c      	ldr	r2, [pc, #176]	; (802037c <TIM_TI1_SetConfig+0xdc>)
 80202ca:	4293      	cmp	r3, r2
 80202cc:	d023      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 80202ce:	68fb      	ldr	r3, [r7, #12]
 80202d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80202d4:	d01f      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 80202d6:	68fb      	ldr	r3, [r7, #12]
 80202d8:	4a29      	ldr	r2, [pc, #164]	; (8020380 <TIM_TI1_SetConfig+0xe0>)
 80202da:	4293      	cmp	r3, r2
 80202dc:	d01b      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 80202de:	68fb      	ldr	r3, [r7, #12]
 80202e0:	4a28      	ldr	r2, [pc, #160]	; (8020384 <TIM_TI1_SetConfig+0xe4>)
 80202e2:	4293      	cmp	r3, r2
 80202e4:	d017      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 80202e6:	68fb      	ldr	r3, [r7, #12]
 80202e8:	4a27      	ldr	r2, [pc, #156]	; (8020388 <TIM_TI1_SetConfig+0xe8>)
 80202ea:	4293      	cmp	r3, r2
 80202ec:	d013      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 80202ee:	68fb      	ldr	r3, [r7, #12]
 80202f0:	4a26      	ldr	r2, [pc, #152]	; (802038c <TIM_TI1_SetConfig+0xec>)
 80202f2:	4293      	cmp	r3, r2
 80202f4:	d00f      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 80202f6:	68fb      	ldr	r3, [r7, #12]
 80202f8:	4a25      	ldr	r2, [pc, #148]	; (8020390 <TIM_TI1_SetConfig+0xf0>)
 80202fa:	4293      	cmp	r3, r2
 80202fc:	d00b      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 80202fe:	68fb      	ldr	r3, [r7, #12]
 8020300:	4a24      	ldr	r2, [pc, #144]	; (8020394 <TIM_TI1_SetConfig+0xf4>)
 8020302:	4293      	cmp	r3, r2
 8020304:	d007      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 8020306:	68fb      	ldr	r3, [r7, #12]
 8020308:	4a23      	ldr	r2, [pc, #140]	; (8020398 <TIM_TI1_SetConfig+0xf8>)
 802030a:	4293      	cmp	r3, r2
 802030c:	d003      	beq.n	8020316 <TIM_TI1_SetConfig+0x76>
 802030e:	68fb      	ldr	r3, [r7, #12]
 8020310:	4a22      	ldr	r2, [pc, #136]	; (802039c <TIM_TI1_SetConfig+0xfc>)
 8020312:	4293      	cmp	r3, r2
 8020314:	d101      	bne.n	802031a <TIM_TI1_SetConfig+0x7a>
 8020316:	2301      	movs	r3, #1
 8020318:	e000      	b.n	802031c <TIM_TI1_SetConfig+0x7c>
 802031a:	2300      	movs	r3, #0
 802031c:	2b00      	cmp	r3, #0
 802031e:	d008      	beq.n	8020332 <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8020320:	697b      	ldr	r3, [r7, #20]
 8020322:	f023 0303 	bic.w	r3, r3, #3
 8020326:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8020328:	697a      	ldr	r2, [r7, #20]
 802032a:	687b      	ldr	r3, [r7, #4]
 802032c:	4313      	orrs	r3, r2
 802032e:	617b      	str	r3, [r7, #20]
 8020330:	e003      	b.n	802033a <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8020332:	697b      	ldr	r3, [r7, #20]
 8020334:	f043 0301 	orr.w	r3, r3, #1
 8020338:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 802033a:	697b      	ldr	r3, [r7, #20]
 802033c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8020342:	683b      	ldr	r3, [r7, #0]
 8020344:	011b      	lsls	r3, r3, #4
 8020346:	b2db      	uxtb	r3, r3
 8020348:	697a      	ldr	r2, [r7, #20]
 802034a:	4313      	orrs	r3, r2
 802034c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 802034e:	693b      	ldr	r3, [r7, #16]
 8020350:	f023 030a 	bic.w	r3, r3, #10
 8020354:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8020356:	68bb      	ldr	r3, [r7, #8]
 8020358:	f003 030a 	and.w	r3, r3, #10
 802035c:	693a      	ldr	r2, [r7, #16]
 802035e:	4313      	orrs	r3, r2
 8020360:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8020362:	68fb      	ldr	r3, [r7, #12]
 8020364:	697a      	ldr	r2, [r7, #20]
 8020366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020368:	68fb      	ldr	r3, [r7, #12]
 802036a:	693a      	ldr	r2, [r7, #16]
 802036c:	621a      	str	r2, [r3, #32]
}
 802036e:	bf00      	nop
 8020370:	371c      	adds	r7, #28
 8020372:	46bd      	mov	sp, r7
 8020374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020378:	4770      	bx	lr
 802037a:	bf00      	nop
 802037c:	40010000 	.word	0x40010000
 8020380:	40000400 	.word	0x40000400
 8020384:	40000800 	.word	0x40000800
 8020388:	40000c00 	.word	0x40000c00
 802038c:	40010400 	.word	0x40010400
 8020390:	40001800 	.word	0x40001800
 8020394:	40014000 	.word	0x40014000
 8020398:	4000e000 	.word	0x4000e000
 802039c:	4000e400 	.word	0x4000e400

080203a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80203a0:	b480      	push	{r7}
 80203a2:	b087      	sub	sp, #28
 80203a4:	af00      	add	r7, sp, #0
 80203a6:	60f8      	str	r0, [r7, #12]
 80203a8:	60b9      	str	r1, [r7, #8]
 80203aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	6a1b      	ldr	r3, [r3, #32]
 80203b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80203b2:	68fb      	ldr	r3, [r7, #12]
 80203b4:	6a1b      	ldr	r3, [r3, #32]
 80203b6:	f023 0201 	bic.w	r2, r3, #1
 80203ba:	68fb      	ldr	r3, [r7, #12]
 80203bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80203be:	68fb      	ldr	r3, [r7, #12]
 80203c0:	699b      	ldr	r3, [r3, #24]
 80203c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80203c4:	693b      	ldr	r3, [r7, #16]
 80203c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80203ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80203cc:	687b      	ldr	r3, [r7, #4]
 80203ce:	011b      	lsls	r3, r3, #4
 80203d0:	693a      	ldr	r2, [r7, #16]
 80203d2:	4313      	orrs	r3, r2
 80203d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80203d6:	697b      	ldr	r3, [r7, #20]
 80203d8:	f023 030a 	bic.w	r3, r3, #10
 80203dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80203de:	697a      	ldr	r2, [r7, #20]
 80203e0:	68bb      	ldr	r3, [r7, #8]
 80203e2:	4313      	orrs	r3, r2
 80203e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80203e6:	68fb      	ldr	r3, [r7, #12]
 80203e8:	693a      	ldr	r2, [r7, #16]
 80203ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80203ec:	68fb      	ldr	r3, [r7, #12]
 80203ee:	697a      	ldr	r2, [r7, #20]
 80203f0:	621a      	str	r2, [r3, #32]
}
 80203f2:	bf00      	nop
 80203f4:	371c      	adds	r7, #28
 80203f6:	46bd      	mov	sp, r7
 80203f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203fc:	4770      	bx	lr

080203fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80203fe:	b480      	push	{r7}
 8020400:	b087      	sub	sp, #28
 8020402:	af00      	add	r7, sp, #0
 8020404:	60f8      	str	r0, [r7, #12]
 8020406:	60b9      	str	r1, [r7, #8]
 8020408:	607a      	str	r2, [r7, #4]
 802040a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 802040c:	68fb      	ldr	r3, [r7, #12]
 802040e:	6a1b      	ldr	r3, [r3, #32]
 8020410:	f023 0210 	bic.w	r2, r3, #16
 8020414:	68fb      	ldr	r3, [r7, #12]
 8020416:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020418:	68fb      	ldr	r3, [r7, #12]
 802041a:	699b      	ldr	r3, [r3, #24]
 802041c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802041e:	68fb      	ldr	r3, [r7, #12]
 8020420:	6a1b      	ldr	r3, [r3, #32]
 8020422:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8020424:	697b      	ldr	r3, [r7, #20]
 8020426:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802042a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	021b      	lsls	r3, r3, #8
 8020430:	697a      	ldr	r2, [r7, #20]
 8020432:	4313      	orrs	r3, r2
 8020434:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020436:	697b      	ldr	r3, [r7, #20]
 8020438:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802043c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 802043e:	683b      	ldr	r3, [r7, #0]
 8020440:	031b      	lsls	r3, r3, #12
 8020442:	b29b      	uxth	r3, r3
 8020444:	697a      	ldr	r2, [r7, #20]
 8020446:	4313      	orrs	r3, r2
 8020448:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 802044a:	693b      	ldr	r3, [r7, #16]
 802044c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8020450:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8020452:	68bb      	ldr	r3, [r7, #8]
 8020454:	011b      	lsls	r3, r3, #4
 8020456:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 802045a:	693a      	ldr	r2, [r7, #16]
 802045c:	4313      	orrs	r3, r2
 802045e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8020460:	68fb      	ldr	r3, [r7, #12]
 8020462:	697a      	ldr	r2, [r7, #20]
 8020464:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020466:	68fb      	ldr	r3, [r7, #12]
 8020468:	693a      	ldr	r2, [r7, #16]
 802046a:	621a      	str	r2, [r3, #32]
}
 802046c:	bf00      	nop
 802046e:	371c      	adds	r7, #28
 8020470:	46bd      	mov	sp, r7
 8020472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020476:	4770      	bx	lr

08020478 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020478:	b480      	push	{r7}
 802047a:	b087      	sub	sp, #28
 802047c:	af00      	add	r7, sp, #0
 802047e:	60f8      	str	r0, [r7, #12]
 8020480:	60b9      	str	r1, [r7, #8]
 8020482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020484:	68fb      	ldr	r3, [r7, #12]
 8020486:	6a1b      	ldr	r3, [r3, #32]
 8020488:	f023 0210 	bic.w	r2, r3, #16
 802048c:	68fb      	ldr	r3, [r7, #12]
 802048e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020490:	68fb      	ldr	r3, [r7, #12]
 8020492:	699b      	ldr	r3, [r3, #24]
 8020494:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020496:	68fb      	ldr	r3, [r7, #12]
 8020498:	6a1b      	ldr	r3, [r3, #32]
 802049a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 802049c:	697b      	ldr	r3, [r7, #20]
 802049e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80204a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80204a4:	687b      	ldr	r3, [r7, #4]
 80204a6:	031b      	lsls	r3, r3, #12
 80204a8:	697a      	ldr	r2, [r7, #20]
 80204aa:	4313      	orrs	r3, r2
 80204ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80204ae:	693b      	ldr	r3, [r7, #16]
 80204b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80204b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80204b6:	68bb      	ldr	r3, [r7, #8]
 80204b8:	011b      	lsls	r3, r3, #4
 80204ba:	693a      	ldr	r2, [r7, #16]
 80204bc:	4313      	orrs	r3, r2
 80204be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80204c0:	68fb      	ldr	r3, [r7, #12]
 80204c2:	697a      	ldr	r2, [r7, #20]
 80204c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80204c6:	68fb      	ldr	r3, [r7, #12]
 80204c8:	693a      	ldr	r2, [r7, #16]
 80204ca:	621a      	str	r2, [r3, #32]
}
 80204cc:	bf00      	nop
 80204ce:	371c      	adds	r7, #28
 80204d0:	46bd      	mov	sp, r7
 80204d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204d6:	4770      	bx	lr

080204d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80204d8:	b480      	push	{r7}
 80204da:	b087      	sub	sp, #28
 80204dc:	af00      	add	r7, sp, #0
 80204de:	60f8      	str	r0, [r7, #12]
 80204e0:	60b9      	str	r1, [r7, #8]
 80204e2:	607a      	str	r2, [r7, #4]
 80204e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80204e6:	68fb      	ldr	r3, [r7, #12]
 80204e8:	6a1b      	ldr	r3, [r3, #32]
 80204ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80204ee:	68fb      	ldr	r3, [r7, #12]
 80204f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80204f2:	68fb      	ldr	r3, [r7, #12]
 80204f4:	69db      	ldr	r3, [r3, #28]
 80204f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80204f8:	68fb      	ldr	r3, [r7, #12]
 80204fa:	6a1b      	ldr	r3, [r3, #32]
 80204fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80204fe:	697b      	ldr	r3, [r7, #20]
 8020500:	f023 0303 	bic.w	r3, r3, #3
 8020504:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8020506:	697a      	ldr	r2, [r7, #20]
 8020508:	687b      	ldr	r3, [r7, #4]
 802050a:	4313      	orrs	r3, r2
 802050c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 802050e:	697b      	ldr	r3, [r7, #20]
 8020510:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020514:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8020516:	683b      	ldr	r3, [r7, #0]
 8020518:	011b      	lsls	r3, r3, #4
 802051a:	b2db      	uxtb	r3, r3
 802051c:	697a      	ldr	r2, [r7, #20]
 802051e:	4313      	orrs	r3, r2
 8020520:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8020522:	693b      	ldr	r3, [r7, #16]
 8020524:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8020528:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 802052a:	68bb      	ldr	r3, [r7, #8]
 802052c:	021b      	lsls	r3, r3, #8
 802052e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8020532:	693a      	ldr	r2, [r7, #16]
 8020534:	4313      	orrs	r3, r2
 8020536:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8020538:	68fb      	ldr	r3, [r7, #12]
 802053a:	697a      	ldr	r2, [r7, #20]
 802053c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 802053e:	68fb      	ldr	r3, [r7, #12]
 8020540:	693a      	ldr	r2, [r7, #16]
 8020542:	621a      	str	r2, [r3, #32]
}
 8020544:	bf00      	nop
 8020546:	371c      	adds	r7, #28
 8020548:	46bd      	mov	sp, r7
 802054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802054e:	4770      	bx	lr

08020550 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8020550:	b480      	push	{r7}
 8020552:	b087      	sub	sp, #28
 8020554:	af00      	add	r7, sp, #0
 8020556:	60f8      	str	r0, [r7, #12]
 8020558:	60b9      	str	r1, [r7, #8]
 802055a:	607a      	str	r2, [r7, #4]
 802055c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802055e:	68fb      	ldr	r3, [r7, #12]
 8020560:	6a1b      	ldr	r3, [r3, #32]
 8020562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020566:	68fb      	ldr	r3, [r7, #12]
 8020568:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 802056a:	68fb      	ldr	r3, [r7, #12]
 802056c:	69db      	ldr	r3, [r3, #28]
 802056e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020570:	68fb      	ldr	r3, [r7, #12]
 8020572:	6a1b      	ldr	r3, [r3, #32]
 8020574:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8020576:	697b      	ldr	r3, [r7, #20]
 8020578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802057c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 802057e:	687b      	ldr	r3, [r7, #4]
 8020580:	021b      	lsls	r3, r3, #8
 8020582:	697a      	ldr	r2, [r7, #20]
 8020584:	4313      	orrs	r3, r2
 8020586:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8020588:	697b      	ldr	r3, [r7, #20]
 802058a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802058e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8020590:	683b      	ldr	r3, [r7, #0]
 8020592:	031b      	lsls	r3, r3, #12
 8020594:	b29b      	uxth	r3, r3
 8020596:	697a      	ldr	r2, [r7, #20]
 8020598:	4313      	orrs	r3, r2
 802059a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 802059c:	693b      	ldr	r3, [r7, #16]
 802059e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80205a2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80205a4:	68bb      	ldr	r3, [r7, #8]
 80205a6:	031b      	lsls	r3, r3, #12
 80205a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80205ac:	693a      	ldr	r2, [r7, #16]
 80205ae:	4313      	orrs	r3, r2
 80205b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80205b2:	68fb      	ldr	r3, [r7, #12]
 80205b4:	697a      	ldr	r2, [r7, #20]
 80205b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80205b8:	68fb      	ldr	r3, [r7, #12]
 80205ba:	693a      	ldr	r2, [r7, #16]
 80205bc:	621a      	str	r2, [r3, #32]
}
 80205be:	bf00      	nop
 80205c0:	371c      	adds	r7, #28
 80205c2:	46bd      	mov	sp, r7
 80205c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80205c8:	4770      	bx	lr
	...

080205cc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80205cc:	b480      	push	{r7}
 80205ce:	b085      	sub	sp, #20
 80205d0:	af00      	add	r7, sp, #0
 80205d2:	6078      	str	r0, [r7, #4]
 80205d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80205d6:	687b      	ldr	r3, [r7, #4]
 80205d8:	689b      	ldr	r3, [r3, #8]
 80205da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80205dc:	68fa      	ldr	r2, [r7, #12]
 80205de:	4b09      	ldr	r3, [pc, #36]	; (8020604 <TIM_ITRx_SetConfig+0x38>)
 80205e0:	4013      	ands	r3, r2
 80205e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80205e4:	683a      	ldr	r2, [r7, #0]
 80205e6:	68fb      	ldr	r3, [r7, #12]
 80205e8:	4313      	orrs	r3, r2
 80205ea:	f043 0307 	orr.w	r3, r3, #7
 80205ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80205f0:	687b      	ldr	r3, [r7, #4]
 80205f2:	68fa      	ldr	r2, [r7, #12]
 80205f4:	609a      	str	r2, [r3, #8]
}
 80205f6:	bf00      	nop
 80205f8:	3714      	adds	r7, #20
 80205fa:	46bd      	mov	sp, r7
 80205fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020600:	4770      	bx	lr
 8020602:	bf00      	nop
 8020604:	ffcfff8f 	.word	0xffcfff8f

08020608 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020608:	b480      	push	{r7}
 802060a:	b087      	sub	sp, #28
 802060c:	af00      	add	r7, sp, #0
 802060e:	60f8      	str	r0, [r7, #12]
 8020610:	60b9      	str	r1, [r7, #8]
 8020612:	607a      	str	r2, [r7, #4]
 8020614:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020616:	68fb      	ldr	r3, [r7, #12]
 8020618:	689b      	ldr	r3, [r3, #8]
 802061a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 802061c:	697b      	ldr	r3, [r7, #20]
 802061e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8020622:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020624:	683b      	ldr	r3, [r7, #0]
 8020626:	021a      	lsls	r2, r3, #8
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	431a      	orrs	r2, r3
 802062c:	68bb      	ldr	r3, [r7, #8]
 802062e:	4313      	orrs	r3, r2
 8020630:	697a      	ldr	r2, [r7, #20]
 8020632:	4313      	orrs	r3, r2
 8020634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020636:	68fb      	ldr	r3, [r7, #12]
 8020638:	697a      	ldr	r2, [r7, #20]
 802063a:	609a      	str	r2, [r3, #8]
}
 802063c:	bf00      	nop
 802063e:	371c      	adds	r7, #28
 8020640:	46bd      	mov	sp, r7
 8020642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020646:	4770      	bx	lr

08020648 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020648:	b480      	push	{r7}
 802064a:	b087      	sub	sp, #28
 802064c:	af00      	add	r7, sp, #0
 802064e:	60f8      	str	r0, [r7, #12]
 8020650:	60b9      	str	r1, [r7, #8]
 8020652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020654:	68bb      	ldr	r3, [r7, #8]
 8020656:	f003 031f 	and.w	r3, r3, #31
 802065a:	2201      	movs	r2, #1
 802065c:	fa02 f303 	lsl.w	r3, r2, r3
 8020660:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8020662:	68fb      	ldr	r3, [r7, #12]
 8020664:	6a1a      	ldr	r2, [r3, #32]
 8020666:	697b      	ldr	r3, [r7, #20]
 8020668:	43db      	mvns	r3, r3
 802066a:	401a      	ands	r2, r3
 802066c:	68fb      	ldr	r3, [r7, #12]
 802066e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8020670:	68fb      	ldr	r3, [r7, #12]
 8020672:	6a1a      	ldr	r2, [r3, #32]
 8020674:	68bb      	ldr	r3, [r7, #8]
 8020676:	f003 031f 	and.w	r3, r3, #31
 802067a:	6879      	ldr	r1, [r7, #4]
 802067c:	fa01 f303 	lsl.w	r3, r1, r3
 8020680:	431a      	orrs	r2, r3
 8020682:	68fb      	ldr	r3, [r7, #12]
 8020684:	621a      	str	r2, [r3, #32]
}
 8020686:	bf00      	nop
 8020688:	371c      	adds	r7, #28
 802068a:	46bd      	mov	sp, r7
 802068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020690:	4770      	bx	lr
	...

08020694 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020694:	b480      	push	{r7}
 8020696:	b085      	sub	sp, #20
 8020698:	af00      	add	r7, sp, #0
 802069a:	6078      	str	r0, [r7, #4]
 802069c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802069e:	687b      	ldr	r3, [r7, #4]
 80206a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80206a4:	2b01      	cmp	r3, #1
 80206a6:	d101      	bne.n	80206ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80206a8:	2302      	movs	r3, #2
 80206aa:	e077      	b.n	802079c <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80206ac:	687b      	ldr	r3, [r7, #4]
 80206ae:	2201      	movs	r2, #1
 80206b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	2202      	movs	r2, #2
 80206b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	681b      	ldr	r3, [r3, #0]
 80206c0:	685b      	ldr	r3, [r3, #4]
 80206c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80206c4:	687b      	ldr	r3, [r7, #4]
 80206c6:	681b      	ldr	r3, [r3, #0]
 80206c8:	689b      	ldr	r3, [r3, #8]
 80206ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80206cc:	687b      	ldr	r3, [r7, #4]
 80206ce:	681b      	ldr	r3, [r3, #0]
 80206d0:	4a35      	ldr	r2, [pc, #212]	; (80207a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80206d2:	4293      	cmp	r3, r2
 80206d4:	d004      	beq.n	80206e0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80206d6:	687b      	ldr	r3, [r7, #4]
 80206d8:	681b      	ldr	r3, [r3, #0]
 80206da:	4a34      	ldr	r2, [pc, #208]	; (80207ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80206dc:	4293      	cmp	r3, r2
 80206de:	d108      	bne.n	80206f2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80206e0:	68fb      	ldr	r3, [r7, #12]
 80206e2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80206e6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80206e8:	683b      	ldr	r3, [r7, #0]
 80206ea:	685b      	ldr	r3, [r3, #4]
 80206ec:	68fa      	ldr	r2, [r7, #12]
 80206ee:	4313      	orrs	r3, r2
 80206f0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80206f2:	68fb      	ldr	r3, [r7, #12]
 80206f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80206f8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80206fa:	683b      	ldr	r3, [r7, #0]
 80206fc:	681b      	ldr	r3, [r3, #0]
 80206fe:	68fa      	ldr	r2, [r7, #12]
 8020700:	4313      	orrs	r3, r2
 8020702:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020704:	687b      	ldr	r3, [r7, #4]
 8020706:	681b      	ldr	r3, [r3, #0]
 8020708:	68fa      	ldr	r2, [r7, #12]
 802070a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 802070c:	687b      	ldr	r3, [r7, #4]
 802070e:	681b      	ldr	r3, [r3, #0]
 8020710:	4a25      	ldr	r2, [pc, #148]	; (80207a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8020712:	4293      	cmp	r3, r2
 8020714:	d02c      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020716:	687b      	ldr	r3, [r7, #4]
 8020718:	681b      	ldr	r3, [r3, #0]
 802071a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802071e:	d027      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020720:	687b      	ldr	r3, [r7, #4]
 8020722:	681b      	ldr	r3, [r3, #0]
 8020724:	4a22      	ldr	r2, [pc, #136]	; (80207b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8020726:	4293      	cmp	r3, r2
 8020728:	d022      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802072a:	687b      	ldr	r3, [r7, #4]
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	4a21      	ldr	r2, [pc, #132]	; (80207b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8020730:	4293      	cmp	r3, r2
 8020732:	d01d      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020734:	687b      	ldr	r3, [r7, #4]
 8020736:	681b      	ldr	r3, [r3, #0]
 8020738:	4a1f      	ldr	r2, [pc, #124]	; (80207b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 802073a:	4293      	cmp	r3, r2
 802073c:	d018      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802073e:	687b      	ldr	r3, [r7, #4]
 8020740:	681b      	ldr	r3, [r3, #0]
 8020742:	4a1a      	ldr	r2, [pc, #104]	; (80207ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020744:	4293      	cmp	r3, r2
 8020746:	d013      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020748:	687b      	ldr	r3, [r7, #4]
 802074a:	681b      	ldr	r3, [r3, #0]
 802074c:	4a1b      	ldr	r2, [pc, #108]	; (80207bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 802074e:	4293      	cmp	r3, r2
 8020750:	d00e      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020752:	687b      	ldr	r3, [r7, #4]
 8020754:	681b      	ldr	r3, [r3, #0]
 8020756:	4a1a      	ldr	r2, [pc, #104]	; (80207c0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8020758:	4293      	cmp	r3, r2
 802075a:	d009      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	4a18      	ldr	r2, [pc, #96]	; (80207c4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8020762:	4293      	cmp	r3, r2
 8020764:	d004      	beq.n	8020770 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020766:	687b      	ldr	r3, [r7, #4]
 8020768:	681b      	ldr	r3, [r3, #0]
 802076a:	4a17      	ldr	r2, [pc, #92]	; (80207c8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 802076c:	4293      	cmp	r3, r2
 802076e:	d10c      	bne.n	802078a <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8020770:	68bb      	ldr	r3, [r7, #8]
 8020772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020776:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020778:	683b      	ldr	r3, [r7, #0]
 802077a:	689b      	ldr	r3, [r3, #8]
 802077c:	68ba      	ldr	r2, [r7, #8]
 802077e:	4313      	orrs	r3, r2
 8020780:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8020782:	687b      	ldr	r3, [r7, #4]
 8020784:	681b      	ldr	r3, [r3, #0]
 8020786:	68ba      	ldr	r2, [r7, #8]
 8020788:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 802078a:	687b      	ldr	r3, [r7, #4]
 802078c:	2201      	movs	r2, #1
 802078e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8020792:	687b      	ldr	r3, [r7, #4]
 8020794:	2200      	movs	r2, #0
 8020796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 802079a:	2300      	movs	r3, #0
}
 802079c:	4618      	mov	r0, r3
 802079e:	3714      	adds	r7, #20
 80207a0:	46bd      	mov	sp, r7
 80207a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80207a6:	4770      	bx	lr
 80207a8:	40010000 	.word	0x40010000
 80207ac:	40010400 	.word	0x40010400
 80207b0:	40000400 	.word	0x40000400
 80207b4:	40000800 	.word	0x40000800
 80207b8:	40000c00 	.word	0x40000c00
 80207bc:	40001800 	.word	0x40001800
 80207c0:	40014000 	.word	0x40014000
 80207c4:	4000e000 	.word	0x4000e000
 80207c8:	4000e400 	.word	0x4000e400

080207cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80207cc:	b480      	push	{r7}
 80207ce:	b085      	sub	sp, #20
 80207d0:	af00      	add	r7, sp, #0
 80207d2:	6078      	str	r0, [r7, #4]
 80207d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80207d6:	2300      	movs	r3, #0
 80207d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80207da:	687b      	ldr	r3, [r7, #4]
 80207dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80207e0:	2b01      	cmp	r3, #1
 80207e2:	d101      	bne.n	80207e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80207e4:	2302      	movs	r3, #2
 80207e6:	e087      	b.n	80208f8 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80207e8:	687b      	ldr	r3, [r7, #4]
 80207ea:	2201      	movs	r2, #1
 80207ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80207f0:	68fb      	ldr	r3, [r7, #12]
 80207f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80207f6:	683b      	ldr	r3, [r7, #0]
 80207f8:	68db      	ldr	r3, [r3, #12]
 80207fa:	4313      	orrs	r3, r2
 80207fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80207fe:	68fb      	ldr	r3, [r7, #12]
 8020800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8020804:	683b      	ldr	r3, [r7, #0]
 8020806:	689b      	ldr	r3, [r3, #8]
 8020808:	4313      	orrs	r3, r2
 802080a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 802080c:	68fb      	ldr	r3, [r7, #12]
 802080e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8020812:	683b      	ldr	r3, [r7, #0]
 8020814:	685b      	ldr	r3, [r3, #4]
 8020816:	4313      	orrs	r3, r2
 8020818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8020820:	683b      	ldr	r3, [r7, #0]
 8020822:	681b      	ldr	r3, [r3, #0]
 8020824:	4313      	orrs	r3, r2
 8020826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8020828:	68fb      	ldr	r3, [r7, #12]
 802082a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802082e:	683b      	ldr	r3, [r7, #0]
 8020830:	691b      	ldr	r3, [r3, #16]
 8020832:	4313      	orrs	r3, r2
 8020834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8020836:	68fb      	ldr	r3, [r7, #12]
 8020838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 802083c:	683b      	ldr	r3, [r7, #0]
 802083e:	695b      	ldr	r3, [r3, #20]
 8020840:	4313      	orrs	r3, r2
 8020842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8020844:	68fb      	ldr	r3, [r7, #12]
 8020846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 802084a:	683b      	ldr	r3, [r7, #0]
 802084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802084e:	4313      	orrs	r3, r2
 8020850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8020852:	68fb      	ldr	r3, [r7, #12]
 8020854:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8020858:	683b      	ldr	r3, [r7, #0]
 802085a:	699b      	ldr	r3, [r3, #24]
 802085c:	041b      	lsls	r3, r3, #16
 802085e:	4313      	orrs	r3, r2
 8020860:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8020862:	687b      	ldr	r3, [r7, #4]
 8020864:	681b      	ldr	r3, [r3, #0]
 8020866:	4a27      	ldr	r2, [pc, #156]	; (8020904 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020868:	4293      	cmp	r3, r2
 802086a:	d004      	beq.n	8020876 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 802086c:	687b      	ldr	r3, [r7, #4]
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	4a25      	ldr	r2, [pc, #148]	; (8020908 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020872:	4293      	cmp	r3, r2
 8020874:	d106      	bne.n	8020884 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8020876:	68fb      	ldr	r3, [r7, #12]
 8020878:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 802087c:	683b      	ldr	r3, [r7, #0]
 802087e:	69db      	ldr	r3, [r3, #28]
 8020880:	4313      	orrs	r3, r2
 8020882:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	681b      	ldr	r3, [r3, #0]
 8020888:	4a1e      	ldr	r2, [pc, #120]	; (8020904 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 802088a:	4293      	cmp	r3, r2
 802088c:	d004      	beq.n	8020898 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 802088e:	687b      	ldr	r3, [r7, #4]
 8020890:	681b      	ldr	r3, [r3, #0]
 8020892:	4a1d      	ldr	r2, [pc, #116]	; (8020908 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020894:	4293      	cmp	r3, r2
 8020896:	d126      	bne.n	80208e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8020898:	68fb      	ldr	r3, [r7, #12]
 802089a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 802089e:	683b      	ldr	r3, [r7, #0]
 80208a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80208a2:	051b      	lsls	r3, r3, #20
 80208a4:	4313      	orrs	r3, r2
 80208a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80208a8:	68fb      	ldr	r3, [r7, #12]
 80208aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80208ae:	683b      	ldr	r3, [r7, #0]
 80208b0:	6a1b      	ldr	r3, [r3, #32]
 80208b2:	4313      	orrs	r3, r2
 80208b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80208b6:	68fb      	ldr	r3, [r7, #12]
 80208b8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80208bc:	683b      	ldr	r3, [r7, #0]
 80208be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80208c0:	4313      	orrs	r3, r2
 80208c2:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80208c4:	687b      	ldr	r3, [r7, #4]
 80208c6:	681b      	ldr	r3, [r3, #0]
 80208c8:	4a0e      	ldr	r2, [pc, #56]	; (8020904 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80208ca:	4293      	cmp	r3, r2
 80208cc:	d004      	beq.n	80208d8 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80208ce:	687b      	ldr	r3, [r7, #4]
 80208d0:	681b      	ldr	r3, [r3, #0]
 80208d2:	4a0d      	ldr	r2, [pc, #52]	; (8020908 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80208d4:	4293      	cmp	r3, r2
 80208d6:	d106      	bne.n	80208e6 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80208d8:	68fb      	ldr	r3, [r7, #12]
 80208da:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80208de:	683b      	ldr	r3, [r7, #0]
 80208e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80208e2:	4313      	orrs	r3, r2
 80208e4:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80208e6:	687b      	ldr	r3, [r7, #4]
 80208e8:	681b      	ldr	r3, [r3, #0]
 80208ea:	68fa      	ldr	r2, [r7, #12]
 80208ec:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80208ee:	687b      	ldr	r3, [r7, #4]
 80208f0:	2200      	movs	r2, #0
 80208f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80208f6:	2300      	movs	r3, #0
}
 80208f8:	4618      	mov	r0, r3
 80208fa:	3714      	adds	r7, #20
 80208fc:	46bd      	mov	sp, r7
 80208fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020902:	4770      	bx	lr
 8020904:	40010000 	.word	0x40010000
 8020908:	40010400 	.word	0x40010400

0802090c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 802090c:	b480      	push	{r7}
 802090e:	b083      	sub	sp, #12
 8020910:	af00      	add	r7, sp, #0
 8020912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020914:	bf00      	nop
 8020916:	370c      	adds	r7, #12
 8020918:	46bd      	mov	sp, r7
 802091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802091e:	4770      	bx	lr

08020920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8020920:	b480      	push	{r7}
 8020922:	b083      	sub	sp, #12
 8020924:	af00      	add	r7, sp, #0
 8020926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020928:	bf00      	nop
 802092a:	370c      	adds	r7, #12
 802092c:	46bd      	mov	sp, r7
 802092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020932:	4770      	bx	lr

08020934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8020934:	b480      	push	{r7}
 8020936:	b083      	sub	sp, #12
 8020938:	af00      	add	r7, sp, #0
 802093a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 802093c:	bf00      	nop
 802093e:	370c      	adds	r7, #12
 8020940:	46bd      	mov	sp, r7
 8020942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020946:	4770      	bx	lr

08020948 <_ZdlPv>:
 8020948:	f000 b926 	b.w	8020b98 <free>

0802094c <_ZdlPvj>:
 802094c:	f7ff bffc 	b.w	8020948 <_ZdlPv>

08020950 <_Znwj>:
 8020950:	2801      	cmp	r0, #1
 8020952:	bf38      	it	cc
 8020954:	2001      	movcc	r0, #1
 8020956:	b510      	push	{r4, lr}
 8020958:	4604      	mov	r4, r0
 802095a:	4620      	mov	r0, r4
 802095c:	f000 f914 	bl	8020b88 <malloc>
 8020960:	b930      	cbnz	r0, 8020970 <_Znwj+0x20>
 8020962:	f000 f8d7 	bl	8020b14 <_ZSt15get_new_handlerv>
 8020966:	b908      	cbnz	r0, 802096c <_Znwj+0x1c>
 8020968:	f000 f8dc 	bl	8020b24 <abort>
 802096c:	4780      	blx	r0
 802096e:	e7f4      	b.n	802095a <_Znwj+0xa>
 8020970:	bd10      	pop	{r4, pc}

08020972 <__cxa_pure_virtual>:
 8020972:	b508      	push	{r3, lr}
 8020974:	f000 f8c8 	bl	8020b08 <_ZSt9terminatev>

08020978 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8020978:	68c3      	ldr	r3, [r0, #12]
 802097a:	689a      	ldr	r2, [r3, #8]
 802097c:	60c2      	str	r2, [r0, #12]
 802097e:	b510      	push	{r4, lr}
 8020980:	b102      	cbz	r2, 8020984 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 8020982:	6050      	str	r0, [r2, #4]
 8020984:	6842      	ldr	r2, [r0, #4]
 8020986:	605a      	str	r2, [r3, #4]
 8020988:	680c      	ldr	r4, [r1, #0]
 802098a:	4284      	cmp	r4, r0
 802098c:	d103      	bne.n	8020996 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 802098e:	600b      	str	r3, [r1, #0]
 8020990:	6098      	str	r0, [r3, #8]
 8020992:	6043      	str	r3, [r0, #4]
 8020994:	bd10      	pop	{r4, pc}
 8020996:	6891      	ldr	r1, [r2, #8]
 8020998:	4281      	cmp	r1, r0
 802099a:	bf0c      	ite	eq
 802099c:	6093      	streq	r3, [r2, #8]
 802099e:	60d3      	strne	r3, [r2, #12]
 80209a0:	e7f6      	b.n	8020990 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

080209a2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 80209a2:	6883      	ldr	r3, [r0, #8]
 80209a4:	68da      	ldr	r2, [r3, #12]
 80209a6:	6082      	str	r2, [r0, #8]
 80209a8:	b510      	push	{r4, lr}
 80209aa:	b102      	cbz	r2, 80209ae <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80209ac:	6050      	str	r0, [r2, #4]
 80209ae:	6842      	ldr	r2, [r0, #4]
 80209b0:	605a      	str	r2, [r3, #4]
 80209b2:	680c      	ldr	r4, [r1, #0]
 80209b4:	4284      	cmp	r4, r0
 80209b6:	d103      	bne.n	80209c0 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80209b8:	600b      	str	r3, [r1, #0]
 80209ba:	60d8      	str	r0, [r3, #12]
 80209bc:	6043      	str	r3, [r0, #4]
 80209be:	bd10      	pop	{r4, pc}
 80209c0:	68d1      	ldr	r1, [r2, #12]
 80209c2:	4281      	cmp	r1, r0
 80209c4:	bf0c      	ite	eq
 80209c6:	60d3      	streq	r3, [r2, #12]
 80209c8:	6093      	strne	r3, [r2, #8]
 80209ca:	e7f6      	b.n	80209ba <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080209cc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80209cc:	68c3      	ldr	r3, [r0, #12]
 80209ce:	b123      	cbz	r3, 80209da <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80209d0:	4618      	mov	r0, r3
 80209d2:	689b      	ldr	r3, [r3, #8]
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d1fb      	bne.n	80209d0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80209d8:	4770      	bx	lr
 80209da:	6843      	ldr	r3, [r0, #4]
 80209dc:	68da      	ldr	r2, [r3, #12]
 80209de:	4282      	cmp	r2, r0
 80209e0:	d102      	bne.n	80209e8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80209e2:	4618      	mov	r0, r3
 80209e4:	685b      	ldr	r3, [r3, #4]
 80209e6:	e7f9      	b.n	80209dc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80209e8:	68c2      	ldr	r2, [r0, #12]
 80209ea:	4293      	cmp	r3, r2
 80209ec:	bf18      	it	ne
 80209ee:	4618      	movne	r0, r3
 80209f0:	4770      	bx	lr

080209f2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80209f2:	7803      	ldrb	r3, [r0, #0]
 80209f4:	b933      	cbnz	r3, 8020a04 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80209f6:	6843      	ldr	r3, [r0, #4]
 80209f8:	685b      	ldr	r3, [r3, #4]
 80209fa:	4283      	cmp	r3, r0
 80209fc:	d102      	bne.n	8020a04 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80209fe:	68db      	ldr	r3, [r3, #12]
 8020a00:	4618      	mov	r0, r3
 8020a02:	4770      	bx	lr
 8020a04:	6882      	ldr	r2, [r0, #8]
 8020a06:	b122      	cbz	r2, 8020a12 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8020a08:	4613      	mov	r3, r2
 8020a0a:	68d2      	ldr	r2, [r2, #12]
 8020a0c:	2a00      	cmp	r2, #0
 8020a0e:	d1fb      	bne.n	8020a08 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 8020a10:	e7f6      	b.n	8020a00 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8020a12:	6843      	ldr	r3, [r0, #4]
 8020a14:	689a      	ldr	r2, [r3, #8]
 8020a16:	4282      	cmp	r2, r0
 8020a18:	d1f2      	bne.n	8020a00 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8020a1a:	4618      	mov	r0, r3
 8020a1c:	685b      	ldr	r3, [r3, #4]
 8020a1e:	e7f9      	b.n	8020a14 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

08020a20 <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 8020a20:	f7ff bfd4 	b.w	80209cc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08020a24 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8020a24:	f7ff bfe5 	b.w	80209f2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08020a28 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8020a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020a2c:	461e      	mov	r6, r3
 8020a2e:	f103 0804 	add.w	r8, r3, #4
 8020a32:	2300      	movs	r3, #0
 8020a34:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8020a38:	460c      	mov	r4, r1
 8020a3a:	604a      	str	r2, [r1, #4]
 8020a3c:	700b      	strb	r3, [r1, #0]
 8020a3e:	b300      	cbz	r0, 8020a82 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 8020a40:	4296      	cmp	r6, r2
 8020a42:	6091      	str	r1, [r2, #8]
 8020a44:	d118      	bne.n	8020a78 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8020a46:	6071      	str	r1, [r6, #4]
 8020a48:	60f4      	str	r4, [r6, #12]
 8020a4a:	2701      	movs	r7, #1
 8020a4c:	f04f 0900 	mov.w	r9, #0
 8020a50:	6873      	ldr	r3, [r6, #4]
 8020a52:	42a3      	cmp	r3, r4
 8020a54:	d03f      	beq.n	8020ad6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8020a56:	6860      	ldr	r0, [r4, #4]
 8020a58:	7802      	ldrb	r2, [r0, #0]
 8020a5a:	2a00      	cmp	r2, #0
 8020a5c:	d13b      	bne.n	8020ad6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8020a5e:	6845      	ldr	r5, [r0, #4]
 8020a60:	68ab      	ldr	r3, [r5, #8]
 8020a62:	4298      	cmp	r0, r3
 8020a64:	d123      	bne.n	8020aae <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8020a66:	68eb      	ldr	r3, [r5, #12]
 8020a68:	b183      	cbz	r3, 8020a8c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020a6a:	781a      	ldrb	r2, [r3, #0]
 8020a6c:	b972      	cbnz	r2, 8020a8c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020a6e:	7007      	strb	r7, [r0, #0]
 8020a70:	701f      	strb	r7, [r3, #0]
 8020a72:	702a      	strb	r2, [r5, #0]
 8020a74:	462c      	mov	r4, r5
 8020a76:	e7eb      	b.n	8020a50 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8020a78:	68b3      	ldr	r3, [r6, #8]
 8020a7a:	4293      	cmp	r3, r2
 8020a7c:	d1e5      	bne.n	8020a4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020a7e:	60b1      	str	r1, [r6, #8]
 8020a80:	e7e3      	b.n	8020a4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020a82:	60d1      	str	r1, [r2, #12]
 8020a84:	68f3      	ldr	r3, [r6, #12]
 8020a86:	4293      	cmp	r3, r2
 8020a88:	d1df      	bne.n	8020a4a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020a8a:	e7dd      	b.n	8020a48 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8020a8c:	68c3      	ldr	r3, [r0, #12]
 8020a8e:	42a3      	cmp	r3, r4
 8020a90:	d103      	bne.n	8020a9a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 8020a92:	4641      	mov	r1, r8
 8020a94:	f7ff ff70 	bl	8020978 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8020a98:	4604      	mov	r4, r0
 8020a9a:	6863      	ldr	r3, [r4, #4]
 8020a9c:	4641      	mov	r1, r8
 8020a9e:	701f      	strb	r7, [r3, #0]
 8020aa0:	4628      	mov	r0, r5
 8020aa2:	f885 9000 	strb.w	r9, [r5]
 8020aa6:	f7ff ff7c 	bl	80209a2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8020aaa:	4625      	mov	r5, r4
 8020aac:	e7e2      	b.n	8020a74 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 8020aae:	b113      	cbz	r3, 8020ab6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 8020ab0:	781a      	ldrb	r2, [r3, #0]
 8020ab2:	2a00      	cmp	r2, #0
 8020ab4:	d0db      	beq.n	8020a6e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 8020ab6:	6883      	ldr	r3, [r0, #8]
 8020ab8:	42a3      	cmp	r3, r4
 8020aba:	d103      	bne.n	8020ac4 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 8020abc:	4641      	mov	r1, r8
 8020abe:	f7ff ff70 	bl	80209a2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 8020ac2:	4604      	mov	r4, r0
 8020ac4:	6863      	ldr	r3, [r4, #4]
 8020ac6:	4641      	mov	r1, r8
 8020ac8:	701f      	strb	r7, [r3, #0]
 8020aca:	4628      	mov	r0, r5
 8020acc:	f885 9000 	strb.w	r9, [r5]
 8020ad0:	f7ff ff52 	bl	8020978 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8020ad4:	e7e9      	b.n	8020aaa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 8020ad6:	2201      	movs	r2, #1
 8020ad8:	701a      	strb	r2, [r3, #0]
 8020ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08020ade <_ZSt17__throw_bad_allocv>:
 8020ade:	b508      	push	{r3, lr}
 8020ae0:	f000 f820 	bl	8020b24 <abort>

08020ae4 <_ZSt20__throw_length_errorPKc>:
 8020ae4:	b508      	push	{r3, lr}
 8020ae6:	f000 f81d 	bl	8020b24 <abort>

08020aea <_ZSt25__throw_bad_function_callv>:
 8020aea:	b508      	push	{r3, lr}
 8020aec:	f000 f81a 	bl	8020b24 <abort>

08020af0 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8020af0:	b508      	push	{r3, lr}
 8020af2:	4780      	blx	r0
 8020af4:	f000 f816 	bl	8020b24 <abort>

08020af8 <_ZSt13get_terminatev>:
 8020af8:	4b02      	ldr	r3, [pc, #8]	; (8020b04 <_ZSt13get_terminatev+0xc>)
 8020afa:	6818      	ldr	r0, [r3, #0]
 8020afc:	f3bf 8f5b 	dmb	ish
 8020b00:	4770      	bx	lr
 8020b02:	bf00      	nop
 8020b04:	24000014 	.word	0x24000014

08020b08 <_ZSt9terminatev>:
 8020b08:	b508      	push	{r3, lr}
 8020b0a:	f7ff fff5 	bl	8020af8 <_ZSt13get_terminatev>
 8020b0e:	f7ff ffef 	bl	8020af0 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08020b14 <_ZSt15get_new_handlerv>:
 8020b14:	4b02      	ldr	r3, [pc, #8]	; (8020b20 <_ZSt15get_new_handlerv+0xc>)
 8020b16:	6818      	ldr	r0, [r3, #0]
 8020b18:	f3bf 8f5b 	dmb	ish
 8020b1c:	4770      	bx	lr
 8020b1e:	bf00      	nop
 8020b20:	24001208 	.word	0x24001208

08020b24 <abort>:
 8020b24:	b508      	push	{r3, lr}
 8020b26:	2006      	movs	r0, #6
 8020b28:	f000 f986 	bl	8020e38 <raise>
 8020b2c:	2001      	movs	r0, #1
 8020b2e:	f7f4 fa3f 	bl	8014fb0 <_exit>
	...

08020b34 <__errno>:
 8020b34:	4b01      	ldr	r3, [pc, #4]	; (8020b3c <__errno+0x8>)
 8020b36:	6818      	ldr	r0, [r3, #0]
 8020b38:	4770      	bx	lr
 8020b3a:	bf00      	nop
 8020b3c:	24000018 	.word	0x24000018

08020b40 <__libc_init_array>:
 8020b40:	b570      	push	{r4, r5, r6, lr}
 8020b42:	4d0d      	ldr	r5, [pc, #52]	; (8020b78 <__libc_init_array+0x38>)
 8020b44:	4c0d      	ldr	r4, [pc, #52]	; (8020b7c <__libc_init_array+0x3c>)
 8020b46:	1b64      	subs	r4, r4, r5
 8020b48:	10a4      	asrs	r4, r4, #2
 8020b4a:	2600      	movs	r6, #0
 8020b4c:	42a6      	cmp	r6, r4
 8020b4e:	d109      	bne.n	8020b64 <__libc_init_array+0x24>
 8020b50:	4d0b      	ldr	r5, [pc, #44]	; (8020b80 <__libc_init_array+0x40>)
 8020b52:	4c0c      	ldr	r4, [pc, #48]	; (8020b84 <__libc_init_array+0x44>)
 8020b54:	f000 f99a 	bl	8020e8c <_init>
 8020b58:	1b64      	subs	r4, r4, r5
 8020b5a:	10a4      	asrs	r4, r4, #2
 8020b5c:	2600      	movs	r6, #0
 8020b5e:	42a6      	cmp	r6, r4
 8020b60:	d105      	bne.n	8020b6e <__libc_init_array+0x2e>
 8020b62:	bd70      	pop	{r4, r5, r6, pc}
 8020b64:	f855 3b04 	ldr.w	r3, [r5], #4
 8020b68:	4798      	blx	r3
 8020b6a:	3601      	adds	r6, #1
 8020b6c:	e7ee      	b.n	8020b4c <__libc_init_array+0xc>
 8020b6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8020b72:	4798      	blx	r3
 8020b74:	3601      	adds	r6, #1
 8020b76:	e7f2      	b.n	8020b5e <__libc_init_array+0x1e>
 8020b78:	08021120 	.word	0x08021120
 8020b7c:	08021120 	.word	0x08021120
 8020b80:	08021120 	.word	0x08021120
 8020b84:	08021154 	.word	0x08021154

08020b88 <malloc>:
 8020b88:	4b02      	ldr	r3, [pc, #8]	; (8020b94 <malloc+0xc>)
 8020b8a:	4601      	mov	r1, r0
 8020b8c:	6818      	ldr	r0, [r3, #0]
 8020b8e:	f000 b8a7 	b.w	8020ce0 <_malloc_r>
 8020b92:	bf00      	nop
 8020b94:	24000018 	.word	0x24000018

08020b98 <free>:
 8020b98:	4b02      	ldr	r3, [pc, #8]	; (8020ba4 <free+0xc>)
 8020b9a:	4601      	mov	r1, r0
 8020b9c:	6818      	ldr	r0, [r3, #0]
 8020b9e:	f000 b833 	b.w	8020c08 <_free_r>
 8020ba2:	bf00      	nop
 8020ba4:	24000018 	.word	0x24000018

08020ba8 <memcpy>:
 8020ba8:	440a      	add	r2, r1
 8020baa:	4291      	cmp	r1, r2
 8020bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8020bb0:	d100      	bne.n	8020bb4 <memcpy+0xc>
 8020bb2:	4770      	bx	lr
 8020bb4:	b510      	push	{r4, lr}
 8020bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020bbe:	4291      	cmp	r1, r2
 8020bc0:	d1f9      	bne.n	8020bb6 <memcpy+0xe>
 8020bc2:	bd10      	pop	{r4, pc}

08020bc4 <memmove>:
 8020bc4:	4288      	cmp	r0, r1
 8020bc6:	b510      	push	{r4, lr}
 8020bc8:	eb01 0402 	add.w	r4, r1, r2
 8020bcc:	d902      	bls.n	8020bd4 <memmove+0x10>
 8020bce:	4284      	cmp	r4, r0
 8020bd0:	4623      	mov	r3, r4
 8020bd2:	d807      	bhi.n	8020be4 <memmove+0x20>
 8020bd4:	1e43      	subs	r3, r0, #1
 8020bd6:	42a1      	cmp	r1, r4
 8020bd8:	d008      	beq.n	8020bec <memmove+0x28>
 8020bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8020bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8020be2:	e7f8      	b.n	8020bd6 <memmove+0x12>
 8020be4:	4402      	add	r2, r0
 8020be6:	4601      	mov	r1, r0
 8020be8:	428a      	cmp	r2, r1
 8020bea:	d100      	bne.n	8020bee <memmove+0x2a>
 8020bec:	bd10      	pop	{r4, pc}
 8020bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8020bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8020bf6:	e7f7      	b.n	8020be8 <memmove+0x24>

08020bf8 <memset>:
 8020bf8:	4402      	add	r2, r0
 8020bfa:	4603      	mov	r3, r0
 8020bfc:	4293      	cmp	r3, r2
 8020bfe:	d100      	bne.n	8020c02 <memset+0xa>
 8020c00:	4770      	bx	lr
 8020c02:	f803 1b01 	strb.w	r1, [r3], #1
 8020c06:	e7f9      	b.n	8020bfc <memset+0x4>

08020c08 <_free_r>:
 8020c08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020c0a:	2900      	cmp	r1, #0
 8020c0c:	d044      	beq.n	8020c98 <_free_r+0x90>
 8020c0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8020c12:	9001      	str	r0, [sp, #4]
 8020c14:	2b00      	cmp	r3, #0
 8020c16:	f1a1 0404 	sub.w	r4, r1, #4
 8020c1a:	bfb8      	it	lt
 8020c1c:	18e4      	addlt	r4, r4, r3
 8020c1e:	f000 f927 	bl	8020e70 <__malloc_lock>
 8020c22:	4a1e      	ldr	r2, [pc, #120]	; (8020c9c <_free_r+0x94>)
 8020c24:	9801      	ldr	r0, [sp, #4]
 8020c26:	6813      	ldr	r3, [r2, #0]
 8020c28:	b933      	cbnz	r3, 8020c38 <_free_r+0x30>
 8020c2a:	6063      	str	r3, [r4, #4]
 8020c2c:	6014      	str	r4, [r2, #0]
 8020c2e:	b003      	add	sp, #12
 8020c30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020c34:	f000 b922 	b.w	8020e7c <__malloc_unlock>
 8020c38:	42a3      	cmp	r3, r4
 8020c3a:	d908      	bls.n	8020c4e <_free_r+0x46>
 8020c3c:	6825      	ldr	r5, [r4, #0]
 8020c3e:	1961      	adds	r1, r4, r5
 8020c40:	428b      	cmp	r3, r1
 8020c42:	bf01      	itttt	eq
 8020c44:	6819      	ldreq	r1, [r3, #0]
 8020c46:	685b      	ldreq	r3, [r3, #4]
 8020c48:	1949      	addeq	r1, r1, r5
 8020c4a:	6021      	streq	r1, [r4, #0]
 8020c4c:	e7ed      	b.n	8020c2a <_free_r+0x22>
 8020c4e:	461a      	mov	r2, r3
 8020c50:	685b      	ldr	r3, [r3, #4]
 8020c52:	b10b      	cbz	r3, 8020c58 <_free_r+0x50>
 8020c54:	42a3      	cmp	r3, r4
 8020c56:	d9fa      	bls.n	8020c4e <_free_r+0x46>
 8020c58:	6811      	ldr	r1, [r2, #0]
 8020c5a:	1855      	adds	r5, r2, r1
 8020c5c:	42a5      	cmp	r5, r4
 8020c5e:	d10b      	bne.n	8020c78 <_free_r+0x70>
 8020c60:	6824      	ldr	r4, [r4, #0]
 8020c62:	4421      	add	r1, r4
 8020c64:	1854      	adds	r4, r2, r1
 8020c66:	42a3      	cmp	r3, r4
 8020c68:	6011      	str	r1, [r2, #0]
 8020c6a:	d1e0      	bne.n	8020c2e <_free_r+0x26>
 8020c6c:	681c      	ldr	r4, [r3, #0]
 8020c6e:	685b      	ldr	r3, [r3, #4]
 8020c70:	6053      	str	r3, [r2, #4]
 8020c72:	4421      	add	r1, r4
 8020c74:	6011      	str	r1, [r2, #0]
 8020c76:	e7da      	b.n	8020c2e <_free_r+0x26>
 8020c78:	d902      	bls.n	8020c80 <_free_r+0x78>
 8020c7a:	230c      	movs	r3, #12
 8020c7c:	6003      	str	r3, [r0, #0]
 8020c7e:	e7d6      	b.n	8020c2e <_free_r+0x26>
 8020c80:	6825      	ldr	r5, [r4, #0]
 8020c82:	1961      	adds	r1, r4, r5
 8020c84:	428b      	cmp	r3, r1
 8020c86:	bf04      	itt	eq
 8020c88:	6819      	ldreq	r1, [r3, #0]
 8020c8a:	685b      	ldreq	r3, [r3, #4]
 8020c8c:	6063      	str	r3, [r4, #4]
 8020c8e:	bf04      	itt	eq
 8020c90:	1949      	addeq	r1, r1, r5
 8020c92:	6021      	streq	r1, [r4, #0]
 8020c94:	6054      	str	r4, [r2, #4]
 8020c96:	e7ca      	b.n	8020c2e <_free_r+0x26>
 8020c98:	b003      	add	sp, #12
 8020c9a:	bd30      	pop	{r4, r5, pc}
 8020c9c:	2400120c 	.word	0x2400120c

08020ca0 <sbrk_aligned>:
 8020ca0:	b570      	push	{r4, r5, r6, lr}
 8020ca2:	4e0e      	ldr	r6, [pc, #56]	; (8020cdc <sbrk_aligned+0x3c>)
 8020ca4:	460c      	mov	r4, r1
 8020ca6:	6831      	ldr	r1, [r6, #0]
 8020ca8:	4605      	mov	r5, r0
 8020caa:	b911      	cbnz	r1, 8020cb2 <sbrk_aligned+0x12>
 8020cac:	f000 f88c 	bl	8020dc8 <_sbrk_r>
 8020cb0:	6030      	str	r0, [r6, #0]
 8020cb2:	4621      	mov	r1, r4
 8020cb4:	4628      	mov	r0, r5
 8020cb6:	f000 f887 	bl	8020dc8 <_sbrk_r>
 8020cba:	1c43      	adds	r3, r0, #1
 8020cbc:	d00a      	beq.n	8020cd4 <sbrk_aligned+0x34>
 8020cbe:	1cc4      	adds	r4, r0, #3
 8020cc0:	f024 0403 	bic.w	r4, r4, #3
 8020cc4:	42a0      	cmp	r0, r4
 8020cc6:	d007      	beq.n	8020cd8 <sbrk_aligned+0x38>
 8020cc8:	1a21      	subs	r1, r4, r0
 8020cca:	4628      	mov	r0, r5
 8020ccc:	f000 f87c 	bl	8020dc8 <_sbrk_r>
 8020cd0:	3001      	adds	r0, #1
 8020cd2:	d101      	bne.n	8020cd8 <sbrk_aligned+0x38>
 8020cd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8020cd8:	4620      	mov	r0, r4
 8020cda:	bd70      	pop	{r4, r5, r6, pc}
 8020cdc:	24001210 	.word	0x24001210

08020ce0 <_malloc_r>:
 8020ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020ce4:	1ccd      	adds	r5, r1, #3
 8020ce6:	f025 0503 	bic.w	r5, r5, #3
 8020cea:	3508      	adds	r5, #8
 8020cec:	2d0c      	cmp	r5, #12
 8020cee:	bf38      	it	cc
 8020cf0:	250c      	movcc	r5, #12
 8020cf2:	2d00      	cmp	r5, #0
 8020cf4:	4607      	mov	r7, r0
 8020cf6:	db01      	blt.n	8020cfc <_malloc_r+0x1c>
 8020cf8:	42a9      	cmp	r1, r5
 8020cfa:	d905      	bls.n	8020d08 <_malloc_r+0x28>
 8020cfc:	230c      	movs	r3, #12
 8020cfe:	603b      	str	r3, [r7, #0]
 8020d00:	2600      	movs	r6, #0
 8020d02:	4630      	mov	r0, r6
 8020d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020d08:	4e2e      	ldr	r6, [pc, #184]	; (8020dc4 <_malloc_r+0xe4>)
 8020d0a:	f000 f8b1 	bl	8020e70 <__malloc_lock>
 8020d0e:	6833      	ldr	r3, [r6, #0]
 8020d10:	461c      	mov	r4, r3
 8020d12:	bb34      	cbnz	r4, 8020d62 <_malloc_r+0x82>
 8020d14:	4629      	mov	r1, r5
 8020d16:	4638      	mov	r0, r7
 8020d18:	f7ff ffc2 	bl	8020ca0 <sbrk_aligned>
 8020d1c:	1c43      	adds	r3, r0, #1
 8020d1e:	4604      	mov	r4, r0
 8020d20:	d14d      	bne.n	8020dbe <_malloc_r+0xde>
 8020d22:	6834      	ldr	r4, [r6, #0]
 8020d24:	4626      	mov	r6, r4
 8020d26:	2e00      	cmp	r6, #0
 8020d28:	d140      	bne.n	8020dac <_malloc_r+0xcc>
 8020d2a:	6823      	ldr	r3, [r4, #0]
 8020d2c:	4631      	mov	r1, r6
 8020d2e:	4638      	mov	r0, r7
 8020d30:	eb04 0803 	add.w	r8, r4, r3
 8020d34:	f000 f848 	bl	8020dc8 <_sbrk_r>
 8020d38:	4580      	cmp	r8, r0
 8020d3a:	d13a      	bne.n	8020db2 <_malloc_r+0xd2>
 8020d3c:	6821      	ldr	r1, [r4, #0]
 8020d3e:	3503      	adds	r5, #3
 8020d40:	1a6d      	subs	r5, r5, r1
 8020d42:	f025 0503 	bic.w	r5, r5, #3
 8020d46:	3508      	adds	r5, #8
 8020d48:	2d0c      	cmp	r5, #12
 8020d4a:	bf38      	it	cc
 8020d4c:	250c      	movcc	r5, #12
 8020d4e:	4629      	mov	r1, r5
 8020d50:	4638      	mov	r0, r7
 8020d52:	f7ff ffa5 	bl	8020ca0 <sbrk_aligned>
 8020d56:	3001      	adds	r0, #1
 8020d58:	d02b      	beq.n	8020db2 <_malloc_r+0xd2>
 8020d5a:	6823      	ldr	r3, [r4, #0]
 8020d5c:	442b      	add	r3, r5
 8020d5e:	6023      	str	r3, [r4, #0]
 8020d60:	e00e      	b.n	8020d80 <_malloc_r+0xa0>
 8020d62:	6822      	ldr	r2, [r4, #0]
 8020d64:	1b52      	subs	r2, r2, r5
 8020d66:	d41e      	bmi.n	8020da6 <_malloc_r+0xc6>
 8020d68:	2a0b      	cmp	r2, #11
 8020d6a:	d916      	bls.n	8020d9a <_malloc_r+0xba>
 8020d6c:	1961      	adds	r1, r4, r5
 8020d6e:	42a3      	cmp	r3, r4
 8020d70:	6025      	str	r5, [r4, #0]
 8020d72:	bf18      	it	ne
 8020d74:	6059      	strne	r1, [r3, #4]
 8020d76:	6863      	ldr	r3, [r4, #4]
 8020d78:	bf08      	it	eq
 8020d7a:	6031      	streq	r1, [r6, #0]
 8020d7c:	5162      	str	r2, [r4, r5]
 8020d7e:	604b      	str	r3, [r1, #4]
 8020d80:	4638      	mov	r0, r7
 8020d82:	f104 060b 	add.w	r6, r4, #11
 8020d86:	f000 f879 	bl	8020e7c <__malloc_unlock>
 8020d8a:	f026 0607 	bic.w	r6, r6, #7
 8020d8e:	1d23      	adds	r3, r4, #4
 8020d90:	1af2      	subs	r2, r6, r3
 8020d92:	d0b6      	beq.n	8020d02 <_malloc_r+0x22>
 8020d94:	1b9b      	subs	r3, r3, r6
 8020d96:	50a3      	str	r3, [r4, r2]
 8020d98:	e7b3      	b.n	8020d02 <_malloc_r+0x22>
 8020d9a:	6862      	ldr	r2, [r4, #4]
 8020d9c:	42a3      	cmp	r3, r4
 8020d9e:	bf0c      	ite	eq
 8020da0:	6032      	streq	r2, [r6, #0]
 8020da2:	605a      	strne	r2, [r3, #4]
 8020da4:	e7ec      	b.n	8020d80 <_malloc_r+0xa0>
 8020da6:	4623      	mov	r3, r4
 8020da8:	6864      	ldr	r4, [r4, #4]
 8020daa:	e7b2      	b.n	8020d12 <_malloc_r+0x32>
 8020dac:	4634      	mov	r4, r6
 8020dae:	6876      	ldr	r6, [r6, #4]
 8020db0:	e7b9      	b.n	8020d26 <_malloc_r+0x46>
 8020db2:	230c      	movs	r3, #12
 8020db4:	603b      	str	r3, [r7, #0]
 8020db6:	4638      	mov	r0, r7
 8020db8:	f000 f860 	bl	8020e7c <__malloc_unlock>
 8020dbc:	e7a1      	b.n	8020d02 <_malloc_r+0x22>
 8020dbe:	6025      	str	r5, [r4, #0]
 8020dc0:	e7de      	b.n	8020d80 <_malloc_r+0xa0>
 8020dc2:	bf00      	nop
 8020dc4:	2400120c 	.word	0x2400120c

08020dc8 <_sbrk_r>:
 8020dc8:	b538      	push	{r3, r4, r5, lr}
 8020dca:	4d06      	ldr	r5, [pc, #24]	; (8020de4 <_sbrk_r+0x1c>)
 8020dcc:	2300      	movs	r3, #0
 8020dce:	4604      	mov	r4, r0
 8020dd0:	4608      	mov	r0, r1
 8020dd2:	602b      	str	r3, [r5, #0]
 8020dd4:	f7f4 f8f6 	bl	8014fc4 <_sbrk>
 8020dd8:	1c43      	adds	r3, r0, #1
 8020dda:	d102      	bne.n	8020de2 <_sbrk_r+0x1a>
 8020ddc:	682b      	ldr	r3, [r5, #0]
 8020dde:	b103      	cbz	r3, 8020de2 <_sbrk_r+0x1a>
 8020de0:	6023      	str	r3, [r4, #0]
 8020de2:	bd38      	pop	{r3, r4, r5, pc}
 8020de4:	24001214 	.word	0x24001214

08020de8 <_raise_r>:
 8020de8:	291f      	cmp	r1, #31
 8020dea:	b538      	push	{r3, r4, r5, lr}
 8020dec:	4604      	mov	r4, r0
 8020dee:	460d      	mov	r5, r1
 8020df0:	d904      	bls.n	8020dfc <_raise_r+0x14>
 8020df2:	2316      	movs	r3, #22
 8020df4:	6003      	str	r3, [r0, #0]
 8020df6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8020dfa:	bd38      	pop	{r3, r4, r5, pc}
 8020dfc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8020dfe:	b112      	cbz	r2, 8020e06 <_raise_r+0x1e>
 8020e00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020e04:	b94b      	cbnz	r3, 8020e1a <_raise_r+0x32>
 8020e06:	4620      	mov	r0, r4
 8020e08:	f000 f830 	bl	8020e6c <_getpid_r>
 8020e0c:	462a      	mov	r2, r5
 8020e0e:	4601      	mov	r1, r0
 8020e10:	4620      	mov	r0, r4
 8020e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020e16:	f000 b817 	b.w	8020e48 <_kill_r>
 8020e1a:	2b01      	cmp	r3, #1
 8020e1c:	d00a      	beq.n	8020e34 <_raise_r+0x4c>
 8020e1e:	1c59      	adds	r1, r3, #1
 8020e20:	d103      	bne.n	8020e2a <_raise_r+0x42>
 8020e22:	2316      	movs	r3, #22
 8020e24:	6003      	str	r3, [r0, #0]
 8020e26:	2001      	movs	r0, #1
 8020e28:	e7e7      	b.n	8020dfa <_raise_r+0x12>
 8020e2a:	2400      	movs	r4, #0
 8020e2c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020e30:	4628      	mov	r0, r5
 8020e32:	4798      	blx	r3
 8020e34:	2000      	movs	r0, #0
 8020e36:	e7e0      	b.n	8020dfa <_raise_r+0x12>

08020e38 <raise>:
 8020e38:	4b02      	ldr	r3, [pc, #8]	; (8020e44 <raise+0xc>)
 8020e3a:	4601      	mov	r1, r0
 8020e3c:	6818      	ldr	r0, [r3, #0]
 8020e3e:	f7ff bfd3 	b.w	8020de8 <_raise_r>
 8020e42:	bf00      	nop
 8020e44:	24000018 	.word	0x24000018

08020e48 <_kill_r>:
 8020e48:	b538      	push	{r3, r4, r5, lr}
 8020e4a:	4d07      	ldr	r5, [pc, #28]	; (8020e68 <_kill_r+0x20>)
 8020e4c:	2300      	movs	r3, #0
 8020e4e:	4604      	mov	r4, r0
 8020e50:	4608      	mov	r0, r1
 8020e52:	4611      	mov	r1, r2
 8020e54:	602b      	str	r3, [r5, #0]
 8020e56:	f7f4 f89b 	bl	8014f90 <_kill>
 8020e5a:	1c43      	adds	r3, r0, #1
 8020e5c:	d102      	bne.n	8020e64 <_kill_r+0x1c>
 8020e5e:	682b      	ldr	r3, [r5, #0]
 8020e60:	b103      	cbz	r3, 8020e64 <_kill_r+0x1c>
 8020e62:	6023      	str	r3, [r4, #0]
 8020e64:	bd38      	pop	{r3, r4, r5, pc}
 8020e66:	bf00      	nop
 8020e68:	24001214 	.word	0x24001214

08020e6c <_getpid_r>:
 8020e6c:	f7f4 b888 	b.w	8014f80 <_getpid>

08020e70 <__malloc_lock>:
 8020e70:	4801      	ldr	r0, [pc, #4]	; (8020e78 <__malloc_lock+0x8>)
 8020e72:	f000 b809 	b.w	8020e88 <__retarget_lock_acquire_recursive>
 8020e76:	bf00      	nop
 8020e78:	24001218 	.word	0x24001218

08020e7c <__malloc_unlock>:
 8020e7c:	4801      	ldr	r0, [pc, #4]	; (8020e84 <__malloc_unlock+0x8>)
 8020e7e:	f000 b804 	b.w	8020e8a <__retarget_lock_release_recursive>
 8020e82:	bf00      	nop
 8020e84:	24001218 	.word	0x24001218

08020e88 <__retarget_lock_acquire_recursive>:
 8020e88:	4770      	bx	lr

08020e8a <__retarget_lock_release_recursive>:
 8020e8a:	4770      	bx	lr

08020e8c <_init>:
 8020e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e8e:	bf00      	nop
 8020e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e92:	bc08      	pop	{r3}
 8020e94:	469e      	mov	lr, r3
 8020e96:	4770      	bx	lr

08020e98 <_fini>:
 8020e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020e9a:	bf00      	nop
 8020e9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020e9e:	bc08      	pop	{r3}
 8020ea0:	469e      	mov	lr, r3
 8020ea2:	4770      	bx	lr
