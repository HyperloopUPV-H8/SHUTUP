
TUD_A2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000207d0  080002d0  080002d0  000102d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08020aa0  08020aa0  00030aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000030  08020d38  08020d38  00030d38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000030  08020d68  08020d68  00030d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  24000000  08020d98  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000129c  2400007c  08020e14  0004007c  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  24001318  08020e14  00041318  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0004007c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000c54e7  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000ad9e  00000000  00000000  00105591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00005798  00000000  00000000  00110330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000058e0  00000000  00000000  00115ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003f766  00000000  00000000  0011b3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00039fc1  00000000  00000000  0015ab0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001d71b3  00000000  00000000  00194acf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  0036bc82  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00019b4c  00000000  00000000  0036bcd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	2400007c 	.word	0x2400007c
 80002ec:	00000000 	.word	0x00000000
 80002f0:	08020a88 	.word	0x08020a88

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	24000080 	.word	0x24000080
 800030c:	08020a88 	.word	0x08020a88

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <_ZSt21is_constant_evaluatedv>:

#define __cpp_lib_is_constant_evaluated 201811L

  constexpr inline bool
  is_constant_evaluated() noexcept
  { return __builtin_is_constant_evaluated(); }
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
 8000324:	2300      	movs	r3, #0
 8000326:	4618      	mov	r0, r3
 8000328:	46bd      	mov	sp, r7
 800032a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800032e:	4770      	bx	lr

08000330 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8000330:	b480      	push	{r7}
 8000332:	b083      	sub	sp, #12
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
 8000338:	6039      	str	r1, [r7, #0]
 800033a:	683b      	ldr	r3, [r7, #0]
 800033c:	4618      	mov	r0, r3
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <_ZNSt15_Rb_tree_headerC1Ev>:
  struct _Rb_tree_header
  {
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_color = _S_red;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
      _M_reset();
 8000356:	6878      	ldr	r0, [r7, #4]
 8000358:	f000 f805 	bl	8000366 <_ZNSt15_Rb_tree_header8_M_resetEv>
    }
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4618      	mov	r0, r3
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_ZNSt15_Rb_tree_header8_M_resetEv>:

      __from._M_reset();
    }

    void
    _M_reset()
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
    {
      _M_header._M_parent = 0;
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	2200      	movs	r2, #0
 8000372:	605a      	str	r2, [r3, #4]
      _M_header._M_left = &_M_header;
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	609a      	str	r2, [r3, #8]
      _M_header._M_right = &_M_header;
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	60da      	str	r2, [r3, #12]
      _M_node_count = 0;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    }
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr

08000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8000392:	b580      	push	{r7, lr}
 8000394:	b082      	sub	sp, #8
 8000396:	af00      	add	r7, sp, #0
 8000398:	6078      	str	r0, [r7, #4]
 800039a:	6878      	ldr	r0, [r7, #4]
 800039c:	f000 f9e2 	bl	8000764 <_ZNSaIP8AnalogInED1Ev>
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	4618      	mov	r0, r3
 80003a4:	3708      	adds	r7, #8
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}

080003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80003aa:	b580      	push	{r7, lr}
 80003ac:	b082      	sub	sp, #8
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6078      	str	r0, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4618      	mov	r0, r3
 80003b6:	f000 f9c5 	bl	8000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}

080003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4618      	mov	r0, r3
 80003d0:	f7ff ffeb 	bl	80003aa <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EEC1Ev>
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4618      	mov	r0, r3
 80003d8:	3708      	adds	r7, #8
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>:
#else
      // Unused _Is_pod_comparator is kept as it is part of mangled name.
      template<typename _Key_compare,
	       bool /* _Is_pod_comparator */ = __is_pod(_Key_compare)>
#endif
	struct _Rb_tree_impl
 80003de:	b580      	push	{r7, lr}
 80003e0:	b082      	sub	sp, #8
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6878      	ldr	r0, [r7, #4]
 80003e8:	f000 f9f5 	bl	80007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4618      	mov	r0, r3
 80003f0:	3708      	adds	r7, #8
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>:
    public:
      // allocation/deallocation
#if __cplusplus < 201103L
      _Rb_tree() { }
#else
      _Rb_tree() = default;
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4618      	mov	r0, r3
 8000402:	f000 f9d3 	bl	80007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>:
       *  @brief  Default constructor creates no elements.
       */
#if __cplusplus < 201103L
      map() : _M_t() { }
#else
      map() = default;
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ffeb 	bl	80003f6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EEC1Ev>
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f000 fa04 	bl	8000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4618      	mov	r0, r3
 800043c:	3708      	adds	r7, #8
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8000442:	b580      	push	{r7, lr}
 8000444:	b082      	sub	sp, #8
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	4618      	mov	r0, r3
 800044e:	f000 f9e2 	bl	8000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4618      	mov	r0, r3
 8000456:	3708      	adds	r7, #8
 8000458:	46bd      	mov	sp, r7
 800045a:	bd80      	pop	{r7, pc}

0800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ffeb 	bl	8000442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4618      	mov	r0, r3
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
	...

08000478 <_ZN8AnalogIn5startEv>:

vector<AnalogIn*> AnalogIn::all_analog_ins;
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;

void AnalogIn::start() {
 8000478:	b5b0      	push	{r4, r5, r7, lr}
 800047a:	b082      	sub	sp, #8
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	if(timer->State == HAL_TIM_StateTypeDef::HAL_TIM_STATE_READY){
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	685b      	ldr	r3, [r3, #4]
 8000484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000488:	b2db      	uxtb	r3, r3
 800048a:	2b01      	cmp	r3, #1
 800048c:	bf0c      	ite	eq
 800048e:	2301      	moveq	r3, #1
 8000490:	2300      	movne	r3, #0
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d004      	beq.n	80004a2 <_ZN8AnalogIn5startEv+0x2a>
		HAL_TIM_Base_Start(timer);
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	4618      	mov	r0, r3
 800049e:	f01e f8e7 	bl	801e670 <HAL_TIM_Base_Start>
	}

	if(adc->State == 1){
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	bf0c      	ite	eq
 80004ac:	2301      	moveq	r3, #1
 80004ae:	2300      	movne	r3, #0
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d014      	beq.n	80004e0 <_ZN8AnalogIn5startEv+0x68>
		HAL_ADC_Start_DMA(adc,(uint32_t*) adcs[adc].data, adcs[adc].data_size);
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	681c      	ldr	r4, [r3, #0]
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4619      	mov	r1, r3
 80004be:	480a      	ldr	r0, [pc, #40]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004c0:	f000 f9de 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004c4:	4603      	mov	r3, r0
 80004c6:	1d1d      	adds	r5, r3, #4
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4619      	mov	r1, r3
 80004cc:	4806      	ldr	r0, [pc, #24]	; (80004e8 <_ZN8AnalogIn5startEv+0x70>)
 80004ce:	f000 f9d7 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80004d2:	4603      	mov	r3, r0
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	461a      	mov	r2, r3
 80004d8:	4629      	mov	r1, r5
 80004da:	4620      	mov	r0, r4
 80004dc:	f015 fc0c 	bl	8015cf8 <HAL_ADC_Start_DMA>
	}
}
 80004e0:	bf00      	nop
 80004e2:	3708      	adds	r7, #8
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bdb0      	pop	{r4, r5, r7, pc}
 80004e8:	240000a4 	.word	0x240000a4

080004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>:

AnalogIn::AnalogIn(ADC_HandleTypeDef* adc, TIM_HandleTypeDef* timer, Pin* pin) : adc(adc), timer(timer) {
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b08e      	sub	sp, #56	; 0x38
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
 80004f8:	603b      	str	r3, [r7, #0]
 80004fa:	68ba      	ldr	r2, [r7, #8]
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	687a      	ldr	r2, [r7, #4]
 8000504:	605a      	str	r2, [r3, #4]
	AnalogIn::all_analog_ins.push_back(this);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
 800050a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800050e:	4619      	mov	r1, r3
 8000510:	4823      	ldr	r0, [pc, #140]	; (80005a0 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb4>)
 8000512:	f000 fa13 	bl	800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>
	AnalogIn::analog_in_from_pin[pin] = this;
 8000516:	68fc      	ldr	r4, [r7, #12]
 8000518:	463b      	mov	r3, r7
 800051a:	4619      	mov	r1, r3
 800051c:	4821      	ldr	r0, [pc, #132]	; (80005a4 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xb8>)
 800051e:	f000 fa1f 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8000522:	4603      	mov	r3, r0
 8000524:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_INPUT;
 8000526:	683b      	ldr	r3, [r7, #0]
 8000528:	2201      	movs	r2, #1
 800052a:	719a      	strb	r2, [r3, #6]

	if(adcs.count(adc) == 0) {
 800052c:	f107 0308 	add.w	r3, r7, #8
 8000530:	4619      	mov	r1, r3
 8000532:	481d      	ldr	r0, [pc, #116]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000534:	f000 fa72 	bl	8000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d011      	beq.n	800056c <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0x80>
		ADC adc_struct;
		adc_struct.data_size = 0;
 8000548:	2300      	movs	r3, #0
 800054a:	613b      	str	r3, [r7, #16]
		adcs[adc] = adc_struct;
 800054c:	f107 0308 	add.w	r3, r7, #8
 8000550:	4619      	mov	r1, r3
 8000552:	4815      	ldr	r0, [pc, #84]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000554:	f000 f994 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000558:	4603      	mov	r3, r0
 800055a:	461d      	mov	r5, r3
 800055c:	f107 0410 	add.w	r4, r7, #16
 8000560:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000562:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000566:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000568:	6823      	ldr	r3, [r4, #0]
 800056a:	602b      	str	r3, [r5, #0]
	}

	adc_index = adcs[adc].data_size;
 800056c:	f107 0308 	add.w	r3, r7, #8
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000574:	f000 f984 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 8000578:	4603      	mov	r3, r0
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	611a      	str	r2, [r3, #16]
	adcs[adc].data_size += 1;
 8000580:	f107 0308 	add.w	r3, r7, #8
 8000584:	4619      	mov	r1, r3
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin+0xbc>)
 8000588:	f000 f97a 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 800058c:	4603      	mov	r3, r0
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	3201      	adds	r2, #1
 8000592:	601a      	str	r2, [r3, #0]
}
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4618      	mov	r0, r3
 8000598:	3738      	adds	r7, #56	; 0x38
 800059a:	46bd      	mov	sp, r7
 800059c:	bdb0      	pop	{r4, r5, r7, pc}
 800059e:	bf00      	nop
 80005a0:	24000098 	.word	0x24000098
 80005a4:	240000bc 	.word	0x240000bc
 80005a8:	240000a4 	.word	0x240000a4
 80005ac:	00000000 	.word	0x00000000

080005b0 <_ZN8AnalogIn6updateEv>:

float AnalogIn::update() {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	voltage = AnalogIn::adcs[adc].data[adc_index] / 65535.0 * 3.3;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4619      	mov	r1, r3
 80005bc:	4816      	ldr	r0, [pc, #88]	; (8000618 <_ZN8AnalogIn6updateEv+0x68>)
 80005be:	f000 f95f 	bl	8000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>
 80005c2:	4602      	mov	r2, r0
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	691b      	ldr	r3, [r3, #16]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	4413      	add	r3, r2
 80005cc:	889b      	ldrh	r3, [r3, #4]
 80005ce:	ee07 3a90 	vmov	s15, r3
 80005d2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80005d6:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8000608 <_ZN8AnalogIn6updateEv+0x58>
 80005da:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80005de:	ed9f 6b0c 	vldr	d6, [pc, #48]	; 8000610 <_ZN8AnalogIn6updateEv+0x60>
 80005e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80005e6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	edc3 7a05 	vstr	s15, [r3, #20]
	return voltage;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	ee07 3a90 	vmov	s15, r3
}
 80005f8:	eeb0 0a67 	vmov.f32	s0, s15
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	f3af 8000 	nop.w
 8000608:	00000000 	.word	0x00000000
 800060c:	40efffe0 	.word	0x40efffe0
 8000610:	66666666 	.word	0x66666666
 8000614:	400a6666 	.word	0x400a6666
 8000618:	240000a4 	.word	0x240000a4

0800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
      { return __normal_iterator(_M_current - __n); }

      _GLIBCXX20_CONSTEXPR
      const _Iterator&
      base() const _GLIBCXX_NOEXCEPT
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	4618      	mov	r0, r3
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
#if __cpp_lib_three_way_comparison
  template<typename _IteratorL, typename _IteratorR, typename _Container>
    requires requires (_IteratorL __lhs, _IteratorR __rhs)
    { { __lhs == __rhs } -> std::convertible_to<bool>; }
    constexpr bool
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8000632:	b590      	push	{r4, r7, lr}
 8000634:	b083      	sub	sp, #12
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
 800063a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_IteratorR, _Container>& __rhs)
    noexcept(noexcept(__lhs.base() == __rhs.base()))
    { return __lhs.base() == __rhs.base(); }
 800063c:	6878      	ldr	r0, [r7, #4]
 800063e:	f7ff ffed 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8000642:	4603      	mov	r3, r0
 8000644:	681c      	ldr	r4, [r3, #0]
 8000646:	6838      	ldr	r0, [r7, #0]
 8000648:	f7ff ffe8 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800064c:	4603      	mov	r3, r0
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	429c      	cmp	r4, r3
 8000652:	bf0c      	ite	eq
 8000654:	2301      	moveq	r3, #1
 8000656:	2300      	movne	r3, #0
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bd90      	pop	{r4, r7, pc}

08000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8000662:	b480      	push	{r7}
 8000664:	b083      	sub	sp, #12
 8000666:	af00      	add	r7, sp, #0
 8000668:	6078      	str	r0, [r7, #4]
	++_M_current;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	1d1a      	adds	r2, r3, #4
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
	return *this;
 8000674:	687b      	ldr	r3, [r7, #4]
      }
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000682:	b480      	push	{r7}
 8000684:	b083      	sub	sp, #12
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr
	...

0800069c <_ZN8AnalogIn20start_all_analog_insEv>:

void AnalogIn::start_all_analog_ins(){
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006a2:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZN8AnalogIn20start_all_analog_insEv+0x5c>)
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68f8      	ldr	r0, [r7, #12]
 80006a8:	f000 f9dc 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 80006ac:	4603      	mov	r3, r0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	68f8      	ldr	r0, [r7, #12]
 80006b2:	f000 f9e7 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 80006b6:	4603      	mov	r3, r0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	463a      	mov	r2, r7
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	4611      	mov	r1, r2
 80006c0:	4618      	mov	r0, r3
 80006c2:	f7ff ffb6 	bl	8000632 <_ZN9__gnu_cxxeqIPP8AnalogInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80006c6:	4603      	mov	r3, r0
 80006c8:	f083 0301 	eor.w	r3, r3, #1
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d00e      	beq.n	80006f0 <_ZN8AnalogIn20start_all_analog_insEv+0x54>
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffd4 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 80006da:	4603      	mov	r3, r0
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	60bb      	str	r3, [r7, #8]
		analog_in->start();
 80006e0:	68b8      	ldr	r0, [r7, #8]
 80006e2:	f7ff fec9 	bl	8000478 <_ZN8AnalogIn5startEv>
	for(auto analog_in : AnalogIn::all_analog_ins)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff ffba 	bl	8000662 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEppEv>
 80006ee:	e7e4      	b.n	80006ba <_ZN8AnalogIn20start_all_analog_insEv+0x1e>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	24000098 	.word	0x24000098

080006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>:

void AnalogIn::interrupt_all_analog_ins(){
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	480e      	ldr	r0, [pc, #56]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000708:	f000 f9cd 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800070c:	4602      	mov	r2, r0
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4293      	cmp	r3, r2
 8000712:	bf34      	ite	cc
 8000714:	2301      	movcc	r3, #1
 8000716:	2300      	movcs	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	2b00      	cmp	r3, #0
 800071c:	d00c      	beq.n	8000738 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x3c>
		AnalogIn::all_analog_ins[i]->update();
 800071e:	6879      	ldr	r1, [r7, #4]
 8000720:	4807      	ldr	r0, [pc, #28]	; (8000740 <_ZN8AnalogIn24interrupt_all_analog_insEv+0x44>)
 8000722:	f000 f9d0 	bl	8000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>
 8000726:	4603      	mov	r3, r0
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff40 	bl	80005b0 <_ZN8AnalogIn6updateEv>
	for(size_t i = 0; i < AnalogIn::all_analog_ins.size(); i++)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3301      	adds	r3, #1
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	e7e6      	b.n	8000706 <_ZN8AnalogIn24interrupt_all_analog_insEv+0xa>
}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	24000098 	.word	0x24000098

08000744 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800074c:	6878      	ldr	r0, [r7, #4]
 800074e:	f000 f9ca 	bl	8000ae6 <_ZNSaIP8AnalogInEC1Ev>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4618      	mov	r0, r3
 8000756:	f000 f9d2 	bl	8000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4618      	mov	r0, r3
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <_ZNSaIP8AnalogInED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr

0800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	689a      	ldr	r2, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	1ad3      	subs	r3, r2, r3
 8000790:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8000792:	461a      	mov	r2, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f000 f9c6 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fdf8 	bl	8000392 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE12_Vector_implD1Ev>
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f000 f9c9 	bl	8000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4618      	mov	r0, r3
 80007be:	f000 f9d1 	bl	8000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	3304      	adds	r3, #4
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fdbe 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEED1Ev>:
 80007d6:	b480      	push	{r7}
 80007d8:	b083      	sub	sp, #12
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	4618      	mov	r0, r3
 80007e2:	370c      	adds	r7, #12
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>:
      : _Rb_tree(std::move(__x), std::move(__a),
		 typename _Alloc_traits::is_always_equal{})
      { }
#endif

      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f000 f9df 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f000 f9bb 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff fde9 	bl	80003de <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE13_Rb_tree_implIS9_Lb1EED1Ev>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}

08000816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8000816:	b580      	push	{r7, lr}
 8000818:	b082      	sub	sp, #8
 800081a:	af00      	add	r7, sp, #0
 800081c:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f9d6 	bl	8000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4618      	mov	r0, r3
 8000828:	f000 f9de 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	3304      	adds	r3, #4
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff fd89 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4618      	mov	r0, r3
 800083a:	3708      	adds	r7, #8
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}

08000840 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEED1Ev>:
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	4618      	mov	r0, r3
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f000 f9ec 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8000864:	4603      	mov	r3, r0
 8000866:	4619      	mov	r1, r3
 8000868:	6878      	ldr	r0, [r7, #4]
 800086a:	f000 f9c8 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff fdda 	bl	800042a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_>:
       *  is created using default values, which is then returned.
       *
       *  Lookup requires logarithmic time.
       */
      mapped_type&
      operator[](const key_type& __k)
 8000880:	b590      	push	{r4, r7, lr}
 8000882:	b08b      	sub	sp, #44	; 0x2c
 8000884:	af02      	add	r7, sp, #8
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
      {
	// concept requirements
	__glibcxx_function_requires(_DefaultConstructibleConcept<mapped_type>)

	iterator __i = lower_bound(__k);
 800088a:	6839      	ldr	r1, [r7, #0]
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f000 f9e1 	bl	8000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>
 8000892:	4603      	mov	r3, r0
 8000894:	60bb      	str	r3, [r7, #8]
	// __i->first is greater than or equivalent to __k.
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f9eb 	bl	8000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>
 800089c:	4603      	mov	r3, r0
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4611      	mov	r1, r2
 80008aa:	4618      	mov	r0, r3
 80008ac:	f000 f9ee 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d114      	bne.n	80008e0 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x60>
 80008b6:	6878      	ldr	r0, [r7, #4]
 80008b8:	f000 f9fc 	bl	8000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	681c      	ldr	r4, [r3, #0]
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fa02 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 80008ca:	4603      	mov	r3, r0
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f107 0310 	add.w	r3, r7, #16
 80008d2:	4621      	mov	r1, r4
 80008d4:	4618      	mov	r0, r3
 80008d6:	f000 fa08 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x64>
 80008e0:	2301      	movs	r3, #1
 80008e2:	e000      	b.n	80008e6 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0x66>
 80008e4:	2300      	movs	r3, #0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d01b      	beq.n	8000922 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xa2>
#if __cplusplus >= 201103L
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80008ea:	687c      	ldr	r4, [r7, #4]
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4611      	mov	r1, r2
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 fa19 	bl	8000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>
					    std::tuple<const key_type&>(__k),
 80008fc:	f107 0318 	add.w	r3, r7, #24
 8000900:	6839      	ldr	r1, [r7, #0]
 8000902:	4618      	mov	r0, r3
 8000904:	f000 fa04 	bl	8000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8000908:	f107 0218 	add.w	r2, r7, #24
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	4613      	mov	r3, r2
 8000914:	4a08      	ldr	r2, [pc, #32]	; (8000938 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEixERS6_+0xb8>)
 8000916:	6979      	ldr	r1, [r7, #20]
 8000918:	4620      	mov	r0, r4
 800091a:	f000 fa18 	bl	8000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>
 800091e:	4603      	mov	r3, r0
 8000920:	60bb      	str	r3, [r7, #8]
					    std::tuple<>());
#else
	  __i = insert(__i, value_type(__k, mapped_type()));
#endif
	return (*__i).second;
 8000922:	f107 0308 	add.w	r3, r7, #8
 8000926:	4618      	mov	r0, r3
 8000928:	f000 f9d1 	bl	8000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>
 800092c:	4603      	mov	r3, r0
 800092e:	3304      	adds	r3, #4
      }
 8000930:	4618      	mov	r0, r3
 8000932:	3724      	adds	r7, #36	; 0x24
 8000934:	46bd      	mov	sp, r7
 8000936:	bd90      	pop	{r4, r7, pc}
 8000938:	08020cbc 	.word	0x08020cbc

0800093c <_ZNSt6vectorIP8AnalogInSaIS1_EE9push_backEOS1_>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f000 fa3f 	bl	8000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>
 800094c:	4603      	mov	r3, r0
 800094e:	4619      	mov	r1, r3
 8000950:	6878      	ldr	r0, [r7, #4]
 8000952:	f000 fa45 	bl	8000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8000956:	bf00      	nop
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
	...

08000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b08b      	sub	sp, #44	; 0x2c
 8000964:	af02      	add	r7, sp, #8
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	6878      	ldr	r0, [r7, #4]
 800096e:	f000 fa69 	bl	8000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8000972:	4603      	mov	r3, r0
 8000974:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 fa73 	bl	8000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 800097c:	4603      	mov	r3, r0
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	f107 020c 	add.w	r2, r7, #12
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa76 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d114      	bne.n	80009c0 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8000996:	6878      	ldr	r0, [r7, #4]
 8000998:	f000 fa84 	bl	8000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	681c      	ldr	r4, [r3, #0]
 80009a0:	f107 0308 	add.w	r3, r7, #8
 80009a4:	4618      	mov	r0, r3
 80009a6:	f000 fa8a 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 80009aa:	4603      	mov	r3, r0
 80009ac:	681a      	ldr	r2, [r3, #0]
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	4621      	mov	r1, r4
 80009b4:	4618      	mov	r0, r3
 80009b6:	f000 fa90 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 80009c0:	2301      	movs	r3, #1
 80009c2:	e000      	b.n	80009c6 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 80009c4:	2300      	movs	r3, #0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d01b      	beq.n	8000a02 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009ca:	687c      	ldr	r4, [r7, #4]
 80009cc:	f107 0208 	add.w	r2, r7, #8
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	4611      	mov	r1, r2
 80009d6:	4618      	mov	r0, r3
 80009d8:	f000 faa1 	bl	8000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80009dc:	f107 0318 	add.w	r3, r7, #24
 80009e0:	6839      	ldr	r1, [r7, #0]
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fa8c 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80009e8:	f107 0218 	add.w	r2, r7, #24
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	9300      	str	r3, [sp, #0]
 80009f2:	4613      	mov	r3, r2
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80009f6:	6979      	ldr	r1, [r7, #20]
 80009f8:	4620      	mov	r0, r4
 80009fa:	f000 faa0 	bl	8000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80009fe:	4603      	mov	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fa59 	bl	8000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	3304      	adds	r3, #4
      }
 8000a10:	4618      	mov	r0, r3
 8000a12:	3724      	adds	r7, #36	; 0x24
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	08020cbc 	.word	0x08020cbc

08000a1c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_>:
       *
       *  This function only makes sense for multimaps; for map the result will
       *  either be 0 (not present) or 1 (present).
       */
      size_type
      count(const key_type& __x) const
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b084      	sub	sp, #16
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) == _M_t.end() ? 0 : 1; }
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	6839      	ldr	r1, [r7, #0]
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 fac5 	bl	8000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>
 8000a30:	4603      	mov	r3, r0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f000 fafe 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	f107 020c 	add.w	r2, r7, #12
 8000a44:	f107 0308 	add.w	r3, r7, #8
 8000a48:	4611      	mov	r1, r2
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f000 fb05 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x3e>
 8000a56:	2300      	movs	r3, #0
 8000a58:	e000      	b.n	8000a5c <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE5countERS6_+0x40>
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	3710      	adds	r7, #16
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b084      	sub	sp, #16
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8000a6c:	687a      	ldr	r2, [r7, #4]
 8000a6e:	f107 030c 	add.w	r3, r7, #12
 8000a72:	4611      	mov	r1, r2
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fb04 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	1d1a      	adds	r2, r3, #4
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 faf3 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	3710      	adds	r7, #16
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	685a      	ldr	r2, [r3, #4]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	109b      	asrs	r3, r3, #2
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_ZNSt6vectorIP8AnalogInSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4413      	add	r3, r2
      }
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_ZNSaIP8AnalogInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	b082      	sub	sp, #8
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 fad7 	bl	80010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
	{ }
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr

08000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	60f8      	str	r0, [r7, #12]
 8000b2e:	60b9      	str	r1, [r7, #8]
 8000b30:	607a      	str	r2, [r7, #4]
	if (__p)
 8000b32:	68bb      	ldr	r3, [r7, #8]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d005      	beq.n	8000b44 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 faba 	bl	80010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>
      }
 8000b44:	bf00      	nop
 8000b46:	3710      	adds	r7, #16
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f000 face 	bl	80010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3708      	adds	r7, #8
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZNSt20_Rb_tree_key_compareISt4lessIP17ADC_HandleTypeDefEEC1Ev>:
      _Rb_tree_key_compare()
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
      { }
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>:
      }

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    void
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
 8000b82:	6039      	str	r1, [r7, #0]
    _M_erase(_Link_type __x)
    {
      // Erase without rebalancing.
      while (__x != 0)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d012      	beq.n	8000bb0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0x36>
	{
	  _M_erase(_S_right(__x));
 8000b8a:	6838      	ldr	r0, [r7, #0]
 8000b8c:	f000 fabe 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000b90:	4603      	mov	r3, r0
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f7ff fff0 	bl	8000b7a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E>
	  _Link_type __y = _S_left(__x);
 8000b9a:	6838      	ldr	r0, [r7, #0]
 8000b9c:	f000 fac2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000ba0:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000ba2:	6839      	ldr	r1, [r7, #0]
 8000ba4:	6878      	ldr	r0, [r7, #4]
 8000ba6:	f000 fac9 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	  __x = __y;
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000bae:	e7e9      	b.n	8000b84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_eraseEPSt13_Rb_tree_nodeIS5_E+0xa>
	}
    }
 8000bb0:	bf00      	nop
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	6878      	ldr	r0, [r7, #4]
 8000bda:	f000 fac0 	bl	800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	4618      	mov	r0, r3
 8000be2:	3708      	adds	r7, #8
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>:
      _Rb_tree_key_compare()
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
      { }
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000bfe:	b580      	push	{r7, lr}
 8000c00:	b084      	sub	sp, #16
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
 8000c06:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d012      	beq.n	8000c34 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8000c0e:	6838      	ldr	r0, [r7, #0]
 8000c10:	f000 fab0 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8000c14:	4603      	mov	r3, r0
 8000c16:	4619      	mov	r1, r3
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fff0 	bl	8000bfe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8000c1e:	6838      	ldr	r0, [r7, #0]
 8000c20:	f000 fab4 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8000c24:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 fabb 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8000c32:	e7e9      	b.n	8000c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8000c34:	bf00      	nop
 8000c36:	3710      	adds	r7, #16
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8000c3c:	b480      	push	{r7}
 8000c3e:	b083      	sub	sp, #12
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	4618      	mov	r0, r3
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr

08000c54 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE11lower_boundERS6_>:
       *  that matches the given key.  If unsuccessful it returns an iterator
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
 8000c5c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6839      	ldr	r1, [r7, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 faaf 	bl	80011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f000 fab9 	bl	80011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681a      	ldr	r2, [r3, #0]
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	429a      	cmp	r2, r3
 8000ca0:	bf0c      	ite	eq
 8000ca2:	2301      	moveq	r3, #1
 8000ca4:	2300      	movne	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	4618      	mov	r0, r3
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_ZNKSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEE8key_compEv>:
      key_comp() const
 8000cb4:	b590      	push	{r4, r7, lr}
 8000cb6:	b083      	sub	sp, #12
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 faa9 	bl	8001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>
 8000cc4:	bf00      	nop
 8000cc6:	4620      	mov	r0, r4
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd90      	pop	{r4, r7, pc}

08000cce <_ZNKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f000 faa6 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>:
  // Partial specialization of std::less for pointers.
  template<typename _Tp>
    struct less<_Tp*> : public binary_function<_Tp*, _Tp*, bool>
    {
      _GLIBCXX14_CONSTEXPR bool
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000cea:	b480      	push	{r7}
 8000cec:	b085      	sub	sp, #20
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	60f8      	str	r0, [r7, #12]
 8000cf2:	60b9      	str	r1, [r7, #8]
 8000cf4:	607a      	str	r2, [r7, #4]
#else
	if (__builtin_constant_p(__x < __y))
#endif
	  return __x < __y;
#endif
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000cf6:	68ba      	ldr	r2, [r7, #8]
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	429a      	cmp	r2, r3
 8000cfc:	bf34      	ite	cc
 8000cfe:	2301      	movcc	r3, #1
 8000d00:	2300      	movcs	r3, #0
 8000d02:	b2db      	uxtb	r3, r3
      }
 8000d04:	4618      	mov	r0, r3
 8000d06:	3714      	adds	r7, #20
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1ILb1ELb1EEES3_>:
	: _Inherited() { }

      template<bool _NotEmpty = (sizeof...(_Elements) >= 1),
	       _ImplicitCtor<_NotEmpty, const _Elements&...> = true>
	constexpr
	tuple(const _Elements&... __elements)
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	noexcept(__nothrow_constructible<const _Elements&...>())
	: _Inherited(__elements...) { }
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 fa92 	bl	8001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	4618      	mov	r0, r3
 8000d28:	3708      	adds	r7, #8
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1ERKSt17_Rb_tree_iteratorIS5_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    template<typename... _Args>
      typename _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::iterator
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000d4e:	b5b0      	push	{r4, r5, r7, lr}
 8000d50:	b088      	sub	sp, #32
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
 8000d5a:	603b      	str	r3, [r7, #0]
      _M_emplace_hint_unique(const_iterator __pos, _Args&&... __args)
      {
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f000 fa82 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000d62:	4604      	mov	r4, r0
 8000d64:	6838      	ldr	r0, [r7, #0]
 8000d66:	f000 fa89 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000d6a:	4605      	mov	r5, r0
 8000d6c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000d6e:	f000 fa90 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000d72:	4603      	mov	r3, r0
 8000d74:	462a      	mov	r2, r5
 8000d76:	4621      	mov	r1, r4
 8000d78:	68f8      	ldr	r0, [r7, #12]
 8000d7a:	f000 fa95 	bl	80012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>
 8000d7e:	61f8      	str	r0, [r7, #28]

	__try
	  {
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000d80:	69f8      	ldr	r0, [r7, #28]
 8000d82:	f000 fbe3 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f107 0010 	add.w	r0, r7, #16
 8000d8c:	68ba      	ldr	r2, [r7, #8]
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	f000 faad 	bl	80012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>

	    if (__res.second)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d007      	beq.n	8000daa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000d9a:	6939      	ldr	r1, [r7, #16]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 fbe6 	bl	8001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>
 8000da6:	4603      	mov	r3, r0
 8000da8:	e00b      	b.n	8000dc2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEESt17_Rb_tree_iteratorIS5_ESt23_Rb_tree_const_iteratorIS5_EDpOT_+0x74>

	    _M_drop_node(__z);
 8000daa:	69f9      	ldr	r1, [r7, #28]
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f000 f9c5 	bl	800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>
	    return iterator(__res.first);
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	f107 0318 	add.w	r3, r7, #24
 8000db8:	4611      	mov	r1, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f000 fc18 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8000dc0:	69bb      	ldr	r3, [r7, #24]
	__catch(...)
	  {
	    _M_drop_node(__z);
	    __throw_exception_again;
	  }
      }
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bdb0      	pop	{r4, r5, r7, pc}

08000dca <_ZSt4moveIRP8AnalogInEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8000de0:	b5b0      	push	{r4, r5, r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	429a      	cmp	r2, r3
 8000df4:	d011      	beq.n	8000e1a <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8000df6:	687c      	ldr	r4, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	685d      	ldr	r5, [r3, #4]
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f000 fc06 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e02:	4603      	mov	r3, r0
 8000e04:	461a      	mov	r2, r3
 8000e06:	4629      	mov	r1, r5
 8000e08:	4620      	mov	r0, r4
 8000e0a:	f000 fc20 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	1d1a      	adds	r2, r3, #4
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	e00c      	b.n	8000e34 <_ZNSt6vectorIP8AnalogInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff fe32 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 8000e20:	4604      	mov	r4, r0
 8000e22:	6838      	ldr	r0, [r7, #0]
 8000e24:	f000 fbf3 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	4621      	mov	r1, r4
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f000 fc20 	bl	8001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
#if __cplusplus > 201402L
	return back();
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fc99 	bl	800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>
 8000e3a:	4603      	mov	r3, r0
#endif
      }
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bdb0      	pop	{r4, r5, r7, pc}

08000e44 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6839      	ldr	r1, [r7, #0]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 fca5 	bl	80017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f000 fcaf 	bl	80017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8000e72:	4603      	mov	r3, r0
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	bf0c      	ite	eq
 8000e92:	2301      	moveq	r3, #1
 8000e94:	2300      	movne	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	370c      	adds	r7, #12
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <_ZNKSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8000ea4:	b590      	push	{r4, r7, lr}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f000 fc9f 	bl	80017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8000eb4:	bf00      	nop
 8000eb6:	4620      	mov	r0, r4
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd90      	pop	{r4, r7, pc}

08000ebe <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 fc9c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_ZNKSt4lessIP3PinEclES1_S1_>:
      operator()(_Tp* __x, _Tp* __y) const _GLIBCXX_NOTHROW
 8000eda:	b480      	push	{r7}
 8000edc:	b085      	sub	sp, #20
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
	return (__UINTPTR_TYPE__)__x < (__UINTPTR_TYPE__)__y;
 8000ee6:	68ba      	ldr	r2, [r7, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	bf34      	ite	cc
 8000eee:	2301      	movcc	r3, #1
 8000ef0:	2300      	movcs	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
      }
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>:
	tuple(const _Elements&... __elements)
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6839      	ldr	r1, [r7, #0]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fc88 	bl	8001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4618      	mov	r0, r3
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8000f1e:	b480      	push	{r7}
 8000f20:	b083      	sub	sp, #12
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	6078      	str	r0, [r7, #4]
 8000f26:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	601a      	str	r2, [r3, #0]
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr

08000f3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000f3e:	b5b0      	push	{r4, r5, r7, lr}
 8000f40:	b088      	sub	sp, #32
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	60f8      	str	r0, [r7, #12]
 8000f46:	60b9      	str	r1, [r7, #8]
 8000f48:	607a      	str	r2, [r7, #4]
 8000f4a:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f98a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8000f52:	4604      	mov	r4, r0
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f000 fc74 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8000f5a:	4605      	mov	r5, r0
 8000f5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f5e:	f000 f998 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8000f62:	4603      	mov	r3, r0
 8000f64:	462a      	mov	r2, r5
 8000f66:	4621      	mov	r1, r4
 8000f68:	68f8      	ldr	r0, [r7, #12]
 8000f6a:	f000 fc75 	bl	8001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8000f6e:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8000f70:	69f8      	ldr	r0, [r7, #28]
 8000f72:	f000 fdc3 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8000f76:	4603      	mov	r3, r0
 8000f78:	f107 0010 	add.w	r0, r7, #16
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	68f9      	ldr	r1, [r7, #12]
 8000f80:	f000 fc8d 	bl	800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d007      	beq.n	8000f9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8000f8a:	6939      	ldr	r1, [r7, #16]
 8000f8c:	697a      	ldr	r2, [r7, #20]
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f000 fdc6 	bl	8001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8000f96:	4603      	mov	r3, r0
 8000f98:	e00b      	b.n	8000fb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8000f9a:	69f9      	ldr	r1, [r7, #28]
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f901 	bl	80011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	f107 0318 	add.w	r3, r7, #24
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fdf8 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8000fb0:	69bb      	ldr	r3, [r7, #24]
      }
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3720      	adds	r7, #32
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bdb0      	pop	{r4, r5, r7, pc}

08000fba <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::const_iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8000fba:	b5b0      	push	{r4, r5, r7, lr}
 8000fbc:	b084      	sub	sp, #16
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	6078      	str	r0, [r7, #4]
 8000fc2:	6039      	str	r1, [r7, #0]
    find(const _Key& __k) const
    {
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 fdfa 	bl	8001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8000fca:	4604      	mov	r4, r0
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f000 fe02 	bl	8001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f000 fe08 	bl	8001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f000 f828 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 020c 	add.w	r2, r7, #12
 8000ff0:	f107 0308 	add.w	r3, r7, #8
 8000ff4:	4611      	mov	r1, r2
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f82f 	bl	800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8000ffc:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d110      	bne.n	8001024 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8001002:	687c      	ldr	r4, [r7, #4]
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fe22 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001010:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	461a      	mov	r2, r3
 8001016:	4629      	mov	r1, r5
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff fe66 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d004      	beq.n	800102e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f000 f807 	bl	8001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>
 800102a:	4603      	mov	r3, r0
 800102c:	e000      	b.n	8001030 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4findERS3_+0x76>
 800102e:	68bb      	ldr	r3, [r7, #8]
    }
 8001030:	4618      	mov	r0, r3
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bdb0      	pop	{r4, r5, r7, pc}

08001038 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	1d1a      	adds	r2, r3, #4
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4611      	mov	r1, r2
 800104a:	4618      	mov	r0, r3
 800104c:	f000 fe0e 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4618      	mov	r0, r3
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
 8001062:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	429a      	cmp	r2, r3
 800106e:	bf0c      	ite	eq
 8001070:	2301      	moveq	r3, #1
 8001072:	2300      	movne	r3, #0
 8001074:	b2db      	uxtb	r3, r3
 8001076:	4618      	mov	r0, r3
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8001082:	b480      	push	{r7}
 8001084:	b083      	sub	sp, #12
 8001086:	af00      	add	r7, sp, #0
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInEC1Ev>:
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      _GLIBCXX20_CONSTEXPR
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80010a2:	b480      	push	{r7}
 80010a4:	b083      	sub	sp, #12
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4618      	mov	r0, r3
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	617b      	str	r3, [r7, #20]
      [[__gnu__::__always_inline__]]
      constexpr void
      deallocate(_Tp* __p, size_t __n)
      {
#ifdef __cpp_lib_is_constant_evaluated
	if (std::is_constant_evaluated())
 80010d0:	f7ff f926 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x2a>
	  {
	    ::operator delete(__p);
 80010da:	69b8      	ldr	r0, [r7, #24]
 80010dc:	f01f fa32 	bl	8020544 <_ZdlPv>
	    return;
 80010e0:	e005      	b.n	80010ee <_ZNSt16allocator_traitsISaIP8AnalogInEE10deallocateERS2_PS1_j+0x36>
	  }
#endif
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	69b9      	ldr	r1, [r7, #24]
 80010e6:	69f8      	ldr	r0, [r7, #28]
 80010e8:	f001 fa62 	bl	80025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEC1Ev>:
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	4618      	mov	r0, r3
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4618      	mov	r0, r3
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	6878      	ldr	r0, [r7, #4]
 800114a:	f000 fd9e 	bl	8001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>
	_M_put_node(__p);
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fdaf 	bl	8001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>
      }
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEC1Ev>:
 800115e:	b480      	push	{r7}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	4618      	mov	r0, r3
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 80011ae:	6839      	ldr	r1, [r7, #0]
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f000 fd91 	bl	8001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 80011b6:	6839      	ldr	r1, [r7, #0]
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 fda2 	bl	8001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80011c6:	b590      	push	{r4, r7, lr}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff fcf1 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 80011d6:	4604      	mov	r4, r0
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f000 fda4 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 80011de:	4602      	mov	r2, r0
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	4621      	mov	r1, r4
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f000 fdaa 	bl	8001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd90      	pop	{r4, r7, pc}

080011f4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	1d1a      	adds	r2, r3, #4
 8001200:	f107 030c 	add.w	r3, r7, #12
 8001204:	4611      	mov	r1, r2
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f9f2 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	4618      	mov	r0, r3
 8001210:	3710      	adds	r7, #16
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}

08001216 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8key_compEv>:
      key_comp() const
 8001216:	b480      	push	{r7}
 8001218:	b083      	sub	sp, #12
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800121e:	bf00      	nop
 8001220:	4618      	mov	r0, r3
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr()
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3310      	adds	r3, #16
 8001238:	4618      	mov	r0, r3
 800123a:	f000 fdb3 	bl	8001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 800123e:	4603      	mov	r3, r0
 8001240:	4618      	mov	r0, r3
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 fdb0 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001292:	b480      	push	{r7}
 8001294:	b083      	sub	sp, #12
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_create_node(_Args&&... __args)
 80012a8:	b5b0      	push	{r4, r5, r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
 80012b4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80012b6:	68f8      	ldr	r0, [r7, #12]
 80012b8:	f000 fd8f 	bl	8001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>
 80012bc:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80012be:	68b8      	ldr	r0, [r7, #8]
 80012c0:	f7ff ffd1 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80012c4:	4604      	mov	r4, r0
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff ffd8 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80012cc:	4605      	mov	r5, r0
 80012ce:	6838      	ldr	r0, [r7, #0]
 80012d0:	f7ff ffdf 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80012d4:	4603      	mov	r3, r0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	462b      	mov	r3, r5
 80012da:	4622      	mov	r2, r4
 80012dc:	6979      	ldr	r1, [r7, #20]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fd8c 	bl	8001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>
	  return __tmp;
 80012e4:	697b      	ldr	r3, [r7, #20]
	}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bdb0      	pop	{r4, r5, r7, pc}

080012ee <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80012ee:	b5b0      	push	{r4, r5, r7, lr}
 80012f0:	b08c      	sub	sp, #48	; 0x30
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 fda9 	bl	8001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>
 8001304:	4603      	mov	r3, r0
 8001306:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8001308:	69bc      	ldr	r4, [r7, #24]
 800130a:	68b8      	ldr	r0, [r7, #8]
 800130c:	f000 fd0b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001310:	4603      	mov	r3, r0
 8001312:	429c      	cmp	r4, r3
 8001314:	bf0c      	ite	eq
 8001316:	2301      	moveq	r3, #1
 8001318:	2300      	movne	r3, #0
 800131a:	b2db      	uxtb	r3, r3
 800131c:	2b00      	cmp	r3, #0
 800131e:	d032      	beq.n	8001386 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x98>
	  if (size() > 0
 8001320:	68b8      	ldr	r0, [r7, #8]
 8001322:	f000 fda9 	bl	8001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>
 8001326:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8001328:	2b00      	cmp	r3, #0
 800132a:	d015      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 800132c:	68bc      	ldr	r4, [r7, #8]
 800132e:	68b8      	ldr	r0, [r7, #8]
 8001330:	f000 fdae 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001334:	4603      	mov	r3, r0
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4618      	mov	r0, r3
 800133a:	f000 fc8b 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800133e:	4603      	mov	r3, r0
 8001340:	6819      	ldr	r1, [r3, #0]
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f7ff fcce 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6a>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x6c>
 8001358:	2300      	movs	r3, #0
	  if (size() > 0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d00c      	beq.n	8001378 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68b8      	ldr	r0, [r7, #8]
 8001364:	f000 fd94 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001368:	4602      	mov	r2, r0
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	4619      	mov	r1, r3
 8001370:	68f8      	ldr	r0, [r7, #12]
 8001372:	f000 fd99 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001376:	e0e5      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fda8 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 8001384:	e0de      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001386:	68bc      	ldr	r4, [r7, #8]
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681d      	ldr	r5, [r3, #0]
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fc60 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001394:	4603      	mov	r3, r0
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4629      	mov	r1, r5
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fca4 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d059      	beq.n	800145c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x16e>
	  iterator __before = __pos;
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 80013ac:	69bc      	ldr	r4, [r7, #24]
 80013ae:	68b8      	ldr	r0, [r7, #8]
 80013b0:	f000 fe1a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013b4:	4603      	mov	r3, r0
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	429c      	cmp	r4, r3
 80013ba:	bf0c      	ite	eq
 80013bc:	2301      	moveq	r3, #1
 80013be:	2300      	movne	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00d      	beq.n	80013e2 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80013c6:	68b8      	ldr	r0, [r7, #8]
 80013c8:	f000 fe0e 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013cc:	4604      	mov	r4, r0
 80013ce:	68b8      	ldr	r0, [r7, #8]
 80013d0:	f000 fe0a 	bl	8001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>
 80013d4:	4603      	mov	r3, r0
 80013d6:	461a      	mov	r2, r3
 80013d8:	4621      	mov	r1, r4
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	f000 fe10 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80013e0:	e0b0      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80013e2:	68bc      	ldr	r4, [r7, #8]
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fe22 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
 80013ee:	4603      	mov	r3, r0
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f000 fc2e 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80013f8:	4603      	mov	r3, r0
 80013fa:	6819      	ldr	r1, [r3, #0]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fc71 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d01f      	beq.n	800144e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fe7b 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	bf0c      	ite	eq
 800141c:	2301      	moveq	r3, #1
 800141e:	2300      	movne	r3, #0
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00a      	beq.n	800143c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8001426:	2300      	movs	r3, #0
 8001428:	623b      	str	r3, [r7, #32]
 800142a:	f107 0214 	add.w	r2, r7, #20
 800142e:	f107 0320 	add.w	r3, r7, #32
 8001432:	4619      	mov	r1, r3
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fd37 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800143a:	e083      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800143c:	f107 0218 	add.w	r2, r7, #24
 8001440:	f107 0318 	add.w	r3, r7, #24
 8001444:	4619      	mov	r1, r3
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	f000 fdda 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800144c:	e07a      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	683a      	ldr	r2, [r7, #0]
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 fd3d 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800145a:	e073      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800145c:	68bc      	ldr	r4, [r7, #8]
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4618      	mov	r0, r3
 8001462:	f000 fbf7 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001466:	4603      	mov	r3, r0
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	461a      	mov	r2, r3
 8001470:	4620      	mov	r0, r4
 8001472:	f7ff fc3a 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d059      	beq.n	8001530 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x242>
	  iterator __after = __pos;
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001480:	69bc      	ldr	r4, [r7, #24]
 8001482:	68b8      	ldr	r0, [r7, #8]
 8001484:	f000 fd04 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 8001488:	4603      	mov	r3, r0
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	429c      	cmp	r4, r3
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800149a:	2300      	movs	r3, #0
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
 800149e:	68b8      	ldr	r0, [r7, #8]
 80014a0:	f000 fcf6 	bl	8001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014aa:	4619      	mov	r1, r3
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	f000 fcfb 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80014b2:	e047      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80014b4:	68bc      	ldr	r4, [r7, #8]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681d      	ldr	r5, [r3, #0]
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fdc8 	bl	8002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>
 80014c4:	4603      	mov	r3, r0
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 fbc3 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80014ce:	4603      	mov	r3, r0
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4629      	mov	r1, r5
 80014d6:	4620      	mov	r0, r4
 80014d8:	f7ff fc07 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d01f      	beq.n	8001522 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff fe11 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80014fa:	2300      	movs	r3, #0
 80014fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80014fe:	f107 0218 	add.w	r2, r7, #24
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4619      	mov	r1, r3
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 fccd 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800150e:	e019      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001510:	f107 0210 	add.w	r2, r7, #16
 8001514:	f107 0310 	add.w	r3, r7, #16
 8001518:	4619      	mov	r1, r3
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 fd70 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001520:	e010      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	68b9      	ldr	r1, [r7, #8]
 8001528:	4618      	mov	r0, r3
 800152a:	f000 fcd3 	bl	8001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>
 800152e:	e009      	b.n	8001544 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS5_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001530:	2300      	movs	r3, #0
 8001532:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001534:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001538:	f107 0318 	add.w	r3, r7, #24
 800153c:	4619      	mov	r1, r3
 800153e:	68f8      	ldr	r0, [r7, #12]
 8001540:	f000 fd99 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001544:	68f8      	ldr	r0, [r7, #12]
 8001546:	3730      	adds	r7, #48	; 0x30
 8001548:	46bd      	mov	sp, r7
 800154a:	bdb0      	pop	{r4, r5, r7, pc}

0800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>:
      _S_key(_Const_Link_type __x)
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 fda4 	bl	80020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 800155a:	4602      	mov	r2, r0
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	4611      	mov	r1, r2
 8001562:	4618      	mov	r0, r3
 8001564:	f000 fdab 	bl	80020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>
 8001568:	4603      	mov	r3, r0
      }
 800156a:	4618      	mov	r0, r3
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001572:	b5b0      	push	{r4, r5, r7, lr}
 8001574:	b086      	sub	sp, #24
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
 800157e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d119      	bne.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001586:	68f8      	ldr	r0, [r7, #12]
 8001588:	f000 fbcd 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 800158c:	4602      	mov	r2, r0
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4293      	cmp	r3, r2
 8001592:	d012      	beq.n	80015ba <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001594:	68fc      	ldr	r4, [r7, #12]
 8001596:	6838      	ldr	r0, [r7, #0]
 8001598:	f7ff ffd8 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 800159c:	4603      	mov	r3, r0
 800159e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f000 fb57 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80015a6:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4629      	mov	r1, r5
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff fb9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	e000      	b.n	80015c0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSD_PSt13_Rb_tree_nodeIS5_E+0x4e>
 80015be:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80015c0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80015c6:	7df8      	ldrb	r0, [r7, #23]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6839      	ldr	r1, [r7, #0]
 80015cc:	f01f f82a 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80015da:	f107 0310 	add.w	r3, r7, #16
 80015de:	6839      	ldr	r1, [r7, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 f805 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80015e6:	693b      	ldr	r3, [r7, #16]
    }
 80015e8:	4618      	mov	r0, r3
 80015ea:	3718      	adds	r7, #24
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bdb0      	pop	{r4, r5, r7, pc}

080015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    }

#if __cplusplus > 201703L
  template<typename _Tp, typename... _Args>
    constexpr auto
    construct_at(_Tp* __location, _Args&&... __args)
 8001624:	b590      	push	{r4, r7, lr}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    noexcept(noexcept(::new((void*)0) _Tp(std::declval<_Args>()...)))
    -> decltype(::new((void*)0) _Tp(std::declval<_Args>()...))
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800162e:	6838      	ldr	r0, [r7, #0]
 8001630:	f7ff ffed 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001634:	4603      	mov	r3, r0
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	4619      	mov	r1, r3
 800163c:	2004      	movs	r0, #4
 800163e:	f7fe fe77 	bl	8000330 <_ZnwjPv>
 8001642:	4603      	mov	r3, r0
 8001644:	601c      	str	r4, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	bd90      	pop	{r4, r7, pc}

0800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800164e:	b580      	push	{r7, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
 8001654:	60f8      	str	r0, [r7, #12]
 8001656:	60b9      	str	r1, [r7, #8]
 8001658:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f7ff ffd7 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 8001660:	4603      	mov	r3, r0
 8001662:	4619      	mov	r1, r3
 8001664:	68b8      	ldr	r0, [r7, #8]
 8001666:	f7ff ffdd 	bl	8001624 <_ZSt12construct_atIP8AnalogInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
#endif
	}
 800166a:	bf00      	nop
 800166c:	3710      	adds	r7, #16
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8001674:	b5b0      	push	{r4, r5, r7, lr}
 8001676:	b08c      	sub	sp, #48	; 0x30
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8001680:	4a39      	ldr	r2, [pc, #228]	; (8001768 <_ZNSt6vectorIP8AnalogInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8001682:	2101      	movs	r1, #1
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f000 fd26 	bl	80020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>
 800168a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7ff f9e3 	bl	8000a64 <_ZNSt6vectorIP8AnalogInSaIS1_EE5beginEv>
 800169e:	4603      	mov	r3, r0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	f107 0214 	add.w	r2, r7, #20
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4611      	mov	r1, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd59 	bl	8002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80016b2:	4603      	mov	r3, r0
 80016b4:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80016ba:	4618      	mov	r0, r3
 80016bc:	f000 fd67 	bl	800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>
 80016c0:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	61bb      	str	r3, [r7, #24]
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80016c6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	18d5      	adds	r5, r2, r3
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ff9c 	bl	800160e <_ZSt7forwardIP8AnalogInEOT_RNSt16remove_referenceIS2_E4typeE>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4629      	mov	r1, r5
 80016dc:	4620      	mov	r0, r4
 80016de:	f7ff ffb6 	bl	800164e <_ZNSt16allocator_traitsISaIP8AnalogInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80016e2:	2300      	movs	r3, #0
 80016e4:	61bb      	str	r3, [r7, #24]

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff96 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 80016f0:	4603      	mov	r3, r0
 80016f2:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 fd71 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80016fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80016fe:	69fa      	ldr	r2, [r7, #28]
 8001700:	4621      	mov	r1, r4
 8001702:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001704:	f000 fd57 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001708:	61b8      	str	r0, [r7, #24]

	      ++__new_finish;
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	3304      	adds	r3, #4
 800170e:	61bb      	str	r3, [r7, #24]

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001710:	f107 0308 	add.w	r3, r7, #8
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff81 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800171a:	4603      	mov	r3, r0
 800171c:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	f000 fd5c 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8001726:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800172c:	4620      	mov	r0, r4
 800172e:	f000 fd42 	bl	80021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8001732:	61b8      	str	r0, [r7, #24]
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8001734:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8001740:	461a      	mov	r2, r3
 8001742:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001744:	f7ff f9ef 	bl	8000b26 <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	69fa      	ldr	r2, [r7, #28]
 800175a:	441a      	add	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	609a      	str	r2, [r3, #8]
    }
 8001760:	bf00      	nop
 8001762:	3730      	adds	r7, #48	; 0x30
 8001764:	46bd      	mov	sp, r7
 8001766:	bdb0      	pop	{r4, r5, r7, pc}
 8001768:	08020aa0 	.word	0x08020aa0

0800176c <_ZNSt6vectorIP8AnalogInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff f985 	bl	8000a84 <_ZNSt6vectorIP8AnalogInSaIS1_EE3endEv>
 800177a:	4603      	mov	r3, r0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	f107 030c 	add.w	r3, r7, #12
 8001782:	2101      	movs	r1, #1
 8001784:	4618      	mov	r0, r3
 8001786:	f000 fd43 	bl	8002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>
 800178a:	4603      	mov	r3, r0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	f107 0308 	add.w	r3, r7, #8
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe ff75 	bl	8000682 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEdeEv>
 8001798:	4603      	mov	r3, r0
      }
 800179a:	4618      	mov	r0, r3
 800179c:	3710      	adds	r7, #16
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 80017a2:	b590      	push	{r4, r7, lr}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff fa45 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80017b2:	4604      	mov	r4, r0
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	f000 fd44 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80017ba:	4602      	mov	r2, r0
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	4621      	mov	r1, r4
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 fd4a 	bl	800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 80017c6:	4603      	mov	r3, r0
 80017c8:	4618      	mov	r0, r3
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd90      	pop	{r4, r7, pc}

080017d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d1a      	adds	r2, r3, #4
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4611      	mov	r1, r2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 f9dc 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80017fa:	bf00      	nop
 80017fc:	4618      	mov	r0, r3
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr()
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3310      	adds	r3, #16
 8001814:	4618      	mov	r0, r3
 8001816:	f000 fd53 	bl	80022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800181a:	4603      	mov	r3, r0
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1ES3_>:
      constexpr _Tuple_impl(const _Head& __head)
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6839      	ldr	r1, [r7, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd50 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr

08001858 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b088      	sub	sp, #32
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f000 fd45 	bl	80022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 800186c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800186e:	68b8      	ldr	r0, [r7, #8]
 8001870:	f7ff fcf9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001874:	4604      	mov	r4, r0
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f7ff ffe3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800187c:	4605      	mov	r5, r0
 800187e:	6838      	ldr	r0, [r7, #0]
 8001880:	f7ff fd07 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001884:	4603      	mov	r3, r0
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	462b      	mov	r3, r5
 800188a:	4622      	mov	r2, r4
 800188c:	6979      	ldr	r1, [r7, #20]
 800188e:	68f8      	ldr	r0, [r7, #12]
 8001890:	f000 fd42 	bl	8002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8001894:	697b      	ldr	r3, [r7, #20]
	}
 8001896:	4618      	mov	r0, r3
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bdb0      	pop	{r4, r5, r7, pc}

0800189e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800189e:	b5b0      	push	{r4, r5, r7, lr}
 80018a0:	b08c      	sub	sp, #48	; 0x30
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80018ac:	1d3b      	adds	r3, r7, #4
 80018ae:	4618      	mov	r0, r3
 80018b0:	f000 fd5f 	bl	8002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>
 80018b4:	4603      	mov	r3, r0
 80018b6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80018b8:	69bc      	ldr	r4, [r7, #24]
 80018ba:	68b8      	ldr	r0, [r7, #8]
 80018bc:	f000 fcc1 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80018c0:	4603      	mov	r3, r0
 80018c2:	429c      	cmp	r4, r3
 80018c4:	bf0c      	ite	eq
 80018c6:	2301      	moveq	r3, #1
 80018c8:	2300      	movne	r3, #0
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d032      	beq.n	8001936 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 80018d0:	68b8      	ldr	r0, [r7, #8]
 80018d2:	f000 fd5f 	bl	8002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 80018d6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 80018dc:	68bc      	ldr	r4, [r7, #8]
 80018de:	68b8      	ldr	r0, [r7, #8]
 80018e0:	f000 fd64 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 80018e4:	4603      	mov	r3, r0
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f000 fd6b 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80018ee:	4603      	mov	r3, r0
 80018f0:	6819      	ldr	r1, [r3, #0]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	4620      	mov	r0, r4
 80018fa:	f7ff faee 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8001908:	2300      	movs	r3, #0
	  if (size() > 0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00c      	beq.n	8001928 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800190e:	2300      	movs	r3, #0
 8001910:	61fb      	str	r3, [r7, #28]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	f000 fd4a 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001918:	4602      	mov	r2, r0
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	68f8      	ldr	r0, [r7, #12]
 8001922:	f000 fac1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001926:	e0e5      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	683a      	ldr	r2, [r7, #0]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	4618      	mov	r0, r3
 8001930:	f000 fd54 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001934:	e0de      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8001936:	68bc      	ldr	r4, [r7, #8]
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681d      	ldr	r5, [r3, #0]
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	4618      	mov	r0, r3
 8001940:	f000 fd40 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001944:	4603      	mov	r3, r0
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	461a      	mov	r2, r3
 800194a:	4629      	mov	r1, r5
 800194c:	4620      	mov	r0, r4
 800194e:	f7ff fac4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d059      	beq.n	8001a0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800195c:	69bc      	ldr	r4, [r7, #24]
 800195e:	68b8      	ldr	r0, [r7, #8]
 8001960:	f000 fdc6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001964:	4603      	mov	r3, r0
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	429c      	cmp	r4, r3
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d00d      	beq.n	8001992 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8001976:	68b8      	ldr	r0, [r7, #8]
 8001978:	f000 fdba 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800197c:	4604      	mov	r4, r0
 800197e:	68b8      	ldr	r0, [r7, #8]
 8001980:	f000 fdb6 	bl	80024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8001984:	4603      	mov	r3, r0
 8001986:	461a      	mov	r2, r3
 8001988:	4621      	mov	r1, r4
 800198a:	68f8      	ldr	r0, [r7, #12]
 800198c:	f000 fb38 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001990:	e0b0      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8001992:	68bc      	ldr	r4, [r7, #8]
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4618      	mov	r0, r3
 800199a:	f000 fdb5 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
 800199e:	4603      	mov	r3, r0
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 fd0e 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80019a8:	4603      	mov	r3, r0
 80019aa:	6819      	ldr	r1, [r3, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	461a      	mov	r2, r3
 80019b2:	4620      	mov	r0, r4
 80019b4:	f7ff fa91 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d01f      	beq.n	80019fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fbd7 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00a      	beq.n	80019ec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 80019d6:	2300      	movs	r3, #0
 80019d8:	623b      	str	r3, [r7, #32]
 80019da:	f107 0214 	add.w	r2, r7, #20
 80019de:	f107 0320 	add.w	r3, r7, #32
 80019e2:	4619      	mov	r1, r3
 80019e4:	68f8      	ldr	r0, [r7, #12]
 80019e6:	f000 fa5f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80019ea:	e083      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 80019ec:	f107 0218 	add.w	r2, r7, #24
 80019f0:	f107 0318 	add.w	r3, r7, #24
 80019f4:	4619      	mov	r1, r3
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f000 fb02 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80019fc:	e07a      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	68b9      	ldr	r1, [r7, #8]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f000 fce9 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001a0a:	e073      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8001a0c:	68bc      	ldr	r4, [r7, #8]
 8001a0e:	69bb      	ldr	r3, [r7, #24]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f000 fcd7 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a16:	4603      	mov	r3, r0
 8001a18:	6819      	ldr	r1, [r3, #0]
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4620      	mov	r0, r4
 8001a22:	f7ff fa5a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d059      	beq.n	8001ae0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8001a30:	69bc      	ldr	r4, [r7, #24]
 8001a32:	68b8      	ldr	r0, [r7, #8]
 8001a34:	f000 fcba 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	429c      	cmp	r4, r3
 8001a3e:	bf0c      	ite	eq
 8001a40:	2301      	moveq	r3, #1
 8001a42:	2300      	movne	r3, #0
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d00c      	beq.n	8001a64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001a4e:	68b8      	ldr	r0, [r7, #8]
 8001a50:	f000 fcac 	bl	80023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 fa23 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001a62:	e047      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8001a64:	68bc      	ldr	r4, [r7, #8]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681d      	ldr	r5, [r3, #0]
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f000 fd5b 	bl	800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>
 8001a74:	4603      	mov	r3, r0
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fca3 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4629      	mov	r1, r5
 8001a86:	4620      	mov	r0, r4
 8001a88:	f7ff fa27 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d01f      	beq.n	8001ad2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fb6d 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	bf0c      	ite	eq
 8001aa0:	2301      	moveq	r3, #1
 8001aa2:	2300      	movne	r3, #0
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00a      	beq.n	8001ac0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8001aaa:	2300      	movs	r3, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	f107 0218 	add.w	r2, r7, #24
 8001ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	68f8      	ldr	r0, [r7, #12]
 8001aba:	f000 f9f5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8001abe:	e019      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8001ac0:	f107 0210 	add.w	r2, r7, #16
 8001ac4:	f107 0310 	add.w	r3, r7, #16
 8001ac8:	4619      	mov	r1, r3
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f000 fa98 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8001ad0:	e010      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	68b9      	ldr	r1, [r7, #8]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fc7f 	bl	80023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8001ade:	e009      	b.n	8001af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ae4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001ae8:	f107 0318 	add.w	r3, r7, #24
 8001aec:	4619      	mov	r1, r3
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fac1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	3730      	adds	r7, #48	; 0x30
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}

08001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fd21 	bl	800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 fd28 	bl	8002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>
 8001b18:	4603      	mov	r3, r0
      }
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001b22:	b5b0      	push	{r4, r5, r7, lr}
 8001b24:	b086      	sub	sp, #24
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	60f8      	str	r0, [r7, #12]
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d119      	bne.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	f000 fb83 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d012      	beq.n	8001b6a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b44:	68fc      	ldr	r4, [r7, #12]
 8001b46:	6838      	ldr	r0, [r7, #0]
 8001b48:	f7ff ffd8 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f000 fc37 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001b56:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	4629      	mov	r1, r5
 8001b5e:	4620      	mov	r0, r4
 8001b60:	f7ff f9bb 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d001      	beq.n	8001b6e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8001b6e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8001b70:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8001b76:	7df8      	ldrb	r0, [r7, #23]
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6839      	ldr	r1, [r7, #0]
 8001b7c:	f01e fd52 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	695b      	ldr	r3, [r3, #20]
 8001b84:	1c5a      	adds	r2, r3, #1
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8001b8a:	f107 0310 	add.w	r3, r7, #16
 8001b8e:	6839      	ldr	r1, [r7, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f805 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8001b96:	693b      	ldr	r3, [r7, #16]
    }
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bdb0      	pop	{r4, r5, r7, pc}

08001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
      }
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8001bd6:	b480      	push	{r7}
 8001bd8:	b083      	sub	sp, #12
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	4618      	mov	r0, r3
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr

08001bee <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001bee:	b590      	push	{r4, r7, lr}
 8001bf0:	b087      	sub	sp, #28
 8001bf2:	af00      	add	r7, sp, #0
 8001bf4:	60f8      	str	r0, [r7, #12]
 8001bf6:	60b9      	str	r1, [r7, #8]
 8001bf8:	607a      	str	r2, [r7, #4]
 8001bfa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d01d      	beq.n	8001c3e <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001c02:	68fc      	ldr	r4, [r7, #12]
 8001c04:	68b8      	ldr	r0, [r7, #8]
 8001c06:	f7ff fca1 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	6819      	ldr	r1, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	461a      	mov	r2, r3
 8001c14:	4620      	mov	r0, r4
 8001c16:	f7ff f868 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d006      	beq.n	8001c34 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	68b8      	ldr	r0, [r7, #8]
 8001c2c:	f000 fca8 	bl	8002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8001c30:	60b8      	str	r0, [r7, #8]
 8001c32:	e7e3      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001c34:	68b8      	ldr	r0, [r7, #8]
 8001c36:	f000 fcaf 	bl	8002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8001c3a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001c3c:	e7de      	b.n	8001bfc <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS5_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8001c3e:	f107 0314 	add.w	r3, r7, #20
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f000 f811 	bl	8001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>
 8001c4a:	697b      	ldr	r3, [r7, #20]
    }
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	371c      	adds	r7, #28
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}

08001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f7ff fc75 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001c8a:	b590      	push	{r4, r7, lr}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f000 fc9a 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001c9a:	4604      	mov	r4, r0
 8001c9c:	6838      	ldr	r0, [r7, #0]
 8001c9e:	f7ff fac5 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4620      	mov	r0, r4
 8001ca8:	f000 fc9c 	bl	80025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>
      }
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}

08001cb4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS5_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fc85 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	6839      	ldr	r1, [r7, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f000 fc96 	bl	80025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>
 8001cd0:	bf00      	nop
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001cd8:	b590      	push	{r4, r7, lr}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 fca9 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001ce8:	4604      	mov	r4, r0
 8001cea:	6838      	ldr	r0, [r7, #0]
 8001cec:	f7ff fd8c 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4620      	mov	r0, r4
 8001cf6:	f000 fcab 	bl	8002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}

08001d02 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
 8001d0a:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f000 fc94 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2201      	movs	r2, #1
 8001d16:	6839      	ldr	r1, [r7, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f000 fca5 	bl	8002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>
 8001d1e:	bf00      	nop
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3304      	adds	r3, #4
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001d3e:	b590      	push	{r4, r7, lr}
 8001d40:	b087      	sub	sp, #28
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	60f8      	str	r0, [r7, #12]
 8001d46:	60b9      	str	r1, [r7, #8]
 8001d48:	607a      	str	r2, [r7, #4]
 8001d4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01d      	beq.n	8001d8e <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8001d52:	68fc      	ldr	r4, [r7, #12]
 8001d54:	68b8      	ldr	r0, [r7, #8]
 8001d56:	f7ff fbf9 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	6819      	ldr	r1, [r3, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	461a      	mov	r2, r3
 8001d64:	4620      	mov	r0, r4
 8001d66:	f7fe ffc0 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d006      	beq.n	8001d84 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	607b      	str	r3, [r7, #4]
 8001d7a:	68b8      	ldr	r0, [r7, #8]
 8001d7c:	f7ff f9d2 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001d80:	60b8      	str	r0, [r7, #8]
 8001d82:	e7e3      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f7ff f9c1 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001d8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8001d8c:	e7de      	b.n	8001d4c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS5_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	6879      	ldr	r1, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fc2b 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001d9a:	697b      	ldr	r3, [r7, #20]
    }
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	371c      	adds	r7, #28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd90      	pop	{r4, r7, pc}

08001da4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:
      const void*
      _M_addr() const noexcept
      { return static_cast<const void*>(&_M_storage); }

      _Tp*
      _M_ptr() noexcept
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fc7a 	bl	80026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	601a      	str	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_get_nodeEv>:
      _M_get_node()
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbf3 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f000 fc65 	bl	80026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>
 8001df2:	4603      	mov	r3, r0
 8001df4:	4618      	mov	r0, r3
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESG_IJEEEEEvPSt13_Rb_tree_nodeIS5_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	b086      	sub	sp, #24
 8001e02:	af02      	add	r7, sp, #8
 8001e04:	60f8      	str	r0, [r7, #12]
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4619      	mov	r1, r3
 8001e10:	2038      	movs	r0, #56	; 0x38
 8001e12:	f7fe fa8d 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 fbd9 	bl	80025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>
 8001e1c:	4604      	mov	r4, r0
 8001e1e:	68b8      	ldr	r0, [r7, #8]
 8001e20:	f7ff fa04 	bl	800122c <_ZNSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>
 8001e24:	4605      	mov	r5, r0
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff fa1d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8001e2c:	4606      	mov	r6, r0
 8001e2e:	6838      	ldr	r0, [r7, #0]
 8001e30:	f7ff fa24 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8001e34:	4680      	mov	r8, r0
 8001e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e38:	f7ff fa2b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	9300      	str	r3, [sp, #0]
 8001e40:	4643      	mov	r3, r8
 8001e42:	4632      	mov	r2, r6
 8001e44:	4629      	mov	r1, r5
 8001e46:	4620      	mov	r0, r4
 8001e48:	f000 fc95 	bl	8002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>
	}
 8001e4c:	bf00      	nop
 8001e4e:	3710      	adds	r7, #16
 8001e50:	46bd      	mov	sp, r7
 8001e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001e56 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	f107 030c 	add.w	r3, r7, #12
 8001e66:	4611      	mov	r1, r2
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f7ff fbc1 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <_ZNKSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	4618      	mov	r0, r3
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea6:	4770      	bx	lr

08001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>:

      template<typename _U2, typename
	       enable_if<_PCCP::template
			   _CopyMovePair<true, _T1, _U2>(),
                         bool>::type=true>
       constexpr pair(const _T1& __x, _U2&& __y)
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
       : first(__x), second(std::forward<_U2>(__y)) { }
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f000 fc76 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8001ed4:	b5b0      	push	{r4, r5, r7, lr}
 8001ed6:	b08a      	sub	sp, #40	; 0x28
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8001ee0:	68b8      	ldr	r0, [r7, #8]
 8001ee2:	f7fe fe69 	bl	8000bb8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_M_beginEv>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8001eea:	68b8      	ldr	r0, [r7, #8]
 8001eec:	f7ff ff1b 	bl	8001d26 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_M_endEv>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d023      	beq.n	8001f48 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8001f04:	68bc      	ldr	r4, [r7, #8]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681d      	ldr	r5, [r3, #0]
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff fb1d 	bl	800154c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt13_Rb_tree_nodeIS5_E>
 8001f12:	4603      	mov	r3, r0
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	461a      	mov	r2, r3
 8001f18:	4629      	mov	r1, r5
 8001f1a:	4620      	mov	r0, r4
 8001f1c:	f7fe fee5 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8001f26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x66>
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff f8f7 	bl	8001124 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPSt18_Rb_tree_node_base>
 8001f36:	4603      	mov	r3, r0
 8001f38:	e004      	b.n	8001f44 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x70>
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f8e5 	bl	800110c <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPSt18_Rb_tree_node_base>
 8001f42:	4603      	mov	r3, r0
 8001f44:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8001f46:	e7d8      	b.n	8001efa <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4611      	mov	r1, r2
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fb4d 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8001f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d01d      	beq.n	8001f9a <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8001f5e:	68b8      	ldr	r0, [r7, #8]
 8001f60:	f000 fc30 	bl	80027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	61fb      	str	r3, [r7, #28]
 8001f68:	f107 021c 	add.w	r2, r7, #28
 8001f6c:	f107 0310 	add.w	r3, r7, #16
 8001f70:	4611      	mov	r1, r2
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fe8a 	bl	8000c8c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEES8_>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d008      	beq.n	8001f90 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8001f7e:	f107 0214 	add.w	r2, r7, #20
 8001f82:	f107 0318 	add.w	r3, r7, #24
 8001f86:	4619      	mov	r1, r3
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f000 fc2c 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001f8e:	e027      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f000 f84c 	bl	8002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8001f9a:	68bc      	ldr	r4, [r7, #8]
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff fe58 	bl	8001c54 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	6819      	ldr	r1, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f7fe fe9b 	bl	8000cea <_ZNKSt4lessIP17ADC_HandleTypeDefEclES1_S1_>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d008      	beq.n	8001fcc <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8001fba:	f107 0214 	add.w	r2, r7, #20
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 fc0e 	bl	80027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>
 8001fca:	e009      	b.n	8001fe0 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8001fcc:	2300      	movs	r3, #0
 8001fce:	623b      	str	r3, [r7, #32]
 8001fd0:	f107 0220 	add.w	r2, r7, #32
 8001fd4:	f107 0310 	add.w	r3, r7, #16
 8001fd8:	4619      	mov	r1, r3
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f000 f84b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	3728      	adds	r7, #40	; 0x28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}

08001fe8 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	330c      	adds	r3, #12
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	370c      	adds	r7, #12
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>:
	       enable_if<_PCCP::template
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800200c:	68b8      	ldr	r0, [r7, #8]
 800200e:	f000 fbce 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002012:	4603      	mov	r3, r0
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fbc7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002020:	4603      	mov	r3, r0
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	605a      	str	r2, [r3, #4]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f01e faee 	bl	8020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8002044:	4602      	mov	r2, r0
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	601a      	str	r2, [r3, #0]
	return *this;
 800204a:	687b      	ldr	r3, [r7, #4]
      }
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f01e fadb 	bl	802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8002066:	4602      	mov	r2, r0
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	601a      	str	r2, [r3, #0]
	return *this;
 800206c:	687b      	ldr	r3, [r7, #4]
      }
 800206e:	4618      	mov	r0, r3
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}

08002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>:
       constexpr pair(_U1&& __x, const _T2& __y)
 8002076:	b580      	push	{r7, lr}
 8002078:	b084      	sub	sp, #16
 800207a:	af00      	add	r7, sp, #0
 800207c:	60f8      	str	r0, [r7, #12]
 800207e:	60b9      	str	r1, [r7, #8]
 8002080:	607a      	str	r2, [r7, #4]
       : first(std::forward<_U1>(__x)), second(__y) { }
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	f000 fb93 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002088:	4603      	mov	r3, r0
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <_ZNKSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEE9_M_valptrEv>:
      _M_valptr() const
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3310      	adds	r3, #16
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fbb2 	bl	8002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>
 80020b4:	4603      	mov	r3, r0
 80020b6:	4618      	mov	r0, r3
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <_ZNKSt10_Select1stISt4pairIKP17ADC_HandleTypeDef3ADCEEclERKS5_>:
      typename _Pair::first_type&
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80020d6:	b590      	push	{r4, r7, lr}
 80020d8:	b087      	sub	sp, #28
 80020da:	af00      	add	r7, sp, #0
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80020e2:	68f8      	ldr	r0, [r7, #12]
 80020e4:	f000 fba4 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 80020e8:	4604      	mov	r4, r0
 80020ea:	68f8      	ldr	r0, [r7, #12]
 80020ec:	f7fe fcdb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 80020f0:	4603      	mov	r3, r0
 80020f2:	1ae2      	subs	r2, r4, r3
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	bf34      	ite	cc
 80020fa:	2301      	movcc	r3, #1
 80020fc:	2300      	movcs	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f01e faeb 	bl	80206e0 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f7fe fccb 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002110:	4604      	mov	r4, r0
 8002112:	68f8      	ldr	r0, [r7, #12]
 8002114:	f7fe fcc7 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 8002118:	4603      	mov	r3, r0
 800211a:	613b      	str	r3, [r7, #16]
 800211c:	f107 0208 	add.w	r2, r7, #8
 8002120:	f107 0310 	add.w	r3, r7, #16
 8002124:	4611      	mov	r1, r2
 8002126:	4618      	mov	r0, r3
 8002128:	f000 fb93 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800212c:	4603      	mov	r3, r0
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4423      	add	r3, r4
 8002132:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7fe fcb6 	bl	8000aa6 <_ZNKSt6vectorIP8AnalogInSaIS1_EE4sizeEv>
 800213a:	4602      	mov	r2, r0
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	4293      	cmp	r3, r2
 8002140:	d306      	bcc.n	8002150 <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8002142:	68f8      	ldr	r0, [r7, #12]
 8002144:	f000 fb74 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002148:	4602      	mov	r2, r0
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	4293      	cmp	r3, r2
 800214e:	d904      	bls.n	800215a <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x84>
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 fb6d 	bl	8002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>
 8002156:	4603      	mov	r3, r0
 8002158:	e000      	b.n	800215c <_ZNKSt6vectorIP8AnalogInSaIS1_EE12_M_check_lenEjPKc+0x86>
 800215a:	697b      	ldr	r3, [r7, #20]
      }
 800215c:	4618      	mov	r0, r3
 800215e:	371c      	adds	r7, #28
 8002160:	46bd      	mov	sp, r7
 8002162:	bd90      	pop	{r4, r7, pc}

08002164 <_ZN9__gnu_cxxmiIPP8AnalogInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002164:	b590      	push	{r4, r7, lr}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7fe fa54 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 8002174:	4603      	mov	r3, r0
 8002176:	681c      	ldr	r4, [r3, #0]
 8002178:	6838      	ldr	r0, [r7, #0]
 800217a:	f7fe fa4f 	bl	800061c <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEE4baseEv>
 800217e:	4603      	mov	r3, r0
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	1ae3      	subs	r3, r4, r3
 8002184:	109b      	asrs	r3, r3, #2
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bd90      	pop	{r4, r7, pc}

0800218e <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d006      	beq.n	80021ac <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x1e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 fb69 	bl	800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>
 80021a8:	4603      	mov	r3, r0
 80021aa:	e000      	b.n	80021ae <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE11_M_allocateEj+0x20>
 80021ac:	2300      	movs	r3, #0
      }
 80021ae:	4618      	mov	r0, r3
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80021b6:	b590      	push	{r4, r7, lr}
 80021b8:	b087      	sub	sp, #28
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	60f8      	str	r0, [r7, #12]
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80021c4:	f88d 4000 	strb.w	r4, [sp]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	68b9      	ldr	r1, [r7, #8]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 fb73 	bl	80028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80021d4:	4603      	mov	r3, r0
      }
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}

080021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4618      	mov	r0, r3
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb75 	bl	80028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>
    }
 8002208:	bf00      	nop
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_ZNK9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	425b      	negs	r3, r3
 8002224:	4413      	add	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	f107 020c 	add.w	r2, r7, #12
 800222c:	f107 0308 	add.w	r3, r7, #8
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe ff25 	bl	8001082 <_ZN9__gnu_cxx17__normal_iteratorIPP8AnalogInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4618      	mov	r0, r3
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3304      	adds	r3, #4
 800224e:	4618      	mov	r0, r3
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800225a:	b590      	push	{r4, r7, lr}
 800225c:	b087      	sub	sp, #28
 800225e:	af00      	add	r7, sp, #0
 8002260:	60f8      	str	r0, [r7, #12]
 8002262:	60b9      	str	r1, [r7, #8]
 8002264:	607a      	str	r2, [r7, #4]
 8002266:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d01d      	beq.n	80022aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800226e:	68fc      	ldr	r4, [r7, #12]
 8002270:	68b8      	ldr	r0, [r7, #8]
 8002272:	f7ff fc43 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8002276:	4603      	mov	r3, r0
 8002278:	6819      	ldr	r1, [r3, #0]
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	461a      	mov	r2, r3
 8002280:	4620      	mov	r0, r4
 8002282:	f7fe fe2a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002286:	4603      	mov	r3, r0
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d006      	beq.n	80022a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	607b      	str	r3, [r7, #4]
 8002296:	68b8      	ldr	r0, [r7, #8]
 8002298:	f7fe ff78 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800229c:	60b8      	str	r0, [r7, #8]
 800229e:	e7e3      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80022a0:	68b8      	ldr	r0, [r7, #8]
 80022a2:	f7fe ff67 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80022a6:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80022a8:	e7de      	b.n	8002268 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80022aa:	f107 0314 	add.w	r3, r7, #20
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fc75 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 80022b6:	697b      	ldr	r3, [r7, #20]
    }
 80022b8:	4618      	mov	r0, r3
 80022ba:	371c      	adds	r7, #28
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() noexcept
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fb28 	bl	800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 80022ce:	4603      	mov	r3, r0
 80022d0:	4618      	mov	r0, r3
 80022d2:	3708      	adds	r7, #8
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}

080022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>:
      constexpr _Head_base(const _Head& __h)
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4618      	mov	r0, r3
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f000 f99b 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002304:	4603      	mov	r3, r0
 8002306:	2101      	movs	r1, #1
 8002308:	4618      	mov	r0, r3
 800230a:	f000 fb13 	bl	8002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>
 800230e:	4603      	mov	r3, r0
 8002310:	4618      	mov	r0, r3
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8002318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800231c:	b086      	sub	sp, #24
 800231e:	af02      	add	r7, sp, #8
 8002320:	60f8      	str	r0, [r7, #12]
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4619      	mov	r1, r3
 800232c:	2018      	movs	r0, #24
 800232e:	f7fd ffff 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8002332:	68f8      	ldr	r0, [r7, #12]
 8002334:	f000 f981 	bl	800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8002338:	4604      	mov	r4, r0
 800233a:	68b8      	ldr	r0, [r7, #8]
 800233c:	f7ff fa64 	bl	8001808 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>
 8002340:	4605      	mov	r5, r0
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe ff8f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002348:	4606      	mov	r6, r0
 800234a:	6838      	ldr	r0, [r7, #0]
 800234c:	f7ff fa79 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002350:	4680      	mov	r8, r0
 8002352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002354:	f7fe ff9d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002358:	4603      	mov	r3, r0
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	4643      	mov	r3, r8
 800235e:	4632      	mov	r2, r6
 8002360:	4629      	mov	r1, r5
 8002362:	4620      	mov	r0, r4
 8002364:	f000 fb43 	bl	80029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8002368:	bf00      	nop
 800236a:	3710      	adds	r7, #16
 800236c:	46bd      	mov	sp, r7
 800236e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002372 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP8AnalogInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	f107 030c 	add.w	r3, r7, #12
 8002382:	4611      	mov	r1, r2
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fc0b 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3310      	adds	r3, #16
 80023b8:	4618      	mov	r0, r3
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff fb95 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80023d2:	4603      	mov	r3, r0
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b08a      	sub	sp, #40	; 0x28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f7fe fc27 	bl	8000c3c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80023f2:	68b8      	ldr	r0, [r7, #8]
 80023f4:	f7ff ff25 	bl	8002242 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 80023f8:	4603      	mov	r3, r0
 80023fa:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80023fc:	2301      	movs	r3, #1
 80023fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d023      	beq.n	8002450 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800240c:	68bc      	ldr	r4, [r7, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681d      	ldr	r5, [r3, #0]
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fb71 	bl	8001afc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800241a:	4603      	mov	r3, r0
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	461a      	mov	r2, r3
 8002420:	4629      	mov	r1, r5
 8002422:	4620      	mov	r0, r4
 8002424:	f7fe fd59 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8002428:	4603      	mov	r3, r0
 800242a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800242e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	4618      	mov	r0, r3
 800243a:	f7fe fea7 	bl	800118c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800243e:	4603      	mov	r3, r0
 8002440:	e004      	b.n	800244c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe95 	bl	8001174 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800244a:	4603      	mov	r3, r0
 800244c:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800244e:	e7d8      	b.n	8002402 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	f107 0310 	add.w	r3, r7, #16
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fba1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800245e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002462:	2b00      	cmp	r3, #0
 8002464:	d01d      	beq.n	80024a2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8002466:	68b8      	ldr	r0, [r7, #8]
 8002468:	f000 fadd 	bl	8002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800246c:	4603      	mov	r3, r0
 800246e:	61fb      	str	r3, [r7, #28]
 8002470:	f107 021c 	add.w	r2, r7, #28
 8002474:	f107 0310 	add.w	r3, r7, #16
 8002478:	4611      	mov	r1, r2
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fcfe 	bl	8000e7c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEES9_>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d008      	beq.n	8002498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8002486:	f107 0214 	add.w	r2, r7, #20
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4619      	mov	r1, r3
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fad9 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 8002496:	e027      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8002498:	f107 0310 	add.w	r3, r7, #16
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f833 	bl	8002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80024a2:	68bc      	ldr	r4, [r7, #8]
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff ff8c 	bl	80023c4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80024ac:	4603      	mov	r3, r0
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4620      	mov	r0, r4
 80024b8:	f7fe fd0f 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d008      	beq.n	80024d4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80024c2:	f107 0214 	add.w	r2, r7, #20
 80024c6:	f107 0318 	add.w	r3, r7, #24
 80024ca:	4619      	mov	r1, r3
 80024cc:	68f8      	ldr	r0, [r7, #12]
 80024ce:	f000 fabb 	bl	8002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>
 80024d2:	e009      	b.n	80024e8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80024d4:	2300      	movs	r3, #0
 80024d6:	623b      	str	r3, [r7, #32]
 80024d8:	f107 0220 	add.w	r2, r7, #32
 80024dc:	f107 0310 	add.w	r3, r7, #16
 80024e0:	4619      	mov	r1, r3
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f7ff fdc7 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80024e8:	68f8      	ldr	r0, [r7, #12]
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bdb0      	pop	{r4, r5, r7, pc}

080024f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	330c      	adds	r3, #12
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4618      	mov	r0, r3
 8002516:	f01e f883 	bl	8020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	601a      	str	r2, [r3, #0]
	return *this;
 8002520:	687b      	ldr	r3, [r7, #4]
      }
 8002522:	4618      	mov	r0, r3
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800252a:	b580      	push	{r7, lr}
 800252c:	b082      	sub	sp, #8
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f01e f870 	bl	802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800253c:	4602      	mov	r2, r0
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	601a      	str	r2, [r3, #0]
	return *this;
 8002542:	687b      	ldr	r3, [r7, #4]
      }
 8002544:	4618      	mov	r0, r3
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEE9_M_valptrEv>:
      _M_valptr() const
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3310      	adds	r3, #16
 8002558:	4618      	mov	r0, r3
 800255a:	f000 fa8e 	bl	8002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>
 800255e:	4603      	mov	r3, r0
 8002560:	4618      	mov	r0, r3
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <_ZNKSt10_Select1stISt4pairIKP3PinP8AnalogInEEclERKS6_>:
      operator()(const _Pair& __x) const
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4618      	mov	r0, r3
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE10deallocateEPS2_j>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __t)
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	009b      	lsls	r3, r3, #2
 80025c0:	4619      	mov	r1, r3
 80025c2:	68b8      	ldr	r0, [r7, #8]
 80025c4:	f01d ffc0 	bl	8020548 <_ZdlPvj>
#if __cpp_sized_deallocation
			  , __t * sizeof(_Tp)
#endif
			 );
      }
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4618      	mov	r0, r3
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr

080025e4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE7destroyIS6_EEvRS8_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80025ee:	6838      	ldr	r0, [r7, #0]
 80025f0:	f000 fa4f 	bl	8002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>
	}
 80025f4:	bf00      	nop
 80025f6:	3708      	adds	r7, #8
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002614:	f7fd fe84 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x2a>
	    ::operator delete(__p);
 800261e:	69b8      	ldr	r0, [r7, #24]
 8002620:	f01d ff90 	bl	8020544 <_ZdlPv>
	    return;
 8002624:	e005      	b.n	8002632 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE10deallocateERS8_PS7_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	69b9      	ldr	r1, [r7, #24]
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f000 fb70 	bl	8002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>
      { __a.deallocate(__p, __n); }
 8002630:	bf00      	nop
 8002632:	bf00      	nop
 8002634:	3720      	adds	r7, #32
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4618      	mov	r0, r3
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	f000 fa23 	bl	8002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>
	}
 8002660:	bf00      	nop
 8002662:	3708      	adds	r7, #8
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8002668:	b580      	push	{r7, lr}
 800266a:	b088      	sub	sp, #32
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	607a      	str	r2, [r7, #4]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	61bb      	str	r3, [r7, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8002680:	f7fd fe4e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800268a:	69b8      	ldr	r0, [r7, #24]
 800268c:	f01d ff5a 	bl	8020544 <_ZdlPv>
	    return;
 8002690:	e005      	b.n	800269e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	69b9      	ldr	r1, [r7, #24]
 8002696:	69f8      	ldr	r0, [r7, #28]
 8002698:	f000 fb4c 	bl	8002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800269c:	bf00      	nop
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() noexcept
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4618      	mov	r0, r3
 80026b2:	370c      	adds	r7, #12
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j>:
      allocate(allocator_type& __a, size_type __n)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 80026ce:	f7fd fe27 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d009      	beq.n	80026ec <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80026d8:	68ba      	ldr	r2, [r7, #8]
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	00db      	lsls	r3, r3, #3
 80026e2:	4618      	mov	r0, r3
 80026e4:	f01d ff32 	bl	802054c <_Znwj>
 80026e8:	4603      	mov	r3, r0
 80026ea:	e006      	b.n	80026fa <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE8allocateERS8_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fb31 	bl	8002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>
 80026f6:	4603      	mov	r3, r0
 80026f8:	bf00      	nop
      { return __a.allocate(__n); }
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>:
	noexcept(__nothrow_constructible<_UElements...>())
	: _Inherited(std::forward<_UElements>(__elements)...) {	}

      constexpr tuple(const tuple&) = default;

      constexpr tuple(tuple&&) = default;
 8002702:	b580      	push	{r7, lr}
 8002704:	b082      	sub	sp, #8
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	683a      	ldr	r2, [r7, #0]
 8002710:	4611      	mov	r1, r2
 8002712:	4618      	mov	r0, r3
 8002714:	f000 f9d1 	bl	8002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8002722:	b5b0      	push	{r4, r5, r7, lr}
 8002724:	b088      	sub	sp, #32
 8002726:	af00      	add	r7, sp, #0
 8002728:	60f8      	str	r0, [r7, #12]
 800272a:	60b9      	str	r1, [r7, #8]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7fe fd98 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe fda0 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800273c:	4602      	mov	r2, r0
 800273e:	f107 0318 	add.w	r3, r7, #24
 8002742:	4611      	mov	r1, r2
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ffdc 	bl	8002702 <_ZNSt5tupleIJRKP17ADC_HandleTypeDefEEC1EOS4_>
 800274a:	f107 0418 	add.w	r4, r7, #24
 800274e:	6838      	ldr	r0, [r7, #0]
 8002750:	f7fe fd9f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4619      	mov	r1, r3
 8002758:	2028      	movs	r0, #40	; 0x28
 800275a:	f7fd fde9 	bl	8000330 <_ZnwjPv>
 800275e:	4605      	mov	r5, r0
 8002760:	7f3b      	ldrb	r3, [r7, #28]
 8002762:	4622      	mov	r2, r4
 8002764:	7d39      	ldrb	r1, [r7, #20]
 8002766:	4628      	mov	r0, r5
 8002768:	f000 f9dc 	bl	8002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>
 800276c:	462b      	mov	r3, r5
 800276e:	4618      	mov	r0, r3
 8002770:	3720      	adds	r7, #32
 8002772:	46bd      	mov	sp, r7
 8002774:	bdb0      	pop	{r4, r5, r7, pc}

08002776 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEE9constructIS6_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESE_IJEEEEEvRS8_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8002776:	b5b0      	push	{r4, r5, r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	60f8      	str	r0, [r7, #12]
 800277e:	60b9      	str	r1, [r7, #8]
 8002780:	607a      	str	r2, [r7, #4]
 8002782:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f7fe fd6e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800278a:	4604      	mov	r4, r0
 800278c:	6838      	ldr	r0, [r7, #0]
 800278e:	f7fe fd75 	bl	800127c <_ZSt7forwardISt5tupleIJRKP17ADC_HandleTypeDefEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002792:	4605      	mov	r5, r0
 8002794:	6a38      	ldr	r0, [r7, #32]
 8002796:	f7fe fd7c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800279a:	4603      	mov	r3, r0
 800279c:	462a      	mov	r2, r5
 800279e:	4621      	mov	r1, r4
 80027a0:	68b8      	ldr	r0, [r7, #8]
 80027a2:	f7ff ffbe 	bl	8002722 <_ZSt12construct_atISt4pairIKP17ADC_HandleTypeDef3ADCEJRKSt21piecewise_construct_tSt5tupleIJRS3_EES9_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSE_DpOSF_>
	}
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bdb0      	pop	{r4, r5, r7, pc}

080027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4618      	mov	r0, r3
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	68da      	ldr	r2, [r3, #12]
 80027d0:	f107 030c 	add.w	r3, r7, #12
 80027d4:	4611      	mov	r1, r2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7fe ff0a 	bl	80015f0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP17ADC_HandleTypeDef3ADCEEC1EPSt18_Rb_tree_node_base>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP17ADC_HandleTypeDef3ADCEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	60f8      	str	r0, [r7, #12]
 80027ee:	60b9      	str	r1, [r7, #8]
 80027f0:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 80027f2:	68b8      	ldr	r0, [r7, #8]
 80027f4:	f000 f9aa 	bl	8002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>
 80027f8:	4603      	mov	r3, r0
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f7ff ffd4 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002806:	4603      	mov	r3, r0
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	605a      	str	r2, [r3, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4618      	mov	r0, r3
 8002812:	3710      	adds	r7, #16
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}

08002818 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE6_M_ptrEv>:

      const _Tp*
      _M_ptr() const noexcept
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f99e 	bl	8002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>
 8002826:	4603      	mov	r3, r0
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZNKSt6vectorIP8AnalogInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4618      	mov	r0, r3
 800283c:	f000 f9c2 	bl	8002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 8002840:	4603      	mov	r3, r0
 8002842:	4618      	mov	r0, r3
 8002844:	f000 f9a4 	bl	8002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>
 8002848:	4603      	mov	r3, r0
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
 800285a:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d201      	bcs.n	800286c <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	e000      	b.n	800286e <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 800286c:	687b      	ldr	r3, [r7, #4]
    }
 800286e:	4618      	mov	r0, r3
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800288c:	f7fd fd48 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002890:	4603      	mov	r3, r0
 8002892:	2b00      	cmp	r3, #0
 8002894:	d006      	beq.n	80028a4 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4618      	mov	r0, r3
 800289c:	f01d fe56 	bl	802054c <_Znwj>
 80028a0:	4603      	mov	r3, r0
 80028a2:	e006      	b.n	80028b2 <_ZNSt16allocator_traitsISaIP8AnalogInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	68b9      	ldr	r1, [r7, #8]
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fab0 	bl	8002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>
 80028ae:	4603      	mov	r3, r0
 80028b0:	bf00      	nop
      { return __a.allocate(__n); }
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}

080028ba <_ZNSt6vectorIP8AnalogInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80028ba:	b580      	push	{r7, lr}
 80028bc:	b084      	sub	sp, #16
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
 80028c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	68f8      	ldr	r0, [r7, #12]
 80028d0:	f000 f983 	bl	8002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80028d4:	4603      	mov	r3, r0
      }
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <_ZSt10destroy_atIP8AnalogInEvPT_>:
    destroy_at(_Tp* __location)
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
    }
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <_ZSt8_DestroyIPP8AnalogInEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b082      	sub	sp, #8
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
      // A deleted destructor is trivial, this ensures we reject such types:
      static_assert(is_destructible<_Value_type>::value,
		    "value type is destructible");
#endif
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
 80028fc:	f7fd fd10 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8002900:	4603      	mov	r3, r0
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8002906:	6839      	ldr	r1, [r7, #0]
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f983 	bl	8002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>
 800290e:	e003      	b.n	8002918 <_ZSt8_DestroyIPP8AnalogInEvT_S3_+0x26>
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8002910:	6839      	ldr	r1, [r7, #0]
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f996 	bl	8002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>
    }
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() noexcept
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8002946:	f7fd fceb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d009      	beq.n	8002964 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	4613      	mov	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	4413      	add	r3, r2
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	4618      	mov	r0, r3
 800295c:	f01d fdf6 	bl	802054c <_Znwj>
 8002960:	4603      	mov	r3, r0
 8002962:	e006      	b.n	8002972 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8002964:	2200      	movs	r2, #0
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	68f8      	ldr	r0, [r7, #12]
 800296a:	f000 faae 	bl	8002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>
 800296e:	4603      	mov	r3, r0
 8002970:	bf00      	nop
      { return __a.allocate(__n); }
 8002972:	4618      	mov	r0, r3
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>:
 800297a:	b580      	push	{r7, lr}
 800297c:	b082      	sub	sp, #8
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
 8002982:	6039      	str	r1, [r7, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 f965 	bl	8002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800299a:	b5b0      	push	{r4, r5, r7, lr}
 800299c:	b088      	sub	sp, #32
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80029a8:	68b8      	ldr	r0, [r7, #8]
 80029aa:	f7fe fc5c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7fe ff47 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80029b4:	4602      	mov	r2, r0
 80029b6:	f107 0318 	add.w	r3, r7, #24
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ffdc 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80029c2:	f107 0418 	add.w	r4, r7, #24
 80029c6:	6838      	ldr	r0, [r7, #0]
 80029c8:	f7fe fc63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4619      	mov	r1, r3
 80029d0:	2008      	movs	r0, #8
 80029d2:	f7fd fcad 	bl	8000330 <_ZnwjPv>
 80029d6:	4605      	mov	r5, r0
 80029d8:	7f3b      	ldrb	r3, [r7, #28]
 80029da:	4622      	mov	r2, r4
 80029dc:	7d39      	ldrb	r1, [r7, #20]
 80029de:	4628      	mov	r0, r5
 80029e0:	f000 f96c 	bl	8002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80029e4:	462b      	mov	r3, r5
 80029e6:	4618      	mov	r0, r3
 80029e8:	3720      	adds	r7, #32
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bdb0      	pop	{r4, r5, r7, pc}

080029ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80029ee:	b5b0      	push	{r4, r5, r7, lr}
 80029f0:	b084      	sub	sp, #16
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	60f8      	str	r0, [r7, #12]
 80029f6:	60b9      	str	r1, [r7, #8]
 80029f8:	607a      	str	r2, [r7, #4]
 80029fa:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7fe fc32 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a02:	4604      	mov	r4, r0
 8002a04:	6838      	ldr	r0, [r7, #0]
 8002a06:	f7fe ff1c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f7fe fc40 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8002a12:	4603      	mov	r3, r0
 8002a14:	462a      	mov	r2, r5
 8002a16:	4621      	mov	r1, r4
 8002a18:	68b8      	ldr	r0, [r7, #8]
 8002a1a:	f7ff ffbe 	bl	800299a <_ZSt12construct_atISt4pairIKP3PinP8AnalogInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bdb0      	pop	{r4, r5, r7, pc}

08002a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	f107 030c 	add.w	r3, r7, #12
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff f8b1 	bl	8001ba0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP8AnalogInEEC1EPSt18_Rb_tree_node_base>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP8AnalogInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8002a54:	68b8      	ldr	r0, [r7, #8]
 8002a56:	f000 f945 	bl	8002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fea3 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 f939 	bl	8002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <_ZSt10destroy_atISt4pairIKP17ADC_HandleTypeDef3ADCEEvPT_>:
    destroy_at(_Tp* __location)
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
    }
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <_ZSt10destroy_atISt4pairIKP3PinP8AnalogInEEvPT_>:
    destroy_at(_Tp* __location)
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
    }
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002aba:	b590      	push	{r4, r7, lr}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002ac4:	687c      	ldr	r4, [r7, #4]
 8002ac6:	6838      	ldr	r0, [r7, #0]
 8002ac8:	f000 f968 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 f971 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4620      	mov	r0, r4
 8002ada:	f7ff f96f 	bl	8001dbc <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EEC1ES3_>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>:

  template<class _T1, class _T2>
    template<typename... _Args1, std::size_t... _Indexes1,
             typename... _Args2, std::size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b084      	sub	sp, #16
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]
 8002af4:	703b      	strb	r3, [r7, #0]
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002af6:	68b8      	ldr	r0, [r7, #8]
 8002af8:	f000 f968 	bl	8002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002afc:	4603      	mov	r3, r0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f959 	bl	8002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>
 8002b04:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	3304      	adds	r3, #4
 8002b10:	2224      	movs	r2, #36	; 0x24
 8002b12:	2100      	movs	r1, #0
 8002b14:	4618      	mov	r0, r3
 8002b16:	f01d fe6d 	bl	80207f4 <memset>
      { }
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}

08002b24 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES8_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002b24:	b5b0      	push	{r4, r5, r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af02      	add	r7, sp, #8
 8002b2a:	60f8      	str	r0, [r7, #12]
 8002b2c:	7239      	strb	r1, [r7, #8]
 8002b2e:	607a      	str	r2, [r7, #4]
 8002b30:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002b32:	463a      	mov	r2, r7
 8002b34:	f88d 4000 	strb.w	r4, [sp]
 8002b38:	462b      	mov	r3, r5
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	68f8      	ldr	r0, [r7, #12]
 8002b3e:	f7ff ffd3 	bl	8002ae8 <_ZNSt4pairIKP17ADC_HandleTypeDef3ADCEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS7_IJDpT1_EESt12_Index_tupleIJXspT0_EEESG_IJXspT2_EEE>
      { }
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3710      	adds	r7, #16
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bdb0      	pop	{r4, r5, r7, pc}

08002b4c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEEOT_RNSt16remove_referenceISA_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4618      	mov	r0, r3
 8002b58:	370c      	adds	r7, #12
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr

08002b62 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP17ADC_HandleTypeDef3ADCEE7_M_addrEv>:
      _M_addr() const noexcept
 8002b62:	b480      	push	{r7}
 8002b64:	b083      	sub	sp, #12
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8002b78:	b480      	push	{r7}
 8002b7a:	b083      	sub	sp, #12
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8002b80:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_ZNSt6vectorIP8AnalogInSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8002b98:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8002b9c:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ffea 	bl	8002b78 <_ZNSt16allocator_traitsISaIP8AnalogInEE8max_sizeERKS2_>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8002ba8:	f107 0208 	add.w	r2, r7, #8
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 f917 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	681b      	ldr	r3, [r3, #0]
      }
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3710      	adds	r7, #16
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <_ZNKSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_ZSt12__relocate_aIPP8AnalogInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8002bda:	b5b0      	push	{r4, r5, r7, lr}
 8002bdc:	b084      	sub	sp, #16
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
 8002be6:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f000 f92f 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bee:	4604      	mov	r4, r0
 8002bf0:	68b8      	ldr	r0, [r7, #8]
 8002bf2:	f000 f92b 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bf6:	4605      	mov	r5, r0
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f927 	bl	8002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4629      	mov	r1, r5
 8002c04:	4620      	mov	r0, r4
 8002c06:	f000 f92c 	bl	8002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8002c0a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bdb0      	pop	{r4, r5, r7, pc}

08002c14 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d00a      	beq.n	8002c3c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f939 	bl	8002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 f940 	bl	8002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>
	  for (; __first != __last; ++__first)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	3304      	adds	r3, #4
 8002c38:	607b      	str	r3, [r7, #4]
 8002c3a:	e7f0      	b.n	8002c1e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP8AnalogInEEvT_S5_+0xa>
	}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP8AnalogInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <_ZNSt11_Tuple_implILj0EJRKP3PinEEC1EOS4_>:
      _Tuple_impl(_Tuple_impl&& __in)
 8002c5a:	b590      	push	{r4, r7, lr}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 8002c64:	687c      	ldr	r4, [r7, #4]
 8002c66:	6838      	ldr	r0, [r7, #0]
 8002c68:	f000 f951 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 f95a 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002c74:	4603      	mov	r3, r0
 8002c76:	4619      	mov	r1, r3
 8002c78:	4620      	mov	r0, r4
 8002c7a:	f7ff fb2d 	bl	80022d8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EEC1ES3_>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4618      	mov	r0, r3
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd90      	pop	{r4, r7, pc}

08002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60f8      	str	r0, [r7, #12]
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8002c96:	68b8      	ldr	r0, [r7, #8]
 8002c98:	f000 f951 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f942 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8002ca4:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	605a      	str	r2, [r3, #4]
      { }
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3710      	adds	r7, #16
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8002cbc:	b5b0      	push	{r4, r5, r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	7239      	strb	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
 8002cc8:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8002cca:	463a      	mov	r2, r7
 8002ccc:	f88d 4000 	strb.w	r4, [sp]
 8002cd0:	462b      	mov	r3, r5
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ffd7 	bl	8002c88 <_ZNSt4pairIKP3PinP8AnalogInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bdb0      	pop	{r4, r5, r7, pc}

08002ce4 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr

08002cfa <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP8AnalogInEE7_M_addrEv>:
      _M_addr() const noexcept
 8002cfa:	b480      	push	{r7}
 8002cfc:	b083      	sub	sp, #12
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	370c      	adds	r7, #12
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr

08002d10 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE10deallocateEPS8_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	00db      	lsls	r3, r3, #3
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	00db      	lsls	r3, r3, #3
 8002d26:	4619      	mov	r1, r3
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f01d fc0d 	bl	8020548 <_ZdlPvj>
      }
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4413      	add	r3, r2
 8002d48:	00db      	lsls	r3, r3, #3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68b8      	ldr	r0, [r7, #8]
 8002d4e:	f01d fbfb 	bl	8020548 <_ZdlPvj>
      }
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f8f7 	bl	8002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf8c      	ite	hi
 8002d72:	2301      	movhi	r3, #1
 8002d74:	2300      	movls	r3, #0
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002d7c:	f01d fcad 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002d80:	68ba      	ldr	r2, [r7, #8]
 8002d82:	4613      	mov	r3, r2
 8002d84:	00db      	lsls	r3, r3, #3
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f01d fbde 	bl	802054c <_Znwj>
 8002d90:	4603      	mov	r3, r0
 8002d92:	bf00      	nop
      }
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f8e4 	bl	8002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>
 8002dac:	4603      	mov	r3, r0
 8002dae:	4618      	mov	r0, r3
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <_ZSt7forwardIRKP17ADC_HandleTypeDefEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr

08002dcc <_ZSt3getILj0EJRKP17ADC_HandleTypeDefEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f000 f8d8 	bl	8002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4618      	mov	r0, r3
 8002de0:	3708      	adds	r7, #8
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8002de6:	b480      	push	{r7}
 8002de8:	b083      	sub	sp, #12
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	6078      	str	r0, [r7, #4]
 8002dee:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d201      	bcs.n	8002e00 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	e000      	b.n	8002e02 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8002e00:	687b      	ldr	r3, [r7, #4]
    }
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr

08002e0e <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b084      	sub	sp, #16
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 f8c2 	bl	8002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>
 8002e20:	4602      	mov	r2, r0
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	4293      	cmp	r3, r2
 8002e26:	bf8c      	ite	hi
 8002e28:	2301      	movhi	r3, #1
 8002e2a:	2300      	movls	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <_ZN9__gnu_cxx13new_allocatorIP8AnalogInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002e32:	f01d fc52 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f01d fb86 	bl	802054c <_Znwj>
 8002e40:	4603      	mov	r3, r0
 8002e42:	bf00      	nop
      }
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_ZSt12__niter_baseIPP8AnalogInET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __niter_base(_Iterator __it)
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4618      	mov	r0, r3
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	109b      	asrs	r3, r3, #2
 8002e78:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	dd06      	ble.n	8002e8e <_ZSt14__relocate_a_1IP8AnalogInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	461a      	mov	r2, r3
 8002e86:	68f9      	ldr	r1, [r7, #12]
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f01d fc99 	bl	80207c0 <memmove>
      return __result + __count;
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4413      	add	r3, r2
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <_ZSt11__addressofIP8AnalogInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <_ZSt8_DestroyIP8AnalogInEvPT_>:
    _Destroy(_Tp* __pointer)
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff fd0e 	bl	80028de <_ZSt10destroy_atIP8AnalogInEvPT_>
    }
 8002ec2:	bf00      	nop
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b084      	sub	sp, #16
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f870 	bl	8002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>
 8002edc:	4602      	mov	r2, r0
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bf8c      	ite	hi
 8002ee4:	2301      	movhi	r3, #1
 8002ee6:	2300      	movls	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8002eee:	f01d fbf4 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	4413      	add	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4618      	mov	r0, r3
 8002efe:	f01d fb25 	bl	802054c <_Znwj>
 8002f02:	4603      	mov	r3, r0
 8002f04:	bf00      	nop
      }
 8002f06:	4618      	mov	r0, r3
 8002f08:	3710      	adds	r7, #16
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 f85d 	bl	8002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	4618      	mov	r0, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4618      	mov	r0, r3
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr

08002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>:
    get(tuple<_Elements...>& __t) noexcept
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	b082      	sub	sp, #8
 8002f42:	af00      	add	r7, sp, #0
 8002f44:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f851 	bl	8002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4618      	mov	r0, r3
 8002f52:	3708      	adds	r7, #8
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002f60:	4b03      	ldr	r3, [pc, #12]	; (8002f70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP17ADC_HandleTypeDef3ADCEEE11_M_max_sizeEv+0x18>)
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8002f62:	4618      	mov	r0, r3
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	02492492 	.word	0x02492492

08002f74 <_ZNSt10_Head_baseILj0ERKP17ADC_HandleTypeDefLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <_ZSt12__get_helperILj0ERKP17ADC_HandleTypeDefJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff ff01 	bl	8002d9c <_ZNSt11_Tuple_implILj0EJRKP17ADC_HandleTypeDefEE7_M_headERS4_>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <_ZNK9__gnu_cxx13new_allocatorIP8AnalogInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fa4:	b480      	push	{r7}
 8002fa6:	b083      	sub	sp, #12
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8002fc4:	4b03      	ldr	r3, [pc, #12]	; (8002fd4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP8AnalogInEEE11_M_max_sizeEv+0x18>)
      }
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	05555555 	.word	0x05555555

08002fd8 <_ZNSt10_Head_baseILj0ERKP3PinLb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <_ZSt12__get_helperILj0ERKP3PinJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff88 	bl	8002f0e <_ZNSt11_Tuple_implILj0EJRKP3PinEE7_M_headERS4_>
 8002ffe:	4603      	mov	r3, r0
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4618      	mov	r0, r3
 8003014:	f7fd fc1f 	bl	8000856 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P8AnalogInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4618      	mov	r0, r3
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>:
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	6078      	str	r0, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fd fbdd 	bl	80007ec <_ZNSt8_Rb_treeIP17ADC_HandleTypeDefSt4pairIKS1_3ADCESt10_Select1stIS5_ESt4lessIS1_ESaIS5_EED1Ev>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4618      	mov	r0, r3
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <_Z41__static_initialization_and_destruction_0ii>:
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
 8003044:	6039      	str	r1, [r7, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d10d      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003052:	4293      	cmp	r3, r2
 8003054:	d108      	bne.n	8003068 <_Z41__static_initialization_and_destruction_0ii+0x2c>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003056:	480f      	ldr	r0, [pc, #60]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003058:	f7fd f9b4 	bl	80003c4 <_ZNSt6vectorIP8AnalogInSaIS1_EEC1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800305c:	480e      	ldr	r0, [pc, #56]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800305e:	f7fd f9d7 	bl	8000410 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEEC1Ev>
map<Pin*, AnalogIn*> AnalogIn::analog_in_from_pin;
 8003062:	480e      	ldr	r0, [pc, #56]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8003064:	f7fd f9fa 	bl	800045c <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10d      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003074:	4293      	cmp	r3, r2
 8003076:	d108      	bne.n	800308a <_Z41__static_initialization_and_destruction_0ii+0x4e>
 8003078:	4808      	ldr	r0, [pc, #32]	; (800309c <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800307a:	f7ff ffc5 	bl	8003008 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
map<ADC_HandleTypeDef*, ADC> AnalogIn::adcs;
 800307e:	4806      	ldr	r0, [pc, #24]	; (8003098 <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8003080:	f7ff ffcf 	bl	8003022 <_ZNSt3mapIP17ADC_HandleTypeDef3ADCSt4lessIS1_ESaISt4pairIKS1_S2_EEED1Ev>
vector<AnalogIn*> AnalogIn::all_analog_ins;
 8003084:	4803      	ldr	r0, [pc, #12]	; (8003094 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8003086:	f000 f80b 	bl	80030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>
}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	24000098 	.word	0x24000098
 8003098:	240000a4 	.word	0x240000a4
 800309c:	240000bc 	.word	0x240000bc

080030a0 <_ZNSt6vectorIP8AnalogInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80030a0:	b5b0      	push	{r4, r5, r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681c      	ldr	r4, [r3, #0]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff f893 	bl	80021de <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EE19_M_get_Tp_allocatorEv>
 80030b8:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80030ba:	461a      	mov	r2, r3
 80030bc:	4629      	mov	r1, r5
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff f898 	bl	80021f4 <_ZSt8_DestroyIPP8AnalogInS1_EvT_S3_RSaIT0_E>
      }
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f7fd fb57 	bl	800077a <_ZNSt12_Vector_baseIP8AnalogInSaIS1_EED1Ev>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bdb0      	pop	{r4, r5, r7, pc}

080030d6 <_GLOBAL__sub_I__ZN8AnalogIn14all_analog_insE>:
 80030d6:	b580      	push	{r7, lr}
 80030d8:	af00      	add	r7, sp, #0
 80030da:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030de:	2001      	movs	r0, #1
 80030e0:	f7ff ffac 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <_GLOBAL__sub_D__ZN8AnalogIn14all_analog_insE>:
 80030e6:	b580      	push	{r7, lr}
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80030ee:	2000      	movs	r0, #0
 80030f0:	f7ff ffa4 	bl	800303c <_Z41__static_initialization_and_destruction_0ii>
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f980 	bl	8003404 <_ZNSaIP9AnalogOutED1Ev>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4618      	mov	r0, r3
 800311a:	f000 f963 	bl	80033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>:
      vector() = default;
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff ffeb 	bl	800310e <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EEC1Ev>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f993 	bl	8003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800315a:	b580      	push	{r7, lr}
 800315c:	b082      	sub	sp, #8
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 f971 	bl	800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff ffeb 	bl	800315a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/AnalogOut.hpp"

vector<AnalogOut*> AnalogOut::all_analog_outs;
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;

AnalogOut::AnalogOut(float max_voltage,TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b089      	sub	sp, #36	; 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6178      	str	r0, [r7, #20]
 8003198:	ed87 0a04 	vstr	s0, [r7, #16]
 800319c:	60f9      	str	r1, [r7, #12]
 800319e:	60ba      	str	r2, [r7, #8]
 80031a0:	607b      	str	r3, [r7, #4]
		: timer(timer), channel(channel), max_voltage(max_voltage) {
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	693a      	ldr	r2, [r7, #16]
 80031b2:	611a      	str	r2, [r3, #16]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	615a      	str	r2, [r3, #20]
	AnalogOut::all_analog_outs.push_back(this);
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	61fb      	str	r3, [r7, #28]
 80031c0:	f107 031c 	add.w	r3, r7, #28
 80031c4:	4619      	mov	r1, r3
 80031c6:	4809      	ldr	r0, [pc, #36]	; (80031ec <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x5c>)
 80031c8:	f000 f975 	bl	80034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>
	AnalogOut::pin_to_analog_out[pin] = this;
 80031cc:	697c      	ldr	r4, [r7, #20]
 80031ce:	1d3b      	adds	r3, r7, #4
 80031d0:	4619      	mov	r1, r3
 80031d2:	4807      	ldr	r0, [pc, #28]	; (80031f0 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin+0x60>)
 80031d4:	f000 f980 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 80031d8:	4603      	mov	r3, r0
 80031da:	601c      	str	r4, [r3, #0]
	pin->mode = ANALOG_OUTPUT;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2205      	movs	r2, #5
 80031e0:	719a      	strb	r2, [r3, #6]
}
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	4618      	mov	r0, r3
 80031e6:	3724      	adds	r7, #36	; 0x24
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd90      	pop	{r4, r7, pc}
 80031ec:	240000d4 	.word	0x240000d4
 80031f0:	240000e0 	.word	0x240000e0

080031f4 <_ZN9AnalogOut11set_voltageEf>:

void AnalogOut::set_voltage(float current_voltage){
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
 80031fc:	ed87 0a00 	vstr	s0, [r7]
	uint32_t arr = (uint32_t) (current_voltage / max_voltage * timer->Instance->ARR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	edd3 7a04 	vldr	s15, [r3, #16]
 8003206:	edd7 6a00 	vldr	s13, [r7]
 800320a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003226:	ee17 3a90 	vmov	r3, s15
 800322a:	60fb      	str	r3, [r7, #12]

	switch(channel){
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	2b14      	cmp	r3, #20
 8003232:	d851      	bhi.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
 8003234:	a201      	add	r2, pc, #4	; (adr r2, 800323c <_ZN9AnalogOut11set_voltageEf+0x48>)
 8003236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800323a:	bf00      	nop
 800323c:	08003291 	.word	0x08003291
 8003240:	080032d9 	.word	0x080032d9
 8003244:	080032d9 	.word	0x080032d9
 8003248:	080032d9 	.word	0x080032d9
 800324c:	0800329d 	.word	0x0800329d
 8003250:	080032d9 	.word	0x080032d9
 8003254:	080032d9 	.word	0x080032d9
 8003258:	080032d9 	.word	0x080032d9
 800325c:	080032a9 	.word	0x080032a9
 8003260:	080032d9 	.word	0x080032d9
 8003264:	080032d9 	.word	0x080032d9
 8003268:	080032d9 	.word	0x080032d9
 800326c:	080032b5 	.word	0x080032b5
 8003270:	080032d9 	.word	0x080032d9
 8003274:	080032d9 	.word	0x080032d9
 8003278:	080032d9 	.word	0x080032d9
 800327c:	080032c1 	.word	0x080032c1
 8003280:	080032d9 	.word	0x080032d9
 8003284:	080032d9 	.word	0x080032d9
 8003288:	080032d9 	.word	0x080032d9
 800328c:	080032cd 	.word	0x080032cd
		case(TIM_CHANNEL_1):
				timer->Instance->CCR1 = arr; break;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
 800329a:	e01d      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_2):
				timer->Instance->CCR2 = arr; break;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	639a      	str	r2, [r3, #56]	; 0x38
 80032a6:	e017      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_3):
				timer->Instance->CCR3 = arr; break;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	63da      	str	r2, [r3, #60]	; 0x3c
 80032b2:	e011      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_4):
				timer->Instance->CCR4 = arr; break;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
 80032be:	e00b      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_5):
				timer->Instance->CCR5 = arr; break;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	659a      	str	r2, [r3, #88]	; 0x58
 80032ca:	e005      	b.n	80032d8 <_ZN9AnalogOut11set_voltageEf+0xe4>
		case(TIM_CHANNEL_6):
				timer->Instance->CCR6 = arr; break;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d6:	bf00      	nop
	}
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <_ZN9AnalogOut5startEv>:

void AnalogOut::start(){
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(timer, channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4619      	mov	r1, r3
 80032f6:	4610      	mov	r0, r2
 80032f8:	f01b fb4e 	bl	801e998 <HAL_TIM_PWM_Start>
}
 80032fc:	bf00      	nop
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}

08003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4618      	mov	r0, r3
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800331a:	b590      	push	{r4, r7, lr}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f7ff ffed 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800332a:	4603      	mov	r3, r0
 800332c:	681c      	ldr	r4, [r3, #0]
 800332e:	6838      	ldr	r0, [r7, #0]
 8003330:	f7ff ffe8 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003334:	4603      	mov	r3, r0
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	429c      	cmp	r4, r3
 800333a:	bf0c      	ite	eq
 800333c:	2301      	moveq	r3, #1
 800333e:	2300      	movne	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4618      	mov	r0, r3
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	bd90      	pop	{r4, r7, pc}

0800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800334a:	b480      	push	{r7}
 800334c:	b083      	sub	sp, #12
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	1d1a      	adds	r2, r3, #4
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	601a      	str	r2, [r3, #0]
	return *this;
 800335c:	687b      	ldr	r3, [r7, #4]
      }
 800335e:	4618      	mov	r0, r3
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <_ZN9AnalogOut21start_all_analog_outsEv>:

void AnalogOut::stop(){
	HAL_TIM_PWM_Stop(timer, channel);
}

void AnalogOut::start_all_analog_outs(){
 8003384:	b580      	push	{r7, lr}
 8003386:	b084      	sub	sp, #16
 8003388:	af00      	add	r7, sp, #0
	for(auto analog_out: all_analog_outs)
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <_ZN9AnalogOut21start_all_analog_outsEv+0x5c>)
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	68f8      	ldr	r0, [r7, #12]
 8003390:	f000 f900 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 8003394:	4603      	mov	r3, r0
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	68f8      	ldr	r0, [r7, #12]
 800339a:	f000 f90b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 800339e:	4603      	mov	r3, r0
 80033a0:	603b      	str	r3, [r7, #0]
 80033a2:	463a      	mov	r2, r7
 80033a4:	1d3b      	adds	r3, r7, #4
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ffb6 	bl	800331a <_ZN9__gnu_cxxeqIPP9AnalogOutS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f083 0301 	eor.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00e      	beq.n	80033d8 <_ZN9AnalogOut21start_all_analog_outsEv+0x54>
 80033ba:	1d3b      	adds	r3, r7, #4
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ffd4 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 80033c2:	4603      	mov	r3, r0
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	60bb      	str	r3, [r7, #8]
		analog_out->start();
 80033c8:	68b8      	ldr	r0, [r7, #8]
 80033ca:	f7ff ff8b 	bl	80032e4 <_ZN9AnalogOut5startEv>
	for(auto analog_out: all_analog_outs)
 80033ce:	1d3b      	adds	r3, r7, #4
 80033d0:	4618      	mov	r0, r3
 80033d2:	f7ff ffba 	bl	800334a <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEppEv>
 80033d6:	e7e4      	b.n	80033a2 <_ZN9AnalogOut21start_all_analog_outsEv+0x1e>
}
 80033d8:	bf00      	nop
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	240000d4 	.word	0x240000d4

080033e4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f000 f8f2 	bl	80035d6 <_ZNSaIP9AnalogOutEC1Ev>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f000 f8fa 	bl	80035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4618      	mov	r0, r3
 80033fe:	3708      	adds	r7, #8
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <_ZNSaIP9AnalogOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4618      	mov	r0, r3
 8003410:	370c      	adds	r7, #12
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8003432:	461a      	mov	r2, r3
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8ee 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fe5a 	bl	80030f6 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE12_Vector_implD1Ev>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 f8f1 	bl	800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4618      	mov	r0, r3
 800345e:	f7fd fbc3 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	3304      	adds	r3, #4
 8003466:	4618      	mov	r0, r3
 8003468:	f7fc ff6e 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEED1Ev>:
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f8fc 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800349a:	4603      	mov	r3, r0
 800349c:	4619      	mov	r1, r3
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f8d8 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f7ff fe4b 	bl	8003142 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4618      	mov	r0, r3
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <_ZNSt6vectorIP9AnalogOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	f000 f8f2 	bl	80036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>
 80034c6:	4603      	mov	r3, r0
 80034c8:	4619      	mov	r1, r3
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8f8 	bl	80036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80034d0:	bf00      	nop
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80034d8:	b590      	push	{r4, r7, lr}
 80034da:	b08b      	sub	sp, #44	; 0x2c
 80034dc:	af02      	add	r7, sp, #8
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80034e2:	6839      	ldr	r1, [r7, #0]
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 f91d 	bl	8003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80034ea:	4603      	mov	r3, r0
 80034ec:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f927 	bl	8003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80034f4:	4603      	mov	r3, r0
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	f107 020c 	add.w	r2, r7, #12
 80034fc:	f107 0308 	add.w	r3, r7, #8
 8003500:	4611      	mov	r1, r2
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f92a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d114      	bne.n	8003538 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f938 	bl	8003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681c      	ldr	r4, [r3, #0]
 8003518:	f107 0308 	add.w	r3, r7, #8
 800351c:	4618      	mov	r0, r3
 800351e:	f000 f93e 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003522:	4603      	mov	r3, r0
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	f107 0310 	add.w	r3, r7, #16
 800352a:	4621      	mov	r1, r4
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd fcd4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d01b      	beq.n	800357a <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003542:	687c      	ldr	r4, [r7, #4]
 8003544:	f107 0208 	add.w	r2, r7, #8
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	4611      	mov	r1, r2
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f933 	bl	80037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	6839      	ldr	r1, [r7, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f7fd fcd0 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8003560:	f107 0218 	add.w	r2, r7, #24
 8003564:	f107 031c 	add.w	r3, r7, #28
 8003568:	9300      	str	r3, [sp, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	4a08      	ldr	r2, [pc, #32]	; (8003590 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 800356e:	6979      	ldr	r1, [r7, #20]
 8003570:	4620      	mov	r0, r4
 8003572:	f000 f932 	bl	80037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8003576:	4603      	mov	r3, r0
 8003578:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800357a:	f107 0308 	add.w	r3, r7, #8
 800357e:	4618      	mov	r0, r3
 8003580:	f000 f90d 	bl	800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>
 8003584:	4603      	mov	r3, r0
 8003586:	3304      	adds	r3, #4
      }
 8003588:	4618      	mov	r0, r3
 800358a:	3724      	adds	r7, #36	; 0x24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd90      	pop	{r4, r7, pc}
 8003590:	08020cbc 	.word	0x08020cbc

08003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	f107 030c 	add.w	r3, r7, #12
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 f956 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	f107 030c 	add.w	r3, r7, #12
 80035c4:	4611      	mov	r1, r2
 80035c6:	4618      	mov	r0, r3
 80035c8:	f000 f945 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4618      	mov	r0, r3
 80035d0:	3710      	adds	r7, #16
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_ZNSaIP9AnalogOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b082      	sub	sp, #8
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f949 	bl	8003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}

080035ee <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
	{ }
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr

08003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8003616:	b580      	push	{r7, lr}
 8003618:	b084      	sub	sp, #16
 800361a:	af00      	add	r7, sp, #0
 800361c:	60f8      	str	r0, [r7, #12]
 800361e:	60b9      	str	r1, [r7, #8]
 8003620:	607a      	str	r2, [r7, #4]
	if (__p)
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d005      	beq.n	8003634 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 f92c 	bl	800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>
      }
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 800363c:	b580      	push	{r7, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6878      	ldr	r0, [r7, #4]
 8003646:	f000 f940 	bl	80038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d012      	beq.n	800368a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8003664:	6838      	ldr	r0, [r7, #0]
 8003666:	f000 f93b 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800366a:	4603      	mov	r3, r0
 800366c:	4619      	mov	r1, r3
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff fff0 	bl	8003654 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8003674:	6838      	ldr	r0, [r7, #0]
 8003676:	f000 f93f 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800367a:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800367c:	6839      	ldr	r1, [r7, #0]
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f946 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8003688:	e7e9      	b.n	800365e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800368a:	bf00      	nop
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	370c      	adds	r7, #12
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr

080036aa <_ZSt4moveIRP9AnalogOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80036aa:	b480      	push	{r7}
 80036ac:	b083      	sub	sp, #12
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4618      	mov	r0, r3
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 80036c0:	b5b0      	push	{r4, r5, r7, lr}
 80036c2:	b082      	sub	sp, #8
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685a      	ldr	r2, [r3, #4]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d011      	beq.n	80036fa <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80036d6:	687c      	ldr	r4, [r7, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685d      	ldr	r5, [r3, #4]
 80036dc:	6838      	ldr	r0, [r7, #0]
 80036de:	f000 f928 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80036e2:	4603      	mov	r3, r0
 80036e4:	461a      	mov	r2, r3
 80036e6:	4629      	mov	r1, r5
 80036e8:	4620      	mov	r0, r4
 80036ea:	f000 f942 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	1d1a      	adds	r2, r3, #4
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	e00c      	b.n	8003714 <_ZNSt6vectorIP9AnalogOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7ff ff5a 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003700:	4604      	mov	r4, r0
 8003702:	6838      	ldr	r0, [r7, #0]
 8003704:	f000 f915 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003708:	4603      	mov	r3, r0
 800370a:	461a      	mov	r2, r3
 800370c:	4621      	mov	r1, r4
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f942 	bl	8003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f000 f9bb 	bl	8003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>
 800371a:	4603      	mov	r3, r0
      }
 800371c:	4618      	mov	r0, r3
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bdb0      	pop	{r4, r5, r7, pc}

08003724 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6839      	ldr	r1, [r7, #0]
 8003732:	4618      	mov	r0, r3
 8003734:	f000 f9c7 	bl	8003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8003738:	4603      	mov	r3, r0
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003742:	b580      	push	{r7, lr}
 8003744:	b082      	sub	sp, #8
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4618      	mov	r0, r3
 800374e:	f000 f9d1 	bl	8003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8003752:	4603      	mov	r3, r0
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	bf0c      	ite	eq
 8003772:	2301      	moveq	r3, #1
 8003774:	2300      	movne	r3, #0
 8003776:	b2db      	uxtb	r3, r3
 8003778:	4618      	mov	r0, r3
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	f000 f9c1 	bl	8003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8003794:	bf00      	nop
 8003796:	4620      	mov	r0, r4
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	bd90      	pop	{r4, r7, pc}

0800379e <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800379e:	b580      	push	{r7, lr}
 80037a0:	b082      	sub	sp, #8
 80037a2:	af00      	add	r7, sp, #0
 80037a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 f9be 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 80037b0:	4603      	mov	r3, r0
 80037b2:	4618      	mov	r0, r3
 80037b4:	3708      	adds	r7, #8
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80037da:	b5b0      	push	{r4, r5, r7, lr}
 80037dc:	b088      	sub	sp, #32
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
 80037e6:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7fd fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80037ee:	4604      	mov	r4, r0
 80037f0:	6838      	ldr	r0, [r7, #0]
 80037f2:	f7fe f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80037f6:	4605      	mov	r5, r0
 80037f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fa:	f7fd fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80037fe:	4603      	mov	r3, r0
 8003800:	462a      	mov	r2, r5
 8003802:	4621      	mov	r1, r4
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 f99f 	bl	8003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 800380a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800380c:	69f8      	ldr	r0, [r7, #28]
 800380e:	f000 faed 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003812:	4603      	mov	r3, r0
 8003814:	f107 0010 	add.w	r0, r7, #16
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	68f9      	ldr	r1, [r7, #12]
 800381c:	f000 f9b7 	bl	8003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d007      	beq.n	8003836 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8003826:	6939      	ldr	r1, [r7, #16]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 faf0 	bl	8003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8003832:	4603      	mov	r3, r0
 8003834:	e00b      	b.n	800384e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8003836:	69f9      	ldr	r1, [r7, #28]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f869 	bl	8003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	f107 0318 	add.w	r3, r7, #24
 8003844:	4611      	mov	r1, r2
 8003846:	4618      	mov	r0, r3
 8003848:	f000 fb22 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 800384c:	69bb      	ldr	r3, [r7, #24]
      }
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bdb0      	pop	{r4, r5, r7, pc}

08003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003856:	b480      	push	{r7}
 8003858:	b083      	sub	sp, #12
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
 800385e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	601a      	str	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80038a4:	f7fc fd3c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d003      	beq.n	80038b6 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80038ae:	69b8      	ldr	r0, [r7, #24]
 80038b0:	f01c fe48 	bl	8020544 <_ZdlPv>
	    return;
 80038b4:	e005      	b.n	80038c2 <_ZNSt16allocator_traitsISaIP9AnalogOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	69b9      	ldr	r1, [r7, #24]
 80038ba:	69f8      	ldr	r0, [r7, #28]
 80038bc:	f000 fd64 	bl	8004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80038c0:	bf00      	nop
 80038c2:	bf00      	nop
 80038c4:	3720      	adds	r7, #32
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEC1Ev>:
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	4618      	mov	r0, r3
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr

08003910 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800391a:	6839      	ldr	r1, [r7, #0]
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fac6 	bl	8003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8003922:	6839      	ldr	r1, [r7, #0]
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fad7 	bl	8003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003932:	b480      	push	{r7}
 8003934:	b083      	sub	sp, #12
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4618      	mov	r0, r3
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8003952:	6838      	ldr	r0, [r7, #0]
 8003954:	f7ff ffed 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003958:	4603      	mov	r3, r0
 800395a:	681c      	ldr	r4, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	2004      	movs	r0, #4
 8003962:	f7fc fce5 	bl	8000330 <_ZnwjPv>
 8003966:	4603      	mov	r3, r0
 8003968:	601c      	str	r4, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	bd90      	pop	{r4, r7, pc}

08003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	60f8      	str	r0, [r7, #12]
 800397a:	60b9      	str	r1, [r7, #8]
 800397c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7ff ffd7 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8003984:	4603      	mov	r3, r0
 8003986:	4619      	mov	r1, r3
 8003988:	68b8      	ldr	r0, [r7, #8]
 800398a:	f7ff ffdd 	bl	8003948 <_ZSt12construct_atIP9AnalogOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8003998:	b5b0      	push	{r4, r5, r7, lr}
 800399a:	b08c      	sub	sp, #48	; 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	60f8      	str	r0, [r7, #12]
 80039a0:	60b9      	str	r1, [r7, #8]
 80039a2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80039a4:	4a39      	ldr	r2, [pc, #228]	; (8003a8c <_ZNSt6vectorIP9AnalogOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80039a6:	2101      	movs	r1, #1
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f000 faa7 	bl	8003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>
 80039ae:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff fde9 	bl	8003594 <_ZNSt6vectorIP9AnalogOutSaIS1_EE5beginEv>
 80039c2:	4603      	mov	r3, r0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	f107 0214 	add.w	r2, r7, #20
 80039ca:	f107 0308 	add.w	r3, r7, #8
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 fada 	bl	8003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80039d6:	4603      	mov	r3, r0
 80039d8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 fae8 	bl	8003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>
 80039e4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80039ea:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80039f0:	69fa      	ldr	r2, [r7, #28]
 80039f2:	18d5      	adds	r5, r2, r3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff9c 	bl	8003932 <_ZSt7forwardIP9AnalogOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80039fa:	4603      	mov	r3, r0
 80039fc:	461a      	mov	r2, r3
 80039fe:	4629      	mov	r1, r5
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff ffb6 	bl	8003972 <_ZNSt16allocator_traitsISaIP9AnalogOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8003a06:	2300      	movs	r3, #0
 8003a08:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a0a:	f107 0308 	add.w	r3, r7, #8
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7ff fc78 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a14:	4603      	mov	r3, r0
 8003a16:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf2 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a20:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003a22:	69fa      	ldr	r2, [r7, #28]
 8003a24:	4621      	mov	r1, r4
 8003a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a28:	f000 fad8 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a2c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	3304      	adds	r3, #4
 8003a32:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a34:	f107 0308 	add.w	r3, r7, #8
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f7ff fc63 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fadd 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8003a4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003a4c:	69ba      	ldr	r2, [r7, #24]
 8003a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a50:	4620      	mov	r0, r4
 8003a52:	f000 fac3 	bl	8003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003a56:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8003a58:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003a64:	461a      	mov	r2, r3
 8003a66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a68:	f7ff fdd5 	bl	8003616 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	69fa      	ldr	r2, [r7, #28]
 8003a70:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	69fa      	ldr	r2, [r7, #28]
 8003a7e:	441a      	add	r2, r3
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	609a      	str	r2, [r3, #8]
    }
 8003a84:	bf00      	nop
 8003a86:	3730      	adds	r7, #48	; 0x30
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a8c:	08020abc 	.word	0x08020abc

08003a90 <_ZNSt6vectorIP9AnalogOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fd8b 	bl	80035b4 <_ZNSt6vectorIP9AnalogOutSaIS1_EE3endEv>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	f107 030c 	add.w	r3, r7, #12
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f000 fac4 	bl	8004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	60bb      	str	r3, [r7, #8]
 8003ab2:	f107 0308 	add.w	r3, r7, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7ff fc57 	bl	800336a <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEdeEv>
 8003abc:	4603      	mov	r3, r0
      }
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}

08003ac6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8003ac6:	b590      	push	{r4, r7, lr}
 8003ac8:	b083      	sub	sp, #12
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f7ff fdde 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8003ad6:	4604      	mov	r4, r0
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fac5 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 facb 	bl	8004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8003aea:	4603      	mov	r3, r0
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd90      	pop	{r4, r7, pc}

08003af4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	1d1a      	adds	r2, r3, #4
 8003b00:	f107 030c 	add.w	r3, r7, #12
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f9c2 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8003b1e:	bf00      	nop
 8003b20:	4618      	mov	r0, r3
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr()
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3310      	adds	r3, #16
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fad4 	bl	80040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	4618      	mov	r0, r3
 8003b42:	3708      	adds	r7, #8
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8003b48:	b5b0      	push	{r4, r5, r7, lr}
 8003b4a:	b088      	sub	sp, #32
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fad1 	bl	80040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8003b5c:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8003b5e:	68b8      	ldr	r0, [r7, #8]
 8003b60:	f7fd fb81 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8003b64:	4604      	mov	r4, r0
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd fe6b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	6838      	ldr	r0, [r7, #0]
 8003b70:	f7fd fb8f 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8003b74:	4603      	mov	r3, r0
 8003b76:	9300      	str	r3, [sp, #0]
 8003b78:	462b      	mov	r3, r5
 8003b7a:	4622      	mov	r2, r4
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f000 face 	bl	8004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8003b84:	697b      	ldr	r3, [r7, #20]
	}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bdb0      	pop	{r4, r5, r7, pc}

08003b8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003b8e:	b5b0      	push	{r4, r5, r7, lr}
 8003b90:	b08c      	sub	sp, #48	; 0x30
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	607a      	str	r2, [r7, #4]
 8003b9a:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8003b9c:	1d3b      	adds	r3, r7, #4
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f000 faeb 	bl	800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8003ba8:	69bc      	ldr	r4, [r7, #24]
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f000 fa5c 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	429c      	cmp	r4, r3
 8003bb4:	bf0c      	ite	eq
 8003bb6:	2301      	moveq	r3, #1
 8003bb8:	2300      	movne	r3, #0
 8003bba:	b2db      	uxtb	r3, r3
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d032      	beq.n	8003c26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8003bc0:	68b8      	ldr	r0, [r7, #8]
 8003bc2:	f000 faeb 	bl	800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8003bc6:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d015      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bcc:	68bc      	ldr	r4, [r7, #8]
 8003bce:	68b8      	ldr	r0, [r7, #8]
 8003bd0:	f000 faf0 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f000 faf7 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003bde:	4603      	mov	r3, r0
 8003be0:	6819      	ldr	r1, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	4620      	mov	r0, r4
 8003bea:	f7fd f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d001      	beq.n	8003bf8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e000      	b.n	8003bfa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8003bf8:	2300      	movs	r3, #0
	  if (size() > 0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d00c      	beq.n	8003c18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68b8      	ldr	r0, [r7, #8]
 8003c04:	f000 fad6 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f107 031c 	add.w	r3, r7, #28
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f7fe f949 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003c16:	e0e5      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fae0 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003c24:	e0de      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8003c26:	68bc      	ldr	r4, [r7, #8]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681d      	ldr	r5, [r3, #0]
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 facc 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c34:	4603      	mov	r3, r0
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fd f94c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d059      	beq.n	8003cfc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8003c4c:	69bc      	ldr	r4, [r7, #24]
 8003c4e:	68b8      	ldr	r0, [r7, #8]
 8003c50:	f000 fb52 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c54:	4603      	mov	r3, r0
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	429c      	cmp	r4, r3
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00d      	beq.n	8003c82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8003c66:	68b8      	ldr	r0, [r7, #8]
 8003c68:	f000 fb46 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c6c:	4604      	mov	r4, r0
 8003c6e:	68b8      	ldr	r0, [r7, #8]
 8003c70:	f000 fb42 	bl	80042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8003c74:	4603      	mov	r3, r0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4621      	mov	r1, r4
 8003c7a:	68f8      	ldr	r0, [r7, #12]
 8003c7c:	f7fe f9c0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003c80:	e0b0      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8003c82:	68bc      	ldr	r4, [r7, #8]
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f000 fb41 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa9a 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	6819      	ldr	r1, [r3, #0]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f7fd f919 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d01f      	beq.n	8003cee <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7ff fe15 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	bf0c      	ite	eq
 8003cbc:	2301      	moveq	r3, #1
 8003cbe:	2300      	movne	r3, #0
 8003cc0:	b2db      	uxtb	r3, r3
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	f107 0214 	add.w	r2, r7, #20
 8003cce:	f107 0320 	add.w	r3, r7, #32
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7fe f8e7 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003cda:	e083      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8003cdc:	f107 0218 	add.w	r2, r7, #24
 8003ce0:	f107 0318 	add.w	r3, r7, #24
 8003ce4:	4619      	mov	r1, r3
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f7fe f98a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003cec:	e07a      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68b9      	ldr	r1, [r7, #8]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f000 fa75 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003cfa:	e073      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8003cfc:	68bc      	ldr	r4, [r7, #8]
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 fa63 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d06:	4603      	mov	r3, r0
 8003d08:	6819      	ldr	r1, [r3, #0]
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	4620      	mov	r0, r4
 8003d12:	f7fd f8e2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d059      	beq.n	8003dd0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8003d1c:	69bb      	ldr	r3, [r7, #24]
 8003d1e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8003d20:	69bc      	ldr	r4, [r7, #24]
 8003d22:	68b8      	ldr	r0, [r7, #8]
 8003d24:	f000 fa46 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	bf0c      	ite	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	2300      	movne	r3, #0
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d3e:	68b8      	ldr	r0, [r7, #8]
 8003d40:	f000 fa38 	bl	80041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8003d44:	4602      	mov	r2, r0
 8003d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	68f8      	ldr	r0, [r7, #12]
 8003d4e:	f7fe f8ab 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003d52:	e047      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8003d54:	68bc      	ldr	r4, [r7, #8]
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681d      	ldr	r5, [r3, #0]
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fae7 	bl	8004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f000 fa2f 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4629      	mov	r1, r5
 8003d76:	4620      	mov	r0, r4
 8003d78:	f7fd f8af 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d01f      	beq.n	8003dc2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7ff fdab 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	bf0c      	ite	eq
 8003d90:	2301      	moveq	r3, #1
 8003d92:	2300      	movne	r3, #0
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d9e:	f107 0218 	add.w	r2, r7, #24
 8003da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da6:	4619      	mov	r1, r3
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f7fe f87d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8003dae:	e019      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8003db0:	f107 0210 	add.w	r2, r7, #16
 8003db4:	f107 0310 	add.w	r3, r7, #16
 8003db8:	4619      	mov	r1, r3
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f7fe f920 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8003dc0:	e010      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	683a      	ldr	r2, [r7, #0]
 8003dc6:	68b9      	ldr	r1, [r7, #8]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fa0b 	bl	80041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8003dce:	e009      	b.n	8003de4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dd4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003dd8:	f107 0318 	add.w	r3, r7, #24
 8003ddc:	4619      	mov	r1, r3
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f7fe f949 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	3730      	adds	r7, #48	; 0x30
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}

08003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 faad 	bl	8004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	f107 030c 	add.w	r3, r7, #12
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fab4 	bl	8004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>
 8003e08:	4603      	mov	r3, r0
      }
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8003e12:	b5b0      	push	{r4, r5, r7, lr}
 8003e14:	b086      	sub	sp, #24
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	60f8      	str	r0, [r7, #12]
 8003e1a:	60b9      	str	r1, [r7, #8]
 8003e1c:	607a      	str	r2, [r7, #4]
 8003e1e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d119      	bne.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 f91e 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8003e2c:	4602      	mov	r2, r0
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d012      	beq.n	8003e5a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e34:	68fc      	ldr	r4, [r7, #12]
 8003e36:	6838      	ldr	r0, [r7, #0]
 8003e38:	f7ff ffd8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f9c3 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8003e46:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7fd f843 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8003e5e:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8003e60:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8003e66:	7df8      	ldrb	r0, [r7, #23]
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6839      	ldr	r1, [r7, #0]
 8003e6c:	f01c fbda 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8003e7a:	f107 0310 	add.w	r3, r7, #16
 8003e7e:	6839      	ldr	r1, [r7, #0]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 f805 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8003e86:	693b      	ldr	r3, [r7, #16]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bdb0      	pop	{r4, r5, r7, pc}

08003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8003e90:	b480      	push	{r7}
 8003e92:	b083      	sub	sp, #12
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	683a      	ldr	r2, [r7, #0]
 8003e9e:	601a      	str	r2, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003eae:	b590      	push	{r4, r7, lr}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa74 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	6838      	ldr	r0, [r7, #0]
 8003ec2:	f7ff fe33 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 fa76 	bl	80043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd90      	pop	{r4, r7, pc}

08003ed8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fa5f 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2201      	movs	r2, #1
 8003eec:	6839      	ldr	r1, [r7, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fa70 	bl	80043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>
 8003ef4:	bf00      	nop
 8003ef6:	3708      	adds	r7, #8
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8003efc:	b590      	push	{r4, r7, lr}
 8003efe:	b087      	sub	sp, #28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f000 fa82 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f0e:	4604      	mov	r4, r0
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 fa8f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f16:	4603      	mov	r3, r0
 8003f18:	1ae2      	subs	r2, r4, r3
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	bf34      	ite	cc
 8003f20:	2301      	movcc	r3, #1
 8003f22:	2300      	movcs	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f01c fbd8 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f000 fa7f 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f36:	4604      	mov	r4, r0
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f000 fa7b 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	f107 0208 	add.w	r2, r7, #8
 8003f46:	f107 0310 	add.w	r3, r7, #16
 8003f4a:	4611      	mov	r1, r2
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7fe fc80 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8003f52:	4603      	mov	r3, r0
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4423      	add	r3, r4
 8003f58:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa6a 	bl	8004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>
 8003f60:	4602      	mov	r2, r0
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d306      	bcc.n	8003f76 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 fa52 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d904      	bls.n	8003f80 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 fa4b 	bl	8004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	e000      	b.n	8003f82 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 8003f80:	697b      	ldr	r3, [r7, #20]
      }
 8003f82:	4618      	mov	r0, r3
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd90      	pop	{r4, r7, pc}

08003f8a <_ZN9__gnu_cxxmiIPP9AnalogOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003f8a:	b590      	push	{r4, r7, lr}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff f9b5 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	681c      	ldr	r4, [r3, #0]
 8003f9e:	6838      	ldr	r0, [r7, #0]
 8003fa0:	f7ff f9b0 	bl	8003304 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	1ae3      	subs	r3, r4, r3
 8003faa:	109b      	asrs	r3, r3, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd90      	pop	{r4, r7, pc}

08003fb4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d006      	beq.n	8003fd2 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x1e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fa43 	bl	8004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	e000      	b.n	8003fd4 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE11_M_allocateEj+0x20>
 8003fd2:	2300      	movs	r3, #0
      }
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003fdc:	b590      	push	{r4, r7, lr}
 8003fde:	b087      	sub	sp, #28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003fea:	f88d 4000 	strb.w	r4, [sp]
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	68b9      	ldr	r1, [r7, #8]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fa4d 	bl	8004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8003ffa:	4603      	mov	r3, r0
      }
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3714      	adds	r7, #20
 8004000:	46bd      	mov	sp, r7
 8004002:	bd90      	pop	{r4, r7, pc}

08004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800401a:	b580      	push	{r7, lr}
 800401c:	b084      	sub	sp, #16
 800401e:	af00      	add	r7, sp, #0
 8004020:	60f8      	str	r0, [r7, #12]
 8004022:	60b9      	str	r1, [r7, #8]
 8004024:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8004026:	68b9      	ldr	r1, [r7, #8]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 fa4f 	bl	80044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>
    }
 800402e:	bf00      	nop
 8004030:	3710      	adds	r7, #16
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}

08004036 <_ZNK9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	425b      	negs	r3, r3
 800404a:	4413      	add	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	f107 020c 	add.w	r2, r7, #12
 8004052:	f107 0308 	add.w	r3, r7, #8
 8004056:	4611      	mov	r1, r2
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff fbfc 	bl	8003856 <_ZN9__gnu_cxx17__normal_iteratorIPP9AnalogOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	3304      	adds	r3, #4
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8004080:	b590      	push	{r4, r7, lr}
 8004082:	b087      	sub	sp, #28
 8004084:	af00      	add	r7, sp, #0
 8004086:	60f8      	str	r0, [r7, #12]
 8004088:	60b9      	str	r1, [r7, #8]
 800408a:	607a      	str	r2, [r7, #4]
 800408c:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01d      	beq.n	80040d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8004094:	68fc      	ldr	r4, [r7, #12]
 8004096:	68b8      	ldr	r0, [r7, #8]
 8004098:	f7ff fea8 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800409c:	4603      	mov	r3, r0
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	461a      	mov	r2, r3
 80040a6:	4620      	mov	r0, r4
 80040a8:	f7fc ff17 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d006      	beq.n	80040c6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	607b      	str	r3, [r7, #4]
 80040bc:	68b8      	ldr	r0, [r7, #8]
 80040be:	f7ff fc1b 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80040c2:	60b8      	str	r0, [r7, #8]
 80040c4:	e7e3      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80040c6:	68b8      	ldr	r0, [r7, #8]
 80040c8:	f7ff fc0a 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80040cc:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 80040ce:	e7de      	b.n	800408e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	6879      	ldr	r1, [r7, #4]
 80040d6:	4618      	mov	r0, r3
 80040d8:	f7ff feda 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80040dc:	697b      	ldr	r3, [r7, #20]
    }
 80040de:	4618      	mov	r0, r3
 80040e0:	371c      	adds	r7, #28
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd90      	pop	{r4, r7, pc}

080040e6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 fa02 	bl	80044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4618      	mov	r0, r3
 80040f8:	3708      	adds	r7, #8
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}

080040fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 80040fe:	b580      	push	{r7, lr}
 8004100:	b082      	sub	sp, #8
 8004102:	af00      	add	r7, sp, #0
 8004104:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f94d 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800410c:	4603      	mov	r3, r0
 800410e:	2101      	movs	r1, #1
 8004110:	4618      	mov	r0, r3
 8004112:	f000 f9fc 	bl	800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>
 8004116:	4603      	mov	r3, r0
 8004118:	4618      	mov	r0, r3
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8004120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004124:	b086      	sub	sp, #24
 8004126:	af02      	add	r7, sp, #8
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
 800412e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	4619      	mov	r1, r3
 8004134:	2018      	movs	r0, #24
 8004136:	f7fc f8fb 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 f933 	bl	80043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8004140:	4604      	mov	r4, r0
 8004142:	68b8      	ldr	r0, [r7, #8]
 8004144:	f7ff fcf2 	bl	8003b2c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>
 8004148:	4605      	mov	r5, r0
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fd f88b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004150:	4606      	mov	r6, r0
 8004152:	6838      	ldr	r0, [r7, #0]
 8004154:	f7fd fb75 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8004158:	4680      	mov	r8, r0
 800415a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800415c:	f7fd f899 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004160:	4603      	mov	r3, r0
 8004162:	9300      	str	r3, [sp, #0]
 8004164:	4643      	mov	r3, r8
 8004166:	4632      	mov	r2, r6
 8004168:	4629      	mov	r1, r5
 800416a:	4620      	mov	r0, r4
 800416c:	f000 fa1c 	bl	80045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8004170:	bf00      	nop
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800417a <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	f107 030c 	add.w	r3, r7, #12
 800418a:	4611      	mov	r1, r2
 800418c:	4618      	mov	r0, r3
 800418e:	f7ff fe7f 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3310      	adds	r3, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff fe09 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80041da:	4603      	mov	r3, r0
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80041e4:	b5b0      	push	{r4, r5, r7, lr}
 80041e6:	b08a      	sub	sp, #40	; 0x28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80041f0:	68b8      	ldr	r0, [r7, #8]
 80041f2:	f7ff fa4e 	bl	8003692 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80041f6:	4603      	mov	r3, r0
 80041f8:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80041fa:	68b8      	ldr	r0, [r7, #8]
 80041fc:	f7ff ff34 	bl	8004068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8004200:	4603      	mov	r3, r0
 8004202:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8004204:	2301      	movs	r3, #1
 8004206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800420a:	69bb      	ldr	r3, [r7, #24]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d023      	beq.n	8004258 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8004214:	68bc      	ldr	r4, [r7, #8]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681d      	ldr	r5, [r3, #0]
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff fde5 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8004222:	4603      	mov	r3, r0
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f7fc fe55 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800423a:	2b00      	cmp	r3, #0
 800423c:	d005      	beq.n	800424a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	4618      	mov	r0, r3
 8004242:	f7ff fb59 	bl	80038f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8004246:	4603      	mov	r3, r0
 8004248:	e004      	b.n	8004254 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	4618      	mov	r0, r3
 800424e:	f7ff fb47 	bl	80038e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8004252:	4603      	mov	r3, r0
 8004254:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8004256:	e7d8      	b.n	800420a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8004258:	697a      	ldr	r2, [r7, #20]
 800425a:	f107 0310 	add.w	r3, r7, #16
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff fe15 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8004266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800426a:	2b00      	cmp	r3, #0
 800426c:	d01d      	beq.n	80042aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800426e:	68b8      	ldr	r0, [r7, #8]
 8004270:	f000 f9b6 	bl	80045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8004274:	4603      	mov	r3, r0
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	f107 021c 	add.w	r2, r7, #28
 800427c:	f107 0310 	add.w	r3, r7, #16
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff fa6a 	bl	800375c <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d008      	beq.n	80042a0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800428e:	f107 0214 	add.w	r2, r7, #20
 8004292:	f107 0318 	add.w	r3, r7, #24
 8004296:	4619      	mov	r1, r3
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f9b2 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 800429e:	e027      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80042a0:	f107 0310 	add.w	r3, r7, #16
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 f833 	bl	8004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80042aa:	68bc      	ldr	r4, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7ff ff8c 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80042b4:	4603      	mov	r3, r0
 80042b6:	6819      	ldr	r1, [r3, #0]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	461a      	mov	r2, r3
 80042be:	4620      	mov	r0, r4
 80042c0:	f7fc fe0b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d008      	beq.n	80042dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80042ca:	f107 0214 	add.w	r2, r7, #20
 80042ce:	f107 0318 	add.w	r3, r7, #24
 80042d2:	4619      	mov	r1, r3
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f000 f994 	bl	8004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>
 80042da:	e009      	b.n	80042f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 80042dc:	2300      	movs	r3, #0
 80042de:	623b      	str	r3, [r7, #32]
 80042e0:	f107 0220 	add.w	r2, r7, #32
 80042e4:	f107 0310 	add.w	r3, r7, #16
 80042e8:	4619      	mov	r1, r3
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7fd fec3 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bdb0      	pop	{r4, r5, r7, pc}

080042f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	330c      	adds	r3, #12
 8004304:	4618      	mov	r0, r3
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4618      	mov	r0, r3
 800431e:	f01c f97f 	bl	8020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8004322:	4602      	mov	r2, r0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	601a      	str	r2, [r3, #0]
	return *this;
 8004328:	687b      	ldr	r3, [r7, #4]
      }
 800432a:	4618      	mov	r0, r3
 800432c:	3708      	adds	r7, #8
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004332:	b580      	push	{r7, lr}
 8004334:	b082      	sub	sp, #8
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f01c f96c 	bl	802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8004344:	4602      	mov	r2, r0
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	601a      	str	r2, [r3, #0]
	return *this;
 800434a:	687b      	ldr	r3, [r7, #4]
      }
 800434c:	4618      	mov	r0, r3
 800434e:	3708      	adds	r7, #8
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEE9_M_valptrEv>:
      _M_valptr() const
 8004354:	b580      	push	{r7, lr}
 8004356:	b082      	sub	sp, #8
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 f967 	bl	8004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>
 8004366:	4603      	mov	r3, r0
 8004368:	4618      	mov	r0, r3
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <_ZNKSt10_Select1stISt4pairIKP3PinP9AnalogOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	370c      	adds	r7, #12
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4619      	mov	r1, r3
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f01c f8d4 	bl	8020548 <_ZdlPvj>
      }
 80043a0:	3710      	adds	r7, #16
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80043a6:	b480      	push	{r7}
 80043a8:	b083      	sub	sp, #12
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4618      	mov	r0, r3
 80043b2:	370c      	adds	r7, #12
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr

080043bc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
 80043c4:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80043c6:	6838      	ldr	r0, [r7, #0]
 80043c8:	f000 f940 	bl	800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>
	}
 80043cc:	bf00      	nop
 80043ce:	3708      	adds	r7, #8
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b088      	sub	sp, #32
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80043ec:	f7fb ff98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 80043f6:	69b8      	ldr	r0, [r7, #24]
 80043f8:	f01c f8a4 	bl	8020544 <_ZdlPv>
	    return;
 80043fc:	e005      	b.n	800440a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69f8      	ldr	r0, [r7, #28]
 8004404:	f000 f9e1 	bl	80047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8004408:	bf00      	nop
 800440a:	bf00      	nop
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}

08004412 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8004412:	b580      	push	{r7, lr}
 8004414:	b082      	sub	sp, #8
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 f945 	bl	80046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8004422:	4603      	mov	r3, r0
 8004424:	4618      	mov	r0, r3
 8004426:	f000 f927 	bl	8004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>
 800442a:	4603      	mov	r3, r0
 800442c:	4618      	mov	r0, r3
 800442e:	3708      	adds	r7, #8
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <_ZNKSt6vectorIP9AnalogOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	109b      	asrs	r3, r3, #2
 8004448:	4618      	mov	r0, r3
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	6039      	str	r1, [r7, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004466:	f7fb ff5b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d006      	beq.n	800447e <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4618      	mov	r0, r3
 8004476:	f01c f869 	bl	802054c <_Znwj>
 800447a:	4603      	mov	r3, r0
 800447c:	e006      	b.n	800448c <_ZNSt16allocator_traitsISaIP9AnalogOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800447e:	2200      	movs	r2, #0
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f9b3 	bl	80047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>
 8004488:	4603      	mov	r3, r0
 800448a:	bf00      	nop
      { return __a.allocate(__n); }
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <_ZNSt6vectorIP9AnalogOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	68b9      	ldr	r1, [r7, #8]
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f90a 	bl	80046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 80044ae:	4603      	mov	r3, r0
      }
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>:
    destroy_at(_Tp* __location)
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    }
 80044c0:	bf00      	nop
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <_ZSt8_DestroyIPP9AnalogOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80044d6:	f7fb ff23 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f90a 	bl	80046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>
 80044e8:	e003      	b.n	80044f2 <_ZSt8_DestroyIPP9AnalogOutEvT_S3_+0x26>
	__destroy(__first, __last);
 80044ea:	6839      	ldr	r1, [r7, #0]
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 f91d 	bl	800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>
    }
 80044f2:	3708      	adds	r7, #8
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() noexcept
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800450e:	b580      	push	{r7, lr}
 8004510:	b084      	sub	sp, #16
 8004512:	af00      	add	r7, sp, #0
 8004514:	6078      	str	r0, [r7, #4]
 8004516:	6039      	str	r1, [r7, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8004520:	f7fb fefe 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	4613      	mov	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	4413      	add	r3, r2
 8004532:	00db      	lsls	r3, r3, #3
 8004534:	4618      	mov	r0, r3
 8004536:	f01c f809 	bl	802054c <_Znwj>
 800453a:	4603      	mov	r3, r0
 800453c:	e006      	b.n	800454c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800453e:	2200      	movs	r2, #0
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9b1 	bl	80048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>
 8004548:	4603      	mov	r3, r0
 800454a:	bf00      	nop
      { return __a.allocate(__n); }
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8004554:	b5b0      	push	{r4, r5, r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f7fc fe7f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f7fd f96a 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800456e:	4602      	mov	r2, r0
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe f9ff 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800457c:	f107 0418 	add.w	r4, r7, #24
 8004580:	6838      	ldr	r0, [r7, #0]
 8004582:	f7fc fe86 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	4619      	mov	r1, r3
 800458a:	2008      	movs	r0, #8
 800458c:	f7fb fed0 	bl	8000330 <_ZnwjPv>
 8004590:	4605      	mov	r5, r0
 8004592:	7f3b      	ldrb	r3, [r7, #28]
 8004594:	4622      	mov	r2, r4
 8004596:	7d39      	ldrb	r1, [r7, #20]
 8004598:	4628      	mov	r0, r5
 800459a:	f000 f8ec 	bl	8004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800459e:	462b      	mov	r3, r5
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bdb0      	pop	{r4, r5, r7, pc}

080045a8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80045a8:	b5b0      	push	{r4, r5, r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
 80045b4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7fc fe55 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80045bc:	4604      	mov	r4, r0
 80045be:	6838      	ldr	r0, [r7, #0]
 80045c0:	f7fd f93f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80045c4:	4605      	mov	r5, r0
 80045c6:	6a38      	ldr	r0, [r7, #32]
 80045c8:	f7fc fe63 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80045cc:	4603      	mov	r3, r0
 80045ce:	462a      	mov	r2, r5
 80045d0:	4621      	mov	r1, r4
 80045d2:	68b8      	ldr	r0, [r7, #8]
 80045d4:	f7ff ffbe 	bl	8004554 <_ZSt12construct_atISt4pairIKP3PinP9AnalogOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 80045d8:	bf00      	nop
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	bdb0      	pop	{r4, r5, r7, pc}

080045e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	f107 030c 	add.w	r3, r7, #12
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7ff fc4c 	bl	8003e90 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPSt18_Rb_tree_node_base>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9AnalogOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800460e:	68b8      	ldr	r0, [r7, #8]
 8004610:	f000 f8c5 	bl	800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8004614:	4603      	mov	r3, r0
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	f7fe f8c6 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8004622:	4603      	mov	r3, r0
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	605a      	str	r2, [r3, #4]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8004634:	b580      	push	{r7, lr}
 8004636:	b082      	sub	sp, #8
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f8b9 	bl	80047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>
 8004642:	4603      	mov	r3, r0
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <_ZSt10destroy_atISt4pairIKP3PinP9AnalogOutEEvPT_>:
    destroy_at(_Tp* __location)
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
    }
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8004668:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_ZNSt6vectorIP9AnalogOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8004680:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8004684:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff ffea 	bl	8004660 <_ZNSt16allocator_traitsISaIP9AnalogOutEE8max_sizeERKS2_>
 800468c:	4603      	mov	r3, r0
 800468e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8004690:	f107 0208 	add.w	r2, r7, #8
 8004694:	f107 030c 	add.w	r3, r7, #12
 8004698:	4611      	mov	r1, r2
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fba3 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80046a0:	4603      	mov	r3, r0
 80046a2:	681b      	ldr	r3, [r3, #0]
      }
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <_ZNKSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4618      	mov	r0, r3
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <_ZSt12__relocate_aIPP9AnalogOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80046c2:	b5b0      	push	{r4, r5, r7, lr}
 80046c4:	b084      	sub	sp, #16
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	60f8      	str	r0, [r7, #12]
 80046ca:	60b9      	str	r1, [r7, #8]
 80046cc:	607a      	str	r2, [r7, #4]
 80046ce:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 f8ab 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046d6:	4604      	mov	r4, r0
 80046d8:	68b8      	ldr	r0, [r7, #8]
 80046da:	f000 f8a7 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046de:	4605      	mov	r5, r0
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f000 f8a3 	bl	800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>
 80046e6:	4602      	mov	r2, r0
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4629      	mov	r1, r5
 80046ec:	4620      	mov	r0, r4
 80046ee:	f000 f8a8 	bl	8004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80046f2:	4603      	mov	r3, r0
    }
 80046f4:	4618      	mov	r0, r3
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bdb0      	pop	{r4, r5, r7, pc}

080046fc <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	429a      	cmp	r2, r3
 800470c:	d00a      	beq.n	8004724 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	f000 f8b5 	bl	800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>
 8004714:	4603      	mov	r3, r0
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f8bc 	bl	8004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>
	  for (; __first != __last; ++__first)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	3304      	adds	r3, #4
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	e7f0      	b.n	8004706 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9AnalogOutEEvT_S5_+0xa>
	}
 8004724:	bf00      	nop
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9AnalogOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
 8004736:	bf00      	nop
 8004738:	370c      	adds	r7, #12
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr

08004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	60f8      	str	r0, [r7, #12]
 800474a:	60b9      	str	r1, [r7, #8]
 800474c:	607a      	str	r2, [r7, #4]
 800474e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8004750:	68b8      	ldr	r0, [r7, #8]
 8004752:	f7fe fbf4 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8004756:	4603      	mov	r3, r0
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fbe5 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800475e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	605a      	str	r2, [r3, #4]
      { }
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	4618      	mov	r0, r3
 8004770:	3710      	adds	r7, #16
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8004776:	b5b0      	push	{r4, r5, r7, lr}
 8004778:	b086      	sub	sp, #24
 800477a:	af02      	add	r7, sp, #8
 800477c:	60f8      	str	r0, [r7, #12]
 800477e:	7239      	strb	r1, [r7, #8]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8004784:	463a      	mov	r2, r7
 8004786:	f88d 4000 	strb.w	r4, [sp]
 800478a:	462b      	mov	r3, r5
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff ffd7 	bl	8004742 <_ZNSt4pairIKP3PinP9AnalogOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bdb0      	pop	{r4, r5, r7, pc}

0800479e <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4618      	mov	r0, r3
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9AnalogOutEE7_M_addrEv>:
      _M_addr() const noexcept
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80047ca:	b580      	push	{r7, lr}
 80047cc:	b084      	sub	sp, #16
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	60f8      	str	r0, [r7, #12]
 80047d2:	60b9      	str	r1, [r7, #8]
 80047d4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	4413      	add	r3, r2
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	4619      	mov	r1, r3
 80047e2:	68b8      	ldr	r0, [r7, #8]
 80047e4:	f01b feb0 	bl	8020548 <_ZdlPvj>
      }
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}

080047ee <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80047ee:	b580      	push	{r7, lr}
 80047f0:	b084      	sub	sp, #16
 80047f2:	af00      	add	r7, sp, #0
 80047f4:	60f8      	str	r0, [r7, #12]
 80047f6:	60b9      	str	r1, [r7, #8]
 80047f8:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80047fa:	68f8      	ldr	r0, [r7, #12]
 80047fc:	f000 f877 	bl	80048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>
 8004800:	4602      	mov	r2, r0
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	4293      	cmp	r3, r2
 8004806:	bf8c      	ite	hi
 8004808:	2301      	movhi	r3, #1
 800480a:	2300      	movls	r3, #0
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d001      	beq.n	8004816 <_ZN9__gnu_cxx13new_allocatorIP9AnalogOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8004812:	f01b ff62 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4618      	mov	r0, r3
 800481c:	f01b fe96 	bl	802054c <_Znwj>
 8004820:	4603      	mov	r3, r0
 8004822:	bf00      	nop
      }
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}

0800482c <_ZSt12__niter_baseIPP9AnalogOutET_S3_>:
    __niter_base(_Iterator __it)
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4618      	mov	r0, r3
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8004842:	b580      	push	{r7, lr}
 8004844:	b086      	sub	sp, #24
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	109b      	asrs	r3, r3, #2
 8004858:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd06      	ble.n	800486e <_ZSt14__relocate_a_1IP9AnalogOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	461a      	mov	r2, r3
 8004866:	68f9      	ldr	r1, [r7, #12]
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f01b ffa9 	bl	80207c0 <memmove>
      return __result + __count;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
    }
 8004876:	4618      	mov	r0, r3
 8004878:	3718      	adds	r7, #24
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}

0800487e <_ZSt11__addressofIP9AnalogOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <_ZSt8_DestroyIP9AnalogOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff fe0b 	bl	80044b8 <_ZSt10destroy_atIP9AnalogOutEvPT_>
    }
 80048a2:	bf00      	nop
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}

080048aa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80048aa:	b580      	push	{r7, lr}
 80048ac:	b084      	sub	sp, #16
 80048ae:	af00      	add	r7, sp, #0
 80048b0:	60f8      	str	r0, [r7, #12]
 80048b2:	60b9      	str	r1, [r7, #8]
 80048b4:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80048b6:	68f8      	ldr	r0, [r7, #12]
 80048b8:	f000 f826 	bl	8004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>
 80048bc:	4602      	mov	r2, r0
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4293      	cmp	r3, r2
 80048c2:	bf8c      	ite	hi
 80048c4:	2301      	movhi	r3, #1
 80048c6:	2300      	movls	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80048ce:	f01b ff04 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	4613      	mov	r3, r2
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	4618      	mov	r0, r3
 80048de:	f01b fe35 	bl	802054c <_Znwj>
 80048e2:	4603      	mov	r3, r0
 80048e4:	bf00      	nop
      }
 80048e6:	4618      	mov	r0, r3
 80048e8:	3710      	adds	r7, #16
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}

080048ee <_ZNK9__gnu_cxx13new_allocatorIP9AnalogOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80048f6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80048fa:	4618      	mov	r0, r3
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
	...

08004908 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004910:	4b03      	ldr	r3, [pc, #12]	; (8004920 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9AnalogOutEEE11_M_max_sizeEv+0x18>)
      }
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	05555555 	.word	0x05555555

08004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	4618      	mov	r0, r3
 8004930:	f7fe fdac 	bl	800348c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
	...

08004940 <_Z41__static_initialization_and_destruction_0ii>:
 8004940:	b580      	push	{r7, lr}
 8004942:	b082      	sub	sp, #8
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2b01      	cmp	r3, #1
 800494e:	d10a      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004956:	4293      	cmp	r3, r2
 8004958:	d105      	bne.n	8004966 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800495a:	480c      	ldr	r0, [pc, #48]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800495c:	f7fe fbe4 	bl	8003128 <_ZNSt6vectorIP9AnalogOutSaIS1_EEC1Ev>
map<Pin*, AnalogOut*> AnalogOut::pin_to_analog_out;
 8004960:	480b      	ldr	r0, [pc, #44]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004962:	f7fe fc07 	bl	8003174 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d10a      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004972:	4293      	cmp	r3, r2
 8004974:	d105      	bne.n	8004982 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8004976:	4806      	ldr	r0, [pc, #24]	; (8004990 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8004978:	f7ff ffd4 	bl	8004924 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<AnalogOut*> AnalogOut::all_analog_outs;
 800497c:	4803      	ldr	r0, [pc, #12]	; (800498c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800497e:	f000 f809 	bl	8004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	240000d4 	.word	0x240000d4
 8004990:	240000e0 	.word	0x240000e0

08004994 <_ZNSt6vectorIP9AnalogOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8004994:	b5b0      	push	{r4, r5, r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681c      	ldr	r4, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fb2c 	bl	8004004 <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EE19_M_get_Tp_allocatorEv>
 80049ac:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80049ae:	461a      	mov	r2, r3
 80049b0:	4629      	mov	r1, r5
 80049b2:	4620      	mov	r0, r4
 80049b4:	f7ff fb31 	bl	800401a <_ZSt8_DestroyIPP9AnalogOutS1_EvT_S3_RSaIT0_E>
      }
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fe fd2d 	bl	800341a <_ZNSt12_Vector_baseIP9AnalogOutSaIS1_EED1Ev>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4618      	mov	r0, r3
 80049c4:	3708      	adds	r7, #8
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bdb0      	pop	{r4, r5, r7, pc}

080049ca <_GLOBAL__sub_I__ZN9AnalogOut15all_analog_outsE>:
 80049ca:	b580      	push	{r7, lr}
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049d2:	2001      	movs	r0, #1
 80049d4:	f7ff ffb4 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049d8:	bd80      	pop	{r7, pc}

080049da <_GLOBAL__sub_D__ZN9AnalogOut15all_analog_outsE>:
 80049da:	b580      	push	{r7, lr}
 80049dc:	af00      	add	r7, sp, #0
 80049de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049e2:	2000      	movs	r0, #0
 80049e4:	f7ff ffac 	bl	8004940 <_Z41__static_initialization_and_destruction_0ii>
 80049e8:	bd80      	pop	{r7, pc}

080049ea <_ZSt27__throw_bad_optional_accessv>:
  __attribute__((__noreturn__));

  // XXX Does not belong here.
  inline void
  __throw_bad_optional_access()
  { _GLIBCXX_THROW_OR_ABORT(bad_optional_access()); }
 80049ea:	b580      	push	{r7, lr}
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	f01b fe97 	bl	8020720 <abort>

080049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004a08:	b590      	push	{r4, r7, lr}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff ffed 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	681c      	ldr	r4, [r3, #0]
 8004a1c:	6838      	ldr	r0, [r7, #0]
 8004a1e:	f7ff ffe8 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8004a22:	4603      	mov	r3, r0
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	429c      	cmp	r4, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	4618      	mov	r0, r3
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd90      	pop	{r4, r7, pc}

08004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	1d1a      	adds	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	601a      	str	r2, [r3, #0]
	return *this;
 8004a4a:	687b      	ldr	r3, [r7, #4]
      }
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4618      	mov	r0, r3
 8004a66:	370c      	adds	r7, #12
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr

08004a70 <_ZN6Packet5parseEPh>:
            return;
        else
            build(rest...);
    }

    void parse(uint8_t* ptr){
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
        uint8_t* ptr_temp = ptr;
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3308      	adds	r3, #8
 8004a82:	61bb      	str	r3, [r7, #24]
 8004a84:	69b8      	ldr	r0, [r7, #24]
 8004a86:	f000 fb34 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	69b8      	ldr	r0, [r7, #24]
 8004a90:	f000 fb3f 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8004a94:	4603      	mov	r3, r0
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	f107 020c 	add.w	r2, r7, #12
 8004a9c:	f107 0310 	add.w	r3, r7, #16
 8004aa0:	4611      	mov	r1, r2
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f7ff ffb0 	bl	8004a08 <_ZN9__gnu_cxxeqIPP5FieldIJEES4_St6vectorIS3_SaIS3_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS8_IT0_SA_EE>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	f083 0301 	eor.w	r3, r3, #1
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01d      	beq.n	8004af0 <_ZN6Packet5parseEPh+0x80>
 8004ab4:	f107 0310 	add.w	r3, r7, #16
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ffcd 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	617b      	str	r3, [r7, #20]
            field -> parse(ptr_temp);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	69f9      	ldr	r1, [r7, #28]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	4798      	blx	r3
            ptr_temp += field->get_size();
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3308      	adds	r3, #8
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6978      	ldr	r0, [r7, #20]
 8004ada:	4798      	blx	r3
 8004adc:	4602      	mov	r2, r0
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	61fb      	str	r3, [r7, #28]
        for(auto field : fields){
 8004ae4:	f107 0310 	add.w	r3, r7, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7ff ffa5 	bl	8004a38 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEppEv>
 8004aee:	e7d3      	b.n	8004a98 <_ZN6Packet5parseEPh+0x28>
        }
    }
 8004af0:	bf00      	nop
 8004af2:	3720      	adds	r7, #32
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}

08004af8 <_ZN6Packet14process_packetEtPh>:
            field -> unparse(ptr_temp);
            ptr_temp += field->get_size();
        }
    }

    static void process_packet(uint16_t id, uint8_t* data) {
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	4603      	mov	r3, r0
 8004b00:	6039      	str	r1, [r7, #0]
 8004b02:	80fb      	strh	r3, [r7, #6]
        for(auto& entry : all_packets){
 8004b04:	4b1f      	ldr	r3, [pc, #124]	; (8004b84 <_ZN6Packet14process_packetEtPh+0x8c>)
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	6978      	ldr	r0, [r7, #20]
 8004b0a:	f000 fb13 	bl	8005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	6978      	ldr	r0, [r7, #20]
 8004b14:	f000 fb1b 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60bb      	str	r3, [r7, #8]
 8004b1c:	f107 0208 	add.w	r2, r7, #8
 8004b20:	f107 030c 	add.w	r3, r7, #12
 8004b24:	4611      	mov	r1, r2
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 fb1e 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	f083 0301 	eor.w	r3, r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d020      	beq.n	8004b7a <_ZN6Packet14process_packetEtPh+0x82>
 8004b38:	f107 030c 	add.w	r3, r7, #12
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f000 fb38 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8004b42:	6138      	str	r0, [r7, #16]
        	if(entry.second -> id == id){
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	889b      	ldrh	r3, [r3, #4]
 8004b4a:	88fa      	ldrh	r2, [r7, #6]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10e      	bne.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
                entry.second->parse(data);
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	6839      	ldr	r1, [r7, #0]
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7ff ff8a 	bl	8004a70 <_ZN6Packet5parseEPh>
                if(entry.second->callback != nullptr)
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <_ZN6Packet14process_packetEtPh+0x76>
					entry.second->callback();
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	4798      	blx	r3
        for(auto& entry : all_packets){
 8004b6e:	f107 030c 	add.w	r3, r7, #12
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fb0c 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8004b78:	e7d0      	b.n	8004b1c <_ZN6Packet14process_packetEtPh+0x24>
        	}
        }
    }
 8004b7a:	bf00      	nop
 8004b7c:	3718      	adds	r7, #24
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	240001ac 	.word	0x240001ac

08004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>:
#include "Mini-STLIB/Can.hpp"

Can::Can(FDCAN_HandleTypeDef* hdcan) : hdcan(hdcan) {
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	683a      	ldr	r2, [r7, #0]
 8004b96:	601a      	str	r2, [r3, #0]
	Can::all_cans.push_back(this);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60fb      	str	r3, [r7, #12]
 8004b9c:	f107 030c 	add.w	r3, r7, #12
 8004ba0:	4619      	mov	r1, r3
 8004ba2:	4804      	ldr	r0, [pc, #16]	; (8004bb4 <_ZN3CanC1EP19FDCAN_HandleTypeDef+0x2c>)
 8004ba4:	f000 fb13 	bl	80051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>
}
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4618      	mov	r0, r3
 8004bac:	3710      	adds	r7, #16
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	240000f8 	.word	0x240000f8

08004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004bb8:	b480      	push	{r7}
 8004bba:	b083      	sub	sp, #12
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004bce:	b590      	push	{r4, r7, lr}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
 8004bd6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffed 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004bde:	4603      	mov	r3, r0
 8004be0:	681c      	ldr	r4, [r3, #0]
 8004be2:	6838      	ldr	r0, [r7, #0]
 8004be4:	f7ff ffe8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8004be8:	4603      	mov	r3, r0
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	429c      	cmp	r4, r3
 8004bee:	bf0c      	ite	eq
 8004bf0:	2301      	moveq	r3, #1
 8004bf2:	2300      	movne	r3, #0
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}

08004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	1d1a      	adds	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	601a      	str	r2, [r3, #0]
	return *this;
 8004c10:	687b      	ldr	r3, [r7, #4]
      }
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004c1e:	b480      	push	{r7}
 8004c20:	b083      	sub	sp, #12
 8004c22:	af00      	add	r7, sp, #0
 8004c24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
	...

08004c38 <_ZN3Can14start_all_cansEv>:

void Can::start_all_cans() {
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
	for(auto can : Can::all_cans)
 8004c3e:	4b15      	ldr	r3, [pc, #84]	; (8004c94 <_ZN3Can14start_all_cansEv+0x5c>)
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f000 fad4 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	607b      	str	r3, [r7, #4]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fadf 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004c52:	4603      	mov	r3, r0
 8004c54:	603b      	str	r3, [r7, #0]
 8004c56:	463a      	mov	r2, r7
 8004c58:	1d3b      	adds	r3, r7, #4
 8004c5a:	4611      	mov	r1, r2
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ffb6 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004c62:	4603      	mov	r3, r0
 8004c64:	f083 0301 	eor.w	r3, r3, #1
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d00e      	beq.n	8004c8c <_ZN3Can14start_all_cansEv+0x54>
 8004c6e:	1d3b      	adds	r3, r7, #4
 8004c70:	4618      	mov	r0, r3
 8004c72:	f7ff ffd4 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8004c76:	4603      	mov	r3, r0
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	60bb      	str	r3, [r7, #8]
		can->start();
 8004c7c:	68b8      	ldr	r0, [r7, #8]
 8004c7e:	f000 f80b 	bl	8004c98 <_ZN3Can5startEv>
	for(auto can : Can::all_cans)
 8004c82:	1d3b      	adds	r3, r7, #4
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7ff ffba 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8004c8a:	e7e4      	b.n	8004c56 <_ZN3Can14start_all_cansEv+0x1e>
}
 8004c8c:	bf00      	nop
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	240000f8 	.word	0x240000f8

08004c98 <_ZN3Can5startEv>:

void Can::start(){
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
	HAL_FDCAN_Start(hdcan);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f014 ffab 	bl	8019c00 <HAL_FDCAN_Start>
	HAL_FDCAN_ActivateNotification(hdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE,0);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2101      	movs	r1, #1
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f015 f998 	bl	8019fe8 <HAL_FDCAN_ActivateNotification>
}
 8004cb8:	bf00      	nop
 8004cba:	3708      	adds	r7, #8
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <_ZN3Can12send_messageEtPhm>:

void Can::send_message(uint16_t id, uint8_t* data, uint32_t size) {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b088      	sub	sp, #32
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	607a      	str	r2, [r7, #4]
 8004cca:	603b      	str	r3, [r7, #0]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004cd0:	f107 0314 	add.w	r3, r7, #20
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	68f9      	ldr	r1, [r7, #12]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 f939 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004cde:	f107 0314 	add.w	r3, r7, #20
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f000 faa5 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d03c      	beq.n	8004d68 <_ZN3Can12send_messageEtPhm+0xa8>
		TxHeader.Identifier = id;
 8004cee:	897a      	ldrh	r2, [r7, #10]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004cf4:	f107 0314 	add.w	r3, r7, #20
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 fab2 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d0c:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2200      	movs	r2, #0
 8004d12:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d1a:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
		for(int i = 0; i < size; i++)
 8004d2e:	2300      	movs	r3, #0
 8004d30:	61fb      	str	r3, [r7, #28]
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d90d      	bls.n	8004d56 <_ZN3Can12send_messageEtPhm+0x96>
			TxData[i] = data[i];
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	4413      	add	r3, r2
 8004d40:	7819      	ldrb	r1, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	4413      	add	r3, r2
 8004d48:	3350      	adds	r3, #80	; 0x50
 8004d4a:	460a      	mov	r2, r1
 8004d4c:	701a      	strb	r2, [r3, #0]
		for(int i = 0; i < size; i++)
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	3301      	adds	r3, #1
 8004d52:	61fb      	str	r3, [r7, #28]
 8004d54:	e7ed      	b.n	8004d32 <_ZN3Can12send_messageEtPhm+0x72>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6818      	ldr	r0, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1d19      	adds	r1, r3, #4
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3350      	adds	r3, #80	; 0x50
 8004d62:	461a      	mov	r2, r3
 8004d64:	f014 ff77 	bl	8019c56 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004d68:	bf00      	nop
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <_ZN3Can12send_messageEtm>:

void Can::send_message(uint16_t id, uint32_t size) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	817b      	strh	r3, [r7, #10]
	optional<uint32_t> dlc = get_dlc_from_size(size);
 8004d7e:	f107 0310 	add.w	r3, r7, #16
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	68f9      	ldr	r1, [r7, #12]
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 f8e2 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004d8c:	f107 0310 	add.w	r3, r7, #16
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fa4e 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d028      	beq.n	8004dee <_ZN3Can12send_messageEtm+0x7e>
		TxHeader.Identifier = id;
 8004d9c:	897a      	ldrh	r2, [r7, #10]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004da2:	f107 0310 	add.w	r3, r7, #16
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fa5b 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004dba:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004dc8:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	625a      	str	r2, [r3, #36]	; 0x24
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	6818      	ldr	r0, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	1d19      	adds	r1, r3, #4
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3350      	adds	r3, #80	; 0x50
 8004de8:	461a      	mov	r2, r3
 8004dea:	f014 ff34 	bl	8019c56 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004dee:	bf00      	nop
 8004df0:	3718      	adds	r7, #24
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}

08004df6 <_ZN3Can18send_error_messageEtPKc>:

void Can::send_error_message(uint16_t id, const char* str){
 8004df6:	b580      	push	{r7, lr}
 8004df8:	b08a      	sub	sp, #40	; 0x28
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	60f8      	str	r0, [r7, #12]
 8004dfe:	460b      	mov	r3, r1
 8004e00:	607a      	str	r2, [r7, #4]
 8004e02:	817b      	strh	r3, [r7, #10]
	size_t message_size = strlen(str);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fb fa83 	bl	8000310 <strlen>
 8004e0a:	6238      	str	r0, [r7, #32]
	optional<uint32_t> dlc = get_dlc_from_size(message_size);
 8004e0c:	f107 0314 	add.w	r3, r7, #20
 8004e10:	6a3a      	ldr	r2, [r7, #32]
 8004e12:	68f9      	ldr	r1, [r7, #12]
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 f89b 	bl	8004f50 <_ZN3Can17get_dlc_from_sizeEm>
	if(dlc){
 8004e1a:	f107 0314 	add.w	r3, r7, #20
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fa07 	bl	8005232 <_ZNKSt8optionalImEcvbEv>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d04d      	beq.n	8004ec6 <_ZN3Can18send_error_messageEtPKc+0xd0>
		size_t str_size = strlen(str);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f7fb fa70 	bl	8000310 <strlen>
 8004e30:	61f8      	str	r0, [r7, #28]
		TxHeader.Identifier = id;
 8004e32:	897a      	ldrh	r2, [r7, #10]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	605a      	str	r2, [r3, #4]
		TxHeader.DataLength = dlc.value();
 8004e38:	f107 0314 	add.w	r3, r7, #20
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fa10 	bl	8005262 <_ZNRSt8optionalImE5valueEv>
 8004e42:	4603      	mov	r3, r0
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	611a      	str	r2, [r3, #16]
		TxHeader.FDFormat = FDCAN_FD_CAN;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004e50:	61da      	str	r2, [r3, #28]
		TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2200      	movs	r2, #0
 8004e56:	60da      	str	r2, [r3, #12]
		TxHeader.BitRateSwitch = FDCAN_BRS_ON;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004e5e:	619a      	str	r2, [r3, #24]
		TxHeader.IdType = FDCAN_STANDARD_ID;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	609a      	str	r2, [r3, #8]
		TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	621a      	str	r2, [r3, #32]
		TxHeader.MessageMarker = 0;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	625a      	str	r2, [r3, #36]	; 0x24
		TxData[0] = ERROR;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		memset(TxData + 1, ' ', MAX_MESSAGE_SIZE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	3350      	adds	r3, #80	; 0x50
 8004e7e:	3301      	adds	r3, #1
 8004e80:	2240      	movs	r2, #64	; 0x40
 8004e82:	2120      	movs	r1, #32
 8004e84:	4618      	mov	r0, r3
 8004e86:	f01b fcb5 	bl	80207f4 <memset>
		for(int i = 1; i <= str_size; i++)
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e90:	69fa      	ldr	r2, [r7, #28]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d30e      	bcc.n	8004eb4 <_ZN3Can18send_error_messageEtPKc+0xbe>
			TxData[i] = (uint8_t) str[i-1];
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	3b01      	subs	r3, #1
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	7819      	ldrb	r1, [r3, #0]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3350      	adds	r3, #80	; 0x50
 8004ea8:	460a      	mov	r2, r1
 8004eaa:	701a      	strb	r2, [r3, #0]
		for(int i = 1; i <= str_size; i++)
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	3301      	adds	r3, #1
 8004eb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004eb2:	e7ec      	b.n	8004e8e <_ZN3Can18send_error_messageEtPKc+0x98>
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	6818      	ldr	r0, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	1d19      	adds	r1, r3, #4
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	3350      	adds	r3, #80	; 0x50
 8004ec0:	461a      	mov	r2, r3
 8004ec2:	f014 fec8 	bl	8019c56 <HAL_FDCAN_AddMessageToTxFifoQ>
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	3728      	adds	r7, #40	; 0x28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 8004ee4:	b590      	push	{r4, r7, lr}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7ff ffed 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	681c      	ldr	r4, [r3, #0]
 8004ef8:	6838      	ldr	r0, [r7, #0]
 8004efa:	f7ff ffe8 	bl	8004ece <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEE4baseEv>
 8004efe:	4603      	mov	r3, r0
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	429c      	cmp	r4, r3
 8004f04:	bf0c      	ite	eq
 8004f06:	2301      	moveq	r3, #1
 8004f08:	2300      	movne	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	bd90      	pop	{r4, r7, pc}

08004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
	++_M_current;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f103 0208 	add.w	r2, r3, #8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	601a      	str	r2, [r3, #0]
	return *this;
 8004f28:	687b      	ldr	r3, [r7, #4]
      }
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr
	...

08004f50 <_ZN3Can17get_dlc_from_sizeEm>:
		packet->unparse(TxData);
		HAL_FDCAN_AddMessageToTxFifoQ(hdcan, &TxHeader, TxData);
	}
}

optional<uint32_t> Can::get_dlc_from_size(uint32_t size){
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08a      	sub	sp, #40	; 0x28
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
	for(const auto DLC : Can::DLCS){
 8004f5c:	4b1e      	ldr	r3, [pc, #120]	; (8004fd8 <_ZN3Can17get_dlc_from_sizeEm+0x88>)
 8004f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f62:	f000 f993 	bl	800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>
 8004f66:	4603      	mov	r3, r0
 8004f68:	61bb      	str	r3, [r7, #24]
 8004f6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f6c:	f000 f99e 	bl	80052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>
 8004f70:	4603      	mov	r3, r0
 8004f72:	617b      	str	r3, [r7, #20]
 8004f74:	f107 0214 	add.w	r2, r7, #20
 8004f78:	f107 0318 	add.w	r3, r7, #24
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff ffb0 	bl	8004ee4 <_ZN9__gnu_cxxeqIPK3DLCS3_St6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8004f84:	4603      	mov	r3, r0
 8004f86:	f083 0301 	eor.w	r3, r3, #1
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d01d      	beq.n	8004fcc <_ZN3Can17get_dlc_from_sizeEm+0x7c>
 8004f90:	f107 0318 	add.w	r3, r7, #24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7ff ffce 	bl	8004f36 <_ZNK9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEdeEv>
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	f107 031c 	add.w	r3, r7, #28
 8004fa0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004fa4:	e883 0003 	stmia.w	r3, {r0, r1}
		if(DLC.size >= size)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d807      	bhi.n	8004fc0 <_ZN3Can17get_dlc_from_sizeEm+0x70>
			return DLC.code;
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	3304      	adds	r3, #4
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	68f8      	ldr	r0, [r7, #12]
 8004fba:	f000 f988 	bl	80052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>
 8004fbe:	e006      	b.n	8004fce <_ZN3Can17get_dlc_from_sizeEm+0x7e>
	for(const auto DLC : Can::DLCS){
 8004fc0:	f107 0318 	add.w	r3, r7, #24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff ffa5 	bl	8004f14 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEppEv>
 8004fca:	e7d3      	b.n	8004f74 <_ZN3Can17get_dlc_from_sizeEm+0x24>
	}
}
 8004fcc:	bf00      	nop
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	3728      	adds	r7, #40	; 0x28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	24000104 	.word	0x24000104

08004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>:

void Can::message_received_all_cans(FDCAN_HandleTypeDef* hfdcan,uint32_t RxFifo0ITs){
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
	for(auto can : Can::all_cans)
 8004fe6:	4b1a      	ldr	r3, [pc, #104]	; (8005050 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x74>)
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	6978      	ldr	r0, [r7, #20]
 8004fec:	f000 f900 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	6978      	ldr	r0, [r7, #20]
 8004ff6:	f000 f90b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	f107 0208 	add.w	r2, r7, #8
 8005002:	f107 030c 	add.w	r3, r7, #12
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f7ff fde0 	bl	8004bce <_ZN9__gnu_cxxeqIPP3CanS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800500e:	4603      	mov	r3, r0
 8005010:	f083 0301 	eor.w	r3, r3, #1
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b00      	cmp	r3, #0
 8005018:	d016      	beq.n	8005048 <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x6c>
 800501a:	f107 030c 	add.w	r3, r7, #12
 800501e:	4618      	mov	r0, r3
 8005020:	f7ff fdfd 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005024:	4603      	mov	r3, r0
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	613b      	str	r3, [r7, #16]
		if(can->hdcan == hfdcan)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	429a      	cmp	r2, r3
 8005032:	d103      	bne.n	800503c <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x60>
			can->message_received(RxFifo0ITs);
 8005034:	6839      	ldr	r1, [r7, #0]
 8005036:	6938      	ldr	r0, [r7, #16]
 8005038:	f000 f80c 	bl	8005054 <_ZN3Can16message_receivedEm>
	for(auto can : Can::all_cans)
 800503c:	f107 030c 	add.w	r3, r7, #12
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fddc 	bl	8004bfe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEppEv>
 8005046:	e7da      	b.n	8004ffe <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm+0x22>
}
 8005048:	bf00      	nop
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	240000f8 	.word	0x240000f8

08005054 <_ZN3Can16message_receivedEm>:

void Can::message_received(uint32_t RxFifo0ITs) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET){
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d01a      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
		if(HAL_FDCAN_GetRxMessage(hdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK){
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	3390      	adds	r3, #144	; 0x90
 8005076:	2140      	movs	r1, #64	; 0x40
 8005078:	f014 fe48 	bl	8019d0c <HAL_FDCAN_GetRxMessage>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	bf0c      	ite	eq
 8005082:	2301      	moveq	r3, #1
 8005084:	2300      	movne	r3, #0
 8005086:	b2db      	uxtb	r3, r3
 8005088:	2b00      	cmp	r3, #0
 800508a:	d008      	beq.n	800509e <_ZN3Can16message_receivedEm+0x4a>
			Packet::process_packet(RxHeader.Identifier, RxData);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005090:	b29a      	uxth	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3390      	adds	r3, #144	; 0x90
 8005096:	4619      	mov	r1, r3
 8005098:	4610      	mov	r0, r2
 800509a:	f7ff fd2d 	bl	8004af8 <_ZN6Packet14process_packetEtPh>
		}
	}
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f931 	bl	8005316 <_ZNSaIP3CanED1Ev>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4618      	mov	r0, r3
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80050be:	b580      	push	{r7, lr}
 80050c0:	b082      	sub	sp, #8
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 f914 	bl	80052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>:
      vector() = default;
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ffeb 	bl	80050be <_ZNSt12_Vector_baseIP3CanSaIS1_EEC1Ev>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b084      	sub	sp, #16
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f107 030c 	add.w	r3, r7, #12
 8005100:	4611      	mov	r1, r2
 8005102:	4618      	mov	r0, r3
 8005104:	f000 f97e 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	1d1a      	adds	r2, r3, #4
 800511e:	f107 030c 	add.w	r3, r7, #12
 8005122:	4611      	mov	r1, r2
 8005124:	4618      	mov	r0, r3
 8005126:	f000 f96d 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	4618      	mov	r0, r3
 800512e:	3710      	adds	r7, #16
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
      { return _M_t.begin(); }
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4618      	mov	r0, r3
 8005140:	f000 f970 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 8005144:	4603      	mov	r3, r0
 8005146:	4618      	mov	r0, r3
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800514e:	b580      	push	{r7, lr}
 8005150:	b082      	sub	sp, #8
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4618      	mov	r0, r3
 800515a:	f000 f974 	bl	8005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>
 800515e:	4603      	mov	r3, r0
 8005160:	4618      	mov	r0, r3
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4618      	mov	r0, r3
 800519e:	f01b fa3d 	bl	802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 80051a2:	4602      	mov	r2, r0
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
	return *this;
 80051a8:	687b      	ldr	r3, [r7, #4]
      }
 80051aa:	4618      	mov	r0, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b082      	sub	sp, #8
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f952 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 80051c4:	4603      	mov	r3, r0
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <_ZNSt6vectorIP3CanSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80051ce:	b580      	push	{r7, lr}
 80051d0:	b082      	sub	sp, #8
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
 80051d6:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80051d8:	6838      	ldr	r0, [r7, #0]
 80051da:	f000 f953 	bl	8005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>
 80051de:	4603      	mov	r3, r0
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f959 	bl	800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80051e8:	bf00      	nop
 80051ea:	3708      	adds	r7, #8
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	f107 030c 	add.w	r3, r7, #12
 80051fe:	4611      	mov	r1, r2
 8005200:	4618      	mov	r0, r3
 8005202:	f000 f97c 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	f107 030c 	add.w	r3, r7, #12
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f000 f96b 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4618      	mov	r0, r3
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <_ZNKSt8optionalImEcvbEv>:

      constexpr const _Tp&&
      operator*() const&&
      { return std::move(this->_M_get()); }

      constexpr explicit operator bool() const noexcept
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f805 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005240:	4603      	mov	r3, r0
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}

0800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	791b      	ldrb	r3, [r3, #4]
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <_ZNRSt8optionalImE5valueEv>:
	  ? this->_M_get()
	  : (__throw_bad_optional_access(), this->_M_get());
      }

      constexpr _Tp&
      value()&
 8005262:	b580      	push	{r7, lr}
 8005264:	b082      	sub	sp, #8
 8005266:	af00      	add	r7, sp, #0
 8005268:	6078      	str	r0, [r7, #4]
      {
	return this->_M_is_engaged()
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff ffed 	bl	800524a <_ZNKSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE13_M_is_engagedEv>
 8005270:	4603      	mov	r3, r0
	  ? this->_M_get()
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <_ZNRSt8optionalImE5valueEv+0x1e>
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f951 	bl	800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>
 800527c:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800527e:	e001      	b.n	8005284 <_ZNRSt8optionalImE5valueEv+0x22>
 8005280:	f7ff fbb3 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <_ZNKSt6vectorI3DLCSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	f107 030c 	add.w	r3, r7, #12
 800529a:	4611      	mov	r1, r2
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f94b 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <_ZNKSt6vectorI3DLCSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	1d1a      	adds	r2, r3, #4
 80052b8:	f107 030c 	add.w	r3, r7, #12
 80052bc:	4611      	mov	r1, r2
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f93a 	bl	8005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <_ZNSt8optionalImEC1IRKmLb1EEEOT_>:
	optional(_Up&& __t)
 80052ce:	b5b0      	push	{r4, r5, r7, lr}
 80052d0:	b082      	sub	sp, #8
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 80052d8:	687c      	ldr	r4, [r7, #4]
 80052da:	6838      	ldr	r0, [r7, #0]
 80052dc:	f000 f93c 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80052e0:	4603      	mov	r3, r0
 80052e2:	461a      	mov	r2, r3
 80052e4:	4629      	mov	r1, r5
 80052e6:	4620      	mov	r0, r4
 80052e8:	f000 f952 	bl	8005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4618      	mov	r0, r3
 80052f0:	3708      	adds	r7, #8
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bdb0      	pop	{r4, r5, r7, pc}

080052f6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b082      	sub	sp, #8
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f95b 	bl	80055ba <_ZNSaIP3CanEC1Ev>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f963 	bl	80055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4618      	mov	r0, r3
 8005310:	3708      	adds	r7, #8
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}

08005316 <_ZNSaIP3CanED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4618      	mov	r0, r3
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005344:	461a      	mov	r2, r3
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f957 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      }
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff fea9 	bl	80050a6 <_ZNSt12_Vector_baseIP3CanSaIS1_EE12_Vector_implD1Ev>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4618      	mov	r0, r3
 8005358:	3708      	adds	r7, #8
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}

0800535e <_ZNSaI3DLCEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800535e:	b580      	push	{r7, lr}
 8005360:	b082      	sub	sp, #8
 8005362:	af00      	add	r7, sp, #0
 8005364:	6078      	str	r0, [r7, #4]
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 f95a 	bl	8005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4618      	mov	r0, r3
 8005370:	3708      	adds	r7, #8
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}

08005376 <_ZNSaI3DLCED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8005376:	b480      	push	{r7}
 8005378:	b083      	sub	sp, #12
 800537a:	af00      	add	r7, sp, #0
 800537c:	6078      	str	r0, [r7, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4618      	mov	r0, r3
 8005382:	370c      	adds	r7, #12
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr

0800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>:
      vector(initializer_list<value_type> __l,
 800538c:	b5b0      	push	{r4, r5, r7, lr}
 800538e:	b086      	sub	sp, #24
 8005390:	af00      	add	r7, sp, #0
 8005392:	60f8      	str	r0, [r7, #12]
 8005394:	1d38      	adds	r0, r7, #4
 8005396:	e880 0006 	stmia.w	r0, {r1, r2}
 800539a:	603b      	str	r3, [r7, #0]
      : _Base(__a)
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 f954 	bl	800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>
	_M_range_initialize(__l.begin(), __l.end(),
 80053a6:	1d3b      	adds	r3, r7, #4
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f978 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80053ae:	4604      	mov	r4, r0
 80053b0:	1d3b      	adds	r3, r7, #4
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 f97f 	bl	80056b6 <_ZNKSt16initializer_listI3DLCE3endEv>
 80053b8:	4602      	mov	r2, r0
 80053ba:	462b      	mov	r3, r5
 80053bc:	4621      	mov	r1, r4
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f99f 	bl	8005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>
      }
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4618      	mov	r0, r3
 80053c8:	3718      	adds	r7, #24
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bdb0      	pop	{r4, r5, r7, pc}

080053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80053ce:	b5b0      	push	{r4, r5, r7, lr}
 80053d0:	b082      	sub	sp, #8
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681c      	ldr	r4, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f000 f9c7 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 80053e6:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80053e8:	461a      	mov	r2, r3
 80053ea:	4629      	mov	r1, r5
 80053ec:	4620      	mov	r0, r4
 80053ee:	f000 f9cc 	bl	800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>
      }
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f939 	bl	800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bdb0      	pop	{r4, r5, r7, pc}

08005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4618      	mov	r0, r3
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	f107 030c 	add.w	r3, r7, #12
 8005434:	4611      	mov	r1, r2
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f9b5 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	4618      	mov	r0, r3
 8005440:	3710      	adds	r7, #16
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}

08005446 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005446:	b580      	push	{r7, lr}
 8005448:	b084      	sub	sp, #16
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	1d1a      	adds	r2, r3, #4
 8005452:	f107 030c 	add.w	r3, r7, #12
 8005456:	4611      	mov	r1, r2
 8005458:	4618      	mov	r0, r3
 800545a:	f000 f9a4 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4618      	mov	r0, r3
 8005462:	3710      	adds	r7, #16
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr()
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f000 f9a5 	bl	80057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 800547a:	4603      	mov	r3, r0
 800547c:	4618      	mov	r0, r3
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZSt4moveIRP3CanEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4618      	mov	r0, r3
 8005490:	370c      	adds	r7, #12
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800549a:	b5b0      	push	{r4, r5, r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d011      	beq.n	80054d4 <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80054b0:	687c      	ldr	r4, [r7, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685d      	ldr	r5, [r3, #4]
 80054b6:	6838      	ldr	r0, [r7, #0]
 80054b8:	f000 f990 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054bc:	4603      	mov	r3, r0
 80054be:	461a      	mov	r2, r3
 80054c0:	4629      	mov	r1, r5
 80054c2:	4620      	mov	r0, r4
 80054c4:	f000 f9aa 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	1d1a      	adds	r2, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	e00c      	b.n	80054ee <_ZNSt6vectorIP3CanSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fe9b 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 80054da:	4604      	mov	r4, r0
 80054dc:	6838      	ldr	r0, [r7, #0]
 80054de:	f000 f97d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80054e2:	4603      	mov	r3, r0
 80054e4:	461a      	mov	r2, r3
 80054e6:	4621      	mov	r1, r4
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f9a9 	bl	8005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa22 	bl	8005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>
 80054f4:	4603      	mov	r3, r0
      }
 80054f6:	4618      	mov	r0, r3
 80054f8:	3708      	adds	r7, #8
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bdb0      	pop	{r4, r5, r7, pc}

080054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80054fe:	b480      	push	{r7}
 8005500:	b083      	sub	sp, #12
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
 8005506:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	601a      	str	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4618      	mov	r0, r3
 8005514:	370c      	adds	r7, #12
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <_ZNSt19_Optional_base_implImSt14_Optional_baseImLb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4618      	mov	r0, r3
 800552a:	f000 fa20 	bl	800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>
 800552e:	4603      	mov	r3, r0
      }
 8005530:	4618      	mov	r0, r3
 8005532:	3708      	adds	r7, #8
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <_ZN9__gnu_cxx17__normal_iteratorIPK3DLCSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	601a      	str	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr

08005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005558:	b480      	push	{r7}
 800555a:	b083      	sub	sp, #12
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr

0800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800556e:	b590      	push	{r4, r7, lr}
 8005570:	b085      	sub	sp, #20
 8005572:	af00      	add	r7, sp, #0
 8005574:	60f8      	str	r0, [r7, #12]
 8005576:	7239      	strb	r1, [r7, #8]
 8005578:	607a      	str	r2, [r7, #4]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	4621      	mov	r1, r4
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa11 	bl	80059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4618      	mov	r0, r3
 800558a:	3714      	adds	r7, #20
 800558c:	46bd      	mov	sp, r7
 800558e:	bd90      	pop	{r4, r7, pc}

08005590 <_ZNSt14_Optional_baseImLb1ELb1EEC1IJRKmELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 8005590:	b5b0      	push	{r4, r5, r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	7239      	strb	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800559c:	68fc      	ldr	r4, [r7, #12]
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f7ff ffda 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80055a4:	4603      	mov	r3, r0
 80055a6:	461a      	mov	r2, r3
 80055a8:	4629      	mov	r1, r5
 80055aa:	4620      	mov	r0, r4
 80055ac:	f7ff ffdf 	bl	800556e <_ZNSt17_Optional_payloadImLb1ELb1ELb1EECI1St22_Optional_payload_baseImEIJRKmEEESt10in_place_tDpOT_>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4618      	mov	r0, r3
 80055b4:	3710      	adds	r7, #16
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bdb0      	pop	{r4, r5, r7, pc}

080055ba <_ZNSaIP3CanEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80055ba:	b580      	push	{r7, lr}
 80055bc:	b082      	sub	sp, #8
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f000 fa08 	bl	80059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <_ZNSt12_Vector_baseIP3CanSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80055d2:	b480      	push	{r7}
 80055d4:	b083      	sub	sp, #12
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2200      	movs	r2, #0
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	605a      	str	r2, [r3, #4]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	609a      	str	r2, [r3, #8]
	{ }
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4618      	mov	r0, r3
 80055f0:	370c      	adds	r7, #12
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr

080055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b084      	sub	sp, #16
 80055fe:	af00      	add	r7, sp, #0
 8005600:	60f8      	str	r0, [r7, #12]
 8005602:	60b9      	str	r1, [r7, #8]
 8005604:	607a      	str	r2, [r7, #4]
	if (__p)
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	68b9      	ldr	r1, [r7, #8]
 8005612:	4618      	mov	r0, r3
 8005614:	f000 f9eb 	bl	80059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>
      }
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4618      	mov	r0, r3
 800562c:	370c      	adds	r7, #12
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8005636:	b580      	push	{r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f7ff fe99 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZNSt12_Vector_baseI3DLCSaIS0_EEC1ERKS1_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 800564e:	b580      	push	{r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
 8005656:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6839      	ldr	r1, [r7, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 f9e5 	bl	8005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4618      	mov	r0, r3
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <_ZNSt12_Vector_baseI3DLCSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 8005684:	461a      	mov	r2, r3
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f000 f9e2 	bl	8005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>
      }
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ffd1 	bl	8005636 <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implD1Ev>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZNKSt16initializer_listI3DLCE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 800569e:	b480      	push	{r7}
 80056a0:	b083      	sub	sp, #12
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4618      	mov	r0, r3
 80056ac:	370c      	adds	r7, #12
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <_ZNKSt16initializer_listI3DLCE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 80056b6:	b590      	push	{r4, r7, lr}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff ffed 	bl	800569e <_ZNKSt16initializer_listI3DLCE5beginEv>
 80056c4:	4604      	mov	r4, r0
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f9d5 	bl	8005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>
 80056cc:	4603      	mov	r3, r0
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	4423      	add	r3, r4
 80056d2:	4618      	mov	r0, r3
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd90      	pop	{r4, r7, pc}

080056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>:
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 80056da:	b5b0      	push	{r4, r5, r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 80056e4:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	4618      	mov	r0, r3
 80056ea:	f000 f9d0 	bl	8005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>
      return std::__distance(__first, __last,
 80056ee:	462a      	mov	r2, r5
 80056f0:	6839      	ldr	r1, [r7, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f9d5 	bl	8005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>
 80056f8:	4603      	mov	r3, r0
    }
 80056fa:	4618      	mov	r0, r3
 80056fc:	3708      	adds	r7, #8
 80056fe:	46bd      	mov	sp, r7
 8005700:	bdb0      	pop	{r4, r5, r7, pc}

08005702 <_ZNSt6vectorI3DLCSaIS0_EE19_M_range_initializeIPKS0_EEvT_S6_St20forward_iterator_tag>:
	_M_range_initialize(_ForwardIterator __first, _ForwardIterator __last,
 8005702:	b590      	push	{r4, r7, lr}
 8005704:	b087      	sub	sp, #28
 8005706:	af00      	add	r7, sp, #0
 8005708:	60f8      	str	r0, [r7, #12]
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	607a      	str	r2, [r7, #4]
 800570e:	703b      	strb	r3, [r7, #0]
	  const size_type __n = std::distance(__first, __last);
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	68b8      	ldr	r0, [r7, #8]
 8005714:	f7ff ffe1 	bl	80056da <_ZSt8distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_>
 8005718:	4603      	mov	r3, r0
 800571a:	617b      	str	r3, [r7, #20]
	    = this->_M_allocate(_S_check_init_len(__n, _M_get_Tp_allocator()));
 800571c:	68fc      	ldr	r4, [r7, #12]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 f827 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 8005726:	4603      	mov	r3, r0
 8005728:	4619      	mov	r1, r3
 800572a:	6978      	ldr	r0, [r7, #20]
 800572c:	f000 f9ca 	bl	8005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>
 8005730:	4603      	mov	r3, r0
 8005732:	4619      	mov	r1, r3
 8005734:	4620      	mov	r0, r4
 8005736:	f000 f9ed 	bl	8005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>
 800573a:	4602      	mov	r2, r0
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	441a      	add	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	609a      	str	r2, [r3, #8]
	    std::__uninitialized_copy_a(__first, __last,
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681c      	ldr	r4, [r3, #0]
					_M_get_Tp_allocator());
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f80d 	bl	8005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>
 800575a:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 800575c:	4622      	mov	r2, r4
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68b8      	ldr	r0, [r7, #8]
 8005762:	f000 f9eb 	bl	8005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>
 8005766:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]
	}
 800576c:	bf00      	nop
 800576e:	371c      	adds	r7, #28
 8005770:	46bd      	mov	sp, r7
 8005772:	bd90      	pop	{r4, r7, pc}

08005774 <_ZNSt12_Vector_baseI3DLCSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4618      	mov	r0, r3
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <_ZSt8_DestroyIP3DLCS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800578a:	b580      	push	{r7, lr}
 800578c:	b084      	sub	sp, #16
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005796:	68b9      	ldr	r1, [r7, #8]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f9e0 	bl	8005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>
    }
 800579e:	bf00      	nop
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80057a6:	b480      	push	{r7}
 80057a8:	b083      	sub	sp, #12
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	601a      	str	r2, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() noexcept
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f9dc 	bl	8005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 80057d2:	4603      	mov	r3, r0
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4618      	mov	r0, r3
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80057f2:	b590      	push	{r4, r7, lr}
 80057f4:	b083      	sub	sp, #12
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
 80057fa:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80057fc:	6838      	ldr	r0, [r7, #0]
 80057fe:	f7ff ffed 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 8005802:	4603      	mov	r3, r0
 8005804:	681c      	ldr	r4, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4619      	mov	r1, r3
 800580a:	2004      	movs	r0, #4
 800580c:	f7fa fd90 	bl	8000330 <_ZnwjPv>
 8005810:	4603      	mov	r3, r0
 8005812:	601c      	str	r4, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	bd90      	pop	{r4, r7, pc}

0800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff ffd7 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 800582e:	4603      	mov	r3, r0
 8005830:	4619      	mov	r1, r3
 8005832:	68b8      	ldr	r0, [r7, #8]
 8005834:	f7ff ffdd 	bl	80057f2 <_ZSt12construct_atIP3CanJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005840:	b5b0      	push	{r4, r5, r7, lr}
 8005842:	b08c      	sub	sp, #48	; 0x30
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800584c:	4a39      	ldr	r2, [pc, #228]	; (8005934 <_ZNSt6vectorIP3CanSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800584e:	2101      	movs	r1, #1
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f000 f9a5 	bl	8005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>
 8005856:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	f7ff fcc3 	bl	80051f0 <_ZNSt6vectorIP3CanSaIS1_EE5beginEv>
 800586a:	4603      	mov	r3, r0
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	f107 0214 	add.w	r2, r7, #20
 8005872:	f107 0308 	add.w	r3, r7, #8
 8005876:	4611      	mov	r1, r2
 8005878:	4618      	mov	r0, r3
 800587a:	f000 f9d8 	bl	8005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800587e:	4603      	mov	r3, r0
 8005880:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005886:	4618      	mov	r0, r3
 8005888:	f000 f9e6 	bl	8005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>
 800588c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8005892:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005898:	69fa      	ldr	r2, [r7, #28]
 800589a:	18d5      	adds	r5, r2, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7ff ff9d 	bl	80057dc <_ZSt7forwardIP3CanEOT_RNSt16remove_referenceIS2_E4typeE>
 80058a2:	4603      	mov	r3, r0
 80058a4:	461a      	mov	r2, r3
 80058a6:	4629      	mov	r1, r5
 80058a8:	4620      	mov	r0, r4
 80058aa:	f7ff ffb7 	bl	800581c <_ZNSt16allocator_traitsISaIP3CanEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80058ae:	2300      	movs	r3, #0
 80058b0:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058b2:	f107 0308 	add.w	r3, r7, #8
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff f97e 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058bc:	4603      	mov	r3, r0
 80058be:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f9f0 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058c8:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058ca:	69fa      	ldr	r2, [r7, #28]
 80058cc:	4621      	mov	r1, r4
 80058ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d0:	f000 f9d6 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058d4:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3304      	adds	r3, #4
 80058da:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058dc:	f107 0308 	add.w	r3, r7, #8
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7ff f969 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 80058e6:	4603      	mov	r3, r0
 80058e8:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f9db 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 80058f2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058f8:	4620      	mov	r0, r4
 80058fa:	f000 f9c1 	bl	8005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80058fe:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8005900:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	689a      	ldr	r2, [r3, #8]
 8005906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800590c:	461a      	mov	r2, r3
 800590e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005910:	f7ff fe73 	bl	80055fa <_ZNSt12_Vector_baseIP3CanSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	69fa      	ldr	r2, [r7, #28]
 8005918:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	009b      	lsls	r3, r3, #2
 8005924:	69fa      	ldr	r2, [r7, #28]
 8005926:	441a      	add	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	609a      	str	r2, [r3, #8]
    }
 800592c:	bf00      	nop
 800592e:	3730      	adds	r7, #48	; 0x30
 8005930:	46bd      	mov	sp, r7
 8005932:	bdb0      	pop	{r4, r5, r7, pc}
 8005934:	08020ad8 	.word	0x08020ad8

08005938 <_ZNSt6vectorIP3CanSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f7ff fc65 	bl	8005210 <_ZNSt6vectorIP3CanSaIS1_EE3endEv>
 8005946:	4603      	mov	r3, r0
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	2101      	movs	r1, #1
 8005950:	4618      	mov	r0, r3
 8005952:	f000 f9c2 	bl	8005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>
 8005956:	4603      	mov	r3, r0
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	f107 0308 	add.w	r3, r7, #8
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f95d 	bl	8004c1e <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEdeEv>
 8005964:	4603      	mov	r3, r0
      }
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <_ZNSt22_Optional_payload_baseImE6_M_getEv>:
      _M_get() noexcept
 800596e:	b480      	push	{r7}
 8005970:	b083      	sub	sp, #12
 8005972:	af00      	add	r7, sp, #0
 8005974:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4618      	mov	r0, r3
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 8005984:	b580      	push	{r7, lr}
 8005986:	b084      	sub	sp, #16
 8005988:	af00      	add	r7, sp, #0
 800598a:	60f8      	str	r0, [r7, #12]
 800598c:	7239      	strb	r1, [r7, #8]
 800598e:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7ff fde1 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 8005996:	4603      	mov	r3, r0
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	601a      	str	r2, [r3, #0]
	    { }
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4618      	mov	r0, r3
 80059a2:	3710      	adds	r7, #16
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <_ZNSt22_Optional_payload_baseImEC1IJRKmEEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 80059a8:	b5b0      	push	{r4, r5, r7, lr}
 80059aa:	b084      	sub	sp, #16
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	7239      	strb	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 80059b4:	68fc      	ldr	r4, [r7, #12]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7ff fdce 	bl	8005558 <_ZSt7forwardIRKmEOT_RNSt16remove_referenceIS2_E4typeE>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	4629      	mov	r1, r5
 80059c2:	4620      	mov	r0, r4
 80059c4:	f7ff ffde 	bl	8005984 <_ZNSt22_Optional_payload_baseImE8_StorageImLb1EEC1IJRKmEEESt10in_place_tDpOT_>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	711a      	strb	r2, [r3, #4]
	{ }
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bdb0      	pop	{r4, r5, r7, pc}

080059d8 <_ZN9__gnu_cxx13new_allocatorIP3CanEC1Ev>:
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4618      	mov	r0, r3
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b088      	sub	sp, #32
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	607a      	str	r2, [r7, #4]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	61fb      	str	r3, [r7, #28]
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	61bb      	str	r3, [r7, #24]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005a06:	f7fa fc8b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8005a10:	69b8      	ldr	r0, [r7, #24]
 8005a12:	f01a fd97 	bl	8020544 <_ZdlPv>
	    return;
 8005a16:	e005      	b.n	8005a24 <_ZNSt16allocator_traitsISaIP3CanEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	69b9      	ldr	r1, [r7, #24]
 8005a1c:	69f8      	ldr	r0, [r7, #28]
 8005a1e:	f000 faa4 	bl	8005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	3720      	adds	r7, #32
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <_ZNSt12_Vector_baseI3DLCSaIS0_EE12_Vector_implC1ERKS1_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b082      	sub	sp, #8
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8005a36:	6839      	ldr	r1, [r7, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f967 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f971 	bl	8005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3708      	adds	r7, #8
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}

08005a50 <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
	if (__p)
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d005      	beq.n	8005a6e <_ZNSt12_Vector_baseI3DLCSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 f971 	bl	8005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>
      }
 8005a6e:	bf00      	nop
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}

08005a76 <_ZNKSt16initializer_listI3DLCE4sizeEv>:
      size() const noexcept { return _M_len; }
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr

08005a8e <_ZSt19__iterator_categoryIPK3DLCENSt15iterator_traitsIT_E17iterator_categoryERKS4_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8005a8e:	b480      	push	{r7}
 8005a90:	b083      	sub	sp, #12
 8005a92:	af00      	add	r7, sp, #0
 8005a94:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <_ZSt10__distanceIPK3DLCENSt15iterator_traitsIT_E15difference_typeES4_S4_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8005aa2:	b480      	push	{r7}
 8005aa4:	b085      	sub	sp, #20
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	60f8      	str	r0, [r7, #12]
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	10db      	asrs	r3, r3, #3
    }
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr
	...

08005ac4 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_>:
      _S_check_init_len(size_type __n, const allocator_type& __a)
 8005ac4:	b590      	push	{r4, r7, lr}
 8005ac6:	b085      	sub	sp, #20
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	if (__n > _S_max_size(_Tp_alloc_type(__a)))
 8005ace:	f107 030c 	add.w	r3, r7, #12
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f919 	bl	8005d0c <_ZNSaI3DLCEC1ERKS0_>
 8005ada:	f107 030c 	add.w	r3, r7, #12
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 f961 	bl	8005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	bf8c      	ite	hi
 8005aec:	2301      	movhi	r3, #1
 8005aee:	2300      	movls	r3, #0
 8005af0:	b2dc      	uxtb	r4, r3
 8005af2:	f107 030c 	add.w	r3, r7, #12
 8005af6:	4618      	mov	r0, r3
 8005af8:	f7ff fc3d 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8005afc:	2c00      	cmp	r4, #0
 8005afe:	d002      	beq.n	8005b06 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x42>
	  __throw_length_error(
 8005b00:	4803      	ldr	r0, [pc, #12]	; (8005b10 <_ZNSt6vectorI3DLCSaIS0_EE17_S_check_init_lenEjRKS1_+0x4c>)
 8005b02:	f01a fded 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	return __n;
 8005b06:	687b      	ldr	r3, [r7, #4]
      }
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd90      	pop	{r4, r7, pc}
 8005b10:	08020af4 	.word	0x08020af4

08005b14 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x1e>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6839      	ldr	r1, [r7, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f000 f956 	bl	8005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	e000      	b.n	8005b34 <_ZNSt12_Vector_baseI3DLCSaIS0_EE11_M_allocateEj+0x20>
 8005b32:	2300      	movs	r3, #0
      }
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <_ZSt22__uninitialized_copy_aIPK3DLCPS0_S0_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	68b9      	ldr	r1, [r7, #8]
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 f963 	bl	8005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005b54:	4603      	mov	r3, r0
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <_ZSt8_DestroyIP3DLCEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005b5e:	b580      	push	{r7, lr}
 8005b60:	b082      	sub	sp, #8
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
 8005b66:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005b68:	f7fa fbda 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <_ZSt8_DestroyIP3DLCEvT_S2_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f962 	bl	8005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>
 8005b7a:	e003      	b.n	8005b84 <_ZSt8_DestroyIP3DLCEvT_S2_+0x26>
	__destroy(__first, __last);
 8005b7c:	6839      	ldr	r1, [r7, #0]
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f975 	bl	8005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>
    }
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() noexcept
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4618      	mov	r0, r3
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f969 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005bb2:	4604      	mov	r4, r0
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f976 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bba:	4603      	mov	r3, r0
 8005bbc:	1ae2      	subs	r2, r4, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	bf34      	ite	cc
 8005bc4:	2301      	movcc	r3, #1
 8005bc6:	2300      	movcs	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d002      	beq.n	8005bd4 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f01a fd86 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 f966 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005bda:	4604      	mov	r4, r0
 8005bdc:	68f8      	ldr	r0, [r7, #12]
 8005bde:	f000 f962 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005be2:	4603      	mov	r3, r0
 8005be4:	613b      	str	r3, [r7, #16]
 8005be6:	f107 0208 	add.w	r2, r7, #8
 8005bea:	f107 0310 	add.w	r3, r7, #16
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7fc fe2e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4423      	add	r3, r4
 8005bfc:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f000 f951 	bl	8005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>
 8005c04:	4602      	mov	r2, r0
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d306      	bcc.n	8005c1a <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8005c0c:	68f8      	ldr	r0, [r7, #12]
 8005c0e:	f000 f939 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c12:	4602      	mov	r2, r0
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d904      	bls.n	8005c24 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x84>
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 f932 	bl	8005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>
 8005c20:	4603      	mov	r3, r0
 8005c22:	e000      	b.n	8005c26 <_ZNKSt6vectorIP3CanSaIS1_EE12_M_check_lenEjPKc+0x86>
 8005c24:	697b      	ldr	r3, [r7, #20]
      }
 8005c26:	4618      	mov	r0, r3
 8005c28:	371c      	adds	r7, #28
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd90      	pop	{r4, r7, pc}

08005c2e <_ZN9__gnu_cxxmiIPP3CanSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005c2e:	b590      	push	{r4, r7, lr}
 8005c30:	b083      	sub	sp, #12
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe ffbd 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	681c      	ldr	r4, [r3, #0]
 8005c42:	6838      	ldr	r0, [r7, #0]
 8005c44:	f7fe ffb8 	bl	8004bb8 <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	1ae3      	subs	r3, r4, r3
 8005c4e:	109b      	asrs	r3, r3, #2
 8005c50:	4618      	mov	r0, r3
 8005c52:	370c      	adds	r7, #12
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd90      	pop	{r4, r7, pc}

08005c58 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b082      	sub	sp, #8
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d006      	beq.n	8005c76 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x1e>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6839      	ldr	r1, [r7, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f000 f92a 	bl	8005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>
 8005c72:	4603      	mov	r3, r0
 8005c74:	e000      	b.n	8005c78 <_ZNSt12_Vector_baseIP3CanSaIS1_EE11_M_allocateEj+0x20>
 8005c76:	2300      	movs	r3, #0
      }
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <_ZNSt6vectorIP3CanSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af02      	add	r7, sp, #8
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
 8005c8c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005c8e:	f88d 4000 	strb.w	r4, [sp]
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 f934 	bl	8005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8005c9e:	4603      	mov	r3, r0
      }
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd90      	pop	{r4, r7, pc}

08005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005ca8:	b480      	push	{r7}
 8005caa:	b083      	sub	sp, #12
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005cbe:	b580      	push	{r7, lr}
 8005cc0:	b084      	sub	sp, #16
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	60f8      	str	r0, [r7, #12]
 8005cc6:	60b9      	str	r1, [r7, #8]
 8005cc8:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005cca:	68b9      	ldr	r1, [r7, #8]
 8005ccc:	68f8      	ldr	r0, [r7, #12]
 8005cce:	f000 f936 	bl	8005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>
    }
 8005cd2:	bf00      	nop
 8005cd4:	3710      	adds	r7, #16
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}

08005cda <_ZNK9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	b084      	sub	sp, #16
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	6078      	str	r0, [r7, #4]
 8005ce2:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	425b      	negs	r3, r3
 8005cee:	4413      	add	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]
 8005cf2:	f107 020c 	add.w	r2, r7, #12
 8005cf6:	f107 0308 	add.w	r3, r7, #8
 8005cfa:	4611      	mov	r1, r2
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7ff fbfe 	bl	80054fe <_ZN9__gnu_cxx17__normal_iteratorIPP3CanSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <_ZNSaI3DLCEC1ERKS0_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 8005d16:	6839      	ldr	r1, [r7, #0]
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f000 f935 	bl	8005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <_ZNSt12_Vector_baseI3DLCSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	605a      	str	r2, [r3, #4]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	609a      	str	r2, [r3, #8]
	{ }
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8005d68:	f7fa fada 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x2a>
	    ::operator delete(__p);
 8005d72:	69b8      	ldr	r0, [r7, #24]
 8005d74:	f01a fbe6 	bl	8020544 <_ZdlPv>
	    return;
 8005d78:	e005      	b.n	8005d86 <_ZNSt16allocator_traitsISaI3DLCEE10deallocateERS1_PS0_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8005d7a:	697a      	ldr	r2, [r7, #20]
 8005d7c:	69b9      	ldr	r1, [r7, #24]
 8005d7e:	69f8      	ldr	r0, [r7, #28]
 8005d80:	f000 f9a5 	bl	80060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>
      { __a.deallocate(__p, __n); }
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	3720      	adds	r7, #32
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005d8e:	b480      	push	{r7}
 8005d90:	b083      	sub	sp, #12
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005d96:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	370c      	adds	r7, #12
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr

08005da6 <_ZNSt6vectorI3DLCSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8005da6:	b580      	push	{r7, lr}
 8005da8:	b084      	sub	sp, #16
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8005dae:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8005db2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff ffea 	bl	8005d8e <_ZNSt16allocator_traitsISaI3DLCEE8max_sizeERKS1_>
 8005dba:	4603      	mov	r3, r0
 8005dbc:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8005dbe:	f107 0208 	add.w	r2, r7, #8
 8005dc2:	f107 030c 	add.w	r3, r7, #12
 8005dc6:	4611      	mov	r1, r2
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f7fd f80c 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	681b      	ldr	r3, [r3, #0]
      }
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3710      	adds	r7, #16
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	6039      	str	r1, [r7, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005dec:	f7fa fa98 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d006      	beq.n	8005e04 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	00db      	lsls	r3, r3, #3
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f01a fba6 	bl	802054c <_Znwj>
 8005e00:	4603      	mov	r3, r0
 8005e02:	e006      	b.n	8005e12 <_ZNSt16allocator_traitsISaI3DLCEE8allocateERS1_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005e04:	2200      	movs	r2, #0
 8005e06:	68b9      	ldr	r1, [r7, #8]
 8005e08:	68f8      	ldr	r0, [r7, #12]
 8005e0a:	f000 f96f 	bl	80060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	bf00      	nop
      { return __a.allocate(__n); }
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}

08005e1a <_ZSt18uninitialized_copyIPK3DLCPS0_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	60f8      	str	r0, [r7, #12]
 8005e22:	60b9      	str	r1, [r7, #8]
 8005e24:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8005e26:	2301      	movs	r3, #1
 8005e28:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f8b6 	bl	8005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>
 8005e34:	4603      	mov	r3, r0
    }
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
 8005e46:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8005e48:	687a      	ldr	r2, [r7, #4]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d00a      	beq.n	8005e66 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 f8b5 	bl	8005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>
 8005e56:	4603      	mov	r3, r0
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f000 f8bc 	bl	8005fd6 <_ZSt8_DestroyI3DLCEvPT_>
	  for (; __first != __last; ++__first)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	3308      	adds	r3, #8
 8005e62:	607b      	str	r3, [r7, #4]
 8005e64:	e7f0      	b.n	8005e48 <_ZNSt12_Destroy_auxILb0EE9__destroyIP3DLCEEvT_S4_+0xa>
	}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <_ZNSt12_Destroy_auxILb1EE9__destroyIP3DLCEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005e6e:	b480      	push	{r7}
 8005e70:	b083      	sub	sp, #12
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <_ZNKSt6vectorIP3CanSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b082      	sub	sp, #8
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 f8d2 	bl	8006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8005e94:	4603      	mov	r3, r0
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 f8b4 	bl	8006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3708      	adds	r7, #8
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}

08005ea6 <_ZNKSt6vectorIP3CanSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8005ea6:	b480      	push	{r7}
 8005ea8:	b083      	sub	sp, #12
 8005eaa:	af00      	add	r7, sp, #0
 8005eac:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685a      	ldr	r2, [r3, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	109b      	asrs	r3, r3, #2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	370c      	adds	r7, #12
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec4:	4770      	bx	lr

08005ec6 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8005ed8:	f7fa fa22 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005edc:	4603      	mov	r3, r0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d006      	beq.n	8005ef0 <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f01a fb30 	bl	802054c <_Znwj>
 8005eec:	4603      	mov	r3, r0
 8005eee:	e006      	b.n	8005efe <_ZNSt16allocator_traitsISaIP3CanEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	68f8      	ldr	r0, [r7, #12]
 8005ef6:	f000 f93a 	bl	800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>
 8005efa:	4603      	mov	r3, r0
 8005efc:	bf00      	nop
      { return __a.allocate(__n); }
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <_ZNSt6vectorIP3CanSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	607a      	str	r2, [r7, #4]
 8005f12:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f897 	bl	800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005f20:	4603      	mov	r3, r0
      }
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <_ZSt10destroy_atIP3CanEvPT_>:
    destroy_at(_Tp* __location)
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
    }
 8005f32:	bf00      	nop
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr

08005f3e <_ZSt8_DestroyIPP3CanEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005f3e:	b580      	push	{r7, lr}
 8005f40:	b082      	sub	sp, #8
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	6078      	str	r0, [r7, #4]
 8005f46:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8005f48:	f7fa f9ea 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d004      	beq.n	8005f5c <_ZSt8_DestroyIPP3CanEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f897 	bl	8006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>
 8005f5a:	e003      	b.n	8005f64 <_ZSt8_DestroyIPP3CanEvT_S3_+0x26>
	__destroy(__first, __last);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f8aa 	bl	80060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>
    }
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}

08005f6a <_ZN9__gnu_cxx13new_allocatorIP3CanE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b084      	sub	sp, #16
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4619      	mov	r1, r3
 8005f7c:	68b8      	ldr	r0, [r7, #8]
 8005f7e:	f01a fae3 	bl	8020548 <_ZdlPvj>
      }
 8005f82:	3710      	adds	r7, #16
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <_ZN9__gnu_cxx13new_allocatorI3DLCEC1ERKS2_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4618      	mov	r0, r3
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPK3DLCPS2_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	68b9      	ldr	r1, [r7, #8]
 8005fb0:	68f8      	ldr	r0, [r7, #12]
 8005fb2:	f000 f8ba 	bl	800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <_ZSt11__addressofI3DLCEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4618      	mov	r0, r3
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <_ZSt8_DestroyI3DLCEvPT_>:
    _Destroy(_Tp* __pointer)
 8005fd6:	b580      	push	{r7, lr}
 8005fd8:	b082      	sub	sp, #8
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 f8bb 	bl	800615a <_ZSt10destroy_atI3DLCEvPT_>
    }
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8005fec:	b480      	push	{r7}
 8005fee:	b083      	sub	sp, #12
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8005ff4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <_ZNSt6vectorIP3CanSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800600c:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006010:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7ff ffea 	bl	8005fec <_ZNSt16allocator_traitsISaIP3CanEE8max_sizeERKS2_>
 8006018:	4603      	mov	r3, r0
 800601a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800601c:	f107 0208 	add.w	r2, r7, #8
 8006020:	f107 030c 	add.w	r3, r7, #12
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7fc fedd 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800602c:	4603      	mov	r3, r0
 800602e:	681b      	ldr	r3, [r3, #0]
      }
 8006030:	4618      	mov	r0, r3
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <_ZNKSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006038:	b480      	push	{r7}
 800603a:	b083      	sub	sp, #12
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4618      	mov	r0, r3
 8006044:	370c      	adds	r7, #12
 8006046:	46bd      	mov	sp, r7
 8006048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604c:	4770      	bx	lr

0800604e <_ZSt12__relocate_aIPP3CanS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800604e:	b5b0      	push	{r4, r5, r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	607a      	str	r2, [r7, #4]
 800605a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f8a5 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006062:	4604      	mov	r4, r0
 8006064:	68b8      	ldr	r0, [r7, #8]
 8006066:	f000 f8a1 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 800606a:	4605      	mov	r5, r0
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f000 f89d 	bl	80061ac <_ZSt12__niter_baseIPP3CanET_S3_>
 8006072:	4602      	mov	r2, r0
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	4629      	mov	r1, r5
 8006078:	4620      	mov	r0, r4
 800607a:	f000 f8a2 	bl	80061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800607e:	4603      	mov	r3, r0
    }
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bdb0      	pop	{r4, r5, r7, pc}

08006088 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	429a      	cmp	r2, r3
 8006098:	d00a      	beq.n	80060b0 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8af 	bl	80061fe <_ZSt11__addressofIP3CanEPT_RS2_>
 80060a0:	4603      	mov	r3, r0
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 f8b6 	bl	8006214 <_ZSt8_DestroyIP3CanEvPT_>
	  for (; __first != __last; ++__first)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	3304      	adds	r3, #4
 80060ac:	607b      	str	r3, [r7, #4]
 80060ae:	e7f0      	b.n	8006092 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3CanEEvT_S5_+0xa>
	}
 80060b0:	bf00      	nop
 80060b2:	3708      	adds	r7, #8
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3CanEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr

080060ce <_ZN9__gnu_cxx13new_allocatorI3DLCE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	60f8      	str	r0, [r7, #12]
 80060d6:	60b9      	str	r1, [r7, #8]
 80060d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	00db      	lsls	r3, r3, #3
 80060de:	4619      	mov	r1, r3
 80060e0:	68b8      	ldr	r0, [r7, #8]
 80060e2:	f01a fa31 	bl	8020548 <_ZdlPvj>
      }
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}

080060ec <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f000 f896 	bl	800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>
 80060fe:	4602      	mov	r2, r0
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4293      	cmp	r3, r2
 8006104:	bf8c      	ite	hi
 8006106:	2301      	movhi	r3, #1
 8006108:	2300      	movls	r3, #0
 800610a:	b2db      	uxtb	r3, r3
 800610c:	2b00      	cmp	r3, #0
 800610e:	d001      	beq.n	8006114 <_ZN9__gnu_cxx13new_allocatorI3DLCE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006110:	f01a fae3 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	00db      	lsls	r3, r3, #3
 8006118:	4618      	mov	r0, r3
 800611a:	f01a fa17 	bl	802054c <_Znwj>
 800611e:	4603      	mov	r3, r0
 8006120:	bf00      	nop
      }
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}

0800612a <_ZSt4copyIPK3DLCPS0_ET0_T_S5_S4_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800612a:	b590      	push	{r4, r7, lr}
 800612c:	b085      	sub	sp, #20
 800612e:	af00      	add	r7, sp, #0
 8006130:	60f8      	str	r0, [r7, #12]
 8006132:	60b9      	str	r1, [r7, #8]
 8006134:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f883 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 800613c:	4604      	mov	r4, r0
 800613e:	68b8      	ldr	r0, [r7, #8]
 8006140:	f000 f87f 	bl	8006242 <_ZSt12__miter_baseIPK3DLCET_S3_>
 8006144:	4603      	mov	r3, r0
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	4619      	mov	r1, r3
 800614a:	4620      	mov	r0, r4
 800614c:	f000 f884 	bl	8006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006150:	4603      	mov	r3, r0
    }
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	bd90      	pop	{r4, r7, pc}

0800615a <_ZSt10destroy_atI3DLCEvPT_>:
    destroy_at(_Tp* __location)
 800615a:	b480      	push	{r7}
 800615c:	b083      	sub	sp, #12
 800615e:	af00      	add	r7, sp, #0
 8006160:	6078      	str	r0, [r7, #4]
    }
 8006162:	bf00      	nop
 8006164:	370c      	adds	r7, #12
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr

0800616e <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f88f 	bl	800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>
 8006180:	4602      	mov	r2, r0
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4293      	cmp	r3, r2
 8006186:	bf8c      	ite	hi
 8006188:	2301      	movhi	r3, #1
 800618a:	2300      	movls	r3, #0
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <_ZN9__gnu_cxx13new_allocatorIP3CanE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006192:	f01a faa2 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	4618      	mov	r0, r3
 800619c:	f01a f9d6 	bl	802054c <_Znwj>
 80061a0:	4603      	mov	r3, r0
 80061a2:	bf00      	nop
      }
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <_ZSt12__niter_baseIPP3CanET_S3_>:
    __niter_base(_Iterator __it)
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4618      	mov	r0, r3
 80061b8:	370c      	adds	r7, #12
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr

080061c2 <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80061c2:	b580      	push	{r7, lr}
 80061c4:	b086      	sub	sp, #24
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	60f8      	str	r0, [r7, #12]
 80061ca:	60b9      	str	r1, [r7, #8]
 80061cc:	607a      	str	r2, [r7, #4]
 80061ce:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80061d0:	68ba      	ldr	r2, [r7, #8]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	109b      	asrs	r3, r3, #2
 80061d8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	dd06      	ble.n	80061ee <_ZSt14__relocate_a_1IP3CanS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	461a      	mov	r2, r3
 80061e6:	68f9      	ldr	r1, [r7, #12]
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f01a fae9 	bl	80207c0 <memmove>
      return __result + __count;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
    }
 80061f6:	4618      	mov	r0, r3
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <_ZSt11__addressofIP3CanEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4618      	mov	r0, r3
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <_ZSt8_DestroyIP3CanEvPT_>:
    _Destroy(_Tp* __pointer)
 8006214:	b580      	push	{r7, lr}
 8006216:	b082      	sub	sp, #8
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fe84 	bl	8005f2a <_ZSt10destroy_atIP3CanEvPT_>
    }
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <_ZNK9__gnu_cxx13new_allocatorI3DLCE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006232:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8006236:	4618      	mov	r0, r3
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <_ZSt12__miter_baseIPK3DLCET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006242:	b480      	push	{r7}
 8006244:	b083      	sub	sp, #12
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
    { return __it; }
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4618      	mov	r0, r3
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <_ZSt13__copy_move_aILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006258:	b5b0      	push	{r4, r5, r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f826 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 800626a:	4604      	mov	r4, r0
 800626c:	68b8      	ldr	r0, [r7, #8]
 800626e:	f000 f822 	bl	80062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>
 8006272:	4605      	mov	r5, r0
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f828 	bl	80062cc <_ZSt12__niter_baseIP3DLCET_S2_>
 800627c:	4603      	mov	r3, r0
 800627e:	461a      	mov	r2, r3
 8006280:	4629      	mov	r1, r5
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f82d 	bl	80062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 8006288:	4602      	mov	r2, r0
 800628a:	1d3b      	adds	r3, r7, #4
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f000 f837 	bl	8006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>
 8006294:	4603      	mov	r3, r0
    }
 8006296:	4618      	mov	r0, r3
 8006298:	3710      	adds	r7, #16
 800629a:	46bd      	mov	sp, r7
 800629c:	bdb0      	pop	{r4, r5, r7, pc}

0800629e <_ZNK9__gnu_cxx13new_allocatorIP3CanE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800629e:	b480      	push	{r7}
 80062a0:	b083      	sub	sp, #12
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80062a6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80062aa:	4618      	mov	r0, r3
 80062ac:	370c      	adds	r7, #12
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr

080062b6 <_ZSt12__niter_baseIPK3DLCET_S3_>:
    __niter_base(_Iterator __it)
 80062b6:	b480      	push	{r7}
 80062b8:	b083      	sub	sp, #12
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4618      	mov	r0, r3
 80062c2:	370c      	adds	r7, #12
 80062c4:	46bd      	mov	sp, r7
 80062c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ca:	4770      	bx	lr

080062cc <_ZSt12__niter_baseIP3DLCET_S2_>:
    __niter_base(_Iterator __it)
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <_ZSt14__copy_move_a1ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	60f8      	str	r0, [r7, #12]
 80062ea:	60b9      	str	r1, [r7, #8]
 80062ec:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	68b9      	ldr	r1, [r7, #8]
 80062f2:	68f8      	ldr	r0, [r7, #12]
 80062f4:	f000 f811 	bl	800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>
 80062f8:	4603      	mov	r3, r0
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <_ZSt12__niter_wrapIP3DLCET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
 800630a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	4618      	mov	r0, r3
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800631a:	b580      	push	{r7, lr}
 800631c:	b084      	sub	sp, #16
 800631e:	af00      	add	r7, sp, #0
 8006320:	60f8      	str	r0, [r7, #12]
 8006322:	60b9      	str	r1, [r7, #8]
 8006324:	607a      	str	r2, [r7, #4]
      if (std::is_constant_evaluated())
 8006326:	f7f9 fffb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800632a:	4603      	mov	r3, r0
 800632c:	2b00      	cmp	r3, #0
 800632e:	d006      	beq.n	800633e <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x24>
	  __copy_m(__first, __last, __result);
 8006330:	687a      	ldr	r2, [r7, #4]
 8006332:	68b9      	ldr	r1, [r7, #8]
 8006334:	68f8      	ldr	r0, [r7, #12]
 8006336:	f000 f80d 	bl	8006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>
 800633a:	4603      	mov	r3, r0
 800633c:	e006      	b.n	800634c <_ZSt14__copy_move_a2ILb0EPK3DLCPS0_ET1_T0_S5_S4_+0x32>
			      _Category>::__copy_m(__first, __last, __result);
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f82b 	bl	800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>
 8006348:	4603      	mov	r3, r0
 800634a:	bf00      	nop
    }
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_>:
	__copy_m(_II __first, _II __last, _OI __result)
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	1ad3      	subs	r3, r2, r3
 8006366:	10db      	asrs	r3, r3, #3
 8006368:	617b      	str	r3, [r7, #20]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	dd0f      	ble.n	8006390 <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x3c>
	      *__result = *__first;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	68fa      	ldr	r2, [r7, #12]
 8006374:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006378:	e883 0003 	stmia.w	r3, {r0, r1}
	      ++__first;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3308      	adds	r3, #8
 8006380:	60fb      	str	r3, [r7, #12]
	      ++__result;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3308      	adds	r3, #8
 8006386:	607b      	str	r3, [r7, #4]
	  for(_Distance __n = __last - __first; __n > 0; --__n)
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	3b01      	subs	r3, #1
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	e7ec      	b.n	800636a <_ZNSt11__copy_moveILb0ELb0ESt26random_access_iterator_tagE8__copy_mIPK3DLCPS3_EET0_T_S8_S7_+0x16>
	  return __result;
 8006390:	687b      	ldr	r3, [r7, #4]
	}
 8006392:	4618      	mov	r0, r3
 8006394:	371c      	adds	r7, #28
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr

0800639e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800639e:	b580      	push	{r7, lr}
 80063a0:	b086      	sub	sp, #24
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	60f8      	str	r0, [r7, #12]
 80063a6:	60b9      	str	r1, [r7, #8]
 80063a8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	10db      	asrs	r3, r3, #3
 80063b2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mI3DLCEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	461a      	mov	r2, r3
 80063c0:	68f9      	ldr	r1, [r7, #12]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f01a f9fc 	bl	80207c0 <memmove>
	  return __result + _Num;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	00db      	lsls	r3, r3, #3
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	4413      	add	r3, r2
	}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3718      	adds	r7, #24
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_Z41__static_initialization_and_destruction_0ii>:
		{20, FDCAN_DLC_BYTES_20},
		{24, FDCAN_DLC_BYTES_24},
		{32, FDCAN_DLC_BYTES_32},
		{48, FDCAN_DLC_BYTES_48},
		{64, FDCAN_DLC_BYTES_64}
};
 80063d8:	b580      	push	{r7, lr}
 80063da:	b0a6      	sub	sp, #152	; 0x98
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d126      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d121      	bne.n	8006436 <_Z41__static_initialization_and_destruction_0ii+0x5e>
vector<Can*> Can::all_cans;
 80063f2:	481a      	ldr	r0, [pc, #104]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80063f4:	f7fe fe70 	bl	80050d8 <_ZNSt6vectorIP3CanSaIS1_EEC1Ev>
const vector<DLC> Can::DLCS = {
 80063f8:	4a19      	ldr	r2, [pc, #100]	; (8006460 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80063fa:	f107 0314 	add.w	r3, r7, #20
 80063fe:	4611      	mov	r1, r2
 8006400:	2280      	movs	r2, #128	; 0x80
 8006402:	4618      	mov	r0, r3
 8006404:	f01a f9ce 	bl	80207a4 <memcpy>
 8006408:	f107 0314 	add.w	r3, r7, #20
 800640c:	60fb      	str	r3, [r7, #12]
 800640e:	2310      	movs	r3, #16
 8006410:	613b      	str	r3, [r7, #16]
 8006412:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe ffa1 	bl	800535e <_ZNSaI3DLCEC1Ev>
 800641c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006420:	f107 020c 	add.w	r2, r7, #12
 8006424:	ca06      	ldmia	r2, {r1, r2}
 8006426:	480f      	ldr	r0, [pc, #60]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006428:	f7fe ffb0 	bl	800538c <_ZNSt6vectorI3DLCSaIS0_EEC1ESt16initializer_listIS0_ERKS1_>
 800642c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006430:	4618      	mov	r0, r3
 8006432:	f7fe ffa0 	bl	8005376 <_ZNSaI3DLCED1Ev>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006442:	4293      	cmp	r3, r2
 8006444:	d105      	bne.n	8006452 <_Z41__static_initialization_and_destruction_0ii+0x7a>
 8006446:	4807      	ldr	r0, [pc, #28]	; (8006464 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006448:	f7fe ffc1 	bl	80053ce <_ZNSt6vectorI3DLCSaIS0_EED1Ev>
vector<Can*> Can::all_cans;
 800644c:	4803      	ldr	r0, [pc, #12]	; (800645c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 800644e:	f000 f80b 	bl	8006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>
};
 8006452:	bf00      	nop
 8006454:	3798      	adds	r7, #152	; 0x98
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	240000f8 	.word	0x240000f8
 8006460:	08020b28 	.word	0x08020b28
 8006464:	24000104 	.word	0x24000104

08006468 <_ZNSt6vectorIP3CanSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006468:	b5b0      	push	{r4, r5, r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681c      	ldr	r4, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fc14 	bl	8005ca8 <_ZNSt12_Vector_baseIP3CanSaIS1_EE19_M_get_Tp_allocatorEv>
 8006480:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006482:	461a      	mov	r2, r3
 8006484:	4629      	mov	r1, r5
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff fc19 	bl	8005cbe <_ZSt8_DestroyIPP3CanS1_EvT_S3_RSaIT0_E>
      }
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4618      	mov	r0, r3
 8006490:	f7fe ff4c 	bl	800532c <_ZNSt12_Vector_baseIP3CanSaIS1_EED1Ev>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4618      	mov	r0, r3
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bdb0      	pop	{r4, r5, r7, pc}

0800649e <_GLOBAL__sub_I__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 800649e:	b580      	push	{r7, lr}
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064a6:	2001      	movs	r0, #1
 80064a8:	f7ff ff96 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_GLOBAL__sub_D__ZN3CanC2EP19FDCAN_HandleTypeDef>:
 80064ae:	b580      	push	{r7, lr}
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80064b6:	2000      	movs	r0, #0
 80064b8:	f7ff ff8e 	bl	80063d8 <_Z41__static_initialization_and_destruction_0ii>
 80064bc:	bd80      	pop	{r7, pc}

080064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f89e 	bl	8006608 <_ZNSaIP9DigitalInED1Ev>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b082      	sub	sp, #8
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 f881 	bl	80065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4618      	mov	r0, r3
 80064ea:	3708      	adds	r7, #8
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>:
      vector() = default;
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b082      	sub	sp, #8
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7ff ffeb 	bl	80064d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EEC1Ev>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	4618      	mov	r0, r3
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800650a:	b580      	push	{r7, lr}
 800650c:	b082      	sub	sp, #8
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8b1 	bl	800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4618      	mov	r0, r3
 800651c:	3708      	adds	r7, #8
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4618      	mov	r0, r3
 800652e:	f000 f88f 	bl	8006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4618      	mov	r0, r3
 8006536:	3708      	adds	r7, #8
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}

0800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4618      	mov	r0, r3
 8006548:	f7ff ffeb 	bl	8006522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4618      	mov	r0, r3
 8006550:	3708      	adds	r7, #8
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
	...

08006558 <_ZN9DigitalInC1EP3Pin>:
#include <Mini-STLIB/DigitalIn.hpp>

vector<DigitalIn*> DigitalIn::all_digital_ins;
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;

DigitalIn::DigitalIn(Pin* pin) : pin(pin) {
 8006558:	b590      	push	{r4, r7, lr}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
 8006562:	683a      	ldr	r2, [r7, #0]
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	721a      	strb	r2, [r3, #8]
	DigitalIn::all_digital_ins.push_back(this);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	60fb      	str	r3, [r7, #12]
 8006572:	f107 030c 	add.w	r3, r7, #12
 8006576:	4619      	mov	r1, r3
 8006578:	4809      	ldr	r0, [pc, #36]	; (80065a0 <_ZN9DigitalInC1EP3Pin+0x48>)
 800657a:	f000 f89e 	bl	80066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>
	DigitalIn::pin_to_digital_in[pin] = this;
 800657e:	687c      	ldr	r4, [r7, #4]
 8006580:	463b      	mov	r3, r7
 8006582:	4619      	mov	r1, r3
 8006584:	4807      	ldr	r0, [pc, #28]	; (80065a4 <_ZN9DigitalInC1EP3Pin+0x4c>)
 8006586:	f000 f8a9 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800658a:	4603      	mov	r3, r0
 800658c:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_INPUT;
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2203      	movs	r2, #3
 8006592:	719a      	strb	r2, [r3, #6]
}
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4618      	mov	r0, r3
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	bf00      	nop
 80065a0:	24000110 	.word	0x24000110
 80065a4:	2400011c 	.word	0x2400011c

080065a8 <_ZN9DigitalIn9get_valueEv>:

DigitalIn::DigitalInState DigitalIn::get_value(){
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	GPIO_PinState hal_state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	889b      	ldrh	r3, [r3, #4]
 80065bc:	4619      	mov	r1, r3
 80065be:	4610      	mov	r0, r2
 80065c0:	f014 fc42 	bl	801ae48 <HAL_GPIO_ReadPin>
 80065c4:	4603      	mov	r3, r0
 80065c6:	73fb      	strb	r3, [r7, #15]
	if(hal_state == GPIO_PIN_SET)
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d103      	bne.n	80065d6 <_ZN9DigitalIn9get_valueEv+0x2e>
		state = DigitalIn::HIGH;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	721a      	strb	r2, [r3, #8]
 80065d4:	e002      	b.n	80065dc <_ZN9DigitalIn9get_valueEv+0x34>
	else
		state = DigitalIn::LOW;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2201      	movs	r2, #1
 80065da:	721a      	strb	r2, [r3, #8]
	return state;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	7a1b      	ldrb	r3, [r3, #8]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b082      	sub	sp, #8
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 f8d1 	bl	8006798 <_ZNSaIP9DigitalInEC1Ev>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f000 f8d9 	bl	80067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4618      	mov	r0, r3
 8006602:	3708      	adds	r7, #8
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <_ZNSaIP9DigitalInED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800661e:	b580      	push	{r7, lr}
 8006620:	b082      	sub	sp, #8
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689a      	ldr	r2, [r3, #8]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8006636:	461a      	mov	r2, r3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f8cd 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      }
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff ff3c 	bl	80064be <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE12_Vector_implD1Ev>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	4618      	mov	r0, r3
 800664a:	3708      	adds	r7, #8
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f8d0 	bl	80067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	4618      	mov	r0, r3
 8006662:	f7fa fac1 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4618      	mov	r0, r3
 800666c:	f7f9 fe6c 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEED1Ev>:
 800667a:	b480      	push	{r7}
 800667c:	b083      	sub	sp, #12
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4618      	mov	r0, r3
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f8db 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800669e:	4603      	mov	r3, r0
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 f8b7 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff ff2d 	bl	800650a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	4618      	mov	r0, r3
 80066b4:	3708      	adds	r7, #8
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}

080066ba <_ZNSt6vectorIP9DigitalInSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 80066ba:	b580      	push	{r7, lr}
 80066bc:	b082      	sub	sp, #8
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80066c4:	6838      	ldr	r0, [r7, #0]
 80066c6:	f000 f8d1 	bl	800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>
 80066ca:	4603      	mov	r3, r0
 80066cc:	4619      	mov	r1, r3
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 f8d7 	bl	8006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 80066d4:	bf00      	nop
 80066d6:	3708      	adds	r7, #8
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b08b      	sub	sp, #44	; 0x2c
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 80066e6:	6839      	ldr	r1, [r7, #0]
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f000 f8fc 	bl	80068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 80066ee:	4603      	mov	r3, r0
 80066f0:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f906 	bl	8006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 80066f8:	4603      	mov	r3, r0
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	f107 020c 	add.w	r2, r7, #12
 8006700:	f107 0308 	add.w	r3, r7, #8
 8006704:	4611      	mov	r1, r2
 8006706:	4618      	mov	r0, r3
 8006708:	f000 f909 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d114      	bne.n	800673c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f917 	bl	8006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	681c      	ldr	r4, [r3, #0]
 800671c:	f107 0308 	add.w	r3, r7, #8
 8006720:	4618      	mov	r0, r3
 8006722:	f000 f91d 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006726:	4603      	mov	r3, r0
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	f107 0310 	add.w	r3, r7, #16
 800672e:	4621      	mov	r1, r4
 8006730:	4618      	mov	r0, r3
 8006732:	f7fa fbd2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d001      	beq.n	8006740 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 800673c:	2301      	movs	r3, #1
 800673e:	e000      	b.n	8006742 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8006740:	2300      	movs	r3, #0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d01b      	beq.n	800677e <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006746:	687c      	ldr	r4, [r7, #4]
 8006748:	f107 0208 	add.w	r2, r7, #8
 800674c:	f107 0314 	add.w	r3, r7, #20
 8006750:	4611      	mov	r1, r2
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f912 	bl	800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8006758:	f107 0318 	add.w	r3, r7, #24
 800675c:	6839      	ldr	r1, [r7, #0]
 800675e:	4618      	mov	r0, r3
 8006760:	f7fa fbce 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8006764:	f107 0218 	add.w	r2, r7, #24
 8006768:	f107 031c 	add.w	r3, r7, #28
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4613      	mov	r3, r2
 8006770:	4a08      	ldr	r2, [pc, #32]	; (8006794 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	4620      	mov	r0, r4
 8006776:	f000 f911 	bl	800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 800677a:	4603      	mov	r3, r0
 800677c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800677e:	f107 0308 	add.w	r3, r7, #8
 8006782:	4618      	mov	r0, r3
 8006784:	f000 f8ec 	bl	8006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>
 8006788:	4603      	mov	r3, r0
 800678a:	3304      	adds	r3, #4
      }
 800678c:	4618      	mov	r0, r3
 800678e:	3724      	adds	r7, #36	; 0x24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd90      	pop	{r4, r7, pc}
 8006794:	08020cbc 	.word	0x08020cbc

08006798 <_ZNSaIP9DigitalInEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 f939 	bl	8006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80067b0:	b480      	push	{r7}
 80067b2:	b083      	sub	sp, #12
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	605a      	str	r2, [r3, #4]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	609a      	str	r2, [r3, #8]
	{ }
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	60f8      	str	r0, [r7, #12]
 80067e0:	60b9      	str	r1, [r7, #8]
 80067e2:	607a      	str	r2, [r7, #4]
	if (__p)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	68b9      	ldr	r1, [r7, #8]
 80067f0:	4618      	mov	r0, r3
 80067f2:	f000 f91c 	bl	8006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>
      }
 80067f6:	bf00      	nop
 80067f8:	3710      	adds	r7, #16
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}

080067fe <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 80067fe:	b580      	push	{r7, lr}
 8006800:	b082      	sub	sp, #8
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f930 	bl	8006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006816:	b580      	push	{r7, lr}
 8006818:	b084      	sub	sp, #16
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
 800681e:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d012      	beq.n	800684c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8006826:	6838      	ldr	r0, [r7, #0]
 8006828:	f000 f92b 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800682c:	4603      	mov	r3, r0
 800682e:	4619      	mov	r1, r3
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff fff0 	bl	8006816 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8006836:	6838      	ldr	r0, [r7, #0]
 8006838:	f000 f92f 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800683c:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800683e:	6839      	ldr	r1, [r7, #0]
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 f936 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800684a:	e7e9      	b.n	8006820 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 800684c:	bf00      	nop
 800684e:	3710      	adds	r7, #16
 8006850:	46bd      	mov	sp, r7
 8006852:	bd80      	pop	{r7, pc}

08006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	689b      	ldr	r3, [r3, #8]
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr

0800686c <_ZSt4moveIRP9DigitalInEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8006882:	b5b0      	push	{r4, r5, r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685a      	ldr	r2, [r3, #4]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	429a      	cmp	r2, r3
 8006896:	d011      	beq.n	80068bc <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006898:	687c      	ldr	r4, [r7, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685d      	ldr	r5, [r3, #4]
 800689e:	6838      	ldr	r0, [r7, #0]
 80068a0:	f000 f918 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068a4:	4603      	mov	r3, r0
 80068a6:	461a      	mov	r2, r3
 80068a8:	4629      	mov	r1, r5
 80068aa:	4620      	mov	r0, r4
 80068ac:	f000 f932 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	1d1a      	adds	r2, r3, #4
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	605a      	str	r2, [r3, #4]
 80068ba:	e00c      	b.n	80068d6 <_ZNSt6vectorIP9DigitalInSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 f93b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 80068c2:	4604      	mov	r4, r0
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f000 f905 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	4621      	mov	r1, r4
 80068d0:	6878      	ldr	r0, [r7, #4]
 80068d2:	f000 f943 	bl	8006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f9bc 	bl	8006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>
 80068dc:	4603      	mov	r3, r0
      }
 80068de:	4618      	mov	r0, r3
 80068e0:	3708      	adds	r7, #8
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bdb0      	pop	{r4, r5, r7, pc}

080068e6 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b082      	sub	sp, #8
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6839      	ldr	r1, [r7, #0]
 80068f4:	4618      	mov	r0, r3
 80068f6:	f000 f9c8 	bl	8006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 80068fa:	4603      	mov	r3, r0
 80068fc:	4618      	mov	r0, r3
 80068fe:	3708      	adds	r7, #8
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4618      	mov	r0, r3
 8006910:	f000 f9d2 	bl	8006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8006914:	4603      	mov	r3, r0
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800691e:	b480      	push	{r7}
 8006920:	b083      	sub	sp, #12
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	429a      	cmp	r2, r3
 8006932:	bf0c      	ite	eq
 8006934:	2301      	moveq	r3, #1
 8006936:	2300      	movne	r3, #0
 8006938:	b2db      	uxtb	r3, r3
 800693a:	4618      	mov	r0, r3
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006944:	4770      	bx	lr

08006946 <_ZNKSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8006946:	b590      	push	{r4, r7, lr}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 f9c2 	bl	8006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8006956:	bf00      	nop
 8006958:	4620      	mov	r0, r4
 800695a:	370c      	adds	r7, #12
 800695c:	46bd      	mov	sp, r7
 800695e:	bd90      	pop	{r4, r7, pc}

08006960 <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006960:	b580      	push	{r7, lr}
 8006962:	b082      	sub	sp, #8
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4618      	mov	r0, r3
 800696e:	f000 f9bf 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006972:	4603      	mov	r3, r0
 8006974:	4618      	mov	r0, r3
 8006976:	3708      	adds	r7, #8
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	601a      	str	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800699c:	b5b0      	push	{r4, r5, r7, lr}
 800699e:	b088      	sub	sp, #32
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f7fa fc5b 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80069b0:	4604      	mov	r4, r0
 80069b2:	6838      	ldr	r0, [r7, #0]
 80069b4:	f7fa ff45 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80069b8:	4605      	mov	r5, r0
 80069ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069bc:	f7fa fc69 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80069c0:	4603      	mov	r3, r0
 80069c2:	462a      	mov	r2, r5
 80069c4:	4621      	mov	r1, r4
 80069c6:	68f8      	ldr	r0, [r7, #12]
 80069c8:	f000 f9a0 	bl	8006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 80069cc:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80069ce:	69f8      	ldr	r0, [r7, #28]
 80069d0:	f000 faee 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f107 0010 	add.w	r0, r7, #16
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	68f9      	ldr	r1, [r7, #12]
 80069de:	f000 f9b8 	bl	8006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 80069e8:	6939      	ldr	r1, [r7, #16]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f000 faf1 	bl	8006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 80069f4:	4603      	mov	r3, r0
 80069f6:	e00b      	b.n	8006a10 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 80069f8:	69f9      	ldr	r1, [r7, #28]
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f859 	bl	8006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8006a00:	693a      	ldr	r2, [r7, #16]
 8006a02:	f107 0318 	add.w	r3, r7, #24
 8006a06:	4611      	mov	r1, r2
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f000 fb23 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006a0e:	69bb      	ldr	r3, [r7, #24]
      }
 8006a10:	4618      	mov	r0, r3
 8006a12:	3720      	adds	r7, #32
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bdb0      	pop	{r4, r5, r7, pc}

08006a18 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4618      	mov	r0, r3
 8006a24:	370c      	adds	r7, #12
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b088      	sub	sp, #32
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	607a      	str	r2, [r7, #4]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	61fb      	str	r3, [r7, #28]
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8006a46:	f7f9 fc6b 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8006a50:	69b8      	ldr	r0, [r7, #24]
 8006a52:	f019 fd77 	bl	8020544 <_ZdlPv>
	    return;
 8006a56:	e005      	b.n	8006a64 <_ZNSt16allocator_traitsISaIP9DigitalInEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	69b9      	ldr	r1, [r7, #24]
 8006a5c:	69f8      	ldr	r0, [r7, #28]
 8006a5e:	f000 fdac 	bl	80075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	3720      	adds	r7, #32
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	bd80      	pop	{r7, pc}

08006a6c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEC1Ev>:
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4618      	mov	r0, r3
 8006a78:	370c      	adds	r7, #12
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a82:	b480      	push	{r7}
 8006a84:	b083      	sub	sp, #12
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	370c      	adds	r7, #12
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab0:	4770      	bx	lr

08006ab2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b082      	sub	sp, #8
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	6078      	str	r0, [r7, #4]
 8006aba:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8006abc:	6839      	ldr	r1, [r7, #0]
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fad7 	bl	8007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8006ac4:	6839      	ldr	r1, [r7, #0]
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 fae8 	bl	800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8006acc:	bf00      	nop
 8006ace:	3708      	adds	r7, #8
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8006aea:	b590      	push	{r4, r7, lr}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8006af4:	6838      	ldr	r0, [r7, #0]
 8006af6:	f7ff ffed 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006afa:	4603      	mov	r3, r0
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4619      	mov	r1, r3
 8006b02:	2004      	movs	r0, #4
 8006b04:	f7f9 fc14 	bl	8000330 <_ZnwjPv>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	601c      	str	r4, [r3, #0]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd90      	pop	{r4, r7, pc}

08006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b084      	sub	sp, #16
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	60f8      	str	r0, [r7, #12]
 8006b1c:	60b9      	str	r1, [r7, #8]
 8006b1e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7ff ffd7 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006b26:	4603      	mov	r3, r0
 8006b28:	4619      	mov	r1, r3
 8006b2a:	68b8      	ldr	r0, [r7, #8]
 8006b2c:	f7ff ffdd 	bl	8006aea <_ZSt12construct_atIP9DigitalInJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8006b30:	bf00      	nop
 8006b32:	3710      	adds	r7, #16
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}

08006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	1d1a      	adds	r2, r3, #4
 8006b44:	f107 030c 	add.w	r3, r7, #12
 8006b48:	4611      	mov	r1, r2
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fab8 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4618      	mov	r0, r3
 8006b54:	3710      	adds	r7, #16
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
	...

08006b5c <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006b5c:	b5b0      	push	{r4, r5, r7, lr}
 8006b5e:	b08c      	sub	sp, #48	; 0x30
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006b68:	4a39      	ldr	r2, [pc, #228]	; (8006c50 <_ZNSt6vectorIP9DigitalInSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8006b6a:	2101      	movs	r1, #1
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f000 fab7 	bl	80070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>
 8006b72:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f000 faf4 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 8006b86:	4603      	mov	r3, r0
 8006b88:	617b      	str	r3, [r7, #20]
 8006b8a:	f107 0214 	add.w	r2, r7, #20
 8006b8e:	f107 0308 	add.w	r3, r7, #8
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fafa 	bl	800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f000 fb08 	bl	80071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>
 8006ba8:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8006bae:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006bb0:	6a3b      	ldr	r3, [r7, #32]
 8006bb2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8006bb4:	69fa      	ldr	r2, [r7, #28]
 8006bb6:	18d5      	adds	r5, r2, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff ff8b 	bl	8006ad4 <_ZSt7forwardIP9DigitalInEOT_RNSt16remove_referenceIS2_E4typeE>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	f7ff ffa5 	bl	8006b14 <_ZNSt16allocator_traitsISaIP9DigitalInEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006bce:	f107 0308 	add.w	r3, r7, #8
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f000 fb18 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f000 fb1d 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006be4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006be6:	69fa      	ldr	r2, [r7, #28]
 8006be8:	4621      	mov	r1, r4
 8006bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006bec:	f000 faf8 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006bf0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006bf8:	f107 0308 	add.w	r3, r7, #8
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fb03 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 8006c02:	4603      	mov	r3, r0
 8006c04:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f000 fb08 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8006c0e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c14:	4620      	mov	r0, r4
 8006c16:	f000 fae3 	bl	80071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006c1a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8006c1c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006c28:	461a      	mov	r2, r3
 8006c2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c2c:	f7ff fdd4 	bl	80067d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	69fa      	ldr	r2, [r7, #28]
 8006c34:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	69ba      	ldr	r2, [r7, #24]
 8006c3a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3e:	009b      	lsls	r3, r3, #2
 8006c40:	69fa      	ldr	r2, [r7, #28]
 8006c42:	441a      	add	r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	609a      	str	r2, [r3, #8]
    }
 8006c48:	bf00      	nop
 8006c4a:	3730      	adds	r7, #48	; 0x30
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8006c50:	08020ba8 	.word	0x08020ba8

08006c54 <_ZNSt6vectorIP9DigitalInSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b084      	sub	sp, #16
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ff6b 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 8006c62:	4603      	mov	r3, r0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	f107 030c 	add.w	r3, r7, #12
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f000 faef 	bl	8007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>
 8006c72:	4603      	mov	r3, r0
 8006c74:	60bb      	str	r3, [r7, #8]
 8006c76:	f107 0308 	add.w	r3, r7, #8
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fb01 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 8006c80:	4603      	mov	r3, r0
      }
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8006c8a:	b590      	push	{r4, r7, lr}
 8006c8c:	b083      	sub	sp, #12
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff fddd 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fafc 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	4621      	mov	r1, r4
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fb02 	bl	80072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd90      	pop	{r4, r7, pc}

08006cb8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	1d1a      	adds	r2, r3, #4
 8006cc4:	f107 030c 	add.w	r3, r7, #12
 8006cc8:	4611      	mov	r1, r2
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f000 f9c2 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8006ce2:	bf00      	nop
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	370c      	adds	r7, #12
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr()
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3310      	adds	r3, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fb0b 	bl	8007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8006d0c:	b5b0      	push	{r4, r5, r7, lr}
 8006d0e:	b088      	sub	sp, #32
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f000 fb08 	bl	8007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8006d20:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8006d22:	68b8      	ldr	r0, [r7, #8]
 8006d24:	f7fa fa9f 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8006d28:	4604      	mov	r4, r0
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fa fd89 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8006d30:	4605      	mov	r5, r0
 8006d32:	6838      	ldr	r0, [r7, #0]
 8006d34:	f7fa faad 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	462b      	mov	r3, r5
 8006d3e:	4622      	mov	r2, r4
 8006d40:	6979      	ldr	r1, [r7, #20]
 8006d42:	68f8      	ldr	r0, [r7, #12]
 8006d44:	f000 fb05 	bl	8007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8006d48:	697b      	ldr	r3, [r7, #20]
	}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bdb0      	pop	{r4, r5, r7, pc}

08006d52 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006d52:	b5b0      	push	{r4, r5, r7, lr}
 8006d54:	b08c      	sub	sp, #48	; 0x30
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	60f8      	str	r0, [r7, #12]
 8006d5a:	60b9      	str	r1, [r7, #8]
 8006d5c:	607a      	str	r2, [r7, #4]
 8006d5e:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8006d60:	1d3b      	adds	r3, r7, #4
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fb22 	bl	80073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8006d6c:	69bc      	ldr	r4, [r7, #24]
 8006d6e:	68b8      	ldr	r0, [r7, #8]
 8006d70:	f000 fa93 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006d74:	4603      	mov	r3, r0
 8006d76:	429c      	cmp	r4, r3
 8006d78:	bf0c      	ite	eq
 8006d7a:	2301      	moveq	r3, #1
 8006d7c:	2300      	movne	r3, #0
 8006d7e:	b2db      	uxtb	r3, r3
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d032      	beq.n	8006dea <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8006d84:	68b8      	ldr	r0, [r7, #8]
 8006d86:	f000 fb22 	bl	80073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8006d8a:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d015      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006d90:	68bc      	ldr	r4, [r7, #8]
 8006d92:	68b8      	ldr	r0, [r7, #8]
 8006d94:	f000 fb27 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f000 fb2e 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006da2:	4603      	mov	r3, r0
 8006da4:	6819      	ldr	r1, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	4620      	mov	r0, r4
 8006dae:	f7fa f894 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006db2:	4603      	mov	r3, r0
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8006dbc:	2300      	movs	r3, #0
	  if (size() > 0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d00c      	beq.n	8006ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61fb      	str	r3, [r7, #28]
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f000 fb0d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	f107 031c 	add.w	r3, r7, #28
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7fb f867 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006dda:	e0e5      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	683a      	ldr	r2, [r7, #0]
 8006de0:	68b9      	ldr	r1, [r7, #8]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f000 fb17 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006de8:	e0de      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8006dea:	68bc      	ldr	r4, [r7, #8]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681d      	ldr	r5, [r3, #0]
 8006df0:	69bb      	ldr	r3, [r7, #24]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f000 fb03 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4620      	mov	r0, r4
 8006e02:	f7fa f86a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d059      	beq.n	8006ec0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 8006e10:	69bc      	ldr	r4, [r7, #24]
 8006e12:	68b8      	ldr	r0, [r7, #8]
 8006e14:	f000 fb89 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	429c      	cmp	r4, r3
 8006e1e:	bf0c      	ite	eq
 8006e20:	2301      	moveq	r3, #1
 8006e22:	2300      	movne	r3, #0
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d00d      	beq.n	8006e46 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 8006e2a:	68b8      	ldr	r0, [r7, #8]
 8006e2c:	f000 fb7d 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e30:	4604      	mov	r4, r0
 8006e32:	68b8      	ldr	r0, [r7, #8]
 8006e34:	f000 fb79 	bl	800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f7fb f8de 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006e44:	e0b0      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8006e46:	68bc      	ldr	r4, [r7, #8]
 8006e48:	f107 0314 	add.w	r3, r7, #20
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fb78 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
 8006e52:	4603      	mov	r3, r0
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f000 fad1 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	6819      	ldr	r1, [r3, #0]
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	4620      	mov	r0, r4
 8006e68:	f7fa f837 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d01f      	beq.n	8006eb2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f7ff fe04 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	bf0c      	ite	eq
 8006e80:	2301      	moveq	r3, #1
 8006e82:	2300      	movne	r3, #0
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00a      	beq.n	8006ea0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	623b      	str	r3, [r7, #32]
 8006e8e:	f107 0214 	add.w	r2, r7, #20
 8006e92:	f107 0320 	add.w	r3, r7, #32
 8006e96:	4619      	mov	r1, r3
 8006e98:	68f8      	ldr	r0, [r7, #12]
 8006e9a:	f7fb f805 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006e9e:	e083      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 8006ea0:	f107 0218 	add.w	r2, r7, #24
 8006ea4:	f107 0318 	add.w	r3, r7, #24
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f7fb f8a8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006eb0:	e07a      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	683a      	ldr	r2, [r7, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 faac 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006ebe:	e073      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 8006ec0:	68bc      	ldr	r4, [r7, #8]
 8006ec2:	69bb      	ldr	r3, [r7, #24]
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f000 fa9a 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	4620      	mov	r0, r4
 8006ed6:	f7fa f800 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d059      	beq.n	8006f94 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8006ee4:	69bc      	ldr	r4, [r7, #24]
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	f000 fa7d 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006eec:	4603      	mov	r3, r0
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	429c      	cmp	r4, r3
 8006ef2:	bf0c      	ite	eq
 8006ef4:	2301      	moveq	r3, #1
 8006ef6:	2300      	movne	r3, #0
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00c      	beq.n	8006f18 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 8006efe:	2300      	movs	r3, #0
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f000 fa6f 	bl	80073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8006f08:	4602      	mov	r2, r0
 8006f0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f0e:	4619      	mov	r1, r3
 8006f10:	68f8      	ldr	r0, [r7, #12]
 8006f12:	f7fa ffc9 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f16:	e047      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 8006f18:	68bc      	ldr	r4, [r7, #8]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	681d      	ldr	r5, [r3, #0]
 8006f1e:	f107 0310 	add.w	r3, r7, #16
 8006f22:	4618      	mov	r0, r3
 8006f24:	f000 fb1e 	bl	8007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f000 fa66 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8006f32:	4603      	mov	r3, r0
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	461a      	mov	r2, r3
 8006f38:	4629      	mov	r1, r5
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f7f9 ffcd 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d01f      	beq.n	8006f86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f7ff fd9a 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	bf0c      	ite	eq
 8006f54:	2301      	moveq	r3, #1
 8006f56:	2300      	movne	r3, #0
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00a      	beq.n	8006f74 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 8006f5e:	2300      	movs	r3, #0
 8006f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f62:	f107 0218 	add.w	r2, r7, #24
 8006f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f6a:	4619      	mov	r1, r3
 8006f6c:	68f8      	ldr	r0, [r7, #12]
 8006f6e:	f7fa ff9b 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8006f72:	e019      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8006f74:	f107 0210 	add.w	r2, r7, #16
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f7fb f83e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8006f84:	e010      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	683a      	ldr	r2, [r7, #0]
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fa42 	bl	8007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8006f92:	e009      	b.n	8006fa8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8006f94:	2300      	movs	r3, #0
 8006f96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f98:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8006f9c:	f107 0318 	add.w	r3, r7, #24
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f7fb f867 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	3730      	adds	r7, #48	; 0x30
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdb0      	pop	{r4, r5, r7, pc}

08006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 fae4 	bl	8007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	f107 030c 	add.w	r3, r7, #12
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f000 faeb 	bl	80075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>
 8006fcc:	4603      	mov	r3, r0
      }
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8006fd6:	b5b0      	push	{r4, r5, r7, lr}
 8006fd8:	b086      	sub	sp, #24
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	60f8      	str	r0, [r7, #12]
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d119      	bne.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f955 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d012      	beq.n	800701e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8006ff8:	68fc      	ldr	r4, [r7, #12]
 8006ffa:	6838      	ldr	r0, [r7, #0]
 8006ffc:	f7ff ffd8 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007000:	4603      	mov	r3, r0
 8007002:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 f9fa 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800700a:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	461a      	mov	r2, r3
 8007010:	4629      	mov	r1, r5
 8007012:	4620      	mov	r0, r4
 8007014:	f7f9 ff61 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d001      	beq.n	8007022 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800701e:	2301      	movs	r3, #1
 8007020:	e000      	b.n	8007024 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 8007022:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 8007024:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800702a:	7df8      	ldrb	r0, [r7, #23]
 800702c:	687a      	ldr	r2, [r7, #4]
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	f019 faf8 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	695b      	ldr	r3, [r3, #20]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800703e:	f107 0310 	add.w	r3, r7, #16
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	4618      	mov	r0, r3
 8007046:	f000 f805 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800704a:	693b      	ldr	r3, [r7, #16]
    }
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bdb0      	pop	{r4, r5, r7, pc}

08007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	601a      	str	r2, [r3, #0]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4618      	mov	r0, r3
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8007072:	b590      	push	{r4, r7, lr}
 8007074:	b083      	sub	sp, #12
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 faab 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007082:	4604      	mov	r4, r0
 8007084:	6838      	ldr	r0, [r7, #0]
 8007086:	f7ff fe33 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800708a:	4603      	mov	r3, r0
 800708c:	4619      	mov	r1, r3
 800708e:	4620      	mov	r0, r4
 8007090:	f000 faad 	bl	80075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>
      }
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	bd90      	pop	{r4, r7, pc}

0800709c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fa96 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2201      	movs	r2, #1
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4618      	mov	r0, r3
 80070b4:	f000 faa7 	bl	8007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>
 80070b8:	bf00      	nop
 80070ba:	3708      	adds	r7, #8
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	681a      	ldr	r2, [r3, #0]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	601a      	str	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80070e0:	b590      	push	{r4, r7, lr}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80070ec:	68f8      	ldr	r0, [r7, #12]
 80070ee:	f000 faa9 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 80070f2:	4604      	mov	r4, r0
 80070f4:	68f8      	ldr	r0, [r7, #12]
 80070f6:	f000 fab6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 80070fa:	4603      	mov	r3, r0
 80070fc:	1ae2      	subs	r2, r4, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	429a      	cmp	r2, r3
 8007102:	bf34      	ite	cc
 8007104:	2301      	movcc	r3, #1
 8007106:	2300      	movcs	r3, #0
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d002      	beq.n	8007114 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f019 fae6 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f000 faa6 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 800711a:	4604      	mov	r4, r0
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	f000 faa2 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007122:	4603      	mov	r3, r0
 8007124:	613b      	str	r3, [r7, #16]
 8007126:	f107 0208 	add.w	r2, r7, #8
 800712a:	f107 0310 	add.w	r3, r7, #16
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f7fb fb8e 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8007136:	4603      	mov	r3, r0
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4423      	add	r3, r4
 800713c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800713e:	68f8      	ldr	r0, [r7, #12]
 8007140:	f000 fa91 	bl	8007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>
 8007144:	4602      	mov	r2, r0
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	4293      	cmp	r3, r2
 800714a:	d306      	bcc.n	800715a <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 fa79 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007152:	4602      	mov	r2, r0
 8007154:	697b      	ldr	r3, [r7, #20]
 8007156:	4293      	cmp	r3, r2
 8007158:	d904      	bls.n	8007164 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x84>
 800715a:	68f8      	ldr	r0, [r7, #12]
 800715c:	f000 fa72 	bl	8007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>
 8007160:	4603      	mov	r3, r0
 8007162:	e000      	b.n	8007166 <_ZNKSt6vectorIP9DigitalInSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007164:	697b      	ldr	r3, [r7, #20]
      }
 8007166:	4618      	mov	r0, r3
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	bd90      	pop	{r4, r7, pc}

0800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	f107 030c 	add.w	r3, r7, #12
 800717c:	4611      	mov	r1, r2
 800717e:	4618      	mov	r0, r3
 8007180:	f7ff ff9e 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}

0800718e <_ZN9__gnu_cxxmiIPP9DigitalInSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800718e:	b590      	push	{r4, r7, lr}
 8007190:	b083      	sub	sp, #12
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
 8007196:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f835 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800719e:	4603      	mov	r3, r0
 80071a0:	681c      	ldr	r4, [r3, #0]
 80071a2:	6838      	ldr	r0, [r7, #0]
 80071a4:	f000 f830 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 80071a8:	4603      	mov	r3, r0
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	1ae3      	subs	r3, r4, r3
 80071ae:	109b      	asrs	r3, r3, #2
 80071b0:	4618      	mov	r0, r3
 80071b2:	370c      	adds	r7, #12
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d006      	beq.n	80071d6 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x1e>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fa5a 	bl	8007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>
 80071d2:	4603      	mov	r3, r0
 80071d4:	e000      	b.n	80071d8 <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE11_M_allocateEj+0x20>
 80071d6:	2300      	movs	r3, #0
      }
 80071d8:	4618      	mov	r0, r3
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b087      	sub	sp, #28
 80071e4:	af02      	add	r7, sp, #8
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
 80071ec:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80071ee:	f88d 4000 	strb.w	r4, [sp]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68b9      	ldr	r1, [r7, #8]
 80071f8:	68f8      	ldr	r0, [r7, #12]
 80071fa:	f000 fa64 	bl	80076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80071fe:	4603      	mov	r3, r0
      }
 8007200:	4618      	mov	r0, r3
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	bd90      	pop	{r4, r7, pc}

08007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4618      	mov	r0, r3
 8007214:	370c      	adds	r7, #12
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	68f8      	ldr	r0, [r7, #12]
 8007244:	f000 fa5b 	bl	80076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>
    }
 8007248:	bf00      	nop
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	009b      	lsls	r3, r3, #2
 8007262:	425b      	negs	r3, r3
 8007264:	4413      	add	r3, r2
 8007266:	60fb      	str	r3, [r7, #12]
 8007268:	f107 020c 	add.w	r2, r7, #12
 800726c:	f107 0308 	add.w	r3, r7, #8
 8007270:	4611      	mov	r1, r2
 8007272:	4618      	mov	r0, r3
 8007274:	f7ff ff24 	bl	80070c0 <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8007282:	b480      	push	{r7}
 8007284:	b083      	sub	sp, #12
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4618      	mov	r0, r3
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800729a:	b480      	push	{r7}
 800729c:	b083      	sub	sp, #12
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3304      	adds	r3, #4
 80072a6:	4618      	mov	r0, r3
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80072b2:	b590      	push	{r4, r7, lr}
 80072b4:	b087      	sub	sp, #28
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	60f8      	str	r0, [r7, #12]
 80072ba:	60b9      	str	r1, [r7, #8]
 80072bc:	607a      	str	r2, [r7, #4]
 80072be:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d01d      	beq.n	8007302 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80072c6:	68fc      	ldr	r4, [r7, #12]
 80072c8:	68b8      	ldr	r0, [r7, #8]
 80072ca:	f7ff fe71 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 80072ce:	4603      	mov	r3, r0
 80072d0:	6819      	ldr	r1, [r3, #0]
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	461a      	mov	r2, r3
 80072d8:	4620      	mov	r0, r4
 80072da:	f7f9 fdfe 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80072de:	4603      	mov	r3, r0
 80072e0:	f083 0301 	eor.w	r3, r3, #1
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d006      	beq.n	80072f8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	607b      	str	r3, [r7, #4]
 80072ee:	68b8      	ldr	r0, [r7, #8]
 80072f0:	f7ff fbd3 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 80072f4:	60b8      	str	r0, [r7, #8]
 80072f6:	e7e3      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 80072f8:	68b8      	ldr	r0, [r7, #8]
 80072fa:	f7ff fbc2 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80072fe:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8007300:	e7de      	b.n	80072c0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8007302:	f107 0314 	add.w	r3, r7, #20
 8007306:	6879      	ldr	r1, [r7, #4]
 8007308:	4618      	mov	r0, r3
 800730a:	f7ff fea3 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800730e:	697b      	ldr	r3, [r7, #20]
    }
 8007310:	4618      	mov	r0, r3
 8007312:	371c      	adds	r7, #28
 8007314:	46bd      	mov	sp, r7
 8007316:	bd90      	pop	{r4, r7, pc}

08007318 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() noexcept
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 fa02 	bl	800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007326:	4603      	mov	r3, r0
 8007328:	4618      	mov	r0, r3
 800732a:	3708      	adds	r7, #8
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f94d 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800733e:	4603      	mov	r3, r0
 8007340:	2101      	movs	r1, #1
 8007342:	4618      	mov	r0, r3
 8007344:	f000 f9fc 	bl	8007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>
 8007348:	4603      	mov	r3, r0
 800734a:	4618      	mov	r0, r3
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8007352:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	4619      	mov	r1, r3
 8007366:	2018      	movs	r0, #24
 8007368:	f7f8 ffe2 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 f933 	bl	80075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8007372:	4604      	mov	r4, r0
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f7ff fcbb 	bl	8006cf0 <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>
 800737a:	4605      	mov	r5, r0
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f7f9 ff72 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8007382:	4606      	mov	r6, r0
 8007384:	6838      	ldr	r0, [r7, #0]
 8007386:	f7fa fa5c 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800738a:	4680      	mov	r8, r0
 800738c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800738e:	f7f9 ff80 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8007392:	4603      	mov	r3, r0
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	4643      	mov	r3, r8
 8007398:	4632      	mov	r2, r6
 800739a:	4629      	mov	r1, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f000 fa1c 	bl	80077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 80073a2:	bf00      	nop
 80073a4:	3710      	adds	r7, #16
 80073a6:	46bd      	mov	sp, r7
 80073a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ac <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9DigitalInEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	f107 030c 	add.w	r3, r7, #12
 80073bc:	4611      	mov	r1, r2
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fe48 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}

080073ce <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80073ce:	b480      	push	{r7}
 80073d0:	b083      	sub	sp, #12
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 80073e6:	b480      	push	{r7}
 80073e8:	b083      	sub	sp, #12
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	3310      	adds	r3, #16
 80073f2:	4618      	mov	r0, r3
 80073f4:	370c      	adds	r7, #12
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr

080073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 80073fe:	b580      	push	{r7, lr}
 8007400:	b082      	sub	sp, #8
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fdd2 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800740c:	4603      	mov	r3, r0
 800740e:	4618      	mov	r0, r3
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007416:	b5b0      	push	{r4, r5, r7, lr}
 8007418:	b08a      	sub	sp, #40	; 0x28
 800741a:	af00      	add	r7, sp, #0
 800741c:	60f8      	str	r0, [r7, #12]
 800741e:	60b9      	str	r1, [r7, #8]
 8007420:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8007422:	68b8      	ldr	r0, [r7, #8]
 8007424:	f7ff fa16 	bl	8006854 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007428:	4603      	mov	r3, r0
 800742a:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800742c:	68b8      	ldr	r0, [r7, #8]
 800742e:	f7ff ff34 	bl	800729a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8007432:	4603      	mov	r3, r0
 8007434:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8007436:	2301      	movs	r3, #1
 8007438:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d023      	beq.n	800748a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8007446:	68bc      	ldr	r4, [r7, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681d      	ldr	r5, [r3, #0]
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	4618      	mov	r0, r3
 8007450:	f7ff fdae 	bl	8006fb0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8007454:	4603      	mov	r3, r0
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	4629      	mov	r1, r5
 800745c:	4620      	mov	r0, r4
 800745e:	f7f9 fd3c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8007468:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800746c:	2b00      	cmp	r3, #0
 800746e:	d005      	beq.n	800747c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8007470:	69bb      	ldr	r3, [r7, #24]
 8007472:	4618      	mov	r0, r3
 8007474:	f7ff fb11 	bl	8006a9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007478:	4603      	mov	r3, r0
 800747a:	e004      	b.n	8007486 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	4618      	mov	r0, r3
 8007480:	f7ff faff 	bl	8006a82 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007484:	4603      	mov	r3, r0
 8007486:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8007488:	e7d8      	b.n	800743c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800748a:	697a      	ldr	r2, [r7, #20]
 800748c:	f107 0310 	add.w	r3, r7, #16
 8007490:	4611      	mov	r1, r2
 8007492:	4618      	mov	r0, r3
 8007494:	f7ff fdde 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8007498:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800749c:	2b00      	cmp	r3, #0
 800749e:	d01d      	beq.n	80074dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 80074a0:	68b8      	ldr	r0, [r7, #8]
 80074a2:	f000 f9b6 	bl	8007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 80074a6:	4603      	mov	r3, r0
 80074a8:	61fb      	str	r3, [r7, #28]
 80074aa:	f107 021c 	add.w	r2, r7, #28
 80074ae:	f107 0310 	add.w	r3, r7, #16
 80074b2:	4611      	mov	r1, r2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f7ff fa32 	bl	800691e <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEES9_>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d008      	beq.n	80074d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 80074c0:	f107 0214 	add.w	r2, r7, #20
 80074c4:	f107 0318 	add.w	r3, r7, #24
 80074c8:	4619      	mov	r1, r3
 80074ca:	68f8      	ldr	r0, [r7, #12]
 80074cc:	f000 f9b2 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 80074d0:	e027      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 80074d2:	f107 0310 	add.w	r3, r7, #16
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f833 	bl	8007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 80074dc:	68bc      	ldr	r4, [r7, #8]
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff ff8c 	bl	80073fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80074e6:	4603      	mov	r3, r0
 80074e8:	6819      	ldr	r1, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7f9 fcf2 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d008      	beq.n	800750e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 80074fc:	f107 0214 	add.w	r2, r7, #20
 8007500:	f107 0318 	add.w	r3, r7, #24
 8007504:	4619      	mov	r1, r3
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	f000 f994 	bl	8007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>
 800750c:	e009      	b.n	8007522 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800750e:	2300      	movs	r3, #0
 8007510:	623b      	str	r3, [r7, #32]
 8007512:	f107 0220 	add.w	r2, r7, #32
 8007516:	f107 0310 	add.w	r3, r7, #16
 800751a:	4619      	mov	r1, r3
 800751c:	68f8      	ldr	r0, [r7, #12]
 800751e:	f7fa fdaa 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	3728      	adds	r7, #40	; 0x28
 8007526:	46bd      	mov	sp, r7
 8007528:	bdb0      	pop	{r4, r5, r7, pc}

0800752a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800752a:	b480      	push	{r7}
 800752c:	b083      	sub	sp, #12
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	330c      	adds	r3, #12
 8007536:	4618      	mov	r0, r3
 8007538:	370c      	adds	r7, #12
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr

08007542 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8007542:	b580      	push	{r7, lr}
 8007544:	b082      	sub	sp, #8
 8007546:	af00      	add	r7, sp, #0
 8007548:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4618      	mov	r0, r3
 8007550:	f019 f866 	bl	8020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8007554:	4602      	mov	r2, r0
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	601a      	str	r2, [r3, #0]
	return *this;
 800755a:	687b      	ldr	r3, [r7, #4]
      }
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f019 f853 	bl	802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8007576:	4602      	mov	r2, r0
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]
	return *this;
 800757c:	687b      	ldr	r3, [r7, #4]
      }
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEE9_M_valptrEv>:
      _M_valptr() const
 8007586:	b580      	push	{r7, lr}
 8007588:	b082      	sub	sp, #8
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3310      	adds	r3, #16
 8007592:	4618      	mov	r0, r3
 8007594:	f000 f967 	bl	8007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>
 8007598:	4603      	mov	r3, r0
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <_ZNKSt10_Select1stISt4pairIKP3PinP9DigitalInEEclERKS6_>:
      operator()(const _Pair& __x) const
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	4618      	mov	r0, r3
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr

080075ba <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80075ba:	b580      	push	{r7, lr}
 80075bc:	b084      	sub	sp, #16
 80075be:	af00      	add	r7, sp, #0
 80075c0:	60f8      	str	r0, [r7, #12]
 80075c2:	60b9      	str	r1, [r7, #8]
 80075c4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4619      	mov	r1, r3
 80075cc:	68b8      	ldr	r0, [r7, #8]
 80075ce:	f018 ffbb 	bl	8020548 <_ZdlPvj>
      }
 80075d2:	3710      	adds	r7, #16
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 80075d8:	b480      	push	{r7}
 80075da:	b083      	sub	sp, #12
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4618      	mov	r0, r3
 80075e4:	370c      	adds	r7, #12
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b082      	sub	sp, #8
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 80075f8:	6838      	ldr	r0, [r7, #0]
 80075fa:	f000 f940 	bl	800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>
	}
 80075fe:	bf00      	nop
 8007600:	3708      	adds	r7, #8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}

08007606 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007606:	b580      	push	{r7, lr}
 8007608:	b088      	sub	sp, #32
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	61bb      	str	r3, [r7, #24]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800761e:	f7f8 fe7f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d003      	beq.n	8007630 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8007628:	69b8      	ldr	r0, [r7, #24]
 800762a:	f018 ff8b 	bl	8020544 <_ZdlPv>
	    return;
 800762e:	e005      	b.n	800763c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	69b9      	ldr	r1, [r7, #24]
 8007634:	69f8      	ldr	r0, [r7, #28]
 8007636:	f000 f9e1 	bl	80079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	3720      	adds	r7, #32
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <_ZNKSt6vectorIP9DigitalInSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	4618      	mov	r0, r3
 8007650:	f000 f945 	bl	80078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007654:	4603      	mov	r3, r0
 8007656:	4618      	mov	r0, r3
 8007658:	f000 f927 	bl	80078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>
 800765c:	4603      	mov	r3, r0
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}

08007666 <_ZNKSt6vectorIP9DigitalInSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007666:	b480      	push	{r7}
 8007668:	b083      	sub	sp, #12
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	1ad3      	subs	r3, r2, r3
 8007678:	109b      	asrs	r3, r3, #2
 800767a:	4618      	mov	r0, r3
 800767c:	370c      	adds	r7, #12
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr

08007686 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007698:	f7f8 fe42 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800769c:	4603      	mov	r3, r0
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d006      	beq.n	80076b0 <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	009b      	lsls	r3, r3, #2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f018 ff50 	bl	802054c <_Znwj>
 80076ac:	4603      	mov	r3, r0
 80076ae:	e006      	b.n	80076be <_ZNSt16allocator_traitsISaIP9DigitalInEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80076b0:	2200      	movs	r2, #0
 80076b2:	68b9      	ldr	r1, [r7, #8]
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f9b3 	bl	8007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>
 80076ba:	4603      	mov	r3, r0
 80076bc:	bf00      	nop
      { return __a.allocate(__n); }
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <_ZNSt6vectorIP9DigitalInSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	60f8      	str	r0, [r7, #12]
 80076ce:	60b9      	str	r1, [r7, #8]
 80076d0:	607a      	str	r2, [r7, #4]
 80076d2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	68b9      	ldr	r1, [r7, #8]
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 f90a 	bl	80078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>
 80076e0:	4603      	mov	r3, r0
      }
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <_ZSt10destroy_atIP9DigitalInEvPT_>:
    destroy_at(_Tp* __location)
 80076ea:	b480      	push	{r7}
 80076ec:	b083      	sub	sp, #12
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
    }
 80076f2:	bf00      	nop
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <_ZSt8_DestroyIPP9DigitalInEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80076fe:	b580      	push	{r7, lr}
 8007700:	b082      	sub	sp, #8
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8007708:	f7f8 fe0a 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d004      	beq.n	800771c <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8007712:	6839      	ldr	r1, [r7, #0]
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f90a 	bl	800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>
 800771a:	e003      	b.n	8007724 <_ZSt8_DestroyIPP9DigitalInEvT_S3_+0x26>
	__destroy(__first, __last);
 800771c:	6839      	ldr	r1, [r7, #0]
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 f91d 	bl	800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>
    }
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}

0800772a <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() noexcept
 800772a:	b480      	push	{r7}
 800772c:	b083      	sub	sp, #12
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4618      	mov	r0, r3
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8007740:	b580      	push	{r7, lr}
 8007742:	b084      	sub	sp, #16
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8007752:	f7f8 fde5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d009      	beq.n	8007770 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	00db      	lsls	r3, r3, #3
 8007766:	4618      	mov	r0, r3
 8007768:	f018 fef0 	bl	802054c <_Znwj>
 800776c:	4603      	mov	r3, r0
 800776e:	e006      	b.n	800777e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	68b9      	ldr	r1, [r7, #8]
 8007774:	68f8      	ldr	r0, [r7, #12]
 8007776:	f000 f9b1 	bl	8007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>
 800777a:	4603      	mov	r3, r0
 800777c:	bf00      	nop
      { return __a.allocate(__n); }
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}

08007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8007786:	b5b0      	push	{r4, r5, r7, lr}
 8007788:	b088      	sub	sp, #32
 800778a:	af00      	add	r7, sp, #0
 800778c:	60f8      	str	r0, [r7, #12]
 800778e:	60b9      	str	r1, [r7, #8]
 8007790:	607a      	str	r2, [r7, #4]
 8007792:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8007794:	68b8      	ldr	r0, [r7, #8]
 8007796:	f7f9 fd66 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7fa f851 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077a0:	4602      	mov	r2, r0
 80077a2:	f107 0318 	add.w	r3, r7, #24
 80077a6:	4611      	mov	r1, r2
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fb f8e6 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 80077ae:	f107 0418 	add.w	r4, r7, #24
 80077b2:	6838      	ldr	r0, [r7, #0]
 80077b4:	f7f9 fd6d 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4619      	mov	r1, r3
 80077bc:	2008      	movs	r0, #8
 80077be:	f7f8 fdb7 	bl	8000330 <_ZnwjPv>
 80077c2:	4605      	mov	r5, r0
 80077c4:	7f3b      	ldrb	r3, [r7, #28]
 80077c6:	4622      	mov	r2, r4
 80077c8:	7d39      	ldrb	r1, [r7, #20]
 80077ca:	4628      	mov	r0, r5
 80077cc:	f000 f8ec 	bl	80079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 80077d0:	462b      	mov	r3, r5
 80077d2:	4618      	mov	r0, r3
 80077d4:	3720      	adds	r7, #32
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bdb0      	pop	{r4, r5, r7, pc}

080077da <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80077da:	b5b0      	push	{r4, r5, r7, lr}
 80077dc:	b084      	sub	sp, #16
 80077de:	af00      	add	r7, sp, #0
 80077e0:	60f8      	str	r0, [r7, #12]
 80077e2:	60b9      	str	r1, [r7, #8]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7f9 fd3c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80077ee:	4604      	mov	r4, r0
 80077f0:	6838      	ldr	r0, [r7, #0]
 80077f2:	f7fa f826 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80077f6:	4605      	mov	r5, r0
 80077f8:	6a38      	ldr	r0, [r7, #32]
 80077fa:	f7f9 fd4a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80077fe:	4603      	mov	r3, r0
 8007800:	462a      	mov	r2, r5
 8007802:	4621      	mov	r1, r4
 8007804:	68b8      	ldr	r0, [r7, #8]
 8007806:	f7ff ffbe 	bl	8007786 <_ZSt12construct_atISt4pairIKP3PinP9DigitalInEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bdb0      	pop	{r4, r5, r7, pc}

08007812 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8007812:	b580      	push	{r7, lr}
 8007814:	b084      	sub	sp, #16
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	68da      	ldr	r2, [r3, #12]
 800781e:	f107 030c 	add.w	r3, r7, #12
 8007822:	4611      	mov	r1, r2
 8007824:	4618      	mov	r0, r3
 8007826:	f7ff fc15 	bl	8007054 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP9DigitalInEEC1EPSt18_Rb_tree_node_base>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	4618      	mov	r0, r3
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP9DigitalInEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8007840:	68b8      	ldr	r0, [r7, #8]
 8007842:	f000 f8c5 	bl	80079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>
 8007846:	4603      	mov	r3, r0
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	601a      	str	r2, [r3, #0]
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f7fa ffad 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8007854:	4603      	mov	r3, r0
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	605a      	str	r2, [r3, #4]
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4618      	mov	r0, r3
 8007860:	3710      	adds	r7, #16
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8007866:	b580      	push	{r7, lr}
 8007868:	b082      	sub	sp, #8
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 f8b9 	bl	80079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>
 8007874:	4603      	mov	r3, r0
 8007876:	4618      	mov	r0, r3
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <_ZSt10destroy_atISt4pairIKP3PinP9DigitalInEEvPT_>:
    destroy_at(_Tp* __location)
 800787e:	b480      	push	{r7}
 8007880:	b083      	sub	sp, #12
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
    }
 8007886:	bf00      	nop
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8007892:	b480      	push	{r7}
 8007894:	b083      	sub	sp, #12
 8007896:	af00      	add	r7, sp, #0
 8007898:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800789a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800789e:	4618      	mov	r0, r3
 80078a0:	370c      	adds	r7, #12
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <_ZNSt6vectorIP9DigitalInSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80078b2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80078b6:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f7ff ffea 	bl	8007892 <_ZNSt16allocator_traitsISaIP9DigitalInEE8max_sizeERKS2_>
 80078be:	4603      	mov	r3, r0
 80078c0:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80078c2:	f107 0208 	add.w	r2, r7, #8
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4611      	mov	r1, r2
 80078cc:	4618      	mov	r0, r3
 80078ce:	f7fb fa8a 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80078d2:	4603      	mov	r3, r0
 80078d4:	681b      	ldr	r3, [r3, #0]
      }
 80078d6:	4618      	mov	r0, r3
 80078d8:	3710      	adds	r7, #16
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}

080078de <_ZNKSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	4618      	mov	r0, r3
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <_ZSt12__relocate_aIPP9DigitalInS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80078f4:	b5b0      	push	{r4, r5, r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8007902:	68f8      	ldr	r0, [r7, #12]
 8007904:	f000 f8ab 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007908:	4604      	mov	r4, r0
 800790a:	68b8      	ldr	r0, [r7, #8]
 800790c:	f000 f8a7 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007910:	4605      	mov	r5, r0
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f8a3 	bl	8007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>
 8007918:	4602      	mov	r2, r0
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	4629      	mov	r1, r5
 800791e:	4620      	mov	r0, r4
 8007920:	f000 f8a8 	bl	8007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8007924:	4603      	mov	r3, r0
    }
 8007926:	4618      	mov	r0, r3
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bdb0      	pop	{r4, r5, r7, pc}

0800792e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
 8007936:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	429a      	cmp	r2, r3
 800793e:	d00a      	beq.n	8007956 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f000 f8b5 	bl	8007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>
 8007946:	4603      	mov	r3, r0
 8007948:	4618      	mov	r0, r3
 800794a:	f000 f8bc 	bl	8007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>
	  for (; __first != __last; ++__first)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	3304      	adds	r3, #4
 8007952:	607b      	str	r3, [r7, #4]
 8007954:	e7f0      	b.n	8007938 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP9DigitalInEEvT_S5_+0xa>
	}
 8007956:	bf00      	nop
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <_ZNSt12_Destroy_auxILb1EE9__destroyIPP9DigitalInEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800795e:	b480      	push	{r7}
 8007960:	b083      	sub	sp, #12
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
 8007966:	6039      	str	r1, [r7, #0]
 8007968:	bf00      	nop
 800796a:	370c      	adds	r7, #12
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr

08007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8007974:	b580      	push	{r7, lr}
 8007976:	b084      	sub	sp, #16
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8007982:	68b8      	ldr	r0, [r7, #8]
 8007984:	f7fb fadb 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8007988:	4603      	mov	r3, r0
 800798a:	4618      	mov	r0, r3
 800798c:	f7fb facc 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 8007990:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	601a      	str	r2, [r3, #0]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2200      	movs	r2, #0
 800799c:	605a      	str	r2, [r3, #4]
      { }
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	4618      	mov	r0, r3
 80079a2:	3710      	adds	r7, #16
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 80079a8:	b5b0      	push	{r4, r5, r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af02      	add	r7, sp, #8
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	7239      	strb	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 80079b6:	463a      	mov	r2, r7
 80079b8:	f88d 4000 	strb.w	r4, [sp]
 80079bc:	462b      	mov	r3, r5
 80079be:	6879      	ldr	r1, [r7, #4]
 80079c0:	68f8      	ldr	r0, [r7, #12]
 80079c2:	f7ff ffd7 	bl	8007974 <_ZNSt4pairIKP3PinP9DigitalInEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4618      	mov	r0, r3
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bdb0      	pop	{r4, r5, r7, pc}

080079d0 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80079d0:	b480      	push	{r7}
 80079d2:	b083      	sub	sp, #12
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4618      	mov	r0, r3
 80079dc:	370c      	adds	r7, #12
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP9DigitalInEE7_M_addrEv>:
      _M_addr() const noexcept
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b084      	sub	sp, #16
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	60f8      	str	r0, [r7, #12]
 8007a04:	60b9      	str	r1, [r7, #8]
 8007a06:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	4413      	add	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4619      	mov	r1, r3
 8007a14:	68b8      	ldr	r0, [r7, #8]
 8007a16:	f018 fd97 	bl	8020548 <_ZdlPvj>
      }
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f877 	bl	8007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>
 8007a32:	4602      	mov	r2, r0
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	4293      	cmp	r3, r2
 8007a38:	bf8c      	ite	hi
 8007a3a:	2301      	movhi	r3, #1
 8007a3c:	2300      	movls	r3, #0
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d001      	beq.n	8007a48 <_ZN9__gnu_cxx13new_allocatorIP9DigitalInE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007a44:	f018 fe49 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f018 fd7d 	bl	802054c <_Znwj>
 8007a52:	4603      	mov	r3, r0
 8007a54:	bf00      	nop
      }
 8007a56:	4618      	mov	r0, r3
 8007a58:	3710      	adds	r7, #16
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <_ZSt12__niter_baseIPP9DigitalInET_S3_>:
    __niter_base(_Iterator __it)
 8007a5e:	b480      	push	{r7}
 8007a60:	b083      	sub	sp, #12
 8007a62:	af00      	add	r7, sp, #0
 8007a64:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	4618      	mov	r0, r3
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b086      	sub	sp, #24
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	60f8      	str	r0, [r7, #12]
 8007a7c:	60b9      	str	r1, [r7, #8]
 8007a7e:	607a      	str	r2, [r7, #4]
 8007a80:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	109b      	asrs	r3, r3, #2
 8007a8a:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	dd06      	ble.n	8007aa0 <_ZSt14__relocate_a_1IP9DigitalInS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	461a      	mov	r2, r3
 8007a98:	68f9      	ldr	r1, [r7, #12]
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f018 fe90 	bl	80207c0 <memmove>
      return __result + __count;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3718      	adds	r7, #24
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <_ZSt11__addressofIP9DigitalInEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	4618      	mov	r0, r3
 8007abc:	370c      	adds	r7, #12
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac4:	4770      	bx	lr

08007ac6 <_ZSt8_DestroyIP9DigitalInEvPT_>:
    _Destroy(_Tp* __pointer)
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	b082      	sub	sp, #8
 8007aca:	af00      	add	r7, sp, #0
 8007acc:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7ff fe0b 	bl	80076ea <_ZSt10destroy_atIP9DigitalInEvPT_>
    }
 8007ad4:	bf00      	nop
 8007ad6:	3708      	adds	r7, #8
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	bd80      	pop	{r7, pc}

08007adc <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8007ae8:	68f8      	ldr	r0, [r7, #12]
 8007aea:	f000 f825 	bl	8007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>
 8007aee:	4602      	mov	r2, r0
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4293      	cmp	r3, r2
 8007af4:	bf8c      	ite	hi
 8007af6:	2301      	movhi	r3, #1
 8007af8:	2300      	movls	r3, #0
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8007b00:	f018 fdeb 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	4613      	mov	r3, r2
 8007b08:	005b      	lsls	r3, r3, #1
 8007b0a:	4413      	add	r3, r2
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f018 fd1c 	bl	802054c <_Znwj>
 8007b14:	4603      	mov	r3, r0
 8007b16:	bf00      	nop
      }
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3710      	adds	r7, #16
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <_ZNK9__gnu_cxx13new_allocatorIP9DigitalInE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b28:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007b40:	4b03      	ldr	r3, [pc, #12]	; (8007b50 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP9DigitalInEEE11_M_max_sizeEv+0x18>)
      }
 8007b42:	4618      	mov	r0, r3
 8007b44:	370c      	adds	r7, #12
 8007b46:	46bd      	mov	sp, r7
 8007b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	05555555 	.word	0x05555555

08007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fd96 	bl	8006690 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9DigitalInESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	4618      	mov	r0, r3
 8007b68:	3708      	adds	r7, #8
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
	...

08007b70 <_Z41__static_initialization_and_destruction_0ii>:
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b082      	sub	sp, #8
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d10a      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d105      	bne.n	8007b96 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007b8a:	480c      	ldr	r0, [pc, #48]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007b8c:	f7fe fcb0 	bl	80064f0 <_ZNSt6vectorIP9DigitalInSaIS1_EEC1Ev>
map<Pin*, DigitalIn*> DigitalIn::pin_to_digital_in;
 8007b90:	480b      	ldr	r0, [pc, #44]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007b92:	f7fe fcd3 	bl	800653c <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d10a      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d105      	bne.n	8007bb2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8007ba6:	4806      	ldr	r0, [pc, #24]	; (8007bc0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8007ba8:	f7ff ffd4 	bl	8007b54 <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalIn*> DigitalIn::all_digital_ins;
 8007bac:	4803      	ldr	r0, [pc, #12]	; (8007bbc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8007bae:	f000 f809 	bl	8007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>
}
 8007bb2:	bf00      	nop
 8007bb4:	3708      	adds	r7, #8
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	24000110 	.word	0x24000110
 8007bc0:	2400011c 	.word	0x2400011c

08007bc4 <_ZNSt6vectorIP9DigitalInSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007bc4:	b5b0      	push	{r4, r5, r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681c      	ldr	r4, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7ff fb21 	bl	800721e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EE19_M_get_Tp_allocatorEv>
 8007bdc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bde:	461a      	mov	r2, r3
 8007be0:	4629      	mov	r1, r5
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff fb26 	bl	8007234 <_ZSt8_DestroyIPP9DigitalInS1_EvT_S3_RSaIT0_E>
      }
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fe fd17 	bl	800661e <_ZNSt12_Vector_baseIP9DigitalInSaIS1_EED1Ev>
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3708      	adds	r7, #8
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bdb0      	pop	{r4, r5, r7, pc}

08007bfa <_GLOBAL__sub_I__ZN9DigitalIn15all_digital_insE>:
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c02:	2001      	movs	r0, #1
 8007c04:	f7ff ffb4 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c08:	bd80      	pop	{r7, pc}

08007c0a <_GLOBAL__sub_D__ZN9DigitalIn15all_digital_insE>:
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007c12:	2000      	movs	r0, #0
 8007c14:	f7ff ffac 	bl	8007b70 <_Z41__static_initialization_and_destruction_0ii>
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 f8b6 	bl	8007d94 <_ZNSaIP10DigitalOutED1Ev>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3708      	adds	r7, #8
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}

08007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8007c32:	b580      	push	{r7, lr}
 8007c34:	b082      	sub	sp, #8
 8007c36:	af00      	add	r7, sp, #0
 8007c38:	6078      	str	r0, [r7, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	f000 f899 	bl	8007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	4618      	mov	r0, r3
 8007c46:	3708      	adds	r7, #8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>:
      vector() = default;
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b082      	sub	sp, #8
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff ffeb 	bl	8007c32 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EEC1Ev>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4618      	mov	r0, r3
 8007c60:	3708      	adds	r7, #8
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}

08007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f8c9 	bl	8007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4618      	mov	r0, r3
 8007c78:	3708      	adds	r7, #8
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}

08007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 8007c7e:	b580      	push	{r7, lr}
 8007c80:	b082      	sub	sp, #8
 8007c82:	af00      	add	r7, sp, #0
 8007c84:	6078      	str	r0, [r7, #4]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 f8a7 	bl	8007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	4618      	mov	r0, r3
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}

08007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	b082      	sub	sp, #8
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff ffeb 	bl	8007c7e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	4618      	mov	r0, r3
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
	...

08007cb4 <_ZN10DigitalOutC1EP3Pin>:
#include <Mini-STLIB/DigitalOut.hpp>

vector<DigitalOut*> DigitalOut::all_digital_outs;
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;

DigitalOut::DigitalOut(Pin* pin) : pin(pin) {
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b085      	sub	sp, #20
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	701a      	strb	r2, [r3, #0]
 8007cc4:	683a      	ldr	r2, [r7, #0]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	605a      	str	r2, [r3, #4]
	DigitalOut::all_digital_outs.push_back(this);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	60fb      	str	r3, [r7, #12]
 8007cce:	f107 030c 	add.w	r3, r7, #12
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	4809      	ldr	r0, [pc, #36]	; (8007cfc <_ZN10DigitalOutC1EP3Pin+0x48>)
 8007cd6:	f000 f8b6 	bl	8007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>
	DigitalOut::pin_to_digital_out[pin] = this;
 8007cda:	687c      	ldr	r4, [r7, #4]
 8007cdc:	463b      	mov	r3, r7
 8007cde:	4619      	mov	r1, r3
 8007ce0:	4807      	ldr	r0, [pc, #28]	; (8007d00 <_ZN10DigitalOutC1EP3Pin+0x4c>)
 8007ce2:	f000 f8c1 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	601c      	str	r4, [r3, #0]
	pin->mode = DIGITAL_OUTPUT;
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	2204      	movs	r2, #4
 8007cee:	719a      	strb	r2, [r3, #6]
}
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd90      	pop	{r4, r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	24000134 	.word	0x24000134
 8007d00:	24000140 	.word	0x24000140

08007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>:

void DigitalOut::set_to(DigitalOutState state){
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
	if(state == HIGH)
 8007d10:	78fb      	ldrb	r3, [r7, #3]
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d103      	bne.n	8007d1e <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x1a>
		turn_high();
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 f808 	bl	8007d2c <_ZN10DigitalOut9turn_highEv>
	else
		turn_low();
}
 8007d1c:	e002      	b.n	8007d24 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE+0x20>
		turn_low();
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f816 	bl	8007d50 <_ZN10DigitalOut8turn_lowEv>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <_ZN10DigitalOut9turn_highEv>:

void DigitalOut::turn_high(){
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b082      	sub	sp, #8
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_SET);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	6818      	ldr	r0, [r3, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	889b      	ldrh	r3, [r3, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	4619      	mov	r1, r3
 8007d44:	f013 f898 	bl	801ae78 <HAL_GPIO_WritePin>
}
 8007d48:	bf00      	nop
 8007d4a:	3708      	adds	r7, #8
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <_ZN10DigitalOut8turn_lowEv>:

void DigitalOut::turn_low(){
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(pin->port, pin->pin, GPIO_PIN_RESET);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	889b      	ldrh	r3, [r3, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	4619      	mov	r1, r3
 8007d68:	f013 f886 	bl	801ae78 <HAL_GPIO_WritePin>
}
 8007d6c:	bf00      	nop
 8007d6e:	3708      	adds	r7, #8
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b082      	sub	sp, #8
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f8d1 	bl	8007f24 <_ZNSaIP10DigitalOutEC1Ev>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f8d9 	bl	8007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <_ZNSaIP10DigitalOutED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4618      	mov	r0, r3
 8007da0:	370c      	adds	r7, #12
 8007da2:	46bd      	mov	sp, r7
 8007da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b082      	sub	sp, #8
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	689a      	ldr	r2, [r3, #8]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f8cd 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      }
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff ff24 	bl	8007c1a <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE12_Vector_implD1Ev>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3708      	adds	r7, #8
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f8d0 	bl	8007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7f8 fefb 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7f8 faa6 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3708      	adds	r7, #8
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}

08007e06 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEED1Ev>:
 8007e06:	b480      	push	{r7}
 8007e08:	b083      	sub	sp, #12
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4618      	mov	r0, r3
 8007e12:	370c      	adds	r7, #12
 8007e14:	46bd      	mov	sp, r7
 8007e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1a:	4770      	bx	lr

08007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b082      	sub	sp, #8
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 f8db 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f8b7 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7ff ff15 	bl	8007c66 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <_ZNSt6vectorIP10DigitalOutSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b082      	sub	sp, #8
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6078      	str	r0, [r7, #4]
 8007e4e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8007e50:	6838      	ldr	r0, [r7, #0]
 8007e52:	f000 f8d1 	bl	8007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>
 8007e56:	4603      	mov	r3, r0
 8007e58:	4619      	mov	r1, r3
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f000 f8d7 	bl	800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8007e68:	b590      	push	{r4, r7, lr}
 8007e6a:	b08b      	sub	sp, #44	; 0x2c
 8007e6c:	af02      	add	r7, sp, #8
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8007e72:	6839      	ldr	r1, [r7, #0]
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f000 f8fc 	bl	8008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8007e7e:	6878      	ldr	r0, [r7, #4]
 8007e80:	f000 f906 	bl	8008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8007e84:	4603      	mov	r3, r0
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	f107 020c 	add.w	r2, r7, #12
 8007e8c:	f107 0308 	add.w	r3, r7, #8
 8007e90:	4611      	mov	r1, r2
 8007e92:	4618      	mov	r0, r3
 8007e94:	f000 f909 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8007e98:	4603      	mov	r3, r0
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d114      	bne.n	8007ec8 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f917 	bl	80080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681c      	ldr	r4, [r3, #0]
 8007ea8:	f107 0308 	add.w	r3, r7, #8
 8007eac:	4618      	mov	r0, r3
 8007eae:	f000 f91d 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	681a      	ldr	r2, [r3, #0]
 8007eb6:	f107 0310 	add.w	r3, r7, #16
 8007eba:	4621      	mov	r1, r4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7f9 f80c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8007ec8:	2301      	movs	r3, #1
 8007eca:	e000      	b.n	8007ece <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 8007ecc:	2300      	movs	r3, #0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d01b      	beq.n	8007f0a <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ed2:	687c      	ldr	r4, [r7, #4]
 8007ed4:	f107 0208 	add.w	r2, r7, #8
 8007ed8:	f107 0314 	add.w	r3, r7, #20
 8007edc:	4611      	mov	r1, r2
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 f912 	bl	8008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 8007ee4:	f107 0318 	add.w	r3, r7, #24
 8007ee8:	6839      	ldr	r1, [r7, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7f9 f808 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8007ef0:	f107 0218 	add.w	r2, r7, #24
 8007ef4:	f107 031c 	add.w	r3, r7, #28
 8007ef8:	9300      	str	r3, [sp, #0]
 8007efa:	4613      	mov	r3, r2
 8007efc:	4a08      	ldr	r2, [pc, #32]	; (8007f20 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 8007efe:	6979      	ldr	r1, [r7, #20]
 8007f00:	4620      	mov	r0, r4
 8007f02:	f000 f911 	bl	8008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 8007f06:	4603      	mov	r3, r0
 8007f08:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8007f0a:	f107 0308 	add.w	r3, r7, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f8ec 	bl	80080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>
 8007f14:	4603      	mov	r3, r0
 8007f16:	3304      	adds	r3, #4
      }
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3724      	adds	r7, #36	; 0x24
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd90      	pop	{r4, r7, pc}
 8007f20:	08020cbc 	.word	0x08020cbc

08007f24 <_ZNSaIP10DigitalOutEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f939 	bl	80081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4618      	mov	r0, r3
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	601a      	str	r2, [r3, #0]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	605a      	str	r2, [r3, #4]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2200      	movs	r2, #0
 8007f54:	609a      	str	r2, [r3, #8]
	{ }
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr

08007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	60f8      	str	r0, [r7, #12]
 8007f6c:	60b9      	str	r1, [r7, #8]
 8007f6e:	607a      	str	r2, [r7, #4]
	if (__p)
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d005      	beq.n	8007f82 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	687a      	ldr	r2, [r7, #4]
 8007f7a:	68b9      	ldr	r1, [r7, #8]
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f000 f91c 	bl	80081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>
      }
 8007f82:	bf00      	nop
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}

08007f8a <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 8007f8a:	b580      	push	{r7, lr}
 8007f8c:	b082      	sub	sp, #8
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f930 	bl	80081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3708      	adds	r7, #8
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8007fa2:	b580      	push	{r7, lr}
 8007fa4:	b084      	sub	sp, #16
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
 8007faa:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d012      	beq.n	8007fd8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8007fb2:	6838      	ldr	r0, [r7, #0]
 8007fb4:	f000 f92b 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	4619      	mov	r1, r3
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fff0 	bl	8007fa2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8007fc2:	6838      	ldr	r0, [r7, #0]
 8007fc4:	f000 f92f 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8007fc8:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8007fca:	6839      	ldr	r1, [r7, #0]
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f936 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8007fd6:	e7e9      	b.n	8007fac <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	4618      	mov	r0, r3
 8007fee:	370c      	adds	r7, #12
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <_ZSt4moveIRP10DigitalOutEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4618      	mov	r0, r3
 8008004:	370c      	adds	r7, #12
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr

0800800e <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800800e:	b5b0      	push	{r4, r5, r7, lr}
 8008010:	b082      	sub	sp, #8
 8008012:	af00      	add	r7, sp, #0
 8008014:	6078      	str	r0, [r7, #4]
 8008016:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685a      	ldr	r2, [r3, #4]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	d011      	beq.n	8008048 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008024:	687c      	ldr	r4, [r7, #4]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685d      	ldr	r5, [r3, #4]
 800802a:	6838      	ldr	r0, [r7, #0]
 800802c:	f000 f918 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008030:	4603      	mov	r3, r0
 8008032:	461a      	mov	r2, r3
 8008034:	4629      	mov	r1, r5
 8008036:	4620      	mov	r0, r4
 8008038:	f000 f932 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	1d1a      	adds	r2, r3, #4
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	605a      	str	r2, [r3, #4]
 8008046:	e00c      	b.n	8008062 <_ZNSt6vectorIP10DigitalOutSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 f93b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 800804e:	4604      	mov	r4, r0
 8008050:	6838      	ldr	r0, [r7, #0]
 8008052:	f000 f905 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008056:	4603      	mov	r3, r0
 8008058:	461a      	mov	r2, r3
 800805a:	4621      	mov	r1, r4
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 f943 	bl	80082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 f9bc 	bl	80083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>
 8008068:	4603      	mov	r3, r0
      }
 800806a:	4618      	mov	r0, r3
 800806c:	3708      	adds	r7, #8
 800806e:	46bd      	mov	sp, r7
 8008070:	bdb0      	pop	{r4, r5, r7, pc}

08008072 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8008072:	b580      	push	{r7, lr}
 8008074:	b082      	sub	sp, #8
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6839      	ldr	r1, [r7, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f000 f9c8 	bl	8008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8008086:	4603      	mov	r3, r0
 8008088:	4618      	mov	r0, r3
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	4618      	mov	r0, r3
 800809c:	f000 f9d2 	bl	8008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80080a0:	4603      	mov	r3, r0
 80080a2:	4618      	mov	r0, r3
 80080a4:	3708      	adds	r7, #8
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	429a      	cmp	r2, r3
 80080be:	bf0c      	ite	eq
 80080c0:	2301      	moveq	r3, #1
 80080c2:	2300      	movne	r3, #0
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	4618      	mov	r0, r3
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 80080d2:	b590      	push	{r4, r7, lr}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4618      	mov	r0, r3
 80080de:	f000 f9c2 	bl	8008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 80080e2:	bf00      	nop
 80080e4:	4620      	mov	r0, r4
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd90      	pop	{r4, r7, pc}

080080ec <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4618      	mov	r0, r3
 80080fa:	f000 f9bf 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 80080fe:	4603      	mov	r3, r0
 8008100:	4618      	mov	r0, r3
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}

08008108 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8008108:	b480      	push	{r7}
 800810a:	b083      	sub	sp, #12
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	601a      	str	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	4618      	mov	r0, r3
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008128:	b5b0      	push	{r4, r5, r7, lr}
 800812a:	b088      	sub	sp, #32
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f7f9 f895 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800813c:	4604      	mov	r4, r0
 800813e:	6838      	ldr	r0, [r7, #0]
 8008140:	f7f9 fb7f 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008144:	4605      	mov	r5, r0
 8008146:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008148:	f7f9 f8a3 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800814c:	4603      	mov	r3, r0
 800814e:	462a      	mov	r2, r5
 8008150:	4621      	mov	r1, r4
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 f9a0 	bl	8008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8008158:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 800815a:	69f8      	ldr	r0, [r7, #28]
 800815c:	f000 faee 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008160:	4603      	mov	r3, r0
 8008162:	f107 0010 	add.w	r0, r7, #16
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	68f9      	ldr	r1, [r7, #12]
 800816a:	f000 f9b8 	bl	80084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d007      	beq.n	8008184 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8008174:	6939      	ldr	r1, [r7, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	69fb      	ldr	r3, [r7, #28]
 800817a:	68f8      	ldr	r0, [r7, #12]
 800817c:	f000 faf1 	bl	8008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8008180:	4603      	mov	r3, r0
 8008182:	e00b      	b.n	800819c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8008184:	69f9      	ldr	r1, [r7, #28]
 8008186:	68f8      	ldr	r0, [r7, #12]
 8008188:	f000 f859 	bl	800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 800818c:	693a      	ldr	r2, [r7, #16]
 800818e:	f107 0318 	add.w	r3, r7, #24
 8008192:	4611      	mov	r1, r2
 8008194:	4618      	mov	r0, r3
 8008196:	f000 fb23 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800819a:	69bb      	ldr	r3, [r7, #24]
      }
 800819c:	4618      	mov	r0, r3
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bdb0      	pop	{r4, r5, r7, pc}

080081a4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80081a4:	b480      	push	{r7}
 80081a6:	b083      	sub	sp, #12
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	370c      	adds	r7, #12
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b088      	sub	sp, #32
 80081be:	af00      	add	r7, sp, #0
 80081c0:	60f8      	str	r0, [r7, #12]
 80081c2:	60b9      	str	r1, [r7, #8]
 80081c4:	607a      	str	r2, [r7, #4]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	61fb      	str	r3, [r7, #28]
 80081ca:	68bb      	ldr	r3, [r7, #8]
 80081cc:	61bb      	str	r3, [r7, #24]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80081d2:	f7f8 f8a5 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d003      	beq.n	80081e4 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80081dc:	69b8      	ldr	r0, [r7, #24]
 80081de:	f018 f9b1 	bl	8020544 <_ZdlPv>
	    return;
 80081e2:	e005      	b.n	80081f0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80081e4:	697a      	ldr	r2, [r7, #20]
 80081e6:	69b9      	ldr	r1, [r7, #24]
 80081e8:	69f8      	ldr	r0, [r7, #28]
 80081ea:	f000 fdac 	bl	8008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80081ee:	bf00      	nop
 80081f0:	bf00      	nop
 80081f2:	3720      	adds	r7, #32
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEC1Ev>:
 80081f8:	b480      	push	{r7}
 80081fa:	b083      	sub	sp, #12
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4618      	mov	r0, r3
 8008204:	370c      	adds	r7, #12
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr

0800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800820e:	b480      	push	{r7}
 8008210:	b083      	sub	sp, #12
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	4618      	mov	r0, r3
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr

0800823e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800823e:	b580      	push	{r7, lr}
 8008240:	b082      	sub	sp, #8
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8008248:	6839      	ldr	r1, [r7, #0]
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 fad7 	bl	80087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fae8 	bl	8008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8008258:	bf00      	nop
 800825a:	3708      	adds	r7, #8
 800825c:	46bd      	mov	sp, r7
 800825e:	bd80      	pop	{r7, pc}

08008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	4618      	mov	r0, r3
 800826c:	370c      	adds	r7, #12
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008276:	b590      	push	{r4, r7, lr}
 8008278:	b083      	sub	sp, #12
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008280:	6838      	ldr	r0, [r7, #0]
 8008282:	f7ff ffed 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 8008286:	4603      	mov	r3, r0
 8008288:	681c      	ldr	r4, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4619      	mov	r1, r3
 800828e:	2004      	movs	r0, #4
 8008290:	f7f8 f84e 	bl	8000330 <_ZnwjPv>
 8008294:	4603      	mov	r3, r0
 8008296:	601c      	str	r4, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	370c      	adds	r7, #12
 800829c:	46bd      	mov	sp, r7
 800829e:	bd90      	pop	{r4, r7, pc}

080082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f7ff ffd7 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 80082b2:	4603      	mov	r3, r0
 80082b4:	4619      	mov	r1, r3
 80082b6:	68b8      	ldr	r0, [r7, #8]
 80082b8:	f7ff ffdd 	bl	8008276 <_ZSt12construct_atIP10DigitalOutJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80082bc:	bf00      	nop
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	1d1a      	adds	r2, r3, #4
 80082d0:	f107 030c 	add.w	r3, r7, #12
 80082d4:	4611      	mov	r1, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fab8 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	4618      	mov	r0, r3
 80082e0:	3710      	adds	r7, #16
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80082e8:	b5b0      	push	{r4, r5, r7, lr}
 80082ea:	b08c      	sub	sp, #48	; 0x30
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	60f8      	str	r0, [r7, #12]
 80082f0:	60b9      	str	r1, [r7, #8]
 80082f2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80082f4:	4a39      	ldr	r2, [pc, #228]	; (80083dc <_ZNSt6vectorIP10DigitalOutSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80082f6:	2101      	movs	r1, #1
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	f000 fab7 	bl	800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>
 80082fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	f000 faf4 	bl	80088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>
 8008312:	4603      	mov	r3, r0
 8008314:	617b      	str	r3, [r7, #20]
 8008316:	f107 0214 	add.w	r2, r7, #20
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f000 fafa 	bl	800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8008326:	4603      	mov	r3, r0
 8008328:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fb08 	bl	8008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>
 8008334:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800833a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	18d5      	adds	r5, r2, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff8b 	bl	8008260 <_ZSt7forwardIP10DigitalOutEOT_RNSt16remove_referenceIS2_E4typeE>
 800834a:	4603      	mov	r3, r0
 800834c:	461a      	mov	r2, r3
 800834e:	4629      	mov	r1, r5
 8008350:	4620      	mov	r0, r4
 8008352:	f7ff ffa5 	bl	80082a0 <_ZNSt16allocator_traitsISaIP10DigitalOutEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800835a:	f107 0308 	add.w	r3, r7, #8
 800835e:	4618      	mov	r0, r3
 8008360:	f000 fb18 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008364:	4603      	mov	r3, r0
 8008366:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	4618      	mov	r0, r3
 800836c:	f000 fb1d 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008370:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8008372:	69fa      	ldr	r2, [r7, #28]
 8008374:	4621      	mov	r1, r4
 8008376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008378:	f000 faf8 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800837c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800837e:	69bb      	ldr	r3, [r7, #24]
 8008380:	3304      	adds	r3, #4
 8008382:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8008384:	f107 0308 	add.w	r3, r7, #8
 8008388:	4618      	mov	r0, r3
 800838a:	f000 fb03 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800838e:	4603      	mov	r3, r0
 8008390:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	4618      	mov	r0, r3
 8008396:	f000 fb08 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 800839a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800839c:	69ba      	ldr	r2, [r7, #24]
 800839e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083a0:	4620      	mov	r0, r4
 80083a2:	f000 fae3 	bl	800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80083a6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80083a8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	689a      	ldr	r2, [r3, #8]
 80083ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b0:	1ad3      	subs	r3, r2, r3
 80083b2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80083b4:	461a      	mov	r2, r3
 80083b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083b8:	f7ff fdd4 	bl	8007f64 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80083c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	69fa      	ldr	r2, [r7, #28]
 80083ce:	441a      	add	r2, r3
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	609a      	str	r2, [r3, #8]
    }
 80083d4:	bf00      	nop
 80083d6:	3730      	adds	r7, #48	; 0x30
 80083d8:	46bd      	mov	sp, r7
 80083da:	bdb0      	pop	{r4, r5, r7, pc}
 80083dc:	08020bc4 	.word	0x08020bc4

080083e0 <_ZNSt6vectorIP10DigitalOutSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7ff ff6b 	bl	80082c4 <_ZNSt6vectorIP10DigitalOutSaIS1_EE3endEv>
 80083ee:	4603      	mov	r3, r0
 80083f0:	60fb      	str	r3, [r7, #12]
 80083f2:	f107 030c 	add.w	r3, r7, #12
 80083f6:	2101      	movs	r1, #1
 80083f8:	4618      	mov	r0, r3
 80083fa:	f000 faef 	bl	80089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>
 80083fe:	4603      	mov	r3, r0
 8008400:	60bb      	str	r3, [r7, #8]
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fb01 	bl	8008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>
 800840c:	4603      	mov	r3, r0
      }
 800840e:	4618      	mov	r0, r3
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}

08008416 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8008416:	b590      	push	{r4, r7, lr}
 8008418:	b083      	sub	sp, #12
 800841a:	af00      	add	r7, sp, #0
 800841c:	6078      	str	r0, [r7, #4]
 800841e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7ff fddd 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008426:	4604      	mov	r4, r0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 fafc 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800842e:	4602      	mov	r2, r0
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	4621      	mov	r1, r4
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 fb02 	bl	8008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 800843a:	4603      	mov	r3, r0
 800843c:	4618      	mov	r0, r3
 800843e:	370c      	adds	r7, #12
 8008440:	46bd      	mov	sp, r7
 8008442:	bd90      	pop	{r4, r7, pc}

08008444 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	1d1a      	adds	r2, r3, #4
 8008450:	f107 030c 	add.w	r3, r7, #12
 8008454:	4611      	mov	r1, r2
 8008456:	4618      	mov	r0, r3
 8008458:	f000 f9c2 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8008466:	b480      	push	{r7}
 8008468:	b083      	sub	sp, #12
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 800846e:	bf00      	nop
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr

0800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr()
 800847c:	b580      	push	{r7, lr}
 800847e:	b082      	sub	sp, #8
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3310      	adds	r3, #16
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fb0b 	bl	8008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 800848e:	4603      	mov	r3, r0
 8008490:	4618      	mov	r0, r3
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8008498:	b5b0      	push	{r4, r5, r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af02      	add	r7, sp, #8
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	f000 fb08 	bl	8008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 80084ac:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80084ae:	68b8      	ldr	r0, [r7, #8]
 80084b0:	f7f8 fed9 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80084b4:	4604      	mov	r4, r0
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f7f9 f9c3 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 80084bc:	4605      	mov	r5, r0
 80084be:	6838      	ldr	r0, [r7, #0]
 80084c0:	f7f8 fee7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80084c4:	4603      	mov	r3, r0
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	462b      	mov	r3, r5
 80084ca:	4622      	mov	r2, r4
 80084cc:	6979      	ldr	r1, [r7, #20]
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f000 fb05 	bl	8008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 80084d4:	697b      	ldr	r3, [r7, #20]
	}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3718      	adds	r7, #24
 80084da:	46bd      	mov	sp, r7
 80084dc:	bdb0      	pop	{r4, r5, r7, pc}

080084de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80084de:	b5b0      	push	{r4, r5, r7, lr}
 80084e0:	b08c      	sub	sp, #48	; 0x30
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	607a      	str	r2, [r7, #4]
 80084ea:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 80084ec:	1d3b      	adds	r3, r7, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f000 fb22 	bl	8008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>
 80084f4:	4603      	mov	r3, r0
 80084f6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 80084f8:	69bc      	ldr	r4, [r7, #24]
 80084fa:	68b8      	ldr	r0, [r7, #8]
 80084fc:	f000 fa93 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008500:	4603      	mov	r3, r0
 8008502:	429c      	cmp	r4, r3
 8008504:	bf0c      	ite	eq
 8008506:	2301      	moveq	r3, #1
 8008508:	2300      	movne	r3, #0
 800850a:	b2db      	uxtb	r3, r3
 800850c:	2b00      	cmp	r3, #0
 800850e:	d032      	beq.n	8008576 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 8008510:	68b8      	ldr	r0, [r7, #8]
 8008512:	f000 fb22 	bl	8008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 8008516:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8008518:	2b00      	cmp	r3, #0
 800851a:	d015      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800851c:	68bc      	ldr	r4, [r7, #8]
 800851e:	68b8      	ldr	r0, [r7, #8]
 8008520:	f000 fb27 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008524:	4603      	mov	r3, r0
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fb2e 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800852e:	4603      	mov	r3, r0
 8008530:	6819      	ldr	r1, [r3, #0]
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	461a      	mov	r2, r3
 8008538:	4620      	mov	r0, r4
 800853a:	f7f8 fcce 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800853e:	4603      	mov	r3, r0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d001      	beq.n	8008548 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 8008548:	2300      	movs	r3, #0
	  if (size() > 0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d00c      	beq.n	8008568 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
 8008552:	68b8      	ldr	r0, [r7, #8]
 8008554:	f000 fb0d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008558:	4602      	mov	r2, r0
 800855a:	f107 031c 	add.w	r3, r7, #28
 800855e:	4619      	mov	r1, r3
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f7f9 fca1 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8008566:	e0e5      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fb17 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 8008574:	e0de      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 8008576:	68bc      	ldr	r4, [r7, #8]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	681d      	ldr	r5, [r3, #0]
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fb03 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008584:	4603      	mov	r3, r0
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	4629      	mov	r1, r5
 800858c:	4620      	mov	r0, r4
 800858e:	f7f8 fca4 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d059      	beq.n	800864c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800859c:	69bc      	ldr	r4, [r7, #24]
 800859e:	68b8      	ldr	r0, [r7, #8]
 80085a0:	f000 fb89 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085a4:	4603      	mov	r3, r0
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429c      	cmp	r4, r3
 80085aa:	bf0c      	ite	eq
 80085ac:	2301      	moveq	r3, #1
 80085ae:	2300      	movne	r3, #0
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00d      	beq.n	80085d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 80085b6:	68b8      	ldr	r0, [r7, #8]
 80085b8:	f000 fb7d 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085bc:	4604      	mov	r4, r0
 80085be:	68b8      	ldr	r0, [r7, #8]
 80085c0:	f000 fb79 	bl	8008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 80085c4:	4603      	mov	r3, r0
 80085c6:	461a      	mov	r2, r3
 80085c8:	4621      	mov	r1, r4
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f7f9 fd18 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80085d0:	e0b0      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80085d2:	68bc      	ldr	r4, [r7, #8]
 80085d4:	f107 0314 	add.w	r3, r7, #20
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 fb78 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
 80085de:	4603      	mov	r3, r0
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fad1 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80085e8:	4603      	mov	r3, r0
 80085ea:	6819      	ldr	r1, [r3, #0]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	461a      	mov	r2, r3
 80085f2:	4620      	mov	r0, r4
 80085f4:	f7f8 fc71 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d01f      	beq.n	800863e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	4618      	mov	r0, r3
 8008602:	f7ff fe04 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008606:	4603      	mov	r3, r0
 8008608:	2b00      	cmp	r3, #0
 800860a:	bf0c      	ite	eq
 800860c:	2301      	moveq	r3, #1
 800860e:	2300      	movne	r3, #0
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d00a      	beq.n	800862c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 8008616:	2300      	movs	r3, #0
 8008618:	623b      	str	r3, [r7, #32]
 800861a:	f107 0214 	add.w	r2, r7, #20
 800861e:	f107 0320 	add.w	r3, r7, #32
 8008622:	4619      	mov	r1, r3
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f7f9 fc3f 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800862a:	e083      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800862c:	f107 0218 	add.w	r2, r7, #24
 8008630:	f107 0318 	add.w	r3, r7, #24
 8008634:	4619      	mov	r1, r3
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f7f9 fce2 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800863c:	e07a      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	683a      	ldr	r2, [r7, #0]
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 faac 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800864a:	e073      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800864c:	68bc      	ldr	r4, [r7, #8]
 800864e:	69bb      	ldr	r3, [r7, #24]
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fa9a 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008656:	4603      	mov	r3, r0
 8008658:	6819      	ldr	r1, [r3, #0]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	461a      	mov	r2, r3
 8008660:	4620      	mov	r0, r4
 8008662:	f7f8 fc3a 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008666:	4603      	mov	r3, r0
 8008668:	2b00      	cmp	r3, #0
 800866a:	d059      	beq.n	8008720 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800866c:	69bb      	ldr	r3, [r7, #24]
 800866e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 8008670:	69bc      	ldr	r4, [r7, #24]
 8008672:	68b8      	ldr	r0, [r7, #8]
 8008674:	f000 fa7d 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008678:	4603      	mov	r3, r0
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	429c      	cmp	r4, r3
 800867e:	bf0c      	ite	eq
 8008680:	2301      	moveq	r3, #1
 8008682:	2300      	movne	r3, #0
 8008684:	b2db      	uxtb	r3, r3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00c      	beq.n	80086a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800868a:	2300      	movs	r3, #0
 800868c:	627b      	str	r3, [r7, #36]	; 0x24
 800868e:	68b8      	ldr	r0, [r7, #8]
 8008690:	f000 fa6f 	bl	8008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 8008694:	4602      	mov	r2, r0
 8008696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800869a:	4619      	mov	r1, r3
 800869c:	68f8      	ldr	r0, [r7, #12]
 800869e:	f7f9 fc03 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086a2:	e047      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 80086a4:	68bc      	ldr	r4, [r7, #8]
 80086a6:	683b      	ldr	r3, [r7, #0]
 80086a8:	681d      	ldr	r5, [r3, #0]
 80086aa:	f107 0310 	add.w	r3, r7, #16
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fb1e 	bl	8008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4618      	mov	r0, r3
 80086ba:	f000 fa66 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80086be:	4603      	mov	r3, r0
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	461a      	mov	r2, r3
 80086c4:	4629      	mov	r1, r5
 80086c6:	4620      	mov	r0, r4
 80086c8:	f7f8 fc07 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80086cc:	4603      	mov	r3, r0
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d01f      	beq.n	8008712 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 80086d2:	69bb      	ldr	r3, [r7, #24]
 80086d4:	4618      	mov	r0, r3
 80086d6:	f7ff fd9a 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 80086da:	4603      	mov	r3, r0
 80086dc:	2b00      	cmp	r3, #0
 80086de:	bf0c      	ite	eq
 80086e0:	2301      	moveq	r3, #1
 80086e2:	2300      	movne	r3, #0
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00a      	beq.n	8008700 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 80086ea:	2300      	movs	r3, #0
 80086ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80086ee:	f107 0218 	add.w	r2, r7, #24
 80086f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80086f6:	4619      	mov	r1, r3
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f7f9 fbd5 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80086fe:	e019      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 8008700:	f107 0210 	add.w	r2, r7, #16
 8008704:	f107 0310 	add.w	r3, r7, #16
 8008708:	4619      	mov	r1, r3
 800870a:	68f8      	ldr	r0, [r7, #12]
 800870c:	f7f9 fc78 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8008710:	e010      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	683a      	ldr	r2, [r7, #0]
 8008716:	68b9      	ldr	r1, [r7, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 fa42 	bl	8008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800871e:	e009      	b.n	8008734 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 8008720:	2300      	movs	r3, #0
 8008722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008724:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8008728:	f107 0318 	add.w	r3, r7, #24
 800872c:	4619      	mov	r1, r3
 800872e:	68f8      	ldr	r0, [r7, #12]
 8008730:	f7f9 fca1 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008734:	68f8      	ldr	r0, [r7, #12]
 8008736:	3730      	adds	r7, #48	; 0x30
 8008738:	46bd      	mov	sp, r7
 800873a:	bdb0      	pop	{r4, r5, r7, pc}

0800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fae4 	bl	8008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 800874a:	4602      	mov	r2, r0
 800874c:	f107 030c 	add.w	r3, r7, #12
 8008750:	4611      	mov	r1, r2
 8008752:	4618      	mov	r0, r3
 8008754:	f000 faeb 	bl	8008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>
 8008758:	4603      	mov	r3, r0
      }
 800875a:	4618      	mov	r0, r3
 800875c:	3710      	adds	r7, #16
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}

08008762 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008762:	b5b0      	push	{r4, r5, r7, lr}
 8008764:	b086      	sub	sp, #24
 8008766:	af00      	add	r7, sp, #0
 8008768:	60f8      	str	r0, [r7, #12]
 800876a:	60b9      	str	r1, [r7, #8]
 800876c:	607a      	str	r2, [r7, #4]
 800876e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d119      	bne.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f955 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800877c:	4602      	mov	r2, r0
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	4293      	cmp	r3, r2
 8008782:	d012      	beq.n	80087aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 8008784:	68fc      	ldr	r4, [r7, #12]
 8008786:	6838      	ldr	r0, [r7, #0]
 8008788:	f7ff ffd8 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800878c:	4603      	mov	r3, r0
 800878e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 8008790:	6878      	ldr	r0, [r7, #4]
 8008792:	f000 f9fa 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008796:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	461a      	mov	r2, r3
 800879c:	4629      	mov	r1, r5
 800879e:	4620      	mov	r0, r4
 80087a0:	f7f8 fb9b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 80087aa:	2301      	movs	r3, #1
 80087ac:	e000      	b.n	80087b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 80087ae:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 80087b0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 80087b6:	7df8      	ldrb	r0, [r7, #23]
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6839      	ldr	r1, [r7, #0]
 80087bc:	f017 ff32 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	1c5a      	adds	r2, r3, #1
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 80087ca:	f107 0310 	add.w	r3, r7, #16
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	4618      	mov	r0, r3
 80087d2:	f000 f805 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 80087d6:	693b      	ldr	r3, [r7, #16]
    }
 80087d8:	4618      	mov	r0, r3
 80087da:	3718      	adds	r7, #24
 80087dc:	46bd      	mov	sp, r7
 80087de:	bdb0      	pop	{r4, r5, r7, pc}

080087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80087e0:	b480      	push	{r7}
 80087e2:	b083      	sub	sp, #12
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	683a      	ldr	r2, [r7, #0]
 80087ee:	601a      	str	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4618      	mov	r0, r3
 80087f4:	370c      	adds	r7, #12
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr

080087fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 80087fe:	b590      	push	{r4, r7, lr}
 8008800:	b083      	sub	sp, #12
 8008802:	af00      	add	r7, sp, #0
 8008804:	6078      	str	r0, [r7, #4]
 8008806:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 faab 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800880e:	4604      	mov	r4, r0
 8008810:	6838      	ldr	r0, [r7, #0]
 8008812:	f7ff fe33 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008816:	4603      	mov	r3, r0
 8008818:	4619      	mov	r1, r3
 800881a:	4620      	mov	r0, r4
 800881c:	f000 faad 	bl	8008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>
      }
 8008820:	bf00      	nop
 8008822:	370c      	adds	r7, #12
 8008824:	46bd      	mov	sp, r7
 8008826:	bd90      	pop	{r4, r7, pc}

08008828 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 fa96 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008838:	4603      	mov	r3, r0
 800883a:	2201      	movs	r2, #1
 800883c:	6839      	ldr	r1, [r7, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f000 faa7 	bl	8008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>
 8008844:	bf00      	nop
 8008846:	3708      	adds	r7, #8
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}

0800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4618      	mov	r0, r3
 8008862:	370c      	adds	r7, #12
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr

0800886c <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b087      	sub	sp, #28
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f000 faa9 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 800887e:	4604      	mov	r4, r0
 8008880:	68f8      	ldr	r0, [r7, #12]
 8008882:	f000 fab6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 8008886:	4603      	mov	r3, r0
 8008888:	1ae2      	subs	r2, r4, r3
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	429a      	cmp	r2, r3
 800888e:	bf34      	ite	cc
 8008890:	2301      	movcc	r3, #1
 8008892:	2300      	movcs	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d002      	beq.n	80088a0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f017 ff20 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80088a0:	68f8      	ldr	r0, [r7, #12]
 80088a2:	f000 faa6 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088a6:	4604      	mov	r4, r0
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f000 faa2 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088ae:	4603      	mov	r3, r0
 80088b0:	613b      	str	r3, [r7, #16]
 80088b2:	f107 0208 	add.w	r2, r7, #8
 80088b6:	f107 0310 	add.w	r3, r7, #16
 80088ba:	4611      	mov	r1, r2
 80088bc:	4618      	mov	r0, r3
 80088be:	f7f9 ffc8 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 80088c2:	4603      	mov	r3, r0
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	4423      	add	r3, r4
 80088c8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80088ca:	68f8      	ldr	r0, [r7, #12]
 80088cc:	f000 fa91 	bl	8008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>
 80088d0:	4602      	mov	r2, r0
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	4293      	cmp	r3, r2
 80088d6:	d306      	bcc.n	80088e6 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80088d8:	68f8      	ldr	r0, [r7, #12]
 80088da:	f000 fa79 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088de:	4602      	mov	r2, r0
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	4293      	cmp	r3, r2
 80088e4:	d904      	bls.n	80088f0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x84>
 80088e6:	68f8      	ldr	r0, [r7, #12]
 80088e8:	f000 fa72 	bl	8008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>
 80088ec:	4603      	mov	r3, r0
 80088ee:	e000      	b.n	80088f2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE12_M_check_lenEjPKc+0x86>
 80088f0:	697b      	ldr	r3, [r7, #20]
      }
 80088f2:	4618      	mov	r0, r3
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}

080088fa <_ZNSt6vectorIP10DigitalOutSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b084      	sub	sp, #16
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	f107 030c 	add.w	r3, r7, #12
 8008908:	4611      	mov	r1, r2
 800890a:	4618      	mov	r0, r3
 800890c:	f7ff ff9e 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	4618      	mov	r0, r3
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <_ZN9__gnu_cxxmiIPP10DigitalOutSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800891a:	b590      	push	{r4, r7, lr}
 800891c:	b083      	sub	sp, #12
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
 8008922:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f835 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 800892a:	4603      	mov	r3, r0
 800892c:	681c      	ldr	r4, [r3, #0]
 800892e:	6838      	ldr	r0, [r7, #0]
 8008930:	f000 f830 	bl	8008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>
 8008934:	4603      	mov	r3, r0
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	1ae3      	subs	r3, r4, r3
 800893a:	109b      	asrs	r3, r3, #2
 800893c:	4618      	mov	r0, r3
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	bd90      	pop	{r4, r7, pc}

08008944 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800894e:	683b      	ldr	r3, [r7, #0]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d006      	beq.n	8008962 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x1e>
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	4618      	mov	r0, r3
 800895a:	f000 fa5a 	bl	8008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>
 800895e:	4603      	mov	r3, r0
 8008960:	e000      	b.n	8008964 <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE11_M_allocateEj+0x20>
 8008962:	2300      	movs	r3, #0
      }
 8008964:	4618      	mov	r0, r3
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800896c:	b590      	push	{r4, r7, lr}
 800896e:	b087      	sub	sp, #28
 8008970:	af02      	add	r7, sp, #8
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
 8008978:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800897a:	f88d 4000 	strb.w	r4, [sp]
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	68b9      	ldr	r1, [r7, #8]
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 fa64 	bl	8008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800898a:	4603      	mov	r3, r0
      }
 800898c:	4618      	mov	r0, r3
 800898e:	3714      	adds	r7, #20
 8008990:	46bd      	mov	sp, r7
 8008992:	bd90      	pop	{r4, r7, pc}

08008994 <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008994:	b480      	push	{r7}
 8008996:	b083      	sub	sp, #12
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4618      	mov	r0, r3
 80089a0:	370c      	adds	r7, #12
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr

080089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80089aa:	b480      	push	{r7}
 80089ac:	b083      	sub	sp, #12
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4618      	mov	r0, r3
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 80089cc:	68b9      	ldr	r1, [r7, #8]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	f000 fa5b 	bl	8008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>
    }
 80089d4:	bf00      	nop
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681a      	ldr	r2, [r3, #0]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	425b      	negs	r3, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	f107 020c 	add.w	r2, r7, #12
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7ff ff24 	bl	800884c <_ZN9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <_ZNK9__gnu_cxx17__normal_iteratorIPP10DigitalOutSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	370c      	adds	r7, #12
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a24:	4770      	bx	lr

08008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3304      	adds	r3, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008a3e:	b590      	push	{r4, r7, lr}
 8008a40:	b087      	sub	sp, #28
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	60f8      	str	r0, [r7, #12]
 8008a46:	60b9      	str	r1, [r7, #8]
 8008a48:	607a      	str	r2, [r7, #4]
 8008a4a:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d01d      	beq.n	8008a8e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8008a52:	68fc      	ldr	r4, [r7, #12]
 8008a54:	68b8      	ldr	r0, [r7, #8]
 8008a56:	f7ff fe71 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	6819      	ldr	r1, [r3, #0]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	461a      	mov	r2, r3
 8008a64:	4620      	mov	r0, r4
 8008a66:	f7f8 fa38 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	f083 0301 	eor.w	r3, r3, #1
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d006      	beq.n	8008a84 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	607b      	str	r3, [r7, #4]
 8008a7a:	68b8      	ldr	r0, [r7, #8]
 8008a7c:	f7ff fbd3 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008a80:	60b8      	str	r0, [r7, #8]
 8008a82:	e7e3      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7ff fbc2 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008a8a:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8008a8c:	e7de      	b.n	8008a4c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 8008a8e:	f107 0314 	add.w	r3, r7, #20
 8008a92:	6879      	ldr	r1, [r7, #4]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f7ff fea3 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008a9a:	697b      	ldr	r3, [r7, #20]
    }
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	371c      	adds	r7, #28
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd90      	pop	{r4, r7, pc}

08008aa4 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() noexcept
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f000 fa02 	bl	8008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3708      	adds	r7, #8
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f94d 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008aca:	4603      	mov	r3, r0
 8008acc:	2101      	movs	r1, #1
 8008ace:	4618      	mov	r0, r3
 8008ad0:	f000 f9fc 	bl	8008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}

08008ade <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8008ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
 8008aec:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4619      	mov	r1, r3
 8008af2:	2018      	movs	r0, #24
 8008af4:	f7f7 fc1c 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8008af8:	68f8      	ldr	r0, [r7, #12]
 8008afa:	f000 f933 	bl	8008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 8008afe:	4604      	mov	r4, r0
 8008b00:	68b8      	ldr	r0, [r7, #8]
 8008b02:	f7ff fcbb 	bl	800847c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>
 8008b06:	4605      	mov	r5, r0
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f7f8 fbac 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008b0e:	4606      	mov	r6, r0
 8008b10:	6838      	ldr	r0, [r7, #0]
 8008b12:	f7f8 fe96 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008b16:	4680      	mov	r8, r0
 8008b18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b1a:	f7f8 fbba 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	4643      	mov	r3, r8
 8008b24:	4632      	mov	r2, r6
 8008b26:	4629      	mov	r1, r5
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f000 fa1c 	bl	8008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 8008b2e:	bf00      	nop
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b38 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b084      	sub	sp, #16
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	f107 030c 	add.w	r3, r7, #12
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7ff fe48 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}

08008b5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008b5a:	b480      	push	{r7}
 8008b5c:	b083      	sub	sp, #12
 8008b5e:	af00      	add	r7, sp, #0
 8008b60:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8008b72:	b480      	push	{r7}
 8008b74:	b083      	sub	sp, #12
 8008b76:	af00      	add	r7, sp, #0
 8008b78:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	3310      	adds	r3, #16
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8008b8a:	b580      	push	{r7, lr}
 8008b8c:	b082      	sub	sp, #8
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f7ff fdd2 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8008ba2:	b5b0      	push	{r4, r5, r7, lr}
 8008ba4:	b08a      	sub	sp, #40	; 0x28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 8008bae:	68b8      	ldr	r0, [r7, #8]
 8008bb0:	f7ff fa16 	bl	8007fe0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 8008bb8:	68b8      	ldr	r0, [r7, #8]
 8008bba:	f7ff ff34 	bl	8008a26 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 8008bc8:	69bb      	ldr	r3, [r7, #24]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d023      	beq.n	8008c16 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 8008bce:	69bb      	ldr	r3, [r7, #24]
 8008bd0:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 8008bd2:	68bc      	ldr	r4, [r7, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681d      	ldr	r5, [r3, #0]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	4618      	mov	r0, r3
 8008bdc:	f7ff fdae 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8008be0:	4603      	mov	r3, r0
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	461a      	mov	r2, r3
 8008be6:	4629      	mov	r1, r5
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7f8 f976 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8008bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d005      	beq.n	8008c08 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7ff fb11 	bl	8008226 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8008c04:	4603      	mov	r3, r0
 8008c06:	e004      	b.n	8008c12 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 8008c08:	69bb      	ldr	r3, [r7, #24]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f7ff faff 	bl	800820e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8008c10:	4603      	mov	r3, r0
 8008c12:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 8008c14:	e7d8      	b.n	8008bc8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	f107 0310 	add.w	r3, r7, #16
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7ff fdde 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 8008c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d01d      	beq.n	8008c68 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 8008c2c:	68b8      	ldr	r0, [r7, #8]
 8008c2e:	f000 f9b6 	bl	8008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 8008c32:	4603      	mov	r3, r0
 8008c34:	61fb      	str	r3, [r7, #28]
 8008c36:	f107 021c 	add.w	r2, r7, #28
 8008c3a:	f107 0310 	add.w	r3, r7, #16
 8008c3e:	4611      	mov	r1, r2
 8008c40:	4618      	mov	r0, r3
 8008c42:	f7ff fa32 	bl	80080aa <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 8008c4c:	f107 0214 	add.w	r2, r7, #20
 8008c50:	f107 0318 	add.w	r3, r7, #24
 8008c54:	4619      	mov	r1, r3
 8008c56:	68f8      	ldr	r0, [r7, #12]
 8008c58:	f000 f9b2 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c5c:	e027      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 8008c5e:	f107 0310 	add.w	r3, r7, #16
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 f833 	bl	8008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8008c68:	68bc      	ldr	r4, [r7, #8]
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7ff ff8c 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8008c72:	4603      	mov	r3, r0
 8008c74:	6819      	ldr	r1, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f7f8 f92c 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8008c82:	4603      	mov	r3, r0
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d008      	beq.n	8008c9a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 8008c88:	f107 0214 	add.w	r2, r7, #20
 8008c8c:	f107 0318 	add.w	r3, r7, #24
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 f994 	bl	8008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>
 8008c98:	e009      	b.n	8008cae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	623b      	str	r3, [r7, #32]
 8008c9e:	f107 0220 	add.w	r2, r7, #32
 8008ca2:	f107 0310 	add.w	r3, r7, #16
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	68f8      	ldr	r0, [r7, #12]
 8008caa:	f7f9 f9e4 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	3728      	adds	r7, #40	; 0x28
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bdb0      	pop	{r4, r5, r7, pc}

08008cb6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 8008cb6:	b480      	push	{r7}
 8008cb8:	b083      	sub	sp, #12
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	330c      	adds	r3, #12
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	370c      	adds	r7, #12
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b082      	sub	sp, #8
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f017 fca0 	bl	8020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	601a      	str	r2, [r3, #0]
	return *this;
 8008ce6:	687b      	ldr	r3, [r7, #4]
      }
 8008ce8:	4618      	mov	r0, r3
 8008cea:	3708      	adds	r7, #8
 8008cec:	46bd      	mov	sp, r7
 8008cee:	bd80      	pop	{r7, pc}

08008cf0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b082      	sub	sp, #8
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	f017 fc8d 	bl	802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8008d02:	4602      	mov	r2, r0
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
	return *this;
 8008d08:	687b      	ldr	r3, [r7, #4]
      }
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3708      	adds	r7, #8
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}

08008d12 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEE9_M_valptrEv>:
      _M_valptr() const
 8008d12:	b580      	push	{r7, lr}
 8008d14:	b082      	sub	sp, #8
 8008d16:	af00      	add	r7, sp, #0
 8008d18:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	3310      	adds	r3, #16
 8008d1e:	4618      	mov	r0, r3
 8008d20:	f000 f967 	bl	8008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>
 8008d24:	4603      	mov	r3, r0
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <_ZNKSt10_Select1stISt4pairIKP3PinP10DigitalOutEEclERKS6_>:
      operator()(const _Pair& __x) const
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	370c      	adds	r7, #12
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr

08008d46 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b084      	sub	sp, #16
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4619      	mov	r1, r3
 8008d58:	68b8      	ldr	r0, [r7, #8]
 8008d5a:	f017 fbf5 	bl	8020548 <_ZdlPvj>
      }
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr

08008d7a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8008d7a:	b580      	push	{r7, lr}
 8008d7c:	b082      	sub	sp, #8
 8008d7e:	af00      	add	r7, sp, #0
 8008d80:	6078      	str	r0, [r7, #4]
 8008d82:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 8008d84:	6838      	ldr	r0, [r7, #0]
 8008d86:	f000 f940 	bl	800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>
	}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b088      	sub	sp, #32
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	61fb      	str	r3, [r7, #28]
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	61bb      	str	r3, [r7, #24]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8008daa:	f7f7 fab9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008dae:	4603      	mov	r3, r0
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d003      	beq.n	8008dbc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 8008db4:	69b8      	ldr	r0, [r7, #24]
 8008db6:	f017 fbc5 	bl	8020544 <_ZdlPv>
	    return;
 8008dba:	e005      	b.n	8008dc8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8008dbc:	697a      	ldr	r2, [r7, #20]
 8008dbe:	69b9      	ldr	r1, [r7, #24]
 8008dc0:	69f8      	ldr	r0, [r7, #28]
 8008dc2:	f000 f9e1 	bl	8009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 8008dc6:	bf00      	nop
 8008dc8:	bf00      	nop
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}

08008dd0 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b082      	sub	sp, #8
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 f945 	bl	800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4618      	mov	r0, r3
 8008de4:	f000 f927 	bl	8009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>
 8008de8:	4603      	mov	r3, r0
 8008dea:	4618      	mov	r0, r3
 8008dec:	3708      	adds	r7, #8
 8008dee:	46bd      	mov	sp, r7
 8008df0:	bd80      	pop	{r7, pc}

08008df2 <_ZNKSt6vectorIP10DigitalOutSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8008df2:	b480      	push	{r7}
 8008df4:	b083      	sub	sp, #12
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	109b      	asrs	r3, r3, #2
 8008e06:	4618      	mov	r0, r3
 8008e08:	370c      	adds	r7, #12
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b084      	sub	sp, #16
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008e24:	f7f7 fa7c 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d006      	beq.n	8008e3c <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	009b      	lsls	r3, r3, #2
 8008e32:	4618      	mov	r0, r3
 8008e34:	f017 fb8a 	bl	802054c <_Znwj>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e006      	b.n	8008e4a <_ZNSt16allocator_traitsISaIP10DigitalOutEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f000 f9b3 	bl	80091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>
 8008e46:	4603      	mov	r3, r0
 8008e48:	bf00      	nop
      { return __a.allocate(__n); }
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3710      	adds	r7, #16
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}

08008e52 <_ZNSt6vectorIP10DigitalOutSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8008e52:	b580      	push	{r7, lr}
 8008e54:	b084      	sub	sp, #16
 8008e56:	af00      	add	r7, sp, #0
 8008e58:	60f8      	str	r0, [r7, #12]
 8008e5a:	60b9      	str	r1, [r7, #8]
 8008e5c:	607a      	str	r2, [r7, #4]
 8008e5e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	68b9      	ldr	r1, [r7, #8]
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f000 f90a 	bl	8009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>
 8008e6c:	4603      	mov	r3, r0
      }
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}

08008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>:
    destroy_at(_Tp* __location)
 8008e76:	b480      	push	{r7}
 8008e78:	b083      	sub	sp, #12
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
    }
 8008e7e:	bf00      	nop
 8008e80:	370c      	adds	r7, #12
 8008e82:	46bd      	mov	sp, r7
 8008e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e88:	4770      	bx	lr

08008e8a <_ZSt8_DestroyIPP10DigitalOutEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8008e94:	f7f7 fa44 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d004      	beq.n	8008ea8 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8008e9e:	6839      	ldr	r1, [r7, #0]
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f000 f90a 	bl	80090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>
 8008ea6:	e003      	b.n	8008eb0 <_ZSt8_DestroyIPP10DigitalOutEvT_S3_+0x26>
	__destroy(__first, __last);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 f91d 	bl	80090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>
    }
 8008eb0:	3708      	adds	r7, #8
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	bd80      	pop	{r7, pc}

08008eb6 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() noexcept
 8008eb6:	b480      	push	{r7}
 8008eb8:	b083      	sub	sp, #12
 8008eba:	af00      	add	r7, sp, #0
 8008ebc:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	370c      	adds	r7, #12
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eca:	4770      	bx	lr

08008ecc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b084      	sub	sp, #16
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
 8008ed4:	6039      	str	r1, [r7, #0]
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	60fb      	str	r3, [r7, #12]
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8008ede:	f7f7 fa1f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d009      	beq.n	8008efc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	005b      	lsls	r3, r3, #1
 8008eee:	4413      	add	r3, r2
 8008ef0:	00db      	lsls	r3, r3, #3
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f017 fb2a 	bl	802054c <_Znwj>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	e006      	b.n	8008f0a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8008efc:	2200      	movs	r2, #0
 8008efe:	68b9      	ldr	r1, [r7, #8]
 8008f00:	68f8      	ldr	r0, [r7, #12]
 8008f02:	f000 f9b1 	bl	8009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>
 8008f06:	4603      	mov	r3, r0
 8008f08:	bf00      	nop
      { return __a.allocate(__n); }
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8008f12:	b5b0      	push	{r4, r5, r7, lr}
 8008f14:	b088      	sub	sp, #32
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	60b9      	str	r1, [r7, #8]
 8008f1c:	607a      	str	r2, [r7, #4]
 8008f1e:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8008f20:	68b8      	ldr	r0, [r7, #8]
 8008f22:	f7f8 f9a0 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f8 fc8b 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f107 0318 	add.w	r3, r7, #24
 8008f32:	4611      	mov	r1, r2
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f9 fd20 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 8008f3a:	f107 0418 	add.w	r4, r7, #24
 8008f3e:	6838      	ldr	r0, [r7, #0]
 8008f40:	f7f8 f9a7 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	4619      	mov	r1, r3
 8008f48:	2008      	movs	r0, #8
 8008f4a:	f7f7 f9f1 	bl	8000330 <_ZnwjPv>
 8008f4e:	4605      	mov	r5, r0
 8008f50:	7f3b      	ldrb	r3, [r7, #28]
 8008f52:	4622      	mov	r2, r4
 8008f54:	7d39      	ldrb	r1, [r7, #20]
 8008f56:	4628      	mov	r0, r5
 8008f58:	f000 f8ec 	bl	8009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bdb0      	pop	{r4, r5, r7, pc}

08008f66 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8008f66:	b5b0      	push	{r4, r5, r7, lr}
 8008f68:	b084      	sub	sp, #16
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	60f8      	str	r0, [r7, #12]
 8008f6e:	60b9      	str	r1, [r7, #8]
 8008f70:	607a      	str	r2, [r7, #4]
 8008f72:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f7f8 f976 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8008f7a:	4604      	mov	r4, r0
 8008f7c:	6838      	ldr	r0, [r7, #0]
 8008f7e:	f7f8 fc60 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8008f82:	4605      	mov	r5, r0
 8008f84:	6a38      	ldr	r0, [r7, #32]
 8008f86:	f7f8 f984 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	462a      	mov	r2, r5
 8008f8e:	4621      	mov	r1, r4
 8008f90:	68b8      	ldr	r0, [r7, #8]
 8008f92:	f7ff ffbe 	bl	8008f12 <_ZSt12construct_atISt4pairIKP3PinP10DigitalOutEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 8008f96:	bf00      	nop
 8008f98:	3710      	adds	r7, #16
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bdb0      	pop	{r4, r5, r7, pc}

08008f9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	68da      	ldr	r2, [r3, #12]
 8008faa:	f107 030c 	add.w	r3, r7, #12
 8008fae:	4611      	mov	r1, r2
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	f7ff fc15 	bl	80087e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPSt18_Rb_tree_node_base>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3710      	adds	r7, #16
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}

08008fc0 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP10DigitalOutEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	60f8      	str	r0, [r7, #12]
 8008fc8:	60b9      	str	r1, [r7, #8]
 8008fca:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8008fcc:	68b8      	ldr	r0, [r7, #8]
 8008fce:	f000 f8c5 	bl	800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	601a      	str	r2, [r3, #0]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7f9 fbe7 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	681a      	ldr	r2, [r3, #0]
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	605a      	str	r2, [r3, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8008ff2:	b580      	push	{r7, lr}
 8008ff4:	b082      	sub	sp, #8
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 f8b9 	bl	8009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>
 8009000:	4603      	mov	r3, r0
 8009002:	4618      	mov	r0, r3
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <_ZSt10destroy_atISt4pairIKP3PinP10DigitalOutEEvPT_>:
    destroy_at(_Tp* __location)
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
    }
 8009012:	bf00      	nop
 8009014:	370c      	adds	r7, #12
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr

0800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800901e:	b480      	push	{r7}
 8009020:	b083      	sub	sp, #12
 8009022:	af00      	add	r7, sp, #0
 8009024:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8009026:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <_ZNSt6vectorIP10DigitalOutSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009036:	b580      	push	{r7, lr}
 8009038:	b084      	sub	sp, #16
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800903e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009042:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f7ff ffea 	bl	800901e <_ZNSt16allocator_traitsISaIP10DigitalOutEE8max_sizeERKS2_>
 800904a:	4603      	mov	r3, r0
 800904c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800904e:	f107 0208 	add.w	r2, r7, #8
 8009052:	f107 030c 	add.w	r3, r7, #12
 8009056:	4611      	mov	r1, r2
 8009058:	4618      	mov	r0, r3
 800905a:	f7f9 fec4 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800905e:	4603      	mov	r3, r0
 8009060:	681b      	ldr	r3, [r3, #0]
      }
 8009062:	4618      	mov	r0, r3
 8009064:	3710      	adds	r7, #16
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}

0800906a <_ZNKSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800906a:	b480      	push	{r7}
 800906c:	b083      	sub	sp, #12
 800906e:	af00      	add	r7, sp, #0
 8009070:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	4618      	mov	r0, r3
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <_ZSt12__relocate_aIPP10DigitalOutS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009080:	b5b0      	push	{r4, r5, r7, lr}
 8009082:	b084      	sub	sp, #16
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	607a      	str	r2, [r7, #4]
 800908c:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 f8ab 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 8009094:	4604      	mov	r4, r0
 8009096:	68b8      	ldr	r0, [r7, #8]
 8009098:	f000 f8a7 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 800909c:	4605      	mov	r5, r0
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f8a3 	bl	80091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>
 80090a4:	4602      	mov	r2, r0
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	4629      	mov	r1, r5
 80090aa:	4620      	mov	r0, r4
 80090ac:	f000 f8a8 	bl	8009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80090b0:	4603      	mov	r3, r0
    }
 80090b2:	4618      	mov	r0, r3
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bdb0      	pop	{r4, r5, r7, pc}

080090ba <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80090ba:	b580      	push	{r7, lr}
 80090bc:	b082      	sub	sp, #8
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
 80090c2:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80090c4:	687a      	ldr	r2, [r7, #4]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d00a      	beq.n	80090e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 f8b5 	bl	800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>
 80090d2:	4603      	mov	r3, r0
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8bc 	bl	8009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>
	  for (; __first != __last; ++__first)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3304      	adds	r3, #4
 80090de:	607b      	str	r3, [r7, #4]
 80090e0:	e7f0      	b.n	80090c4 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP10DigitalOutEEvT_S5_+0xa>
	}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <_ZNSt12_Destroy_auxILb1EE9__destroyIPP10DigitalOutEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80090ea:	b480      	push	{r7}
 80090ec:	b083      	sub	sp, #12
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	6039      	str	r1, [r7, #0]
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	60f8      	str	r0, [r7, #12]
 8009108:	60b9      	str	r1, [r7, #8]
 800910a:	607a      	str	r2, [r7, #4]
 800910c:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800910e:	68b8      	ldr	r0, [r7, #8]
 8009110:	f7f9 ff15 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 8009114:	4603      	mov	r3, r0
 8009116:	4618      	mov	r0, r3
 8009118:	f7f9 ff06 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800911c:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	605a      	str	r2, [r3, #4]
      { }
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	4618      	mov	r0, r3
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 8009134:	b5b0      	push	{r4, r5, r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af02      	add	r7, sp, #8
 800913a:	60f8      	str	r0, [r7, #12]
 800913c:	7239      	strb	r1, [r7, #8]
 800913e:	607a      	str	r2, [r7, #4]
 8009140:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8009142:	463a      	mov	r2, r7
 8009144:	f88d 4000 	strb.w	r4, [sp]
 8009148:	462b      	mov	r3, r5
 800914a:	6879      	ldr	r1, [r7, #4]
 800914c:	68f8      	ldr	r0, [r7, #12]
 800914e:	f7ff ffd7 	bl	8009100 <_ZNSt4pairIKP3PinP10DigitalOutEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bdb0      	pop	{r4, r5, r7, pc}

0800915c <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800915c:	b480      	push	{r7}
 800915e:	b083      	sub	sp, #12
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP10DigitalOutEE7_M_addrEv>:
      _M_addr() const noexcept
 8009172:	b480      	push	{r7}
 8009174:	b083      	sub	sp, #12
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4618      	mov	r0, r3
 800917e:	370c      	adds	r7, #12
 8009180:	46bd      	mov	sp, r7
 8009182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009186:	4770      	bx	lr

08009188 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009194:	687a      	ldr	r2, [r7, #4]
 8009196:	4613      	mov	r3, r2
 8009198:	005b      	lsls	r3, r3, #1
 800919a:	4413      	add	r3, r2
 800919c:	00db      	lsls	r3, r3, #3
 800919e:	4619      	mov	r1, r3
 80091a0:	68b8      	ldr	r0, [r7, #8]
 80091a2:	f017 f9d1 	bl	8020548 <_ZdlPvj>
      }
 80091a6:	3710      	adds	r7, #16
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80091b8:	68f8      	ldr	r0, [r7, #12]
 80091ba:	f000 f877 	bl	80092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>
 80091be:	4602      	mov	r2, r0
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	4293      	cmp	r3, r2
 80091c4:	bf8c      	ite	hi
 80091c6:	2301      	movhi	r3, #1
 80091c8:	2300      	movls	r3, #0
 80091ca:	b2db      	uxtb	r3, r3
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <_ZN9__gnu_cxx13new_allocatorIP10DigitalOutE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80091d0:	f017 fa83 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80091d4:	68bb      	ldr	r3, [r7, #8]
 80091d6:	009b      	lsls	r3, r3, #2
 80091d8:	4618      	mov	r0, r3
 80091da:	f017 f9b7 	bl	802054c <_Znwj>
 80091de:	4603      	mov	r3, r0
 80091e0:	bf00      	nop
      }
 80091e2:	4618      	mov	r0, r3
 80091e4:	3710      	adds	r7, #16
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <_ZSt12__niter_baseIPP10DigitalOutET_S3_>:
    __niter_base(_Iterator __it)
 80091ea:	b480      	push	{r7}
 80091ec:	b083      	sub	sp, #12
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	4618      	mov	r0, r3
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60f8      	str	r0, [r7, #12]
 8009208:	60b9      	str	r1, [r7, #8]
 800920a:	607a      	str	r2, [r7, #4]
 800920c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800920e:	68ba      	ldr	r2, [r7, #8]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	1ad3      	subs	r3, r2, r3
 8009214:	109b      	asrs	r3, r3, #2
 8009216:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	2b00      	cmp	r3, #0
 800921c:	dd06      	ble.n	800922c <_ZSt14__relocate_a_1IP10DigitalOutS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	461a      	mov	r2, r3
 8009224:	68f9      	ldr	r1, [r7, #12]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f017 faca 	bl	80207c0 <memmove>
      return __result + __count;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	4413      	add	r3, r2
    }
 8009234:	4618      	mov	r0, r3
 8009236:	3718      	adds	r7, #24
 8009238:	46bd      	mov	sp, r7
 800923a:	bd80      	pop	{r7, pc}

0800923c <_ZSt11__addressofIP10DigitalOutEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	4618      	mov	r0, r3
 8009248:	370c      	adds	r7, #12
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <_ZSt8_DestroyIP10DigitalOutEvPT_>:
    _Destroy(_Tp* __pointer)
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7ff fe0b 	bl	8008e76 <_ZSt10destroy_atIP10DigitalOutEvPT_>
    }
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009268:	b580      	push	{r7, lr}
 800926a:	b084      	sub	sp, #16
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009274:	68f8      	ldr	r0, [r7, #12]
 8009276:	f000 f825 	bl	80092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>
 800927a:	4602      	mov	r2, r0
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	4293      	cmp	r3, r2
 8009280:	bf8c      	ite	hi
 8009282:	2301      	movhi	r3, #1
 8009284:	2300      	movls	r3, #0
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b00      	cmp	r3, #0
 800928a:	d001      	beq.n	8009290 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800928c:	f017 fa25 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009290:	68ba      	ldr	r2, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	005b      	lsls	r3, r3, #1
 8009296:	4413      	add	r3, r2
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	4618      	mov	r0, r3
 800929c:	f017 f956 	bl	802054c <_Znwj>
 80092a0:	4603      	mov	r3, r0
 80092a2:	bf00      	nop
      }
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <_ZNK9__gnu_cxx13new_allocatorIP10DigitalOutE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092b4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80092b8:	4618      	mov	r0, r3
 80092ba:	370c      	adds	r7, #12
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr

080092c4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80092c4:	b480      	push	{r7}
 80092c6:	b083      	sub	sp, #12
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80092cc:	4b03      	ldr	r3, [pc, #12]	; (80092dc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP10DigitalOutEEE11_M_max_sizeEv+0x18>)
      }
 80092ce:	4618      	mov	r0, r3
 80092d0:	370c      	adds	r7, #12
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr
 80092da:	bf00      	nop
 80092dc:	05555555 	.word	0x05555555

080092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fd96 	bl	8007e1c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	4618      	mov	r0, r3
 80092f4:	3708      	adds	r7, #8
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
	...

080092fc <_Z41__static_initialization_and_destruction_0ii>:
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d10a      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009312:	4293      	cmp	r3, r2
 8009314:	d105      	bne.n	8009322 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009316:	480c      	ldr	r0, [pc, #48]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 8009318:	f7fe fc98 	bl	8007c4c <_ZNSt6vectorIP10DigitalOutSaIS1_EEC1Ev>
map<Pin*, DigitalOut*> DigitalOut::pin_to_digital_out;
 800931c:	480b      	ldr	r0, [pc, #44]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800931e:	f7fe fcbb 	bl	8007c98 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800932e:	4293      	cmp	r3, r2
 8009330:	d105      	bne.n	800933e <_Z41__static_initialization_and_destruction_0ii+0x42>
 8009332:	4806      	ldr	r0, [pc, #24]	; (800934c <_Z41__static_initialization_and_destruction_0ii+0x50>)
 8009334:	f7ff ffd4 	bl	80092e0 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<DigitalOut*> DigitalOut::all_digital_outs;
 8009338:	4803      	ldr	r0, [pc, #12]	; (8009348 <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800933a:	f000 f809 	bl	8009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>
}
 800933e:	bf00      	nop
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}
 8009346:	bf00      	nop
 8009348:	24000134 	.word	0x24000134
 800934c:	24000140 	.word	0x24000140

08009350 <_ZNSt6vectorIP10DigitalOutSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8009350:	b5b0      	push	{r4, r5, r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681c      	ldr	r4, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4618      	mov	r0, r3
 8009364:	f7ff fb21 	bl	80089aa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EE19_M_get_Tp_allocatorEv>
 8009368:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800936a:	461a      	mov	r2, r3
 800936c:	4629      	mov	r1, r5
 800936e:	4620      	mov	r0, r4
 8009370:	f7ff fb26 	bl	80089c0 <_ZSt8_DestroyIPP10DigitalOutS1_EvT_S3_RSaIT0_E>
      }
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4618      	mov	r0, r3
 8009378:	f7fe fd17 	bl	8007daa <_ZNSt12_Vector_baseIP10DigitalOutSaIS1_EED1Ev>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4618      	mov	r0, r3
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bdb0      	pop	{r4, r5, r7, pc}

08009386 <_GLOBAL__sub_I__ZN10DigitalOut16all_digital_outsE>:
 8009386:	b580      	push	{r7, lr}
 8009388:	af00      	add	r7, sp, #0
 800938a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800938e:	2001      	movs	r0, #1
 8009390:	f7ff ffb4 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 8009394:	bd80      	pop	{r7, pc}

08009396 <_GLOBAL__sub_D__ZN10DigitalOut16all_digital_outsE>:
 8009396:	b580      	push	{r7, lr}
 8009398:	af00      	add	r7, sp, #0
 800939a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800939e:	2000      	movs	r0, #0
 80093a0:	f7ff ffac 	bl	80092fc <_Z41__static_initialization_and_destruction_0ii>
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80093a6:	b580      	push	{r7, lr}
 80093a8:	b082      	sub	sp, #8
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 fa50 	bl	8009854 <_ZNSaIP12InputCaptureED1Ev>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	4618      	mov	r0, r3
 80093b8:	3708      	adds	r7, #8
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}

080093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>:
      _Vector_base() = default;
 80093be:	b580      	push	{r7, lr}
 80093c0:	b082      	sub	sp, #8
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f000 fa33 	bl	8009834 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4618      	mov	r0, r3
 80093d2:	3708      	adds	r7, #8
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>:
      vector() = default;
 80093d8:	b580      	push	{r7, lr}
 80093da:	b082      	sub	sp, #8
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ffeb 	bl	80093be <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EEC1Ev>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>:
	struct _Rb_tree_impl
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 fa63 	bl	80098c6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>:
      _Rb_tree() = default;
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4618      	mov	r0, r3
 8009416:	f000 fa41 	bl	800989c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4618      	mov	r0, r3
 800941e:	3708      	adds	r7, #8
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>:
      map() = default;
 8009424:	b580      	push	{r7, lr}
 8009426:	b082      	sub	sp, #8
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	4618      	mov	r0, r3
 8009430:	f7ff ffeb 	bl	800940a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EEC1Ev>
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	4618      	mov	r0, r3
 8009438:	3708      	adds	r7, #8
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
	...

08009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>:
#include "Mini-STLIB/InputCapture.hpp"

vector<InputCapture*> InputCapture::all_input_captures;
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;

InputCapture::InputCapture(TIM_HandleTypeDef* timer, uint32_t channel, Pin* pin)
 8009440:	b590      	push	{r4, r7, lr}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	603b      	str	r3, [r7, #0]
: timer(timer), channel(channel), pin(pin) {
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009454:	601a      	str	r2, [r3, #0]
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800945c:	605a      	str	r2, [r3, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009464:	609a      	str	r2, [r3, #8]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800946c:	60da      	str	r2, [r3, #12]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	619a      	str	r2, [r3, #24]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	61da      	str	r2, [r3, #28]
 800947a:	683a      	ldr	r2, [r7, #0]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	621a      	str	r2, [r3, #32]
	all_input_captures.push_back(this);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	617b      	str	r3, [r7, #20]
 8009484:	f107 0314 	add.w	r3, r7, #20
 8009488:	4619      	mov	r1, r3
 800948a:	4809      	ldr	r0, [pc, #36]	; (80094b0 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x70>)
 800948c:	f000 fa3b 	bl	8009906 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>
	pin_to_input_capture[pin] = this;
 8009490:	68fc      	ldr	r4, [r7, #12]
 8009492:	463b      	mov	r3, r7
 8009494:	4619      	mov	r1, r3
 8009496:	4807      	ldr	r0, [pc, #28]	; (80094b4 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin+0x74>)
 8009498:	f000 fa46 	bl	8009928 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800949c:	4603      	mov	r3, r0
 800949e:	601c      	str	r4, [r3, #0]
	pin->mode = INPUT_CAPTURE;
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2202      	movs	r2, #2
 80094a4:	719a      	strb	r2, [r3, #6]
}
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	4618      	mov	r0, r3
 80094aa:	371c      	adds	r7, #28
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bd90      	pop	{r4, r7, pc}
 80094b0:	24000158 	.word	0x24000158
 80094b4:	24000164 	.word	0x24000164

080094b8 <_ZN12InputCapture19absolute_differenceEmm>:

uint32_t InputCapture::absolute_difference(uint32_t a, uint32_t b){
 80094b8:	b480      	push	{r7}
 80094ba:	b087      	sub	sp, #28
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60f8      	str	r0, [r7, #12]
 80094c0:	60b9      	str	r1, [r7, #8]
 80094c2:	607a      	str	r2, [r7, #4]
	int result = a - b;
 80094c4:	68ba      	ldr	r2, [r7, #8]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	617b      	str	r3, [r7, #20]
	if(result < 0)
 80094cc:	697b      	ldr	r3, [r7, #20]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	da09      	bge.n	80094e6 <_ZN12InputCapture19absolute_differenceEmm+0x2e>
		result = a + (timer->Instance->ARR - b) + 1;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	699b      	ldr	r3, [r3, #24]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	1ad2      	subs	r2, r2, r3
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	4413      	add	r3, r2
 80094e2:	3301      	adds	r3, #1
 80094e4:	617b      	str	r3, [r7, #20]
	return result;
 80094e6:	697b      	ldr	r3, [r7, #20]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	371c      	adds	r7, #28
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <_ZN12InputCapture17channel_is_activeEv>:

bool InputCapture::channel_is_active(){
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
	if(channel == TIM_CHANNEL_1)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	69db      	ldr	r3, [r3, #28]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d108      	bne.n	8009516 <_ZN12InputCapture17channel_is_activeEv+0x22>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_1;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	699b      	ldr	r3, [r3, #24]
 8009508:	7f1b      	ldrb	r3, [r3, #28]
 800950a:	2b01      	cmp	r3, #1
 800950c:	bf0c      	ite	eq
 800950e:	2301      	moveq	r3, #1
 8009510:	2300      	movne	r3, #0
 8009512:	b2db      	uxtb	r3, r3
 8009514:	e027      	b.n	8009566 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_2)
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	69db      	ldr	r3, [r3, #28]
 800951a:	2b04      	cmp	r3, #4
 800951c:	d108      	bne.n	8009530 <_ZN12InputCapture17channel_is_activeEv+0x3c>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_2;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	699b      	ldr	r3, [r3, #24]
 8009522:	7f1b      	ldrb	r3, [r3, #28]
 8009524:	2b02      	cmp	r3, #2
 8009526:	bf0c      	ite	eq
 8009528:	2301      	moveq	r3, #1
 800952a:	2300      	movne	r3, #0
 800952c:	b2db      	uxtb	r3, r3
 800952e:	e01a      	b.n	8009566 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_3)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	2b08      	cmp	r3, #8
 8009536:	d108      	bne.n	800954a <_ZN12InputCapture17channel_is_activeEv+0x56>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_3;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
 800953c:	7f1b      	ldrb	r3, [r3, #28]
 800953e:	2b04      	cmp	r3, #4
 8009540:	bf0c      	ite	eq
 8009542:	2301      	moveq	r3, #1
 8009544:	2300      	movne	r3, #0
 8009546:	b2db      	uxtb	r3, r3
 8009548:	e00d      	b.n	8009566 <_ZN12InputCapture17channel_is_activeEv+0x72>
	if(channel == TIM_CHANNEL_4)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	69db      	ldr	r3, [r3, #28]
 800954e:	2b0c      	cmp	r3, #12
 8009550:	d108      	bne.n	8009564 <_ZN12InputCapture17channel_is_activeEv+0x70>
		return timer->Channel == HAL_TIM_ACTIVE_CHANNEL_4;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	699b      	ldr	r3, [r3, #24]
 8009556:	7f1b      	ldrb	r3, [r3, #28]
 8009558:	2b08      	cmp	r3, #8
 800955a:	bf0c      	ite	eq
 800955c:	2301      	moveq	r3, #1
 800955e:	2300      	movne	r3, #0
 8009560:	b2db      	uxtb	r3, r3
 8009562:	e000      	b.n	8009566 <_ZN12InputCapture17channel_is_activeEv+0x72>
	return false;
 8009564:	2300      	movs	r3, #0
}
 8009566:	4618      	mov	r0, r3
 8009568:	370c      	adds	r7, #12
 800956a:	46bd      	mov	sp, r7
 800956c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009570:	4770      	bx	lr

08009572 <_ZN12InputCapture9interruptEv>:

void InputCapture::interrupt() {
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
	if(channel_is_active()){
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f7ff ffba 	bl	80094f4 <_ZN12InputCapture17channel_is_activeEv>
 8009580:	4603      	mov	r3, r0
 8009582:	2b00      	cmp	r3, #0
 8009584:	d073      	beq.n	800966e <_ZN12InputCapture9interruptEv+0xfc>
		GPIO_PinState state = HAL_GPIO_ReadPin(pin->port, pin->pin);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6a1b      	ldr	r3, [r3, #32]
 800958a:	681a      	ldr	r2, [r3, #0]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	889b      	ldrh	r3, [r3, #4]
 8009592:	4619      	mov	r1, r3
 8009594:	4610      	mov	r0, r2
 8009596:	f011 fc57 	bl	801ae48 <HAL_GPIO_ReadPin>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]

		// Capture first rising edge
		if(rising_edge == -1 && falling_edge == -1 && state ==  GPIO_PIN_SET){
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095a6:	d114      	bne.n	80095d2 <_ZN12InputCapture9interruptEv+0x60>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b0:	d10f      	bne.n	80095d2 <_ZN12InputCapture9interruptEv+0x60>
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d10c      	bne.n	80095d2 <_ZN12InputCapture9interruptEv+0x60>
			rising_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	699a      	ldr	r2, [r3, #24]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	69db      	ldr	r3, [r3, #28]
 80095c0:	4619      	mov	r1, r3
 80095c2:	4610      	mov	r0, r2
 80095c4:	f016 f88c 	bl	801f6e0 <HAL_TIM_ReadCapturedValue>
 80095c8:	4603      	mov	r3, r0
 80095ca:	461a      	mov	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	601a      	str	r2, [r3, #0]
			return;
 80095d0:	e04d      	b.n	800966e <_ZN12InputCapture9interruptEv+0xfc>
		}

		// Capture falling edge
		if(rising_edge != -1 && falling_edge == -1 && state ==  GPIO_PIN_RESET){
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095da:	d014      	beq.n	8009606 <_ZN12InputCapture9interruptEv+0x94>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095e4:	d10f      	bne.n	8009606 <_ZN12InputCapture9interruptEv+0x94>
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d10c      	bne.n	8009606 <_ZN12InputCapture9interruptEv+0x94>
			falling_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	699a      	ldr	r2, [r3, #24]
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	69db      	ldr	r3, [r3, #28]
 80095f4:	4619      	mov	r1, r3
 80095f6:	4610      	mov	r0, r2
 80095f8:	f016 f872 	bl	801f6e0 <HAL_TIM_ReadCapturedValue>
 80095fc:	4603      	mov	r3, r0
 80095fe:	461a      	mov	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	605a      	str	r2, [r3, #4]
			return;
 8009604:	e033      	b.n	800966e <_ZN12InputCapture9interruptEv+0xfc>
		}

		// Capture second rising edge
		if(rising_edge != -1 && falling_edge != -1 && state ==  GPIO_PIN_SET){
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800960e:	d02e      	beq.n	800966e <_ZN12InputCapture9interruptEv+0xfc>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009618:	d029      	beq.n	800966e <_ZN12InputCapture9interruptEv+0xfc>
 800961a:	7bfb      	ldrb	r3, [r7, #15]
 800961c:	2b01      	cmp	r3, #1
 800961e:	d126      	bne.n	800966e <_ZN12InputCapture9interruptEv+0xfc>
			duty_count 	 = absolute_difference(falling_edge, rising_edge);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	4619      	mov	r1, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff ff43 	bl	80094b8 <_ZN12InputCapture19absolute_differenceEmm>
 8009632:	4602      	mov	r2, r0
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	611a      	str	r2, [r3, #16]
			uint32_t new_rising_edge = HAL_TIM_ReadCapturedValue(timer, channel);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	699a      	ldr	r2, [r3, #24]
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	69db      	ldr	r3, [r3, #28]
 8009640:	4619      	mov	r1, r3
 8009642:	4610      	mov	r0, r2
 8009644:	f016 f84c 	bl	801f6e0 <HAL_TIM_ReadCapturedValue>
 8009648:	60b8      	str	r0, [r7, #8]
			freq_count 	 = absolute_difference(new_rising_edge, rising_edge);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	68b9      	ldr	r1, [r7, #8]
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f7ff ff30 	bl	80094b8 <_ZN12InputCapture19absolute_differenceEmm>
 8009658:	4602      	mov	r2, r0
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	615a      	str	r2, [r3, #20]
			rising_edge	 = -1;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009664:	601a      	str	r2, [r3, #0]
			falling_edge = -1;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800966c:	605a      	str	r2, [r3, #4]
		}
	}

}
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009674:	b480      	push	{r7}
 8009676:	b083      	sub	sp, #12
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4618      	mov	r0, r3
 8009680:	370c      	adds	r7, #12
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800968a:	b590      	push	{r4, r7, lr}
 800968c:	b083      	sub	sp, #12
 800968e:	af00      	add	r7, sp, #0
 8009690:	6078      	str	r0, [r7, #4]
 8009692:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f7ff ffed 	bl	8009674 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800969a:	4603      	mov	r3, r0
 800969c:	681c      	ldr	r4, [r3, #0]
 800969e:	6838      	ldr	r0, [r7, #0]
 80096a0:	f7ff ffe8 	bl	8009674 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 80096a4:	4603      	mov	r3, r0
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	429c      	cmp	r4, r3
 80096aa:	bf0c      	ite	eq
 80096ac:	2301      	moveq	r3, #1
 80096ae:	2300      	movne	r3, #0
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	4618      	mov	r0, r3
 80096b4:	370c      	adds	r7, #12
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd90      	pop	{r4, r7, pc}

080096ba <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
	++_M_current;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	1d1a      	adds	r2, r3, #4
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	601a      	str	r2, [r3, #0]
	return *this;
 80096cc:	687b      	ldr	r3, [r7, #4]
      }
 80096ce:	4618      	mov	r0, r3
 80096d0:	370c      	adds	r7, #12
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80096da:	b480      	push	{r7}
 80096dc:	b083      	sub	sp, #12
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <_ZN12InputCapture24start_all_input_capturesEv>:

void InputCapture::start_all_input_captures(){
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
	for(auto input_capture : InputCapture::all_input_captures)
 80096fa:	4b15      	ldr	r3, [pc, #84]	; (8009750 <_ZN12InputCapture24start_all_input_capturesEv+0x5c>)
 80096fc:	60fb      	str	r3, [r7, #12]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f000 f970 	bl	80099e4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009704:	4603      	mov	r3, r0
 8009706:	607b      	str	r3, [r7, #4]
 8009708:	68f8      	ldr	r0, [r7, #12]
 800970a:	f000 f97b 	bl	8009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 800970e:	4603      	mov	r3, r0
 8009710:	603b      	str	r3, [r7, #0]
 8009712:	463a      	mov	r2, r7
 8009714:	1d3b      	adds	r3, r7, #4
 8009716:	4611      	mov	r1, r2
 8009718:	4618      	mov	r0, r3
 800971a:	f7ff ffb6 	bl	800968a <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800971e:	4603      	mov	r3, r0
 8009720:	f083 0301 	eor.w	r3, r3, #1
 8009724:	b2db      	uxtb	r3, r3
 8009726:	2b00      	cmp	r3, #0
 8009728:	d00e      	beq.n	8009748 <_ZN12InputCapture24start_all_input_capturesEv+0x54>
 800972a:	1d3b      	adds	r3, r7, #4
 800972c:	4618      	mov	r0, r3
 800972e:	f7ff ffd4 	bl	80096da <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 8009732:	4603      	mov	r3, r0
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	60bb      	str	r3, [r7, #8]
		input_capture->start();
 8009738:	68b8      	ldr	r0, [r7, #8]
 800973a:	f000 f845 	bl	80097c8 <_ZN12InputCapture5startEv>
	for(auto input_capture : InputCapture::all_input_captures)
 800973e:	1d3b      	adds	r3, r7, #4
 8009740:	4618      	mov	r0, r3
 8009742:	f7ff ffba 	bl	80096ba <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 8009746:	e7e4      	b.n	8009712 <_ZN12InputCapture24start_all_input_capturesEv+0x1e>
}
 8009748:	bf00      	nop
 800974a:	3710      	adds	r7, #16
 800974c:	46bd      	mov	sp, r7
 800974e:	bd80      	pop	{r7, pc}
 8009750:	24000158 	.word	0x24000158

08009754 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>:

void InputCapture::interrupt_of_all_input_captures(TIM_HandleTypeDef* timer){
 8009754:	b580      	push	{r7, lr}
 8009756:	b086      	sub	sp, #24
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
	for(auto input_capture : InputCapture::all_input_captures){
 800975c:	4b19      	ldr	r3, [pc, #100]	; (80097c4 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x70>)
 800975e:	617b      	str	r3, [r7, #20]
 8009760:	6978      	ldr	r0, [r7, #20]
 8009762:	f000 f93f 	bl	80099e4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009766:	4603      	mov	r3, r0
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	6978      	ldr	r0, [r7, #20]
 800976c:	f000 f94a 	bl	8009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009770:	4603      	mov	r3, r0
 8009772:	60bb      	str	r3, [r7, #8]
 8009774:	f107 0208 	add.w	r2, r7, #8
 8009778:	f107 030c 	add.w	r3, r7, #12
 800977c:	4611      	mov	r1, r2
 800977e:	4618      	mov	r0, r3
 8009780:	f7ff ff83 	bl	800968a <_ZN9__gnu_cxxeqIPP12InputCaptureS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 8009784:	4603      	mov	r3, r0
 8009786:	f083 0301 	eor.w	r3, r3, #1
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d015      	beq.n	80097bc <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x68>
 8009790:	f107 030c 	add.w	r3, r7, #12
 8009794:	4618      	mov	r0, r3
 8009796:	f7ff ffa0 	bl	80096da <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 800979a:	4603      	mov	r3, r0
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	613b      	str	r3, [r7, #16]
		if(input_capture->timer == timer)
 80097a0:	693b      	ldr	r3, [r7, #16]
 80097a2:	699b      	ldr	r3, [r3, #24]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d102      	bne.n	80097b0 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x5c>
			input_capture->interrupt();
 80097aa:	6938      	ldr	r0, [r7, #16]
 80097ac:	f7ff fee1 	bl	8009572 <_ZN12InputCapture9interruptEv>
	for(auto input_capture : InputCapture::all_input_captures){
 80097b0:	f107 030c 	add.w	r3, r7, #12
 80097b4:	4618      	mov	r0, r3
 80097b6:	f7ff ff80 	bl	80096ba <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEppEv>
 80097ba:	e7db      	b.n	8009774 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef+0x20>
	}
}
 80097bc:	bf00      	nop
 80097be:	3718      	adds	r7, #24
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	24000158 	.word	0x24000158

080097c8 <_ZN12InputCapture5startEv>:
	duty_count = 0;
	freq_count = 0;
	duty = 0;
}

void InputCapture::start(){
 80097c8:	b580      	push	{r7, lr}
 80097ca:	b082      	sub	sp, #8
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	HAL_TIM_IC_Start_IT(timer, channel);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	699a      	ldr	r2, [r3, #24]
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	69db      	ldr	r3, [r3, #28]
 80097d8:	4619      	mov	r1, r3
 80097da:	4610      	mov	r0, r2
 80097dc:	f015 fa5a 	bl	801ec94 <HAL_TIM_IC_Start_IT>
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}

080097e8 <_ZN12InputCapture8get_dutyEv>:

void InputCapture::stop(){
	HAL_TIM_IC_Stop_IT(timer, channel);
}

float InputCapture::get_duty(){
 80097e8:	b480      	push	{r7}
 80097ea:	b083      	sub	sp, #12
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
	duty = (float) (duty_count) / freq_count * 100;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	ee07 3a90 	vmov	s15, r3
 80097f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	695b      	ldr	r3, [r3, #20]
 8009800:	ee07 3a90 	vmov	s15, r3
 8009804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009808:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800980c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8009830 <_ZN12InputCapture8get_dutyEv+0x48>
 8009810:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	return duty;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800981e:	ee07 3a90 	vmov	s15, r3
}
 8009822:	eeb0 0a67 	vmov.f32	s0, s15
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr
 8009830:	42c80000 	.word	0x42c80000

08009834 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 f8f2 	bl	8009a26 <_ZNSaIP12InputCaptureEC1Ev>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	4618      	mov	r0, r3
 8009846:	f000 f8fa 	bl	8009a3e <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <_ZNSaIP12InputCaptureED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4618      	mov	r0, r3
 8009860:	370c      	adds	r7, #12
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800986a:	b580      	push	{r7, lr}
 800986c:	b082      	sub	sp, #8
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	689a      	ldr	r2, [r3, #8]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8009882:	461a      	mov	r2, r3
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 f8ee 	bl	8009a66 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      }
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4618      	mov	r0, r3
 800988e:	f7ff fd8a 	bl	80093a6 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE12_Vector_implD1Ev>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800989c:	b580      	push	{r7, lr}
 800989e:	b082      	sub	sp, #8
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 f8f1 	bl	8009a8c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f7f7 f99b 	bl	8000be8 <_ZNSt20_Rb_tree_key_compareISt4lessIP3PinEEC1Ev>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f6 fd46 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEED1Ev>:
 80098c6:	b480      	push	{r7}
 80098c8:	b083      	sub	sp, #12
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	4618      	mov	r0, r3
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 80098dc:	b580      	push	{r7, lr}
 80098de:	b082      	sub	sp, #8
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f8fc 	bl	8009ae2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 80098ea:	4603      	mov	r3, r0
 80098ec:	4619      	mov	r1, r3
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 f8d8 	bl	8009aa4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fd7b 	bl	80093f2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE13_Rb_tree_implISA_Lb1EED1Ev>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	4618      	mov	r0, r3
 8009900:	3708      	adds	r7, #8
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}

08009906 <_ZNSt6vectorIP12InputCaptureSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 8009906:	b580      	push	{r7, lr}
 8009908:	b082      	sub	sp, #8
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8009910:	6838      	ldr	r0, [r7, #0]
 8009912:	f000 f8f2 	bl	8009afa <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>
 8009916:	4603      	mov	r3, r0
 8009918:	4619      	mov	r1, r3
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f8f8 	bl	8009b10 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8009920:	bf00      	nop
 8009922:	3708      	adds	r7, #8
 8009924:	46bd      	mov	sp, r7
 8009926:	bd80      	pop	{r7, pc}

08009928 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>:
      operator[](const key_type& __k)
 8009928:	b590      	push	{r4, r7, lr}
 800992a:	b08b      	sub	sp, #44	; 0x2c
 800992c:	af02      	add	r7, sp, #8
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8009932:	6839      	ldr	r1, [r7, #0]
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f000 f91d 	bl	8009b74 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>
 800993a:	4603      	mov	r3, r0
 800993c:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800993e:	6878      	ldr	r0, [r7, #4]
 8009940:	f000 f927 	bl	8009b92 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>
 8009944:	4603      	mov	r3, r0
 8009946:	60fb      	str	r3, [r7, #12]
 8009948:	f107 020c 	add.w	r2, r7, #12
 800994c:	f107 0308 	add.w	r3, r7, #8
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f000 f92a 	bl	8009bac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 8009958:	4603      	mov	r3, r0
 800995a:	2b00      	cmp	r3, #0
 800995c:	d114      	bne.n	8009988 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x60>
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f938 	bl	8009bd4 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	681c      	ldr	r4, [r3, #0]
 8009968:	f107 0308 	add.w	r3, r7, #8
 800996c:	4618      	mov	r0, r3
 800996e:	f000 f93e 	bl	8009bee <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 8009972:	4603      	mov	r3, r0
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	f107 0310 	add.w	r3, r7, #16
 800997a:	4621      	mov	r1, r4
 800997c:	4618      	mov	r0, r3
 800997e:	f7f7 faac 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x64>
 8009988:	2301      	movs	r3, #1
 800998a:	e000      	b.n	800998e <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0x66>
 800998c:	2300      	movs	r3, #0
 800998e:	2b00      	cmp	r3, #0
 8009990:	d01b      	beq.n	80099ca <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xa2>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8009992:	687c      	ldr	r4, [r7, #4]
 8009994:	f107 0208 	add.w	r2, r7, #8
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f000 f933 	bl	8009c0a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>
					    std::tuple<const key_type&>(__k),
 80099a4:	f107 0318 	add.w	r3, r7, #24
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	4618      	mov	r0, r3
 80099ac:	f7f7 faa8 	bl	8000f00 <_ZNSt5tupleIJRKP3PinEEC1ILb1ELb1EEES3_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 80099b0:	f107 0218 	add.w	r2, r7, #24
 80099b4:	f107 031c 	add.w	r3, r7, #28
 80099b8:	9300      	str	r3, [sp, #0]
 80099ba:	4613      	mov	r3, r2
 80099bc:	4a08      	ldr	r2, [pc, #32]	; (80099e0 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_+0xb8>)
 80099be:	6979      	ldr	r1, [r7, #20]
 80099c0:	4620      	mov	r0, r4
 80099c2:	f000 f932 	bl	8009c2a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>
 80099c6:	4603      	mov	r3, r0
 80099c8:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 80099ca:	f107 0308 	add.w	r3, r7, #8
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f90d 	bl	8009bee <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>
 80099d4:	4603      	mov	r3, r0
 80099d6:	3304      	adds	r3, #4
      }
 80099d8:	4618      	mov	r0, r3
 80099da:	3724      	adds	r7, #36	; 0x24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd90      	pop	{r4, r7, pc}
 80099e0:	08020cbc 	.word	0x08020cbc

080099e4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80099ec:	687a      	ldr	r2, [r7, #4]
 80099ee:	f107 030c 	add.w	r3, r7, #12
 80099f2:	4611      	mov	r1, r2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f956 	bl	8009ca6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4618      	mov	r0, r3
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	1d1a      	adds	r2, r3, #4
 8009a10:	f107 030c 	add.w	r3, r7, #12
 8009a14:	4611      	mov	r1, r2
 8009a16:	4618      	mov	r0, r3
 8009a18:	f000 f945 	bl	8009ca6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}

08009a26 <_ZNSaIP12InputCaptureEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8009a26:	b580      	push	{r7, lr}
 8009a28:	b082      	sub	sp, #8
 8009a2a:	af00      	add	r7, sp, #0
 8009a2c:	6078      	str	r0, [r7, #4]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	f000 f949 	bl	8009cc6 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	3708      	adds	r7, #8
 8009a3a:	46bd      	mov	sp, r7
 8009a3c:	bd80      	pop	{r7, pc}

08009a3e <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8009a3e:	b480      	push	{r7}
 8009a40:	b083      	sub	sp, #12
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	601a      	str	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	605a      	str	r2, [r3, #4]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	609a      	str	r2, [r3, #8]
	{ }
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	370c      	adds	r7, #12
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr

08009a66 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b084      	sub	sp, #16
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	60f8      	str	r0, [r7, #12]
 8009a6e:	60b9      	str	r1, [r7, #8]
 8009a70:	607a      	str	r2, [r7, #4]
	if (__p)
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d005      	beq.n	8009a84 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 f92c 	bl	8009cdc <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>
      }
 8009a84:	bf00      	nop
 8009a86:	3710      	adds	r7, #16
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}

08009a8c <_ZNSaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 f940 	bl	8009d1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3708      	adds	r7, #8
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d012      	beq.n	8009ada <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0x36>
	  _M_erase(_S_right(__x));
 8009ab4:	6838      	ldr	r0, [r7, #0]
 8009ab6:	f000 f93b 	bl	8009d30 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 8009aba:	4603      	mov	r3, r0
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f7ff fff0 	bl	8009aa4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E>
	  _Link_type __y = _S_left(__x);
 8009ac4:	6838      	ldr	r0, [r7, #0]
 8009ac6:	f000 f93f 	bl	8009d48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 8009aca:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f946 	bl	8009d60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	  __x = __y;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8009ad8:	e7e9      	b.n	8009aae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_eraseEPSt13_Rb_tree_nodeIS6_E+0xa>
    }
 8009ada:	bf00      	nop
 8009adc:	3710      	adds	r7, #16
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 8009ae2:	b480      	push	{r7}
 8009ae4:	b083      	sub	sp, #12
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	689b      	ldr	r3, [r3, #8]
 8009aee:	4618      	mov	r0, r3
 8009af0:	370c      	adds	r7, #12
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <_ZSt4moveIRP12InputCaptureEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8009afa:	b480      	push	{r7}
 8009afc:	b083      	sub	sp, #12
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	4618      	mov	r0, r3
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0e:	4770      	bx	lr

08009b10 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8009b10:	b5b0      	push	{r4, r5, r7, lr}
 8009b12:	b082      	sub	sp, #8
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
 8009b18:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	689b      	ldr	r3, [r3, #8]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d011      	beq.n	8009b4a <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8009b26:	687c      	ldr	r4, [r7, #4]
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685d      	ldr	r5, [r3, #4]
 8009b2c:	6838      	ldr	r0, [r7, #0]
 8009b2e:	f000 f928 	bl	8009d82 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009b32:	4603      	mov	r3, r0
 8009b34:	461a      	mov	r2, r3
 8009b36:	4629      	mov	r1, r5
 8009b38:	4620      	mov	r0, r4
 8009b3a:	f000 f942 	bl	8009dc2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	1d1a      	adds	r2, r3, #4
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	605a      	str	r2, [r3, #4]
 8009b48:	e00c      	b.n	8009b64 <_ZNSt6vectorIP12InputCaptureSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff ff5a 	bl	8009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009b50:	4604      	mov	r4, r0
 8009b52:	6838      	ldr	r0, [r7, #0]
 8009b54:	f000 f915 	bl	8009d82 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009b58:	4603      	mov	r3, r0
 8009b5a:	461a      	mov	r2, r3
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f000 f942 	bl	8009de8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f9bb 	bl	8009ee0 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>
 8009b6a:	4603      	mov	r3, r0
      }
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	3708      	adds	r7, #8
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bdb0      	pop	{r4, r5, r7, pc}

08009b74 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE11lower_boundERS7_>:
      lower_bound(const key_type& __x)
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b082      	sub	sp, #8
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 f9c7 	bl	8009f16 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>
 8009b88:	4603      	mov	r3, r0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3708      	adds	r7, #8
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}

08009b92 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009b92:	b580      	push	{r7, lr}
 8009b94:	b082      	sub	sp, #8
 8009b96:	af00      	add	r7, sp, #0
 8009b98:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	f000 f9d1 	bl	8009f44 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	3708      	adds	r7, #8
 8009ba8:	46bd      	mov	sp, r7
 8009baa:	bd80      	pop	{r7, pc}

08009bac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	429a      	cmp	r2, r3
 8009bc0:	bf0c      	ite	eq
 8009bc2:	2301      	moveq	r3, #1
 8009bc4:	2300      	movne	r3, #0
 8009bc6:	b2db      	uxtb	r3, r3
 8009bc8:	4618      	mov	r0, r3
 8009bca:	370c      	adds	r7, #12
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <_ZNKSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEE8key_compEv>:
      key_comp() const
 8009bd4:	b590      	push	{r4, r7, lr}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4618      	mov	r0, r3
 8009be0:	f000 f9c1 	bl	8009f66 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>
 8009be4:	bf00      	nop
 8009be6:	4620      	mov	r0, r4
 8009be8:	370c      	adds	r7, #12
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd90      	pop	{r4, r7, pc}

08009bee <_ZNKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b082      	sub	sp, #8
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 f9be 	bl	8009f7c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 8009c00:	4603      	mov	r3, r0
 8009c02:	4618      	mov	r0, r3
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEEC1ERKSt17_Rb_tree_iteratorIS6_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8009c0a:	b480      	push	{r7}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009c2a:	b5b0      	push	{r4, r5, r7, lr}
 8009c2c:	b088      	sub	sp, #32
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	607a      	str	r2, [r7, #4]
 8009c36:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7f7 fb14 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009c3e:	4604      	mov	r4, r0
 8009c40:	6838      	ldr	r0, [r7, #0]
 8009c42:	f7f7 fdfe 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009c46:	4605      	mov	r5, r0
 8009c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c4a:	f7f7 fb22 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	462a      	mov	r2, r5
 8009c52:	4621      	mov	r1, r4
 8009c54:	68f8      	ldr	r0, [r7, #12]
 8009c56:	f000 f99f 	bl	8009f98 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>
 8009c5a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8009c5c:	69f8      	ldr	r0, [r7, #28]
 8009c5e:	f000 faed 	bl	800a23c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8009c62:	4603      	mov	r3, r0
 8009c64:	f107 0010 	add.w	r0, r7, #16
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	68f9      	ldr	r1, [r7, #12]
 8009c6c:	f000 f9b7 	bl	8009fde <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>
	    if (__res.second)
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d007      	beq.n	8009c86 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8009c76:	6939      	ldr	r1, [r7, #16]
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 faf0 	bl	800a262 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>
 8009c82:	4603      	mov	r3, r0
 8009c84:	e00b      	b.n	8009c9e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEESt17_Rb_tree_iteratorIS6_ESt23_Rb_tree_const_iteratorIS6_EDpOT_+0x74>
	    _M_drop_node(__z);
 8009c86:	69f9      	ldr	r1, [r7, #28]
 8009c88:	68f8      	ldr	r0, [r7, #12]
 8009c8a:	f000 f869 	bl	8009d60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>
	    return iterator(__res.first);
 8009c8e:	693a      	ldr	r2, [r7, #16]
 8009c90:	f107 0318 	add.w	r3, r7, #24
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f000 fb22 	bl	800a2e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009c9c:	69bb      	ldr	r3, [r7, #24]
      }
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3720      	adds	r7, #32
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bdb0      	pop	{r4, r5, r7, pc}

08009ca6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009ca6:	b480      	push	{r7}
 8009ca8:	b083      	sub	sp, #12
 8009caa:	af00      	add	r7, sp, #0
 8009cac:	6078      	str	r0, [r7, #4]
 8009cae:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	601a      	str	r2, [r3, #0]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8009cc6:	b480      	push	{r7}
 8009cc8:	b083      	sub	sp, #12
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b088      	sub	sp, #32
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	60f8      	str	r0, [r7, #12]
 8009ce4:	60b9      	str	r1, [r7, #8]
 8009ce6:	607a      	str	r2, [r7, #4]
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	61fb      	str	r3, [r7, #28]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	61bb      	str	r3, [r7, #24]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 8009cf4:	f7f6 fb14 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d003      	beq.n	8009d06 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 8009cfe:	69b8      	ldr	r0, [r7, #24]
 8009d00:	f016 fc20 	bl	8020544 <_ZdlPv>
	    return;
 8009d04:	e005      	b.n	8009d12 <_ZNSt16allocator_traitsISaIP12InputCaptureEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 8009d06:	697a      	ldr	r2, [r7, #20]
 8009d08:	69b9      	ldr	r1, [r7, #24]
 8009d0a:	69f8      	ldr	r0, [r7, #28]
 8009d0c:	f000 fd64 	bl	800a7d8 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 8009d10:	bf00      	nop
 8009d12:	bf00      	nop
 8009d14:	3720      	adds	r7, #32
 8009d16:	46bd      	mov	sp, r7
 8009d18:	bd80      	pop	{r7, pc}

08009d1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEC1Ev>:
 8009d1a:	b480      	push	{r7}
 8009d1c:	b083      	sub	sp, #12
 8009d1e:	af00      	add	r7, sp, #0
 8009d20:	6078      	str	r0, [r7, #4]
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4618      	mov	r0, r3
 8009d26:	370c      	adds	r7, #12
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	68db      	ldr	r3, [r3, #12]
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	370c      	adds	r7, #12
 8009d40:	46bd      	mov	sp, r7
 8009d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d46:	4770      	bx	lr

08009d48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	689b      	ldr	r3, [r3, #8]
 8009d54:	4618      	mov	r0, r3
 8009d56:	370c      	adds	r7, #12
 8009d58:	46bd      	mov	sp, r7
 8009d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5e:	4770      	bx	lr

08009d60 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b082      	sub	sp, #8
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
 8009d68:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f000 fac6 	bl	800a2fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>
	_M_put_node(__p);
 8009d72:	6839      	ldr	r1, [r7, #0]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fad7 	bl	800a328 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>
      }
 8009d7a:	bf00      	nop
 8009d7c:	3708      	adds	r7, #8
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8009d82:	b480      	push	{r7}
 8009d84:	b083      	sub	sp, #12
 8009d86:	af00      	add	r7, sp, #0
 8009d88:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	370c      	adds	r7, #12
 8009d90:	46bd      	mov	sp, r7
 8009d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d96:	4770      	bx	lr

08009d98 <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8009d98:	b590      	push	{r4, r7, lr}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8009da2:	6838      	ldr	r0, [r7, #0]
 8009da4:	f7ff ffed 	bl	8009d82 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009da8:	4603      	mov	r3, r0
 8009daa:	681c      	ldr	r4, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	4619      	mov	r1, r3
 8009db0:	2004      	movs	r0, #4
 8009db2:	f7f6 fabd 	bl	8000330 <_ZnwjPv>
 8009db6:	4603      	mov	r3, r0
 8009db8:	601c      	str	r4, [r3, #0]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	370c      	adds	r7, #12
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	bd90      	pop	{r4, r7, pc}

08009dc2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009dc2:	b580      	push	{r7, lr}
 8009dc4:	b084      	sub	sp, #16
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	60f8      	str	r0, [r7, #12]
 8009dca:	60b9      	str	r1, [r7, #8]
 8009dcc:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f7ff ffd7 	bl	8009d82 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	68b8      	ldr	r0, [r7, #8]
 8009dda:	f7ff ffdd 	bl	8009d98 <_ZSt12construct_atIP12InputCaptureJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 8009dde:	bf00      	nop
 8009de0:	3710      	adds	r7, #16
 8009de2:	46bd      	mov	sp, r7
 8009de4:	bd80      	pop	{r7, pc}
	...

08009de8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009de8:	b5b0      	push	{r4, r5, r7, lr}
 8009dea:	b08c      	sub	sp, #48	; 0x30
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8009df4:	4a39      	ldr	r2, [pc, #228]	; (8009edc <_ZNSt6vectorIP12InputCaptureSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8009df6:	2101      	movs	r1, #1
 8009df8:	68f8      	ldr	r0, [r7, #12]
 8009dfa:	f000 faa7 	bl	800a34c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>
 8009dfe:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f7ff fde9 	bl	80099e4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE5beginEv>
 8009e12:	4603      	mov	r3, r0
 8009e14:	617b      	str	r3, [r7, #20]
 8009e16:	f107 0214 	add.w	r2, r7, #20
 8009e1a:	f107 0308 	add.w	r3, r7, #8
 8009e1e:	4611      	mov	r1, r2
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fada 	bl	800a3da <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8009e26:	4603      	mov	r3, r0
 8009e28:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fae8 	bl	800a404 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>
 8009e34:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8009e3a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009e3c:	6a3b      	ldr	r3, [r7, #32]
 8009e3e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009e40:	69fa      	ldr	r2, [r7, #28]
 8009e42:	18d5      	adds	r5, r2, r3
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7ff ff9c 	bl	8009d82 <_ZSt7forwardIP12InputCaptureEOT_RNSt16remove_referenceIS2_E4typeE>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	4629      	mov	r1, r5
 8009e50:	4620      	mov	r0, r4
 8009e52:	f7ff ffb6 	bl	8009dc2 <_ZNSt16allocator_traitsISaIP12InputCaptureEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8009e56:	2300      	movs	r3, #0
 8009e58:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009e5a:	f107 0308 	add.w	r3, r7, #8
 8009e5e:	4618      	mov	r0, r3
 8009e60:	f7ff fc08 	bl	8009674 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009e64:	4603      	mov	r3, r0
 8009e66:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 faf2 	bl	800a454 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009e70:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009e72:	69fa      	ldr	r2, [r7, #28]
 8009e74:	4621      	mov	r1, r4
 8009e76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e78:	f000 fad8 	bl	800a42c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009e7c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	3304      	adds	r3, #4
 8009e82:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009e84:	f107 0308 	add.w	r3, r7, #8
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff fbf3 	bl	8009674 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	4618      	mov	r0, r3
 8009e96:	f000 fadd 	bl	800a454 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 8009e9a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009e9c:	69ba      	ldr	r2, [r7, #24]
 8009e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ea0:	4620      	mov	r0, r4
 8009ea2:	f000 fac3 	bl	800a42c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009ea6:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8009ea8:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	689a      	ldr	r2, [r3, #8]
 8009eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8009eb4:	461a      	mov	r2, r3
 8009eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009eb8:	f7ff fdd5 	bl	8009a66 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	69fa      	ldr	r2, [r7, #28]
 8009ec0:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	69ba      	ldr	r2, [r7, #24]
 8009ec6:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8009ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eca:	009b      	lsls	r3, r3, #2
 8009ecc:	69fa      	ldr	r2, [r7, #28]
 8009ece:	441a      	add	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	609a      	str	r2, [r3, #8]
    }
 8009ed4:	bf00      	nop
 8009ed6:	3730      	adds	r7, #48	; 0x30
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bdb0      	pop	{r4, r5, r7, pc}
 8009edc:	08020be0 	.word	0x08020be0

08009ee0 <_ZNSt6vectorIP12InputCaptureSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b084      	sub	sp, #16
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7ff fd8b 	bl	8009a04 <_ZNSt6vectorIP12InputCaptureSaIS1_EE3endEv>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	60fb      	str	r3, [r7, #12]
 8009ef2:	f107 030c 	add.w	r3, r7, #12
 8009ef6:	2101      	movs	r1, #1
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f000 fac4 	bl	800a486 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>
 8009efe:	4603      	mov	r3, r0
 8009f00:	60bb      	str	r3, [r7, #8]
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff fbe7 	bl	80096da <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEdeEv>
 8009f0c:	4603      	mov	r3, r0
      }
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3710      	adds	r7, #16
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}

08009f16 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11lower_boundERS3_>:
      lower_bound(const key_type& __k)
 8009f16:	b590      	push	{r4, r7, lr}
 8009f18:	b083      	sub	sp, #12
 8009f1a:	af00      	add	r7, sp, #0
 8009f1c:	6078      	str	r0, [r7, #4]
 8009f1e:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f7ff fdde 	bl	8009ae2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8009f26:	4604      	mov	r4, r0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f000 fac5 	bl	800a4b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	4621      	mov	r1, r4
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 facb 	bl	800a4d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	370c      	adds	r7, #12
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd90      	pop	{r4, r7, pc}

08009f44 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b084      	sub	sp, #16
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	1d1a      	adds	r2, r3, #4
 8009f50:	f107 030c 	add.w	r3, r7, #12
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f000 f9c2 	bl	800a2e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3710      	adds	r7, #16
 8009f62:	46bd      	mov	sp, r7
 8009f64:	bd80      	pop	{r7, pc}

08009f66 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8key_compEv>:
      key_comp() const
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 8009f6e:	bf00      	nop
 8009f70:	4618      	mov	r0, r3
 8009f72:	370c      	adds	r7, #12
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr()
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b082      	sub	sp, #8
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	3310      	adds	r3, #16
 8009f88:	4618      	mov	r0, r3
 8009f8a:	f000 fad4 	bl	800a536 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8009f98:	b5b0      	push	{r4, r5, r7, lr}
 8009f9a:	b088      	sub	sp, #32
 8009f9c:	af02      	add	r7, sp, #8
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
 8009fa4:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	f000 fad1 	bl	800a54e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>
 8009fac:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8009fae:	68b8      	ldr	r0, [r7, #8]
 8009fb0:	f7f7 f959 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8009fb4:	4604      	mov	r4, r0
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f7f7 fc43 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 8009fbc:	4605      	mov	r5, r0
 8009fbe:	6838      	ldr	r0, [r7, #0]
 8009fc0:	f7f7 f967 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	9300      	str	r3, [sp, #0]
 8009fc8:	462b      	mov	r3, r5
 8009fca:	4622      	mov	r2, r4
 8009fcc:	6979      	ldr	r1, [r7, #20]
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 face 	bl	800a570 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>
	  return __tmp;
 8009fd4:	697b      	ldr	r3, [r7, #20]
	}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bdb0      	pop	{r4, r5, r7, pc}

08009fde <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8009fde:	b5b0      	push	{r4, r5, r7, lr}
 8009fe0:	b08c      	sub	sp, #48	; 0x30
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	60b9      	str	r1, [r7, #8]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8009fec:	1d3b      	adds	r3, r7, #4
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 faeb 	bl	800a5ca <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8009ff8:	69bc      	ldr	r4, [r7, #24]
 8009ffa:	68b8      	ldr	r0, [r7, #8]
 8009ffc:	f000 fa5c 	bl	800a4b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a000:	4603      	mov	r3, r0
 800a002:	429c      	cmp	r4, r3
 800a004:	bf0c      	ite	eq
 800a006:	2301      	moveq	r3, #1
 800a008:	2300      	movne	r3, #0
 800a00a:	b2db      	uxtb	r3, r3
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d032      	beq.n	800a076 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x98>
	  if (size() > 0
 800a010:	68b8      	ldr	r0, [r7, #8]
 800a012:	f000 faeb 	bl	800a5ec <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>
 800a016:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d015      	beq.n	800a048 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a01c:	68bc      	ldr	r4, [r7, #8]
 800a01e:	68b8      	ldr	r0, [r7, #8]
 800a020:	f000 faf0 	bl	800a604 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a024:	4603      	mov	r3, r0
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 faf7 	bl	800a61c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a02e:	4603      	mov	r3, r0
 800a030:	6819      	ldr	r1, [r3, #0]
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	461a      	mov	r2, r3
 800a038:	4620      	mov	r0, r4
 800a03a:	f7f6 ff4e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6a>
 800a044:	2301      	movs	r3, #1
 800a046:	e000      	b.n	800a04a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x6c>
 800a048:	2300      	movs	r3, #0
	  if (size() > 0
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d00c      	beq.n	800a068 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x8a>
	    return _Res(0, _M_rightmost());
 800a04e:	2300      	movs	r3, #0
 800a050:	61fb      	str	r3, [r7, #28]
 800a052:	68b8      	ldr	r0, [r7, #8]
 800a054:	f000 fad6 	bl	800a604 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a058:	4602      	mov	r2, r0
 800a05a:	f107 031c 	add.w	r3, r7, #28
 800a05e:	4619      	mov	r1, r3
 800a060:	68f8      	ldr	r0, [r7, #12]
 800a062:	f7f7 ff21 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a066:	e0e5      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	683a      	ldr	r2, [r7, #0]
 800a06c:	68b9      	ldr	r1, [r7, #8]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 fae0 	bl	800a634 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a074:	e0de      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800a076:	68bc      	ldr	r4, [r7, #8]
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	681d      	ldr	r5, [r3, #0]
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 facc 	bl	800a61c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a084:	4603      	mov	r3, r0
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	461a      	mov	r2, r3
 800a08a:	4629      	mov	r1, r5
 800a08c:	4620      	mov	r0, r4
 800a08e:	f7f6 ff24 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a092:	4603      	mov	r3, r0
 800a094:	2b00      	cmp	r3, #0
 800a096:	d059      	beq.n	800a14c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x16e>
	  iterator __before = __pos;
 800a098:	69bb      	ldr	r3, [r7, #24]
 800a09a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800a09c:	69bc      	ldr	r4, [r7, #24]
 800a09e:	68b8      	ldr	r0, [r7, #8]
 800a0a0:	f000 fb52 	bl	800a748 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	429c      	cmp	r4, r3
 800a0aa:	bf0c      	ite	eq
 800a0ac:	2301      	moveq	r3, #1
 800a0ae:	2300      	movne	r3, #0
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d00d      	beq.n	800a0d2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0xf4>
	    return _Res(_M_leftmost(), _M_leftmost());
 800a0b6:	68b8      	ldr	r0, [r7, #8]
 800a0b8:	f000 fb46 	bl	800a748 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a0bc:	4604      	mov	r4, r0
 800a0be:	68b8      	ldr	r0, [r7, #8]
 800a0c0:	f000 fb42 	bl	800a748 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	461a      	mov	r2, r3
 800a0c8:	4621      	mov	r1, r4
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f7f7 ff98 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a0d0:	e0b0      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800a0d2:	68bc      	ldr	r4, [r7, #8]
 800a0d4:	f107 0314 	add.w	r3, r7, #20
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f000 fb41 	bl	800a760 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 fa9a 	bl	800a61c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	6819      	ldr	r1, [r3, #0]
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	f7f6 fef1 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d01f      	beq.n	800a13e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x160>
	      if (_S_right(__before._M_node) == 0)
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	4618      	mov	r0, r3
 800a102:	f7ff fe15 	bl	8009d30 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	bf0c      	ite	eq
 800a10c:	2301      	moveq	r3, #1
 800a10e:	2300      	movne	r3, #0
 800a110:	b2db      	uxtb	r3, r3
 800a112:	2b00      	cmp	r3, #0
 800a114:	d00a      	beq.n	800a12c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x14e>
		return _Res(0, __before._M_node);
 800a116:	2300      	movs	r3, #0
 800a118:	623b      	str	r3, [r7, #32]
 800a11a:	f107 0214 	add.w	r2, r7, #20
 800a11e:	f107 0320 	add.w	r3, r7, #32
 800a122:	4619      	mov	r1, r3
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7f7 febf 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a12a:	e083      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__pos._M_node, __pos._M_node);
 800a12c:	f107 0218 	add.w	r2, r7, #24
 800a130:	f107 0318 	add.w	r3, r7, #24
 800a134:	4619      	mov	r1, r3
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f7f7 ff62 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a13c:	e07a      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	683a      	ldr	r2, [r7, #0]
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 fa75 	bl	800a634 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a14a:	e073      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800a14c:	68bc      	ldr	r4, [r7, #8]
 800a14e:	69bb      	ldr	r3, [r7, #24]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 fa63 	bl	800a61c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a156:	4603      	mov	r3, r0
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	461a      	mov	r2, r3
 800a160:	4620      	mov	r0, r4
 800a162:	f7f6 feba 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d059      	beq.n	800a220 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x242>
	  iterator __after = __pos;
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800a170:	69bc      	ldr	r4, [r7, #24]
 800a172:	68b8      	ldr	r0, [r7, #8]
 800a174:	f000 fa46 	bl	800a604 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a178:	4603      	mov	r3, r0
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	429c      	cmp	r4, r3
 800a17e:	bf0c      	ite	eq
 800a180:	2301      	moveq	r3, #1
 800a182:	2300      	movne	r3, #0
 800a184:	b2db      	uxtb	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00c      	beq.n	800a1a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x1c6>
	    return _Res(0, _M_rightmost());
 800a18a:	2300      	movs	r3, #0
 800a18c:	627b      	str	r3, [r7, #36]	; 0x24
 800a18e:	68b8      	ldr	r0, [r7, #8]
 800a190:	f000 fa38 	bl	800a604 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>
 800a194:	4602      	mov	r2, r0
 800a196:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a19a:	4619      	mov	r1, r3
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f7f7 fe83 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a1a2:	e047      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800a1a4:	68bc      	ldr	r4, [r7, #8]
 800a1a6:	683b      	ldr	r3, [r7, #0]
 800a1a8:	681d      	ldr	r5, [r3, #0]
 800a1aa:	f107 0310 	add.w	r3, r7, #16
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	f000 fae7 	bl	800a782 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>
 800a1b4:	4603      	mov	r3, r0
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	f000 fa2f 	bl	800a61c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	4629      	mov	r1, r5
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7f6 fe87 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01f      	beq.n	800a212 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x234>
	      if (_S_right(__pos._M_node) == 0)
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7ff fdab 	bl	8009d30 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	bf0c      	ite	eq
 800a1e0:	2301      	moveq	r3, #1
 800a1e2:	2300      	movne	r3, #0
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x222>
		return _Res(0, __pos._M_node);
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a1ee:	f107 0218 	add.w	r2, r7, #24
 800a1f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a1f6:	4619      	mov	r1, r3
 800a1f8:	68f8      	ldr	r0, [r7, #12]
 800a1fa:	f7f7 fe55 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800a1fe:	e019      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
		return _Res(__after._M_node, __after._M_node);
 800a200:	f107 0210 	add.w	r2, r7, #16
 800a204:	f107 0310 	add.w	r3, r7, #16
 800a208:	4619      	mov	r1, r3
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7f7 fef8 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800a210:	e010      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	    return _M_get_insert_unique_pos(__k);
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	68b9      	ldr	r1, [r7, #8]
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 fa0b 	bl	800a634 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>
 800a21e:	e009      	b.n	800a234 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS6_ERS3_+0x256>
	return _Res(__pos._M_node, 0);
 800a220:	2300      	movs	r3, #0
 800a222:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a224:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800a228:	f107 0318 	add.w	r3, r7, #24
 800a22c:	4619      	mov	r1, r3
 800a22e:	68f8      	ldr	r0, [r7, #12]
 800a230:	f7f7 ff21 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a234:	68f8      	ldr	r0, [r7, #12]
 800a236:	3730      	adds	r7, #48	; 0x30
 800a238:	46bd      	mov	sp, r7
 800a23a:	bdb0      	pop	{r4, r5, r7, pc}

0800a23c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>:
      _S_key(_Const_Link_type __x)
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 faad 	bl	800a7a4 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a24a:	4602      	mov	r2, r0
 800a24c:	f107 030c 	add.w	r3, r7, #12
 800a250:	4611      	mov	r1, r2
 800a252:	4618      	mov	r0, r3
 800a254:	f000 fab4 	bl	800a7c0 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>
 800a258:	4603      	mov	r3, r0
      }
 800a25a:	4618      	mov	r0, r3
 800a25c:	3710      	adds	r7, #16
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}

0800a262 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a262:	b5b0      	push	{r4, r5, r7, lr}
 800a264:	b086      	sub	sp, #24
 800a266:	af00      	add	r7, sp, #0
 800a268:	60f8      	str	r0, [r7, #12]
 800a26a:	60b9      	str	r1, [r7, #8]
 800a26c:	607a      	str	r2, [r7, #4]
 800a26e:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d119      	bne.n	800a2aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a276:	68f8      	ldr	r0, [r7, #12]
 800a278:	f000 f91e 	bl	800a4b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a27c:	4602      	mov	r2, r0
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4293      	cmp	r3, r2
 800a282:	d012      	beq.n	800a2aa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x48>
			    || _M_impl._M_key_compare(_S_key(__z),
 800a284:	68fc      	ldr	r4, [r7, #12]
 800a286:	6838      	ldr	r0, [r7, #0]
 800a288:	f7ff ffd8 	bl	800a23c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a28c:	4603      	mov	r3, r0
 800a28e:	681d      	ldr	r5, [r3, #0]
						      _S_key(__p)));
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f000 f9c3 	bl	800a61c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a296:	4603      	mov	r3, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	461a      	mov	r2, r3
 800a29c:	4629      	mov	r1, r5
 800a29e:	4620      	mov	r0, r4
 800a2a0:	f7f6 fe1b 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d001      	beq.n	800a2ae <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4c>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	e000      	b.n	800a2b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSE_PSt13_Rb_tree_nodeIS6_E+0x4e>
 800a2ae:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 800a2b0:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800a2b6:	7df8      	ldrb	r0, [r7, #23]
 800a2b8:	687a      	ldr	r2, [r7, #4]
 800a2ba:	6839      	ldr	r1, [r7, #0]
 800a2bc:	f016 f9b2 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	1c5a      	adds	r2, r3, #1
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 800a2ca:	f107 0310 	add.w	r3, r7, #16
 800a2ce:	6839      	ldr	r1, [r7, #0]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 f805 	bl	800a2e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a2d6:	693b      	ldr	r3, [r7, #16]
    }
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3718      	adds	r7, #24
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bdb0      	pop	{r4, r5, r7, pc}

0800a2e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
 800a2e8:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	683a      	ldr	r2, [r7, #0]
 800a2ee:	601a      	str	r2, [r3, #0]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	370c      	adds	r7, #12
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a2fe:	b590      	push	{r4, r7, lr}
 800a300:	b083      	sub	sp, #12
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 fa74 	bl	800a7f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a30e:	4604      	mov	r4, r0
 800a310:	6838      	ldr	r0, [r7, #0]
 800a312:	f7ff fe33 	bl	8009f7c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a316:	4603      	mov	r3, r0
 800a318:	4619      	mov	r1, r3
 800a31a:	4620      	mov	r0, r4
 800a31c:	f000 fa76 	bl	800a80c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>
      }
 800a320:	bf00      	nop
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	bd90      	pop	{r4, r7, pc}

0800a328 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS6_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800a332:	6878      	ldr	r0, [r7, #4]
 800a334:	f000 fa5f 	bl	800a7f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a338:	4603      	mov	r3, r0
 800a33a:	2201      	movs	r2, #1
 800a33c:	6839      	ldr	r1, [r7, #0]
 800a33e:	4618      	mov	r0, r3
 800a340:	f000 fa70 	bl	800a824 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>
 800a344:	bf00      	nop
 800a346:	3708      	adds	r7, #8
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}

0800a34c <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800a34c:	b590      	push	{r4, r7, lr}
 800a34e:	b087      	sub	sp, #28
 800a350:	af00      	add	r7, sp, #0
 800a352:	60f8      	str	r0, [r7, #12]
 800a354:	60b9      	str	r1, [r7, #8]
 800a356:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f000 fa82 	bl	800a862 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a35e:	4604      	mov	r4, r0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f000 fa8f 	bl	800a884 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a366:	4603      	mov	r3, r0
 800a368:	1ae2      	subs	r2, r4, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	bf34      	ite	cc
 800a370:	2301      	movcc	r3, #1
 800a372:	2300      	movcs	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b00      	cmp	r3, #0
 800a378:	d002      	beq.n	800a380 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f016 f9b0 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800a380:	68f8      	ldr	r0, [r7, #12]
 800a382:	f000 fa7f 	bl	800a884 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a386:	4604      	mov	r4, r0
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f000 fa7b 	bl	800a884 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a38e:	4603      	mov	r3, r0
 800a390:	613b      	str	r3, [r7, #16]
 800a392:	f107 0208 	add.w	r2, r7, #8
 800a396:	f107 0310 	add.w	r3, r7, #16
 800a39a:	4611      	mov	r1, r2
 800a39c:	4618      	mov	r0, r3
 800a39e:	f7f8 fa58 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4423      	add	r3, r4
 800a3a8:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800a3aa:	68f8      	ldr	r0, [r7, #12]
 800a3ac:	f000 fa6a 	bl	800a884 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>
 800a3b0:	4602      	mov	r2, r0
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	4293      	cmp	r3, r2
 800a3b6:	d306      	bcc.n	800a3c6 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800a3b8:	68f8      	ldr	r0, [r7, #12]
 800a3ba:	f000 fa52 	bl	800a862 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d904      	bls.n	800a3d0 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x84>
 800a3c6:	68f8      	ldr	r0, [r7, #12]
 800a3c8:	f000 fa4b 	bl	800a862 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>
 800a3cc:	4603      	mov	r3, r0
 800a3ce:	e000      	b.n	800a3d2 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE12_M_check_lenEjPKc+0x86>
 800a3d0:	697b      	ldr	r3, [r7, #20]
      }
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	371c      	adds	r7, #28
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd90      	pop	{r4, r7, pc}

0800a3da <_ZN9__gnu_cxxmiIPP12InputCaptureSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800a3da:	b590      	push	{r4, r7, lr}
 800a3dc:	b083      	sub	sp, #12
 800a3de:	af00      	add	r7, sp, #0
 800a3e0:	6078      	str	r0, [r7, #4]
 800a3e2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff f945 	bl	8009674 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	681c      	ldr	r4, [r3, #0]
 800a3ee:	6838      	ldr	r0, [r7, #0]
 800a3f0:	f7ff f940 	bl	8009674 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEE4baseEv>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	1ae3      	subs	r3, r4, r3
 800a3fa:	109b      	asrs	r3, r3, #2
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	370c      	adds	r7, #12
 800a400:	46bd      	mov	sp, r7
 800a402:	bd90      	pop	{r4, r7, pc}

0800a404 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
 800a40c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d006      	beq.n	800a422 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x1e>
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6839      	ldr	r1, [r7, #0]
 800a418:	4618      	mov	r0, r3
 800a41a:	f000 fa43 	bl	800a8a4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>
 800a41e:	4603      	mov	r3, r0
 800a420:	e000      	b.n	800a424 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE11_M_allocateEj+0x20>
 800a422:	2300      	movs	r3, #0
      }
 800a424:	4618      	mov	r0, r3
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}

0800a42c <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800a42c:	b590      	push	{r4, r7, lr}
 800a42e:	b087      	sub	sp, #28
 800a430:	af02      	add	r7, sp, #8
 800a432:	60f8      	str	r0, [r7, #12]
 800a434:	60b9      	str	r1, [r7, #8]
 800a436:	607a      	str	r2, [r7, #4]
 800a438:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800a43a:	f88d 4000 	strb.w	r4, [sp]
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	687a      	ldr	r2, [r7, #4]
 800a442:	68b9      	ldr	r1, [r7, #8]
 800a444:	68f8      	ldr	r0, [r7, #12]
 800a446:	f000 fa4d 	bl	800a8e4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800a44a:	4603      	mov	r3, r0
      }
 800a44c:	4618      	mov	r0, r3
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	bd90      	pop	{r4, r7, pc}

0800a454 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800a454:	b480      	push	{r7}
 800a456:	b083      	sub	sp, #12
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	4618      	mov	r0, r3
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	60f8      	str	r0, [r7, #12]
 800a472:	60b9      	str	r1, [r7, #8]
 800a474:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800a476:	68b9      	ldr	r1, [r7, #8]
 800a478:	68f8      	ldr	r0, [r7, #12]
 800a47a:	f000 fa4f 	bl	800a91c <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>
    }
 800a47e:	bf00      	nop
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <_ZNK9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800a486:	b580      	push	{r7, lr}
 800a488:	b084      	sub	sp, #16
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
 800a48e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	009b      	lsls	r3, r3, #2
 800a498:	425b      	negs	r3, r3
 800a49a:	4413      	add	r3, r2
 800a49c:	60fb      	str	r3, [r7, #12]
 800a49e:	f107 020c 	add.w	r2, r7, #12
 800a4a2:	f107 0308 	add.w	r3, r7, #8
 800a4a6:	4611      	mov	r1, r2
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7ff fbfc 	bl	8009ca6 <_ZN9__gnu_cxx17__normal_iteratorIPP12InputCaptureSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3710      	adds	r7, #16
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800a4b8:	b480      	push	{r7}
 800a4ba:	b083      	sub	sp, #12
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	3304      	adds	r3, #4
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a4d0:	b590      	push	{r4, r7, lr}
 800a4d2:	b087      	sub	sp, #28
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	60f8      	str	r0, [r7, #12]
 800a4d8:	60b9      	str	r1, [r7, #8]
 800a4da:	607a      	str	r2, [r7, #4]
 800a4dc:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800a4de:	68bb      	ldr	r3, [r7, #8]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d01d      	beq.n	800a520 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 800a4e4:	68fc      	ldr	r4, [r7, #12]
 800a4e6:	68b8      	ldr	r0, [r7, #8]
 800a4e8:	f7ff fea8 	bl	800a23c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	6819      	ldr	r1, [r3, #0]
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	4620      	mov	r0, r4
 800a4f8:	f7f6 fcef 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	f083 0301 	eor.w	r3, r3, #1
 800a502:	b2db      	uxtb	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d006      	beq.n	800a516 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	607b      	str	r3, [r7, #4]
 800a50c:	68b8      	ldr	r0, [r7, #8]
 800a50e:	f7ff fc1b 	bl	8009d48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a512:	60b8      	str	r0, [r7, #8]
 800a514:	e7e3      	b.n	800a4de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 800a516:	68b8      	ldr	r0, [r7, #8]
 800a518:	f7ff fc0a 	bl	8009d30 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a51c:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 800a51e:	e7de      	b.n	800a4de <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS6_EPSt18_Rb_tree_node_baseRS3_+0xe>
      return iterator(__y);
 800a520:	f107 0314 	add.w	r3, r7, #20
 800a524:	6879      	ldr	r1, [r7, #4]
 800a526:	4618      	mov	r0, r3
 800a528:	f7ff feda 	bl	800a2e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a52c:	697b      	ldr	r3, [r7, #20]
    }
 800a52e:	4618      	mov	r0, r3
 800a530:	371c      	adds	r7, #28
 800a532:	46bd      	mov	sp, r7
 800a534:	bd90      	pop	{r4, r7, pc}

0800a536 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() noexcept
 800a536:	b580      	push	{r7, lr}
 800a538:	b082      	sub	sp, #8
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fa02 	bl	800a948 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800a544:	4603      	mov	r3, r0
 800a546:	4618      	mov	r0, r3
 800a548:	3708      	adds	r7, #8
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}

0800a54e <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_get_nodeEv>:
      _M_get_node()
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 f94d 	bl	800a7f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2101      	movs	r1, #1
 800a560:	4618      	mov	r0, r3
 800a562:	f000 f9fc 	bl	800a95e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>
 800a566:	4603      	mov	r3, r0
 800a568:	4618      	mov	r0, r3
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS3_EESH_IJEEEEEvPSt13_Rb_tree_nodeIS6_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800a570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a574:	b086      	sub	sp, #24
 800a576:	af02      	add	r7, sp, #8
 800a578:	60f8      	str	r0, [r7, #12]
 800a57a:	60b9      	str	r1, [r7, #8]
 800a57c:	607a      	str	r2, [r7, #4]
 800a57e:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4619      	mov	r1, r3
 800a584:	2018      	movs	r0, #24
 800a586:	f7f5 fed3 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f933 	bl	800a7f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>
 800a590:	4604      	mov	r4, r0
 800a592:	68b8      	ldr	r0, [r7, #8]
 800a594:	f7ff fcf2 	bl	8009f7c <_ZNSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>
 800a598:	4605      	mov	r5, r0
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f7f6 fe63 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	6838      	ldr	r0, [r7, #0]
 800a5a4:	f7f7 f94d 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a5a8:	4680      	mov	r8, r0
 800a5aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ac:	f7f6 fe71 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	4643      	mov	r3, r8
 800a5b6:	4632      	mov	r2, r6
 800a5b8:	4629      	mov	r1, r5
 800a5ba:	4620      	mov	r0, r4
 800a5bc:	f000 fa1c 	bl	800a9f8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>
	}
 800a5c0:	bf00      	nop
 800a5c2:	3710      	adds	r7, #16
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a5ca <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP12InputCaptureEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	f107 030c 	add.w	r3, r7, #12
 800a5da:	4611      	mov	r1, r2
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f7ff fe7f 	bl	800a2e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	695b      	ldr	r3, [r3, #20]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	3310      	adds	r3, #16
 800a610:	4618      	mov	r0, r3
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7ff fe09 	bl	800a23c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a62a:	4603      	mov	r3, r0
 800a62c:	4618      	mov	r0, r3
 800a62e:	3708      	adds	r7, #8
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800a634:	b5b0      	push	{r4, r5, r7, lr}
 800a636:	b08a      	sub	sp, #40	; 0x28
 800a638:	af00      	add	r7, sp, #0
 800a63a:	60f8      	str	r0, [r7, #12]
 800a63c:	60b9      	str	r1, [r7, #8]
 800a63e:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800a640:	68b8      	ldr	r0, [r7, #8]
 800a642:	f7ff fa4e 	bl	8009ae2 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 800a646:	4603      	mov	r3, r0
 800a648:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800a64a:	68b8      	ldr	r0, [r7, #8]
 800a64c:	f7ff ff34 	bl	800a4b8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 800a650:	4603      	mov	r3, r0
 800a652:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800a654:	2301      	movs	r3, #1
 800a656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d023      	beq.n	800a6a8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x74>
	  __y = __x;
 800a660:	69bb      	ldr	r3, [r7, #24]
 800a662:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800a664:	68bc      	ldr	r4, [r7, #8]
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681d      	ldr	r5, [r3, #0]
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff fde5 	bl	800a23c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 800a672:	4603      	mov	r3, r0
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	461a      	mov	r2, r3
 800a678:	4629      	mov	r1, r5
 800a67a:	4620      	mov	r0, r4
 800a67c:	f7f6 fc2d 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a680:	4603      	mov	r3, r0
 800a682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800a686:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d005      	beq.n	800a69a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x66>
 800a68e:	69bb      	ldr	r3, [r7, #24]
 800a690:	4618      	mov	r0, r3
 800a692:	f7ff fb59 	bl	8009d48 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPSt18_Rb_tree_node_base>
 800a696:	4603      	mov	r3, r0
 800a698:	e004      	b.n	800a6a4 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x70>
 800a69a:	69bb      	ldr	r3, [r7, #24]
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7ff fb47 	bl	8009d30 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPSt18_Rb_tree_node_base>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800a6a6:	e7d8      	b.n	800a65a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x26>
      iterator __j = iterator(__y);
 800a6a8:	697a      	ldr	r2, [r7, #20]
 800a6aa:	f107 0310 	add.w	r3, r7, #16
 800a6ae:	4611      	mov	r1, r2
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	f7ff fe15 	bl	800a2e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800a6b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d01d      	beq.n	800a6fa <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xc6>
	  if (__j == begin())
 800a6be:	68b8      	ldr	r0, [r7, #8]
 800a6c0:	f000 f9b6 	bl	800aa30 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	f107 021c 	add.w	r2, r7, #28
 800a6cc:	f107 0310 	add.w	r3, r7, #16
 800a6d0:	4611      	mov	r1, r2
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7ff fa6a 	bl	8009bac <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEES9_>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d008      	beq.n	800a6f0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xbc>
	    return _Res(__x, __y);
 800a6de:	f107 0214 	add.w	r2, r7, #20
 800a6e2:	f107 0318 	add.w	r3, r7, #24
 800a6e6:	4619      	mov	r1, r3
 800a6e8:	68f8      	ldr	r0, [r7, #12]
 800a6ea:	f000 f9b2 	bl	800aa52 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a6ee:	e027      	b.n	800a740 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
	    --__j;
 800a6f0:	f107 0310 	add.w	r3, r7, #16
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f000 f833 	bl	800a760 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800a6fa:	68bc      	ldr	r4, [r7, #8]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7ff ff8c 	bl	800a61c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800a704:	4603      	mov	r3, r0
 800a706:	6819      	ldr	r1, [r3, #0]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	461a      	mov	r2, r3
 800a70e:	4620      	mov	r0, r4
 800a710:	f7f6 fbe3 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d008      	beq.n	800a72c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0xf8>
	return _Res(__x, __y);
 800a71a:	f107 0214 	add.w	r2, r7, #20
 800a71e:	f107 0318 	add.w	r3, r7, #24
 800a722:	4619      	mov	r1, r3
 800a724:	68f8      	ldr	r0, [r7, #12]
 800a726:	f000 f994 	bl	800aa52 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>
 800a72a:	e009      	b.n	800a740 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE24_M_get_insert_unique_posERS3_+0x10c>
      return _Res(__j._M_node, 0);
 800a72c:	2300      	movs	r3, #0
 800a72e:	623b      	str	r3, [r7, #32]
 800a730:	f107 0220 	add.w	r2, r7, #32
 800a734:	f107 0310 	add.w	r3, r7, #16
 800a738:	4619      	mov	r1, r3
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f7f7 fc9b 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800a740:	68f8      	ldr	r0, [r7, #12]
 800a742:	3728      	adds	r7, #40	; 0x28
 800a744:	46bd      	mov	sp, r7
 800a746:	bdb0      	pop	{r4, r5, r7, pc}

0800a748 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800a748:	b480      	push	{r7}
 800a74a:	b083      	sub	sp, #12
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	330c      	adds	r3, #12
 800a754:	4618      	mov	r0, r3
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800a760:	b580      	push	{r7, lr}
 800a762:	b082      	sub	sp, #8
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4618      	mov	r0, r3
 800a76e:	f015 ff57 	bl	8020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800a772:	4602      	mov	r2, r0
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	601a      	str	r2, [r3, #0]
	return *this;
 800a778:	687b      	ldr	r3, [r7, #4]
      }
 800a77a:	4618      	mov	r0, r3
 800a77c:	3708      	adds	r7, #8
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}

0800a782 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800a782:	b580      	push	{r7, lr}
 800a784:	b082      	sub	sp, #8
 800a786:	af00      	add	r7, sp, #0
 800a788:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4618      	mov	r0, r3
 800a790:	f015 ff44 	bl	802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800a794:	4602      	mov	r2, r0
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	601a      	str	r2, [r3, #0]
	return *this;
 800a79a:	687b      	ldr	r3, [r7, #4]
      }
 800a79c:	4618      	mov	r0, r3
 800a79e:	3708      	adds	r7, #8
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <_ZNKSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEE9_M_valptrEv>:
      _M_valptr() const
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b082      	sub	sp, #8
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	3310      	adds	r3, #16
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 f967 	bl	800aa84 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	4618      	mov	r0, r3
 800a7ba:	3708      	adds	r7, #8
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <_ZNKSt10_Select1stISt4pairIKP3PinP12InputCaptureEEclERKS6_>:
      operator()(const _Pair& __x) const
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	370c      	adds	r7, #12
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d6:	4770      	bx	lr

0800a7d8 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	68b8      	ldr	r0, [r7, #8]
 800a7ec:	f015 feac 	bl	8020548 <_ZdlPvj>
      }
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}

0800a7f6 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800a7f6:	b480      	push	{r7}
 800a7f8:	b083      	sub	sp, #12
 800a7fa:	af00      	add	r7, sp, #0
 800a7fc:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	4618      	mov	r0, r3
 800a802:	370c      	adds	r7, #12
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE7destroyIS7_EEvRS9_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800a816:	6838      	ldr	r0, [r7, #0]
 800a818:	f000 f940 	bl	800aa9c <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>
	}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}

0800a824 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800a824:	b580      	push	{r7, lr}
 800a826:	b088      	sub	sp, #32
 800a828:	af00      	add	r7, sp, #0
 800a82a:	60f8      	str	r0, [r7, #12]
 800a82c:	60b9      	str	r1, [r7, #8]
 800a82e:	607a      	str	r2, [r7, #4]
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	61fb      	str	r3, [r7, #28]
 800a834:	68bb      	ldr	r3, [r7, #8]
 800a836:	61bb      	str	r3, [r7, #24]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800a83c:	f7f5 fd70 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x2a>
	    ::operator delete(__p);
 800a846:	69b8      	ldr	r0, [r7, #24]
 800a848:	f015 fe7c 	bl	8020544 <_ZdlPv>
	    return;
 800a84c:	e005      	b.n	800a85a <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE10deallocateERS9_PS8_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800a84e:	697a      	ldr	r2, [r7, #20]
 800a850:	69b9      	ldr	r1, [r7, #24]
 800a852:	69f8      	ldr	r0, [r7, #28]
 800a854:	f000 f9e1 	bl	800ac1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>
      { __a.deallocate(__p, __n); }
 800a858:	bf00      	nop
 800a85a:	bf00      	nop
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}

0800a862 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800a862:	b580      	push	{r7, lr}
 800a864:	b082      	sub	sp, #8
 800a866:	af00      	add	r7, sp, #0
 800a868:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4618      	mov	r0, r3
 800a86e:	f000 f945 	bl	800aafc <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800a872:	4603      	mov	r3, r0
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f927 	bl	800aac8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>
 800a87a:	4603      	mov	r3, r0
 800a87c:	4618      	mov	r0, r3
 800a87e:	3708      	adds	r7, #8
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}

0800a884 <_ZNKSt6vectorIP12InputCaptureSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	685a      	ldr	r2, [r3, #4]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	1ad3      	subs	r3, r2, r3
 800a896:	109b      	asrs	r3, r3, #2
 800a898:	4618      	mov	r0, r3
 800a89a:	370c      	adds	r7, #12
 800a89c:	46bd      	mov	sp, r7
 800a89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a2:	4770      	bx	lr

0800a8a4 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b084      	sub	sp, #16
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	60fb      	str	r3, [r7, #12]
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a8b6:	f7f5 fd33 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d006      	beq.n	800a8ce <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a8c0:	68bb      	ldr	r3, [r7, #8]
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f015 fe41 	bl	802054c <_Znwj>
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	e006      	b.n	800a8dc <_ZNSt16allocator_traitsISaIP12InputCaptureEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	68b9      	ldr	r1, [r7, #8]
 800a8d2:	68f8      	ldr	r0, [r7, #12]
 800a8d4:	f000 f9b3 	bl	800ac3e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	bf00      	nop
      { return __a.allocate(__n); }
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3710      	adds	r7, #16
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <_ZNSt6vectorIP12InputCaptureSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	60f8      	str	r0, [r7, #12]
 800a8ec:	60b9      	str	r1, [r7, #8]
 800a8ee:	607a      	str	r2, [r7, #4]
 800a8f0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	68b9      	ldr	r1, [r7, #8]
 800a8f8:	68f8      	ldr	r0, [r7, #12]
 800a8fa:	f000 f90a 	bl	800ab12 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>
 800a8fe:	4603      	mov	r3, r0
      }
 800a900:	4618      	mov	r0, r3
 800a902:	3710      	adds	r7, #16
 800a904:	46bd      	mov	sp, r7
 800a906:	bd80      	pop	{r7, pc}

0800a908 <_ZSt10destroy_atIP12InputCaptureEvPT_>:
    destroy_at(_Tp* __location)
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
    }
 800a910:	bf00      	nop
 800a912:	370c      	adds	r7, #12
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr

0800a91c <_ZSt8_DestroyIPP12InputCaptureEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b082      	sub	sp, #8
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800a926:	f7f5 fcfb 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800a930:	6839      	ldr	r1, [r7, #0]
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f90a 	bl	800ab4c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>
 800a938:	e003      	b.n	800a942 <_ZSt8_DestroyIPP12InputCaptureEvT_S3_+0x26>
	__destroy(__first, __last);
 800a93a:	6839      	ldr	r1, [r7, #0]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f000 f91d 	bl	800ab7c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>
    }
 800a942:	3708      	adds	r7, #8
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <_ZN9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() noexcept
 800a948:	b480      	push	{r7}
 800a94a:	b083      	sub	sp, #12
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	4618      	mov	r0, r3
 800a954:	370c      	adds	r7, #12
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j>:
      allocate(allocator_type& __a, size_type __n)
 800a95e:	b580      	push	{r7, lr}
 800a960:	b084      	sub	sp, #16
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	6039      	str	r1, [r7, #0]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800a970:	f7f5 fcd6 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800a974:	4603      	mov	r3, r0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d009      	beq.n	800a98e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800a97a:	68ba      	ldr	r2, [r7, #8]
 800a97c:	4613      	mov	r3, r2
 800a97e:	005b      	lsls	r3, r3, #1
 800a980:	4413      	add	r3, r2
 800a982:	00db      	lsls	r3, r3, #3
 800a984:	4618      	mov	r0, r3
 800a986:	f015 fde1 	bl	802054c <_Znwj>
 800a98a:	4603      	mov	r3, r0
 800a98c:	e006      	b.n	800a99c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE8allocateERS9_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800a98e:	2200      	movs	r2, #0
 800a990:	68b9      	ldr	r1, [r7, #8]
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 f9b1 	bl	800acfa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>
 800a998:	4603      	mov	r3, r0
 800a99a:	bf00      	nop
      { return __a.allocate(__n); }
 800a99c:	4618      	mov	r0, r3
 800a99e:	3710      	adds	r7, #16
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	bd80      	pop	{r7, pc}

0800a9a4 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800a9a4:	b5b0      	push	{r4, r5, r7, lr}
 800a9a6:	b088      	sub	sp, #32
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
 800a9b0:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800a9b2:	68b8      	ldr	r0, [r7, #8]
 800a9b4:	f7f6 fc57 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800a9b8:	6878      	ldr	r0, [r7, #4]
 800a9ba:	f7f6 ff42 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800a9be:	4602      	mov	r2, r0
 800a9c0:	f107 0318 	add.w	r3, r7, #24
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	f7f7 ffd7 	bl	800297a <_ZNSt5tupleIJRKP3PinEEC1EOS4_>
 800a9cc:	f107 0418 	add.w	r4, r7, #24
 800a9d0:	6838      	ldr	r0, [r7, #0]
 800a9d2:	f7f6 fc5e 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	4619      	mov	r1, r3
 800a9da:	2008      	movs	r0, #8
 800a9dc:	f7f5 fca8 	bl	8000330 <_ZnwjPv>
 800a9e0:	4605      	mov	r5, r0
 800a9e2:	7f3b      	ldrb	r3, [r7, #28]
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	7d39      	ldrb	r1, [r7, #20]
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	f000 f8ec 	bl	800abc6 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>
 800a9ee:	462b      	mov	r3, r5
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3720      	adds	r7, #32
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bdb0      	pop	{r4, r5, r7, pc}

0800a9f8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEE9constructIS7_JRKSt21piecewise_construct_tSt5tupleIJRS4_EESF_IJEEEEEvRS9_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800a9f8:	b5b0      	push	{r4, r5, r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	60f8      	str	r0, [r7, #12]
 800aa00:	60b9      	str	r1, [r7, #8]
 800aa02:	607a      	str	r2, [r7, #4]
 800aa04:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f7f6 fc2d 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	6838      	ldr	r0, [r7, #0]
 800aa10:	f7f6 ff17 	bl	8001842 <_ZSt7forwardISt5tupleIJRKP3PinEEEOT_RNSt16remove_referenceIS6_E4typeE>
 800aa14:	4605      	mov	r5, r0
 800aa16:	6a38      	ldr	r0, [r7, #32]
 800aa18:	f7f6 fc3b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	462a      	mov	r2, r5
 800aa20:	4621      	mov	r1, r4
 800aa22:	68b8      	ldr	r0, [r7, #8]
 800aa24:	f7ff ffbe 	bl	800a9a4 <_ZSt12construct_atISt4pairIKP3PinP12InputCaptureEJRKSt21piecewise_construct_tSt5tupleIJRS3_EESA_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSF_DpOSG_>
	}
 800aa28:	bf00      	nop
 800aa2a:	3710      	adds	r7, #16
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bdb0      	pop	{r4, r5, r7, pc}

0800aa30 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	68da      	ldr	r2, [r3, #12]
 800aa3c:	f107 030c 	add.w	r3, r7, #12
 800aa40:	4611      	mov	r1, r2
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff fc4c 	bl	800a2e0 <_ZNSt17_Rb_tree_iteratorISt4pairIKP3PinP12InputCaptureEEC1EPSt18_Rb_tree_node_base>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}

0800aa52 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKP3PinP12InputCaptureEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b084      	sub	sp, #16
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800aa5e:	68b8      	ldr	r0, [r7, #8]
 800aa60:	f000 f8c5 	bl	800abee <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>
 800aa64:	4603      	mov	r3, r0
 800aa66:	681a      	ldr	r2, [r3, #0]
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7f7 fe9e 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800aa72:	4603      	mov	r3, r0
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	605a      	str	r2, [r3, #4]
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800aa8c:	6878      	ldr	r0, [r7, #4]
 800aa8e:	f000 f8b9 	bl	800ac04 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>
 800aa92:	4603      	mov	r3, r0
 800aa94:	4618      	mov	r0, r3
 800aa96:	3708      	adds	r7, #8
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	bd80      	pop	{r7, pc}

0800aa9c <_ZSt10destroy_atISt4pairIKP3PinP12InputCaptureEEvPT_>:
    destroy_at(_Tp* __location)
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
    }
 800aaa4:	bf00      	nop
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800aab8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <_ZNSt6vectorIP12InputCaptureSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800aad0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800aad4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	f7ff ffea 	bl	800aab0 <_ZNSt16allocator_traitsISaIP12InputCaptureEE8max_sizeERKS2_>
 800aadc:	4603      	mov	r3, r0
 800aade:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800aae0:	f107 0208 	add.w	r2, r7, #8
 800aae4:	f107 030c 	add.w	r3, r7, #12
 800aae8:	4611      	mov	r1, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7f8 f97b 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	681b      	ldr	r3, [r3, #0]
      }
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	3710      	adds	r7, #16
 800aaf8:	46bd      	mov	sp, r7
 800aafa:	bd80      	pop	{r7, pc}

0800aafc <_ZNKSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800aafc:	b480      	push	{r7}
 800aafe:	b083      	sub	sp, #12
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	4618      	mov	r0, r3
 800ab08:	370c      	adds	r7, #12
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab10:	4770      	bx	lr

0800ab12 <_ZSt12__relocate_aIPP12InputCaptureS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800ab12:	b5b0      	push	{r4, r5, r7, lr}
 800ab14:	b084      	sub	sp, #16
 800ab16:	af00      	add	r7, sp, #0
 800ab18:	60f8      	str	r0, [r7, #12]
 800ab1a:	60b9      	str	r1, [r7, #8]
 800ab1c:	607a      	str	r2, [r7, #4]
 800ab1e:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800ab20:	68f8      	ldr	r0, [r7, #12]
 800ab22:	f000 f8ab 	bl	800ac7c <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800ab26:	4604      	mov	r4, r0
 800ab28:	68b8      	ldr	r0, [r7, #8]
 800ab2a:	f000 f8a7 	bl	800ac7c <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800ab2e:	4605      	mov	r5, r0
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f8a3 	bl	800ac7c <_ZSt12__niter_baseIPP12InputCaptureET_S3_>
 800ab36:	4602      	mov	r2, r0
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	4620      	mov	r0, r4
 800ab3e:	f000 f8a8 	bl	800ac92 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ab42:	4603      	mov	r3, r0
    }
 800ab44:	4618      	mov	r0, r3
 800ab46:	3710      	adds	r7, #16
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bdb0      	pop	{r4, r5, r7, pc}

0800ab4c <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b082      	sub	sp, #8
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d00a      	beq.n	800ab74 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ab5e:	6878      	ldr	r0, [r7, #4]
 800ab60:	f000 f8b5 	bl	800acce <_ZSt11__addressofIP12InputCaptureEPT_RS2_>
 800ab64:	4603      	mov	r3, r0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 f8bc 	bl	800ace4 <_ZSt8_DestroyIP12InputCaptureEvPT_>
	  for (; __first != __last; ++__first)
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	607b      	str	r3, [r7, #4]
 800ab72:	e7f0      	b.n	800ab56 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP12InputCaptureEEvT_S5_+0xa>
	}
 800ab74:	bf00      	nop
 800ab76:	3708      	adds	r7, #8
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}

0800ab7c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12InputCaptureEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ab7c:	b480      	push	{r7}
 800ab7e:	b083      	sub	sp, #12
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
 800ab86:	bf00      	nop
 800ab88:	370c      	adds	r7, #12
 800ab8a:	46bd      	mov	sp, r7
 800ab8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>:
      pair<_T1, _T2>::
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b084      	sub	sp, #16
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	60f8      	str	r0, [r7, #12]
 800ab9a:	60b9      	str	r1, [r7, #8]
 800ab9c:	607a      	str	r2, [r7, #4]
 800ab9e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 800aba0:	68b8      	ldr	r0, [r7, #8]
 800aba2:	f7f8 f9cc 	bl	8002f3e <_ZSt3getILj0EJRKP3PinEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS8_>
 800aba6:	4603      	mov	r3, r0
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7f8 f9bd 	bl	8002f28 <_ZSt7forwardIRKP3PinEOT_RNSt16remove_referenceIS4_E4typeE>
 800abae:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 800abb0:	681a      	ldr	r2, [r3, #0]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2200      	movs	r2, #0
 800abba:	605a      	str	r2, [r3, #4]
      { }
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES9_IJDpT0_EE>:
      pair<_T1, _T2>::
 800abc6:	b5b0      	push	{r4, r5, r7, lr}
 800abc8:	b086      	sub	sp, #24
 800abca:	af02      	add	r7, sp, #8
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	7239      	strb	r1, [r7, #8]
 800abd0:	607a      	str	r2, [r7, #4]
 800abd2:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 800abd4:	463a      	mov	r2, r7
 800abd6:	f88d 4000 	strb.w	r4, [sp]
 800abda:	462b      	mov	r3, r5
 800abdc:	6879      	ldr	r1, [r7, #4]
 800abde:	68f8      	ldr	r0, [r7, #12]
 800abe0:	f7ff ffd7 	bl	800ab92 <_ZNSt4pairIKP3PinP12InputCaptureEC1IJRS2_EJLj0EEJEJEEERSt5tupleIJDpT_EERS8_IJDpT1_EESt12_Index_tupleIJXspT0_EEESH_IJXspT2_EEE>
      { }
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4618      	mov	r0, r3
 800abe8:	3710      	adds	r7, #16
 800abea:	46bd      	mov	sp, r7
 800abec:	bdb0      	pop	{r4, r5, r7, pc}

0800abee <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEEOT_RNSt16remove_referenceISB_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800abee:	b480      	push	{r7}
 800abf0:	b083      	sub	sp, #12
 800abf2:	af00      	add	r7, sp, #0
 800abf4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4618      	mov	r0, r3
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKP3PinP12InputCaptureEE7_M_addrEv>:
      _M_addr() const noexcept
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4618      	mov	r0, r3
 800ac10:	370c      	adds	r7, #12
 800ac12:	46bd      	mov	sp, r7
 800ac14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac18:	4770      	bx	lr

0800ac1a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE10deallocateEPS9_j>:
      deallocate(_Tp* __p, size_type __t)
 800ac1a:	b580      	push	{r7, lr}
 800ac1c:	b084      	sub	sp, #16
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	60f8      	str	r0, [r7, #12]
 800ac22:	60b9      	str	r1, [r7, #8]
 800ac24:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ac26:	687a      	ldr	r2, [r7, #4]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	005b      	lsls	r3, r3, #1
 800ac2c:	4413      	add	r3, r2
 800ac2e:	00db      	lsls	r3, r3, #3
 800ac30:	4619      	mov	r1, r3
 800ac32:	68b8      	ldr	r0, [r7, #8]
 800ac34:	f015 fc88 	bl	8020548 <_ZdlPvj>
      }
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b084      	sub	sp, #16
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ac4a:	68f8      	ldr	r0, [r7, #12]
 800ac4c:	f000 f877 	bl	800ad3e <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>
 800ac50:	4602      	mov	r2, r0
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	4293      	cmp	r3, r2
 800ac56:	bf8c      	ite	hi
 800ac58:	2301      	movhi	r3, #1
 800ac5a:	2300      	movls	r3, #0
 800ac5c:	b2db      	uxtb	r3, r3
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d001      	beq.n	800ac66 <_ZN9__gnu_cxx13new_allocatorIP12InputCaptureE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ac62:	f015 fd3a 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f015 fc6e 	bl	802054c <_Znwj>
 800ac70:	4603      	mov	r3, r0
 800ac72:	bf00      	nop
      }
 800ac74:	4618      	mov	r0, r3
 800ac76:	3710      	adds	r7, #16
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	bd80      	pop	{r7, pc}

0800ac7c <_ZSt12__niter_baseIPP12InputCaptureET_S3_>:
    __niter_base(_Iterator __it)
 800ac7c:	b480      	push	{r7}
 800ac7e:	b083      	sub	sp, #12
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	4618      	mov	r0, r3
 800ac88:	370c      	adds	r7, #12
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr

0800ac92 <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b086      	sub	sp, #24
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	60f8      	str	r0, [r7, #12]
 800ac9a:	60b9      	str	r1, [r7, #8]
 800ac9c:	607a      	str	r2, [r7, #4]
 800ac9e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	1ad3      	subs	r3, r2, r3
 800aca6:	109b      	asrs	r3, r3, #2
 800aca8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	dd06      	ble.n	800acbe <_ZSt14__relocate_a_1IP12InputCaptureS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	461a      	mov	r2, r3
 800acb6:	68f9      	ldr	r1, [r7, #12]
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f015 fd81 	bl	80207c0 <memmove>
      return __result + __count;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	4413      	add	r3, r2
    }
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <_ZSt11__addressofIP12InputCaptureEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800acce:	b480      	push	{r7}
 800acd0:	b083      	sub	sp, #12
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	4618      	mov	r0, r3
 800acda:	370c      	adds	r7, #12
 800acdc:	46bd      	mov	sp, r7
 800acde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace2:	4770      	bx	lr

0800ace4 <_ZSt8_DestroyIP12InputCaptureEvPT_>:
    _Destroy(_Tp* __pointer)
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b082      	sub	sp, #8
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800acec:	6878      	ldr	r0, [r7, #4]
 800acee:	f7ff fe0b 	bl	800a908 <_ZSt10destroy_atIP12InputCaptureEvPT_>
    }
 800acf2:	bf00      	nop
 800acf4:	3708      	adds	r7, #8
 800acf6:	46bd      	mov	sp, r7
 800acf8:	bd80      	pop	{r7, pc}

0800acfa <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800acfa:	b580      	push	{r7, lr}
 800acfc:	b084      	sub	sp, #16
 800acfe:	af00      	add	r7, sp, #0
 800ad00:	60f8      	str	r0, [r7, #12]
 800ad02:	60b9      	str	r1, [r7, #8]
 800ad04:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ad06:	68f8      	ldr	r0, [r7, #12]
 800ad08:	f000 f826 	bl	800ad58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	4293      	cmp	r3, r2
 800ad12:	bf8c      	ite	hi
 800ad14:	2301      	movhi	r3, #1
 800ad16:	2300      	movls	r3, #0
 800ad18:	b2db      	uxtb	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d001      	beq.n	800ad22 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ad1e:	f015 fcdc 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ad22:	68ba      	ldr	r2, [r7, #8]
 800ad24:	4613      	mov	r3, r2
 800ad26:	005b      	lsls	r3, r3, #1
 800ad28:	4413      	add	r3, r2
 800ad2a:	00db      	lsls	r3, r3, #3
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f015 fc0d 	bl	802054c <_Znwj>
 800ad32:	4603      	mov	r3, r0
 800ad34:	bf00      	nop
      }
 800ad36:	4618      	mov	r0, r3
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <_ZNK9__gnu_cxx13new_allocatorIP12InputCaptureE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ad3e:	b480      	push	{r7}
 800ad40:	b083      	sub	sp, #12
 800ad42:	af00      	add	r7, sp, #0
 800ad44:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ad46:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	370c      	adds	r7, #12
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
	...

0800ad58 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800ad60:	4b03      	ldr	r3, [pc, #12]	; (800ad70 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKP3PinP12InputCaptureEEE11_M_max_sizeEv+0x18>)
      }
 800ad62:	4618      	mov	r0, r3
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr
 800ad6e:	bf00      	nop
 800ad70:	05555555 	.word	0x05555555

0800ad74 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>:
      ~map() = default;
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b082      	sub	sp, #8
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f7fe fdac 	bl	80098dc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P12InputCaptureESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EED1Ev>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	4618      	mov	r0, r3
 800ad88:	3708      	adds	r7, #8
 800ad8a:	46bd      	mov	sp, r7
 800ad8c:	bd80      	pop	{r7, pc}
	...

0800ad90 <_Z41__static_initialization_and_destruction_0ii>:
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d10a      	bne.n	800adb6 <_Z41__static_initialization_and_destruction_0ii+0x26>
 800ada0:	683b      	ldr	r3, [r7, #0]
 800ada2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d105      	bne.n	800adb6 <_Z41__static_initialization_and_destruction_0ii+0x26>
vector<InputCapture*> InputCapture::all_input_captures;
 800adaa:	480c      	ldr	r0, [pc, #48]	; (800addc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800adac:	f7fe fb14 	bl	80093d8 <_ZNSt6vectorIP12InputCaptureSaIS1_EEC1Ev>
map<Pin*, InputCapture*> InputCapture::pin_to_input_capture;
 800adb0:	480b      	ldr	r0, [pc, #44]	; (800ade0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800adb2:	f7fe fb37 	bl	8009424 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEC1Ev>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d10a      	bne.n	800add2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d105      	bne.n	800add2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 800adc6:	4806      	ldr	r0, [pc, #24]	; (800ade0 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 800adc8:	f7ff ffd4 	bl	800ad74 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEED1Ev>
vector<InputCapture*> InputCapture::all_input_captures;
 800adcc:	4803      	ldr	r0, [pc, #12]	; (800addc <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 800adce:	f000 f809 	bl	800ade4 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>
}
 800add2:	bf00      	nop
 800add4:	3708      	adds	r7, #8
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
 800adda:	bf00      	nop
 800addc:	24000158 	.word	0x24000158
 800ade0:	24000164 	.word	0x24000164

0800ade4 <_ZNSt6vectorIP12InputCaptureSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800ade4:	b5b0      	push	{r4, r5, r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	681c      	ldr	r4, [r3, #0]
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff fb2c 	bl	800a454 <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EE19_M_get_Tp_allocatorEv>
 800adfc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800adfe:	461a      	mov	r2, r3
 800ae00:	4629      	mov	r1, r5
 800ae02:	4620      	mov	r0, r4
 800ae04:	f7ff fb31 	bl	800a46a <_ZSt8_DestroyIPP12InputCaptureS1_EvT_S3_RSaIT0_E>
      }
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fe fd2d 	bl	800986a <_ZNSt12_Vector_baseIP12InputCaptureSaIS1_EED1Ev>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	4618      	mov	r0, r3
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bdb0      	pop	{r4, r5, r7, pc}

0800ae1a <_GLOBAL__sub_I__ZN12InputCapture18all_input_capturesE>:
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae22:	2001      	movs	r0, #1
 800ae24:	f7ff ffb4 	bl	800ad90 <_Z41__static_initialization_and_destruction_0ii>
 800ae28:	bd80      	pop	{r7, pc}

0800ae2a <_GLOBAL__sub_D__ZN12InputCapture18all_input_capturesE>:
 800ae2a:	b580      	push	{r7, lr}
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800ae32:	2000      	movs	r0, #0
 800ae34:	f7ff ffac 	bl	800ad90 <_Z41__static_initialization_and_destruction_0ii>
 800ae38:	bd80      	pop	{r7, pc}

0800ae3a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ae3a:	b580      	push	{r7, lr}
 800ae3c:	b082      	sub	sp, #8
 800ae3e:	af00      	add	r7, sp, #0
 800ae40:	6078      	str	r0, [r7, #4]
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f83c 	bl	800aec0 <_ZNSaIP6StreamED1Ev>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	4618      	mov	r0, r3
 800ae4c:	3708      	adds	r7, #8
 800ae4e:	46bd      	mov	sp, r7
 800ae50:	bd80      	pop	{r7, pc}

0800ae52 <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800ae52:	b580      	push	{r7, lr}
 800ae54:	b082      	sub	sp, #8
 800ae56:	af00      	add	r7, sp, #0
 800ae58:	6078      	str	r0, [r7, #4]
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 f81f 	bl	800aea0 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	4618      	mov	r0, r3
 800ae66:	3708      	adds	r7, #8
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>:
      vector() = default;
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f7ff ffeb 	bl	800ae52 <_ZNSt12_Vector_baseIP6StreamSaIS1_EEC1Ev>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3708      	adds	r7, #8
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}

0800ae86 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>:
 800ae86:	b580      	push	{r7, lr}
 800ae88:	b082      	sub	sp, #8
 800ae8a:	af00      	add	r7, sp, #0
 800ae8c:	6078      	str	r0, [r7, #4]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f000 f88c 	bl	800afae <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	3708      	adds	r7, #8
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	bd80      	pop	{r7, pc}

0800aea0 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800aea0:	b580      	push	{r7, lr}
 800aea2:	b082      	sub	sp, #8
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f8ce 	bl	800b04a <_ZNSaIP6StreamEC1Ev>
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	f000 f8d6 	bl	800b062 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3708      	adds	r7, #8
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <_ZNSaIP6StreamED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	4618      	mov	r0, r3
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr

0800aed6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800aed6:	b580      	push	{r7, lr}
 800aed8:	b082      	sub	sp, #8
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	689a      	ldr	r2, [r3, #8]
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	1ad3      	subs	r3, r2, r3
 800aeec:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800aeee:	461a      	mov	r2, r3
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f8ca 	bl	800b08a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      }
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7ff ff9e 	bl	800ae3a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE12_Vector_implD1Ev>
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	4618      	mov	r0, r3
 800af02:	3708      	adds	r7, #8
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}

0800af08 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800af08:	b580      	push	{r7, lr}
 800af0a:	b082      	sub	sp, #8
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
 800af10:	6878      	ldr	r0, [r7, #4]
 800af12:	f000 f8cd 	bl	800b0b0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	4618      	mov	r0, r3
 800af1a:	3708      	adds	r7, #8
 800af1c:	46bd      	mov	sp, r7
 800af1e:	bd80      	pop	{r7, pc}

0800af20 <_ZNSaISt4pairIK9PrecisionmEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	4618      	mov	r0, r3
 800af2c:	370c      	adds	r7, #12
 800af2e:	46bd      	mov	sp, r7
 800af30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af34:	4770      	bx	lr

0800af36 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>:
      map(initializer_list<value_type> __l,
 800af36:	b5b0      	push	{r4, r5, r7, lr}
 800af38:	b086      	sub	sp, #24
 800af3a:	af00      	add	r7, sp, #0
 800af3c:	60f8      	str	r0, [r7, #12]
 800af3e:	1d38      	adds	r0, r7, #4
 800af40:	e880 0006 	stmia.w	r0, {r1, r2}
 800af44:	603b      	str	r3, [r7, #0]
      : _M_t(__comp, _Pair_alloc_type(__a))
 800af46:	68fc      	ldr	r4, [r7, #12]
 800af48:	f107 0314 	add.w	r3, r7, #20
 800af4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 f8b9 	bl	800b0c6 <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>
 800af54:	f107 0314 	add.w	r3, r7, #20
 800af58:	461a      	mov	r2, r3
 800af5a:	6839      	ldr	r1, [r7, #0]
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 f8c0 	bl	800b0e2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>
 800af62:	f107 0314 	add.w	r3, r7, #20
 800af66:	4618      	mov	r0, r3
 800af68:	f7ff ffda 	bl	800af20 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
      { _M_t._M_insert_range_unique(__l.begin(), __l.end()); }
 800af6c:	68fc      	ldr	r4, [r7, #12]
 800af6e:	1d3b      	adds	r3, r7, #4
 800af70:	4618      	mov	r0, r3
 800af72:	f000 f8d4 	bl	800b11e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800af76:	4605      	mov	r5, r0
 800af78:	1d3b      	adds	r3, r7, #4
 800af7a:	4618      	mov	r0, r3
 800af7c:	f000 f8db 	bl	800b136 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>
 800af80:	4603      	mov	r3, r0
 800af82:	461a      	mov	r2, r3
 800af84:	4629      	mov	r1, r5
 800af86:	4620      	mov	r0, r4
 800af88:	f000 f8e7 	bl	800b15a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	4618      	mov	r0, r3
 800af90:	3718      	adds	r7, #24
 800af92:	46bd      	mov	sp, r7
 800af94:	bdb0      	pop	{r4, r5, r7, pc}

0800af96 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800af96:	b580      	push	{r7, lr}
 800af98:	b082      	sub	sp, #8
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	6078      	str	r0, [r7, #4]
 800af9e:	6878      	ldr	r0, [r7, #4]
 800afa0:	f000 f907 	bl	800b1b2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	4618      	mov	r0, r3
 800afa8:	3708      	adds	r7, #8
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}

0800afae <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800afae:	b580      	push	{r7, lr}
 800afb0:	b082      	sub	sp, #8
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f000 f925 	bl	800b206 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800afbc:	4603      	mov	r3, r0
 800afbe:	4619      	mov	r1, r3
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f000 f901 	bl	800b1c8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7ff ffe4 	bl	800af96 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EED1Ev>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4618      	mov	r0, r3
 800afd2:	3708      	adds	r7, #8
 800afd4:	46bd      	mov	sp, r7
 800afd6:	bd80      	pop	{r7, pc}

0800afd8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
 800afe0:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681a      	ldr	r2, [r3, #0]
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	429a      	cmp	r2, r3
 800afec:	bf0c      	ite	eq
 800afee:	2301      	moveq	r3, #1
 800aff0:	2300      	movne	r3, #0
 800aff2:	b2db      	uxtb	r3, r3
 800aff4:	4618      	mov	r0, r3
 800aff6:	370c      	adds	r7, #12
 800aff8:	46bd      	mov	sp, r7
 800affa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affe:	4770      	bx	lr

0800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	781a      	ldrb	r2, [r3, #0]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	429a      	cmp	r2, r3
 800b016:	bf34      	ite	cc
 800b018:	2301      	movcc	r3, #1
 800b01a:	2300      	movcs	r3, #0
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	4618      	mov	r0, r3
 800b020:	3714      	adds	r7, #20
 800b022:	46bd      	mov	sp, r7
 800b024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b028:	4770      	bx	lr

0800b02a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 800b02a:	b480      	push	{r7}
 800b02c:	b083      	sub	sp, #12
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	601a      	str	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	4618      	mov	r0, r3
 800b040:	370c      	adds	r7, #12
 800b042:	46bd      	mov	sp, r7
 800b044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b048:	4770      	bx	lr

0800b04a <_ZNSaIP6StreamEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b082      	sub	sp, #8
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6878      	ldr	r0, [r7, #4]
 800b054:	f000 fa58 	bl	800b508 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	4618      	mov	r0, r3
 800b05c:	3708      	adds	r7, #8
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}

0800b062 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800b062:	b480      	push	{r7}
 800b064:	b083      	sub	sp, #12
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	605a      	str	r2, [r3, #4]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2200      	movs	r2, #0
 800b07a:	609a      	str	r2, [r3, #8]
	{ }
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	4618      	mov	r0, r3
 800b080:	370c      	adds	r7, #12
 800b082:	46bd      	mov	sp, r7
 800b084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b088:	4770      	bx	lr

0800b08a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800b08a:	b580      	push	{r7, lr}
 800b08c:	b084      	sub	sp, #16
 800b08e:	af00      	add	r7, sp, #0
 800b090:	60f8      	str	r0, [r7, #12]
 800b092:	60b9      	str	r1, [r7, #8]
 800b094:	607a      	str	r2, [r7, #4]
	if (__p)
 800b096:	68bb      	ldr	r3, [r7, #8]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d005      	beq.n	800b0a8 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	687a      	ldr	r2, [r7, #4]
 800b0a0:	68b9      	ldr	r1, [r7, #8]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fa3b 	bl	800b51e <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>
      }
 800b0a8:	bf00      	nop
 800b0aa:	3710      	adds	r7, #16
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b0b0:	b480      	push	{r7}
 800b0b2:	b083      	sub	sp, #12
 800b0b4:	af00      	add	r7, sp, #0
 800b0b6:	6078      	str	r0, [r7, #4]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4618      	mov	r0, r3
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <_ZNSaISt4pairIK9PrecisionmEEC1ERKS3_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b0d0:	6839      	ldr	r1, [r7, #0]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 fa42 	bl	800b55c <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3708      	adds	r7, #8
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EEC1ERKS7_RKS8_>:
      _Rb_tree(const _Compare& __comp,
 800b0e2:	b590      	push	{r4, r7, lr}
 800b0e4:	b087      	sub	sp, #28
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
      : _M_impl(__comp, _Node_allocator(__a)) { }
 800b0ee:	68fc      	ldr	r4, [r7, #12]
 800b0f0:	f107 0314 	add.w	r3, r7, #20
 800b0f4:	6879      	ldr	r1, [r7, #4]
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f000 fa3c 	bl	800b574 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>
 800b0fc:	f107 0314 	add.w	r3, r7, #20
 800b100:	461a      	mov	r2, r3
 800b102:	68b9      	ldr	r1, [r7, #8]
 800b104:	4620      	mov	r0, r4
 800b106:	f000 fa42 	bl	800b58e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>
 800b10a:	f107 0314 	add.w	r3, r7, #20
 800b10e:	4618      	mov	r0, r3
 800b110:	f000 f84f 	bl	800b1b2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4618      	mov	r0, r3
 800b118:	371c      	adds	r7, #28
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd90      	pop	{r4, r7, pc}

0800b11e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>:
      begin() const noexcept { return _M_array; }
 800b11e:	b480      	push	{r7}
 800b120:	b083      	sub	sp, #12
 800b122:	af00      	add	r7, sp, #0
 800b124:	6078      	str	r0, [r7, #4]
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	370c      	adds	r7, #12
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE3endEv>:
      end() const noexcept { return begin() + size(); }
 800b136:	b590      	push	{r4, r7, lr}
 800b138:	b083      	sub	sp, #12
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f7ff ffed 	bl	800b11e <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE5beginEv>
 800b144:	4604      	mov	r4, r0
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 fa3e 	bl	800b5c8 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>
 800b14c:	4603      	mov	r3, r0
 800b14e:	00db      	lsls	r3, r3, #3
 800b150:	4423      	add	r3, r4
 800b152:	4618      	mov	r0, r3
 800b154:	370c      	adds	r7, #12
 800b156:	46bd      	mov	sp, r7
 800b158:	bd90      	pop	{r4, r7, pc}

0800b15a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_>:
	_M_insert_range_unique(_InputIterator __first, _InputIterator __last)
 800b15a:	b580      	push	{r7, lr}
 800b15c:	b088      	sub	sp, #32
 800b15e:	af00      	add	r7, sp, #0
 800b160:	60f8      	str	r0, [r7, #12]
 800b162:	60b9      	str	r1, [r7, #8]
 800b164:	607a      	str	r2, [r7, #4]
	  _Alloc_node __an(*this);
 800b166:	f107 0314 	add.w	r3, r7, #20
 800b16a:	68f9      	ldr	r1, [r7, #12]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f000 fa37 	bl	800b5e0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>
	  for (; __first != __last; ++__first)
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	429a      	cmp	r2, r3
 800b178:	d017      	beq.n	800b1aa <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x50>
	    _M_insert_unique_(end(), *__first, __an);
 800b17a:	68f8      	ldr	r0, [r7, #12]
 800b17c:	f000 f84f 	bl	800b21e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 800b180:	4603      	mov	r3, r0
 800b182:	61fb      	str	r3, [r7, #28]
 800b184:	f107 021c 	add.w	r2, r7, #28
 800b188:	f107 0318 	add.w	r3, r7, #24
 800b18c:	4611      	mov	r1, r2
 800b18e:	4618      	mov	r0, r3
 800b190:	f7ff ff4b 	bl	800b02a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
 800b194:	f107 0314 	add.w	r3, r7, #20
 800b198:	68ba      	ldr	r2, [r7, #8]
 800b19a:	69b9      	ldr	r1, [r7, #24]
 800b19c:	68f8      	ldr	r0, [r7, #12]
 800b19e:	f000 fa2e 	bl	800b5fe <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>
	  for (; __first != __last; ++__first)
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	60bb      	str	r3, [r7, #8]
 800b1a8:	e7e3      	b.n	800b172 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_insert_range_uniqueIPKS3_EENSt9enable_ifIXsrSt7is_sameIS3_NSt15iterator_traitsIT_E10value_typeEE5valueEvE4typeESG_SG_+0x18>
	}
 800b1aa:	bf00      	nop
 800b1ac:	3720      	adds	r7, #32
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	bd80      	pop	{r7, pc}

0800b1b2 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	4618      	mov	r0, r3
 800b1be:	370c      	adds	r7, #12
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c6:	4770      	bx	lr

0800b1c8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b084      	sub	sp, #16
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
 800b1d0:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d012      	beq.n	800b1fe <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0x36>
	  _M_erase(_S_right(__x));
 800b1d8:	6838      	ldr	r0, [r7, #0]
 800b1da:	f000 fa43 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff fff0 	bl	800b1c8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E>
	  _Link_type __y = _S_left(__x);
 800b1e8:	6838      	ldr	r0, [r7, #0]
 800b1ea:	f000 fa47 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b1ee:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 f968 	bl	800b4c8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	  __x = __y;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800b1fc:	e7e9      	b.n	800b1d2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_eraseEPSt13_Rb_tree_nodeIS3_E+0xa>
    }
 800b1fe:	bf00      	nop
 800b200:	3710      	adds	r7, #16
 800b202:	46bd      	mov	sp, r7
 800b204:	bd80      	pop	{r7, pc}

0800b206 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800b206:	b480      	push	{r7}
 800b208:	b083      	sub	sp, #12
 800b20a:	af00      	add	r7, sp, #0
 800b20c:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	4618      	mov	r0, r3
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr

0800b21e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800b21e:	b580      	push	{r7, lr}
 800b220:	b084      	sub	sp, #16
 800b222:	af00      	add	r7, sp, #0
 800b224:	6078      	str	r0, [r7, #4]
      { return iterator(&this->_M_impl._M_header); }
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	1d1a      	adds	r2, r3, #4
 800b22a:	f107 030c 	add.w	r3, r7, #12
 800b22e:	4611      	mov	r1, r2
 800b230:	4618      	mov	r0, r3
 800b232:	f000 f95a 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr()
 800b240:	b580      	push	{r7, lr}
 800b242:	b082      	sub	sp, #8
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	3310      	adds	r3, #16
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 fa2d 	bl	800b6ac <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b252:	4603      	mov	r3, r0
 800b254:	4618      	mov	r0, r3
 800b256:	3708      	adds	r7, #8
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}

0800b25c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b25c:	b590      	push	{r4, r7, lr}
 800b25e:	b08d      	sub	sp, #52	; 0x34
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
 800b268:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 800b26a:	1d3b      	adds	r3, r7, #4
 800b26c:	4618      	mov	r0, r3
 800b26e:	f000 fa3a 	bl	800b6e6 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>
 800b272:	4603      	mov	r3, r0
 800b274:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 800b276:	69bc      	ldr	r4, [r7, #24]
 800b278:	68b8      	ldr	r0, [r7, #8]
 800b27a:	f000 fa0b 	bl	800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b27e:	4603      	mov	r3, r0
 800b280:	429c      	cmp	r4, r3
 800b282:	bf0c      	ite	eq
 800b284:	2301      	moveq	r3, #1
 800b286:	2300      	movne	r3, #0
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d030      	beq.n	800b2f0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x94>
	  if (size() > 0
 800b28e:	68b8      	ldr	r0, [r7, #8]
 800b290:	f000 fa3a 	bl	800b708 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>
 800b294:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 800b296:	2b00      	cmp	r3, #0
 800b298:	d013      	beq.n	800b2c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b29a:	68bc      	ldr	r4, [r7, #8]
 800b29c:	68b8      	ldr	r0, [r7, #8]
 800b29e:	f000 fa3f 	bl	800b720 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f000 fa46 	bl	800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	683a      	ldr	r2, [r7, #0]
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f7ff fea4 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d001      	beq.n	800b2c2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x66>
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e000      	b.n	800b2c4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x68>
 800b2c2:	2300      	movs	r3, #0
	  if (size() > 0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d00c      	beq.n	800b2e2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x86>
	    return _Res(0, _M_rightmost());
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	61fb      	str	r3, [r7, #28]
 800b2cc:	68b8      	ldr	r0, [r7, #8]
 800b2ce:	f000 fa27 	bl	800b720 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b2d2:	4602      	mov	r2, r0
 800b2d4:	f107 031c 	add.w	r3, r7, #28
 800b2d8:	4619      	mov	r1, r3
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7f6 fde4 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b2e0:	e0db      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	683a      	ldr	r2, [r7, #0]
 800b2e6:	68b9      	ldr	r1, [r7, #8]
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	f000 fa31 	bl	800b750 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b2ee:	e0d4      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 800b2f0:	68bc      	ldr	r4, [r7, #8]
 800b2f2:	69bb      	ldr	r3, [r7, #24]
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	f000 fa1f 	bl	800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	461a      	mov	r2, r3
 800b2fe:	6839      	ldr	r1, [r7, #0]
 800b300:	4620      	mov	r0, r4
 800b302:	f7ff fe7d 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d057      	beq.n	800b3bc <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x160>
	  iterator __before = __pos;
 800b30c:	69bb      	ldr	r3, [r7, #24]
 800b30e:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 800b310:	69bc      	ldr	r4, [r7, #24]
 800b312:	68b8      	ldr	r0, [r7, #8]
 800b314:	f000 faa1 	bl	800b85a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b318:	4603      	mov	r3, r0
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	429c      	cmp	r4, r3
 800b31e:	bf0c      	ite	eq
 800b320:	2301      	moveq	r3, #1
 800b322:	2300      	movne	r3, #0
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b00      	cmp	r3, #0
 800b328:	d00d      	beq.n	800b346 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 800b32a:	68b8      	ldr	r0, [r7, #8]
 800b32c:	f000 fa95 	bl	800b85a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b330:	4604      	mov	r4, r0
 800b332:	68b8      	ldr	r0, [r7, #8]
 800b334:	f000 fa91 	bl	800b85a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>
 800b338:	4603      	mov	r3, r0
 800b33a:	461a      	mov	r2, r3
 800b33c:	4621      	mov	r1, r4
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f7f6 fe5e 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b344:	e0a9      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 800b346:	68bc      	ldr	r4, [r7, #8]
 800b348:	f107 0314 	add.w	r3, r7, #20
 800b34c:	4618      	mov	r0, r3
 800b34e:	f000 fa90 	bl	800b872 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
 800b352:	4603      	mov	r3, r0
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	4618      	mov	r0, r3
 800b358:	f000 f9ee 	bl	800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b35c:	4603      	mov	r3, r0
 800b35e:	683a      	ldr	r2, [r7, #0]
 800b360:	4619      	mov	r1, r3
 800b362:	4620      	mov	r0, r4
 800b364:	f7ff fe4c 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d01f      	beq.n	800b3ae <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x152>
	      if (_S_right(__before._M_node) == 0)
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	4618      	mov	r0, r3
 800b372:	f000 f977 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	bf0c      	ite	eq
 800b37c:	2301      	moveq	r3, #1
 800b37e:	2300      	movne	r3, #0
 800b380:	b2db      	uxtb	r3, r3
 800b382:	2b00      	cmp	r3, #0
 800b384:	d00a      	beq.n	800b39c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x140>
		return _Res(0, __before._M_node);
 800b386:	2300      	movs	r3, #0
 800b388:	623b      	str	r3, [r7, #32]
 800b38a:	f107 0214 	add.w	r2, r7, #20
 800b38e:	f107 0320 	add.w	r3, r7, #32
 800b392:	4619      	mov	r1, r3
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f7f6 fd87 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b39a:	e07e      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 800b39c:	f107 0218 	add.w	r2, r7, #24
 800b3a0:	f107 0318 	add.w	r3, r7, #24
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	68f8      	ldr	r0, [r7, #12]
 800b3a8:	f7f6 fe2a 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b3ac:	e075      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	683a      	ldr	r2, [r7, #0]
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f000 f9cb 	bl	800b750 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b3ba:	e06e      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800b3bc:	68bc      	ldr	r4, [r7, #8]
 800b3be:	69bb      	ldr	r3, [r7, #24]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 f9b9 	bl	800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	4619      	mov	r1, r3
 800b3cc:	4620      	mov	r0, r4
 800b3ce:	f7ff fe17 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d056      	beq.n	800b486 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x22a>
	  iterator __after = __pos;
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 800b3dc:	69bc      	ldr	r4, [r7, #24]
 800b3de:	68b8      	ldr	r0, [r7, #8]
 800b3e0:	f000 f99e 	bl	800b720 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	429c      	cmp	r4, r3
 800b3ea:	bf0c      	ite	eq
 800b3ec:	2301      	moveq	r3, #1
 800b3ee:	2300      	movne	r3, #0
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00c      	beq.n	800b410 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x1b4>
	    return _Res(0, _M_rightmost());
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	627b      	str	r3, [r7, #36]	; 0x24
 800b3fa:	68b8      	ldr	r0, [r7, #8]
 800b3fc:	f000 f990 	bl	800b720 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>
 800b400:	4602      	mov	r2, r0
 800b402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b406:	4619      	mov	r1, r3
 800b408:	68f8      	ldr	r0, [r7, #12]
 800b40a:	f7f6 fd4d 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b40e:	e044      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800b410:	68bc      	ldr	r4, [r7, #8]
 800b412:	f107 0310 	add.w	r3, r7, #16
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fa3c 	bl	800b894 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>
 800b41c:	4603      	mov	r3, r0
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4618      	mov	r0, r3
 800b422:	f000 f989 	bl	800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b426:	4603      	mov	r3, r0
 800b428:	461a      	mov	r2, r3
 800b42a:	6839      	ldr	r1, [r7, #0]
 800b42c:	4620      	mov	r0, r4
 800b42e:	f7ff fde7 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b432:	4603      	mov	r3, r0
 800b434:	2b00      	cmp	r3, #0
 800b436:	d01f      	beq.n	800b478 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 f912 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b440:	4603      	mov	r3, r0
 800b442:	2b00      	cmp	r3, #0
 800b444:	bf0c      	ite	eq
 800b446:	2301      	moveq	r3, #1
 800b448:	2300      	movne	r3, #0
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d00a      	beq.n	800b466 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x20a>
		return _Res(0, __pos._M_node);
 800b450:	2300      	movs	r3, #0
 800b452:	62bb      	str	r3, [r7, #40]	; 0x28
 800b454:	f107 0218 	add.w	r2, r7, #24
 800b458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800b45c:	4619      	mov	r1, r3
 800b45e:	68f8      	ldr	r0, [r7, #12]
 800b460:	f7f6 fd22 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 800b464:	e019      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 800b466:	f107 0210 	add.w	r2, r7, #16
 800b46a:	f107 0310 	add.w	r3, r7, #16
 800b46e:	4619      	mov	r1, r3
 800b470:	68f8      	ldr	r0, [r7, #12]
 800b472:	f7f6 fdc5 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 800b476:	e010      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	683a      	ldr	r2, [r7, #0]
 800b47c:	68b9      	ldr	r1, [r7, #8]
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 f966 	bl	800b750 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>
 800b484:	e009      	b.n	800b49a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_+0x23e>
	return _Res(__pos._M_node, 0);
 800b486:	2300      	movs	r3, #0
 800b488:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b48a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800b48e:	f107 0318 	add.w	r3, r7, #24
 800b492:	4619      	mov	r1, r3
 800b494:	68f8      	ldr	r0, [r7, #12]
 800b496:	f7f6 fdee 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b49a:	68f8      	ldr	r0, [r7, #12]
 800b49c:	3734      	adds	r7, #52	; 0x34
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd90      	pop	{r4, r7, pc}

0800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>:
      _S_key(_Const_Link_type __x)
 800b4a2:	b580      	push	{r7, lr}
 800b4a4:	b084      	sub	sp, #16
 800b4a6:	af00      	add	r7, sp, #0
 800b4a8:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 800b4aa:	6878      	ldr	r0, [r7, #4]
 800b4ac:	f000 fa03 	bl	800b8b6 <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	f107 030c 	add.w	r3, r7, #12
 800b4b6:	4611      	mov	r1, r2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f000 fa0a 	bl	800b8d2 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b4be:	4603      	mov	r3, r0
      }
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	3710      	adds	r7, #16
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	bd80      	pop	{r7, pc}

0800b4c8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fa08 	bl	800b8ea <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>
	_M_put_node(__p);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 fa19 	bl	800b914 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>
      }
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}

0800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>:
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b4ea:	b480      	push	{r7}
 800b4ec:	b083      	sub	sp, #12
 800b4ee:	af00      	add	r7, sp, #0
 800b4f0:	6078      	str	r0, [r7, #4]
 800b4f2:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	601a      	str	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	4618      	mov	r0, r3
 800b4fe:	370c      	adds	r7, #12
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <_ZN9__gnu_cxx13new_allocatorIP6StreamEC1Ev>:
 800b508:	b480      	push	{r7}
 800b50a:	b083      	sub	sp, #12
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	4618      	mov	r0, r3
 800b514:	370c      	adds	r7, #12
 800b516:	46bd      	mov	sp, r7
 800b518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b51c:	4770      	bx	lr

0800b51e <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800b51e:	b580      	push	{r7, lr}
 800b520:	b088      	sub	sp, #32
 800b522:	af00      	add	r7, sp, #0
 800b524:	60f8      	str	r0, [r7, #12]
 800b526:	60b9      	str	r1, [r7, #8]
 800b528:	607a      	str	r2, [r7, #4]
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	61fb      	str	r3, [r7, #28]
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	61bb      	str	r3, [r7, #24]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800b536:	f7f4 fef3 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800b53a:	4603      	mov	r3, r0
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d003      	beq.n	800b548 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800b540:	69b8      	ldr	r0, [r7, #24]
 800b542:	f014 ffff 	bl	8020544 <_ZdlPv>
	    return;
 800b546:	e005      	b.n	800b554 <_ZNSt16allocator_traitsISaIP6StreamEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800b548:	697a      	ldr	r2, [r7, #20]
 800b54a:	69b9      	ldr	r1, [r7, #24]
 800b54c:	69f8      	ldr	r0, [r7, #28]
 800b54e:	f000 fb4a 	bl	800bbe6 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800b552:	bf00      	nop
 800b554:	bf00      	nop
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <_ZN9__gnu_cxx13new_allocatorISt4pairIK9PrecisionmEEC1ERKS5_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800b55c:	b480      	push	{r7}
 800b55e:	b083      	sub	sp, #12
 800b560:	af00      	add	r7, sp, #0
 800b562:	6078      	str	r0, [r7, #4]
 800b564:	6039      	str	r1, [r7, #0]
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	4618      	mov	r0, r3
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1IS3_EERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800b574:	b580      	push	{r7, lr}
 800b576:	b082      	sub	sp, #8
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f9f3 	bl	800b96a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	4618      	mov	r0, r3
 800b588:	3708      	adds	r7, #8
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd80      	pop	{r7, pc}

0800b58e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE13_Rb_tree_implIS7_Lb1EEC1ERKS7_OSaISt13_Rb_tree_nodeIS3_EE>:
	  _Rb_tree_impl(const _Key_compare& __comp, _Node_allocator&& __a)
 800b58e:	b580      	push	{r7, lr}
 800b590:	b084      	sub	sp, #16
 800b592:	af00      	add	r7, sp, #0
 800b594:	60f8      	str	r0, [r7, #12]
 800b596:	60b9      	str	r1, [r7, #8]
 800b598:	607a      	str	r2, [r7, #4]
	  : _Node_allocator(std::move(__a)), _Base_key_compare(__comp)
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f9f0 	bl	800b980 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>
 800b5a0:	4603      	mov	r3, r0
 800b5a2:	4619      	mov	r1, r3
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 f9f6 	bl	800b996 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	68b9      	ldr	r1, [r7, #8]
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	f000 f9ff 	bl	800b9b2 <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7f4 fec5 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}

0800b5c8 <_ZNKSt16initializer_listISt4pairIK9PrecisionmEE4sizeEv>:
      size() const noexcept { return _M_len; }
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	370c      	adds	r7, #12
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5de:	4770      	bx	lr

0800b5e0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeC1ERS9_>:
	_Alloc_node(_Rb_tree& __t)
 800b5e0:	b480      	push	{r7}
 800b5e2:	b083      	sub	sp, #12
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
	: _M_t(__t) { }
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	683a      	ldr	r2, [r7, #0]
 800b5ee:	601a      	str	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b5fe:	b5b0      	push	{r4, r5, r7, lr}
 800b600:	b08a      	sub	sp, #40	; 0x28
 800b602:	af02      	add	r7, sp, #8
 800b604:	60f8      	str	r0, [r7, #12]
 800b606:	60b9      	str	r1, [r7, #8]
 800b608:	607a      	str	r2, [r7, #4]
 800b60a:	603b      	str	r3, [r7, #0]
	= _M_get_insert_hint_unique_pos(__position, _KeyOfValue()(__v));
 800b60c:	f107 0318 	add.w	r3, r7, #24
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	4618      	mov	r0, r3
 800b614:	f000 f95d 	bl	800b8d2 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800b618:	4603      	mov	r3, r0
 800b61a:	f107 0010 	add.w	r0, r7, #16
 800b61e:	68ba      	ldr	r2, [r7, #8]
 800b620:	68f9      	ldr	r1, [r7, #12]
 800b622:	f7ff fe1b 	bl	800b25c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
      if (__res.second)
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d00f      	beq.n	800b64c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x4e>
	return _M_insert_(__res.first, __res.second,
 800b62c:	693c      	ldr	r4, [r7, #16]
 800b62e:	697d      	ldr	r5, [r7, #20]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f9ca 	bl	800b9ca <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800b636:	4602      	mov	r2, r0
 800b638:	683b      	ldr	r3, [r7, #0]
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	4613      	mov	r3, r2
 800b63e:	462a      	mov	r2, r5
 800b640:	4621      	mov	r1, r4
 800b642:	68f8      	ldr	r0, [r7, #12]
 800b644:	f000 f9cc 	bl	800b9e0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>
 800b648:	4603      	mov	r3, r0
			  __node_gen);
 800b64a:	e007      	b.n	800b65c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_insert_unique_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EOT_RT0_+0x5e>
      return iterator(__res.first);
 800b64c:	693a      	ldr	r2, [r7, #16]
 800b64e:	f107 031c 	add.w	r3, r7, #28
 800b652:	4611      	mov	r1, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f7ff ff48 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b65a:	69fb      	ldr	r3, [r7, #28]
    }
 800b65c:	4618      	mov	r0, r3
 800b65e:	3720      	adds	r7, #32
 800b660:	46bd      	mov	sp, r7
 800b662:	bdb0      	pop	{r4, r5, r7, pc}

0800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b664:	b480      	push	{r7}
 800b666:	b083      	sub	sp, #12
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	4618      	mov	r0, r3
 800b68a:	370c      	adds	r7, #12
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 800b694:	b480      	push	{r7}
 800b696:	b083      	sub	sp, #12
 800b698:	af00      	add	r7, sp, #0
 800b69a:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	3304      	adds	r3, #4
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	370c      	adds	r7, #12
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6aa:	4770      	bx	lr

0800b6ac <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() noexcept
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b082      	sub	sp, #8
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
      { return static_cast<_Tp*>(_M_addr()); }
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f9dc 	bl	800ba72 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3708      	adds	r7, #8
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>:
      _M_get_node()
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 800b6cc:	6878      	ldr	r0, [r7, #4]
 800b6ce:	f000 f9db 	bl	800ba88 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2101      	movs	r1, #1
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f000 f9e1 	bl	800ba9e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 800b6e6:	b580      	push	{r7, lr}
 800b6e8:	b084      	sub	sp, #16
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	f107 030c 	add.w	r3, r7, #12
 800b6f6:	4611      	mov	r1, r2
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	f7ff fef6 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	4618      	mov	r0, r3
 800b702:	3710      	adds	r7, #16
 800b704:	46bd      	mov	sp, r7
 800b706:	bd80      	pop	{r7, pc}

0800b708 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	695b      	ldr	r3, [r3, #20]
 800b714:	4618      	mov	r0, r3
 800b716:	370c      	adds	r7, #12
 800b718:	46bd      	mov	sp, r7
 800b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71e:	4770      	bx	lr

0800b720 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 800b720:	b480      	push	{r7}
 800b722:	b083      	sub	sp, #12
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	3310      	adds	r3, #16
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 800b738:	b580      	push	{r7, lr}
 800b73a:	b082      	sub	sp, #8
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f7ff feae 	bl	800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b746:	4603      	mov	r3, r0
 800b748:	4618      	mov	r0, r3
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b750:	b590      	push	{r4, r7, lr}
 800b752:	b08b      	sub	sp, #44	; 0x2c
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 800b75c:	68b8      	ldr	r0, [r7, #8]
 800b75e:	f7ff fd52 	bl	800b206 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 800b762:	4603      	mov	r3, r0
 800b764:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 800b766:	68b8      	ldr	r0, [r7, #8]
 800b768:	f7ff ff94 	bl	800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b76c:	4603      	mov	r3, r0
 800b76e:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 800b770:	2301      	movs	r3, #1
 800b772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d020      	beq.n	800b7be <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6e>
	  __y = __x;
 800b77c:	69bb      	ldr	r3, [r7, #24]
 800b77e:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 800b780:	68bc      	ldr	r4, [r7, #8]
 800b782:	69bb      	ldr	r3, [r7, #24]
 800b784:	4618      	mov	r0, r3
 800b786:	f7ff fe8c 	bl	800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 800b78a:	4603      	mov	r3, r0
 800b78c:	461a      	mov	r2, r3
 800b78e:	6879      	ldr	r1, [r7, #4]
 800b790:	4620      	mov	r0, r4
 800b792:	f7ff fc35 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b796:	4603      	mov	r3, r0
 800b798:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 800b79c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d005      	beq.n	800b7b0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x60>
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7ff ff68 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	e004      	b.n	800b7ba <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x6a>
 800b7b0:	69bb      	ldr	r3, [r7, #24]
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7ff ff56 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 800b7bc:	e7db      	b.n	800b776 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x26>
      iterator __j = iterator(__y);
 800b7be:	697a      	ldr	r2, [r7, #20]
 800b7c0:	f107 0310 	add.w	r3, r7, #16
 800b7c4:	4611      	mov	r1, r2
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff fe8f 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 800b7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d01d      	beq.n	800b810 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xc0>
	  if (__j == begin())
 800b7d4:	68b8      	ldr	r0, [r7, #8]
 800b7d6:	f000 f985 	bl	800bae4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>
 800b7da:	4603      	mov	r3, r0
 800b7dc:	61fb      	str	r3, [r7, #28]
 800b7de:	f107 021c 	add.w	r2, r7, #28
 800b7e2:	f107 0310 	add.w	r3, r7, #16
 800b7e6:	4611      	mov	r1, r2
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f7ff fbf5 	bl	800afd8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d008      	beq.n	800b806 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xb6>
	    return _Res(__x, __y);
 800b7f4:	f107 0214 	add.w	r2, r7, #20
 800b7f8:	f107 0318 	add.w	r3, r7, #24
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f000 f981 	bl	800bb06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b804:	e025      	b.n	800b852 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
	    --__j;
 800b806:	f107 0310 	add.w	r3, r7, #16
 800b80a:	4618      	mov	r0, r3
 800b80c:	f000 f831 	bl	800b872 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 800b810:	68bc      	ldr	r4, [r7, #8]
 800b812:	693b      	ldr	r3, [r7, #16]
 800b814:	4618      	mov	r0, r3
 800b816:	f7ff ff8f 	bl	800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800b81a:	4603      	mov	r3, r0
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	4619      	mov	r1, r3
 800b820:	4620      	mov	r0, r4
 800b822:	f7ff fbed 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800b826:	4603      	mov	r3, r0
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d008      	beq.n	800b83e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0xee>
	return _Res(__x, __y);
 800b82c:	f107 0214 	add.w	r2, r7, #20
 800b830:	f107 0318 	add.w	r3, r7, #24
 800b834:	4619      	mov	r1, r3
 800b836:	68f8      	ldr	r0, [r7, #12]
 800b838:	f000 f965 	bl	800bb06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>
 800b83c:	e009      	b.n	800b852 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE24_M_get_insert_unique_posERS2_+0x102>
      return _Res(__j._M_node, 0);
 800b83e:	2300      	movs	r3, #0
 800b840:	623b      	str	r3, [r7, #32]
 800b842:	f107 0220 	add.w	r2, r7, #32
 800b846:	f107 0310 	add.w	r3, r7, #16
 800b84a:	4619      	mov	r1, r3
 800b84c:	68f8      	ldr	r0, [r7, #12]
 800b84e:	f7f6 fc12 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	372c      	adds	r7, #44	; 0x2c
 800b856:	46bd      	mov	sp, r7
 800b858:	bd90      	pop	{r4, r7, pc}

0800b85a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 800b85a:	b480      	push	{r7}
 800b85c:	b083      	sub	sp, #12
 800b85e:	af00      	add	r7, sp, #0
 800b860:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	330c      	adds	r3, #12
 800b866:	4618      	mov	r0, r3
 800b868:	370c      	adds	r7, #12
 800b86a:	46bd      	mov	sp, r7
 800b86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b870:	4770      	bx	lr

0800b872 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 800b872:	b580      	push	{r7, lr}
 800b874:	b082      	sub	sp, #8
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4618      	mov	r0, r3
 800b880:	f014 fece 	bl	8020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 800b884:	4602      	mov	r2, r0
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	601a      	str	r2, [r3, #0]
	return *this;
 800b88a:	687b      	ldr	r3, [r7, #4]
      }
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_increment(_M_node);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	f014 febb 	bl	802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	601a      	str	r2, [r3, #0]
	return *this;
 800b8ac:	687b      	ldr	r3, [r7, #4]
      }
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3708      	adds	r7, #8
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <_ZNKSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>:
      _M_valptr() const
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b082      	sub	sp, #8
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	3310      	adds	r3, #16
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f000 f938 	bl	800bb38 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>:
      operator()(const _Pair& __x) const
 800b8d2:	b480      	push	{r7}
 800b8d4:	b083      	sub	sp, #12
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
 800b8da:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	4618      	mov	r0, r3
 800b8e0:	370c      	adds	r7, #12
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b8ea:	b590      	push	{r4, r7, lr}
 800b8ec:	b083      	sub	sp, #12
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
 800b8f2:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800b8f4:	6878      	ldr	r0, [r7, #4]
 800b8f6:	f000 f8c7 	bl	800ba88 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	6838      	ldr	r0, [r7, #0]
 800b8fe:	f7ff fc9f 	bl	800b240 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800b902:	4603      	mov	r3, r0
 800b904:	4619      	mov	r1, r3
 800b906:	4620      	mov	r0, r4
 800b908:	f000 f922 	bl	800bb50 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>
      }
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	bd90      	pop	{r4, r7, pc}

0800b914 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS3_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 f8b2 	bl	800ba88 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800b924:	4603      	mov	r3, r0
 800b926:	2201      	movs	r2, #1
 800b928:	6839      	ldr	r1, [r7, #0]
 800b92a:	4618      	mov	r0, r3
 800b92c:	f000 f91c 	bl	800bb68 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>
 800b930:	bf00      	nop
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800b938:	b480      	push	{r7}
 800b93a:	b083      	sub	sp, #12
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4618      	mov	r0, r3
 800b944:	370c      	adds	r7, #12
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	60f8      	str	r0, [r7, #12]
 800b956:	60b9      	str	r1, [r7, #8]
 800b958:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800b95a:	68b9      	ldr	r1, [r7, #8]
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 f92c 	bl	800bbba <_ZSt8_DestroyIPP6StreamEvT_S3_>
    }
 800b962:	bf00      	nop
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}

0800b96a <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800b96a:	b480      	push	{r7}
 800b96c:	b083      	sub	sp, #12
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4618      	mov	r0, r3
 800b976:	370c      	adds	r7, #12
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <_ZSt4moveIRSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 800b980:	b480      	push	{r7}
 800b982:	b083      	sub	sp, #12
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	4618      	mov	r0, r3
 800b98c:	370c      	adds	r7, #12
 800b98e:	46bd      	mov	sp, r7
 800b990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b994:	4770      	bx	lr

0800b996 <_ZNSaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS5_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 800b996:	b580      	push	{r7, lr}
 800b998:	b082      	sub	sp, #8
 800b99a:	af00      	add	r7, sp, #0
 800b99c:	6078      	str	r0, [r7, #4]
 800b99e:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 800b9a0:	6839      	ldr	r1, [r7, #0]
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f92e 	bl	800bc04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}

0800b9b2 <_ZNSt20_Rb_tree_key_compareISt4lessI9PrecisionEEC1ERKS2_>:
      _Rb_tree_key_compare(const _Key_compare& __comp)
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
      { }
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	370c      	adds	r7, #12
 800b9c2:	46bd      	mov	sp, r7
 800b9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c8:	4770      	bx	lr

0800b9ca <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800b9ca:	b480      	push	{r7}
 800b9cc:	b083      	sub	sp, #12
 800b9ce:	af00      	add	r7, sp, #0
 800b9d0:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	370c      	adds	r7, #12
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9de:	4770      	bx	lr

0800b9e0 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800b9e0:	b5b0      	push	{r4, r5, r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	60f8      	str	r0, [r7, #12]
 800b9e8:	60b9      	str	r1, [r7, #8]
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	603b      	str	r3, [r7, #0]
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d11a      	bne.n	800ba2a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
	bool __insert_left = (__x != 0 || __p == _M_end()
 800b9f4:	68f8      	ldr	r0, [r7, #12]
 800b9f6:	f7ff fe4d 	bl	800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d013      	beq.n	800ba2a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4a>
			      || _M_impl._M_key_compare(_KeyOfValue()(__v),
 800ba02:	68fc      	ldr	r4, [r7, #12]
 800ba04:	f107 0310 	add.w	r3, r7, #16
 800ba08:	6839      	ldr	r1, [r7, #0]
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff ff61 	bl	800b8d2 <_ZNKSt10_Select1stISt4pairIK9PrecisionmEEclERKS3_>
 800ba10:	4605      	mov	r5, r0
 800ba12:	6878      	ldr	r0, [r7, #4]
 800ba14:	f7ff fe90 	bl	800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 800ba18:	4603      	mov	r3, r0
 800ba1a:	461a      	mov	r2, r3
 800ba1c:	4629      	mov	r1, r5
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f7ff faee 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800ba24:	4603      	mov	r3, r0
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d001      	beq.n	800ba2e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x4e>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	e000      	b.n	800ba30 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE10_M_insert_IRKS3_NS9_11_Alloc_nodeEEESt17_Rb_tree_iteratorIS3_EPSt18_Rb_tree_node_baseSH_OT_RT0_+0x50>
 800ba2e:	2300      	movs	r3, #0
	bool __insert_left = (__x != 0 || __p == _M_end()
 800ba30:	77fb      	strb	r3, [r7, #31]
	_Link_type __z = __node_gen(_GLIBCXX_FORWARD(_Arg, __v));
 800ba32:	6838      	ldr	r0, [r7, #0]
 800ba34:	f7ff ffc9 	bl	800b9ca <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	4619      	mov	r1, r3
 800ba3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ba3e:	f000 f8ed 	bl	800bc1c <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>
 800ba42:	61b8      	str	r0, [r7, #24]
				      this->_M_impl._M_header);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	3304      	adds	r3, #4
	_Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 800ba48:	7ff8      	ldrb	r0, [r7, #31]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	69b9      	ldr	r1, [r7, #24]
 800ba4e:	f014 fde9 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
	++_M_impl._M_node_count;
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	1c5a      	adds	r2, r3, #1
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	615a      	str	r2, [r3, #20]
	return iterator(__z);
 800ba5c:	f107 0314 	add.w	r3, r7, #20
 800ba60:	69b9      	ldr	r1, [r7, #24]
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7ff fd41 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800ba68:	697b      	ldr	r3, [r7, #20]
      }
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3720      	adds	r7, #32
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bdb0      	pop	{r4, r5, r7, pc}

0800ba72 <_ZN9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() noexcept
 800ba72:	b480      	push	{r7}
 800ba74:	b083      	sub	sp, #12
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
      { return static_cast<void*>(&_M_storage); }
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j>:
      allocate(allocator_type& __a, size_type __n)
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	6039      	str	r1, [r7, #0]
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	60fb      	str	r3, [r7, #12]
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800bab0:	f7f4 fc36 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d009      	beq.n	800bace <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	4613      	mov	r3, r2
 800babe:	005b      	lsls	r3, r3, #1
 800bac0:	4413      	add	r3, r2
 800bac2:	00db      	lsls	r3, r3, #3
 800bac4:	4618      	mov	r0, r3
 800bac6:	f014 fd41 	bl	802054c <_Znwj>
 800baca:	4603      	mov	r3, r0
 800bacc:	e006      	b.n	800badc <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE8allocateERS6_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800bace:	2200      	movs	r2, #0
 800bad0:	68b9      	ldr	r1, [r7, #8]
 800bad2:	68f8      	ldr	r0, [r7, #12]
 800bad4:	f000 f910 	bl	800bcf8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>
 800bad8:	4603      	mov	r3, r0
 800bada:	bf00      	nop
      { return __a.allocate(__n); }
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_header._M_left); }
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68da      	ldr	r2, [r3, #12]
 800baf0:	f107 030c 	add.w	r3, r7, #12
 800baf4:	4611      	mov	r1, r2
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff fcf7 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IK9PrecisionmEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	60b9      	str	r1, [r7, #8]
 800bb10:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 800bb12:	68b8      	ldr	r0, [r7, #8]
 800bb14:	f000 f896 	bl	800bc44 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	681a      	ldr	r2, [r3, #0]
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	601a      	str	r2, [r3, #0]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	f7f6 fe44 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 800bb26:	4603      	mov	r3, r0
 800bb28:	681a      	ldr	r2, [r3, #0]
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	605a      	str	r2, [r3, #4]
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	4618      	mov	r0, r3
 800bb32:	3710      	adds	r7, #16
 800bb34:	46bd      	mov	sp, r7
 800bb36:	bd80      	pop	{r7, pc}

0800bb38 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE6_M_ptrEv>:
      _M_ptr() const noexcept
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f88a 	bl	800bc5a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>
 800bb46:	4603      	mov	r3, r0
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3708      	adds	r7, #8
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE7destroyIS4_EEvRS6_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b082      	sub	sp, #8
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800bb5a:	6838      	ldr	r0, [r7, #0]
 800bb5c:	f000 f888 	bl	800bc70 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>
	}
 800bb60:	bf00      	nop
 800bb62:	3708      	adds	r7, #8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800bb68:	b580      	push	{r7, lr}
 800bb6a:	b088      	sub	sp, #32
 800bb6c:	af00      	add	r7, sp, #0
 800bb6e:	60f8      	str	r0, [r7, #12]
 800bb70:	60b9      	str	r1, [r7, #8]
 800bb72:	607a      	str	r2, [r7, #4]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	61fb      	str	r3, [r7, #28]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	61bb      	str	r3, [r7, #24]
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800bb80:	f7f4 fbce 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bb84:	4603      	mov	r3, r0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x2a>
	    ::operator delete(__p);
 800bb8a:	69b8      	ldr	r0, [r7, #24]
 800bb8c:	f014 fcda 	bl	8020544 <_ZdlPv>
	    return;
 800bb90:	e005      	b.n	800bb9e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE10deallocateERS6_PS5_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	69b9      	ldr	r1, [r7, #24]
 800bb96:	69f8      	ldr	r0, [r7, #28]
 800bb98:	f000 f8d0 	bl	800bd3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>
      { __a.deallocate(__p, __n); }
 800bb9c:	bf00      	nop
 800bb9e:	bf00      	nop
 800bba0:	3720      	adds	r7, #32
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <_ZSt10destroy_atIP6StreamEvPT_>:
    destroy_at(_Tp* __location)
 800bba6:	b480      	push	{r7}
 800bba8:	b083      	sub	sp, #12
 800bbaa:	af00      	add	r7, sp, #0
 800bbac:	6078      	str	r0, [r7, #4]
    }
 800bbae:	bf00      	nop
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <_ZSt8_DestroyIPP6StreamEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bbba:	b580      	push	{r7, lr}
 800bbbc:	b082      	sub	sp, #8
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800bbc4:	f7f4 fbac 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d004      	beq.n	800bbd8 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800bbce:	6839      	ldr	r1, [r7, #0]
 800bbd0:	6878      	ldr	r0, [r7, #4]
 800bbd2:	f000 f857 	bl	800bc84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>
 800bbd6:	e003      	b.n	800bbe0 <_ZSt8_DestroyIPP6StreamEvT_S3_+0x26>
	__destroy(__first, __last);
 800bbd8:	6839      	ldr	r1, [r7, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f000 f86a 	bl	800bcb4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>
    }
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <_ZN9__gnu_cxx13new_allocatorIP6StreamE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	60f8      	str	r0, [r7, #12]
 800bbee:	60b9      	str	r1, [r7, #8]
 800bbf0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	68b8      	ldr	r0, [r7, #8]
 800bbfa:	f014 fca5 	bl	8020548 <_ZdlPvj>
      }
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}

0800bc04 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEC1ERKS7_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	4618      	mov	r0, r3
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_Alloc_nodeclIRKS3_EEPSt13_Rb_tree_nodeIS3_EOT_>:
	  operator()(_Arg&& __arg) const
 800bc1c:	b590      	push	{r4, r7, lr}
 800bc1e:	b083      	sub	sp, #12
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
	  { return _M_t._M_create_node(_GLIBCXX_FORWARD(_Arg, __arg)); }
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681c      	ldr	r4, [r3, #0]
 800bc2a:	6838      	ldr	r0, [r7, #0]
 800bc2c:	f7ff fecd 	bl	800b9ca <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bc30:	4603      	mov	r3, r0
 800bc32:	4619      	mov	r1, r3
 800bc34:	4620      	mov	r0, r4
 800bc36:	f000 f848 	bl	800bcca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	370c      	adds	r7, #12
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd90      	pop	{r4, r7, pc}

0800bc44 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEOT_RNSt16remove_referenceIS8_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800bc44:	b480      	push	{r7}
 800bc46:	b083      	sub	sp, #12
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	370c      	adds	r7, #12
 800bc52:	46bd      	mov	sp, r7
 800bc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc58:	4770      	bx	lr

0800bc5a <_ZNK9__gnu_cxx16__aligned_membufISt4pairIK9PrecisionmEE7_M_addrEv>:
      _M_addr() const noexcept
 800bc5a:	b480      	push	{r7}
 800bc5c:	b083      	sub	sp, #12
 800bc5e:	af00      	add	r7, sp, #0
 800bc60:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4618      	mov	r0, r3
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <_ZSt10destroy_atISt4pairIK9PrecisionmEEvPT_>:
    destroy_at(_Tp* __location)
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
    }
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800bc84:	b580      	push	{r7, lr}
 800bc86:	b082      	sub	sp, #8
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
 800bc8c:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800bc8e:	687a      	ldr	r2, [r7, #4]
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d00a      	beq.n	800bcac <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f862 	bl	800bd60 <_ZSt11__addressofIP6StreamEPT_RS2_>
 800bc9c:	4603      	mov	r3, r0
 800bc9e:	4618      	mov	r0, r3
 800bca0:	f000 f869 	bl	800bd76 <_ZSt8_DestroyIP6StreamEvPT_>
	  for (; __first != __last; ++__first)
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	3304      	adds	r3, #4
 800bca8:	607b      	str	r3, [r7, #4]
 800bcaa:	e7f0      	b.n	800bc8e <_ZNSt12_Destroy_auxILb0EE9__destroyIPP6StreamEEvT_S5_+0xa>
	}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6StreamEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
 800bcbe:	bf00      	nop
 800bcc0:	370c      	adds	r7, #12
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc8:	4770      	bx	lr

0800bcca <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKS3_EEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b084      	sub	sp, #16
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
 800bcd2:	6039      	str	r1, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f7ff fcf5 	bl	800b6c4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 800bcda:	60f8      	str	r0, [r7, #12]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 800bcdc:	6838      	ldr	r0, [r7, #0]
 800bcde:	f7ff fe74 	bl	800b9ca <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bce2:	4603      	mov	r3, r0
 800bce4:	461a      	mov	r2, r3
 800bce6:	68f9      	ldr	r1, [r7, #12]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 f84f 	bl	800bd8c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 800bcee:	68fb      	ldr	r3, [r7, #12]
	}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800bd04:	68f8      	ldr	r0, [r7, #12]
 800bd06:	f000 f861 	bl	800bdcc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>
 800bd0a:	4602      	mov	r2, r0
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	bf8c      	ite	hi
 800bd12:	2301      	movhi	r3, #1
 800bd14:	2300      	movls	r3, #0
 800bd16:	b2db      	uxtb	r3, r3
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d001      	beq.n	800bd20 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800bd1c:	f014 fcdd 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800bd20:	68ba      	ldr	r2, [r7, #8]
 800bd22:	4613      	mov	r3, r2
 800bd24:	005b      	lsls	r3, r3, #1
 800bd26:	4413      	add	r3, r2
 800bd28:	00db      	lsls	r3, r3, #3
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	f014 fc0e 	bl	802054c <_Znwj>
 800bd30:	4603      	mov	r3, r0
 800bd32:	bf00      	nop
      }
 800bd34:	4618      	mov	r0, r3
 800bd36:	3710      	adds	r7, #16
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE10deallocateEPS6_j>:
      deallocate(_Tp* __p, size_type __t)
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	005b      	lsls	r3, r3, #1
 800bd4e:	4413      	add	r3, r2
 800bd50:	00db      	lsls	r3, r3, #3
 800bd52:	4619      	mov	r1, r3
 800bd54:	68b8      	ldr	r0, [r7, #8]
 800bd56:	f014 fbf7 	bl	8020548 <_ZdlPvj>
      }
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}

0800bd60 <_ZSt11__addressofIP6StreamEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800bd60:	b480      	push	{r7}
 800bd62:	b083      	sub	sp, #12
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	370c      	adds	r7, #12
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd74:	4770      	bx	lr

0800bd76 <_ZSt8_DestroyIP6StreamEvPT_>:
    _Destroy(_Tp* __pointer)
 800bd76:	b580      	push	{r7, lr}
 800bd78:	b082      	sub	sp, #8
 800bd7a:	af00      	add	r7, sp, #0
 800bd7c:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800bd7e:	6878      	ldr	r0, [r7, #4]
 800bd80:	f7ff ff11 	bl	800bba6 <_ZSt10destroy_atIP6StreamEvPT_>
    }
 800bd84:	bf00      	nop
 800bd86:	3708      	adds	r7, #8
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKS3_EEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 800bd8c:	b5b0      	push	{r4, r5, r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	60f8      	str	r0, [r7, #12]
 800bd94:	60b9      	str	r1, [r7, #8]
 800bd96:	607a      	str	r2, [r7, #4]
	      ::new(__node) _Rb_tree_node<_Val>;
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	4619      	mov	r1, r3
 800bd9c:	2018      	movs	r0, #24
 800bd9e:	f7f4 fac7 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 800bda2:	68f8      	ldr	r0, [r7, #12]
 800bda4:	f7ff fe70 	bl	800ba88 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 800bda8:	4604      	mov	r4, r0
 800bdaa:	68b8      	ldr	r0, [r7, #8]
 800bdac:	f7ff fa48 	bl	800b240 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 800bdb0:	4605      	mov	r5, r0
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f7ff fe09 	bl	800b9ca <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	461a      	mov	r2, r3
 800bdbc:	4629      	mov	r1, r5
 800bdbe:	4620      	mov	r0, r4
 800bdc0:	f000 f82c 	bl	800be1c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>
	}
 800bdc4:	bf00      	nop
 800bdc6:	3710      	adds	r7, #16
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bdb0      	pop	{r4, r5, r7, pc}

0800bdcc <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800bdd4:	4b03      	ldr	r3, [pc, #12]	; (800bde4 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEE11_M_max_sizeEv+0x18>)
      }
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	370c      	adds	r7, #12
 800bdda:	46bd      	mov	sp, r7
 800bddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde0:	4770      	bx	lr
 800bde2:	bf00      	nop
 800bde4:	05555555 	.word	0x05555555

0800bde8 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800bde8:	b5b0      	push	{r4, r5, r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800bdf2:	6838      	ldr	r0, [r7, #0]
 800bdf4:	f7ff fde9 	bl	800b9ca <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800bdf8:	4605      	mov	r5, r0
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	2008      	movs	r0, #8
 800be00:	f7f4 fa96 	bl	8000330 <_ZnwjPv>
 800be04:	4604      	mov	r4, r0
 800be06:	4623      	mov	r3, r4
 800be08:	462a      	mov	r2, r5
 800be0a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800be0e:	e883 0003 	stmia.w	r3, {r0, r1}
 800be12:	4623      	mov	r3, r4
 800be14:	4618      	mov	r0, r3
 800be16:	3708      	adds	r7, #8
 800be18:	46bd      	mov	sp, r7
 800be1a:	bdb0      	pop	{r4, r5, r7, pc}

0800be1c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKS4_EEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b084      	sub	sp, #16
 800be20:	af00      	add	r7, sp, #0
 800be22:	60f8      	str	r0, [r7, #12]
 800be24:	60b9      	str	r1, [r7, #8]
 800be26:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff fdce 	bl	800b9ca <_ZSt7forwardIRKSt4pairIK9PrecisionmEEOT_RNSt16remove_referenceIS6_E4typeE>
 800be2e:	4603      	mov	r3, r0
 800be30:	4619      	mov	r1, r3
 800be32:	68b8      	ldr	r0, [r7, #8]
 800be34:	f7ff ffd8 	bl	800bde8 <_ZSt12construct_atISt4pairIK9PrecisionmEJRKS3_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS7_DpOS8_>
	}
 800be38:	bf00      	nop
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <_Z41__static_initialization_and_destruction_0ii>:
uint8_t Stream::current_id = 0b1000000;
Precision StreamMessage::precision_mode = _8_bits;
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
																{_16_bits, 65535},
																{_24_bits, 16777215},
																{_32_bits, 4294967295} };
 800be40:	b580      	push	{r7, lr}
 800be42:	b090      	sub	sp, #64	; 0x40
 800be44:	af02      	add	r7, sp, #8
 800be46:	6078      	str	r0, [r7, #4]
 800be48:	6039      	str	r1, [r7, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d13e      	bne.n	800bece <_Z41__static_initialization_and_destruction_0ii+0x8e>
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be56:	4293      	cmp	r3, r2
 800be58:	d139      	bne.n	800bece <_Z41__static_initialization_and_destruction_0ii+0x8e>
vector<Stream*> Stream::streams;
 800be5a:	4826      	ldr	r0, [pc, #152]	; (800bef4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800be5c:	f7ff f806 	bl	800ae6c <_ZNSt6vectorIP6StreamSaIS1_EEC1Ev>
map<Precision, unsigned long> StreamMessage::precision_max = {	{_8_bits, 255},
 800be60:	f107 0310 	add.w	r3, r7, #16
 800be64:	2220      	movs	r2, #32
 800be66:	2100      	movs	r1, #0
 800be68:	4618      	mov	r0, r3
 800be6a:	f014 fcc3 	bl	80207f4 <memset>
 800be6e:	2301      	movs	r3, #1
 800be70:	743b      	strb	r3, [r7, #16]
 800be72:	23ff      	movs	r3, #255	; 0xff
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	2302      	movs	r3, #2
 800be78:	763b      	strb	r3, [r7, #24]
 800be7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800be7e:	61fb      	str	r3, [r7, #28]
 800be80:	2303      	movs	r3, #3
 800be82:	f887 3020 	strb.w	r3, [r7, #32]
 800be86:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800be8a:	627b      	str	r3, [r7, #36]	; 0x24
 800be8c:	2304      	movs	r3, #4
 800be8e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800be92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800be98:	f107 0310 	add.w	r3, r7, #16
 800be9c:	60bb      	str	r3, [r7, #8]
 800be9e:	2304      	movs	r3, #4
 800bea0:	60fb      	str	r3, [r7, #12]
 800bea2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bea6:	4618      	mov	r0, r3
 800bea8:	f7ff f82e 	bl	800af08 <_ZNSaISt4pairIK9PrecisionmEEC1Ev>
 800beac:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800beb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800beb4:	9300      	str	r3, [sp, #0]
 800beb6:	4613      	mov	r3, r2
 800beb8:	f107 0208 	add.w	r2, r7, #8
 800bebc:	ca06      	ldmia	r2, {r1, r2}
 800bebe:	480e      	ldr	r0, [pc, #56]	; (800bef8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800bec0:	f7ff f839 	bl	800af36 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEC1ESt16initializer_listIS5_ERKS2_RKS6_>
 800bec4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800bec8:	4618      	mov	r0, r3
 800beca:	f7ff f829 	bl	800af20 <_ZNSaISt4pairIK9PrecisionmEED1Ev>
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10a      	bne.n	800beea <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800beda:	4293      	cmp	r3, r2
 800bedc:	d105      	bne.n	800beea <_Z41__static_initialization_and_destruction_0ii+0xaa>
 800bede:	4806      	ldr	r0, [pc, #24]	; (800bef8 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 800bee0:	f7fe ffd1 	bl	800ae86 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEED1Ev>
vector<Stream*> Stream::streams;
 800bee4:	4803      	ldr	r0, [pc, #12]	; (800bef4 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800bee6:	f000 f809 	bl	800befc <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>
																{_32_bits, 4294967295} };
 800beea:	bf00      	nop
 800beec:	3738      	adds	r7, #56	; 0x38
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}
 800bef2:	bf00      	nop
 800bef4:	2400017c 	.word	0x2400017c
 800bef8:	24000188 	.word	0x24000188

0800befc <_ZNSt6vectorIP6StreamSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800befc:	b5b0      	push	{r4, r5, r7, lr}
 800befe:	b082      	sub	sp, #8
 800bf00:	af00      	add	r7, sp, #0
 800bf02:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	681c      	ldr	r4, [r3, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff fd12 	bl	800b938 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 800bf14:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800bf16:	461a      	mov	r2, r3
 800bf18:	4629      	mov	r1, r5
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f7ff fd17 	bl	800b94e <_ZSt8_DestroyIPP6StreamS1_EvT_S3_RSaIT0_E>
      }
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f7fe ffd7 	bl	800aed6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EED1Ev>
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bdb0      	pop	{r4, r5, r7, pc}

0800bf32 <_GLOBAL__sub_I__ZN6Stream7streamsE>:
 800bf32:	b580      	push	{r7, lr}
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf3a:	2001      	movs	r0, #1
 800bf3c:	f7ff ff80 	bl	800be40 <_Z41__static_initialization_and_destruction_0ii>
 800bf40:	bd80      	pop	{r7, pc}

0800bf42 <_GLOBAL__sub_D__ZN6Stream7streamsE>:
 800bf42:	b580      	push	{r7, lr}
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800bf4a:	2000      	movs	r0, #0
 800bf4c:	f7ff ff78 	bl	800be40 <_Z41__static_initialization_and_destruction_0ii>
 800bf50:	bd80      	pop	{r7, pc}

0800bf52 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800bf52:	b580      	push	{r7, lr}
 800bf54:	b082      	sub	sp, #8
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	6078      	str	r0, [r7, #4]
 800bf5a:	6878      	ldr	r0, [r7, #4]
 800bf5c:	f000 f82f 	bl	800bfbe <_ZNSaIP5TimerED1Ev>
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	4618      	mov	r0, r3
 800bf64:	3708      	adds	r7, #8
 800bf66:	46bd      	mov	sp, r7
 800bf68:	bd80      	pop	{r7, pc}

0800bf6a <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800bf6a:	b580      	push	{r7, lr}
 800bf6c:	b082      	sub	sp, #8
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4618      	mov	r0, r3
 800bf76:	f000 f812 	bl	800bf9e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	3708      	adds	r7, #8
 800bf80:	46bd      	mov	sp, r7
 800bf82:	bd80      	pop	{r7, pc}

0800bf84 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>:
      vector() = default;
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b082      	sub	sp, #8
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff ffeb 	bl	800bf6a <_ZNSt12_Vector_baseIP5TimerSaIS1_EEC1Ev>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	3708      	adds	r7, #8
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f000 f82d 	bl	800c006 <_ZNSaIP5TimerEC1Ev>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	4618      	mov	r0, r3
 800bfb0:	f000 f835 	bl	800c01e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	3708      	adds	r7, #8
 800bfba:	46bd      	mov	sp, r7
 800bfbc:	bd80      	pop	{r7, pc}

0800bfbe <_ZNSaIP5TimerED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800bfbe:	b480      	push	{r7}
 800bfc0:	b083      	sub	sp, #12
 800bfc2:	af00      	add	r7, sp, #0
 800bfc4:	6078      	str	r0, [r7, #4]
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	370c      	adds	r7, #12
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd2:	4770      	bx	lr

0800bfd4 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b082      	sub	sp, #8
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	689a      	ldr	r2, [r3, #8]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800bfec:	461a      	mov	r2, r3
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f000 f829 	bl	800c046 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7ff ffab 	bl	800bf52 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE12_Vector_implD1Ev>
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}

0800c006 <_ZNSaIP5TimerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c006:	b580      	push	{r7, lr}
 800c008:	b082      	sub	sp, #8
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 f82c 	bl	800c06c <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	4618      	mov	r0, r3
 800c018:	3708      	adds	r7, #8
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <_ZNSt12_Vector_baseIP5TimerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c01e:	b480      	push	{r7}
 800c020:	b083      	sub	sp, #12
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	601a      	str	r2, [r3, #0]
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2200      	movs	r2, #0
 800c030:	605a      	str	r2, [r3, #4]
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	2200      	movs	r2, #0
 800c036:	609a      	str	r2, [r3, #8]
	{ }
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	4618      	mov	r0, r3
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	607a      	str	r2, [r7, #4]
	if (__p)
 800c052:	68bb      	ldr	r3, [r7, #8]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d005      	beq.n	800c064 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	687a      	ldr	r2, [r7, #4]
 800c05c:	68b9      	ldr	r1, [r7, #8]
 800c05e:	4618      	mov	r0, r3
 800c060:	f000 f80f 	bl	800c082 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>
      }
 800c064:	bf00      	nop
 800c066:	3710      	adds	r7, #16
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <_ZN9__gnu_cxx13new_allocatorIP5TimerEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c06c:	b480      	push	{r7}
 800c06e:	b083      	sub	sp, #12
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	4618      	mov	r0, r3
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c082:	b580      	push	{r7, lr}
 800c084:	b088      	sub	sp, #32
 800c086:	af00      	add	r7, sp, #0
 800c088:	60f8      	str	r0, [r7, #12]
 800c08a:	60b9      	str	r1, [r7, #8]
 800c08c:	607a      	str	r2, [r7, #4]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	61fb      	str	r3, [r7, #28]
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	61bb      	str	r3, [r7, #24]
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c09a:	f7f4 f941 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d003      	beq.n	800c0ac <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c0a4:	69b8      	ldr	r0, [r7, #24]
 800c0a6:	f014 fa4d 	bl	8020544 <_ZdlPv>
	    return;
 800c0aa:	e005      	b.n	800c0b8 <_ZNSt16allocator_traitsISaIP5TimerEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	69b9      	ldr	r1, [r7, #24]
 800c0b0:	69f8      	ldr	r0, [r7, #28]
 800c0b2:	f000 f83e 	bl	800c132 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c0b6:	bf00      	nop
 800c0b8:	bf00      	nop
 800c0ba:	3720      	adds	r7, #32
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	370c      	adds	r7, #12
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d4:	4770      	bx	lr

0800c0d6 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b084      	sub	sp, #16
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	60f8      	str	r0, [r7, #12]
 800c0de:	60b9      	str	r1, [r7, #8]
 800c0e0:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800c0e2:	68b9      	ldr	r1, [r7, #8]
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 f80e 	bl	800c106 <_ZSt8_DestroyIPP5TimerEvT_S3_>
    }
 800c0ea:	bf00      	nop
 800c0ec:	3710      	adds	r7, #16
 800c0ee:	46bd      	mov	sp, r7
 800c0f0:	bd80      	pop	{r7, pc}

0800c0f2 <_ZSt10destroy_atIP5TimerEvPT_>:
    destroy_at(_Tp* __location)
 800c0f2:	b480      	push	{r7}
 800c0f4:	b083      	sub	sp, #12
 800c0f6:	af00      	add	r7, sp, #0
 800c0f8:	6078      	str	r0, [r7, #4]
    }
 800c0fa:	bf00      	nop
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <_ZSt8_DestroyIPP5TimerEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c106:	b580      	push	{r7, lr}
 800c108:	b082      	sub	sp, #8
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
 800c10e:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800c110:	f7f4 f906 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d004      	beq.n	800c124 <_ZSt8_DestroyIPP5TimerEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800c11a:	6839      	ldr	r1, [r7, #0]
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f000 f817 	bl	800c150 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>
 800c122:	e003      	b.n	800c12c <_ZSt8_DestroyIPP5TimerEvT_S3_+0x26>
	__destroy(__first, __last);
 800c124:	6839      	ldr	r1, [r7, #0]
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f82a 	bl	800c180 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>
    }
 800c12c:	3708      	adds	r7, #8
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}

0800c132 <_ZN9__gnu_cxx13new_allocatorIP5TimerE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800c132:	b580      	push	{r7, lr}
 800c134:	b084      	sub	sp, #16
 800c136:	af00      	add	r7, sp, #0
 800c138:	60f8      	str	r0, [r7, #12]
 800c13a:	60b9      	str	r1, [r7, #8]
 800c13c:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	009b      	lsls	r3, r3, #2
 800c142:	4619      	mov	r1, r3
 800c144:	68b8      	ldr	r0, [r7, #8]
 800c146:	f014 f9ff 	bl	8020548 <_ZdlPvj>
      }
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800c150:	b580      	push	{r7, lr}
 800c152:	b082      	sub	sp, #8
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	429a      	cmp	r2, r3
 800c160:	d00a      	beq.n	800c178 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800c162:	6878      	ldr	r0, [r7, #4]
 800c164:	f000 f817 	bl	800c196 <_ZSt11__addressofIP5TimerEPT_RS2_>
 800c168:	4603      	mov	r3, r0
 800c16a:	4618      	mov	r0, r3
 800c16c:	f000 f81e 	bl	800c1ac <_ZSt8_DestroyIP5TimerEvPT_>
	  for (; __first != __last; ++__first)
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	3304      	adds	r3, #4
 800c174:	607b      	str	r3, [r7, #4]
 800c176:	e7f0      	b.n	800c15a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5TimerEEvT_S5_+0xa>
	}
 800c178:	bf00      	nop
 800c17a:	3708      	adds	r7, #8
 800c17c:	46bd      	mov	sp, r7
 800c17e:	bd80      	pop	{r7, pc}

0800c180 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5TimerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800c180:	b480      	push	{r7}
 800c182:	b083      	sub	sp, #12
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
 800c188:	6039      	str	r1, [r7, #0]
 800c18a:	bf00      	nop
 800c18c:	370c      	adds	r7, #12
 800c18e:	46bd      	mov	sp, r7
 800c190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c194:	4770      	bx	lr

0800c196 <_ZSt11__addressofIP5TimerEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800c196:	b480      	push	{r7}
 800c198:	b083      	sub	sp, #12
 800c19a:	af00      	add	r7, sp, #0
 800c19c:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	370c      	adds	r7, #12
 800c1a4:	46bd      	mov	sp, r7
 800c1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1aa:	4770      	bx	lr

0800c1ac <_ZSt8_DestroyIP5TimerEvPT_>:
    _Destroy(_Tp* __pointer)
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f7ff ff9c 	bl	800c0f2 <_ZSt10destroy_atIP5TimerEvPT_>
    }
 800c1ba:	bf00      	nop
 800c1bc:	3708      	adds	r7, #8
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Timer.hpp"

vector<Timer*> Timer::all_timers;
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b082      	sub	sp, #8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
 800c1cc:	6039      	str	r1, [r7, #0]
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d107      	bne.n	800c1e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c1d4:	683b      	ldr	r3, [r7, #0]
 800c1d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1da:	4293      	cmp	r3, r2
 800c1dc:	d102      	bne.n	800c1e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c1de:	4809      	ldr	r0, [pc, #36]	; (800c204 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c1e0:	f7ff fed0 	bl	800bf84 <_ZNSt6vectorIP5TimerSaIS1_EEC1Ev>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d107      	bne.n	800c1fa <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1f0:	4293      	cmp	r3, r2
 800c1f2:	d102      	bne.n	800c1fa <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c1f4:	4803      	ldr	r0, [pc, #12]	; (800c204 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c1f6:	f000 f807 	bl	800c208 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>
 800c1fa:	bf00      	nop
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	240001a0 	.word	0x240001a0

0800c208 <_ZNSt6vectorIP5TimerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800c208:	b5b0      	push	{r4, r5, r7, lr}
 800c20a:	b082      	sub	sp, #8
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681c      	ldr	r4, [r3, #0]
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	4618      	mov	r0, r3
 800c21c:	f7ff ff50 	bl	800c0c0 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 800c220:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800c222:	461a      	mov	r2, r3
 800c224:	4629      	mov	r1, r5
 800c226:	4620      	mov	r0, r4
 800c228:	f7ff ff55 	bl	800c0d6 <_ZSt8_DestroyIPP5TimerS1_EvT_S3_RSaIT0_E>
      }
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4618      	mov	r0, r3
 800c230:	f7ff fed0 	bl	800bfd4 <_ZNSt12_Vector_baseIP5TimerSaIS1_EED1Ev>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	4618      	mov	r0, r3
 800c238:	3708      	adds	r7, #8
 800c23a:	46bd      	mov	sp, r7
 800c23c:	bdb0      	pop	{r4, r5, r7, pc}

0800c23e <_GLOBAL__sub_I__ZN5Timer10all_timersE>:
 800c23e:	b580      	push	{r7, lr}
 800c240:	af00      	add	r7, sp, #0
 800c242:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c246:	2001      	movs	r0, #1
 800c248:	f7ff ffbc 	bl	800c1c4 <_Z41__static_initialization_and_destruction_0ii>
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <_GLOBAL__sub_D__ZN5Timer10all_timersE>:
 800c24e:	b580      	push	{r7, lr}
 800c250:	af00      	add	r7, sp, #0
 800c252:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c256:	2000      	movs	r0, #0
 800c258:	f7ff ffb4 	bl	800c1c4 <_Z41__static_initialization_and_destruction_0ii>
 800c25c:	bd80      	pop	{r7, pc}

0800c25e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>:
	struct _Rb_tree_impl
 800c25e:	b580      	push	{r7, lr}
 800c260:	b082      	sub	sp, #8
 800c262:	af00      	add	r7, sp, #0
 800c264:	6078      	str	r0, [r7, #4]
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	f000 f834 	bl	800c2d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}

0800c276 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>:
      _Rb_tree() = default;
 800c276:	b580      	push	{r7, lr}
 800c278:	b082      	sub	sp, #8
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4618      	mov	r0, r3
 800c282:	f000 f812 	bl	800c2aa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4618      	mov	r0, r3
 800c28a:	3708      	adds	r7, #8
 800c28c:	46bd      	mov	sp, r7
 800c28e:	bd80      	pop	{r7, pc}

0800c290 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>:
      map() = default;
 800c290:	b580      	push	{r7, lr}
 800c292:	b082      	sub	sp, #8
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4618      	mov	r0, r3
 800c29c:	f7ff ffeb 	bl	800c276 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EEC1Ev>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}

0800c2aa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EEC1Ev>:
	  _Rb_tree_impl()
 800c2aa:	b580      	push	{r7, lr}
 800c2ac:	b082      	sub	sp, #8
 800c2ae:	af00      	add	r7, sp, #0
 800c2b0:	6078      	str	r0, [r7, #4]
	  : _Node_allocator()
 800c2b2:	6878      	ldr	r0, [r7, #4]
 800c2b4:	f000 f82e 	bl	800c314 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	f000 f836 	bl	800c32c <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f7f4 f83f 	bl	8000348 <_ZNSt15_Rb_tree_headerC1Ev>
	  { }
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	3708      	adds	r7, #8
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	bd80      	pop	{r7, pc}

0800c2d4 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4618      	mov	r0, r3
 800c2e0:	370c      	adds	r7, #12
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e8:	4770      	bx	lr

0800c2ea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>:
      ~_Rb_tree() _GLIBCXX_NOEXCEPT
 800c2ea:	b580      	push	{r7, lr}
 800c2ec:	b082      	sub	sp, #8
 800c2ee:	af00      	add	r7, sp, #0
 800c2f0:	6078      	str	r0, [r7, #4]
      { _M_erase(_M_begin()); }
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f000 f844 	bl	800c380 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 800c2f8:	4603      	mov	r3, r0
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f000 f820 	bl	800c342 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4618      	mov	r0, r3
 800c306:	f7ff ffaa 	bl	800c25e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE13_Rb_tree_implIS8_Lb1EED1Ev>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <_ZNSaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c314:	b580      	push	{r7, lr}
 800c316:	b082      	sub	sp, #8
 800c318:	af00      	add	r7, sp, #0
 800c31a:	6078      	str	r0, [r7, #4]
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f000 f83b 	bl	800c398 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4618      	mov	r0, r3
 800c326:	3708      	adds	r7, #8
 800c328:	46bd      	mov	sp, r7
 800c32a:	bd80      	pop	{r7, pc}

0800c32c <_ZNSt20_Rb_tree_key_compareISt4lessItEEC1Ev>:
      _Rb_tree_key_compare()
 800c32c:	b480      	push	{r7}
 800c32e:	b083      	sub	sp, #12
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
      { }
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	4618      	mov	r0, r3
 800c338:	370c      	adds	r7, #12
 800c33a:	46bd      	mov	sp, r7
 800c33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c340:	4770      	bx	lr

0800c342 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800c342:	b580      	push	{r7, lr}
 800c344:	b084      	sub	sp, #16
 800c346:	af00      	add	r7, sp, #0
 800c348:	6078      	str	r0, [r7, #4]
 800c34a:	6039      	str	r1, [r7, #0]
      while (__x != 0)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d012      	beq.n	800c378 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0x36>
	  _M_erase(_S_right(__x));
 800c352:	6838      	ldr	r0, [r7, #0]
 800c354:	f000 f82b 	bl	800c3ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 800c358:	4603      	mov	r3, r0
 800c35a:	4619      	mov	r1, r3
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f7ff fff0 	bl	800c342 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E>
	  _Link_type __y = _S_left(__x);
 800c362:	6838      	ldr	r0, [r7, #0]
 800c364:	f000 f82f 	bl	800c3c6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 800c368:	60f8      	str	r0, [r7, #12]
	  _M_drop_node(__x);
 800c36a:	6839      	ldr	r1, [r7, #0]
 800c36c:	6878      	ldr	r0, [r7, #4]
 800c36e:	f000 f836 	bl	800c3de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	  __x = __y;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 800c376:	e7e9      	b.n	800c34c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_eraseEPSt13_Rb_tree_nodeIS4_E+0xa>
    }
 800c378:	bf00      	nop
 800c37a:	3710      	adds	r7, #16
 800c37c:	46bd      	mov	sp, r7
 800c37e:	bd80      	pop	{r7, pc}

0800c380 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>:
      _M_begin() _GLIBCXX_NOEXCEPT
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	689b      	ldr	r3, [r3, #8]
 800c38c:	4618      	mov	r0, r3
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr

0800c398 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c398:	b480      	push	{r7}
 800c39a:	b083      	sub	sp, #12
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	370c      	adds	r7, #12
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ac:	4770      	bx	lr

0800c3ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>:
      _S_right(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c3ae:	b480      	push	{r7}
 800c3b0:	b083      	sub	sp, #12
 800c3b2:	af00      	add	r7, sp, #0
 800c3b4:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_right); }
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	68db      	ldr	r3, [r3, #12]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	370c      	adds	r7, #12
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>:
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800c3c6:	b480      	push	{r7}
 800c3c8:	b083      	sub	sp, #12
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
      { return static_cast<_Link_type>(__x->_M_left); }
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	370c      	adds	r7, #12
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3dc:	4770      	bx	lr

0800c3de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_drop_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c3de:	b580      	push	{r7, lr}
 800c3e0:	b082      	sub	sp, #8
 800c3e2:	af00      	add	r7, sp, #0
 800c3e4:	6078      	str	r0, [r7, #4]
 800c3e6:	6039      	str	r1, [r7, #0]
	_M_destroy_node(__p);
 800c3e8:	6839      	ldr	r1, [r7, #0]
 800c3ea:	6878      	ldr	r0, [r7, #4]
 800c3ec:	f000 f808 	bl	800c400 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>
	_M_put_node(__p);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 f819 	bl	800c42a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>
      }
 800c3f8:	bf00      	nop
 800c3fa:	3708      	adds	r7, #8
 800c3fc:	46bd      	mov	sp, r7
 800c3fe:	bd80      	pop	{r7, pc}

0800c400 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE15_M_destroy_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_destroy_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c400:	b590      	push	{r4, r7, lr}
 800c402:	b083      	sub	sp, #12
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
	_Alloc_traits::destroy(_M_get_Node_allocator(), __p->_M_valptr());
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f000 f81f 	bl	800c44e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c410:	4604      	mov	r4, r0
 800c412:	6838      	ldr	r0, [r7, #0]
 800c414:	f7f9 f828 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 800c418:	4603      	mov	r3, r0
 800c41a:	4619      	mov	r1, r3
 800c41c:	4620      	mov	r0, r4
 800c41e:	f000 f821 	bl	800c464 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>
      }
 800c422:	bf00      	nop
 800c424:	370c      	adds	r7, #12
 800c426:	46bd      	mov	sp, r7
 800c428:	bd90      	pop	{r4, r7, pc}

0800c42a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_put_nodeEPSt13_Rb_tree_nodeIS4_E>:
      _M_put_node(_Link_type __p) _GLIBCXX_NOEXCEPT
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b082      	sub	sp, #8
 800c42e:	af00      	add	r7, sp, #0
 800c430:	6078      	str	r0, [r7, #4]
 800c432:	6039      	str	r1, [r7, #0]
      { _Alloc_traits::deallocate(_M_get_Node_allocator(), __p, 1); }
 800c434:	6878      	ldr	r0, [r7, #4]
 800c436:	f000 f80a 	bl	800c44e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 800c43a:	4603      	mov	r3, r0
 800c43c:	2201      	movs	r2, #1
 800c43e:	6839      	ldr	r1, [r7, #0]
 800c440:	4618      	mov	r0, r3
 800c442:	f000 f81b 	bl	800c47c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>
 800c446:	bf00      	nop
 800c448:	3708      	adds	r7, #8
 800c44a:	46bd      	mov	sp, r7
 800c44c:	bd80      	pop	{r7, pc}

0800c44e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>:
      _M_get_Node_allocator() _GLIBCXX_NOEXCEPT
 800c44e:	b480      	push	{r7}
 800c450:	b083      	sub	sp, #12
 800c452:	af00      	add	r7, sp, #0
 800c454:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	4618      	mov	r0, r3
 800c45a:	370c      	adds	r7, #12
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr

0800c464 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE7destroyIS5_EEvRS7_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 800c464:	b580      	push	{r7, lr}
 800c466:	b082      	sub	sp, #8
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	6039      	str	r1, [r7, #0]
	  std::destroy_at(__p);
 800c46e:	6838      	ldr	r0, [r7, #0]
 800c470:	f000 f823 	bl	800c4ba <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>
	}
 800c474:	bf00      	nop
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b088      	sub	sp, #32
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	61fb      	str	r3, [r7, #28]
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	61bb      	str	r3, [r7, #24]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c494:	f7f3 ff44 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c498:	4603      	mov	r3, r0
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d003      	beq.n	800c4a6 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x2a>
	    ::operator delete(__p);
 800c49e:	69b8      	ldr	r0, [r7, #24]
 800c4a0:	f014 f850 	bl	8020544 <_ZdlPv>
	    return;
 800c4a4:	e005      	b.n	800c4b2 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE10deallocateERS7_PS6_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	69b9      	ldr	r1, [r7, #24]
 800c4aa:	69f8      	ldr	r0, [r7, #28]
 800c4ac:	f000 f80f 	bl	800c4ce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>
      { __a.deallocate(__p, __n); }
 800c4b0:	bf00      	nop
 800c4b2:	bf00      	nop
 800c4b4:	3720      	adds	r7, #32
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}

0800c4ba <_ZSt10destroy_atISt4pairIKtP6PacketEEvPT_>:
    destroy_at(_Tp* __location)
 800c4ba:	b480      	push	{r7}
 800c4bc:	b083      	sub	sp, #12
 800c4be:	af00      	add	r7, sp, #0
 800c4c0:	6078      	str	r0, [r7, #4]
    }
 800c4c2:	bf00      	nop
 800c4c4:	370c      	adds	r7, #12
 800c4c6:	46bd      	mov	sp, r7
 800c4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4cc:	4770      	bx	lr

0800c4ce <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE10deallocateEPS7_j>:
      deallocate(_Tp* __p, size_type __t)
 800c4ce:	b580      	push	{r7, lr}
 800c4d0:	b084      	sub	sp, #16
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	60f8      	str	r0, [r7, #12]
 800c4d6:	60b9      	str	r1, [r7, #8]
 800c4d8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	005b      	lsls	r3, r3, #1
 800c4e0:	4413      	add	r3, r2
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	4619      	mov	r1, r3
 800c4e6:	68b8      	ldr	r0, [r7, #8]
 800c4e8:	f014 f82e 	bl	8020548 <_ZdlPvj>
      }
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}

0800c4f2 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>:
      ~map() = default;
 800c4f2:	b580      	push	{r7, lr}
 800c4f4:	b082      	sub	sp, #8
 800c4f6:	af00      	add	r7, sp, #0
 800c4f8:	6078      	str	r0, [r7, #4]
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f7ff fef4 	bl	800c2ea <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EED1Ev>
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	4618      	mov	r0, r3
 800c506:	3708      	adds	r7, #8
 800c508:	46bd      	mov	sp, r7
 800c50a:	bd80      	pop	{r7, pc}

0800c50c <_Z41__static_initialization_and_destruction_0ii>:
#include "Mini-STLIB/Models/Packet.hpp"

map<uint16_t, Packet*> Packet::all_packets;
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
 800c514:	6039      	str	r1, [r7, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b01      	cmp	r3, #1
 800c51a:	d107      	bne.n	800c52c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c522:	4293      	cmp	r3, r2
 800c524:	d102      	bne.n	800c52c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800c526:	4809      	ldr	r0, [pc, #36]	; (800c54c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c528:	f7ff feb2 	bl	800c290 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEC1Ev>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d107      	bne.n	800c542 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c532:	683b      	ldr	r3, [r7, #0]
 800c534:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c538:	4293      	cmp	r3, r2
 800c53a:	d102      	bne.n	800c542 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800c53c:	4803      	ldr	r0, [pc, #12]	; (800c54c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800c53e:	f7ff ffd8 	bl	800c4f2 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEED1Ev>
 800c542:	bf00      	nop
 800c544:	3708      	adds	r7, #8
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	240001ac 	.word	0x240001ac

0800c550 <_GLOBAL__sub_I__ZN6Packet11all_packetsE>:
 800c550:	b580      	push	{r7, lr}
 800c552:	af00      	add	r7, sp, #0
 800c554:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c558:	2001      	movs	r0, #1
 800c55a:	f7ff ffd7 	bl	800c50c <_Z41__static_initialization_and_destruction_0ii>
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <_GLOBAL__sub_D__ZN6Packet11all_packetsE>:
 800c560:	b580      	push	{r7, lr}
 800c562:	af00      	add	r7, sp, #0
 800c564:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800c568:	2000      	movs	r0, #0
 800c56a:	f7ff ffcf 	bl	800c50c <_Z41__static_initialization_and_destruction_0ii>
 800c56e:	bd80      	pop	{r7, pc}

0800c570 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800c570:	b580      	push	{r7, lr}
 800c572:	b082      	sub	sp, #8
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f000 f86f 	bl	800c65c <_ZNSaIP3PinED1Ev>
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	4618      	mov	r0, r3
 800c582:	3708      	adds	r7, #8
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	4618      	mov	r0, r3
 800c594:	f000 f852 	bl	800c63c <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	4618      	mov	r0, r3
 800c59c:	3708      	adds	r7, #8
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}

0800c5a2 <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>:
      vector() = default;
 800c5a2:	b580      	push	{r7, lr}
 800c5a4:	b082      	sub	sp, #8
 800c5a6:	af00      	add	r7, sp, #0
 800c5a8:	6078      	str	r0, [r7, #4]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f7ff ffeb 	bl	800c588 <_ZNSt12_Vector_baseIP3PinSaIS1_EEC1Ev>
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3708      	adds	r7, #8
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>:
#include "Mini-STLIB/Models/Pin.hpp"

vector<Pin*> Pin::all_pins;

Pin::Pin(GPIO_TypeDef* port, uint16_t pin) : port(port), pin(pin) {
 800c5bc:	b580      	push	{r7, lr}
 800c5be:	b086      	sub	sp, #24
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	60f8      	str	r0, [r7, #12]
 800c5c4:	60b9      	str	r1, [r7, #8]
 800c5c6:	4613      	mov	r3, r2
 800c5c8:	80fb      	strh	r3, [r7, #6]
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	601a      	str	r2, [r3, #0]
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	88fa      	ldrh	r2, [r7, #6]
 800c5d4:	809a      	strh	r2, [r3, #4]
	Pin::all_pins.push_back(this);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	617b      	str	r3, [r7, #20]
 800c5da:	f107 0314 	add.w	r3, r7, #20
 800c5de:	4619      	mov	r1, r3
 800c5e0:	4803      	ldr	r0, [pc, #12]	; (800c5f0 <_ZN3PinC1EP12GPIO_TypeDeft+0x34>)
 800c5e2:	f000 f85f 	bl	800c6a4 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>
}
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3718      	adds	r7, #24
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}
 800c5f0:	240001c4 	.word	0x240001c4

0800c5f4 <_ZN3Pin15get_pin_from_idEt>:

optional<Pin*> Pin::get_pin_from_id(uint16_t id){
 800c5f4:	b590      	push	{r4, r7, lr}
 800c5f6:	b083      	sub	sp, #12
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	460b      	mov	r3, r1
 800c5fe:	807b      	strh	r3, [r7, #2]
	if(id < Pin::all_pins.size())
 800c600:	887c      	ldrh	r4, [r7, #2]
 800c602:	480d      	ldr	r0, [pc, #52]	; (800c638 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c604:	f000 f85f 	bl	800c6c6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800c608:	4603      	mov	r3, r0
 800c60a:	429c      	cmp	r4, r3
 800c60c:	bf34      	ite	cc
 800c60e:	2301      	movcc	r3, #1
 800c610:	2300      	movcs	r3, #0
 800c612:	b2db      	uxtb	r3, r3
 800c614:	2b00      	cmp	r3, #0
 800c616:	d00a      	beq.n	800c62e <_ZN3Pin15get_pin_from_idEt+0x3a>
		return Pin::all_pins[id];
 800c618:	887b      	ldrh	r3, [r7, #2]
 800c61a:	4619      	mov	r1, r3
 800c61c:	4806      	ldr	r0, [pc, #24]	; (800c638 <_ZN3Pin15get_pin_from_idEt+0x44>)
 800c61e:	f000 f862 	bl	800c6e6 <_ZNSt6vectorIP3PinSaIS1_EEixEj>
 800c622:	4603      	mov	r3, r0
 800c624:	4619      	mov	r1, r3
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f000 f86d 	bl	800c706 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>
 800c62c:	e000      	b.n	800c630 <_ZN3Pin15get_pin_from_idEt+0x3c>
}
 800c62e:	bf00      	nop
 800c630:	6878      	ldr	r0, [r7, #4]
 800c632:	370c      	adds	r7, #12
 800c634:	46bd      	mov	sp, r7
 800c636:	bd90      	pop	{r4, r7, pc}
 800c638:	240001c4 	.word	0x240001c4

0800c63c <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b082      	sub	sp, #8
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800c644:	6878      	ldr	r0, [r7, #4]
 800c646:	f000 f872 	bl	800c72e <_ZNSaIP3PinEC1Ev>
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	4618      	mov	r0, r3
 800c64e:	f000 f87a 	bl	800c746 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	4618      	mov	r0, r3
 800c656:	3708      	adds	r7, #8
 800c658:	46bd      	mov	sp, r7
 800c65a:	bd80      	pop	{r7, pc}

0800c65c <_ZNSaIP3PinED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	4618      	mov	r0, r3
 800c668:	370c      	adds	r7, #12
 800c66a:	46bd      	mov	sp, r7
 800c66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c670:	4770      	bx	lr

0800c672 <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800c672:	b580      	push	{r7, lr}
 800c674:	b082      	sub	sp, #8
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	689a      	ldr	r2, [r3, #8]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800c68a:	461a      	mov	r2, r3
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f000 f86e 	bl	800c76e <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      }
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff ff6b 	bl	800c570 <_ZNSt12_Vector_baseIP3PinSaIS1_EE12_Vector_implD1Ev>
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	4618      	mov	r0, r3
 800c69e:	3708      	adds	r7, #8
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bd80      	pop	{r7, pc}

0800c6a4 <_ZNSt6vectorIP3PinSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	b082      	sub	sp, #8
 800c6a8:	af00      	add	r7, sp, #0
 800c6aa:	6078      	str	r0, [r7, #4]
 800c6ac:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800c6ae:	6838      	ldr	r0, [r7, #0]
 800c6b0:	f000 f870 	bl	800c794 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f876 	bl	800c7aa <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800c6be:	bf00      	nop
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	685a      	ldr	r2, [r3, #4]
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	1ad3      	subs	r3, r2, r3
 800c6d8:	109b      	asrs	r3, r3, #2
 800c6da:	4618      	mov	r0, r3
 800c6dc:	370c      	adds	r7, #12
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <_ZNSt6vectorIP3PinSaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 800c6e6:	b480      	push	{r7}
 800c6e8:	b083      	sub	sp, #12
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681a      	ldr	r2, [r3, #0]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	4413      	add	r3, r2
      }
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr

0800c706 <_ZNSt8optionalIP3PinEC1IRS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800c706:	b5b0      	push	{r4, r5, r7, lr}
 800c708:	b082      	sub	sp, #8
 800c70a:	af00      	add	r7, sp, #0
 800c70c:	6078      	str	r0, [r7, #4]
 800c70e:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800c710:	687c      	ldr	r4, [r7, #4]
 800c712:	6838      	ldr	r0, [r7, #0]
 800c714:	f000 f87b 	bl	800c80e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c718:	4603      	mov	r3, r0
 800c71a:	461a      	mov	r2, r3
 800c71c:	4629      	mov	r1, r5
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 f891 	bl	800c846 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4618      	mov	r0, r3
 800c728:	3708      	adds	r7, #8
 800c72a:	46bd      	mov	sp, r7
 800c72c:	bdb0      	pop	{r4, r5, r7, pc}

0800c72e <_ZNSaIP3PinEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800c72e:	b580      	push	{r7, lr}
 800c730:	b082      	sub	sp, #8
 800c732:	af00      	add	r7, sp, #0
 800c734:	6078      	str	r0, [r7, #4]
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	f000 f89a 	bl	800c870 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	4618      	mov	r0, r3
 800c740:	3708      	adds	r7, #8
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <_ZNSt12_Vector_baseIP3PinSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800c746:	b480      	push	{r7}
 800c748:	b083      	sub	sp, #12
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	601a      	str	r2, [r3, #0]
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2200      	movs	r2, #0
 800c758:	605a      	str	r2, [r3, #4]
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2200      	movs	r2, #0
 800c75e:	609a      	str	r2, [r3, #8]
	{ }
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4618      	mov	r0, r3
 800c764:	370c      	adds	r7, #12
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800c76e:	b580      	push	{r7, lr}
 800c770:	b084      	sub	sp, #16
 800c772:	af00      	add	r7, sp, #0
 800c774:	60f8      	str	r0, [r7, #12]
 800c776:	60b9      	str	r1, [r7, #8]
 800c778:	607a      	str	r2, [r7, #4]
	if (__p)
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d005      	beq.n	800c78c <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	687a      	ldr	r2, [r7, #4]
 800c784:	68b9      	ldr	r1, [r7, #8]
 800c786:	4618      	mov	r0, r3
 800c788:	f000 f87d 	bl	800c886 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>
      }
 800c78c:	bf00      	nop
 800c78e:	3710      	adds	r7, #16
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <_ZSt4moveIRP3PinEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 800c794:	b480      	push	{r7}
 800c796:	b083      	sub	sp, #12
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 800c7aa:	b5b0      	push	{r4, r5, r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	685a      	ldr	r2, [r3, #4]
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	689b      	ldr	r3, [r3, #8]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d011      	beq.n	800c7e4 <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800c7c0:	687c      	ldr	r4, [r7, #4]
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	685d      	ldr	r5, [r3, #4]
 800c7c6:	6838      	ldr	r0, [r7, #0]
 800c7c8:	f000 f87c 	bl	800c8c4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7cc:	4603      	mov	r3, r0
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	4629      	mov	r1, r5
 800c7d2:	4620      	mov	r0, r4
 800c7d4:	f000 f896 	bl	800c904 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	1d1a      	adds	r2, r3, #4
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	605a      	str	r2, [r3, #4]
 800c7e2:	e00c      	b.n	800c7fe <_ZNSt6vectorIP3PinSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 f89f 	bl	800c928 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800c7ea:	4604      	mov	r4, r0
 800c7ec:	6838      	ldr	r0, [r7, #0]
 800c7ee:	f000 f869 	bl	800c8c4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	4621      	mov	r1, r4
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f8a7 	bl	800c94c <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f920 	bl	800ca44 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>
 800c804:	4603      	mov	r3, r0
      }
 800c806:	4618      	mov	r0, r3
 800c808:	3708      	adds	r7, #8
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bdb0      	pop	{r4, r5, r7, pc}

0800c80e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c80e:	b480      	push	{r7}
 800c810:	b083      	sub	sp, #12
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	4618      	mov	r0, r3
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 800c824:	b590      	push	{r4, r7, lr}
 800c826:	b085      	sub	sp, #20
 800c828:	af00      	add	r7, sp, #0
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	7239      	strb	r1, [r7, #8]
 800c82e:	607a      	str	r2, [r7, #4]
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	687a      	ldr	r2, [r7, #4]
 800c834:	4621      	mov	r1, r4
 800c836:	4618      	mov	r0, r3
 800c838:	f000 f931 	bl	800ca9e <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	4618      	mov	r0, r3
 800c840:	3714      	adds	r7, #20
 800c842:	46bd      	mov	sp, r7
 800c844:	bd90      	pop	{r4, r7, pc}

0800c846 <_ZNSt14_Optional_baseIP3PinLb1ELb1EEC1IJRS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 800c846:	b5b0      	push	{r4, r5, r7, lr}
 800c848:	b084      	sub	sp, #16
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	60f8      	str	r0, [r7, #12]
 800c84e:	7239      	strb	r1, [r7, #8]
 800c850:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 800c852:	68fc      	ldr	r4, [r7, #12]
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f7ff ffda 	bl	800c80e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800c85a:	4603      	mov	r3, r0
 800c85c:	461a      	mov	r2, r3
 800c85e:	4629      	mov	r1, r5
 800c860:	4620      	mov	r0, r4
 800c862:	f7ff ffdf 	bl	800c824 <_ZNSt17_Optional_payloadIP3PinLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJRS1_EEESt10in_place_tDpOT_>
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bdb0      	pop	{r4, r5, r7, pc}

0800c870 <_ZN9__gnu_cxx13new_allocatorIP3PinEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800c870:	b480      	push	{r7}
 800c872:	b083      	sub	sp, #12
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	4618      	mov	r0, r3
 800c87c:	370c      	adds	r7, #12
 800c87e:	46bd      	mov	sp, r7
 800c880:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c884:	4770      	bx	lr

0800c886 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800c886:	b580      	push	{r7, lr}
 800c888:	b088      	sub	sp, #32
 800c88a:	af00      	add	r7, sp, #0
 800c88c:	60f8      	str	r0, [r7, #12]
 800c88e:	60b9      	str	r1, [r7, #8]
 800c890:	607a      	str	r2, [r7, #4]
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	61fb      	str	r3, [r7, #28]
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	61bb      	str	r3, [r7, #24]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 800c89e:	f7f3 fd3f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d003      	beq.n	800c8b0 <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 800c8a8:	69b8      	ldr	r0, [r7, #24]
 800c8aa:	f013 fe4b 	bl	8020544 <_ZdlPv>
	    return;
 800c8ae:	e005      	b.n	800c8bc <_ZNSt16allocator_traitsISaIP3PinEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 800c8b0:	697a      	ldr	r2, [r7, #20]
 800c8b2:	69b9      	ldr	r1, [r7, #24]
 800c8b4:	69f8      	ldr	r0, [r7, #28]
 800c8b6:	f000 f9f7 	bl	800cca8 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 800c8ba:	bf00      	nop
 800c8bc:	bf00      	nop
 800c8be:	3720      	adds	r7, #32
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}

0800c8c4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800c8c4:	b480      	push	{r7}
 800c8c6:	b083      	sub	sp, #12
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	370c      	adds	r7, #12
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8d8:	4770      	bx	lr

0800c8da <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 800c8da:	b590      	push	{r4, r7, lr}
 800c8dc:	b083      	sub	sp, #12
 800c8de:	af00      	add	r7, sp, #0
 800c8e0:	6078      	str	r0, [r7, #4]
 800c8e2:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 800c8e4:	6838      	ldr	r0, [r7, #0]
 800c8e6:	f7ff ffed 	bl	800c8c4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	681c      	ldr	r4, [r3, #0]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	4619      	mov	r1, r3
 800c8f2:	2004      	movs	r0, #4
 800c8f4:	f7f3 fd1c 	bl	8000330 <_ZnwjPv>
 800c8f8:	4603      	mov	r3, r0
 800c8fa:	601c      	str	r4, [r3, #0]
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	bd90      	pop	{r4, r7, pc}

0800c904 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	60f8      	str	r0, [r7, #12]
 800c90c:	60b9      	str	r1, [r7, #8]
 800c90e:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f7ff ffd7 	bl	800c8c4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c916:	4603      	mov	r3, r0
 800c918:	4619      	mov	r1, r3
 800c91a:	68b8      	ldr	r0, [r7, #8]
 800c91c:	f7ff ffdd 	bl	800c8da <_ZSt12construct_atIP3PinJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	1d1a      	adds	r2, r3, #4
 800c934:	f107 030c 	add.w	r3, r7, #12
 800c938:	4611      	mov	r1, r2
 800c93a:	4618      	mov	r0, r3
 800c93c:	f000 f8c7 	bl	800cace <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
	...

0800c94c <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 800c94c:	b5b0      	push	{r4, r5, r7, lr}
 800c94e:	b08c      	sub	sp, #48	; 0x30
 800c950:	af00      	add	r7, sp, #0
 800c952:	60f8      	str	r0, [r7, #12]
 800c954:	60b9      	str	r1, [r7, #8]
 800c956:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800c958:	4a39      	ldr	r2, [pc, #228]	; (800ca40 <_ZNSt6vectorIP3PinSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 800c95a:	2101      	movs	r1, #1
 800c95c:	68f8      	ldr	r0, [r7, #12]
 800c95e:	f000 f8c6 	bl	800caee <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>
 800c962:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f000 f903 	bl	800cb7c <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>
 800c976:	4603      	mov	r3, r0
 800c978:	617b      	str	r3, [r7, #20]
 800c97a:	f107 0214 	add.w	r2, r7, #20
 800c97e:	f107 0308 	add.w	r3, r7, #8
 800c982:	4611      	mov	r1, r2
 800c984:	4618      	mov	r0, r3
 800c986:	f000 f909 	bl	800cb9c <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800c98a:	4603      	mov	r3, r0
 800c98c:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c992:	4618      	mov	r0, r3
 800c994:	f000 f917 	bl	800cbc6 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>
 800c998:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 800c99a:	69fb      	ldr	r3, [r7, #28]
 800c99c:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 800c99e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800c9a0:	6a3b      	ldr	r3, [r7, #32]
 800c9a2:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800c9a4:	69fa      	ldr	r2, [r7, #28]
 800c9a6:	18d5      	adds	r5, r2, r3
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f7ff ff8b 	bl	800c8c4 <_ZSt7forwardIP3PinEOT_RNSt16remove_referenceIS2_E4typeE>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	461a      	mov	r2, r3
 800c9b2:	4629      	mov	r1, r5
 800c9b4:	4620      	mov	r0, r4
 800c9b6:	f7ff ffa5 	bl	800c904 <_ZNSt16allocator_traitsISaIP3PinEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c9be:	f107 0308 	add.w	r3, r7, #8
 800c9c2:	4618      	mov	r0, r3
 800c9c4:	f000 f927 	bl	800cc16 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f000 f92c 	bl	800cc2c <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800c9d4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800c9d6:	69fa      	ldr	r2, [r7, #28]
 800c9d8:	4621      	mov	r1, r4
 800c9da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c9dc:	f000 f907 	bl	800cbee <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800c9e0:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 800c9e2:	69bb      	ldr	r3, [r7, #24]
 800c9e4:	3304      	adds	r3, #4
 800c9e6:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800c9e8:	f107 0308 	add.w	r3, r7, #8
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f000 f912 	bl	800cc16 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	f000 f917 	bl	800cc2c <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800c9fe:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800ca00:	69ba      	ldr	r2, [r7, #24]
 800ca02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ca04:	4620      	mov	r0, r4
 800ca06:	f000 f8f2 	bl	800cbee <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800ca0a:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 800ca0c:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	689a      	ldr	r2, [r3, #8]
 800ca12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca14:	1ad3      	subs	r3, r2, r3
 800ca16:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800ca18:	461a      	mov	r2, r3
 800ca1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca1c:	f7ff fea7 	bl	800c76e <_ZNSt12_Vector_baseIP3PinSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	69fa      	ldr	r2, [r7, #28]
 800ca24:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	69ba      	ldr	r2, [r7, #24]
 800ca2a:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800ca2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca2e:	009b      	lsls	r3, r3, #2
 800ca30:	69fa      	ldr	r2, [r7, #28]
 800ca32:	441a      	add	r2, r3
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	609a      	str	r2, [r3, #8]
    }
 800ca38:	bf00      	nop
 800ca3a:	3730      	adds	r7, #48	; 0x30
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bdb0      	pop	{r4, r5, r7, pc}
 800ca40:	08020bfc 	.word	0x08020bfc

0800ca44 <_ZNSt6vectorIP3PinSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f7ff ff6b 	bl	800c928 <_ZNSt6vectorIP3PinSaIS1_EE3endEv>
 800ca52:	4603      	mov	r3, r0
 800ca54:	60fb      	str	r3, [r7, #12]
 800ca56:	f107 030c 	add.w	r3, r7, #12
 800ca5a:	2101      	movs	r1, #1
 800ca5c:	4618      	mov	r0, r3
 800ca5e:	f000 f8fe 	bl	800cc5e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>
 800ca62:	4603      	mov	r3, r0
 800ca64:	60bb      	str	r3, [r7, #8]
 800ca66:	f107 0308 	add.w	r3, r7, #8
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f000 f910 	bl	800cc90 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>
 800ca70:	4603      	mov	r3, r0
      }
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	7239      	strb	r1, [r7, #8]
 800ca84:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	f7ff fec1 	bl	800c80e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	601a      	str	r2, [r3, #0]
	    { }
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	4618      	mov	r0, r3
 800ca98:	3710      	adds	r7, #16
 800ca9a:	46bd      	mov	sp, r7
 800ca9c:	bd80      	pop	{r7, pc}

0800ca9e <_ZNSt22_Optional_payload_baseIP3PinEC1IJRS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 800ca9e:	b5b0      	push	{r4, r5, r7, lr}
 800caa0:	b084      	sub	sp, #16
 800caa2:	af00      	add	r7, sp, #0
 800caa4:	60f8      	str	r0, [r7, #12]
 800caa6:	7239      	strb	r1, [r7, #8]
 800caa8:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 800caaa:	68fc      	ldr	r4, [r7, #12]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff feae 	bl	800c80e <_ZSt7forwardIRP3PinEOT_RNSt16remove_referenceIS3_E4typeE>
 800cab2:	4603      	mov	r3, r0
 800cab4:	461a      	mov	r2, r3
 800cab6:	4629      	mov	r1, r5
 800cab8:	4620      	mov	r0, r4
 800caba:	f7ff ffde 	bl	800ca7a <_ZNSt22_Optional_payload_baseIP3PinE8_StorageIS1_Lb1EEC1IJRS1_EEESt10in_place_tDpOT_>
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	2201      	movs	r2, #1
 800cac2:	711a      	strb	r2, [r3, #4]
	{ }
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	4618      	mov	r0, r3
 800cac8:	3710      	adds	r7, #16
 800caca:	46bd      	mov	sp, r7
 800cacc:	bdb0      	pop	{r4, r5, r7, pc}

0800cace <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800cace:	b480      	push	{r7}
 800cad0:	b083      	sub	sp, #12
 800cad2:	af00      	add	r7, sp, #0
 800cad4:	6078      	str	r0, [r7, #4]
 800cad6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	681a      	ldr	r2, [r3, #0]
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	601a      	str	r2, [r3, #0]
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	4618      	mov	r0, r3
 800cae4:	370c      	adds	r7, #12
 800cae6:	46bd      	mov	sp, r7
 800cae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caec:	4770      	bx	lr

0800caee <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 800caee:	b590      	push	{r4, r7, lr}
 800caf0:	b087      	sub	sp, #28
 800caf2:	af00      	add	r7, sp, #0
 800caf4:	60f8      	str	r0, [r7, #12]
 800caf6:	60b9      	str	r1, [r7, #8]
 800caf8:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 800cafa:	68f8      	ldr	r0, [r7, #12]
 800cafc:	f000 f8e3 	bl	800ccc6 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb00:	4604      	mov	r4, r0
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	f7ff fddf 	bl	800c6c6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb08:	4603      	mov	r3, r0
 800cb0a:	1ae2      	subs	r2, r4, r3
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	429a      	cmp	r2, r3
 800cb10:	bf34      	ite	cc
 800cb12:	2301      	movcc	r3, #1
 800cb14:	2300      	movcs	r3, #0
 800cb16:	b2db      	uxtb	r3, r3
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d002      	beq.n	800cb22 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 800cb1c:	6878      	ldr	r0, [r7, #4]
 800cb1e:	f013 fddf 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 800cb22:	68f8      	ldr	r0, [r7, #12]
 800cb24:	f7ff fdcf 	bl	800c6c6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb28:	4604      	mov	r4, r0
 800cb2a:	68f8      	ldr	r0, [r7, #12]
 800cb2c:	f7ff fdcb 	bl	800c6c6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb30:	4603      	mov	r3, r0
 800cb32:	613b      	str	r3, [r7, #16]
 800cb34:	f107 0208 	add.w	r2, r7, #8
 800cb38:	f107 0310 	add.w	r3, r7, #16
 800cb3c:	4611      	mov	r1, r2
 800cb3e:	4618      	mov	r0, r3
 800cb40:	f7f5 fe87 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 800cb44:	4603      	mov	r3, r0
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	4423      	add	r3, r4
 800cb4a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800cb4c:	68f8      	ldr	r0, [r7, #12]
 800cb4e:	f7ff fdba 	bl	800c6c6 <_ZNKSt6vectorIP3PinSaIS1_EE4sizeEv>
 800cb52:	4602      	mov	r2, r0
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	4293      	cmp	r3, r2
 800cb58:	d306      	bcc.n	800cb68 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800cb5a:	68f8      	ldr	r0, [r7, #12]
 800cb5c:	f000 f8b3 	bl	800ccc6 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb60:	4602      	mov	r2, r0
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	4293      	cmp	r3, r2
 800cb66:	d904      	bls.n	800cb72 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x84>
 800cb68:	68f8      	ldr	r0, [r7, #12]
 800cb6a:	f000 f8ac 	bl	800ccc6 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>
 800cb6e:	4603      	mov	r3, r0
 800cb70:	e000      	b.n	800cb74 <_ZNKSt6vectorIP3PinSaIS1_EE12_M_check_lenEjPKc+0x86>
 800cb72:	697b      	ldr	r3, [r7, #20]
      }
 800cb74:	4618      	mov	r0, r3
 800cb76:	371c      	adds	r7, #28
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd90      	pop	{r4, r7, pc}

0800cb7c <_ZNSt6vectorIP3PinSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800cb7c:	b580      	push	{r7, lr}
 800cb7e:	b084      	sub	sp, #16
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800cb84:	687a      	ldr	r2, [r7, #4]
 800cb86:	f107 030c 	add.w	r3, r7, #12
 800cb8a:	4611      	mov	r1, r2
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	f7ff ff9e 	bl	800cace <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	4618      	mov	r0, r3
 800cb96:	3710      	adds	r7, #16
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <_ZN9__gnu_cxxmiIPP3PinSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b083      	sub	sp, #12
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f000 f835 	bl	800cc16 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cbac:	4603      	mov	r3, r0
 800cbae:	681c      	ldr	r4, [r3, #0]
 800cbb0:	6838      	ldr	r0, [r7, #0]
 800cbb2:	f000 f830 	bl	800cc16 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	1ae3      	subs	r3, r4, r3
 800cbbc:	109b      	asrs	r3, r3, #2
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	370c      	adds	r7, #12
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd90      	pop	{r4, r7, pc}

0800cbc6 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b082      	sub	sp, #8
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
 800cbce:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d006      	beq.n	800cbe4 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x1e>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	6839      	ldr	r1, [r7, #0]
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f000 f884 	bl	800cce8 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	e000      	b.n	800cbe6 <_ZNSt12_Vector_baseIP3PinSaIS1_EE11_M_allocateEj+0x20>
 800cbe4:	2300      	movs	r3, #0
      }
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3708      	adds	r7, #8
 800cbea:	46bd      	mov	sp, r7
 800cbec:	bd80      	pop	{r7, pc}

0800cbee <_ZNSt6vectorIP3PinSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800cbee:	b590      	push	{r4, r7, lr}
 800cbf0:	b087      	sub	sp, #28
 800cbf2:	af02      	add	r7, sp, #8
 800cbf4:	60f8      	str	r0, [r7, #12]
 800cbf6:	60b9      	str	r1, [r7, #8]
 800cbf8:	607a      	str	r2, [r7, #4]
 800cbfa:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800cbfc:	f88d 4000 	strb.w	r4, [sp]
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	687a      	ldr	r2, [r7, #4]
 800cc04:	68b9      	ldr	r1, [r7, #8]
 800cc06:	68f8      	ldr	r0, [r7, #12]
 800cc08:	f000 f88e 	bl	800cd28 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800cc0c:	4603      	mov	r3, r0
      }
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3714      	adds	r7, #20
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd90      	pop	{r4, r7, pc}

0800cc16 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800cc16:	b480      	push	{r7}
 800cc18:	b083      	sub	sp, #12
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	4618      	mov	r0, r3
 800cc22:	370c      	adds	r7, #12
 800cc24:	46bd      	mov	sp, r7
 800cc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc2a:	4770      	bx	lr

0800cc2c <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	4618      	mov	r0, r3
 800cc38:	370c      	adds	r7, #12
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc40:	4770      	bx	lr

0800cc42 <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800cc42:	b580      	push	{r7, lr}
 800cc44:	b084      	sub	sp, #16
 800cc46:	af00      	add	r7, sp, #0
 800cc48:	60f8      	str	r0, [r7, #12]
 800cc4a:	60b9      	str	r1, [r7, #8]
 800cc4c:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 800cc4e:	68b9      	ldr	r1, [r7, #8]
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f000 f885 	bl	800cd60 <_ZSt8_DestroyIPP3PinEvT_S3_>
    }
 800cc56:	bf00      	nop
 800cc58:	3710      	adds	r7, #16
 800cc5a:	46bd      	mov	sp, r7
 800cc5c:	bd80      	pop	{r7, pc}

0800cc5e <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 800cc5e:	b580      	push	{r7, lr}
 800cc60:	b084      	sub	sp, #16
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
 800cc66:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681a      	ldr	r2, [r3, #0]
 800cc6c:	683b      	ldr	r3, [r7, #0]
 800cc6e:	009b      	lsls	r3, r3, #2
 800cc70:	425b      	negs	r3, r3
 800cc72:	4413      	add	r3, r2
 800cc74:	60fb      	str	r3, [r7, #12]
 800cc76:	f107 020c 	add.w	r2, r7, #12
 800cc7a:	f107 0308 	add.w	r3, r7, #8
 800cc7e:	4611      	mov	r1, r2
 800cc80:	4618      	mov	r0, r3
 800cc82:	f7ff ff24 	bl	800cace <_ZN9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}

0800cc90 <_ZNK9__gnu_cxx17__normal_iteratorIPP3PinSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800cc90:	b480      	push	{r7}
 800cc92:	b083      	sub	sp, #12
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <_ZN9__gnu_cxx13new_allocatorIP3PinE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b084      	sub	sp, #16
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	009b      	lsls	r3, r3, #2
 800ccb8:	4619      	mov	r1, r3
 800ccba:	68b8      	ldr	r0, [r7, #8]
 800ccbc:	f013 fc44 	bl	8020548 <_ZdlPvj>
      }
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <_ZNKSt6vectorIP3PinSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b082      	sub	sp, #8
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f000 f881 	bl	800cdd8 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	4618      	mov	r0, r3
 800ccda:	f000 f863 	bl	800cda4 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>
 800ccde:	4603      	mov	r3, r0
 800cce0:	4618      	mov	r0, r3
 800cce2:	3708      	adds	r7, #8
 800cce4:	46bd      	mov	sp, r7
 800cce6:	bd80      	pop	{r7, pc}

0800cce8 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800cce8:	b580      	push	{r7, lr}
 800ccea:	b084      	sub	sp, #16
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	6039      	str	r1, [r7, #0]
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	60fb      	str	r3, [r7, #12]
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 800ccfa:	f7f3 fb11 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d006      	beq.n	800cd12 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f013 fc1f 	bl	802054c <_Znwj>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	e006      	b.n	800cd20 <_ZNSt16allocator_traitsISaIP3PinEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 800cd12:	2200      	movs	r2, #0
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	68f8      	ldr	r0, [r7, #12]
 800cd18:	f000 f8a9 	bl	800ce6e <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>
 800cd1c:	4603      	mov	r3, r0
 800cd1e:	bf00      	nop
      { return __a.allocate(__n); }
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}

0800cd28 <_ZNSt6vectorIP3PinSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	60f8      	str	r0, [r7, #12]
 800cd30:	60b9      	str	r1, [r7, #8]
 800cd32:	607a      	str	r2, [r7, #4]
 800cd34:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	687a      	ldr	r2, [r7, #4]
 800cd3a:	68b9      	ldr	r1, [r7, #8]
 800cd3c:	68f8      	ldr	r0, [r7, #12]
 800cd3e:	f000 f856 	bl	800cdee <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>
 800cd42:	4603      	mov	r3, r0
      }
 800cd44:	4618      	mov	r0, r3
 800cd46:	3710      	adds	r7, #16
 800cd48:	46bd      	mov	sp, r7
 800cd4a:	bd80      	pop	{r7, pc}

0800cd4c <_ZSt10destroy_atIP3PinEvPT_>:
    destroy_at(_Tp* __location)
 800cd4c:	b480      	push	{r7}
 800cd4e:	b083      	sub	sp, #12
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
    }
 800cd54:	bf00      	nop
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <_ZSt8_DestroyIPP3PinEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b082      	sub	sp, #8
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 800cd6a:	f7f3 fad9 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d004      	beq.n	800cd7e <_ZSt8_DestroyIPP3PinEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	6878      	ldr	r0, [r7, #4]
 800cd78:	f000 f856 	bl	800ce28 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>
 800cd7c:	e003      	b.n	800cd86 <_ZSt8_DestroyIPP3PinEvT_S3_+0x26>
	__destroy(__first, __last);
 800cd7e:	6839      	ldr	r1, [r7, #0]
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f000 f869 	bl	800ce58 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>
    }
 800cd86:	3708      	adds	r7, #8
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	bd80      	pop	{r7, pc}

0800cd8c <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 800cd94:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 800cd98:	4618      	mov	r0, r3
 800cd9a:	370c      	adds	r7, #12
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr

0800cda4 <_ZNSt6vectorIP3PinSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b084      	sub	sp, #16
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800cdac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 800cdb0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800cdb2:	6878      	ldr	r0, [r7, #4]
 800cdb4:	f7ff ffea 	bl	800cd8c <_ZNSt16allocator_traitsISaIP3PinEE8max_sizeERKS2_>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800cdbc:	f107 0208 	add.w	r2, r7, #8
 800cdc0:	f107 030c 	add.w	r3, r7, #12
 800cdc4:	4611      	mov	r1, r2
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	f7f6 f80d 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	681b      	ldr	r3, [r3, #0]
      }
 800cdd0:	4618      	mov	r0, r3
 800cdd2:	3710      	adds	r7, #16
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	bd80      	pop	{r7, pc}

0800cdd8 <_ZNKSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800cdd8:	b480      	push	{r7}
 800cdda:	b083      	sub	sp, #12
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	4618      	mov	r0, r3
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <_ZSt12__relocate_aIPP3PinS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800cdee:	b5b0      	push	{r4, r5, r7, lr}
 800cdf0:	b084      	sub	sp, #16
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	60f8      	str	r0, [r7, #12]
 800cdf6:	60b9      	str	r1, [r7, #8]
 800cdf8:	607a      	str	r2, [r7, #4]
 800cdfa:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 800cdfc:	68f8      	ldr	r0, [r7, #12]
 800cdfe:	f000 f855 	bl	800ceac <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce02:	4604      	mov	r4, r0
 800ce04:	68b8      	ldr	r0, [r7, #8]
 800ce06:	f000 f851 	bl	800ceac <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce0a:	4605      	mov	r5, r0
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f000 f84d 	bl	800ceac <_ZSt12__niter_baseIPP3PinET_S3_>
 800ce12:	4602      	mov	r2, r0
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	4629      	mov	r1, r5
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 f852 	bl	800cec2 <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800ce1e:	4603      	mov	r3, r0
    }
 800ce20:	4618      	mov	r0, r3
 800ce22:	3710      	adds	r7, #16
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bdb0      	pop	{r4, r5, r7, pc}

0800ce28 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	b082      	sub	sp, #8
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
 800ce30:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d00a      	beq.n	800ce50 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f000 f85f 	bl	800cefe <_ZSt11__addressofIP3PinEPT_RS2_>
 800ce40:	4603      	mov	r3, r0
 800ce42:	4618      	mov	r0, r3
 800ce44:	f000 f866 	bl	800cf14 <_ZSt8_DestroyIP3PinEvPT_>
	  for (; __first != __last; ++__first)
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	3304      	adds	r3, #4
 800ce4c:	607b      	str	r3, [r7, #4]
 800ce4e:	e7f0      	b.n	800ce32 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP3PinEEvT_S5_+0xa>
	}
 800ce50:	bf00      	nop
 800ce52:	3708      	adds	r7, #8
 800ce54:	46bd      	mov	sp, r7
 800ce56:	bd80      	pop	{r7, pc}

0800ce58 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP3PinEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800ce58:	b480      	push	{r7}
 800ce5a:	b083      	sub	sp, #12
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
 800ce62:	bf00      	nop
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr

0800ce6e <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800ce6e:	b580      	push	{r7, lr}
 800ce70:	b084      	sub	sp, #16
 800ce72:	af00      	add	r7, sp, #0
 800ce74:	60f8      	str	r0, [r7, #12]
 800ce76:	60b9      	str	r1, [r7, #8]
 800ce78:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 800ce7a:	68f8      	ldr	r0, [r7, #12]
 800ce7c:	f000 f855 	bl	800cf2a <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>
 800ce80:	4602      	mov	r2, r0
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	4293      	cmp	r3, r2
 800ce86:	bf8c      	ite	hi
 800ce88:	2301      	movhi	r3, #1
 800ce8a:	2300      	movls	r3, #0
 800ce8c:	b2db      	uxtb	r3, r3
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <_ZN9__gnu_cxx13new_allocatorIP3PinE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800ce92:	f013 fc22 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f013 fb56 	bl	802054c <_Znwj>
 800cea0:	4603      	mov	r3, r0
 800cea2:	bf00      	nop
      }
 800cea4:	4618      	mov	r0, r3
 800cea6:	3710      	adds	r7, #16
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bd80      	pop	{r7, pc}

0800ceac <_ZSt12__niter_baseIPP3PinET_S3_>:
    __niter_base(_Iterator __it)
 800ceac:	b480      	push	{r7}
 800ceae:	b083      	sub	sp, #12
 800ceb0:	af00      	add	r7, sp, #0
 800ceb2:	6078      	str	r0, [r7, #4]
    { return __it; }
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	370c      	adds	r7, #12
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800cec2:	b580      	push	{r7, lr}
 800cec4:	b086      	sub	sp, #24
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	60f8      	str	r0, [r7, #12]
 800ceca:	60b9      	str	r1, [r7, #8]
 800cecc:	607a      	str	r2, [r7, #4]
 800cece:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800ced0:	68ba      	ldr	r2, [r7, #8]
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	1ad3      	subs	r3, r2, r3
 800ced6:	109b      	asrs	r3, r3, #2
 800ced8:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	dd06      	ble.n	800ceee <_ZSt14__relocate_a_1IP3PinS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800cee0:	697b      	ldr	r3, [r7, #20]
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	461a      	mov	r2, r3
 800cee6:	68f9      	ldr	r1, [r7, #12]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f013 fc69 	bl	80207c0 <memmove>
      return __result + __count;
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	4413      	add	r3, r2
    }
 800cef6:	4618      	mov	r0, r3
 800cef8:	3718      	adds	r7, #24
 800cefa:	46bd      	mov	sp, r7
 800cefc:	bd80      	pop	{r7, pc}

0800cefe <_ZSt11__addressofIP3PinEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800cefe:	b480      	push	{r7}
 800cf00:	b083      	sub	sp, #12
 800cf02:	af00      	add	r7, sp, #0
 800cf04:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	4618      	mov	r0, r3
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <_ZSt8_DestroyIP3PinEvPT_>:
    _Destroy(_Tp* __pointer)
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b082      	sub	sp, #8
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f7ff ff15 	bl	800cd4c <_ZSt10destroy_atIP3PinEvPT_>
    }
 800cf22:	bf00      	nop
 800cf24:	3708      	adds	r7, #8
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}

0800cf2a <_ZNK9__gnu_cxx13new_allocatorIP3PinE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800cf2a:	b480      	push	{r7}
 800cf2c:	b083      	sub	sp, #12
 800cf2e:	af00      	add	r7, sp, #0
 800cf30:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800cf32:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800cf36:	4618      	mov	r0, r3
 800cf38:	370c      	adds	r7, #12
 800cf3a:	46bd      	mov	sp, r7
 800cf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf40:	4770      	bx	lr
	...

0800cf44 <_Z41__static_initialization_and_destruction_0ii>:
Pin PF10(GPIOF, GPIO_PIN_10);
Pin PF11(GPIOF, GPIO_PIN_11);
Pin PF12(GPIOF, GPIO_PIN_12);
Pin PF13(GPIOF, GPIO_PIN_13);
Pin PF14(GPIOF, GPIO_PIN_14);
Pin PF15(GPIOF, GPIO_PIN_15);
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b082      	sub	sp, #8
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	6078      	str	r0, [r7, #4]
 800cf4c:	6039      	str	r1, [r7, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	f040 82ad 	bne.w	800d4b0 <_Z41__static_initialization_and_destruction_0ii+0x56c>
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cf5c:	4293      	cmp	r3, r2
 800cf5e:	f040 82a7 	bne.w	800d4b0 <_Z41__static_initialization_and_destruction_0ii+0x56c>
vector<Pin*> Pin::all_pins;
 800cf62:	48ba      	ldr	r0, [pc, #744]	; (800d24c <_Z41__static_initialization_and_destruction_0ii+0x308>)
 800cf64:	f7ff fb1d 	bl	800c5a2 <_ZNSt6vectorIP3PinSaIS1_EEC1Ev>
Pin PA0(GPIOA, GPIO_PIN_0);
 800cf68:	2201      	movs	r2, #1
 800cf6a:	49b9      	ldr	r1, [pc, #740]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf6c:	48b9      	ldr	r0, [pc, #740]	; (800d254 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 800cf6e:	f7ff fb25 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA1(GPIOA, GPIO_PIN_1);
 800cf72:	2202      	movs	r2, #2
 800cf74:	49b6      	ldr	r1, [pc, #728]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf76:	48b8      	ldr	r0, [pc, #736]	; (800d258 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 800cf78:	f7ff fb20 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA2(GPIOA, GPIO_PIN_2);
 800cf7c:	2204      	movs	r2, #4
 800cf7e:	49b4      	ldr	r1, [pc, #720]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf80:	48b6      	ldr	r0, [pc, #728]	; (800d25c <_Z41__static_initialization_and_destruction_0ii+0x318>)
 800cf82:	f7ff fb1b 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA3(GPIOA, GPIO_PIN_3);
 800cf86:	2208      	movs	r2, #8
 800cf88:	49b1      	ldr	r1, [pc, #708]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf8a:	48b5      	ldr	r0, [pc, #724]	; (800d260 <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 800cf8c:	f7ff fb16 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA4(GPIOA, GPIO_PIN_4);
 800cf90:	2210      	movs	r2, #16
 800cf92:	49af      	ldr	r1, [pc, #700]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf94:	48b3      	ldr	r0, [pc, #716]	; (800d264 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 800cf96:	f7ff fb11 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA5(GPIOA, GPIO_PIN_5);
 800cf9a:	2220      	movs	r2, #32
 800cf9c:	49ac      	ldr	r1, [pc, #688]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cf9e:	48b2      	ldr	r0, [pc, #712]	; (800d268 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 800cfa0:	f7ff fb0c 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA6(GPIOA, GPIO_PIN_6);
 800cfa4:	2240      	movs	r2, #64	; 0x40
 800cfa6:	49aa      	ldr	r1, [pc, #680]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfa8:	48b0      	ldr	r0, [pc, #704]	; (800d26c <_Z41__static_initialization_and_destruction_0ii+0x328>)
 800cfaa:	f7ff fb07 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA7(GPIOA, GPIO_PIN_7);
 800cfae:	2280      	movs	r2, #128	; 0x80
 800cfb0:	49a7      	ldr	r1, [pc, #668]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfb2:	48af      	ldr	r0, [pc, #700]	; (800d270 <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 800cfb4:	f7ff fb02 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA8(GPIOA, GPIO_PIN_8);
 800cfb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cfbc:	49a4      	ldr	r1, [pc, #656]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfbe:	48ad      	ldr	r0, [pc, #692]	; (800d274 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 800cfc0:	f7ff fafc 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA9(GPIOA, GPIO_PIN_9);
 800cfc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfc8:	49a1      	ldr	r1, [pc, #644]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfca:	48ab      	ldr	r0, [pc, #684]	; (800d278 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 800cfcc:	f7ff faf6 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA10(GPIOA, GPIO_PIN_10);
 800cfd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cfd4:	499e      	ldr	r1, [pc, #632]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfd6:	48a9      	ldr	r0, [pc, #676]	; (800d27c <_Z41__static_initialization_and_destruction_0ii+0x338>)
 800cfd8:	f7ff faf0 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA11(GPIOA, GPIO_PIN_11);
 800cfdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cfe0:	499b      	ldr	r1, [pc, #620]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfe2:	48a7      	ldr	r0, [pc, #668]	; (800d280 <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 800cfe4:	f7ff faea 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA12(GPIOA, GPIO_PIN_12);
 800cfe8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cfec:	4998      	ldr	r1, [pc, #608]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cfee:	48a5      	ldr	r0, [pc, #660]	; (800d284 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 800cff0:	f7ff fae4 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA13(GPIOA, GPIO_PIN_13);
 800cff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cff8:	4995      	ldr	r1, [pc, #596]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800cffa:	48a3      	ldr	r0, [pc, #652]	; (800d288 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 800cffc:	f7ff fade 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA14(GPIOA, GPIO_PIN_14);
 800d000:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d004:	4992      	ldr	r1, [pc, #584]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d006:	48a1      	ldr	r0, [pc, #644]	; (800d28c <_Z41__static_initialization_and_destruction_0ii+0x348>)
 800d008:	f7ff fad8 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PA15(GPIOA, GPIO_PIN_15);
 800d00c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d010:	498f      	ldr	r1, [pc, #572]	; (800d250 <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 800d012:	489f      	ldr	r0, [pc, #636]	; (800d290 <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 800d014:	f7ff fad2 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB0(GPIOB, GPIO_PIN_0);
 800d018:	2201      	movs	r2, #1
 800d01a:	499e      	ldr	r1, [pc, #632]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d01c:	489e      	ldr	r0, [pc, #632]	; (800d298 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 800d01e:	f7ff facd 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB1(GPIOB, GPIO_PIN_1);
 800d022:	2202      	movs	r2, #2
 800d024:	499b      	ldr	r1, [pc, #620]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d026:	489d      	ldr	r0, [pc, #628]	; (800d29c <_Z41__static_initialization_and_destruction_0ii+0x358>)
 800d028:	f7ff fac8 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB2(GPIOB, GPIO_PIN_2);
 800d02c:	2204      	movs	r2, #4
 800d02e:	4999      	ldr	r1, [pc, #612]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d030:	489b      	ldr	r0, [pc, #620]	; (800d2a0 <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 800d032:	f7ff fac3 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB3(GPIOB, GPIO_PIN_3);
 800d036:	2208      	movs	r2, #8
 800d038:	4996      	ldr	r1, [pc, #600]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d03a:	489a      	ldr	r0, [pc, #616]	; (800d2a4 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 800d03c:	f7ff fabe 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB4(GPIOB, GPIO_PIN_4);
 800d040:	2210      	movs	r2, #16
 800d042:	4994      	ldr	r1, [pc, #592]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d044:	4898      	ldr	r0, [pc, #608]	; (800d2a8 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 800d046:	f7ff fab9 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB5(GPIOB, GPIO_PIN_5);
 800d04a:	2220      	movs	r2, #32
 800d04c:	4991      	ldr	r1, [pc, #580]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d04e:	4897      	ldr	r0, [pc, #604]	; (800d2ac <_Z41__static_initialization_and_destruction_0ii+0x368>)
 800d050:	f7ff fab4 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB6(GPIOB, GPIO_PIN_6);
 800d054:	2240      	movs	r2, #64	; 0x40
 800d056:	498f      	ldr	r1, [pc, #572]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d058:	4895      	ldr	r0, [pc, #596]	; (800d2b0 <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 800d05a:	f7ff faaf 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB7(GPIOB, GPIO_PIN_7);
 800d05e:	2280      	movs	r2, #128	; 0x80
 800d060:	498c      	ldr	r1, [pc, #560]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d062:	4894      	ldr	r0, [pc, #592]	; (800d2b4 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 800d064:	f7ff faaa 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB8(GPIOB, GPIO_PIN_8);
 800d068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d06c:	4989      	ldr	r1, [pc, #548]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d06e:	4892      	ldr	r0, [pc, #584]	; (800d2b8 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 800d070:	f7ff faa4 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB9(GPIOB, GPIO_PIN_9);
 800d074:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d078:	4986      	ldr	r1, [pc, #536]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d07a:	4890      	ldr	r0, [pc, #576]	; (800d2bc <_Z41__static_initialization_and_destruction_0ii+0x378>)
 800d07c:	f7ff fa9e 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB10(GPIOB, GPIO_PIN_10);
 800d080:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d084:	4983      	ldr	r1, [pc, #524]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d086:	488e      	ldr	r0, [pc, #568]	; (800d2c0 <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 800d088:	f7ff fa98 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB11(GPIOB, GPIO_PIN_11);
 800d08c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d090:	4980      	ldr	r1, [pc, #512]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d092:	488c      	ldr	r0, [pc, #560]	; (800d2c4 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 800d094:	f7ff fa92 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB12(GPIOB, GPIO_PIN_12);
 800d098:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d09c:	497d      	ldr	r1, [pc, #500]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d09e:	488a      	ldr	r0, [pc, #552]	; (800d2c8 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 800d0a0:	f7ff fa8c 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB13(GPIOB, GPIO_PIN_13);
 800d0a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d0a8:	497a      	ldr	r1, [pc, #488]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0aa:	4888      	ldr	r0, [pc, #544]	; (800d2cc <_Z41__static_initialization_and_destruction_0ii+0x388>)
 800d0ac:	f7ff fa86 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB14(GPIOB, GPIO_PIN_14);
 800d0b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d0b4:	4977      	ldr	r1, [pc, #476]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0b6:	4886      	ldr	r0, [pc, #536]	; (800d2d0 <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 800d0b8:	f7ff fa80 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PB15(GPIOB, GPIO_PIN_15);
 800d0bc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d0c0:	4974      	ldr	r1, [pc, #464]	; (800d294 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 800d0c2:	4884      	ldr	r0, [pc, #528]	; (800d2d4 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 800d0c4:	f7ff fa7a 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC0(GPIOC, GPIO_PIN_0);
 800d0c8:	2201      	movs	r2, #1
 800d0ca:	4983      	ldr	r1, [pc, #524]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0cc:	4883      	ldr	r0, [pc, #524]	; (800d2dc <_Z41__static_initialization_and_destruction_0ii+0x398>)
 800d0ce:	f7ff fa75 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC1(GPIOC, GPIO_PIN_1);
 800d0d2:	2202      	movs	r2, #2
 800d0d4:	4980      	ldr	r1, [pc, #512]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0d6:	4882      	ldr	r0, [pc, #520]	; (800d2e0 <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 800d0d8:	f7ff fa70 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC2(GPIOC, GPIO_PIN_2);
 800d0dc:	2204      	movs	r2, #4
 800d0de:	497e      	ldr	r1, [pc, #504]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0e0:	4880      	ldr	r0, [pc, #512]	; (800d2e4 <_Z41__static_initialization_and_destruction_0ii+0x3a0>)
 800d0e2:	f7ff fa6b 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC3(GPIOC, GPIO_PIN_3);
 800d0e6:	2208      	movs	r2, #8
 800d0e8:	497b      	ldr	r1, [pc, #492]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0ea:	487f      	ldr	r0, [pc, #508]	; (800d2e8 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 800d0ec:	f7ff fa66 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC4(GPIOC, GPIO_PIN_4);
 800d0f0:	2210      	movs	r2, #16
 800d0f2:	4979      	ldr	r1, [pc, #484]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0f4:	487d      	ldr	r0, [pc, #500]	; (800d2ec <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 800d0f6:	f7ff fa61 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC5(GPIOC, GPIO_PIN_5);
 800d0fa:	2220      	movs	r2, #32
 800d0fc:	4976      	ldr	r1, [pc, #472]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d0fe:	487c      	ldr	r0, [pc, #496]	; (800d2f0 <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 800d100:	f7ff fa5c 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC6(GPIOC, GPIO_PIN_6);
 800d104:	2240      	movs	r2, #64	; 0x40
 800d106:	4974      	ldr	r1, [pc, #464]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d108:	487a      	ldr	r0, [pc, #488]	; (800d2f4 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 800d10a:	f7ff fa57 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC7(GPIOC, GPIO_PIN_7);
 800d10e:	2280      	movs	r2, #128	; 0x80
 800d110:	4971      	ldr	r1, [pc, #452]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d112:	4879      	ldr	r0, [pc, #484]	; (800d2f8 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 800d114:	f7ff fa52 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC8(GPIOC, GPIO_PIN_8);
 800d118:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d11c:	496e      	ldr	r1, [pc, #440]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d11e:	4877      	ldr	r0, [pc, #476]	; (800d2fc <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 800d120:	f7ff fa4c 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC9(GPIOC, GPIO_PIN_9);
 800d124:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d128:	496b      	ldr	r1, [pc, #428]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d12a:	4875      	ldr	r0, [pc, #468]	; (800d300 <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 800d12c:	f7ff fa46 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC10(GPIOC, GPIO_PIN_10);
 800d130:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d134:	4968      	ldr	r1, [pc, #416]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d136:	4873      	ldr	r0, [pc, #460]	; (800d304 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 800d138:	f7ff fa40 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC11(GPIOC, GPIO_PIN_11);
 800d13c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d140:	4965      	ldr	r1, [pc, #404]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d142:	4871      	ldr	r0, [pc, #452]	; (800d308 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 800d144:	f7ff fa3a 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC12(GPIOC, GPIO_PIN_12);
 800d148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d14c:	4962      	ldr	r1, [pc, #392]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d14e:	486f      	ldr	r0, [pc, #444]	; (800d30c <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 800d150:	f7ff fa34 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC13(GPIOC, GPIO_PIN_13);
 800d154:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d158:	495f      	ldr	r1, [pc, #380]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d15a:	486d      	ldr	r0, [pc, #436]	; (800d310 <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 800d15c:	f7ff fa2e 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC14(GPIOC, GPIO_PIN_14);
 800d160:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d164:	495c      	ldr	r1, [pc, #368]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d166:	486b      	ldr	r0, [pc, #428]	; (800d314 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 800d168:	f7ff fa28 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PC15(GPIOC, GPIO_PIN_15);
 800d16c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d170:	4959      	ldr	r1, [pc, #356]	; (800d2d8 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 800d172:	4869      	ldr	r0, [pc, #420]	; (800d318 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 800d174:	f7ff fa22 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD0(GPIOD, GPIO_PIN_0);
 800d178:	2201      	movs	r2, #1
 800d17a:	4968      	ldr	r1, [pc, #416]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d17c:	4868      	ldr	r0, [pc, #416]	; (800d320 <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 800d17e:	f7ff fa1d 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD1(GPIOD, GPIO_PIN_1);
 800d182:	2202      	movs	r2, #2
 800d184:	4965      	ldr	r1, [pc, #404]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d186:	4867      	ldr	r0, [pc, #412]	; (800d324 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 800d188:	f7ff fa18 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD2(GPIOD, GPIO_PIN_2);
 800d18c:	2204      	movs	r2, #4
 800d18e:	4963      	ldr	r1, [pc, #396]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d190:	4865      	ldr	r0, [pc, #404]	; (800d328 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 800d192:	f7ff fa13 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD3(GPIOD, GPIO_PIN_3);
 800d196:	2208      	movs	r2, #8
 800d198:	4960      	ldr	r1, [pc, #384]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d19a:	4864      	ldr	r0, [pc, #400]	; (800d32c <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 800d19c:	f7ff fa0e 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD4(GPIOD, GPIO_PIN_4);
 800d1a0:	2210      	movs	r2, #16
 800d1a2:	495e      	ldr	r1, [pc, #376]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1a4:	4862      	ldr	r0, [pc, #392]	; (800d330 <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 800d1a6:	f7ff fa09 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD5(GPIOD, GPIO_PIN_5);
 800d1aa:	2220      	movs	r2, #32
 800d1ac:	495b      	ldr	r1, [pc, #364]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ae:	4861      	ldr	r0, [pc, #388]	; (800d334 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 800d1b0:	f7ff fa04 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD6(GPIOD, GPIO_PIN_6);
 800d1b4:	2240      	movs	r2, #64	; 0x40
 800d1b6:	4959      	ldr	r1, [pc, #356]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1b8:	485f      	ldr	r0, [pc, #380]	; (800d338 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 800d1ba:	f7ff f9ff 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD7(GPIOD, GPIO_PIN_7);
 800d1be:	2280      	movs	r2, #128	; 0x80
 800d1c0:	4956      	ldr	r1, [pc, #344]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1c2:	485e      	ldr	r0, [pc, #376]	; (800d33c <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 800d1c4:	f7ff f9fa 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD8(GPIOD, GPIO_PIN_8);
 800d1c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d1cc:	4953      	ldr	r1, [pc, #332]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1ce:	485c      	ldr	r0, [pc, #368]	; (800d340 <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 800d1d0:	f7ff f9f4 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD9(GPIOD, GPIO_PIN_9);
 800d1d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d1d8:	4950      	ldr	r1, [pc, #320]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1da:	485a      	ldr	r0, [pc, #360]	; (800d344 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 800d1dc:	f7ff f9ee 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD10(GPIOD, GPIO_PIN_10);
 800d1e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d1e4:	494d      	ldr	r1, [pc, #308]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1e6:	4858      	ldr	r0, [pc, #352]	; (800d348 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 800d1e8:	f7ff f9e8 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD11(GPIOD, GPIO_PIN_11);
 800d1ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d1f0:	494a      	ldr	r1, [pc, #296]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1f2:	4856      	ldr	r0, [pc, #344]	; (800d34c <_Z41__static_initialization_and_destruction_0ii+0x408>)
 800d1f4:	f7ff f9e2 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD12(GPIOD, GPIO_PIN_12);
 800d1f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d1fc:	4947      	ldr	r1, [pc, #284]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d1fe:	4854      	ldr	r0, [pc, #336]	; (800d350 <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 800d200:	f7ff f9dc 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD13(GPIOD, GPIO_PIN_13);
 800d204:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d208:	4944      	ldr	r1, [pc, #272]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d20a:	4852      	ldr	r0, [pc, #328]	; (800d354 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 800d20c:	f7ff f9d6 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD14(GPIOD, GPIO_PIN_14);
 800d210:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d214:	4941      	ldr	r1, [pc, #260]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d216:	4850      	ldr	r0, [pc, #320]	; (800d358 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 800d218:	f7ff f9d0 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PD15(GPIOD, GPIO_PIN_15);
 800d21c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d220:	493e      	ldr	r1, [pc, #248]	; (800d31c <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 800d222:	484e      	ldr	r0, [pc, #312]	; (800d35c <_Z41__static_initialization_and_destruction_0ii+0x418>)
 800d224:	f7ff f9ca 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE0(GPIOE, GPIO_PIN_0);
 800d228:	2201      	movs	r2, #1
 800d22a:	494d      	ldr	r1, [pc, #308]	; (800d360 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d22c:	484d      	ldr	r0, [pc, #308]	; (800d364 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 800d22e:	f7ff f9c5 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE1(GPIOE, GPIO_PIN_1);
 800d232:	2202      	movs	r2, #2
 800d234:	494a      	ldr	r1, [pc, #296]	; (800d360 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d236:	484c      	ldr	r0, [pc, #304]	; (800d368 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 800d238:	f7ff f9c0 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE2(GPIOE, GPIO_PIN_2);
 800d23c:	2204      	movs	r2, #4
 800d23e:	4948      	ldr	r1, [pc, #288]	; (800d360 <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 800d240:	484a      	ldr	r0, [pc, #296]	; (800d36c <_Z41__static_initialization_and_destruction_0ii+0x428>)
 800d242:	f7ff f9bb 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE3(GPIOE, GPIO_PIN_3);
 800d246:	2208      	movs	r2, #8
 800d248:	e092      	b.n	800d370 <_Z41__static_initialization_and_destruction_0ii+0x42c>
 800d24a:	bf00      	nop
 800d24c:	240001c4 	.word	0x240001c4
 800d250:	58020000 	.word	0x58020000
 800d254:	240001d0 	.word	0x240001d0
 800d258:	240001d8 	.word	0x240001d8
 800d25c:	240001e0 	.word	0x240001e0
 800d260:	240001e8 	.word	0x240001e8
 800d264:	240001f0 	.word	0x240001f0
 800d268:	240001f8 	.word	0x240001f8
 800d26c:	24000200 	.word	0x24000200
 800d270:	24000208 	.word	0x24000208
 800d274:	24000210 	.word	0x24000210
 800d278:	24000218 	.word	0x24000218
 800d27c:	24000220 	.word	0x24000220
 800d280:	24000228 	.word	0x24000228
 800d284:	24000230 	.word	0x24000230
 800d288:	24000238 	.word	0x24000238
 800d28c:	24000240 	.word	0x24000240
 800d290:	24000248 	.word	0x24000248
 800d294:	58020400 	.word	0x58020400
 800d298:	24000250 	.word	0x24000250
 800d29c:	24000258 	.word	0x24000258
 800d2a0:	24000260 	.word	0x24000260
 800d2a4:	24000268 	.word	0x24000268
 800d2a8:	24000270 	.word	0x24000270
 800d2ac:	24000278 	.word	0x24000278
 800d2b0:	24000280 	.word	0x24000280
 800d2b4:	24000288 	.word	0x24000288
 800d2b8:	24000290 	.word	0x24000290
 800d2bc:	24000298 	.word	0x24000298
 800d2c0:	240002a0 	.word	0x240002a0
 800d2c4:	240002a8 	.word	0x240002a8
 800d2c8:	240002b0 	.word	0x240002b0
 800d2cc:	240002b8 	.word	0x240002b8
 800d2d0:	240002c0 	.word	0x240002c0
 800d2d4:	240002c8 	.word	0x240002c8
 800d2d8:	58020800 	.word	0x58020800
 800d2dc:	240002d0 	.word	0x240002d0
 800d2e0:	240002d8 	.word	0x240002d8
 800d2e4:	240002e0 	.word	0x240002e0
 800d2e8:	240002e8 	.word	0x240002e8
 800d2ec:	240002f0 	.word	0x240002f0
 800d2f0:	240002f8 	.word	0x240002f8
 800d2f4:	24000300 	.word	0x24000300
 800d2f8:	24000308 	.word	0x24000308
 800d2fc:	24000310 	.word	0x24000310
 800d300:	24000318 	.word	0x24000318
 800d304:	24000320 	.word	0x24000320
 800d308:	24000328 	.word	0x24000328
 800d30c:	24000330 	.word	0x24000330
 800d310:	24000338 	.word	0x24000338
 800d314:	24000340 	.word	0x24000340
 800d318:	24000348 	.word	0x24000348
 800d31c:	58020c00 	.word	0x58020c00
 800d320:	24000350 	.word	0x24000350
 800d324:	24000358 	.word	0x24000358
 800d328:	24000360 	.word	0x24000360
 800d32c:	24000368 	.word	0x24000368
 800d330:	24000370 	.word	0x24000370
 800d334:	24000378 	.word	0x24000378
 800d338:	24000380 	.word	0x24000380
 800d33c:	24000388 	.word	0x24000388
 800d340:	24000390 	.word	0x24000390
 800d344:	24000398 	.word	0x24000398
 800d348:	240003a0 	.word	0x240003a0
 800d34c:	240003a8 	.word	0x240003a8
 800d350:	240003b0 	.word	0x240003b0
 800d354:	240003b8 	.word	0x240003b8
 800d358:	240003c0 	.word	0x240003c0
 800d35c:	240003c8 	.word	0x240003c8
 800d360:	58021000 	.word	0x58021000
 800d364:	240003d0 	.word	0x240003d0
 800d368:	240003d8 	.word	0x240003d8
 800d36c:	240003e0 	.word	0x240003e0
 800d370:	4957      	ldr	r1, [pc, #348]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d372:	4858      	ldr	r0, [pc, #352]	; (800d4d4 <_Z41__static_initialization_and_destruction_0ii+0x590>)
 800d374:	f7ff f922 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE4(GPIOE, GPIO_PIN_4);
 800d378:	2210      	movs	r2, #16
 800d37a:	4955      	ldr	r1, [pc, #340]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d37c:	4856      	ldr	r0, [pc, #344]	; (800d4d8 <_Z41__static_initialization_and_destruction_0ii+0x594>)
 800d37e:	f7ff f91d 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE5(GPIOE, GPIO_PIN_5);
 800d382:	2220      	movs	r2, #32
 800d384:	4952      	ldr	r1, [pc, #328]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d386:	4855      	ldr	r0, [pc, #340]	; (800d4dc <_Z41__static_initialization_and_destruction_0ii+0x598>)
 800d388:	f7ff f918 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE6(GPIOE, GPIO_PIN_6);
 800d38c:	2240      	movs	r2, #64	; 0x40
 800d38e:	4950      	ldr	r1, [pc, #320]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d390:	4853      	ldr	r0, [pc, #332]	; (800d4e0 <_Z41__static_initialization_and_destruction_0ii+0x59c>)
 800d392:	f7ff f913 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE7(GPIOE, GPIO_PIN_7);
 800d396:	2280      	movs	r2, #128	; 0x80
 800d398:	494d      	ldr	r1, [pc, #308]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d39a:	4852      	ldr	r0, [pc, #328]	; (800d4e4 <_Z41__static_initialization_and_destruction_0ii+0x5a0>)
 800d39c:	f7ff f90e 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE8(GPIOE, GPIO_PIN_8);
 800d3a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d3a4:	494a      	ldr	r1, [pc, #296]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3a6:	4850      	ldr	r0, [pc, #320]	; (800d4e8 <_Z41__static_initialization_and_destruction_0ii+0x5a4>)
 800d3a8:	f7ff f908 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE9(GPIOE, GPIO_PIN_9);
 800d3ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d3b0:	4947      	ldr	r1, [pc, #284]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3b2:	484e      	ldr	r0, [pc, #312]	; (800d4ec <_Z41__static_initialization_and_destruction_0ii+0x5a8>)
 800d3b4:	f7ff f902 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE10(GPIOE, GPIO_PIN_10);
 800d3b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d3bc:	4944      	ldr	r1, [pc, #272]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3be:	484c      	ldr	r0, [pc, #304]	; (800d4f0 <_Z41__static_initialization_and_destruction_0ii+0x5ac>)
 800d3c0:	f7ff f8fc 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE11(GPIOE, GPIO_PIN_11);
 800d3c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d3c8:	4941      	ldr	r1, [pc, #260]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ca:	484a      	ldr	r0, [pc, #296]	; (800d4f4 <_Z41__static_initialization_and_destruction_0ii+0x5b0>)
 800d3cc:	f7ff f8f6 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE12(GPIOE, GPIO_PIN_12);
 800d3d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d3d4:	493e      	ldr	r1, [pc, #248]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3d6:	4848      	ldr	r0, [pc, #288]	; (800d4f8 <_Z41__static_initialization_and_destruction_0ii+0x5b4>)
 800d3d8:	f7ff f8f0 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE13(GPIOE, GPIO_PIN_13);
 800d3dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d3e0:	493b      	ldr	r1, [pc, #236]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3e2:	4846      	ldr	r0, [pc, #280]	; (800d4fc <_Z41__static_initialization_and_destruction_0ii+0x5b8>)
 800d3e4:	f7ff f8ea 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE14(GPIOE, GPIO_PIN_14);
 800d3e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d3ec:	4938      	ldr	r1, [pc, #224]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3ee:	4844      	ldr	r0, [pc, #272]	; (800d500 <_Z41__static_initialization_and_destruction_0ii+0x5bc>)
 800d3f0:	f7ff f8e4 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PE15(GPIOE, GPIO_PIN_15);
 800d3f4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d3f8:	4935      	ldr	r1, [pc, #212]	; (800d4d0 <_Z41__static_initialization_and_destruction_0ii+0x58c>)
 800d3fa:	4842      	ldr	r0, [pc, #264]	; (800d504 <_Z41__static_initialization_and_destruction_0ii+0x5c0>)
 800d3fc:	f7ff f8de 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF0(GPIOF, GPIO_PIN_0);
 800d400:	2201      	movs	r2, #1
 800d402:	4941      	ldr	r1, [pc, #260]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d404:	4841      	ldr	r0, [pc, #260]	; (800d50c <_Z41__static_initialization_and_destruction_0ii+0x5c8>)
 800d406:	f7ff f8d9 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF1(GPIOF, GPIO_PIN_1);
 800d40a:	2202      	movs	r2, #2
 800d40c:	493e      	ldr	r1, [pc, #248]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d40e:	4840      	ldr	r0, [pc, #256]	; (800d510 <_Z41__static_initialization_and_destruction_0ii+0x5cc>)
 800d410:	f7ff f8d4 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF2(GPIOF, GPIO_PIN_2);
 800d414:	2204      	movs	r2, #4
 800d416:	493c      	ldr	r1, [pc, #240]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d418:	483e      	ldr	r0, [pc, #248]	; (800d514 <_Z41__static_initialization_and_destruction_0ii+0x5d0>)
 800d41a:	f7ff f8cf 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF3(GPIOF, GPIO_PIN_3);
 800d41e:	2208      	movs	r2, #8
 800d420:	4939      	ldr	r1, [pc, #228]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d422:	483d      	ldr	r0, [pc, #244]	; (800d518 <_Z41__static_initialization_and_destruction_0ii+0x5d4>)
 800d424:	f7ff f8ca 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF4(GPIOF, GPIO_PIN_4);
 800d428:	2210      	movs	r2, #16
 800d42a:	4937      	ldr	r1, [pc, #220]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d42c:	483b      	ldr	r0, [pc, #236]	; (800d51c <_Z41__static_initialization_and_destruction_0ii+0x5d8>)
 800d42e:	f7ff f8c5 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF5(GPIOF, GPIO_PIN_5);
 800d432:	2220      	movs	r2, #32
 800d434:	4934      	ldr	r1, [pc, #208]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d436:	483a      	ldr	r0, [pc, #232]	; (800d520 <_Z41__static_initialization_and_destruction_0ii+0x5dc>)
 800d438:	f7ff f8c0 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF6(GPIOF, GPIO_PIN_6);
 800d43c:	2240      	movs	r2, #64	; 0x40
 800d43e:	4932      	ldr	r1, [pc, #200]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d440:	4838      	ldr	r0, [pc, #224]	; (800d524 <_Z41__static_initialization_and_destruction_0ii+0x5e0>)
 800d442:	f7ff f8bb 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF7(GPIOF, GPIO_PIN_7);
 800d446:	2280      	movs	r2, #128	; 0x80
 800d448:	492f      	ldr	r1, [pc, #188]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d44a:	4837      	ldr	r0, [pc, #220]	; (800d528 <_Z41__static_initialization_and_destruction_0ii+0x5e4>)
 800d44c:	f7ff f8b6 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF8(GPIOF, GPIO_PIN_8);
 800d450:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d454:	492c      	ldr	r1, [pc, #176]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d456:	4835      	ldr	r0, [pc, #212]	; (800d52c <_Z41__static_initialization_and_destruction_0ii+0x5e8>)
 800d458:	f7ff f8b0 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF9(GPIOF, GPIO_PIN_9);
 800d45c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d460:	4929      	ldr	r1, [pc, #164]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d462:	4833      	ldr	r0, [pc, #204]	; (800d530 <_Z41__static_initialization_and_destruction_0ii+0x5ec>)
 800d464:	f7ff f8aa 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF10(GPIOF, GPIO_PIN_10);
 800d468:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d46c:	4926      	ldr	r1, [pc, #152]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d46e:	4831      	ldr	r0, [pc, #196]	; (800d534 <_Z41__static_initialization_and_destruction_0ii+0x5f0>)
 800d470:	f7ff f8a4 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF11(GPIOF, GPIO_PIN_11);
 800d474:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d478:	4923      	ldr	r1, [pc, #140]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d47a:	482f      	ldr	r0, [pc, #188]	; (800d538 <_Z41__static_initialization_and_destruction_0ii+0x5f4>)
 800d47c:	f7ff f89e 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF12(GPIOF, GPIO_PIN_12);
 800d480:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d484:	4920      	ldr	r1, [pc, #128]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d486:	482d      	ldr	r0, [pc, #180]	; (800d53c <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 800d488:	f7ff f898 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF13(GPIOF, GPIO_PIN_13);
 800d48c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d490:	491d      	ldr	r1, [pc, #116]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d492:	482b      	ldr	r0, [pc, #172]	; (800d540 <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 800d494:	f7ff f892 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF14(GPIOF, GPIO_PIN_14);
 800d498:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d49c:	491a      	ldr	r1, [pc, #104]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d49e:	4829      	ldr	r0, [pc, #164]	; (800d544 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 800d4a0:	f7ff f88c 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d4a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d4a8:	4917      	ldr	r1, [pc, #92]	; (800d508 <_Z41__static_initialization_and_destruction_0ii+0x5c4>)
 800d4aa:	4827      	ldr	r0, [pc, #156]	; (800d548 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 800d4ac:	f7ff f886 	bl	800c5bc <_ZN3PinC1EP12GPIO_TypeDeft>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d107      	bne.n	800d4c6 <_Z41__static_initialization_and_destruction_0ii+0x582>
 800d4b6:	683b      	ldr	r3, [r7, #0]
 800d4b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d102      	bne.n	800d4c6 <_Z41__static_initialization_and_destruction_0ii+0x582>
vector<Pin*> Pin::all_pins;
 800d4c0:	4822      	ldr	r0, [pc, #136]	; (800d54c <_Z41__static_initialization_and_destruction_0ii+0x608>)
 800d4c2:	f000 f845 	bl	800d550 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>
Pin PF15(GPIOF, GPIO_PIN_15);
 800d4c6:	bf00      	nop
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}
 800d4ce:	bf00      	nop
 800d4d0:	58021000 	.word	0x58021000
 800d4d4:	240003e8 	.word	0x240003e8
 800d4d8:	240003f0 	.word	0x240003f0
 800d4dc:	240003f8 	.word	0x240003f8
 800d4e0:	24000400 	.word	0x24000400
 800d4e4:	24000408 	.word	0x24000408
 800d4e8:	24000410 	.word	0x24000410
 800d4ec:	24000418 	.word	0x24000418
 800d4f0:	24000420 	.word	0x24000420
 800d4f4:	24000428 	.word	0x24000428
 800d4f8:	24000430 	.word	0x24000430
 800d4fc:	24000438 	.word	0x24000438
 800d500:	24000440 	.word	0x24000440
 800d504:	24000448 	.word	0x24000448
 800d508:	58021400 	.word	0x58021400
 800d50c:	24000450 	.word	0x24000450
 800d510:	24000458 	.word	0x24000458
 800d514:	24000460 	.word	0x24000460
 800d518:	24000468 	.word	0x24000468
 800d51c:	24000470 	.word	0x24000470
 800d520:	24000478 	.word	0x24000478
 800d524:	24000480 	.word	0x24000480
 800d528:	24000488 	.word	0x24000488
 800d52c:	24000490 	.word	0x24000490
 800d530:	24000498 	.word	0x24000498
 800d534:	240004a0 	.word	0x240004a0
 800d538:	240004a8 	.word	0x240004a8
 800d53c:	240004b0 	.word	0x240004b0
 800d540:	240004b8 	.word	0x240004b8
 800d544:	240004c0 	.word	0x240004c0
 800d548:	240004c8 	.word	0x240004c8
 800d54c:	240001c4 	.word	0x240001c4

0800d550 <_ZNSt6vectorIP3PinSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800d550:	b5b0      	push	{r4, r5, r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	681c      	ldr	r4, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	4618      	mov	r0, r3
 800d564:	f7ff fb62 	bl	800cc2c <_ZNSt12_Vector_baseIP3PinSaIS1_EE19_M_get_Tp_allocatorEv>
 800d568:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800d56a:	461a      	mov	r2, r3
 800d56c:	4629      	mov	r1, r5
 800d56e:	4620      	mov	r0, r4
 800d570:	f7ff fb67 	bl	800cc42 <_ZSt8_DestroyIPP3PinS1_EvT_S3_RSaIT0_E>
      }
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	4618      	mov	r0, r3
 800d578:	f7ff f87b 	bl	800c672 <_ZNSt12_Vector_baseIP3PinSaIS1_EED1Ev>
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	4618      	mov	r0, r3
 800d580:	3708      	adds	r7, #8
 800d582:	46bd      	mov	sp, r7
 800d584:	bdb0      	pop	{r4, r5, r7, pc}

0800d586 <_GLOBAL__sub_I__ZN3Pin8all_pinsE>:
 800d586:	b580      	push	{r7, lr}
 800d588:	af00      	add	r7, sp, #0
 800d58a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d58e:	2001      	movs	r0, #1
 800d590:	f7ff fcd8 	bl	800cf44 <_Z41__static_initialization_and_destruction_0ii>
 800d594:	bd80      	pop	{r7, pc}

0800d596 <_GLOBAL__sub_D__ZN3Pin8all_pinsE>:
 800d596:	b580      	push	{r7, lr}
 800d598:	af00      	add	r7, sp, #0
 800d59a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800d59e:	2000      	movs	r0, #0
 800d5a0:	f7ff fcd0 	bl	800cf44 <_Z41__static_initialization_and_destruction_0ii>
 800d5a4:	bd80      	pop	{r7, pc}

0800d5a6 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 800d5a6:	b480      	push	{r7}
 800d5a8:	b083      	sub	sp, #12
 800d5aa:	af00      	add	r7, sp, #0
 800d5ac:	6078      	str	r0, [r7, #4]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	370c      	adds	r7, #12
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ba:	4770      	bx	lr

0800d5bc <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
 800d5c2:	6078      	str	r0, [r7, #4]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	370c      	adds	r7, #12
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d0:	4770      	bx	lr

0800d5d2 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 800d5d2:	b480      	push	{r7}
 800d5d4:	b083      	sub	sp, #12
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2200      	movs	r2, #0
 800d5de:	609a      	str	r2, [r3, #8]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	370c      	adds	r7, #12
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ec:	4770      	bx	lr

0800d5ee <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800d5ee:	b580      	push	{r7, lr}
 800d5f0:	b082      	sub	sp, #8
 800d5f2:	af00      	add	r7, sp, #0
 800d5f4:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	689b      	ldr	r3, [r3, #8]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d005      	beq.n	800d60a <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	689b      	ldr	r3, [r3, #8]
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	6879      	ldr	r1, [r7, #4]
 800d606:	2203      	movs	r2, #3
 800d608:	4798      	blx	r3
    }
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	4618      	mov	r0, r3
 800d60e:	3708      	adds	r7, #8
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}

0800d614 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 800d614:	b480      	push	{r7}
 800d616:	b083      	sub	sp, #12
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	2b00      	cmp	r3, #0
 800d622:	bf0c      	ite	eq
 800d624:	2301      	moveq	r3, #1
 800d626:	2300      	movne	r3, #0
 800d628:	b2db      	uxtb	r3, r3
 800d62a:	4618      	mov	r0, r3
 800d62c:	370c      	adds	r7, #12
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <_ZN5Timer3minEff>:
	OPERATION_MODE current_operation_mode;
	UNITS current_units;
	uint32_t current_value;
	function<void()> current_func;

	float min(float n1, float n2){
 800d636:	b480      	push	{r7}
 800d638:	b085      	sub	sp, #20
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	60f8      	str	r0, [r7, #12]
 800d63e:	ed87 0a02 	vstr	s0, [r7, #8]
 800d642:	edc7 0a01 	vstr	s1, [r7, #4]
		if(n1 < n2)
 800d646:	ed97 7a02 	vldr	s14, [r7, #8]
 800d64a:	edd7 7a01 	vldr	s15, [r7, #4]
 800d64e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800d652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d656:	d501      	bpl.n	800d65c <_ZN5Timer3minEff+0x26>
			return n1;
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	e000      	b.n	800d65e <_ZN5Timer3minEff+0x28>
		return n2;
 800d65c:	687b      	ldr	r3, [r7, #4]
	}
 800d65e:	ee07 3a90 	vmov	s15, r3
 800d662:	eeb0 0a67 	vmov.f32	s0, s15
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d66e:	4770      	bx	lr

0800d670 <_ZN5Timer9interruptEv>:

	void interrupt() {
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
		switch(current_operation_mode) {
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d002      	beq.n	800d686 <_ZN5Timer9interruptEv+0x16>
 800d680:	2b01      	cmp	r3, #1
 800d682:	d003      	beq.n	800d68c <_ZN5Timer9interruptEv+0x1c>
			reset();
		case CYCLIC:
			current_func();
			break;
		}
	}
 800d684:	e008      	b.n	800d698 <_ZN5Timer9interruptEv+0x28>
			reset();
 800d686:	6878      	ldr	r0, [r7, #4]
 800d688:	f000 f96a 	bl	800d960 <_ZN5Timer5resetEv>
			current_func();
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	3308      	adds	r3, #8
 800d690:	4618      	mov	r0, r3
 800d692:	f002 fba8 	bl	800fde6 <_ZNKSt8functionIFvvEEclEv>
			break;
 800d696:	bf00      	nop
	}
 800d698:	bf00      	nop
 800d69a:	3708      	adds	r7, #8
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd80      	pop	{r7, pc}

0800d6a0 <_ZN5Timer10to_secondsENS_5UNITSE>:

	static uint32_t to_seconds(UNITS units){
 800d6a0:	b480      	push	{r7}
 800d6a2:	b083      	sub	sp, #12
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	71fb      	strb	r3, [r7, #7]
		if(units == SECONDS)
 800d6aa:	79fb      	ldrb	r3, [r7, #7]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d101      	bne.n	800d6b4 <_ZN5Timer10to_secondsENS_5UNITSE+0x14>
			return 1;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	e010      	b.n	800d6d6 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MILLISECONDS)
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	2b01      	cmp	r3, #1
 800d6b8:	d102      	bne.n	800d6c0 <_ZN5Timer10to_secondsENS_5UNITSE+0x20>
			return 1000;
 800d6ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d6be:	e00a      	b.n	800d6d6 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == MICROSEONDS)
 800d6c0:	79fb      	ldrb	r3, [r7, #7]
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	d101      	bne.n	800d6ca <_ZN5Timer10to_secondsENS_5UNITSE+0x2a>
			return 1000000;
 800d6c6:	4b07      	ldr	r3, [pc, #28]	; (800d6e4 <_ZN5Timer10to_secondsENS_5UNITSE+0x44>)
 800d6c8:	e005      	b.n	800d6d6 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		if(units == NANOSECONDS)
 800d6ca:	79fb      	ldrb	r3, [r7, #7]
 800d6cc:	2b03      	cmp	r3, #3
 800d6ce:	d101      	bne.n	800d6d4 <_ZN5Timer10to_secondsENS_5UNITSE+0x34>
			return 1000000000;
 800d6d0:	4b05      	ldr	r3, [pc, #20]	; (800d6e8 <_ZN5Timer10to_secondsENS_5UNITSE+0x48>)
 800d6d2:	e000      	b.n	800d6d6 <_ZN5Timer10to_secondsENS_5UNITSE+0x36>
		return 0;
 800d6d4:	2300      	movs	r3, #0
	}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	370c      	adds	r7, #12
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e0:	4770      	bx	lr
 800d6e2:	bf00      	nop
 800d6e4:	000f4240 	.word	0x000f4240
 800d6e8:	3b9aca00 	.word	0x3b9aca00

0800d6ec <_ZNSt8functionIFvvEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b082      	sub	sp, #8
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7ff ff79 	bl	800d5ee <_ZNSt14_Function_baseD1Ev>
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	4618      	mov	r0, r3
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
	...

0800d708 <_ZN5TimerC1EP17TIM_HandleTypeDef>:

public:
	TIM_HandleTypeDef* timer;
	uint32_t frequency;

	Timer(TIM_HandleTypeDef* timer) : timer(timer){
 800d708:	b580      	push	{r7, lr}
 800d70a:	b084      	sub	sp, #16
 800d70c:	af00      	add	r7, sp, #0
 800d70e:	6078      	str	r0, [r7, #4]
 800d710:	6039      	str	r1, [r7, #0]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	3308      	adds	r3, #8
 800d716:	4618      	mov	r0, r3
 800d718:	f002 fb7b 	bl	800fe12 <_ZNSt8functionIFvvEEC1Ev>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	683a      	ldr	r2, [r7, #0]
 800d720:	619a      	str	r2, [r3, #24]
		Timer::all_timers.push_back(this);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	60fb      	str	r3, [r7, #12]
 800d726:	f107 030c 	add.w	r3, r7, #12
 800d72a:	4619      	mov	r1, r3
 800d72c:	4803      	ldr	r0, [pc, #12]	; (800d73c <_ZN5TimerC1EP17TIM_HandleTypeDef+0x34>)
 800d72e:	f002 fb7d 	bl	800fe2c <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>
	}
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	4618      	mov	r0, r3
 800d736:	3710      	adds	r7, #16
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	240001a0 	.word	0x240001a0

0800d740 <_ZN5Timer10set_periodEmNS_5UNITSE>:

	void set_period(uint32_t time, UNITS units){
 800d740:	b580      	push	{r7, lr}
 800d742:	b08a      	sub	sp, #40	; 0x28
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	4613      	mov	r3, r2
 800d74c:	71fb      	strb	r3, [r7, #7]
		timer->Instance->CNT = 0;
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	699b      	ldr	r3, [r3, #24]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2200      	movs	r2, #0
 800d756:	625a      	str	r2, [r3, #36]	; 0x24
		float target_freq = to_seconds(units) / time;
 800d758:	79fb      	ldrb	r3, [r7, #7]
 800d75a:	4618      	mov	r0, r3
 800d75c:	f7ff ffa0 	bl	800d6a0 <_ZN5Timer10to_secondsENS_5UNITSE>
 800d760:	4602      	mov	r2, r0
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	fbb2 f3f3 	udiv	r3, r2, r3
 800d768:	ee07 3a90 	vmov	s15, r3
 800d76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d770:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d774:	eddf 6a27 	vldr	s13, [pc, #156]	; 800d814 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d778:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d77c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d780:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d784:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d788:	edc7 7a08 	vstr	s15, [r7, #32]
		float actual_psc = min(ideal_psc, 65536.0);
 800d78c:	eddf 0a22 	vldr	s1, [pc, #136]	; 800d818 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d790:	ed97 0a08 	vldr	s0, [r7, #32]
 800d794:	68f8      	ldr	r0, [r7, #12]
 800d796:	f7ff ff4e 	bl	800d636 <_ZN5Timer3minEff>
 800d79a:	ed87 0a07 	vstr	s0, [r7, #28]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d79e:	edd7 7a07 	vldr	s15, [r7, #28]
 800d7a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7a6:	ee17 2a90 	vmov	r2, s15
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	699b      	ldr	r3, [r3, #24]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	3a01      	subs	r2, #1
 800d7b2:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	699b      	ldr	r3, [r3, #24]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7bc:	3301      	adds	r3, #1
 800d7be:	ee07 3a90 	vmov	s15, r3
 800d7c2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d7c6:	eddf 6a13 	vldr	s13, [pc, #76]	; 800d814 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd4>
 800d7ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7ce:	edc7 7a06 	vstr	s15, [r7, #24]
		float ideal_arr = current_psc_freq / target_freq;
 800d7d2:	edd7 6a06 	vldr	s13, [r7, #24]
 800d7d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d7da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d7de:	edc7 7a05 	vstr	s15, [r7, #20]
		float actual_arr = min(ideal_arr, 65536.0);
 800d7e2:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d818 <_ZN5Timer10set_periodEmNS_5UNITSE+0xd8>
 800d7e6:	ed97 0a05 	vldr	s0, [r7, #20]
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	f7ff ff23 	bl	800d636 <_ZN5Timer3minEff>
 800d7f0:	ed87 0a04 	vstr	s0, [r7, #16]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d7f4:	edd7 7a04 	vldr	s15, [r7, #16]
 800d7f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d7fc:	ee17 2a90 	vmov	r2, s15
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	699b      	ldr	r3, [r3, #24]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	3a01      	subs	r2, #1
 800d808:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d80a:	bf00      	nop
 800d80c:	3728      	adds	r7, #40	; 0x28
 800d80e:	46bd      	mov	sp, r7
 800d810:	bd80      	pop	{r7, pc}
 800d812:	bf00      	nop
 800d814:	4d832156 	.word	0x4d832156
 800d818:	47800000 	.word	0x47800000

0800d81c <_ZN5Timer13set_frequencyEm>:

	void set_frequency(uint32_t target_freq){
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b088      	sub	sp, #32
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
		timer->Instance->CNT = 0;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	699b      	ldr	r3, [r3, #24]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	2200      	movs	r2, #0
 800d82e:	625a      	str	r2, [r3, #36]	; 0x24
		float ideal_psc = ((float) TIMER_CLOCK_FREQ) / target_freq / 2;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	ee07 3a90 	vmov	s15, r3
 800d836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d83a:	eddf 6a28 	vldr	s13, [pc, #160]	; 800d8dc <_ZN5Timer13set_frequencyEm+0xc0>
 800d83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d842:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d846:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800d84a:	edc7 7a07 	vstr	s15, [r7, #28]
		float actual_psc = min(ideal_psc, 65536.0);
 800d84e:	eddf 0a24 	vldr	s1, [pc, #144]	; 800d8e0 <_ZN5Timer13set_frequencyEm+0xc4>
 800d852:	ed97 0a07 	vldr	s0, [r7, #28]
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f7ff feed 	bl	800d636 <_ZN5Timer3minEff>
 800d85c:	ed87 0a06 	vstr	s0, [r7, #24]
		timer->Instance->PSC = (uint32_t) actual_psc - 1;
 800d860:	edd7 7a06 	vldr	s15, [r7, #24]
 800d864:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d868:	ee17 2a90 	vmov	r2, s15
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	699b      	ldr	r3, [r3, #24]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	3a01      	subs	r2, #1
 800d874:	629a      	str	r2, [r3, #40]	; 0x28
		float current_psc_freq = ((float) TIMER_CLOCK_FREQ) / (timer->Instance->PSC + 1);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87e:	3301      	adds	r3, #1
 800d880:	ee07 3a90 	vmov	s15, r3
 800d884:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d888:	eddf 6a14 	vldr	s13, [pc, #80]	; 800d8dc <_ZN5Timer13set_frequencyEm+0xc0>
 800d88c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d890:	edc7 7a05 	vstr	s15, [r7, #20]
		float ideal_arr = current_psc_freq / target_freq;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	ee07 3a90 	vmov	s15, r3
 800d89a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d89e:	edd7 6a05 	vldr	s13, [r7, #20]
 800d8a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d8a6:	edc7 7a04 	vstr	s15, [r7, #16]
		float actual_arr = min(ideal_arr, 65536.0);
 800d8aa:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800d8e0 <_ZN5Timer13set_frequencyEm+0xc4>
 800d8ae:	ed97 0a04 	vldr	s0, [r7, #16]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f7ff febf 	bl	800d636 <_ZN5Timer3minEff>
 800d8b8:	ed87 0a03 	vstr	s0, [r7, #12]
		timer->Instance->ARR = (uint32_t) actual_arr - 1;
 800d8bc:	edd7 7a03 	vldr	s15, [r7, #12]
 800d8c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d8c4:	ee17 2a90 	vmov	r2, s15
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	699b      	ldr	r3, [r3, #24]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	3a01      	subs	r2, #1
 800d8d0:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 800d8d2:	bf00      	nop
 800d8d4:	3720      	adds	r7, #32
 800d8d6:	46bd      	mov	sp, r7
 800d8d8:	bd80      	pop	{r7, pc}
 800d8da:	bf00      	nop
 800d8dc:	4d832156 	.word	0x4d832156
 800d8e0:	47800000 	.word	0x47800000

0800d8e4 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>:

	void execute_every(function<void()> func, uint32_t time, UNITS units){
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	60f8      	str	r0, [r7, #12]
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	70fb      	strb	r3, [r7, #3]
		current_operation_mode = CYCLIC;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2201      	movs	r2, #1
 800d8f6:	701a      	strb	r2, [r3, #0]
		current_units = units;
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	78fa      	ldrb	r2, [r7, #3]
 800d8fc:	705a      	strb	r2, [r3, #1]
		current_func = func;
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	3308      	adds	r3, #8
 800d902:	68b9      	ldr	r1, [r7, #8]
 800d904:	4618      	mov	r0, r3
 800d906:	f002 faa2 	bl	800fe4e <_ZNSt8functionIFvvEEaSERKS1_>
		set_period(time, units);
 800d90a:	78fb      	ldrb	r3, [r7, #3]
 800d90c:	461a      	mov	r2, r3
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	68f8      	ldr	r0, [r7, #12]
 800d912:	f7ff ff15 	bl	800d740 <_ZN5Timer10set_periodEmNS_5UNITSE>
		HAL_TIM_Base_Start_IT(timer);
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	699b      	ldr	r3, [r3, #24]
 800d91a:	4618      	mov	r0, r3
 800d91c:	f010 ff26 	bl	801e76c <HAL_TIM_Base_Start_IT>
	}
 800d920:	bf00      	nop
 800d922:	3710      	adds	r7, #16
 800d924:	46bd      	mov	sp, r7
 800d926:	bd80      	pop	{r7, pc}

0800d928 <_ZN5Timer10execute_atESt8functionIFvvEEm>:

	void execute_at(function<void()> func, uint32_t target_freq){
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60f8      	str	r0, [r7, #12]
 800d930:	60b9      	str	r1, [r7, #8]
 800d932:	607a      	str	r2, [r7, #4]
		current_operation_mode = CYCLIC;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2201      	movs	r2, #1
 800d938:	701a      	strb	r2, [r3, #0]
		current_func = func;
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	3308      	adds	r3, #8
 800d93e:	68b9      	ldr	r1, [r7, #8]
 800d940:	4618      	mov	r0, r3
 800d942:	f002 fa84 	bl	800fe4e <_ZNSt8functionIFvvEEaSERKS1_>
		set_frequency(target_freq);
 800d946:	6879      	ldr	r1, [r7, #4]
 800d948:	68f8      	ldr	r0, [r7, #12]
 800d94a:	f7ff ff67 	bl	800d81c <_ZN5Timer13set_frequencyEm>
		HAL_TIM_Base_Start_IT(timer);
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	699b      	ldr	r3, [r3, #24]
 800d952:	4618      	mov	r0, r3
 800d954:	f010 ff0a 	bl	801e76c <HAL_TIM_Base_Start_IT>
	}
 800d958:	bf00      	nop
 800d95a:	3710      	adds	r7, #16
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <_ZN5Timer5resetEv>:

	void reset(){
 800d960:	b580      	push	{r7, lr}
 800d962:	b082      	sub	sp, #8
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
		HAL_TIM_Base_Stop_IT(timer);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	699b      	ldr	r3, [r3, #24]
 800d96c:	4618      	mov	r0, r3
 800d96e:	f010 ff83 	bl	801e878 <HAL_TIM_Base_Stop_IT>
		current_operation_mode = NONE;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2200      	movs	r2, #0
 800d976:	701a      	strb	r2, [r3, #0]
	}
 800d978:	bf00      	nop
 800d97a:	3708      	adds	r7, #8
 800d97c:	46bd      	mov	sp, r7
 800d97e:	bd80      	pop	{r7, pc}

0800d980 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800d980:	b480      	push	{r7}
 800d982:	b083      	sub	sp, #12
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4618      	mov	r0, r3
 800d98c:	370c      	adds	r7, #12
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800d996:	b590      	push	{r4, r7, lr}
 800d998:	b083      	sub	sp, #12
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f7ff ffed 	bl	800d980 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	681c      	ldr	r4, [r3, #0]
 800d9aa:	6838      	ldr	r0, [r7, #0]
 800d9ac:	f7ff ffe8 	bl	800d980 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	429c      	cmp	r4, r3
 800d9b6:	bf0c      	ite	eq
 800d9b8:	2301      	moveq	r3, #1
 800d9ba:	2300      	movne	r3, #0
 800d9bc:	b2db      	uxtb	r3, r3
 800d9be:	4618      	mov	r0, r3
 800d9c0:	370c      	adds	r7, #12
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd90      	pop	{r4, r7, pc}

0800d9c6 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800d9c6:	b480      	push	{r7}
 800d9c8:	b083      	sub	sp, #12
 800d9ca:	af00      	add	r7, sp, #0
 800d9cc:	6078      	str	r0, [r7, #4]
	++_M_current;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	1d1a      	adds	r2, r3, #4
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	601a      	str	r2, [r3, #0]
	return *this;
 800d9d8:	687b      	ldr	r3, [r7, #4]
      }
 800d9da:	4618      	mov	r0, r3
 800d9dc:	370c      	adds	r7, #12
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr

0800d9e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800d9e6:	b480      	push	{r7}
 800d9e8:	b083      	sub	sp, #12
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	681b      	ldr	r3, [r3, #0]
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	370c      	adds	r7, #12
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fc:	4770      	bx	lr
	...

0800da00 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>:

	void start_interrupt(){
		HAL_TIM_Base_Start_IT(timer);
	}

	static void interrupt_all_timers(TIM_HandleTypeDef* timer){
 800da00:	b580      	push	{r7, lr}
 800da02:	b086      	sub	sp, #24
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
		for(auto software_timer : Timer::all_timers){
 800da08:	4b19      	ldr	r3, [pc, #100]	; (800da70 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x70>)
 800da0a:	617b      	str	r3, [r7, #20]
 800da0c:	6978      	ldr	r0, [r7, #20]
 800da0e:	f002 fa39 	bl	800fe84 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 800da12:	4603      	mov	r3, r0
 800da14:	60fb      	str	r3, [r7, #12]
 800da16:	6978      	ldr	r0, [r7, #20]
 800da18:	f002 fa44 	bl	800fea4 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 800da1c:	4603      	mov	r3, r0
 800da1e:	60bb      	str	r3, [r7, #8]
 800da20:	f107 0208 	add.w	r2, r7, #8
 800da24:	f107 030c 	add.w	r3, r7, #12
 800da28:	4611      	mov	r1, r2
 800da2a:	4618      	mov	r0, r3
 800da2c:	f7ff ffb3 	bl	800d996 <_ZN9__gnu_cxxeqIPP5TimerS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800da30:	4603      	mov	r3, r0
 800da32:	f083 0301 	eor.w	r3, r3, #1
 800da36:	b2db      	uxtb	r3, r3
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d015      	beq.n	800da68 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x68>
 800da3c:	f107 030c 	add.w	r3, r7, #12
 800da40:	4618      	mov	r0, r3
 800da42:	f7ff ffd0 	bl	800d9e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 800da46:	4603      	mov	r3, r0
 800da48:	681b      	ldr	r3, [r3, #0]
 800da4a:	613b      	str	r3, [r7, #16]
			if(software_timer->timer == timer)
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	699b      	ldr	r3, [r3, #24]
 800da50:	687a      	ldr	r2, [r7, #4]
 800da52:	429a      	cmp	r2, r3
 800da54:	d102      	bne.n	800da5c <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x5c>
				software_timer->interrupt();
 800da56:	6938      	ldr	r0, [r7, #16]
 800da58:	f7ff fe0a 	bl	800d670 <_ZN5Timer9interruptEv>
		for(auto software_timer : Timer::all_timers){
 800da5c:	f107 030c 	add.w	r3, r7, #12
 800da60:	4618      	mov	r0, r3
 800da62:	f7ff ffb0 	bl	800d9c6 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEppEv>
 800da66:	e7db      	b.n	800da20 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef+0x20>
		}
	}
 800da68:	bf00      	nop
 800da6a:	3718      	adds	r7, #24
 800da6c:	46bd      	mov	sp, r7
 800da6e:	bd80      	pop	{r7, pc}
 800da70:	240001a0 	.word	0x240001a0

0800da74 <_ZN13StreamMessageC1EPfff>:
	size_t size;
	float min, max;
	void* ptr;
	bool  do_scale;

	StreamMessage(float* ptr, float min, float max) : ptr(ptr), min(min), max(max){
 800da74:	b480      	push	{r7}
 800da76:	b085      	sub	sp, #20
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	ed87 0a01 	vstr	s0, [r7, #4]
 800da82:	edc7 0a00 	vstr	s1, [r7]
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	609a      	str	r2, [r3, #8]
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	683a      	ldr	r2, [r7, #0]
 800da96:	60da      	str	r2, [r3, #12]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	68ba      	ldr	r2, [r7, #8]
 800da9c:	611a      	str	r2, [r3, #16]
		do_scale = true;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2201      	movs	r2, #1
 800daa2:	751a      	strb	r2, [r3, #20]
		size = precision_mode;
 800daa4:	4b05      	ldr	r3, [pc, #20]	; (800dabc <_ZN13StreamMessageC1EPfff+0x48>)
 800daa6:	781b      	ldrb	r3, [r3, #0]
 800daa8:	461a      	mov	r2, r3
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	605a      	str	r2, [r3, #4]
	}
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	4618      	mov	r0, r3
 800dab2:	3714      	adds	r7, #20
 800dab4:	46bd      	mov	sp, r7
 800dab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daba:	4770      	bx	lr
 800dabc:	24000001 	.word	0x24000001

0800dac0 <_ZN13StreamMessageC1EPh>:

	StreamMessage(uint8_t* ptr) : ptr(ptr){
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	2200      	movs	r2, #0
 800dace:	601a      	str	r2, [r3, #0]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	683a      	ldr	r2, [r7, #0]
 800dad4:	611a      	str	r2, [r3, #16]
		do_scale = false;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2200      	movs	r2, #0
 800dada:	751a      	strb	r2, [r3, #20]
		size = 1;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	605a      	str	r2, [r3, #4]
	}
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4618      	mov	r0, r3
 800dae6:	370c      	adds	r7, #12
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <_ZN13StreamMessage7unparseEPh>:

	void unparse(uint8_t* d) {
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b086      	sub	sp, #24
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
		if(do_scale){
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	7d1b      	ldrb	r3, [r3, #20]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d03f      	beq.n	800db82 <_ZN13StreamMessage7unparseEPh+0x92>
			if(ic != nullptr)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d004      	beq.n	800db14 <_ZN13StreamMessage7unparseEPh+0x24>
				ic->get_duty();
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	4618      	mov	r0, r3
 800db10:	f7fb fe6a 	bl	80097e8 <_ZN12InputCapture8get_dutyEv>
			float scale = (*((float*) ptr) - min) / (max - min);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	ed93 7a00 	vldr	s14, [r3]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	edd3 7a02 	vldr	s15, [r3, #8]
 800db22:	ee77 6a67 	vsub.f32	s13, s14, s15
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	ed93 7a03 	vldr	s14, [r3, #12]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	edd3 7a02 	vldr	s15, [r3, #8]
 800db32:	ee37 7a67 	vsub.f32	s14, s14, s15
 800db36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db3a:	edc7 7a05 	vstr	s15, [r7, #20]
			uint32_t data = (uint32_t) (scale * precision_max[(Precision) size]);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	b2db      	uxtb	r3, r3
 800db44:	74fb      	strb	r3, [r7, #19]
 800db46:	f107 0313 	add.w	r3, r7, #19
 800db4a:	4619      	mov	r1, r3
 800db4c:	4813      	ldr	r0, [pc, #76]	; (800db9c <_ZN13StreamMessage7unparseEPh+0xac>)
 800db4e:	f002 f9bb 	bl	800fec8 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>
 800db52:	4603      	mov	r3, r0
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	ee07 3a90 	vmov	s15, r3
 800db5a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800db5e:	edd7 7a05 	vldr	s15, [r7, #20]
 800db62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800db66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db6a:	ee17 3a90 	vmov	r3, s15
 800db6e:	60fb      	str	r3, [r7, #12]
			memcpy(d, &data, size);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	685a      	ldr	r2, [r3, #4]
 800db74:	f107 030c 	add.w	r3, r7, #12
 800db78:	4619      	mov	r1, r3
 800db7a:	6838      	ldr	r0, [r7, #0]
 800db7c:	f012 fe12 	bl	80207a4 <memcpy>
		}else{
			memcpy(d, ptr, size);
		}
	}
 800db80:	e007      	b.n	800db92 <_ZN13StreamMessage7unparseEPh+0xa2>
			memcpy(d, ptr, size);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	6919      	ldr	r1, [r3, #16]
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	685b      	ldr	r3, [r3, #4]
 800db8a:	461a      	mov	r2, r3
 800db8c:	6838      	ldr	r0, [r7, #0]
 800db8e:	f012 fe09 	bl	80207a4 <memcpy>
	}
 800db92:	bf00      	nop
 800db94:	3718      	adds	r7, #24
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	24000188 	.word	0x24000188

0800dba0 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>:

	static StreamMessage* FromAnalogIn(AnalogIn* in){
 800dba0:	b590      	push	{r4, r7, lr}
 800dba2:	b083      	sub	sp, #12
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
		return new StreamMessage(&in->voltage, 0, 3.3);
 800dba8:	2018      	movs	r0, #24
 800dbaa:	f012 fccf 	bl	802054c <_Znwj>
 800dbae:	4603      	mov	r3, r0
 800dbb0:	461c      	mov	r4, r3
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	3314      	adds	r3, #20
 800dbb6:	eddf 0a06 	vldr	s1, [pc, #24]	; 800dbd0 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x30>
 800dbba:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800dbd4 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn+0x34>
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	4620      	mov	r0, r4
 800dbc2:	f7ff ff57 	bl	800da74 <_ZN13StreamMessageC1EPfff>
 800dbc6:	4623      	mov	r3, r4
	}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	370c      	adds	r7, #12
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd90      	pop	{r4, r7, pc}
 800dbd0:	40533333 	.word	0x40533333
 800dbd4:	00000000 	.word	0x00000000

0800dbd8 <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>:

	static StreamMessage* FromDigigalIn(DigitalIn* in){
 800dbd8:	b590      	push	{r4, r7, lr}
 800dbda:	b083      	sub	sp, #12
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
		return new StreamMessage((uint8_t*) &in->state);
 800dbe0:	2018      	movs	r0, #24
 800dbe2:	f012 fcb3 	bl	802054c <_Znwj>
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	461c      	mov	r4, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	3308      	adds	r3, #8
 800dbee:	4619      	mov	r1, r3
 800dbf0:	4620      	mov	r0, r4
 800dbf2:	f7ff ff65 	bl	800dac0 <_ZN13StreamMessageC1EPh>
 800dbf6:	4623      	mov	r3, r4
	}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	370c      	adds	r7, #12
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd90      	pop	{r4, r7, pc}

0800dc00 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>:

	static StreamMessage* FromInputCapture(InputCapture* in){
 800dc00:	b590      	push	{r4, r7, lr}
 800dc02:	b085      	sub	sp, #20
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
		StreamMessage* sm = new StreamMessage(&in->duty, 0, 100);
 800dc08:	2018      	movs	r0, #24
 800dc0a:	f012 fc9f 	bl	802054c <_Znwj>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	461c      	mov	r4, r3
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	3324      	adds	r3, #36	; 0x24
 800dc16:	eddf 0a08 	vldr	s1, [pc, #32]	; 800dc38 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x38>
 800dc1a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dc3c <_ZN13StreamMessage16FromInputCaptureEP12InputCapture+0x3c>
 800dc1e:	4619      	mov	r1, r3
 800dc20:	4620      	mov	r0, r4
 800dc22:	f7ff ff27 	bl	800da74 <_ZN13StreamMessageC1EPfff>
 800dc26:	60fc      	str	r4, [r7, #12]
		sm->ic = in;
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	687a      	ldr	r2, [r7, #4]
 800dc2c:	601a      	str	r2, [r3, #0]
		return sm;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3714      	adds	r7, #20
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd90      	pop	{r4, r7, pc}
 800dc38:	42c80000 	.word	0x42c80000
 800dc3c:	00000000 	.word	0x00000000

0800dc40 <_ZN13StreamMessage7FromPinEP3Pin>:

	static optional<StreamMessage*> FromPin(Pin* pin){
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
		if(pin->mode == ANALOG_INPUT)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	799b      	ldrb	r3, [r3, #6]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d112      	bne.n	800dc78 <_ZN13StreamMessage7FromPinEP3Pin+0x38>
			return FromAnalogIn(AnalogIn::analog_in_from_pin[pin]);
 800dc52:	463b      	mov	r3, r7
 800dc54:	4619      	mov	r1, r3
 800dc56:	4822      	ldr	r0, [pc, #136]	; (800dce0 <_ZN13StreamMessage7FromPinEP3Pin+0xa0>)
 800dc58:	f7f2 fe82 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dc5c:	4603      	mov	r3, r0
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	4618      	mov	r0, r3
 800dc62:	f7ff ff9d 	bl	800dba0 <_ZN13StreamMessage12FromAnalogInEP8AnalogIn>
 800dc66:	4603      	mov	r3, r0
 800dc68:	60fb      	str	r3, [r7, #12]
 800dc6a:	f107 030c 	add.w	r3, r7, #12
 800dc6e:	4619      	mov	r1, r3
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f002 f989 	bl	800ff88 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
		if(pin->mode == DIGITAL_INPUT)
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
		if(pin->mode == INPUT_CAPTURE)
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
	}
 800dc76:	e02e      	b.n	800dcd6 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == DIGITAL_INPUT)
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	799b      	ldrb	r3, [r3, #6]
 800dc7c:	2b03      	cmp	r3, #3
 800dc7e:	d112      	bne.n	800dca6 <_ZN13StreamMessage7FromPinEP3Pin+0x66>
			return FromDigigalIn(DigitalIn::pin_to_digital_in[pin]);
 800dc80:	463b      	mov	r3, r7
 800dc82:	4619      	mov	r1, r3
 800dc84:	4817      	ldr	r0, [pc, #92]	; (800dce4 <_ZN13StreamMessage7FromPinEP3Pin+0xa4>)
 800dc86:	f7f8 fd29 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f7ff ffa2 	bl	800dbd8 <_ZN13StreamMessage13FromDigigalInEP9DigitalIn>
 800dc94:	4603      	mov	r3, r0
 800dc96:	613b      	str	r3, [r7, #16]
 800dc98:	f107 0310 	add.w	r3, r7, #16
 800dc9c:	4619      	mov	r1, r3
 800dc9e:	6878      	ldr	r0, [r7, #4]
 800dca0:	f002 f972 	bl	800ff88 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dca4:	e017      	b.n	800dcd6 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
		if(pin->mode == INPUT_CAPTURE)
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	799b      	ldrb	r3, [r3, #6]
 800dcaa:	2b02      	cmp	r3, #2
 800dcac:	d112      	bne.n	800dcd4 <_ZN13StreamMessage7FromPinEP3Pin+0x94>
			return FromInputCapture(InputCapture::pin_to_input_capture[pin]);
 800dcae:	463b      	mov	r3, r7
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	480d      	ldr	r0, [pc, #52]	; (800dce8 <_ZN13StreamMessage7FromPinEP3Pin+0xa8>)
 800dcb4:	f7fb fe38 	bl	8009928 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	4618      	mov	r0, r3
 800dcbe:	f7ff ff9f 	bl	800dc00 <_ZN13StreamMessage16FromInputCaptureEP12InputCapture>
 800dcc2:	4603      	mov	r3, r0
 800dcc4:	617b      	str	r3, [r7, #20]
 800dcc6:	f107 0314 	add.w	r3, r7, #20
 800dcca:	4619      	mov	r1, r3
 800dccc:	6878      	ldr	r0, [r7, #4]
 800dcce:	f002 f95b 	bl	800ff88 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>
	}
 800dcd2:	e000      	b.n	800dcd6 <_ZN13StreamMessage7FromPinEP3Pin+0x96>
 800dcd4:	bf00      	nop
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	3718      	adds	r7, #24
 800dcda:	46bd      	mov	sp, r7
 800dcdc:	bd80      	pop	{r7, pc}
 800dcde:	bf00      	nop
 800dce0:	240000bc 	.word	0x240000bc
 800dce4:	2400011c 	.word	0x2400011c
 800dce8:	24000164 	.word	0x24000164

0800dcec <_ZN13StreamMessage18set_precision_modeEh>:

	static bool set_precision_mode(uint8_t precision){
 800dcec:	b480      	push	{r7}
 800dcee:	b083      	sub	sp, #12
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	71fb      	strb	r3, [r7, #7]
		if(precision < 0 || precision > 4)
 800dcf6:	79fb      	ldrb	r3, [r7, #7]
 800dcf8:	2b04      	cmp	r3, #4
 800dcfa:	d901      	bls.n	800dd00 <_ZN13StreamMessage18set_precision_modeEh+0x14>
			return false;
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	e003      	b.n	800dd08 <_ZN13StreamMessage18set_precision_modeEh+0x1c>
		precision_mode = (Precision) precision;
 800dd00:	4a04      	ldr	r2, [pc, #16]	; (800dd14 <_ZN13StreamMessage18set_precision_modeEh+0x28>)
 800dd02:	79fb      	ldrb	r3, [r7, #7]
 800dd04:	7013      	strb	r3, [r2, #0]
		return true;
 800dd06:	2301      	movs	r3, #1
	}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	370c      	adds	r7, #12
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd12:	4770      	bx	lr
 800dd14:	24000001 	.word	0x24000001

0800dd18 <_ZN6Stream12is_availableEjj>:
	unsigned int size = 0;
	uint8_t id;
	Timer* timer;
	Can* can;

	bool is_available(unsigned int frequency, unsigned int size){
 800dd18:	b480      	push	{r7}
 800dd1a:	b087      	sub	sp, #28
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	60f8      	str	r0, [r7, #12]
 800dd20:	60b9      	str	r1, [r7, #8]
 800dd22:	607a      	str	r2, [r7, #4]
		bool is_occupied		= this ->state == OCCUPIED;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	2b01      	cmp	r3, #1
 800dd2a:	bf0c      	ite	eq
 800dd2c:	2301      	moveq	r3, #1
 800dd2e:	2300      	movne	r3, #0
 800dd30:	75fb      	strb	r3, [r7, #23]
		bool is_full			= (this->size + size) > 64 ;
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	695a      	ldr	r2, [r3, #20]
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	4413      	add	r3, r2
 800dd3a:	2b40      	cmp	r3, #64	; 0x40
 800dd3c:	bf8c      	ite	hi
 800dd3e:	2301      	movhi	r3, #1
 800dd40:	2300      	movls	r3, #0
 800dd42:	75bb      	strb	r3, [r7, #22]
		bool frequencies_match	= this->frequency == frequency;
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	685b      	ldr	r3, [r3, #4]
 800dd48:	68ba      	ldr	r2, [r7, #8]
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	bf0c      	ite	eq
 800dd4e:	2301      	moveq	r3, #1
 800dd50:	2300      	movne	r3, #0
 800dd52:	757b      	strb	r3, [r7, #21]
		return !is_occupied || (frequencies_match && !is_full);
 800dd54:	7dfb      	ldrb	r3, [r7, #23]
 800dd56:	f083 0301 	eor.w	r3, r3, #1
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d108      	bne.n	800dd72 <_ZN6Stream12is_availableEjj+0x5a>
 800dd60:	7d7b      	ldrb	r3, [r7, #21]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d007      	beq.n	800dd76 <_ZN6Stream12is_availableEjj+0x5e>
 800dd66:	7dbb      	ldrb	r3, [r7, #22]
 800dd68:	f083 0301 	eor.w	r3, r3, #1
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d001      	beq.n	800dd76 <_ZN6Stream12is_availableEjj+0x5e>
 800dd72:	2301      	movs	r3, #1
 800dd74:	e000      	b.n	800dd78 <_ZN6Stream12is_availableEjj+0x60>
 800dd76:	2300      	movs	r3, #0
	}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	371c      	adds	r7, #28
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd82:	4770      	bx	lr

0800dd84 <_ZN6Stream16send_ok_responseEht>:

	void send_ok_response(uint8_t offset, uint16_t response_code){
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b082      	sub	sp, #8
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	6078      	str	r0, [r7, #4]
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	70fb      	strb	r3, [r7, #3]
 800dd90:	4613      	mov	r3, r2
 800dd92:	803b      	strh	r3, [r7, #0]
		can->TxData[0] = Can::Ok;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6a1b      	ldr	r3, [r3, #32]
 800dd98:	2200      	movs	r2, #0
 800dd9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		can->TxData[1] = id;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a1b      	ldr	r3, [r3, #32]
 800dda2:	687a      	ldr	r2, [r7, #4]
 800dda4:	7e12      	ldrb	r2, [r2, #24]
 800dda6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
		can->TxData[2] = offset;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	78fa      	ldrb	r2, [r7, #3]
 800ddb0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
		can->send_message(response_code, 3);
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	6a1b      	ldr	r3, [r3, #32]
 800ddb8:	8839      	ldrh	r1, [r7, #0]
 800ddba:	2203      	movs	r2, #3
 800ddbc:	4618      	mov	r0, r3
 800ddbe:	f7f6 ffd7 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800ddc2:	bf00      	nop
 800ddc4:	3708      	adds	r7, #8
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}

0800ddca <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800ddca:	b580      	push	{r7, lr}
 800ddcc:	b082      	sub	sp, #8
 800ddce:	af00      	add	r7, sp, #0
 800ddd0:	6078      	str	r0, [r7, #4]
 800ddd2:	6878      	ldr	r0, [r7, #4]
 800ddd4:	f002 f90c 	bl	800fff0 <_ZNSaIP13StreamMessageED1Ev>
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	4618      	mov	r0, r3
 800dddc:	3708      	adds	r7, #8
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>:
      _Vector_base() = default;
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b082      	sub	sp, #8
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4618      	mov	r0, r3
 800ddee:	f002 f8ef 	bl	800ffd0 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3708      	adds	r7, #8
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}

0800ddfc <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>:
      vector() = default;
 800ddfc:	b580      	push	{r7, lr}
 800ddfe:	b082      	sub	sp, #8
 800de00:	af00      	add	r7, sp, #0
 800de02:	6078      	str	r0, [r7, #4]
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	4618      	mov	r0, r3
 800de08:	f7ff ffeb 	bl	800dde2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EEC1Ev>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	4618      	mov	r0, r3
 800de10:	3708      	adds	r7, #8
 800de12:	46bd      	mov	sp, r7
 800de14:	bd80      	pop	{r7, pc}
	...

0800de18 <_ZN6StreamC1EP5TimerP3Can>:
		return true;
	}

public:

	Stream(Timer* timer, Can* can) : timer(timer), can(can) {
 800de18:	b580      	push	{r7, lr}
 800de1a:	b086      	sub	sp, #24
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	2200      	movs	r2, #0
 800de28:	701a      	strb	r2, [r3, #0]
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	3308      	adds	r3, #8
 800de2e:	4618      	mov	r0, r3
 800de30:	f7ff ffe4 	bl	800ddfc <_ZNSt6vectorIP13StreamMessageSaIS1_EEC1Ev>
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	615a      	str	r2, [r3, #20]
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	68ba      	ldr	r2, [r7, #8]
 800de3e:	61da      	str	r2, [r3, #28]
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	687a      	ldr	r2, [r7, #4]
 800de44:	621a      	str	r2, [r3, #32]
		Stream::streams.push_back(this);
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	617b      	str	r3, [r7, #20]
 800de4a:	f107 0314 	add.w	r3, r7, #20
 800de4e:	4619      	mov	r1, r3
 800de50:	4808      	ldr	r0, [pc, #32]	; (800de74 <_ZN6StreamC1EP5TimerP3Can+0x5c>)
 800de52:	f002 f90c 	bl	801006e <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>
		id = current_id;
 800de56:	4b08      	ldr	r3, [pc, #32]	; (800de78 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de58:	781a      	ldrb	r2, [r3, #0]
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	761a      	strb	r2, [r3, #24]
		current_id ++;
 800de5e:	4b06      	ldr	r3, [pc, #24]	; (800de78 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	3301      	adds	r3, #1
 800de64:	b2da      	uxtb	r2, r3
 800de66:	4b04      	ldr	r3, [pc, #16]	; (800de78 <_ZN6StreamC1EP5TimerP3Can+0x60>)
 800de68:	701a      	strb	r2, [r3, #0]
	}
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	4618      	mov	r0, r3
 800de6e:	3718      	adds	r7, #24
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}
 800de74:	2400017c 	.word	0x2400017c
 800de78:	24000000 	.word	0x24000000

0800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800de7c:	b480      	push	{r7}
 800de7e:	b083      	sub	sp, #12
 800de80:	af00      	add	r7, sp, #0
 800de82:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	4618      	mov	r0, r3
 800de88:	370c      	adds	r7, #12
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800de92:	b590      	push	{r4, r7, lr}
 800de94:	b083      	sub	sp, #12
 800de96:	af00      	add	r7, sp, #0
 800de98:	6078      	str	r0, [r7, #4]
 800de9a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800de9c:	6878      	ldr	r0, [r7, #4]
 800de9e:	f7ff ffed 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800dea2:	4603      	mov	r3, r0
 800dea4:	681c      	ldr	r4, [r3, #0]
 800dea6:	6838      	ldr	r0, [r7, #0]
 800dea8:	f7ff ffe8 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 800deac:	4603      	mov	r3, r0
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	429c      	cmp	r4, r3
 800deb2:	bf0c      	ite	eq
 800deb4:	2301      	moveq	r3, #1
 800deb6:	2300      	movne	r3, #0
 800deb8:	b2db      	uxtb	r3, r3
 800deba:	4618      	mov	r0, r3
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd90      	pop	{r4, r7, pc}

0800dec2 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800dec2:	b480      	push	{r7}
 800dec4:	b083      	sub	sp, #12
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
	++_M_current;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	681b      	ldr	r3, [r3, #0]
 800dece:	1d1a      	adds	r2, r3, #4
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	601a      	str	r2, [r3, #0]
	return *this;
 800ded4:	687b      	ldr	r3, [r7, #4]
      }
 800ded6:	4618      	mov	r0, r3
 800ded8:	370c      	adds	r7, #12
 800deda:	46bd      	mov	sp, r7
 800dedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee0:	4770      	bx	lr

0800dee2 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800dee2:	b480      	push	{r7}
 800dee4:	b083      	sub	sp, #12
 800dee6:	af00      	add	r7, sp, #0
 800dee8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4618      	mov	r0, r3
 800def0:	370c      	adds	r7, #12
 800def2:	46bd      	mov	sp, r7
 800def4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def8:	4770      	bx	lr

0800defa <_ZN6Stream17send_all_messagesEv>:

	void send_all_messages(){
 800defa:	b580      	push	{r7, lr}
 800defc:	b088      	sub	sp, #32
 800defe:	af00      	add	r7, sp, #0
 800df00:	6078      	str	r0, [r7, #4]
		unsigned int current_position = 0;
 800df02:	2300      	movs	r3, #0
 800df04:	61fb      	str	r3, [r7, #28]
		memset(can->TxData, 255, Can::MAX_MESSAGE_SIZE);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6a1b      	ldr	r3, [r3, #32]
 800df0a:	3350      	adds	r3, #80	; 0x50
 800df0c:	2240      	movs	r2, #64	; 0x40
 800df0e:	21ff      	movs	r1, #255	; 0xff
 800df10:	4618      	mov	r0, r3
 800df12:	f012 fc6f 	bl	80207f4 <memset>
		for(auto message : messages){
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	3308      	adds	r3, #8
 800df1a:	61bb      	str	r3, [r7, #24]
 800df1c:	69b8      	ldr	r0, [r7, #24]
 800df1e:	f002 f8b7 	bl	8010090 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 800df22:	4603      	mov	r3, r0
 800df24:	613b      	str	r3, [r7, #16]
 800df26:	69b8      	ldr	r0, [r7, #24]
 800df28:	f002 f8c2 	bl	80100b0 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 800df2c:	4603      	mov	r3, r0
 800df2e:	60fb      	str	r3, [r7, #12]
 800df30:	f107 020c 	add.w	r2, r7, #12
 800df34:	f107 0310 	add.w	r3, r7, #16
 800df38:	4611      	mov	r1, r2
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7ff ffa9 	bl	800de92 <_ZN9__gnu_cxxeqIPP13StreamMessageS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800df40:	4603      	mov	r3, r0
 800df42:	f083 0301 	eor.w	r3, r3, #1
 800df46:	b2db      	uxtb	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d01b      	beq.n	800df84 <_ZN6Stream17send_all_messagesEv+0x8a>
 800df4c:	f107 0310 	add.w	r3, r7, #16
 800df50:	4618      	mov	r0, r3
 800df52:	f7ff ffc6 	bl	800dee2 <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEdeEv>
 800df56:	4603      	mov	r3, r0
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	617b      	str	r3, [r7, #20]
			message->unparse(&can->TxData[current_position]);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6a1a      	ldr	r2, [r3, #32]
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	3350      	adds	r3, #80	; 0x50
 800df64:	4413      	add	r3, r2
 800df66:	4619      	mov	r1, r3
 800df68:	6978      	ldr	r0, [r7, #20]
 800df6a:	f7ff fdc1 	bl	800daf0 <_ZN13StreamMessage7unparseEPh>
			current_position += message->size;
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	685b      	ldr	r3, [r3, #4]
 800df72:	69fa      	ldr	r2, [r7, #28]
 800df74:	4413      	add	r3, r2
 800df76:	61fb      	str	r3, [r7, #28]
		for(auto message : messages){
 800df78:	f107 0310 	add.w	r3, r7, #16
 800df7c:	4618      	mov	r0, r3
 800df7e:	f7ff ffa0 	bl	800dec2 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEppEv>
 800df82:	e7d5      	b.n	800df30 <_ZN6Stream17send_all_messagesEv+0x36>
		}
		can->send_message(id, this->size);
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6a18      	ldr	r0, [r3, #32]
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	7e1b      	ldrb	r3, [r3, #24]
 800df8c:	b299      	uxth	r1, r3
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	695b      	ldr	r3, [r3, #20]
 800df92:	461a      	mov	r2, r3
 800df94:	f7f6 feec 	bl	8004d70 <_ZN3Can12send_messageEtm>
	}
 800df98:	bf00      	nop
 800df9a:	3720      	adds	r7, #32
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}

0800dfa0 <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>:

	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
		messages.push_back(message);
		if(state == FREE){
			state = OCCUPIED;
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b082      	sub	sp, #8
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	4618      	mov	r0, r3
 800dfae:	f7ff ffa4 	bl	800defa <_ZN6Stream17send_all_messagesEv>
 800dfb2:	bf00      	nop
 800dfb4:	3708      	adds	r7, #8
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}

0800dfba <_ZN6Stream11add_messageEmP13StreamMessaget>:
	void add_message(uint32_t frequency, StreamMessage* message, uint16_t response_code){
 800dfba:	b590      	push	{r4, r7, lr}
 800dfbc:	b089      	sub	sp, #36	; 0x24
 800dfbe:	af00      	add	r7, sp, #0
 800dfc0:	60f8      	str	r0, [r7, #12]
 800dfc2:	60b9      	str	r1, [r7, #8]
 800dfc4:	607a      	str	r2, [r7, #4]
 800dfc6:	807b      	strh	r3, [r7, #2]
		messages.push_back(message);
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	3308      	adds	r3, #8
 800dfcc:	1d3a      	adds	r2, r7, #4
 800dfce:	4611      	mov	r1, r2
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f002 f87e 	bl	80100d2 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>
		if(state == FREE){
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d117      	bne.n	800e00e <_ZN6Stream11add_messageEmP13StreamMessaget+0x54>
			state = OCCUPIED;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	2201      	movs	r2, #1
 800dfe2:	701a      	strb	r2, [r3, #0]
			timer->execute_at([&](){ send_all_messages(); }, frequency);
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	69dc      	ldr	r4, [r3, #28]
 800dfe8:	68fa      	ldr	r2, [r7, #12]
 800dfea:	f107 0310 	add.w	r3, r7, #16
 800dfee:	4611      	mov	r1, r2
 800dff0:	4618      	mov	r0, r3
 800dff2:	f002 f893 	bl	801011c <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>
 800dff6:	f107 0310 	add.w	r3, r7, #16
 800dffa:	68ba      	ldr	r2, [r7, #8]
 800dffc:	4619      	mov	r1, r3
 800dffe:	4620      	mov	r0, r4
 800e000:	f7ff fc92 	bl	800d928 <_ZN5Timer10execute_atESt8functionIFvvEEm>
 800e004:	f107 0310 	add.w	r3, r7, #16
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff fb6f 	bl	800d6ec <_ZNSt8functionIFvvEED1Ev>
		};
		this -> frequency = frequency;
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	68ba      	ldr	r2, [r7, #8]
 800e012:	605a      	str	r2, [r3, #4]
		send_ok_response(size, response_code);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	695b      	ldr	r3, [r3, #20]
 800e018:	b2db      	uxtb	r3, r3
 800e01a:	887a      	ldrh	r2, [r7, #2]
 800e01c:	4619      	mov	r1, r3
 800e01e:	68f8      	ldr	r0, [r7, #12]
 800e020:	f7ff feb0 	bl	800dd84 <_ZN6Stream16send_ok_responseEht>
 		size += message->size;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	695a      	ldr	r2, [r3, #20]
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	685b      	ldr	r3, [r3, #4]
 800e02c:	441a      	add	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	615a      	str	r2, [r3, #20]
	}
 800e032:	bf00      	nop
 800e034:	3724      	adds	r7, #36	; 0x24
 800e036:	46bd      	mov	sp, r7
 800e038:	bd90      	pop	{r4, r7, pc}

0800e03a <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e03a:	b480      	push	{r7}
 800e03c:	b083      	sub	sp, #12
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	791b      	ldrb	r3, [r3, #4]
 800e046:	4618      	mov	r0, r3
 800e048:	370c      	adds	r7, #12
 800e04a:	46bd      	mov	sp, r7
 800e04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e050:	4770      	bx	lr

0800e052 <_ZNRSt8optionalIP13StreamMessageE5valueEv>:
      value()&
 800e052:	b580      	push	{r7, lr}
 800e054:	b082      	sub	sp, #8
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f7ff ffed 	bl	800e03a <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e060:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e062:	2b00      	cmp	r3, #0
 800e064:	d004      	beq.n	800e070 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x1e>
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f002 f88e 	bl	8010188 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e06c:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e06e:	e001      	b.n	800e074 <_ZNRSt8optionalIP13StreamMessageE5valueEv+0x22>
 800e070:	f7f6 fcbb 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e074:	4618      	mov	r0, r3
 800e076:	3708      	adds	r7, #8
 800e078:	46bd      	mov	sp, r7
 800e07a:	bd80      	pop	{r7, pc}

0800e07c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800e07c:	b480      	push	{r7}
 800e07e:	b083      	sub	sp, #12
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	4618      	mov	r0, r3
 800e088:	370c      	adds	r7, #12
 800e08a:	46bd      	mov	sp, r7
 800e08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e090:	4770      	bx	lr

0800e092 <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e092:	b590      	push	{r4, r7, lr}
 800e094:	b083      	sub	sp, #12
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e09c:	6878      	ldr	r0, [r7, #4]
 800e09e:	f7ff ffed 	bl	800e07c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	681c      	ldr	r4, [r3, #0]
 800e0a6:	6838      	ldr	r0, [r7, #0]
 800e0a8:	f7ff ffe8 	bl	800e07c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 800e0ac:	4603      	mov	r3, r0
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	429c      	cmp	r4, r3
 800e0b2:	bf0c      	ite	eq
 800e0b4:	2301      	moveq	r3, #1
 800e0b6:	2300      	movne	r3, #0
 800e0b8:	b2db      	uxtb	r3, r3
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	370c      	adds	r7, #12
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd90      	pop	{r4, r7, pc}

0800e0c2 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e0c2:	b480      	push	{r7}
 800e0c4:	b083      	sub	sp, #12
 800e0c6:	af00      	add	r7, sp, #0
 800e0c8:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	1d1a      	adds	r2, r3, #4
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	601a      	str	r2, [r3, #0]
	return *this;
 800e0d4:	687b      	ldr	r3, [r7, #4]
      }
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	370c      	adds	r7, #12
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 800e0e2:	b480      	push	{r7}
 800e0e4:	b083      	sub	sp, #12
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	370c      	adds	r7, #12
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f8:	4770      	bx	lr
	...

0800e0fc <_ZN6Stream10add_streamEjP3Pint>:

	static bool add_stream(unsigned int frequency, Pin* pin, uint16_t response_code) {
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b08c      	sub	sp, #48	; 0x30
 800e100:	af00      	add	r7, sp, #0
 800e102:	60f8      	str	r0, [r7, #12]
 800e104:	60b9      	str	r1, [r7, #8]
 800e106:	4613      	mov	r3, r2
 800e108:	80fb      	strh	r3, [r7, #6]
		optional<StreamMessage*> message_optional = StreamMessage::FromPin(pin);
 800e10a:	f107 031c 	add.w	r3, r7, #28
 800e10e:	68b9      	ldr	r1, [r7, #8]
 800e110:	4618      	mov	r0, r3
 800e112:	f7ff fd95 	bl	800dc40 <_ZN13StreamMessage7FromPinEP3Pin>
		if(message_optional){
 800e116:	f107 031c 	add.w	r3, r7, #28
 800e11a:	4618      	mov	r0, r3
 800e11c:	f002 f828 	bl	8010170 <_ZNKSt8optionalIP13StreamMessageEcvbEv>
 800e120:	4603      	mov	r3, r0
 800e122:	2b00      	cmp	r3, #0
 800e124:	d041      	beq.n	800e1aa <_ZN6Stream10add_streamEjP3Pint+0xae>
			StreamMessage* message = message_optional.value();
 800e126:	f107 031c 	add.w	r3, r7, #28
 800e12a:	4618      	mov	r0, r3
 800e12c:	f7ff ff91 	bl	800e052 <_ZNRSt8optionalIP13StreamMessageE5valueEv>
 800e130:	4603      	mov	r3, r0
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	62fb      	str	r3, [r7, #44]	; 0x2c
			for(auto s : streams){
 800e136:	4b1f      	ldr	r3, [pc, #124]	; (800e1b4 <_ZN6Stream10add_streamEjP3Pint+0xb8>)
 800e138:	62bb      	str	r3, [r7, #40]	; 0x28
 800e13a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e13c:	f002 f831 	bl	80101a2 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 800e140:	4603      	mov	r3, r0
 800e142:	61bb      	str	r3, [r7, #24]
 800e144:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e146:	f002 f83c 	bl	80101c2 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 800e14a:	4603      	mov	r3, r0
 800e14c:	617b      	str	r3, [r7, #20]
 800e14e:	f107 0214 	add.w	r2, r7, #20
 800e152:	f107 0318 	add.w	r3, r7, #24
 800e156:	4611      	mov	r1, r2
 800e158:	4618      	mov	r0, r3
 800e15a:	f7ff ff9a 	bl	800e092 <_ZN9__gnu_cxxeqIPP6StreamS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e15e:	4603      	mov	r3, r0
 800e160:	f083 0301 	eor.w	r3, r3, #1
 800e164:	b2db      	uxtb	r3, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	d01f      	beq.n	800e1aa <_ZN6Stream10add_streamEjP3Pint+0xae>
 800e16a:	f107 0318 	add.w	r3, r7, #24
 800e16e:	4618      	mov	r0, r3
 800e170:	f7ff ffb7 	bl	800e0e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 800e174:	4603      	mov	r3, r0
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
				if(s->is_available(frequency, message->size)){
 800e17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e17c:	685b      	ldr	r3, [r3, #4]
 800e17e:	461a      	mov	r2, r3
 800e180:	68f9      	ldr	r1, [r7, #12]
 800e182:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e184:	f7ff fdc8 	bl	800dd18 <_ZN6Stream12is_availableEjj>
 800e188:	4603      	mov	r3, r0
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d007      	beq.n	800e19e <_ZN6Stream10add_streamEjP3Pint+0xa2>
					s->add_message(frequency, message, response_code);
 800e18e:	88fb      	ldrh	r3, [r7, #6]
 800e190:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e192:	68f9      	ldr	r1, [r7, #12]
 800e194:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e196:	f7ff ff10 	bl	800dfba <_ZN6Stream11add_messageEmP13StreamMessaget>
					return true;
 800e19a:	2301      	movs	r3, #1
 800e19c:	e006      	b.n	800e1ac <_ZN6Stream10add_streamEjP3Pint+0xb0>
			for(auto s : streams){
 800e19e:	f107 0318 	add.w	r3, r7, #24
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7ff ff8d 	bl	800e0c2 <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEppEv>
 800e1a8:	e7d1      	b.n	800e14e <_ZN6Stream10add_streamEjP3Pint+0x52>
				}
			}
		}
		return false;
 800e1aa:	2300      	movs	r3, #0
	}
 800e1ac:	4618      	mov	r0, r3
 800e1ae:	3730      	adds	r7, #48	; 0x30
 800e1b0:	46bd      	mov	sp, r7
 800e1b2:	bd80      	pop	{r7, pc}
 800e1b4:	2400017c 	.word	0x2400017c

0800e1b8 <_Z5startv>:
Stream stream1(&timer_14, &main_can);
Stream stream2(&timer_15, &main_can);
Stream stream3(&timer_16, &main_can);
Stream stream4(&timer_17, &main_can);

void start() {
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	af00      	add	r7, sp, #0
	InputCapture::start_all_input_captures();
 800e1bc:	f7fb fa9a 	bl	80096f4 <_ZN12InputCapture24start_all_input_capturesEv>
	AnalogOut::start_all_analog_outs();
 800e1c0:	f7f5 f8e0 	bl	8003384 <_ZN9AnalogOut21start_all_analog_outsEv>
	AnalogIn::start_all_analog_ins();
 800e1c4:	f7f2 fa6a 	bl	800069c <_ZN8AnalogIn20start_all_analog_insEv>
	Can::start_all_cans();
 800e1c8:	f7f6 fd36 	bl	8004c38 <_ZN3Can14start_all_cansEv>
}
 800e1cc:	bf00      	nop
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <HAL_TIM_IC_CaptureCallback>:

// INTERRUPTIONS

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* timer){
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b082      	sub	sp, #8
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
	InputCapture::interrupt_of_all_input_captures(timer);
 800e1d8:	6878      	ldr	r0, [r7, #4]
 800e1da:	f7fb fabb 	bl	8009754 <_ZN12InputCapture31interrupt_of_all_input_capturesEP17TIM_HandleTypeDef>
}
 800e1de:	bf00      	nop
 800e1e0:	3708      	adds	r7, #8
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b082      	sub	sp, #8
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
	AnalogIn::interrupt_all_analog_ins();
 800e1ee:	f7f2 fa85 	bl	80006fc <_ZN8AnalogIn24interrupt_all_analog_insEv>
}
 800e1f2:	bf00      	nop
 800e1f4:	3708      	adds	r7, #8
 800e1f6:	46bd      	mov	sp, r7
 800e1f8:	bd80      	pop	{r7, pc}

0800e1fa <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* tim){
 800e1fa:	b580      	push	{r7, lr}
 800e1fc:	b082      	sub	sp, #8
 800e1fe:	af00      	add	r7, sp, #0
 800e200:	6078      	str	r0, [r7, #4]
	Timer::interrupt_all_timers(tim);
 800e202:	6878      	ldr	r0, [r7, #4]
 800e204:	f7ff fbfc 	bl	800da00 <_ZN5Timer20interrupt_all_timersEP17TIM_HandleTypeDef>
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
	HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 800e21a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800e21e:	4805      	ldr	r0, [pc, #20]	; (800e234 <HAL_FDCAN_RxFifo0Callback+0x24>)
 800e220:	f00c fe43 	bl	801aeaa <HAL_GPIO_TogglePin>
	Can::message_received_all_cans(hfdcan, RxFifo0ITs);
 800e224:	6839      	ldr	r1, [r7, #0]
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7f6 fed8 	bl	8004fdc <_ZN3Can25message_received_all_cansEP19FDCAN_HandleTypeDefm>
}
 800e22c:	bf00      	nop
 800e22e:	3708      	adds	r7, #8
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}
 800e234:	58021800 	.word	0x58021800

0800e238 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>:
      constexpr bool _M_is_engaged() const noexcept
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Dp*>(this)->_M_payload._M_engaged; }
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	791b      	ldrb	r3, [r3, #4]
 800e244:	4618      	mov	r0, r3
 800e246:	370c      	adds	r7, #12
 800e248:	46bd      	mov	sp, r7
 800e24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24e:	4770      	bx	lr

0800e250 <_ZNRSt8optionalIP3PinE5valueEv>:
      value()&
 800e250:	b580      	push	{r7, lr}
 800e252:	b082      	sub	sp, #8
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
	return this->_M_is_engaged()
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f7ff ffed 	bl	800e238 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 800e25e:	4603      	mov	r3, r0
	  ? this->_M_get()
 800e260:	2b00      	cmp	r3, #0
 800e262:	d004      	beq.n	800e26e <_ZNRSt8optionalIP3PinE5valueEv+0x1e>
 800e264:	6878      	ldr	r0, [r7, #4]
 800e266:	f002 f89d 	bl	80103a4 <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>
 800e26a:	4603      	mov	r3, r0
	  : (__throw_bad_optional_access(), this->_M_get());
 800e26c:	e001      	b.n	800e272 <_ZNRSt8optionalIP3PinE5valueEv+0x22>
 800e26e:	f7f6 fbbc 	bl	80049ea <_ZSt27__throw_bad_optional_accessv>
      }
 800e272:	4618      	mov	r0, r3
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}
	...

0800e27c <_Z23read_analog_in_callbackv>:

// MESSAGE CALLBACKS

void read_analog_in_callback(){
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b084      	sub	sp, #16
 800e280:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e282:	4b14      	ldr	r3, [pc, #80]	; (800e2d4 <_Z23read_analog_in_callbackv+0x58>)
 800e284:	781b      	ldrb	r3, [r3, #0]
 800e286:	b29a      	uxth	r2, r3
 800e288:	1d3b      	adds	r3, r7, #4
 800e28a:	4611      	mov	r1, r2
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fe f9b1 	bl	800c5f4 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e292:	1d3b      	adds	r3, r7, #4
 800e294:	4618      	mov	r0, r3
 800e296:	f002 f879 	bl	801038c <_ZNKSt8optionalIP3PinEcvbEv>
 800e29a:	4603      	mov	r3, r0
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d016      	beq.n	800e2ce <_Z23read_analog_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e2a0:	1d3b      	adds	r3, r7, #4
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	f7ff ffd4 	bl	800e250 <_ZNRSt8optionalIP3PinE5valueEv>
 800e2a8:	4603      	mov	r3, r0
 800e2aa:	681b      	ldr	r3, [r3, #0]
 800e2ac:	603b      	str	r3, [r7, #0]
		AnalogIn* in = AnalogIn::analog_in_from_pin[pin];
 800e2ae:	463b      	mov	r3, r7
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4809      	ldr	r0, [pc, #36]	; (800e2d8 <_Z23read_analog_in_callbackv+0x5c>)
 800e2b4:	f7f2 fb54 	bl	8000960 <_ZNSt3mapIP3PinP8AnalogInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e2b8:	4603      	mov	r3, r0
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_ANALOG_IN_REPLY, (uint8_t*) &in->voltage, sizeof(float));
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f103 0214 	add.w	r2, r3, #20
 800e2c4:	2304      	movs	r3, #4
 800e2c6:	215d      	movs	r1, #93	; 0x5d
 800e2c8:	4804      	ldr	r0, [pc, #16]	; (800e2dc <_Z23read_analog_in_callbackv+0x60>)
 800e2ca:	f7f6 fcf9 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e2ce:	3710      	adds	r7, #16
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	bd80      	pop	{r7, pc}
 800e2d4:	24000b1c 	.word	0x24000b1c
 800e2d8:	240000bc 	.word	0x240000bc
 800e2dc:	24000a4c 	.word	0x24000a4c

0800e2e0 <_Z24read_digital_in_callbackv>:

void read_digital_in_callback(){
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b084      	sub	sp, #16
 800e2e4:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e2e6:	4b14      	ldr	r3, [pc, #80]	; (800e338 <_Z24read_digital_in_callbackv+0x58>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	b29a      	uxth	r2, r3
 800e2ec:	1d3b      	adds	r3, r7, #4
 800e2ee:	4611      	mov	r1, r2
 800e2f0:	4618      	mov	r0, r3
 800e2f2:	f7fe f97f 	bl	800c5f4 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e2f6:	1d3b      	adds	r3, r7, #4
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	f002 f847 	bl	801038c <_ZNKSt8optionalIP3PinEcvbEv>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d016      	beq.n	800e332 <_Z24read_digital_in_callbackv+0x52>
		Pin* pin = pin_optional.value();
 800e304:	1d3b      	adds	r3, r7, #4
 800e306:	4618      	mov	r0, r3
 800e308:	f7ff ffa2 	bl	800e250 <_ZNRSt8optionalIP3PinE5valueEv>
 800e30c:	4603      	mov	r3, r0
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	603b      	str	r3, [r7, #0]
		DigitalIn* in = DigitalIn::pin_to_digital_in[pin];
 800e312:	463b      	mov	r3, r7
 800e314:	4619      	mov	r1, r3
 800e316:	4809      	ldr	r0, [pc, #36]	; (800e33c <_Z24read_digital_in_callbackv+0x5c>)
 800e318:	f7f8 f9e0 	bl	80066dc <_ZNSt3mapIP3PinP9DigitalInSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e31c:	4603      	mov	r3, r0
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	60fb      	str	r3, [r7, #12]
		main_can.send_message(ID_READ_DIGITAL_IN_REPLY, (uint8_t*) &in->state, sizeof(uint8_t));
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	f103 0208 	add.w	r2, r3, #8
 800e328:	2301      	movs	r3, #1
 800e32a:	215e      	movs	r1, #94	; 0x5e
 800e32c:	4804      	ldr	r0, [pc, #16]	; (800e340 <_Z24read_digital_in_callbackv+0x60>)
 800e32e:	f7f6 fcc7 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e332:	3710      	adds	r7, #16
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	24000b1c 	.word	0x24000b1c
 800e33c:	2400011c 	.word	0x2400011c
 800e340:	24000a4c 	.word	0x24000a4c

0800e344 <_Z27read_input_capture_callbackv>:

int MSG_INDEX = 0;
void read_input_capture_callback(){
 800e344:	b580      	push	{r7, lr}
 800e346:	b084      	sub	sp, #16
 800e348:	af00      	add	r7, sp, #0
	MSG_INDEX += 1;
 800e34a:	4b18      	ldr	r3, [pc, #96]	; (800e3ac <_Z27read_input_capture_callbackv+0x68>)
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	3301      	adds	r3, #1
 800e350:	4a16      	ldr	r2, [pc, #88]	; (800e3ac <_Z27read_input_capture_callbackv+0x68>)
 800e352:	6013      	str	r3, [r2, #0]
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_once_pin);
 800e354:	4b16      	ldr	r3, [pc, #88]	; (800e3b0 <_Z27read_input_capture_callbackv+0x6c>)
 800e356:	781b      	ldrb	r3, [r3, #0]
 800e358:	b29a      	uxth	r2, r3
 800e35a:	1d3b      	adds	r3, r7, #4
 800e35c:	4611      	mov	r1, r2
 800e35e:	4618      	mov	r0, r3
 800e360:	f7fe f948 	bl	800c5f4 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e364:	1d3b      	adds	r3, r7, #4
 800e366:	4618      	mov	r0, r3
 800e368:	f002 f810 	bl	801038c <_ZNKSt8optionalIP3PinEcvbEv>
 800e36c:	4603      	mov	r3, r0
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d019      	beq.n	800e3a6 <_Z27read_input_capture_callbackv+0x62>
		Pin* pin = pin_optional.value();
 800e372:	1d3b      	adds	r3, r7, #4
 800e374:	4618      	mov	r0, r3
 800e376:	f7ff ff6b 	bl	800e250 <_ZNRSt8optionalIP3PinE5valueEv>
 800e37a:	4603      	mov	r3, r0
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	603b      	str	r3, [r7, #0]
		InputCapture* in = InputCapture::pin_to_input_capture[pin];
 800e380:	463b      	mov	r3, r7
 800e382:	4619      	mov	r1, r3
 800e384:	480b      	ldr	r0, [pc, #44]	; (800e3b4 <_Z27read_input_capture_callbackv+0x70>)
 800e386:	f7fb facf 	bl	8009928 <_ZNSt3mapIP3PinP12InputCaptureSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e38a:	4603      	mov	r3, r0
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	60fb      	str	r3, [r7, #12]
		in->get_duty();
 800e390:	68f8      	ldr	r0, [r7, #12]
 800e392:	f7fb fa29 	bl	80097e8 <_ZN12InputCapture8get_dutyEv>
		main_can.send_message(ID_READ_INPUT_CAPTURE_REPLY, (uint8_t*) &in->duty, sizeof(float));
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800e39c:	2304      	movs	r3, #4
 800e39e:	215c      	movs	r1, #92	; 0x5c
 800e3a0:	4805      	ldr	r0, [pc, #20]	; (800e3b8 <_Z27read_input_capture_callbackv+0x74>)
 800e3a2:	f7f6 fc8d 	bl	8004cc0 <_ZN3Can12send_messageEtPhm>
		return;
	}
}
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	24000cac 	.word	0x24000cac
 800e3b0:	24000b1c 	.word	0x24000b1c
 800e3b4:	24000164 	.word	0x24000164
 800e3b8:	24000a4c 	.word	0x24000a4c

0800e3bc <_Z29stream_input_capture_callbackv>:
			id = ID_STREAM_INPUT_CAPTURE_REPLY;
			main_can.send_error_message(id, "ERROR: all streams are full");
	}
}

void stream_input_capture_callback(){
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e3c2:	4b10      	ldr	r3, [pc, #64]	; (800e404 <_Z29stream_input_capture_callbackv+0x48>)
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	b29a      	uxth	r2, r3
 800e3c8:	1d3b      	adds	r3, r7, #4
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7fe f911 	bl	800c5f4 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e3d2:	1d3b      	adds	r3, r7, #4
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f001 ffd9 	bl	801038c <_ZNKSt8optionalIP3PinEcvbEv>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d00d      	beq.n	800e3fc <_Z29stream_input_capture_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e3e0:	1d3b      	adds	r3, r7, #4
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	f7ff ff34 	bl	800e250 <_ZNRSt8optionalIP3PinE5valueEv>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_INPUT_CAPTURE_REPLY);
 800e3ee:	4b06      	ldr	r3, [pc, #24]	; (800e408 <_Z29stream_input_capture_callbackv+0x4c>)
 800e3f0:	881b      	ldrh	r3, [r3, #0]
 800e3f2:	225f      	movs	r2, #95	; 0x5f
 800e3f4:	68f9      	ldr	r1, [r7, #12]
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7ff fe80 	bl	800e0fc <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e3fc:	bf00      	nop
 800e3fe:	3710      	adds	r7, #16
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}
 800e404:	24000b24 	.word	0x24000b24
 800e408:	24000b26 	.word	0x24000b26

0800e40c <_Z25strean_analog_in_callbackv>:

void strean_analog_in_callback(){
 800e40c:	b580      	push	{r7, lr}
 800e40e:	b084      	sub	sp, #16
 800e410:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e412:	4b10      	ldr	r3, [pc, #64]	; (800e454 <_Z25strean_analog_in_callbackv+0x48>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	b29a      	uxth	r2, r3
 800e418:	1d3b      	adds	r3, r7, #4
 800e41a:	4611      	mov	r1, r2
 800e41c:	4618      	mov	r0, r3
 800e41e:	f7fe f8e9 	bl	800c5f4 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e422:	1d3b      	adds	r3, r7, #4
 800e424:	4618      	mov	r0, r3
 800e426:	f001 ffb1 	bl	801038c <_ZNKSt8optionalIP3PinEcvbEv>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00d      	beq.n	800e44c <_Z25strean_analog_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e430:	1d3b      	adds	r3, r7, #4
 800e432:	4618      	mov	r0, r3
 800e434:	f7ff ff0c 	bl	800e250 <_ZNRSt8optionalIP3PinE5valueEv>
 800e438:	4603      	mov	r3, r0
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_ANALOG_IN_REPLY);
 800e43e:	4b06      	ldr	r3, [pc, #24]	; (800e458 <_Z25strean_analog_in_callbackv+0x4c>)
 800e440:	881b      	ldrh	r3, [r3, #0]
 800e442:	2260      	movs	r2, #96	; 0x60
 800e444:	68f9      	ldr	r1, [r7, #12]
 800e446:	4618      	mov	r0, r3
 800e448:	f7ff fe58 	bl	800e0fc <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e44c:	bf00      	nop
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	24000b24 	.word	0x24000b24
 800e458:	24000b26 	.word	0x24000b26

0800e45c <_Z26stream_digital_in_callbackv>:

void stream_digital_in_callback(){
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(read_stream_pin);
 800e462:	4b10      	ldr	r3, [pc, #64]	; (800e4a4 <_Z26stream_digital_in_callbackv+0x48>)
 800e464:	781b      	ldrb	r3, [r3, #0]
 800e466:	b29a      	uxth	r2, r3
 800e468:	1d3b      	adds	r3, r7, #4
 800e46a:	4611      	mov	r1, r2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7fe f8c1 	bl	800c5f4 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e472:	1d3b      	adds	r3, r7, #4
 800e474:	4618      	mov	r0, r3
 800e476:	f001 ff89 	bl	801038c <_ZNKSt8optionalIP3PinEcvbEv>
 800e47a:	4603      	mov	r3, r0
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d00d      	beq.n	800e49c <_Z26stream_digital_in_callbackv+0x40>
		Pin* pin = pin_optional.value();
 800e480:	1d3b      	adds	r3, r7, #4
 800e482:	4618      	mov	r0, r3
 800e484:	f7ff fee4 	bl	800e250 <_ZNRSt8optionalIP3PinE5valueEv>
 800e488:	4603      	mov	r3, r0
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	60fb      	str	r3, [r7, #12]
		Stream::add_stream(read_stream_freq, pin, ID_STREAM_DIGITAL_IN_REPLY);
 800e48e:	4b06      	ldr	r3, [pc, #24]	; (800e4a8 <_Z26stream_digital_in_callbackv+0x4c>)
 800e490:	881b      	ldrh	r3, [r3, #0]
 800e492:	2261      	movs	r2, #97	; 0x61
 800e494:	68f9      	ldr	r1, [r7, #12]
 800e496:	4618      	mov	r0, r3
 800e498:	f7ff fe30 	bl	800e0fc <_ZN6Stream10add_streamEjP3Pint>
	}
}
 800e49c:	bf00      	nop
 800e49e:	3710      	adds	r7, #16
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	bd80      	pop	{r7, pc}
 800e4a4:	24000b24 	.word	0x24000b24
 800e4a8:	24000b26 	.word	0x24000b26

0800e4ac <_Z19write_once_callbackv>:


void write_once_callback(){
 800e4ac:	b580      	push	{r7, lr}
 800e4ae:	b086      	sub	sp, #24
 800e4b0:	af00      	add	r7, sp, #0
	optional<Pin*> pin_optional = Pin::get_pin_from_id(write_once_pin);
 800e4b2:	4b2f      	ldr	r3, [pc, #188]	; (800e570 <_Z19write_once_callbackv+0xc4>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	f107 0308 	add.w	r3, r7, #8
 800e4bc:	4611      	mov	r1, r2
 800e4be:	4618      	mov	r0, r3
 800e4c0:	f7fe f898 	bl	800c5f4 <_ZN3Pin15get_pin_from_idEt>
	if(pin_optional){
 800e4c4:	f107 0308 	add.w	r3, r7, #8
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	f001 ff5f 	bl	801038c <_ZNKSt8optionalIP3PinEcvbEv>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d04a      	beq.n	800e56a <_Z19write_once_callbackv+0xbe>
		Pin* pin = pin_optional.value();
 800e4d4:	f107 0308 	add.w	r3, r7, #8
 800e4d8:	4618      	mov	r0, r3
 800e4da:	f7ff feb9 	bl	800e250 <_ZNRSt8optionalIP3PinE5valueEv>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	681b      	ldr	r3, [r3, #0]
 800e4e2:	607b      	str	r3, [r7, #4]

		if(pin->mode == DIGITAL_OUTPUT && DigitalOut::pin_to_digital_out.contains(pin)) {
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	799b      	ldrb	r3, [r3, #6]
 800e4e8:	2b04      	cmp	r3, #4
 800e4ea:	d109      	bne.n	800e500 <_Z19write_once_callbackv+0x54>
 800e4ec:	1d3b      	adds	r3, r7, #4
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	4820      	ldr	r0, [pc, #128]	; (800e574 <_Z19write_once_callbackv+0xc8>)
 800e4f2:	f001 ff64 	bl	80103be <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e4f6:	4603      	mov	r3, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d001      	beq.n	800e500 <_Z19write_once_callbackv+0x54>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	e000      	b.n	800e502 <_Z19write_once_callbackv+0x56>
 800e500:	2300      	movs	r3, #0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d00f      	beq.n	800e526 <_Z19write_once_callbackv+0x7a>
			DigitalOut* out = DigitalOut::pin_to_digital_out[pin];
 800e506:	1d3b      	adds	r3, r7, #4
 800e508:	4619      	mov	r1, r3
 800e50a:	481a      	ldr	r0, [pc, #104]	; (800e574 <_Z19write_once_callbackv+0xc8>)
 800e50c:	f7f9 fcac 	bl	8007e68 <_ZNSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e510:	4603      	mov	r3, r0
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	613b      	str	r3, [r7, #16]
			out->set_to((DigitalOut::DigitalOutState) write_once_value);
 800e516:	4b18      	ldr	r3, [pc, #96]	; (800e578 <_Z19write_once_callbackv+0xcc>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	b2db      	uxtb	r3, r3
 800e51c:	4619      	mov	r1, r3
 800e51e:	6938      	ldr	r0, [r7, #16]
 800e520:	f7f9 fbf0 	bl	8007d04 <_ZN10DigitalOut6set_toENS_15DigitalOutStateE>
			return;
 800e524:	e021      	b.n	800e56a <_Z19write_once_callbackv+0xbe>
		}

		if(pin->mode == ANALOG_OUTPUT && AnalogOut::pin_to_analog_out.contains(pin)) {
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	799b      	ldrb	r3, [r3, #6]
 800e52a:	2b05      	cmp	r3, #5
 800e52c:	d109      	bne.n	800e542 <_Z19write_once_callbackv+0x96>
 800e52e:	1d3b      	adds	r3, r7, #4
 800e530:	4619      	mov	r1, r3
 800e532:	4812      	ldr	r0, [pc, #72]	; (800e57c <_Z19write_once_callbackv+0xd0>)
 800e534:	f001 ff65 	bl	8010402 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>
 800e538:	4603      	mov	r3, r0
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	d001      	beq.n	800e542 <_Z19write_once_callbackv+0x96>
 800e53e:	2301      	movs	r3, #1
 800e540:	e000      	b.n	800e544 <_Z19write_once_callbackv+0x98>
 800e542:	2300      	movs	r3, #0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d010      	beq.n	800e56a <_Z19write_once_callbackv+0xbe>
			AnalogOut* out = AnalogOut::pin_to_analog_out[pin];
 800e548:	1d3b      	adds	r3, r7, #4
 800e54a:	4619      	mov	r1, r3
 800e54c:	480b      	ldr	r0, [pc, #44]	; (800e57c <_Z19write_once_callbackv+0xd0>)
 800e54e:	f7f4 ffc3 	bl	80034d8 <_ZNSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEEixERS7_>
 800e552:	4603      	mov	r3, r0
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	617b      	str	r3, [r7, #20]
			out->set_voltage(*((float*) &write_once_value));
 800e558:	4b07      	ldr	r3, [pc, #28]	; (800e578 <_Z19write_once_callbackv+0xcc>)
 800e55a:	edd3 7a00 	vldr	s15, [r3]
 800e55e:	eeb0 0a67 	vmov.f32	s0, s15
 800e562:	6978      	ldr	r0, [r7, #20]
 800e564:	f7f4 fe46 	bl	80031f4 <_ZN9AnalogOut11set_voltageEf>
			return;
 800e568:	bf00      	nop
		}
	}
}
 800e56a:	3718      	adds	r7, #24
 800e56c:	46bd      	mov	sp, r7
 800e56e:	bd80      	pop	{r7, pc}
 800e570:	24000b1d 	.word	0x24000b1d
 800e574:	24000140 	.word	0x24000140
 800e578:	24000b20 	.word	0x24000b20
 800e57c:	240000e0 	.word	0x240000e0

0800e580 <_Z22set_precision_callbackv>:

void set_precision_callback() {
 800e580:	b580      	push	{r7, lr}
 800e582:	af00      	add	r7, sp, #0
	if(StreamMessage::set_precision_mode(set_precision_value)){
 800e584:	4b0b      	ldr	r3, [pc, #44]	; (800e5b4 <_Z22set_precision_callbackv+0x34>)
 800e586:	781b      	ldrb	r3, [r3, #0]
 800e588:	4618      	mov	r0, r3
 800e58a:	f7ff fbaf 	bl	800dcec <_ZN13StreamMessage18set_precision_modeEh>
 800e58e:	4603      	mov	r3, r0
 800e590:	2b00      	cmp	r3, #0
 800e592:	d009      	beq.n	800e5a8 <_Z22set_precision_callbackv+0x28>
		main_can.TxData[0] = 0;
 800e594:	4b08      	ldr	r3, [pc, #32]	; (800e5b8 <_Z22set_precision_callbackv+0x38>)
 800e596:	2200      	movs	r2, #0
 800e598:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		main_can.send_message(ID_SET_PRECISION,1);
 800e59c:	2201      	movs	r2, #1
 800e59e:	2159      	movs	r1, #89	; 0x59
 800e5a0:	4805      	ldr	r0, [pc, #20]	; (800e5b8 <_Z22set_precision_callbackv+0x38>)
 800e5a2:	f7f6 fbe5 	bl	8004d70 <_ZN3Can12send_messageEtm>
		return;
 800e5a6:	e004      	b.n	800e5b2 <_Z22set_precision_callbackv+0x32>
	}
	main_can.send_error_message(ID_INFO_MESSAGE, "Error: cannot change precision");
 800e5a8:	4a04      	ldr	r2, [pc, #16]	; (800e5bc <_Z22set_precision_callbackv+0x3c>)
 800e5aa:	215b      	movs	r1, #91	; 0x5b
 800e5ac:	4802      	ldr	r0, [pc, #8]	; (800e5b8 <_Z22set_precision_callbackv+0x38>)
 800e5ae:	f7f6 fc22 	bl	8004df6 <_ZN3Can18send_error_messageEtPKc>
}
 800e5b2:	bd80      	pop	{r7, pc}
 800e5b4:	24000b28 	.word	0x24000b28
 800e5b8:	24000a4c 	.word	0x24000a4c
 800e5bc:	08020c34 	.word	0x08020c34

0800e5c0 <_Z22cancel_stream_callbackv>:

int DEBUG_C = 0;
void cancel_stream_callback(){
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	af00      	add	r7, sp, #0
	HAL_NVIC_SystemReset();
 800e5c4:	f009 f857 	bl	8017676 <HAL_NVIC_SystemReset>
	DEBUG_C ++;
 800e5c8:	4b03      	ldr	r3, [pc, #12]	; (800e5d8 <_Z22cancel_stream_callbackv+0x18>)
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	4a02      	ldr	r2, [pc, #8]	; (800e5d8 <_Z22cancel_stream_callbackv+0x18>)
 800e5d0:	6013      	str	r3, [r2, #0]
}
 800e5d2:	bf00      	nop
 800e5d4:	bd80      	pop	{r7, pc}
 800e5d6:	bf00      	nop
 800e5d8:	24000cb0 	.word	0x24000cb0

0800e5dc <_ZZN8TUDTests5setupEvENKUlvE_clEv>:

	static void setup(){
		start();

		// ANALOG OUT
		timer_7.execute_every([](){
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
//			for(auto analog_out : AnalogOut::all_analog_outs)
//				analog_out->set_voltage(sin(sin_index / 1000.0 * 3.1415) * 1.65 + 1.65);
//			sin_index ++;
			//main_can.send_ok_message();
		}, 1000, Timer::MICROSEONDS);
 800e5e4:	bf00      	nop
 800e5e6:	370c      	adds	r7, #12
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ee:	4770      	bx	lr

0800e5f0 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>:

		// GPIO IN
		timer_13.execute_every([](){
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
			for(auto in : DigitalIn::all_digital_ins)
 800e5f8:	4b17      	ldr	r3, [pc, #92]	; (800e658 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x68>)
 800e5fa:	617b      	str	r3, [r7, #20]
 800e5fc:	6978      	ldr	r0, [r7, #20]
 800e5fe:	f7f8 fdb6 	bl	800716e <_ZNSt6vectorIP9DigitalInSaIS1_EE5beginEv>
 800e602:	4603      	mov	r3, r0
 800e604:	60fb      	str	r3, [r7, #12]
 800e606:	6978      	ldr	r0, [r7, #20]
 800e608:	f7f8 fa96 	bl	8006b38 <_ZNSt6vectorIP9DigitalInSaIS1_EE3endEv>
 800e60c:	4603      	mov	r3, r0
 800e60e:	60bb      	str	r3, [r7, #8]
 800e610:	f107 0208 	add.w	r2, r7, #8
 800e614:	f107 030c 	add.w	r3, r7, #12
 800e618:	4611      	mov	r1, r2
 800e61a:	4618      	mov	r0, r3
 800e61c:	f000 f81e 	bl	800e65c <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>
 800e620:	4603      	mov	r3, r0
 800e622:	f083 0301 	eor.w	r3, r3, #1
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d010      	beq.n	800e64e <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x5e>
 800e62c:	f107 030c 	add.w	r3, r7, #12
 800e630:	4618      	mov	r0, r3
 800e632:	f7f8 fe26 	bl	8007282 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEdeEv>
 800e636:	4603      	mov	r3, r0
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	613b      	str	r3, [r7, #16]
				in->get_value();
 800e63c:	6938      	ldr	r0, [r7, #16]
 800e63e:	f7f7 ffb3 	bl	80065a8 <_ZN9DigitalIn9get_valueEv>
			for(auto in : DigitalIn::all_digital_ins)
 800e642:	f107 030c 	add.w	r3, r7, #12
 800e646:	4618      	mov	r0, r3
 800e648:	f000 f820 	bl	800e68c <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>
 800e64c:	e7e0      	b.n	800e610 <_ZZN8TUDTests5setupEvENKUlvE0_clEv+0x20>
		}, 1000, Timer::MICROSEONDS);
 800e64e:	bf00      	nop
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	24000110 	.word	0x24000110

0800e65c <_ZN9__gnu_cxxeqIPP9DigitalInS3_St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T1_EERKNS7_IT0_S9_EE>:
    operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,
 800e65c:	b590      	push	{r4, r7, lr}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f7f8 fdce 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e66c:	4603      	mov	r3, r0
 800e66e:	681c      	ldr	r4, [r3, #0]
 800e670:	6838      	ldr	r0, [r7, #0]
 800e672:	f7f8 fdc9 	bl	8007208 <_ZNK9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEE4baseEv>
 800e676:	4603      	mov	r3, r0
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	429c      	cmp	r4, r3
 800e67c:	bf0c      	ite	eq
 800e67e:	2301      	moveq	r3, #1
 800e680:	2300      	movne	r3, #0
 800e682:	b2db      	uxtb	r3, r3
 800e684:	4618      	mov	r0, r3
 800e686:	370c      	adds	r7, #12
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd90      	pop	{r4, r7, pc}

0800e68c <_ZN9__gnu_cxx17__normal_iteratorIPP9DigitalInSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	6078      	str	r0, [r7, #4]
	++_M_current;
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	1d1a      	adds	r2, r3, #4
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	601a      	str	r2, [r3, #0]
	return *this;
 800e69e:	687b      	ldr	r3, [r7, #4]
      }
 800e6a0:	4618      	mov	r0, r3
 800e6a2:	370c      	adds	r7, #12
 800e6a4:	46bd      	mov	sp, r7
 800e6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6aa:	4770      	bx	lr

0800e6ac <_ZN8TUDTests5setupEv>:
	static void setup(){
 800e6ac:	b5b0      	push	{r4, r5, r7, lr}
 800e6ae:	b088      	sub	sp, #32
 800e6b0:	af00      	add	r7, sp, #0
		start();
 800e6b2:	f7ff fd81 	bl	800e1b8 <_Z5startv>
		timer_7.execute_every([](){
 800e6b6:	463b      	mov	r3, r7
 800e6b8:	4629      	mov	r1, r5
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f001 fec4 	bl	8010448 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>
 800e6c0:	4639      	mov	r1, r7
 800e6c2:	2302      	movs	r3, #2
 800e6c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6c8:	480e      	ldr	r0, [pc, #56]	; (800e704 <_ZN8TUDTests5setupEv+0x58>)
 800e6ca:	f7ff f90b 	bl	800d8e4 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e6ce:	463b      	mov	r3, r7
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7ff f80b 	bl	800d6ec <_ZNSt8functionIFvvEED1Ev>
		timer_13.execute_every([](){
 800e6d6:	f107 0310 	add.w	r3, r7, #16
 800e6da:	4621      	mov	r1, r4
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f001 fedd 	bl	801049c <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>
 800e6e2:	f107 0110 	add.w	r1, r7, #16
 800e6e6:	2302      	movs	r3, #2
 800e6e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e6ec:	4806      	ldr	r0, [pc, #24]	; (800e708 <_ZN8TUDTests5setupEv+0x5c>)
 800e6ee:	f7ff f8f9 	bl	800d8e4 <_ZN5Timer13execute_everyESt8functionIFvvEEmNS_5UNITSE>
 800e6f2:	f107 0310 	add.w	r3, r7, #16
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f7fe fff8 	bl	800d6ec <_ZNSt8functionIFvvEED1Ev>
	}
 800e6fc:	bf00      	nop
 800e6fe:	3720      	adds	r7, #32
 800e700:	46bd      	mov	sp, r7
 800e702:	bdb0      	pop	{r4, r5, r7, pc}
 800e704:	2400098c 	.word	0x2400098c
 800e708:	240009ac 	.word	0x240009ac

0800e70c <_ZN8TUDTests4loopEv>:

	static void loop() {
 800e70c:	b480      	push	{r7}
 800e70e:	af00      	add	r7, sp, #0
//		HAL_Delay(2000);
//
//		for(auto base : DigitalOut::all_digital_outs)
//			base->turn_low();
//		HAL_Delay(2000);
	}
 800e710:	bf00      	nop
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800e71e:	f006 fd65 	bl	80151ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800e722:	f000 f82f 	bl	800e784 <_Z18SystemClock_Configv>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800e726:	f000 f8b5 	bl	800e894 <_Z24PeriphCommonClock_Configv>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800e72a:	f001 fa1b 	bl	800fb64 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 800e72e:	f001 f9f9 	bl	800fb24 <_ZL11MX_DMA_Initv>
  MX_TIM12_Init();
 800e732:	f000 fef9 	bl	800f528 <_ZL13MX_TIM12_Initv>
  MX_TIM23_Init();
 800e736:	f001 f875 	bl	800f824 <_ZL13MX_TIM23_Initv>
  MX_TIM1_Init();
 800e73a:	f000 f9d5 	bl	800eae8 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 800e73e:	f000 fa93 	bl	800ec68 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 800e742:	f000 fb4f 	bl	800ede4 <_ZL12MX_TIM3_Initv>
  MX_TIM24_Init();
 800e746:	f001 f92d 	bl	800f9a4 <_ZL13MX_TIM24_Initv>
  MX_FDCAN1_Init();
 800e74a:	f000 f963 	bl	800ea14 <_ZL14MX_FDCAN1_Initv>
  MX_TIM4_Init();
 800e74e:	f000 fc03 	bl	800ef58 <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 800e752:	f000 f8d7 	bl	800e904 <_ZL12MX_ADC1_Initv>
  MX_TIM8_Init();
 800e756:	f000 fde9 	bl	800f32c <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 800e75a:	f000 fd67 	bl	800f22c <_ZL12MX_TIM6_Initv>
  MX_TIM5_Init();
 800e75e:	f000 fcb5 	bl	800f0cc <_ZL12MX_TIM5_Initv>
  MX_TIM7_Init();
 800e762:	f000 fda3 	bl	800f2ac <_ZL12MX_TIM7_Initv>
  MX_TIM13_Init();
 800e766:	f000 ff55 	bl	800f614 <_ZL13MX_TIM13_Initv>
  MX_TIM14_Init();
 800e76a:	f000 ff7b 	bl	800f664 <_ZL13MX_TIM14_Initv>
  MX_TIM15_Init();
 800e76e:	f000 ffa1 	bl	800f6b4 <_ZL13MX_TIM15_Initv>
  MX_TIM16_Init();
 800e772:	f000 ffff 	bl	800f774 <_ZL13MX_TIM16_Initv>
  MX_TIM17_Init();
 800e776:	f001 f829 	bl	800f7cc <_ZL13MX_TIM17_Initv>
  /* USER CODE BEGIN 2 */

  TUDTests::setup();
 800e77a:	f7ff ff97 	bl	800e6ac <_ZN8TUDTests5setupEv>
  /* USER CODE BEGIN WHILE */

  while (1)
  {

		TUDTests::loop();
 800e77e:	f7ff ffc5 	bl	800e70c <_ZN8TUDTests4loopEv>
 800e782:	e7fc      	b.n	800e77e <main+0x64>

0800e784 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800e784:	b580      	push	{r7, lr}
 800e786:	b09c      	sub	sp, #112	; 0x70
 800e788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800e78a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e78e:	224c      	movs	r2, #76	; 0x4c
 800e790:	2100      	movs	r1, #0
 800e792:	4618      	mov	r0, r3
 800e794:	f012 f82e 	bl	80207f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800e798:	1d3b      	adds	r3, r7, #4
 800e79a:	2220      	movs	r2, #32
 800e79c:	2100      	movs	r1, #0
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f012 f828 	bl	80207f4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800e7a4:	2002      	movs	r0, #2
 800e7a6:	f00c fb9b 	bl	801aee0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800e7aa:	2300      	movs	r3, #0
 800e7ac:	603b      	str	r3, [r7, #0]
 800e7ae:	4b37      	ldr	r3, [pc, #220]	; (800e88c <_Z18SystemClock_Configv+0x108>)
 800e7b0:	699b      	ldr	r3, [r3, #24]
 800e7b2:	4a36      	ldr	r2, [pc, #216]	; (800e88c <_Z18SystemClock_Configv+0x108>)
 800e7b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800e7b8:	6193      	str	r3, [r2, #24]
 800e7ba:	4b34      	ldr	r3, [pc, #208]	; (800e88c <_Z18SystemClock_Configv+0x108>)
 800e7bc:	699b      	ldr	r3, [r3, #24]
 800e7be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e7c2:	603b      	str	r3, [r7, #0]
 800e7c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800e7c6:	4b31      	ldr	r3, [pc, #196]	; (800e88c <_Z18SystemClock_Configv+0x108>)
 800e7c8:	699b      	ldr	r3, [r3, #24]
 800e7ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e7d2:	bf14      	ite	ne
 800e7d4:	2301      	movne	r3, #1
 800e7d6:	2300      	moveq	r3, #0
 800e7d8:	b2db      	uxtb	r3, r3
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d000      	beq.n	800e7e0 <_Z18SystemClock_Configv+0x5c>
 800e7de:	e7f2      	b.n	800e7c6 <_Z18SystemClock_Configv+0x42>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800e7e0:	4b2b      	ldr	r3, [pc, #172]	; (800e890 <_Z18SystemClock_Configv+0x10c>)
 800e7e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e4:	f023 0303 	bic.w	r3, r3, #3
 800e7e8:	4a29      	ldr	r2, [pc, #164]	; (800e890 <_Z18SystemClock_Configv+0x10c>)
 800e7ea:	f043 0302 	orr.w	r3, r3, #2
 800e7ee:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800e7f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800e7f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800e7fe:	2302      	movs	r3, #2
 800e800:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800e802:	2304      	movs	r3, #4
 800e804:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 800e806:	f240 1313 	movw	r3, #275	; 0x113
 800e80a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 800e80c:	2301      	movs	r3, #1
 800e80e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800e810:	2304      	movs	r3, #4
 800e812:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800e814:	2302      	movs	r3, #2
 800e816:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 800e818:	2304      	movs	r3, #4
 800e81a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800e81c:	2300      	movs	r3, #0
 800e81e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800e820:	2300      	movs	r3, #0
 800e822:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800e824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e828:	4618      	mov	r0, r3
 800e82a:	f00c fb93 	bl	801af54 <HAL_RCC_OscConfig>
 800e82e:	4603      	mov	r3, r0
 800e830:	2b00      	cmp	r3, #0
 800e832:	bf14      	ite	ne
 800e834:	2301      	movne	r3, #1
 800e836:	2300      	moveq	r3, #0
 800e838:	b2db      	uxtb	r3, r3
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d001      	beq.n	800e842 <_Z18SystemClock_Configv+0xbe>
  {
    Error_Handler();
 800e83e:	f001 facd 	bl	800fddc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800e842:	233f      	movs	r3, #63	; 0x3f
 800e844:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800e846:	2303      	movs	r3, #3
 800e848:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800e84a:	2300      	movs	r3, #0
 800e84c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800e84e:	2308      	movs	r3, #8
 800e850:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800e852:	2340      	movs	r3, #64	; 0x40
 800e854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800e856:	2340      	movs	r3, #64	; 0x40
 800e858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800e85a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e85e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800e860:	2340      	movs	r3, #64	; 0x40
 800e862:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800e864:	1d3b      	adds	r3, r7, #4
 800e866:	2103      	movs	r1, #3
 800e868:	4618      	mov	r0, r3
 800e86a:	f00c ff4d 	bl	801b708 <HAL_RCC_ClockConfig>
 800e86e:	4603      	mov	r3, r0
 800e870:	2b00      	cmp	r3, #0
 800e872:	bf14      	ite	ne
 800e874:	2301      	movne	r3, #1
 800e876:	2300      	moveq	r3, #0
 800e878:	b2db      	uxtb	r3, r3
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800e87e:	f001 faad 	bl	800fddc <Error_Handler>
  }
}
 800e882:	bf00      	nop
 800e884:	3770      	adds	r7, #112	; 0x70
 800e886:	46bd      	mov	sp, r7
 800e888:	bd80      	pop	{r7, pc}
 800e88a:	bf00      	nop
 800e88c:	58024800 	.word	0x58024800
 800e890:	58024400 	.word	0x58024400

0800e894 <_Z24PeriphCommonClock_Configv>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b0ae      	sub	sp, #184	; 0xb8
 800e898:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e89a:	463b      	mov	r3, r7
 800e89c:	22b8      	movs	r2, #184	; 0xb8
 800e89e:	2100      	movs	r1, #0
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f011 ffa7 	bl	80207f4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_FDCAN;
 800e8a6:	f44f 2208 	mov.w	r2, #557056	; 0x88000
 800e8aa:	f04f 0300 	mov.w	r3, #0
 800e8ae:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 1;
 800e8b2:	2301      	movs	r3, #1
 800e8b4:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 30;
 800e8b6:	231e      	movs	r3, #30
 800e8b8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 4;
 800e8ba:	2304      	movs	r3, #4
 800e8bc:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800e8be:	2304      	movs	r3, #4
 800e8c0:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800e8c2:	2302      	movs	r3, #2
 800e8c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800e8c6:	23c0      	movs	r3, #192	; 0xc0
 800e8c8:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL2;
 800e8d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800e8d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e8de:	463b      	mov	r3, r7
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	f00d fa87 	bl	801bdf4 <HAL_RCCEx_PeriphCLKConfig>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	bf14      	ite	ne
 800e8ec:	2301      	movne	r3, #1
 800e8ee:	2300      	moveq	r3, #0
 800e8f0:	b2db      	uxtb	r3, r3
 800e8f2:	2b00      	cmp	r3, #0
 800e8f4:	d001      	beq.n	800e8fa <_Z24PeriphCommonClock_Configv+0x66>
  {
    Error_Handler();
 800e8f6:	f001 fa71 	bl	800fddc <Error_Handler>
  }
}
 800e8fa:	bf00      	nop
 800e8fc:	37b8      	adds	r7, #184	; 0xb8
 800e8fe:	46bd      	mov	sp, r7
 800e900:	bd80      	pop	{r7, pc}
	...

0800e904 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800e904:	b580      	push	{r7, lr}
 800e906:	b08c      	sub	sp, #48	; 0x30
 800e908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800e90a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e90e:	2200      	movs	r2, #0
 800e910:	601a      	str	r2, [r3, #0]
 800e912:	605a      	str	r2, [r3, #4]
 800e914:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800e916:	463b      	mov	r3, r7
 800e918:	2224      	movs	r2, #36	; 0x24
 800e91a:	2100      	movs	r1, #0
 800e91c:	4618      	mov	r0, r3
 800e91e:	f011 ff69 	bl	80207f4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800e922:	4b39      	ldr	r3, [pc, #228]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e924:	4a39      	ldr	r2, [pc, #228]	; (800ea0c <_ZL12MX_ADC1_Initv+0x108>)
 800e926:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800e928:	4b37      	ldr	r3, [pc, #220]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e92a:	2200      	movs	r2, #0
 800e92c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 800e92e:	4b36      	ldr	r3, [pc, #216]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e930:	2200      	movs	r2, #0
 800e932:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800e934:	4b34      	ldr	r3, [pc, #208]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e936:	2200      	movs	r2, #0
 800e938:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800e93a:	4b33      	ldr	r3, [pc, #204]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e93c:	2208      	movs	r2, #8
 800e93e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800e940:	4b31      	ldr	r3, [pc, #196]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e942:	2200      	movs	r2, #0
 800e944:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800e946:	4b30      	ldr	r3, [pc, #192]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e948:	2200      	movs	r2, #0
 800e94a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800e94c:	4b2e      	ldr	r3, [pc, #184]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e94e:	2201      	movs	r2, #1
 800e950:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800e952:	4b2d      	ldr	r3, [pc, #180]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e954:	2200      	movs	r2, #0
 800e956:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T6_TRGO;
 800e95a:	4b2b      	ldr	r3, [pc, #172]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e95c:	f44f 62b4 	mov.w	r2, #1440	; 0x5a0
 800e960:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800e962:	4b29      	ldr	r3, [pc, #164]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800e968:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800e96a:	4b27      	ldr	r3, [pc, #156]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e96c:	2203      	movs	r2, #3
 800e96e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800e970:	4b25      	ldr	r3, [pc, #148]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e972:	2200      	movs	r2, #0
 800e974:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800e976:	4b24      	ldr	r3, [pc, #144]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e978:	2200      	movs	r2, #0
 800e97a:	641a      	str	r2, [r3, #64]	; 0x40
  hadc1.Init.OversamplingMode = DISABLE;
 800e97c:	4b22      	ldr	r3, [pc, #136]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e97e:	2200      	movs	r2, #0
 800e980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800e984:	4820      	ldr	r0, [pc, #128]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e986:	f006 ffaf 	bl	80158e8 <HAL_ADC_Init>
 800e98a:	4603      	mov	r3, r0
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	bf14      	ite	ne
 800e990:	2301      	movne	r3, #1
 800e992:	2300      	moveq	r3, #0
 800e994:	b2db      	uxtb	r3, r3
 800e996:	2b00      	cmp	r3, #0
 800e998:	d001      	beq.n	800e99e <_ZL12MX_ADC1_Initv+0x9a>
  {
    Error_Handler();
 800e99a:	f001 fa1f 	bl	800fddc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800e99e:	2300      	movs	r3, #0
 800e9a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800e9a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e9a6:	4619      	mov	r1, r3
 800e9a8:	4817      	ldr	r0, [pc, #92]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e9aa:	f008 fc69 	bl	8017280 <HAL_ADCEx_MultiModeConfigChannel>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	bf14      	ite	ne
 800e9b4:	2301      	movne	r3, #1
 800e9b6:	2300      	moveq	r3, #0
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	d001      	beq.n	800e9c2 <_ZL12MX_ADC1_Initv+0xbe>
  {
    Error_Handler();
 800e9be:	f001 fa0d 	bl	800fddc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800e9c2:	4b13      	ldr	r3, [pc, #76]	; (800ea10 <_ZL12MX_ADC1_Initv+0x10c>)
 800e9c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800e9c6:	2306      	movs	r3, #6
 800e9c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800e9ce:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800e9d2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800e9d4:	2304      	movs	r3, #4
 800e9d6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800e9d8:	2300      	movs	r3, #0
 800e9da:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 800e9dc:	2300      	movs	r3, #0
 800e9de:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4808      	ldr	r0, [pc, #32]	; (800ea08 <_ZL12MX_ADC1_Initv+0x104>)
 800e9e8:	f007 fcba 	bl	8016360 <HAL_ADC_ConfigChannel>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	bf14      	ite	ne
 800e9f2:	2301      	movne	r3, #1
 800e9f4:	2300      	moveq	r3, #0
 800e9f6:	b2db      	uxtb	r3, r3
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d001      	beq.n	800ea00 <_ZL12MX_ADC1_Initv+0xfc>
  {
    Error_Handler();
 800e9fc:	f001 f9ee 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800ea00:	bf00      	nop
 800ea02:	3730      	adds	r7, #48	; 0x30
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}
 800ea08:	24000cb4 	.word	0x24000cb4
 800ea0c:	40022000 	.word	0x40022000
 800ea10:	0c900008 	.word	0x0c900008

0800ea14 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800ea14:	b580      	push	{r7, lr}
 800ea16:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800ea18:	4b31      	ldr	r3, [pc, #196]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea1a:	4a32      	ldr	r2, [pc, #200]	; (800eae4 <_ZL14MX_FDCAN1_Initv+0xd0>)
 800ea1c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800ea1e:	4b30      	ldr	r3, [pc, #192]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea20:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ea24:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800ea26:	4b2e      	ldr	r3, [pc, #184]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea28:	2200      	movs	r2, #0
 800ea2a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800ea2c:	4b2c      	ldr	r3, [pc, #176]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea2e:	2200      	movs	r2, #0
 800ea30:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800ea32:	4b2b      	ldr	r3, [pc, #172]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea34:	2200      	movs	r2, #0
 800ea36:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800ea38:	4b29      	ldr	r3, [pc, #164]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea3a:	2200      	movs	r2, #0
 800ea3c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 800ea3e:	4b28      	ldr	r3, [pc, #160]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea40:	2203      	movs	r2, #3
 800ea42:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 2;
 800ea44:	4b26      	ldr	r3, [pc, #152]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea46:	2202      	movs	r2, #2
 800ea48:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 800ea4a:	4b25      	ldr	r3, [pc, #148]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea4c:	220f      	movs	r2, #15
 800ea4e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 800ea50:	4b23      	ldr	r3, [pc, #140]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea52:	2204      	movs	r2, #4
 800ea54:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 3;
 800ea56:	4b22      	ldr	r3, [pc, #136]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea58:	2203      	movs	r2, #3
 800ea5a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800ea5c:	4b20      	ldr	r3, [pc, #128]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea5e:	2201      	movs	r2, #1
 800ea60:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 800ea62:	4b1f      	ldr	r3, [pc, #124]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea64:	2203      	movs	r2, #3
 800ea66:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800ea68:	4b1d      	ldr	r3, [pc, #116]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea6a:	2201      	movs	r2, #1
 800ea6c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800ea6e:	4b1c      	ldr	r3, [pc, #112]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea70:	2200      	movs	r2, #0
 800ea72:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800ea74:	4b1a      	ldr	r3, [pc, #104]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea76:	2200      	movs	r2, #0
 800ea78:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800ea7a:	4b19      	ldr	r3, [pc, #100]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 32;
 800ea80:	4b17      	ldr	r3, [pc, #92]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea82:	2220      	movs	r2, #32
 800ea84:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800ea86:	4b16      	ldr	r3, [pc, #88]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea88:	2212      	movs	r2, #18
 800ea8a:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800ea8c:	4b14      	ldr	r3, [pc, #80]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea8e:	2200      	movs	r2, #0
 800ea90:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800ea92:	4b13      	ldr	r3, [pc, #76]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea94:	2204      	movs	r2, #4
 800ea96:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800ea98:	4b11      	ldr	r3, [pc, #68]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800ea9e:	4b10      	ldr	r3, [pc, #64]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaa0:	2204      	movs	r2, #4
 800eaa2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800eaa4:	4b0e      	ldr	r3, [pc, #56]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800eaaa:	4b0d      	ldr	r3, [pc, #52]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eaac:	2200      	movs	r2, #0
 800eaae:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 32;
 800eab0:	4b0b      	ldr	r3, [pc, #44]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eab2:	2220      	movs	r2, #32
 800eab4:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800eab6:	4b0a      	ldr	r3, [pc, #40]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eab8:	2200      	movs	r2, #0
 800eaba:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_64;
 800eabc:	4b08      	ldr	r3, [pc, #32]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eabe:	2212      	movs	r2, #18
 800eac0:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800eac2:	4807      	ldr	r0, [pc, #28]	; (800eae0 <_ZL14MX_FDCAN1_Initv+0xcc>)
 800eac4:	f00a febe 	bl	8019844 <HAL_FDCAN_Init>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	bf14      	ite	ne
 800eace:	2301      	movne	r3, #1
 800ead0:	2300      	moveq	r3, #0
 800ead2:	b2db      	uxtb	r3, r3
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d001      	beq.n	800eadc <_ZL14MX_FDCAN1_Initv+0xc8>
  {
    Error_Handler();
 800ead8:	f001 f980 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800eadc:	bf00      	nop
 800eade:	bd80      	pop	{r7, pc}
 800eae0:	24000d9c 	.word	0x24000d9c
 800eae4:	4000a000 	.word	0x4000a000

0800eae8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b08c      	sub	sp, #48	; 0x30
 800eaec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800eaee:	f107 0320 	add.w	r3, r7, #32
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	601a      	str	r2, [r3, #0]
 800eaf6:	605a      	str	r2, [r3, #4]
 800eaf8:	609a      	str	r2, [r3, #8]
 800eafa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800eafc:	f107 0314 	add.w	r3, r7, #20
 800eb00:	2200      	movs	r2, #0
 800eb02:	601a      	str	r2, [r3, #0]
 800eb04:	605a      	str	r2, [r3, #4]
 800eb06:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800eb08:	1d3b      	adds	r3, r7, #4
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	601a      	str	r2, [r3, #0]
 800eb0e:	605a      	str	r2, [r3, #4]
 800eb10:	609a      	str	r2, [r3, #8]
 800eb12:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800eb14:	4b52      	ldr	r3, [pc, #328]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb16:	4a53      	ldr	r2, [pc, #332]	; (800ec64 <_ZL12MX_TIM1_Initv+0x17c>)
 800eb18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800eb1a:	4b51      	ldr	r3, [pc, #324]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb1c:	2200      	movs	r2, #0
 800eb1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eb20:	4b4f      	ldr	r3, [pc, #316]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb22:	2200      	movs	r2, #0
 800eb24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 27500 - 1;
 800eb26:	4b4e      	ldr	r3, [pc, #312]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb28:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800eb2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800eb2e:	4b4c      	ldr	r3, [pc, #304]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb30:	2200      	movs	r2, #0
 800eb32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800eb34:	4b4a      	ldr	r3, [pc, #296]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb36:	2200      	movs	r2, #0
 800eb38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800eb3a:	4b49      	ldr	r3, [pc, #292]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800eb40:	4847      	ldr	r0, [pc, #284]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb42:	f00f fd3d 	bl	801e5c0 <HAL_TIM_Base_Init>
 800eb46:	4603      	mov	r3, r0
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	bf14      	ite	ne
 800eb4c:	2301      	movne	r3, #1
 800eb4e:	2300      	moveq	r3, #0
 800eb50:	b2db      	uxtb	r3, r3
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d001      	beq.n	800eb5a <_ZL12MX_TIM1_Initv+0x72>
  {
    Error_Handler();
 800eb56:	f001 f941 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800eb5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800eb5e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800eb60:	f107 0320 	add.w	r3, r7, #32
 800eb64:	4619      	mov	r1, r3
 800eb66:	483e      	ldr	r0, [pc, #248]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb68:	f010 fcc2 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	bf14      	ite	ne
 800eb72:	2301      	movne	r3, #1
 800eb74:	2300      	moveq	r3, #0
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d001      	beq.n	800eb80 <_ZL12MX_TIM1_Initv+0x98>
  {
    Error_Handler();
 800eb7c:	f001 f92e 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800eb80:	4837      	ldr	r0, [pc, #220]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800eb82:	f010 f825 	bl	801ebd0 <HAL_TIM_IC_Init>
 800eb86:	4603      	mov	r3, r0
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	bf14      	ite	ne
 800eb8c:	2301      	movne	r3, #1
 800eb8e:	2300      	moveq	r3, #0
 800eb90:	b2db      	uxtb	r3, r3
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	d001      	beq.n	800eb9a <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 800eb96:	f001 f921 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800eb9e:	2300      	movs	r3, #0
 800eba0:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800eba2:	2300      	movs	r3, #0
 800eba4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800eba6:	f107 0314 	add.w	r3, r7, #20
 800ebaa:	4619      	mov	r1, r3
 800ebac:	482c      	ldr	r0, [pc, #176]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800ebae:	f011 fb6f 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	bf14      	ite	ne
 800ebb8:	2301      	movne	r3, #1
 800ebba:	2300      	moveq	r3, #0
 800ebbc:	b2db      	uxtb	r3, r3
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d001      	beq.n	800ebc6 <_ZL12MX_TIM1_Initv+0xde>
  {
    Error_Handler();
 800ebc2:	f001 f90b 	bl	800fddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ebc6:	230a      	movs	r3, #10
 800ebc8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ebca:	2301      	movs	r3, #1
 800ebcc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ebd6:	1d3b      	adds	r3, r7, #4
 800ebd8:	2200      	movs	r2, #0
 800ebda:	4619      	mov	r1, r3
 800ebdc:	4820      	ldr	r0, [pc, #128]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800ebde:	f010 fad6 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800ebe2:	4603      	mov	r3, r0
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	bf14      	ite	ne
 800ebe8:	2301      	movne	r3, #1
 800ebea:	2300      	moveq	r3, #0
 800ebec:	b2db      	uxtb	r3, r3
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d001      	beq.n	800ebf6 <_ZL12MX_TIM1_Initv+0x10e>
  {
    Error_Handler();
 800ebf2:	f001 f8f3 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ebf6:	1d3b      	adds	r3, r7, #4
 800ebf8:	2204      	movs	r2, #4
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	4818      	ldr	r0, [pc, #96]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800ebfe:	f010 fac6 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	bf14      	ite	ne
 800ec08:	2301      	movne	r3, #1
 800ec0a:	2300      	moveq	r3, #0
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d001      	beq.n	800ec16 <_ZL12MX_TIM1_Initv+0x12e>
  {
    Error_Handler();
 800ec12:	f001 f8e3 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ec16:	1d3b      	adds	r3, r7, #4
 800ec18:	2208      	movs	r2, #8
 800ec1a:	4619      	mov	r1, r3
 800ec1c:	4810      	ldr	r0, [pc, #64]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800ec1e:	f010 fab6 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	bf14      	ite	ne
 800ec28:	2301      	movne	r3, #1
 800ec2a:	2300      	moveq	r3, #0
 800ec2c:	b2db      	uxtb	r3, r3
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d001      	beq.n	800ec36 <_ZL12MX_TIM1_Initv+0x14e>
  {
    Error_Handler();
 800ec32:	f001 f8d3 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800ec36:	1d3b      	adds	r3, r7, #4
 800ec38:	220c      	movs	r2, #12
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	4808      	ldr	r0, [pc, #32]	; (800ec60 <_ZL12MX_TIM1_Initv+0x178>)
 800ec3e:	f010 faa6 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800ec42:	4603      	mov	r3, r0
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	bf14      	ite	ne
 800ec48:	2301      	movne	r3, #1
 800ec4a:	2300      	moveq	r3, #0
 800ec4c:	b2db      	uxtb	r3, r3
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d001      	beq.n	800ec56 <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 800ec52:	f001 f8c3 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800ec56:	bf00      	nop
 800ec58:	3730      	adds	r7, #48	; 0x30
 800ec5a:	46bd      	mov	sp, r7
 800ec5c:	bd80      	pop	{r7, pc}
 800ec5e:	bf00      	nop
 800ec60:	24000e3c 	.word	0x24000e3c
 800ec64:	40010000 	.word	0x40010000

0800ec68 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08c      	sub	sp, #48	; 0x30
 800ec6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ec6e:	f107 0320 	add.w	r3, r7, #32
 800ec72:	2200      	movs	r2, #0
 800ec74:	601a      	str	r2, [r3, #0]
 800ec76:	605a      	str	r2, [r3, #4]
 800ec78:	609a      	str	r2, [r3, #8]
 800ec7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ec7c:	f107 0314 	add.w	r3, r7, #20
 800ec80:	2200      	movs	r2, #0
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	605a      	str	r2, [r3, #4]
 800ec86:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ec88:	1d3b      	adds	r3, r7, #4
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	601a      	str	r2, [r3, #0]
 800ec8e:	605a      	str	r2, [r3, #4]
 800ec90:	609a      	str	r2, [r3, #8]
 800ec92:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800ec94:	4b52      	ldr	r3, [pc, #328]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ec96:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800ec9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800ec9c:	4b50      	ldr	r3, [pc, #320]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ec9e:	2200      	movs	r2, #0
 800eca0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800eca2:	4b4f      	ldr	r3, [pc, #316]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800eca4:	2200      	movs	r2, #0
 800eca6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800eca8:	4b4d      	ldr	r3, [pc, #308]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ecaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ecb0:	4b4b      	ldr	r3, [pc, #300]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ecb6:	4b4a      	ldr	r3, [pc, #296]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ecb8:	2200      	movs	r2, #0
 800ecba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800ecbc:	4848      	ldr	r0, [pc, #288]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ecbe:	f00f fc7f 	bl	801e5c0 <HAL_TIM_Base_Init>
 800ecc2:	4603      	mov	r3, r0
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	bf14      	ite	ne
 800ecc8:	2301      	movne	r3, #1
 800ecca:	2300      	moveq	r3, #0
 800eccc:	b2db      	uxtb	r3, r3
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <_ZL12MX_TIM2_Initv+0x6e>
  {
    Error_Handler();
 800ecd2:	f001 f883 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ecd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ecda:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ecdc:	f107 0320 	add.w	r3, r7, #32
 800ece0:	4619      	mov	r1, r3
 800ece2:	483f      	ldr	r0, [pc, #252]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ece4:	f010 fc04 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800ece8:	4603      	mov	r3, r0
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	bf14      	ite	ne
 800ecee:	2301      	movne	r3, #1
 800ecf0:	2300      	moveq	r3, #0
 800ecf2:	b2db      	uxtb	r3, r3
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d001      	beq.n	800ecfc <_ZL12MX_TIM2_Initv+0x94>
  {
    Error_Handler();
 800ecf8:	f001 f870 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800ecfc:	4838      	ldr	r0, [pc, #224]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ecfe:	f00f ff67 	bl	801ebd0 <HAL_TIM_IC_Init>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	bf14      	ite	ne
 800ed08:	2301      	movne	r3, #1
 800ed0a:	2300      	moveq	r3, #0
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d001      	beq.n	800ed16 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 800ed12:	f001 f863 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ed16:	2300      	movs	r3, #0
 800ed18:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ed1e:	f107 0314 	add.w	r3, r7, #20
 800ed22:	4619      	mov	r1, r3
 800ed24:	482e      	ldr	r0, [pc, #184]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ed26:	f011 fab3 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	bf14      	ite	ne
 800ed30:	2301      	movne	r3, #1
 800ed32:	2300      	moveq	r3, #0
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <_ZL12MX_TIM2_Initv+0xd6>
  {
    Error_Handler();
 800ed3a:	f001 f84f 	bl	800fddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ed3e:	230a      	movs	r3, #10
 800ed40:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ed42:	2301      	movs	r3, #1
 800ed44:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ed46:	2300      	movs	r3, #0
 800ed48:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ed4e:	1d3b      	adds	r3, r7, #4
 800ed50:	2200      	movs	r2, #0
 800ed52:	4619      	mov	r1, r3
 800ed54:	4822      	ldr	r0, [pc, #136]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ed56:	f010 fa1a 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800ed5a:	4603      	mov	r3, r0
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	bf14      	ite	ne
 800ed60:	2301      	movne	r3, #1
 800ed62:	2300      	moveq	r3, #0
 800ed64:	b2db      	uxtb	r3, r3
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d001      	beq.n	800ed6e <_ZL12MX_TIM2_Initv+0x106>
  {
    Error_Handler();
 800ed6a:	f001 f837 	bl	800fddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ed6e:	2300      	movs	r3, #0
 800ed70:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800ed72:	1d3b      	adds	r3, r7, #4
 800ed74:	2204      	movs	r2, #4
 800ed76:	4619      	mov	r1, r3
 800ed78:	4819      	ldr	r0, [pc, #100]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ed7a:	f010 fa08 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800ed7e:	4603      	mov	r3, r0
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	bf14      	ite	ne
 800ed84:	2301      	movne	r3, #1
 800ed86:	2300      	moveq	r3, #0
 800ed88:	b2db      	uxtb	r3, r3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <_ZL12MX_TIM2_Initv+0x12a>
  {
    Error_Handler();
 800ed8e:	f001 f825 	bl	800fddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800ed92:	230a      	movs	r3, #10
 800ed94:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ed96:	1d3b      	adds	r3, r7, #4
 800ed98:	2208      	movs	r2, #8
 800ed9a:	4619      	mov	r1, r3
 800ed9c:	4810      	ldr	r0, [pc, #64]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800ed9e:	f010 f9f6 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800eda2:	4603      	mov	r3, r0
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	bf14      	ite	ne
 800eda8:	2301      	movne	r3, #1
 800edaa:	2300      	moveq	r3, #0
 800edac:	b2db      	uxtb	r3, r3
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d001      	beq.n	800edb6 <_ZL12MX_TIM2_Initv+0x14e>
  {
    Error_Handler();
 800edb2:	f001 f813 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800edb6:	1d3b      	adds	r3, r7, #4
 800edb8:	220c      	movs	r2, #12
 800edba:	4619      	mov	r1, r3
 800edbc:	4808      	ldr	r0, [pc, #32]	; (800ede0 <_ZL12MX_TIM2_Initv+0x178>)
 800edbe:	f010 f9e6 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	bf14      	ite	ne
 800edc8:	2301      	movne	r3, #1
 800edca:	2300      	moveq	r3, #0
 800edcc:	b2db      	uxtb	r3, r3
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d001      	beq.n	800edd6 <_ZL12MX_TIM2_Initv+0x16e>
  {
    Error_Handler();
 800edd2:	f001 f803 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800edd6:	bf00      	nop
 800edd8:	3730      	adds	r7, #48	; 0x30
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}
 800edde:	bf00      	nop
 800ede0:	24000e88 	.word	0x24000e88

0800ede4 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b08c      	sub	sp, #48	; 0x30
 800ede8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800edea:	f107 0320 	add.w	r3, r7, #32
 800edee:	2200      	movs	r2, #0
 800edf0:	601a      	str	r2, [r3, #0]
 800edf2:	605a      	str	r2, [r3, #4]
 800edf4:	609a      	str	r2, [r3, #8]
 800edf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800edf8:	f107 0314 	add.w	r3, r7, #20
 800edfc:	2200      	movs	r2, #0
 800edfe:	601a      	str	r2, [r3, #0]
 800ee00:	605a      	str	r2, [r3, #4]
 800ee02:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ee04:	1d3b      	adds	r3, r7, #4
 800ee06:	2200      	movs	r2, #0
 800ee08:	601a      	str	r2, [r3, #0]
 800ee0a:	605a      	str	r2, [r3, #4]
 800ee0c:	609a      	str	r2, [r3, #8]
 800ee0e:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800ee10:	4b4f      	ldr	r3, [pc, #316]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee12:	4a50      	ldr	r2, [pc, #320]	; (800ef54 <_ZL12MX_TIM3_Initv+0x170>)
 800ee14:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800ee16:	4b4e      	ldr	r3, [pc, #312]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ee1c:	4b4c      	ldr	r3, [pc, #304]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee1e:	2200      	movs	r2, #0
 800ee20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 27500 - 1;
 800ee22:	4b4b      	ldr	r3, [pc, #300]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee24:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800ee28:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ee2a:	4b49      	ldr	r3, [pc, #292]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ee30:	4b47      	ldr	r3, [pc, #284]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee32:	2200      	movs	r2, #0
 800ee34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800ee36:	4846      	ldr	r0, [pc, #280]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee38:	f00f fbc2 	bl	801e5c0 <HAL_TIM_Base_Init>
 800ee3c:	4603      	mov	r3, r0
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	bf14      	ite	ne
 800ee42:	2301      	movne	r3, #1
 800ee44:	2300      	moveq	r3, #0
 800ee46:	b2db      	uxtb	r3, r3
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <_ZL12MX_TIM3_Initv+0x6c>
  {
    Error_Handler();
 800ee4c:	f000 ffc6 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ee50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ee54:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800ee56:	f107 0320 	add.w	r3, r7, #32
 800ee5a:	4619      	mov	r1, r3
 800ee5c:	483c      	ldr	r0, [pc, #240]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee5e:	f010 fb47 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800ee62:	4603      	mov	r3, r0
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	bf14      	ite	ne
 800ee68:	2301      	movne	r3, #1
 800ee6a:	2300      	moveq	r3, #0
 800ee6c:	b2db      	uxtb	r3, r3
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d001      	beq.n	800ee76 <_ZL12MX_TIM3_Initv+0x92>
  {
    Error_Handler();
 800ee72:	f000 ffb3 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 800ee76:	4836      	ldr	r0, [pc, #216]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ee78:	f00f feaa 	bl	801ebd0 <HAL_TIM_IC_Init>
 800ee7c:	4603      	mov	r3, r0
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	bf14      	ite	ne
 800ee82:	2301      	movne	r3, #1
 800ee84:	2300      	moveq	r3, #0
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d001      	beq.n	800ee90 <_ZL12MX_TIM3_Initv+0xac>
  {
    Error_Handler();
 800ee8c:	f000 ffa6 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ee90:	2300      	movs	r3, #0
 800ee92:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ee94:	2300      	movs	r3, #0
 800ee96:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800ee98:	f107 0314 	add.w	r3, r7, #20
 800ee9c:	4619      	mov	r1, r3
 800ee9e:	482c      	ldr	r0, [pc, #176]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800eea0:	f011 f9f6 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800eea4:	4603      	mov	r3, r0
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	bf14      	ite	ne
 800eeaa:	2301      	movne	r3, #1
 800eeac:	2300      	moveq	r3, #0
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d001      	beq.n	800eeb8 <_ZL12MX_TIM3_Initv+0xd4>
  {
    Error_Handler();
 800eeb4:	f000 ff92 	bl	800fddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800eeb8:	230a      	movs	r3, #10
 800eeba:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800eebc:	2301      	movs	r3, #1
 800eebe:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800eec0:	2300      	movs	r3, #0
 800eec2:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800eec4:	2300      	movs	r3, #0
 800eec6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800eec8:	1d3b      	adds	r3, r7, #4
 800eeca:	2200      	movs	r2, #0
 800eecc:	4619      	mov	r1, r3
 800eece:	4820      	ldr	r0, [pc, #128]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800eed0:	f010 f95d 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	bf14      	ite	ne
 800eeda:	2301      	movne	r3, #1
 800eedc:	2300      	moveq	r3, #0
 800eede:	b2db      	uxtb	r3, r3
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d001      	beq.n	800eee8 <_ZL12MX_TIM3_Initv+0x104>
  {
    Error_Handler();
 800eee4:	f000 ff7a 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800eee8:	1d3b      	adds	r3, r7, #4
 800eeea:	2204      	movs	r2, #4
 800eeec:	4619      	mov	r1, r3
 800eeee:	4818      	ldr	r0, [pc, #96]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800eef0:	f010 f94d 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800eef4:	4603      	mov	r3, r0
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	bf14      	ite	ne
 800eefa:	2301      	movne	r3, #1
 800eefc:	2300      	moveq	r3, #0
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <_ZL12MX_TIM3_Initv+0x124>
  {
    Error_Handler();
 800ef04:	f000 ff6a 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800ef08:	1d3b      	adds	r3, r7, #4
 800ef0a:	2208      	movs	r2, #8
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	4810      	ldr	r0, [pc, #64]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ef10:	f010 f93d 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	bf14      	ite	ne
 800ef1a:	2301      	movne	r3, #1
 800ef1c:	2300      	moveq	r3, #0
 800ef1e:	b2db      	uxtb	r3, r3
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d001      	beq.n	800ef28 <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 800ef24:	f000 ff5a 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800ef28:	1d3b      	adds	r3, r7, #4
 800ef2a:	220c      	movs	r2, #12
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4808      	ldr	r0, [pc, #32]	; (800ef50 <_ZL12MX_TIM3_Initv+0x16c>)
 800ef30:	f010 f92d 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800ef34:	4603      	mov	r3, r0
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	bf14      	ite	ne
 800ef3a:	2301      	movne	r3, #1
 800ef3c:	2300      	moveq	r3, #0
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d001      	beq.n	800ef48 <_ZL12MX_TIM3_Initv+0x164>
  {
    Error_Handler();
 800ef44:	f000 ff4a 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800ef48:	bf00      	nop
 800ef4a:	3730      	adds	r7, #48	; 0x30
 800ef4c:	46bd      	mov	sp, r7
 800ef4e:	bd80      	pop	{r7, pc}
 800ef50:	24000ed4 	.word	0x24000ed4
 800ef54:	40000400 	.word	0x40000400

0800ef58 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b08c      	sub	sp, #48	; 0x30
 800ef5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ef5e:	f107 0320 	add.w	r3, r7, #32
 800ef62:	2200      	movs	r2, #0
 800ef64:	601a      	str	r2, [r3, #0]
 800ef66:	605a      	str	r2, [r3, #4]
 800ef68:	609a      	str	r2, [r3, #8]
 800ef6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ef6c:	f107 0314 	add.w	r3, r7, #20
 800ef70:	2200      	movs	r2, #0
 800ef72:	601a      	str	r2, [r3, #0]
 800ef74:	605a      	str	r2, [r3, #4]
 800ef76:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800ef78:	1d3b      	adds	r3, r7, #4
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	605a      	str	r2, [r3, #4]
 800ef80:	609a      	str	r2, [r3, #8]
 800ef82:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800ef84:	4b4f      	ldr	r3, [pc, #316]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef86:	4a50      	ldr	r2, [pc, #320]	; (800f0c8 <_ZL12MX_TIM4_Initv+0x170>)
 800ef88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800ef8a:	4b4e      	ldr	r3, [pc, #312]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ef90:	4b4c      	ldr	r3, [pc, #304]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 27500 - 1;
 800ef96:	4b4b      	ldr	r3, [pc, #300]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800ef98:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800ef9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ef9e:	4b49      	ldr	r3, [pc, #292]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800efa0:	2200      	movs	r2, #0
 800efa2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800efa4:	4b47      	ldr	r3, [pc, #284]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800efa6:	2200      	movs	r2, #0
 800efa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800efaa:	4846      	ldr	r0, [pc, #280]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800efac:	f00f fb08 	bl	801e5c0 <HAL_TIM_Base_Init>
 800efb0:	4603      	mov	r3, r0
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	bf14      	ite	ne
 800efb6:	2301      	movne	r3, #1
 800efb8:	2300      	moveq	r3, #0
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d001      	beq.n	800efc4 <_ZL12MX_TIM4_Initv+0x6c>
  {
    Error_Handler();
 800efc0:	f000 ff0c 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800efc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800efc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800efca:	f107 0320 	add.w	r3, r7, #32
 800efce:	4619      	mov	r1, r3
 800efd0:	483c      	ldr	r0, [pc, #240]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800efd2:	f010 fa8d 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800efd6:	4603      	mov	r3, r0
 800efd8:	2b00      	cmp	r3, #0
 800efda:	bf14      	ite	ne
 800efdc:	2301      	movne	r3, #1
 800efde:	2300      	moveq	r3, #0
 800efe0:	b2db      	uxtb	r3, r3
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d001      	beq.n	800efea <_ZL12MX_TIM4_Initv+0x92>
  {
    Error_Handler();
 800efe6:	f000 fef9 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800efea:	4836      	ldr	r0, [pc, #216]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800efec:	f00f fdf0 	bl	801ebd0 <HAL_TIM_IC_Init>
 800eff0:	4603      	mov	r3, r0
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	bf14      	ite	ne
 800eff6:	2301      	movne	r3, #1
 800eff8:	2300      	moveq	r3, #0
 800effa:	b2db      	uxtb	r3, r3
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 800f000:	f000 feec 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f004:	2300      	movs	r3, #0
 800f006:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f008:	2300      	movs	r3, #0
 800f00a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800f00c:	f107 0314 	add.w	r3, r7, #20
 800f010:	4619      	mov	r1, r3
 800f012:	482c      	ldr	r0, [pc, #176]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800f014:	f011 f93c 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800f018:	4603      	mov	r3, r0
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	bf14      	ite	ne
 800f01e:	2301      	movne	r3, #1
 800f020:	2300      	moveq	r3, #0
 800f022:	b2db      	uxtb	r3, r3
 800f024:	2b00      	cmp	r3, #0
 800f026:	d001      	beq.n	800f02c <_ZL12MX_TIM4_Initv+0xd4>
  {
    Error_Handler();
 800f028:	f000 fed8 	bl	800fddc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800f02c:	230a      	movs	r3, #10
 800f02e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800f030:	2301      	movs	r3, #1
 800f032:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800f034:	2300      	movs	r3, #0
 800f036:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800f038:	2300      	movs	r3, #0
 800f03a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800f03c:	1d3b      	adds	r3, r7, #4
 800f03e:	2200      	movs	r2, #0
 800f040:	4619      	mov	r1, r3
 800f042:	4820      	ldr	r0, [pc, #128]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800f044:	f010 f8a3 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800f048:	4603      	mov	r3, r0
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	bf14      	ite	ne
 800f04e:	2301      	movne	r3, #1
 800f050:	2300      	moveq	r3, #0
 800f052:	b2db      	uxtb	r3, r3
 800f054:	2b00      	cmp	r3, #0
 800f056:	d001      	beq.n	800f05c <_ZL12MX_TIM4_Initv+0x104>
  {
    Error_Handler();
 800f058:	f000 fec0 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800f05c:	1d3b      	adds	r3, r7, #4
 800f05e:	2204      	movs	r2, #4
 800f060:	4619      	mov	r1, r3
 800f062:	4818      	ldr	r0, [pc, #96]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800f064:	f010 f893 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800f068:	4603      	mov	r3, r0
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	bf14      	ite	ne
 800f06e:	2301      	movne	r3, #1
 800f070:	2300      	moveq	r3, #0
 800f072:	b2db      	uxtb	r3, r3
 800f074:	2b00      	cmp	r3, #0
 800f076:	d001      	beq.n	800f07c <_ZL12MX_TIM4_Initv+0x124>
  {
    Error_Handler();
 800f078:	f000 feb0 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 800f07c:	1d3b      	adds	r3, r7, #4
 800f07e:	2208      	movs	r2, #8
 800f080:	4619      	mov	r1, r3
 800f082:	4810      	ldr	r0, [pc, #64]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800f084:	f010 f883 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800f088:	4603      	mov	r3, r0
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	bf14      	ite	ne
 800f08e:	2301      	movne	r3, #1
 800f090:	2300      	moveq	r3, #0
 800f092:	b2db      	uxtb	r3, r3
 800f094:	2b00      	cmp	r3, #0
 800f096:	d001      	beq.n	800f09c <_ZL12MX_TIM4_Initv+0x144>
  {
    Error_Handler();
 800f098:	f000 fea0 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800f09c:	1d3b      	adds	r3, r7, #4
 800f09e:	220c      	movs	r2, #12
 800f0a0:	4619      	mov	r1, r3
 800f0a2:	4808      	ldr	r0, [pc, #32]	; (800f0c4 <_ZL12MX_TIM4_Initv+0x16c>)
 800f0a4:	f010 f873 	bl	801f18e <HAL_TIM_IC_ConfigChannel>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	bf14      	ite	ne
 800f0ae:	2301      	movne	r3, #1
 800f0b0:	2300      	moveq	r3, #0
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	d001      	beq.n	800f0bc <_ZL12MX_TIM4_Initv+0x164>
  {
    Error_Handler();
 800f0b8:	f000 fe90 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800f0bc:	bf00      	nop
 800f0be:	3730      	adds	r7, #48	; 0x30
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}
 800f0c4:	24000f20 	.word	0x24000f20
 800f0c8:	40000800 	.word	0x40000800

0800f0cc <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800f0cc:	b580      	push	{r7, lr}
 800f0ce:	b08e      	sub	sp, #56	; 0x38
 800f0d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f0d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	601a      	str	r2, [r3, #0]
 800f0da:	605a      	str	r2, [r3, #4]
 800f0dc:	609a      	str	r2, [r3, #8]
 800f0de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f0e0:	f107 031c 	add.w	r3, r7, #28
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	601a      	str	r2, [r3, #0]
 800f0e8:	605a      	str	r2, [r3, #4]
 800f0ea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f0ec:	463b      	mov	r3, r7
 800f0ee:	2200      	movs	r2, #0
 800f0f0:	601a      	str	r2, [r3, #0]
 800f0f2:	605a      	str	r2, [r3, #4]
 800f0f4:	609a      	str	r2, [r3, #8]
 800f0f6:	60da      	str	r2, [r3, #12]
 800f0f8:	611a      	str	r2, [r3, #16]
 800f0fa:	615a      	str	r2, [r3, #20]
 800f0fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800f0fe:	4b49      	ldr	r3, [pc, #292]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f100:	4a49      	ldr	r2, [pc, #292]	; (800f228 <_ZL12MX_TIM5_Initv+0x15c>)
 800f102:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800f104:	4b47      	ldr	r3, [pc, #284]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f106:	2200      	movs	r2, #0
 800f108:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f10a:	4b46      	ldr	r3, [pc, #280]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f10c:	2200      	movs	r2, #0
 800f10e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 27500 - 1;
 800f110:	4b44      	ldr	r3, [pc, #272]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f112:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f116:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f118:	4b42      	ldr	r3, [pc, #264]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f11e:	4b41      	ldr	r3, [pc, #260]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f120:	2200      	movs	r2, #0
 800f122:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800f124:	483f      	ldr	r0, [pc, #252]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f126:	f00f fa4b 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f12a:	4603      	mov	r3, r0
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	bf14      	ite	ne
 800f130:	2301      	movne	r3, #1
 800f132:	2300      	moveq	r3, #0
 800f134:	b2db      	uxtb	r3, r3
 800f136:	2b00      	cmp	r3, #0
 800f138:	d001      	beq.n	800f13e <_ZL12MX_TIM5_Initv+0x72>
  {
    Error_Handler();
 800f13a:	f000 fe4f 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f13e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f142:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800f144:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f148:	4619      	mov	r1, r3
 800f14a:	4836      	ldr	r0, [pc, #216]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f14c:	f010 f9d0 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800f150:	4603      	mov	r3, r0
 800f152:	2b00      	cmp	r3, #0
 800f154:	bf14      	ite	ne
 800f156:	2301      	movne	r3, #1
 800f158:	2300      	moveq	r3, #0
 800f15a:	b2db      	uxtb	r3, r3
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d001      	beq.n	800f164 <_ZL12MX_TIM5_Initv+0x98>
  {
    Error_Handler();
 800f160:	f000 fe3c 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800f164:	482f      	ldr	r0, [pc, #188]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f166:	f00f fbb6 	bl	801e8d6 <HAL_TIM_PWM_Init>
 800f16a:	4603      	mov	r3, r0
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	bf14      	ite	ne
 800f170:	2301      	movne	r3, #1
 800f172:	2300      	moveq	r3, #0
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b00      	cmp	r3, #0
 800f178:	d001      	beq.n	800f17e <_ZL12MX_TIM5_Initv+0xb2>
  {
    Error_Handler();
 800f17a:	f000 fe2f 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f17e:	2300      	movs	r3, #0
 800f180:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f182:	2300      	movs	r3, #0
 800f184:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800f186:	f107 031c 	add.w	r3, r7, #28
 800f18a:	4619      	mov	r1, r3
 800f18c:	4825      	ldr	r0, [pc, #148]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f18e:	f011 f87f 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	bf14      	ite	ne
 800f198:	2301      	movne	r3, #1
 800f19a:	2300      	moveq	r3, #0
 800f19c:	b2db      	uxtb	r3, r3
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d001      	beq.n	800f1a6 <_ZL12MX_TIM5_Initv+0xda>
  {
    Error_Handler();
 800f1a2:	f000 fe1b 	bl	800fddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f1a6:	2360      	movs	r3, #96	; 0x60
 800f1a8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f1ae:	2300      	movs	r3, #0
 800f1b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f1b6:	463b      	mov	r3, r7
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	4819      	ldr	r0, [pc, #100]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f1be:	f010 f883 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	bf14      	ite	ne
 800f1c8:	2301      	movne	r3, #1
 800f1ca:	2300      	moveq	r3, #0
 800f1cc:	b2db      	uxtb	r3, r3
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d001      	beq.n	800f1d6 <_ZL12MX_TIM5_Initv+0x10a>
  {
    Error_Handler();
 800f1d2:	f000 fe03 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f1d6:	463b      	mov	r3, r7
 800f1d8:	2208      	movs	r2, #8
 800f1da:	4619      	mov	r1, r3
 800f1dc:	4811      	ldr	r0, [pc, #68]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f1de:	f010 f873 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	bf14      	ite	ne
 800f1e8:	2301      	movne	r3, #1
 800f1ea:	2300      	moveq	r3, #0
 800f1ec:	b2db      	uxtb	r3, r3
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <_ZL12MX_TIM5_Initv+0x12a>
  {
    Error_Handler();
 800f1f2:	f000 fdf3 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f1f6:	463b      	mov	r3, r7
 800f1f8:	220c      	movs	r2, #12
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	4809      	ldr	r0, [pc, #36]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f1fe:	f010 f863 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	bf14      	ite	ne
 800f208:	2301      	movne	r3, #1
 800f20a:	2300      	moveq	r3, #0
 800f20c:	b2db      	uxtb	r3, r3
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d001      	beq.n	800f216 <_ZL12MX_TIM5_Initv+0x14a>
  {
    Error_Handler();
 800f212:	f000 fde3 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800f216:	4803      	ldr	r0, [pc, #12]	; (800f224 <_ZL12MX_TIM5_Initv+0x158>)
 800f218:	f005 fd22 	bl	8014c60 <HAL_TIM_MspPostInit>

}
 800f21c:	bf00      	nop
 800f21e:	3738      	adds	r7, #56	; 0x38
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}
 800f224:	24000f6c 	.word	0x24000f6c
 800f228:	40000c00 	.word	0x40000c00

0800f22c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f232:	1d3b      	adds	r3, r7, #4
 800f234:	2200      	movs	r2, #0
 800f236:	601a      	str	r2, [r3, #0]
 800f238:	605a      	str	r2, [r3, #4]
 800f23a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800f23c:	4b19      	ldr	r3, [pc, #100]	; (800f2a4 <_ZL12MX_TIM6_Initv+0x78>)
 800f23e:	4a1a      	ldr	r2, [pc, #104]	; (800f2a8 <_ZL12MX_TIM6_Initv+0x7c>)
 800f240:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 275 -1;
 800f242:	4b18      	ldr	r3, [pc, #96]	; (800f2a4 <_ZL12MX_TIM6_Initv+0x78>)
 800f244:	f44f 7289 	mov.w	r2, #274	; 0x112
 800f248:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f24a:	4b16      	ldr	r3, [pc, #88]	; (800f2a4 <_ZL12MX_TIM6_Initv+0x78>)
 800f24c:	2200      	movs	r2, #0
 800f24e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 200 - 1;
 800f250:	4b14      	ldr	r3, [pc, #80]	; (800f2a4 <_ZL12MX_TIM6_Initv+0x78>)
 800f252:	22c7      	movs	r2, #199	; 0xc7
 800f254:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f256:	4b13      	ldr	r3, [pc, #76]	; (800f2a4 <_ZL12MX_TIM6_Initv+0x78>)
 800f258:	2200      	movs	r2, #0
 800f25a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800f25c:	4811      	ldr	r0, [pc, #68]	; (800f2a4 <_ZL12MX_TIM6_Initv+0x78>)
 800f25e:	f00f f9af 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f262:	4603      	mov	r3, r0
 800f264:	2b00      	cmp	r3, #0
 800f266:	bf14      	ite	ne
 800f268:	2301      	movne	r3, #1
 800f26a:	2300      	moveq	r3, #0
 800f26c:	b2db      	uxtb	r3, r3
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d001      	beq.n	800f276 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800f272:	f000 fdb3 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800f276:	2320      	movs	r3, #32
 800f278:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f27a:	2300      	movs	r3, #0
 800f27c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800f27e:	1d3b      	adds	r3, r7, #4
 800f280:	4619      	mov	r1, r3
 800f282:	4808      	ldr	r0, [pc, #32]	; (800f2a4 <_ZL12MX_TIM6_Initv+0x78>)
 800f284:	f011 f804 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800f288:	4603      	mov	r3, r0
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	bf14      	ite	ne
 800f28e:	2301      	movne	r3, #1
 800f290:	2300      	moveq	r3, #0
 800f292:	b2db      	uxtb	r3, r3
 800f294:	2b00      	cmp	r3, #0
 800f296:	d001      	beq.n	800f29c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 800f298:	f000 fda0 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800f29c:	bf00      	nop
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	24000fb8 	.word	0x24000fb8
 800f2a8:	40001000 	.word	0x40001000

0800f2ac <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f2b2:	1d3b      	adds	r3, r7, #4
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	601a      	str	r2, [r3, #0]
 800f2b8:	605a      	str	r2, [r3, #4]
 800f2ba:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800f2bc:	4b19      	ldr	r3, [pc, #100]	; (800f324 <_ZL12MX_TIM7_Initv+0x78>)
 800f2be:	4a1a      	ldr	r2, [pc, #104]	; (800f328 <_ZL12MX_TIM7_Initv+0x7c>)
 800f2c0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800f2c2:	4b18      	ldr	r3, [pc, #96]	; (800f324 <_ZL12MX_TIM7_Initv+0x78>)
 800f2c4:	2200      	movs	r2, #0
 800f2c6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f2c8:	4b16      	ldr	r3, [pc, #88]	; (800f324 <_ZL12MX_TIM7_Initv+0x78>)
 800f2ca:	2200      	movs	r2, #0
 800f2cc:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 800f2ce:	4b15      	ldr	r3, [pc, #84]	; (800f324 <_ZL12MX_TIM7_Initv+0x78>)
 800f2d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f2d4:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f2d6:	4b13      	ldr	r3, [pc, #76]	; (800f324 <_ZL12MX_TIM7_Initv+0x78>)
 800f2d8:	2200      	movs	r2, #0
 800f2da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800f2dc:	4811      	ldr	r0, [pc, #68]	; (800f324 <_ZL12MX_TIM7_Initv+0x78>)
 800f2de:	f00f f96f 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	2b00      	cmp	r3, #0
 800f2e6:	bf14      	ite	ne
 800f2e8:	2301      	movne	r3, #1
 800f2ea:	2300      	moveq	r3, #0
 800f2ec:	b2db      	uxtb	r3, r3
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d001      	beq.n	800f2f6 <_ZL12MX_TIM7_Initv+0x4a>
  {
    Error_Handler();
 800f2f2:	f000 fd73 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800f2fe:	1d3b      	adds	r3, r7, #4
 800f300:	4619      	mov	r1, r3
 800f302:	4808      	ldr	r0, [pc, #32]	; (800f324 <_ZL12MX_TIM7_Initv+0x78>)
 800f304:	f010 ffc4 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	bf14      	ite	ne
 800f30e:	2301      	movne	r3, #1
 800f310:	2300      	moveq	r3, #0
 800f312:	b2db      	uxtb	r3, r3
 800f314:	2b00      	cmp	r3, #0
 800f316:	d001      	beq.n	800f31c <_ZL12MX_TIM7_Initv+0x70>
  {
    Error_Handler();
 800f318:	f000 fd60 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800f31c:	bf00      	nop
 800f31e:	3710      	adds	r7, #16
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	24001004 	.word	0x24001004
 800f328:	40001400 	.word	0x40001400

0800f32c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b09c      	sub	sp, #112	; 0x70
 800f330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f332:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f336:	2200      	movs	r2, #0
 800f338:	601a      	str	r2, [r3, #0]
 800f33a:	605a      	str	r2, [r3, #4]
 800f33c:	609a      	str	r2, [r3, #8]
 800f33e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f344:	2200      	movs	r2, #0
 800f346:	601a      	str	r2, [r3, #0]
 800f348:	605a      	str	r2, [r3, #4]
 800f34a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f34c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f350:	2200      	movs	r2, #0
 800f352:	601a      	str	r2, [r3, #0]
 800f354:	605a      	str	r2, [r3, #4]
 800f356:	609a      	str	r2, [r3, #8]
 800f358:	60da      	str	r2, [r3, #12]
 800f35a:	611a      	str	r2, [r3, #16]
 800f35c:	615a      	str	r2, [r3, #20]
 800f35e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800f360:	1d3b      	adds	r3, r7, #4
 800f362:	2234      	movs	r2, #52	; 0x34
 800f364:	2100      	movs	r1, #0
 800f366:	4618      	mov	r0, r3
 800f368:	f011 fa44 	bl	80207f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800f36c:	4b6c      	ldr	r3, [pc, #432]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f36e:	4a6d      	ldr	r2, [pc, #436]	; (800f524 <_ZL12MX_TIM8_Initv+0x1f8>)
 800f370:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800f372:	4b6b      	ldr	r3, [pc, #428]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f374:	2200      	movs	r2, #0
 800f376:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f378:	4b69      	ldr	r3, [pc, #420]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f37a:	2200      	movs	r2, #0
 800f37c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27500 - 1;
 800f37e:	4b68      	ldr	r3, [pc, #416]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f380:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f384:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f386:	4b66      	ldr	r3, [pc, #408]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f388:	2200      	movs	r2, #0
 800f38a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800f38c:	4b64      	ldr	r3, [pc, #400]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f38e:	2200      	movs	r2, #0
 800f390:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f392:	4b63      	ldr	r3, [pc, #396]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f394:	2200      	movs	r2, #0
 800f396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800f398:	4861      	ldr	r0, [pc, #388]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f39a:	f00f f911 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	bf14      	ite	ne
 800f3a4:	2301      	movne	r3, #1
 800f3a6:	2300      	moveq	r3, #0
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d001      	beq.n	800f3b2 <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 800f3ae:	f000 fd15 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f3b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f3b6:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800f3b8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800f3bc:	4619      	mov	r1, r3
 800f3be:	4858      	ldr	r0, [pc, #352]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f3c0:	f010 f896 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	bf14      	ite	ne
 800f3ca:	2301      	movne	r3, #1
 800f3cc:	2300      	moveq	r3, #0
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d001      	beq.n	800f3d8 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800f3d4:	f000 fd02 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800f3d8:	4851      	ldr	r0, [pc, #324]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f3da:	f00f fa7c 	bl	801e8d6 <HAL_TIM_PWM_Init>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	bf14      	ite	ne
 800f3e4:	2301      	movne	r3, #1
 800f3e6:	2300      	moveq	r3, #0
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d001      	beq.n	800f3f2 <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 800f3ee:	f000 fcf5 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800f3fe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800f402:	4619      	mov	r1, r3
 800f404:	4846      	ldr	r0, [pc, #280]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f406:	f010 ff43 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800f40a:	4603      	mov	r3, r0
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	bf14      	ite	ne
 800f410:	2301      	movne	r3, #1
 800f412:	2300      	moveq	r3, #0
 800f414:	b2db      	uxtb	r3, r3
 800f416:	2b00      	cmp	r3, #0
 800f418:	d001      	beq.n	800f41e <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 800f41a:	f000 fcdf 	bl	800fddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f41e:	2360      	movs	r3, #96	; 0x60
 800f420:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800f422:	2300      	movs	r3, #0
 800f424:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f426:	2300      	movs	r3, #0
 800f428:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800f42a:	2300      	movs	r3, #0
 800f42c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f42e:	2300      	movs	r3, #0
 800f430:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800f432:	2300      	movs	r3, #0
 800f434:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800f436:	2300      	movs	r3, #0
 800f438:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f43a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f43e:	2200      	movs	r2, #0
 800f440:	4619      	mov	r1, r3
 800f442:	4837      	ldr	r0, [pc, #220]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f444:	f00f ff40 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f448:	4603      	mov	r3, r0
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	bf14      	ite	ne
 800f44e:	2301      	movne	r3, #1
 800f450:	2300      	moveq	r3, #0
 800f452:	b2db      	uxtb	r3, r3
 800f454:	2b00      	cmp	r3, #0
 800f456:	d001      	beq.n	800f45c <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 800f458:	f000 fcc0 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f45c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f460:	2204      	movs	r2, #4
 800f462:	4619      	mov	r1, r3
 800f464:	482e      	ldr	r0, [pc, #184]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f466:	f00f ff2f 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	bf14      	ite	ne
 800f470:	2301      	movne	r3, #1
 800f472:	2300      	moveq	r3, #0
 800f474:	b2db      	uxtb	r3, r3
 800f476:	2b00      	cmp	r3, #0
 800f478:	d001      	beq.n	800f47e <_ZL12MX_TIM8_Initv+0x152>
  {
    Error_Handler();
 800f47a:	f000 fcaf 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f47e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f482:	2208      	movs	r2, #8
 800f484:	4619      	mov	r1, r3
 800f486:	4826      	ldr	r0, [pc, #152]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f488:	f00f ff1e 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f48c:	4603      	mov	r3, r0
 800f48e:	2b00      	cmp	r3, #0
 800f490:	bf14      	ite	ne
 800f492:	2301      	movne	r3, #1
 800f494:	2300      	moveq	r3, #0
 800f496:	b2db      	uxtb	r3, r3
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d001      	beq.n	800f4a0 <_ZL12MX_TIM8_Initv+0x174>
  {
    Error_Handler();
 800f49c:	f000 fc9e 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f4a0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800f4a4:	220c      	movs	r2, #12
 800f4a6:	4619      	mov	r1, r3
 800f4a8:	481d      	ldr	r0, [pc, #116]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f4aa:	f00f ff0d 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f4ae:	4603      	mov	r3, r0
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	bf14      	ite	ne
 800f4b4:	2301      	movne	r3, #1
 800f4b6:	2300      	moveq	r3, #0
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d001      	beq.n	800f4c2 <_ZL12MX_TIM8_Initv+0x196>
  {
    Error_Handler();
 800f4be:	f000 fc8d 	bl	800fddc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800f4c2:	2300      	movs	r3, #0
 800f4c4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800f4d2:	2300      	movs	r3, #0
 800f4d4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800f4d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f4da:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800f4dc:	2300      	movs	r3, #0
 800f4de:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800f4e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f4e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800f4ea:	2300      	movs	r3, #0
 800f4ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800f4f2:	1d3b      	adds	r3, r7, #4
 800f4f4:	4619      	mov	r1, r3
 800f4f6:	480a      	ldr	r0, [pc, #40]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f4f8:	f010 ff66 	bl	80203c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	bf14      	ite	ne
 800f502:	2301      	movne	r3, #1
 800f504:	2300      	moveq	r3, #0
 800f506:	b2db      	uxtb	r3, r3
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d001      	beq.n	800f510 <_ZL12MX_TIM8_Initv+0x1e4>
  {
    Error_Handler();
 800f50c:	f000 fc66 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800f510:	4803      	ldr	r0, [pc, #12]	; (800f520 <_ZL12MX_TIM8_Initv+0x1f4>)
 800f512:	f005 fba5 	bl	8014c60 <HAL_TIM_MspPostInit>

}
 800f516:	bf00      	nop
 800f518:	3770      	adds	r7, #112	; 0x70
 800f51a:	46bd      	mov	sp, r7
 800f51c:	bd80      	pop	{r7, pc}
 800f51e:	bf00      	nop
 800f520:	24001050 	.word	0x24001050
 800f524:	40010400 	.word	0x40010400

0800f528 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800f528:	b580      	push	{r7, lr}
 800f52a:	b08c      	sub	sp, #48	; 0x30
 800f52c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f52e:	f107 0320 	add.w	r3, r7, #32
 800f532:	2200      	movs	r2, #0
 800f534:	601a      	str	r2, [r3, #0]
 800f536:	605a      	str	r2, [r3, #4]
 800f538:	609a      	str	r2, [r3, #8]
 800f53a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f53c:	1d3b      	adds	r3, r7, #4
 800f53e:	2200      	movs	r2, #0
 800f540:	601a      	str	r2, [r3, #0]
 800f542:	605a      	str	r2, [r3, #4]
 800f544:	609a      	str	r2, [r3, #8]
 800f546:	60da      	str	r2, [r3, #12]
 800f548:	611a      	str	r2, [r3, #16]
 800f54a:	615a      	str	r2, [r3, #20]
 800f54c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800f54e:	4b2f      	ldr	r3, [pc, #188]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f550:	4a2f      	ldr	r2, [pc, #188]	; (800f610 <_ZL13MX_TIM12_Initv+0xe8>)
 800f552:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 800f554:	4b2d      	ldr	r3, [pc, #180]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f556:	2200      	movs	r2, #0
 800f558:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f55a:	4b2c      	ldr	r3, [pc, #176]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f55c:	2200      	movs	r2, #0
 800f55e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 27500 - 1;
 800f560:	4b2a      	ldr	r3, [pc, #168]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f562:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f566:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f568:	4b28      	ldr	r3, [pc, #160]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f56a:	2200      	movs	r2, #0
 800f56c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f56e:	4b27      	ldr	r3, [pc, #156]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f570:	2200      	movs	r2, #0
 800f572:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800f574:	4825      	ldr	r0, [pc, #148]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f576:	f00f f823 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f57a:	4603      	mov	r3, r0
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	bf14      	ite	ne
 800f580:	2301      	movne	r3, #1
 800f582:	2300      	moveq	r3, #0
 800f584:	b2db      	uxtb	r3, r3
 800f586:	2b00      	cmp	r3, #0
 800f588:	d001      	beq.n	800f58e <_ZL13MX_TIM12_Initv+0x66>
  {
    Error_Handler();
 800f58a:	f000 fc27 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f58e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f592:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800f594:	f107 0320 	add.w	r3, r7, #32
 800f598:	4619      	mov	r1, r3
 800f59a:	481c      	ldr	r0, [pc, #112]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f59c:	f00f ffa8 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	bf14      	ite	ne
 800f5a6:	2301      	movne	r3, #1
 800f5a8:	2300      	moveq	r3, #0
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d001      	beq.n	800f5b4 <_ZL13MX_TIM12_Initv+0x8c>
  {
    Error_Handler();
 800f5b0:	f000 fc14 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800f5b4:	4815      	ldr	r0, [pc, #84]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f5b6:	f00f f98e 	bl	801e8d6 <HAL_TIM_PWM_Init>
 800f5ba:	4603      	mov	r3, r0
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	bf14      	ite	ne
 800f5c0:	2301      	movne	r3, #1
 800f5c2:	2300      	moveq	r3, #0
 800f5c4:	b2db      	uxtb	r3, r3
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d001      	beq.n	800f5ce <_ZL13MX_TIM12_Initv+0xa6>
  {
    Error_Handler();
 800f5ca:	f000 fc07 	bl	800fddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f5ce:	2360      	movs	r3, #96	; 0x60
 800f5d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f5d6:	2300      	movs	r3, #0
 800f5d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f5de:	1d3b      	adds	r3, r7, #4
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	4619      	mov	r1, r3
 800f5e4:	4809      	ldr	r0, [pc, #36]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f5e6:	f00f fe6f 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	bf14      	ite	ne
 800f5f0:	2301      	movne	r3, #1
 800f5f2:	2300      	moveq	r3, #0
 800f5f4:	b2db      	uxtb	r3, r3
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d001      	beq.n	800f5fe <_ZL13MX_TIM12_Initv+0xd6>
  {
    Error_Handler();
 800f5fa:	f000 fbef 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 800f5fe:	4803      	ldr	r0, [pc, #12]	; (800f60c <_ZL13MX_TIM12_Initv+0xe4>)
 800f600:	f005 fb2e 	bl	8014c60 <HAL_TIM_MspPostInit>

}
 800f604:	bf00      	nop
 800f606:	3730      	adds	r7, #48	; 0x30
 800f608:	46bd      	mov	sp, r7
 800f60a:	bd80      	pop	{r7, pc}
 800f60c:	2400109c 	.word	0x2400109c
 800f610:	40001800 	.word	0x40001800

0800f614 <_ZL13MX_TIM13_Initv>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800f618:	4b10      	ldr	r3, [pc, #64]	; (800f65c <_ZL13MX_TIM13_Initv+0x48>)
 800f61a:	4a11      	ldr	r2, [pc, #68]	; (800f660 <_ZL13MX_TIM13_Initv+0x4c>)
 800f61c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800f61e:	4b0f      	ldr	r3, [pc, #60]	; (800f65c <_ZL13MX_TIM13_Initv+0x48>)
 800f620:	2200      	movs	r2, #0
 800f622:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f624:	4b0d      	ldr	r3, [pc, #52]	; (800f65c <_ZL13MX_TIM13_Initv+0x48>)
 800f626:	2200      	movs	r2, #0
 800f628:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800f62a:	4b0c      	ldr	r3, [pc, #48]	; (800f65c <_ZL13MX_TIM13_Initv+0x48>)
 800f62c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f630:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f632:	4b0a      	ldr	r3, [pc, #40]	; (800f65c <_ZL13MX_TIM13_Initv+0x48>)
 800f634:	2200      	movs	r2, #0
 800f636:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f638:	4b08      	ldr	r3, [pc, #32]	; (800f65c <_ZL13MX_TIM13_Initv+0x48>)
 800f63a:	2200      	movs	r2, #0
 800f63c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800f63e:	4807      	ldr	r0, [pc, #28]	; (800f65c <_ZL13MX_TIM13_Initv+0x48>)
 800f640:	f00e ffbe 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f644:	4603      	mov	r3, r0
 800f646:	2b00      	cmp	r3, #0
 800f648:	bf14      	ite	ne
 800f64a:	2301      	movne	r3, #1
 800f64c:	2300      	moveq	r3, #0
 800f64e:	b2db      	uxtb	r3, r3
 800f650:	2b00      	cmp	r3, #0
 800f652:	d001      	beq.n	800f658 <_ZL13MX_TIM13_Initv+0x44>
  {
    Error_Handler();
 800f654:	f000 fbc2 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800f658:	bf00      	nop
 800f65a:	bd80      	pop	{r7, pc}
 800f65c:	240010e8 	.word	0x240010e8
 800f660:	40001c00 	.word	0x40001c00

0800f664 <_ZL13MX_TIM14_Initv>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800f668:	4b10      	ldr	r3, [pc, #64]	; (800f6ac <_ZL13MX_TIM14_Initv+0x48>)
 800f66a:	4a11      	ldr	r2, [pc, #68]	; (800f6b0 <_ZL13MX_TIM14_Initv+0x4c>)
 800f66c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 800f66e:	4b0f      	ldr	r3, [pc, #60]	; (800f6ac <_ZL13MX_TIM14_Initv+0x48>)
 800f670:	2200      	movs	r2, #0
 800f672:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f674:	4b0d      	ldr	r3, [pc, #52]	; (800f6ac <_ZL13MX_TIM14_Initv+0x48>)
 800f676:	2200      	movs	r2, #0
 800f678:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800f67a:	4b0c      	ldr	r3, [pc, #48]	; (800f6ac <_ZL13MX_TIM14_Initv+0x48>)
 800f67c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f680:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f682:	4b0a      	ldr	r3, [pc, #40]	; (800f6ac <_ZL13MX_TIM14_Initv+0x48>)
 800f684:	2200      	movs	r2, #0
 800f686:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f688:	4b08      	ldr	r3, [pc, #32]	; (800f6ac <_ZL13MX_TIM14_Initv+0x48>)
 800f68a:	2200      	movs	r2, #0
 800f68c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800f68e:	4807      	ldr	r0, [pc, #28]	; (800f6ac <_ZL13MX_TIM14_Initv+0x48>)
 800f690:	f00e ff96 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f694:	4603      	mov	r3, r0
 800f696:	2b00      	cmp	r3, #0
 800f698:	bf14      	ite	ne
 800f69a:	2301      	movne	r3, #1
 800f69c:	2300      	moveq	r3, #0
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d001      	beq.n	800f6a8 <_ZL13MX_TIM14_Initv+0x44>
  {
    Error_Handler();
 800f6a4:	f000 fb9a 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800f6a8:	bf00      	nop
 800f6aa:	bd80      	pop	{r7, pc}
 800f6ac:	24001134 	.word	0x24001134
 800f6b0:	40002000 	.word	0x40002000

0800f6b4 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b088      	sub	sp, #32
 800f6b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f6ba:	f107 0310 	add.w	r3, r7, #16
 800f6be:	2200      	movs	r2, #0
 800f6c0:	601a      	str	r2, [r3, #0]
 800f6c2:	605a      	str	r2, [r3, #4]
 800f6c4:	609a      	str	r2, [r3, #8]
 800f6c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f6c8:	1d3b      	adds	r3, r7, #4
 800f6ca:	2200      	movs	r2, #0
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	605a      	str	r2, [r3, #4]
 800f6d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800f6d2:	4b26      	ldr	r3, [pc, #152]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f6d4:	4a26      	ldr	r2, [pc, #152]	; (800f770 <_ZL13MX_TIM15_Initv+0xbc>)
 800f6d6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800f6d8:	4b24      	ldr	r3, [pc, #144]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f6da:	2200      	movs	r2, #0
 800f6dc:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f6de:	4b23      	ldr	r3, [pc, #140]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 800f6e4:	4b21      	ldr	r3, [pc, #132]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f6e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f6ea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f6ec:	4b1f      	ldr	r3, [pc, #124]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800f6f2:	4b1e      	ldr	r3, [pc, #120]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f6f4:	2200      	movs	r2, #0
 800f6f6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f6f8:	4b1c      	ldr	r3, [pc, #112]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f6fa:	2200      	movs	r2, #0
 800f6fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800f6fe:	481b      	ldr	r0, [pc, #108]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f700:	f00e ff5e 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f704:	4603      	mov	r3, r0
 800f706:	2b00      	cmp	r3, #0
 800f708:	bf14      	ite	ne
 800f70a:	2301      	movne	r3, #1
 800f70c:	2300      	moveq	r3, #0
 800f70e:	b2db      	uxtb	r3, r3
 800f710:	2b00      	cmp	r3, #0
 800f712:	d001      	beq.n	800f718 <_ZL13MX_TIM15_Initv+0x64>
  {
    Error_Handler();
 800f714:	f000 fb62 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f718:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f71c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800f71e:	f107 0310 	add.w	r3, r7, #16
 800f722:	4619      	mov	r1, r3
 800f724:	4811      	ldr	r0, [pc, #68]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f726:	f00f fee3 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800f72a:	4603      	mov	r3, r0
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	bf14      	ite	ne
 800f730:	2301      	movne	r3, #1
 800f732:	2300      	moveq	r3, #0
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b00      	cmp	r3, #0
 800f738:	d001      	beq.n	800f73e <_ZL13MX_TIM15_Initv+0x8a>
  {
    Error_Handler();
 800f73a:	f000 fb4f 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f73e:	2300      	movs	r3, #0
 800f740:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f742:	2300      	movs	r3, #0
 800f744:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800f746:	1d3b      	adds	r3, r7, #4
 800f748:	4619      	mov	r1, r3
 800f74a:	4808      	ldr	r0, [pc, #32]	; (800f76c <_ZL13MX_TIM15_Initv+0xb8>)
 800f74c:	f010 fda0 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	bf14      	ite	ne
 800f756:	2301      	movne	r3, #1
 800f758:	2300      	moveq	r3, #0
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d001      	beq.n	800f764 <_ZL13MX_TIM15_Initv+0xb0>
  {
    Error_Handler();
 800f760:	f000 fb3c 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 800f764:	bf00      	nop
 800f766:	3720      	adds	r7, #32
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	24001180 	.word	0x24001180
 800f770:	40014000 	.word	0x40014000

0800f774 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800f774:	b580      	push	{r7, lr}
 800f776:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800f778:	4b12      	ldr	r3, [pc, #72]	; (800f7c4 <_ZL13MX_TIM16_Initv+0x50>)
 800f77a:	4a13      	ldr	r2, [pc, #76]	; (800f7c8 <_ZL13MX_TIM16_Initv+0x54>)
 800f77c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800f77e:	4b11      	ldr	r3, [pc, #68]	; (800f7c4 <_ZL13MX_TIM16_Initv+0x50>)
 800f780:	2200      	movs	r2, #0
 800f782:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f784:	4b0f      	ldr	r3, [pc, #60]	; (800f7c4 <_ZL13MX_TIM16_Initv+0x50>)
 800f786:	2200      	movs	r2, #0
 800f788:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 800f78a:	4b0e      	ldr	r3, [pc, #56]	; (800f7c4 <_ZL13MX_TIM16_Initv+0x50>)
 800f78c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f790:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f792:	4b0c      	ldr	r3, [pc, #48]	; (800f7c4 <_ZL13MX_TIM16_Initv+0x50>)
 800f794:	2200      	movs	r2, #0
 800f796:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800f798:	4b0a      	ldr	r3, [pc, #40]	; (800f7c4 <_ZL13MX_TIM16_Initv+0x50>)
 800f79a:	2200      	movs	r2, #0
 800f79c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f79e:	4b09      	ldr	r3, [pc, #36]	; (800f7c4 <_ZL13MX_TIM16_Initv+0x50>)
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800f7a4:	4807      	ldr	r0, [pc, #28]	; (800f7c4 <_ZL13MX_TIM16_Initv+0x50>)
 800f7a6:	f00e ff0b 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	bf14      	ite	ne
 800f7b0:	2301      	movne	r3, #1
 800f7b2:	2300      	moveq	r3, #0
 800f7b4:	b2db      	uxtb	r3, r3
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d001      	beq.n	800f7be <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 800f7ba:	f000 fb0f 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800f7be:	bf00      	nop
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	240011cc 	.word	0x240011cc
 800f7c8:	40014400 	.word	0x40014400

0800f7cc <_ZL13MX_TIM17_Initv>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 800f7cc:	b580      	push	{r7, lr}
 800f7ce:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800f7d0:	4b12      	ldr	r3, [pc, #72]	; (800f81c <_ZL13MX_TIM17_Initv+0x50>)
 800f7d2:	4a13      	ldr	r2, [pc, #76]	; (800f820 <_ZL13MX_TIM17_Initv+0x54>)
 800f7d4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800f7d6:	4b11      	ldr	r3, [pc, #68]	; (800f81c <_ZL13MX_TIM17_Initv+0x50>)
 800f7d8:	2200      	movs	r2, #0
 800f7da:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f7dc:	4b0f      	ldr	r3, [pc, #60]	; (800f81c <_ZL13MX_TIM17_Initv+0x50>)
 800f7de:	2200      	movs	r2, #0
 800f7e0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800f7e2:	4b0e      	ldr	r3, [pc, #56]	; (800f81c <_ZL13MX_TIM17_Initv+0x50>)
 800f7e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7e8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f7ea:	4b0c      	ldr	r3, [pc, #48]	; (800f81c <_ZL13MX_TIM17_Initv+0x50>)
 800f7ec:	2200      	movs	r2, #0
 800f7ee:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800f7f0:	4b0a      	ldr	r3, [pc, #40]	; (800f81c <_ZL13MX_TIM17_Initv+0x50>)
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f7f6:	4b09      	ldr	r3, [pc, #36]	; (800f81c <_ZL13MX_TIM17_Initv+0x50>)
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800f7fc:	4807      	ldr	r0, [pc, #28]	; (800f81c <_ZL13MX_TIM17_Initv+0x50>)
 800f7fe:	f00e fedf 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f802:	4603      	mov	r3, r0
 800f804:	2b00      	cmp	r3, #0
 800f806:	bf14      	ite	ne
 800f808:	2301      	movne	r3, #1
 800f80a:	2300      	moveq	r3, #0
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d001      	beq.n	800f816 <_ZL13MX_TIM17_Initv+0x4a>
  {
    Error_Handler();
 800f812:	f000 fae3 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800f816:	bf00      	nop
 800f818:	bd80      	pop	{r7, pc}
 800f81a:	bf00      	nop
 800f81c:	24001218 	.word	0x24001218
 800f820:	40014800 	.word	0x40014800

0800f824 <_ZL13MX_TIM23_Initv>:
  * @brief TIM23 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM23_Init(void)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b08e      	sub	sp, #56	; 0x38
 800f828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM23_Init 0 */

  /* USER CODE END TIM23_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f82a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f82e:	2200      	movs	r2, #0
 800f830:	601a      	str	r2, [r3, #0]
 800f832:	605a      	str	r2, [r3, #4]
 800f834:	609a      	str	r2, [r3, #8]
 800f836:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f838:	f107 031c 	add.w	r3, r7, #28
 800f83c:	2200      	movs	r2, #0
 800f83e:	601a      	str	r2, [r3, #0]
 800f840:	605a      	str	r2, [r3, #4]
 800f842:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f844:	463b      	mov	r3, r7
 800f846:	2200      	movs	r2, #0
 800f848:	601a      	str	r2, [r3, #0]
 800f84a:	605a      	str	r2, [r3, #4]
 800f84c:	609a      	str	r2, [r3, #8]
 800f84e:	60da      	str	r2, [r3, #12]
 800f850:	611a      	str	r2, [r3, #16]
 800f852:	615a      	str	r2, [r3, #20]
 800f854:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM23_Init 1 */

  /* USER CODE END TIM23_Init 1 */
  htim23.Instance = TIM23;
 800f856:	4b51      	ldr	r3, [pc, #324]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f858:	4a51      	ldr	r2, [pc, #324]	; (800f9a0 <_ZL13MX_TIM23_Initv+0x17c>)
 800f85a:	601a      	str	r2, [r3, #0]
  htim23.Init.Prescaler = 0;
 800f85c:	4b4f      	ldr	r3, [pc, #316]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f85e:	2200      	movs	r2, #0
 800f860:	605a      	str	r2, [r3, #4]
  htim23.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f862:	4b4e      	ldr	r3, [pc, #312]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f864:	2200      	movs	r2, #0
 800f866:	609a      	str	r2, [r3, #8]
  htim23.Init.Period = 27500 - 1;
 800f868:	4b4c      	ldr	r3, [pc, #304]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f86a:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f86e:	60da      	str	r2, [r3, #12]
  htim23.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f870:	4b4a      	ldr	r3, [pc, #296]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f872:	2200      	movs	r2, #0
 800f874:	611a      	str	r2, [r3, #16]
  htim23.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f876:	4b49      	ldr	r3, [pc, #292]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f878:	2200      	movs	r2, #0
 800f87a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim23) != HAL_OK)
 800f87c:	4847      	ldr	r0, [pc, #284]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f87e:	f00e fe9f 	bl	801e5c0 <HAL_TIM_Base_Init>
 800f882:	4603      	mov	r3, r0
 800f884:	2b00      	cmp	r3, #0
 800f886:	bf14      	ite	ne
 800f888:	2301      	movne	r3, #1
 800f88a:	2300      	moveq	r3, #0
 800f88c:	b2db      	uxtb	r3, r3
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d001      	beq.n	800f896 <_ZL13MX_TIM23_Initv+0x72>
  {
    Error_Handler();
 800f892:	f000 faa3 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800f896:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f89a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim23, &sClockSourceConfig) != HAL_OK)
 800f89c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f8a0:	4619      	mov	r1, r3
 800f8a2:	483e      	ldr	r0, [pc, #248]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f8a4:	f00f fe24 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800f8a8:	4603      	mov	r3, r0
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	bf14      	ite	ne
 800f8ae:	2301      	movne	r3, #1
 800f8b0:	2300      	moveq	r3, #0
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d001      	beq.n	800f8bc <_ZL13MX_TIM23_Initv+0x98>
  {
    Error_Handler();
 800f8b8:	f000 fa90 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim23) != HAL_OK)
 800f8bc:	4837      	ldr	r0, [pc, #220]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f8be:	f00f f80a 	bl	801e8d6 <HAL_TIM_PWM_Init>
 800f8c2:	4603      	mov	r3, r0
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	bf14      	ite	ne
 800f8c8:	2301      	movne	r3, #1
 800f8ca:	2300      	moveq	r3, #0
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d001      	beq.n	800f8d6 <_ZL13MX_TIM23_Initv+0xb2>
  {
    Error_Handler();
 800f8d2:	f000 fa83 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim23, &sMasterConfig) != HAL_OK)
 800f8de:	f107 031c 	add.w	r3, r7, #28
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	482d      	ldr	r0, [pc, #180]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f8e6:	f010 fcd3 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	bf14      	ite	ne
 800f8f0:	2301      	movne	r3, #1
 800f8f2:	2300      	moveq	r3, #0
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <_ZL13MX_TIM23_Initv+0xda>
  {
    Error_Handler();
 800f8fa:	f000 fa6f 	bl	800fddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800f8fe:	2360      	movs	r3, #96	; 0x60
 800f900:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800f902:	2300      	movs	r3, #0
 800f904:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800f906:	2300      	movs	r3, #0
 800f908:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800f90a:	2300      	movs	r3, #0
 800f90c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800f90e:	463b      	mov	r3, r7
 800f910:	2200      	movs	r2, #0
 800f912:	4619      	mov	r1, r3
 800f914:	4821      	ldr	r0, [pc, #132]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f916:	f00f fcd7 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f91a:	4603      	mov	r3, r0
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	bf14      	ite	ne
 800f920:	2301      	movne	r3, #1
 800f922:	2300      	moveq	r3, #0
 800f924:	b2db      	uxtb	r3, r3
 800f926:	2b00      	cmp	r3, #0
 800f928:	d001      	beq.n	800f92e <_ZL13MX_TIM23_Initv+0x10a>
  {
    Error_Handler();
 800f92a:	f000 fa57 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800f92e:	463b      	mov	r3, r7
 800f930:	2204      	movs	r2, #4
 800f932:	4619      	mov	r1, r3
 800f934:	4819      	ldr	r0, [pc, #100]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f936:	f00f fcc7 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f93a:	4603      	mov	r3, r0
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	bf14      	ite	ne
 800f940:	2301      	movne	r3, #1
 800f942:	2300      	moveq	r3, #0
 800f944:	b2db      	uxtb	r3, r3
 800f946:	2b00      	cmp	r3, #0
 800f948:	d001      	beq.n	800f94e <_ZL13MX_TIM23_Initv+0x12a>
  {
    Error_Handler();
 800f94a:	f000 fa47 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800f94e:	463b      	mov	r3, r7
 800f950:	2208      	movs	r2, #8
 800f952:	4619      	mov	r1, r3
 800f954:	4811      	ldr	r0, [pc, #68]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f956:	f00f fcb7 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f95a:	4603      	mov	r3, r0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	bf14      	ite	ne
 800f960:	2301      	movne	r3, #1
 800f962:	2300      	moveq	r3, #0
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d001      	beq.n	800f96e <_ZL13MX_TIM23_Initv+0x14a>
  {
    Error_Handler();
 800f96a:	f000 fa37 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim23, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800f96e:	463b      	mov	r3, r7
 800f970:	220c      	movs	r2, #12
 800f972:	4619      	mov	r1, r3
 800f974:	4809      	ldr	r0, [pc, #36]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f976:	f00f fca7 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800f97a:	4603      	mov	r3, r0
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	bf14      	ite	ne
 800f980:	2301      	movne	r3, #1
 800f982:	2300      	moveq	r3, #0
 800f984:	b2db      	uxtb	r3, r3
 800f986:	2b00      	cmp	r3, #0
 800f988:	d001      	beq.n	800f98e <_ZL13MX_TIM23_Initv+0x16a>
  {
    Error_Handler();
 800f98a:	f000 fa27 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM23_Init 2 */

  /* USER CODE END TIM23_Init 2 */
  HAL_TIM_MspPostInit(&htim23);
 800f98e:	4803      	ldr	r0, [pc, #12]	; (800f99c <_ZL13MX_TIM23_Initv+0x178>)
 800f990:	f005 f966 	bl	8014c60 <HAL_TIM_MspPostInit>

}
 800f994:	bf00      	nop
 800f996:	3738      	adds	r7, #56	; 0x38
 800f998:	46bd      	mov	sp, r7
 800f99a:	bd80      	pop	{r7, pc}
 800f99c:	24001264 	.word	0x24001264
 800f9a0:	4000e000 	.word	0x4000e000

0800f9a4 <_ZL13MX_TIM24_Initv>:
  * @brief TIM24 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM24_Init(void)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b08e      	sub	sp, #56	; 0x38
 800f9a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM24_Init 0 */

  /* USER CODE END TIM24_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800f9aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f9ae:	2200      	movs	r2, #0
 800f9b0:	601a      	str	r2, [r3, #0]
 800f9b2:	605a      	str	r2, [r3, #4]
 800f9b4:	609a      	str	r2, [r3, #8]
 800f9b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800f9b8:	f107 031c 	add.w	r3, r7, #28
 800f9bc:	2200      	movs	r2, #0
 800f9be:	601a      	str	r2, [r3, #0]
 800f9c0:	605a      	str	r2, [r3, #4]
 800f9c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800f9c4:	463b      	mov	r3, r7
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	601a      	str	r2, [r3, #0]
 800f9ca:	605a      	str	r2, [r3, #4]
 800f9cc:	609a      	str	r2, [r3, #8]
 800f9ce:	60da      	str	r2, [r3, #12]
 800f9d0:	611a      	str	r2, [r3, #16]
 800f9d2:	615a      	str	r2, [r3, #20]
 800f9d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM24_Init 1 */

  /* USER CODE END TIM24_Init 1 */
  htim24.Instance = TIM24;
 800f9d6:	4b51      	ldr	r3, [pc, #324]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800f9d8:	4a51      	ldr	r2, [pc, #324]	; (800fb20 <_ZL13MX_TIM24_Initv+0x17c>)
 800f9da:	601a      	str	r2, [r3, #0]
  htim24.Init.Prescaler = 0;
 800f9dc:	4b4f      	ldr	r3, [pc, #316]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800f9de:	2200      	movs	r2, #0
 800f9e0:	605a      	str	r2, [r3, #4]
  htim24.Init.CounterMode = TIM_COUNTERMODE_UP;
 800f9e2:	4b4e      	ldr	r3, [pc, #312]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800f9e4:	2200      	movs	r2, #0
 800f9e6:	609a      	str	r2, [r3, #8]
  htim24.Init.Period = 27500 - 1;
 800f9e8:	4b4c      	ldr	r3, [pc, #304]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800f9ea:	f646 326b 	movw	r2, #27499	; 0x6b6b
 800f9ee:	60da      	str	r2, [r3, #12]
  htim24.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800f9f0:	4b4a      	ldr	r3, [pc, #296]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800f9f2:	2200      	movs	r2, #0
 800f9f4:	611a      	str	r2, [r3, #16]
  htim24.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800f9f6:	4b49      	ldr	r3, [pc, #292]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800f9f8:	2200      	movs	r2, #0
 800f9fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim24) != HAL_OK)
 800f9fc:	4847      	ldr	r0, [pc, #284]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800f9fe:	f00e fddf 	bl	801e5c0 <HAL_TIM_Base_Init>
 800fa02:	4603      	mov	r3, r0
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	bf14      	ite	ne
 800fa08:	2301      	movne	r3, #1
 800fa0a:	2300      	moveq	r3, #0
 800fa0c:	b2db      	uxtb	r3, r3
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d001      	beq.n	800fa16 <_ZL13MX_TIM24_Initv+0x72>
  {
    Error_Handler();
 800fa12:	f000 f9e3 	bl	800fddc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800fa16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800fa1a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim24, &sClockSourceConfig) != HAL_OK)
 800fa1c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fa20:	4619      	mov	r1, r3
 800fa22:	483e      	ldr	r0, [pc, #248]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800fa24:	f00f fd64 	bl	801f4f0 <HAL_TIM_ConfigClockSource>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	bf14      	ite	ne
 800fa2e:	2301      	movne	r3, #1
 800fa30:	2300      	moveq	r3, #0
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d001      	beq.n	800fa3c <_ZL13MX_TIM24_Initv+0x98>
  {
    Error_Handler();
 800fa38:	f000 f9d0 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim24) != HAL_OK)
 800fa3c:	4837      	ldr	r0, [pc, #220]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800fa3e:	f00e ff4a 	bl	801e8d6 <HAL_TIM_PWM_Init>
 800fa42:	4603      	mov	r3, r0
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	bf14      	ite	ne
 800fa48:	2301      	movne	r3, #1
 800fa4a:	2300      	moveq	r3, #0
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d001      	beq.n	800fa56 <_ZL13MX_TIM24_Initv+0xb2>
  {
    Error_Handler();
 800fa52:	f000 f9c3 	bl	800fddc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800fa56:	2300      	movs	r3, #0
 800fa58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim24, &sMasterConfig) != HAL_OK)
 800fa5e:	f107 031c 	add.w	r3, r7, #28
 800fa62:	4619      	mov	r1, r3
 800fa64:	482d      	ldr	r0, [pc, #180]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800fa66:	f010 fc13 	bl	8020290 <HAL_TIMEx_MasterConfigSynchronization>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	bf14      	ite	ne
 800fa70:	2301      	movne	r3, #1
 800fa72:	2300      	moveq	r3, #0
 800fa74:	b2db      	uxtb	r3, r3
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d001      	beq.n	800fa7e <_ZL13MX_TIM24_Initv+0xda>
  {
    Error_Handler();
 800fa7a:	f000 f9af 	bl	800fddc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800fa7e:	2360      	movs	r3, #96	; 0x60
 800fa80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800fa82:	2300      	movs	r3, #0
 800fa84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800fa86:	2300      	movs	r3, #0
 800fa88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800fa8e:	463b      	mov	r3, r7
 800fa90:	2200      	movs	r2, #0
 800fa92:	4619      	mov	r1, r3
 800fa94:	4821      	ldr	r0, [pc, #132]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800fa96:	f00f fc17 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	bf14      	ite	ne
 800faa0:	2301      	movne	r3, #1
 800faa2:	2300      	moveq	r3, #0
 800faa4:	b2db      	uxtb	r3, r3
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d001      	beq.n	800faae <_ZL13MX_TIM24_Initv+0x10a>
  {
    Error_Handler();
 800faaa:	f000 f997 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800faae:	463b      	mov	r3, r7
 800fab0:	2204      	movs	r2, #4
 800fab2:	4619      	mov	r1, r3
 800fab4:	4819      	ldr	r0, [pc, #100]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800fab6:	f00f fc07 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800faba:	4603      	mov	r3, r0
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	bf14      	ite	ne
 800fac0:	2301      	movne	r3, #1
 800fac2:	2300      	moveq	r3, #0
 800fac4:	b2db      	uxtb	r3, r3
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d001      	beq.n	800face <_ZL13MX_TIM24_Initv+0x12a>
  {
    Error_Handler();
 800faca:	f000 f987 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800face:	463b      	mov	r3, r7
 800fad0:	2208      	movs	r2, #8
 800fad2:	4619      	mov	r1, r3
 800fad4:	4811      	ldr	r0, [pc, #68]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800fad6:	f00f fbf7 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b00      	cmp	r3, #0
 800fade:	bf14      	ite	ne
 800fae0:	2301      	movne	r3, #1
 800fae2:	2300      	moveq	r3, #0
 800fae4:	b2db      	uxtb	r3, r3
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d001      	beq.n	800faee <_ZL13MX_TIM24_Initv+0x14a>
  {
    Error_Handler();
 800faea:	f000 f977 	bl	800fddc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim24, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800faee:	463b      	mov	r3, r7
 800faf0:	220c      	movs	r2, #12
 800faf2:	4619      	mov	r1, r3
 800faf4:	4809      	ldr	r0, [pc, #36]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800faf6:	f00f fbe7 	bl	801f2c8 <HAL_TIM_PWM_ConfigChannel>
 800fafa:	4603      	mov	r3, r0
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	bf14      	ite	ne
 800fb00:	2301      	movne	r3, #1
 800fb02:	2300      	moveq	r3, #0
 800fb04:	b2db      	uxtb	r3, r3
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d001      	beq.n	800fb0e <_ZL13MX_TIM24_Initv+0x16a>
  {
    Error_Handler();
 800fb0a:	f000 f967 	bl	800fddc <Error_Handler>
  }
  /* USER CODE BEGIN TIM24_Init 2 */

  /* USER CODE END TIM24_Init 2 */
  HAL_TIM_MspPostInit(&htim24);
 800fb0e:	4803      	ldr	r0, [pc, #12]	; (800fb1c <_ZL13MX_TIM24_Initv+0x178>)
 800fb10:	f005 f8a6 	bl	8014c60 <HAL_TIM_MspPostInit>

}
 800fb14:	bf00      	nop
 800fb16:	3738      	adds	r7, #56	; 0x38
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}
 800fb1c:	240012b0 	.word	0x240012b0
 800fb20:	4000e400 	.word	0x4000e400

0800fb24 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b082      	sub	sp, #8
 800fb28:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800fb2a:	4b0d      	ldr	r3, [pc, #52]	; (800fb60 <_ZL11MX_DMA_Initv+0x3c>)
 800fb2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fb30:	4a0b      	ldr	r2, [pc, #44]	; (800fb60 <_ZL11MX_DMA_Initv+0x3c>)
 800fb32:	f043 0301 	orr.w	r3, r3, #1
 800fb36:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fb3a:	4b09      	ldr	r3, [pc, #36]	; (800fb60 <_ZL11MX_DMA_Initv+0x3c>)
 800fb3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fb40:	f003 0301 	and.w	r3, r3, #1
 800fb44:	607b      	str	r3, [r7, #4]
 800fb46:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 1, 0);
 800fb48:	2200      	movs	r2, #0
 800fb4a:	2101      	movs	r1, #1
 800fb4c:	200c      	movs	r0, #12
 800fb4e:	f007 fd6a 	bl	8017626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800fb52:	200c      	movs	r0, #12
 800fb54:	f007 fd81 	bl	801765a <HAL_NVIC_EnableIRQ>

}
 800fb58:	bf00      	nop
 800fb5a:	3708      	adds	r7, #8
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	bd80      	pop	{r7, pc}
 800fb60:	58024400 	.word	0x58024400

0800fb64 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b08e      	sub	sp, #56	; 0x38
 800fb68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fb6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb6e:	2200      	movs	r2, #0
 800fb70:	601a      	str	r2, [r3, #0]
 800fb72:	605a      	str	r2, [r3, #4]
 800fb74:	609a      	str	r2, [r3, #8]
 800fb76:	60da      	str	r2, [r3, #12]
 800fb78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800fb7a:	4b90      	ldr	r3, [pc, #576]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fb7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb80:	4a8e      	ldr	r2, [pc, #568]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fb82:	f043 0304 	orr.w	r3, r3, #4
 800fb86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fb8a:	4b8c      	ldr	r3, [pc, #560]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fb8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb90:	f003 0304 	and.w	r3, r3, #4
 800fb94:	623b      	str	r3, [r7, #32]
 800fb96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800fb98:	4b88      	ldr	r3, [pc, #544]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fb9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fb9e:	4a87      	ldr	r2, [pc, #540]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fba0:	f043 0320 	orr.w	r3, r3, #32
 800fba4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fba8:	4b84      	ldr	r3, [pc, #528]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbae:	f003 0320 	and.w	r3, r3, #32
 800fbb2:	61fb      	str	r3, [r7, #28]
 800fbb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800fbb6:	4b81      	ldr	r3, [pc, #516]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbbc:	4a7f      	ldr	r2, [pc, #508]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fbc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbc6:	4b7d      	ldr	r3, [pc, #500]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fbd0:	61bb      	str	r3, [r7, #24]
 800fbd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800fbd4:	4b79      	ldr	r3, [pc, #484]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbda:	4a78      	ldr	r2, [pc, #480]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbdc:	f043 0301 	orr.w	r3, r3, #1
 800fbe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fbe4:	4b75      	ldr	r3, [pc, #468]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbea:	f003 0301 	and.w	r3, r3, #1
 800fbee:	617b      	str	r3, [r7, #20]
 800fbf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800fbf2:	4b72      	ldr	r3, [pc, #456]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fbf8:	4a70      	ldr	r2, [pc, #448]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fbfa:	f043 0302 	orr.w	r3, r3, #2
 800fbfe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc02:	4b6e      	ldr	r3, [pc, #440]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc08:	f003 0302 	and.w	r3, r3, #2
 800fc0c:	613b      	str	r3, [r7, #16]
 800fc0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800fc10:	4b6a      	ldr	r3, [pc, #424]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc16:	4a69      	ldr	r2, [pc, #420]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc18:	f043 0310 	orr.w	r3, r3, #16
 800fc1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc20:	4b66      	ldr	r3, [pc, #408]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc26:	f003 0310 	and.w	r3, r3, #16
 800fc2a:	60fb      	str	r3, [r7, #12]
 800fc2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800fc2e:	4b63      	ldr	r3, [pc, #396]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc34:	4a61      	ldr	r2, [pc, #388]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc36:	f043 0308 	orr.w	r3, r3, #8
 800fc3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc3e:	4b5f      	ldr	r3, [pc, #380]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc44:	f003 0308 	and.w	r3, r3, #8
 800fc48:	60bb      	str	r3, [r7, #8]
 800fc4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800fc4c:	4b5b      	ldr	r3, [pc, #364]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc52:	4a5a      	ldr	r2, [pc, #360]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc5c:	4b57      	ldr	r3, [pc, #348]	; (800fdbc <_ZL12MX_GPIO_Initv+0x258>)
 800fc5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc66:	607b      	str	r3, [r7, #4]
 800fc68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800fc70:	4853      	ldr	r0, [pc, #332]	; (800fdc0 <_ZL12MX_GPIO_Initv+0x25c>)
 800fc72:	f00b f901 	bl	801ae78 <HAL_GPIO_WritePin>
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|SENSOR_OPEN_COLLECTOR_5_Pin, GPIO_PIN_RESET);
 800fc76:	2200      	movs	r2, #0
 800fc78:	21c0      	movs	r1, #192	; 0xc0
 800fc7a:	4852      	ldr	r0, [pc, #328]	; (800fdc4 <_ZL12MX_GPIO_Initv+0x260>)
 800fc7c:	f00b f8fc 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800fc80:	2200      	movs	r2, #0
 800fc82:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fc86:	4850      	ldr	r0, [pc, #320]	; (800fdc8 <_ZL12MX_GPIO_Initv+0x264>)
 800fc88:	f00b f8f6 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800fc92:	484e      	ldr	r0, [pc, #312]	; (800fdcc <_ZL12MX_GPIO_Initv+0x268>)
 800fc94:	f00b f8f0 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SENSOR_OPEN_COLLECTOR_6_GPIO_Port, SENSOR_OPEN_COLLECTOR_6_Pin, GPIO_PIN_RESET);
 800fc98:	2200      	movs	r2, #0
 800fc9a:	2180      	movs	r1, #128	; 0x80
 800fc9c:	484c      	ldr	r0, [pc, #304]	; (800fdd0 <_ZL12MX_GPIO_Initv+0x26c>)
 800fc9e:	f00b f8eb 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 800fca2:	2201      	movs	r2, #1
 800fca4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800fca8:	4849      	ldr	r0, [pc, #292]	; (800fdd0 <_ZL12MX_GPIO_Initv+0x26c>)
 800fcaa:	f00b f8e5 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 800fcae:	2200      	movs	r2, #0
 800fcb0:	2102      	movs	r1, #2
 800fcb2:	4848      	ldr	r0, [pc, #288]	; (800fdd4 <_ZL12MX_GPIO_Initv+0x270>)
 800fcb4:	f00b f8e0 	bl	801ae78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_1_Pin SENSOR_OPEN_COLLECTOR_2_Pin SENSOR_OPEN_COLLECTOR_3_Pin SENSOR_OPEN_COLLECTOR_7_Pin
                           SENSOR_OPEN_COLLECTOR_8_Pin SENSOR_OPEN_COLLECTOR_9_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_1_Pin|SENSOR_OPEN_COLLECTOR_2_Pin|SENSOR_OPEN_COLLECTOR_3_Pin|SENSOR_OPEN_COLLECTOR_7_Pin
 800fcb8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800fcbc:	627b      	str	r3, [r7, #36]	; 0x24
                          |SENSOR_OPEN_COLLECTOR_8_Pin|SENSOR_OPEN_COLLECTOR_9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fcc2:	2302      	movs	r3, #2
 800fcc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fcca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcce:	4619      	mov	r1, r3
 800fcd0:	483b      	ldr	r0, [pc, #236]	; (800fdc0 <_ZL12MX_GPIO_Initv+0x25c>)
 800fcd2:	f00a ff11 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fcd6:	2340      	movs	r3, #64	; 0x40
 800fcd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fcde:	2300      	movs	r3, #0
 800fce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fce2:	2300      	movs	r3, #0
 800fce4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800fce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fcea:	4619      	mov	r1, r3
 800fcec:	4835      	ldr	r0, [pc, #212]	; (800fdc4 <_ZL12MX_GPIO_Initv+0x260>)
 800fcee:	f00a ff03 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SENSOR_OPEN_COLLECTOR_5_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_5_Pin;
 800fcf2:	2380      	movs	r3, #128	; 0x80
 800fcf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fcf6:	2301      	movs	r3, #1
 800fcf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fcfa:	2302      	movs	r3, #2
 800fcfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SENSOR_OPEN_COLLECTOR_5_GPIO_Port, &GPIO_InitStruct);
 800fd02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd06:	4619      	mov	r1, r3
 800fd08:	482e      	ldr	r0, [pc, #184]	; (800fdc4 <_ZL12MX_GPIO_Initv+0x260>)
 800fd0a:	f00a fef5 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ACTUATOR_24V_1_Pin ACTUATOR_24V_3_Pin ACTUATOR_24V_2_Pin */
  GPIO_InitStruct.Pin = ACTUATOR_24V_1_Pin|ACTUATOR_24V_3_Pin|ACTUATOR_24V_2_Pin;
 800fd0e:	230e      	movs	r3, #14
 800fd10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800fd12:	2300      	movs	r3, #0
 800fd14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd16:	2302      	movs	r3, #2
 800fd18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800fd1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd1e:	4619      	mov	r1, r3
 800fd20:	4827      	ldr	r0, [pc, #156]	; (800fdc0 <_ZL12MX_GPIO_Initv+0x25c>)
 800fd22:	f00a fee9 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800fd26:	2340      	movs	r3, #64	; 0x40
 800fd28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800fd2a:	2303      	movs	r3, #3
 800fd2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd2e:	2300      	movs	r3, #0
 800fd30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fd32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd36:	4619      	mov	r1, r3
 800fd38:	4827      	ldr	r0, [pc, #156]	; (800fdd8 <_ZL12MX_GPIO_Initv+0x274>)
 800fd3a:	f00a fedd 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800fd3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800fd42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd44:	2301      	movs	r3, #1
 800fd46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd48:	2302      	movs	r3, #2
 800fd4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800fd50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd54:	4619      	mov	r1, r3
 800fd56:	481c      	ldr	r0, [pc, #112]	; (800fdc8 <_ZL12MX_GPIO_Initv+0x264>)
 800fd58:	f00a fece 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800fd5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fd60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd62:	2301      	movs	r3, #1
 800fd64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fd66:	2300      	movs	r3, #0
 800fd68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fd6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd72:	4619      	mov	r1, r3
 800fd74:	4815      	ldr	r0, [pc, #84]	; (800fdcc <_ZL12MX_GPIO_Initv+0x268>)
 800fd76:	f00a febf 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_OPEN_COLLECTOR_6_Pin OE_Pin */
  GPIO_InitStruct.Pin = SENSOR_OPEN_COLLECTOR_6_Pin|OE_Pin;
 800fd7a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800fd7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd80:	2301      	movs	r3, #1
 800fd82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800fd84:	2302      	movs	r3, #2
 800fd86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fd88:	2300      	movs	r3, #0
 800fd8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fd8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd90:	4619      	mov	r1, r3
 800fd92:	480f      	ldr	r0, [pc, #60]	; (800fdd0 <_ZL12MX_GPIO_Initv+0x26c>)
 800fd94:	f00a feb0 	bl	801aaf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800fd98:	2302      	movs	r3, #2
 800fd9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800fd9c:	2301      	movs	r3, #1
 800fd9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fda0:	2300      	movs	r3, #0
 800fda2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fda4:	2300      	movs	r3, #0
 800fda6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800fda8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fdac:	4619      	mov	r1, r3
 800fdae:	4809      	ldr	r0, [pc, #36]	; (800fdd4 <_ZL12MX_GPIO_Initv+0x270>)
 800fdb0:	f00a fea2 	bl	801aaf8 <HAL_GPIO_Init>

}
 800fdb4:	bf00      	nop
 800fdb6:	3738      	adds	r7, #56	; 0x38
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	bd80      	pop	{r7, pc}
 800fdbc:	58024400 	.word	0x58024400
 800fdc0:	58020800 	.word	0x58020800
 800fdc4:	58021400 	.word	0x58021400
 800fdc8:	58020c00 	.word	0x58020c00
 800fdcc:	58021800 	.word	0x58021800
 800fdd0:	58020400 	.word	0x58020400
 800fdd4:	58021000 	.word	0x58021000
 800fdd8:	58020000 	.word	0x58020000

0800fddc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800fddc:	b480      	push	{r7}
 800fdde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800fde0:	b672      	cpsid	i
}
 800fde2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800fde4:	e7fe      	b.n	800fde4 <Error_Handler+0x8>

0800fde6 <_ZNKSt8functionIFvvEEclEv>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b082      	sub	sp, #8
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	f7fd fc0f 	bl	800d614 <_ZNKSt14_Function_base8_M_emptyEv>
 800fdf6:	4603      	mov	r3, r0
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d001      	beq.n	800fe00 <_ZNKSt8functionIFvvEEclEv+0x1a>
	__throw_bad_function_call();
 800fdfc:	f010 fc73 	bl	80206e6 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	4610      	mov	r0, r2
 800fe08:	4798      	blx	r3
 800fe0a:	bf00      	nop
    }
 800fe0c:	3708      	adds	r7, #8
 800fe0e:	46bd      	mov	sp, r7
 800fe10:	bd80      	pop	{r7, pc}

0800fe12 <_ZNSt8functionIFvvEEC1Ev>:
      function() noexcept
 800fe12:	b580      	push	{r7, lr}
 800fe14:	b082      	sub	sp, #8
 800fe16:	af00      	add	r7, sp, #0
 800fe18:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f7fd fbd8 	bl	800d5d2 <_ZNSt14_Function_baseC1Ev>
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	4618      	mov	r0, r3
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <_ZNSt6vectorIP5TimerSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800fe36:	6838      	ldr	r0, [r7, #0]
 800fe38:	f000 fb5a 	bl	80104f0 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	4619      	mov	r1, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fb60 	bl	8010506 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 800fe46:	bf00      	nop
 800fe48:	3708      	adds	r7, #8
 800fe4a:	46bd      	mov	sp, r7
 800fe4c:	bd80      	pop	{r7, pc}

0800fe4e <_ZNSt8functionIFvvEEaSERKS1_>:
      operator=(const function& __x)
 800fe4e:	b580      	push	{r7, lr}
 800fe50:	b086      	sub	sp, #24
 800fe52:	af00      	add	r7, sp, #0
 800fe54:	6078      	str	r0, [r7, #4]
 800fe56:	6039      	str	r1, [r7, #0]
	function(__x).swap(*this);
 800fe58:	f107 0308 	add.w	r3, r7, #8
 800fe5c:	6839      	ldr	r1, [r7, #0]
 800fe5e:	4618      	mov	r0, r3
 800fe60:	f000 fb83 	bl	801056a <_ZNSt8functionIFvvEEC1ERKS1_>
 800fe64:	f107 0308 	add.w	r3, r7, #8
 800fe68:	6879      	ldr	r1, [r7, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f000 fb9f 	bl	80105ae <_ZNSt8functionIFvvEE4swapERS1_>
 800fe70:	f107 0308 	add.w	r3, r7, #8
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7fd fc39 	bl	800d6ec <_ZNSt8functionIFvvEED1Ev>
	return *this;
 800fe7a:	687b      	ldr	r3, [r7, #4]
      }
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	3718      	adds	r7, #24
 800fe80:	46bd      	mov	sp, r7
 800fe82:	bd80      	pop	{r7, pc}

0800fe84 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800fe84:	b580      	push	{r7, lr}
 800fe86:	b084      	sub	sp, #16
 800fe88:	af00      	add	r7, sp, #0
 800fe8a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	f107 030c 	add.w	r3, r7, #12
 800fe92:	4611      	mov	r1, r2
 800fe94:	4618      	mov	r0, r3
 800fe96:	f000 fbab 	bl	80105f0 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b084      	sub	sp, #16
 800fea8:	af00      	add	r7, sp, #0
 800feaa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	1d1a      	adds	r2, r3, #4
 800feb0:	f107 030c 	add.w	r3, r7, #12
 800feb4:	4611      	mov	r1, r2
 800feb6:	4618      	mov	r0, r3
 800feb8:	f000 fb9a 	bl	80105f0 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	4618      	mov	r0, r3
 800fec0:	3710      	adds	r7, #16
 800fec2:	46bd      	mov	sp, r7
 800fec4:	bd80      	pop	{r7, pc}
	...

0800fec8 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_>:
      operator[](key_type&& __k)
 800fec8:	b590      	push	{r4, r7, lr}
 800feca:	b08b      	sub	sp, #44	; 0x2c
 800fecc:	af02      	add	r7, sp, #8
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 800fed2:	6839      	ldr	r1, [r7, #0]
 800fed4:	6878      	ldr	r0, [r7, #4]
 800fed6:	f000 fb9b 	bl	8010610 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>
 800feda:	4603      	mov	r3, r0
 800fedc:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 800fede:	6878      	ldr	r0, [r7, #4]
 800fee0:	f000 fba5 	bl	801062e <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>
 800fee4:	4603      	mov	r3, r0
 800fee6:	60fb      	str	r3, [r7, #12]
 800fee8:	f107 020c 	add.w	r2, r7, #12
 800feec:	f107 0308 	add.w	r3, r7, #8
 800fef0:	4611      	mov	r1, r2
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7fb f870 	bl	800afd8 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEES6_>
 800fef8:	4603      	mov	r3, r0
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d112      	bne.n	800ff24 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x5c>
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fba2 	bl	8010648 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>
 800ff04:	f107 0308 	add.w	r3, r7, #8
 800ff08:	4618      	mov	r0, r3
 800ff0a:	f000 fbaa 	bl	8010662 <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 800ff0e:	4603      	mov	r3, r0
 800ff10:	461a      	mov	r2, r3
 800ff12:	f107 0310 	add.w	r3, r7, #16
 800ff16:	6839      	ldr	r1, [r7, #0]
 800ff18:	4618      	mov	r0, r3
 800ff1a:	f7fb f871 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d001      	beq.n	800ff28 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x60>
 800ff24:	2301      	movs	r3, #1
 800ff26:	e000      	b.n	800ff2a <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0x62>
 800ff28:	2300      	movs	r3, #0
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d01f      	beq.n	800ff6e <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xa6>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800ff2e:	687c      	ldr	r4, [r7, #4]
 800ff30:	f107 0208 	add.w	r2, r7, #8
 800ff34:	f107 0314 	add.w	r3, r7, #20
 800ff38:	4611      	mov	r1, r2
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	f7fb f875 	bl	800b02a <_ZNSt23_Rb_tree_const_iteratorISt4pairIK9PrecisionmEEC1ERKSt17_Rb_tree_iteratorIS3_E>
					std::forward_as_tuple(std::move(__k)),
 800ff40:	6838      	ldr	r0, [r7, #0]
 800ff42:	f000 fb9c 	bl	801067e <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>
 800ff46:	4602      	mov	r2, r0
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 800ff48:	f107 0318 	add.w	r3, r7, #24
 800ff4c:	4611      	mov	r1, r2
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f000 fba0 	bl	8010694 <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>
 800ff54:	f107 0218 	add.w	r2, r7, #24
 800ff58:	f107 031c 	add.w	r3, r7, #28
 800ff5c:	9300      	str	r3, [sp, #0]
 800ff5e:	4613      	mov	r3, r2
 800ff60:	4a08      	ldr	r2, [pc, #32]	; (800ff84 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEEixEOS0_+0xbc>)
 800ff62:	6979      	ldr	r1, [r7, #20]
 800ff64:	4620      	mov	r0, r4
 800ff66:	f000 fba6 	bl	80106b6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 800ff6e:	f107 0308 	add.w	r3, r7, #8
 800ff72:	4618      	mov	r0, r3
 800ff74:	f000 fb75 	bl	8010662 <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>
 800ff78:	4603      	mov	r3, r0
 800ff7a:	3304      	adds	r3, #4
      }
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	3724      	adds	r7, #36	; 0x24
 800ff80:	46bd      	mov	sp, r7
 800ff82:	bd90      	pop	{r4, r7, pc}
 800ff84:	08020cbc 	.word	0x08020cbc

0800ff88 <_ZNSt8optionalIP13StreamMessageEC1IS1_Lb1EEEOT_>:
	optional(_Up&& __t)
 800ff88:	b5b0      	push	{r4, r5, r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
 800ff90:	6039      	str	r1, [r7, #0]
	: _Base(std::in_place, std::forward<_Up>(__t)) { }
 800ff92:	687c      	ldr	r4, [r7, #4]
 800ff94:	6838      	ldr	r0, [r7, #0]
 800ff96:	f000 fbcc 	bl	8010732 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	4629      	mov	r1, r5
 800ffa0:	4620      	mov	r0, r4
 800ffa2:	f000 fbe2 	bl	801076a <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	3708      	adds	r7, #8
 800ffac:	46bd      	mov	sp, r7
 800ffae:	bdb0      	pop	{r4, r5, r7, pc}

0800ffb0 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	685a      	ldr	r2, [r3, #4]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	109b      	asrs	r3, r3, #2
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	370c      	adds	r7, #12
 800ffc8:	46bd      	mov	sp, r7
 800ffca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffce:	4770      	bx	lr

0800ffd0 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b082      	sub	sp, #8
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800ffd8:	6878      	ldr	r0, [r7, #4]
 800ffda:	f000 fbdb 	bl	8010794 <_ZNSaIP13StreamMessageEC1Ev>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	f000 fbe3 	bl	80107ac <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}

0800fff0 <_ZNSaIP13StreamMessageED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 800fff0:	b480      	push	{r7}
 800fff2:	b083      	sub	sp, #12
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	687b      	ldr	r3, [r7, #4]
 800fffa:	4618      	mov	r0, r3
 800fffc:	370c      	adds	r7, #12
 800fffe:	46bd      	mov	sp, r7
 8010000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010004:	4770      	bx	lr

08010006 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010006:	b580      	push	{r7, lr}
 8010008:	b082      	sub	sp, #8
 801000a:	af00      	add	r7, sp, #0
 801000c:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	689a      	ldr	r2, [r3, #8]
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	1ad3      	subs	r3, r2, r3
 801001c:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 801001e:	461a      	mov	r2, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f000 fbd7 	bl	80107d4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      }
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	4618      	mov	r0, r3
 801002a:	f7fd fece 	bl	800ddca <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE12_Vector_implD1Ev>
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	4618      	mov	r0, r3
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}

08010038 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010038:	b5b0      	push	{r4, r5, r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681c      	ldr	r4, [r3, #0]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	4618      	mov	r0, r3
 801004c:	f000 fbd5 	bl	80107fa <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8010050:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010052:	461a      	mov	r2, r3
 8010054:	4629      	mov	r1, r5
 8010056:	4620      	mov	r0, r4
 8010058:	f000 fbda 	bl	8010810 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>
      }
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	4618      	mov	r0, r3
 8010060:	f7ff ffd1 	bl	8010006 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EED1Ev>
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	4618      	mov	r0, r3
 8010068:	3708      	adds	r7, #8
 801006a:	46bd      	mov	sp, r7
 801006c:	bdb0      	pop	{r4, r5, r7, pc}

0801006e <_ZNSt6vectorIP6StreamSaIS1_EE9push_backEOS1_>:
      push_back(value_type&& __x)
 801006e:	b580      	push	{r7, lr}
 8010070:	b082      	sub	sp, #8
 8010072:	af00      	add	r7, sp, #0
 8010074:	6078      	str	r0, [r7, #4]
 8010076:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8010078:	6838      	ldr	r0, [r7, #0]
 801007a:	f000 fbd7 	bl	801082c <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>
 801007e:	4603      	mov	r3, r0
 8010080:	4619      	mov	r1, r3
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f000 fbdd 	bl	8010842 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>
 8010088:	bf00      	nop
 801008a:	3708      	adds	r7, #8
 801008c:	46bd      	mov	sp, r7
 801008e:	bd80      	pop	{r7, pc}

08010090 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8010090:	b580      	push	{r7, lr}
 8010092:	b084      	sub	sp, #16
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8010098:	687a      	ldr	r2, [r7, #4]
 801009a:	f107 030c 	add.w	r3, r7, #12
 801009e:	4611      	mov	r1, r2
 80100a0:	4618      	mov	r0, r3
 80100a2:	f000 fc00 	bl	80108a6 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	4618      	mov	r0, r3
 80100aa:	3710      	adds	r7, #16
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}

080100b0 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b084      	sub	sp, #16
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	1d1a      	adds	r2, r3, #4
 80100bc:	f107 030c 	add.w	r3, r7, #12
 80100c0:	4611      	mov	r1, r2
 80100c2:	4618      	mov	r0, r3
 80100c4:	f000 fbef 	bl	80108a6 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80100c8:	68fb      	ldr	r3, [r7, #12]
 80100ca:	4618      	mov	r0, r3
 80100cc:	3710      	adds	r7, #16
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}

080100d2 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80100d2:	b580      	push	{r7, lr}
 80100d4:	b082      	sub	sp, #8
 80100d6:	af00      	add	r7, sp, #0
 80100d8:	6078      	str	r0, [r7, #4]
 80100da:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	685a      	ldr	r2, [r3, #4]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	429a      	cmp	r2, r3
 80100e6:	d00c      	beq.n	8010102 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80100e8:	6878      	ldr	r0, [r7, #4]
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	683a      	ldr	r2, [r7, #0]
 80100f0:	4619      	mov	r1, r3
 80100f2:	f000 fbfd 	bl	80108f0 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	1d1a      	adds	r2, r3, #4
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	605a      	str	r2, [r3, #4]
      }
 8010100:	e008      	b.n	8010114 <_ZNSt6vectorIP13StreamMessageSaIS1_EE9push_backERKS1_+0x42>
	  _M_realloc_insert(end(), __x);
 8010102:	6878      	ldr	r0, [r7, #4]
 8010104:	f7ff ffd4 	bl	80100b0 <_ZNSt6vectorIP13StreamMessageSaIS1_EE3endEv>
 8010108:	4603      	mov	r3, r0
 801010a:	683a      	ldr	r2, [r7, #0]
 801010c:	4619      	mov	r1, r3
 801010e:	6878      	ldr	r0, [r7, #4]
 8010110:	f000 fc00 	bl	8010914 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8010114:	bf00      	nop
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}

0801011c <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 801011c:	b590      	push	{r4, r7, lr}
 801011e:	b083      	sub	sp, #12
 8010120:	af00      	add	r7, sp, #0
 8010122:	6078      	str	r0, [r7, #4]
 8010124:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	4618      	mov	r0, r3
 801012a:	f7fd fa52 	bl	800d5d2 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 801012e:	463b      	mov	r3, r7
 8010130:	4618      	mov	r0, r3
 8010132:	f000 fc6b 	bl	8010a0c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>
 8010136:	4603      	mov	r3, r0
 8010138:	2b00      	cmp	r3, #0
 801013a:	d00f      	beq.n	801015c <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 801013c:	687c      	ldr	r4, [r7, #4]
 801013e:	463b      	mov	r3, r7
 8010140:	4618      	mov	r0, r3
 8010142:	f000 fc6e 	bl	8010a22 <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8010146:	4603      	mov	r3, r0
 8010148:	4619      	mov	r1, r3
 801014a:	4620      	mov	r0, r4
 801014c:	f000 fc74 	bl	8010a38 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>
	    _M_invoker = &_My_handler::_M_invoke;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	4a05      	ldr	r2, [pc, #20]	; (8010168 <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x4c>)
 8010154:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4a04      	ldr	r2, [pc, #16]	; (801016c <_ZNSt8functionIFvvEEC1IZN6Stream11add_messageEmP13StreamMessagetEUlvE_vvEET_+0x50>)
 801015a:	609a      	str	r2, [r3, #8]
      }
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	4618      	mov	r0, r3
 8010160:	370c      	adds	r7, #12
 8010162:	46bd      	mov	sp, r7
 8010164:	bd90      	pop	{r4, r7, pc}
 8010166:	bf00      	nop
 8010168:	08010a5d 	.word	0x08010a5d
 801016c:	08010a7b 	.word	0x08010a7b

08010170 <_ZNKSt8optionalIP13StreamMessageEcvbEv>:
      constexpr explicit operator bool() const noexcept
 8010170:	b580      	push	{r7, lr}
 8010172:	b082      	sub	sp, #8
 8010174:	af00      	add	r7, sp, #0
 8010176:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8010178:	6878      	ldr	r0, [r7, #4]
 801017a:	f7fd ff5e 	bl	800e03a <_ZNKSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 801017e:	4603      	mov	r3, r0
 8010180:	4618      	mov	r0, r3
 8010182:	3708      	adds	r7, #8
 8010184:	46bd      	mov	sp, r7
 8010186:	bd80      	pop	{r7, pc}

08010188 <_ZNSt19_Optional_base_implIP13StreamMessageSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 8010188:	b580      	push	{r7, lr}
 801018a:	b082      	sub	sp, #8
 801018c:	af00      	add	r7, sp, #0
 801018e:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	4618      	mov	r0, r3
 8010194:	f000 fc90 	bl	8010ab8 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>
 8010198:	4603      	mov	r3, r0
      }
 801019a:	4618      	mov	r0, r3
 801019c:	3708      	adds	r7, #8
 801019e:	46bd      	mov	sp, r7
 80101a0:	bd80      	pop	{r7, pc}

080101a2 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 80101a2:	b580      	push	{r7, lr}
 80101a4:	b084      	sub	sp, #16
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 80101aa:	687a      	ldr	r2, [r7, #4]
 80101ac:	f107 030c 	add.w	r3, r7, #12
 80101b0:	4611      	mov	r1, r2
 80101b2:	4618      	mov	r0, r3
 80101b4:	f000 fc8b 	bl	8010ace <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}

080101c2 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80101c2:	b580      	push	{r7, lr}
 80101c4:	b084      	sub	sp, #16
 80101c6:	af00      	add	r7, sp, #0
 80101c8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	1d1a      	adds	r2, r3, #4
 80101ce:	f107 030c 	add.w	r3, r7, #12
 80101d2:	4611      	mov	r1, r2
 80101d4:	4618      	mov	r0, r3
 80101d6:	f000 fc7a 	bl	8010ace <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	4618      	mov	r0, r3
 80101de:	3710      	adds	r7, #16
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}

080101e4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6878      	ldr	r0, [r7, #4]
 80101ee:	f000 fc8e 	bl	8010b0e <_ZNSaIP5FieldIJEEED1Ev>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4618      	mov	r0, r3
 80101f6:	3708      	adds	r7, #8
 80101f8:	46bd      	mov	sp, r7
 80101fa:	bd80      	pop	{r7, pc}

080101fc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>:
      _Vector_base() = default;
 80101fc:	b580      	push	{r7, lr}
 80101fe:	b082      	sub	sp, #8
 8010200:	af00      	add	r7, sp, #0
 8010202:	6078      	str	r0, [r7, #4]
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	4618      	mov	r0, r3
 8010208:	f000 fc71 	bl	8010aee <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	4618      	mov	r0, r3
 8010210:	3708      	adds	r7, #8
 8010212:	46bd      	mov	sp, r7
 8010214:	bd80      	pop	{r7, pc}

08010216 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>:
      vector() = default;
 8010216:	b580      	push	{r7, lr}
 8010218:	b082      	sub	sp, #8
 801021a:	af00      	add	r7, sp, #0
 801021c:	6078      	str	r0, [r7, #4]
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	4618      	mov	r0, r3
 8010222:	f7ff ffeb 	bl	80101fc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EEC1Ev>
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	4618      	mov	r0, r3
 801022a:	3708      	adds	r7, #8
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010230:	b590      	push	{r4, r7, lr}
 8010232:	b085      	sub	sp, #20
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	607a      	str	r2, [r7, #4]
 801023a:	603b      	str	r3, [r7, #0]
 801023c:	460b      	mov	r3, r1
 801023e:	817b      	strh	r3, [r7, #10]
 8010240:	68fb      	ldr	r3, [r7, #12]
 8010242:	2200      	movs	r2, #0
 8010244:	601a      	str	r2, [r3, #0]
 8010246:	897a      	ldrh	r2, [r7, #10]
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	809a      	strh	r2, [r3, #4]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	3308      	adds	r3, #8
 8010250:	4618      	mov	r0, r3
 8010252:	f7ff ffe0 	bl	8010216 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	687a      	ldr	r2, [r7, #4]
 801025a:	615a      	str	r2, [r3, #20]
        build(fields...);
 801025c:	6839      	ldr	r1, [r7, #0]
 801025e:	68f8      	ldr	r0, [r7, #12]
 8010260:	f000 fc94 	bl	8010b8c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010264:	68fc      	ldr	r4, [r7, #12]
 8010266:	f107 030a 	add.w	r3, r7, #10
 801026a:	4619      	mov	r1, r3
 801026c:	4804      	ldr	r0, [pc, #16]	; (8010280 <_ZN6PacketC1IJhEEEtPFvvEDpPT_+0x50>)
 801026e:	f000 fcb1 	bl	8010bd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010272:	4603      	mov	r3, r0
 8010274:	601c      	str	r4, [r3, #0]
    }
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	4618      	mov	r0, r3
 801027a:	3714      	adds	r7, #20
 801027c:	46bd      	mov	sp, r7
 801027e:	bd90      	pop	{r4, r7, pc}
 8010280:	240001ac 	.word	0x240001ac

08010284 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010284:	b590      	push	{r4, r7, lr}
 8010286:	b085      	sub	sp, #20
 8010288:	af00      	add	r7, sp, #0
 801028a:	60f8      	str	r0, [r7, #12]
 801028c:	607a      	str	r2, [r7, #4]
 801028e:	603b      	str	r3, [r7, #0]
 8010290:	460b      	mov	r3, r1
 8010292:	817b      	strh	r3, [r7, #10]
 8010294:	68fb      	ldr	r3, [r7, #12]
 8010296:	2200      	movs	r2, #0
 8010298:	601a      	str	r2, [r3, #0]
 801029a:	897a      	ldrh	r2, [r7, #10]
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	809a      	strh	r2, [r3, #4]
 80102a0:	68fb      	ldr	r3, [r7, #12]
 80102a2:	3308      	adds	r3, #8
 80102a4:	4618      	mov	r0, r3
 80102a6:	f7ff ffb6 	bl	8010216 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 80102aa:	68fb      	ldr	r3, [r7, #12]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	615a      	str	r2, [r3, #20]
        build(fields...);
 80102b0:	6a3a      	ldr	r2, [r7, #32]
 80102b2:	6839      	ldr	r1, [r7, #0]
 80102b4:	68f8      	ldr	r0, [r7, #12]
 80102b6:	f000 fce9 	bl	8010c8c <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 80102ba:	68fc      	ldr	r4, [r7, #12]
 80102bc:	f107 030a 	add.w	r3, r7, #10
 80102c0:	4619      	mov	r1, r3
 80102c2:	4805      	ldr	r0, [pc, #20]	; (80102d8 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_+0x54>)
 80102c4:	f000 fc86 	bl	8010bd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 80102c8:	4603      	mov	r3, r0
 80102ca:	601c      	str	r4, [r3, #0]
    }
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	4618      	mov	r0, r3
 80102d0:	3714      	adds	r7, #20
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd90      	pop	{r4, r7, pc}
 80102d6:	bf00      	nop
 80102d8:	240001ac 	.word	0x240001ac

080102dc <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 80102dc:	b590      	push	{r4, r7, lr}
 80102de:	b085      	sub	sp, #20
 80102e0:	af00      	add	r7, sp, #0
 80102e2:	60f8      	str	r0, [r7, #12]
 80102e4:	607a      	str	r2, [r7, #4]
 80102e6:	603b      	str	r3, [r7, #0]
 80102e8:	460b      	mov	r3, r1
 80102ea:	817b      	strh	r3, [r7, #10]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	2200      	movs	r2, #0
 80102f0:	601a      	str	r2, [r3, #0]
 80102f2:	897a      	ldrh	r2, [r7, #10]
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	809a      	strh	r2, [r3, #4]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	3308      	adds	r3, #8
 80102fc:	4618      	mov	r0, r3
 80102fe:	f7ff ff8a 	bl	8010216 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	687a      	ldr	r2, [r7, #4]
 8010306:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010308:	6a3a      	ldr	r2, [r7, #32]
 801030a:	6839      	ldr	r1, [r7, #0]
 801030c:	68f8      	ldr	r0, [r7, #12]
 801030e:	f000 fce5 	bl	8010cdc <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 8010312:	68fc      	ldr	r4, [r7, #12]
 8010314:	f107 030a 	add.w	r3, r7, #10
 8010318:	4619      	mov	r1, r3
 801031a:	4805      	ldr	r0, [pc, #20]	; (8010330 <_ZN6PacketC1IJhmEEEtPFvvEDpPT_+0x54>)
 801031c:	f000 fc5a 	bl	8010bd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010320:	4603      	mov	r3, r0
 8010322:	601c      	str	r4, [r3, #0]
    }
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	4618      	mov	r0, r3
 8010328:	3714      	adds	r7, #20
 801032a:	46bd      	mov	sp, r7
 801032c:	bd90      	pop	{r4, r7, pc}
 801032e:	bf00      	nop
 8010330:	240001ac 	.word	0x240001ac

08010334 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>:
    Packet(uint16_t id, void (*callback)(), T*... fields) : id(id), callback(callback) {
 8010334:	b590      	push	{r4, r7, lr}
 8010336:	b085      	sub	sp, #20
 8010338:	af00      	add	r7, sp, #0
 801033a:	60f8      	str	r0, [r7, #12]
 801033c:	607a      	str	r2, [r7, #4]
 801033e:	603b      	str	r3, [r7, #0]
 8010340:	460b      	mov	r3, r1
 8010342:	817b      	strh	r3, [r7, #10]
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	2200      	movs	r2, #0
 8010348:	601a      	str	r2, [r3, #0]
 801034a:	897a      	ldrh	r2, [r7, #10]
 801034c:	68fb      	ldr	r3, [r7, #12]
 801034e:	809a      	strh	r2, [r3, #4]
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	3308      	adds	r3, #8
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff ff5e 	bl	8010216 <_ZNSt6vectorIP5FieldIJEESaIS2_EEC1Ev>
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	687a      	ldr	r2, [r7, #4]
 801035e:	615a      	str	r2, [r3, #20]
        build(fields...);
 8010360:	6a3a      	ldr	r2, [r7, #32]
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	68f8      	ldr	r0, [r7, #12]
 8010366:	f000 fce1 	bl	8010d2c <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>
        Packet::all_packets[id] = this;
 801036a:	68fc      	ldr	r4, [r7, #12]
 801036c:	f107 030a 	add.w	r3, r7, #10
 8010370:	4619      	mov	r1, r3
 8010372:	4805      	ldr	r0, [pc, #20]	; (8010388 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_+0x54>)
 8010374:	f000 fc2e 	bl	8010bd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>
 8010378:	4603      	mov	r3, r0
 801037a:	601c      	str	r4, [r3, #0]
    }
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	4618      	mov	r0, r3
 8010380:	3714      	adds	r7, #20
 8010382:	46bd      	mov	sp, r7
 8010384:	bd90      	pop	{r4, r7, pc}
 8010386:	bf00      	nop
 8010388:	240001ac 	.word	0x240001ac

0801038c <_ZNKSt8optionalIP3PinEcvbEv>:
      constexpr explicit operator bool() const noexcept
 801038c:	b580      	push	{r7, lr}
 801038e:	b082      	sub	sp, #8
 8010390:	af00      	add	r7, sp, #0
 8010392:	6078      	str	r0, [r7, #4]
      { return this->_M_is_engaged(); }
 8010394:	6878      	ldr	r0, [r7, #4]
 8010396:	f7fd ff4f 	bl	800e238 <_ZNKSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE13_M_is_engagedEv>
 801039a:	4603      	mov	r3, r0
 801039c:	4618      	mov	r0, r3
 801039e:	3708      	adds	r7, #8
 80103a0:	46bd      	mov	sp, r7
 80103a2:	bd80      	pop	{r7, pc}

080103a4 <_ZNSt19_Optional_base_implIP3PinSt14_Optional_baseIS1_Lb1ELb1EEE6_M_getEv>:
      _M_get() noexcept
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b082      	sub	sp, #8
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
	return static_cast<_Dp*>(this)->_M_payload._M_get();
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	4618      	mov	r0, r3
 80103b0:	f000 fce4 	bl	8010d7c <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>
 80103b4:	4603      	mov	r3, r0
      }
 80103b6:	4618      	mov	r0, r3
 80103b8:	3708      	adds	r7, #8
 80103ba:	46bd      	mov	sp, r7
 80103bc:	bd80      	pop	{r7, pc}

080103be <_ZNKSt3mapIP3PinP10DigitalOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 80103be:	b580      	push	{r7, lr}
 80103c0:	b084      	sub	sp, #16
 80103c2:	af00      	add	r7, sp, #0
 80103c4:	6078      	str	r0, [r7, #4]
 80103c6:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6839      	ldr	r1, [r7, #0]
 80103cc:	4618      	mov	r0, r3
 80103ce:	f000 fce0 	bl	8010d92 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 80103d2:	4603      	mov	r3, r0
 80103d4:	60bb      	str	r3, [r7, #8]
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	4618      	mov	r0, r3
 80103da:	f000 fd19 	bl	8010e10 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 80103de:	4603      	mov	r3, r0
 80103e0:	60fb      	str	r3, [r7, #12]
 80103e2:	f107 020c 	add.w	r2, r7, #12
 80103e6:	f107 0308 	add.w	r3, r7, #8
 80103ea:	4611      	mov	r1, r2
 80103ec:	4618      	mov	r0, r3
 80103ee:	f000 fd20 	bl	8010e32 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 80103f2:	4603      	mov	r3, r0
 80103f4:	f083 0301 	eor.w	r3, r3, #1
 80103f8:	b2db      	uxtb	r3, r3
 80103fa:	4618      	mov	r0, r3
 80103fc:	3710      	adds	r7, #16
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}

08010402 <_ZNKSt3mapIP3PinP9AnalogOutSt4lessIS1_ESaISt4pairIKS1_S3_EEE8containsERS7_>:
      contains(const key_type& __x) const
 8010402:	b580      	push	{r7, lr}
 8010404:	b084      	sub	sp, #16
 8010406:	af00      	add	r7, sp, #0
 8010408:	6078      	str	r0, [r7, #4]
 801040a:	6039      	str	r1, [r7, #0]
      { return _M_t.find(__x) != _M_t.end(); }
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	6839      	ldr	r1, [r7, #0]
 8010410:	4618      	mov	r0, r3
 8010412:	f000 fd22 	bl	8010e5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>
 8010416:	4603      	mov	r3, r0
 8010418:	60bb      	str	r3, [r7, #8]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	4618      	mov	r0, r3
 801041e:	f000 fd5b 	bl	8010ed8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010422:	4603      	mov	r3, r0
 8010424:	60fb      	str	r3, [r7, #12]
 8010426:	f107 020c 	add.w	r2, r7, #12
 801042a:	f107 0308 	add.w	r3, r7, #8
 801042e:	4611      	mov	r1, r2
 8010430:	4618      	mov	r0, r3
 8010432:	f000 fd62 	bl	8010efa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8010436:	4603      	mov	r3, r0
 8010438:	f083 0301 	eor.w	r3, r3, #1
 801043c:	b2db      	uxtb	r3, r3
 801043e:	4618      	mov	r0, r3
 8010440:	3710      	adds	r7, #16
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}
	...

08010448 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8010448:	b590      	push	{r4, r7, lr}
 801044a:	b083      	sub	sp, #12
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
 8010450:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	4618      	mov	r0, r3
 8010456:	f7fd f8bc 	bl	800d5d2 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 801045a:	463b      	mov	r3, r7
 801045c:	4618      	mov	r0, r3
 801045e:	f000 fd60 	bl	8010f22 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>
 8010462:	4603      	mov	r3, r0
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00f      	beq.n	8010488 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8010468:	687c      	ldr	r4, [r7, #4]
 801046a:	463b      	mov	r3, r7
 801046c:	4618      	mov	r0, r3
 801046e:	f000 fd63 	bl	8010f38 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8010472:	4603      	mov	r3, r0
 8010474:	4619      	mov	r1, r3
 8010476:	4620      	mov	r0, r4
 8010478:	f000 fd69 	bl	8010f4e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	4a05      	ldr	r2, [pc, #20]	; (8010494 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x4c>)
 8010480:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	4a04      	ldr	r2, [pc, #16]	; (8010498 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE_vvEET_+0x50>)
 8010486:	609a      	str	r2, [r3, #8]
      }
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	4618      	mov	r0, r3
 801048c:	370c      	adds	r7, #12
 801048e:	46bd      	mov	sp, r7
 8010490:	bd90      	pop	{r4, r7, pc}
 8010492:	bf00      	nop
 8010494:	08010f73 	.word	0x08010f73
 8010498:	08010f91 	.word	0x08010f91

0801049c <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_>:
      function<_Res(_ArgTypes...)>::
 801049c:	b590      	push	{r4, r7, lr}
 801049e:	b083      	sub	sp, #12
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
 80104a4:	7039      	strb	r1, [r7, #0]
      : _Function_base()
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fd f892 	bl	800d5d2 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 80104ae:	463b      	mov	r3, r7
 80104b0:	4618      	mov	r0, r3
 80104b2:	f000 fd8c 	bl	8010fce <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d00f      	beq.n	80104dc <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 80104bc:	687c      	ldr	r4, [r7, #4]
 80104be:	463b      	mov	r3, r7
 80104c0:	4618      	mov	r0, r3
 80104c2:	f000 fd8f 	bl	8010fe4 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 80104c6:	4603      	mov	r3, r0
 80104c8:	4619      	mov	r1, r3
 80104ca:	4620      	mov	r0, r4
 80104cc:	f000 fd95 	bl	8010ffa <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>
	    _M_invoker = &_My_handler::_M_invoke;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	4a05      	ldr	r2, [pc, #20]	; (80104e8 <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x4c>)
 80104d4:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	4a04      	ldr	r2, [pc, #16]	; (80104ec <_ZNSt8functionIFvvEEC1IZN8TUDTests5setupEvEUlvE0_vvEET_+0x50>)
 80104da:	609a      	str	r2, [r3, #8]
      }
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	4618      	mov	r0, r3
 80104e0:	370c      	adds	r7, #12
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd90      	pop	{r4, r7, pc}
 80104e6:	bf00      	nop
 80104e8:	0801101f 	.word	0x0801101f
 80104ec:	0801103d 	.word	0x0801103d

080104f0 <_ZSt4moveIRP5TimerEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80104f0:	b480      	push	{r7}
 80104f2:	b083      	sub	sp, #12
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	4618      	mov	r0, r3
 80104fc:	370c      	adds	r7, #12
 80104fe:	46bd      	mov	sp, r7
 8010500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010504:	4770      	bx	lr

08010506 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010506:	b5b0      	push	{r4, r5, r7, lr}
 8010508:	b082      	sub	sp, #8
 801050a:	af00      	add	r7, sp, #0
 801050c:	6078      	str	r0, [r7, #4]
 801050e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	685a      	ldr	r2, [r3, #4]
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	689b      	ldr	r3, [r3, #8]
 8010518:	429a      	cmp	r2, r3
 801051a:	d011      	beq.n	8010540 <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801051c:	687c      	ldr	r4, [r7, #4]
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	685d      	ldr	r5, [r3, #4]
 8010522:	6838      	ldr	r0, [r7, #0]
 8010524:	f000 fda9 	bl	801107a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8010528:	4603      	mov	r3, r0
 801052a:	461a      	mov	r2, r3
 801052c:	4629      	mov	r1, r5
 801052e:	4620      	mov	r0, r4
 8010530:	f000 fdc3 	bl	80110ba <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	685b      	ldr	r3, [r3, #4]
 8010538:	1d1a      	adds	r2, r3, #4
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	605a      	str	r2, [r3, #4]
 801053e:	e00c      	b.n	801055a <_ZNSt6vectorIP5TimerSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7ff fcaf 	bl	800fea4 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 8010546:	4604      	mov	r4, r0
 8010548:	6838      	ldr	r0, [r7, #0]
 801054a:	f000 fd96 	bl	801107a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 801054e:	4603      	mov	r3, r0
 8010550:	461a      	mov	r2, r3
 8010552:	4621      	mov	r1, r4
 8010554:	6878      	ldr	r0, [r7, #4]
 8010556:	f000 fdc3 	bl	80110e0 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 801055a:	6878      	ldr	r0, [r7, #4]
 801055c:	f000 fe3c 	bl	80111d8 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>
 8010560:	4603      	mov	r3, r0
      }
 8010562:	4618      	mov	r0, r3
 8010564:	3708      	adds	r7, #8
 8010566:	46bd      	mov	sp, r7
 8010568:	bdb0      	pop	{r4, r5, r7, pc}

0801056a <_ZNSt8functionIFvvEEC1ERKS1_>:
    function<_Res(_ArgTypes...)>::
 801056a:	b580      	push	{r7, lr}
 801056c:	b082      	sub	sp, #8
 801056e:	af00      	add	r7, sp, #0
 8010570:	6078      	str	r0, [r7, #4]
 8010572:	6039      	str	r1, [r7, #0]
    : _Function_base()
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	4618      	mov	r0, r3
 8010578:	f7fd f82b 	bl	800d5d2 <_ZNSt14_Function_baseC1Ev>
      if (static_cast<bool>(__x))
 801057c:	6838      	ldr	r0, [r7, #0]
 801057e:	f000 fe46 	bl	801120e <_ZNKSt8functionIFvvEEcvbEv>
 8010582:	4603      	mov	r3, r0
 8010584:	2b00      	cmp	r3, #0
 8010586:	d00d      	beq.n	80105a4 <_ZNSt8functionIFvvEEC1ERKS1_+0x3a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	689b      	ldr	r3, [r3, #8]
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	6839      	ldr	r1, [r7, #0]
 8010590:	2202      	movs	r2, #2
 8010592:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8010594:	683b      	ldr	r3, [r7, #0]
 8010596:	68da      	ldr	r2, [r3, #12]
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	60da      	str	r2, [r3, #12]
	  _M_manager = __x._M_manager;
 801059c:	683b      	ldr	r3, [r7, #0]
 801059e:	689a      	ldr	r2, [r3, #8]
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	609a      	str	r2, [r3, #8]
    }
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	4618      	mov	r0, r3
 80105a8:	3708      	adds	r7, #8
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}

080105ae <_ZNSt8functionIFvvEE4swapERS1_>:
      void swap(function& __x) noexcept
 80105ae:	b580      	push	{r7, lr}
 80105b0:	b082      	sub	sp, #8
 80105b2:	af00      	add	r7, sp, #0
 80105b4:	6078      	str	r0, [r7, #4]
 80105b6:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	683a      	ldr	r2, [r7, #0]
 80105bc:	4611      	mov	r1, r2
 80105be:	4618      	mov	r0, r3
 80105c0:	f000 fe35 	bl	801122e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	f103 0208 	add.w	r2, r3, #8
 80105ca:	683b      	ldr	r3, [r7, #0]
 80105cc:	3308      	adds	r3, #8
 80105ce:	4619      	mov	r1, r3
 80105d0:	4610      	mov	r0, r2
 80105d2:	f000 fe53 	bl	801127c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f103 020c 	add.w	r2, r3, #12
 80105dc:	683b      	ldr	r3, [r7, #0]
 80105de:	330c      	adds	r3, #12
 80105e0:	4619      	mov	r1, r3
 80105e2:	4610      	mov	r0, r2
 80105e4:	f000 fe69 	bl	80112ba <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>
      }
 80105e8:	bf00      	nop
 80105ea:	3708      	adds	r7, #8
 80105ec:	46bd      	mov	sp, r7
 80105ee:	bd80      	pop	{r7, pc}

080105f0 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80105f0:	b480      	push	{r7}
 80105f2:	b083      	sub	sp, #12
 80105f4:	af00      	add	r7, sp, #0
 80105f6:	6078      	str	r0, [r7, #4]
 80105f8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80105fa:	683b      	ldr	r3, [r7, #0]
 80105fc:	681a      	ldr	r2, [r3, #0]
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	601a      	str	r2, [r3, #0]
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	4618      	mov	r0, r3
 8010606:	370c      	adds	r7, #12
 8010608:	46bd      	mov	sp, r7
 801060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801060e:	4770      	bx	lr

08010610 <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE11lower_boundERS4_>:
      lower_bound(const key_type& __x)
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
 8010618:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	6839      	ldr	r1, [r7, #0]
 801061e:	4618      	mov	r0, r3
 8010620:	f000 fe6a 	bl	80112f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>
 8010624:	4603      	mov	r3, r0
 8010626:	4618      	mov	r0, r3
 8010628:	3708      	adds	r7, #8
 801062a:	46bd      	mov	sp, r7
 801062c:	bd80      	pop	{r7, pc}

0801062e <_ZNSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 801062e:	b580      	push	{r7, lr}
 8010630:	b082      	sub	sp, #8
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
      { return _M_t.end(); }
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	4618      	mov	r0, r3
 801063a:	f7fa fdf0 	bl	800b21e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE3endEv>
 801063e:	4603      	mov	r3, r0
 8010640:	4618      	mov	r0, r3
 8010642:	3708      	adds	r7, #8
 8010644:	46bd      	mov	sp, r7
 8010646:	bd80      	pop	{r7, pc}

08010648 <_ZNKSt3mapI9PrecisionmSt4lessIS0_ESaISt4pairIKS0_mEEE8key_compEv>:
      key_comp() const
 8010648:	b590      	push	{r4, r7, lr}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	4618      	mov	r0, r3
 8010654:	f000 fe67 	bl	8011326 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>
 8010658:	bf00      	nop
 801065a:	4620      	mov	r0, r4
 801065c:	370c      	adds	r7, #12
 801065e:	46bd      	mov	sp, r7
 8010660:	bd90      	pop	{r4, r7, pc}

08010662 <_ZNKSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8010662:	b580      	push	{r7, lr}
 8010664:	b082      	sub	sp, #8
 8010666:	af00      	add	r7, sp, #0
 8010668:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Link_type>(_M_node)->_M_valptr(); }
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	4618      	mov	r0, r3
 8010670:	f7fa fde6 	bl	800b240 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 8010674:	4603      	mov	r3, r0
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <_ZSt4moveIR9PrecisionEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 801067e:	b480      	push	{r7}
 8010680:	b083      	sub	sp, #12
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	4618      	mov	r0, r3
 801068a:	370c      	adds	r7, #12
 801068c:	46bd      	mov	sp, r7
 801068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010692:	4770      	bx	lr

08010694 <_ZSt16forward_as_tupleIJ9PrecisionEESt5tupleIJDpOT_EES4_>:
    forward_as_tuple(_Elements&&... __args) noexcept
 8010694:	b580      	push	{r7, lr}
 8010696:	b082      	sub	sp, #8
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
    { return tuple<_Elements&&...>(std::forward<_Elements>(__args)...); }
 801069e:	6838      	ldr	r0, [r7, #0]
 80106a0:	f000 fe4c 	bl	801133c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 80106a4:	4603      	mov	r3, r0
 80106a6:	4619      	mov	r1, r3
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 fe52 	bl	8011352 <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>
 80106ae:	6878      	ldr	r0, [r7, #4]
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80106b6:	b5b0      	push	{r4, r5, r7, lr}
 80106b8:	b088      	sub	sp, #32
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	60f8      	str	r0, [r7, #12]
 80106be:	60b9      	str	r1, [r7, #8]
 80106c0:	607a      	str	r2, [r7, #4]
 80106c2:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f7f0 fdce 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80106ca:	4604      	mov	r4, r0
 80106cc:	6838      	ldr	r0, [r7, #0]
 80106ce:	f000 fe53 	bl	8011378 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80106d2:	4605      	mov	r5, r0
 80106d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106d6:	f7f0 fddc 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80106da:	4603      	mov	r3, r0
 80106dc:	462a      	mov	r2, r5
 80106de:	4621      	mov	r1, r4
 80106e0:	68f8      	ldr	r0, [r7, #12]
 80106e2:	f000 fe54 	bl	801138e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>
 80106e6:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 80106e8:	69f8      	ldr	r0, [r7, #28]
 80106ea:	f7fa feda 	bl	800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80106ee:	4603      	mov	r3, r0
 80106f0:	f107 0010 	add.w	r0, r7, #16
 80106f4:	68ba      	ldr	r2, [r7, #8]
 80106f6:	68f9      	ldr	r1, [r7, #12]
 80106f8:	f7fa fdb0 	bl	800b25c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS3_ERS2_>
	    if (__res.second)
 80106fc:	697b      	ldr	r3, [r7, #20]
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d007      	beq.n	8010712 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8010702:	6939      	ldr	r1, [r7, #16]
 8010704:	697a      	ldr	r2, [r7, #20]
 8010706:	69fb      	ldr	r3, [r7, #28]
 8010708:	68f8      	ldr	r0, [r7, #12]
 801070a:	f000 fe63 	bl	80113d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>
 801070e:	4603      	mov	r3, r0
 8010710:	e00b      	b.n	801072a <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEESt17_Rb_tree_iteratorIS3_ESt23_Rb_tree_const_iteratorIS3_EDpOT_+0x74>
	    _M_drop_node(__z);
 8010712:	69f9      	ldr	r1, [r7, #28]
 8010714:	68f8      	ldr	r0, [r7, #12]
 8010716:	f7fa fed7 	bl	800b4c8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS3_E>
	    return iterator(__res.first);
 801071a:	693a      	ldr	r2, [r7, #16]
 801071c:	f107 0318 	add.w	r3, r7, #24
 8010720:	4611      	mov	r1, r2
 8010722:	4618      	mov	r0, r3
 8010724:	f7fa fee1 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8010728:	69bb      	ldr	r3, [r7, #24]
      }
 801072a:	4618      	mov	r0, r3
 801072c:	3720      	adds	r7, #32
 801072e:	46bd      	mov	sp, r7
 8010730:	bdb0      	pop	{r4, r5, r7, pc}

08010732 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8010732:	b480      	push	{r7}
 8010734:	b083      	sub	sp, #12
 8010736:	af00      	add	r7, sp, #0
 8010738:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	4618      	mov	r0, r3
 801073e:	370c      	adds	r7, #12
 8010740:	46bd      	mov	sp, r7
 8010742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010746:	4770      	bx	lr

08010748 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>:
      using _Optional_payload_base<_Tp>::_Optional_payload_base;
 8010748:	b590      	push	{r4, r7, lr}
 801074a:	b085      	sub	sp, #20
 801074c:	af00      	add	r7, sp, #0
 801074e:	60f8      	str	r0, [r7, #12]
 8010750:	7239      	strb	r1, [r7, #8]
 8010752:	607a      	str	r2, [r7, #4]
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	687a      	ldr	r2, [r7, #4]
 8010758:	4621      	mov	r1, r4
 801075a:	4618      	mov	r0, r3
 801075c:	f000 fe89 	bl	8011472 <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>
 8010760:	68fb      	ldr	r3, [r7, #12]
 8010762:	4618      	mov	r0, r3
 8010764:	3714      	adds	r7, #20
 8010766:	46bd      	mov	sp, r7
 8010768:	bd90      	pop	{r4, r7, pc}

0801076a <_ZNSt14_Optional_baseIP13StreamMessageLb1ELb1EEC1IJS1_ELb0EEESt10in_place_tDpOT_>:
        constexpr explicit _Optional_base(in_place_t, _Args&&... __args)
 801076a:	b5b0      	push	{r4, r5, r7, lr}
 801076c:	b084      	sub	sp, #16
 801076e:	af00      	add	r7, sp, #0
 8010770:	60f8      	str	r0, [r7, #12]
 8010772:	7239      	strb	r1, [r7, #8]
 8010774:	607a      	str	r2, [r7, #4]
		     std::forward<_Args>(__args)...) { }
 8010776:	68fc      	ldr	r4, [r7, #12]
 8010778:	6878      	ldr	r0, [r7, #4]
 801077a:	f7ff ffda 	bl	8010732 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 801077e:	4603      	mov	r3, r0
 8010780:	461a      	mov	r2, r3
 8010782:	4629      	mov	r1, r5
 8010784:	4620      	mov	r0, r4
 8010786:	f7ff ffdf 	bl	8010748 <_ZNSt17_Optional_payloadIP13StreamMessageLb1ELb1ELb1EECI1St22_Optional_payload_baseIS1_EIJS1_EEESt10in_place_tDpOT_>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	4618      	mov	r0, r3
 801078e:	3710      	adds	r7, #16
 8010790:	46bd      	mov	sp, r7
 8010792:	bdb0      	pop	{r4, r5, r7, pc}

08010794 <_ZNSaIP13StreamMessageEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8010794:	b580      	push	{r7, lr}
 8010796:	b082      	sub	sp, #8
 8010798:	af00      	add	r7, sp, #0
 801079a:	6078      	str	r0, [r7, #4]
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f000 fe80 	bl	80114a2 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	4618      	mov	r0, r3
 80107a6:	3708      	adds	r7, #8
 80107a8:	46bd      	mov	sp, r7
 80107aa:	bd80      	pop	{r7, pc}

080107ac <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80107ac:	b480      	push	{r7}
 80107ae:	b083      	sub	sp, #12
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	601a      	str	r2, [r3, #0]
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	2200      	movs	r2, #0
 80107be:	605a      	str	r2, [r3, #4]
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	2200      	movs	r2, #0
 80107c4:	609a      	str	r2, [r3, #8]
	{ }
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	4618      	mov	r0, r3
 80107ca:	370c      	adds	r7, #12
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b084      	sub	sp, #16
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
	if (__p)
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d005      	beq.n	80107f2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	687a      	ldr	r2, [r7, #4]
 80107ea:	68b9      	ldr	r1, [r7, #8]
 80107ec:	4618      	mov	r0, r3
 80107ee:	f000 fe63 	bl	80114b8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>
      }
 80107f2:	bf00      	nop
 80107f4:	3710      	adds	r7, #16
 80107f6:	46bd      	mov	sp, r7
 80107f8:	bd80      	pop	{r7, pc}

080107fa <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80107fa:	b480      	push	{r7}
 80107fc:	b083      	sub	sp, #12
 80107fe:	af00      	add	r7, sp, #0
 8010800:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	4618      	mov	r0, r3
 8010806:	370c      	adds	r7, #12
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <_ZSt8_DestroyIPP13StreamMessageS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8010810:	b580      	push	{r7, lr}
 8010812:	b084      	sub	sp, #16
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 801081c:	68b9      	ldr	r1, [r7, #8]
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f000 fe69 	bl	80114f6 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>
    }
 8010824:	bf00      	nop
 8010826:	3710      	adds	r7, #16
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <_ZSt4moveIRP6StreamEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 801082c:	b480      	push	{r7}
 801082e:	b083      	sub	sp, #12
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	4618      	mov	r0, r3
 8010838:	370c      	adds	r7, #12
 801083a:	46bd      	mov	sp, r7
 801083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010840:	4770      	bx	lr

08010842 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_>:
      vector<_Tp, _Alloc>::
 8010842:	b5b0      	push	{r4, r5, r7, lr}
 8010844:	b082      	sub	sp, #8
 8010846:	af00      	add	r7, sp, #0
 8010848:	6078      	str	r0, [r7, #4]
 801084a:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	685a      	ldr	r2, [r3, #4]
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	689b      	ldr	r3, [r3, #8]
 8010854:	429a      	cmp	r2, r3
 8010856:	d011      	beq.n	801087c <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8010858:	687c      	ldr	r4, [r7, #4]
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	685d      	ldr	r5, [r3, #4]
 801085e:	6838      	ldr	r0, [r7, #0]
 8010860:	f000 fe5f 	bl	8011522 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8010864:	4603      	mov	r3, r0
 8010866:	461a      	mov	r2, r3
 8010868:	4629      	mov	r1, r5
 801086a:	4620      	mov	r0, r4
 801086c:	f000 fe79 	bl	8011562 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	685b      	ldr	r3, [r3, #4]
 8010874:	1d1a      	adds	r2, r3, #4
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	605a      	str	r2, [r3, #4]
 801087a:	e00c      	b.n	8010896 <_ZNSt6vectorIP6StreamSaIS1_EE12emplace_backIJS1_EEERS1_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 801087c:	6878      	ldr	r0, [r7, #4]
 801087e:	f7ff fca0 	bl	80101c2 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 8010882:	4604      	mov	r4, r0
 8010884:	6838      	ldr	r0, [r7, #0]
 8010886:	f000 fe4c 	bl	8011522 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 801088a:	4603      	mov	r3, r0
 801088c:	461a      	mov	r2, r3
 801088e:	4621      	mov	r1, r4
 8010890:	6878      	ldr	r0, [r7, #4]
 8010892:	f000 fe79 	bl	8011588 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
	return back();
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f000 fef2 	bl	8011680 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>
 801089c:	4603      	mov	r3, r0
      }
 801089e:	4618      	mov	r0, r3
 80108a0:	3708      	adds	r7, #8
 80108a2:	46bd      	mov	sp, r7
 80108a4:	bdb0      	pop	{r4, r5, r7, pc}

080108a6 <_ZN9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80108a6:	b480      	push	{r7}
 80108a8:	b083      	sub	sp, #12
 80108aa:	af00      	add	r7, sp, #0
 80108ac:	6078      	str	r0, [r7, #4]
 80108ae:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	601a      	str	r2, [r3, #0]
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	4618      	mov	r0, r3
 80108bc:	370c      	adds	r7, #12
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>:
    construct_at(_Tp* __location, _Args&&... __args)
 80108c6:	b590      	push	{r4, r7, lr}
 80108c8:	b083      	sub	sp, #12
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
 80108ce:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80108d0:	6838      	ldr	r0, [r7, #0]
 80108d2:	f000 fef0 	bl	80116b6 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 80108d6:	4603      	mov	r3, r0
 80108d8:	681c      	ldr	r4, [r3, #0]
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	4619      	mov	r1, r3
 80108de:	2004      	movs	r0, #4
 80108e0:	f7ef fd26 	bl	8000330 <_ZnwjPv>
 80108e4:	4603      	mov	r3, r0
 80108e6:	601c      	str	r4, [r3, #0]
 80108e8:	4618      	mov	r0, r3
 80108ea:	370c      	adds	r7, #12
 80108ec:	46bd      	mov	sp, r7
 80108ee:	bd90      	pop	{r4, r7, pc}

080108f0 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80108f0:	b580      	push	{r7, lr}
 80108f2:	b084      	sub	sp, #16
 80108f4:	af00      	add	r7, sp, #0
 80108f6:	60f8      	str	r0, [r7, #12]
 80108f8:	60b9      	str	r1, [r7, #8]
 80108fa:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f000 feda 	bl	80116b6 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010902:	4603      	mov	r3, r0
 8010904:	4619      	mov	r1, r3
 8010906:	68b8      	ldr	r0, [r7, #8]
 8010908:	f7ff ffdd 	bl	80108c6 <_ZSt12construct_atIP13StreamMessageJRKS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS5_DpOS6_>
	}
 801090c:	bf00      	nop
 801090e:	3710      	adds	r7, #16
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8010914:	b5b0      	push	{r4, r5, r7, lr}
 8010916:	b08c      	sub	sp, #48	; 0x30
 8010918:	af00      	add	r7, sp, #0
 801091a:	60f8      	str	r0, [r7, #12]
 801091c:	60b9      	str	r1, [r7, #8]
 801091e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8010920:	4a39      	ldr	r2, [pc, #228]	; (8010a08 <_ZNSt6vectorIP13StreamMessageSaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8010922:	2101      	movs	r1, #1
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f000 fed1 	bl	80116cc <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>
 801092a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 801092c:	68fb      	ldr	r3, [r7, #12]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8010938:	68f8      	ldr	r0, [r7, #12]
 801093a:	f7ff fba9 	bl	8010090 <_ZNSt6vectorIP13StreamMessageSaIS1_EE5beginEv>
 801093e:	4603      	mov	r3, r0
 8010940:	617b      	str	r3, [r7, #20]
 8010942:	f107 0214 	add.w	r2, r7, #20
 8010946:	f107 0308 	add.w	r3, r7, #8
 801094a:	4611      	mov	r1, r2
 801094c:	4618      	mov	r0, r3
 801094e:	f000 ff04 	bl	801175a <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8010952:	4603      	mov	r3, r0
 8010954:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801095a:	4618      	mov	r0, r3
 801095c:	f000 ff12 	bl	8011784 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>
 8010960:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8010966:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8010968:	6a3b      	ldr	r3, [r7, #32]
 801096a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 801096c:	69fa      	ldr	r2, [r7, #28]
 801096e:	18d5      	adds	r5, r2, r3
 8010970:	6878      	ldr	r0, [r7, #4]
 8010972:	f000 fea0 	bl	80116b6 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>
 8010976:	4603      	mov	r3, r0
 8010978:	461a      	mov	r2, r3
 801097a:	4629      	mov	r1, r5
 801097c:	4620      	mov	r0, r4
 801097e:	f7ff ffb7 	bl	80108f0 <_ZNSt16allocator_traitsISaIP13StreamMessageEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8010982:	2300      	movs	r3, #0
 8010984:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8010986:	f107 0308 	add.w	r3, r7, #8
 801098a:	4618      	mov	r0, r3
 801098c:	f7fd fa76 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8010990:	4603      	mov	r3, r0
 8010992:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	4618      	mov	r0, r3
 8010998:	f7ff ff2f 	bl	80107fa <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 801099c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801099e:	69fa      	ldr	r2, [r7, #28]
 80109a0:	4621      	mov	r1, r4
 80109a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80109a4:	f000 ff02 	bl	80117ac <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80109a8:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 80109aa:	69bb      	ldr	r3, [r7, #24]
 80109ac:	3304      	adds	r3, #4
 80109ae:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80109b0:	f107 0308 	add.w	r3, r7, #8
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7fd fa61 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 80109ba:	4603      	mov	r3, r0
 80109bc:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80109be:	68fb      	ldr	r3, [r7, #12]
 80109c0:	4618      	mov	r0, r3
 80109c2:	f7ff ff1a 	bl	80107fa <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 80109c6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80109c8:	69ba      	ldr	r2, [r7, #24]
 80109ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109cc:	4620      	mov	r0, r4
 80109ce:	f000 feed 	bl	80117ac <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80109d2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80109d4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	689a      	ldr	r2, [r3, #8]
 80109da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109dc:	1ad3      	subs	r3, r2, r3
 80109de:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80109e0:	461a      	mov	r2, r3
 80109e2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109e4:	f7ff fef6 	bl	80107d4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	69fa      	ldr	r2, [r7, #28]
 80109ec:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	69ba      	ldr	r2, [r7, #24]
 80109f2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80109f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f6:	009b      	lsls	r3, r3, #2
 80109f8:	69fa      	ldr	r2, [r7, #28]
 80109fa:	441a      	add	r2, r3
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	609a      	str	r2, [r3, #8]
    }
 8010a00:	bf00      	nop
 8010a02:	3730      	adds	r7, #48	; 0x30
 8010a04:	46bd      	mov	sp, r7
 8010a06:	bdb0      	pop	{r4, r5, r7, pc}
 8010a08:	08020c54 	.word	0x08020c54

08010a0c <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E21_M_not_empty_functionIS4_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010a0c:	b480      	push	{r7}
 8010a0e:	b083      	sub	sp, #12
 8010a10:	af00      	add	r7, sp, #0
 8010a12:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010a14:	2301      	movs	r3, #1
 8010a16:	4618      	mov	r0, r3
 8010a18:	370c      	adds	r7, #12
 8010a1a:	46bd      	mov	sp, r7
 8010a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a20:	4770      	bx	lr

08010a22 <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>:
    move(_Tp&& __t) noexcept
 8010a22:	b480      	push	{r7}
 8010a24:	b083      	sub	sp, #12
 8010a26:	af00      	add	r7, sp, #0
 8010a28:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	4618      	mov	r0, r3
 8010a2e:	370c      	adds	r7, #12
 8010a30:	46bd      	mov	sp, r7
 8010a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a36:	4770      	bx	lr

08010a38 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010a38:	b590      	push	{r4, r7, lr}
 8010a3a:	b083      	sub	sp, #12
 8010a3c:	af00      	add	r7, sp, #0
 8010a3e:	6078      	str	r0, [r7, #4]
 8010a40:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010a42:	6838      	ldr	r0, [r7, #0]
 8010a44:	f7ff ffed 	bl	8010a22 <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	4622      	mov	r2, r4
 8010a4c:	4619      	mov	r1, r3
 8010a4e:	6878      	ldr	r0, [r7, #4]
 8010a50:	f000 fec0 	bl	80117d4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>
 8010a54:	bf00      	nop
 8010a56:	370c      	adds	r7, #12
 8010a58:	46bd      	mov	sp, r7
 8010a5a:	bd90      	pop	{r4, r7, pc}

08010a5c <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010a64:	6878      	ldr	r0, [r7, #4]
 8010a66:	f000 fece 	bl	8011806 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010a6a:	4603      	mov	r3, r0
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 feda 	bl	8011826 <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>
				     std::forward<_ArgTypes>(__args)...);
 8010a72:	bf00      	nop
      }
 8010a74:	3708      	adds	r7, #8
 8010a76:	46bd      	mov	sp, r7
 8010a78:	bd80      	pop	{r7, pc}

08010a7a <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010a7a:	b590      	push	{r4, r7, lr}
 8010a7c:	b085      	sub	sp, #20
 8010a7e:	af00      	add	r7, sp, #0
 8010a80:	60f8      	str	r0, [r7, #12]
 8010a82:	60b9      	str	r1, [r7, #8]
 8010a84:	4613      	mov	r3, r2
 8010a86:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010a88:	79fb      	ldrb	r3, [r7, #7]
 8010a8a:	2b01      	cmp	r3, #1
 8010a8c:	d109      	bne.n	8010aa2 <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010a8e:	68b8      	ldr	r0, [r7, #8]
 8010a90:	f000 feb9 	bl	8011806 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010a94:	4604      	mov	r4, r0
 8010a96:	68f8      	ldr	r0, [r7, #12]
 8010a98:	f000 fed5 	bl	8011846 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 8010a9c:	4603      	mov	r3, r0
 8010a9e:	601c      	str	r4, [r3, #0]
	    break;
 8010aa0:	e005      	b.n	8010aae <_ZNSt17_Function_handlerIFvvEZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010aa2:	79fb      	ldrb	r3, [r7, #7]
 8010aa4:	461a      	mov	r2, r3
 8010aa6:	68b9      	ldr	r1, [r7, #8]
 8010aa8:	68f8      	ldr	r0, [r7, #12]
 8010aaa:	f000 fed8 	bl	801185e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>
	return false;
 8010aae:	2300      	movs	r3, #0
      }
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	3714      	adds	r7, #20
 8010ab4:	46bd      	mov	sp, r7
 8010ab6:	bd90      	pop	{r4, r7, pc}

08010ab8 <_ZNSt22_Optional_payload_baseIP13StreamMessageE6_M_getEv>:
      _M_get() noexcept
 8010ab8:	b480      	push	{r7}
 8010aba:	b083      	sub	sp, #12
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	370c      	adds	r7, #12
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010acc:	4770      	bx	lr

08010ace <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8010ace:	b480      	push	{r7}
 8010ad0:	b083      	sub	sp, #12
 8010ad2:	af00      	add	r7, sp, #0
 8010ad4:	6078      	str	r0, [r7, #4]
 8010ad6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8010ad8:	683b      	ldr	r3, [r7, #0]
 8010ada:	681a      	ldr	r2, [r3, #0]
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	601a      	str	r2, [r3, #0]
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	370c      	adds	r7, #12
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aec:	4770      	bx	lr

08010aee <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8010aee:	b580      	push	{r7, lr}
 8010af0:	b082      	sub	sp, #8
 8010af2:	af00      	add	r7, sp, #0
 8010af4:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	f000 fedc 	bl	80118b4 <_ZNSaIP5FieldIJEEEC1Ev>
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	4618      	mov	r0, r3
 8010b00:	f000 fee4 	bl	80118cc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>
	{ }
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	4618      	mov	r0, r3
 8010b08:	3708      	adds	r7, #8
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	bd80      	pop	{r7, pc}

08010b0e <_ZNSaIP5FieldIJEEED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8010b0e:	b480      	push	{r7}
 8010b10:	b083      	sub	sp, #12
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
 8010b16:	687b      	ldr	r3, [r7, #4]
 8010b18:	4618      	mov	r0, r3
 8010b1a:	370c      	adds	r7, #12
 8010b1c:	46bd      	mov	sp, r7
 8010b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b22:	4770      	bx	lr

08010b24 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8010b24:	b580      	push	{r7, lr}
 8010b26:	b082      	sub	sp, #8
 8010b28:	af00      	add	r7, sp, #0
 8010b2a:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	689a      	ldr	r2, [r3, #8]
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	1ad3      	subs	r3, r2, r3
 8010b3a:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 fed8 	bl	80118f4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      }
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7ff fb4c 	bl	80101e4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE12_Vector_implD1Ev>
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3708      	adds	r7, #8
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}

08010b56 <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8010b56:	b5b0      	push	{r4, r5, r7, lr}
 8010b58:	b082      	sub	sp, #8
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	681c      	ldr	r4, [r3, #0]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	4618      	mov	r0, r3
 8010b6a:	f000 fed6 	bl	801191a <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8010b6e:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8010b70:	461a      	mov	r2, r3
 8010b72:	4629      	mov	r1, r5
 8010b74:	4620      	mov	r0, r4
 8010b76:	f000 fedb 	bl	8011930 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>
      }
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f7ff ffd1 	bl	8010b24 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EED1Ev>
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	4618      	mov	r0, r3
 8010b86:	3708      	adds	r7, #8
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bdb0      	pop	{r4, r5, r7, pc}

08010b8c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010b8c:	b590      	push	{r4, r7, lr}
 8010b8e:	b085      	sub	sp, #20
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	6078      	str	r0, [r7, #4]
 8010b94:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	1c5a      	adds	r2, r3, #1
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010ba0:	2008      	movs	r0, #8
 8010ba2:	f00f fcd3 	bl	802054c <_Znwj>
 8010ba6:	4603      	mov	r3, r0
 8010ba8:	461c      	mov	r4, r3
 8010baa:	6839      	ldr	r1, [r7, #0]
 8010bac:	4620      	mov	r0, r4
 8010bae:	f000 fedd 	bl	801196c <_ZN5FieldIJhEEC1EPh>
 8010bb2:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8010bb4:	687b      	ldr	r3, [r7, #4]
 8010bb6:	f103 0208 	add.w	r2, r3, #8
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	60bb      	str	r3, [r7, #8]
 8010bbe:	f107 0308 	add.w	r3, r7, #8
 8010bc2:	4619      	mov	r1, r3
 8010bc4:	4610      	mov	r0, r2
 8010bc6:	f000 fee7 	bl	8011998 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8010bca:	bf00      	nop
    }
 8010bcc:	3714      	adds	r7, #20
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd90      	pop	{r4, r7, pc}
	...

08010bd4 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_>:
      operator[](const key_type& __k)
 8010bd4:	b590      	push	{r4, r7, lr}
 8010bd6:	b08b      	sub	sp, #44	; 0x2c
 8010bd8:	af02      	add	r7, sp, #8
 8010bda:	6078      	str	r0, [r7, #4]
 8010bdc:	6039      	str	r1, [r7, #0]
	iterator __i = lower_bound(__k);
 8010bde:	6839      	ldr	r1, [r7, #0]
 8010be0:	6878      	ldr	r0, [r7, #4]
 8010be2:	f000 feea 	bl	80119ba <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>
 8010be6:	4603      	mov	r3, r0
 8010be8:	60bb      	str	r3, [r7, #8]
	if (__i == end() || key_comp()(__k, (*__i).first))
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f7f4 faaf 	bl	800514e <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE3endEv>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	60fb      	str	r3, [r7, #12]
 8010bf4:	f107 020c 	add.w	r2, r7, #12
 8010bf8:	f107 0308 	add.w	r3, r7, #8
 8010bfc:	4611      	mov	r1, r2
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7f4 fab2 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 8010c04:	4603      	mov	r3, r0
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d112      	bne.n	8010c30 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x5c>
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 fee4 	bl	80119d8 <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>
 8010c10:	f107 0308 	add.w	r3, r7, #8
 8010c14:	4618      	mov	r0, r3
 8010c16:	f7f4 facc 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	461a      	mov	r2, r3
 8010c1e:	f107 0310 	add.w	r3, r7, #16
 8010c22:	6839      	ldr	r1, [r7, #0]
 8010c24:	4618      	mov	r0, r3
 8010c26:	f000 fee4 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d001      	beq.n	8010c34 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x60>
 8010c30:	2301      	movs	r3, #1
 8010c32:	e000      	b.n	8010c36 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x62>
 8010c34:	2300      	movs	r3, #0
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d01b      	beq.n	8010c72 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0x9e>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010c3a:	687c      	ldr	r4, [r7, #4]
 8010c3c:	f107 0208 	add.w	r2, r7, #8
 8010c40:	f107 0314 	add.w	r3, r7, #20
 8010c44:	4611      	mov	r1, r2
 8010c46:	4618      	mov	r0, r3
 8010c48:	f000 fef7 	bl	8011a3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>
					    std::tuple<const key_type&>(__k),
 8010c4c:	f107 0318 	add.w	r3, r7, #24
 8010c50:	6839      	ldr	r1, [r7, #0]
 8010c52:	4618      	mov	r0, r3
 8010c54:	f000 fee2 	bl	8011a1c <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8010c58:	f107 0218 	add.w	r2, r7, #24
 8010c5c:	f107 031c 	add.w	r3, r7, #28
 8010c60:	9300      	str	r3, [sp, #0]
 8010c62:	4613      	mov	r3, r2
 8010c64:	4a08      	ldr	r2, [pc, #32]	; (8010c88 <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEEixERS5_+0xb4>)
 8010c66:	6979      	ldr	r1, [r7, #20]
 8010c68:	4620      	mov	r0, r4
 8010c6a:	f000 fef6 	bl	8011a5a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>
 8010c6e:	4603      	mov	r3, r0
 8010c70:	60bb      	str	r3, [r7, #8]
	return (*__i).second;
 8010c72:	f107 0308 	add.w	r3, r7, #8
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7f4 fa9b 	bl	80051b2 <_ZNKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEdeEv>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	3304      	adds	r3, #4
      }
 8010c80:	4618      	mov	r0, r3
 8010c82:	3724      	adds	r7, #36	; 0x24
 8010c84:	46bd      	mov	sp, r7
 8010c86:	bd90      	pop	{r4, r7, pc}
 8010c88:	08020cbc 	.word	0x08020cbc

08010c8c <_ZN6Packet5buildIhJtEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010c8c:	b590      	push	{r4, r7, lr}
 8010c8e:	b087      	sub	sp, #28
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	60f8      	str	r0, [r7, #12]
 8010c94:	60b9      	str	r1, [r7, #8]
 8010c96:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010c98:	68fb      	ldr	r3, [r7, #12]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	1c5a      	adds	r2, r3, #1
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010ca2:	2008      	movs	r0, #8
 8010ca4:	f00f fc52 	bl	802054c <_Znwj>
 8010ca8:	4603      	mov	r3, r0
 8010caa:	461c      	mov	r4, r3
 8010cac:	68b9      	ldr	r1, [r7, #8]
 8010cae:	4620      	mov	r0, r4
 8010cb0:	f000 fe5c 	bl	801196c <_ZN5FieldIJhEEC1EPh>
 8010cb4:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010cb6:	68fb      	ldr	r3, [r7, #12]
 8010cb8:	f103 0208 	add.w	r2, r3, #8
 8010cbc:	697b      	ldr	r3, [r7, #20]
 8010cbe:	613b      	str	r3, [r7, #16]
 8010cc0:	f107 0310 	add.w	r3, r7, #16
 8010cc4:	4619      	mov	r1, r3
 8010cc6:	4610      	mov	r0, r2
 8010cc8:	f000 fe66 	bl	8011998 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010ccc:	6879      	ldr	r1, [r7, #4]
 8010cce:	68f8      	ldr	r0, [r7, #12]
 8010cd0:	f000 ff01 	bl	8011ad6 <_ZN6Packet5buildItJEEEvPT_DpPT0_>
    }
 8010cd4:	bf00      	nop
 8010cd6:	371c      	adds	r7, #28
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	bd90      	pop	{r4, r7, pc}

08010cdc <_ZN6Packet5buildIhJmEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010cdc:	b590      	push	{r4, r7, lr}
 8010cde:	b087      	sub	sp, #28
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	60f8      	str	r0, [r7, #12]
 8010ce4:	60b9      	str	r1, [r7, #8]
 8010ce6:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	1c5a      	adds	r2, r3, #1
 8010cee:	68fb      	ldr	r3, [r7, #12]
 8010cf0:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010cf2:	2008      	movs	r0, #8
 8010cf4:	f00f fc2a 	bl	802054c <_Znwj>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	461c      	mov	r4, r3
 8010cfc:	68b9      	ldr	r1, [r7, #8]
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f000 fe34 	bl	801196c <_ZN5FieldIJhEEC1EPh>
 8010d04:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010d06:	68fb      	ldr	r3, [r7, #12]
 8010d08:	f103 0208 	add.w	r2, r3, #8
 8010d0c:	697b      	ldr	r3, [r7, #20]
 8010d0e:	613b      	str	r3, [r7, #16]
 8010d10:	f107 0310 	add.w	r3, r7, #16
 8010d14:	4619      	mov	r1, r3
 8010d16:	4610      	mov	r0, r2
 8010d18:	f000 fe3e 	bl	8011998 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010d1c:	6879      	ldr	r1, [r7, #4]
 8010d1e:	68f8      	ldr	r0, [r7, #12]
 8010d20:	f000 fefc 	bl	8011b1c <_ZN6Packet5buildImJEEEvPT_DpPT0_>
    }
 8010d24:	bf00      	nop
 8010d26:	371c      	adds	r7, #28
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd90      	pop	{r4, r7, pc}

08010d2c <_ZN6Packet5buildIhJhEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8010d2c:	b590      	push	{r4, r7, lr}
 8010d2e:	b087      	sub	sp, #28
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	607a      	str	r2, [r7, #4]
    	size += sizeof(Arg1);
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	681b      	ldr	r3, [r3, #0]
 8010d3c:	1c5a      	adds	r2, r3, #1
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8010d42:	2008      	movs	r0, #8
 8010d44:	f00f fc02 	bl	802054c <_Znwj>
 8010d48:	4603      	mov	r3, r0
 8010d4a:	461c      	mov	r4, r3
 8010d4c:	68b9      	ldr	r1, [r7, #8]
 8010d4e:	4620      	mov	r0, r4
 8010d50:	f000 fe0c 	bl	801196c <_ZN5FieldIJhEEC1EPh>
 8010d54:	617c      	str	r4, [r7, #20]
        fields.push_back(((Field<>*) field));
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f103 0208 	add.w	r2, r3, #8
 8010d5c:	697b      	ldr	r3, [r7, #20]
 8010d5e:	613b      	str	r3, [r7, #16]
 8010d60:	f107 0310 	add.w	r3, r7, #16
 8010d64:	4619      	mov	r1, r3
 8010d66:	4610      	mov	r0, r2
 8010d68:	f000 fe16 	bl	8011998 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            build(rest...);
 8010d6c:	6879      	ldr	r1, [r7, #4]
 8010d6e:	68f8      	ldr	r0, [r7, #12]
 8010d70:	f7ff ff0c 	bl	8010b8c <_ZN6Packet5buildIhJEEEvPT_DpPT0_>
    }
 8010d74:	bf00      	nop
 8010d76:	371c      	adds	r7, #28
 8010d78:	46bd      	mov	sp, r7
 8010d7a:	bd90      	pop	{r4, r7, pc}

08010d7c <_ZNSt22_Optional_payload_baseIP3PinE6_M_getEv>:
      _M_get() noexcept
 8010d7c:	b480      	push	{r7}
 8010d7e:	b083      	sub	sp, #12
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	6078      	str	r0, [r7, #4]
      { return this->_M_payload._M_value; }
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	4618      	mov	r0, r3
 8010d88:	370c      	adds	r7, #12
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d90:	4770      	bx	lr

08010d92 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010d92:	b5b0      	push	{r4, r5, r7, lr}
 8010d94:	b084      	sub	sp, #16
 8010d96:	af00      	add	r7, sp, #0
 8010d98:	6078      	str	r0, [r7, #4]
 8010d9a:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 fee0 	bl	8011b62 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010da2:	4604      	mov	r4, r0
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f000 fee8 	bl	8011b7a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010daa:	4602      	mov	r2, r0
 8010dac:	683b      	ldr	r3, [r7, #0]
 8010dae:	4621      	mov	r1, r4
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 feee 	bl	8011b92 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010db6:	4603      	mov	r3, r0
 8010db8:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f000 f828 	bl	8010e10 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	60fb      	str	r3, [r7, #12]
 8010dc4:	f107 020c 	add.w	r2, r7, #12
 8010dc8:	f107 0308 	add.w	r3, r7, #8
 8010dcc:	4611      	mov	r1, r2
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f000 f82f 	bl	8010e32 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>
 8010dd4:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d110      	bne.n	8010dfc <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010dda:	687c      	ldr	r4, [r7, #4]
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010de0:	68bb      	ldr	r3, [r7, #8]
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7f7 fed1 	bl	8008b8a <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010de8:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	461a      	mov	r2, r3
 8010dee:	4629      	mov	r1, r5
 8010df0:	4620      	mov	r0, r4
 8010df2:	f7f0 f872 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010df6:	4603      	mov	r3, r0
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d004      	beq.n	8010e06 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010dfc:	6878      	ldr	r0, [r7, #4]
 8010dfe:	f000 f807 	bl	8010e10 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010e02:	4603      	mov	r3, r0
 8010e04:	e000      	b.n	8010e08 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010e06:	68bb      	ldr	r3, [r7, #8]
    }
 8010e08:	4618      	mov	r0, r3
 8010e0a:	3710      	adds	r7, #16
 8010e0c:	46bd      	mov	sp, r7
 8010e0e:	bdb0      	pop	{r4, r5, r7, pc}

08010e10 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010e10:	b580      	push	{r7, lr}
 8010e12:	b084      	sub	sp, #16
 8010e14:	af00      	add	r7, sp, #0
 8010e16:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	1d1a      	adds	r2, r3, #4
 8010e1c:	f107 030c 	add.w	r3, r7, #12
 8010e20:	4611      	mov	r1, r2
 8010e22:	4618      	mov	r0, r3
 8010e24:	f000 fee8 	bl	8011bf8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	3710      	adds	r7, #16
 8010e2e:	46bd      	mov	sp, r7
 8010e30:	bd80      	pop	{r7, pc}

08010e32 <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010e32:	b480      	push	{r7}
 8010e34:	b083      	sub	sp, #12
 8010e36:	af00      	add	r7, sp, #0
 8010e38:	6078      	str	r0, [r7, #4]
 8010e3a:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	681b      	ldr	r3, [r3, #0]
 8010e44:	429a      	cmp	r2, r3
 8010e46:	bf0c      	ite	eq
 8010e48:	2301      	moveq	r3, #1
 8010e4a:	2300      	movne	r3, #0
 8010e4c:	b2db      	uxtb	r3, r3
 8010e4e:	4618      	mov	r0, r3
 8010e50:	370c      	adds	r7, #12
 8010e52:	46bd      	mov	sp, r7
 8010e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e58:	4770      	bx	lr

08010e5a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8010e5a:	b5b0      	push	{r4, r5, r7, lr}
 8010e5c:	b084      	sub	sp, #16
 8010e5e:	af00      	add	r7, sp, #0
 8010e60:	6078      	str	r0, [r7, #4]
 8010e62:	6039      	str	r1, [r7, #0]
      const_iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 fed6 	bl	8011c16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 fede 	bl	8011c2e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>
 8010e72:	4602      	mov	r2, r0
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	4621      	mov	r1, r4
 8010e78:	6878      	ldr	r0, [r7, #4]
 8010e7a:	f000 fee4 	bl	8011c46 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>
 8010e7e:	4603      	mov	r3, r0
 8010e80:	60bb      	str	r3, [r7, #8]
      return (__j == end()
 8010e82:	6878      	ldr	r0, [r7, #4]
 8010e84:	f000 f828 	bl	8010ed8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	60fb      	str	r3, [r7, #12]
 8010e8c:	f107 020c 	add.w	r2, r7, #12
 8010e90:	f107 0308 	add.w	r3, r7, #8
 8010e94:	4611      	mov	r1, r2
 8010e96:	4618      	mov	r0, r3
 8010e98:	f000 f82f 	bl	8010efa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>
 8010e9c:	4603      	mov	r3, r0
					_S_key(__j._M_node))) ? end() : __j;
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d110      	bne.n	8010ec4 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x6a>
	      || _M_impl._M_key_compare(__k,
 8010ea2:	687c      	ldr	r4, [r7, #4]
 8010ea4:	683b      	ldr	r3, [r7, #0]
 8010ea6:	681d      	ldr	r5, [r3, #0]
					_S_key(__j._M_node))) ? end() : __j;
 8010ea8:	68bb      	ldr	r3, [r7, #8]
 8010eaa:	4618      	mov	r0, r3
 8010eac:	f7f3 f98e 	bl	80041cc <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8010eb0:	4603      	mov	r3, r0
	      || _M_impl._M_key_compare(__k,
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	4629      	mov	r1, r5
 8010eb8:	4620      	mov	r0, r4
 8010eba:	f7f0 f80e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8010ebe:	4603      	mov	r3, r0
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d004      	beq.n	8010ece <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x74>
					_S_key(__j._M_node))) ? end() : __j;
 8010ec4:	6878      	ldr	r0, [r7, #4]
 8010ec6:	f000 f807 	bl	8010ed8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	e000      	b.n	8010ed0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE4findERS3_+0x76>
 8010ece:	68bb      	ldr	r3, [r7, #8]
    }
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	3710      	adds	r7, #16
 8010ed4:	46bd      	mov	sp, r7
 8010ed6:	bdb0      	pop	{r4, r5, r7, pc}

08010ed8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8010ed8:	b580      	push	{r7, lr}
 8010eda:	b084      	sub	sp, #16
 8010edc:	af00      	add	r7, sp, #0
 8010ede:	6078      	str	r0, [r7, #4]
      { return const_iterator(&this->_M_impl._M_header); }
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	1d1a      	adds	r2, r3, #4
 8010ee4:	f107 030c 	add.w	r3, r7, #12
 8010ee8:	4611      	mov	r1, r2
 8010eea:	4618      	mov	r0, r3
 8010eec:	f000 fede 	bl	8011cac <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	3710      	adds	r7, #16
 8010ef6:	46bd      	mov	sp, r7
 8010ef8:	bd80      	pop	{r7, pc}

08010efa <_ZSteqRKSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEES9_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8010efa:	b480      	push	{r7}
 8010efc:	b083      	sub	sp, #12
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	6078      	str	r0, [r7, #4]
 8010f02:	6039      	str	r1, [r7, #0]
      { return __x._M_node == __y._M_node; }
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	681a      	ldr	r2, [r3, #0]
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	429a      	cmp	r2, r3
 8010f0e:	bf0c      	ite	eq
 8010f10:	2301      	moveq	r3, #1
 8010f12:	2300      	movne	r3, #0
 8010f14:	b2db      	uxtb	r3, r3
 8010f16:	4618      	mov	r0, r3
 8010f18:	370c      	adds	r7, #12
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr

08010f22 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010f22:	b480      	push	{r7}
 8010f24:	b083      	sub	sp, #12
 8010f26:	af00      	add	r7, sp, #0
 8010f28:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	370c      	adds	r7, #12
 8010f30:	46bd      	mov	sp, r7
 8010f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f36:	4770      	bx	lr

08010f38 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	4618      	mov	r0, r3
 8010f44:	370c      	adds	r7, #12
 8010f46:	46bd      	mov	sp, r7
 8010f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4c:	4770      	bx	lr

08010f4e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010f4e:	b590      	push	{r4, r7, lr}
 8010f50:	b083      	sub	sp, #12
 8010f52:	af00      	add	r7, sp, #0
 8010f54:	6078      	str	r0, [r7, #4]
 8010f56:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8010f58:	6838      	ldr	r0, [r7, #0]
 8010f5a:	f7ff ffed 	bl	8010f38 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8010f5e:	4603      	mov	r3, r0
 8010f60:	4622      	mov	r2, r4
 8010f62:	4619      	mov	r1, r3
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f000 feb0 	bl	8011cca <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8010f6a:	bf00      	nop
 8010f6c:	370c      	adds	r7, #12
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	bd90      	pop	{r4, r7, pc}

08010f72 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8010f72:	b580      	push	{r7, lr}
 8010f74:	b082      	sub	sp, #8
 8010f76:	af00      	add	r7, sp, #0
 8010f78:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 feba 	bl	8011cf4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010f80:	4603      	mov	r3, r0
 8010f82:	4618      	mov	r0, r3
 8010f84:	f000 fec6 	bl	8011d14 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8010f88:	bf00      	nop
      }
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}

08010f90 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 8010f90:	b590      	push	{r4, r7, lr}
 8010f92:	b085      	sub	sp, #20
 8010f94:	af00      	add	r7, sp, #0
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	4613      	mov	r3, r2
 8010f9c:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 8010f9e:	79fb      	ldrb	r3, [r7, #7]
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d109      	bne.n	8010fb8 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8010fa4:	68b8      	ldr	r0, [r7, #8]
 8010fa6:	f000 fea5 	bl	8011cf4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8010faa:	4604      	mov	r4, r0
 8010fac:	68f8      	ldr	r0, [r7, #12]
 8010fae:	f000 fec1 	bl	8011d34 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	601c      	str	r4, [r3, #0]
	    break;
 8010fb6:	e005      	b.n	8010fc4 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8010fb8:	79fb      	ldrb	r3, [r7, #7]
 8010fba:	461a      	mov	r2, r3
 8010fbc:	68b9      	ldr	r1, [r7, #8]
 8010fbe:	68f8      	ldr	r0, [r7, #12]
 8010fc0:	f000 fec4 	bl	8011d4c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8010fc4:	2300      	movs	r3, #0
      }
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	3714      	adds	r7, #20
 8010fca:	46bd      	mov	sp, r7
 8010fcc:	bd90      	pop	{r4, r7, pc}

08010fce <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E21_M_not_empty_functionIS2_EEbRKT_>:
	  _M_not_empty_function(const _Tp&)
 8010fce:	b480      	push	{r7}
 8010fd0:	b083      	sub	sp, #12
 8010fd2:	af00      	add	r7, sp, #0
 8010fd4:	6078      	str	r0, [r7, #4]
	  { return true; }
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	4618      	mov	r0, r3
 8010fda:	370c      	adds	r7, #12
 8010fdc:	46bd      	mov	sp, r7
 8010fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe2:	4770      	bx	lr

08010fe4 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	4618      	mov	r0, r3
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8010ffa:	b590      	push	{r4, r7, lr}
 8010ffc:	b083      	sub	sp, #12
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
 8011002:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8011004:	6838      	ldr	r0, [r7, #0]
 8011006:	f7ff ffed 	bl	8010fe4 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 801100a:	4603      	mov	r3, r0
 801100c:	4622      	mov	r2, r4
 801100e:	4619      	mov	r1, r3
 8011010:	6878      	ldr	r0, [r7, #4]
 8011012:	f000 fec6 	bl	8011da2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>
 8011016:	bf00      	nop
 8011018:	370c      	adds	r7, #12
 801101a:	46bd      	mov	sp, r7
 801101c:	bd90      	pop	{r4, r7, pc}

0801101e <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 801101e:	b580      	push	{r7, lr}
 8011020:	b082      	sub	sp, #8
 8011022:	af00      	add	r7, sp, #0
 8011024:	6078      	str	r0, [r7, #4]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 fed0 	bl	8011dcc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 801102c:	4603      	mov	r3, r0
 801102e:	4618      	mov	r0, r3
 8011030:	f000 fedc 	bl	8011dec <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>
				     std::forward<_ArgTypes>(__args)...);
 8011034:	bf00      	nop
      }
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}

0801103c <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 801103c:	b590      	push	{r4, r7, lr}
 801103e:	b085      	sub	sp, #20
 8011040:	af00      	add	r7, sp, #0
 8011042:	60f8      	str	r0, [r7, #12]
 8011044:	60b9      	str	r1, [r7, #8]
 8011046:	4613      	mov	r3, r2
 8011048:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 801104a:	79fb      	ldrb	r3, [r7, #7]
 801104c:	2b01      	cmp	r3, #1
 801104e:	d109      	bne.n	8011064 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8011050:	68b8      	ldr	r0, [r7, #8]
 8011052:	f000 febb 	bl	8011dcc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8011056:	4604      	mov	r4, r0
 8011058:	68f8      	ldr	r0, [r7, #12]
 801105a:	f000 fed7 	bl	8011e0c <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 801105e:	4603      	mov	r3, r0
 8011060:	601c      	str	r4, [r3, #0]
	    break;
 8011062:	e005      	b.n	8011070 <_ZNSt17_Function_handlerIFvvEZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8011064:	79fb      	ldrb	r3, [r7, #7]
 8011066:	461a      	mov	r2, r3
 8011068:	68b9      	ldr	r1, [r7, #8]
 801106a:	68f8      	ldr	r0, [r7, #12]
 801106c:	f000 feda 	bl	8011e24 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>
	return false;
 8011070:	2300      	movs	r3, #0
      }
 8011072:	4618      	mov	r0, r3
 8011074:	3714      	adds	r7, #20
 8011076:	46bd      	mov	sp, r7
 8011078:	bd90      	pop	{r4, r7, pc}

0801107a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801107a:	b480      	push	{r7}
 801107c:	b083      	sub	sp, #12
 801107e:	af00      	add	r7, sp, #0
 8011080:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	4618      	mov	r0, r3
 8011086:	370c      	adds	r7, #12
 8011088:	46bd      	mov	sp, r7
 801108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801108e:	4770      	bx	lr

08011090 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011090:	b590      	push	{r4, r7, lr}
 8011092:	b083      	sub	sp, #12
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 801109a:	6838      	ldr	r0, [r7, #0]
 801109c:	f7ff ffed 	bl	801107a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80110a0:	4603      	mov	r3, r0
 80110a2:	681c      	ldr	r4, [r3, #0]
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	4619      	mov	r1, r3
 80110a8:	2004      	movs	r0, #4
 80110aa:	f7ef f941 	bl	8000330 <_ZnwjPv>
 80110ae:	4603      	mov	r3, r0
 80110b0:	601c      	str	r4, [r3, #0]
 80110b2:	4618      	mov	r0, r3
 80110b4:	370c      	adds	r7, #12
 80110b6:	46bd      	mov	sp, r7
 80110b8:	bd90      	pop	{r4, r7, pc}

080110ba <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80110ba:	b580      	push	{r7, lr}
 80110bc:	b084      	sub	sp, #16
 80110be:	af00      	add	r7, sp, #0
 80110c0:	60f8      	str	r0, [r7, #12]
 80110c2:	60b9      	str	r1, [r7, #8]
 80110c4:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80110c6:	6878      	ldr	r0, [r7, #4]
 80110c8:	f7ff ffd7 	bl	801107a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 80110cc:	4603      	mov	r3, r0
 80110ce:	4619      	mov	r1, r3
 80110d0:	68b8      	ldr	r0, [r7, #8]
 80110d2:	f7ff ffdd 	bl	8011090 <_ZSt12construct_atIP5TimerJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 80110d6:	bf00      	nop
 80110d8:	3710      	adds	r7, #16
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}
	...

080110e0 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80110e0:	b5b0      	push	{r4, r5, r7, lr}
 80110e2:	b08c      	sub	sp, #48	; 0x30
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60f8      	str	r0, [r7, #12]
 80110e8:	60b9      	str	r1, [r7, #8]
 80110ea:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80110ec:	4a39      	ldr	r2, [pc, #228]	; (80111d4 <_ZNSt6vectorIP5TimerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 80110ee:	2101      	movs	r1, #1
 80110f0:	68f8      	ldr	r0, [r7, #12]
 80110f2:	f000 fec2 	bl	8011e7a <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>
 80110f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80110f8:	68fb      	ldr	r3, [r7, #12]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80110fe:	68fb      	ldr	r3, [r7, #12]
 8011100:	685b      	ldr	r3, [r3, #4]
 8011102:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8011104:	68f8      	ldr	r0, [r7, #12]
 8011106:	f7fe febd 	bl	800fe84 <_ZNSt6vectorIP5TimerSaIS1_EE5beginEv>
 801110a:	4603      	mov	r3, r0
 801110c:	617b      	str	r3, [r7, #20]
 801110e:	f107 0214 	add.w	r2, r7, #20
 8011112:	f107 0308 	add.w	r3, r7, #8
 8011116:	4611      	mov	r1, r2
 8011118:	4618      	mov	r0, r3
 801111a:	f000 fef5 	bl	8011f08 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 801111e:	4603      	mov	r3, r0
 8011120:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8011122:	68fb      	ldr	r3, [r7, #12]
 8011124:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011126:	4618      	mov	r0, r3
 8011128:	f000 ff03 	bl	8011f32 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>
 801112c:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 801112e:	69fb      	ldr	r3, [r7, #28]
 8011130:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8011132:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8011134:	6a3b      	ldr	r3, [r7, #32]
 8011136:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8011138:	69fa      	ldr	r2, [r7, #28]
 801113a:	18d5      	adds	r5, r2, r3
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7ff ff9c 	bl	801107a <_ZSt7forwardIP5TimerEOT_RNSt16remove_referenceIS2_E4typeE>
 8011142:	4603      	mov	r3, r0
 8011144:	461a      	mov	r2, r3
 8011146:	4629      	mov	r1, r5
 8011148:	4620      	mov	r0, r4
 801114a:	f7ff ffb6 	bl	80110ba <_ZNSt16allocator_traitsISaIP5TimerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 801114e:	2300      	movs	r3, #0
 8011150:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011152:	f107 0308 	add.w	r3, r7, #8
 8011156:	4618      	mov	r0, r3
 8011158:	f7fc fc12 	bl	800d980 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 801115c:	4603      	mov	r3, r0
 801115e:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	4618      	mov	r0, r3
 8011164:	f7fa ffac 	bl	800c0c0 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011168:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 801116a:	69fa      	ldr	r2, [r7, #28]
 801116c:	4621      	mov	r1, r4
 801116e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011170:	f000 fef3 	bl	8011f5a <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011174:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8011176:	69bb      	ldr	r3, [r7, #24]
 8011178:	3304      	adds	r3, #4
 801117a:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801117c:	f107 0308 	add.w	r3, r7, #8
 8011180:	4618      	mov	r0, r3
 8011182:	f7fc fbfd 	bl	800d980 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011186:	4603      	mov	r3, r0
 8011188:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	4618      	mov	r0, r3
 801118e:	f7fa ff97 	bl	800c0c0 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8011192:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011194:	69ba      	ldr	r2, [r7, #24]
 8011196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011198:	4620      	mov	r0, r4
 801119a:	f000 fede 	bl	8011f5a <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801119e:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 80111a0:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	689a      	ldr	r2, [r3, #8]
 80111a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111a8:	1ad3      	subs	r3, r2, r3
 80111aa:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80111ac:	461a      	mov	r2, r3
 80111ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80111b0:	f7fa ff49 	bl	800c046 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	69fa      	ldr	r2, [r7, #28]
 80111b8:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80111ba:	68fb      	ldr	r3, [r7, #12]
 80111bc:	69ba      	ldr	r2, [r7, #24]
 80111be:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80111c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c2:	009b      	lsls	r3, r3, #2
 80111c4:	69fa      	ldr	r2, [r7, #28]
 80111c6:	441a      	add	r2, r3
 80111c8:	68fb      	ldr	r3, [r7, #12]
 80111ca:	609a      	str	r2, [r3, #8]
    }
 80111cc:	bf00      	nop
 80111ce:	3730      	adds	r7, #48	; 0x30
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bdb0      	pop	{r4, r5, r7, pc}
 80111d4:	08020c54 	.word	0x08020c54

080111d8 <_ZNSt6vectorIP5TimerSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 80111d8:	b580      	push	{r7, lr}
 80111da:	b084      	sub	sp, #16
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	f7fe fe5f 	bl	800fea4 <_ZNSt6vectorIP5TimerSaIS1_EE3endEv>
 80111e6:	4603      	mov	r3, r0
 80111e8:	60fb      	str	r3, [r7, #12]
 80111ea:	f107 030c 	add.w	r3, r7, #12
 80111ee:	2101      	movs	r1, #1
 80111f0:	4618      	mov	r0, r3
 80111f2:	f000 fec6 	bl	8011f82 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>
 80111f6:	4603      	mov	r3, r0
 80111f8:	60bb      	str	r3, [r7, #8]
 80111fa:	f107 0308 	add.w	r3, r7, #8
 80111fe:	4618      	mov	r0, r3
 8011200:	f7fc fbf1 	bl	800d9e6 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEdeEv>
 8011204:	4603      	mov	r3, r0
      }
 8011206:	4618      	mov	r0, r3
 8011208:	3710      	adds	r7, #16
 801120a:	46bd      	mov	sp, r7
 801120c:	bd80      	pop	{r7, pc}

0801120e <_ZNKSt8functionIFvvEEcvbEv>:
      explicit operator bool() const noexcept
 801120e:	b580      	push	{r7, lr}
 8011210:	b082      	sub	sp, #8
 8011212:	af00      	add	r7, sp, #0
 8011214:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	4618      	mov	r0, r3
 801121a:	f7fc f9fb 	bl	800d614 <_ZNKSt14_Function_base8_M_emptyEv>
 801121e:	4603      	mov	r3, r0
 8011220:	f083 0301 	eor.w	r3, r3, #1
 8011224:	b2db      	uxtb	r3, r3
 8011226:	4618      	mov	r0, r3
 8011228:	3708      	adds	r7, #8
 801122a:	46bd      	mov	sp, r7
 801122c:	bd80      	pop	{r7, pc}

0801122e <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 801122e:	b580      	push	{r7, lr}
 8011230:	b084      	sub	sp, #16
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
 8011236:	6039      	str	r1, [r7, #0]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011238:	6878      	ldr	r0, [r7, #4]
 801123a:	f000 febb 	bl	8011fb4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 801123e:	4602      	mov	r2, r0
 8011240:	f107 0308 	add.w	r3, r7, #8
 8011244:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011248:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 801124c:	6838      	ldr	r0, [r7, #0]
 801124e:	f000 feb1 	bl	8011fb4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011252:	4602      	mov	r2, r0
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	e892 0003 	ldmia.w	r2, {r0, r1}
 801125a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 801125e:	f107 0308 	add.w	r3, r7, #8
 8011262:	4618      	mov	r0, r3
 8011264:	f000 fea6 	bl	8011fb4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8011268:	4602      	mov	r2, r0
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011270:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8011274:	bf00      	nop
 8011276:	3710      	adds	r7, #16
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}

0801127c <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 801127c:	b580      	push	{r7, lr}
 801127e:	b084      	sub	sp, #16
 8011280:	af00      	add	r7, sp, #0
 8011282:	6078      	str	r0, [r7, #4]
 8011284:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f000 fe9f 	bl	8011fca <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 801128c:	4603      	mov	r3, r0
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8011292:	6838      	ldr	r0, [r7, #0]
 8011294:	f000 fe99 	bl	8011fca <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8011298:	4603      	mov	r3, r0
 801129a:	681a      	ldr	r2, [r3, #0]
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80112a0:	f107 030c 	add.w	r3, r7, #12
 80112a4:	4618      	mov	r0, r3
 80112a6:	f000 fe90 	bl	8011fca <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 80112aa:	4603      	mov	r3, r0
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	683b      	ldr	r3, [r7, #0]
 80112b0:	601a      	str	r2, [r3, #0]
    }
 80112b2:	bf00      	nop
 80112b4:	3710      	adds	r7, #16
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <_ZSt4swapIPFvRKSt9_Any_dataEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS9_ESt18is_move_assignableIS9_EEE5valueEvE4typeERS9_SJ_>:
    swap(_Tp& __a, _Tp& __b)
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b084      	sub	sp, #16
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
 80112c2:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 fe8b 	bl	8011fe0 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80112ca:	4603      	mov	r3, r0
 80112cc:	681b      	ldr	r3, [r3, #0]
 80112ce:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 80112d0:	6838      	ldr	r0, [r7, #0]
 80112d2:	f000 fe85 	bl	8011fe0 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80112d6:	4603      	mov	r3, r0
 80112d8:	681a      	ldr	r2, [r3, #0]
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80112de:	f107 030c 	add.w	r3, r7, #12
 80112e2:	4618      	mov	r0, r3
 80112e4:	f000 fe7c 	bl	8011fe0 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>
 80112e8:	4603      	mov	r3, r0
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	683b      	ldr	r3, [r7, #0]
 80112ee:	601a      	str	r2, [r3, #0]
    }
 80112f0:	bf00      	nop
 80112f2:	3710      	adds	r7, #16
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}

080112f8 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11lower_boundERS2_>:
      lower_bound(const key_type& __k)
 80112f8:	b590      	push	{r4, r7, lr}
 80112fa:	b083      	sub	sp, #12
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	6078      	str	r0, [r7, #4]
 8011300:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 8011302:	6878      	ldr	r0, [r7, #4]
 8011304:	f7f9 ff7f 	bl	800b206 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_M_beginEv>
 8011308:	4604      	mov	r4, r0
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f7fa f9c2 	bl	800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 8011310:	4602      	mov	r2, r0
 8011312:	683b      	ldr	r3, [r7, #0]
 8011314:	4621      	mov	r1, r4
 8011316:	6878      	ldr	r0, [r7, #4]
 8011318:	f000 fe6d 	bl	8011ff6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>
 801131c:	4603      	mov	r3, r0
 801131e:	4618      	mov	r0, r3
 8011320:	370c      	adds	r7, #12
 8011322:	46bd      	mov	sp, r7
 8011324:	bd90      	pop	{r4, r7, pc}

08011326 <_ZNKSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8key_compEv>:
      key_comp() const
 8011326:	b480      	push	{r7}
 8011328:	b083      	sub	sp, #12
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 801132e:	bf00      	nop
 8011330:	4618      	mov	r0, r3
 8011332:	370c      	adds	r7, #12
 8011334:	46bd      	mov	sp, r7
 8011336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133a:	4770      	bx	lr

0801133c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 801133c:	b480      	push	{r7}
 801133e:	b083      	sub	sp, #12
 8011340:	af00      	add	r7, sp, #0
 8011342:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	4618      	mov	r0, r3
 8011348:	370c      	adds	r7, #12
 801134a:	46bd      	mov	sp, r7
 801134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011350:	4770      	bx	lr

08011352 <_ZNSt5tupleIJO9PrecisionEEC1IJS0_ELb1ELb1EEEDpOT_>:
	tuple(_UElements&&... __elements)
 8011352:	b590      	push	{r4, r7, lr}
 8011354:	b083      	sub	sp, #12
 8011356:	af00      	add	r7, sp, #0
 8011358:	6078      	str	r0, [r7, #4]
 801135a:	6039      	str	r1, [r7, #0]
	: _Inherited(std::forward<_UElements>(__elements)...) { }
 801135c:	687c      	ldr	r4, [r7, #4]
 801135e:	6838      	ldr	r0, [r7, #0]
 8011360:	f7ff ffec 	bl	801133c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8011364:	4603      	mov	r3, r0
 8011366:	4619      	mov	r1, r3
 8011368:	4620      	mov	r0, r4
 801136a:	f000 fe75 	bl	8012058 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	4618      	mov	r0, r3
 8011372:	370c      	adds	r7, #12
 8011374:	46bd      	mov	sp, r7
 8011376:	bd90      	pop	{r4, r7, pc}

08011378 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011378:	b480      	push	{r7}
 801137a:	b083      	sub	sp, #12
 801137c:	af00      	add	r7, sp, #0
 801137e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	4618      	mov	r0, r3
 8011384:	370c      	adds	r7, #12
 8011386:	46bd      	mov	sp, r7
 8011388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801138c:	4770      	bx	lr

0801138e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_create_node(_Args&&... __args)
 801138e:	b5b0      	push	{r4, r5, r7, lr}
 8011390:	b088      	sub	sp, #32
 8011392:	af02      	add	r7, sp, #8
 8011394:	60f8      	str	r0, [r7, #12]
 8011396:	60b9      	str	r1, [r7, #8]
 8011398:	607a      	str	r2, [r7, #4]
 801139a:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 801139c:	68f8      	ldr	r0, [r7, #12]
 801139e:	f7fa f991 	bl	800b6c4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE11_M_get_nodeEv>
 80113a2:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 80113a4:	68b8      	ldr	r0, [r7, #8]
 80113a6:	f7ef ff5e 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80113aa:	4604      	mov	r4, r0
 80113ac:	6878      	ldr	r0, [r7, #4]
 80113ae:	f7ff ffe3 	bl	8011378 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80113b2:	4605      	mov	r5, r0
 80113b4:	6838      	ldr	r0, [r7, #0]
 80113b6:	f7ef ff6c 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80113ba:	4603      	mov	r3, r0
 80113bc:	9300      	str	r3, [sp, #0]
 80113be:	462b      	mov	r3, r5
 80113c0:	4622      	mov	r2, r4
 80113c2:	6979      	ldr	r1, [r7, #20]
 80113c4:	68f8      	ldr	r0, [r7, #12]
 80113c6:	f000 fe5a 	bl	801207e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>
	  return __tmp;
 80113ca:	697b      	ldr	r3, [r7, #20]
	}
 80113cc:	4618      	mov	r0, r3
 80113ce:	3718      	adds	r7, #24
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bdb0      	pop	{r4, r5, r7, pc}

080113d4 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80113d4:	b5b0      	push	{r4, r5, r7, lr}
 80113d6:	b086      	sub	sp, #24
 80113d8:	af00      	add	r7, sp, #0
 80113da:	60f8      	str	r0, [r7, #12]
 80113dc:	60b9      	str	r1, [r7, #8]
 80113de:	607a      	str	r2, [r7, #4]
 80113e0:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d117      	bne.n	8011418 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80113e8:	68f8      	ldr	r0, [r7, #12]
 80113ea:	f7fa f953 	bl	800b694 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_M_endEv>
 80113ee:	4602      	mov	r2, r0
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	4293      	cmp	r3, r2
 80113f4:	d010      	beq.n	8011418 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80113f6:	68fc      	ldr	r4, [r7, #12]
 80113f8:	6838      	ldr	r0, [r7, #0]
 80113fa:	f7fa f852 	bl	800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 80113fe:	4605      	mov	r5, r0
 8011400:	6878      	ldr	r0, [r7, #4]
 8011402:	f7fa f999 	bl	800b738 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8011406:	4603      	mov	r3, r0
 8011408:	461a      	mov	r2, r3
 801140a:	4629      	mov	r1, r5
 801140c:	4620      	mov	r0, r4
 801140e:	f7f9 fdf7 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 8011412:	4603      	mov	r3, r0
 8011414:	2b00      	cmp	r3, #0
 8011416:	d001      	beq.n	801141c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x48>
 8011418:	2301      	movs	r3, #1
 801141a:	e000      	b.n	801141e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSB_PSt13_Rb_tree_nodeIS3_E+0x4a>
 801141c:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801141e:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8011424:	7df8      	ldrb	r0, [r7, #23]
 8011426:	687a      	ldr	r2, [r7, #4]
 8011428:	6839      	ldr	r1, [r7, #0]
 801142a:	f00f f8fb 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	695b      	ldr	r3, [r3, #20]
 8011432:	1c5a      	adds	r2, r3, #1
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8011438:	f107 0310 	add.w	r3, r7, #16
 801143c:	6839      	ldr	r1, [r7, #0]
 801143e:	4618      	mov	r0, r3
 8011440:	f7fa f853 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 8011444:	693b      	ldr	r3, [r7, #16]
    }
 8011446:	4618      	mov	r0, r3
 8011448:	3718      	adds	r7, #24
 801144a:	46bd      	mov	sp, r7
 801144c:	bdb0      	pop	{r4, r5, r7, pc}

0801144e <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>:
	    _Storage(in_place_t, _Args&&... __args)
 801144e:	b580      	push	{r7, lr}
 8011450:	b084      	sub	sp, #16
 8011452:	af00      	add	r7, sp, #0
 8011454:	60f8      	str	r0, [r7, #12]
 8011456:	7239      	strb	r1, [r7, #8]
 8011458:	607a      	str	r2, [r7, #4]
	    : _M_value(std::forward<_Args>(__args)...)
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7ff f969 	bl	8010732 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011460:	4603      	mov	r3, r0
 8011462:	681a      	ldr	r2, [r3, #0]
 8011464:	68fb      	ldr	r3, [r7, #12]
 8011466:	601a      	str	r2, [r3, #0]
	    { }
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	4618      	mov	r0, r3
 801146c:	3710      	adds	r7, #16
 801146e:	46bd      	mov	sp, r7
 8011470:	bd80      	pop	{r7, pc}

08011472 <_ZNSt22_Optional_payload_baseIP13StreamMessageEC1IJS1_EEESt10in_place_tDpOT_>:
	_Optional_payload_base(in_place_t __tag, _Args&&... __args)
 8011472:	b5b0      	push	{r4, r5, r7, lr}
 8011474:	b084      	sub	sp, #16
 8011476:	af00      	add	r7, sp, #0
 8011478:	60f8      	str	r0, [r7, #12]
 801147a:	7239      	strb	r1, [r7, #8]
 801147c:	607a      	str	r2, [r7, #4]
	  _M_engaged(true)
 801147e:	68fc      	ldr	r4, [r7, #12]
 8011480:	6878      	ldr	r0, [r7, #4]
 8011482:	f7ff f956 	bl	8010732 <_ZSt7forwardIP13StreamMessageEOT_RNSt16remove_referenceIS2_E4typeE>
 8011486:	4603      	mov	r3, r0
 8011488:	461a      	mov	r2, r3
 801148a:	4629      	mov	r1, r5
 801148c:	4620      	mov	r0, r4
 801148e:	f7ff ffde 	bl	801144e <_ZNSt22_Optional_payload_baseIP13StreamMessageE8_StorageIS1_Lb1EEC1IJS1_EEESt10in_place_tDpOT_>
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	2201      	movs	r2, #1
 8011496:	711a      	strb	r2, [r3, #4]
	{ }
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	4618      	mov	r0, r3
 801149c:	3710      	adds	r7, #16
 801149e:	46bd      	mov	sp, r7
 80114a0:	bdb0      	pop	{r4, r5, r7, pc}

080114a2 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80114a2:	b480      	push	{r7}
 80114a4:	b083      	sub	sp, #12
 80114a6:	af00      	add	r7, sp, #0
 80114a8:	6078      	str	r0, [r7, #4]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4618      	mov	r0, r3
 80114ae:	370c      	adds	r7, #12
 80114b0:	46bd      	mov	sp, r7
 80114b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114b6:	4770      	bx	lr

080114b8 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80114b8:	b580      	push	{r7, lr}
 80114ba:	b088      	sub	sp, #32
 80114bc:	af00      	add	r7, sp, #0
 80114be:	60f8      	str	r0, [r7, #12]
 80114c0:	60b9      	str	r1, [r7, #8]
 80114c2:	607a      	str	r2, [r7, #4]
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	61fb      	str	r3, [r7, #28]
 80114c8:	68bb      	ldr	r3, [r7, #8]
 80114ca:	61bb      	str	r3, [r7, #24]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80114d0:	f7ee ff26 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80114d4:	4603      	mov	r3, r0
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d003      	beq.n	80114e2 <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x2a>
	    ::operator delete(__p);
 80114da:	69b8      	ldr	r0, [r7, #24]
 80114dc:	f00f f832 	bl	8020544 <_ZdlPv>
	    return;
 80114e0:	e005      	b.n	80114ee <_ZNSt16allocator_traitsISaIP13StreamMessageEE10deallocateERS2_PS1_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80114e2:	697a      	ldr	r2, [r7, #20]
 80114e4:	69b9      	ldr	r1, [r7, #24]
 80114e6:	69f8      	ldr	r0, [r7, #28]
 80114e8:	f001 fb65 	bl	8012bb6 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>
      { __a.deallocate(__p, __n); }
 80114ec:	bf00      	nop
 80114ee:	bf00      	nop
 80114f0:	3720      	adds	r7, #32
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}

080114f6 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b082      	sub	sp, #8
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
 80114fe:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 8011500:	f7ee ff0e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8011504:	4603      	mov	r3, r0
 8011506:	2b00      	cmp	r3, #0
 8011508:	d004      	beq.n	8011514 <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 801150a:	6839      	ldr	r1, [r7, #0]
 801150c:	6878      	ldr	r0, [r7, #4]
 801150e:	f000 fde3 	bl	80120d8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>
 8011512:	e003      	b.n	801151c <_ZSt8_DestroyIPP13StreamMessageEvT_S3_+0x26>
	__destroy(__first, __last);
 8011514:	6839      	ldr	r1, [r7, #0]
 8011516:	6878      	ldr	r0, [r7, #4]
 8011518:	f000 fdf6 	bl	8012108 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>
    }
 801151c:	3708      	adds	r7, #8
 801151e:	46bd      	mov	sp, r7
 8011520:	bd80      	pop	{r7, pc}

08011522 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8011522:	b480      	push	{r7}
 8011524:	b083      	sub	sp, #12
 8011526:	af00      	add	r7, sp, #0
 8011528:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	4618      	mov	r0, r3
 801152e:	370c      	adds	r7, #12
 8011530:	46bd      	mov	sp, r7
 8011532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011536:	4770      	bx	lr

08011538 <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8011538:	b590      	push	{r4, r7, lr}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
 8011540:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8011542:	6838      	ldr	r0, [r7, #0]
 8011544:	f7ff ffed 	bl	8011522 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011548:	4603      	mov	r3, r0
 801154a:	681c      	ldr	r4, [r3, #0]
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	4619      	mov	r1, r3
 8011550:	2004      	movs	r0, #4
 8011552:	f7ee feed 	bl	8000330 <_ZnwjPv>
 8011556:	4603      	mov	r3, r0
 8011558:	601c      	str	r4, [r3, #0]
 801155a:	4618      	mov	r0, r3
 801155c:	370c      	adds	r7, #12
 801155e:	46bd      	mov	sp, r7
 8011560:	bd90      	pop	{r4, r7, pc}

08011562 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8011562:	b580      	push	{r7, lr}
 8011564:	b084      	sub	sp, #16
 8011566:	af00      	add	r7, sp, #0
 8011568:	60f8      	str	r0, [r7, #12]
 801156a:	60b9      	str	r1, [r7, #8]
 801156c:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7ff ffd7 	bl	8011522 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 8011574:	4603      	mov	r3, r0
 8011576:	4619      	mov	r1, r3
 8011578:	68b8      	ldr	r0, [r7, #8]
 801157a:	f7ff ffdd 	bl	8011538 <_ZSt12construct_atIP6StreamJS1_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS3_DpOS4_>
	}
 801157e:	bf00      	nop
 8011580:	3710      	adds	r7, #16
 8011582:	46bd      	mov	sp, r7
 8011584:	bd80      	pop	{r7, pc}
	...

08011588 <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8011588:	b5b0      	push	{r4, r5, r7, lr}
 801158a:	b08c      	sub	sp, #48	; 0x30
 801158c:	af00      	add	r7, sp, #0
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	60b9      	str	r1, [r7, #8]
 8011592:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8011594:	4a39      	ldr	r2, [pc, #228]	; (801167c <_ZNSt6vectorIP6StreamSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xf4>)
 8011596:	2101      	movs	r1, #1
 8011598:	68f8      	ldr	r0, [r7, #12]
 801159a:	f000 fdc0 	bl	801211e <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>
 801159e:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 80115a6:	68fb      	ldr	r3, [r7, #12]
 80115a8:	685b      	ldr	r3, [r3, #4]
 80115aa:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 80115ac:	68f8      	ldr	r0, [r7, #12]
 80115ae:	f7fe fdf8 	bl	80101a2 <_ZNSt6vectorIP6StreamSaIS1_EE5beginEv>
 80115b2:	4603      	mov	r3, r0
 80115b4:	617b      	str	r3, [r7, #20]
 80115b6:	f107 0214 	add.w	r2, r7, #20
 80115ba:	f107 0308 	add.w	r3, r7, #8
 80115be:	4611      	mov	r1, r2
 80115c0:	4618      	mov	r0, r3
 80115c2:	f000 fdf3 	bl	80121ac <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80115c6:	4603      	mov	r3, r0
 80115c8:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 fe01 	bl	80121d6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>
 80115d4:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 80115d6:	69fb      	ldr	r3, [r7, #28]
 80115d8:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 80115da:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80115dc:	6a3b      	ldr	r3, [r7, #32]
 80115de:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80115e0:	69fa      	ldr	r2, [r7, #28]
 80115e2:	18d5      	adds	r5, r2, r3
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7ff ff9c 	bl	8011522 <_ZSt7forwardIP6StreamEOT_RNSt16remove_referenceIS2_E4typeE>
 80115ea:	4603      	mov	r3, r0
 80115ec:	461a      	mov	r2, r3
 80115ee:	4629      	mov	r1, r5
 80115f0:	4620      	mov	r0, r4
 80115f2:	f7ff ffb6 	bl	8011562 <_ZNSt16allocator_traitsISaIP6StreamEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80115f6:	2300      	movs	r3, #0
 80115f8:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80115fa:	f107 0308 	add.w	r3, r7, #8
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fc fd3c 	bl	800e07c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 8011604:	4603      	mov	r3, r0
 8011606:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	4618      	mov	r0, r3
 801160c:	f7fa f994 	bl	800b938 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8011610:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8011612:	69fa      	ldr	r2, [r7, #28]
 8011614:	4621      	mov	r1, r4
 8011616:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011618:	f000 fdf1 	bl	80121fe <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 801161c:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	3304      	adds	r3, #4
 8011622:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8011624:	f107 0308 	add.w	r3, r7, #8
 8011628:	4618      	mov	r0, r3
 801162a:	f7fc fd27 	bl	800e07c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 801162e:	4603      	mov	r3, r0
 8011630:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	4618      	mov	r0, r3
 8011636:	f7fa f97f 	bl	800b938 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 801163a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 801163c:	69ba      	ldr	r2, [r7, #24]
 801163e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011640:	4620      	mov	r0, r4
 8011642:	f000 fddc 	bl	80121fe <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8011646:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8011648:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	689a      	ldr	r2, [r3, #8]
 801164e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8011654:	461a      	mov	r2, r3
 8011656:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011658:	f7f9 fd17 	bl	800b08a <_ZNSt12_Vector_baseIP6StreamSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	69fa      	ldr	r2, [r7, #28]
 8011660:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	69ba      	ldr	r2, [r7, #24]
 8011666:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8011668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166a:	009b      	lsls	r3, r3, #2
 801166c:	69fa      	ldr	r2, [r7, #28]
 801166e:	441a      	add	r2, r3
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	609a      	str	r2, [r3, #8]
    }
 8011674:	bf00      	nop
 8011676:	3730      	adds	r7, #48	; 0x30
 8011678:	46bd      	mov	sp, r7
 801167a:	bdb0      	pop	{r4, r5, r7, pc}
 801167c:	08020c54 	.word	0x08020c54

08011680 <_ZNSt6vectorIP6StreamSaIS1_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8011680:	b580      	push	{r7, lr}
 8011682:	b084      	sub	sp, #16
 8011684:	af00      	add	r7, sp, #0
 8011686:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f7fe fd9a 	bl	80101c2 <_ZNSt6vectorIP6StreamSaIS1_EE3endEv>
 801168e:	4603      	mov	r3, r0
 8011690:	60fb      	str	r3, [r7, #12]
 8011692:	f107 030c 	add.w	r3, r7, #12
 8011696:	2101      	movs	r1, #1
 8011698:	4618      	mov	r0, r3
 801169a:	f000 fdc4 	bl	8012226 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>
 801169e:	4603      	mov	r3, r0
 80116a0:	60bb      	str	r3, [r7, #8]
 80116a2:	f107 0308 	add.w	r3, r7, #8
 80116a6:	4618      	mov	r0, r3
 80116a8:	f7fc fd1b 	bl	800e0e2 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEdeEv>
 80116ac:	4603      	mov	r3, r0
      }
 80116ae:	4618      	mov	r0, r3
 80116b0:	3710      	adds	r7, #16
 80116b2:	46bd      	mov	sp, r7
 80116b4:	bd80      	pop	{r7, pc}

080116b6 <_ZSt7forwardIRKP13StreamMessageEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80116b6:	b480      	push	{r7}
 80116b8:	b083      	sub	sp, #12
 80116ba:	af00      	add	r7, sp, #0
 80116bc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4618      	mov	r0, r3
 80116c2:	370c      	adds	r7, #12
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr

080116cc <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80116cc:	b590      	push	{r4, r7, lr}
 80116ce:	b087      	sub	sp, #28
 80116d0:	af00      	add	r7, sp, #0
 80116d2:	60f8      	str	r0, [r7, #12]
 80116d4:	60b9      	str	r1, [r7, #8]
 80116d6:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80116d8:	68f8      	ldr	r0, [r7, #12]
 80116da:	f000 fdbd 	bl	8012258 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 80116de:	4604      	mov	r4, r0
 80116e0:	68f8      	ldr	r0, [r7, #12]
 80116e2:	f7fe fc65 	bl	800ffb0 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 80116e6:	4603      	mov	r3, r0
 80116e8:	1ae2      	subs	r2, r4, r3
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	bf34      	ite	cc
 80116f0:	2301      	movcc	r3, #1
 80116f2:	2300      	movcs	r3, #0
 80116f4:	b2db      	uxtb	r3, r3
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d002      	beq.n	8011700 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80116fa:	6878      	ldr	r0, [r7, #4]
 80116fc:	f00e fff0 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011700:	68f8      	ldr	r0, [r7, #12]
 8011702:	f7fe fc55 	bl	800ffb0 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011706:	4604      	mov	r4, r0
 8011708:	68f8      	ldr	r0, [r7, #12]
 801170a:	f7fe fc51 	bl	800ffb0 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 801170e:	4603      	mov	r3, r0
 8011710:	613b      	str	r3, [r7, #16]
 8011712:	f107 0208 	add.w	r2, r7, #8
 8011716:	f107 0310 	add.w	r3, r7, #16
 801171a:	4611      	mov	r1, r2
 801171c:	4618      	mov	r0, r3
 801171e:	f7f1 f898 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8011722:	4603      	mov	r3, r0
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	4423      	add	r3, r4
 8011728:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801172a:	68f8      	ldr	r0, [r7, #12]
 801172c:	f7fe fc40 	bl	800ffb0 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE4sizeEv>
 8011730:	4602      	mov	r2, r0
 8011732:	697b      	ldr	r3, [r7, #20]
 8011734:	4293      	cmp	r3, r2
 8011736:	d306      	bcc.n	8011746 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011738:	68f8      	ldr	r0, [r7, #12]
 801173a:	f000 fd8d 	bl	8012258 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 801173e:	4602      	mov	r2, r0
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	4293      	cmp	r3, r2
 8011744:	d904      	bls.n	8011750 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011746:	68f8      	ldr	r0, [r7, #12]
 8011748:	f000 fd86 	bl	8012258 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>
 801174c:	4603      	mov	r3, r0
 801174e:	e000      	b.n	8011752 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011750:	697b      	ldr	r3, [r7, #20]
      }
 8011752:	4618      	mov	r0, r3
 8011754:	371c      	adds	r7, #28
 8011756:	46bd      	mov	sp, r7
 8011758:	bd90      	pop	{r4, r7, pc}

0801175a <_ZN9__gnu_cxxmiIPP13StreamMessageSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 801175a:	b590      	push	{r4, r7, lr}
 801175c:	b083      	sub	sp, #12
 801175e:	af00      	add	r7, sp, #0
 8011760:	6078      	str	r0, [r7, #4]
 8011762:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f7fc fb89 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 801176a:	4603      	mov	r3, r0
 801176c:	681c      	ldr	r4, [r3, #0]
 801176e:	6838      	ldr	r0, [r7, #0]
 8011770:	f7fc fb84 	bl	800de7c <_ZNK9__gnu_cxx17__normal_iteratorIPP13StreamMessageSt6vectorIS2_SaIS2_EEE4baseEv>
 8011774:	4603      	mov	r3, r0
 8011776:	681b      	ldr	r3, [r3, #0]
 8011778:	1ae3      	subs	r3, r4, r3
 801177a:	109b      	asrs	r3, r3, #2
 801177c:	4618      	mov	r0, r3
 801177e:	370c      	adds	r7, #12
 8011780:	46bd      	mov	sp, r7
 8011782:	bd90      	pop	{r4, r7, pc}

08011784 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011784:	b580      	push	{r7, lr}
 8011786:	b082      	sub	sp, #8
 8011788:	af00      	add	r7, sp, #0
 801178a:	6078      	str	r0, [r7, #4]
 801178c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801178e:	683b      	ldr	r3, [r7, #0]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d006      	beq.n	80117a2 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x1e>
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	6839      	ldr	r1, [r7, #0]
 8011798:	4618      	mov	r0, r3
 801179a:	f000 fd6e 	bl	801227a <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>
 801179e:	4603      	mov	r3, r0
 80117a0:	e000      	b.n	80117a4 <_ZNSt12_Vector_baseIP13StreamMessageSaIS1_EE11_M_allocateEj+0x20>
 80117a2:	2300      	movs	r3, #0
      }
 80117a4:	4618      	mov	r0, r3
 80117a6:	3708      	adds	r7, #8
 80117a8:	46bd      	mov	sp, r7
 80117aa:	bd80      	pop	{r7, pc}

080117ac <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80117ac:	b590      	push	{r4, r7, lr}
 80117ae:	b087      	sub	sp, #28
 80117b0:	af02      	add	r7, sp, #8
 80117b2:	60f8      	str	r0, [r7, #12]
 80117b4:	60b9      	str	r1, [r7, #8]
 80117b6:	607a      	str	r2, [r7, #4]
 80117b8:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80117ba:	f88d 4000 	strb.w	r4, [sp]
 80117be:	683b      	ldr	r3, [r7, #0]
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	68b9      	ldr	r1, [r7, #8]
 80117c4:	68f8      	ldr	r0, [r7, #12]
 80117c6:	f000 fd78 	bl	80122ba <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80117ca:	4603      	mov	r3, r0
      }
 80117cc:	4618      	mov	r0, r3
 80117ce:	3714      	adds	r7, #20
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd90      	pop	{r4, r7, pc}

080117d4 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E15_M_init_functorERSt9_Any_dataOS4_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 80117d4:	b590      	push	{r4, r7, lr}
 80117d6:	b085      	sub	sp, #20
 80117d8:	af00      	add	r7, sp, #0
 80117da:	60f8      	str	r0, [r7, #12]
 80117dc:	60b9      	str	r1, [r7, #8]
 80117de:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 80117e0:	68b8      	ldr	r0, [r7, #8]
 80117e2:	f7ff f91e 	bl	8010a22 <_ZSt4moveIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EONSt16remove_referenceIT_E4typeEOS6_>
 80117e6:	4604      	mov	r4, r0
 80117e8:	68f8      	ldr	r0, [r7, #12]
 80117ea:	f7fb fedc 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 80117ee:	4603      	mov	r3, r0
 80117f0:	4619      	mov	r1, r3
 80117f2:	2004      	movs	r0, #4
 80117f4:	f7ee fd9c 	bl	8000330 <_ZnwjPv>
 80117f8:	4602      	mov	r2, r0
 80117fa:	6823      	ldr	r3, [r4, #0]
 80117fc:	6013      	str	r3, [r2, #0]
 80117fe:	bf00      	nop
 8011800:	3714      	adds	r7, #20
 8011802:	46bd      	mov	sp, r7
 8011804:	bd90      	pop	{r4, r7, pc}

08011806 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011806:	b580      	push	{r7, lr}
 8011808:	b084      	sub	sp, #16
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f000 fd6f 	bl	80122f2 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 8011814:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011816:	68f8      	ldr	r0, [r7, #12]
 8011818:	f000 fd77 	bl	801230a <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>
 801181c:	4603      	mov	r3, r0
	}
 801181e:	4618      	mov	r0, r3
 8011820:	3710      	adds	r7, #16
 8011822:	46bd      	mov	sp, r7
 8011824:	bd80      	pop	{r7, pc}

08011826 <_ZSt10__invoke_rIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES6_E4typeEOS7_DpOS8_>:

#if __cplusplus >= 201703L
  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr enable_if_t<is_invocable_r_v<_Res, _Callable, _Args...>, _Res>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011826:	b590      	push	{r4, r7, lr}
 8011828:	b083      	sub	sp, #12
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      if constexpr (is_void_v<_Res>)
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 801182e:	6878      	ldr	r0, [r7, #4]
 8011830:	f000 fd76 	bl	8012320 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8011834:	4603      	mov	r3, r0
 8011836:	4619      	mov	r1, r3
 8011838:	4620      	mov	r0, r4
 801183a:	f000 fd7c 	bl	8012336 <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
					std::forward<_Args>(__args)...);
      else
	return std::__invoke_impl<__type>(__tag{},
					  std::forward<_Callable>(__fn),
					  std::forward<_Args>(__args)...);
    }
 801183e:	bf00      	nop
 8011840:	370c      	adds	r7, #12
 8011842:	46bd      	mov	sp, r7
 8011844:	bd90      	pop	{r4, r7, pc}

08011846 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 8011846:	b580      	push	{r7, lr}
 8011848:	b082      	sub	sp, #8
 801184a:	af00      	add	r7, sp, #0
 801184c:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 801184e:	6878      	ldr	r0, [r7, #4]
 8011850:	f7fb fea9 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8011854:	4603      	mov	r3, r0
 8011856:	4618      	mov	r0, r3
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 801185e:	b5b0      	push	{r4, r5, r7, lr}
 8011860:	b084      	sub	sp, #16
 8011862:	af00      	add	r7, sp, #0
 8011864:	60f8      	str	r0, [r7, #12]
 8011866:	60b9      	str	r1, [r7, #8]
 8011868:	4613      	mov	r3, r2
 801186a:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 801186c:	79fb      	ldrb	r3, [r7, #7]
 801186e:	2b03      	cmp	r3, #3
 8011870:	d016      	beq.n	80118a0 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x42>
 8011872:	2b03      	cmp	r3, #3
 8011874:	dc19      	bgt.n	80118aa <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
 8011876:	2b01      	cmp	r3, #1
 8011878:	d002      	beq.n	8011880 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x22>
 801187a:	2b02      	cmp	r3, #2
 801187c:	d00a      	beq.n	8011894 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x36>
 801187e:	e014      	b.n	80118aa <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011880:	68b8      	ldr	r0, [r7, #8]
 8011882:	f7ff ffc0 	bl	8011806 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011886:	4604      	mov	r4, r0
 8011888:	68f8      	ldr	r0, [r7, #12]
 801188a:	f7ff ffdc 	bl	8011846 <_ZNSt9_Any_data9_M_accessIPZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
 801188e:	4603      	mov	r3, r0
 8011890:	601c      	str	r4, [r3, #0]
	      break;
 8011892:	e00a      	b.n	80118aa <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011894:	462a      	mov	r2, r5
 8011896:	68b9      	ldr	r1, [r7, #8]
 8011898:	68f8      	ldr	r0, [r7, #12]
 801189a:	f000 fd5c 	bl	8012356 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>
	      break;
 801189e:	e004      	b.n	80118aa <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 80118a0:	4621      	mov	r1, r4
 80118a2:	68f8      	ldr	r0, [r7, #12]
 80118a4:	f000 fd70 	bl	8012388 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 80118a8:	bf00      	nop
	  return false;
 80118aa:	2300      	movs	r3, #0
	}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3710      	adds	r7, #16
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bdb0      	pop	{r4, r5, r7, pc}

080118b4 <_ZNSaIP5FieldIJEEEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b082      	sub	sp, #8
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
 80118bc:	6878      	ldr	r0, [r7, #4]
 80118be:	f000 fd6f 	bl	80123a0 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	4618      	mov	r0, r3
 80118c6:	3708      	adds	r7, #8
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}

080118cc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2200      	movs	r2, #0
 80118d8:	601a      	str	r2, [r3, #0]
 80118da:	687b      	ldr	r3, [r7, #4]
 80118dc:	2200      	movs	r2, #0
 80118de:	605a      	str	r2, [r3, #4]
 80118e0:	687b      	ldr	r3, [r7, #4]
 80118e2:	2200      	movs	r2, #0
 80118e4:	609a      	str	r2, [r3, #8]
	{ }
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4618      	mov	r0, r3
 80118ea:	370c      	adds	r7, #12
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr

080118f4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>:
      _M_deallocate(pointer __p, size_t __n)
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b084      	sub	sp, #16
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	60f8      	str	r0, [r7, #12]
 80118fc:	60b9      	str	r1, [r7, #8]
 80118fe:	607a      	str	r2, [r7, #4]
	if (__p)
 8011900:	68bb      	ldr	r3, [r7, #8]
 8011902:	2b00      	cmp	r3, #0
 8011904:	d005      	beq.n	8011912 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	68b9      	ldr	r1, [r7, #8]
 801190c:	4618      	mov	r0, r3
 801190e:	f000 fd52 	bl	80123b6 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>
      }
 8011912:	bf00      	nop
 8011914:	3710      	adds	r7, #16
 8011916:	46bd      	mov	sp, r7
 8011918:	bd80      	pop	{r7, pc}

0801191a <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801191a:	b480      	push	{r7}
 801191c:	b083      	sub	sp, #12
 801191e:	af00      	add	r7, sp, #0
 8011920:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	4618      	mov	r0, r3
 8011926:	370c      	adds	r7, #12
 8011928:	46bd      	mov	sp, r7
 801192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192e:	4770      	bx	lr

08011930 <_ZSt8_DestroyIPP5FieldIJEES2_EvT_S4_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	60f8      	str	r0, [r7, #12]
 8011938:	60b9      	str	r1, [r7, #8]
 801193a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 801193c:	68b9      	ldr	r1, [r7, #8]
 801193e:	68f8      	ldr	r0, [r7, #12]
 8011940:	f000 fd58 	bl	80123f4 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>
    }
 8011944:	bf00      	nop
 8011946:	3710      	adds	r7, #16
 8011948:	46bd      	mov	sp, r7
 801194a:	bd80      	pop	{r7, pc}

0801194c <_ZN5FieldIJEEC1Ev>:
class Field<> {
 801194c:	b480      	push	{r7}
 801194e:	b083      	sub	sp, #12
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
 8011954:	4a04      	ldr	r2, [pc, #16]	; (8011968 <_ZN5FieldIJEEC1Ev+0x1c>)
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	601a      	str	r2, [r3, #0]
 801195a:	687b      	ldr	r3, [r7, #4]
 801195c:	4618      	mov	r0, r3
 801195e:	370c      	adds	r7, #12
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr
 8011968:	08020d04 	.word	0x08020d04

0801196c <_ZN5FieldIJhEEC1EPh>:
    Field(T* ptr) : ptr(ptr) { }
 801196c:	b580      	push	{r7, lr}
 801196e:	b082      	sub	sp, #8
 8011970:	af00      	add	r7, sp, #0
 8011972:	6078      	str	r0, [r7, #4]
 8011974:	6039      	str	r1, [r7, #0]
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	4618      	mov	r0, r3
 801197a:	f7ff ffe7 	bl	801194c <_ZN5FieldIJEEC1Ev>
 801197e:	4a05      	ldr	r2, [pc, #20]	; (8011994 <_ZN5FieldIJhEEC1EPh+0x28>)
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	601a      	str	r2, [r3, #0]
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	683a      	ldr	r2, [r7, #0]
 8011988:	605a      	str	r2, [r3, #4]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	4618      	mov	r0, r3
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}
 8011994:	08020cf0 	.word	0x08020cf0

08011998 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>:
      push_back(value_type&& __x)
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
 80119a0:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80119a2:	6838      	ldr	r0, [r7, #0]
 80119a4:	f000 fd3c 	bl	8012420 <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>
 80119a8:	4603      	mov	r3, r0
 80119aa:	4619      	mov	r1, r3
 80119ac:	6878      	ldr	r0, [r7, #4]
 80119ae:	f000 fd42 	bl	8012436 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>
 80119b2:	bf00      	nop
 80119b4:	3708      	adds	r7, #8
 80119b6:	46bd      	mov	sp, r7
 80119b8:	bd80      	pop	{r7, pc}

080119ba <_ZNSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE11lower_boundERS5_>:
      lower_bound(const key_type& __x)
 80119ba:	b580      	push	{r7, lr}
 80119bc:	b082      	sub	sp, #8
 80119be:	af00      	add	r7, sp, #0
 80119c0:	6078      	str	r0, [r7, #4]
 80119c2:	6039      	str	r1, [r7, #0]
      { return _M_t.lower_bound(__x); }
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	6839      	ldr	r1, [r7, #0]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f000 fd66 	bl	801249a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>
 80119ce:	4603      	mov	r3, r0
 80119d0:	4618      	mov	r0, r3
 80119d2:	3708      	adds	r7, #8
 80119d4:	46bd      	mov	sp, r7
 80119d6:	bd80      	pop	{r7, pc}

080119d8 <_ZNKSt3mapItP6PacketSt4lessItESaISt4pairIKtS1_EEE8key_compEv>:
      key_comp() const
 80119d8:	b590      	push	{r4, r7, lr}
 80119da:	b083      	sub	sp, #12
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
      { return _M_t.key_comp(); }
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	4618      	mov	r0, r3
 80119e4:	f000 fd70 	bl	80124c8 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>
 80119e8:	bf00      	nop
 80119ea:	4620      	mov	r0, r4
 80119ec:	370c      	adds	r7, #12
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd90      	pop	{r4, r7, pc}

080119f2 <_ZNKSt4lessItEclERKtS2_>:
      operator()(const _Tp& __x, const _Tp& __y) const
 80119f2:	b480      	push	{r7}
 80119f4:	b085      	sub	sp, #20
 80119f6:	af00      	add	r7, sp, #0
 80119f8:	60f8      	str	r0, [r7, #12]
 80119fa:	60b9      	str	r1, [r7, #8]
 80119fc:	607a      	str	r2, [r7, #4]
      { return __x < __y; }
 80119fe:	68bb      	ldr	r3, [r7, #8]
 8011a00:	881a      	ldrh	r2, [r3, #0]
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	881b      	ldrh	r3, [r3, #0]
 8011a06:	429a      	cmp	r2, r3
 8011a08:	bf34      	ite	cc
 8011a0a:	2301      	movcc	r3, #1
 8011a0c:	2300      	movcs	r3, #0
 8011a0e:	b2db      	uxtb	r3, r3
 8011a10:	4618      	mov	r0, r3
 8011a12:	3714      	adds	r7, #20
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr

08011a1c <_ZNSt5tupleIJRKtEEC1ILb1ELb1EEES1_>:
	tuple(const _Elements&... __elements)
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	6039      	str	r1, [r7, #0]
	: _Inherited(__elements...) { }
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	6839      	ldr	r1, [r7, #0]
 8011a2a:	4618      	mov	r0, r3
 8011a2c:	f000 fd57 	bl	80124de <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	4618      	mov	r0, r3
 8011a34:	3708      	adds	r7, #8
 8011a36:	46bd      	mov	sp, r7
 8011a38:	bd80      	pop	{r7, pc}

08011a3a <_ZNSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEEC1ERKSt17_Rb_tree_iteratorIS4_E>:
      _Rb_tree_const_iterator(const iterator& __it) _GLIBCXX_NOEXCEPT
 8011a3a:	b480      	push	{r7}
 8011a3c:	b083      	sub	sp, #12
 8011a3e:	af00      	add	r7, sp, #0
 8011a40:	6078      	str	r0, [r7, #4]
 8011a42:	6039      	str	r1, [r7, #0]
      : _M_node(__it._M_node) { }
 8011a44:	683b      	ldr	r3, [r7, #0]
 8011a46:	681a      	ldr	r2, [r3, #0]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	601a      	str	r2, [r3, #0]
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	4618      	mov	r0, r3
 8011a50:	370c      	adds	r7, #12
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr

08011a5a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011a5a:	b5b0      	push	{r4, r5, r7, lr}
 8011a5c:	b088      	sub	sp, #32
 8011a5e:	af00      	add	r7, sp, #0
 8011a60:	60f8      	str	r0, [r7, #12]
 8011a62:	60b9      	str	r1, [r7, #8]
 8011a64:	607a      	str	r2, [r7, #4]
 8011a66:	603b      	str	r3, [r7, #0]
	_Link_type __z = _M_create_node(std::forward<_Args>(__args)...);
 8011a68:	6878      	ldr	r0, [r7, #4]
 8011a6a:	f7ef fbfc 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8011a6e:	4604      	mov	r4, r0
 8011a70:	6838      	ldr	r0, [r7, #0]
 8011a72:	f000 fd43 	bl	80124fc <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8011a76:	4605      	mov	r5, r0
 8011a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a7a:	f7ef fc0a 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8011a7e:	4603      	mov	r3, r0
 8011a80:	462a      	mov	r2, r5
 8011a82:	4621      	mov	r1, r4
 8011a84:	68f8      	ldr	r0, [r7, #12]
 8011a86:	f000 fd44 	bl	8012512 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>
 8011a8a:	61f8      	str	r0, [r7, #28]
	    auto __res = _M_get_insert_hint_unique_pos(__pos, _S_key(__z));
 8011a8c:	69f8      	ldr	r0, [r7, #28]
 8011a8e:	f000 fe86 	bl	801279e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8011a92:	4603      	mov	r3, r0
 8011a94:	f107 0010 	add.w	r0, r7, #16
 8011a98:	68ba      	ldr	r2, [r7, #8]
 8011a9a:	68f9      	ldr	r1, [r7, #12]
 8011a9c:	f000 fd5c 	bl	8012558 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>
	    if (__res.second)
 8011aa0:	697b      	ldr	r3, [r7, #20]
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d007      	beq.n	8011ab6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x5c>
	      return _M_insert_node(__res.first, __res.second, __z);
 8011aa6:	6939      	ldr	r1, [r7, #16]
 8011aa8:	697a      	ldr	r2, [r7, #20]
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	68f8      	ldr	r0, [r7, #12]
 8011aae:	f000 fe89 	bl	80127c4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>
 8011ab2:	4603      	mov	r3, r0
 8011ab4:	e00b      	b.n	8011ace <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEESt17_Rb_tree_iteratorIS4_ESt23_Rb_tree_const_iteratorIS4_EDpOT_+0x74>
	    _M_drop_node(__z);
 8011ab6:	69f9      	ldr	r1, [r7, #28]
 8011ab8:	68f8      	ldr	r0, [r7, #12]
 8011aba:	f7fa fc90 	bl	800c3de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_drop_nodeEPSt13_Rb_tree_nodeIS4_E>
	    return iterator(__res.first);
 8011abe:	693a      	ldr	r2, [r7, #16]
 8011ac0:	f107 0318 	add.w	r3, r7, #24
 8011ac4:	4611      	mov	r1, r2
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7f3 fe6d 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8011acc:	69bb      	ldr	r3, [r7, #24]
      }
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3720      	adds	r7, #32
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bdb0      	pop	{r4, r5, r7, pc}

08011ad6 <_ZN6Packet5buildItJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011ad6:	b590      	push	{r4, r7, lr}
 8011ad8:	b085      	sub	sp, #20
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
 8011ade:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	681b      	ldr	r3, [r3, #0]
 8011ae4:	1c9a      	adds	r2, r3, #2
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011aea:	2008      	movs	r0, #8
 8011aec:	f00e fd2e 	bl	802054c <_Znwj>
 8011af0:	4603      	mov	r3, r0
 8011af2:	461c      	mov	r4, r3
 8011af4:	6839      	ldr	r1, [r7, #0]
 8011af6:	4620      	mov	r0, r4
 8011af8:	f000 fea2 	bl	8012840 <_ZN5FieldIJtEEC1EPt>
 8011afc:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	f103 0208 	add.w	r2, r3, #8
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	60bb      	str	r3, [r7, #8]
 8011b08:	f107 0308 	add.w	r3, r7, #8
 8011b0c:	4619      	mov	r1, r3
 8011b0e:	4610      	mov	r0, r2
 8011b10:	f7ff ff42 	bl	8011998 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011b14:	bf00      	nop
    }
 8011b16:	3714      	adds	r7, #20
 8011b18:	46bd      	mov	sp, r7
 8011b1a:	bd90      	pop	{r4, r7, pc}

08011b1c <_ZN6Packet5buildImJEEEvPT_DpPT0_>:
    void build(Arg1* arg1, Rest*... rest) {
 8011b1c:	b590      	push	{r4, r7, lr}
 8011b1e:	b085      	sub	sp, #20
 8011b20:	af00      	add	r7, sp, #0
 8011b22:	6078      	str	r0, [r7, #4]
 8011b24:	6039      	str	r1, [r7, #0]
    	size += sizeof(Arg1);
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	681b      	ldr	r3, [r3, #0]
 8011b2a:	1d1a      	adds	r2, r3, #4
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	601a      	str	r2, [r3, #0]
        Field<Arg1>* field = new Field<Arg1>(arg1);
 8011b30:	2008      	movs	r0, #8
 8011b32:	f00e fd0b 	bl	802054c <_Znwj>
 8011b36:	4603      	mov	r3, r0
 8011b38:	461c      	mov	r4, r3
 8011b3a:	6839      	ldr	r1, [r7, #0]
 8011b3c:	4620      	mov	r0, r4
 8011b3e:	f000 fe95 	bl	801286c <_ZN5FieldIJmEEC1EPm>
 8011b42:	60fc      	str	r4, [r7, #12]
        fields.push_back(((Field<>*) field));
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f103 0208 	add.w	r2, r3, #8
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	60bb      	str	r3, [r7, #8]
 8011b4e:	f107 0308 	add.w	r3, r7, #8
 8011b52:	4619      	mov	r1, r3
 8011b54:	4610      	mov	r0, r2
 8011b56:	f7ff ff1f 	bl	8011998 <_ZNSt6vectorIP5FieldIJEESaIS2_EE9push_backEOS2_>
            return;
 8011b5a:	bf00      	nop
    }
 8011b5c:	3714      	adds	r7, #20
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd90      	pop	{r4, r7, pc}

08011b62 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011b62:	b480      	push	{r7}
 8011b64:	b083      	sub	sp, #12
 8011b66:	af00      	add	r7, sp, #0
 8011b68:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	689b      	ldr	r3, [r3, #8]
      }
 8011b6e:	4618      	mov	r0, r3
 8011b70:	370c      	adds	r7, #12
 8011b72:	46bd      	mov	sp, r7
 8011b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b78:	4770      	bx	lr

08011b7a <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011b7a:	b480      	push	{r7}
 8011b7c:	b083      	sub	sp, #12
 8011b7e:	af00      	add	r7, sp, #0
 8011b80:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	3304      	adds	r3, #4
 8011b86:	4618      	mov	r0, r3
 8011b88:	370c      	adds	r7, #12
 8011b8a:	46bd      	mov	sp, r7
 8011b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b90:	4770      	bx	lr

08011b92 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011b92:	b590      	push	{r4, r7, lr}
 8011b94:	b087      	sub	sp, #28
 8011b96:	af00      	add	r7, sp, #0
 8011b98:	60f8      	str	r0, [r7, #12]
 8011b9a:	60b9      	str	r1, [r7, #8]
 8011b9c:	607a      	str	r2, [r7, #4]
 8011b9e:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011ba0:	68bb      	ldr	r3, [r7, #8]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d01d      	beq.n	8011be2 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011ba6:	68fc      	ldr	r4, [r7, #12]
 8011ba8:	68b8      	ldr	r0, [r7, #8]
 8011baa:	f7f6 fdc7 	bl	800873c <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011bae:	4603      	mov	r3, r0
 8011bb0:	6819      	ldr	r1, [r3, #0]
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	681b      	ldr	r3, [r3, #0]
 8011bb6:	461a      	mov	r2, r3
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f7ef f98e 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	f083 0301 	eor.w	r3, r3, #1
 8011bc4:	b2db      	uxtb	r3, r3
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	d006      	beq.n	8011bd8 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011bca:	68bb      	ldr	r3, [r7, #8]
 8011bcc:	607b      	str	r3, [r7, #4]
 8011bce:	68b8      	ldr	r0, [r7, #8]
 8011bd0:	f000 fe62 	bl	8012898 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011bd4:	60b8      	str	r0, [r7, #8]
 8011bd6:	e7e3      	b.n	8011ba0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011bd8:	68b8      	ldr	r0, [r7, #8]
 8011bda:	f000 fe69 	bl	80128b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011bde:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011be0:	e7de      	b.n	8011ba0 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011be2:	f107 0314 	add.w	r3, r7, #20
 8011be6:	6879      	ldr	r1, [r7, #4]
 8011be8:	4618      	mov	r0, r3
 8011bea:	f000 f805 	bl	8011bf8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>
 8011bee:	697b      	ldr	r3, [r7, #20]
    }
 8011bf0:	4618      	mov	r0, r3
 8011bf2:	371c      	adds	r7, #28
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd90      	pop	{r4, r7, pc}

08011bf8 <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP10DigitalOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011bf8:	b480      	push	{r7}
 8011bfa:	b083      	sub	sp, #12
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	683a      	ldr	r2, [r7, #0]
 8011c06:	601a      	str	r2, [r3, #0]
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	370c      	adds	r7, #12
 8011c0e:	46bd      	mov	sp, r7
 8011c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c14:	4770      	bx	lr

08011c16 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_M_beginEv>:
      _M_begin() const _GLIBCXX_NOEXCEPT
 8011c16:	b480      	push	{r7}
 8011c18:	b083      	sub	sp, #12
 8011c1a:	af00      	add	r7, sp, #0
 8011c1c:	6078      	str	r0, [r7, #4]
	  (this->_M_impl._M_header._M_parent);
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	689b      	ldr	r3, [r3, #8]
      }
 8011c22:	4618      	mov	r0, r3
 8011c24:	370c      	adds	r7, #12
 8011c26:	46bd      	mov	sp, r7
 8011c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c2c:	4770      	bx	lr

08011c2e <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_M_endEv>:
      _M_end() const _GLIBCXX_NOEXCEPT
 8011c2e:	b480      	push	{r7}
 8011c30:	b083      	sub	sp, #12
 8011c32:	af00      	add	r7, sp, #0
 8011c34:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	3304      	adds	r3, #4
 8011c3a:	4618      	mov	r0, r3
 8011c3c:	370c      	adds	r7, #12
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c44:	4770      	bx	lr

08011c46 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011c46:	b590      	push	{r4, r7, lr}
 8011c48:	b087      	sub	sp, #28
 8011c4a:	af00      	add	r7, sp, #0
 8011c4c:	60f8      	str	r0, [r7, #12]
 8011c4e:	60b9      	str	r1, [r7, #8]
 8011c50:	607a      	str	r2, [r7, #4]
 8011c52:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8011c54:	68bb      	ldr	r3, [r7, #8]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d01d      	beq.n	8011c96 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x50>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8011c5a:	68fc      	ldr	r4, [r7, #12]
 8011c5c:	68b8      	ldr	r0, [r7, #8]
 8011c5e:	f7f2 f8c5 	bl	8003dec <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE6_S_keyEPKSt13_Rb_tree_nodeIS6_E>
 8011c62:	4603      	mov	r3, r0
 8011c64:	6819      	ldr	r1, [r3, #0]
 8011c66:	683b      	ldr	r3, [r7, #0]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	461a      	mov	r2, r3
 8011c6c:	4620      	mov	r0, r4
 8011c6e:	f7ef f934 	bl	8000eda <_ZNKSt4lessIP3PinEclES1_S1_>
 8011c72:	4603      	mov	r3, r0
 8011c74:	f083 0301 	eor.w	r3, r3, #1
 8011c78:	b2db      	uxtb	r3, r3
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d006      	beq.n	8011c8c <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0x46>
	  __y = __x, __x = _S_left(__x);
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	607b      	str	r3, [r7, #4]
 8011c82:	68b8      	ldr	r0, [r7, #8]
 8011c84:	f000 fe20 	bl	80128c8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>
 8011c88:	60b8      	str	r0, [r7, #8]
 8011c8a:	e7e3      	b.n	8011c54 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
	  __x = _S_right(__x);
 8011c8c:	68b8      	ldr	r0, [r7, #8]
 8011c8e:	f000 fe27 	bl	80128e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>
 8011c92:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8011c94:	e7de      	b.n	8011c54 <_ZNKSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE14_M_lower_boundEPKSt13_Rb_tree_nodeIS6_EPKSt18_Rb_tree_node_baseRS3_+0xe>
      return const_iterator(__y);
 8011c96:	f107 0314 	add.w	r3, r7, #20
 8011c9a:	6879      	ldr	r1, [r7, #4]
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	f000 f805 	bl	8011cac <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>
 8011ca2:	697b      	ldr	r3, [r7, #20]
    }
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	371c      	adds	r7, #28
 8011ca8:	46bd      	mov	sp, r7
 8011caa:	bd90      	pop	{r4, r7, pc}

08011cac <_ZNSt23_Rb_tree_const_iteratorISt4pairIKP3PinP9AnalogOutEEC1EPKSt18_Rb_tree_node_base>:
      _Rb_tree_const_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8011cac:	b480      	push	{r7}
 8011cae:	b083      	sub	sp, #12
 8011cb0:	af00      	add	r7, sp, #0
 8011cb2:	6078      	str	r0, [r7, #4]
 8011cb4:	6039      	str	r1, [r7, #0]
      : _M_node(__x) { }
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	683a      	ldr	r2, [r7, #0]
 8011cba:	601a      	str	r2, [r3, #0]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	4618      	mov	r0, r3
 8011cc0:	370c      	adds	r7, #12
 8011cc2:	46bd      	mov	sp, r7
 8011cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cc8:	4770      	bx	lr

08011cca <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011cca:	b580      	push	{r7, lr}
 8011ccc:	b084      	sub	sp, #16
 8011cce:	af00      	add	r7, sp, #0
 8011cd0:	60f8      	str	r0, [r7, #12]
 8011cd2:	60b9      	str	r1, [r7, #8]
 8011cd4:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011cd6:	68b8      	ldr	r0, [r7, #8]
 8011cd8:	f7ff f92e 	bl	8010f38 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE_EONSt16remove_referenceIT_E4typeEOS4_>
 8011cdc:	68f8      	ldr	r0, [r7, #12]
 8011cde:	f7fb fc62 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	4619      	mov	r1, r3
 8011ce6:	2001      	movs	r0, #1
 8011ce8:	f7ee fb22 	bl	8000330 <_ZnwjPv>
 8011cec:	bf00      	nop
 8011cee:	3710      	adds	r7, #16
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	bd80      	pop	{r7, pc}

08011cf4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b084      	sub	sp, #16
 8011cf8:	af00      	add	r7, sp, #0
 8011cfa:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011cfc:	6878      	ldr	r0, [r7, #4]
 8011cfe:	f000 fdfb 	bl	80128f8 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 8011d02:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011d04:	68f8      	ldr	r0, [r7, #12]
 8011d06:	f000 fe03 	bl	8012910 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>
 8011d0a:	4603      	mov	r3, r0
	}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3710      	adds	r7, #16
 8011d10:	46bd      	mov	sp, r7
 8011d12:	bd80      	pop	{r7, pc}

08011d14 <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011d14:	b590      	push	{r4, r7, lr}
 8011d16:	b083      	sub	sp, #12
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011d1c:	6878      	ldr	r0, [r7, #4]
 8011d1e:	f000 fe02 	bl	8012926 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011d22:	4603      	mov	r3, r0
 8011d24:	4619      	mov	r1, r3
 8011d26:	4620      	mov	r0, r4
 8011d28:	f000 fe08 	bl	801293c <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011d2c:	bf00      	nop
 8011d2e:	370c      	adds	r7, #12
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd90      	pop	{r4, r7, pc}

08011d34 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b082      	sub	sp, #8
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011d3c:	6878      	ldr	r0, [r7, #4]
 8011d3e:	f7fb fc32 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8011d42:	4603      	mov	r3, r0
 8011d44:	4618      	mov	r0, r3
 8011d46:	3708      	adds	r7, #8
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	bd80      	pop	{r7, pc}

08011d4c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011d4c:	b5b0      	push	{r4, r5, r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	60f8      	str	r0, [r7, #12]
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	4613      	mov	r3, r2
 8011d58:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011d5a:	79fb      	ldrb	r3, [r7, #7]
 8011d5c:	2b03      	cmp	r3, #3
 8011d5e:	d016      	beq.n	8011d8e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011d60:	2b03      	cmp	r3, #3
 8011d62:	dc19      	bgt.n	8011d98 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8011d64:	2b01      	cmp	r3, #1
 8011d66:	d002      	beq.n	8011d6e <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011d68:	2b02      	cmp	r3, #2
 8011d6a:	d00a      	beq.n	8011d82 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011d6c:	e014      	b.n	8011d98 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011d6e:	68b8      	ldr	r0, [r7, #8]
 8011d70:	f7ff ffc0 	bl	8011cf4 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E14_M_get_pointerERKSt9_Any_data>
 8011d74:	4604      	mov	r4, r0
 8011d76:	68f8      	ldr	r0, [r7, #12]
 8011d78:	f7ff ffdc 	bl	8011d34 <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE_EERT_v>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	601c      	str	r4, [r3, #0]
	      break;
 8011d80:	e00a      	b.n	8011d98 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011d82:	462a      	mov	r2, r5
 8011d84:	68b9      	ldr	r1, [r7, #8]
 8011d86:	68f8      	ldr	r0, [r7, #12]
 8011d88:	f000 fde8 	bl	801295c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8011d8c:	e004      	b.n	8011d98 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011d8e:	4621      	mov	r1, r4
 8011d90:	68f8      	ldr	r0, [r7, #12]
 8011d92:	f000 fdf8 	bl	8012986 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011d96:	bf00      	nop
	  return false;
 8011d98:	2300      	movs	r3, #0
	}
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	3710      	adds	r7, #16
 8011d9e:	46bd      	mov	sp, r7
 8011da0:	bdb0      	pop	{r4, r5, r7, pc}

08011da2 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E15_M_init_functorERSt9_Any_dataOS2_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8011da2:	b580      	push	{r7, lr}
 8011da4:	b084      	sub	sp, #16
 8011da6:	af00      	add	r7, sp, #0
 8011da8:	60f8      	str	r0, [r7, #12]
 8011daa:	60b9      	str	r1, [r7, #8]
 8011dac:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8011dae:	68b8      	ldr	r0, [r7, #8]
 8011db0:	f7ff f918 	bl	8010fe4 <_ZSt4moveIRZN8TUDTests5setupEvEUlvE0_EONSt16remove_referenceIT_E4typeEOS4_>
 8011db4:	68f8      	ldr	r0, [r7, #12]
 8011db6:	f7fb fbf6 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8011dba:	4603      	mov	r3, r0
 8011dbc:	4619      	mov	r1, r3
 8011dbe:	2001      	movs	r0, #1
 8011dc0:	f7ee fab6 	bl	8000330 <_ZnwjPv>
 8011dc4:	bf00      	nop
 8011dc6:	3710      	adds	r7, #16
 8011dc8:	46bd      	mov	sp, r7
 8011dca:	bd80      	pop	{r7, pc}

08011dcc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8011dcc:	b580      	push	{r7, lr}
 8011dce:	b084      	sub	sp, #16
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f000 fde2 	bl	801299e <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8011dda:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8011ddc:	68f8      	ldr	r0, [r7, #12]
 8011dde:	f000 fdea 	bl	80129b6 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>
 8011de2:	4603      	mov	r3, r0
	}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3710      	adds	r7, #16
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}

08011dec <_ZSt10__invoke_rIvRZN8TUDTests5setupEvEUlvE0_JEENSt9enable_ifIX16is_invocable_r_vIT_T0_DpT1_EES4_E4typeEOS5_DpOS6_>:
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8011dec:	b590      	push	{r4, r7, lr}
 8011dee:	b083      	sub	sp, #12
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
	std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 8011df4:	6878      	ldr	r0, [r7, #4]
 8011df6:	f000 fde9 	bl	80129cc <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 8011dfa:	4603      	mov	r3, r0
 8011dfc:	4619      	mov	r1, r3
 8011dfe:	4620      	mov	r0, r4
 8011e00:	f000 fdef 	bl	80129e2 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>
    }
 8011e04:	bf00      	nop
 8011e06:	370c      	adds	r7, #12
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd90      	pop	{r4, r7, pc}

08011e0c <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b082      	sub	sp, #8
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8011e14:	6878      	ldr	r0, [r7, #4]
 8011e16:	f7fb fbc6 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8011e1a:	4603      	mov	r3, r0
 8011e1c:	4618      	mov	r0, r3
 8011e1e:	3708      	adds	r7, #8
 8011e20:	46bd      	mov	sp, r7
 8011e22:	bd80      	pop	{r7, pc}

08011e24 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8011e24:	b5b0      	push	{r4, r5, r7, lr}
 8011e26:	b084      	sub	sp, #16
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	60f8      	str	r0, [r7, #12]
 8011e2c:	60b9      	str	r1, [r7, #8]
 8011e2e:	4613      	mov	r3, r2
 8011e30:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8011e32:	79fb      	ldrb	r3, [r7, #7]
 8011e34:	2b03      	cmp	r3, #3
 8011e36:	d016      	beq.n	8011e66 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x42>
 8011e38:	2b03      	cmp	r3, #3
 8011e3a:	dc19      	bgt.n	8011e70 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
 8011e3c:	2b01      	cmp	r3, #1
 8011e3e:	d002      	beq.n	8011e46 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x22>
 8011e40:	2b02      	cmp	r3, #2
 8011e42:	d00a      	beq.n	8011e5a <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x36>
 8011e44:	e014      	b.n	8011e70 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8011e46:	68b8      	ldr	r0, [r7, #8]
 8011e48:	f7ff ffc0 	bl	8011dcc <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E14_M_get_pointerERKSt9_Any_data>
 8011e4c:	4604      	mov	r4, r0
 8011e4e:	68f8      	ldr	r0, [r7, #12]
 8011e50:	f7ff ffdc 	bl	8011e0c <_ZNSt9_Any_data9_M_accessIPZN8TUDTests5setupEvEUlvE0_EERT_v>
 8011e54:	4603      	mov	r3, r0
 8011e56:	601c      	str	r4, [r3, #0]
	      break;
 8011e58:	e00a      	b.n	8011e70 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8011e5a:	462a      	mov	r2, r5
 8011e5c:	68b9      	ldr	r1, [r7, #8]
 8011e5e:	68f8      	ldr	r0, [r7, #12]
 8011e60:	f000 fdcf 	bl	8012a02 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>
	      break;
 8011e64:	e004      	b.n	8011e70 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_managerERSt9_Any_dataRKS4_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8011e66:	4621      	mov	r1, r4
 8011e68:	68f8      	ldr	r0, [r7, #12]
 8011e6a:	f000 fddf 	bl	8012a2c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8011e6e:	bf00      	nop
	  return false;
 8011e70:	2300      	movs	r3, #0
	}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3710      	adds	r7, #16
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bdb0      	pop	{r4, r5, r7, pc}

08011e7a <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8011e7a:	b590      	push	{r4, r7, lr}
 8011e7c:	b087      	sub	sp, #28
 8011e7e:	af00      	add	r7, sp, #0
 8011e80:	60f8      	str	r0, [r7, #12]
 8011e82:	60b9      	str	r1, [r7, #8]
 8011e84:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8011e86:	68f8      	ldr	r0, [r7, #12]
 8011e88:	f000 fddc 	bl	8012a44 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011e8c:	4604      	mov	r4, r0
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f000 fde9 	bl	8012a66 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011e94:	4603      	mov	r3, r0
 8011e96:	1ae2      	subs	r2, r4, r3
 8011e98:	68bb      	ldr	r3, [r7, #8]
 8011e9a:	429a      	cmp	r2, r3
 8011e9c:	bf34      	ite	cc
 8011e9e:	2301      	movcc	r3, #1
 8011ea0:	2300      	movcs	r3, #0
 8011ea2:	b2db      	uxtb	r3, r3
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d002      	beq.n	8011eae <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f00e fc19 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8011eae:	68f8      	ldr	r0, [r7, #12]
 8011eb0:	f000 fdd9 	bl	8012a66 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011eb4:	4604      	mov	r4, r0
 8011eb6:	68f8      	ldr	r0, [r7, #12]
 8011eb8:	f000 fdd5 	bl	8012a66 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011ebc:	4603      	mov	r3, r0
 8011ebe:	613b      	str	r3, [r7, #16]
 8011ec0:	f107 0208 	add.w	r2, r7, #8
 8011ec4:	f107 0310 	add.w	r3, r7, #16
 8011ec8:	4611      	mov	r1, r2
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7f0 fcc1 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	4423      	add	r3, r4
 8011ed6:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8011ed8:	68f8      	ldr	r0, [r7, #12]
 8011eda:	f000 fdc4 	bl	8012a66 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>
 8011ede:	4602      	mov	r2, r0
 8011ee0:	697b      	ldr	r3, [r7, #20]
 8011ee2:	4293      	cmp	r3, r2
 8011ee4:	d306      	bcc.n	8011ef4 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8011ee6:	68f8      	ldr	r0, [r7, #12]
 8011ee8:	f000 fdac 	bl	8012a44 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011eec:	4602      	mov	r2, r0
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	4293      	cmp	r3, r2
 8011ef2:	d904      	bls.n	8011efe <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8011ef4:	68f8      	ldr	r0, [r7, #12]
 8011ef6:	f000 fda5 	bl	8012a44 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>
 8011efa:	4603      	mov	r3, r0
 8011efc:	e000      	b.n	8011f00 <_ZNKSt6vectorIP5TimerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8011efe:	697b      	ldr	r3, [r7, #20]
      }
 8011f00:	4618      	mov	r0, r3
 8011f02:	371c      	adds	r7, #28
 8011f04:	46bd      	mov	sp, r7
 8011f06:	bd90      	pop	{r4, r7, pc}

08011f08 <_ZN9__gnu_cxxmiIPP5TimerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8011f08:	b590      	push	{r4, r7, lr}
 8011f0a:	b083      	sub	sp, #12
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8011f12:	6878      	ldr	r0, [r7, #4]
 8011f14:	f7fb fd34 	bl	800d980 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011f18:	4603      	mov	r3, r0
 8011f1a:	681c      	ldr	r4, [r3, #0]
 8011f1c:	6838      	ldr	r0, [r7, #0]
 8011f1e:	f7fb fd2f 	bl	800d980 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEE4baseEv>
 8011f22:	4603      	mov	r3, r0
 8011f24:	681b      	ldr	r3, [r3, #0]
 8011f26:	1ae3      	subs	r3, r4, r3
 8011f28:	109b      	asrs	r3, r3, #2
 8011f2a:	4618      	mov	r0, r3
 8011f2c:	370c      	adds	r7, #12
 8011f2e:	46bd      	mov	sp, r7
 8011f30:	bd90      	pop	{r4, r7, pc}

08011f32 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8011f32:	b580      	push	{r7, lr}
 8011f34:	b082      	sub	sp, #8
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
 8011f3a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8011f3c:	683b      	ldr	r3, [r7, #0]
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d006      	beq.n	8011f50 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x1e>
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	6839      	ldr	r1, [r7, #0]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f000 fd9d 	bl	8012a86 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>
 8011f4c:	4603      	mov	r3, r0
 8011f4e:	e000      	b.n	8011f52 <_ZNSt12_Vector_baseIP5TimerSaIS1_EE11_M_allocateEj+0x20>
 8011f50:	2300      	movs	r3, #0
      }
 8011f52:	4618      	mov	r0, r3
 8011f54:	3708      	adds	r7, #8
 8011f56:	46bd      	mov	sp, r7
 8011f58:	bd80      	pop	{r7, pc}

08011f5a <_ZNSt6vectorIP5TimerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8011f5a:	b590      	push	{r4, r7, lr}
 8011f5c:	b087      	sub	sp, #28
 8011f5e:	af02      	add	r7, sp, #8
 8011f60:	60f8      	str	r0, [r7, #12]
 8011f62:	60b9      	str	r1, [r7, #8]
 8011f64:	607a      	str	r2, [r7, #4]
 8011f66:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8011f68:	f88d 4000 	strb.w	r4, [sp]
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	687a      	ldr	r2, [r7, #4]
 8011f70:	68b9      	ldr	r1, [r7, #8]
 8011f72:	68f8      	ldr	r0, [r7, #12]
 8011f74:	f000 fda7 	bl	8012ac6 <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8011f78:	4603      	mov	r3, r0
      }
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	3714      	adds	r7, #20
 8011f7e:	46bd      	mov	sp, r7
 8011f80:	bd90      	pop	{r4, r7, pc}

08011f82 <_ZNK9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8011f82:	b580      	push	{r7, lr}
 8011f84:	b084      	sub	sp, #16
 8011f86:	af00      	add	r7, sp, #0
 8011f88:	6078      	str	r0, [r7, #4]
 8011f8a:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	681a      	ldr	r2, [r3, #0]
 8011f90:	683b      	ldr	r3, [r7, #0]
 8011f92:	009b      	lsls	r3, r3, #2
 8011f94:	425b      	negs	r3, r3
 8011f96:	4413      	add	r3, r2
 8011f98:	60fb      	str	r3, [r7, #12]
 8011f9a:	f107 020c 	add.w	r2, r7, #12
 8011f9e:	f107 0308 	add.w	r3, r7, #8
 8011fa2:	4611      	mov	r1, r2
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7fe fb23 	bl	80105f0 <_ZN9__gnu_cxx17__normal_iteratorIPP5TimerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8011faa:	68bb      	ldr	r3, [r7, #8]
 8011fac:	4618      	mov	r0, r3
 8011fae:	3710      	adds	r7, #16
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8011fb4:	b480      	push	{r7}
 8011fb6:	b083      	sub	sp, #12
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	370c      	adds	r7, #12
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fc8:	4770      	bx	lr

08011fca <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8011fca:	b480      	push	{r7}
 8011fcc:	b083      	sub	sp, #12
 8011fce:	af00      	add	r7, sp, #0
 8011fd0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	4618      	mov	r0, r3
 8011fd6:	370c      	adds	r7, #12
 8011fd8:	46bd      	mov	sp, r7
 8011fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fde:	4770      	bx	lr

08011fe0 <_ZSt4moveIRPFvRKSt9_Any_dataEEONSt16remove_referenceIT_E4typeEOS7_>:
    move(_Tp&& __t) noexcept
 8011fe0:	b480      	push	{r7}
 8011fe2:	b083      	sub	sp, #12
 8011fe4:	af00      	add	r7, sp, #0
 8011fe6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	4618      	mov	r0, r3
 8011fec:	370c      	adds	r7, #12
 8011fee:	46bd      	mov	sp, r7
 8011ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff4:	4770      	bx	lr

08011ff6 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8011ff6:	b590      	push	{r4, r7, lr}
 8011ff8:	b087      	sub	sp, #28
 8011ffa:	af00      	add	r7, sp, #0
 8011ffc:	60f8      	str	r0, [r7, #12]
 8011ffe:	60b9      	str	r1, [r7, #8]
 8012000:	607a      	str	r2, [r7, #4]
 8012002:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012004:	68bb      	ldr	r3, [r7, #8]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d01b      	beq.n	8012042 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 801200a:	68fc      	ldr	r4, [r7, #12]
 801200c:	68b8      	ldr	r0, [r7, #8]
 801200e:	f7f9 fa48 	bl	800b4a2 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE6_S_keyEPKSt13_Rb_tree_nodeIS3_E>
 8012012:	4603      	mov	r3, r0
 8012014:	683a      	ldr	r2, [r7, #0]
 8012016:	4619      	mov	r1, r3
 8012018:	4620      	mov	r0, r4
 801201a:	f7f8 fff1 	bl	800b000 <_ZNKSt4lessI9PrecisionEclERKS0_S3_>
 801201e:	4603      	mov	r3, r0
 8012020:	f083 0301 	eor.w	r3, r3, #1
 8012024:	b2db      	uxtb	r3, r3
 8012026:	2b00      	cmp	r3, #0
 8012028:	d006      	beq.n	8012038 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0x42>
	  __y = __x, __x = _S_left(__x);
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	607b      	str	r3, [r7, #4]
 801202e:	68b8      	ldr	r0, [r7, #8]
 8012030:	f7f9 fb24 	bl	800b67c <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012034:	60b8      	str	r0, [r7, #8]
 8012036:	e7e5      	b.n	8012004 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
	  __x = _S_right(__x);
 8012038:	68b8      	ldr	r0, [r7, #8]
 801203a:	f7f9 fb13 	bl	800b664 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE8_S_rightEPSt18_Rb_tree_node_base>
 801203e:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012040:	e7e0      	b.n	8012004 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS3_EPSt18_Rb_tree_node_baseRS2_+0xe>
      return iterator(__y);
 8012042:	f107 0314 	add.w	r3, r7, #20
 8012046:	6879      	ldr	r1, [r7, #4]
 8012048:	4618      	mov	r0, r3
 801204a:	f7f9 fa4e 	bl	800b4ea <_ZNSt17_Rb_tree_iteratorISt4pairIK9PrecisionmEEC1EPSt18_Rb_tree_node_base>
 801204e:	697b      	ldr	r3, [r7, #20]
    }
 8012050:	4618      	mov	r0, r3
 8012052:	371c      	adds	r7, #28
 8012054:	46bd      	mov	sp, r7
 8012056:	bd90      	pop	{r4, r7, pc}

08012058 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1IS0_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8012058:	b590      	push	{r4, r7, lr}
 801205a:	b083      	sub	sp, #12
 801205c:	af00      	add	r7, sp, #0
 801205e:	6078      	str	r0, [r7, #4]
 8012060:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8012062:	687c      	ldr	r4, [r7, #4]
 8012064:	6838      	ldr	r0, [r7, #0]
 8012066:	f7ff f969 	bl	801133c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 801206a:	4603      	mov	r3, r0
 801206c:	4619      	mov	r1, r3
 801206e:	4620      	mov	r0, r4
 8012070:	f000 fd3b 	bl	8012aea <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	4618      	mov	r0, r3
 8012078:	370c      	adds	r7, #12
 801207a:	46bd      	mov	sp, r7
 801207c:	bd90      	pop	{r4, r7, pc}

0801207e <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJOS0_EESE_IJEEEEEvPSt13_Rb_tree_nodeIS3_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 801207e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012082:	b086      	sub	sp, #24
 8012084:	af02      	add	r7, sp, #8
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	607a      	str	r2, [r7, #4]
 801208c:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	4619      	mov	r1, r3
 8012092:	2018      	movs	r0, #24
 8012094:	f7ee f94c 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8012098:	68f8      	ldr	r0, [r7, #12]
 801209a:	f7f9 fcf5 	bl	800ba88 <_ZNSt8_Rb_treeI9PrecisionSt4pairIKS0_mESt10_Select1stIS3_ESt4lessIS0_ESaIS3_EE21_M_get_Node_allocatorEv>
 801209e:	4604      	mov	r4, r0
 80120a0:	68b8      	ldr	r0, [r7, #8]
 80120a2:	f7f9 f8cd 	bl	800b240 <_ZNSt13_Rb_tree_nodeISt4pairIK9PrecisionmEE9_M_valptrEv>
 80120a6:	4605      	mov	r5, r0
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ef f8dc 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80120ae:	4606      	mov	r6, r0
 80120b0:	6838      	ldr	r0, [r7, #0]
 80120b2:	f7ff f961 	bl	8011378 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80120b6:	4680      	mov	r8, r0
 80120b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80120ba:	f7ef f8ea 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80120be:	4603      	mov	r3, r0
 80120c0:	9300      	str	r3, [sp, #0]
 80120c2:	4643      	mov	r3, r8
 80120c4:	4632      	mov	r2, r6
 80120c6:	4629      	mov	r1, r5
 80120c8:	4620      	mov	r0, r4
 80120ca:	f000 fd58 	bl	8012b7e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>
	}
 80120ce:	bf00      	nop
 80120d0:	3710      	adds	r7, #16
 80120d2:	46bd      	mov	sp, r7
 80120d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080120d8 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 80120d8:	b580      	push	{r7, lr}
 80120da:	b082      	sub	sp, #8
 80120dc:	af00      	add	r7, sp, #0
 80120de:	6078      	str	r0, [r7, #4]
 80120e0:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 80120e2:	687a      	ldr	r2, [r7, #4]
 80120e4:	683b      	ldr	r3, [r7, #0]
 80120e6:	429a      	cmp	r2, r3
 80120e8:	d00a      	beq.n	8012100 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f000 fd72 	bl	8012bd4 <_ZSt11__addressofIP13StreamMessageEPT_RS2_>
 80120f0:	4603      	mov	r3, r0
 80120f2:	4618      	mov	r0, r3
 80120f4:	f000 fd79 	bl	8012bea <_ZSt8_DestroyIP13StreamMessageEvPT_>
	  for (; __first != __last; ++__first)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	3304      	adds	r3, #4
 80120fc:	607b      	str	r3, [r7, #4]
 80120fe:	e7f0      	b.n	80120e2 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP13StreamMessageEEvT_S5_+0xa>
	}
 8012100:	bf00      	nop
 8012102:	3708      	adds	r7, #8
 8012104:	46bd      	mov	sp, r7
 8012106:	bd80      	pop	{r7, pc}

08012108 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13StreamMessageEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012108:	b480      	push	{r7}
 801210a:	b083      	sub	sp, #12
 801210c:	af00      	add	r7, sp, #0
 801210e:	6078      	str	r0, [r7, #4]
 8012110:	6039      	str	r1, [r7, #0]
 8012112:	bf00      	nop
 8012114:	370c      	adds	r7, #12
 8012116:	46bd      	mov	sp, r7
 8012118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801211c:	4770      	bx	lr

0801211e <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 801211e:	b590      	push	{r4, r7, lr}
 8012120:	b087      	sub	sp, #28
 8012122:	af00      	add	r7, sp, #0
 8012124:	60f8      	str	r0, [r7, #12]
 8012126:	60b9      	str	r1, [r7, #8]
 8012128:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801212a:	68f8      	ldr	r0, [r7, #12]
 801212c:	f000 fd68 	bl	8012c00 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012130:	4604      	mov	r4, r0
 8012132:	68f8      	ldr	r0, [r7, #12]
 8012134:	f000 fd75 	bl	8012c22 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012138:	4603      	mov	r3, r0
 801213a:	1ae2      	subs	r2, r4, r3
 801213c:	68bb      	ldr	r3, [r7, #8]
 801213e:	429a      	cmp	r2, r3
 8012140:	bf34      	ite	cc
 8012142:	2301      	movcc	r3, #1
 8012144:	2300      	movcs	r3, #0
 8012146:	b2db      	uxtb	r3, r3
 8012148:	2b00      	cmp	r3, #0
 801214a:	d002      	beq.n	8012152 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f00e fac7 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8012152:	68f8      	ldr	r0, [r7, #12]
 8012154:	f000 fd65 	bl	8012c22 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012158:	4604      	mov	r4, r0
 801215a:	68f8      	ldr	r0, [r7, #12]
 801215c:	f000 fd61 	bl	8012c22 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012160:	4603      	mov	r3, r0
 8012162:	613b      	str	r3, [r7, #16]
 8012164:	f107 0208 	add.w	r2, r7, #8
 8012168:	f107 0310 	add.w	r3, r7, #16
 801216c:	4611      	mov	r1, r2
 801216e:	4618      	mov	r0, r3
 8012170:	f7f0 fb6f 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 8012174:	4603      	mov	r3, r0
 8012176:	681b      	ldr	r3, [r3, #0]
 8012178:	4423      	add	r3, r4
 801217a:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	f000 fd50 	bl	8012c22 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>
 8012182:	4602      	mov	r2, r0
 8012184:	697b      	ldr	r3, [r7, #20]
 8012186:	4293      	cmp	r3, r2
 8012188:	d306      	bcc.n	8012198 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x7a>
 801218a:	68f8      	ldr	r0, [r7, #12]
 801218c:	f000 fd38 	bl	8012c00 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 8012190:	4602      	mov	r2, r0
 8012192:	697b      	ldr	r3, [r7, #20]
 8012194:	4293      	cmp	r3, r2
 8012196:	d904      	bls.n	80121a2 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x84>
 8012198:	68f8      	ldr	r0, [r7, #12]
 801219a:	f000 fd31 	bl	8012c00 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>
 801219e:	4603      	mov	r3, r0
 80121a0:	e000      	b.n	80121a4 <_ZNKSt6vectorIP6StreamSaIS1_EE12_M_check_lenEjPKc+0x86>
 80121a2:	697b      	ldr	r3, [r7, #20]
      }
 80121a4:	4618      	mov	r0, r3
 80121a6:	371c      	adds	r7, #28
 80121a8:	46bd      	mov	sp, r7
 80121aa:	bd90      	pop	{r4, r7, pc}

080121ac <_ZN9__gnu_cxxmiIPP6StreamSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80121ac:	b590      	push	{r4, r7, lr}
 80121ae:	b083      	sub	sp, #12
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80121b6:	6878      	ldr	r0, [r7, #4]
 80121b8:	f7fb ff60 	bl	800e07c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80121bc:	4603      	mov	r3, r0
 80121be:	681c      	ldr	r4, [r3, #0]
 80121c0:	6838      	ldr	r0, [r7, #0]
 80121c2:	f7fb ff5b 	bl	800e07c <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEE4baseEv>
 80121c6:	4603      	mov	r3, r0
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	1ae3      	subs	r3, r4, r3
 80121cc:	109b      	asrs	r3, r3, #2
 80121ce:	4618      	mov	r0, r3
 80121d0:	370c      	adds	r7, #12
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd90      	pop	{r4, r7, pc}

080121d6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80121d6:	b580      	push	{r7, lr}
 80121d8:	b082      	sub	sp, #8
 80121da:	af00      	add	r7, sp, #0
 80121dc:	6078      	str	r0, [r7, #4]
 80121de:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d006      	beq.n	80121f4 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x1e>
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6839      	ldr	r1, [r7, #0]
 80121ea:	4618      	mov	r0, r3
 80121ec:	f000 fd29 	bl	8012c42 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>
 80121f0:	4603      	mov	r3, r0
 80121f2:	e000      	b.n	80121f6 <_ZNSt12_Vector_baseIP6StreamSaIS1_EE11_M_allocateEj+0x20>
 80121f4:	2300      	movs	r3, #0
      }
 80121f6:	4618      	mov	r0, r3
 80121f8:	3708      	adds	r7, #8
 80121fa:	46bd      	mov	sp, r7
 80121fc:	bd80      	pop	{r7, pc}

080121fe <_ZNSt6vectorIP6StreamSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80121fe:	b590      	push	{r4, r7, lr}
 8012200:	b087      	sub	sp, #28
 8012202:	af02      	add	r7, sp, #8
 8012204:	60f8      	str	r0, [r7, #12]
 8012206:	60b9      	str	r1, [r7, #8]
 8012208:	607a      	str	r2, [r7, #4]
 801220a:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801220c:	f88d 4000 	strb.w	r4, [sp]
 8012210:	683b      	ldr	r3, [r7, #0]
 8012212:	687a      	ldr	r2, [r7, #4]
 8012214:	68b9      	ldr	r1, [r7, #8]
 8012216:	68f8      	ldr	r0, [r7, #12]
 8012218:	f000 fd33 	bl	8012c82 <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801221c:	4603      	mov	r3, r0
      }
 801221e:	4618      	mov	r0, r3
 8012220:	3714      	adds	r7, #20
 8012222:	46bd      	mov	sp, r7
 8012224:	bd90      	pop	{r4, r7, pc}

08012226 <_ZNK9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8012226:	b580      	push	{r7, lr}
 8012228:	b084      	sub	sp, #16
 801222a:	af00      	add	r7, sp, #0
 801222c:	6078      	str	r0, [r7, #4]
 801222e:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8012230:	687b      	ldr	r3, [r7, #4]
 8012232:	681a      	ldr	r2, [r3, #0]
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	009b      	lsls	r3, r3, #2
 8012238:	425b      	negs	r3, r3
 801223a:	4413      	add	r3, r2
 801223c:	60fb      	str	r3, [r7, #12]
 801223e:	f107 020c 	add.w	r2, r7, #12
 8012242:	f107 0308 	add.w	r3, r7, #8
 8012246:	4611      	mov	r1, r2
 8012248:	4618      	mov	r0, r3
 801224a:	f7fe fc40 	bl	8010ace <_ZN9__gnu_cxx17__normal_iteratorIPP6StreamSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801224e:	68bb      	ldr	r3, [r7, #8]
 8012250:	4618      	mov	r0, r3
 8012252:	3710      	adds	r7, #16
 8012254:	46bd      	mov	sp, r7
 8012256:	bd80      	pop	{r7, pc}

08012258 <_ZNKSt6vectorIP13StreamMessageSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012258:	b580      	push	{r7, lr}
 801225a:	b082      	sub	sp, #8
 801225c:	af00      	add	r7, sp, #0
 801225e:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	4618      	mov	r0, r3
 8012264:	f000 fd45 	bl	8012cf2 <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>
 8012268:	4603      	mov	r3, r0
 801226a:	4618      	mov	r0, r3
 801226c:	f000 fd27 	bl	8012cbe <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>
 8012270:	4603      	mov	r3, r0
 8012272:	4618      	mov	r0, r3
 8012274:	3708      	adds	r7, #8
 8012276:	46bd      	mov	sp, r7
 8012278:	bd80      	pop	{r7, pc}

0801227a <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801227a:	b580      	push	{r7, lr}
 801227c:	b084      	sub	sp, #16
 801227e:	af00      	add	r7, sp, #0
 8012280:	6078      	str	r0, [r7, #4]
 8012282:	6039      	str	r1, [r7, #0]
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	60fb      	str	r3, [r7, #12]
 8012288:	683b      	ldr	r3, [r7, #0]
 801228a:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 801228c:	f7ee f848 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012290:	4603      	mov	r3, r0
 8012292:	2b00      	cmp	r3, #0
 8012294:	d006      	beq.n	80122a4 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012296:	68bb      	ldr	r3, [r7, #8]
 8012298:	009b      	lsls	r3, r3, #2
 801229a:	4618      	mov	r0, r3
 801229c:	f00e f956 	bl	802054c <_Znwj>
 80122a0:	4603      	mov	r3, r0
 80122a2:	e006      	b.n	80122b2 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 80122a4:	2200      	movs	r2, #0
 80122a6:	68b9      	ldr	r1, [r7, #8]
 80122a8:	68f8      	ldr	r0, [r7, #12]
 80122aa:	f001 f8b6 	bl	801341a <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>
 80122ae:	4603      	mov	r3, r0
 80122b0:	bf00      	nop
      { return __a.allocate(__n); }
 80122b2:	4618      	mov	r0, r3
 80122b4:	3710      	adds	r7, #16
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}

080122ba <_ZNSt6vectorIP13StreamMessageSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80122ba:	b580      	push	{r7, lr}
 80122bc:	b084      	sub	sp, #16
 80122be:	af00      	add	r7, sp, #0
 80122c0:	60f8      	str	r0, [r7, #12]
 80122c2:	60b9      	str	r1, [r7, #8]
 80122c4:	607a      	str	r2, [r7, #4]
 80122c6:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80122c8:	683b      	ldr	r3, [r7, #0]
 80122ca:	687a      	ldr	r2, [r7, #4]
 80122cc:	68b9      	ldr	r1, [r7, #8]
 80122ce:	68f8      	ldr	r0, [r7, #12]
 80122d0:	f000 fd1a 	bl	8012d08 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>
 80122d4:	4603      	mov	r3, r0
      }
 80122d6:	4618      	mov	r0, r3
 80122d8:	3710      	adds	r7, #16
 80122da:	46bd      	mov	sp, r7
 80122dc:	bd80      	pop	{r7, pc}

080122de <_ZSt10destroy_atIP13StreamMessageEvPT_>:
    destroy_at(_Tp* __location)
 80122de:	b480      	push	{r7}
 80122e0:	b083      	sub	sp, #12
 80122e2:	af00      	add	r7, sp, #0
 80122e4:	6078      	str	r0, [r7, #4]
    }
 80122e6:	bf00      	nop
 80122e8:	370c      	adds	r7, #12
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr

080122f2 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>:
      _M_access() const
 80122f2:	b580      	push	{r7, lr}
 80122f4:	b082      	sub	sp, #8
 80122f6:	af00      	add	r7, sp, #0
 80122f8:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f7fb f95e 	bl	800d5bc <_ZNKSt9_Any_data9_M_accessEv>
 8012300:	4603      	mov	r3, r0
 8012302:	4618      	mov	r0, r3
 8012304:	3708      	adds	r7, #8
 8012306:	46bd      	mov	sp, r7
 8012308:	bd80      	pop	{r7, pc}

0801230a <_ZSt11__addressofIKZN6Stream11add_messageEmP13StreamMessagetEUlvE_EPT_RS5_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 801230a:	b480      	push	{r7}
 801230c:	b083      	sub	sp, #12
 801230e:	af00      	add	r7, sp, #0
 8012310:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	4618      	mov	r0, r3
 8012316:	370c      	adds	r7, #12
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012320:	b480      	push	{r7}
 8012322:	b083      	sub	sp, #12
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	4618      	mov	r0, r3
 801232c:	370c      	adds	r7, #12
 801232e:	46bd      	mov	sp, r7
 8012330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012334:	4770      	bx	lr

08012336 <_ZSt13__invoke_implIvRZN6Stream11add_messageEmP13StreamMessagetEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 8012336:	b580      	push	{r7, lr}
 8012338:	b082      	sub	sp, #8
 801233a:	af00      	add	r7, sp, #0
 801233c:	7138      	strb	r0, [r7, #4]
 801233e:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012340:	6838      	ldr	r0, [r7, #0]
 8012342:	f7ff ffed 	bl	8012320 <_ZSt7forwardIRZN6Stream11add_messageEmP13StreamMessagetEUlvE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8012346:	4603      	mov	r3, r0
 8012348:	4618      	mov	r0, r3
 801234a:	f7fb fe29 	bl	800dfa0 <_ZZN6Stream11add_messageEmP13StreamMessagetENKUlvE_clEv>
 801234e:	bf00      	nop
 8012350:	3708      	adds	r7, #8
 8012352:	46bd      	mov	sp, r7
 8012354:	bd80      	pop	{r7, pc}

08012356 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E8_M_cloneERSt9_Any_dataRKS6_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012356:	b590      	push	{r4, r7, lr}
 8012358:	b085      	sub	sp, #20
 801235a:	af00      	add	r7, sp, #0
 801235c:	60f8      	str	r0, [r7, #12]
 801235e:	60b9      	str	r1, [r7, #8]
 8012360:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012362:	68b8      	ldr	r0, [r7, #8]
 8012364:	f7ff ffc5 	bl	80122f2 <_ZNKSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERKT_v>
 8012368:	4604      	mov	r4, r0
 801236a:	68f8      	ldr	r0, [r7, #12]
 801236c:	f7fb f91b 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8012370:	4603      	mov	r3, r0
 8012372:	4619      	mov	r1, r3
 8012374:	2004      	movs	r0, #4
 8012376:	f7ed ffdb 	bl	8000330 <_ZnwjPv>
 801237a:	4602      	mov	r2, r0
 801237c:	6823      	ldr	r3, [r4, #0]
 801237e:	6013      	str	r3, [r2, #0]
	}
 8012380:	bf00      	nop
 8012382:	3714      	adds	r7, #20
 8012384:	46bd      	mov	sp, r7
 8012386:	bd90      	pop	{r4, r7, pc}

08012388 <_ZNSt14_Function_base13_Base_managerIZN6Stream11add_messageEmP13StreamMessagetEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012388:	b580      	push	{r7, lr}
 801238a:	b082      	sub	sp, #8
 801238c:	af00      	add	r7, sp, #0
 801238e:	6078      	str	r0, [r7, #4]
 8012390:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012392:	6878      	ldr	r0, [r7, #4]
 8012394:	f000 fcd5 	bl	8012d42 <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>
	}
 8012398:	bf00      	nop
 801239a:	3708      	adds	r7, #8
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}

080123a0 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEEC1Ev>:
 80123a0:	b480      	push	{r7}
 80123a2:	b083      	sub	sp, #12
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	4618      	mov	r0, r3
 80123ac:	370c      	adds	r7, #12
 80123ae:	46bd      	mov	sp, r7
 80123b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b4:	4770      	bx	lr

080123b6 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80123b6:	b580      	push	{r7, lr}
 80123b8:	b088      	sub	sp, #32
 80123ba:	af00      	add	r7, sp, #0
 80123bc:	60f8      	str	r0, [r7, #12]
 80123be:	60b9      	str	r1, [r7, #8]
 80123c0:	607a      	str	r2, [r7, #4]
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	61fb      	str	r3, [r7, #28]
 80123c6:	68bb      	ldr	r3, [r7, #8]
 80123c8:	61bb      	str	r3, [r7, #24]
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	617b      	str	r3, [r7, #20]
	if (std::is_constant_evaluated())
 80123ce:	f7ed ffa7 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 80123d2:	4603      	mov	r3, r0
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d003      	beq.n	80123e0 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x2a>
	    ::operator delete(__p);
 80123d8:	69b8      	ldr	r0, [r7, #24]
 80123da:	f00e f8b3 	bl	8020544 <_ZdlPv>
	    return;
 80123de:	e005      	b.n	80123ec <_ZNSt16allocator_traitsISaIP5FieldIJEEEE10deallocateERS3_PS2_j+0x36>
	  __allocator_base<_Tp>::deallocate(__p, __n);
 80123e0:	697a      	ldr	r2, [r7, #20]
 80123e2:	69b9      	ldr	r1, [r7, #24]
 80123e4:	69f8      	ldr	r0, [r7, #28]
 80123e6:	f001 f860 	bl	80134aa <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>
      { __a.deallocate(__p, __n); }
 80123ea:	bf00      	nop
 80123ec:	bf00      	nop
 80123ee:	3720      	adds	r7, #32
 80123f0:	46bd      	mov	sp, r7
 80123f2:	bd80      	pop	{r7, pc}

080123f4 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80123f4:	b580      	push	{r7, lr}
 80123f6:	b082      	sub	sp, #8
 80123f8:	af00      	add	r7, sp, #0
 80123fa:	6078      	str	r0, [r7, #4]
 80123fc:	6039      	str	r1, [r7, #0]
      if (std::is_constant_evaluated())
 80123fe:	f7ed ff8f 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012402:	4603      	mov	r3, r0
 8012404:	2b00      	cmp	r3, #0
 8012406:	d004      	beq.n	8012412 <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x1e>
	return _Destroy_aux<false>::__destroy(__first, __last);
 8012408:	6839      	ldr	r1, [r7, #0]
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f000 fca5 	bl	8012d5a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>
 8012410:	e003      	b.n	801241a <_ZSt8_DestroyIPP5FieldIJEEEvT_S4_+0x26>
	__destroy(__first, __last);
 8012412:	6839      	ldr	r1, [r7, #0]
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 fcb8 	bl	8012d8a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>
    }
 801241a:	3708      	adds	r7, #8
 801241c:	46bd      	mov	sp, r7
 801241e:	bd80      	pop	{r7, pc}

08012420 <_ZSt4moveIRP5FieldIJEEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8012420:	b480      	push	{r7}
 8012422:	b083      	sub	sp, #12
 8012424:	af00      	add	r7, sp, #0
 8012426:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	4618      	mov	r0, r3
 801242c:	370c      	adds	r7, #12
 801242e:	46bd      	mov	sp, r7
 8012430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012434:	4770      	bx	lr

08012436 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_>:
      vector<_Tp, _Alloc>::
 8012436:	b5b0      	push	{r4, r5, r7, lr}
 8012438:	b082      	sub	sp, #8
 801243a:	af00      	add	r7, sp, #0
 801243c:	6078      	str	r0, [r7, #4]
 801243e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	685a      	ldr	r2, [r3, #4]
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	689b      	ldr	r3, [r3, #8]
 8012448:	429a      	cmp	r2, r3
 801244a:	d011      	beq.n	8012470 <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801244c:	687c      	ldr	r4, [r7, #4]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	685d      	ldr	r5, [r3, #4]
 8012452:	6838      	ldr	r0, [r7, #0]
 8012454:	f000 fca4 	bl	8012da0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012458:	4603      	mov	r3, r0
 801245a:	461a      	mov	r2, r3
 801245c:	4629      	mov	r1, r5
 801245e:	4620      	mov	r0, r4
 8012460:	f000 fcbe 	bl	8012de0 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	685b      	ldr	r3, [r3, #4]
 8012468:	1d1a      	adds	r2, r3, #4
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	605a      	str	r2, [r3, #4]
 801246e:	e00c      	b.n	801248a <_ZNSt6vectorIP5FieldIJEESaIS2_EE12emplace_backIJS2_EEERS2_DpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8012470:	6878      	ldr	r0, [r7, #4]
 8012472:	f7f2 fe4e 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012476:	4604      	mov	r4, r0
 8012478:	6838      	ldr	r0, [r7, #0]
 801247a:	f000 fc91 	bl	8012da0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 801247e:	4603      	mov	r3, r0
 8012480:	461a      	mov	r2, r3
 8012482:	4621      	mov	r1, r4
 8012484:	6878      	ldr	r0, [r7, #4]
 8012486:	f000 fcbd 	bl	8012e04 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>
	return back();
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f000 fd36 	bl	8012efc <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>
 8012490:	4603      	mov	r3, r0
      }
 8012492:	4618      	mov	r0, r3
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bdb0      	pop	{r4, r5, r7, pc}

0801249a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11lower_boundERS1_>:
      lower_bound(const key_type& __k)
 801249a:	b590      	push	{r4, r7, lr}
 801249c:	b083      	sub	sp, #12
 801249e:	af00      	add	r7, sp, #0
 80124a0:	6078      	str	r0, [r7, #4]
 80124a2:	6039      	str	r1, [r7, #0]
      { return _M_lower_bound(_M_begin(), _M_end(), __k); }
 80124a4:	6878      	ldr	r0, [r7, #4]
 80124a6:	f7f9 ff6b 	bl	800c380 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 80124aa:	4604      	mov	r4, r0
 80124ac:	6878      	ldr	r0, [r7, #4]
 80124ae:	f000 fd40 	bl	8012f32 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80124b2:	4602      	mov	r2, r0
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	4621      	mov	r1, r4
 80124b8:	6878      	ldr	r0, [r7, #4]
 80124ba:	f000 fd46 	bl	8012f4a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>
 80124be:	4603      	mov	r3, r0
 80124c0:	4618      	mov	r0, r3
 80124c2:	370c      	adds	r7, #12
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd90      	pop	{r4, r7, pc}

080124c8 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8key_compEv>:
      key_comp() const
 80124c8:	b480      	push	{r7}
 80124ca:	b083      	sub	sp, #12
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_key_compare; }
 80124d0:	bf00      	nop
 80124d2:	4618      	mov	r0, r3
 80124d4:	370c      	adds	r7, #12
 80124d6:	46bd      	mov	sp, r7
 80124d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124dc:	4770      	bx	lr

080124de <_ZNSt11_Tuple_implILj0EJRKtEEC1ES1_>:
      constexpr _Tuple_impl(const _Head& __head)
 80124de:	b580      	push	{r7, lr}
 80124e0:	b082      	sub	sp, #8
 80124e2:	af00      	add	r7, sp, #0
 80124e4:	6078      	str	r0, [r7, #4]
 80124e6:	6039      	str	r1, [r7, #0]
      : _Base(__head) { }
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6839      	ldr	r1, [r7, #0]
 80124ec:	4618      	mov	r0, r3
 80124ee:	f000 fd5d 	bl	8012fac <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	4618      	mov	r0, r3
 80124f6:	3708      	adds	r7, #8
 80124f8:	46bd      	mov	sp, r7
 80124fa:	bd80      	pop	{r7, pc}

080124fc <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80124fc:	b480      	push	{r7}
 80124fe:	b083      	sub	sp, #12
 8012500:	af00      	add	r7, sp, #0
 8012502:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	4618      	mov	r0, r3
 8012508:	370c      	adds	r7, #12
 801250a:	46bd      	mov	sp, r7
 801250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012510:	4770      	bx	lr

08012512 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_create_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_create_node(_Args&&... __args)
 8012512:	b5b0      	push	{r4, r5, r7, lr}
 8012514:	b088      	sub	sp, #32
 8012516:	af02      	add	r7, sp, #8
 8012518:	60f8      	str	r0, [r7, #12]
 801251a:	60b9      	str	r1, [r7, #8]
 801251c:	607a      	str	r2, [r7, #4]
 801251e:	603b      	str	r3, [r7, #0]
	  _Link_type __tmp = _M_get_node();
 8012520:	68f8      	ldr	r0, [r7, #12]
 8012522:	f000 fd52 	bl	8012fca <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>
 8012526:	6178      	str	r0, [r7, #20]
	  _M_construct_node(__tmp, std::forward<_Args>(__args)...);
 8012528:	68b8      	ldr	r0, [r7, #8]
 801252a:	f7ee fe9c 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801252e:	4604      	mov	r4, r0
 8012530:	6878      	ldr	r0, [r7, #4]
 8012532:	f7ff ffe3 	bl	80124fc <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012536:	4605      	mov	r5, r0
 8012538:	6838      	ldr	r0, [r7, #0]
 801253a:	f7ee feaa 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801253e:	4603      	mov	r3, r0
 8012540:	9300      	str	r3, [sp, #0]
 8012542:	462b      	mov	r3, r5
 8012544:	4622      	mov	r2, r4
 8012546:	6979      	ldr	r1, [r7, #20]
 8012548:	68f8      	ldr	r0, [r7, #12]
 801254a:	f000 fd4f 	bl	8012fec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>
	  return __tmp;
 801254e:	697b      	ldr	r3, [r7, #20]
	}
 8012550:	4618      	mov	r0, r3
 8012552:	3718      	adds	r7, #24
 8012554:	46bd      	mov	sp, r7
 8012556:	bdb0      	pop	{r4, r5, r7, pc}

08012558 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012558:	b590      	push	{r4, r7, lr}
 801255a:	b08d      	sub	sp, #52	; 0x34
 801255c:	af00      	add	r7, sp, #0
 801255e:	60f8      	str	r0, [r7, #12]
 8012560:	60b9      	str	r1, [r7, #8]
 8012562:	607a      	str	r2, [r7, #4]
 8012564:	603b      	str	r3, [r7, #0]
      iterator __pos = __position._M_const_cast();
 8012566:	1d3b      	adds	r3, r7, #4
 8012568:	4618      	mov	r0, r3
 801256a:	f000 fd6c 	bl	8013046 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>
 801256e:	4603      	mov	r3, r0
 8012570:	61bb      	str	r3, [r7, #24]
      if (__pos._M_node == _M_end())
 8012572:	69bc      	ldr	r4, [r7, #24]
 8012574:	68b8      	ldr	r0, [r7, #8]
 8012576:	f000 fcdc 	bl	8012f32 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 801257a:	4603      	mov	r3, r0
 801257c:	429c      	cmp	r4, r3
 801257e:	bf0c      	ite	eq
 8012580:	2301      	moveq	r3, #1
 8012582:	2300      	movne	r3, #0
 8012584:	b2db      	uxtb	r3, r3
 8012586:	2b00      	cmp	r3, #0
 8012588:	d030      	beq.n	80125ec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x94>
	  if (size() > 0
 801258a:	68b8      	ldr	r0, [r7, #8]
 801258c:	f000 fd6c 	bl	8013068 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>
 8012590:	4603      	mov	r3, r0
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8012592:	2b00      	cmp	r3, #0
 8012594:	d013      	beq.n	80125be <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 8012596:	68bc      	ldr	r4, [r7, #8]
 8012598:	68b8      	ldr	r0, [r7, #8]
 801259a:	f000 fd71 	bl	8013080 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 801259e:	4603      	mov	r3, r0
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	4618      	mov	r0, r3
 80125a4:	f000 fd78 	bl	8013098 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80125a8:	4603      	mov	r3, r0
 80125aa:	683a      	ldr	r2, [r7, #0]
 80125ac:	4619      	mov	r1, r3
 80125ae:	4620      	mov	r0, r4
 80125b0:	f7ff fa1f 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 80125b4:	4603      	mov	r3, r0
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d001      	beq.n	80125be <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x66>
 80125ba:	2301      	movs	r3, #1
 80125bc:	e000      	b.n	80125c0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x68>
 80125be:	2300      	movs	r3, #0
	  if (size() > 0
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d00c      	beq.n	80125de <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x86>
	    return _Res(0, _M_rightmost());
 80125c4:	2300      	movs	r3, #0
 80125c6:	61fb      	str	r3, [r7, #28]
 80125c8:	68b8      	ldr	r0, [r7, #8]
 80125ca:	f000 fd59 	bl	8013080 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80125ce:	4602      	mov	r2, r0
 80125d0:	f107 031c 	add.w	r3, r7, #28
 80125d4:	4619      	mov	r1, r3
 80125d6:	68f8      	ldr	r0, [r7, #12]
 80125d8:	f7ef fc66 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 80125dc:	e0db      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	683a      	ldr	r2, [r7, #0]
 80125e2:	68b9      	ldr	r1, [r7, #8]
 80125e4:	4618      	mov	r0, r3
 80125e6:	f000 fd63 	bl	80130b0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80125ea:	e0d4      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80125ec:	68bc      	ldr	r4, [r7, #8]
 80125ee:	69bb      	ldr	r3, [r7, #24]
 80125f0:	4618      	mov	r0, r3
 80125f2:	f000 fd51 	bl	8013098 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80125f6:	4603      	mov	r3, r0
 80125f8:	461a      	mov	r2, r3
 80125fa:	6839      	ldr	r1, [r7, #0]
 80125fc:	4620      	mov	r0, r4
 80125fe:	f7ff f9f8 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 8012602:	4603      	mov	r3, r0
 8012604:	2b00      	cmp	r3, #0
 8012606:	d057      	beq.n	80126b8 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x160>
	  iterator __before = __pos;
 8012608:	69bb      	ldr	r3, [r7, #24]
 801260a:	617b      	str	r3, [r7, #20]
	  if (__pos._M_node == _M_leftmost()) // begin()
 801260c:	69bc      	ldr	r4, [r7, #24]
 801260e:	68b8      	ldr	r0, [r7, #8]
 8012610:	f000 fdd3 	bl	80131ba <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8012614:	4603      	mov	r3, r0
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	429c      	cmp	r4, r3
 801261a:	bf0c      	ite	eq
 801261c:	2301      	moveq	r3, #1
 801261e:	2300      	movne	r3, #0
 8012620:	b2db      	uxtb	r3, r3
 8012622:	2b00      	cmp	r3, #0
 8012624:	d00d      	beq.n	8012642 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0xea>
	    return _Res(_M_leftmost(), _M_leftmost());
 8012626:	68b8      	ldr	r0, [r7, #8]
 8012628:	f000 fdc7 	bl	80131ba <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 801262c:	4604      	mov	r4, r0
 801262e:	68b8      	ldr	r0, [r7, #8]
 8012630:	f000 fdc3 	bl	80131ba <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>
 8012634:	4603      	mov	r3, r0
 8012636:	461a      	mov	r2, r3
 8012638:	4621      	mov	r1, r4
 801263a:	68f8      	ldr	r0, [r7, #12]
 801263c:	f7ef fce0 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012640:	e0a9      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 8012642:	68bc      	ldr	r4, [r7, #8]
 8012644:	f107 0314 	add.w	r3, r7, #20
 8012648:	4618      	mov	r0, r3
 801264a:	f000 fdc2 	bl	80131d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
 801264e:	4603      	mov	r3, r0
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	4618      	mov	r0, r3
 8012654:	f000 fd20 	bl	8013098 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012658:	4603      	mov	r3, r0
 801265a:	683a      	ldr	r2, [r7, #0]
 801265c:	4619      	mov	r1, r3
 801265e:	4620      	mov	r0, r4
 8012660:	f7ff f9c7 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 8012664:	4603      	mov	r3, r0
 8012666:	2b00      	cmp	r3, #0
 8012668:	d01f      	beq.n	80126aa <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x152>
	      if (_S_right(__before._M_node) == 0)
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	4618      	mov	r0, r3
 801266e:	f7f9 fe9e 	bl	800c3ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012672:	4603      	mov	r3, r0
 8012674:	2b00      	cmp	r3, #0
 8012676:	bf0c      	ite	eq
 8012678:	2301      	moveq	r3, #1
 801267a:	2300      	movne	r3, #0
 801267c:	b2db      	uxtb	r3, r3
 801267e:	2b00      	cmp	r3, #0
 8012680:	d00a      	beq.n	8012698 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x140>
		return _Res(0, __before._M_node);
 8012682:	2300      	movs	r3, #0
 8012684:	623b      	str	r3, [r7, #32]
 8012686:	f107 0214 	add.w	r2, r7, #20
 801268a:	f107 0320 	add.w	r3, r7, #32
 801268e:	4619      	mov	r1, r3
 8012690:	68f8      	ldr	r0, [r7, #12]
 8012692:	f7ef fc09 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012696:	e07e      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__pos._M_node, __pos._M_node);
 8012698:	f107 0218 	add.w	r2, r7, #24
 801269c:	f107 0318 	add.w	r3, r7, #24
 80126a0:	4619      	mov	r1, r3
 80126a2:	68f8      	ldr	r0, [r7, #12]
 80126a4:	f7ef fcac 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 80126a8:	e075      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	683a      	ldr	r2, [r7, #0]
 80126ae:	68b9      	ldr	r1, [r7, #8]
 80126b0:	4618      	mov	r0, r3
 80126b2:	f000 fcfd 	bl	80130b0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 80126b6:	e06e      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 80126b8:	68bc      	ldr	r4, [r7, #8]
 80126ba:	69bb      	ldr	r3, [r7, #24]
 80126bc:	4618      	mov	r0, r3
 80126be:	f000 fceb 	bl	8013098 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80126c2:	4603      	mov	r3, r0
 80126c4:	683a      	ldr	r2, [r7, #0]
 80126c6:	4619      	mov	r1, r3
 80126c8:	4620      	mov	r0, r4
 80126ca:	f7ff f992 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 80126ce:	4603      	mov	r3, r0
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d056      	beq.n	8012782 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x22a>
	  iterator __after = __pos;
 80126d4:	69bb      	ldr	r3, [r7, #24]
 80126d6:	613b      	str	r3, [r7, #16]
	  if (__pos._M_node == _M_rightmost())
 80126d8:	69bc      	ldr	r4, [r7, #24]
 80126da:	68b8      	ldr	r0, [r7, #8]
 80126dc:	f000 fcd0 	bl	8013080 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80126e0:	4603      	mov	r3, r0
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	429c      	cmp	r4, r3
 80126e6:	bf0c      	ite	eq
 80126e8:	2301      	moveq	r3, #1
 80126ea:	2300      	movne	r3, #0
 80126ec:	b2db      	uxtb	r3, r3
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d00c      	beq.n	801270c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x1b4>
	    return _Res(0, _M_rightmost());
 80126f2:	2300      	movs	r3, #0
 80126f4:	627b      	str	r3, [r7, #36]	; 0x24
 80126f6:	68b8      	ldr	r0, [r7, #8]
 80126f8:	f000 fcc2 	bl	8013080 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>
 80126fc:	4602      	mov	r2, r0
 80126fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012702:	4619      	mov	r1, r3
 8012704:	68f8      	ldr	r0, [r7, #12]
 8012706:	f7ef fbcf 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 801270a:	e044      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 801270c:	68bc      	ldr	r4, [r7, #8]
 801270e:	f107 0310 	add.w	r3, r7, #16
 8012712:	4618      	mov	r0, r3
 8012714:	f7f2 fd3c 	bl	8005190 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEppEv>
 8012718:	4603      	mov	r3, r0
 801271a:	681b      	ldr	r3, [r3, #0]
 801271c:	4618      	mov	r0, r3
 801271e:	f000 fcbb 	bl	8013098 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 8012722:	4603      	mov	r3, r0
 8012724:	461a      	mov	r2, r3
 8012726:	6839      	ldr	r1, [r7, #0]
 8012728:	4620      	mov	r0, r4
 801272a:	f7ff f962 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 801272e:	4603      	mov	r3, r0
 8012730:	2b00      	cmp	r3, #0
 8012732:	d01f      	beq.n	8012774 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x21c>
	      if (_S_right(__pos._M_node) == 0)
 8012734:	69bb      	ldr	r3, [r7, #24]
 8012736:	4618      	mov	r0, r3
 8012738:	f7f9 fe39 	bl	800c3ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	bf0c      	ite	eq
 8012742:	2301      	moveq	r3, #1
 8012744:	2300      	movne	r3, #0
 8012746:	b2db      	uxtb	r3, r3
 8012748:	2b00      	cmp	r3, #0
 801274a:	d00a      	beq.n	8012762 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x20a>
		return _Res(0, __pos._M_node);
 801274c:	2300      	movs	r3, #0
 801274e:	62bb      	str	r3, [r7, #40]	; 0x28
 8012750:	f107 0218 	add.w	r2, r7, #24
 8012754:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8012758:	4619      	mov	r1, r3
 801275a:	68f8      	ldr	r0, [r7, #12]
 801275c:	f7ef fba4 	bl	8001ea8 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEERKS1_OT_>
    }
 8012760:	e019      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
		return _Res(__after._M_node, __after._M_node);
 8012762:	f107 0210 	add.w	r2, r7, #16
 8012766:	f107 0310 	add.w	r3, r7, #16
 801276a:	4619      	mov	r1, r3
 801276c:	68f8      	ldr	r0, [r7, #12]
 801276e:	f7ef fc47 	bl	8002000 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_S4_Lb1EEEOT_OT0_>
 8012772:	e010      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	    return _M_get_insert_unique_pos(__k);
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	683a      	ldr	r2, [r7, #0]
 8012778:	68b9      	ldr	r1, [r7, #8]
 801277a:	4618      	mov	r0, r3
 801277c:	f000 fc98 	bl	80130b0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>
 8012780:	e009      	b.n	8012796 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE29_M_get_insert_hint_unique_posESt23_Rb_tree_const_iteratorIS4_ERS1_+0x23e>
	return _Res(__pos._M_node, 0);
 8012782:	2300      	movs	r3, #0
 8012784:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012786:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801278a:	f107 0318 	add.w	r3, r7, #24
 801278e:	4619      	mov	r1, r3
 8012790:	68f8      	ldr	r0, [r7, #12]
 8012792:	f7ef fc70 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 8012796:	68f8      	ldr	r0, [r7, #12]
 8012798:	3734      	adds	r7, #52	; 0x34
 801279a:	46bd      	mov	sp, r7
 801279c:	bd90      	pop	{r4, r7, pc}

0801279e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>:
      _S_key(_Const_Link_type __x)
 801279e:	b580      	push	{r7, lr}
 80127a0:	b084      	sub	sp, #16
 80127a2:	af00      	add	r7, sp, #0
 80127a4:	6078      	str	r0, [r7, #4]
	return _KeyOfValue()(*__x->_M_valptr());
 80127a6:	6878      	ldr	r0, [r7, #4]
 80127a8:	f000 fd24 	bl	80131f4 <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 80127ac:	4602      	mov	r2, r0
 80127ae:	f107 030c 	add.w	r3, r7, #12
 80127b2:	4611      	mov	r1, r2
 80127b4:	4618      	mov	r0, r3
 80127b6:	f000 fd2b 	bl	8013210 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>
 80127ba:	4603      	mov	r3, r0
      }
 80127bc:	4618      	mov	r0, r3
 80127be:	3710      	adds	r7, #16
 80127c0:	46bd      	mov	sp, r7
 80127c2:	bd80      	pop	{r7, pc}

080127c4 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80127c4:	b5b0      	push	{r4, r5, r7, lr}
 80127c6:	b086      	sub	sp, #24
 80127c8:	af00      	add	r7, sp, #0
 80127ca:	60f8      	str	r0, [r7, #12]
 80127cc:	60b9      	str	r1, [r7, #8]
 80127ce:	607a      	str	r2, [r7, #4]
 80127d0:	603b      	str	r3, [r7, #0]
			    || _M_impl._M_key_compare(_S_key(__z),
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d117      	bne.n	8012808 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
      bool __insert_left = (__x != 0 || __p == _M_end()
 80127d8:	68f8      	ldr	r0, [r7, #12]
 80127da:	f000 fbaa 	bl	8012f32 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80127de:	4602      	mov	r2, r0
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	4293      	cmp	r3, r2
 80127e4:	d010      	beq.n	8012808 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x44>
			    || _M_impl._M_key_compare(_S_key(__z),
 80127e6:	68fc      	ldr	r4, [r7, #12]
 80127e8:	6838      	ldr	r0, [r7, #0]
 80127ea:	f7ff ffd8 	bl	801279e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80127ee:	4605      	mov	r5, r0
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	f000 fc51 	bl	8013098 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 80127f6:	4603      	mov	r3, r0
 80127f8:	461a      	mov	r2, r3
 80127fa:	4629      	mov	r1, r5
 80127fc:	4620      	mov	r0, r4
 80127fe:	f7ff f8f8 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 8012802:	4603      	mov	r3, r0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d001      	beq.n	801280c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x48>
 8012808:	2301      	movs	r3, #1
 801280a:	e000      	b.n	801280e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_insert_nodeEPSt18_Rb_tree_node_baseSC_PSt13_Rb_tree_nodeIS4_E+0x4a>
 801280c:	2300      	movs	r3, #0
      bool __insert_left = (__x != 0 || __p == _M_end()
 801280e:	75fb      	strb	r3, [r7, #23]
				    this->_M_impl._M_header);
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	3304      	adds	r3, #4
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8012814:	7df8      	ldrb	r0, [r7, #23]
 8012816:	687a      	ldr	r2, [r7, #4]
 8012818:	6839      	ldr	r1, [r7, #0]
 801281a:	f00d ff03 	bl	8020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	695b      	ldr	r3, [r3, #20]
 8012822:	1c5a      	adds	r2, r3, #1
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	615a      	str	r2, [r3, #20]
      return iterator(__z);
 8012828:	f107 0310 	add.w	r3, r7, #16
 801282c:	6839      	ldr	r1, [r7, #0]
 801282e:	4618      	mov	r0, r3
 8012830:	f7f2 ffb9 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8012834:	693b      	ldr	r3, [r7, #16]
    }
 8012836:	4618      	mov	r0, r3
 8012838:	3718      	adds	r7, #24
 801283a:	46bd      	mov	sp, r7
 801283c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08012840 <_ZN5FieldIJtEEC1EPt>:
    Field(T* ptr) : ptr(ptr) { }
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	4618      	mov	r0, r3
 801284e:	f7ff f87d 	bl	801194c <_ZN5FieldIJEEC1Ev>
 8012852:	4a05      	ldr	r2, [pc, #20]	; (8012868 <_ZN5FieldIJtEEC1EPt+0x28>)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	601a      	str	r2, [r3, #0]
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	683a      	ldr	r2, [r7, #0]
 801285c:	605a      	str	r2, [r3, #4]
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	4618      	mov	r0, r3
 8012862:	3708      	adds	r7, #8
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}
 8012868:	08020cdc 	.word	0x08020cdc

0801286c <_ZN5FieldIJmEEC1EPm>:
 801286c:	b580      	push	{r7, lr}
 801286e:	b082      	sub	sp, #8
 8012870:	af00      	add	r7, sp, #0
 8012872:	6078      	str	r0, [r7, #4]
 8012874:	6039      	str	r1, [r7, #0]
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	4618      	mov	r0, r3
 801287a:	f7ff f867 	bl	801194c <_ZN5FieldIJEEC1Ev>
 801287e:	4a05      	ldr	r2, [pc, #20]	; (8012894 <_ZN5FieldIJmEEC1EPm+0x28>)
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	601a      	str	r2, [r3, #0]
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	683a      	ldr	r2, [r7, #0]
 8012888:	605a      	str	r2, [r3, #4]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	4618      	mov	r0, r3
 801288e:	3708      	adds	r7, #8
 8012890:	46bd      	mov	sp, r7
 8012892:	bd80      	pop	{r7, pc}
 8012894:	08020cc8 	.word	0x08020cc8

08012898 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8012898:	b480      	push	{r7}
 801289a:	b083      	sub	sp, #12
 801289c:	af00      	add	r7, sp, #0
 801289e:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	689b      	ldr	r3, [r3, #8]
 80128a4:	4618      	mov	r0, r3
 80128a6:	370c      	adds	r7, #12
 80128a8:	46bd      	mov	sp, r7
 80128aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ae:	4770      	bx	lr

080128b0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P10DigitalOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80128b0:	b480      	push	{r7}
 80128b2:	b083      	sub	sp, #12
 80128b4:	af00      	add	r7, sp, #0
 80128b6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	68db      	ldr	r3, [r3, #12]
 80128bc:	4618      	mov	r0, r3
 80128be:	370c      	adds	r7, #12
 80128c0:	46bd      	mov	sp, r7
 80128c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c6:	4770      	bx	lr

080128c8 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE7_S_leftEPKSt18_Rb_tree_node_base>:
      _S_left(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80128c8:	b480      	push	{r7}
 80128ca:	b083      	sub	sp, #12
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_left); }
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	689b      	ldr	r3, [r3, #8]
 80128d4:	4618      	mov	r0, r3
 80128d6:	370c      	adds	r7, #12
 80128d8:	46bd      	mov	sp, r7
 80128da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128de:	4770      	bx	lr

080128e0 <_ZNSt8_Rb_treeIP3PinSt4pairIKS1_P9AnalogOutESt10_Select1stIS6_ESt4lessIS1_ESaIS6_EE8_S_rightEPKSt18_Rb_tree_node_base>:
      _S_right(_Const_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80128e0:	b480      	push	{r7}
 80128e2:	b083      	sub	sp, #12
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
      { return static_cast<_Const_Link_type>(__x->_M_right); }
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	68db      	ldr	r3, [r3, #12]
 80128ec:	4618      	mov	r0, r3
 80128ee:	370c      	adds	r7, #12
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr

080128f8 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>:
      _M_access() const
 80128f8:	b580      	push	{r7, lr}
 80128fa:	b082      	sub	sp, #8
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8012900:	6878      	ldr	r0, [r7, #4]
 8012902:	f7fa fe5b 	bl	800d5bc <_ZNKSt9_Any_data9_M_accessEv>
 8012906:	4603      	mov	r3, r0
 8012908:	4618      	mov	r0, r3
 801290a:	3708      	adds	r7, #8
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012910:	b480      	push	{r7}
 8012912:	b083      	sub	sp, #12
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	4618      	mov	r0, r3
 801291c:	370c      	adds	r7, #12
 801291e:	46bd      	mov	sp, r7
 8012920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012924:	4770      	bx	lr

08012926 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012926:	b480      	push	{r7}
 8012928:	b083      	sub	sp, #12
 801292a:	af00      	add	r7, sp, #0
 801292c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	4618      	mov	r0, r3
 8012932:	370c      	adds	r7, #12
 8012934:	46bd      	mov	sp, r7
 8012936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801293a:	4770      	bx	lr

0801293c <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 801293c:	b580      	push	{r7, lr}
 801293e:	b082      	sub	sp, #8
 8012940:	af00      	add	r7, sp, #0
 8012942:	7138      	strb	r0, [r7, #4]
 8012944:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8012946:	6838      	ldr	r0, [r7, #0]
 8012948:	f7ff ffed 	bl	8012926 <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE_EOT_RNSt16remove_referenceIS3_E4typeE>
 801294c:	4603      	mov	r3, r0
 801294e:	4618      	mov	r0, r3
 8012950:	f7fb fe44 	bl	800e5dc <_ZZN8TUDTests5setupEvENKUlvE_clEv>
 8012954:	bf00      	nop
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 801295c:	b580      	push	{r7, lr}
 801295e:	b084      	sub	sp, #16
 8012960:	af00      	add	r7, sp, #0
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	60b9      	str	r1, [r7, #8]
 8012966:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012968:	68b8      	ldr	r0, [r7, #8]
 801296a:	f7ff ffc5 	bl	80128f8 <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERKT_v>
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f7fa fe19 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8012974:	4603      	mov	r3, r0
 8012976:	4619      	mov	r1, r3
 8012978:	2001      	movs	r0, #1
 801297a:	f7ed fcd9 	bl	8000330 <_ZnwjPv>
	}
 801297e:	bf00      	nop
 8012980:	3710      	adds	r7, #16
 8012982:	46bd      	mov	sp, r7
 8012984:	bd80      	pop	{r7, pc}

08012986 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012986:	b580      	push	{r7, lr}
 8012988:	b082      	sub	sp, #8
 801298a:	af00      	add	r7, sp, #0
 801298c:	6078      	str	r0, [r7, #4]
 801298e:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 fc49 	bl	8013228 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>
	}
 8012996:	bf00      	nop
 8012998:	3708      	adds	r7, #8
 801299a:	46bd      	mov	sp, r7
 801299c:	bd80      	pop	{r7, pc}

0801299e <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>:
      _M_access() const
 801299e:	b580      	push	{r7, lr}
 80129a0:	b082      	sub	sp, #8
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f7fa fe08 	bl	800d5bc <_ZNKSt9_Any_data9_M_accessEv>
 80129ac:	4603      	mov	r3, r0
 80129ae:	4618      	mov	r0, r3
 80129b0:	3708      	adds	r7, #8
 80129b2:	46bd      	mov	sp, r7
 80129b4:	bd80      	pop	{r7, pc}

080129b6 <_ZSt11__addressofIKZN8TUDTests5setupEvEUlvE0_EPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80129b6:	b480      	push	{r7}
 80129b8:	b083      	sub	sp, #12
 80129ba:	af00      	add	r7, sp, #0
 80129bc:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	4618      	mov	r0, r3
 80129c2:	370c      	adds	r7, #12
 80129c4:	46bd      	mov	sp, r7
 80129c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129ca:	4770      	bx	lr

080129cc <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80129cc:	b480      	push	{r7}
 80129ce:	b083      	sub	sp, #12
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	4618      	mov	r0, r3
 80129d8:	370c      	adds	r7, #12
 80129da:	46bd      	mov	sp, r7
 80129dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e0:	4770      	bx	lr

080129e2 <_ZSt13__invoke_implIvRZN8TUDTests5setupEvEUlvE0_JEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80129e2:	b580      	push	{r7, lr}
 80129e4:	b082      	sub	sp, #8
 80129e6:	af00      	add	r7, sp, #0
 80129e8:	7138      	strb	r0, [r7, #4]
 80129ea:	6039      	str	r1, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80129ec:	6838      	ldr	r0, [r7, #0]
 80129ee:	f7ff ffed 	bl	80129cc <_ZSt7forwardIRZN8TUDTests5setupEvEUlvE0_EOT_RNSt16remove_referenceIS3_E4typeE>
 80129f2:	4603      	mov	r3, r0
 80129f4:	4618      	mov	r0, r3
 80129f6:	f7fb fdfb 	bl	800e5f0 <_ZZN8TUDTests5setupEvENKUlvE0_clEv>
 80129fa:	bf00      	nop
 80129fc:	3708      	adds	r7, #8
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}

08012a02 <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E8_M_cloneERSt9_Any_dataRKS4_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8012a02:	b580      	push	{r7, lr}
 8012a04:	b084      	sub	sp, #16
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	60f8      	str	r0, [r7, #12]
 8012a0a:	60b9      	str	r1, [r7, #8]
 8012a0c:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8012a0e:	68b8      	ldr	r0, [r7, #8]
 8012a10:	f7ff ffc5 	bl	801299e <_ZNKSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERKT_v>
 8012a14:	68f8      	ldr	r0, [r7, #12]
 8012a16:	f7fa fdc6 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8012a1a:	4603      	mov	r3, r0
 8012a1c:	4619      	mov	r1, r3
 8012a1e:	2001      	movs	r0, #1
 8012a20:	f7ed fc86 	bl	8000330 <_ZnwjPv>
	}
 8012a24:	bf00      	nop
 8012a26:	3710      	adds	r7, #16
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <_ZNSt14_Function_base13_Base_managerIZN8TUDTests5setupEvEUlvE0_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 8012a36:	6878      	ldr	r0, [r7, #4]
 8012a38:	f000 fc02 	bl	8013240 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>
	}
 8012a3c:	bf00      	nop
 8012a3e:	3708      	adds	r7, #8
 8012a40:	46bd      	mov	sp, r7
 8012a42:	bd80      	pop	{r7, pc}

08012a44 <_ZNKSt6vectorIP5TimerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f000 fc28 	bl	80132a4 <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>
 8012a54:	4603      	mov	r3, r0
 8012a56:	4618      	mov	r0, r3
 8012a58:	f000 fc0a 	bl	8013270 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	4618      	mov	r0, r3
 8012a60:	3708      	adds	r7, #8
 8012a62:	46bd      	mov	sp, r7
 8012a64:	bd80      	pop	{r7, pc}

08012a66 <_ZNKSt6vectorIP5TimerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012a66:	b480      	push	{r7}
 8012a68:	b083      	sub	sp, #12
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	685a      	ldr	r2, [r3, #4]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	1ad3      	subs	r3, r2, r3
 8012a78:	109b      	asrs	r3, r3, #2
 8012a7a:	4618      	mov	r0, r3
 8012a7c:	370c      	adds	r7, #12
 8012a7e:	46bd      	mov	sp, r7
 8012a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a84:	4770      	bx	lr

08012a86 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012a86:	b580      	push	{r7, lr}
 8012a88:	b084      	sub	sp, #16
 8012a8a:	af00      	add	r7, sp, #0
 8012a8c:	6078      	str	r0, [r7, #4]
 8012a8e:	6039      	str	r1, [r7, #0]
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	60fb      	str	r3, [r7, #12]
 8012a94:	683b      	ldr	r3, [r7, #0]
 8012a96:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012a98:	f7ed fc42 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d006      	beq.n	8012ab0 <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	009b      	lsls	r3, r3, #2
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	f00d fd50 	bl	802054c <_Znwj>
 8012aac:	4603      	mov	r3, r0
 8012aae:	e006      	b.n	8012abe <_ZNSt16allocator_traitsISaIP5TimerEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012ab0:	2200      	movs	r2, #0
 8012ab2:	68b9      	ldr	r1, [r7, #8]
 8012ab4:	68f8      	ldr	r0, [r7, #12]
 8012ab6:	f000 fe58 	bl	801376a <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>
 8012aba:	4603      	mov	r3, r0
 8012abc:	bf00      	nop
      { return __a.allocate(__n); }
 8012abe:	4618      	mov	r0, r3
 8012ac0:	3710      	adds	r7, #16
 8012ac2:	46bd      	mov	sp, r7
 8012ac4:	bd80      	pop	{r7, pc}

08012ac6 <_ZNSt6vectorIP5TimerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012ac6:	b580      	push	{r7, lr}
 8012ac8:	b084      	sub	sp, #16
 8012aca:	af00      	add	r7, sp, #0
 8012acc:	60f8      	str	r0, [r7, #12]
 8012ace:	60b9      	str	r1, [r7, #8]
 8012ad0:	607a      	str	r2, [r7, #4]
 8012ad2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012ad4:	683b      	ldr	r3, [r7, #0]
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	68b9      	ldr	r1, [r7, #8]
 8012ada:	68f8      	ldr	r0, [r7, #12]
 8012adc:	f000 fbed 	bl	80132ba <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012ae0:	4603      	mov	r3, r0
      }
 8012ae2:	4618      	mov	r0, r3
 8012ae4:	3710      	adds	r7, #16
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	bd80      	pop	{r7, pc}

08012aea <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8012aea:	b580      	push	{r7, lr}
 8012aec:	b082      	sub	sp, #8
 8012aee:	af00      	add	r7, sp, #0
 8012af0:	6078      	str	r0, [r7, #4]
 8012af2:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8012af4:	6838      	ldr	r0, [r7, #0]
 8012af6:	f7fe fc21 	bl	801133c <_ZSt7forwardI9PrecisionEOT_RNSt16remove_referenceIS1_E4typeE>
 8012afa:	4602      	mov	r2, r0
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	601a      	str	r2, [r3, #0]
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	4618      	mov	r0, r3
 8012b04:	3708      	adds	r7, #8
 8012b06:	46bd      	mov	sp, r7
 8012b08:	bd80      	pop	{r7, pc}

08012b0a <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8012b0a:	b580      	push	{r7, lr}
 8012b0c:	b082      	sub	sp, #8
 8012b0e:	af00      	add	r7, sp, #0
 8012b10:	6078      	str	r0, [r7, #4]
 8012b12:	6039      	str	r1, [r7, #0]
 8012b14:	687b      	ldr	r3, [r7, #4]
 8012b16:	683a      	ldr	r2, [r7, #0]
 8012b18:	4611      	mov	r1, r2
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	f000 fbea 	bl	80132f4 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>
 8012b20:	687b      	ldr	r3, [r7, #4]
 8012b22:	4618      	mov	r0, r3
 8012b24:	3708      	adds	r7, #8
 8012b26:	46bd      	mov	sp, r7
 8012b28:	bd80      	pop	{r7, pc}

08012b2a <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012b2a:	b5b0      	push	{r4, r5, r7, lr}
 8012b2c:	b088      	sub	sp, #32
 8012b2e:	af00      	add	r7, sp, #0
 8012b30:	60f8      	str	r0, [r7, #12]
 8012b32:	60b9      	str	r1, [r7, #8]
 8012b34:	607a      	str	r2, [r7, #4]
 8012b36:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012b38:	68b8      	ldr	r0, [r7, #8]
 8012b3a:	f7ee fb94 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f7fe fc1a 	bl	8011378 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012b44:	4602      	mov	r2, r0
 8012b46:	f107 0318 	add.w	r3, r7, #24
 8012b4a:	4611      	mov	r1, r2
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7ff ffdc 	bl	8012b0a <_ZNSt5tupleIJO9PrecisionEEC1EOS2_>
 8012b52:	f107 0418 	add.w	r4, r7, #24
 8012b56:	6838      	ldr	r0, [r7, #0]
 8012b58:	f7ee fb9b 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	4619      	mov	r1, r3
 8012b60:	2008      	movs	r0, #8
 8012b62:	f7ed fbe5 	bl	8000330 <_ZnwjPv>
 8012b66:	4605      	mov	r5, r0
 8012b68:	7f3b      	ldrb	r3, [r7, #28]
 8012b6a:	4622      	mov	r2, r4
 8012b6c:	7d39      	ldrb	r1, [r7, #20]
 8012b6e:	4628      	mov	r0, r5
 8012b70:	f000 fbf1 	bl	8013356 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>
 8012b74:	462b      	mov	r3, r5
 8012b76:	4618      	mov	r0, r3
 8012b78:	3720      	adds	r7, #32
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bdb0      	pop	{r4, r5, r7, pc}

08012b7e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIK9PrecisionmEEEE9constructIS4_JRKSt21piecewise_construct_tSt5tupleIJOS2_EESC_IJEEEEEvRS6_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012b7e:	b5b0      	push	{r4, r5, r7, lr}
 8012b80:	b084      	sub	sp, #16
 8012b82:	af00      	add	r7, sp, #0
 8012b84:	60f8      	str	r0, [r7, #12]
 8012b86:	60b9      	str	r1, [r7, #8]
 8012b88:	607a      	str	r2, [r7, #4]
 8012b8a:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012b8c:	6878      	ldr	r0, [r7, #4]
 8012b8e:	f7ee fb6a 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 8012b92:	4604      	mov	r4, r0
 8012b94:	6838      	ldr	r0, [r7, #0]
 8012b96:	f7fe fbef 	bl	8011378 <_ZSt7forwardISt5tupleIJO9PrecisionEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8012b9a:	4605      	mov	r5, r0
 8012b9c:	6a38      	ldr	r0, [r7, #32]
 8012b9e:	f7ee fb78 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	462a      	mov	r2, r5
 8012ba6:	4621      	mov	r1, r4
 8012ba8:	68b8      	ldr	r0, [r7, #8]
 8012baa:	f7ff ffbe 	bl	8012b2a <_ZSt12construct_atISt4pairIK9PrecisionmEJRKSt21piecewise_construct_tSt5tupleIJOS1_EES7_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSC_DpOSD_>
	}
 8012bae:	bf00      	nop
 8012bb0:	3710      	adds	r7, #16
 8012bb2:	46bd      	mov	sp, r7
 8012bb4:	bdb0      	pop	{r4, r5, r7, pc}

08012bb6 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b084      	sub	sp, #16
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	60f8      	str	r0, [r7, #12]
 8012bbe:	60b9      	str	r1, [r7, #8]
 8012bc0:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	009b      	lsls	r3, r3, #2
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	68b8      	ldr	r0, [r7, #8]
 8012bca:	f00d fcbd 	bl	8020548 <_ZdlPvj>
      }
 8012bce:	3710      	adds	r7, #16
 8012bd0:	46bd      	mov	sp, r7
 8012bd2:	bd80      	pop	{r7, pc}

08012bd4 <_ZSt11__addressofIP13StreamMessageEPT_RS2_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8012bd4:	b480      	push	{r7}
 8012bd6:	b083      	sub	sp, #12
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	4618      	mov	r0, r3
 8012be0:	370c      	adds	r7, #12
 8012be2:	46bd      	mov	sp, r7
 8012be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be8:	4770      	bx	lr

08012bea <_ZSt8_DestroyIP13StreamMessageEvPT_>:
    _Destroy(_Tp* __pointer)
 8012bea:	b580      	push	{r7, lr}
 8012bec:	b082      	sub	sp, #8
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 8012bf2:	6878      	ldr	r0, [r7, #4]
 8012bf4:	f7ff fb73 	bl	80122de <_ZSt10destroy_atIP13StreamMessageEvPT_>
    }
 8012bf8:	bf00      	nop
 8012bfa:	3708      	adds	r7, #8
 8012bfc:	46bd      	mov	sp, r7
 8012bfe:	bd80      	pop	{r7, pc}

08012c00 <_ZNKSt6vectorIP6StreamSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b082      	sub	sp, #8
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	f000 fbdd 	bl	80133ca <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>
 8012c10:	4603      	mov	r3, r0
 8012c12:	4618      	mov	r0, r3
 8012c14:	f000 fbbf 	bl	8013396 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>
 8012c18:	4603      	mov	r3, r0
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	3708      	adds	r7, #8
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd80      	pop	{r7, pc}

08012c22 <_ZNKSt6vectorIP6StreamSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8012c22:	b480      	push	{r7}
 8012c24:	b083      	sub	sp, #12
 8012c26:	af00      	add	r7, sp, #0
 8012c28:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	685a      	ldr	r2, [r3, #4]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	1ad3      	subs	r3, r2, r3
 8012c34:	109b      	asrs	r3, r3, #2
 8012c36:	4618      	mov	r0, r3
 8012c38:	370c      	adds	r7, #12
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c40:	4770      	bx	lr

08012c42 <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8012c42:	b580      	push	{r7, lr}
 8012c44:	b084      	sub	sp, #16
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	6078      	str	r0, [r7, #4]
 8012c4a:	6039      	str	r1, [r7, #0]
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	60fb      	str	r3, [r7, #12]
 8012c50:	683b      	ldr	r3, [r7, #0]
 8012c52:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8012c54:	f7ed fb64 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8012c58:	4603      	mov	r3, r0
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d006      	beq.n	8012c6c <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8012c5e:	68bb      	ldr	r3, [r7, #8]
 8012c60:	009b      	lsls	r3, r3, #2
 8012c62:	4618      	mov	r0, r3
 8012c64:	f00d fc72 	bl	802054c <_Znwj>
 8012c68:	4603      	mov	r3, r0
 8012c6a:	e006      	b.n	8012c7a <_ZNSt16allocator_traitsISaIP6StreamEE8allocateERS2_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 8012c6c:	2200      	movs	r2, #0
 8012c6e:	68b9      	ldr	r1, [r7, #8]
 8012c70:	68f8      	ldr	r0, [r7, #12]
 8012c72:	f000 fde7 	bl	8013844 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>
 8012c76:	4603      	mov	r3, r0
 8012c78:	bf00      	nop
      { return __a.allocate(__n); }
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3710      	adds	r7, #16
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}

08012c82 <_ZNSt6vectorIP6StreamSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8012c82:	b580      	push	{r7, lr}
 8012c84:	b084      	sub	sp, #16
 8012c86:	af00      	add	r7, sp, #0
 8012c88:	60f8      	str	r0, [r7, #12]
 8012c8a:	60b9      	str	r1, [r7, #8]
 8012c8c:	607a      	str	r2, [r7, #4]
 8012c8e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	687a      	ldr	r2, [r7, #4]
 8012c94:	68b9      	ldr	r1, [r7, #8]
 8012c96:	68f8      	ldr	r0, [r7, #12]
 8012c98:	f000 fba2 	bl	80133e0 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>
 8012c9c:	4603      	mov	r3, r0
      }
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3710      	adds	r7, #16
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bd80      	pop	{r7, pc}

08012ca6 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8012ca6:	b480      	push	{r7}
 8012ca8:	b083      	sub	sp, #12
 8012caa:	af00      	add	r7, sp, #0
 8012cac:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8012cae:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	370c      	adds	r7, #12
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <_ZNSt6vectorIP13StreamMessageSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8012cbe:	b580      	push	{r7, lr}
 8012cc0:	b084      	sub	sp, #16
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8012cc6:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8012cca:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8012ccc:	6878      	ldr	r0, [r7, #4]
 8012cce:	f7ff ffea 	bl	8012ca6 <_ZNSt16allocator_traitsISaIP13StreamMessageEE8max_sizeERKS2_>
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8012cd6:	f107 0208 	add.w	r2, r7, #8
 8012cda:	f107 030c 	add.w	r3, r7, #12
 8012cde:	4611      	mov	r1, r2
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f7f0 f880 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8012ce6:	4603      	mov	r3, r0
 8012ce8:	681b      	ldr	r3, [r3, #0]
      }
 8012cea:	4618      	mov	r0, r3
 8012cec:	3710      	adds	r7, #16
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <_ZNKSt12_Vector_baseIP13StreamMessageSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8012cf2:	b480      	push	{r7}
 8012cf4:	b083      	sub	sp, #12
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	370c      	adds	r7, #12
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <_ZSt12__relocate_aIPP13StreamMessageS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8012d08:	b5b0      	push	{r4, r5, r7, lr}
 8012d0a:	b084      	sub	sp, #16
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	60f8      	str	r0, [r7, #12]
 8012d10:	60b9      	str	r1, [r7, #8]
 8012d12:	607a      	str	r2, [r7, #4]
 8012d14:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8012d16:	68f8      	ldr	r0, [r7, #12]
 8012d18:	f000 fb9e 	bl	8013458 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012d1c:	4604      	mov	r4, r0
 8012d1e:	68b8      	ldr	r0, [r7, #8]
 8012d20:	f000 fb9a 	bl	8013458 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012d24:	4605      	mov	r5, r0
 8012d26:	6878      	ldr	r0, [r7, #4]
 8012d28:	f000 fb96 	bl	8013458 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	683b      	ldr	r3, [r7, #0]
 8012d30:	4629      	mov	r1, r5
 8012d32:	4620      	mov	r0, r4
 8012d34:	f000 fb9b 	bl	801346e <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8012d38:	4603      	mov	r3, r0
    }
 8012d3a:	4618      	mov	r0, r3
 8012d3c:	3710      	adds	r7, #16
 8012d3e:	46bd      	mov	sp, r7
 8012d40:	bdb0      	pop	{r4, r5, r7, pc}

08012d42 <_ZNSt9_Any_data9_M_accessIZN6Stream11add_messageEmP13StreamMessagetEUlvE_EERT_v>:
      _M_access()
 8012d42:	b580      	push	{r7, lr}
 8012d44:	b082      	sub	sp, #8
 8012d46:	af00      	add	r7, sp, #0
 8012d48:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8012d4a:	6878      	ldr	r0, [r7, #4]
 8012d4c:	f7fa fc2b 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8012d50:	4603      	mov	r3, r0
 8012d52:	4618      	mov	r0, r3
 8012d54:	3708      	adds	r7, #8
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}

08012d5a <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_>:
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
 8012d5a:	b580      	push	{r7, lr}
 8012d5c:	b082      	sub	sp, #8
 8012d5e:	af00      	add	r7, sp, #0
 8012d60:	6078      	str	r0, [r7, #4]
 8012d62:	6039      	str	r1, [r7, #0]
	  for (; __first != __last; ++__first)
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d00a      	beq.n	8012d82 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0x28>
	    std::_Destroy(std::__addressof(*__first));
 8012d6c:	6878      	ldr	r0, [r7, #4]
 8012d6e:	f000 fbab 	bl	80134c8 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>
 8012d72:	4603      	mov	r3, r0
 8012d74:	4618      	mov	r0, r3
 8012d76:	f000 fbb2 	bl	80134de <_ZSt8_DestroyIP5FieldIJEEEvPT_>
	  for (; __first != __last; ++__first)
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	3304      	adds	r3, #4
 8012d7e:	607b      	str	r3, [r7, #4]
 8012d80:	e7f0      	b.n	8012d64 <_ZNSt12_Destroy_auxILb0EE9__destroyIPP5FieldIJEEEEvT_S6_+0xa>
	}
 8012d82:	bf00      	nop
 8012d84:	3708      	adds	r7, #8
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}

08012d8a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5FieldIJEEEEvT_S6_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8012d8a:	b480      	push	{r7}
 8012d8c:	b083      	sub	sp, #12
 8012d8e:	af00      	add	r7, sp, #0
 8012d90:	6078      	str	r0, [r7, #4]
 8012d92:	6039      	str	r1, [r7, #0]
 8012d94:	bf00      	nop
 8012d96:	370c      	adds	r7, #12
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d9e:	4770      	bx	lr

08012da0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8012da0:	b480      	push	{r7}
 8012da2:	b083      	sub	sp, #12
 8012da4:	af00      	add	r7, sp, #0
 8012da6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	4618      	mov	r0, r3
 8012dac:	370c      	adds	r7, #12
 8012dae:	46bd      	mov	sp, r7
 8012db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db4:	4770      	bx	lr

08012db6 <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8012db6:	b590      	push	{r4, r7, lr}
 8012db8:	b083      	sub	sp, #12
 8012dba:	af00      	add	r7, sp, #0
 8012dbc:	6078      	str	r0, [r7, #4]
 8012dbe:	6039      	str	r1, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 8012dc0:	6838      	ldr	r0, [r7, #0]
 8012dc2:	f7ff ffed 	bl	8012da0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012dc6:	4603      	mov	r3, r0
 8012dc8:	681c      	ldr	r4, [r3, #0]
 8012dca:	687b      	ldr	r3, [r7, #4]
 8012dcc:	4619      	mov	r1, r3
 8012dce:	2004      	movs	r0, #4
 8012dd0:	f7ed faae 	bl	8000330 <_ZnwjPv>
 8012dd4:	4603      	mov	r3, r0
 8012dd6:	601c      	str	r4, [r3, #0]
 8012dd8:	4618      	mov	r0, r3
 8012dda:	370c      	adds	r7, #12
 8012ddc:	46bd      	mov	sp, r7
 8012dde:	bd90      	pop	{r4, r7, pc}

08012de0 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8012de0:	b580      	push	{r7, lr}
 8012de2:	b084      	sub	sp, #16
 8012de4:	af00      	add	r7, sp, #0
 8012de6:	60f8      	str	r0, [r7, #12]
 8012de8:	60b9      	str	r1, [r7, #8]
 8012dea:	607a      	str	r2, [r7, #4]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 8012dec:	6878      	ldr	r0, [r7, #4]
 8012dee:	f7ff ffd7 	bl	8012da0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012df2:	4603      	mov	r3, r0
 8012df4:	4619      	mov	r1, r3
 8012df6:	68b8      	ldr	r0, [r7, #8]
 8012df8:	f7ff ffdd 	bl	8012db6 <_ZSt12construct_atIP5FieldIJEEJS2_EEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPS4_DpOS5_>
	}
 8012dfc:	bf00      	nop
 8012dfe:	3710      	adds	r7, #16
 8012e00:	46bd      	mov	sp, r7
 8012e02:	bd80      	pop	{r7, pc}

08012e04 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8012e04:	b5b0      	push	{r4, r5, r7, lr}
 8012e06:	b08c      	sub	sp, #48	; 0x30
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	60f8      	str	r0, [r7, #12]
 8012e0c:	60b9      	str	r1, [r7, #8]
 8012e0e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8012e10:	4a39      	ldr	r2, [pc, #228]	; (8012ef8 <_ZNSt6vectorIP5FieldIJEESaIS2_EE17_M_realloc_insertIJS2_EEEvN9__gnu_cxx17__normal_iteratorIPS2_S4_EEDpOT_+0xf4>)
 8012e12:	2101      	movs	r1, #1
 8012e14:	68f8      	ldr	r0, [r7, #12]
 8012e16:	f000 fb6d 	bl	80134f4 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>
 8012e1a:	62f8      	str	r0, [r7, #44]	; 0x2c
      pointer __old_start = this->_M_impl._M_start;
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	62bb      	str	r3, [r7, #40]	; 0x28
      pointer __old_finish = this->_M_impl._M_finish;
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	685b      	ldr	r3, [r3, #4]
 8012e26:	627b      	str	r3, [r7, #36]	; 0x24
      const size_type __elems_before = __position - begin();
 8012e28:	68f8      	ldr	r0, [r7, #12]
 8012e2a:	f7f2 f962 	bl	80050f2 <_ZNSt6vectorIP5FieldIJEESaIS2_EE5beginEv>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	617b      	str	r3, [r7, #20]
 8012e32:	f107 0214 	add.w	r2, r7, #20
 8012e36:	f107 0308 	add.w	r3, r7, #8
 8012e3a:	4611      	mov	r1, r2
 8012e3c:	4618      	mov	r0, r3
 8012e3e:	f000 fba0 	bl	8013582 <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>
 8012e42:	4603      	mov	r3, r0
 8012e44:	623b      	str	r3, [r7, #32]
      pointer __new_start(this->_M_allocate(__len));
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	f000 fbae 	bl	80135ac <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>
 8012e50:	61f8      	str	r0, [r7, #28]
      pointer __new_finish(__new_start);
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	61bb      	str	r3, [r7, #24]
	  _Alloc_traits::construct(this->_M_impl,
 8012e56:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8012e58:	6a3b      	ldr	r3, [r7, #32]
 8012e5a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8012e5c:	69fa      	ldr	r2, [r7, #28]
 8012e5e:	18d5      	adds	r5, r2, r3
 8012e60:	6878      	ldr	r0, [r7, #4]
 8012e62:	f7ff ff9d 	bl	8012da0 <_ZSt7forwardIP5FieldIJEEEOT_RNSt16remove_referenceIS3_E4typeE>
 8012e66:	4603      	mov	r3, r0
 8012e68:	461a      	mov	r2, r3
 8012e6a:	4629      	mov	r1, r5
 8012e6c:	4620      	mov	r0, r4
 8012e6e:	f7ff ffb7 	bl	8012de0 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE9constructIS2_JS2_EEEvRS3_PT_DpOT0_>
	  __new_finish = pointer();
 8012e72:	2300      	movs	r3, #0
 8012e74:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012e76:	f107 0308 	add.w	r3, r7, #8
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7f1 fdb9 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8012e80:	4603      	mov	r3, r0
 8012e82:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	4618      	mov	r0, r3
 8012e88:	f7fe fd47 	bl	801191a <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8012e8c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8012e8e:	69fa      	ldr	r2, [r7, #28]
 8012e90:	4621      	mov	r1, r4
 8012e92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012e94:	f000 fb9e 	bl	80135d4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8012e98:	61b8      	str	r0, [r7, #24]
	      ++__new_finish;
 8012e9a:	69bb      	ldr	r3, [r7, #24]
 8012e9c:	3304      	adds	r3, #4
 8012e9e:	61bb      	str	r3, [r7, #24]
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012ea0:	f107 0308 	add.w	r3, r7, #8
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	f7f1 fda4 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8012eaa:	4603      	mov	r3, r0
 8012eac:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8012eae:	68fb      	ldr	r3, [r7, #12]
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fe fd32 	bl	801191a <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8012eb6:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8012eb8:	69ba      	ldr	r2, [r7, #24]
 8012eba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ebc:	4620      	mov	r0, r4
 8012ebe:	f000 fb89 	bl	80135d4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>
 8012ec2:	61b8      	str	r0, [r7, #24]
      _M_deallocate(__old_start,
 8012ec4:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	689a      	ldr	r2, [r3, #8]
 8012eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ecc:	1ad3      	subs	r3, r2, r3
 8012ece:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8012ed0:	461a      	mov	r2, r3
 8012ed2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012ed4:	f7fe fd0e 	bl	80118f4 <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE13_M_deallocateEPS2_j>
      this->_M_impl._M_start = __new_start;
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	69fa      	ldr	r2, [r7, #28]
 8012edc:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	69ba      	ldr	r2, [r7, #24]
 8012ee2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8012ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee6:	009b      	lsls	r3, r3, #2
 8012ee8:	69fa      	ldr	r2, [r7, #28]
 8012eea:	441a      	add	r2, r3
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	609a      	str	r2, [r3, #8]
    }
 8012ef0:	bf00      	nop
 8012ef2:	3730      	adds	r7, #48	; 0x30
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ef8:	08020c54 	.word	0x08020c54

08012efc <_ZNSt6vectorIP5FieldIJEESaIS2_EE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8012efc:	b580      	push	{r7, lr}
 8012efe:	b084      	sub	sp, #16
 8012f00:	af00      	add	r7, sp, #0
 8012f02:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8012f04:	6878      	ldr	r0, [r7, #4]
 8012f06:	f7f2 f904 	bl	8005112 <_ZNSt6vectorIP5FieldIJEESaIS2_EE3endEv>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	60fb      	str	r3, [r7, #12]
 8012f0e:	f107 030c 	add.w	r3, r7, #12
 8012f12:	2101      	movs	r1, #1
 8012f14:	4618      	mov	r0, r3
 8012f16:	f000 fb71 	bl	80135fc <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>
 8012f1a:	4603      	mov	r3, r0
 8012f1c:	60bb      	str	r3, [r7, #8]
 8012f1e:	f107 0308 	add.w	r3, r7, #8
 8012f22:	4618      	mov	r0, r3
 8012f24:	f7f1 fd98 	bl	8004a58 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEdeEv>
 8012f28:	4603      	mov	r3, r0
      }
 8012f2a:	4618      	mov	r0, r3
 8012f2c:	3710      	adds	r7, #16
 8012f2e:	46bd      	mov	sp, r7
 8012f30:	bd80      	pop	{r7, pc}

08012f32 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>:
      _M_end() _GLIBCXX_NOEXCEPT
 8012f32:	b480      	push	{r7}
 8012f34:	b083      	sub	sp, #12
 8012f36:	af00      	add	r7, sp, #0
 8012f38:	6078      	str	r0, [r7, #4]
      { return &this->_M_impl._M_header; }
 8012f3a:	687b      	ldr	r3, [r7, #4]
 8012f3c:	3304      	adds	r3, #4
 8012f3e:	4618      	mov	r0, r3
 8012f40:	370c      	adds	r7, #12
 8012f42:	46bd      	mov	sp, r7
 8012f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f48:	4770      	bx	lr

08012f4a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 8012f4a:	b590      	push	{r4, r7, lr}
 8012f4c:	b087      	sub	sp, #28
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	60f8      	str	r0, [r7, #12]
 8012f52:	60b9      	str	r1, [r7, #8]
 8012f54:	607a      	str	r2, [r7, #4]
 8012f56:	603b      	str	r3, [r7, #0]
      while (__x != 0)
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d01b      	beq.n	8012f96 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x4c>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 8012f5e:	68fc      	ldr	r4, [r7, #12]
 8012f60:	68b8      	ldr	r0, [r7, #8]
 8012f62:	f7ff fc1c 	bl	801279e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 8012f66:	4603      	mov	r3, r0
 8012f68:	683a      	ldr	r2, [r7, #0]
 8012f6a:	4619      	mov	r1, r3
 8012f6c:	4620      	mov	r0, r4
 8012f6e:	f7fe fd40 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 8012f72:	4603      	mov	r3, r0
 8012f74:	f083 0301 	eor.w	r3, r3, #1
 8012f78:	b2db      	uxtb	r3, r3
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d006      	beq.n	8012f8c <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0x42>
	  __y = __x, __x = _S_left(__x);
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	607b      	str	r3, [r7, #4]
 8012f82:	68b8      	ldr	r0, [r7, #8]
 8012f84:	f7f9 fa1f 	bl	800c3c6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 8012f88:	60b8      	str	r0, [r7, #8]
 8012f8a:	e7e5      	b.n	8012f58 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
	  __x = _S_right(__x);
 8012f8c:	68b8      	ldr	r0, [r7, #8]
 8012f8e:	f7f9 fa0e 	bl	800c3ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8012f92:	60b8      	str	r0, [r7, #8]
      while (__x != 0)
 8012f94:	e7e0      	b.n	8012f58 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE14_M_lower_boundEPSt13_Rb_tree_nodeIS4_EPSt18_Rb_tree_node_baseRS1_+0xe>
      return iterator(__y);
 8012f96:	f107 0314 	add.w	r3, r7, #20
 8012f9a:	6879      	ldr	r1, [r7, #4]
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f7f2 fc02 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 8012fa2:	697b      	ldr	r3, [r7, #20]
    }
 8012fa4:	4618      	mov	r0, r3
 8012fa6:	371c      	adds	r7, #28
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd90      	pop	{r4, r7, pc}

08012fac <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>:
      constexpr _Head_base(const _Head& __h)
 8012fac:	b480      	push	{r7}
 8012fae:	b083      	sub	sp, #12
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	6078      	str	r0, [r7, #4]
 8012fb4:	6039      	str	r1, [r7, #0]
      : _M_head_impl(__h) { }
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	683a      	ldr	r2, [r7, #0]
 8012fba:	601a      	str	r2, [r3, #0]
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	370c      	adds	r7, #12
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fc8:	4770      	bx	lr

08012fca <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_get_nodeEv>:
      _M_get_node()
 8012fca:	b580      	push	{r7, lr}
 8012fcc:	b082      	sub	sp, #8
 8012fce:	af00      	add	r7, sp, #0
 8012fd0:	6078      	str	r0, [r7, #4]
      { return _Alloc_traits::allocate(_M_get_Node_allocator(), 1); }
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7f9 fa3b 	bl	800c44e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 8012fd8:	4603      	mov	r3, r0
 8012fda:	2101      	movs	r1, #1
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f000 fb26 	bl	801362e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>
 8012fe2:	4603      	mov	r3, r0
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	3708      	adds	r7, #8
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}

08012fec <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE17_M_construct_nodeIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESF_IJEEEEEvPSt13_Rb_tree_nodeIS4_EDpOT_>:
	_M_construct_node(_Link_type __node, _Args&&... __args)
 8012fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff0:	b086      	sub	sp, #24
 8012ff2:	af02      	add	r7, sp, #8
 8012ff4:	60f8      	str	r0, [r7, #12]
 8012ff6:	60b9      	str	r1, [r7, #8]
 8012ff8:	607a      	str	r2, [r7, #4]
 8012ffa:	603b      	str	r3, [r7, #0]
	      ::new(__node) _Rb_tree_node<_Val>;
 8012ffc:	68bb      	ldr	r3, [r7, #8]
 8012ffe:	4619      	mov	r1, r3
 8013000:	2018      	movs	r0, #24
 8013002:	f7ed f995 	bl	8000330 <_ZnwjPv>
	      _Alloc_traits::construct(_M_get_Node_allocator(),
 8013006:	68f8      	ldr	r0, [r7, #12]
 8013008:	f7f9 fa21 	bl	800c44e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE21_M_get_Node_allocatorEv>
 801300c:	4604      	mov	r4, r0
 801300e:	68b8      	ldr	r0, [r7, #8]
 8013010:	f7f2 fa2a 	bl	8005468 <_ZNSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>
 8013014:	4605      	mov	r5, r0
 8013016:	6878      	ldr	r0, [r7, #4]
 8013018:	f7ee f925 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 801301c:	4606      	mov	r6, r0
 801301e:	6838      	ldr	r0, [r7, #0]
 8013020:	f7ff fa6c 	bl	80124fc <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013024:	4680      	mov	r8, r0
 8013026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013028:	f7ee f933 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801302c:	4603      	mov	r3, r0
 801302e:	9300      	str	r3, [sp, #0]
 8013030:	4643      	mov	r3, r8
 8013032:	4632      	mov	r2, r6
 8013034:	4629      	mov	r1, r5
 8013036:	4620      	mov	r0, r4
 8013038:	f000 fb56 	bl	80136e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>
	}
 801303c:	bf00      	nop
 801303e:	3710      	adds	r7, #16
 8013040:	46bd      	mov	sp, r7
 8013042:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08013046 <_ZNKSt23_Rb_tree_const_iteratorISt4pairIKtP6PacketEE13_M_const_castEv>:
      _M_const_cast() const _GLIBCXX_NOEXCEPT
 8013046:	b580      	push	{r7, lr}
 8013048:	b084      	sub	sp, #16
 801304a:	af00      	add	r7, sp, #0
 801304c:	6078      	str	r0, [r7, #4]
      { return iterator(const_cast<typename iterator::_Base_ptr>(_M_node)); }
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	681a      	ldr	r2, [r3, #0]
 8013052:	f107 030c 	add.w	r3, r7, #12
 8013056:	4611      	mov	r1, r2
 8013058:	4618      	mov	r0, r3
 801305a:	f7f2 fba4 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	4618      	mov	r0, r3
 8013062:	3710      	adds	r7, #16
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}

08013068 <_ZNKSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013068:	b480      	push	{r7}
 801306a:	b083      	sub	sp, #12
 801306c:	af00      	add	r7, sp, #0
 801306e:	6078      	str	r0, [r7, #4]
      { return _M_impl._M_node_count; }
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	695b      	ldr	r3, [r3, #20]
 8013074:	4618      	mov	r0, r3
 8013076:	370c      	adds	r7, #12
 8013078:	46bd      	mov	sp, r7
 801307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307e:	4770      	bx	lr

08013080 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE12_M_rightmostEv>:
      _M_rightmost() _GLIBCXX_NOEXCEPT
 8013080:	b480      	push	{r7}
 8013082:	b083      	sub	sp, #12
 8013084:	af00      	add	r7, sp, #0
 8013086:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_right; }
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	3310      	adds	r3, #16
 801308c:	4618      	mov	r0, r3
 801308e:	370c      	adds	r7, #12
 8013090:	46bd      	mov	sp, r7
 8013092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013096:	4770      	bx	lr

08013098 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>:
      _S_key(_Const_Base_ptr __x)
 8013098:	b580      	push	{r7, lr}
 801309a:	b082      	sub	sp, #8
 801309c:	af00      	add	r7, sp, #0
 801309e:	6078      	str	r0, [r7, #4]
      { return _S_key(static_cast<_Const_Link_type>(__x)); }
 80130a0:	6878      	ldr	r0, [r7, #4]
 80130a2:	f7ff fb7c 	bl	801279e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80130a6:	4603      	mov	r3, r0
 80130a8:	4618      	mov	r0, r3
 80130aa:	3708      	adds	r7, #8
 80130ac:	46bd      	mov	sp, r7
 80130ae:	bd80      	pop	{r7, pc}

080130b0 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80130b0:	b590      	push	{r4, r7, lr}
 80130b2:	b08b      	sub	sp, #44	; 0x2c
 80130b4:	af00      	add	r7, sp, #0
 80130b6:	60f8      	str	r0, [r7, #12]
 80130b8:	60b9      	str	r1, [r7, #8]
 80130ba:	607a      	str	r2, [r7, #4]
      _Link_type __x = _M_begin();
 80130bc:	68b8      	ldr	r0, [r7, #8]
 80130be:	f7f9 f95f 	bl	800c380 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_M_beginEv>
 80130c2:	4603      	mov	r3, r0
 80130c4:	61bb      	str	r3, [r7, #24]
      _Base_ptr __y = _M_end();
 80130c6:	68b8      	ldr	r0, [r7, #8]
 80130c8:	f7ff ff33 	bl	8012f32 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_M_endEv>
 80130cc:	4603      	mov	r3, r0
 80130ce:	617b      	str	r3, [r7, #20]
      bool __comp = true;
 80130d0:	2301      	movs	r3, #1
 80130d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      while (__x != 0)
 80130d6:	69bb      	ldr	r3, [r7, #24]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d020      	beq.n	801311e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6e>
	  __y = __x;
 80130dc:	69bb      	ldr	r3, [r7, #24]
 80130de:	617b      	str	r3, [r7, #20]
	  __comp = _M_impl._M_key_compare(__k, _S_key(__x));
 80130e0:	68bc      	ldr	r4, [r7, #8]
 80130e2:	69bb      	ldr	r3, [r7, #24]
 80130e4:	4618      	mov	r0, r3
 80130e6:	f7ff fb5a 	bl	801279e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt13_Rb_tree_nodeIS4_E>
 80130ea:	4603      	mov	r3, r0
 80130ec:	461a      	mov	r2, r3
 80130ee:	6879      	ldr	r1, [r7, #4]
 80130f0:	4620      	mov	r0, r4
 80130f2:	f7fe fc7e 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 80130f6:	4603      	mov	r3, r0
 80130f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 80130fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013100:	2b00      	cmp	r3, #0
 8013102:	d005      	beq.n	8013110 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x60>
 8013104:	69bb      	ldr	r3, [r7, #24]
 8013106:	4618      	mov	r0, r3
 8013108:	f7f9 f95d 	bl	800c3c6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE7_S_leftEPSt18_Rb_tree_node_base>
 801310c:	4603      	mov	r3, r0
 801310e:	e004      	b.n	801311a <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x6a>
 8013110:	69bb      	ldr	r3, [r7, #24]
 8013112:	4618      	mov	r0, r3
 8013114:	f7f9 f94b 	bl	800c3ae <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE8_S_rightEPSt18_Rb_tree_node_base>
 8013118:	4603      	mov	r3, r0
 801311a:	61bb      	str	r3, [r7, #24]
      while (__x != 0)
 801311c:	e7db      	b.n	80130d6 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x26>
      iterator __j = iterator(__y);
 801311e:	697a      	ldr	r2, [r7, #20]
 8013120:	f107 0310 	add.w	r3, r7, #16
 8013124:	4611      	mov	r1, r2
 8013126:	4618      	mov	r0, r3
 8013128:	f7f2 fb3d 	bl	80057a6 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEC1EPSt18_Rb_tree_node_base>
      if (__comp)
 801312c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013130:	2b00      	cmp	r3, #0
 8013132:	d01d      	beq.n	8013170 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xc0>
	  if (__j == begin())
 8013134:	68b8      	ldr	r0, [r7, #8]
 8013136:	f7f2 f975 	bl	8005424 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE5beginEv>
 801313a:	4603      	mov	r3, r0
 801313c:	61fb      	str	r3, [r7, #28]
 801313e:	f107 021c 	add.w	r2, r7, #28
 8013142:	f107 0310 	add.w	r3, r7, #16
 8013146:	4611      	mov	r1, r2
 8013148:	4618      	mov	r0, r3
 801314a:	f7f2 f80d 	bl	8005168 <_ZSteqRKSt17_Rb_tree_iteratorISt4pairIKtP6PacketEES7_>
 801314e:	4603      	mov	r3, r0
 8013150:	2b00      	cmp	r3, #0
 8013152:	d008      	beq.n	8013166 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xb6>
	    return _Res(__x, __y);
 8013154:	f107 0214 	add.w	r2, r7, #20
 8013158:	f107 0318 	add.w	r3, r7, #24
 801315c:	4619      	mov	r1, r3
 801315e:	68f8      	ldr	r0, [r7, #12]
 8013160:	f000 fade 	bl	8013720 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 8013164:	e025      	b.n	80131b2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
	    --__j;
 8013166:	f107 0310 	add.w	r3, r7, #16
 801316a:	4618      	mov	r0, r3
 801316c:	f000 f831 	bl	80131d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8013170:	68bc      	ldr	r4, [r7, #8]
 8013172:	693b      	ldr	r3, [r7, #16]
 8013174:	4618      	mov	r0, r3
 8013176:	f7ff ff8f 	bl	8013098 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE6_S_keyEPKSt18_Rb_tree_node_base>
 801317a:	4603      	mov	r3, r0
 801317c:	687a      	ldr	r2, [r7, #4]
 801317e:	4619      	mov	r1, r3
 8013180:	4620      	mov	r0, r4
 8013182:	f7fe fc36 	bl	80119f2 <_ZNKSt4lessItEclERKtS2_>
 8013186:	4603      	mov	r3, r0
 8013188:	2b00      	cmp	r3, #0
 801318a:	d008      	beq.n	801319e <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0xee>
	return _Res(__x, __y);
 801318c:	f107 0214 	add.w	r2, r7, #20
 8013190:	f107 0318 	add.w	r3, r7, #24
 8013194:	4619      	mov	r1, r3
 8013196:	68f8      	ldr	r0, [r7, #12]
 8013198:	f000 fac2 	bl	8013720 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>
 801319c:	e009      	b.n	80131b2 <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE24_M_get_insert_unique_posERS1_+0x102>
      return _Res(__j._M_node, 0);
 801319e:	2300      	movs	r3, #0
 80131a0:	623b      	str	r3, [r7, #32]
 80131a2:	f107 0220 	add.w	r2, r7, #32
 80131a6:	f107 0310 	add.w	r3, r7, #16
 80131aa:	4619      	mov	r1, r3
 80131ac:	68f8      	ldr	r0, [r7, #12]
 80131ae:	f7ee ff62 	bl	8002076 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRS1_Lb1EEEOT_RKS1_>
    }
 80131b2:	68f8      	ldr	r0, [r7, #12]
 80131b4:	372c      	adds	r7, #44	; 0x2c
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd90      	pop	{r4, r7, pc}

080131ba <_ZNSt8_Rb_treeItSt4pairIKtP6PacketESt10_Select1stIS4_ESt4lessItESaIS4_EE11_M_leftmostEv>:
      _M_leftmost() _GLIBCXX_NOEXCEPT
 80131ba:	b480      	push	{r7}
 80131bc:	b083      	sub	sp, #12
 80131be:	af00      	add	r7, sp, #0
 80131c0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_header._M_left; }
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	330c      	adds	r3, #12
 80131c6:	4618      	mov	r0, r3
 80131c8:	370c      	adds	r7, #12
 80131ca:	46bd      	mov	sp, r7
 80131cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d0:	4770      	bx	lr

080131d2 <_ZNSt17_Rb_tree_iteratorISt4pairIKtP6PacketEEmmEv>:
      operator--() _GLIBCXX_NOEXCEPT
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b082      	sub	sp, #8
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
	_M_node = _Rb_tree_decrement(_M_node);
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	4618      	mov	r0, r3
 80131e0:	f00d fa1e 	bl	8020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
 80131e4:	4602      	mov	r2, r0
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	601a      	str	r2, [r3, #0]
	return *this;
 80131ea:	687b      	ldr	r3, [r7, #4]
      }
 80131ec:	4618      	mov	r0, r3
 80131ee:	3708      	adds	r7, #8
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <_ZNKSt13_Rb_tree_nodeISt4pairIKtP6PacketEE9_M_valptrEv>:
      _M_valptr() const
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b082      	sub	sp, #8
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
      { return _M_storage._M_ptr(); }
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	3310      	adds	r3, #16
 8013200:	4618      	mov	r0, r3
 8013202:	f000 faa6 	bl	8013752 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>
 8013206:	4603      	mov	r3, r0
 8013208:	4618      	mov	r0, r3
 801320a:	3708      	adds	r7, #8
 801320c:	46bd      	mov	sp, r7
 801320e:	bd80      	pop	{r7, pc}

08013210 <_ZNKSt10_Select1stISt4pairIKtP6PacketEEclERKS4_>:
      operator()(const _Pair& __x) const
 8013210:	b480      	push	{r7}
 8013212:	b083      	sub	sp, #12
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
 8013218:	6039      	str	r1, [r7, #0]
      { return __x.first; }
 801321a:	683b      	ldr	r3, [r7, #0]
 801321c:	4618      	mov	r0, r3
 801321e:	370c      	adds	r7, #12
 8013220:	46bd      	mov	sp, r7
 8013222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013226:	4770      	bx	lr

08013228 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE_EERT_v>:
      _M_access()
 8013228:	b580      	push	{r7, lr}
 801322a:	b082      	sub	sp, #8
 801322c:	af00      	add	r7, sp, #0
 801322e:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013230:	6878      	ldr	r0, [r7, #4]
 8013232:	f7fa f9b8 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 8013236:	4603      	mov	r3, r0
 8013238:	4618      	mov	r0, r3
 801323a:	3708      	adds	r7, #8
 801323c:	46bd      	mov	sp, r7
 801323e:	bd80      	pop	{r7, pc}

08013240 <_ZNSt9_Any_data9_M_accessIZN8TUDTests5setupEvEUlvE0_EERT_v>:
      _M_access()
 8013240:	b580      	push	{r7, lr}
 8013242:	b082      	sub	sp, #8
 8013244:	af00      	add	r7, sp, #0
 8013246:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7fa f9ac 	bl	800d5a6 <_ZNSt9_Any_data9_M_accessEv>
 801324e:	4603      	mov	r3, r0
 8013250:	4618      	mov	r0, r3
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013258:	b480      	push	{r7}
 801325a:	b083      	sub	sp, #12
 801325c:	af00      	add	r7, sp, #0
 801325e:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013260:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013264:	4618      	mov	r0, r3
 8013266:	370c      	adds	r7, #12
 8013268:	46bd      	mov	sp, r7
 801326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801326e:	4770      	bx	lr

08013270 <_ZNSt6vectorIP5TimerSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013278:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801327c:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f7ff ffea 	bl	8013258 <_ZNSt16allocator_traitsISaIP5TimerEE8max_sizeERKS2_>
 8013284:	4603      	mov	r3, r0
 8013286:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013288:	f107 0208 	add.w	r2, r7, #8
 801328c:	f107 030c 	add.w	r3, r7, #12
 8013290:	4611      	mov	r1, r2
 8013292:	4618      	mov	r0, r3
 8013294:	f7ef fda7 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013298:	4603      	mov	r3, r0
 801329a:	681b      	ldr	r3, [r3, #0]
      }
 801329c:	4618      	mov	r0, r3
 801329e:	3710      	adds	r7, #16
 80132a0:	46bd      	mov	sp, r7
 80132a2:	bd80      	pop	{r7, pc}

080132a4 <_ZNKSt12_Vector_baseIP5TimerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80132a4:	b480      	push	{r7}
 80132a6:	b083      	sub	sp, #12
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	4618      	mov	r0, r3
 80132b0:	370c      	adds	r7, #12
 80132b2:	46bd      	mov	sp, r7
 80132b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b8:	4770      	bx	lr

080132ba <_ZSt12__relocate_aIPP5TimerS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80132ba:	b5b0      	push	{r4, r5, r7, lr}
 80132bc:	b084      	sub	sp, #16
 80132be:	af00      	add	r7, sp, #0
 80132c0:	60f8      	str	r0, [r7, #12]
 80132c2:	60b9      	str	r1, [r7, #8]
 80132c4:	607a      	str	r2, [r7, #4]
 80132c6:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80132c8:	68f8      	ldr	r0, [r7, #12]
 80132ca:	f000 fa6d 	bl	80137a8 <_ZSt12__niter_baseIPP5TimerET_S3_>
 80132ce:	4604      	mov	r4, r0
 80132d0:	68b8      	ldr	r0, [r7, #8]
 80132d2:	f000 fa69 	bl	80137a8 <_ZSt12__niter_baseIPP5TimerET_S3_>
 80132d6:	4605      	mov	r5, r0
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f000 fa65 	bl	80137a8 <_ZSt12__niter_baseIPP5TimerET_S3_>
 80132de:	4602      	mov	r2, r0
 80132e0:	683b      	ldr	r3, [r7, #0]
 80132e2:	4629      	mov	r1, r5
 80132e4:	4620      	mov	r0, r4
 80132e6:	f000 fa6a 	bl	80137be <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80132ea:	4603      	mov	r3, r0
    }
 80132ec:	4618      	mov	r0, r3
 80132ee:	3710      	adds	r7, #16
 80132f0:	46bd      	mov	sp, r7
 80132f2:	bdb0      	pop	{r4, r5, r7, pc}

080132f4 <_ZNSt11_Tuple_implILj0EJO9PrecisionEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80132f4:	b590      	push	{r4, r7, lr}
 80132f6:	b083      	sub	sp, #12
 80132f8:	af00      	add	r7, sp, #0
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80132fe:	687c      	ldr	r4, [r7, #4]
 8013300:	6838      	ldr	r0, [r7, #0]
 8013302:	f000 fa7a 	bl	80137fa <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 8013306:	4603      	mov	r3, r0
 8013308:	4618      	mov	r0, r3
 801330a:	f000 fa83 	bl	8013814 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 801330e:	4603      	mov	r3, r0
 8013310:	4619      	mov	r1, r3
 8013312:	4620      	mov	r0, r4
 8013314:	f7ff fbe9 	bl	8012aea <_ZNSt10_Head_baseILj0EO9PrecisionLb0EEC1IS0_EEOT_>
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	4618      	mov	r0, r3
 801331c:	370c      	adds	r7, #12
 801331e:	46bd      	mov	sp, r7
 8013320:	bd90      	pop	{r4, r7, pc}

08013322 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>:
      pair<_T1, _T2>::
 8013322:	b580      	push	{r7, lr}
 8013324:	b084      	sub	sp, #16
 8013326:	af00      	add	r7, sp, #0
 8013328:	60f8      	str	r0, [r7, #12]
 801332a:	60b9      	str	r1, [r7, #8]
 801332c:	607a      	str	r2, [r7, #4]
 801332e:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 8013330:	68b8      	ldr	r0, [r7, #8]
 8013332:	f000 fa7a 	bl	801382a <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 8013336:	4603      	mov	r3, r0
 8013338:	4618      	mov	r0, r3
 801333a:	f000 fa6b 	bl	8013814 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>
 801333e:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 8013340:	781a      	ldrb	r2, [r3, #0]
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	701a      	strb	r2, [r3, #0]
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	2200      	movs	r2, #0
 801334a:	605a      	str	r2, [r3, #4]
      { }
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	4618      	mov	r0, r3
 8013350:	3710      	adds	r7, #16
 8013352:	46bd      	mov	sp, r7
 8013354:	bd80      	pop	{r7, pc}

08013356 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES6_IJDpT0_EE>:
      pair<_T1, _T2>::
 8013356:	b5b0      	push	{r4, r5, r7, lr}
 8013358:	b086      	sub	sp, #24
 801335a:	af02      	add	r7, sp, #8
 801335c:	60f8      	str	r0, [r7, #12]
 801335e:	7239      	strb	r1, [r7, #8]
 8013360:	607a      	str	r2, [r7, #4]
 8013362:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013364:	463a      	mov	r2, r7
 8013366:	f88d 4000 	strb.w	r4, [sp]
 801336a:	462b      	mov	r3, r5
 801336c:	6879      	ldr	r1, [r7, #4]
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	f7ff ffd7 	bl	8013322 <_ZNSt4pairIK9PrecisionmEC1IJOS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS5_IJDpT1_EESt12_Index_tupleIJXspT0_EEESE_IJXspT2_EEE>
      { }
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	4618      	mov	r0, r3
 8013378:	3710      	adds	r7, #16
 801337a:	46bd      	mov	sp, r7
 801337c:	bdb0      	pop	{r4, r5, r7, pc}

0801337e <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 801337e:	b480      	push	{r7}
 8013380:	b083      	sub	sp, #12
 8013382:	af00      	add	r7, sp, #0
 8013384:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013386:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 801338a:	4618      	mov	r0, r3
 801338c:	370c      	adds	r7, #12
 801338e:	46bd      	mov	sp, r7
 8013390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013394:	4770      	bx	lr

08013396 <_ZNSt6vectorIP6StreamSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013396:	b580      	push	{r7, lr}
 8013398:	b084      	sub	sp, #16
 801339a:	af00      	add	r7, sp, #0
 801339c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801339e:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80133a2:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f7ff ffea 	bl	801337e <_ZNSt16allocator_traitsISaIP6StreamEE8max_sizeERKS2_>
 80133aa:	4603      	mov	r3, r0
 80133ac:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80133ae:	f107 0208 	add.w	r2, r7, #8
 80133b2:	f107 030c 	add.w	r3, r7, #12
 80133b6:	4611      	mov	r1, r2
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7ef fd14 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 80133be:	4603      	mov	r3, r0
 80133c0:	681b      	ldr	r3, [r3, #0]
      }
 80133c2:	4618      	mov	r0, r3
 80133c4:	3710      	adds	r7, #16
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}

080133ca <_ZNKSt12_Vector_baseIP6StreamSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80133ca:	b480      	push	{r7}
 80133cc:	b083      	sub	sp, #12
 80133ce:	af00      	add	r7, sp, #0
 80133d0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	4618      	mov	r0, r3
 80133d6:	370c      	adds	r7, #12
 80133d8:	46bd      	mov	sp, r7
 80133da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133de:	4770      	bx	lr

080133e0 <_ZSt12__relocate_aIPP6StreamS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80133e0:	b5b0      	push	{r4, r5, r7, lr}
 80133e2:	b084      	sub	sp, #16
 80133e4:	af00      	add	r7, sp, #0
 80133e6:	60f8      	str	r0, [r7, #12]
 80133e8:	60b9      	str	r1, [r7, #8]
 80133ea:	607a      	str	r2, [r7, #4]
 80133ec:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80133ee:	68f8      	ldr	r0, [r7, #12]
 80133f0:	f000 fa47 	bl	8013882 <_ZSt12__niter_baseIPP6StreamET_S3_>
 80133f4:	4604      	mov	r4, r0
 80133f6:	68b8      	ldr	r0, [r7, #8]
 80133f8:	f000 fa43 	bl	8013882 <_ZSt12__niter_baseIPP6StreamET_S3_>
 80133fc:	4605      	mov	r5, r0
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f000 fa3f 	bl	8013882 <_ZSt12__niter_baseIPP6StreamET_S3_>
 8013404:	4602      	mov	r2, r0
 8013406:	683b      	ldr	r3, [r7, #0]
 8013408:	4629      	mov	r1, r5
 801340a:	4620      	mov	r0, r4
 801340c:	f000 fa44 	bl	8013898 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8013410:	4603      	mov	r3, r0
    }
 8013412:	4618      	mov	r0, r3
 8013414:	3710      	adds	r7, #16
 8013416:	46bd      	mov	sp, r7
 8013418:	bdb0      	pop	{r4, r5, r7, pc}

0801341a <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801341a:	b580      	push	{r7, lr}
 801341c:	b084      	sub	sp, #16
 801341e:	af00      	add	r7, sp, #0
 8013420:	60f8      	str	r0, [r7, #12]
 8013422:	60b9      	str	r1, [r7, #8]
 8013424:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013426:	68f8      	ldr	r0, [r7, #12]
 8013428:	f000 fa54 	bl	80138d4 <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>
 801342c:	4602      	mov	r2, r0
 801342e:	68bb      	ldr	r3, [r7, #8]
 8013430:	4293      	cmp	r3, r2
 8013432:	bf8c      	ite	hi
 8013434:	2301      	movhi	r3, #1
 8013436:	2300      	movls	r3, #0
 8013438:	b2db      	uxtb	r3, r3
 801343a:	2b00      	cmp	r3, #0
 801343c:	d001      	beq.n	8013442 <_ZN9__gnu_cxx13new_allocatorIP13StreamMessageE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801343e:	f00d f94c 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013442:	68bb      	ldr	r3, [r7, #8]
 8013444:	009b      	lsls	r3, r3, #2
 8013446:	4618      	mov	r0, r3
 8013448:	f00d f880 	bl	802054c <_Znwj>
 801344c:	4603      	mov	r3, r0
 801344e:	bf00      	nop
      }
 8013450:	4618      	mov	r0, r3
 8013452:	3710      	adds	r7, #16
 8013454:	46bd      	mov	sp, r7
 8013456:	bd80      	pop	{r7, pc}

08013458 <_ZSt12__niter_baseIPP13StreamMessageET_S3_>:
    __niter_base(_Iterator __it)
 8013458:	b480      	push	{r7}
 801345a:	b083      	sub	sp, #12
 801345c:	af00      	add	r7, sp, #0
 801345e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	4618      	mov	r0, r3
 8013464:	370c      	adds	r7, #12
 8013466:	46bd      	mov	sp, r7
 8013468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346c:	4770      	bx	lr

0801346e <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801346e:	b580      	push	{r7, lr}
 8013470:	b086      	sub	sp, #24
 8013472:	af00      	add	r7, sp, #0
 8013474:	60f8      	str	r0, [r7, #12]
 8013476:	60b9      	str	r1, [r7, #8]
 8013478:	607a      	str	r2, [r7, #4]
 801347a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	1ad3      	subs	r3, r2, r3
 8013482:	109b      	asrs	r3, r3, #2
 8013484:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013486:	697b      	ldr	r3, [r7, #20]
 8013488:	2b00      	cmp	r3, #0
 801348a:	dd06      	ble.n	801349a <_ZSt14__relocate_a_1IP13StreamMessageS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	009b      	lsls	r3, r3, #2
 8013490:	461a      	mov	r2, r3
 8013492:	68f9      	ldr	r1, [r7, #12]
 8013494:	6878      	ldr	r0, [r7, #4]
 8013496:	f00d f993 	bl	80207c0 <memmove>
      return __result + __count;
 801349a:	697b      	ldr	r3, [r7, #20]
 801349c:	009b      	lsls	r3, r3, #2
 801349e:	687a      	ldr	r2, [r7, #4]
 80134a0:	4413      	add	r3, r2
    }
 80134a2:	4618      	mov	r0, r3
 80134a4:	3718      	adds	r7, #24
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}

080134aa <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE10deallocateEPS3_j>:
      deallocate(_Tp* __p, size_type __t)
 80134aa:	b580      	push	{r7, lr}
 80134ac:	b084      	sub	sp, #16
 80134ae:	af00      	add	r7, sp, #0
 80134b0:	60f8      	str	r0, [r7, #12]
 80134b2:	60b9      	str	r1, [r7, #8]
 80134b4:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	009b      	lsls	r3, r3, #2
 80134ba:	4619      	mov	r1, r3
 80134bc:	68b8      	ldr	r0, [r7, #8]
 80134be:	f00d f843 	bl	8020548 <_ZdlPvj>
      }
 80134c2:	3710      	adds	r7, #16
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <_ZSt11__addressofIP5FieldIJEEEPT_RS3_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80134c8:	b480      	push	{r7}
 80134ca:	b083      	sub	sp, #12
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	4618      	mov	r0, r3
 80134d4:	370c      	adds	r7, #12
 80134d6:	46bd      	mov	sp, r7
 80134d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134dc:	4770      	bx	lr

080134de <_ZSt8_DestroyIP5FieldIJEEEvPT_>:
    _Destroy(_Tp* __pointer)
 80134de:	b580      	push	{r7, lr}
 80134e0:	b082      	sub	sp, #8
 80134e2:	af00      	add	r7, sp, #0
 80134e4:	6078      	str	r0, [r7, #4]
      std::destroy_at(__pointer);
 80134e6:	6878      	ldr	r0, [r7, #4]
 80134e8:	f000 fa00 	bl	80138ec <_ZSt10destroy_atIP5FieldIJEEEvPT_>
    }
 80134ec:	bf00      	nop
 80134ee:	3708      	adds	r7, #8
 80134f0:	46bd      	mov	sp, r7
 80134f2:	bd80      	pop	{r7, pc}

080134f4 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80134f4:	b590      	push	{r4, r7, lr}
 80134f6:	b087      	sub	sp, #28
 80134f8:	af00      	add	r7, sp, #0
 80134fa:	60f8      	str	r0, [r7, #12]
 80134fc:	60b9      	str	r1, [r7, #8]
 80134fe:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	f000 f9fd 	bl	8013900 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013506:	4604      	mov	r4, r0
 8013508:	68f8      	ldr	r0, [r7, #12]
 801350a:	f000 fa0a 	bl	8013922 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 801350e:	4603      	mov	r3, r0
 8013510:	1ae2      	subs	r2, r4, r3
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	429a      	cmp	r2, r3
 8013516:	bf34      	ite	cc
 8013518:	2301      	movcc	r3, #1
 801351a:	2300      	movcs	r3, #0
 801351c:	b2db      	uxtb	r3, r3
 801351e:	2b00      	cmp	r3, #0
 8013520:	d002      	beq.n	8013528 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f00d f8dc 	bl	80206e0 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8013528:	68f8      	ldr	r0, [r7, #12]
 801352a:	f000 f9fa 	bl	8013922 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 801352e:	4604      	mov	r4, r0
 8013530:	68f8      	ldr	r0, [r7, #12]
 8013532:	f000 f9f6 	bl	8013922 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013536:	4603      	mov	r3, r0
 8013538:	613b      	str	r3, [r7, #16]
 801353a:	f107 0208 	add.w	r2, r7, #8
 801353e:	f107 0310 	add.w	r3, r7, #16
 8013542:	4611      	mov	r1, r2
 8013544:	4618      	mov	r0, r3
 8013546:	f7ef f984 	bl	8002852 <_ZSt3maxIjERKT_S2_S2_>
 801354a:	4603      	mov	r3, r0
 801354c:	681b      	ldr	r3, [r3, #0]
 801354e:	4423      	add	r3, r4
 8013550:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8013552:	68f8      	ldr	r0, [r7, #12]
 8013554:	f000 f9e5 	bl	8013922 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>
 8013558:	4602      	mov	r2, r0
 801355a:	697b      	ldr	r3, [r7, #20]
 801355c:	4293      	cmp	r3, r2
 801355e:	d306      	bcc.n	801356e <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x7a>
 8013560:	68f8      	ldr	r0, [r7, #12]
 8013562:	f000 f9cd 	bl	8013900 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013566:	4602      	mov	r2, r0
 8013568:	697b      	ldr	r3, [r7, #20]
 801356a:	4293      	cmp	r3, r2
 801356c:	d904      	bls.n	8013578 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x84>
 801356e:	68f8      	ldr	r0, [r7, #12]
 8013570:	f000 f9c6 	bl	8013900 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>
 8013574:	4603      	mov	r3, r0
 8013576:	e000      	b.n	801357a <_ZNKSt6vectorIP5FieldIJEESaIS2_EE12_M_check_lenEjPKc+0x86>
 8013578:	697b      	ldr	r3, [r7, #20]
      }
 801357a:	4618      	mov	r0, r3
 801357c:	371c      	adds	r7, #28
 801357e:	46bd      	mov	sp, r7
 8013580:	bd90      	pop	{r4, r7, pc}

08013582 <_ZN9__gnu_cxxmiIPP5FieldIJEESt6vectorIS3_SaIS3_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSB_SE_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8013582:	b590      	push	{r4, r7, lr}
 8013584:	b083      	sub	sp, #12
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
 801358a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801358c:	6878      	ldr	r0, [r7, #4]
 801358e:	f7f1 fa30 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 8013592:	4603      	mov	r3, r0
 8013594:	681c      	ldr	r4, [r3, #0]
 8013596:	6838      	ldr	r0, [r7, #0]
 8013598:	f7f1 fa2b 	bl	80049f2 <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEE4baseEv>
 801359c:	4603      	mov	r3, r0
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	1ae3      	subs	r3, r4, r3
 80135a2:	109b      	asrs	r3, r3, #2
 80135a4:	4618      	mov	r0, r3
 80135a6:	370c      	adds	r7, #12
 80135a8:	46bd      	mov	sp, r7
 80135aa:	bd90      	pop	{r4, r7, pc}

080135ac <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b082      	sub	sp, #8
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	6078      	str	r0, [r7, #4]
 80135b4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d006      	beq.n	80135ca <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x1e>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	6839      	ldr	r1, [r7, #0]
 80135c0:	4618      	mov	r0, r3
 80135c2:	f000 f9be 	bl	8013942 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>
 80135c6:	4603      	mov	r3, r0
 80135c8:	e000      	b.n	80135cc <_ZNSt12_Vector_baseIP5FieldIJEESaIS2_EE11_M_allocateEj+0x20>
 80135ca:	2300      	movs	r3, #0
      }
 80135cc:	4618      	mov	r0, r3
 80135ce:	3708      	adds	r7, #8
 80135d0:	46bd      	mov	sp, r7
 80135d2:	bd80      	pop	{r7, pc}

080135d4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_relocateEPS2_S5_S5_RS3_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80135d4:	b590      	push	{r4, r7, lr}
 80135d6:	b087      	sub	sp, #28
 80135d8:	af02      	add	r7, sp, #8
 80135da:	60f8      	str	r0, [r7, #12]
 80135dc:	60b9      	str	r1, [r7, #8]
 80135de:	607a      	str	r2, [r7, #4]
 80135e0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80135e2:	f88d 4000 	strb.w	r4, [sp]
 80135e6:	683b      	ldr	r3, [r7, #0]
 80135e8:	687a      	ldr	r2, [r7, #4]
 80135ea:	68b9      	ldr	r1, [r7, #8]
 80135ec:	68f8      	ldr	r0, [r7, #12]
 80135ee:	f000 f9c8 	bl	8013982 <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>
 80135f2:	4603      	mov	r3, r0
      }
 80135f4:	4618      	mov	r0, r3
 80135f6:	3714      	adds	r7, #20
 80135f8:	46bd      	mov	sp, r7
 80135fa:	bd90      	pop	{r4, r7, pc}

080135fc <_ZNK9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 80135fc:	b580      	push	{r7, lr}
 80135fe:	b084      	sub	sp, #16
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
 8013604:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681a      	ldr	r2, [r3, #0]
 801360a:	683b      	ldr	r3, [r7, #0]
 801360c:	009b      	lsls	r3, r3, #2
 801360e:	425b      	negs	r3, r3
 8013610:	4413      	add	r3, r2
 8013612:	60fb      	str	r3, [r7, #12]
 8013614:	f107 020c 	add.w	r2, r7, #12
 8013618:	f107 0308 	add.w	r3, r7, #8
 801361c:	4611      	mov	r1, r2
 801361e:	4618      	mov	r0, r3
 8013620:	f7f1 fef0 	bl	8005404 <_ZN9__gnu_cxx17__normal_iteratorIPP5FieldIJEESt6vectorIS3_SaIS3_EEEC1ERKS4_>
 8013624:	68bb      	ldr	r3, [r7, #8]
 8013626:	4618      	mov	r0, r3
 8013628:	3710      	adds	r7, #16
 801362a:	46bd      	mov	sp, r7
 801362c:	bd80      	pop	{r7, pc}

0801362e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j>:
      allocate(allocator_type& __a, size_type __n)
 801362e:	b580      	push	{r7, lr}
 8013630:	b084      	sub	sp, #16
 8013632:	af00      	add	r7, sp, #0
 8013634:	6078      	str	r0, [r7, #4]
 8013636:	6039      	str	r1, [r7, #0]
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	60fb      	str	r3, [r7, #12]
 801363c:	683b      	ldr	r3, [r7, #0]
 801363e:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013640:	f7ec fe6e 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013644:	4603      	mov	r3, r0
 8013646:	2b00      	cmp	r3, #0
 8013648:	d009      	beq.n	801365e <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x30>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801364a:	68ba      	ldr	r2, [r7, #8]
 801364c:	4613      	mov	r3, r2
 801364e:	005b      	lsls	r3, r3, #1
 8013650:	4413      	add	r3, r2
 8013652:	00db      	lsls	r3, r3, #3
 8013654:	4618      	mov	r0, r3
 8013656:	f00c ff79 	bl	802054c <_Znwj>
 801365a:	4603      	mov	r3, r0
 801365c:	e006      	b.n	801366c <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE8allocateERS7_j+0x3e>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801365e:	2200      	movs	r2, #0
 8013660:	68b9      	ldr	r1, [r7, #8]
 8013662:	68f8      	ldr	r0, [r7, #12]
 8013664:	f000 fa78 	bl	8013b58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>
 8013668:	4603      	mov	r3, r0
 801366a:	bf00      	nop
      { return __a.allocate(__n); }
 801366c:	4618      	mov	r0, r3
 801366e:	3710      	adds	r7, #16
 8013670:	46bd      	mov	sp, r7
 8013672:	bd80      	pop	{r7, pc}

08013674 <_ZNSt5tupleIJRKtEEC1EOS2_>:
      constexpr tuple(tuple&&) = default;
 8013674:	b580      	push	{r7, lr}
 8013676:	b082      	sub	sp, #8
 8013678:	af00      	add	r7, sp, #0
 801367a:	6078      	str	r0, [r7, #4]
 801367c:	6039      	str	r1, [r7, #0]
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	683a      	ldr	r2, [r7, #0]
 8013682:	4611      	mov	r1, r2
 8013684:	4618      	mov	r0, r3
 8013686:	f000 f98e 	bl	80139a6 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	4618      	mov	r0, r3
 801368e:	3708      	adds	r7, #8
 8013690:	46bd      	mov	sp, r7
 8013692:	bd80      	pop	{r7, pc}

08013694 <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>:
    construct_at(_Tp* __location, _Args&&... __args)
 8013694:	b5b0      	push	{r4, r5, r7, lr}
 8013696:	b088      	sub	sp, #32
 8013698:	af00      	add	r7, sp, #0
 801369a:	60f8      	str	r0, [r7, #12]
 801369c:	60b9      	str	r1, [r7, #8]
 801369e:	607a      	str	r2, [r7, #4]
 80136a0:	603b      	str	r3, [r7, #0]
    { return ::new((void*)__location) _Tp(std::forward<_Args>(__args)...); }
 80136a2:	68b8      	ldr	r0, [r7, #8]
 80136a4:	f7ed fddf 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f7fe ff27 	bl	80124fc <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 80136ae:	4602      	mov	r2, r0
 80136b0:	f107 0318 	add.w	r3, r7, #24
 80136b4:	4611      	mov	r1, r2
 80136b6:	4618      	mov	r0, r3
 80136b8:	f7ff ffdc 	bl	8013674 <_ZNSt5tupleIJRKtEEC1EOS2_>
 80136bc:	f107 0418 	add.w	r4, r7, #24
 80136c0:	6838      	ldr	r0, [r7, #0]
 80136c2:	f7ed fde6 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 80136c6:	68fb      	ldr	r3, [r7, #12]
 80136c8:	4619      	mov	r1, r3
 80136ca:	2008      	movs	r0, #8
 80136cc:	f7ec fe30 	bl	8000330 <_ZnwjPv>
 80136d0:	4605      	mov	r5, r0
 80136d2:	7f3b      	ldrb	r3, [r7, #28]
 80136d4:	4622      	mov	r2, r4
 80136d6:	7d39      	ldrb	r1, [r7, #20]
 80136d8:	4628      	mov	r0, r5
 80136da:	f000 f995 	bl	8013a08 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>
 80136de:	462b      	mov	r3, r5
 80136e0:	4618      	mov	r0, r3
 80136e2:	3720      	adds	r7, #32
 80136e4:	46bd      	mov	sp, r7
 80136e6:	bdb0      	pop	{r4, r5, r7, pc}

080136e8 <_ZNSt16allocator_traitsISaISt13_Rb_tree_nodeISt4pairIKtP6PacketEEEE9constructIS5_JRKSt21piecewise_construct_tSt5tupleIJRS2_EESD_IJEEEEEvRS7_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80136e8:	b5b0      	push	{r4, r5, r7, lr}
 80136ea:	b084      	sub	sp, #16
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	60b9      	str	r1, [r7, #8]
 80136f2:	607a      	str	r2, [r7, #4]
 80136f4:	603b      	str	r3, [r7, #0]
	  std::construct_at(__p, std::forward<_Args>(__args)...);
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f7ed fdb5 	bl	8001266 <_ZSt7forwardIRKSt21piecewise_construct_tEOT_RNSt16remove_referenceIS3_E4typeE>
 80136fc:	4604      	mov	r4, r0
 80136fe:	6838      	ldr	r0, [r7, #0]
 8013700:	f7fe fefc 	bl	80124fc <_ZSt7forwardISt5tupleIJRKtEEEOT_RNSt16remove_referenceIS4_E4typeE>
 8013704:	4605      	mov	r5, r0
 8013706:	6a38      	ldr	r0, [r7, #32]
 8013708:	f7ed fdc3 	bl	8001292 <_ZSt7forwardISt5tupleIJEEEOT_RNSt16remove_referenceIS2_E4typeE>
 801370c:	4603      	mov	r3, r0
 801370e:	462a      	mov	r2, r5
 8013710:	4621      	mov	r1, r4
 8013712:	68b8      	ldr	r0, [r7, #8]
 8013714:	f7ff ffbe 	bl	8013694 <_ZSt12construct_atISt4pairIKtP6PacketEJRKSt21piecewise_construct_tSt5tupleIJRS1_EES8_IJEEEEDTgsnwcvPvLi0E_T_pispcl7declvalIT0_EEEEPSD_DpOSE_>
	}
 8013718:	bf00      	nop
 801371a:	3710      	adds	r7, #16
 801371c:	46bd      	mov	sp, r7
 801371e:	bdb0      	pop	{r4, r5, r7, pc}

08013720 <_ZNSt4pairIPSt18_Rb_tree_node_baseS1_EC1IRPSt13_Rb_tree_nodeIS_IKtP6PacketEERS1_Lb1EEEOT_OT0_>:
	constexpr pair(_U1&& __x, _U2&& __y)
 8013720:	b580      	push	{r7, lr}
 8013722:	b084      	sub	sp, #16
 8013724:	af00      	add	r7, sp, #0
 8013726:	60f8      	str	r0, [r7, #12]
 8013728:	60b9      	str	r1, [r7, #8]
 801372a:	607a      	str	r2, [r7, #4]
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 801372c:	68b8      	ldr	r0, [r7, #8]
 801372e:	f000 f97f 	bl	8013a30 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>
 8013732:	4603      	mov	r3, r0
 8013734:	681a      	ldr	r2, [r3, #0]
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	601a      	str	r2, [r3, #0]
 801373a:	6878      	ldr	r0, [r7, #4]
 801373c:	f7ef f837 	bl	80027ae <_ZSt7forwardIRPSt18_Rb_tree_node_baseEOT_RNSt16remove_referenceIS3_E4typeE>
 8013740:	4603      	mov	r3, r0
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	68fb      	ldr	r3, [r7, #12]
 8013746:	605a      	str	r2, [r3, #4]
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	4618      	mov	r0, r3
 801374c:	3710      	adds	r7, #16
 801374e:	46bd      	mov	sp, r7
 8013750:	bd80      	pop	{r7, pc}

08013752 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE6_M_ptrEv>:
      _M_ptr() const noexcept
 8013752:	b580      	push	{r7, lr}
 8013754:	b082      	sub	sp, #8
 8013756:	af00      	add	r7, sp, #0
 8013758:	6078      	str	r0, [r7, #4]
      { return static_cast<const _Tp*>(_M_addr()); }
 801375a:	6878      	ldr	r0, [r7, #4]
 801375c:	f000 f973 	bl	8013a46 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>
 8013760:	4603      	mov	r3, r0
 8013762:	4618      	mov	r0, r3
 8013764:	3708      	adds	r7, #8
 8013766:	46bd      	mov	sp, r7
 8013768:	bd80      	pop	{r7, pc}

0801376a <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801376a:	b580      	push	{r7, lr}
 801376c:	b084      	sub	sp, #16
 801376e:	af00      	add	r7, sp, #0
 8013770:	60f8      	str	r0, [r7, #12]
 8013772:	60b9      	str	r1, [r7, #8]
 8013774:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013776:	68f8      	ldr	r0, [r7, #12]
 8013778:	f000 f970 	bl	8013a5c <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>
 801377c:	4602      	mov	r2, r0
 801377e:	68bb      	ldr	r3, [r7, #8]
 8013780:	4293      	cmp	r3, r2
 8013782:	bf8c      	ite	hi
 8013784:	2301      	movhi	r3, #1
 8013786:	2300      	movls	r3, #0
 8013788:	b2db      	uxtb	r3, r3
 801378a:	2b00      	cmp	r3, #0
 801378c:	d001      	beq.n	8013792 <_ZN9__gnu_cxx13new_allocatorIP5TimerE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 801378e:	f00c ffa4 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013792:	68bb      	ldr	r3, [r7, #8]
 8013794:	009b      	lsls	r3, r3, #2
 8013796:	4618      	mov	r0, r3
 8013798:	f00c fed8 	bl	802054c <_Znwj>
 801379c:	4603      	mov	r3, r0
 801379e:	bf00      	nop
      }
 80137a0:	4618      	mov	r0, r3
 80137a2:	3710      	adds	r7, #16
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}

080137a8 <_ZSt12__niter_baseIPP5TimerET_S3_>:
    __niter_base(_Iterator __it)
 80137a8:	b480      	push	{r7}
 80137aa:	b083      	sub	sp, #12
 80137ac:	af00      	add	r7, sp, #0
 80137ae:	6078      	str	r0, [r7, #4]
    { return __it; }
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	4618      	mov	r0, r3
 80137b4:	370c      	adds	r7, #12
 80137b6:	46bd      	mov	sp, r7
 80137b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137bc:	4770      	bx	lr

080137be <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80137be:	b580      	push	{r7, lr}
 80137c0:	b086      	sub	sp, #24
 80137c2:	af00      	add	r7, sp, #0
 80137c4:	60f8      	str	r0, [r7, #12]
 80137c6:	60b9      	str	r1, [r7, #8]
 80137c8:	607a      	str	r2, [r7, #4]
 80137ca:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80137cc:	68ba      	ldr	r2, [r7, #8]
 80137ce:	68fb      	ldr	r3, [r7, #12]
 80137d0:	1ad3      	subs	r3, r2, r3
 80137d2:	109b      	asrs	r3, r3, #2
 80137d4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80137d6:	697b      	ldr	r3, [r7, #20]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	dd06      	ble.n	80137ea <_ZSt14__relocate_a_1IP5TimerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80137dc:	697b      	ldr	r3, [r7, #20]
 80137de:	009b      	lsls	r3, r3, #2
 80137e0:	461a      	mov	r2, r3
 80137e2:	68f9      	ldr	r1, [r7, #12]
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f00c ffeb 	bl	80207c0 <memmove>
      return __result + __count;
 80137ea:	697b      	ldr	r3, [r7, #20]
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	687a      	ldr	r2, [r7, #4]
 80137f0:	4413      	add	r3, r2
    }
 80137f2:	4618      	mov	r0, r3
 80137f4:	3718      	adds	r7, #24
 80137f6:	46bd      	mov	sp, r7
 80137f8:	bd80      	pop	{r7, pc}

080137fa <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 80137fa:	b580      	push	{r7, lr}
 80137fc:	b082      	sub	sp, #8
 80137fe:	af00      	add	r7, sp, #0
 8013800:	6078      	str	r0, [r7, #4]
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	4618      	mov	r0, r3
 8013806:	f000 f935 	bl	8013a74 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>
 801380a:	4603      	mov	r3, r0
 801380c:	4618      	mov	r0, r3
 801380e:	3708      	adds	r7, #8
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}

08013814 <_ZSt7forwardIO9PrecisionEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	4618      	mov	r0, r3
 8013820:	370c      	adds	r7, #12
 8013822:	46bd      	mov	sp, r7
 8013824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013828:	4770      	bx	lr

0801382a <_ZSt3getILj0EJO9PrecisionEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 801382a:	b580      	push	{r7, lr}
 801382c:	b082      	sub	sp, #8
 801382e:	af00      	add	r7, sp, #0
 8013830:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	4618      	mov	r0, r3
 8013836:	f000 f929 	bl	8013a8c <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 801383a:	4603      	mov	r3, r0
 801383c:	4618      	mov	r0, r3
 801383e:	3708      	adds	r7, #8
 8013840:	46bd      	mov	sp, r7
 8013842:	bd80      	pop	{r7, pc}

08013844 <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013844:	b580      	push	{r7, lr}
 8013846:	b084      	sub	sp, #16
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013850:	68f8      	ldr	r0, [r7, #12]
 8013852:	f000 f927 	bl	8013aa4 <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>
 8013856:	4602      	mov	r2, r0
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	4293      	cmp	r3, r2
 801385c:	bf8c      	ite	hi
 801385e:	2301      	movhi	r3, #1
 8013860:	2300      	movls	r3, #0
 8013862:	b2db      	uxtb	r3, r3
 8013864:	2b00      	cmp	r3, #0
 8013866:	d001      	beq.n	801386c <_ZN9__gnu_cxx13new_allocatorIP6StreamE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013868:	f00c ff37 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801386c:	68bb      	ldr	r3, [r7, #8]
 801386e:	009b      	lsls	r3, r3, #2
 8013870:	4618      	mov	r0, r3
 8013872:	f00c fe6b 	bl	802054c <_Znwj>
 8013876:	4603      	mov	r3, r0
 8013878:	bf00      	nop
      }
 801387a:	4618      	mov	r0, r3
 801387c:	3710      	adds	r7, #16
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}

08013882 <_ZSt12__niter_baseIPP6StreamET_S3_>:
    __niter_base(_Iterator __it)
 8013882:	b480      	push	{r7}
 8013884:	b083      	sub	sp, #12
 8013886:	af00      	add	r7, sp, #0
 8013888:	6078      	str	r0, [r7, #4]
    { return __it; }
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	4618      	mov	r0, r3
 801388e:	370c      	adds	r7, #12
 8013890:	46bd      	mov	sp, r7
 8013892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013896:	4770      	bx	lr

08013898 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013898:	b580      	push	{r7, lr}
 801389a:	b086      	sub	sp, #24
 801389c:	af00      	add	r7, sp, #0
 801389e:	60f8      	str	r0, [r7, #12]
 80138a0:	60b9      	str	r1, [r7, #8]
 80138a2:	607a      	str	r2, [r7, #4]
 80138a4:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80138a6:	68ba      	ldr	r2, [r7, #8]
 80138a8:	68fb      	ldr	r3, [r7, #12]
 80138aa:	1ad3      	subs	r3, r2, r3
 80138ac:	109b      	asrs	r3, r3, #2
 80138ae:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80138b0:	697b      	ldr	r3, [r7, #20]
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	dd06      	ble.n	80138c4 <_ZSt14__relocate_a_1IP6StreamS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80138b6:	697b      	ldr	r3, [r7, #20]
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	461a      	mov	r2, r3
 80138bc:	68f9      	ldr	r1, [r7, #12]
 80138be:	6878      	ldr	r0, [r7, #4]
 80138c0:	f00c ff7e 	bl	80207c0 <memmove>
      return __result + __count;
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	009b      	lsls	r3, r3, #2
 80138c8:	687a      	ldr	r2, [r7, #4]
 80138ca:	4413      	add	r3, r2
    }
 80138cc:	4618      	mov	r0, r3
 80138ce:	3718      	adds	r7, #24
 80138d0:	46bd      	mov	sp, r7
 80138d2:	bd80      	pop	{r7, pc}

080138d4 <_ZNK9__gnu_cxx13new_allocatorIP13StreamMessageE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80138d4:	b480      	push	{r7}
 80138d6:	b083      	sub	sp, #12
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80138dc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80138e0:	4618      	mov	r0, r3
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr

080138ec <_ZSt10destroy_atIP5FieldIJEEEvPT_>:
    destroy_at(_Tp* __location)
 80138ec:	b480      	push	{r7}
 80138ee:	b083      	sub	sp, #12
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
    }
 80138f4:	bf00      	nop
 80138f6:	370c      	adds	r7, #12
 80138f8:	46bd      	mov	sp, r7
 80138fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fe:	4770      	bx	lr

08013900 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	4618      	mov	r0, r3
 801390c:	f000 f8fc 	bl	8013b08 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>
 8013910:	4603      	mov	r3, r0
 8013912:	4618      	mov	r0, r3
 8013914:	f000 f8de 	bl	8013ad4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>
 8013918:	4603      	mov	r3, r0
 801391a:	4618      	mov	r0, r3
 801391c:	3708      	adds	r7, #8
 801391e:	46bd      	mov	sp, r7
 8013920:	bd80      	pop	{r7, pc}

08013922 <_ZNKSt6vectorIP5FieldIJEESaIS2_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8013922:	b480      	push	{r7}
 8013924:	b083      	sub	sp, #12
 8013926:	af00      	add	r7, sp, #0
 8013928:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	685a      	ldr	r2, [r3, #4]
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	1ad3      	subs	r3, r2, r3
 8013934:	109b      	asrs	r3, r3, #2
 8013936:	4618      	mov	r0, r3
 8013938:	370c      	adds	r7, #12
 801393a:	46bd      	mov	sp, r7
 801393c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013940:	4770      	bx	lr

08013942 <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j>:
      allocate(allocator_type& __a, size_type __n)
 8013942:	b580      	push	{r7, lr}
 8013944:	b084      	sub	sp, #16
 8013946:	af00      	add	r7, sp, #0
 8013948:	6078      	str	r0, [r7, #4]
 801394a:	6039      	str	r1, [r7, #0]
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	60fb      	str	r3, [r7, #12]
 8013950:	683b      	ldr	r3, [r7, #0]
 8013952:	60bb      	str	r3, [r7, #8]
	if (std::is_constant_evaluated())
 8013954:	f7ec fce4 	bl	8000320 <_ZSt21is_constant_evaluatedv>
 8013958:	4603      	mov	r3, r0
 801395a:	2b00      	cmp	r3, #0
 801395c:	d006      	beq.n	801396c <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x2a>
	  return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 801395e:	68bb      	ldr	r3, [r7, #8]
 8013960:	009b      	lsls	r3, r3, #2
 8013962:	4618      	mov	r0, r3
 8013964:	f00c fdf2 	bl	802054c <_Znwj>
 8013968:	4603      	mov	r3, r0
 801396a:	e006      	b.n	801397a <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8allocateERS3_j+0x38>
	return __allocator_base<_Tp>::allocate(__n, 0);
 801396c:	2200      	movs	r2, #0
 801396e:	68b9      	ldr	r1, [r7, #8]
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f000 f938 	bl	8013be6 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>
 8013976:	4603      	mov	r3, r0
 8013978:	bf00      	nop
      { return __a.allocate(__n); }
 801397a:	4618      	mov	r0, r3
 801397c:	3710      	adds	r7, #16
 801397e:	46bd      	mov	sp, r7
 8013980:	bd80      	pop	{r7, pc}

08013982 <_ZNSt6vectorIP5FieldIJEESaIS2_EE14_S_do_relocateEPS2_S5_S5_RS3_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8013982:	b580      	push	{r7, lr}
 8013984:	b084      	sub	sp, #16
 8013986:	af00      	add	r7, sp, #0
 8013988:	60f8      	str	r0, [r7, #12]
 801398a:	60b9      	str	r1, [r7, #8]
 801398c:	607a      	str	r2, [r7, #4]
 801398e:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8013990:	683b      	ldr	r3, [r7, #0]
 8013992:	687a      	ldr	r2, [r7, #4]
 8013994:	68b9      	ldr	r1, [r7, #8]
 8013996:	68f8      	ldr	r0, [r7, #12]
 8013998:	f000 f8c1 	bl	8013b1e <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>
 801399c:	4603      	mov	r3, r0
      }
 801399e:	4618      	mov	r0, r3
 80139a0:	3710      	adds	r7, #16
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <_ZNSt11_Tuple_implILj0EJRKtEEC1EOS2_>:
      _Tuple_impl(_Tuple_impl&& __in)
 80139a6:	b590      	push	{r4, r7, lr}
 80139a8:	b083      	sub	sp, #12
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
 80139ae:	6039      	str	r1, [r7, #0]
      : _Base(std::forward<_Head>(_M_head(__in))) { }
 80139b0:	687c      	ldr	r4, [r7, #4]
 80139b2:	6838      	ldr	r0, [r7, #0]
 80139b4:	f000 f8f2 	bl	8013b9c <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 80139b8:	4603      	mov	r3, r0
 80139ba:	4618      	mov	r0, r3
 80139bc:	f000 f8fb 	bl	8013bb6 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80139c0:	4603      	mov	r3, r0
 80139c2:	4619      	mov	r1, r3
 80139c4:	4620      	mov	r0, r4
 80139c6:	f7ff faf1 	bl	8012fac <_ZNSt10_Head_baseILj0ERKtLb0EEC1ES1_>
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	4618      	mov	r0, r3
 80139ce:	370c      	adds	r7, #12
 80139d0:	46bd      	mov	sp, r7
 80139d2:	bd90      	pop	{r4, r7, pc}

080139d4 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>:
      pair<_T1, _T2>::
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
 80139da:	60f8      	str	r0, [r7, #12]
 80139dc:	60b9      	str	r1, [r7, #8]
 80139de:	607a      	str	r2, [r7, #4]
 80139e0:	703b      	strb	r3, [r7, #0]
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80139e2:	68b8      	ldr	r0, [r7, #8]
 80139e4:	f000 f8f2 	bl	8013bcc <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>
 80139e8:	4603      	mov	r3, r0
 80139ea:	4618      	mov	r0, r3
 80139ec:	f000 f8e3 	bl	8013bb6 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 80139f0:	4603      	mov	r3, r0
        second(std::forward<_Args2>(std::get<_Indexes2>(__tuple2))...)
 80139f2:	881a      	ldrh	r2, [r3, #0]
 80139f4:	68fb      	ldr	r3, [r7, #12]
 80139f6:	801a      	strh	r2, [r3, #0]
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	2200      	movs	r2, #0
 80139fc:	605a      	str	r2, [r3, #4]
      { }
 80139fe:	68fb      	ldr	r3, [r7, #12]
 8013a00:	4618      	mov	r0, r3
 8013a02:	3710      	adds	r7, #16
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}

08013a08 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJEEESt21piecewise_construct_tSt5tupleIJDpT_EES7_IJDpT0_EE>:
      pair<_T1, _T2>::
 8013a08:	b5b0      	push	{r4, r5, r7, lr}
 8013a0a:	b086      	sub	sp, #24
 8013a0c:	af02      	add	r7, sp, #8
 8013a0e:	60f8      	str	r0, [r7, #12]
 8013a10:	7239      	strb	r1, [r7, #8]
 8013a12:	607a      	str	r2, [r7, #4]
 8013a14:	703b      	strb	r3, [r7, #0]
	     typename _Build_index_tuple<sizeof...(_Args2)>::__type())
 8013a16:	463a      	mov	r2, r7
 8013a18:	f88d 4000 	strb.w	r4, [sp]
 8013a1c:	462b      	mov	r3, r5
 8013a1e:	6879      	ldr	r1, [r7, #4]
 8013a20:	68f8      	ldr	r0, [r7, #12]
 8013a22:	f7ff ffd7 	bl	80139d4 <_ZNSt4pairIKtP6PacketEC1IJRS0_EJLj0EEJEJEEERSt5tupleIJDpT_EERS6_IJDpT1_EESt12_Index_tupleIJXspT0_EEESF_IJXspT2_EEE>
      { }
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	4618      	mov	r0, r3
 8013a2a:	3710      	adds	r7, #16
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	bdb0      	pop	{r4, r5, r7, pc}

08013a30 <_ZSt7forwardIRPSt13_Rb_tree_nodeISt4pairIKtP6PacketEEEOT_RNSt16remove_referenceIS9_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013a30:	b480      	push	{r7}
 8013a32:	b083      	sub	sp, #12
 8013a34:	af00      	add	r7, sp, #0
 8013a36:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	370c      	adds	r7, #12
 8013a3e:	46bd      	mov	sp, r7
 8013a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a44:	4770      	bx	lr

08013a46 <_ZNK9__gnu_cxx16__aligned_membufISt4pairIKtP6PacketEE7_M_addrEv>:
      _M_addr() const noexcept
 8013a46:	b480      	push	{r7}
 8013a48:	b083      	sub	sp, #12
 8013a4a:	af00      	add	r7, sp, #0
 8013a4c:	6078      	str	r0, [r7, #4]
      { return static_cast<const void*>(&_M_storage); }
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	4618      	mov	r0, r3
 8013a52:	370c      	adds	r7, #12
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr

08013a5c <_ZNK9__gnu_cxx13new_allocatorIP5TimerE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013a5c:	b480      	push	{r7}
 8013a5e:	b083      	sub	sp, #12
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013a64:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013a68:	4618      	mov	r0, r3
 8013a6a:	370c      	adds	r7, #12
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr

08013a74 <_ZNSt10_Head_baseILj0EO9PrecisionLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013a74:	b480      	push	{r7}
 8013a76:	b083      	sub	sp, #12
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	6078      	str	r0, [r7, #4]
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4618      	mov	r0, r3
 8013a82:	370c      	adds	r7, #12
 8013a84:	46bd      	mov	sp, r7
 8013a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8a:	4770      	bx	lr

08013a8c <_ZSt12__get_helperILj0EO9PrecisionJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b082      	sub	sp, #8
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f7ff feb0 	bl	80137fa <_ZNSt11_Tuple_implILj0EJO9PrecisionEE7_M_headERS2_>
 8013a9a:	4603      	mov	r3, r0
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}

08013aa4 <_ZNK9__gnu_cxx13new_allocatorIP6StreamE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013aa4:	b480      	push	{r7}
 8013aa6:	b083      	sub	sp, #12
 8013aa8:	af00      	add	r7, sp, #0
 8013aaa:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013aac:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	370c      	adds	r7, #12
 8013ab4:	46bd      	mov	sp, r7
 8013ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013aba:	4770      	bx	lr

08013abc <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8013abc:	b480      	push	{r7}
 8013abe:	b083      	sub	sp, #12
 8013ac0:	af00      	add	r7, sp, #0
 8013ac2:	6078      	str	r0, [r7, #4]
	return size_t(-1) / sizeof(value_type);
 8013ac4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 8013ac8:	4618      	mov	r0, r3
 8013aca:	370c      	adds	r7, #12
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr

08013ad4 <_ZNSt6vectorIP5FieldIJEESaIS2_EE11_S_max_sizeERKS3_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b084      	sub	sp, #16
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8013adc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013ae0:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8013ae2:	6878      	ldr	r0, [r7, #4]
 8013ae4:	f7ff ffea 	bl	8013abc <_ZNSt16allocator_traitsISaIP5FieldIJEEEE8max_sizeERKS3_>
 8013ae8:	4603      	mov	r3, r0
 8013aea:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8013aec:	f107 0208 	add.w	r2, r7, #8
 8013af0:	f107 030c 	add.w	r3, r7, #12
 8013af4:	4611      	mov	r1, r2
 8013af6:	4618      	mov	r0, r3
 8013af8:	f7ef f975 	bl	8002de6 <_ZSt3minIjERKT_S2_S2_>
 8013afc:	4603      	mov	r3, r0
 8013afe:	681b      	ldr	r3, [r3, #0]
      }
 8013b00:	4618      	mov	r0, r3
 8013b02:	3710      	adds	r7, #16
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}

08013b08 <_ZNKSt12_Vector_baseIP5FieldIJEESaIS2_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8013b08:	b480      	push	{r7}
 8013b0a:	b083      	sub	sp, #12
 8013b0c:	af00      	add	r7, sp, #0
 8013b0e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	4618      	mov	r0, r3
 8013b14:	370c      	adds	r7, #12
 8013b16:	46bd      	mov	sp, r7
 8013b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b1c:	4770      	bx	lr

08013b1e <_ZSt12__relocate_aIPP5FieldIJEES3_SaIS2_EET0_T_S6_S5_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8013b1e:	b5b0      	push	{r4, r5, r7, lr}
 8013b20:	b084      	sub	sp, #16
 8013b22:	af00      	add	r7, sp, #0
 8013b24:	60f8      	str	r0, [r7, #12]
 8013b26:	60b9      	str	r1, [r7, #8]
 8013b28:	607a      	str	r2, [r7, #4]
 8013b2a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f000 f879 	bl	8013c24 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b32:	4604      	mov	r4, r0
 8013b34:	68b8      	ldr	r0, [r7, #8]
 8013b36:	f000 f875 	bl	8013c24 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	6878      	ldr	r0, [r7, #4]
 8013b3e:	f000 f871 	bl	8013c24 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>
 8013b42:	4602      	mov	r2, r0
 8013b44:	683b      	ldr	r3, [r7, #0]
 8013b46:	4629      	mov	r1, r5
 8013b48:	4620      	mov	r0, r4
 8013b4a:	f000 f876 	bl	8013c3a <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>
 8013b4e:	4603      	mov	r3, r0
    }
 8013b50:	4618      	mov	r0, r3
 8013b52:	3710      	adds	r7, #16
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bdb0      	pop	{r4, r5, r7, pc}

08013b58 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013b64:	68f8      	ldr	r0, [r7, #12]
 8013b66:	f000 f887 	bl	8013c78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>
 8013b6a:	4602      	mov	r2, r0
 8013b6c:	68bb      	ldr	r3, [r7, #8]
 8013b6e:	4293      	cmp	r3, r2
 8013b70:	bf8c      	ite	hi
 8013b72:	2301      	movhi	r3, #1
 8013b74:	2300      	movls	r3, #0
 8013b76:	b2db      	uxtb	r3, r3
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d001      	beq.n	8013b80 <_ZN9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013b7c:	f00c fdad 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013b80:	68ba      	ldr	r2, [r7, #8]
 8013b82:	4613      	mov	r3, r2
 8013b84:	005b      	lsls	r3, r3, #1
 8013b86:	4413      	add	r3, r2
 8013b88:	00db      	lsls	r3, r3, #3
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f00c fcde 	bl	802054c <_Znwj>
 8013b90:	4603      	mov	r3, r0
 8013b92:	bf00      	nop
      }
 8013b94:	4618      	mov	r0, r3
 8013b96:	3710      	adds	r7, #16
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}

08013b9c <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8013b9c:	b580      	push	{r7, lr}
 8013b9e:	b082      	sub	sp, #8
 8013ba0:	af00      	add	r7, sp, #0
 8013ba2:	6078      	str	r0, [r7, #4]
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	f000 f874 	bl	8013c94 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>
 8013bac:	4603      	mov	r3, r0
 8013bae:	4618      	mov	r0, r3
 8013bb0:	3708      	adds	r7, #8
 8013bb2:	46bd      	mov	sp, r7
 8013bb4:	bd80      	pop	{r7, pc}

08013bb6 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8013bb6:	b480      	push	{r7}
 8013bb8:	b083      	sub	sp, #12
 8013bba:	af00      	add	r7, sp, #0
 8013bbc:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	370c      	adds	r7, #12
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bca:	4770      	bx	lr

08013bcc <_ZSt3getILj0EJRKtEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERS6_>:
    get(tuple<_Elements...>& __t) noexcept
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b082      	sub	sp, #8
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	4618      	mov	r0, r3
 8013bd8:	f000 f868 	bl	8013cac <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>
 8013bdc:	4603      	mov	r3, r0
 8013bde:	4618      	mov	r0, r3
 8013be0:	3708      	adds	r7, #8
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}

08013be6 <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8013be6:	b580      	push	{r7, lr}
 8013be8:	b084      	sub	sp, #16
 8013bea:	af00      	add	r7, sp, #0
 8013bec:	60f8      	str	r0, [r7, #12]
 8013bee:	60b9      	str	r1, [r7, #8]
 8013bf0:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8013bf2:	68f8      	ldr	r0, [r7, #12]
 8013bf4:	f000 f866 	bl	8013cc4 <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>
 8013bf8:	4602      	mov	r2, r0
 8013bfa:	68bb      	ldr	r3, [r7, #8]
 8013bfc:	4293      	cmp	r3, r2
 8013bfe:	bf8c      	ite	hi
 8013c00:	2301      	movhi	r3, #1
 8013c02:	2300      	movls	r3, #0
 8013c04:	b2db      	uxtb	r3, r3
 8013c06:	2b00      	cmp	r3, #0
 8013c08:	d001      	beq.n	8013c0e <_ZN9__gnu_cxx13new_allocatorIP5FieldIJEEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8013c0a:	f00c fd66 	bl	80206da <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8013c0e:	68bb      	ldr	r3, [r7, #8]
 8013c10:	009b      	lsls	r3, r3, #2
 8013c12:	4618      	mov	r0, r3
 8013c14:	f00c fc9a 	bl	802054c <_Znwj>
 8013c18:	4603      	mov	r3, r0
 8013c1a:	bf00      	nop
      }
 8013c1c:	4618      	mov	r0, r3
 8013c1e:	3710      	adds	r7, #16
 8013c20:	46bd      	mov	sp, r7
 8013c22:	bd80      	pop	{r7, pc}

08013c24 <_ZSt12__niter_baseIPP5FieldIJEEET_S4_>:
    __niter_base(_Iterator __it)
 8013c24:	b480      	push	{r7}
 8013c26:	b083      	sub	sp, #12
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
    { return __it; }
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	4618      	mov	r0, r3
 8013c30:	370c      	adds	r7, #12
 8013c32:	46bd      	mov	sp, r7
 8013c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c38:	4770      	bx	lr

08013c3a <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8013c3a:	b580      	push	{r7, lr}
 8013c3c:	b086      	sub	sp, #24
 8013c3e:	af00      	add	r7, sp, #0
 8013c40:	60f8      	str	r0, [r7, #12]
 8013c42:	60b9      	str	r1, [r7, #8]
 8013c44:	607a      	str	r2, [r7, #4]
 8013c46:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8013c48:	68ba      	ldr	r2, [r7, #8]
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	1ad3      	subs	r3, r2, r3
 8013c4e:	109b      	asrs	r3, r3, #2
 8013c50:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8013c52:	697b      	ldr	r3, [r7, #20]
 8013c54:	2b00      	cmp	r3, #0
 8013c56:	dd06      	ble.n	8013c66 <_ZSt14__relocate_a_1IP5FieldIJEES2_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS5_E4typeES7_S7_S7_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8013c58:	697b      	ldr	r3, [r7, #20]
 8013c5a:	009b      	lsls	r3, r3, #2
 8013c5c:	461a      	mov	r2, r3
 8013c5e:	68f9      	ldr	r1, [r7, #12]
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f00c fdad 	bl	80207c0 <memmove>
      return __result + __count;
 8013c66:	697b      	ldr	r3, [r7, #20]
 8013c68:	009b      	lsls	r3, r3, #2
 8013c6a:	687a      	ldr	r2, [r7, #4]
 8013c6c:	4413      	add	r3, r2
    }
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3718      	adds	r7, #24
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
	...

08013c78 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013c78:	b480      	push	{r7}
 8013c7a:	b083      	sub	sp, #12
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013c80:	4b03      	ldr	r3, [pc, #12]	; (8013c90 <_ZNK9__gnu_cxx13new_allocatorISt13_Rb_tree_nodeISt4pairIKtP6PacketEEE11_M_max_sizeEv+0x18>)
      }
 8013c82:	4618      	mov	r0, r3
 8013c84:	370c      	adds	r7, #12
 8013c86:	46bd      	mov	sp, r7
 8013c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c8c:	4770      	bx	lr
 8013c8e:	bf00      	nop
 8013c90:	05555555 	.word	0x05555555

08013c94 <_ZNSt10_Head_baseILj0ERKtLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8013c94:	b480      	push	{r7}
 8013c96:	b083      	sub	sp, #12
 8013c98:	af00      	add	r7, sp, #0
 8013c9a:	6078      	str	r0, [r7, #4]
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	370c      	adds	r7, #12
 8013ca4:	46bd      	mov	sp, r7
 8013ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013caa:	4770      	bx	lr

08013cac <_ZSt12__get_helperILj0ERKtJEERT0_RSt11_Tuple_implIXT_EJS2_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b082      	sub	sp, #8
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8013cb4:	6878      	ldr	r0, [r7, #4]
 8013cb6:	f7ff ff71 	bl	8013b9c <_ZNSt11_Tuple_implILj0EJRKtEE7_M_headERS2_>
 8013cba:	4603      	mov	r3, r0
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3708      	adds	r7, #8
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <_ZNK9__gnu_cxx13new_allocatorIP5FieldIJEEE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8013cc4:	b480      	push	{r7}
 8013cc6:	b083      	sub	sp, #12
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8013ccc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	370c      	adds	r7, #12
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <_ZN6StreamD1Ev>:
class Stream {
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
 8013ce4:	687b      	ldr	r3, [r7, #4]
 8013ce6:	3308      	adds	r3, #8
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7fc f9a5 	bl	8010038 <_ZNSt6vectorIP13StreamMessageSaIS1_EED1Ev>
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	4618      	mov	r0, r3
 8013cf2:	3708      	adds	r7, #8
 8013cf4:	46bd      	mov	sp, r7
 8013cf6:	bd80      	pop	{r7, pc}

08013cf8 <_ZN6PacketD1Ev>:
class Packet {
 8013cf8:	b580      	push	{r7, lr}
 8013cfa:	b082      	sub	sp, #8
 8013cfc:	af00      	add	r7, sp, #0
 8013cfe:	6078      	str	r0, [r7, #4]
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	3308      	adds	r3, #8
 8013d04:	4618      	mov	r0, r3
 8013d06:	f7fc ff26 	bl	8010b56 <_ZNSt6vectorIP5FieldIJEESaIS2_EED1Ev>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	4618      	mov	r0, r3
 8013d0e:	3708      	adds	r7, #8
 8013d10:	46bd      	mov	sp, r7
 8013d12:	bd80      	pop	{r7, pc}

08013d14 <_ZN5TimerD1Ev>:
class Timer {
 8013d14:	b580      	push	{r7, lr}
 8013d16:	b082      	sub	sp, #8
 8013d18:	af00      	add	r7, sp, #0
 8013d1a:	6078      	str	r0, [r7, #4]
 8013d1c:	687b      	ldr	r3, [r7, #4]
 8013d1e:	3308      	adds	r3, #8
 8013d20:	4618      	mov	r0, r3
 8013d22:	f7f9 fce3 	bl	800d6ec <_ZNSt8functionIFvvEED1Ev>
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3708      	adds	r7, #8
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b084      	sub	sp, #16
 8013d34:	af02      	add	r7, sp, #8
 8013d36:	6078      	str	r0, [r7, #4]
 8013d38:	6039      	str	r1, [r7, #0]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2b01      	cmp	r3, #1
 8013d3e:	f040 82ab 	bne.w	8014298 <_Z41__static_initialization_and_destruction_0ii+0x568>
 8013d42:	683b      	ldr	r3, [r7, #0]
 8013d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	f040 82a5 	bne.w	8014298 <_Z41__static_initialization_and_destruction_0ii+0x568>
InputCapture ic_PA1	(&htim2, TIM_CHANNEL_2, &PA1);
 8013d4e:	4bad      	ldr	r3, [pc, #692]	; (8014004 <_Z41__static_initialization_and_destruction_0ii+0x2d4>)
 8013d50:	2204      	movs	r2, #4
 8013d52:	49ad      	ldr	r1, [pc, #692]	; (8014008 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013d54:	48ad      	ldr	r0, [pc, #692]	; (801400c <_Z41__static_initialization_and_destruction_0ii+0x2dc>)
 8013d56:	f7f5 fb73 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PA5	(&htim2, TIM_CHANNEL_1, &PA5);
 8013d5a:	4bad      	ldr	r3, [pc, #692]	; (8014010 <_Z41__static_initialization_and_destruction_0ii+0x2e0>)
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	49aa      	ldr	r1, [pc, #680]	; (8014008 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013d60:	48ac      	ldr	r0, [pc, #688]	; (8014014 <_Z41__static_initialization_and_destruction_0ii+0x2e4>)
 8013d62:	f7f5 fb6d 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB0	(&htim3, TIM_CHANNEL_3, &PB0);
 8013d66:	4bac      	ldr	r3, [pc, #688]	; (8014018 <_Z41__static_initialization_and_destruction_0ii+0x2e8>)
 8013d68:	2208      	movs	r2, #8
 8013d6a:	49ac      	ldr	r1, [pc, #688]	; (801401c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013d6c:	48ac      	ldr	r0, [pc, #688]	; (8014020 <_Z41__static_initialization_and_destruction_0ii+0x2f0>)
 8013d6e:	f7f5 fb67 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB1	(&htim3, TIM_CHANNEL_4, &PB1);
 8013d72:	4bac      	ldr	r3, [pc, #688]	; (8014024 <_Z41__static_initialization_and_destruction_0ii+0x2f4>)
 8013d74:	220c      	movs	r2, #12
 8013d76:	49a9      	ldr	r1, [pc, #676]	; (801401c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013d78:	48ab      	ldr	r0, [pc, #684]	; (8014028 <_Z41__static_initialization_and_destruction_0ii+0x2f8>)
 8013d7a:	f7f5 fb61 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB4	(&htim3, TIM_CHANNEL_1, &PB4);
 8013d7e:	4bab      	ldr	r3, [pc, #684]	; (801402c <_Z41__static_initialization_and_destruction_0ii+0x2fc>)
 8013d80:	2200      	movs	r2, #0
 8013d82:	49a6      	ldr	r1, [pc, #664]	; (801401c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013d84:	48aa      	ldr	r0, [pc, #680]	; (8014030 <_Z41__static_initialization_and_destruction_0ii+0x300>)
 8013d86:	f7f5 fb5b 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB5	(&htim3, TIM_CHANNEL_2, &PB5);
 8013d8a:	4baa      	ldr	r3, [pc, #680]	; (8014034 <_Z41__static_initialization_and_destruction_0ii+0x304>)
 8013d8c:	2204      	movs	r2, #4
 8013d8e:	49a3      	ldr	r1, [pc, #652]	; (801401c <_Z41__static_initialization_and_destruction_0ii+0x2ec>)
 8013d90:	48a9      	ldr	r0, [pc, #676]	; (8014038 <_Z41__static_initialization_and_destruction_0ii+0x308>)
 8013d92:	f7f5 fb55 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB10(&htim2, TIM_CHANNEL_3, &PB10);
 8013d96:	4ba9      	ldr	r3, [pc, #676]	; (801403c <_Z41__static_initialization_and_destruction_0ii+0x30c>)
 8013d98:	2208      	movs	r2, #8
 8013d9a:	499b      	ldr	r1, [pc, #620]	; (8014008 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013d9c:	48a8      	ldr	r0, [pc, #672]	; (8014040 <_Z41__static_initialization_and_destruction_0ii+0x310>)
 8013d9e:	f7f5 fb4f 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PB11(&htim2, TIM_CHANNEL_4, &PB11);
 8013da2:	4ba8      	ldr	r3, [pc, #672]	; (8014044 <_Z41__static_initialization_and_destruction_0ii+0x314>)
 8013da4:	220c      	movs	r2, #12
 8013da6:	4998      	ldr	r1, [pc, #608]	; (8014008 <_Z41__static_initialization_and_destruction_0ii+0x2d8>)
 8013da8:	48a7      	ldr	r0, [pc, #668]	; (8014048 <_Z41__static_initialization_and_destruction_0ii+0x318>)
 8013daa:	f7f5 fb49 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PC6	(&htim8, TIM_CHANNEL_1, &PC6);
 8013dae:	4ba7      	ldr	r3, [pc, #668]	; (801404c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8013db0:	2200      	movs	r2, #0
 8013db2:	49a7      	ldr	r1, [pc, #668]	; (8014050 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013db4:	48a7      	ldr	r0, [pc, #668]	; (8014054 <_Z41__static_initialization_and_destruction_0ii+0x324>)
 8013db6:	f7f5 fb43 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD12(&htim4, TIM_CHANNEL_1, &PD12);
 8013dba:	4ba7      	ldr	r3, [pc, #668]	; (8014058 <_Z41__static_initialization_and_destruction_0ii+0x328>)
 8013dbc:	2200      	movs	r2, #0
 8013dbe:	49a7      	ldr	r1, [pc, #668]	; (801405c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013dc0:	48a7      	ldr	r0, [pc, #668]	; (8014060 <_Z41__static_initialization_and_destruction_0ii+0x330>)
 8013dc2:	f7f5 fb3d 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD13(&htim4, TIM_CHANNEL_2, &PD13);
 8013dc6:	4ba7      	ldr	r3, [pc, #668]	; (8014064 <_Z41__static_initialization_and_destruction_0ii+0x334>)
 8013dc8:	2204      	movs	r2, #4
 8013dca:	49a4      	ldr	r1, [pc, #656]	; (801405c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013dcc:	48a6      	ldr	r0, [pc, #664]	; (8014068 <_Z41__static_initialization_and_destruction_0ii+0x338>)
 8013dce:	f7f5 fb37 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD14(&htim4, TIM_CHANNEL_3, &PD14);
 8013dd2:	4ba6      	ldr	r3, [pc, #664]	; (801406c <_Z41__static_initialization_and_destruction_0ii+0x33c>)
 8013dd4:	2208      	movs	r2, #8
 8013dd6:	49a1      	ldr	r1, [pc, #644]	; (801405c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013dd8:	48a5      	ldr	r0, [pc, #660]	; (8014070 <_Z41__static_initialization_and_destruction_0ii+0x340>)
 8013dda:	f7f5 fb31 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PD15(&htim4, TIM_CHANNEL_4, &PD15);
 8013dde:	4ba5      	ldr	r3, [pc, #660]	; (8014074 <_Z41__static_initialization_and_destruction_0ii+0x344>)
 8013de0:	220c      	movs	r2, #12
 8013de2:	499e      	ldr	r1, [pc, #632]	; (801405c <_Z41__static_initialization_and_destruction_0ii+0x32c>)
 8013de4:	48a4      	ldr	r0, [pc, #656]	; (8014078 <_Z41__static_initialization_and_destruction_0ii+0x348>)
 8013de6:	f7f5 fb2b 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE9	(&htim1, TIM_CHANNEL_1,	&PE9);
 8013dea:	4ba4      	ldr	r3, [pc, #656]	; (801407c <_Z41__static_initialization_and_destruction_0ii+0x34c>)
 8013dec:	2200      	movs	r2, #0
 8013dee:	49a4      	ldr	r1, [pc, #656]	; (8014080 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013df0:	48a4      	ldr	r0, [pc, #656]	; (8014084 <_Z41__static_initialization_and_destruction_0ii+0x354>)
 8013df2:	f7f5 fb25 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE11(&htim1, TIM_CHANNEL_2,	&PE11);
 8013df6:	4ba4      	ldr	r3, [pc, #656]	; (8014088 <_Z41__static_initialization_and_destruction_0ii+0x358>)
 8013df8:	2204      	movs	r2, #4
 8013dfa:	49a1      	ldr	r1, [pc, #644]	; (8014080 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013dfc:	48a3      	ldr	r0, [pc, #652]	; (801408c <_Z41__static_initialization_and_destruction_0ii+0x35c>)
 8013dfe:	f7f5 fb1f 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE13(&htim1, TIM_CHANNEL_3, &PE13);
 8013e02:	4ba3      	ldr	r3, [pc, #652]	; (8014090 <_Z41__static_initialization_and_destruction_0ii+0x360>)
 8013e04:	2208      	movs	r2, #8
 8013e06:	499e      	ldr	r1, [pc, #632]	; (8014080 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013e08:	48a2      	ldr	r0, [pc, #648]	; (8014094 <_Z41__static_initialization_and_destruction_0ii+0x364>)
 8013e0a:	f7f5 fb19 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
InputCapture ic_PE14(&htim1, TIM_CHANNEL_4, &PE14);
 8013e0e:	4ba2      	ldr	r3, [pc, #648]	; (8014098 <_Z41__static_initialization_and_destruction_0ii+0x368>)
 8013e10:	220c      	movs	r2, #12
 8013e12:	499b      	ldr	r1, [pc, #620]	; (8014080 <_Z41__static_initialization_and_destruction_0ii+0x350>)
 8013e14:	48a1      	ldr	r0, [pc, #644]	; (801409c <_Z41__static_initialization_and_destruction_0ii+0x36c>)
 8013e16:	f7f5 fb13 	bl	8009440 <_ZN12InputCaptureC1EP17TIM_HandleTypeDefmP3Pin>
DigitalIn digital_in_PC1(&PC1);
 8013e1a:	49a1      	ldr	r1, [pc, #644]	; (80140a0 <_Z41__static_initialization_and_destruction_0ii+0x370>)
 8013e1c:	48a1      	ldr	r0, [pc, #644]	; (80140a4 <_Z41__static_initialization_and_destruction_0ii+0x374>)
 8013e1e:	f7f2 fb9b 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC2(&PC2);
 8013e22:	49a1      	ldr	r1, [pc, #644]	; (80140a8 <_Z41__static_initialization_and_destruction_0ii+0x378>)
 8013e24:	48a1      	ldr	r0, [pc, #644]	; (80140ac <_Z41__static_initialization_and_destruction_0ii+0x37c>)
 8013e26:	f7f2 fb97 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
DigitalIn digital_in_PC3(&PC3);
 8013e2a:	49a1      	ldr	r1, [pc, #644]	; (80140b0 <_Z41__static_initialization_and_destruction_0ii+0x380>)
 8013e2c:	48a1      	ldr	r0, [pc, #644]	; (80140b4 <_Z41__static_initialization_and_destruction_0ii+0x384>)
 8013e2e:	f7f2 fb93 	bl	8006558 <_ZN9DigitalInC1EP3Pin>
AnalogIn analog_in_PA6(&hadc1, &htim6, &PA6);
 8013e32:	4ba1      	ldr	r3, [pc, #644]	; (80140b8 <_Z41__static_initialization_and_destruction_0ii+0x388>)
 8013e34:	4aa1      	ldr	r2, [pc, #644]	; (80140bc <_Z41__static_initialization_and_destruction_0ii+0x38c>)
 8013e36:	49a2      	ldr	r1, [pc, #648]	; (80140c0 <_Z41__static_initialization_and_destruction_0ii+0x390>)
 8013e38:	48a2      	ldr	r0, [pc, #648]	; (80140c4 <_Z41__static_initialization_and_destruction_0ii+0x394>)
 8013e3a:	f7ec fb57 	bl	80004ec <_ZN8AnalogInC1EP17ADC_HandleTypeDefP17TIM_HandleTypeDefP3Pin>
AnalogOut analog_out_PF1 (3.3, &htim23, TIM_CHANNEL_2, &PF1);
 8013e3e:	4ba2      	ldr	r3, [pc, #648]	; (80140c8 <_Z41__static_initialization_and_destruction_0ii+0x398>)
 8013e40:	2204      	movs	r2, #4
 8013e42:	49a2      	ldr	r1, [pc, #648]	; (80140cc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013e44:	ed9f 0aa2 	vldr	s0, [pc, #648]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013e48:	48a2      	ldr	r0, [pc, #648]	; (80140d4 <_Z41__static_initialization_and_destruction_0ii+0x3a4>)
 8013e4a:	f7ef f9a1 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF0 (3.3, &htim23, TIM_CHANNEL_1, &PF0);
 8013e4e:	4ba2      	ldr	r3, [pc, #648]	; (80140d8 <_Z41__static_initialization_and_destruction_0ii+0x3a8>)
 8013e50:	2200      	movs	r2, #0
 8013e52:	499e      	ldr	r1, [pc, #632]	; (80140cc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013e54:	ed9f 0a9e 	vldr	s0, [pc, #632]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013e58:	48a0      	ldr	r0, [pc, #640]	; (80140dc <_Z41__static_initialization_and_destruction_0ii+0x3ac>)
 8013e5a:	f7ef f999 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA0 (3.3, &htim5, 	TIM_CHANNEL_1, &PA0);
 8013e5e:	4ba0      	ldr	r3, [pc, #640]	; (80140e0 <_Z41__static_initialization_and_destruction_0ii+0x3b0>)
 8013e60:	2200      	movs	r2, #0
 8013e62:	49a0      	ldr	r1, [pc, #640]	; (80140e4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013e64:	ed9f 0a9a 	vldr	s0, [pc, #616]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013e68:	489f      	ldr	r0, [pc, #636]	; (80140e8 <_Z41__static_initialization_and_destruction_0ii+0x3b8>)
 8013e6a:	f7ef f991 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA2 (3.3, &htim5, 	TIM_CHANNEL_3, &PA2);
 8013e6e:	4b9f      	ldr	r3, [pc, #636]	; (80140ec <_Z41__static_initialization_and_destruction_0ii+0x3bc>)
 8013e70:	2208      	movs	r2, #8
 8013e72:	499c      	ldr	r1, [pc, #624]	; (80140e4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013e74:	ed9f 0a96 	vldr	s0, [pc, #600]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013e78:	489d      	ldr	r0, [pc, #628]	; (80140f0 <_Z41__static_initialization_and_destruction_0ii+0x3c0>)
 8013e7a:	f7ef f989 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PA3 (3.3, &htim5, 	TIM_CHANNEL_4, &PA3);
 8013e7e:	4b9d      	ldr	r3, [pc, #628]	; (80140f4 <_Z41__static_initialization_and_destruction_0ii+0x3c4>)
 8013e80:	220c      	movs	r2, #12
 8013e82:	4998      	ldr	r1, [pc, #608]	; (80140e4 <_Z41__static_initialization_and_destruction_0ii+0x3b4>)
 8013e84:	ed9f 0a92 	vldr	s0, [pc, #584]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013e88:	489b      	ldr	r0, [pc, #620]	; (80140f8 <_Z41__static_initialization_and_destruction_0ii+0x3c8>)
 8013e8a:	f7ef f981 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC7 (3.3, &htim8, 	TIM_CHANNEL_2, &PC7);
 8013e8e:	4b9b      	ldr	r3, [pc, #620]	; (80140fc <_Z41__static_initialization_and_destruction_0ii+0x3cc>)
 8013e90:	2204      	movs	r2, #4
 8013e92:	496f      	ldr	r1, [pc, #444]	; (8014050 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013e94:	ed9f 0a8e 	vldr	s0, [pc, #568]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013e98:	4899      	ldr	r0, [pc, #612]	; (8014100 <_Z41__static_initialization_and_destruction_0ii+0x3d0>)
 8013e9a:	f7ef f979 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC6 (3.3, &htim8, 	TIM_CHANNEL_1, &PC6);
 8013e9e:	4b6b      	ldr	r3, [pc, #428]	; (801404c <_Z41__static_initialization_and_destruction_0ii+0x31c>)
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	496b      	ldr	r1, [pc, #428]	; (8014050 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013ea4:	ed9f 0a8a 	vldr	s0, [pc, #552]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013ea8:	4896      	ldr	r0, [pc, #600]	; (8014104 <_Z41__static_initialization_and_destruction_0ii+0x3d4>)
 8013eaa:	f7ef f971 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC8 (3.3, &htim8, 	TIM_CHANNEL_3, &PC8);
 8013eae:	4b96      	ldr	r3, [pc, #600]	; (8014108 <_Z41__static_initialization_and_destruction_0ii+0x3d8>)
 8013eb0:	2208      	movs	r2, #8
 8013eb2:	4967      	ldr	r1, [pc, #412]	; (8014050 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013eb4:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013eb8:	4894      	ldr	r0, [pc, #592]	; (801410c <_Z41__static_initialization_and_destruction_0ii+0x3dc>)
 8013eba:	f7ef f969 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PC9 (3.3, &htim8, 	TIM_CHANNEL_4, &PC9);
 8013ebe:	4b94      	ldr	r3, [pc, #592]	; (8014110 <_Z41__static_initialization_and_destruction_0ii+0x3e0>)
 8013ec0:	220c      	movs	r2, #12
 8013ec2:	4963      	ldr	r1, [pc, #396]	; (8014050 <_Z41__static_initialization_and_destruction_0ii+0x320>)
 8013ec4:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013ec8:	4892      	ldr	r0, [pc, #584]	; (8014114 <_Z41__static_initialization_and_destruction_0ii+0x3e4>)
 8013eca:	f7ef f961 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF2 (3.3, &htim23, TIM_CHANNEL_3, &PF2);
 8013ece:	4b92      	ldr	r3, [pc, #584]	; (8014118 <_Z41__static_initialization_and_destruction_0ii+0x3e8>)
 8013ed0:	2208      	movs	r2, #8
 8013ed2:	497e      	ldr	r1, [pc, #504]	; (80140cc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013ed4:	ed9f 0a7e 	vldr	s0, [pc, #504]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013ed8:	4890      	ldr	r0, [pc, #576]	; (801411c <_Z41__static_initialization_and_destruction_0ii+0x3ec>)
 8013eda:	f7ef f959 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF13(3.3, &htim24, TIM_CHANNEL_3, &PF13);
 8013ede:	4b90      	ldr	r3, [pc, #576]	; (8014120 <_Z41__static_initialization_and_destruction_0ii+0x3f0>)
 8013ee0:	2208      	movs	r2, #8
 8013ee2:	4990      	ldr	r1, [pc, #576]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013ee4:	ed9f 0a7a 	vldr	s0, [pc, #488]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013ee8:	488f      	ldr	r0, [pc, #572]	; (8014128 <_Z41__static_initialization_and_destruction_0ii+0x3f8>)
 8013eea:	f7ef f951 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF12(3.3, &htim24, TIM_CHANNEL_2, &PF12);
 8013eee:	4b8f      	ldr	r3, [pc, #572]	; (801412c <_Z41__static_initialization_and_destruction_0ii+0x3fc>)
 8013ef0:	2204      	movs	r2, #4
 8013ef2:	498c      	ldr	r1, [pc, #560]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013ef4:	ed9f 0a76 	vldr	s0, [pc, #472]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013ef8:	488d      	ldr	r0, [pc, #564]	; (8014130 <_Z41__static_initialization_and_destruction_0ii+0x400>)
 8013efa:	f7ef f949 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PB14(3.3, &htim12, TIM_CHANNEL_1, &PB14);
 8013efe:	4b8d      	ldr	r3, [pc, #564]	; (8014134 <_Z41__static_initialization_and_destruction_0ii+0x404>)
 8013f00:	2200      	movs	r2, #0
 8013f02:	498d      	ldr	r1, [pc, #564]	; (8014138 <_Z41__static_initialization_and_destruction_0ii+0x408>)
 8013f04:	ed9f 0a72 	vldr	s0, [pc, #456]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f08:	488c      	ldr	r0, [pc, #560]	; (801413c <_Z41__static_initialization_and_destruction_0ii+0x40c>)
 8013f0a:	f7ef f941 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF14(3.3, &htim24, TIM_CHANNEL_4, &PF14);
 8013f0e:	4b8c      	ldr	r3, [pc, #560]	; (8014140 <_Z41__static_initialization_and_destruction_0ii+0x410>)
 8013f10:	220c      	movs	r2, #12
 8013f12:	4984      	ldr	r1, [pc, #528]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013f14:	ed9f 0a6e 	vldr	s0, [pc, #440]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f18:	488a      	ldr	r0, [pc, #552]	; (8014144 <_Z41__static_initialization_and_destruction_0ii+0x414>)
 8013f1a:	f7ef f939 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF3 (3.3, &htim23, TIM_CHANNEL_4, &PF3);
 8013f1e:	4b8a      	ldr	r3, [pc, #552]	; (8014148 <_Z41__static_initialization_and_destruction_0ii+0x418>)
 8013f20:	220c      	movs	r2, #12
 8013f22:	496a      	ldr	r1, [pc, #424]	; (80140cc <_Z41__static_initialization_and_destruction_0ii+0x39c>)
 8013f24:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f28:	4888      	ldr	r0, [pc, #544]	; (801414c <_Z41__static_initialization_and_destruction_0ii+0x41c>)
 8013f2a:	f7ef f931 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
AnalogOut analog_out_PF11(3.3, &htim24, TIM_CHANNEL_1, &PF11);
 8013f2e:	4b88      	ldr	r3, [pc, #544]	; (8014150 <_Z41__static_initialization_and_destruction_0ii+0x420>)
 8013f30:	2200      	movs	r2, #0
 8013f32:	497c      	ldr	r1, [pc, #496]	; (8014124 <_Z41__static_initialization_and_destruction_0ii+0x3f4>)
 8013f34:	ed9f 0a66 	vldr	s0, [pc, #408]	; 80140d0 <_Z41__static_initialization_and_destruction_0ii+0x3a0>
 8013f38:	4886      	ldr	r0, [pc, #536]	; (8014154 <_Z41__static_initialization_and_destruction_0ii+0x424>)
 8013f3a:	f7ef f929 	bl	8003190 <_ZN9AnalogOutC1EfP17TIM_HandleTypeDefmP3Pin>
DigitalOut digital_out_PC10(&PC10);
 8013f3e:	4986      	ldr	r1, [pc, #536]	; (8014158 <_Z41__static_initialization_and_destruction_0ii+0x428>)
 8013f40:	4886      	ldr	r0, [pc, #536]	; (801415c <_Z41__static_initialization_and_destruction_0ii+0x42c>)
 8013f42:	f7f3 feb7 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC11(&PC11);
 8013f46:	4986      	ldr	r1, [pc, #536]	; (8014160 <_Z41__static_initialization_and_destruction_0ii+0x430>)
 8013f48:	4886      	ldr	r0, [pc, #536]	; (8014164 <_Z41__static_initialization_and_destruction_0ii+0x434>)
 8013f4a:	f7f3 feb3 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC12(&PC12);
 8013f4e:	4986      	ldr	r1, [pc, #536]	; (8014168 <_Z41__static_initialization_and_destruction_0ii+0x438>)
 8013f50:	4886      	ldr	r0, [pc, #536]	; (801416c <_Z41__static_initialization_and_destruction_0ii+0x43c>)
 8013f52:	f7f3 feaf 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC13(&PC13);
 8013f56:	4986      	ldr	r1, [pc, #536]	; (8014170 <_Z41__static_initialization_and_destruction_0ii+0x440>)
 8013f58:	4886      	ldr	r0, [pc, #536]	; (8014174 <_Z41__static_initialization_and_destruction_0ii+0x444>)
 8013f5a:	f7f3 feab 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC14(&PC14);
 8013f5e:	4986      	ldr	r1, [pc, #536]	; (8014178 <_Z41__static_initialization_and_destruction_0ii+0x448>)
 8013f60:	4886      	ldr	r0, [pc, #536]	; (801417c <_Z41__static_initialization_and_destruction_0ii+0x44c>)
 8013f62:	f7f3 fea7 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PC15(&PC15);
 8013f66:	4986      	ldr	r1, [pc, #536]	; (8014180 <_Z41__static_initialization_and_destruction_0ii+0x450>)
 8013f68:	4886      	ldr	r0, [pc, #536]	; (8014184 <_Z41__static_initialization_and_destruction_0ii+0x454>)
 8013f6a:	f7f3 fea3 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF6 (&PF6);
 8013f6e:	4986      	ldr	r1, [pc, #536]	; (8014188 <_Z41__static_initialization_and_destruction_0ii+0x458>)
 8013f70:	4886      	ldr	r0, [pc, #536]	; (801418c <_Z41__static_initialization_and_destruction_0ii+0x45c>)
 8013f72:	f7f3 fe9f 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PF7 (&PF7);
 8013f76:	4986      	ldr	r1, [pc, #536]	; (8014190 <_Z41__static_initialization_and_destruction_0ii+0x460>)
 8013f78:	4886      	ldr	r0, [pc, #536]	; (8014194 <_Z41__static_initialization_and_destruction_0ii+0x464>)
 8013f7a:	f7f3 fe9b 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB7 (&PB7);
 8013f7e:	4986      	ldr	r1, [pc, #536]	; (8014198 <_Z41__static_initialization_and_destruction_0ii+0x468>)
 8013f80:	4886      	ldr	r0, [pc, #536]	; (801419c <_Z41__static_initialization_and_destruction_0ii+0x46c>)
 8013f82:	f7f3 fe97 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PB9 (&PB9);
 8013f86:	4986      	ldr	r1, [pc, #536]	; (80141a0 <_Z41__static_initialization_and_destruction_0ii+0x470>)
 8013f88:	4886      	ldr	r0, [pc, #536]	; (80141a4 <_Z41__static_initialization_and_destruction_0ii+0x474>)
 8013f8a:	f7f3 fe93 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
DigitalOut digital_out_PD8 (&PD8);
 8013f8e:	4986      	ldr	r1, [pc, #536]	; (80141a8 <_Z41__static_initialization_and_destruction_0ii+0x478>)
 8013f90:	4886      	ldr	r0, [pc, #536]	; (80141ac <_Z41__static_initialization_and_destruction_0ii+0x47c>)
 8013f92:	f7f3 fe8f 	bl	8007cb4 <_ZN10DigitalOutC1EP3Pin>
Timer timer_7(&htim7);
 8013f96:	4986      	ldr	r1, [pc, #536]	; (80141b0 <_Z41__static_initialization_and_destruction_0ii+0x480>)
 8013f98:	4886      	ldr	r0, [pc, #536]	; (80141b4 <_Z41__static_initialization_and_destruction_0ii+0x484>)
 8013f9a:	f7f9 fbb5 	bl	800d708 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_13(&htim13);
 8013f9e:	4986      	ldr	r1, [pc, #536]	; (80141b8 <_Z41__static_initialization_and_destruction_0ii+0x488>)
 8013fa0:	4886      	ldr	r0, [pc, #536]	; (80141bc <_Z41__static_initialization_and_destruction_0ii+0x48c>)
 8013fa2:	f7f9 fbb1 	bl	800d708 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_14(&htim14);
 8013fa6:	4986      	ldr	r1, [pc, #536]	; (80141c0 <_Z41__static_initialization_and_destruction_0ii+0x490>)
 8013fa8:	4886      	ldr	r0, [pc, #536]	; (80141c4 <_Z41__static_initialization_and_destruction_0ii+0x494>)
 8013faa:	f7f9 fbad 	bl	800d708 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_15(&htim15);
 8013fae:	4986      	ldr	r1, [pc, #536]	; (80141c8 <_Z41__static_initialization_and_destruction_0ii+0x498>)
 8013fb0:	4886      	ldr	r0, [pc, #536]	; (80141cc <_Z41__static_initialization_and_destruction_0ii+0x49c>)
 8013fb2:	f7f9 fba9 	bl	800d708 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_16(&htim16);
 8013fb6:	4986      	ldr	r1, [pc, #536]	; (80141d0 <_Z41__static_initialization_and_destruction_0ii+0x4a0>)
 8013fb8:	4886      	ldr	r0, [pc, #536]	; (80141d4 <_Z41__static_initialization_and_destruction_0ii+0x4a4>)
 8013fba:	f7f9 fba5 	bl	800d708 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Timer timer_17(&htim17);
 8013fbe:	4986      	ldr	r1, [pc, #536]	; (80141d8 <_Z41__static_initialization_and_destruction_0ii+0x4a8>)
 8013fc0:	4886      	ldr	r0, [pc, #536]	; (80141dc <_Z41__static_initialization_and_destruction_0ii+0x4ac>)
 8013fc2:	f7f9 fba1 	bl	800d708 <_ZN5TimerC1EP17TIM_HandleTypeDef>
Can main_can(&hfdcan1);
 8013fc6:	4986      	ldr	r1, [pc, #536]	; (80141e0 <_Z41__static_initialization_and_destruction_0ii+0x4b0>)
 8013fc8:	4886      	ldr	r0, [pc, #536]	; (80141e4 <_Z41__static_initialization_and_destruction_0ii+0x4b4>)
 8013fca:	f7f0 fddd 	bl	8004b88 <_ZN3CanC1EP19FDCAN_HandleTypeDef>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 8013fce:	4b86      	ldr	r3, [pc, #536]	; (80141e8 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 8013fd0:	4a86      	ldr	r2, [pc, #536]	; (80141ec <_Z41__static_initialization_and_destruction_0ii+0x4bc>)
 8013fd2:	2151      	movs	r1, #81	; 0x51
 8013fd4:	4886      	ldr	r0, [pc, #536]	; (80141f0 <_Z41__static_initialization_and_destruction_0ii+0x4c0>)
 8013fd6:	f7fc f92b 	bl	8010230 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 8013fda:	4b83      	ldr	r3, [pc, #524]	; (80141e8 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 8013fdc:	4a85      	ldr	r2, [pc, #532]	; (80141f4 <_Z41__static_initialization_and_destruction_0ii+0x4c4>)
 8013fde:	2152      	movs	r1, #82	; 0x52
 8013fe0:	4885      	ldr	r0, [pc, #532]	; (80141f8 <_Z41__static_initialization_and_destruction_0ii+0x4c8>)
 8013fe2:	f7fc f925 	bl	8010230 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 8013fe6:	4b80      	ldr	r3, [pc, #512]	; (80141e8 <_Z41__static_initialization_and_destruction_0ii+0x4b8>)
 8013fe8:	4a84      	ldr	r2, [pc, #528]	; (80141fc <_Z41__static_initialization_and_destruction_0ii+0x4cc>)
 8013fea:	2153      	movs	r1, #83	; 0x53
 8013fec:	4884      	ldr	r0, [pc, #528]	; (8014200 <_Z41__static_initialization_and_destruction_0ii+0x4d0>)
 8013fee:	f7fc f91f 	bl	8010230 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 8013ff2:	4b84      	ldr	r3, [pc, #528]	; (8014204 <_Z41__static_initialization_and_destruction_0ii+0x4d4>)
 8013ff4:	9300      	str	r3, [sp, #0]
 8013ff6:	4b84      	ldr	r3, [pc, #528]	; (8014208 <_Z41__static_initialization_and_destruction_0ii+0x4d8>)
 8013ff8:	4a84      	ldr	r2, [pc, #528]	; (801420c <_Z41__static_initialization_and_destruction_0ii+0x4dc>)
 8013ffa:	2154      	movs	r1, #84	; 0x54
 8013ffc:	4884      	ldr	r0, [pc, #528]	; (8014210 <_Z41__static_initialization_and_destruction_0ii+0x4e0>)
 8013ffe:	f7fc f941 	bl	8010284 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
 8014002:	e107      	b.n	8014214 <_Z41__static_initialization_and_destruction_0ii+0x4e4>
 8014004:	240001d8 	.word	0x240001d8
 8014008:	24000e88 	.word	0x24000e88
 801400c:	240004d0 	.word	0x240004d0
 8014010:	240001f8 	.word	0x240001f8
 8014014:	240004f8 	.word	0x240004f8
 8014018:	24000250 	.word	0x24000250
 801401c:	24000ed4 	.word	0x24000ed4
 8014020:	24000520 	.word	0x24000520
 8014024:	24000258 	.word	0x24000258
 8014028:	24000548 	.word	0x24000548
 801402c:	24000270 	.word	0x24000270
 8014030:	24000570 	.word	0x24000570
 8014034:	24000278 	.word	0x24000278
 8014038:	24000598 	.word	0x24000598
 801403c:	240002a0 	.word	0x240002a0
 8014040:	240005c0 	.word	0x240005c0
 8014044:	240002a8 	.word	0x240002a8
 8014048:	240005e8 	.word	0x240005e8
 801404c:	24000300 	.word	0x24000300
 8014050:	24001050 	.word	0x24001050
 8014054:	24000610 	.word	0x24000610
 8014058:	240003b0 	.word	0x240003b0
 801405c:	24000f20 	.word	0x24000f20
 8014060:	24000638 	.word	0x24000638
 8014064:	240003b8 	.word	0x240003b8
 8014068:	24000660 	.word	0x24000660
 801406c:	240003c0 	.word	0x240003c0
 8014070:	24000688 	.word	0x24000688
 8014074:	240003c8 	.word	0x240003c8
 8014078:	240006b0 	.word	0x240006b0
 801407c:	24000418 	.word	0x24000418
 8014080:	24000e3c 	.word	0x24000e3c
 8014084:	240006d8 	.word	0x240006d8
 8014088:	24000428 	.word	0x24000428
 801408c:	24000700 	.word	0x24000700
 8014090:	24000438 	.word	0x24000438
 8014094:	24000728 	.word	0x24000728
 8014098:	24000440 	.word	0x24000440
 801409c:	24000750 	.word	0x24000750
 80140a0:	240002d8 	.word	0x240002d8
 80140a4:	24000778 	.word	0x24000778
 80140a8:	240002e0 	.word	0x240002e0
 80140ac:	24000784 	.word	0x24000784
 80140b0:	240002e8 	.word	0x240002e8
 80140b4:	24000790 	.word	0x24000790
 80140b8:	24000200 	.word	0x24000200
 80140bc:	24000fb8 	.word	0x24000fb8
 80140c0:	24000cb4 	.word	0x24000cb4
 80140c4:	2400079c 	.word	0x2400079c
 80140c8:	24000458 	.word	0x24000458
 80140cc:	24001264 	.word	0x24001264
 80140d0:	40533333 	.word	0x40533333
 80140d4:	240007b4 	.word	0x240007b4
 80140d8:	24000450 	.word	0x24000450
 80140dc:	240007cc 	.word	0x240007cc
 80140e0:	240001d0 	.word	0x240001d0
 80140e4:	24000f6c 	.word	0x24000f6c
 80140e8:	240007e4 	.word	0x240007e4
 80140ec:	240001e0 	.word	0x240001e0
 80140f0:	240007fc 	.word	0x240007fc
 80140f4:	240001e8 	.word	0x240001e8
 80140f8:	24000814 	.word	0x24000814
 80140fc:	24000308 	.word	0x24000308
 8014100:	2400082c 	.word	0x2400082c
 8014104:	24000844 	.word	0x24000844
 8014108:	24000310 	.word	0x24000310
 801410c:	2400085c 	.word	0x2400085c
 8014110:	24000318 	.word	0x24000318
 8014114:	24000874 	.word	0x24000874
 8014118:	24000460 	.word	0x24000460
 801411c:	2400088c 	.word	0x2400088c
 8014120:	240004b8 	.word	0x240004b8
 8014124:	240012b0 	.word	0x240012b0
 8014128:	240008a4 	.word	0x240008a4
 801412c:	240004b0 	.word	0x240004b0
 8014130:	240008bc 	.word	0x240008bc
 8014134:	240002c0 	.word	0x240002c0
 8014138:	2400109c 	.word	0x2400109c
 801413c:	240008d4 	.word	0x240008d4
 8014140:	240004c0 	.word	0x240004c0
 8014144:	240008ec 	.word	0x240008ec
 8014148:	24000468 	.word	0x24000468
 801414c:	24000904 	.word	0x24000904
 8014150:	240004a8 	.word	0x240004a8
 8014154:	2400091c 	.word	0x2400091c
 8014158:	24000320 	.word	0x24000320
 801415c:	24000934 	.word	0x24000934
 8014160:	24000328 	.word	0x24000328
 8014164:	2400093c 	.word	0x2400093c
 8014168:	24000330 	.word	0x24000330
 801416c:	24000944 	.word	0x24000944
 8014170:	24000338 	.word	0x24000338
 8014174:	2400094c 	.word	0x2400094c
 8014178:	24000340 	.word	0x24000340
 801417c:	24000954 	.word	0x24000954
 8014180:	24000348 	.word	0x24000348
 8014184:	2400095c 	.word	0x2400095c
 8014188:	24000480 	.word	0x24000480
 801418c:	24000964 	.word	0x24000964
 8014190:	24000488 	.word	0x24000488
 8014194:	2400096c 	.word	0x2400096c
 8014198:	24000288 	.word	0x24000288
 801419c:	24000974 	.word	0x24000974
 80141a0:	24000298 	.word	0x24000298
 80141a4:	2400097c 	.word	0x2400097c
 80141a8:	24000390 	.word	0x24000390
 80141ac:	24000984 	.word	0x24000984
 80141b0:	24001004 	.word	0x24001004
 80141b4:	2400098c 	.word	0x2400098c
 80141b8:	240010e8 	.word	0x240010e8
 80141bc:	240009ac 	.word	0x240009ac
 80141c0:	24001134 	.word	0x24001134
 80141c4:	240009cc 	.word	0x240009cc
 80141c8:	24001180 	.word	0x24001180
 80141cc:	240009ec 	.word	0x240009ec
 80141d0:	240011cc 	.word	0x240011cc
 80141d4:	24000a0c 	.word	0x24000a0c
 80141d8:	24001218 	.word	0x24001218
 80141dc:	24000a2c 	.word	0x24000a2c
 80141e0:	24000d9c 	.word	0x24000d9c
 80141e4:	24000a4c 	.word	0x24000a4c
 80141e8:	24000b1c 	.word	0x24000b1c
 80141ec:	0800e345 	.word	0x0800e345
 80141f0:	24000b2c 	.word	0x24000b2c
 80141f4:	0800e27d 	.word	0x0800e27d
 80141f8:	24000b44 	.word	0x24000b44
 80141fc:	0800e2e1 	.word	0x0800e2e1
 8014200:	24000b5c 	.word	0x24000b5c
 8014204:	24000b26 	.word	0x24000b26
 8014208:	24000b24 	.word	0x24000b24
 801420c:	0800e3bd 	.word	0x0800e3bd
 8014210:	24000b74 	.word	0x24000b74
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 8014214:	4b44      	ldr	r3, [pc, #272]	; (8014328 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8014216:	9300      	str	r3, [sp, #0]
 8014218:	4b44      	ldr	r3, [pc, #272]	; (801432c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 801421a:	4a45      	ldr	r2, [pc, #276]	; (8014330 <_Z41__static_initialization_and_destruction_0ii+0x600>)
 801421c:	2155      	movs	r1, #85	; 0x55
 801421e:	4845      	ldr	r0, [pc, #276]	; (8014334 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 8014220:	f7fc f830 	bl	8010284 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 8014224:	4b40      	ldr	r3, [pc, #256]	; (8014328 <_Z41__static_initialization_and_destruction_0ii+0x5f8>)
 8014226:	9300      	str	r3, [sp, #0]
 8014228:	4b40      	ldr	r3, [pc, #256]	; (801432c <_Z41__static_initialization_and_destruction_0ii+0x5fc>)
 801422a:	4a43      	ldr	r2, [pc, #268]	; (8014338 <_Z41__static_initialization_and_destruction_0ii+0x608>)
 801422c:	2156      	movs	r1, #86	; 0x56
 801422e:	4843      	ldr	r0, [pc, #268]	; (801433c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 8014230:	f7fc f828 	bl	8010284 <_ZN6PacketC1IJhtEEEtPFvvEDpPT_>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 8014234:	4b42      	ldr	r3, [pc, #264]	; (8014340 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8014236:	9300      	str	r3, [sp, #0]
 8014238:	4b42      	ldr	r3, [pc, #264]	; (8014344 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 801423a:	4a43      	ldr	r2, [pc, #268]	; (8014348 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 801423c:	2158      	movs	r1, #88	; 0x58
 801423e:	4843      	ldr	r0, [pc, #268]	; (801434c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 8014240:	f7fc f84c 	bl	80102dc <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 8014244:	4b3e      	ldr	r3, [pc, #248]	; (8014340 <_Z41__static_initialization_and_destruction_0ii+0x610>)
 8014246:	9300      	str	r3, [sp, #0]
 8014248:	4b3e      	ldr	r3, [pc, #248]	; (8014344 <_Z41__static_initialization_and_destruction_0ii+0x614>)
 801424a:	4a3f      	ldr	r2, [pc, #252]	; (8014348 <_Z41__static_initialization_and_destruction_0ii+0x618>)
 801424c:	2157      	movs	r1, #87	; 0x57
 801424e:	4840      	ldr	r0, [pc, #256]	; (8014350 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 8014250:	f7fc f844 	bl	80102dc <_ZN6PacketC1IJhmEEEtPFvvEDpPT_>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 8014254:	4b3f      	ldr	r3, [pc, #252]	; (8014354 <_Z41__static_initialization_and_destruction_0ii+0x624>)
 8014256:	9300      	str	r3, [sp, #0]
 8014258:	4b3f      	ldr	r3, [pc, #252]	; (8014358 <_Z41__static_initialization_and_destruction_0ii+0x628>)
 801425a:	4a40      	ldr	r2, [pc, #256]	; (801435c <_Z41__static_initialization_and_destruction_0ii+0x62c>)
 801425c:	210a      	movs	r1, #10
 801425e:	4840      	ldr	r0, [pc, #256]	; (8014360 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 8014260:	f7fc f868 	bl	8010334 <_ZN6PacketC1IJhhEEEtPFvvEDpPT_>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 8014264:	4b3f      	ldr	r3, [pc, #252]	; (8014364 <_Z41__static_initialization_and_destruction_0ii+0x634>)
 8014266:	4a40      	ldr	r2, [pc, #256]	; (8014368 <_Z41__static_initialization_and_destruction_0ii+0x638>)
 8014268:	2159      	movs	r1, #89	; 0x59
 801426a:	4840      	ldr	r0, [pc, #256]	; (801436c <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 801426c:	f7fb ffe0 	bl	8010230 <_ZN6PacketC1IJhEEEtPFvvEDpPT_>
Stream stream1(&timer_14, &main_can);
 8014270:	4a3f      	ldr	r2, [pc, #252]	; (8014370 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8014272:	4940      	ldr	r1, [pc, #256]	; (8014374 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8014274:	4840      	ldr	r0, [pc, #256]	; (8014378 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 8014276:	f7f9 fdcf 	bl	800de18 <_ZN6StreamC1EP5TimerP3Can>
Stream stream2(&timer_15, &main_can);
 801427a:	4a3d      	ldr	r2, [pc, #244]	; (8014370 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 801427c:	493f      	ldr	r1, [pc, #252]	; (801437c <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 801427e:	4840      	ldr	r0, [pc, #256]	; (8014380 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 8014280:	f7f9 fdca 	bl	800de18 <_ZN6StreamC1EP5TimerP3Can>
Stream stream3(&timer_16, &main_can);
 8014284:	4a3a      	ldr	r2, [pc, #232]	; (8014370 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8014286:	493f      	ldr	r1, [pc, #252]	; (8014384 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8014288:	483f      	ldr	r0, [pc, #252]	; (8014388 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 801428a:	f7f9 fdc5 	bl	800de18 <_ZN6StreamC1EP5TimerP3Can>
Stream stream4(&timer_17, &main_can);
 801428e:	4a38      	ldr	r2, [pc, #224]	; (8014370 <_Z41__static_initialization_and_destruction_0ii+0x640>)
 8014290:	493e      	ldr	r1, [pc, #248]	; (801438c <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 8014292:	483f      	ldr	r0, [pc, #252]	; (8014390 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 8014294:	f7f9 fdc0 	bl	800de18 <_ZN6StreamC1EP5TimerP3Can>
 8014298:	687b      	ldr	r3, [r7, #4]
 801429a:	2b00      	cmp	r3, #0
 801429c:	d140      	bne.n	8014320 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80142a4:	4293      	cmp	r3, r2
 80142a6:	d13b      	bne.n	8014320 <_Z41__static_initialization_and_destruction_0ii+0x5f0>
 80142a8:	4839      	ldr	r0, [pc, #228]	; (8014390 <_Z41__static_initialization_and_destruction_0ii+0x660>)
 80142aa:	f7ff fd17 	bl	8013cdc <_ZN6StreamD1Ev>
Stream stream3(&timer_16, &main_can);
 80142ae:	4836      	ldr	r0, [pc, #216]	; (8014388 <_Z41__static_initialization_and_destruction_0ii+0x658>)
 80142b0:	f7ff fd14 	bl	8013cdc <_ZN6StreamD1Ev>
Stream stream2(&timer_15, &main_can);
 80142b4:	4832      	ldr	r0, [pc, #200]	; (8014380 <_Z41__static_initialization_and_destruction_0ii+0x650>)
 80142b6:	f7ff fd11 	bl	8013cdc <_ZN6StreamD1Ev>
Stream stream1(&timer_14, &main_can);
 80142ba:	482f      	ldr	r0, [pc, #188]	; (8014378 <_Z41__static_initialization_and_destruction_0ii+0x648>)
 80142bc:	f7ff fd0e 	bl	8013cdc <_ZN6StreamD1Ev>
Packet set_precision		(ID_SET_PRECISION 		 , set_precision_callback, &set_precision_value);
 80142c0:	482a      	ldr	r0, [pc, #168]	; (801436c <_Z41__static_initialization_and_destruction_0ii+0x63c>)
 80142c2:	f7ff fd19 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet cancel_stream		(ID_CANCEL_STREAM 		 , cancel_stream_callback, &cancel_stream_id		, &cancel_stream_offset);
 80142c6:	4826      	ldr	r0, [pc, #152]	; (8014360 <_Z41__static_initialization_and_destruction_0ii+0x630>)
 80142c8:	f7ff fd16 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet write_digital		(ID_WRITE_DIGITAL_OUT 	 , write_once_callback	, &write_once_pin		, &write_once_value);
 80142cc:	4820      	ldr	r0, [pc, #128]	; (8014350 <_Z41__static_initialization_and_destruction_0ii+0x620>)
 80142ce:	f7ff fd13 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet write_analog			(ID_WRITE_ANALOG_OUT  	 , write_once_callback			, &write_once_pin		, &write_once_value);
 80142d2:	481e      	ldr	r0, [pc, #120]	; (801434c <_Z41__static_initialization_and_destruction_0ii+0x61c>)
 80142d4:	f7ff fd10 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet stream_digital_in	(ID_STREAM_DIGITAL_IN	 , stream_digital_in_callback, &read_stream_pin, &read_stream_freq);
 80142d8:	4818      	ldr	r0, [pc, #96]	; (801433c <_Z41__static_initialization_and_destruction_0ii+0x60c>)
 80142da:	f7ff fd0d 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet stream_analog_in		(ID_STREAM_ANALOG_IN	 , strean_analog_in_callback, &read_stream_pin, &read_stream_freq);
 80142de:	4815      	ldr	r0, [pc, #84]	; (8014334 <_Z41__static_initialization_and_destruction_0ii+0x604>)
 80142e0:	f7ff fd0a 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet stream_input_capture	(ID_STREAM_INPUT_CAPTURE , stream_input_capture_callback, &read_stream_pin, &read_stream_freq);
 80142e4:	482b      	ldr	r0, [pc, #172]	; (8014394 <_Z41__static_initialization_and_destruction_0ii+0x664>)
 80142e6:	f7ff fd07 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet read_digital_in		(ID_READ_DIGITAL_IN   	 , read_digital_in_callback, &read_once_pin);
 80142ea:	482b      	ldr	r0, [pc, #172]	; (8014398 <_Z41__static_initialization_and_destruction_0ii+0x668>)
 80142ec:	f7ff fd04 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet read_analog_in		(ID_READ_ANALOG_IN	  	 , read_analog_in_callback, &read_once_pin);
 80142f0:	482a      	ldr	r0, [pc, #168]	; (801439c <_Z41__static_initialization_and_destruction_0ii+0x66c>)
 80142f2:	f7ff fd01 	bl	8013cf8 <_ZN6PacketD1Ev>
Packet read_input_caputre	(ID_READ_INPUT_CAPTURE	 , read_input_capture_callback, &read_once_pin);
 80142f6:	482a      	ldr	r0, [pc, #168]	; (80143a0 <_Z41__static_initialization_and_destruction_0ii+0x670>)
 80142f8:	f7ff fcfe 	bl	8013cf8 <_ZN6PacketD1Ev>
Timer timer_17(&htim17);
 80142fc:	4823      	ldr	r0, [pc, #140]	; (801438c <_Z41__static_initialization_and_destruction_0ii+0x65c>)
 80142fe:	f7ff fd09 	bl	8013d14 <_ZN5TimerD1Ev>
Timer timer_16(&htim16);
 8014302:	4820      	ldr	r0, [pc, #128]	; (8014384 <_Z41__static_initialization_and_destruction_0ii+0x654>)
 8014304:	f7ff fd06 	bl	8013d14 <_ZN5TimerD1Ev>
Timer timer_15(&htim15);
 8014308:	481c      	ldr	r0, [pc, #112]	; (801437c <_Z41__static_initialization_and_destruction_0ii+0x64c>)
 801430a:	f7ff fd03 	bl	8013d14 <_ZN5TimerD1Ev>
Timer timer_14(&htim14);
 801430e:	4819      	ldr	r0, [pc, #100]	; (8014374 <_Z41__static_initialization_and_destruction_0ii+0x644>)
 8014310:	f7ff fd00 	bl	8013d14 <_ZN5TimerD1Ev>
Timer timer_13(&htim13);
 8014314:	4823      	ldr	r0, [pc, #140]	; (80143a4 <_Z41__static_initialization_and_destruction_0ii+0x674>)
 8014316:	f7ff fcfd 	bl	8013d14 <_ZN5TimerD1Ev>
Timer timer_7(&htim7);
 801431a:	4823      	ldr	r0, [pc, #140]	; (80143a8 <_Z41__static_initialization_and_destruction_0ii+0x678>)
 801431c:	f7ff fcfa 	bl	8013d14 <_ZN5TimerD1Ev>
 8014320:	bf00      	nop
 8014322:	3708      	adds	r7, #8
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}
 8014328:	24000b26 	.word	0x24000b26
 801432c:	24000b24 	.word	0x24000b24
 8014330:	0800e40d 	.word	0x0800e40d
 8014334:	24000b8c 	.word	0x24000b8c
 8014338:	0800e45d 	.word	0x0800e45d
 801433c:	24000ba4 	.word	0x24000ba4
 8014340:	24000b20 	.word	0x24000b20
 8014344:	24000b1d 	.word	0x24000b1d
 8014348:	0800e4ad 	.word	0x0800e4ad
 801434c:	24000bbc 	.word	0x24000bbc
 8014350:	24000bd4 	.word	0x24000bd4
 8014354:	24000b2a 	.word	0x24000b2a
 8014358:	24000b29 	.word	0x24000b29
 801435c:	0800e5c1 	.word	0x0800e5c1
 8014360:	24000bec 	.word	0x24000bec
 8014364:	24000b28 	.word	0x24000b28
 8014368:	0800e581 	.word	0x0800e581
 801436c:	24000c04 	.word	0x24000c04
 8014370:	24000a4c 	.word	0x24000a4c
 8014374:	240009cc 	.word	0x240009cc
 8014378:	24000c1c 	.word	0x24000c1c
 801437c:	240009ec 	.word	0x240009ec
 8014380:	24000c40 	.word	0x24000c40
 8014384:	24000a0c 	.word	0x24000a0c
 8014388:	24000c64 	.word	0x24000c64
 801438c:	24000a2c 	.word	0x24000a2c
 8014390:	24000c88 	.word	0x24000c88
 8014394:	24000b74 	.word	0x24000b74
 8014398:	24000b5c 	.word	0x24000b5c
 801439c:	24000b44 	.word	0x24000b44
 80143a0:	24000b2c 	.word	0x24000b2c
 80143a4:	240009ac 	.word	0x240009ac
 80143a8:	2400098c 	.word	0x2400098c

080143ac <_ZN5FieldIJmEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 80143ac:	b480      	push	{r7}
 80143ae:	b083      	sub	sp, #12
 80143b0:	af00      	add	r7, sp, #0
 80143b2:	6078      	str	r0, [r7, #4]
 80143b4:	6039      	str	r1, [r7, #0]
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	685b      	ldr	r3, [r3, #4]
 80143ba:	683a      	ldr	r2, [r7, #0]
 80143bc:	6812      	ldr	r2, [r2, #0]
 80143be:	601a      	str	r2, [r3, #0]
 80143c0:	bf00      	nop
 80143c2:	370c      	adds	r7, #12
 80143c4:	46bd      	mov	sp, r7
 80143c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ca:	4770      	bx	lr

080143cc <_ZN5FieldIJmEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 80143cc:	b480      	push	{r7}
 80143ce:	b083      	sub	sp, #12
 80143d0:	af00      	add	r7, sp, #0
 80143d2:	6078      	str	r0, [r7, #4]
 80143d4:	6039      	str	r1, [r7, #0]
 80143d6:	687b      	ldr	r3, [r7, #4]
 80143d8:	685b      	ldr	r3, [r3, #4]
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	683b      	ldr	r3, [r7, #0]
 80143de:	601a      	str	r2, [r3, #0]
 80143e0:	bf00      	nop
 80143e2:	370c      	adds	r7, #12
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr

080143ec <_ZN5FieldIJmEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 80143ec:	b480      	push	{r7}
 80143ee:	b083      	sub	sp, #12
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
 80143f4:	2304      	movs	r3, #4
 80143f6:	4618      	mov	r0, r3
 80143f8:	370c      	adds	r7, #12
 80143fa:	46bd      	mov	sp, r7
 80143fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014400:	4770      	bx	lr

08014402 <_ZN5FieldIJtEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014402:	b480      	push	{r7}
 8014404:	b083      	sub	sp, #12
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
 801440a:	6039      	str	r1, [r7, #0]
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	685b      	ldr	r3, [r3, #4]
 8014410:	683a      	ldr	r2, [r7, #0]
 8014412:	8812      	ldrh	r2, [r2, #0]
 8014414:	801a      	strh	r2, [r3, #0]
 8014416:	bf00      	nop
 8014418:	370c      	adds	r7, #12
 801441a:	46bd      	mov	sp, r7
 801441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014420:	4770      	bx	lr

08014422 <_ZN5FieldIJtEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014422:	b480      	push	{r7}
 8014424:	b083      	sub	sp, #12
 8014426:	af00      	add	r7, sp, #0
 8014428:	6078      	str	r0, [r7, #4]
 801442a:	6039      	str	r1, [r7, #0]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	685b      	ldr	r3, [r3, #4]
 8014430:	881a      	ldrh	r2, [r3, #0]
 8014432:	683b      	ldr	r3, [r7, #0]
 8014434:	801a      	strh	r2, [r3, #0]
 8014436:	bf00      	nop
 8014438:	370c      	adds	r7, #12
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr

08014442 <_ZN5FieldIJtEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014442:	b480      	push	{r7}
 8014444:	b083      	sub	sp, #12
 8014446:	af00      	add	r7, sp, #0
 8014448:	6078      	str	r0, [r7, #4]
 801444a:	2302      	movs	r3, #2
 801444c:	4618      	mov	r0, r3
 801444e:	370c      	adds	r7, #12
 8014450:	46bd      	mov	sp, r7
 8014452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014456:	4770      	bx	lr

08014458 <_ZN5FieldIJhEE5parseEPh>:
    void parse(uint8_t* d)   { *this->ptr   = *((T*) d); }
 8014458:	b480      	push	{r7}
 801445a:	b083      	sub	sp, #12
 801445c:	af00      	add	r7, sp, #0
 801445e:	6078      	str	r0, [r7, #4]
 8014460:	6039      	str	r1, [r7, #0]
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	685b      	ldr	r3, [r3, #4]
 8014466:	683a      	ldr	r2, [r7, #0]
 8014468:	7812      	ldrb	r2, [r2, #0]
 801446a:	701a      	strb	r2, [r3, #0]
 801446c:	bf00      	nop
 801446e:	370c      	adds	r7, #12
 8014470:	46bd      	mov	sp, r7
 8014472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014476:	4770      	bx	lr

08014478 <_ZN5FieldIJhEE7unparseEPh>:
    void unparse(uint8_t* d) { *((T*) d) = *this->ptr; }
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
 801447e:	6078      	str	r0, [r7, #4]
 8014480:	6039      	str	r1, [r7, #0]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	685b      	ldr	r3, [r3, #4]
 8014486:	781a      	ldrb	r2, [r3, #0]
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	701a      	strb	r2, [r3, #0]
 801448c:	bf00      	nop
 801448e:	370c      	adds	r7, #12
 8014490:	46bd      	mov	sp, r7
 8014492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014496:	4770      	bx	lr

08014498 <_ZN5FieldIJhEE8get_sizeEv>:
    size_t get_size() { return sizeof(T); }
 8014498:	b480      	push	{r7}
 801449a:	b083      	sub	sp, #12
 801449c:	af00      	add	r7, sp, #0
 801449e:	6078      	str	r0, [r7, #4]
 80144a0:	2301      	movs	r3, #1
 80144a2:	4618      	mov	r0, r3
 80144a4:	370c      	adds	r7, #12
 80144a6:	46bd      	mov	sp, r7
 80144a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ac:	4770      	bx	lr

080144ae <_GLOBAL__sub_I_data_adc_1>:
 80144ae:	b580      	push	{r7, lr}
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80144b6:	2001      	movs	r0, #1
 80144b8:	f7ff fc3a 	bl	8013d30 <_Z41__static_initialization_and_destruction_0ii>
 80144bc:	bd80      	pop	{r7, pc}

080144be <_GLOBAL__sub_D_data_adc_1>:
 80144be:	b580      	push	{r7, lr}
 80144c0:	af00      	add	r7, sp, #0
 80144c2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80144c6:	2000      	movs	r0, #0
 80144c8:	f7ff fc32 	bl	8013d30 <_Z41__static_initialization_and_destruction_0ii>
 80144cc:	bd80      	pop	{r7, pc}
	...

080144d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80144d6:	4b1b      	ldr	r3, [pc, #108]	; (8014544 <HAL_MspInit+0x74>)
 80144d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80144dc:	4a19      	ldr	r2, [pc, #100]	; (8014544 <HAL_MspInit+0x74>)
 80144de:	f043 0302 	orr.w	r3, r3, #2
 80144e2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80144e6:	4b17      	ldr	r3, [pc, #92]	; (8014544 <HAL_MspInit+0x74>)
 80144e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80144ec:	f003 0302 	and.w	r3, r3, #2
 80144f0:	607b      	str	r3, [r7, #4]
 80144f2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 80144f4:	2200      	movs	r2, #0
 80144f6:	2101      	movs	r1, #1
 80144f8:	f06f 000b 	mvn.w	r0, #11
 80144fc:	f003 f893 	bl	8017626 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 1, 0);
 8014500:	2200      	movs	r2, #0
 8014502:	2101      	movs	r1, #1
 8014504:	f06f 000a 	mvn.w	r0, #10
 8014508:	f003 f88d 	bl	8017626 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 1, 0);
 801450c:	2200      	movs	r2, #0
 801450e:	2101      	movs	r1, #1
 8014510:	f06f 0009 	mvn.w	r0, #9
 8014514:	f003 f887 	bl	8017626 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 1, 0);
 8014518:	2200      	movs	r2, #0
 801451a:	2101      	movs	r1, #1
 801451c:	f06f 0004 	mvn.w	r0, #4
 8014520:	f003 f881 	bl	8017626 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 1, 0);
 8014524:	2200      	movs	r2, #0
 8014526:	2101      	movs	r1, #1
 8014528:	f06f 0003 	mvn.w	r0, #3
 801452c:	f003 f87b 	bl	8017626 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 1, 0);
 8014530:	2200      	movs	r2, #0
 8014532:	2101      	movs	r1, #1
 8014534:	f06f 0001 	mvn.w	r0, #1
 8014538:	f003 f875 	bl	8017626 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801453c:	bf00      	nop
 801453e:	3708      	adds	r7, #8
 8014540:	46bd      	mov	sp, r7
 8014542:	bd80      	pop	{r7, pc}
 8014544:	58024400 	.word	0x58024400

08014548 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8014548:	b580      	push	{r7, lr}
 801454a:	b08a      	sub	sp, #40	; 0x28
 801454c:	af00      	add	r7, sp, #0
 801454e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014550:	f107 0314 	add.w	r3, r7, #20
 8014554:	2200      	movs	r2, #0
 8014556:	601a      	str	r2, [r3, #0]
 8014558:	605a      	str	r2, [r3, #4]
 801455a:	609a      	str	r2, [r3, #8]
 801455c:	60da      	str	r2, [r3, #12]
 801455e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	4a34      	ldr	r2, [pc, #208]	; (8014638 <HAL_ADC_MspInit+0xf0>)
 8014566:	4293      	cmp	r3, r2
 8014568:	d161      	bne.n	801462e <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 801456a:	4b34      	ldr	r3, [pc, #208]	; (801463c <HAL_ADC_MspInit+0xf4>)
 801456c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014570:	4a32      	ldr	r2, [pc, #200]	; (801463c <HAL_ADC_MspInit+0xf4>)
 8014572:	f043 0320 	orr.w	r3, r3, #32
 8014576:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801457a:	4b30      	ldr	r3, [pc, #192]	; (801463c <HAL_ADC_MspInit+0xf4>)
 801457c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8014580:	f003 0320 	and.w	r3, r3, #32
 8014584:	613b      	str	r3, [r7, #16]
 8014586:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014588:	4b2c      	ldr	r3, [pc, #176]	; (801463c <HAL_ADC_MspInit+0xf4>)
 801458a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801458e:	4a2b      	ldr	r2, [pc, #172]	; (801463c <HAL_ADC_MspInit+0xf4>)
 8014590:	f043 0301 	orr.w	r3, r3, #1
 8014594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014598:	4b28      	ldr	r3, [pc, #160]	; (801463c <HAL_ADC_MspInit+0xf4>)
 801459a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801459e:	f003 0301 	and.w	r3, r3, #1
 80145a2:	60fb      	str	r3, [r7, #12]
 80145a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_INP3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80145a6:	2340      	movs	r3, #64	; 0x40
 80145a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80145aa:	2303      	movs	r3, #3
 80145ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80145ae:	2300      	movs	r3, #0
 80145b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80145b2:	f107 0314 	add.w	r3, r7, #20
 80145b6:	4619      	mov	r1, r3
 80145b8:	4821      	ldr	r0, [pc, #132]	; (8014640 <HAL_ADC_MspInit+0xf8>)
 80145ba:	f006 fa9d 	bl	801aaf8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream1;
 80145be:	4b21      	ldr	r3, [pc, #132]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145c0:	4a21      	ldr	r2, [pc, #132]	; (8014648 <HAL_ADC_MspInit+0x100>)
 80145c2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80145c4:	4b1f      	ldr	r3, [pc, #124]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145c6:	2209      	movs	r2, #9
 80145c8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80145ca:	4b1e      	ldr	r3, [pc, #120]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145cc:	2200      	movs	r2, #0
 80145ce:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80145d0:	4b1c      	ldr	r3, [pc, #112]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145d2:	2200      	movs	r2, #0
 80145d4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80145d6:	4b1b      	ldr	r3, [pc, #108]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80145dc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80145de:	4b19      	ldr	r3, [pc, #100]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80145e4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80145e6:	4b17      	ldr	r3, [pc, #92]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80145ec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80145ee:	4b15      	ldr	r3, [pc, #84]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80145f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80145f6:	4b13      	ldr	r3, [pc, #76]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145f8:	2200      	movs	r2, #0
 80145fa:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80145fc:	4b11      	ldr	r3, [pc, #68]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 80145fe:	2200      	movs	r2, #0
 8014600:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8014602:	4810      	ldr	r0, [pc, #64]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 8014604:	f003 f848 	bl	8017698 <HAL_DMA_Init>
 8014608:	4603      	mov	r3, r0
 801460a:	2b00      	cmp	r3, #0
 801460c:	d001      	beq.n	8014612 <HAL_ADC_MspInit+0xca>
    {
      Error_Handler();
 801460e:	f7fb fbe5 	bl	800fddc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8014612:	687b      	ldr	r3, [r7, #4]
 8014614:	4a0b      	ldr	r2, [pc, #44]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 8014616:	659a      	str	r2, [r3, #88]	; 0x58
 8014618:	4a0a      	ldr	r2, [pc, #40]	; (8014644 <HAL_ADC_MspInit+0xfc>)
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 1, 0);
 801461e:	2200      	movs	r2, #0
 8014620:	2101      	movs	r1, #1
 8014622:	2012      	movs	r0, #18
 8014624:	f002 ffff 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8014628:	2012      	movs	r0, #18
 801462a:	f003 f816 	bl	801765a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 801462e:	bf00      	nop
 8014630:	3728      	adds	r7, #40	; 0x28
 8014632:	46bd      	mov	sp, r7
 8014634:	bd80      	pop	{r7, pc}
 8014636:	bf00      	nop
 8014638:	40022000 	.word	0x40022000
 801463c:	58024400 	.word	0x58024400
 8014640:	58020000 	.word	0x58020000
 8014644:	24000d24 	.word	0x24000d24
 8014648:	40020028 	.word	0x40020028

0801464c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b08a      	sub	sp, #40	; 0x28
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014654:	f107 0314 	add.w	r3, r7, #20
 8014658:	2200      	movs	r2, #0
 801465a:	601a      	str	r2, [r3, #0]
 801465c:	605a      	str	r2, [r3, #4]
 801465e:	609a      	str	r2, [r3, #8]
 8014660:	60da      	str	r2, [r3, #12]
 8014662:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8014664:	687b      	ldr	r3, [r7, #4]
 8014666:	681b      	ldr	r3, [r3, #0]
 8014668:	4a22      	ldr	r2, [pc, #136]	; (80146f4 <HAL_FDCAN_MspInit+0xa8>)
 801466a:	4293      	cmp	r3, r2
 801466c:	d13e      	bne.n	80146ec <HAL_FDCAN_MspInit+0xa0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 801466e:	4b22      	ldr	r3, [pc, #136]	; (80146f8 <HAL_FDCAN_MspInit+0xac>)
 8014670:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014674:	4a20      	ldr	r2, [pc, #128]	; (80146f8 <HAL_FDCAN_MspInit+0xac>)
 8014676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801467a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 801467e:	4b1e      	ldr	r3, [pc, #120]	; (80146f8 <HAL_FDCAN_MspInit+0xac>)
 8014680:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014688:	613b      	str	r3, [r7, #16]
 801468a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801468c:	4b1a      	ldr	r3, [pc, #104]	; (80146f8 <HAL_FDCAN_MspInit+0xac>)
 801468e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014692:	4a19      	ldr	r2, [pc, #100]	; (80146f8 <HAL_FDCAN_MspInit+0xac>)
 8014694:	f043 0301 	orr.w	r3, r3, #1
 8014698:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801469c:	4b16      	ldr	r3, [pc, #88]	; (80146f8 <HAL_FDCAN_MspInit+0xac>)
 801469e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80146a2:	f003 0301 	and.w	r3, r3, #1
 80146a6:	60fb      	str	r3, [r7, #12]
 80146a8:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80146aa:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80146ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80146b0:	2302      	movs	r3, #2
 80146b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80146b4:	2300      	movs	r3, #0
 80146b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80146b8:	2300      	movs	r3, #0
 80146ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80146bc:	2309      	movs	r3, #9
 80146be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80146c0:	f107 0314 	add.w	r3, r7, #20
 80146c4:	4619      	mov	r1, r3
 80146c6:	480d      	ldr	r0, [pc, #52]	; (80146fc <HAL_FDCAN_MspInit+0xb0>)
 80146c8:	f006 fa16 	bl	801aaf8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 1, 0);
 80146cc:	2200      	movs	r2, #0
 80146ce:	2101      	movs	r1, #1
 80146d0:	2013      	movs	r0, #19
 80146d2:	f002 ffa8 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80146d6:	2013      	movs	r0, #19
 80146d8:	f002 ffbf 	bl	801765a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 1, 0);
 80146dc:	2200      	movs	r2, #0
 80146de:	2101      	movs	r1, #1
 80146e0:	2015      	movs	r0, #21
 80146e2:	f002 ffa0 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80146e6:	2015      	movs	r0, #21
 80146e8:	f002 ffb7 	bl	801765a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80146ec:	bf00      	nop
 80146ee:	3728      	adds	r7, #40	; 0x28
 80146f0:	46bd      	mov	sp, r7
 80146f2:	bd80      	pop	{r7, pc}
 80146f4:	4000a000 	.word	0x4000a000
 80146f8:	58024400 	.word	0x58024400
 80146fc:	58020000 	.word	0x58020000

08014700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b09c      	sub	sp, #112	; 0x70
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014708:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801470c:	2200      	movs	r2, #0
 801470e:	601a      	str	r2, [r3, #0]
 8014710:	605a      	str	r2, [r3, #4]
 8014712:	609a      	str	r2, [r3, #8]
 8014714:	60da      	str	r2, [r3, #12]
 8014716:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	4aac      	ldr	r2, [pc, #688]	; (80149d0 <HAL_TIM_Base_MspInit+0x2d0>)
 801471e:	4293      	cmp	r3, r2
 8014720:	d137      	bne.n	8014792 <HAL_TIM_Base_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8014722:	4bac      	ldr	r3, [pc, #688]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014728:	4aaa      	ldr	r2, [pc, #680]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 801472a:	f043 0301 	orr.w	r3, r3, #1
 801472e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014732:	4ba8      	ldr	r3, [pc, #672]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014738:	f003 0301 	and.w	r3, r3, #1
 801473c:	65bb      	str	r3, [r7, #88]	; 0x58
 801473e:	6dbb      	ldr	r3, [r7, #88]	; 0x58

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8014740:	4ba4      	ldr	r3, [pc, #656]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014746:	4aa3      	ldr	r2, [pc, #652]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014748:	f043 0310 	orr.w	r3, r3, #16
 801474c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014750:	4ba0      	ldr	r3, [pc, #640]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014756:	f003 0310 	and.w	r3, r3, #16
 801475a:	657b      	str	r3, [r7, #84]	; 0x54
 801475c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|PWM_5V_8_Pin|PWM_5V_7_Pin;
 801475e:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8014762:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014764:	2302      	movs	r3, #2
 8014766:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014768:	2302      	movs	r3, #2
 801476a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801476c:	2300      	movs	r3, #0
 801476e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8014770:	2301      	movs	r3, #1
 8014772:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8014774:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014778:	4619      	mov	r1, r3
 801477a:	4897      	ldr	r0, [pc, #604]	; (80149d8 <HAL_TIM_Base_MspInit+0x2d8>)
 801477c:	f006 f9bc 	bl	801aaf8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 1, 0);
 8014780:	2200      	movs	r2, #0
 8014782:	2101      	movs	r1, #1
 8014784:	201b      	movs	r0, #27
 8014786:	f002 ff4e 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 801478a:	201b      	movs	r0, #27
 801478c:	f002 ff65 	bl	801765a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM24_MspInit 1 */

  /* USER CODE END TIM24_MspInit 1 */
  }

}
 8014790:	e24b      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM2)
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801479a:	d166      	bne.n	801486a <HAL_TIM_Base_MspInit+0x16a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 801479c:	4b8d      	ldr	r3, [pc, #564]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 801479e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80147a2:	4a8c      	ldr	r2, [pc, #560]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80147a4:	f043 0301 	orr.w	r3, r3, #1
 80147a8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80147ac:	4b89      	ldr	r3, [pc, #548]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80147ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80147b2:	f003 0301 	and.w	r3, r3, #1
 80147b6:	653b      	str	r3, [r7, #80]	; 0x50
 80147b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80147ba:	4b86      	ldr	r3, [pc, #536]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80147bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80147c0:	4a84      	ldr	r2, [pc, #528]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80147c2:	f043 0301 	orr.w	r3, r3, #1
 80147c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80147ca:	4b82      	ldr	r3, [pc, #520]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80147cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80147d0:	f003 0301 	and.w	r3, r3, #1
 80147d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80147d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80147d8:	4b7e      	ldr	r3, [pc, #504]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80147da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80147de:	4a7d      	ldr	r2, [pc, #500]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80147e0:	f043 0302 	orr.w	r3, r3, #2
 80147e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80147e8:	4b7a      	ldr	r3, [pc, #488]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80147ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80147ee:	f003 0302 	and.w	r3, r3, #2
 80147f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80147f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80147f6:	2302      	movs	r3, #2
 80147f8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147fa:	2302      	movs	r3, #2
 80147fc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147fe:	2300      	movs	r3, #0
 8014800:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014802:	2300      	movs	r3, #0
 8014804:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014806:	2301      	movs	r3, #1
 8014808:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801480a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801480e:	4619      	mov	r1, r3
 8014810:	4872      	ldr	r0, [pc, #456]	; (80149dc <HAL_TIM_Base_MspInit+0x2dc>)
 8014812:	f006 f971 	bl	801aaf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_1A5_Pin;
 8014816:	2320      	movs	r3, #32
 8014818:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801481a:	2302      	movs	r3, #2
 801481c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 801481e:	2302      	movs	r3, #2
 8014820:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014822:	2300      	movs	r3, #0
 8014824:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014826:	2301      	movs	r3, #1
 8014828:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SENSOR_3V_1A5_GPIO_Port, &GPIO_InitStruct);
 801482a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 801482e:	4619      	mov	r1, r3
 8014830:	486a      	ldr	r0, [pc, #424]	; (80149dc <HAL_TIM_Base_MspInit+0x2dc>)
 8014832:	f006 f961 	bl	801aaf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_5_Pin|SENSOR_3V_8_Pin;
 8014836:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 801483a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801483c:	2302      	movs	r3, #2
 801483e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014840:	2300      	movs	r3, #0
 8014842:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014844:	2300      	movs	r3, #0
 8014846:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8014848:	2301      	movs	r3, #1
 801484a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801484c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014850:	4619      	mov	r1, r3
 8014852:	4863      	ldr	r0, [pc, #396]	; (80149e0 <HAL_TIM_Base_MspInit+0x2e0>)
 8014854:	f006 f950 	bl	801aaf8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8014858:	2200      	movs	r2, #0
 801485a:	2100      	movs	r1, #0
 801485c:	201c      	movs	r0, #28
 801485e:	f002 fee2 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8014862:	201c      	movs	r0, #28
 8014864:	f002 fef9 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014868:	e1df      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM3)
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	4a5d      	ldr	r2, [pc, #372]	; (80149e4 <HAL_TIM_Base_MspInit+0x2e4>)
 8014870:	4293      	cmp	r3, r2
 8014872:	d136      	bne.n	80148e2 <HAL_TIM_Base_MspInit+0x1e2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8014874:	4b57      	ldr	r3, [pc, #348]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014876:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801487a:	4a56      	ldr	r2, [pc, #344]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 801487c:	f043 0302 	orr.w	r3, r3, #2
 8014880:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014884:	4b53      	ldr	r3, [pc, #332]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014886:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801488a:	f003 0302 	and.w	r3, r3, #2
 801488e:	647b      	str	r3, [r7, #68]	; 0x44
 8014890:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014892:	4b50      	ldr	r3, [pc, #320]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014898:	4a4e      	ldr	r2, [pc, #312]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 801489a:	f043 0302 	orr.w	r3, r3, #2
 801489e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80148a2:	4b4c      	ldr	r3, [pc, #304]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80148a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80148a8:	f003 0302 	and.w	r3, r3, #2
 80148ac:	643b      	str	r3, [r7, #64]	; 0x40
 80148ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = PWM_5V_2_Pin|PWM_5V_9_Pin|GPIO_PIN_4|PWM_5V_4_Pin;
 80148b0:	2333      	movs	r3, #51	; 0x33
 80148b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80148b4:	2302      	movs	r3, #2
 80148b6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80148b8:	2302      	movs	r3, #2
 80148ba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80148bc:	2300      	movs	r3, #0
 80148be:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80148c0:	2302      	movs	r3, #2
 80148c2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80148c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80148c8:	4619      	mov	r1, r3
 80148ca:	4845      	ldr	r0, [pc, #276]	; (80149e0 <HAL_TIM_Base_MspInit+0x2e0>)
 80148cc:	f006 f914 	bl	801aaf8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80148d0:	2200      	movs	r2, #0
 80148d2:	2101      	movs	r1, #1
 80148d4:	201d      	movs	r0, #29
 80148d6:	f002 fea6 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80148da:	201d      	movs	r0, #29
 80148dc:	f002 febd 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 80148e0:	e1a3      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM4)
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	681b      	ldr	r3, [r3, #0]
 80148e6:	4a40      	ldr	r2, [pc, #256]	; (80149e8 <HAL_TIM_Base_MspInit+0x2e8>)
 80148e8:	4293      	cmp	r3, r2
 80148ea:	d137      	bne.n	801495c <HAL_TIM_Base_MspInit+0x25c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80148ec:	4b39      	ldr	r3, [pc, #228]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80148ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80148f2:	4a38      	ldr	r2, [pc, #224]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80148f4:	f043 0304 	orr.w	r3, r3, #4
 80148f8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80148fc:	4b35      	ldr	r3, [pc, #212]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80148fe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014902:	f003 0304 	and.w	r3, r3, #4
 8014906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8014908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801490a:	4b32      	ldr	r3, [pc, #200]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 801490c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014910:	4a30      	ldr	r2, [pc, #192]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014912:	f043 0308 	orr.w	r3, r3, #8
 8014916:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801491a:	4b2e      	ldr	r3, [pc, #184]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 801491c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014920:	f003 0308 	and.w	r3, r3, #8
 8014924:	63bb      	str	r3, [r7, #56]	; 0x38
 8014926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pin = PWM_5V_6_Pin|PWM_5V_5_Pin|PWM_5V_10_Pin|PWM_5V_11_Pin;
 8014928:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 801492c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801492e:	2302      	movs	r3, #2
 8014930:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014932:	2300      	movs	r3, #0
 8014934:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014936:	2300      	movs	r3, #0
 8014938:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 801493a:	2302      	movs	r3, #2
 801493c:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801493e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8014942:	4619      	mov	r1, r3
 8014944:	4829      	ldr	r0, [pc, #164]	; (80149ec <HAL_TIM_Base_MspInit+0x2ec>)
 8014946:	f006 f8d7 	bl	801aaf8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 0);
 801494a:	2200      	movs	r2, #0
 801494c:	2101      	movs	r1, #1
 801494e:	201e      	movs	r0, #30
 8014950:	f002 fe69 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8014954:	201e      	movs	r0, #30
 8014956:	f002 fe80 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 801495a:	e166      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM5)
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	4a23      	ldr	r2, [pc, #140]	; (80149f0 <HAL_TIM_Base_MspInit+0x2f0>)
 8014962:	4293      	cmp	r3, r2
 8014964:	d117      	bne.n	8014996 <HAL_TIM_Base_MspInit+0x296>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8014966:	4b1b      	ldr	r3, [pc, #108]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014968:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801496c:	4a19      	ldr	r2, [pc, #100]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 801496e:	f043 0308 	orr.w	r3, r3, #8
 8014972:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014976:	4b17      	ldr	r3, [pc, #92]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 8014978:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 801497c:	f003 0308 	and.w	r3, r3, #8
 8014980:	637b      	str	r3, [r7, #52]	; 0x34
 8014982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM5_IRQn, 1, 0);
 8014984:	2200      	movs	r2, #0
 8014986:	2101      	movs	r1, #1
 8014988:	2032      	movs	r0, #50	; 0x32
 801498a:	f002 fe4c 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 801498e:	2032      	movs	r0, #50	; 0x32
 8014990:	f002 fe63 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014994:	e149      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM6)
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	681b      	ldr	r3, [r3, #0]
 801499a:	4a16      	ldr	r2, [pc, #88]	; (80149f4 <HAL_TIM_Base_MspInit+0x2f4>)
 801499c:	4293      	cmp	r3, r2
 801499e:	d12b      	bne.n	80149f8 <HAL_TIM_Base_MspInit+0x2f8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80149a0:	4b0c      	ldr	r3, [pc, #48]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80149a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149a6:	4a0b      	ldr	r2, [pc, #44]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80149a8:	f043 0310 	orr.w	r3, r3, #16
 80149ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80149b0:	4b08      	ldr	r3, [pc, #32]	; (80149d4 <HAL_TIM_Base_MspInit+0x2d4>)
 80149b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80149b6:	f003 0310 	and.w	r3, r3, #16
 80149ba:	633b      	str	r3, [r7, #48]	; 0x30
 80149bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 80149be:	2200      	movs	r2, #0
 80149c0:	2101      	movs	r1, #1
 80149c2:	2036      	movs	r0, #54	; 0x36
 80149c4:	f002 fe2f 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80149c8:	2036      	movs	r0, #54	; 0x36
 80149ca:	f002 fe46 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 80149ce:	e12c      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
 80149d0:	40010000 	.word	0x40010000
 80149d4:	58024400 	.word	0x58024400
 80149d8:	58021000 	.word	0x58021000
 80149dc:	58020000 	.word	0x58020000
 80149e0:	58020400 	.word	0x58020400
 80149e4:	40000400 	.word	0x40000400
 80149e8:	40000800 	.word	0x40000800
 80149ec:	58020c00 	.word	0x58020c00
 80149f0:	40000c00 	.word	0x40000c00
 80149f4:	40001000 	.word	0x40001000
  else if(htim_base->Instance==TIM7)
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	4a8d      	ldr	r2, [pc, #564]	; (8014c34 <HAL_TIM_Base_MspInit+0x534>)
 80149fe:	4293      	cmp	r3, r2
 8014a00:	d117      	bne.n	8014a32 <HAL_TIM_Base_MspInit+0x332>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8014a02:	4b8d      	ldr	r3, [pc, #564]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014a04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a08:	4a8b      	ldr	r2, [pc, #556]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014a0a:	f043 0320 	orr.w	r3, r3, #32
 8014a0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014a12:	4b89      	ldr	r3, [pc, #548]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a18:	f003 0320 	and.w	r3, r3, #32
 8014a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    HAL_NVIC_SetPriority(TIM7_IRQn, 1, 0);
 8014a20:	2200      	movs	r2, #0
 8014a22:	2101      	movs	r1, #1
 8014a24:	2037      	movs	r0, #55	; 0x37
 8014a26:	f002 fdfe 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8014a2a:	2037      	movs	r0, #55	; 0x37
 8014a2c:	f002 fe15 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014a30:	e0fb      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM8)
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	4a81      	ldr	r2, [pc, #516]	; (8014c3c <HAL_TIM_Base_MspInit+0x53c>)
 8014a38:	4293      	cmp	r3, r2
 8014a3a:	d127      	bne.n	8014a8c <HAL_TIM_Base_MspInit+0x38c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8014a3c:	4b7e      	ldr	r3, [pc, #504]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a42:	4a7d      	ldr	r2, [pc, #500]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014a44:	f043 0302 	orr.w	r3, r3, #2
 8014a48:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014a4c:	4b7a      	ldr	r3, [pc, #488]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014a4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014a52:	f003 0302 	and.w	r3, r3, #2
 8014a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8014a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8014a5a:	2200      	movs	r2, #0
 8014a5c:	2101      	movs	r1, #1
 8014a5e:	202c      	movs	r0, #44	; 0x2c
 8014a60:	f002 fde1 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014a64:	202c      	movs	r0, #44	; 0x2c
 8014a66:	f002 fdf8 	bl	801765a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8014a6a:	2200      	movs	r2, #0
 8014a6c:	2101      	movs	r1, #1
 8014a6e:	202d      	movs	r0, #45	; 0x2d
 8014a70:	f002 fdd9 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014a74:	202d      	movs	r0, #45	; 0x2d
 8014a76:	f002 fdf0 	bl	801765a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 1, 0);
 8014a7a:	2200      	movs	r2, #0
 8014a7c:	2101      	movs	r1, #1
 8014a7e:	202e      	movs	r0, #46	; 0x2e
 8014a80:	f002 fdd1 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8014a84:	202e      	movs	r0, #46	; 0x2e
 8014a86:	f002 fde8 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014a8a:	e0ce      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM12)
 8014a8c:	687b      	ldr	r3, [r7, #4]
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	4a6b      	ldr	r2, [pc, #428]	; (8014c40 <HAL_TIM_Base_MspInit+0x540>)
 8014a92:	4293      	cmp	r3, r2
 8014a94:	d10f      	bne.n	8014ab6 <HAL_TIM_Base_MspInit+0x3b6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8014a96:	4b68      	ldr	r3, [pc, #416]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014a98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014a9c:	4a66      	ldr	r2, [pc, #408]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014a9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014aa2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014aa6:	4b64      	ldr	r3, [pc, #400]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014aa8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8014ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014ab4:	e0b9      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM13)
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	681b      	ldr	r3, [r3, #0]
 8014aba:	4a62      	ldr	r2, [pc, #392]	; (8014c44 <HAL_TIM_Base_MspInit+0x544>)
 8014abc:	4293      	cmp	r3, r2
 8014abe:	d117      	bne.n	8014af0 <HAL_TIM_Base_MspInit+0x3f0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8014ac0:	4b5d      	ldr	r3, [pc, #372]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014ac2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ac6:	4a5c      	ldr	r2, [pc, #368]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014acc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014ad0:	4b59      	ldr	r3, [pc, #356]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014ad2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014ad6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014ada:	623b      	str	r3, [r7, #32]
 8014adc:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 1, 0);
 8014ade:	2200      	movs	r2, #0
 8014ae0:	2101      	movs	r1, #1
 8014ae2:	202c      	movs	r0, #44	; 0x2c
 8014ae4:	f002 fd9f 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8014ae8:	202c      	movs	r0, #44	; 0x2c
 8014aea:	f002 fdb6 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014aee:	e09c      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM14)
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	4a54      	ldr	r2, [pc, #336]	; (8014c48 <HAL_TIM_Base_MspInit+0x548>)
 8014af6:	4293      	cmp	r3, r2
 8014af8:	d117      	bne.n	8014b2a <HAL_TIM_Base_MspInit+0x42a>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8014afa:	4b4f      	ldr	r3, [pc, #316]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014afc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b00:	4a4d      	ldr	r2, [pc, #308]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014b06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8014b0a:	4b4b      	ldr	r3, [pc, #300]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014b0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8014b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014b14:	61fb      	str	r3, [r7, #28]
 8014b16:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 8014b18:	2200      	movs	r2, #0
 8014b1a:	2101      	movs	r1, #1
 8014b1c:	202d      	movs	r0, #45	; 0x2d
 8014b1e:	f002 fd82 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8014b22:	202d      	movs	r0, #45	; 0x2d
 8014b24:	f002 fd99 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014b28:	e07f      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM15)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	681b      	ldr	r3, [r3, #0]
 8014b2e:	4a47      	ldr	r2, [pc, #284]	; (8014c4c <HAL_TIM_Base_MspInit+0x54c>)
 8014b30:	4293      	cmp	r3, r2
 8014b32:	d117      	bne.n	8014b64 <HAL_TIM_Base_MspInit+0x464>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8014b34:	4b40      	ldr	r3, [pc, #256]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014b36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b3a:	4a3f      	ldr	r2, [pc, #252]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8014b40:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014b44:	4b3c      	ldr	r3, [pc, #240]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014b46:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8014b4e:	61bb      	str	r3, [r7, #24]
 8014b50:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM15_IRQn, 1, 0);
 8014b52:	2200      	movs	r2, #0
 8014b54:	2101      	movs	r1, #1
 8014b56:	2074      	movs	r0, #116	; 0x74
 8014b58:	f002 fd65 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 8014b5c:	2074      	movs	r0, #116	; 0x74
 8014b5e:	f002 fd7c 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014b62:	e062      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM16)
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	4a39      	ldr	r2, [pc, #228]	; (8014c50 <HAL_TIM_Base_MspInit+0x550>)
 8014b6a:	4293      	cmp	r3, r2
 8014b6c:	d117      	bne.n	8014b9e <HAL_TIM_Base_MspInit+0x49e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8014b6e:	4b32      	ldr	r3, [pc, #200]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014b70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b74:	4a30      	ldr	r2, [pc, #192]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014b76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8014b7a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014b7e:	4b2e      	ldr	r3, [pc, #184]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014b80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8014b88:	617b      	str	r3, [r7, #20]
 8014b8a:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM16_IRQn, 1, 0);
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	2101      	movs	r1, #1
 8014b90:	2075      	movs	r0, #117	; 0x75
 8014b92:	f002 fd48 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8014b96:	2075      	movs	r0, #117	; 0x75
 8014b98:	f002 fd5f 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014b9c:	e045      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM17)
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	4a2c      	ldr	r2, [pc, #176]	; (8014c54 <HAL_TIM_Base_MspInit+0x554>)
 8014ba4:	4293      	cmp	r3, r2
 8014ba6:	d117      	bne.n	8014bd8 <HAL_TIM_Base_MspInit+0x4d8>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8014ba8:	4b23      	ldr	r3, [pc, #140]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014baa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014bae:	4a22      	ldr	r2, [pc, #136]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8014bb4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8014bb8:	4b1f      	ldr	r3, [pc, #124]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014bba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8014bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8014bc2:	613b      	str	r3, [r7, #16]
 8014bc4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM17_IRQn, 1, 0);
 8014bc6:	2200      	movs	r2, #0
 8014bc8:	2101      	movs	r1, #1
 8014bca:	2076      	movs	r0, #118	; 0x76
 8014bcc:	f002 fd2b 	bl	8017626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8014bd0:	2076      	movs	r0, #118	; 0x76
 8014bd2:	f002 fd42 	bl	801765a <HAL_NVIC_EnableIRQ>
}
 8014bd6:	e028      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM23)
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	681b      	ldr	r3, [r3, #0]
 8014bdc:	4a1e      	ldr	r2, [pc, #120]	; (8014c58 <HAL_TIM_Base_MspInit+0x558>)
 8014bde:	4293      	cmp	r3, r2
 8014be0:	d10f      	bne.n	8014c02 <HAL_TIM_Base_MspInit+0x502>
    __HAL_RCC_TIM23_CLK_ENABLE();
 8014be2:	4b15      	ldr	r3, [pc, #84]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014be4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014be8:	4a13      	ldr	r2, [pc, #76]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8014bee:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014bf2:	4b11      	ldr	r3, [pc, #68]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014bf4:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8014bfc:	60fb      	str	r3, [r7, #12]
 8014bfe:	68fb      	ldr	r3, [r7, #12]
}
 8014c00:	e013      	b.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
  else if(htim_base->Instance==TIM24)
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4a15      	ldr	r2, [pc, #84]	; (8014c5c <HAL_TIM_Base_MspInit+0x55c>)
 8014c08:	4293      	cmp	r3, r2
 8014c0a:	d10e      	bne.n	8014c2a <HAL_TIM_Base_MspInit+0x52a>
    __HAL_RCC_TIM24_CLK_ENABLE();
 8014c0c:	4b0a      	ldr	r3, [pc, #40]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014c0e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014c12:	4a09      	ldr	r2, [pc, #36]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8014c18:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8014c1c:	4b06      	ldr	r3, [pc, #24]	; (8014c38 <HAL_TIM_Base_MspInit+0x538>)
 8014c1e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8014c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8014c26:	60bb      	str	r3, [r7, #8]
 8014c28:	68bb      	ldr	r3, [r7, #8]
}
 8014c2a:	bf00      	nop
 8014c2c:	3770      	adds	r7, #112	; 0x70
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	bd80      	pop	{r7, pc}
 8014c32:	bf00      	nop
 8014c34:	40001400 	.word	0x40001400
 8014c38:	58024400 	.word	0x58024400
 8014c3c:	40010400 	.word	0x40010400
 8014c40:	40001800 	.word	0x40001800
 8014c44:	40001c00 	.word	0x40001c00
 8014c48:	40002000 	.word	0x40002000
 8014c4c:	40014000 	.word	0x40014000
 8014c50:	40014400 	.word	0x40014400
 8014c54:	40014800 	.word	0x40014800
 8014c58:	4000e000 	.word	0x4000e000
 8014c5c:	4000e400 	.word	0x4000e400

08014c60 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8014c60:	b580      	push	{r7, lr}
 8014c62:	b08c      	sub	sp, #48	; 0x30
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c68:	f107 031c 	add.w	r3, r7, #28
 8014c6c:	2200      	movs	r2, #0
 8014c6e:	601a      	str	r2, [r3, #0]
 8014c70:	605a      	str	r2, [r3, #4]
 8014c72:	609a      	str	r2, [r3, #8]
 8014c74:	60da      	str	r2, [r3, #12]
 8014c76:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM5)
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	4a66      	ldr	r2, [pc, #408]	; (8014e18 <HAL_TIM_MspPostInit+0x1b8>)
 8014c7e:	4293      	cmp	r3, r2
 8014c80:	d11f      	bne.n	8014cc2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014c82:	4b66      	ldr	r3, [pc, #408]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c88:	4a64      	ldr	r2, [pc, #400]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014c8a:	f043 0301 	orr.w	r3, r3, #1
 8014c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014c92:	4b62      	ldr	r3, [pc, #392]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014c98:	f003 0301 	and.w	r3, r3, #1
 8014c9c:	61bb      	str	r3, [r7, #24]
 8014c9e:	69bb      	ldr	r3, [r7, #24]
    /**TIM5 GPIO Configuration
    PA0     ------> TIM5_CH1
    PA2     ------> TIM5_CH3
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8014ca0:	230d      	movs	r3, #13
 8014ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ca4:	2302      	movs	r3, #2
 8014ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014cac:	2300      	movs	r3, #0
 8014cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8014cb0:	2302      	movs	r3, #2
 8014cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014cb4:	f107 031c 	add.w	r3, r7, #28
 8014cb8:	4619      	mov	r1, r3
 8014cba:	4859      	ldr	r0, [pc, #356]	; (8014e20 <HAL_TIM_MspPostInit+0x1c0>)
 8014cbc:	f005 ff1c 	bl	801aaf8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM24_MspPostInit 1 */

  /* USER CODE END TIM24_MspPostInit 1 */
  }

}
 8014cc0:	e0a5      	b.n	8014e0e <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM8)
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	4a57      	ldr	r2, [pc, #348]	; (8014e24 <HAL_TIM_MspPostInit+0x1c4>)
 8014cc8:	4293      	cmp	r3, r2
 8014cca:	d130      	bne.n	8014d2e <HAL_TIM_MspPostInit+0xce>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8014ccc:	4b53      	ldr	r3, [pc, #332]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014cd2:	4a52      	ldr	r2, [pc, #328]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014cd4:	f043 0304 	orr.w	r3, r3, #4
 8014cd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014cdc:	4b4f      	ldr	r3, [pc, #316]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014ce2:	f003 0304 	and.w	r3, r3, #4
 8014ce6:	617b      	str	r3, [r7, #20]
 8014ce8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8014cea:	2340      	movs	r3, #64	; 0x40
 8014cec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014cee:	2302      	movs	r3, #2
 8014cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8014cf2:	2302      	movs	r3, #2
 8014cf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014cf6:	2300      	movs	r3, #0
 8014cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014cfa:	2303      	movs	r3, #3
 8014cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014cfe:	f107 031c 	add.w	r3, r7, #28
 8014d02:	4619      	mov	r1, r3
 8014d04:	4848      	ldr	r0, [pc, #288]	; (8014e28 <HAL_TIM_MspPostInit+0x1c8>)
 8014d06:	f005 fef7 	bl	801aaf8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SENSOR_3V_6_Pin|SENSOR_3V_11_Pin|SENSOR_3V_5C9_Pin;
 8014d0a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8014d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d10:	2302      	movs	r3, #2
 8014d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d14:	2300      	movs	r3, #0
 8014d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d18:	2300      	movs	r3, #0
 8014d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8014d1c:	2303      	movs	r3, #3
 8014d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8014d20:	f107 031c 	add.w	r3, r7, #28
 8014d24:	4619      	mov	r1, r3
 8014d26:	4840      	ldr	r0, [pc, #256]	; (8014e28 <HAL_TIM_MspPostInit+0x1c8>)
 8014d28:	f005 fee6 	bl	801aaf8 <HAL_GPIO_Init>
}
 8014d2c:	e06f      	b.n	8014e0e <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM12)
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	681b      	ldr	r3, [r3, #0]
 8014d32:	4a3e      	ldr	r2, [pc, #248]	; (8014e2c <HAL_TIM_MspPostInit+0x1cc>)
 8014d34:	4293      	cmp	r3, r2
 8014d36:	d120      	bne.n	8014d7a <HAL_TIM_MspPostInit+0x11a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d38:	4b38      	ldr	r3, [pc, #224]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d3e:	4a37      	ldr	r2, [pc, #220]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014d40:	f043 0302 	orr.w	r3, r3, #2
 8014d44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d48:	4b34      	ldr	r3, [pc, #208]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d4e:	f003 0302 	and.w	r3, r3, #2
 8014d52:	613b      	str	r3, [r7, #16]
 8014d54:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SENSOR_3V_14B14_Pin;
 8014d56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8014d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d5c:	2302      	movs	r3, #2
 8014d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d60:	2300      	movs	r3, #0
 8014d62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014d64:	2300      	movs	r3, #0
 8014d66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM12;
 8014d68:	2302      	movs	r3, #2
 8014d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SENSOR_3V_14B14_GPIO_Port, &GPIO_InitStruct);
 8014d6c:	f107 031c 	add.w	r3, r7, #28
 8014d70:	4619      	mov	r1, r3
 8014d72:	482f      	ldr	r0, [pc, #188]	; (8014e30 <HAL_TIM_MspPostInit+0x1d0>)
 8014d74:	f005 fec0 	bl	801aaf8 <HAL_GPIO_Init>
}
 8014d78:	e049      	b.n	8014e0e <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM23)
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	4a2d      	ldr	r2, [pc, #180]	; (8014e34 <HAL_TIM_MspPostInit+0x1d4>)
 8014d80:	4293      	cmp	r3, r2
 8014d82:	d11f      	bne.n	8014dc4 <HAL_TIM_MspPostInit+0x164>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014d84:	4b25      	ldr	r3, [pc, #148]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d8a:	4a24      	ldr	r2, [pc, #144]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014d8c:	f043 0320 	orr.w	r3, r3, #32
 8014d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014d94:	4b21      	ldr	r3, [pc, #132]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014d9a:	f003 0320 	and.w	r3, r3, #32
 8014d9e:	60fb      	str	r3, [r7, #12]
 8014da0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SENSOR_3V_2_Pin|SENSOR_3V_1_Pin|SENSOR_3V_3_Pin|SENSOR_3V_15_Pin;
 8014da2:	230f      	movs	r3, #15
 8014da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014da6:	2302      	movs	r3, #2
 8014da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014daa:	2300      	movs	r3, #0
 8014dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014dae:	2300      	movs	r3, #0
 8014db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_TIM23;
 8014db2:	230d      	movs	r3, #13
 8014db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014db6:	f107 031c 	add.w	r3, r7, #28
 8014dba:	4619      	mov	r1, r3
 8014dbc:	481e      	ldr	r0, [pc, #120]	; (8014e38 <HAL_TIM_MspPostInit+0x1d8>)
 8014dbe:	f005 fe9b 	bl	801aaf8 <HAL_GPIO_Init>
}
 8014dc2:	e024      	b.n	8014e0e <HAL_TIM_MspPostInit+0x1ae>
  else if(htim->Instance==TIM24)
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	681b      	ldr	r3, [r3, #0]
 8014dc8:	4a1c      	ldr	r2, [pc, #112]	; (8014e3c <HAL_TIM_MspPostInit+0x1dc>)
 8014dca:	4293      	cmp	r3, r2
 8014dcc:	d11f      	bne.n	8014e0e <HAL_TIM_MspPostInit+0x1ae>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014dce:	4b13      	ldr	r3, [pc, #76]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014dd4:	4a11      	ldr	r2, [pc, #68]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014dd6:	f043 0320 	orr.w	r3, r3, #32
 8014dda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8014dde:	4b0f      	ldr	r3, [pc, #60]	; (8014e1c <HAL_TIM_MspPostInit+0x1bc>)
 8014de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8014de4:	f003 0320 	and.w	r3, r3, #32
 8014de8:	60bb      	str	r3, [r7, #8]
 8014dea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = SENSOR_3V_16_Pin|SENSOR_3V_10_Pin|SENSOR_3V_9_Pin|SENSOR_3V_14_Pin;
 8014dec:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8014df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014df2:	2302      	movs	r3, #2
 8014df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014df6:	2300      	movs	r3, #0
 8014df8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014dfa:	2300      	movs	r3, #0
 8014dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM24;
 8014dfe:	230e      	movs	r3, #14
 8014e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014e02:	f107 031c 	add.w	r3, r7, #28
 8014e06:	4619      	mov	r1, r3
 8014e08:	480b      	ldr	r0, [pc, #44]	; (8014e38 <HAL_TIM_MspPostInit+0x1d8>)
 8014e0a:	f005 fe75 	bl	801aaf8 <HAL_GPIO_Init>
}
 8014e0e:	bf00      	nop
 8014e10:	3730      	adds	r7, #48	; 0x30
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
 8014e16:	bf00      	nop
 8014e18:	40000c00 	.word	0x40000c00
 8014e1c:	58024400 	.word	0x58024400
 8014e20:	58020000 	.word	0x58020000
 8014e24:	40010400 	.word	0x40010400
 8014e28:	58020800 	.word	0x58020800
 8014e2c:	40001800 	.word	0x40001800
 8014e30:	58020400 	.word	0x58020400
 8014e34:	4000e000 	.word	0x4000e000
 8014e38:	58021400 	.word	0x58021400
 8014e3c:	4000e400 	.word	0x4000e400

08014e40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014e40:	b480      	push	{r7}
 8014e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8014e44:	e7fe      	b.n	8014e44 <NMI_Handler+0x4>

08014e46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8014e46:	b480      	push	{r7}
 8014e48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014e4a:	e7fe      	b.n	8014e4a <HardFault_Handler+0x4>

08014e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014e4c:	b480      	push	{r7}
 8014e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014e50:	e7fe      	b.n	8014e50 <MemManage_Handler+0x4>

08014e52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014e52:	b480      	push	{r7}
 8014e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8014e56:	e7fe      	b.n	8014e56 <BusFault_Handler+0x4>

08014e58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014e58:	b480      	push	{r7}
 8014e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014e5c:	e7fe      	b.n	8014e5c <UsageFault_Handler+0x4>

08014e5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014e5e:	b480      	push	{r7}
 8014e60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8014e62:	bf00      	nop
 8014e64:	46bd      	mov	sp, r7
 8014e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e6a:	4770      	bx	lr

08014e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014e70:	bf00      	nop
 8014e72:	46bd      	mov	sp, r7
 8014e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e78:	4770      	bx	lr

08014e7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014e7a:	b480      	push	{r7}
 8014e7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014e7e:	bf00      	nop
 8014e80:	46bd      	mov	sp, r7
 8014e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e86:	4770      	bx	lr

08014e88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014e8c:	f000 fa20 	bl	80152d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014e90:	bf00      	nop
 8014e92:	bd80      	pop	{r7, pc}

08014e94 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8014e98:	4802      	ldr	r0, [pc, #8]	; (8014ea4 <DMA1_Stream1_IRQHandler+0x10>)
 8014e9a:	f003 f9c1 	bl	8018220 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8014e9e:	bf00      	nop
 8014ea0:	bd80      	pop	{r7, pc}
 8014ea2:	bf00      	nop
 8014ea4:	24000d24 	.word	0x24000d24

08014ea8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8014ea8:	b580      	push	{r7, lr}
 8014eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8014eac:	4802      	ldr	r0, [pc, #8]	; (8014eb8 <ADC_IRQHandler+0x10>)
 8014eae:	f000 ffff 	bl	8015eb0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8014eb2:	bf00      	nop
 8014eb4:	bd80      	pop	{r7, pc}
 8014eb6:	bf00      	nop
 8014eb8:	24000cb4 	.word	0x24000cb4

08014ebc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014ec0:	4802      	ldr	r0, [pc, #8]	; (8014ecc <FDCAN1_IT0_IRQHandler+0x10>)
 8014ec2:	f005 f90b 	bl	801a0dc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8014ec6:	bf00      	nop
 8014ec8:	bd80      	pop	{r7, pc}
 8014eca:	bf00      	nop
 8014ecc:	24000d9c 	.word	0x24000d9c

08014ed0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8014ed0:	b580      	push	{r7, lr}
 8014ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8014ed4:	4802      	ldr	r0, [pc, #8]	; (8014ee0 <FDCAN1_IT1_IRQHandler+0x10>)
 8014ed6:	f005 f901 	bl	801a0dc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8014eda:	bf00      	nop
 8014edc:	bd80      	pop	{r7, pc}
 8014ede:	bf00      	nop
 8014ee0:	24000d9c 	.word	0x24000d9c

08014ee4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8014ee4:	b580      	push	{r7, lr}
 8014ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8014ee8:	4802      	ldr	r0, [pc, #8]	; (8014ef4 <TIM1_CC_IRQHandler+0x10>)
 8014eea:	f00a f831 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8014eee:	bf00      	nop
 8014ef0:	bd80      	pop	{r7, pc}
 8014ef2:	bf00      	nop
 8014ef4:	24000e3c 	.word	0x24000e3c

08014ef8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8014efc:	4802      	ldr	r0, [pc, #8]	; (8014f08 <TIM2_IRQHandler+0x10>)
 8014efe:	f00a f827 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8014f02:	bf00      	nop
 8014f04:	bd80      	pop	{r7, pc}
 8014f06:	bf00      	nop
 8014f08:	24000e88 	.word	0x24000e88

08014f0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8014f10:	4802      	ldr	r0, [pc, #8]	; (8014f1c <TIM3_IRQHandler+0x10>)
 8014f12:	f00a f81d 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8014f16:	bf00      	nop
 8014f18:	bd80      	pop	{r7, pc}
 8014f1a:	bf00      	nop
 8014f1c:	24000ed4 	.word	0x24000ed4

08014f20 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8014f24:	4802      	ldr	r0, [pc, #8]	; (8014f30 <TIM4_IRQHandler+0x10>)
 8014f26:	f00a f813 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014f2a:	bf00      	nop
 8014f2c:	bd80      	pop	{r7, pc}
 8014f2e:	bf00      	nop
 8014f30:	24000f20 	.word	0x24000f20

08014f34 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014f38:	4803      	ldr	r0, [pc, #12]	; (8014f48 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8014f3a:	f00a f809 	bl	801ef50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8014f3e:	4803      	ldr	r0, [pc, #12]	; (8014f4c <TIM8_UP_TIM13_IRQHandler+0x18>)
 8014f40:	f00a f806 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8014f44:	bf00      	nop
 8014f46:	bd80      	pop	{r7, pc}
 8014f48:	24001050 	.word	0x24001050
 8014f4c:	240010e8 	.word	0x240010e8

08014f50 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8014f50:	b580      	push	{r7, lr}
 8014f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014f54:	4803      	ldr	r0, [pc, #12]	; (8014f64 <TIM8_TRG_COM_TIM14_IRQHandler+0x14>)
 8014f56:	f009 fffb 	bl	801ef50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim14);
 8014f5a:	4803      	ldr	r0, [pc, #12]	; (8014f68 <TIM8_TRG_COM_TIM14_IRQHandler+0x18>)
 8014f5c:	f009 fff8 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8014f60:	bf00      	nop
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	24001050 	.word	0x24001050
 8014f68:	24001134 	.word	0x24001134

08014f6c <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 8014f6c:	b580      	push	{r7, lr}
 8014f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8014f70:	4802      	ldr	r0, [pc, #8]	; (8014f7c <TIM8_CC_IRQHandler+0x10>)
 8014f72:	f009 ffed 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8014f76:	bf00      	nop
 8014f78:	bd80      	pop	{r7, pc}
 8014f7a:	bf00      	nop
 8014f7c:	24001050 	.word	0x24001050

08014f80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8014f84:	4802      	ldr	r0, [pc, #8]	; (8014f90 <TIM5_IRQHandler+0x10>)
 8014f86:	f009 ffe3 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014f8a:	bf00      	nop
 8014f8c:	bd80      	pop	{r7, pc}
 8014f8e:	bf00      	nop
 8014f90:	24000f6c 	.word	0x24000f6c

08014f94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014f94:	b580      	push	{r7, lr}
 8014f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8014f98:	4802      	ldr	r0, [pc, #8]	; (8014fa4 <TIM6_DAC_IRQHandler+0x10>)
 8014f9a:	f009 ffd9 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8014f9e:	bf00      	nop
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	24000fb8 	.word	0x24000fb8

08014fa8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8014fa8:	b580      	push	{r7, lr}
 8014faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8014fac:	4802      	ldr	r0, [pc, #8]	; (8014fb8 <TIM7_IRQHandler+0x10>)
 8014fae:	f009 ffcf 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014fb2:	bf00      	nop
 8014fb4:	bd80      	pop	{r7, pc}
 8014fb6:	bf00      	nop
 8014fb8:	24001004 	.word	0x24001004

08014fbc <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8014fbc:	b580      	push	{r7, lr}
 8014fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8014fc0:	4802      	ldr	r0, [pc, #8]	; (8014fcc <TIM15_IRQHandler+0x10>)
 8014fc2:	f009 ffc5 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 8014fc6:	bf00      	nop
 8014fc8:	bd80      	pop	{r7, pc}
 8014fca:	bf00      	nop
 8014fcc:	24001180 	.word	0x24001180

08014fd0 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8014fd4:	4802      	ldr	r0, [pc, #8]	; (8014fe0 <TIM16_IRQHandler+0x10>)
 8014fd6:	f009 ffbb 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8014fda:	bf00      	nop
 8014fdc:	bd80      	pop	{r7, pc}
 8014fde:	bf00      	nop
 8014fe0:	240011cc 	.word	0x240011cc

08014fe4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8014fe8:	4802      	ldr	r0, [pc, #8]	; (8014ff4 <TIM17_IRQHandler+0x10>)
 8014fea:	f009 ffb1 	bl	801ef50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8014fee:	bf00      	nop
 8014ff0:	bd80      	pop	{r7, pc}
 8014ff2:	bf00      	nop
 8014ff4:	24001218 	.word	0x24001218

08014ff8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8014ff8:	b480      	push	{r7}
 8014ffa:	af00      	add	r7, sp, #0
  return 1;
 8014ffc:	2301      	movs	r3, #1
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	46bd      	mov	sp, r7
 8015002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015006:	4770      	bx	lr

08015008 <_kill>:

int _kill(int pid, int sig)
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8015012:	f00b fb8d 	bl	8020730 <__errno>
 8015016:	4603      	mov	r3, r0
 8015018:	2216      	movs	r2, #22
 801501a:	601a      	str	r2, [r3, #0]
  return -1;
 801501c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8015020:	4618      	mov	r0, r3
 8015022:	3708      	adds	r7, #8
 8015024:	46bd      	mov	sp, r7
 8015026:	bd80      	pop	{r7, pc}

08015028 <_exit>:

void _exit (int status)
{
 8015028:	b580      	push	{r7, lr}
 801502a:	b082      	sub	sp, #8
 801502c:	af00      	add	r7, sp, #0
 801502e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8015030:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8015034:	6878      	ldr	r0, [r7, #4]
 8015036:	f7ff ffe7 	bl	8015008 <_kill>
  while (1) {}    /* Make sure we hang here */
 801503a:	e7fe      	b.n	801503a <_exit+0x12>

0801503c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 801503c:	b580      	push	{r7, lr}
 801503e:	b086      	sub	sp, #24
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8015044:	4a14      	ldr	r2, [pc, #80]	; (8015098 <_sbrk+0x5c>)
 8015046:	4b15      	ldr	r3, [pc, #84]	; (801509c <_sbrk+0x60>)
 8015048:	1ad3      	subs	r3, r2, r3
 801504a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8015050:	4b13      	ldr	r3, [pc, #76]	; (80150a0 <_sbrk+0x64>)
 8015052:	681b      	ldr	r3, [r3, #0]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d102      	bne.n	801505e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8015058:	4b11      	ldr	r3, [pc, #68]	; (80150a0 <_sbrk+0x64>)
 801505a:	4a12      	ldr	r2, [pc, #72]	; (80150a4 <_sbrk+0x68>)
 801505c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801505e:	4b10      	ldr	r3, [pc, #64]	; (80150a0 <_sbrk+0x64>)
 8015060:	681a      	ldr	r2, [r3, #0]
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	4413      	add	r3, r2
 8015066:	693a      	ldr	r2, [r7, #16]
 8015068:	429a      	cmp	r2, r3
 801506a:	d207      	bcs.n	801507c <_sbrk+0x40>
  {
    errno = ENOMEM;
 801506c:	f00b fb60 	bl	8020730 <__errno>
 8015070:	4603      	mov	r3, r0
 8015072:	220c      	movs	r2, #12
 8015074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8015076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801507a:	e009      	b.n	8015090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 801507c:	4b08      	ldr	r3, [pc, #32]	; (80150a0 <_sbrk+0x64>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8015082:	4b07      	ldr	r3, [pc, #28]	; (80150a0 <_sbrk+0x64>)
 8015084:	681a      	ldr	r2, [r3, #0]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	4413      	add	r3, r2
 801508a:	4a05      	ldr	r2, [pc, #20]	; (80150a0 <_sbrk+0x64>)
 801508c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 801508e:	68fb      	ldr	r3, [r7, #12]
}
 8015090:	4618      	mov	r0, r3
 8015092:	3718      	adds	r7, #24
 8015094:	46bd      	mov	sp, r7
 8015096:	bd80      	pop	{r7, pc}
 8015098:	24050000 	.word	0x24050000
 801509c:	00000400 	.word	0x00000400
 80150a0:	240012fc 	.word	0x240012fc
 80150a4:	24001318 	.word	0x24001318

080150a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80150a8:	b480      	push	{r7}
 80150aa:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80150ac:	4b32      	ldr	r3, [pc, #200]	; (8015178 <SystemInit+0xd0>)
 80150ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80150b2:	4a31      	ldr	r2, [pc, #196]	; (8015178 <SystemInit+0xd0>)
 80150b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80150b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80150bc:	4b2f      	ldr	r3, [pc, #188]	; (801517c <SystemInit+0xd4>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	f003 030f 	and.w	r3, r3, #15
 80150c4:	2b06      	cmp	r3, #6
 80150c6:	d807      	bhi.n	80150d8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80150c8:	4b2c      	ldr	r3, [pc, #176]	; (801517c <SystemInit+0xd4>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	f023 030f 	bic.w	r3, r3, #15
 80150d0:	4a2a      	ldr	r2, [pc, #168]	; (801517c <SystemInit+0xd4>)
 80150d2:	f043 0307 	orr.w	r3, r3, #7
 80150d6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80150d8:	4b29      	ldr	r3, [pc, #164]	; (8015180 <SystemInit+0xd8>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	4a28      	ldr	r2, [pc, #160]	; (8015180 <SystemInit+0xd8>)
 80150de:	f043 0301 	orr.w	r3, r3, #1
 80150e2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80150e4:	4b26      	ldr	r3, [pc, #152]	; (8015180 <SystemInit+0xd8>)
 80150e6:	2200      	movs	r2, #0
 80150e8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80150ea:	4b25      	ldr	r3, [pc, #148]	; (8015180 <SystemInit+0xd8>)
 80150ec:	681a      	ldr	r2, [r3, #0]
 80150ee:	4924      	ldr	r1, [pc, #144]	; (8015180 <SystemInit+0xd8>)
 80150f0:	4b24      	ldr	r3, [pc, #144]	; (8015184 <SystemInit+0xdc>)
 80150f2:	4013      	ands	r3, r2
 80150f4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80150f6:	4b21      	ldr	r3, [pc, #132]	; (801517c <SystemInit+0xd4>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	f003 0308 	and.w	r3, r3, #8
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d007      	beq.n	8015112 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8015102:	4b1e      	ldr	r3, [pc, #120]	; (801517c <SystemInit+0xd4>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	f023 030f 	bic.w	r3, r3, #15
 801510a:	4a1c      	ldr	r2, [pc, #112]	; (801517c <SystemInit+0xd4>)
 801510c:	f043 0307 	orr.w	r3, r3, #7
 8015110:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8015112:	4b1b      	ldr	r3, [pc, #108]	; (8015180 <SystemInit+0xd8>)
 8015114:	2200      	movs	r2, #0
 8015116:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8015118:	4b19      	ldr	r3, [pc, #100]	; (8015180 <SystemInit+0xd8>)
 801511a:	2200      	movs	r2, #0
 801511c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 801511e:	4b18      	ldr	r3, [pc, #96]	; (8015180 <SystemInit+0xd8>)
 8015120:	2200      	movs	r2, #0
 8015122:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8015124:	4b16      	ldr	r3, [pc, #88]	; (8015180 <SystemInit+0xd8>)
 8015126:	4a18      	ldr	r2, [pc, #96]	; (8015188 <SystemInit+0xe0>)
 8015128:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 801512a:	4b15      	ldr	r3, [pc, #84]	; (8015180 <SystemInit+0xd8>)
 801512c:	4a17      	ldr	r2, [pc, #92]	; (801518c <SystemInit+0xe4>)
 801512e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8015130:	4b13      	ldr	r3, [pc, #76]	; (8015180 <SystemInit+0xd8>)
 8015132:	4a17      	ldr	r2, [pc, #92]	; (8015190 <SystemInit+0xe8>)
 8015134:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8015136:	4b12      	ldr	r3, [pc, #72]	; (8015180 <SystemInit+0xd8>)
 8015138:	2200      	movs	r2, #0
 801513a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 801513c:	4b10      	ldr	r3, [pc, #64]	; (8015180 <SystemInit+0xd8>)
 801513e:	4a14      	ldr	r2, [pc, #80]	; (8015190 <SystemInit+0xe8>)
 8015140:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8015142:	4b0f      	ldr	r3, [pc, #60]	; (8015180 <SystemInit+0xd8>)
 8015144:	2200      	movs	r2, #0
 8015146:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8015148:	4b0d      	ldr	r3, [pc, #52]	; (8015180 <SystemInit+0xd8>)
 801514a:	4a11      	ldr	r2, [pc, #68]	; (8015190 <SystemInit+0xe8>)
 801514c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 801514e:	4b0c      	ldr	r3, [pc, #48]	; (8015180 <SystemInit+0xd8>)
 8015150:	2200      	movs	r2, #0
 8015152:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8015154:	4b0a      	ldr	r3, [pc, #40]	; (8015180 <SystemInit+0xd8>)
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	4a09      	ldr	r2, [pc, #36]	; (8015180 <SystemInit+0xd8>)
 801515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801515e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8015160:	4b07      	ldr	r3, [pc, #28]	; (8015180 <SystemInit+0xd8>)
 8015162:	2200      	movs	r2, #0
 8015164:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8015166:	4b0b      	ldr	r3, [pc, #44]	; (8015194 <SystemInit+0xec>)
 8015168:	f243 02d2 	movw	r2, #12498	; 0x30d2
 801516c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 801516e:	bf00      	nop
 8015170:	46bd      	mov	sp, r7
 8015172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015176:	4770      	bx	lr
 8015178:	e000ed00 	.word	0xe000ed00
 801517c:	52002000 	.word	0x52002000
 8015180:	58024400 	.word	0x58024400
 8015184:	eaf6ed7f 	.word	0xeaf6ed7f
 8015188:	02020200 	.word	0x02020200
 801518c:	01ff0000 	.word	0x01ff0000
 8015190:	01010280 	.word	0x01010280
 8015194:	52004000 	.word	0x52004000

08015198 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8015198:	f8df d034 	ldr.w	sp, [pc, #52]	; 80151d0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 801519c:	f7ff ff84 	bl	80150a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80151a0:	480c      	ldr	r0, [pc, #48]	; (80151d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80151a2:	490d      	ldr	r1, [pc, #52]	; (80151d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80151a4:	4a0d      	ldr	r2, [pc, #52]	; (80151dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80151a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80151a8:	e002      	b.n	80151b0 <LoopCopyDataInit>

080151aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80151aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80151ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80151ae:	3304      	adds	r3, #4

080151b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80151b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80151b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80151b4:	d3f9      	bcc.n	80151aa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80151b6:	4a0a      	ldr	r2, [pc, #40]	; (80151e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80151b8:	4c0a      	ldr	r4, [pc, #40]	; (80151e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80151ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80151bc:	e001      	b.n	80151c2 <LoopFillZerobss>

080151be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80151be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80151c0:	3204      	adds	r2, #4

080151c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80151c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80151c4:	d3fb      	bcc.n	80151be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80151c6:	f00b fab9 	bl	802073c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80151ca:	f7f9 faa6 	bl	800e71a <main>
  bx  lr
 80151ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80151d0:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80151d4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80151d8:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 80151dc:	08020d98 	.word	0x08020d98
  ldr r2, =_sbss
 80151e0:	2400007c 	.word	0x2400007c
  ldr r4, =_ebss
 80151e4:	24001318 	.word	0x24001318

080151e8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80151e8:	e7fe      	b.n	80151e8 <ADC3_IRQHandler>
	...

080151ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b082      	sub	sp, #8
 80151f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80151f2:	2003      	movs	r0, #3
 80151f4:	f002 fa0c 	bl	8017610 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80151f8:	f006 fc3c 	bl	801ba74 <HAL_RCC_GetSysClockFreq>
 80151fc:	4602      	mov	r2, r0
 80151fe:	4b15      	ldr	r3, [pc, #84]	; (8015254 <HAL_Init+0x68>)
 8015200:	699b      	ldr	r3, [r3, #24]
 8015202:	0a1b      	lsrs	r3, r3, #8
 8015204:	f003 030f 	and.w	r3, r3, #15
 8015208:	4913      	ldr	r1, [pc, #76]	; (8015258 <HAL_Init+0x6c>)
 801520a:	5ccb      	ldrb	r3, [r1, r3]
 801520c:	f003 031f 	and.w	r3, r3, #31
 8015210:	fa22 f303 	lsr.w	r3, r2, r3
 8015214:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8015216:	4b0f      	ldr	r3, [pc, #60]	; (8015254 <HAL_Init+0x68>)
 8015218:	699b      	ldr	r3, [r3, #24]
 801521a:	f003 030f 	and.w	r3, r3, #15
 801521e:	4a0e      	ldr	r2, [pc, #56]	; (8015258 <HAL_Init+0x6c>)
 8015220:	5cd3      	ldrb	r3, [r2, r3]
 8015222:	f003 031f 	and.w	r3, r3, #31
 8015226:	687a      	ldr	r2, [r7, #4]
 8015228:	fa22 f303 	lsr.w	r3, r2, r3
 801522c:	4a0b      	ldr	r2, [pc, #44]	; (801525c <HAL_Init+0x70>)
 801522e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8015230:	4a0b      	ldr	r2, [pc, #44]	; (8015260 <HAL_Init+0x74>)
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8015236:	2001      	movs	r0, #1
 8015238:	f000 f814 	bl	8015264 <HAL_InitTick>
 801523c:	4603      	mov	r3, r0
 801523e:	2b00      	cmp	r3, #0
 8015240:	d001      	beq.n	8015246 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8015242:	2301      	movs	r3, #1
 8015244:	e002      	b.n	801524c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8015246:	f7ff f943 	bl	80144d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801524a:	2300      	movs	r3, #0
}
 801524c:	4618      	mov	r0, r3
 801524e:	3708      	adds	r7, #8
 8015250:	46bd      	mov	sp, r7
 8015252:	bd80      	pop	{r7, pc}
 8015254:	58024400 	.word	0x58024400
 8015258:	08020d10 	.word	0x08020d10
 801525c:	24000008 	.word	0x24000008
 8015260:	24000004 	.word	0x24000004

08015264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	b082      	sub	sp, #8
 8015268:	af00      	add	r7, sp, #0
 801526a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801526c:	4b15      	ldr	r3, [pc, #84]	; (80152c4 <HAL_InitTick+0x60>)
 801526e:	781b      	ldrb	r3, [r3, #0]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d101      	bne.n	8015278 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8015274:	2301      	movs	r3, #1
 8015276:	e021      	b.n	80152bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8015278:	4b13      	ldr	r3, [pc, #76]	; (80152c8 <HAL_InitTick+0x64>)
 801527a:	681a      	ldr	r2, [r3, #0]
 801527c:	4b11      	ldr	r3, [pc, #68]	; (80152c4 <HAL_InitTick+0x60>)
 801527e:	781b      	ldrb	r3, [r3, #0]
 8015280:	4619      	mov	r1, r3
 8015282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015286:	fbb3 f3f1 	udiv	r3, r3, r1
 801528a:	fbb2 f3f3 	udiv	r3, r2, r3
 801528e:	4618      	mov	r0, r3
 8015290:	f002 f9f5 	bl	801767e <HAL_SYSTICK_Config>
 8015294:	4603      	mov	r3, r0
 8015296:	2b00      	cmp	r3, #0
 8015298:	d001      	beq.n	801529e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801529a:	2301      	movs	r3, #1
 801529c:	e00e      	b.n	80152bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	2b0f      	cmp	r3, #15
 80152a2:	d80a      	bhi.n	80152ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80152a4:	2200      	movs	r2, #0
 80152a6:	6879      	ldr	r1, [r7, #4]
 80152a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80152ac:	f002 f9bb 	bl	8017626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80152b0:	4a06      	ldr	r2, [pc, #24]	; (80152cc <HAL_InitTick+0x68>)
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80152b6:	2300      	movs	r3, #0
 80152b8:	e000      	b.n	80152bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80152ba:	2301      	movs	r3, #1
}
 80152bc:	4618      	mov	r0, r3
 80152be:	3708      	adds	r7, #8
 80152c0:	46bd      	mov	sp, r7
 80152c2:	bd80      	pop	{r7, pc}
 80152c4:	24000010 	.word	0x24000010
 80152c8:	24000004 	.word	0x24000004
 80152cc:	2400000c 	.word	0x2400000c

080152d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80152d0:	b480      	push	{r7}
 80152d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80152d4:	4b06      	ldr	r3, [pc, #24]	; (80152f0 <HAL_IncTick+0x20>)
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	461a      	mov	r2, r3
 80152da:	4b06      	ldr	r3, [pc, #24]	; (80152f4 <HAL_IncTick+0x24>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	4413      	add	r3, r2
 80152e0:	4a04      	ldr	r2, [pc, #16]	; (80152f4 <HAL_IncTick+0x24>)
 80152e2:	6013      	str	r3, [r2, #0]
}
 80152e4:	bf00      	nop
 80152e6:	46bd      	mov	sp, r7
 80152e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152ec:	4770      	bx	lr
 80152ee:	bf00      	nop
 80152f0:	24000010 	.word	0x24000010
 80152f4:	24001300 	.word	0x24001300

080152f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80152f8:	b480      	push	{r7}
 80152fa:	af00      	add	r7, sp, #0
  return uwTick;
 80152fc:	4b03      	ldr	r3, [pc, #12]	; (801530c <HAL_GetTick+0x14>)
 80152fe:	681b      	ldr	r3, [r3, #0]
}
 8015300:	4618      	mov	r0, r3
 8015302:	46bd      	mov	sp, r7
 8015304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015308:	4770      	bx	lr
 801530a:	bf00      	nop
 801530c:	24001300 	.word	0x24001300

08015310 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8015310:	b480      	push	{r7}
 8015312:	b083      	sub	sp, #12
 8015314:	af00      	add	r7, sp, #0
 8015316:	6078      	str	r0, [r7, #4]
 8015318:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	689b      	ldr	r3, [r3, #8]
 801531e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8015322:	683b      	ldr	r3, [r7, #0]
 8015324:	431a      	orrs	r2, r3
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	609a      	str	r2, [r3, #8]
}
 801532a:	bf00      	nop
 801532c:	370c      	adds	r7, #12
 801532e:	46bd      	mov	sp, r7
 8015330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015334:	4770      	bx	lr

08015336 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8015336:	b480      	push	{r7}
 8015338:	b083      	sub	sp, #12
 801533a:	af00      	add	r7, sp, #0
 801533c:	6078      	str	r0, [r7, #4]
 801533e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	689b      	ldr	r3, [r3, #8]
 8015344:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8015348:	683b      	ldr	r3, [r7, #0]
 801534a:	431a      	orrs	r2, r3
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	609a      	str	r2, [r3, #8]
}
 8015350:	bf00      	nop
 8015352:	370c      	adds	r7, #12
 8015354:	46bd      	mov	sp, r7
 8015356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801535a:	4770      	bx	lr

0801535c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801535c:	b480      	push	{r7}
 801535e:	b083      	sub	sp, #12
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	689b      	ldr	r3, [r3, #8]
 8015368:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 801536c:	4618      	mov	r0, r3
 801536e:	370c      	adds	r7, #12
 8015370:	46bd      	mov	sp, r7
 8015372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015376:	4770      	bx	lr

08015378 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8015378:	b480      	push	{r7}
 801537a:	b087      	sub	sp, #28
 801537c:	af00      	add	r7, sp, #0
 801537e:	60f8      	str	r0, [r7, #12]
 8015380:	60b9      	str	r1, [r7, #8]
 8015382:	607a      	str	r2, [r7, #4]
 8015384:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	3360      	adds	r3, #96	; 0x60
 801538a:	461a      	mov	r2, r3
 801538c:	68bb      	ldr	r3, [r7, #8]
 801538e:	009b      	lsls	r3, r3, #2
 8015390:	4413      	add	r3, r2
 8015392:	617b      	str	r3, [r7, #20]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8015394:	68fb      	ldr	r3, [r7, #12]
 8015396:	4a10      	ldr	r2, [pc, #64]	; (80153d8 <LL_ADC_SetOffset+0x60>)
 8015398:	4293      	cmp	r3, r2
 801539a:	d10b      	bne.n	80153b4 <LL_ADC_SetOffset+0x3c>
  {
    MODIFY_REG(*preg,
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80153a6:	683b      	ldr	r3, [r7, #0]
 80153a8:	4313      	orrs	r3, r2
 80153aa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80153ae:	697b      	ldr	r3, [r7, #20]
 80153b0:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 80153b2:	e00b      	b.n	80153cc <LL_ADC_SetOffset+0x54>
    MODIFY_REG(*preg,
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80153c2:	683b      	ldr	r3, [r7, #0]
 80153c4:	430b      	orrs	r3, r1
 80153c6:	431a      	orrs	r2, r3
 80153c8:	697b      	ldr	r3, [r7, #20]
 80153ca:	601a      	str	r2, [r3, #0]
}
 80153cc:	bf00      	nop
 80153ce:	371c      	adds	r7, #28
 80153d0:	46bd      	mov	sp, r7
 80153d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153d6:	4770      	bx	lr
 80153d8:	58026000 	.word	0x58026000

080153dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2) For ADC channel read back from ADC register,
  *                comparison with internal channel parameter to be done
  *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80153dc:	b480      	push	{r7}
 80153de:	b085      	sub	sp, #20
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	3360      	adds	r3, #96	; 0x60
 80153ea:	461a      	mov	r2, r3
 80153ec:	683b      	ldr	r3, [r7, #0]
 80153ee:	009b      	lsls	r3, r3, #2
 80153f0:	4413      	add	r3, r2
 80153f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	681b      	ldr	r3, [r3, #0]
 80153f8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80153fc:	4618      	mov	r0, r3
 80153fe:	3714      	adds	r7, #20
 8015400:	46bd      	mov	sp, r7
 8015402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015406:	4770      	bx	lr

08015408 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8015408:	b480      	push	{r7}
 801540a:	b085      	sub	sp, #20
 801540c:	af00      	add	r7, sp, #0
 801540e:	60f8      	str	r0, [r7, #12]
 8015410:	60b9      	str	r1, [r7, #8]
 8015412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	691b      	ldr	r3, [r3, #16]
 8015418:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 801541c:	68bb      	ldr	r3, [r7, #8]
 801541e:	f003 031f 	and.w	r3, r3, #31
 8015422:	6879      	ldr	r1, [r7, #4]
 8015424:	fa01 f303 	lsl.w	r3, r1, r3
 8015428:	431a      	orrs	r2, r3
 801542a:	68fb      	ldr	r3, [r7, #12]
 801542c:	611a      	str	r2, [r3, #16]
}
 801542e:	bf00      	nop
 8015430:	3714      	adds	r7, #20
 8015432:	46bd      	mov	sp, r7
 8015434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015438:	4770      	bx	lr
	...

0801543c <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 801543c:	b480      	push	{r7}
 801543e:	b087      	sub	sp, #28
 8015440:	af00      	add	r7, sp, #0
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  if (ADCx == ADC3)
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	4a0c      	ldr	r2, [pc, #48]	; (801547c <LL_ADC_SetOffsetSignedSaturation+0x40>)
 801544c:	4293      	cmp	r3, r2
 801544e:	d00e      	beq.n	801546e <LL_ADC_SetOffsetSignedSaturation+0x32>
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	3360      	adds	r3, #96	; 0x60
 8015454:	461a      	mov	r2, r3
 8015456:	68bb      	ldr	r3, [r7, #8]
 8015458:	009b      	lsls	r3, r3, #2
 801545a:	4413      	add	r3, r2
 801545c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 801545e:	697b      	ldr	r3, [r7, #20]
 8015460:	681b      	ldr	r3, [r3, #0]
 8015462:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	431a      	orrs	r2, r3
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	601a      	str	r2, [r3, #0]
  }
}
 801546e:	bf00      	nop
 8015470:	371c      	adds	r7, #28
 8015472:	46bd      	mov	sp, r7
 8015474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015478:	4770      	bx	lr
 801547a:	bf00      	nop
 801547c:	58026000 	.word	0x58026000

08015480 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8015480:	b480      	push	{r7}
 8015482:	b087      	sub	sp, #28
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	4a0c      	ldr	r2, [pc, #48]	; (80154c0 <LL_ADC_SetOffsetSaturation+0x40>)
 8015490:	4293      	cmp	r3, r2
 8015492:	d10e      	bne.n	80154b2 <LL_ADC_SetOffsetSaturation+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015494:	68fb      	ldr	r3, [r7, #12]
 8015496:	3360      	adds	r3, #96	; 0x60
 8015498:	461a      	mov	r2, r3
 801549a:	68bb      	ldr	r3, [r7, #8]
 801549c:	009b      	lsls	r3, r3, #2
 801549e:	4413      	add	r3, r2
 80154a0:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80154a2:	697b      	ldr	r3, [r7, #20]
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	431a      	orrs	r2, r3
 80154ae:	697b      	ldr	r3, [r7, #20]
 80154b0:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_SATEN,
               OffsetSaturation);
  }
}
 80154b2:	bf00      	nop
 80154b4:	371c      	adds	r7, #28
 80154b6:	46bd      	mov	sp, r7
 80154b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154bc:	4770      	bx	lr
 80154be:	bf00      	nop
 80154c0:	58026000 	.word	0x58026000

080154c4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80154c4:	b480      	push	{r7}
 80154c6:	b087      	sub	sp, #28
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	607a      	str	r2, [r7, #4]
  if (ADCx == ADC3)
 80154d0:	68fb      	ldr	r3, [r7, #12]
 80154d2:	4a0c      	ldr	r2, [pc, #48]	; (8015504 <LL_ADC_SetOffsetSign+0x40>)
 80154d4:	4293      	cmp	r3, r2
 80154d6:	d10e      	bne.n	80154f6 <LL_ADC_SetOffsetSign+0x32>
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	3360      	adds	r3, #96	; 0x60
 80154dc:	461a      	mov	r2, r3
 80154de:	68bb      	ldr	r3, [r7, #8]
 80154e0:	009b      	lsls	r3, r3, #2
 80154e2:	4413      	add	r3, r2
 80154e4:	617b      	str	r3, [r7, #20]

    MODIFY_REG(*preg,
 80154e6:	697b      	ldr	r3, [r7, #20]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	431a      	orrs	r2, r3
 80154f2:	697b      	ldr	r3, [r7, #20]
 80154f4:	601a      	str	r2, [r3, #0]
               ADC3_OFR1_OFFSETPOS,
               OffsetSign);
  }
}
 80154f6:	bf00      	nop
 80154f8:	371c      	adds	r7, #28
 80154fa:	46bd      	mov	sp, r7
 80154fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015500:	4770      	bx	lr
 8015502:	bf00      	nop
 8015504:	58026000 	.word	0x58026000

08015508 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8015508:	b480      	push	{r7}
 801550a:	b087      	sub	sp, #28
 801550c:	af00      	add	r7, sp, #0
 801550e:	60f8      	str	r0, [r7, #12]
 8015510:	60b9      	str	r1, [r7, #8]
 8015512:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	3360      	adds	r3, #96	; 0x60
 8015518:	461a      	mov	r2, r3
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	009b      	lsls	r3, r3, #2
 801551e:	4413      	add	r3, r2
 8015520:	617b      	str	r3, [r7, #20]
  if (ADCx == ADC3)
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	4a0c      	ldr	r2, [pc, #48]	; (8015558 <LL_ADC_SetOffsetState+0x50>)
 8015526:	4293      	cmp	r3, r2
 8015528:	d108      	bne.n	801553c <LL_ADC_SetOffsetState+0x34>
  {
    MODIFY_REG(*preg,
 801552a:	697b      	ldr	r3, [r7, #20]
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	431a      	orrs	r2, r3
 8015536:	697b      	ldr	r3, [r7, #20]
 8015538:	601a      	str	r2, [r3, #0]
  {
    MODIFY_REG(*preg,
               ADC_OFR1_SSATE,
               OffsetState);
  }
}
 801553a:	e007      	b.n	801554c <LL_ADC_SetOffsetState+0x44>
    MODIFY_REG(*preg,
 801553c:	697b      	ldr	r3, [r7, #20]
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	431a      	orrs	r2, r3
 8015548:	697b      	ldr	r3, [r7, #20]
 801554a:	601a      	str	r2, [r3, #0]
}
 801554c:	bf00      	nop
 801554e:	371c      	adds	r7, #28
 8015550:	46bd      	mov	sp, r7
 8015552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015556:	4770      	bx	lr
 8015558:	58026000 	.word	0x58026000

0801555c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 801555c:	b480      	push	{r7}
 801555e:	b083      	sub	sp, #12
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801556c:	2b00      	cmp	r3, #0
 801556e:	d101      	bne.n	8015574 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8015570:	2301      	movs	r3, #1
 8015572:	e000      	b.n	8015576 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8015574:	2300      	movs	r3, #0
}
 8015576:	4618      	mov	r0, r3
 8015578:	370c      	adds	r7, #12
 801557a:	46bd      	mov	sp, r7
 801557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015580:	4770      	bx	lr

08015582 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8015582:	b480      	push	{r7}
 8015584:	b087      	sub	sp, #28
 8015586:	af00      	add	r7, sp, #0
 8015588:	60f8      	str	r0, [r7, #12]
 801558a:	60b9      	str	r1, [r7, #8]
 801558c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	3330      	adds	r3, #48	; 0x30
 8015592:	461a      	mov	r2, r3
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	0a1b      	lsrs	r3, r3, #8
 8015598:	009b      	lsls	r3, r3, #2
 801559a:	f003 030c 	and.w	r3, r3, #12
 801559e:	4413      	add	r3, r2
 80155a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80155a2:	697b      	ldr	r3, [r7, #20]
 80155a4:	681a      	ldr	r2, [r3, #0]
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	f003 031f 	and.w	r3, r3, #31
 80155ac:	211f      	movs	r1, #31
 80155ae:	fa01 f303 	lsl.w	r3, r1, r3
 80155b2:	43db      	mvns	r3, r3
 80155b4:	401a      	ands	r2, r3
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	0e9b      	lsrs	r3, r3, #26
 80155ba:	f003 011f 	and.w	r1, r3, #31
 80155be:	68bb      	ldr	r3, [r7, #8]
 80155c0:	f003 031f 	and.w	r3, r3, #31
 80155c4:	fa01 f303 	lsl.w	r3, r1, r3
 80155c8:	431a      	orrs	r2, r3
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80155ce:	bf00      	nop
 80155d0:	371c      	adds	r7, #28
 80155d2:	46bd      	mov	sp, r7
 80155d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155d8:	4770      	bx	lr

080155da <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 80155da:	b480      	push	{r7}
 80155dc:	b083      	sub	sp, #12
 80155de:	af00      	add	r7, sp, #0
 80155e0:	6078      	str	r0, [r7, #4]
 80155e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	68db      	ldr	r3, [r3, #12]
 80155e8:	f023 0203 	bic.w	r2, r3, #3
 80155ec:	683b      	ldr	r3, [r7, #0]
 80155ee:	431a      	orrs	r2, r3
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	60da      	str	r2, [r3, #12]
}
 80155f4:	bf00      	nop
 80155f6:	370c      	adds	r7, #12
 80155f8:	46bd      	mov	sp, r7
 80155fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155fe:	4770      	bx	lr

08015600 <LL_ADC_EnableDMAReq>:
  * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
{
 8015600:	b480      	push	{r7}
 8015602:	b083      	sub	sp, #12
 8015604:	af00      	add	r7, sp, #0
 8015606:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	68db      	ldr	r3, [r3, #12]
 801560c:	f043 0201 	orr.w	r2, r3, #1
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	60da      	str	r2, [r3, #12]
}
 8015614:	bf00      	nop
 8015616:	370c      	adds	r7, #12
 8015618:	46bd      	mov	sp, r7
 801561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561e:	4770      	bx	lr

08015620 <LL_ADC_REG_SetDMATransferMode>:
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 8015620:	b480      	push	{r7}
 8015622:	b083      	sub	sp, #12
 8015624:	af00      	add	r7, sp, #0
 8015626:	6078      	str	r0, [r7, #4]
 8015628:	6039      	str	r1, [r7, #0]
  if (ADCx == ADC3)
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	4a08      	ldr	r2, [pc, #32]	; (8015650 <LL_ADC_REG_SetDMATransferMode+0x30>)
 801562e:	4293      	cmp	r3, r2
 8015630:	d107      	bne.n	8015642 <LL_ADC_REG_SetDMATransferMode+0x22>
  {
    MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	68db      	ldr	r3, [r3, #12]
 8015636:	f023 0203 	bic.w	r2, r3, #3
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	431a      	orrs	r2, r3
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	60da      	str	r2, [r3, #12]
  }
}
 8015642:	bf00      	nop
 8015644:	370c      	adds	r7, #12
 8015646:	46bd      	mov	sp, r7
 8015648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801564c:	4770      	bx	lr
 801564e:	bf00      	nop
 8015650:	58026000 	.word	0x58026000

08015654 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8015654:	b480      	push	{r7}
 8015656:	b083      	sub	sp, #12
 8015658:	af00      	add	r7, sp, #0
 801565a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015660:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8015664:	2b00      	cmp	r3, #0
 8015666:	d101      	bne.n	801566c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8015668:	2301      	movs	r3, #1
 801566a:	e000      	b.n	801566e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 801566c:	2300      	movs	r3, #0
}
 801566e:	4618      	mov	r0, r3
 8015670:	370c      	adds	r7, #12
 8015672:	46bd      	mov	sp, r7
 8015674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015678:	4770      	bx	lr

0801567a <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 801567a:	b480      	push	{r7}
 801567c:	b087      	sub	sp, #28
 801567e:	af00      	add	r7, sp, #0
 8015680:	60f8      	str	r0, [r7, #12]
 8015682:	60b9      	str	r1, [r7, #8]
 8015684:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8015686:	68fb      	ldr	r3, [r7, #12]
 8015688:	3314      	adds	r3, #20
 801568a:	461a      	mov	r2, r3
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	0e5b      	lsrs	r3, r3, #25
 8015690:	009b      	lsls	r3, r3, #2
 8015692:	f003 0304 	and.w	r3, r3, #4
 8015696:	4413      	add	r3, r2
 8015698:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	68bb      	ldr	r3, [r7, #8]
 80156a0:	0d1b      	lsrs	r3, r3, #20
 80156a2:	f003 031f 	and.w	r3, r3, #31
 80156a6:	2107      	movs	r1, #7
 80156a8:	fa01 f303 	lsl.w	r3, r1, r3
 80156ac:	43db      	mvns	r3, r3
 80156ae:	401a      	ands	r2, r3
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	0d1b      	lsrs	r3, r3, #20
 80156b4:	f003 031f 	and.w	r3, r3, #31
 80156b8:	6879      	ldr	r1, [r7, #4]
 80156ba:	fa01 f303 	lsl.w	r3, r1, r3
 80156be:	431a      	orrs	r2, r3
 80156c0:	697b      	ldr	r3, [r7, #20]
 80156c2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80156c4:	bf00      	nop
 80156c6:	371c      	adds	r7, #28
 80156c8:	46bd      	mov	sp, r7
 80156ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156ce:	4770      	bx	lr

080156d0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80156d0:	b480      	push	{r7}
 80156d2:	b085      	sub	sp, #20
 80156d4:	af00      	add	r7, sp, #0
 80156d6:	60f8      	str	r0, [r7, #12]
 80156d8:	60b9      	str	r1, [r7, #8]
 80156da:	607a      	str	r2, [r7, #4]
#if defined(ADC_VER_V5_V90)
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  if (ADCx == ADC3)
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	4a1a      	ldr	r2, [pc, #104]	; (8015748 <LL_ADC_SetChannelSingleDiff+0x78>)
 80156e0:	4293      	cmp	r3, r2
 80156e2:	d115      	bne.n	8015710 <LL_ADC_SetChannelSingleDiff+0x40>
  {
    MODIFY_REG(ADCx->LTR2_DIFSEL,
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80156f0:	43db      	mvns	r3, r3
 80156f2:	401a      	ands	r2, r3
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	f003 0318 	and.w	r3, r3, #24
 80156fa:	4914      	ldr	r1, [pc, #80]	; (801574c <LL_ADC_SetChannelSingleDiff+0x7c>)
 80156fc:	40d9      	lsrs	r1, r3
 80156fe:	68bb      	ldr	r3, [r7, #8]
 8015700:	400b      	ands	r3, r1
 8015702:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015706:	431a      	orrs	r2, r3
 8015708:	68fb      	ldr	r3, [r7, #12]
 801570a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 801570e:	e014      	b.n	801573a <LL_ADC_SetChannelSingleDiff+0x6a>
    MODIFY_REG(ADCx->DIFSEL_RES12,
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8015716:	68bb      	ldr	r3, [r7, #8]
 8015718:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801571c:	43db      	mvns	r3, r3
 801571e:	401a      	ands	r2, r3
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	f003 0318 	and.w	r3, r3, #24
 8015726:	4909      	ldr	r1, [pc, #36]	; (801574c <LL_ADC_SetChannelSingleDiff+0x7c>)
 8015728:	40d9      	lsrs	r1, r3
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	400b      	ands	r3, r1
 801572e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015732:	431a      	orrs	r2, r3
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
}
 801573a:	bf00      	nop
 801573c:	3714      	adds	r7, #20
 801573e:	46bd      	mov	sp, r7
 8015740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015744:	4770      	bx	lr
 8015746:	bf00      	nop
 8015748:	58026000 	.word	0x58026000
 801574c:	000fffff 	.word	0x000fffff

08015750 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8015750:	b480      	push	{r7}
 8015752:	b083      	sub	sp, #12
 8015754:	af00      	add	r7, sp, #0
 8015756:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	689b      	ldr	r3, [r3, #8]
 801575c:	f003 031f 	and.w	r3, r3, #31
}
 8015760:	4618      	mov	r0, r3
 8015762:	370c      	adds	r7, #12
 8015764:	46bd      	mov	sp, r7
 8015766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801576a:	4770      	bx	lr

0801576c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 801576c:	b480      	push	{r7}
 801576e:	b083      	sub	sp, #12
 8015770:	af00      	add	r7, sp, #0
 8015772:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8015774:	687b      	ldr	r3, [r7, #4]
 8015776:	689b      	ldr	r3, [r3, #8]
 8015778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 801577c:	4618      	mov	r0, r3
 801577e:	370c      	adds	r7, #12
 8015780:	46bd      	mov	sp, r7
 8015782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015786:	4770      	bx	lr

08015788 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8015788:	b480      	push	{r7}
 801578a:	b083      	sub	sp, #12
 801578c:	af00      	add	r7, sp, #0
 801578e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	689a      	ldr	r2, [r3, #8]
 8015794:	4b04      	ldr	r3, [pc, #16]	; (80157a8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8015796:	4013      	ands	r3, r2
 8015798:	687a      	ldr	r2, [r7, #4]
 801579a:	6093      	str	r3, [r2, #8]
}
 801579c:	bf00      	nop
 801579e:	370c      	adds	r7, #12
 80157a0:	46bd      	mov	sp, r7
 80157a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a6:	4770      	bx	lr
 80157a8:	5fffffc0 	.word	0x5fffffc0

080157ac <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b083      	sub	sp, #12
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	689b      	ldr	r3, [r3, #8]
 80157b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80157bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80157c0:	d101      	bne.n	80157c6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80157c2:	2301      	movs	r3, #1
 80157c4:	e000      	b.n	80157c8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80157c6:	2300      	movs	r3, #0
}
 80157c8:	4618      	mov	r0, r3
 80157ca:	370c      	adds	r7, #12
 80157cc:	46bd      	mov	sp, r7
 80157ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d2:	4770      	bx	lr

080157d4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80157d4:	b480      	push	{r7}
 80157d6:	b083      	sub	sp, #12
 80157d8:	af00      	add	r7, sp, #0
 80157da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	689a      	ldr	r2, [r3, #8]
 80157e0:	4b05      	ldr	r3, [pc, #20]	; (80157f8 <LL_ADC_EnableInternalRegulator+0x24>)
 80157e2:	4013      	ands	r3, r2
 80157e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80157e8:	687b      	ldr	r3, [r7, #4]
 80157ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80157ec:	bf00      	nop
 80157ee:	370c      	adds	r7, #12
 80157f0:	46bd      	mov	sp, r7
 80157f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f6:	4770      	bx	lr
 80157f8:	6fffffc0 	.word	0x6fffffc0

080157fc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80157fc:	b480      	push	{r7}
 80157fe:	b083      	sub	sp, #12
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	689b      	ldr	r3, [r3, #8]
 8015808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801580c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8015810:	d101      	bne.n	8015816 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8015812:	2301      	movs	r3, #1
 8015814:	e000      	b.n	8015818 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8015816:	2300      	movs	r3, #0
}
 8015818:	4618      	mov	r0, r3
 801581a:	370c      	adds	r7, #12
 801581c:	46bd      	mov	sp, r7
 801581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015822:	4770      	bx	lr

08015824 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8015824:	b480      	push	{r7}
 8015826:	b083      	sub	sp, #12
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	689a      	ldr	r2, [r3, #8]
 8015830:	4b05      	ldr	r3, [pc, #20]	; (8015848 <LL_ADC_Enable+0x24>)
 8015832:	4013      	ands	r3, r2
 8015834:	f043 0201 	orr.w	r2, r3, #1
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 801583c:	bf00      	nop
 801583e:	370c      	adds	r7, #12
 8015840:	46bd      	mov	sp, r7
 8015842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015846:	4770      	bx	lr
 8015848:	7fffffc0 	.word	0x7fffffc0

0801584c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	689b      	ldr	r3, [r3, #8]
 8015858:	f003 0301 	and.w	r3, r3, #1
 801585c:	2b01      	cmp	r3, #1
 801585e:	d101      	bne.n	8015864 <LL_ADC_IsEnabled+0x18>
 8015860:	2301      	movs	r3, #1
 8015862:	e000      	b.n	8015866 <LL_ADC_IsEnabled+0x1a>
 8015864:	2300      	movs	r3, #0
}
 8015866:	4618      	mov	r0, r3
 8015868:	370c      	adds	r7, #12
 801586a:	46bd      	mov	sp, r7
 801586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015870:	4770      	bx	lr
	...

08015874 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8015874:	b480      	push	{r7}
 8015876:	b083      	sub	sp, #12
 8015878:	af00      	add	r7, sp, #0
 801587a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	689a      	ldr	r2, [r3, #8]
 8015880:	4b05      	ldr	r3, [pc, #20]	; (8015898 <LL_ADC_REG_StartConversion+0x24>)
 8015882:	4013      	ands	r3, r2
 8015884:	f043 0204 	orr.w	r2, r3, #4
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 801588c:	bf00      	nop
 801588e:	370c      	adds	r7, #12
 8015890:	46bd      	mov	sp, r7
 8015892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015896:	4770      	bx	lr
 8015898:	7fffffc0 	.word	0x7fffffc0

0801589c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 801589c:	b480      	push	{r7}
 801589e:	b083      	sub	sp, #12
 80158a0:	af00      	add	r7, sp, #0
 80158a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	689b      	ldr	r3, [r3, #8]
 80158a8:	f003 0304 	and.w	r3, r3, #4
 80158ac:	2b04      	cmp	r3, #4
 80158ae:	d101      	bne.n	80158b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80158b0:	2301      	movs	r3, #1
 80158b2:	e000      	b.n	80158b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80158b4:	2300      	movs	r3, #0
}
 80158b6:	4618      	mov	r0, r3
 80158b8:	370c      	adds	r7, #12
 80158ba:	46bd      	mov	sp, r7
 80158bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c0:	4770      	bx	lr

080158c2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80158c2:	b480      	push	{r7}
 80158c4:	b083      	sub	sp, #12
 80158c6:	af00      	add	r7, sp, #0
 80158c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80158ca:	687b      	ldr	r3, [r7, #4]
 80158cc:	689b      	ldr	r3, [r3, #8]
 80158ce:	f003 0308 	and.w	r3, r3, #8
 80158d2:	2b08      	cmp	r3, #8
 80158d4:	d101      	bne.n	80158da <LL_ADC_INJ_IsConversionOngoing+0x18>
 80158d6:	2301      	movs	r3, #1
 80158d8:	e000      	b.n	80158dc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80158da:	2300      	movs	r3, #0
}
 80158dc:	4618      	mov	r0, r3
 80158de:	370c      	adds	r7, #12
 80158e0:	46bd      	mov	sp, r7
 80158e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158e6:	4770      	bx	lr

080158e8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80158e8:	b590      	push	{r4, r7, lr}
 80158ea:	b089      	sub	sp, #36	; 0x24
 80158ec:	af00      	add	r7, sp, #0
 80158ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80158f0:	2300      	movs	r3, #0
 80158f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80158f4:	2300      	movs	r3, #0
 80158f6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d101      	bne.n	8015902 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80158fe:	2301      	movs	r3, #1
 8015900:	e1ee      	b.n	8015ce0 <HAL_ADC_Init+0x3f8>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	691b      	ldr	r3, [r3, #16]
 8015906:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801590c:	2b00      	cmp	r3, #0
 801590e:	d109      	bne.n	8015924 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8015910:	6878      	ldr	r0, [r7, #4]
 8015912:	f7fe fe19 	bl	8014548 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	2200      	movs	r2, #0
 801591a:	665a      	str	r2, [r3, #100]	; 0x64

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	2200      	movs	r2, #0
 8015920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8015924:	687b      	ldr	r3, [r7, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	4618      	mov	r0, r3
 801592a:	f7ff ff3f 	bl	80157ac <LL_ADC_IsDeepPowerDownEnabled>
 801592e:	4603      	mov	r3, r0
 8015930:	2b00      	cmp	r3, #0
 8015932:	d004      	beq.n	801593e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	4618      	mov	r0, r3
 801593a:	f7ff ff25 	bl	8015788 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	4618      	mov	r0, r3
 8015944:	f7ff ff5a 	bl	80157fc <LL_ADC_IsInternalRegulatorEnabled>
 8015948:	4603      	mov	r3, r0
 801594a:	2b00      	cmp	r3, #0
 801594c:	d114      	bne.n	8015978 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	4618      	mov	r0, r3
 8015954:	f7ff ff3e 	bl	80157d4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8015958:	4b8e      	ldr	r3, [pc, #568]	; (8015b94 <HAL_ADC_Init+0x2ac>)
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	099b      	lsrs	r3, r3, #6
 801595e:	4a8e      	ldr	r2, [pc, #568]	; (8015b98 <HAL_ADC_Init+0x2b0>)
 8015960:	fba2 2303 	umull	r2, r3, r2, r3
 8015964:	099b      	lsrs	r3, r3, #6
 8015966:	3301      	adds	r3, #1
 8015968:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 801596a:	e002      	b.n	8015972 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 801596c:	68bb      	ldr	r3, [r7, #8]
 801596e:	3b01      	subs	r3, #1
 8015970:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8015972:	68bb      	ldr	r3, [r7, #8]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d1f9      	bne.n	801596c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	4618      	mov	r0, r3
 801597e:	f7ff ff3d 	bl	80157fc <LL_ADC_IsInternalRegulatorEnabled>
 8015982:	4603      	mov	r3, r0
 8015984:	2b00      	cmp	r3, #0
 8015986:	d10d      	bne.n	80159a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015988:	687b      	ldr	r3, [r7, #4]
 801598a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801598c:	f043 0210 	orr.w	r2, r3, #16
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015998:	f043 0201 	orr.w	r2, r3, #1
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	665a      	str	r2, [r3, #100]	; 0x64

    tmp_hal_status = HAL_ERROR;
 80159a0:	2301      	movs	r3, #1
 80159a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	681b      	ldr	r3, [r3, #0]
 80159a8:	4618      	mov	r0, r3
 80159aa:	f7ff ff77 	bl	801589c <LL_ADC_REG_IsConversionOngoing>
 80159ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80159b0:	687b      	ldr	r3, [r7, #4]
 80159b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80159b4:	f003 0310 	and.w	r3, r3, #16
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	f040 8188 	bne.w	8015cce <HAL_ADC_Init+0x3e6>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80159be:	697b      	ldr	r3, [r7, #20]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	f040 8184 	bne.w	8015cce <HAL_ADC_Init+0x3e6>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80159ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80159ce:	f043 0202 	orr.w	r2, r3, #2
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	661a      	str	r2, [r3, #96]	; 0x60
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	4618      	mov	r0, r3
 80159dc:	f7ff ff36 	bl	801584c <LL_ADC_IsEnabled>
 80159e0:	4603      	mov	r3, r0
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d136      	bne.n	8015a54 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4a6c      	ldr	r2, [pc, #432]	; (8015b9c <HAL_ADC_Init+0x2b4>)
 80159ec:	4293      	cmp	r3, r2
 80159ee:	d004      	beq.n	80159fa <HAL_ADC_Init+0x112>
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	4a6a      	ldr	r2, [pc, #424]	; (8015ba0 <HAL_ADC_Init+0x2b8>)
 80159f6:	4293      	cmp	r3, r2
 80159f8:	d10e      	bne.n	8015a18 <HAL_ADC_Init+0x130>
 80159fa:	4868      	ldr	r0, [pc, #416]	; (8015b9c <HAL_ADC_Init+0x2b4>)
 80159fc:	f7ff ff26 	bl	801584c <LL_ADC_IsEnabled>
 8015a00:	4604      	mov	r4, r0
 8015a02:	4867      	ldr	r0, [pc, #412]	; (8015ba0 <HAL_ADC_Init+0x2b8>)
 8015a04:	f7ff ff22 	bl	801584c <LL_ADC_IsEnabled>
 8015a08:	4603      	mov	r3, r0
 8015a0a:	4323      	orrs	r3, r4
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	bf0c      	ite	eq
 8015a10:	2301      	moveq	r3, #1
 8015a12:	2300      	movne	r3, #0
 8015a14:	b2db      	uxtb	r3, r3
 8015a16:	e008      	b.n	8015a2a <HAL_ADC_Init+0x142>
 8015a18:	4862      	ldr	r0, [pc, #392]	; (8015ba4 <HAL_ADC_Init+0x2bc>)
 8015a1a:	f7ff ff17 	bl	801584c <LL_ADC_IsEnabled>
 8015a1e:	4603      	mov	r3, r0
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	bf0c      	ite	eq
 8015a24:	2301      	moveq	r3, #1
 8015a26:	2300      	movne	r3, #0
 8015a28:	b2db      	uxtb	r3, r3
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d012      	beq.n	8015a54 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	681b      	ldr	r3, [r3, #0]
 8015a32:	4a5a      	ldr	r2, [pc, #360]	; (8015b9c <HAL_ADC_Init+0x2b4>)
 8015a34:	4293      	cmp	r3, r2
 8015a36:	d004      	beq.n	8015a42 <HAL_ADC_Init+0x15a>
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	4a58      	ldr	r2, [pc, #352]	; (8015ba0 <HAL_ADC_Init+0x2b8>)
 8015a3e:	4293      	cmp	r3, r2
 8015a40:	d101      	bne.n	8015a46 <HAL_ADC_Init+0x15e>
 8015a42:	4a59      	ldr	r2, [pc, #356]	; (8015ba8 <HAL_ADC_Init+0x2c0>)
 8015a44:	e000      	b.n	8015a48 <HAL_ADC_Init+0x160>
 8015a46:	4a59      	ldr	r2, [pc, #356]	; (8015bac <HAL_ADC_Init+0x2c4>)
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	685b      	ldr	r3, [r3, #4]
 8015a4c:	4619      	mov	r1, r3
 8015a4e:	4610      	mov	r0, r2
 8015a50:	f7ff fc5e 	bl	8015310 <LL_ADC_SetCommonClock>
                hadc->Init.Overrun                                                    |
                hadc->Init.Resolution                                                 |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));

#elif defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	4a52      	ldr	r2, [pc, #328]	; (8015ba4 <HAL_ADC_Init+0x2bc>)
 8015a5a:	4293      	cmp	r3, r2
 8015a5c:	d129      	bne.n	8015ab2 <HAL_ADC_Init+0x1ca>
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	7e5b      	ldrb	r3, [r3, #25]
 8015a62:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                     |
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015a68:	431a      	orrs	r2, r3
                  hadc->Init.DataAlign                                                   |
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	68db      	ldr	r3, [r3, #12]
                  hadc->Init.Overrun                                                     |
 8015a6e:	431a      	orrs	r2, r3
                  ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)) << 1UL)                                                   |
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	689b      	ldr	r3, [r3, #8]
 8015a74:	2b08      	cmp	r3, #8
 8015a76:	d013      	beq.n	8015aa0 <HAL_ADC_Init+0x1b8>
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	689b      	ldr	r3, [r3, #8]
 8015a7c:	2b0c      	cmp	r3, #12
 8015a7e:	d00d      	beq.n	8015a9c <HAL_ADC_Init+0x1b4>
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	689b      	ldr	r3, [r3, #8]
 8015a84:	2b1c      	cmp	r3, #28
 8015a86:	d007      	beq.n	8015a98 <HAL_ADC_Init+0x1b0>
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	689b      	ldr	r3, [r3, #8]
 8015a8c:	2b18      	cmp	r3, #24
 8015a8e:	d101      	bne.n	8015a94 <HAL_ADC_Init+0x1ac>
 8015a90:	2318      	movs	r3, #24
 8015a92:	e006      	b.n	8015aa2 <HAL_ADC_Init+0x1ba>
 8015a94:	2300      	movs	r3, #0
 8015a96:	e004      	b.n	8015aa2 <HAL_ADC_Init+0x1ba>
 8015a98:	2310      	movs	r3, #16
 8015a9a:	e002      	b.n	8015aa2 <HAL_ADC_Init+0x1ba>
 8015a9c:	2308      	movs	r3, #8
 8015a9e:	e000      	b.n	8015aa2 <HAL_ADC_Init+0x1ba>
 8015aa0:	2300      	movs	r3, #0
                  hadc->Init.DataAlign                                                   |
 8015aa2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015aaa:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 8015aac:	4313      	orrs	r3, r2
 8015aae:	61bb      	str	r3, [r7, #24]
 8015ab0:	e00e      	b.n	8015ad0 <HAL_ADC_Init+0x1e8>
    }
    else
    {
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	7e5b      	ldrb	r3, [r3, #25]
 8015ab6:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015abc:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8015ac2:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015aca:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8015acc:	4313      	orrs	r3, r2
 8015ace:	61bb      	str	r3, [r7, #24]
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015ad6:	2b01      	cmp	r3, #1
 8015ad8:	d106      	bne.n	8015ae8 <HAL_ADC_Init+0x200>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8015ada:	687b      	ldr	r3, [r7, #4]
 8015adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ade:	3b01      	subs	r3, #1
 8015ae0:	045b      	lsls	r3, r3, #17
 8015ae2:	69ba      	ldr	r2, [r7, #24]
 8015ae4:	4313      	orrs	r3, r2
 8015ae6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d009      	beq.n	8015b04 <HAL_ADC_Init+0x21c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015af4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015afc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8015afe:	69ba      	ldr	r2, [r7, #24]
 8015b00:	4313      	orrs	r3, r2
 8015b02:	61bb      	str	r3, [r7, #24]
                 );
    }


#if defined(ADC_VER_V5_V90)
    if (hadc->Instance == ADC3)
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	4a26      	ldr	r2, [pc, #152]	; (8015ba4 <HAL_ADC_Init+0x2bc>)
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	d115      	bne.n	8015b3a <HAL_ADC_Init+0x252>
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	68da      	ldr	r2, [r3, #12]
 8015b14:	4b26      	ldr	r3, [pc, #152]	; (8015bb0 <HAL_ADC_Init+0x2c8>)
 8015b16:	4013      	ands	r3, r2
 8015b18:	687a      	ldr	r2, [r7, #4]
 8015b1a:	6812      	ldr	r2, [r2, #0]
 8015b1c:	69b9      	ldr	r1, [r7, #24]
 8015b1e:	430b      	orrs	r3, r1
 8015b20:	60d3      	str	r3, [r2, #12]
      /* Configuration of sampling mode */
      MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8015b22:	687b      	ldr	r3, [r7, #4]
 8015b24:	681b      	ldr	r3, [r3, #0]
 8015b26:	691b      	ldr	r3, [r3, #16]
 8015b28:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	681b      	ldr	r3, [r3, #0]
 8015b34:	430a      	orrs	r2, r1
 8015b36:	611a      	str	r2, [r3, #16]
 8015b38:	e009      	b.n	8015b4e <HAL_ADC_Init+0x266>
    }
    else
    {
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	68da      	ldr	r2, [r3, #12]
 8015b40:	4b1c      	ldr	r3, [pc, #112]	; (8015bb4 <HAL_ADC_Init+0x2cc>)
 8015b42:	4013      	ands	r3, r2
 8015b44:	687a      	ldr	r2, [r7, #4]
 8015b46:	6812      	ldr	r2, [r2, #0]
 8015b48:	69b9      	ldr	r1, [r7, #24]
 8015b4a:	430b      	orrs	r3, r1
 8015b4c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	681b      	ldr	r3, [r3, #0]
 8015b52:	4618      	mov	r0, r3
 8015b54:	f7ff fea2 	bl	801589c <LL_ADC_REG_IsConversionOngoing>
 8015b58:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7ff feaf 	bl	80158c2 <LL_ADC_INJ_IsConversionOngoing>
 8015b64:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8015b66:	693b      	ldr	r3, [r7, #16]
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	f040 808e 	bne.w	8015c8a <HAL_ADC_Init+0x3a2>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	f040 808a 	bne.w	8015c8a <HAL_ADC_Init+0x3a2>
       )
    {
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8015b76:	687b      	ldr	r3, [r7, #4]
 8015b78:	681b      	ldr	r3, [r3, #0]
 8015b7a:	4a0a      	ldr	r2, [pc, #40]	; (8015ba4 <HAL_ADC_Init+0x2bc>)
 8015b7c:	4293      	cmp	r3, r2
 8015b7e:	d11b      	bne.n	8015bb8 <HAL_ADC_Init+0x2d0>
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	7e1b      	ldrb	r3, [r3, #24]
 8015b84:	039a      	lsls	r2, r3, #14
                    ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015b8c:	005b      	lsls	r3, r3, #1
        tmpCFGR = (
 8015b8e:	4313      	orrs	r3, r2
 8015b90:	61bb      	str	r3, [r7, #24]
 8015b92:	e018      	b.n	8015bc6 <HAL_ADC_Init+0x2de>
 8015b94:	24000004 	.word	0x24000004
 8015b98:	053e2d63 	.word	0x053e2d63
 8015b9c:	40022000 	.word	0x40022000
 8015ba0:	40022100 	.word	0x40022100
 8015ba4:	58026000 	.word	0x58026000
 8015ba8:	40022300 	.word	0x40022300
 8015bac:	58026300 	.word	0x58026300
 8015bb0:	fff04007 	.word	0xfff04007
 8015bb4:	fff0c003 	.word	0xfff0c003
      }
      else
      {
        tmpCFGR = (
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	7e1b      	ldrb	r3, [r3, #24]
 8015bbc:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        tmpCFGR = (
 8015bc2:	4313      	orrs	r3, r2
 8015bc4:	61bb      	str	r3, [r7, #24]
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	68da      	ldr	r2, [r3, #12]
 8015bcc:	4b46      	ldr	r3, [pc, #280]	; (8015ce8 <HAL_ADC_Init+0x400>)
 8015bce:	4013      	ands	r3, r2
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	6812      	ldr	r2, [r2, #0]
 8015bd4:	69b9      	ldr	r1, [r7, #24]
 8015bd6:	430b      	orrs	r3, r1
 8015bd8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	d137      	bne.n	8015c54 <HAL_ADC_Init+0x36c>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015be8:	2b00      	cmp	r3, #0
          /* Multi trigger is not applicable to software-triggered conversions */
          assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER));
        }

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	681b      	ldr	r3, [r3, #0]
 8015bee:	4a3f      	ldr	r2, [pc, #252]	; (8015cec <HAL_ADC_Init+0x404>)
 8015bf0:	4293      	cmp	r3, r2
 8015bf2:	d116      	bne.n	8015c22 <HAL_ADC_Init+0x33a>
          /* Configuration of Oversampler:                                      */
          /*  - Oversampling Ratio                                              */
          /*  - Right bit shift                                                 */
          /*  - Triggered mode                                                  */
          /*  - Oversampling mode (continued/resumed)                           */
          MODIFY_REG(hadc->Instance->CFGR2,
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	681b      	ldr	r3, [r3, #0]
 8015bf8:	691a      	ldr	r2, [r3, #16]
 8015bfa:	4b3d      	ldr	r3, [pc, #244]	; (8015cf0 <HAL_ADC_Init+0x408>)
 8015bfc:	4013      	ands	r3, r2
 8015bfe:	687a      	ldr	r2, [r7, #4]
 8015c00:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8015c02:	687a      	ldr	r2, [r7, #4]
 8015c04:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015c06:	4311      	orrs	r1, r2
 8015c08:	687a      	ldr	r2, [r7, #4]
 8015c0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015c0c:	4311      	orrs	r1, r2
 8015c0e:	687a      	ldr	r2, [r7, #4]
 8015c10:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015c12:	430a      	orrs	r2, r1
 8015c14:	431a      	orrs	r2, r3
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	f042 0201 	orr.w	r2, r2, #1
 8015c1e:	611a      	str	r2, [r3, #16]
 8015c20:	e020      	b.n	8015c64 <HAL_ADC_Init+0x37c>
          /*  - Oversampling Ratio                                               */
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	681b      	ldr	r3, [r3, #0]
 8015c26:	691a      	ldr	r2, [r3, #16]
 8015c28:	4b32      	ldr	r3, [pc, #200]	; (8015cf4 <HAL_ADC_Init+0x40c>)
 8015c2a:	4013      	ands	r3, r2
 8015c2c:	687a      	ldr	r2, [r7, #4]
 8015c2e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8015c30:	3a01      	subs	r2, #1
 8015c32:	0411      	lsls	r1, r2, #16
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8015c38:	4311      	orrs	r1, r2
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8015c3e:	4311      	orrs	r1, r2
 8015c40:	687a      	ldr	r2, [r7, #4]
 8015c42:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8015c44:	430a      	orrs	r2, r1
 8015c46:	431a      	orrs	r2, r3
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	f042 0201 	orr.w	r2, r2, #1
 8015c50:	611a      	str	r2, [r3, #16]
 8015c52:	e007      	b.n	8015c64 <HAL_ADC_Init+0x37c>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	691a      	ldr	r2, [r3, #16]
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	681b      	ldr	r3, [r3, #0]
 8015c5e:	f022 0201 	bic.w	r2, r2, #1
 8015c62:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	681b      	ldr	r3, [r3, #0]
 8015c68:	691b      	ldr	r3, [r3, #16]
 8015c6a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	430a      	orrs	r2, r1
 8015c78:	611a      	str	r2, [r3, #16]
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance != ADC3)
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	681b      	ldr	r3, [r3, #0]
 8015c7e:	4a1b      	ldr	r2, [pc, #108]	; (8015cec <HAL_ADC_Init+0x404>)
 8015c80:	4293      	cmp	r3, r2
 8015c82:	d002      	beq.n	8015c8a <HAL_ADC_Init+0x3a2>
      {
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
 8015c84:	6878      	ldr	r0, [r7, #4]
 8015c86:	f001 f9b5 	bl	8016ff4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	691b      	ldr	r3, [r3, #16]
 8015c8e:	2b01      	cmp	r3, #1
 8015c90:	d10c      	bne.n	8015cac <HAL_ADC_Init+0x3c4>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c98:	f023 010f 	bic.w	r1, r3, #15
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	69db      	ldr	r3, [r3, #28]
 8015ca0:	1e5a      	subs	r2, r3, #1
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	430a      	orrs	r2, r1
 8015ca8:	631a      	str	r2, [r3, #48]	; 0x30
 8015caa:	e007      	b.n	8015cbc <HAL_ADC_Init+0x3d4>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	681b      	ldr	r3, [r3, #0]
 8015cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	681b      	ldr	r3, [r3, #0]
 8015cb6:	f022 020f 	bic.w	r2, r2, #15
 8015cba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015cc0:	f023 0303 	bic.w	r3, r3, #3
 8015cc4:	f043 0201 	orr.w	r2, r3, #1
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	661a      	str	r2, [r3, #96]	; 0x60
 8015ccc:	e007      	b.n	8015cde <HAL_ADC_Init+0x3f6>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015cd2:	f043 0210 	orr.w	r2, r3, #16
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8015cda:	2301      	movs	r3, #1
 8015cdc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8015cde:	7ffb      	ldrb	r3, [r7, #31]
}
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	3724      	adds	r7, #36	; 0x24
 8015ce4:	46bd      	mov	sp, r7
 8015ce6:	bd90      	pop	{r4, r7, pc}
 8015ce8:	ffffbffc 	.word	0xffffbffc
 8015cec:	58026000 	.word	0x58026000
 8015cf0:	fc00f81f 	.word	0xfc00f81f
 8015cf4:	fc00f81e 	.word	0xfc00f81e

08015cf8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8015cf8:	b580      	push	{r7, lr}
 8015cfa:	b086      	sub	sp, #24
 8015cfc:	af00      	add	r7, sp, #0
 8015cfe:	60f8      	str	r0, [r7, #12]
 8015d00:	60b9      	str	r1, [r7, #8]
 8015d02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015d04:	68fb      	ldr	r3, [r7, #12]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	4a60      	ldr	r2, [pc, #384]	; (8015e8c <HAL_ADC_Start_DMA+0x194>)
 8015d0a:	4293      	cmp	r3, r2
 8015d0c:	d004      	beq.n	8015d18 <HAL_ADC_Start_DMA+0x20>
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	4a5f      	ldr	r2, [pc, #380]	; (8015e90 <HAL_ADC_Start_DMA+0x198>)
 8015d14:	4293      	cmp	r3, r2
 8015d16:	d101      	bne.n	8015d1c <HAL_ADC_Start_DMA+0x24>
 8015d18:	4b5e      	ldr	r3, [pc, #376]	; (8015e94 <HAL_ADC_Start_DMA+0x19c>)
 8015d1a:	e000      	b.n	8015d1e <HAL_ADC_Start_DMA+0x26>
 8015d1c:	4b5e      	ldr	r3, [pc, #376]	; (8015e98 <HAL_ADC_Start_DMA+0x1a0>)
 8015d1e:	4618      	mov	r0, r3
 8015d20:	f7ff fd16 	bl	8015750 <LL_ADC_GetMultimode>
 8015d24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	4618      	mov	r0, r3
 8015d2c:	f7ff fdb6 	bl	801589c <LL_ADC_REG_IsConversionOngoing>
 8015d30:	4603      	mov	r3, r0
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	f040 80a2 	bne.w	8015e7c <HAL_ADC_Start_DMA+0x184>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8015d3e:	2b01      	cmp	r3, #1
 8015d40:	d101      	bne.n	8015d46 <HAL_ADC_Start_DMA+0x4e>
 8015d42:	2302      	movs	r3, #2
 8015d44:	e09d      	b.n	8015e82 <HAL_ADC_Start_DMA+0x18a>
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	2201      	movs	r2, #1
 8015d4a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d006      	beq.n	8015d62 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015d54:	693b      	ldr	r3, [r7, #16]
 8015d56:	2b05      	cmp	r3, #5
 8015d58:	d003      	beq.n	8015d62 <HAL_ADC_Start_DMA+0x6a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015d5a:	693b      	ldr	r3, [r7, #16]
 8015d5c:	2b09      	cmp	r3, #9
 8015d5e:	f040 8086 	bne.w	8015e6e <HAL_ADC_Start_DMA+0x176>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8015d62:	68f8      	ldr	r0, [r7, #12]
 8015d64:	f001 f828 	bl	8016db8 <ADC_Enable>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8015d6c:	7dfb      	ldrb	r3, [r7, #23]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d178      	bne.n	8015e64 <HAL_ADC_Start_DMA+0x16c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8015d76:	4b49      	ldr	r3, [pc, #292]	; (8015e9c <HAL_ADC_Start_DMA+0x1a4>)
 8015d78:	4013      	ands	r3, r2
 8015d7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	661a      	str	r2, [r3, #96]	; 0x60
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	681b      	ldr	r3, [r3, #0]
 8015d86:	4a42      	ldr	r2, [pc, #264]	; (8015e90 <HAL_ADC_Start_DMA+0x198>)
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	d002      	beq.n	8015d92 <HAL_ADC_Start_DMA+0x9a>
 8015d8c:	68fb      	ldr	r3, [r7, #12]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	e000      	b.n	8015d94 <HAL_ADC_Start_DMA+0x9c>
 8015d92:	4b3e      	ldr	r3, [pc, #248]	; (8015e8c <HAL_ADC_Start_DMA+0x194>)
 8015d94:	68fa      	ldr	r2, [r7, #12]
 8015d96:	6812      	ldr	r2, [r2, #0]
 8015d98:	4293      	cmp	r3, r2
 8015d9a:	d002      	beq.n	8015da2 <HAL_ADC_Start_DMA+0xaa>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d105      	bne.n	8015dae <HAL_ADC_Start_DMA+0xb6>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8015da2:	68fb      	ldr	r3, [r7, #12]
 8015da4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015da6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015daa:	68fb      	ldr	r3, [r7, #12]
 8015dac:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015db2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d006      	beq.n	8015dc8 <HAL_ADC_Start_DMA+0xd0>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8015dba:	68fb      	ldr	r3, [r7, #12]
 8015dbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8015dbe:	f023 0206 	bic.w	r2, r3, #6
 8015dc2:	68fb      	ldr	r3, [r7, #12]
 8015dc4:	665a      	str	r2, [r3, #100]	; 0x64
 8015dc6:	e002      	b.n	8015dce <HAL_ADC_Start_DMA+0xd6>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8015dc8:	68fb      	ldr	r3, [r7, #12]
 8015dca:	2200      	movs	r2, #0
 8015dcc:	665a      	str	r2, [r3, #100]	; 0x64
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dd2:	4a33      	ldr	r2, [pc, #204]	; (8015ea0 <HAL_ADC_Start_DMA+0x1a8>)
 8015dd4:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8015dd6:	68fb      	ldr	r3, [r7, #12]
 8015dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015dda:	4a32      	ldr	r2, [pc, #200]	; (8015ea4 <HAL_ADC_Start_DMA+0x1ac>)
 8015ddc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8015dde:	68fb      	ldr	r3, [r7, #12]
 8015de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015de2:	4a31      	ldr	r2, [pc, #196]	; (8015ea8 <HAL_ADC_Start_DMA+0x1b0>)
 8015de4:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	681b      	ldr	r3, [r3, #0]
 8015dea:	221c      	movs	r2, #28
 8015dec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	2200      	movs	r2, #0
 8015df2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	685a      	ldr	r2, [r3, #4]
 8015dfc:	68fb      	ldr	r3, [r7, #12]
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	f042 0210 	orr.w	r2, r2, #16
 8015e04:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA  mode*/
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 8015e06:	68fb      	ldr	r3, [r7, #12]
 8015e08:	681b      	ldr	r3, [r3, #0]
 8015e0a:	4a28      	ldr	r2, [pc, #160]	; (8015eac <HAL_ADC_Start_DMA+0x1b4>)
 8015e0c:	4293      	cmp	r3, r2
 8015e0e:	d10f      	bne.n	8015e30 <HAL_ADC_Start_DMA+0x138>
        {
          LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	681a      	ldr	r2, [r3, #0]
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8015e1a:	005b      	lsls	r3, r3, #1
 8015e1c:	4619      	mov	r1, r3
 8015e1e:	4610      	mov	r0, r2
 8015e20:	f7ff fbfe 	bl	8015620 <LL_ADC_REG_SetDMATransferMode>
          LL_ADC_EnableDMAReq(hadc->Instance);
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	4618      	mov	r0, r3
 8015e2a:	f7ff fbe9 	bl	8015600 <LL_ADC_EnableDMAReq>
 8015e2e:	e007      	b.n	8015e40 <HAL_ADC_Start_DMA+0x148>
        }
        else
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e38:	4619      	mov	r1, r3
 8015e3a:	4610      	mov	r0, r2
 8015e3c:	f7ff fbcd 	bl	80155da <LL_ADC_REG_SetDataTransferMode>
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8015e40:	68fb      	ldr	r3, [r7, #12]
 8015e42:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	3340      	adds	r3, #64	; 0x40
 8015e4a:	4619      	mov	r1, r3
 8015e4c:	68ba      	ldr	r2, [r7, #8]
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	f001 ff7c 	bl	8017d4c <HAL_DMA_Start_IT>
 8015e54:	4603      	mov	r3, r0
 8015e56:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8015e58:	68fb      	ldr	r3, [r7, #12]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	4618      	mov	r0, r3
 8015e5e:	f7ff fd09 	bl	8015874 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8015e62:	e00d      	b.n	8015e80 <HAL_ADC_Start_DMA+0x188>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8015e64:	68fb      	ldr	r3, [r7, #12]
 8015e66:	2200      	movs	r2, #0
 8015e68:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
      if (tmp_hal_status == HAL_OK)
 8015e6c:	e008      	b.n	8015e80 <HAL_ADC_Start_DMA+0x188>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8015e6e:	2301      	movs	r3, #1
 8015e70:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	2200      	movs	r2, #0
 8015e76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8015e7a:	e001      	b.n	8015e80 <HAL_ADC_Start_DMA+0x188>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8015e7c:	2302      	movs	r3, #2
 8015e7e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8015e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8015e82:	4618      	mov	r0, r3
 8015e84:	3718      	adds	r7, #24
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}
 8015e8a:	bf00      	nop
 8015e8c:	40022000 	.word	0x40022000
 8015e90:	40022100 	.word	0x40022100
 8015e94:	40022300 	.word	0x40022300
 8015e98:	58026300 	.word	0x58026300
 8015e9c:	fffff0fe 	.word	0xfffff0fe
 8015ea0:	08016ecd 	.word	0x08016ecd
 8015ea4:	08016fa5 	.word	0x08016fa5
 8015ea8:	08016fc1 	.word	0x08016fc1
 8015eac:	58026000 	.word	0x58026000

08015eb0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8015eb0:	b580      	push	{r7, lr}
 8015eb2:	b08a      	sub	sp, #40	; 0x28
 8015eb4:	af00      	add	r7, sp, #0
 8015eb6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8015eb8:	2300      	movs	r3, #0
 8015eba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	685b      	ldr	r3, [r3, #4]
 8015eca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	4a87      	ldr	r2, [pc, #540]	; (80160f0 <HAL_ADC_IRQHandler+0x240>)
 8015ed2:	4293      	cmp	r3, r2
 8015ed4:	d004      	beq.n	8015ee0 <HAL_ADC_IRQHandler+0x30>
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681b      	ldr	r3, [r3, #0]
 8015eda:	4a86      	ldr	r2, [pc, #536]	; (80160f4 <HAL_ADC_IRQHandler+0x244>)
 8015edc:	4293      	cmp	r3, r2
 8015ede:	d101      	bne.n	8015ee4 <HAL_ADC_IRQHandler+0x34>
 8015ee0:	4b85      	ldr	r3, [pc, #532]	; (80160f8 <HAL_ADC_IRQHandler+0x248>)
 8015ee2:	e000      	b.n	8015ee6 <HAL_ADC_IRQHandler+0x36>
 8015ee4:	4b85      	ldr	r3, [pc, #532]	; (80160fc <HAL_ADC_IRQHandler+0x24c>)
 8015ee6:	4618      	mov	r0, r3
 8015ee8:	f7ff fc32 	bl	8015750 <LL_ADC_GetMultimode>
 8015eec:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8015eee:	69fb      	ldr	r3, [r7, #28]
 8015ef0:	f003 0302 	and.w	r3, r3, #2
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d017      	beq.n	8015f28 <HAL_ADC_IRQHandler+0x78>
 8015ef8:	69bb      	ldr	r3, [r7, #24]
 8015efa:	f003 0302 	and.w	r3, r3, #2
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d012      	beq.n	8015f28 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f06:	f003 0310 	and.w	r3, r3, #16
 8015f0a:	2b00      	cmp	r3, #0
 8015f0c:	d105      	bne.n	8015f1a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f12:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	661a      	str	r2, [r3, #96]	; 0x60

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8015f1a:	6878      	ldr	r0, [r7, #4]
 8015f1c:	f001 f9a6 	bl	801726c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	681b      	ldr	r3, [r3, #0]
 8015f24:	2202      	movs	r2, #2
 8015f26:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	f003 0304 	and.w	r3, r3, #4
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d004      	beq.n	8015f3c <HAL_ADC_IRQHandler+0x8c>
 8015f32:	69bb      	ldr	r3, [r7, #24]
 8015f34:	f003 0304 	and.w	r3, r3, #4
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d10a      	bne.n	8015f52 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015f3c:	69fb      	ldr	r3, [r7, #28]
 8015f3e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	f000 8083 	beq.w	801604e <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8015f48:	69bb      	ldr	r3, [r7, #24]
 8015f4a:	f003 0308 	and.w	r3, r3, #8
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d07d      	beq.n	801604e <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8015f52:	687b      	ldr	r3, [r7, #4]
 8015f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f56:	f003 0310 	and.w	r3, r3, #16
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d105      	bne.n	8015f6a <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8015f62:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	681b      	ldr	r3, [r3, #0]
 8015f6e:	4618      	mov	r0, r3
 8015f70:	f7ff faf4 	bl	801555c <LL_ADC_REG_IsTriggerSourceSWStart>
 8015f74:	4603      	mov	r3, r0
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d062      	beq.n	8016040 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	681b      	ldr	r3, [r3, #0]
 8015f7e:	4a5d      	ldr	r2, [pc, #372]	; (80160f4 <HAL_ADC_IRQHandler+0x244>)
 8015f80:	4293      	cmp	r3, r2
 8015f82:	d002      	beq.n	8015f8a <HAL_ADC_IRQHandler+0xda>
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	e000      	b.n	8015f8c <HAL_ADC_IRQHandler+0xdc>
 8015f8a:	4b59      	ldr	r3, [pc, #356]	; (80160f0 <HAL_ADC_IRQHandler+0x240>)
 8015f8c:	687a      	ldr	r2, [r7, #4]
 8015f8e:	6812      	ldr	r2, [r2, #0]
 8015f90:	4293      	cmp	r3, r2
 8015f92:	d008      	beq.n	8015fa6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8015f94:	697b      	ldr	r3, [r7, #20]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d005      	beq.n	8015fa6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8015f9a:	697b      	ldr	r3, [r7, #20]
 8015f9c:	2b05      	cmp	r3, #5
 8015f9e:	d002      	beq.n	8015fa6 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8015fa0:	697b      	ldr	r3, [r7, #20]
 8015fa2:	2b09      	cmp	r3, #9
 8015fa4:	d104      	bne.n	8015fb0 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	681b      	ldr	r3, [r3, #0]
 8015faa:	68db      	ldr	r3, [r3, #12]
 8015fac:	623b      	str	r3, [r7, #32]
 8015fae:	e00c      	b.n	8015fca <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	4a4f      	ldr	r2, [pc, #316]	; (80160f4 <HAL_ADC_IRQHandler+0x244>)
 8015fb6:	4293      	cmp	r3, r2
 8015fb8:	d002      	beq.n	8015fc0 <HAL_ADC_IRQHandler+0x110>
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	681b      	ldr	r3, [r3, #0]
 8015fbe:	e000      	b.n	8015fc2 <HAL_ADC_IRQHandler+0x112>
 8015fc0:	4b4b      	ldr	r3, [pc, #300]	; (80160f0 <HAL_ADC_IRQHandler+0x240>)
 8015fc2:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8015fc4:	693b      	ldr	r3, [r7, #16]
 8015fc6:	68db      	ldr	r3, [r3, #12]
 8015fc8:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8015fca:	6a3b      	ldr	r3, [r7, #32]
 8015fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d135      	bne.n	8016040 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	f003 0308 	and.w	r3, r3, #8
 8015fde:	2b08      	cmp	r3, #8
 8015fe0:	d12e      	bne.n	8016040 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	4618      	mov	r0, r3
 8015fe8:	f7ff fc58 	bl	801589c <LL_ADC_REG_IsConversionOngoing>
 8015fec:	4603      	mov	r3, r0
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d11a      	bne.n	8016028 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	685a      	ldr	r2, [r3, #4]
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	f022 020c 	bic.w	r2, r2, #12
 8016000:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016006:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	661a      	str	r2, [r3, #96]	; 0x60

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 801600e:	687b      	ldr	r3, [r7, #4]
 8016010:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016012:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016016:	2b00      	cmp	r3, #0
 8016018:	d112      	bne.n	8016040 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801601e:	f043 0201 	orr.w	r2, r3, #1
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	661a      	str	r2, [r3, #96]	; 0x60
 8016026:	e00b      	b.n	8016040 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016028:	687b      	ldr	r3, [r7, #4]
 801602a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801602c:	f043 0210 	orr.w	r2, r3, #16
 8016030:	687b      	ldr	r3, [r7, #4]
 8016032:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016038:	f043 0201 	orr.w	r2, r3, #1
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	665a      	str	r2, [r3, #100]	; 0x64
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f7f8 f8d0 	bl	800e1e6 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	681b      	ldr	r3, [r3, #0]
 801604a:	220c      	movs	r2, #12
 801604c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 801604e:	69fb      	ldr	r3, [r7, #28]
 8016050:	f003 0320 	and.w	r3, r3, #32
 8016054:	2b00      	cmp	r3, #0
 8016056:	d004      	beq.n	8016062 <HAL_ADC_IRQHandler+0x1b2>
 8016058:	69bb      	ldr	r3, [r7, #24]
 801605a:	f003 0320 	and.w	r3, r3, #32
 801605e:	2b00      	cmp	r3, #0
 8016060:	d10b      	bne.n	801607a <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8016062:	69fb      	ldr	r3, [r7, #28]
 8016064:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8016068:	2b00      	cmp	r3, #0
 801606a:	f000 80a0 	beq.w	80161ae <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801606e:	69bb      	ldr	r3, [r7, #24]
 8016070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016074:	2b00      	cmp	r3, #0
 8016076:	f000 809a 	beq.w	80161ae <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 801607a:	687b      	ldr	r3, [r7, #4]
 801607c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801607e:	f003 0310 	and.w	r3, r3, #16
 8016082:	2b00      	cmp	r3, #0
 8016084:	d105      	bne.n	8016092 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8016086:	687b      	ldr	r3, [r7, #4]
 8016088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801608a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4618      	mov	r0, r3
 8016098:	f7ff fadc 	bl	8015654 <LL_ADC_INJ_IsTriggerSourceSWStart>
 801609c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	4618      	mov	r0, r3
 80160a4:	f7ff fa5a 	bl	801555c <LL_ADC_REG_IsTriggerSourceSWStart>
 80160a8:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	4a11      	ldr	r2, [pc, #68]	; (80160f4 <HAL_ADC_IRQHandler+0x244>)
 80160b0:	4293      	cmp	r3, r2
 80160b2:	d002      	beq.n	80160ba <HAL_ADC_IRQHandler+0x20a>
 80160b4:	687b      	ldr	r3, [r7, #4]
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	e000      	b.n	80160bc <HAL_ADC_IRQHandler+0x20c>
 80160ba:	4b0d      	ldr	r3, [pc, #52]	; (80160f0 <HAL_ADC_IRQHandler+0x240>)
 80160bc:	687a      	ldr	r2, [r7, #4]
 80160be:	6812      	ldr	r2, [r2, #0]
 80160c0:	4293      	cmp	r3, r2
 80160c2:	d008      	beq.n	80160d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80160c4:	697b      	ldr	r3, [r7, #20]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d005      	beq.n	80160d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80160ca:	697b      	ldr	r3, [r7, #20]
 80160cc:	2b06      	cmp	r3, #6
 80160ce:	d002      	beq.n	80160d6 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80160d0:	697b      	ldr	r3, [r7, #20]
 80160d2:	2b07      	cmp	r3, #7
 80160d4:	d104      	bne.n	80160e0 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	681b      	ldr	r3, [r3, #0]
 80160da:	68db      	ldr	r3, [r3, #12]
 80160dc:	623b      	str	r3, [r7, #32]
 80160de:	e014      	b.n	801610a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80160e0:	687b      	ldr	r3, [r7, #4]
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	4a03      	ldr	r2, [pc, #12]	; (80160f4 <HAL_ADC_IRQHandler+0x244>)
 80160e6:	4293      	cmp	r3, r2
 80160e8:	d00a      	beq.n	8016100 <HAL_ADC_IRQHandler+0x250>
 80160ea:	687b      	ldr	r3, [r7, #4]
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	e008      	b.n	8016102 <HAL_ADC_IRQHandler+0x252>
 80160f0:	40022000 	.word	0x40022000
 80160f4:	40022100 	.word	0x40022100
 80160f8:	40022300 	.word	0x40022300
 80160fc:	58026300 	.word	0x58026300
 8016100:	4b84      	ldr	r3, [pc, #528]	; (8016314 <HAL_ADC_IRQHandler+0x464>)
 8016102:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8016104:	693b      	ldr	r3, [r7, #16]
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	2b00      	cmp	r3, #0
 801610e:	d047      	beq.n	80161a0 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8016110:	6a3b      	ldr	r3, [r7, #32]
 8016112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016116:	2b00      	cmp	r3, #0
 8016118:	d007      	beq.n	801612a <HAL_ADC_IRQHandler+0x27a>
 801611a:	68bb      	ldr	r3, [r7, #8]
 801611c:	2b00      	cmp	r3, #0
 801611e:	d03f      	beq.n	80161a0 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8016120:	6a3b      	ldr	r3, [r7, #32]
 8016122:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8016126:	2b00      	cmp	r3, #0
 8016128:	d13a      	bne.n	80161a0 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016134:	2b40      	cmp	r3, #64	; 0x40
 8016136:	d133      	bne.n	80161a0 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8016138:	6a3b      	ldr	r3, [r7, #32]
 801613a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801613e:	2b00      	cmp	r3, #0
 8016140:	d12e      	bne.n	80161a0 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8016142:	687b      	ldr	r3, [r7, #4]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	4618      	mov	r0, r3
 8016148:	f7ff fbbb 	bl	80158c2 <LL_ADC_INJ_IsConversionOngoing>
 801614c:	4603      	mov	r3, r0
 801614e:	2b00      	cmp	r3, #0
 8016150:	d11a      	bne.n	8016188 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	685a      	ldr	r2, [r3, #4]
 8016158:	687b      	ldr	r3, [r7, #4]
 801615a:	681b      	ldr	r3, [r3, #0]
 801615c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8016160:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016166:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	661a      	str	r2, [r3, #96]	; 0x60

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016176:	2b00      	cmp	r3, #0
 8016178:	d112      	bne.n	80161a0 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 801617a:	687b      	ldr	r3, [r7, #4]
 801617c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801617e:	f043 0201 	orr.w	r2, r3, #1
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	661a      	str	r2, [r3, #96]	; 0x60
 8016186:	e00b      	b.n	80161a0 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801618c:	f043 0210 	orr.w	r2, r3, #16
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	661a      	str	r2, [r3, #96]	; 0x60

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016198:	f043 0201 	orr.w	r2, r3, #1
 801619c:	687b      	ldr	r3, [r7, #4]
 801619e:	665a      	str	r2, [r3, #100]	; 0x64
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f001 f83b 	bl	801721c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	2260      	movs	r2, #96	; 0x60
 80161ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80161ae:	69fb      	ldr	r3, [r7, #28]
 80161b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d011      	beq.n	80161dc <HAL_ADC_IRQHandler+0x32c>
 80161b8:	69bb      	ldr	r3, [r7, #24]
 80161ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80161be:	2b00      	cmp	r3, #0
 80161c0:	d00c      	beq.n	80161dc <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80161ca:	687b      	ldr	r3, [r7, #4]
 80161cc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f000 f8b2 	bl	8016338 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	2280      	movs	r2, #128	; 0x80
 80161da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d012      	beq.n	801620c <HAL_ADC_IRQHandler+0x35c>
 80161e6:	69bb      	ldr	r3, [r7, #24]
 80161e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80161ec:	2b00      	cmp	r3, #0
 80161ee:	d00d      	beq.n	801620c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80161f4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80161fc:	6878      	ldr	r0, [r7, #4]
 80161fe:	f001 f821 	bl	8017244 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	681b      	ldr	r3, [r3, #0]
 8016206:	f44f 7280 	mov.w	r2, #256	; 0x100
 801620a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 801620c:	69fb      	ldr	r3, [r7, #28]
 801620e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016212:	2b00      	cmp	r3, #0
 8016214:	d012      	beq.n	801623c <HAL_ADC_IRQHandler+0x38c>
 8016216:	69bb      	ldr	r3, [r7, #24]
 8016218:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801621c:	2b00      	cmp	r3, #0
 801621e:	d00d      	beq.n	801623c <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016224:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8016228:	687b      	ldr	r3, [r7, #4]
 801622a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 801622c:	6878      	ldr	r0, [r7, #4]
 801622e:	f001 f813 	bl	8017258 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	f44f 7200 	mov.w	r2, #512	; 0x200
 801623a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 801623c:	69fb      	ldr	r3, [r7, #28]
 801623e:	f003 0310 	and.w	r3, r3, #16
 8016242:	2b00      	cmp	r3, #0
 8016244:	d043      	beq.n	80162ce <HAL_ADC_IRQHandler+0x41e>
 8016246:	69bb      	ldr	r3, [r7, #24]
 8016248:	f003 0310 	and.w	r3, r3, #16
 801624c:	2b00      	cmp	r3, #0
 801624e:	d03e      	beq.n	80162ce <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016254:	2b00      	cmp	r3, #0
 8016256:	d102      	bne.n	801625e <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8016258:	2301      	movs	r3, #1
 801625a:	627b      	str	r3, [r7, #36]	; 0x24
 801625c:	e021      	b.n	80162a2 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 801625e:	697b      	ldr	r3, [r7, #20]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d015      	beq.n	8016290 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	681b      	ldr	r3, [r3, #0]
 8016268:	4a2a      	ldr	r2, [pc, #168]	; (8016314 <HAL_ADC_IRQHandler+0x464>)
 801626a:	4293      	cmp	r3, r2
 801626c:	d004      	beq.n	8016278 <HAL_ADC_IRQHandler+0x3c8>
 801626e:	687b      	ldr	r3, [r7, #4]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	4a29      	ldr	r2, [pc, #164]	; (8016318 <HAL_ADC_IRQHandler+0x468>)
 8016274:	4293      	cmp	r3, r2
 8016276:	d101      	bne.n	801627c <HAL_ADC_IRQHandler+0x3cc>
 8016278:	4b28      	ldr	r3, [pc, #160]	; (801631c <HAL_ADC_IRQHandler+0x46c>)
 801627a:	e000      	b.n	801627e <HAL_ADC_IRQHandler+0x3ce>
 801627c:	4b28      	ldr	r3, [pc, #160]	; (8016320 <HAL_ADC_IRQHandler+0x470>)
 801627e:	4618      	mov	r0, r3
 8016280:	f7ff fa74 	bl	801576c <LL_ADC_GetMultiDMATransfer>
 8016284:	4603      	mov	r3, r0
 8016286:	2b00      	cmp	r3, #0
 8016288:	d00b      	beq.n	80162a2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 801628a:	2301      	movs	r3, #1
 801628c:	627b      	str	r3, [r7, #36]	; 0x24
 801628e:	e008      	b.n	80162a2 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	681b      	ldr	r3, [r3, #0]
 8016294:	68db      	ldr	r3, [r3, #12]
 8016296:	f003 0303 	and.w	r3, r3, #3
 801629a:	2b00      	cmp	r3, #0
 801629c:	d001      	beq.n	80162a2 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 801629e:	2301      	movs	r3, #1
 80162a0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80162a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d10e      	bne.n	80162c6 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162ac:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80162b0:	687b      	ldr	r3, [r7, #4]
 80162b2:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80162b8:	f043 0202 	orr.w	r2, r3, #2
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	665a      	str	r2, [r3, #100]	; 0x64
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80162c0:	6878      	ldr	r0, [r7, #4]
 80162c2:	f000 f843 	bl	801634c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	2210      	movs	r2, #16
 80162cc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80162ce:	69fb      	ldr	r3, [r7, #28]
 80162d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d018      	beq.n	801630a <HAL_ADC_IRQHandler+0x45a>
 80162d8:	69bb      	ldr	r3, [r7, #24]
 80162da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d013      	beq.n	801630a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80162e6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80162f2:	f043 0208 	orr.w	r2, r3, #8
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	665a      	str	r2, [r3, #100]	; 0x64

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8016302:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8016304:	6878      	ldr	r0, [r7, #4]
 8016306:	f000 ff93 	bl	8017230 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 801630a:	bf00      	nop
 801630c:	3728      	adds	r7, #40	; 0x28
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}
 8016312:	bf00      	nop
 8016314:	40022000 	.word	0x40022000
 8016318:	40022100 	.word	0x40022100
 801631c:	40022300 	.word	0x40022300
 8016320:	58026300 	.word	0x58026300

08016324 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8016324:	b480      	push	{r7}
 8016326:	b083      	sub	sp, #12
 8016328:	af00      	add	r7, sp, #0
 801632a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 801632c:	bf00      	nop
 801632e:	370c      	adds	r7, #12
 8016330:	46bd      	mov	sp, r7
 8016332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016336:	4770      	bx	lr

08016338 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8016338:	b480      	push	{r7}
 801633a:	b083      	sub	sp, #12
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8016340:	bf00      	nop
 8016342:	370c      	adds	r7, #12
 8016344:	46bd      	mov	sp, r7
 8016346:	f85d 7b04 	ldr.w	r7, [sp], #4
 801634a:	4770      	bx	lr

0801634c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 801634c:	b480      	push	{r7}
 801634e:	b083      	sub	sp, #12
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8016354:	bf00      	nop
 8016356:	370c      	adds	r7, #12
 8016358:	46bd      	mov	sp, r7
 801635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635e:	4770      	bx	lr

08016360 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8016360:	b590      	push	{r4, r7, lr}
 8016362:	b0b9      	sub	sp, #228	; 0xe4
 8016364:	af00      	add	r7, sp, #0
 8016366:	6078      	str	r0, [r7, #4]
 8016368:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801636a:	2300      	movs	r3, #0
 801636c:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8016370:	2300      	movs	r3, #0
 8016372:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
  assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
  /* Check offset range according to oversampling setting */
  if (hadc->Init.OversamplingMode == ENABLE)
 8016374:	687b      	ldr	r3, [r7, #4]
 8016376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801637a:	2b01      	cmp	r3, #1
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 801637c:	683b      	ldr	r3, [r7, #0]
 801637e:	68db      	ldr	r3, [r3, #12]
 8016380:	4aa9      	ldr	r2, [pc, #676]	; (8016628 <HAL_ADC_ConfigChannel+0x2c8>)
 8016382:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801638a:	2b01      	cmp	r3, #1
 801638c:	d102      	bne.n	8016394 <HAL_ADC_ConfigChannel+0x34>
 801638e:	2302      	movs	r3, #2
 8016390:	f000 bcfa 	b.w	8016d88 <HAL_ADC_ConfigChannel+0xa28>
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	2201      	movs	r2, #1
 8016398:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	681b      	ldr	r3, [r3, #0]
 80163a0:	4618      	mov	r0, r3
 80163a2:	f7ff fa7b 	bl	801589c <LL_ADC_REG_IsConversionOngoing>
 80163a6:	4603      	mov	r3, r0
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	f040 84de 	bne.w	8016d6a <HAL_ADC_ConfigChannel+0xa0a>
  {

#if defined(ADC_VER_V5_V90)
    if (hadc->Instance != ADC3)
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	4a9e      	ldr	r2, [pc, #632]	; (801662c <HAL_ADC_ConfigChannel+0x2cc>)
 80163b4:	4293      	cmp	r3, r2
 80163b6:	d033      	beq.n	8016420 <HAL_ADC_ConfigChannel+0xc0>
    {
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d108      	bne.n	80163d6 <HAL_ADC_ConfigChannel+0x76>
 80163c4:	683b      	ldr	r3, [r7, #0]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	0e9b      	lsrs	r3, r3, #26
 80163ca:	f003 031f 	and.w	r3, r3, #31
 80163ce:	2201      	movs	r2, #1
 80163d0:	fa02 f303 	lsl.w	r3, r2, r3
 80163d4:	e01d      	b.n	8016412 <HAL_ADC_ConfigChannel+0xb2>
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80163de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80163e2:	fa93 f3a3 	rbit	r3, r3
 80163e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80163ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80163ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80163f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d101      	bne.n	80163fe <HAL_ADC_ConfigChannel+0x9e>
  {
    return 32U;
 80163fa:	2320      	movs	r3, #32
 80163fc:	e004      	b.n	8016408 <HAL_ADC_ConfigChannel+0xa8>
  }
  return __builtin_clz(value);
 80163fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016402:	fab3 f383 	clz	r3, r3
 8016406:	b2db      	uxtb	r3, r3
 8016408:	f003 031f 	and.w	r3, r3, #31
 801640c:	2201      	movs	r2, #1
 801640e:	fa02 f303 	lsl.w	r3, r2, r3
 8016412:	687a      	ldr	r2, [r7, #4]
 8016414:	6812      	ldr	r2, [r2, #0]
 8016416:	69d1      	ldr	r1, [r2, #28]
 8016418:	687a      	ldr	r2, [r7, #4]
 801641a:	6812      	ldr	r2, [r2, #0]
 801641c:	430b      	orrs	r3, r1
 801641e:	61d3      	str	r3, [r2, #28]
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	6818      	ldr	r0, [r3, #0]
 8016424:	683b      	ldr	r3, [r7, #0]
 8016426:	6859      	ldr	r1, [r3, #4]
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	461a      	mov	r2, r3
 801642e:	f7ff f8a8 	bl	8015582 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	4618      	mov	r0, r3
 8016438:	f7ff fa30 	bl	801589c <LL_ADC_REG_IsConversionOngoing>
 801643c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8016440:	687b      	ldr	r3, [r7, #4]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	4618      	mov	r0, r3
 8016446:	f7ff fa3c 	bl	80158c2 <LL_ADC_INJ_IsConversionOngoing>
 801644a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 801644e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8016452:	2b00      	cmp	r3, #0
 8016454:	f040 8270 	bne.w	8016938 <HAL_ADC_ConfigChannel+0x5d8>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8016458:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801645c:	2b00      	cmp	r3, #0
 801645e:	f040 826b 	bne.w	8016938 <HAL_ADC_ConfigChannel+0x5d8>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8016462:	687b      	ldr	r3, [r7, #4]
 8016464:	6818      	ldr	r0, [r3, #0]
 8016466:	683b      	ldr	r3, [r7, #0]
 8016468:	6819      	ldr	r1, [r3, #0]
 801646a:	683b      	ldr	r3, [r7, #0]
 801646c:	689b      	ldr	r3, [r3, #8]
 801646e:	461a      	mov	r2, r3
 8016470:	f7ff f903 	bl	801567a <LL_ADC_SetChannelSamplingTime>
      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
#if defined(ADC_VER_V5_V90)
      if (hadc->Instance == ADC3)
 8016474:	687b      	ldr	r3, [r7, #4]
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	4a6c      	ldr	r2, [pc, #432]	; (801662c <HAL_ADC_ConfigChannel+0x2cc>)
 801647a:	4293      	cmp	r3, r2
 801647c:	d10d      	bne.n	801649a <HAL_ADC_ConfigChannel+0x13a>
      {
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	695a      	ldr	r2, [r3, #20]
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	681b      	ldr	r3, [r3, #0]
 8016486:	68db      	ldr	r3, [r3, #12]
 8016488:	08db      	lsrs	r3, r3, #3
 801648a:	f003 0303 	and.w	r3, r3, #3
 801648e:	005b      	lsls	r3, r3, #1
 8016490:	fa02 f303 	lsl.w	r3, r2, r3
 8016494:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8016498:	e032      	b.n	8016500 <HAL_ADC_ConfigChannel+0x1a0>
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 801649a:	4b65      	ldr	r3, [pc, #404]	; (8016630 <HAL_ADC_ConfigChannel+0x2d0>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80164a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80164a6:	d10b      	bne.n	80164c0 <HAL_ADC_ConfigChannel+0x160>
 80164a8:	683b      	ldr	r3, [r7, #0]
 80164aa:	695a      	ldr	r2, [r3, #20]
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	68db      	ldr	r3, [r3, #12]
 80164b2:	089b      	lsrs	r3, r3, #2
 80164b4:	f003 0307 	and.w	r3, r3, #7
 80164b8:	005b      	lsls	r3, r3, #1
 80164ba:	fa02 f303 	lsl.w	r3, r2, r3
 80164be:	e01d      	b.n	80164fc <HAL_ADC_ConfigChannel+0x19c>
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	681b      	ldr	r3, [r3, #0]
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	f003 0310 	and.w	r3, r3, #16
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d10b      	bne.n	80164e6 <HAL_ADC_ConfigChannel+0x186>
 80164ce:	683b      	ldr	r3, [r7, #0]
 80164d0:	695a      	ldr	r2, [r3, #20]
 80164d2:	687b      	ldr	r3, [r7, #4]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	68db      	ldr	r3, [r3, #12]
 80164d8:	089b      	lsrs	r3, r3, #2
 80164da:	f003 0307 	and.w	r3, r3, #7
 80164de:	005b      	lsls	r3, r3, #1
 80164e0:	fa02 f303 	lsl.w	r3, r2, r3
 80164e4:	e00a      	b.n	80164fc <HAL_ADC_ConfigChannel+0x19c>
 80164e6:	683b      	ldr	r3, [r7, #0]
 80164e8:	695a      	ldr	r2, [r3, #20]
 80164ea:	687b      	ldr	r3, [r7, #4]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	68db      	ldr	r3, [r3, #12]
 80164f0:	089b      	lsrs	r3, r3, #2
 80164f2:	f003 0304 	and.w	r3, r3, #4
 80164f6:	005b      	lsls	r3, r3, #1
 80164f8:	fa02 f303 	lsl.w	r3, r2, r3
 80164fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8016500:	683b      	ldr	r3, [r7, #0]
 8016502:	691b      	ldr	r3, [r3, #16]
 8016504:	2b04      	cmp	r3, #4
 8016506:	d048      	beq.n	801659a <HAL_ADC_ConfigChannel+0x23a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	6818      	ldr	r0, [r3, #0]
 801650c:	683b      	ldr	r3, [r7, #0]
 801650e:	6919      	ldr	r1, [r3, #16]
 8016510:	683b      	ldr	r3, [r7, #0]
 8016512:	681a      	ldr	r2, [r3, #0]
 8016514:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8016518:	f7fe ff2e 	bl	8015378 <LL_ADC_SetOffset>

#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	4a42      	ldr	r2, [pc, #264]	; (801662c <HAL_ADC_ConfigChannel+0x2cc>)
 8016522:	4293      	cmp	r3, r2
 8016524:	d119      	bne.n	801655a <HAL_ADC_ConfigChannel+0x1fa>
        {
          assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
          /* Set ADC selected offset sign & saturation */
          LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	6818      	ldr	r0, [r3, #0]
 801652a:	683b      	ldr	r3, [r7, #0]
 801652c:	6919      	ldr	r1, [r3, #16]
 801652e:	683b      	ldr	r3, [r7, #0]
 8016530:	69db      	ldr	r3, [r3, #28]
 8016532:	461a      	mov	r2, r3
 8016534:	f7fe ffc6 	bl	80154c4 <LL_ADC_SetOffsetSign>
          LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	6818      	ldr	r0, [r3, #0]
 801653c:	683b      	ldr	r3, [r7, #0]
 801653e:	6919      	ldr	r1, [r3, #16]
 8016540:	683b      	ldr	r3, [r7, #0]
 8016542:	f893 3020 	ldrb.w	r3, [r3, #32]
 8016546:	2b01      	cmp	r3, #1
 8016548:	d102      	bne.n	8016550 <HAL_ADC_ConfigChannel+0x1f0>
 801654a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801654e:	e000      	b.n	8016552 <HAL_ADC_ConfigChannel+0x1f2>
 8016550:	2300      	movs	r3, #0
 8016552:	461a      	mov	r2, r3
 8016554:	f7fe ff94 	bl	8015480 <LL_ADC_SetOffsetSaturation>
 8016558:	e1ee      	b.n	8016938 <HAL_ADC_ConfigChannel+0x5d8>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	6818      	ldr	r0, [r3, #0]
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	6919      	ldr	r1, [r3, #16]
 8016562:	683b      	ldr	r3, [r7, #0]
 8016564:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8016568:	2b01      	cmp	r3, #1
 801656a:	d102      	bne.n	8016572 <HAL_ADC_ConfigChannel+0x212>
 801656c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8016570:	e000      	b.n	8016574 <HAL_ADC_ConfigChannel+0x214>
 8016572:	2300      	movs	r3, #0
 8016574:	461a      	mov	r2, r3
 8016576:	f7fe ff61 	bl	801543c <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	6818      	ldr	r0, [r3, #0]
 801657e:	683b      	ldr	r3, [r7, #0]
 8016580:	6919      	ldr	r1, [r3, #16]
 8016582:	683b      	ldr	r3, [r7, #0]
 8016584:	7e1b      	ldrb	r3, [r3, #24]
 8016586:	2b01      	cmp	r3, #1
 8016588:	d102      	bne.n	8016590 <HAL_ADC_ConfigChannel+0x230>
 801658a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801658e:	e000      	b.n	8016592 <HAL_ADC_ConfigChannel+0x232>
 8016590:	2300      	movs	r3, #0
 8016592:	461a      	mov	r2, r3
 8016594:	f7fe ff38 	bl	8015408 <LL_ADC_SetDataRightShift>
 8016598:	e1ce      	b.n	8016938 <HAL_ADC_ConfigChannel+0x5d8>
      {
        /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
          If this is the case, offset OFRx is disabled since
          sConfig->OffsetNumber = ADC_OFFSET_NONE. */
#if defined(ADC_VER_V5_V90)
        if (hadc->Instance == ADC3)
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	4a23      	ldr	r2, [pc, #140]	; (801662c <HAL_ADC_ConfigChannel+0x2cc>)
 80165a0:	4293      	cmp	r3, r2
 80165a2:	f040 8181 	bne.w	80168a8 <HAL_ADC_ConfigChannel+0x548>
        {
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	2100      	movs	r1, #0
 80165ac:	4618      	mov	r0, r3
 80165ae:	f7fe ff15 	bl	80153dc <LL_ADC_GetOffsetChannel>
 80165b2:	4603      	mov	r3, r0
 80165b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d10a      	bne.n	80165d2 <HAL_ADC_ConfigChannel+0x272>
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	681b      	ldr	r3, [r3, #0]
 80165c0:	2100      	movs	r1, #0
 80165c2:	4618      	mov	r0, r3
 80165c4:	f7fe ff0a 	bl	80153dc <LL_ADC_GetOffsetChannel>
 80165c8:	4603      	mov	r3, r0
 80165ca:	0e9b      	lsrs	r3, r3, #26
 80165cc:	f003 021f 	and.w	r2, r3, #31
 80165d0:	e01e      	b.n	8016610 <HAL_ADC_ConfigChannel+0x2b0>
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	2100      	movs	r1, #0
 80165d8:	4618      	mov	r0, r3
 80165da:	f7fe feff 	bl	80153dc <LL_ADC_GetOffsetChannel>
 80165de:	4603      	mov	r3, r0
 80165e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80165e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80165e8:	fa93 f3a3 	rbit	r3, r3
 80165ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 80165f0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80165f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 80165f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d101      	bne.n	8016604 <HAL_ADC_ConfigChannel+0x2a4>
    return 32U;
 8016600:	2320      	movs	r3, #32
 8016602:	e004      	b.n	801660e <HAL_ADC_ConfigChannel+0x2ae>
  return __builtin_clz(value);
 8016604:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8016608:	fab3 f383 	clz	r3, r3
 801660c:	b2db      	uxtb	r3, r3
 801660e:	461a      	mov	r2, r3
 8016610:	683b      	ldr	r3, [r7, #0]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016618:	2b00      	cmp	r3, #0
 801661a:	d10b      	bne.n	8016634 <HAL_ADC_ConfigChannel+0x2d4>
 801661c:	683b      	ldr	r3, [r7, #0]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	0e9b      	lsrs	r3, r3, #26
 8016622:	f003 031f 	and.w	r3, r3, #31
 8016626:	e01e      	b.n	8016666 <HAL_ADC_ConfigChannel+0x306>
 8016628:	47ff0000 	.word	0x47ff0000
 801662c:	58026000 	.word	0x58026000
 8016630:	5c001000 	.word	0x5c001000
 8016634:	683b      	ldr	r3, [r7, #0]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801663c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8016640:	fa93 f3a3 	rbit	r3, r3
 8016644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8016648:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801664c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8016650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016654:	2b00      	cmp	r3, #0
 8016656:	d101      	bne.n	801665c <HAL_ADC_ConfigChannel+0x2fc>
    return 32U;
 8016658:	2320      	movs	r3, #32
 801665a:	e004      	b.n	8016666 <HAL_ADC_ConfigChannel+0x306>
  return __builtin_clz(value);
 801665c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8016660:	fab3 f383 	clz	r3, r3
 8016664:	b2db      	uxtb	r3, r3
 8016666:	429a      	cmp	r2, r3
 8016668:	d106      	bne.n	8016678 <HAL_ADC_ConfigChannel+0x318>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	2200      	movs	r2, #0
 8016670:	2100      	movs	r1, #0
 8016672:	4618      	mov	r0, r3
 8016674:	f7fe ff48 	bl	8015508 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	2101      	movs	r1, #1
 801667e:	4618      	mov	r0, r3
 8016680:	f7fe feac 	bl	80153dc <LL_ADC_GetOffsetChannel>
 8016684:	4603      	mov	r3, r0
 8016686:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801668a:	2b00      	cmp	r3, #0
 801668c:	d10a      	bne.n	80166a4 <HAL_ADC_ConfigChannel+0x344>
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	681b      	ldr	r3, [r3, #0]
 8016692:	2101      	movs	r1, #1
 8016694:	4618      	mov	r0, r3
 8016696:	f7fe fea1 	bl	80153dc <LL_ADC_GetOffsetChannel>
 801669a:	4603      	mov	r3, r0
 801669c:	0e9b      	lsrs	r3, r3, #26
 801669e:	f003 021f 	and.w	r2, r3, #31
 80166a2:	e01e      	b.n	80166e2 <HAL_ADC_ConfigChannel+0x382>
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	2101      	movs	r1, #1
 80166aa:	4618      	mov	r0, r3
 80166ac:	f7fe fe96 	bl	80153dc <LL_ADC_GetOffsetChannel>
 80166b0:	4603      	mov	r3, r0
 80166b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80166b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80166ba:	fa93 f3a3 	rbit	r3, r3
 80166be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80166c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80166c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80166ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d101      	bne.n	80166d6 <HAL_ADC_ConfigChannel+0x376>
    return 32U;
 80166d2:	2320      	movs	r3, #32
 80166d4:	e004      	b.n	80166e0 <HAL_ADC_ConfigChannel+0x380>
  return __builtin_clz(value);
 80166d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80166da:	fab3 f383 	clz	r3, r3
 80166de:	b2db      	uxtb	r3, r3
 80166e0:	461a      	mov	r2, r3
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	681b      	ldr	r3, [r3, #0]
 80166e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d105      	bne.n	80166fa <HAL_ADC_ConfigChannel+0x39a>
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	0e9b      	lsrs	r3, r3, #26
 80166f4:	f003 031f 	and.w	r3, r3, #31
 80166f8:	e018      	b.n	801672c <HAL_ADC_ConfigChannel+0x3cc>
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016702:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8016706:	fa93 f3a3 	rbit	r3, r3
 801670a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 801670e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8016712:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8016716:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801671a:	2b00      	cmp	r3, #0
 801671c:	d101      	bne.n	8016722 <HAL_ADC_ConfigChannel+0x3c2>
    return 32U;
 801671e:	2320      	movs	r3, #32
 8016720:	e004      	b.n	801672c <HAL_ADC_ConfigChannel+0x3cc>
  return __builtin_clz(value);
 8016722:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8016726:	fab3 f383 	clz	r3, r3
 801672a:	b2db      	uxtb	r3, r3
 801672c:	429a      	cmp	r2, r3
 801672e:	d106      	bne.n	801673e <HAL_ADC_ConfigChannel+0x3de>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	2200      	movs	r2, #0
 8016736:	2101      	movs	r1, #1
 8016738:	4618      	mov	r0, r3
 801673a:	f7fe fee5 	bl	8015508 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	681b      	ldr	r3, [r3, #0]
 8016742:	2102      	movs	r1, #2
 8016744:	4618      	mov	r0, r3
 8016746:	f7fe fe49 	bl	80153dc <LL_ADC_GetOffsetChannel>
 801674a:	4603      	mov	r3, r0
 801674c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016750:	2b00      	cmp	r3, #0
 8016752:	d10a      	bne.n	801676a <HAL_ADC_ConfigChannel+0x40a>
 8016754:	687b      	ldr	r3, [r7, #4]
 8016756:	681b      	ldr	r3, [r3, #0]
 8016758:	2102      	movs	r1, #2
 801675a:	4618      	mov	r0, r3
 801675c:	f7fe fe3e 	bl	80153dc <LL_ADC_GetOffsetChannel>
 8016760:	4603      	mov	r3, r0
 8016762:	0e9b      	lsrs	r3, r3, #26
 8016764:	f003 021f 	and.w	r2, r3, #31
 8016768:	e01e      	b.n	80167a8 <HAL_ADC_ConfigChannel+0x448>
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	681b      	ldr	r3, [r3, #0]
 801676e:	2102      	movs	r1, #2
 8016770:	4618      	mov	r0, r3
 8016772:	f7fe fe33 	bl	80153dc <LL_ADC_GetOffsetChannel>
 8016776:	4603      	mov	r3, r0
 8016778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801677c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016780:	fa93 f3a3 	rbit	r3, r3
 8016784:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8016788:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801678c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8016790:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016794:	2b00      	cmp	r3, #0
 8016796:	d101      	bne.n	801679c <HAL_ADC_ConfigChannel+0x43c>
    return 32U;
 8016798:	2320      	movs	r3, #32
 801679a:	e004      	b.n	80167a6 <HAL_ADC_ConfigChannel+0x446>
  return __builtin_clz(value);
 801679c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80167a0:	fab3 f383 	clz	r3, r3
 80167a4:	b2db      	uxtb	r3, r3
 80167a6:	461a      	mov	r2, r3
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d105      	bne.n	80167c0 <HAL_ADC_ConfigChannel+0x460>
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	0e9b      	lsrs	r3, r3, #26
 80167ba:	f003 031f 	and.w	r3, r3, #31
 80167be:	e014      	b.n	80167ea <HAL_ADC_ConfigChannel+0x48a>
 80167c0:	683b      	ldr	r3, [r7, #0]
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80167c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80167c8:	fa93 f3a3 	rbit	r3, r3
 80167cc:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80167ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80167d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80167d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d101      	bne.n	80167e0 <HAL_ADC_ConfigChannel+0x480>
    return 32U;
 80167dc:	2320      	movs	r3, #32
 80167de:	e004      	b.n	80167ea <HAL_ADC_ConfigChannel+0x48a>
  return __builtin_clz(value);
 80167e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80167e4:	fab3 f383 	clz	r3, r3
 80167e8:	b2db      	uxtb	r3, r3
 80167ea:	429a      	cmp	r2, r3
 80167ec:	d106      	bne.n	80167fc <HAL_ADC_ConfigChannel+0x49c>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	2200      	movs	r2, #0
 80167f4:	2102      	movs	r1, #2
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7fe fe86 	bl	8015508 <LL_ADC_SetOffsetState>
          }
          if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	2103      	movs	r1, #3
 8016802:	4618      	mov	r0, r3
 8016804:	f7fe fdea 	bl	80153dc <LL_ADC_GetOffsetChannel>
 8016808:	4603      	mov	r3, r0
 801680a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801680e:	2b00      	cmp	r3, #0
 8016810:	d10a      	bne.n	8016828 <HAL_ADC_ConfigChannel+0x4c8>
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	681b      	ldr	r3, [r3, #0]
 8016816:	2103      	movs	r1, #3
 8016818:	4618      	mov	r0, r3
 801681a:	f7fe fddf 	bl	80153dc <LL_ADC_GetOffsetChannel>
 801681e:	4603      	mov	r3, r0
 8016820:	0e9b      	lsrs	r3, r3, #26
 8016822:	f003 021f 	and.w	r2, r3, #31
 8016826:	e017      	b.n	8016858 <HAL_ADC_ConfigChannel+0x4f8>
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	2103      	movs	r1, #3
 801682e:	4618      	mov	r0, r3
 8016830:	f7fe fdd4 	bl	80153dc <LL_ADC_GetOffsetChannel>
 8016834:	4603      	mov	r3, r0
 8016836:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801683a:	fa93 f3a3 	rbit	r3, r3
 801683e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8016840:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8016842:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8016844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016846:	2b00      	cmp	r3, #0
 8016848:	d101      	bne.n	801684e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 801684a:	2320      	movs	r3, #32
 801684c:	e003      	b.n	8016856 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 801684e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8016850:	fab3 f383 	clz	r3, r3
 8016854:	b2db      	uxtb	r3, r3
 8016856:	461a      	mov	r2, r3
 8016858:	683b      	ldr	r3, [r7, #0]
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016860:	2b00      	cmp	r3, #0
 8016862:	d105      	bne.n	8016870 <HAL_ADC_ConfigChannel+0x510>
 8016864:	683b      	ldr	r3, [r7, #0]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	0e9b      	lsrs	r3, r3, #26
 801686a:	f003 031f 	and.w	r3, r3, #31
 801686e:	e011      	b.n	8016894 <HAL_ADC_ConfigChannel+0x534>
 8016870:	683b      	ldr	r3, [r7, #0]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8016878:	fa93 f3a3 	rbit	r3, r3
 801687c:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 801687e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8016880:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8016882:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8016884:	2b00      	cmp	r3, #0
 8016886:	d101      	bne.n	801688c <HAL_ADC_ConfigChannel+0x52c>
    return 32U;
 8016888:	2320      	movs	r3, #32
 801688a:	e003      	b.n	8016894 <HAL_ADC_ConfigChannel+0x534>
  return __builtin_clz(value);
 801688c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801688e:	fab3 f383 	clz	r3, r3
 8016892:	b2db      	uxtb	r3, r3
 8016894:	429a      	cmp	r2, r3
 8016896:	d14f      	bne.n	8016938 <HAL_ADC_ConfigChannel+0x5d8>
          {
            LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	2200      	movs	r2, #0
 801689e:	2103      	movs	r1, #3
 80168a0:	4618      	mov	r0, r3
 80168a2:	f7fe fe31 	bl	8015508 <LL_ADC_SetOffsetState>
 80168a6:	e047      	b.n	8016938 <HAL_ADC_ConfigChannel+0x5d8>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80168ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	681b      	ldr	r3, [r3, #0]
 80168b6:	069b      	lsls	r3, r3, #26
 80168b8:	429a      	cmp	r2, r3
 80168ba:	d107      	bne.n	80168cc <HAL_ADC_ConfigChannel+0x56c>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80168ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80168d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80168d6:	683b      	ldr	r3, [r7, #0]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	069b      	lsls	r3, r3, #26
 80168dc:	429a      	cmp	r2, r3
 80168de:	d107      	bne.n	80168f0 <HAL_ADC_ConfigChannel+0x590>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80168e6:	687b      	ldr	r3, [r7, #4]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80168ee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80168f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80168fa:	683b      	ldr	r3, [r7, #0]
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	069b      	lsls	r3, r3, #26
 8016900:	429a      	cmp	r2, r3
 8016902:	d107      	bne.n	8016914 <HAL_ADC_ConfigChannel+0x5b4>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	681b      	ldr	r3, [r3, #0]
 8016908:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	681b      	ldr	r3, [r3, #0]
 801690e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016912:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801691a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 801691e:	683b      	ldr	r3, [r7, #0]
 8016920:	681b      	ldr	r3, [r3, #0]
 8016922:	069b      	lsls	r3, r3, #26
 8016924:	429a      	cmp	r2, r3
 8016926:	d107      	bne.n	8016938 <HAL_ADC_ConfigChannel+0x5d8>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	681b      	ldr	r3, [r3, #0]
 801692c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	681b      	ldr	r3, [r3, #0]
 8016932:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8016936:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	4618      	mov	r0, r3
 801693e:	f7fe ff85 	bl	801584c <LL_ADC_IsEnabled>
 8016942:	4603      	mov	r3, r0
 8016944:	2b00      	cmp	r3, #0
 8016946:	f040 8219 	bne.w	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	6818      	ldr	r0, [r3, #0]
 801694e:	683b      	ldr	r3, [r7, #0]
 8016950:	6819      	ldr	r1, [r3, #0]
 8016952:	683b      	ldr	r3, [r7, #0]
 8016954:	68db      	ldr	r3, [r3, #12]
 8016956:	461a      	mov	r2, r3
 8016958:	f7fe feba 	bl	80156d0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801695c:	683b      	ldr	r3, [r7, #0]
 801695e:	68db      	ldr	r3, [r3, #12]
 8016960:	4aa1      	ldr	r2, [pc, #644]	; (8016be8 <HAL_ADC_ConfigChannel+0x888>)
 8016962:	4293      	cmp	r3, r2
 8016964:	f040 812e 	bne.w	8016bc4 <HAL_ADC_ConfigChannel+0x864>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 801696c:	683b      	ldr	r3, [r7, #0]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016974:	2b00      	cmp	r3, #0
 8016976:	d10b      	bne.n	8016990 <HAL_ADC_ConfigChannel+0x630>
 8016978:	683b      	ldr	r3, [r7, #0]
 801697a:	681b      	ldr	r3, [r3, #0]
 801697c:	0e9b      	lsrs	r3, r3, #26
 801697e:	3301      	adds	r3, #1
 8016980:	f003 031f 	and.w	r3, r3, #31
 8016984:	2b09      	cmp	r3, #9
 8016986:	bf94      	ite	ls
 8016988:	2301      	movls	r3, #1
 801698a:	2300      	movhi	r3, #0
 801698c:	b2db      	uxtb	r3, r3
 801698e:	e019      	b.n	80169c4 <HAL_ADC_ConfigChannel+0x664>
 8016990:	683b      	ldr	r3, [r7, #0]
 8016992:	681b      	ldr	r3, [r3, #0]
 8016994:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8016998:	fa93 f3a3 	rbit	r3, r3
 801699c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 801699e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80169a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80169a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169a4:	2b00      	cmp	r3, #0
 80169a6:	d101      	bne.n	80169ac <HAL_ADC_ConfigChannel+0x64c>
    return 32U;
 80169a8:	2320      	movs	r3, #32
 80169aa:	e003      	b.n	80169b4 <HAL_ADC_ConfigChannel+0x654>
  return __builtin_clz(value);
 80169ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80169ae:	fab3 f383 	clz	r3, r3
 80169b2:	b2db      	uxtb	r3, r3
 80169b4:	3301      	adds	r3, #1
 80169b6:	f003 031f 	and.w	r3, r3, #31
 80169ba:	2b09      	cmp	r3, #9
 80169bc:	bf94      	ite	ls
 80169be:	2301      	movls	r3, #1
 80169c0:	2300      	movhi	r3, #0
 80169c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80169c4:	2b00      	cmp	r3, #0
 80169c6:	d079      	beq.n	8016abc <HAL_ADC_ConfigChannel+0x75c>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80169c8:	683b      	ldr	r3, [r7, #0]
 80169ca:	681b      	ldr	r3, [r3, #0]
 80169cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d107      	bne.n	80169e4 <HAL_ADC_ConfigChannel+0x684>
 80169d4:	683b      	ldr	r3, [r7, #0]
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	0e9b      	lsrs	r3, r3, #26
 80169da:	3301      	adds	r3, #1
 80169dc:	069b      	lsls	r3, r3, #26
 80169de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80169e2:	e015      	b.n	8016a10 <HAL_ADC_ConfigChannel+0x6b0>
 80169e4:	683b      	ldr	r3, [r7, #0]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80169ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80169ec:	fa93 f3a3 	rbit	r3, r3
 80169f0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80169f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80169f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80169f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d101      	bne.n	8016a00 <HAL_ADC_ConfigChannel+0x6a0>
    return 32U;
 80169fc:	2320      	movs	r3, #32
 80169fe:	e003      	b.n	8016a08 <HAL_ADC_ConfigChannel+0x6a8>
  return __builtin_clz(value);
 8016a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016a02:	fab3 f383 	clz	r3, r3
 8016a06:	b2db      	uxtb	r3, r3
 8016a08:	3301      	adds	r3, #1
 8016a0a:	069b      	lsls	r3, r3, #26
 8016a0c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016a10:	683b      	ldr	r3, [r7, #0]
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d109      	bne.n	8016a30 <HAL_ADC_ConfigChannel+0x6d0>
 8016a1c:	683b      	ldr	r3, [r7, #0]
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	0e9b      	lsrs	r3, r3, #26
 8016a22:	3301      	adds	r3, #1
 8016a24:	f003 031f 	and.w	r3, r3, #31
 8016a28:	2101      	movs	r1, #1
 8016a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8016a2e:	e017      	b.n	8016a60 <HAL_ADC_ConfigChannel+0x700>
 8016a30:	683b      	ldr	r3, [r7, #0]
 8016a32:	681b      	ldr	r3, [r3, #0]
 8016a34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016a38:	fa93 f3a3 	rbit	r3, r3
 8016a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8016a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a40:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8016a42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	d101      	bne.n	8016a4c <HAL_ADC_ConfigChannel+0x6ec>
    return 32U;
 8016a48:	2320      	movs	r3, #32
 8016a4a:	e003      	b.n	8016a54 <HAL_ADC_ConfigChannel+0x6f4>
  return __builtin_clz(value);
 8016a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016a4e:	fab3 f383 	clz	r3, r3
 8016a52:	b2db      	uxtb	r3, r3
 8016a54:	3301      	adds	r3, #1
 8016a56:	f003 031f 	and.w	r3, r3, #31
 8016a5a:	2101      	movs	r1, #1
 8016a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8016a60:	ea42 0103 	orr.w	r1, r2, r3
 8016a64:	683b      	ldr	r3, [r7, #0]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016a6c:	2b00      	cmp	r3, #0
 8016a6e:	d10a      	bne.n	8016a86 <HAL_ADC_ConfigChannel+0x726>
 8016a70:	683b      	ldr	r3, [r7, #0]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	0e9b      	lsrs	r3, r3, #26
 8016a76:	3301      	adds	r3, #1
 8016a78:	f003 021f 	and.w	r2, r3, #31
 8016a7c:	4613      	mov	r3, r2
 8016a7e:	005b      	lsls	r3, r3, #1
 8016a80:	4413      	add	r3, r2
 8016a82:	051b      	lsls	r3, r3, #20
 8016a84:	e018      	b.n	8016ab8 <HAL_ADC_ConfigChannel+0x758>
 8016a86:	683b      	ldr	r3, [r7, #0]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a8e:	fa93 f3a3 	rbit	r3, r3
 8016a92:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8016a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a96:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8016a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d101      	bne.n	8016aa2 <HAL_ADC_ConfigChannel+0x742>
    return 32U;
 8016a9e:	2320      	movs	r3, #32
 8016aa0:	e003      	b.n	8016aaa <HAL_ADC_ConfigChannel+0x74a>
  return __builtin_clz(value);
 8016aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016aa4:	fab3 f383 	clz	r3, r3
 8016aa8:	b2db      	uxtb	r3, r3
 8016aaa:	3301      	adds	r3, #1
 8016aac:	f003 021f 	and.w	r2, r3, #31
 8016ab0:	4613      	mov	r3, r2
 8016ab2:	005b      	lsls	r3, r3, #1
 8016ab4:	4413      	add	r3, r2
 8016ab6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016ab8:	430b      	orrs	r3, r1
 8016aba:	e07e      	b.n	8016bba <HAL_ADC_ConfigChannel+0x85a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8016abc:	683b      	ldr	r3, [r7, #0]
 8016abe:	681b      	ldr	r3, [r3, #0]
 8016ac0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d107      	bne.n	8016ad8 <HAL_ADC_ConfigChannel+0x778>
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	681b      	ldr	r3, [r3, #0]
 8016acc:	0e9b      	lsrs	r3, r3, #26
 8016ace:	3301      	adds	r3, #1
 8016ad0:	069b      	lsls	r3, r3, #26
 8016ad2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016ad6:	e015      	b.n	8016b04 <HAL_ADC_ConfigChannel+0x7a4>
 8016ad8:	683b      	ldr	r3, [r7, #0]
 8016ada:	681b      	ldr	r3, [r3, #0]
 8016adc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ae0:	fa93 f3a3 	rbit	r3, r3
 8016ae4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8016ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8016aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d101      	bne.n	8016af4 <HAL_ADC_ConfigChannel+0x794>
    return 32U;
 8016af0:	2320      	movs	r3, #32
 8016af2:	e003      	b.n	8016afc <HAL_ADC_ConfigChannel+0x79c>
  return __builtin_clz(value);
 8016af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af6:	fab3 f383 	clz	r3, r3
 8016afa:	b2db      	uxtb	r3, r3
 8016afc:	3301      	adds	r3, #1
 8016afe:	069b      	lsls	r3, r3, #26
 8016b00:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8016b04:	683b      	ldr	r3, [r7, #0]
 8016b06:	681b      	ldr	r3, [r3, #0]
 8016b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b0c:	2b00      	cmp	r3, #0
 8016b0e:	d109      	bne.n	8016b24 <HAL_ADC_ConfigChannel+0x7c4>
 8016b10:	683b      	ldr	r3, [r7, #0]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	0e9b      	lsrs	r3, r3, #26
 8016b16:	3301      	adds	r3, #1
 8016b18:	f003 031f 	and.w	r3, r3, #31
 8016b1c:	2101      	movs	r1, #1
 8016b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8016b22:	e017      	b.n	8016b54 <HAL_ADC_ConfigChannel+0x7f4>
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016b2a:	69fb      	ldr	r3, [r7, #28]
 8016b2c:	fa93 f3a3 	rbit	r3, r3
 8016b30:	61bb      	str	r3, [r7, #24]
  return result;
 8016b32:	69bb      	ldr	r3, [r7, #24]
 8016b34:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8016b36:	6a3b      	ldr	r3, [r7, #32]
 8016b38:	2b00      	cmp	r3, #0
 8016b3a:	d101      	bne.n	8016b40 <HAL_ADC_ConfigChannel+0x7e0>
    return 32U;
 8016b3c:	2320      	movs	r3, #32
 8016b3e:	e003      	b.n	8016b48 <HAL_ADC_ConfigChannel+0x7e8>
  return __builtin_clz(value);
 8016b40:	6a3b      	ldr	r3, [r7, #32]
 8016b42:	fab3 f383 	clz	r3, r3
 8016b46:	b2db      	uxtb	r3, r3
 8016b48:	3301      	adds	r3, #1
 8016b4a:	f003 031f 	and.w	r3, r3, #31
 8016b4e:	2101      	movs	r1, #1
 8016b50:	fa01 f303 	lsl.w	r3, r1, r3
 8016b54:	ea42 0103 	orr.w	r1, r2, r3
 8016b58:	683b      	ldr	r3, [r7, #0]
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d10d      	bne.n	8016b80 <HAL_ADC_ConfigChannel+0x820>
 8016b64:	683b      	ldr	r3, [r7, #0]
 8016b66:	681b      	ldr	r3, [r3, #0]
 8016b68:	0e9b      	lsrs	r3, r3, #26
 8016b6a:	3301      	adds	r3, #1
 8016b6c:	f003 021f 	and.w	r2, r3, #31
 8016b70:	4613      	mov	r3, r2
 8016b72:	005b      	lsls	r3, r3, #1
 8016b74:	4413      	add	r3, r2
 8016b76:	3b1e      	subs	r3, #30
 8016b78:	051b      	lsls	r3, r3, #20
 8016b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016b7e:	e01b      	b.n	8016bb8 <HAL_ADC_ConfigChannel+0x858>
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8016b86:	693b      	ldr	r3, [r7, #16]
 8016b88:	fa93 f3a3 	rbit	r3, r3
 8016b8c:	60fb      	str	r3, [r7, #12]
  return result;
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8016b92:	697b      	ldr	r3, [r7, #20]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d101      	bne.n	8016b9c <HAL_ADC_ConfigChannel+0x83c>
    return 32U;
 8016b98:	2320      	movs	r3, #32
 8016b9a:	e003      	b.n	8016ba4 <HAL_ADC_ConfigChannel+0x844>
  return __builtin_clz(value);
 8016b9c:	697b      	ldr	r3, [r7, #20]
 8016b9e:	fab3 f383 	clz	r3, r3
 8016ba2:	b2db      	uxtb	r3, r3
 8016ba4:	3301      	adds	r3, #1
 8016ba6:	f003 021f 	and.w	r2, r3, #31
 8016baa:	4613      	mov	r3, r2
 8016bac:	005b      	lsls	r3, r3, #1
 8016bae:	4413      	add	r3, r2
 8016bb0:	3b1e      	subs	r3, #30
 8016bb2:	051b      	lsls	r3, r3, #20
 8016bb4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8016bb8:	430b      	orrs	r3, r1
 8016bba:	683a      	ldr	r2, [r7, #0]
 8016bbc:	6892      	ldr	r2, [r2, #8]
 8016bbe:	4619      	mov	r1, r3
 8016bc0:	f7fe fd5b 	bl	801567a <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8016bc4:	683b      	ldr	r3, [r7, #0]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	f280 80d7 	bge.w	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	4a06      	ldr	r2, [pc, #24]	; (8016bec <HAL_ADC_ConfigChannel+0x88c>)
 8016bd4:	4293      	cmp	r3, r2
 8016bd6:	d004      	beq.n	8016be2 <HAL_ADC_ConfigChannel+0x882>
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4a04      	ldr	r2, [pc, #16]	; (8016bf0 <HAL_ADC_ConfigChannel+0x890>)
 8016bde:	4293      	cmp	r3, r2
 8016be0:	d10a      	bne.n	8016bf8 <HAL_ADC_ConfigChannel+0x898>
 8016be2:	4b04      	ldr	r3, [pc, #16]	; (8016bf4 <HAL_ADC_ConfigChannel+0x894>)
 8016be4:	e009      	b.n	8016bfa <HAL_ADC_ConfigChannel+0x89a>
 8016be6:	bf00      	nop
 8016be8:	47ff0000 	.word	0x47ff0000
 8016bec:	40022000 	.word	0x40022000
 8016bf0:	40022100 	.word	0x40022100
 8016bf4:	40022300 	.word	0x40022300
 8016bf8:	4b65      	ldr	r3, [pc, #404]	; (8016d90 <HAL_ADC_ConfigChannel+0xa30>)
 8016bfa:	4618      	mov	r0, r3
 8016bfc:	f7fe fbae 	bl	801535c <LL_ADC_GetCommonPathInternalCh>
 8016c00:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	4a62      	ldr	r2, [pc, #392]	; (8016d94 <HAL_ADC_ConfigChannel+0xa34>)
 8016c0a:	4293      	cmp	r3, r2
 8016c0c:	d004      	beq.n	8016c18 <HAL_ADC_ConfigChannel+0x8b8>
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	4a61      	ldr	r2, [pc, #388]	; (8016d98 <HAL_ADC_ConfigChannel+0xa38>)
 8016c14:	4293      	cmp	r3, r2
 8016c16:	d10e      	bne.n	8016c36 <HAL_ADC_ConfigChannel+0x8d6>
 8016c18:	485e      	ldr	r0, [pc, #376]	; (8016d94 <HAL_ADC_ConfigChannel+0xa34>)
 8016c1a:	f7fe fe17 	bl	801584c <LL_ADC_IsEnabled>
 8016c1e:	4604      	mov	r4, r0
 8016c20:	485d      	ldr	r0, [pc, #372]	; (8016d98 <HAL_ADC_ConfigChannel+0xa38>)
 8016c22:	f7fe fe13 	bl	801584c <LL_ADC_IsEnabled>
 8016c26:	4603      	mov	r3, r0
 8016c28:	4323      	orrs	r3, r4
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	bf0c      	ite	eq
 8016c2e:	2301      	moveq	r3, #1
 8016c30:	2300      	movne	r3, #0
 8016c32:	b2db      	uxtb	r3, r3
 8016c34:	e008      	b.n	8016c48 <HAL_ADC_ConfigChannel+0x8e8>
 8016c36:	4859      	ldr	r0, [pc, #356]	; (8016d9c <HAL_ADC_ConfigChannel+0xa3c>)
 8016c38:	f7fe fe08 	bl	801584c <LL_ADC_IsEnabled>
 8016c3c:	4603      	mov	r3, r0
 8016c3e:	2b00      	cmp	r3, #0
 8016c40:	bf0c      	ite	eq
 8016c42:	2301      	moveq	r3, #1
 8016c44:	2300      	movne	r3, #0
 8016c46:	b2db      	uxtb	r3, r3
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	f000 8084 	beq.w	8016d56 <HAL_ADC_ConfigChannel+0x9f6>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8016c4e:	683b      	ldr	r3, [r7, #0]
 8016c50:	681b      	ldr	r3, [r3, #0]
 8016c52:	4a53      	ldr	r2, [pc, #332]	; (8016da0 <HAL_ADC_ConfigChannel+0xa40>)
 8016c54:	4293      	cmp	r3, r2
 8016c56:	d132      	bne.n	8016cbe <HAL_ADC_ConfigChannel+0x95e>
 8016c58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016c5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d12c      	bne.n	8016cbe <HAL_ADC_ConfigChannel+0x95e>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	4a4c      	ldr	r2, [pc, #304]	; (8016d9c <HAL_ADC_ConfigChannel+0xa3c>)
 8016c6a:	4293      	cmp	r3, r2
 8016c6c:	f040 8086 	bne.w	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	4a47      	ldr	r2, [pc, #284]	; (8016d94 <HAL_ADC_ConfigChannel+0xa34>)
 8016c76:	4293      	cmp	r3, r2
 8016c78:	d004      	beq.n	8016c84 <HAL_ADC_ConfigChannel+0x924>
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	4a46      	ldr	r2, [pc, #280]	; (8016d98 <HAL_ADC_ConfigChannel+0xa38>)
 8016c80:	4293      	cmp	r3, r2
 8016c82:	d101      	bne.n	8016c88 <HAL_ADC_ConfigChannel+0x928>
 8016c84:	4a47      	ldr	r2, [pc, #284]	; (8016da4 <HAL_ADC_ConfigChannel+0xa44>)
 8016c86:	e000      	b.n	8016c8a <HAL_ADC_ConfigChannel+0x92a>
 8016c88:	4a41      	ldr	r2, [pc, #260]	; (8016d90 <HAL_ADC_ConfigChannel+0xa30>)
 8016c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016c8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8016c92:	4619      	mov	r1, r3
 8016c94:	4610      	mov	r0, r2
 8016c96:	f7fe fb4e 	bl	8015336 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8016c9a:	4b43      	ldr	r3, [pc, #268]	; (8016da8 <HAL_ADC_ConfigChannel+0xa48>)
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	099b      	lsrs	r3, r3, #6
 8016ca0:	4a42      	ldr	r2, [pc, #264]	; (8016dac <HAL_ADC_ConfigChannel+0xa4c>)
 8016ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8016ca6:	099b      	lsrs	r3, r3, #6
 8016ca8:	3301      	adds	r3, #1
 8016caa:	005b      	lsls	r3, r3, #1
 8016cac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016cae:	e002      	b.n	8016cb6 <HAL_ADC_ConfigChannel+0x956>
              {
                wait_loop_index--;
 8016cb0:	68bb      	ldr	r3, [r7, #8]
 8016cb2:	3b01      	subs	r3, #1
 8016cb4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8016cb6:	68bb      	ldr	r3, [r7, #8]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d1f9      	bne.n	8016cb0 <HAL_ADC_ConfigChannel+0x950>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8016cbc:	e05e      	b.n	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8016cbe:	683b      	ldr	r3, [r7, #0]
 8016cc0:	681b      	ldr	r3, [r3, #0]
 8016cc2:	4a3b      	ldr	r2, [pc, #236]	; (8016db0 <HAL_ADC_ConfigChannel+0xa50>)
 8016cc4:	4293      	cmp	r3, r2
 8016cc6:	d120      	bne.n	8016d0a <HAL_ADC_ConfigChannel+0x9aa>
 8016cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016ccc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	d11a      	bne.n	8016d0a <HAL_ADC_ConfigChannel+0x9aa>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	4a30      	ldr	r2, [pc, #192]	; (8016d9c <HAL_ADC_ConfigChannel+0xa3c>)
 8016cda:	4293      	cmp	r3, r2
 8016cdc:	d14e      	bne.n	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	4a2c      	ldr	r2, [pc, #176]	; (8016d94 <HAL_ADC_ConfigChannel+0xa34>)
 8016ce4:	4293      	cmp	r3, r2
 8016ce6:	d004      	beq.n	8016cf2 <HAL_ADC_ConfigChannel+0x992>
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	681b      	ldr	r3, [r3, #0]
 8016cec:	4a2a      	ldr	r2, [pc, #168]	; (8016d98 <HAL_ADC_ConfigChannel+0xa38>)
 8016cee:	4293      	cmp	r3, r2
 8016cf0:	d101      	bne.n	8016cf6 <HAL_ADC_ConfigChannel+0x996>
 8016cf2:	4a2c      	ldr	r2, [pc, #176]	; (8016da4 <HAL_ADC_ConfigChannel+0xa44>)
 8016cf4:	e000      	b.n	8016cf8 <HAL_ADC_ConfigChannel+0x998>
 8016cf6:	4a26      	ldr	r2, [pc, #152]	; (8016d90 <HAL_ADC_ConfigChannel+0xa30>)
 8016cf8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8016d00:	4619      	mov	r1, r3
 8016d02:	4610      	mov	r0, r2
 8016d04:	f7fe fb17 	bl	8015336 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8016d08:	e038      	b.n	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	4a29      	ldr	r2, [pc, #164]	; (8016db4 <HAL_ADC_ConfigChannel+0xa54>)
 8016d10:	4293      	cmp	r3, r2
 8016d12:	d133      	bne.n	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
 8016d14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016d1c:	2b00      	cmp	r3, #0
 8016d1e:	d12d      	bne.n	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	681b      	ldr	r3, [r3, #0]
 8016d24:	4a1d      	ldr	r2, [pc, #116]	; (8016d9c <HAL_ADC_ConfigChannel+0xa3c>)
 8016d26:	4293      	cmp	r3, r2
 8016d28:	d128      	bne.n	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	4a19      	ldr	r2, [pc, #100]	; (8016d94 <HAL_ADC_ConfigChannel+0xa34>)
 8016d30:	4293      	cmp	r3, r2
 8016d32:	d004      	beq.n	8016d3e <HAL_ADC_ConfigChannel+0x9de>
 8016d34:	687b      	ldr	r3, [r7, #4]
 8016d36:	681b      	ldr	r3, [r3, #0]
 8016d38:	4a17      	ldr	r2, [pc, #92]	; (8016d98 <HAL_ADC_ConfigChannel+0xa38>)
 8016d3a:	4293      	cmp	r3, r2
 8016d3c:	d101      	bne.n	8016d42 <HAL_ADC_ConfigChannel+0x9e2>
 8016d3e:	4a19      	ldr	r2, [pc, #100]	; (8016da4 <HAL_ADC_ConfigChannel+0xa44>)
 8016d40:	e000      	b.n	8016d44 <HAL_ADC_ConfigChannel+0x9e4>
 8016d42:	4a13      	ldr	r2, [pc, #76]	; (8016d90 <HAL_ADC_ConfigChannel+0xa30>)
 8016d44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8016d48:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	4610      	mov	r0, r2
 8016d50:	f7fe faf1 	bl	8015336 <LL_ADC_SetCommonPathInternalCh>
 8016d54:	e012      	b.n	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d5a:	f043 0220 	orr.w	r2, r3, #32
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	661a      	str	r2, [r3, #96]	; 0x60

          tmp_hal_status = HAL_ERROR;
 8016d62:	2301      	movs	r3, #1
 8016d64:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
 8016d68:	e008      	b.n	8016d7c <HAL_ADC_ConfigChannel+0xa1c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016d6e:	f043 0220 	orr.w	r2, r3, #32
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8016d76:	2301      	movs	r3, #1
 8016d78:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	2200      	movs	r2, #0
 8016d80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 8016d84:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
}
 8016d88:	4618      	mov	r0, r3
 8016d8a:	37e4      	adds	r7, #228	; 0xe4
 8016d8c:	46bd      	mov	sp, r7
 8016d8e:	bd90      	pop	{r4, r7, pc}
 8016d90:	58026300 	.word	0x58026300
 8016d94:	40022000 	.word	0x40022000
 8016d98:	40022100 	.word	0x40022100
 8016d9c:	58026000 	.word	0x58026000
 8016da0:	c7520000 	.word	0xc7520000
 8016da4:	40022300 	.word	0x40022300
 8016da8:	24000004 	.word	0x24000004
 8016dac:	053e2d63 	.word	0x053e2d63
 8016db0:	c3210000 	.word	0xc3210000
 8016db4:	cb840000 	.word	0xcb840000

08016db8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8016db8:	b580      	push	{r7, lr}
 8016dba:	b084      	sub	sp, #16
 8016dbc:	af00      	add	r7, sp, #0
 8016dbe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	4618      	mov	r0, r3
 8016dc6:	f7fe fd41 	bl	801584c <LL_ADC_IsEnabled>
 8016dca:	4603      	mov	r3, r0
 8016dcc:	2b00      	cmp	r3, #0
 8016dce:	d16e      	bne.n	8016eae <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8016dd0:	687b      	ldr	r3, [r7, #4]
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	689a      	ldr	r2, [r3, #8]
 8016dd6:	4b38      	ldr	r3, [pc, #224]	; (8016eb8 <ADC_Enable+0x100>)
 8016dd8:	4013      	ands	r3, r2
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d00d      	beq.n	8016dfa <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016de2:	f043 0210 	orr.w	r2, r3, #16
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016dee:	f043 0201 	orr.w	r2, r3, #1
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	665a      	str	r2, [r3, #100]	; 0x64

      return HAL_ERROR;
 8016df6:	2301      	movs	r3, #1
 8016df8:	e05a      	b.n	8016eb0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	4618      	mov	r0, r3
 8016e00:	f7fe fd10 	bl	8015824 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8016e04:	f7fe fa78 	bl	80152f8 <HAL_GetTick>
 8016e08:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8016e0a:	687b      	ldr	r3, [r7, #4]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	4a2b      	ldr	r2, [pc, #172]	; (8016ebc <ADC_Enable+0x104>)
 8016e10:	4293      	cmp	r3, r2
 8016e12:	d004      	beq.n	8016e1e <ADC_Enable+0x66>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	681b      	ldr	r3, [r3, #0]
 8016e18:	4a29      	ldr	r2, [pc, #164]	; (8016ec0 <ADC_Enable+0x108>)
 8016e1a:	4293      	cmp	r3, r2
 8016e1c:	d101      	bne.n	8016e22 <ADC_Enable+0x6a>
 8016e1e:	4b29      	ldr	r3, [pc, #164]	; (8016ec4 <ADC_Enable+0x10c>)
 8016e20:	e000      	b.n	8016e24 <ADC_Enable+0x6c>
 8016e22:	4b29      	ldr	r3, [pc, #164]	; (8016ec8 <ADC_Enable+0x110>)
 8016e24:	4618      	mov	r0, r3
 8016e26:	f7fe fc93 	bl	8015750 <LL_ADC_GetMultimode>
 8016e2a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	4a23      	ldr	r2, [pc, #140]	; (8016ec0 <ADC_Enable+0x108>)
 8016e32:	4293      	cmp	r3, r2
 8016e34:	d002      	beq.n	8016e3c <ADC_Enable+0x84>
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	681b      	ldr	r3, [r3, #0]
 8016e3a:	e000      	b.n	8016e3e <ADC_Enable+0x86>
 8016e3c:	4b1f      	ldr	r3, [pc, #124]	; (8016ebc <ADC_Enable+0x104>)
 8016e3e:	687a      	ldr	r2, [r7, #4]
 8016e40:	6812      	ldr	r2, [r2, #0]
 8016e42:	4293      	cmp	r3, r2
 8016e44:	d02c      	beq.n	8016ea0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d130      	bne.n	8016eae <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016e4c:	e028      	b.n	8016ea0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	4618      	mov	r0, r3
 8016e54:	f7fe fcfa 	bl	801584c <LL_ADC_IsEnabled>
 8016e58:	4603      	mov	r3, r0
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d104      	bne.n	8016e68 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	681b      	ldr	r3, [r3, #0]
 8016e62:	4618      	mov	r0, r3
 8016e64:	f7fe fcde 	bl	8015824 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8016e68:	f7fe fa46 	bl	80152f8 <HAL_GetTick>
 8016e6c:	4602      	mov	r2, r0
 8016e6e:	68fb      	ldr	r3, [r7, #12]
 8016e70:	1ad3      	subs	r3, r2, r3
 8016e72:	2b02      	cmp	r3, #2
 8016e74:	d914      	bls.n	8016ea0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	681b      	ldr	r3, [r3, #0]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	f003 0301 	and.w	r3, r3, #1
 8016e80:	2b01      	cmp	r3, #1
 8016e82:	d00d      	beq.n	8016ea0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8016e84:	687b      	ldr	r3, [r7, #4]
 8016e86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016e88:	f043 0210 	orr.w	r2, r3, #16
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	661a      	str	r2, [r3, #96]	; 0x60

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016e94:	f043 0201 	orr.w	r2, r3, #1
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	665a      	str	r2, [r3, #100]	; 0x64

            return HAL_ERROR;
 8016e9c:	2301      	movs	r3, #1
 8016e9e:	e007      	b.n	8016eb0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	681b      	ldr	r3, [r3, #0]
 8016ea6:	f003 0301 	and.w	r3, r3, #1
 8016eaa:	2b01      	cmp	r3, #1
 8016eac:	d1cf      	bne.n	8016e4e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8016eae:	2300      	movs	r3, #0
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3710      	adds	r7, #16
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}
 8016eb8:	8000003f 	.word	0x8000003f
 8016ebc:	40022000 	.word	0x40022000
 8016ec0:	40022100 	.word	0x40022100
 8016ec4:	40022300 	.word	0x40022300
 8016ec8:	58026300 	.word	0x58026300

08016ecc <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b084      	sub	sp, #16
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ed8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ede:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d14b      	bne.n	8016f7e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8016ee6:	68fb      	ldr	r3, [r7, #12]
 8016ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016eea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8016eee:	68fb      	ldr	r3, [r7, #12]
 8016ef0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	681b      	ldr	r3, [r3, #0]
 8016ef8:	f003 0308 	and.w	r3, r3, #8
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d021      	beq.n	8016f44 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8016f00:	68fb      	ldr	r3, [r7, #12]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f7fe fb29 	bl	801555c <LL_ADC_REG_IsTriggerSourceSWStart>
 8016f0a:	4603      	mov	r3, r0
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d032      	beq.n	8016f76 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	68db      	ldr	r3, [r3, #12]
 8016f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d12b      	bne.n	8016f76 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016f1e:	68fb      	ldr	r3, [r7, #12]
 8016f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016f26:	68fb      	ldr	r3, [r7, #12]
 8016f28:	661a      	str	r2, [r3, #96]	; 0x60
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016f2a:	68fb      	ldr	r3, [r7, #12]
 8016f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d11f      	bne.n	8016f76 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016f36:	68fb      	ldr	r3, [r7, #12]
 8016f38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f3a:	f043 0201 	orr.w	r2, r3, #1
 8016f3e:	68fb      	ldr	r3, [r7, #12]
 8016f40:	661a      	str	r2, [r3, #96]	; 0x60
 8016f42:	e018      	b.n	8016f76 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	681b      	ldr	r3, [r3, #0]
 8016f48:	68db      	ldr	r3, [r3, #12]
 8016f4a:	f003 0303 	and.w	r3, r3, #3
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d111      	bne.n	8016f76 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8016f52:	68fb      	ldr	r3, [r7, #12]
 8016f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	661a      	str	r2, [r3, #96]	; 0x60
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8016f5e:	68fb      	ldr	r3, [r7, #12]
 8016f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d105      	bne.n	8016f76 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f6e:	f043 0201 	orr.w	r2, r3, #1
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	661a      	str	r2, [r3, #96]	; 0x60

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8016f76:	68f8      	ldr	r0, [r7, #12]
 8016f78:	f7f7 f935 	bl	800e1e6 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8016f7c:	e00e      	b.n	8016f9c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016f82:	f003 0310 	and.w	r3, r3, #16
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d003      	beq.n	8016f92 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8016f8a:	68f8      	ldr	r0, [r7, #12]
 8016f8c:	f7ff f9de 	bl	801634c <HAL_ADC_ErrorCallback>
}
 8016f90:	e004      	b.n	8016f9c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8016f98:	6878      	ldr	r0, [r7, #4]
 8016f9a:	4798      	blx	r3
}
 8016f9c:	bf00      	nop
 8016f9e:	3710      	adds	r7, #16
 8016fa0:	46bd      	mov	sp, r7
 8016fa2:	bd80      	pop	{r7, pc}

08016fa4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8016fa4:	b580      	push	{r7, lr}
 8016fa6:	b084      	sub	sp, #16
 8016fa8:	af00      	add	r7, sp, #0
 8016faa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fb0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8016fb2:	68f8      	ldr	r0, [r7, #12]
 8016fb4:	f7ff f9b6 	bl	8016324 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8016fb8:	bf00      	nop
 8016fba:	3710      	adds	r7, #16
 8016fbc:	46bd      	mov	sp, r7
 8016fbe:	bd80      	pop	{r7, pc}

08016fc0 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8016fc0:	b580      	push	{r7, lr}
 8016fc2:	b084      	sub	sp, #16
 8016fc4:	af00      	add	r7, sp, #0
 8016fc6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016fcc:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016fd2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8016fde:	f043 0204 	orr.w	r2, r3, #4
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8016fe6:	68f8      	ldr	r0, [r7, #12]
 8016fe8:	f7ff f9b0 	bl	801634c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8016fec:	bf00      	nop
 8016fee:	3710      	adds	r7, #16
 8016ff0:	46bd      	mov	sp, r7
 8016ff2:	bd80      	pop	{r7, pc}

08016ff4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8016ff4:	b580      	push	{r7, lr}
 8016ff6:	b084      	sub	sp, #16
 8016ff8:	af00      	add	r7, sp, #0
 8016ffa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8016ffc:	687b      	ldr	r3, [r7, #4]
 8016ffe:	681b      	ldr	r3, [r3, #0]
 8017000:	4a6c      	ldr	r2, [pc, #432]	; (80171b4 <ADC_ConfigureBoostMode+0x1c0>)
 8017002:	4293      	cmp	r3, r2
 8017004:	d004      	beq.n	8017010 <ADC_ConfigureBoostMode+0x1c>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	4a6b      	ldr	r2, [pc, #428]	; (80171b8 <ADC_ConfigureBoostMode+0x1c4>)
 801700c:	4293      	cmp	r3, r2
 801700e:	d109      	bne.n	8017024 <ADC_ConfigureBoostMode+0x30>
 8017010:	4b6a      	ldr	r3, [pc, #424]	; (80171bc <ADC_ConfigureBoostMode+0x1c8>)
 8017012:	689b      	ldr	r3, [r3, #8]
 8017014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017018:	2b00      	cmp	r3, #0
 801701a:	bf14      	ite	ne
 801701c:	2301      	movne	r3, #1
 801701e:	2300      	moveq	r3, #0
 8017020:	b2db      	uxtb	r3, r3
 8017022:	e008      	b.n	8017036 <ADC_ConfigureBoostMode+0x42>
 8017024:	4b66      	ldr	r3, [pc, #408]	; (80171c0 <ADC_ConfigureBoostMode+0x1cc>)
 8017026:	689b      	ldr	r3, [r3, #8]
 8017028:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801702c:	2b00      	cmp	r3, #0
 801702e:	bf14      	ite	ne
 8017030:	2301      	movne	r3, #1
 8017032:	2300      	moveq	r3, #0
 8017034:	b2db      	uxtb	r3, r3
 8017036:	2b00      	cmp	r3, #0
 8017038:	d01c      	beq.n	8017074 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 801703a:	f004 fe95 	bl	801bd68 <HAL_RCC_GetHCLKFreq>
 801703e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	685b      	ldr	r3, [r3, #4]
 8017044:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8017048:	d010      	beq.n	801706c <ADC_ConfigureBoostMode+0x78>
 801704a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801704e:	d873      	bhi.n	8017138 <ADC_ConfigureBoostMode+0x144>
 8017050:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8017054:	d002      	beq.n	801705c <ADC_ConfigureBoostMode+0x68>
 8017056:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801705a:	d16d      	bne.n	8017138 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	685b      	ldr	r3, [r3, #4]
 8017060:	0c1b      	lsrs	r3, r3, #16
 8017062:	68fa      	ldr	r2, [r7, #12]
 8017064:	fbb2 f3f3 	udiv	r3, r2, r3
 8017068:	60fb      	str	r3, [r7, #12]
        break;
 801706a:	e068      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	089b      	lsrs	r3, r3, #2
 8017070:	60fb      	str	r3, [r7, #12]
        break;
 8017072:	e064      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8017074:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8017078:	f04f 0100 	mov.w	r1, #0
 801707c:	f006 f85a 	bl	801d134 <HAL_RCCEx_GetPeriphCLKFreq>
 8017080:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	685b      	ldr	r3, [r3, #4]
 8017086:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 801708a:	d051      	beq.n	8017130 <ADC_ConfigureBoostMode+0x13c>
 801708c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8017090:	d854      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 8017092:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8017096:	d047      	beq.n	8017128 <ADC_ConfigureBoostMode+0x134>
 8017098:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 801709c:	d84e      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 801709e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80170a2:	d03d      	beq.n	8017120 <ADC_ConfigureBoostMode+0x12c>
 80170a4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80170a8:	d848      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 80170aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80170ae:	d033      	beq.n	8017118 <ADC_ConfigureBoostMode+0x124>
 80170b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80170b4:	d842      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 80170b6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80170ba:	d029      	beq.n	8017110 <ADC_ConfigureBoostMode+0x11c>
 80170bc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80170c0:	d83c      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 80170c2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80170c6:	d01a      	beq.n	80170fe <ADC_ConfigureBoostMode+0x10a>
 80170c8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80170cc:	d836      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 80170ce:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80170d2:	d014      	beq.n	80170fe <ADC_ConfigureBoostMode+0x10a>
 80170d4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80170d8:	d830      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 80170da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80170de:	d00e      	beq.n	80170fe <ADC_ConfigureBoostMode+0x10a>
 80170e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80170e4:	d82a      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 80170e6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80170ea:	d008      	beq.n	80170fe <ADC_ConfigureBoostMode+0x10a>
 80170ec:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80170f0:	d824      	bhi.n	801713c <ADC_ConfigureBoostMode+0x148>
 80170f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80170f6:	d002      	beq.n	80170fe <ADC_ConfigureBoostMode+0x10a>
 80170f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80170fc:	d11e      	bne.n	801713c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	685b      	ldr	r3, [r3, #4]
 8017102:	0c9b      	lsrs	r3, r3, #18
 8017104:	005b      	lsls	r3, r3, #1
 8017106:	68fa      	ldr	r2, [r7, #12]
 8017108:	fbb2 f3f3 	udiv	r3, r2, r3
 801710c:	60fb      	str	r3, [r7, #12]
        break;
 801710e:	e016      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8017110:	68fb      	ldr	r3, [r7, #12]
 8017112:	091b      	lsrs	r3, r3, #4
 8017114:	60fb      	str	r3, [r7, #12]
        break;
 8017116:	e012      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8017118:	68fb      	ldr	r3, [r7, #12]
 801711a:	095b      	lsrs	r3, r3, #5
 801711c:	60fb      	str	r3, [r7, #12]
        break;
 801711e:	e00e      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8017120:	68fb      	ldr	r3, [r7, #12]
 8017122:	099b      	lsrs	r3, r3, #6
 8017124:	60fb      	str	r3, [r7, #12]
        break;
 8017126:	e00a      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	09db      	lsrs	r3, r3, #7
 801712c:	60fb      	str	r3, [r7, #12]
        break;
 801712e:	e006      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	0a1b      	lsrs	r3, r3, #8
 8017134:	60fb      	str	r3, [r7, #12]
        break;
 8017136:	e002      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
        break;
 8017138:	bf00      	nop
 801713a:	e000      	b.n	801713e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 801713c:	bf00      	nop
    }
  }

#if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
  freq /= 2U;
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	085b      	lsrs	r3, r3, #1
 8017142:	60fb      	str	r3, [r7, #12]
  if (freq <= 6250000UL)
 8017144:	68fb      	ldr	r3, [r7, #12]
 8017146:	4a1f      	ldr	r2, [pc, #124]	; (80171c4 <ADC_ConfigureBoostMode+0x1d0>)
 8017148:	4293      	cmp	r3, r2
 801714a:	d808      	bhi.n	801715e <ADC_ConfigureBoostMode+0x16a>
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	681b      	ldr	r3, [r3, #0]
 8017150:	689a      	ldr	r2, [r3, #8]
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 801715a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 801715c:	e025      	b.n	80171aa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 12500000UL)
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	4a19      	ldr	r2, [pc, #100]	; (80171c8 <ADC_ConfigureBoostMode+0x1d4>)
 8017162:	4293      	cmp	r3, r2
 8017164:	d80a      	bhi.n	801717c <ADC_ConfigureBoostMode+0x188>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	681b      	ldr	r3, [r3, #0]
 801716a:	689b      	ldr	r3, [r3, #8]
 801716c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8017170:	687b      	ldr	r3, [r7, #4]
 8017172:	681b      	ldr	r3, [r3, #0]
 8017174:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8017178:	609a      	str	r2, [r3, #8]
}
 801717a:	e016      	b.n	80171aa <ADC_ConfigureBoostMode+0x1b6>
  else if (freq <= 25000000UL)
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	4a13      	ldr	r2, [pc, #76]	; (80171cc <ADC_ConfigureBoostMode+0x1d8>)
 8017180:	4293      	cmp	r3, r2
 8017182:	d80a      	bhi.n	801719a <ADC_ConfigureBoostMode+0x1a6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8017184:	687b      	ldr	r3, [r7, #4]
 8017186:	681b      	ldr	r3, [r3, #0]
 8017188:	689b      	ldr	r3, [r3, #8]
 801718a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8017196:	609a      	str	r2, [r3, #8]
}
 8017198:	e007      	b.n	80171aa <ADC_ConfigureBoostMode+0x1b6>
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 801719a:	687b      	ldr	r3, [r7, #4]
 801719c:	681b      	ldr	r3, [r3, #0]
 801719e:	689a      	ldr	r2, [r3, #8]
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	681b      	ldr	r3, [r3, #0]
 80171a4:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80171a8:	609a      	str	r2, [r3, #8]
}
 80171aa:	bf00      	nop
 80171ac:	3710      	adds	r7, #16
 80171ae:	46bd      	mov	sp, r7
 80171b0:	bd80      	pop	{r7, pc}
 80171b2:	bf00      	nop
 80171b4:	40022000 	.word	0x40022000
 80171b8:	40022100 	.word	0x40022100
 80171bc:	40022300 	.word	0x40022300
 80171c0:	58026300 	.word	0x58026300
 80171c4:	005f5e10 	.word	0x005f5e10
 80171c8:	00bebc20 	.word	0x00bebc20
 80171cc:	017d7840 	.word	0x017d7840

080171d0 <LL_ADC_IsEnabled>:
{
 80171d0:	b480      	push	{r7}
 80171d2:	b083      	sub	sp, #12
 80171d4:	af00      	add	r7, sp, #0
 80171d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	689b      	ldr	r3, [r3, #8]
 80171dc:	f003 0301 	and.w	r3, r3, #1
 80171e0:	2b01      	cmp	r3, #1
 80171e2:	d101      	bne.n	80171e8 <LL_ADC_IsEnabled+0x18>
 80171e4:	2301      	movs	r3, #1
 80171e6:	e000      	b.n	80171ea <LL_ADC_IsEnabled+0x1a>
 80171e8:	2300      	movs	r3, #0
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	370c      	adds	r7, #12
 80171ee:	46bd      	mov	sp, r7
 80171f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f4:	4770      	bx	lr

080171f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80171f6:	b480      	push	{r7}
 80171f8:	b083      	sub	sp, #12
 80171fa:	af00      	add	r7, sp, #0
 80171fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	689b      	ldr	r3, [r3, #8]
 8017202:	f003 0304 	and.w	r3, r3, #4
 8017206:	2b04      	cmp	r3, #4
 8017208:	d101      	bne.n	801720e <LL_ADC_REG_IsConversionOngoing+0x18>
 801720a:	2301      	movs	r3, #1
 801720c:	e000      	b.n	8017210 <LL_ADC_REG_IsConversionOngoing+0x1a>
 801720e:	2300      	movs	r3, #0
}
 8017210:	4618      	mov	r0, r3
 8017212:	370c      	adds	r7, #12
 8017214:	46bd      	mov	sp, r7
 8017216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721a:	4770      	bx	lr

0801721c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8017224:	bf00      	nop
 8017226:	370c      	adds	r7, #12
 8017228:	46bd      	mov	sp, r7
 801722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722e:	4770      	bx	lr

08017230 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8017230:	b480      	push	{r7}
 8017232:	b083      	sub	sp, #12
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8017238:	bf00      	nop
 801723a:	370c      	adds	r7, #12
 801723c:	46bd      	mov	sp, r7
 801723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017242:	4770      	bx	lr

08017244 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8017244:	b480      	push	{r7}
 8017246:	b083      	sub	sp, #12
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801724c:	bf00      	nop
 801724e:	370c      	adds	r7, #12
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8017258:	b480      	push	{r7}
 801725a:	b083      	sub	sp, #12
 801725c:	af00      	add	r7, sp, #0
 801725e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8017260:	bf00      	nop
 8017262:	370c      	adds	r7, #12
 8017264:	46bd      	mov	sp, r7
 8017266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726a:	4770      	bx	lr

0801726c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801726c:	b480      	push	{r7}
 801726e:	b083      	sub	sp, #12
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8017274:	bf00      	nop
 8017276:	370c      	adds	r7, #12
 8017278:	46bd      	mov	sp, r7
 801727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801727e:	4770      	bx	lr

08017280 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8017280:	b590      	push	{r4, r7, lr}
 8017282:	b0a3      	sub	sp, #140	; 0x8c
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
 8017288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801728a:	2300      	movs	r3, #0
 801728c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8017296:	2b01      	cmp	r3, #1
 8017298:	d101      	bne.n	801729e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 801729a:	2302      	movs	r3, #2
 801729c:	e0c1      	b.n	8017422 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	2201      	movs	r2, #1
 80172a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80172a6:	2300      	movs	r3, #0
 80172a8:	66fb      	str	r3, [r7, #108]	; 0x6c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80172aa:	2300      	movs	r3, #0
 80172ac:	673b      	str	r3, [r7, #112]	; 0x70

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	4a5e      	ldr	r2, [pc, #376]	; (801742c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80172b4:	4293      	cmp	r3, r2
 80172b6:	d102      	bne.n	80172be <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80172b8:	4b5d      	ldr	r3, [pc, #372]	; (8017430 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80172ba:	60fb      	str	r3, [r7, #12]
 80172bc:	e001      	b.n	80172c2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80172be:	2300      	movs	r3, #0
 80172c0:	60fb      	str	r3, [r7, #12]

  if (tmphadcSlave.Instance == NULL)
 80172c2:	68fb      	ldr	r3, [r7, #12]
 80172c4:	2b00      	cmp	r3, #0
 80172c6:	d10b      	bne.n	80172e0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80172cc:	f043 0220 	orr.w	r2, r3, #32
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80172d4:	687b      	ldr	r3, [r7, #4]
 80172d6:	2200      	movs	r2, #0
 80172d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    return HAL_ERROR;
 80172dc:	2301      	movs	r3, #1
 80172de:	e0a0      	b.n	8017422 <HAL_ADCEx_MultiModeConfigChannel+0x1a2>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80172e0:	68fb      	ldr	r3, [r7, #12]
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7ff ff87 	bl	80171f6 <LL_ADC_REG_IsConversionOngoing>
 80172e8:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	4618      	mov	r0, r3
 80172f2:	f7ff ff80 	bl	80171f6 <LL_ADC_REG_IsConversionOngoing>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	f040 8081 	bne.w	8017400 <HAL_ADCEx_MultiModeConfigChannel+0x180>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80172fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017302:	2b00      	cmp	r3, #0
 8017304:	d17c      	bne.n	8017400 <HAL_ADCEx_MultiModeConfigChannel+0x180>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	681b      	ldr	r3, [r3, #0]
 801730a:	4a48      	ldr	r2, [pc, #288]	; (801742c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 801730c:	4293      	cmp	r3, r2
 801730e:	d004      	beq.n	801731a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	681b      	ldr	r3, [r3, #0]
 8017314:	4a46      	ldr	r2, [pc, #280]	; (8017430 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8017316:	4293      	cmp	r3, r2
 8017318:	d101      	bne.n	801731e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 801731a:	4b46      	ldr	r3, [pc, #280]	; (8017434 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 801731c:	e000      	b.n	8017320 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 801731e:	4b46      	ldr	r3, [pc, #280]	; (8017438 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8017320:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017322:	683b      	ldr	r3, [r7, #0]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d039      	beq.n	801739e <HAL_ADCEx_MultiModeConfigChannel+0x11e>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 801732a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801732c:	689b      	ldr	r3, [r3, #8]
 801732e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	685b      	ldr	r3, [r3, #4]
 8017336:	431a      	orrs	r2, r3
 8017338:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801733a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	4a3a      	ldr	r2, [pc, #232]	; (801742c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017342:	4293      	cmp	r3, r2
 8017344:	d004      	beq.n	8017350 <HAL_ADCEx_MultiModeConfigChannel+0xd0>
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	4a39      	ldr	r2, [pc, #228]	; (8017430 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801734c:	4293      	cmp	r3, r2
 801734e:	d10e      	bne.n	801736e <HAL_ADCEx_MultiModeConfigChannel+0xee>
 8017350:	4836      	ldr	r0, [pc, #216]	; (801742c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8017352:	f7ff ff3d 	bl	80171d0 <LL_ADC_IsEnabled>
 8017356:	4604      	mov	r4, r0
 8017358:	4835      	ldr	r0, [pc, #212]	; (8017430 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 801735a:	f7ff ff39 	bl	80171d0 <LL_ADC_IsEnabled>
 801735e:	4603      	mov	r3, r0
 8017360:	4323      	orrs	r3, r4
 8017362:	2b00      	cmp	r3, #0
 8017364:	bf0c      	ite	eq
 8017366:	2301      	moveq	r3, #1
 8017368:	2300      	movne	r3, #0
 801736a:	b2db      	uxtb	r3, r3
 801736c:	e008      	b.n	8017380 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 801736e:	4833      	ldr	r0, [pc, #204]	; (801743c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8017370:	f7ff ff2e 	bl	80171d0 <LL_ADC_IsEnabled>
 8017374:	4603      	mov	r3, r0
 8017376:	2b00      	cmp	r3, #0
 8017378:	bf0c      	ite	eq
 801737a:	2301      	moveq	r3, #1
 801737c:	2300      	movne	r3, #0
 801737e:	b2db      	uxtb	r3, r3
 8017380:	2b00      	cmp	r3, #0
 8017382:	d047      	beq.n	8017414 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8017384:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8017386:	689a      	ldr	r2, [r3, #8]
 8017388:	4b2d      	ldr	r3, [pc, #180]	; (8017440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 801738a:	4013      	ands	r3, r2
 801738c:	683a      	ldr	r2, [r7, #0]
 801738e:	6811      	ldr	r1, [r2, #0]
 8017390:	683a      	ldr	r2, [r7, #0]
 8017392:	6892      	ldr	r2, [r2, #8]
 8017394:	430a      	orrs	r2, r1
 8017396:	431a      	orrs	r2, r3
 8017398:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801739a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 801739c:	e03a      	b.n	8017414 <HAL_ADCEx_MultiModeConfigChannel+0x194>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 801739e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173a0:	689b      	ldr	r3, [r3, #8]
 80173a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80173a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80173aa:	687b      	ldr	r3, [r7, #4]
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	4a1f      	ldr	r2, [pc, #124]	; (801742c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80173b0:	4293      	cmp	r3, r2
 80173b2:	d004      	beq.n	80173be <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	681b      	ldr	r3, [r3, #0]
 80173b8:	4a1d      	ldr	r2, [pc, #116]	; (8017430 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80173ba:	4293      	cmp	r3, r2
 80173bc:	d10e      	bne.n	80173dc <HAL_ADCEx_MultiModeConfigChannel+0x15c>
 80173be:	481b      	ldr	r0, [pc, #108]	; (801742c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80173c0:	f7ff ff06 	bl	80171d0 <LL_ADC_IsEnabled>
 80173c4:	4604      	mov	r4, r0
 80173c6:	481a      	ldr	r0, [pc, #104]	; (8017430 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80173c8:	f7ff ff02 	bl	80171d0 <LL_ADC_IsEnabled>
 80173cc:	4603      	mov	r3, r0
 80173ce:	4323      	orrs	r3, r4
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	bf0c      	ite	eq
 80173d4:	2301      	moveq	r3, #1
 80173d6:	2300      	movne	r3, #0
 80173d8:	b2db      	uxtb	r3, r3
 80173da:	e008      	b.n	80173ee <HAL_ADCEx_MultiModeConfigChannel+0x16e>
 80173dc:	4817      	ldr	r0, [pc, #92]	; (801743c <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 80173de:	f7ff fef7 	bl	80171d0 <LL_ADC_IsEnabled>
 80173e2:	4603      	mov	r3, r0
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	bf0c      	ite	eq
 80173e8:	2301      	moveq	r3, #1
 80173ea:	2300      	movne	r3, #0
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d010      	beq.n	8017414 <HAL_ADCEx_MultiModeConfigChannel+0x194>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80173f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80173f4:	689a      	ldr	r2, [r3, #8]
 80173f6:	4b12      	ldr	r3, [pc, #72]	; (8017440 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 80173f8:	4013      	ands	r3, r2
 80173fa:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80173fc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80173fe:	e009      	b.n	8017414 <HAL_ADCEx_MultiModeConfigChannel+0x194>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017404:	f043 0220 	orr.w	r2, r3, #32
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 801740c:	2301      	movs	r3, #1
 801740e:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8017412:	e000      	b.n	8017416 <HAL_ADCEx_MultiModeConfigChannel+0x196>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8017414:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	2200      	movs	r2, #0
 801741a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return tmp_hal_status;
 801741e:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
}
 8017422:	4618      	mov	r0, r3
 8017424:	378c      	adds	r7, #140	; 0x8c
 8017426:	46bd      	mov	sp, r7
 8017428:	bd90      	pop	{r4, r7, pc}
 801742a:	bf00      	nop
 801742c:	40022000 	.word	0x40022000
 8017430:	40022100 	.word	0x40022100
 8017434:	40022300 	.word	0x40022300
 8017438:	58026300 	.word	0x58026300
 801743c:	58026000 	.word	0x58026000
 8017440:	fffff0e0 	.word	0xfffff0e0

08017444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017444:	b480      	push	{r7}
 8017446:	b085      	sub	sp, #20
 8017448:	af00      	add	r7, sp, #0
 801744a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	f003 0307 	and.w	r3, r3, #7
 8017452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8017454:	4b0b      	ldr	r3, [pc, #44]	; (8017484 <__NVIC_SetPriorityGrouping+0x40>)
 8017456:	68db      	ldr	r3, [r3, #12]
 8017458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801745a:	68ba      	ldr	r2, [r7, #8]
 801745c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8017460:	4013      	ands	r3, r2
 8017462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8017468:	68bb      	ldr	r3, [r7, #8]
 801746a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801746c:	4b06      	ldr	r3, [pc, #24]	; (8017488 <__NVIC_SetPriorityGrouping+0x44>)
 801746e:	4313      	orrs	r3, r2
 8017470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8017472:	4a04      	ldr	r2, [pc, #16]	; (8017484 <__NVIC_SetPriorityGrouping+0x40>)
 8017474:	68bb      	ldr	r3, [r7, #8]
 8017476:	60d3      	str	r3, [r2, #12]
}
 8017478:	bf00      	nop
 801747a:	3714      	adds	r7, #20
 801747c:	46bd      	mov	sp, r7
 801747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017482:	4770      	bx	lr
 8017484:	e000ed00 	.word	0xe000ed00
 8017488:	05fa0000 	.word	0x05fa0000

0801748c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 801748c:	b480      	push	{r7}
 801748e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8017490:	4b04      	ldr	r3, [pc, #16]	; (80174a4 <__NVIC_GetPriorityGrouping+0x18>)
 8017492:	68db      	ldr	r3, [r3, #12]
 8017494:	0a1b      	lsrs	r3, r3, #8
 8017496:	f003 0307 	and.w	r3, r3, #7
}
 801749a:	4618      	mov	r0, r3
 801749c:	46bd      	mov	sp, r7
 801749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174a2:	4770      	bx	lr
 80174a4:	e000ed00 	.word	0xe000ed00

080174a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80174a8:	b480      	push	{r7}
 80174aa:	b083      	sub	sp, #12
 80174ac:	af00      	add	r7, sp, #0
 80174ae:	4603      	mov	r3, r0
 80174b0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80174b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	db0b      	blt.n	80174d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80174ba:	88fb      	ldrh	r3, [r7, #6]
 80174bc:	f003 021f 	and.w	r2, r3, #31
 80174c0:	4907      	ldr	r1, [pc, #28]	; (80174e0 <__NVIC_EnableIRQ+0x38>)
 80174c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80174c6:	095b      	lsrs	r3, r3, #5
 80174c8:	2001      	movs	r0, #1
 80174ca:	fa00 f202 	lsl.w	r2, r0, r2
 80174ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80174d2:	bf00      	nop
 80174d4:	370c      	adds	r7, #12
 80174d6:	46bd      	mov	sp, r7
 80174d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174dc:	4770      	bx	lr
 80174de:	bf00      	nop
 80174e0:	e000e100 	.word	0xe000e100

080174e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80174e4:	b480      	push	{r7}
 80174e6:	b083      	sub	sp, #12
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	4603      	mov	r3, r0
 80174ec:	6039      	str	r1, [r7, #0]
 80174ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80174f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	db0a      	blt.n	801750e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80174f8:	683b      	ldr	r3, [r7, #0]
 80174fa:	b2da      	uxtb	r2, r3
 80174fc:	490c      	ldr	r1, [pc, #48]	; (8017530 <__NVIC_SetPriority+0x4c>)
 80174fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017502:	0112      	lsls	r2, r2, #4
 8017504:	b2d2      	uxtb	r2, r2
 8017506:	440b      	add	r3, r1
 8017508:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 801750c:	e00a      	b.n	8017524 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801750e:	683b      	ldr	r3, [r7, #0]
 8017510:	b2da      	uxtb	r2, r3
 8017512:	4908      	ldr	r1, [pc, #32]	; (8017534 <__NVIC_SetPriority+0x50>)
 8017514:	88fb      	ldrh	r3, [r7, #6]
 8017516:	f003 030f 	and.w	r3, r3, #15
 801751a:	3b04      	subs	r3, #4
 801751c:	0112      	lsls	r2, r2, #4
 801751e:	b2d2      	uxtb	r2, r2
 8017520:	440b      	add	r3, r1
 8017522:	761a      	strb	r2, [r3, #24]
}
 8017524:	bf00      	nop
 8017526:	370c      	adds	r7, #12
 8017528:	46bd      	mov	sp, r7
 801752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752e:	4770      	bx	lr
 8017530:	e000e100 	.word	0xe000e100
 8017534:	e000ed00 	.word	0xe000ed00

08017538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017538:	b480      	push	{r7}
 801753a:	b089      	sub	sp, #36	; 0x24
 801753c:	af00      	add	r7, sp, #0
 801753e:	60f8      	str	r0, [r7, #12]
 8017540:	60b9      	str	r1, [r7, #8]
 8017542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	f003 0307 	and.w	r3, r3, #7
 801754a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 801754c:	69fb      	ldr	r3, [r7, #28]
 801754e:	f1c3 0307 	rsb	r3, r3, #7
 8017552:	2b04      	cmp	r3, #4
 8017554:	bf28      	it	cs
 8017556:	2304      	movcs	r3, #4
 8017558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 801755a:	69fb      	ldr	r3, [r7, #28]
 801755c:	3304      	adds	r3, #4
 801755e:	2b06      	cmp	r3, #6
 8017560:	d902      	bls.n	8017568 <NVIC_EncodePriority+0x30>
 8017562:	69fb      	ldr	r3, [r7, #28]
 8017564:	3b03      	subs	r3, #3
 8017566:	e000      	b.n	801756a <NVIC_EncodePriority+0x32>
 8017568:	2300      	movs	r3, #0
 801756a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801756c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017570:	69bb      	ldr	r3, [r7, #24]
 8017572:	fa02 f303 	lsl.w	r3, r2, r3
 8017576:	43da      	mvns	r2, r3
 8017578:	68bb      	ldr	r3, [r7, #8]
 801757a:	401a      	ands	r2, r3
 801757c:	697b      	ldr	r3, [r7, #20]
 801757e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8017580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017584:	697b      	ldr	r3, [r7, #20]
 8017586:	fa01 f303 	lsl.w	r3, r1, r3
 801758a:	43d9      	mvns	r1, r3
 801758c:	687b      	ldr	r3, [r7, #4]
 801758e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8017590:	4313      	orrs	r3, r2
         );
}
 8017592:	4618      	mov	r0, r3
 8017594:	3724      	adds	r7, #36	; 0x24
 8017596:	46bd      	mov	sp, r7
 8017598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759c:	4770      	bx	lr
	...

080175a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80175a0:	b480      	push	{r7}
 80175a2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80175a4:	f3bf 8f4f 	dsb	sy
}
 80175a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80175aa:	4b06      	ldr	r3, [pc, #24]	; (80175c4 <__NVIC_SystemReset+0x24>)
 80175ac:	68db      	ldr	r3, [r3, #12]
 80175ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80175b2:	4904      	ldr	r1, [pc, #16]	; (80175c4 <__NVIC_SystemReset+0x24>)
 80175b4:	4b04      	ldr	r3, [pc, #16]	; (80175c8 <__NVIC_SystemReset+0x28>)
 80175b6:	4313      	orrs	r3, r2
 80175b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80175ba:	f3bf 8f4f 	dsb	sy
}
 80175be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80175c0:	bf00      	nop
 80175c2:	e7fd      	b.n	80175c0 <__NVIC_SystemReset+0x20>
 80175c4:	e000ed00 	.word	0xe000ed00
 80175c8:	05fa0004 	.word	0x05fa0004

080175cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80175cc:	b580      	push	{r7, lr}
 80175ce:	b082      	sub	sp, #8
 80175d0:	af00      	add	r7, sp, #0
 80175d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80175d4:	687b      	ldr	r3, [r7, #4]
 80175d6:	3b01      	subs	r3, #1
 80175d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80175dc:	d301      	bcc.n	80175e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80175de:	2301      	movs	r3, #1
 80175e0:	e00f      	b.n	8017602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80175e2:	4a0a      	ldr	r2, [pc, #40]	; (801760c <SysTick_Config+0x40>)
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	3b01      	subs	r3, #1
 80175e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80175ea:	210f      	movs	r1, #15
 80175ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80175f0:	f7ff ff78 	bl	80174e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80175f4:	4b05      	ldr	r3, [pc, #20]	; (801760c <SysTick_Config+0x40>)
 80175f6:	2200      	movs	r2, #0
 80175f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80175fa:	4b04      	ldr	r3, [pc, #16]	; (801760c <SysTick_Config+0x40>)
 80175fc:	2207      	movs	r2, #7
 80175fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8017600:	2300      	movs	r3, #0
}
 8017602:	4618      	mov	r0, r3
 8017604:	3708      	adds	r7, #8
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	e000e010 	.word	0xe000e010

08017610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b082      	sub	sp, #8
 8017614:	af00      	add	r7, sp, #0
 8017616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8017618:	6878      	ldr	r0, [r7, #4]
 801761a:	f7ff ff13 	bl	8017444 <__NVIC_SetPriorityGrouping>
}
 801761e:	bf00      	nop
 8017620:	3708      	adds	r7, #8
 8017622:	46bd      	mov	sp, r7
 8017624:	bd80      	pop	{r7, pc}

08017626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8017626:	b580      	push	{r7, lr}
 8017628:	b086      	sub	sp, #24
 801762a:	af00      	add	r7, sp, #0
 801762c:	4603      	mov	r3, r0
 801762e:	60b9      	str	r1, [r7, #8]
 8017630:	607a      	str	r2, [r7, #4]
 8017632:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8017634:	f7ff ff2a 	bl	801748c <__NVIC_GetPriorityGrouping>
 8017638:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801763a:	687a      	ldr	r2, [r7, #4]
 801763c:	68b9      	ldr	r1, [r7, #8]
 801763e:	6978      	ldr	r0, [r7, #20]
 8017640:	f7ff ff7a 	bl	8017538 <NVIC_EncodePriority>
 8017644:	4602      	mov	r2, r0
 8017646:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801764a:	4611      	mov	r1, r2
 801764c:	4618      	mov	r0, r3
 801764e:	f7ff ff49 	bl	80174e4 <__NVIC_SetPriority>
}
 8017652:	bf00      	nop
 8017654:	3718      	adds	r7, #24
 8017656:	46bd      	mov	sp, r7
 8017658:	bd80      	pop	{r7, pc}

0801765a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801765a:	b580      	push	{r7, lr}
 801765c:	b082      	sub	sp, #8
 801765e:	af00      	add	r7, sp, #0
 8017660:	4603      	mov	r3, r0
 8017662:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8017664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8017668:	4618      	mov	r0, r3
 801766a:	f7ff ff1d 	bl	80174a8 <__NVIC_EnableIRQ>
}
 801766e:	bf00      	nop
 8017670:	3708      	adds	r7, #8
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}

08017676 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8017676:	b580      	push	{r7, lr}
 8017678:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 801767a:	f7ff ff91 	bl	80175a0 <__NVIC_SystemReset>

0801767e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801767e:	b580      	push	{r7, lr}
 8017680:	b082      	sub	sp, #8
 8017682:	af00      	add	r7, sp, #0
 8017684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8017686:	6878      	ldr	r0, [r7, #4]
 8017688:	f7ff ffa0 	bl	80175cc <SysTick_Config>
 801768c:	4603      	mov	r3, r0
}
 801768e:	4618      	mov	r0, r3
 8017690:	3708      	adds	r7, #8
 8017692:	46bd      	mov	sp, r7
 8017694:	bd80      	pop	{r7, pc}
	...

08017698 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b086      	sub	sp, #24
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80176a0:	f7fd fe2a 	bl	80152f8 <HAL_GetTick>
 80176a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	d101      	bne.n	80176b0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80176ac:	2301      	movs	r3, #1
 80176ae:	e314      	b.n	8017cda <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80176b0:	687b      	ldr	r3, [r7, #4]
 80176b2:	681b      	ldr	r3, [r3, #0]
 80176b4:	4a66      	ldr	r2, [pc, #408]	; (8017850 <HAL_DMA_Init+0x1b8>)
 80176b6:	4293      	cmp	r3, r2
 80176b8:	d04a      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	4a65      	ldr	r2, [pc, #404]	; (8017854 <HAL_DMA_Init+0x1bc>)
 80176c0:	4293      	cmp	r3, r2
 80176c2:	d045      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176c4:	687b      	ldr	r3, [r7, #4]
 80176c6:	681b      	ldr	r3, [r3, #0]
 80176c8:	4a63      	ldr	r2, [pc, #396]	; (8017858 <HAL_DMA_Init+0x1c0>)
 80176ca:	4293      	cmp	r3, r2
 80176cc:	d040      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	4a62      	ldr	r2, [pc, #392]	; (801785c <HAL_DMA_Init+0x1c4>)
 80176d4:	4293      	cmp	r3, r2
 80176d6:	d03b      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	681b      	ldr	r3, [r3, #0]
 80176dc:	4a60      	ldr	r2, [pc, #384]	; (8017860 <HAL_DMA_Init+0x1c8>)
 80176de:	4293      	cmp	r3, r2
 80176e0:	d036      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	4a5f      	ldr	r2, [pc, #380]	; (8017864 <HAL_DMA_Init+0x1cc>)
 80176e8:	4293      	cmp	r3, r2
 80176ea:	d031      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	4a5d      	ldr	r2, [pc, #372]	; (8017868 <HAL_DMA_Init+0x1d0>)
 80176f2:	4293      	cmp	r3, r2
 80176f4:	d02c      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	4a5c      	ldr	r2, [pc, #368]	; (801786c <HAL_DMA_Init+0x1d4>)
 80176fc:	4293      	cmp	r3, r2
 80176fe:	d027      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	4a5a      	ldr	r2, [pc, #360]	; (8017870 <HAL_DMA_Init+0x1d8>)
 8017706:	4293      	cmp	r3, r2
 8017708:	d022      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	4a59      	ldr	r2, [pc, #356]	; (8017874 <HAL_DMA_Init+0x1dc>)
 8017710:	4293      	cmp	r3, r2
 8017712:	d01d      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017714:	687b      	ldr	r3, [r7, #4]
 8017716:	681b      	ldr	r3, [r3, #0]
 8017718:	4a57      	ldr	r2, [pc, #348]	; (8017878 <HAL_DMA_Init+0x1e0>)
 801771a:	4293      	cmp	r3, r2
 801771c:	d018      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 801771e:	687b      	ldr	r3, [r7, #4]
 8017720:	681b      	ldr	r3, [r3, #0]
 8017722:	4a56      	ldr	r2, [pc, #344]	; (801787c <HAL_DMA_Init+0x1e4>)
 8017724:	4293      	cmp	r3, r2
 8017726:	d013      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	4a54      	ldr	r2, [pc, #336]	; (8017880 <HAL_DMA_Init+0x1e8>)
 801772e:	4293      	cmp	r3, r2
 8017730:	d00e      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	4a53      	ldr	r2, [pc, #332]	; (8017884 <HAL_DMA_Init+0x1ec>)
 8017738:	4293      	cmp	r3, r2
 801773a:	d009      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	4a51      	ldr	r2, [pc, #324]	; (8017888 <HAL_DMA_Init+0x1f0>)
 8017742:	4293      	cmp	r3, r2
 8017744:	d004      	beq.n	8017750 <HAL_DMA_Init+0xb8>
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	4a50      	ldr	r2, [pc, #320]	; (801788c <HAL_DMA_Init+0x1f4>)
 801774c:	4293      	cmp	r3, r2
 801774e:	d101      	bne.n	8017754 <HAL_DMA_Init+0xbc>
 8017750:	2301      	movs	r3, #1
 8017752:	e000      	b.n	8017756 <HAL_DMA_Init+0xbe>
 8017754:	2300      	movs	r3, #0
 8017756:	2b00      	cmp	r3, #0
 8017758:	f000 813c 	beq.w	80179d4 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	2202      	movs	r2, #2
 8017760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	2200      	movs	r2, #0
 8017768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681b      	ldr	r3, [r3, #0]
 8017770:	4a37      	ldr	r2, [pc, #220]	; (8017850 <HAL_DMA_Init+0x1b8>)
 8017772:	4293      	cmp	r3, r2
 8017774:	d04a      	beq.n	801780c <HAL_DMA_Init+0x174>
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	4a36      	ldr	r2, [pc, #216]	; (8017854 <HAL_DMA_Init+0x1bc>)
 801777c:	4293      	cmp	r3, r2
 801777e:	d045      	beq.n	801780c <HAL_DMA_Init+0x174>
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	4a34      	ldr	r2, [pc, #208]	; (8017858 <HAL_DMA_Init+0x1c0>)
 8017786:	4293      	cmp	r3, r2
 8017788:	d040      	beq.n	801780c <HAL_DMA_Init+0x174>
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	4a33      	ldr	r2, [pc, #204]	; (801785c <HAL_DMA_Init+0x1c4>)
 8017790:	4293      	cmp	r3, r2
 8017792:	d03b      	beq.n	801780c <HAL_DMA_Init+0x174>
 8017794:	687b      	ldr	r3, [r7, #4]
 8017796:	681b      	ldr	r3, [r3, #0]
 8017798:	4a31      	ldr	r2, [pc, #196]	; (8017860 <HAL_DMA_Init+0x1c8>)
 801779a:	4293      	cmp	r3, r2
 801779c:	d036      	beq.n	801780c <HAL_DMA_Init+0x174>
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	681b      	ldr	r3, [r3, #0]
 80177a2:	4a30      	ldr	r2, [pc, #192]	; (8017864 <HAL_DMA_Init+0x1cc>)
 80177a4:	4293      	cmp	r3, r2
 80177a6:	d031      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	4a2e      	ldr	r2, [pc, #184]	; (8017868 <HAL_DMA_Init+0x1d0>)
 80177ae:	4293      	cmp	r3, r2
 80177b0:	d02c      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177b2:	687b      	ldr	r3, [r7, #4]
 80177b4:	681b      	ldr	r3, [r3, #0]
 80177b6:	4a2d      	ldr	r2, [pc, #180]	; (801786c <HAL_DMA_Init+0x1d4>)
 80177b8:	4293      	cmp	r3, r2
 80177ba:	d027      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	4a2b      	ldr	r2, [pc, #172]	; (8017870 <HAL_DMA_Init+0x1d8>)
 80177c2:	4293      	cmp	r3, r2
 80177c4:	d022      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	681b      	ldr	r3, [r3, #0]
 80177ca:	4a2a      	ldr	r2, [pc, #168]	; (8017874 <HAL_DMA_Init+0x1dc>)
 80177cc:	4293      	cmp	r3, r2
 80177ce:	d01d      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177d0:	687b      	ldr	r3, [r7, #4]
 80177d2:	681b      	ldr	r3, [r3, #0]
 80177d4:	4a28      	ldr	r2, [pc, #160]	; (8017878 <HAL_DMA_Init+0x1e0>)
 80177d6:	4293      	cmp	r3, r2
 80177d8:	d018      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	681b      	ldr	r3, [r3, #0]
 80177de:	4a27      	ldr	r2, [pc, #156]	; (801787c <HAL_DMA_Init+0x1e4>)
 80177e0:	4293      	cmp	r3, r2
 80177e2:	d013      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	681b      	ldr	r3, [r3, #0]
 80177e8:	4a25      	ldr	r2, [pc, #148]	; (8017880 <HAL_DMA_Init+0x1e8>)
 80177ea:	4293      	cmp	r3, r2
 80177ec:	d00e      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	4a24      	ldr	r2, [pc, #144]	; (8017884 <HAL_DMA_Init+0x1ec>)
 80177f4:	4293      	cmp	r3, r2
 80177f6:	d009      	beq.n	801780c <HAL_DMA_Init+0x174>
 80177f8:	687b      	ldr	r3, [r7, #4]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	4a22      	ldr	r2, [pc, #136]	; (8017888 <HAL_DMA_Init+0x1f0>)
 80177fe:	4293      	cmp	r3, r2
 8017800:	d004      	beq.n	801780c <HAL_DMA_Init+0x174>
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	4a21      	ldr	r2, [pc, #132]	; (801788c <HAL_DMA_Init+0x1f4>)
 8017808:	4293      	cmp	r3, r2
 801780a:	d108      	bne.n	801781e <HAL_DMA_Init+0x186>
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	681a      	ldr	r2, [r3, #0]
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	681b      	ldr	r3, [r3, #0]
 8017816:	f022 0201 	bic.w	r2, r2, #1
 801781a:	601a      	str	r2, [r3, #0]
 801781c:	e007      	b.n	801782e <HAL_DMA_Init+0x196>
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	681b      	ldr	r3, [r3, #0]
 8017822:	681a      	ldr	r2, [r3, #0]
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	681b      	ldr	r3, [r3, #0]
 8017828:	f022 0201 	bic.w	r2, r2, #1
 801782c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801782e:	e02f      	b.n	8017890 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8017830:	f7fd fd62 	bl	80152f8 <HAL_GetTick>
 8017834:	4602      	mov	r2, r0
 8017836:	693b      	ldr	r3, [r7, #16]
 8017838:	1ad3      	subs	r3, r2, r3
 801783a:	2b05      	cmp	r3, #5
 801783c:	d928      	bls.n	8017890 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801783e:	687b      	ldr	r3, [r7, #4]
 8017840:	2220      	movs	r2, #32
 8017842:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	2203      	movs	r2, #3
 8017848:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 801784c:	2301      	movs	r3, #1
 801784e:	e244      	b.n	8017cda <HAL_DMA_Init+0x642>
 8017850:	40020010 	.word	0x40020010
 8017854:	40020028 	.word	0x40020028
 8017858:	40020040 	.word	0x40020040
 801785c:	40020058 	.word	0x40020058
 8017860:	40020070 	.word	0x40020070
 8017864:	40020088 	.word	0x40020088
 8017868:	400200a0 	.word	0x400200a0
 801786c:	400200b8 	.word	0x400200b8
 8017870:	40020410 	.word	0x40020410
 8017874:	40020428 	.word	0x40020428
 8017878:	40020440 	.word	0x40020440
 801787c:	40020458 	.word	0x40020458
 8017880:	40020470 	.word	0x40020470
 8017884:	40020488 	.word	0x40020488
 8017888:	400204a0 	.word	0x400204a0
 801788c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	f003 0301 	and.w	r3, r3, #1
 801789a:	2b00      	cmp	r3, #0
 801789c:	d1c8      	bne.n	8017830 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 801789e:	687b      	ldr	r3, [r7, #4]
 80178a0:	681b      	ldr	r3, [r3, #0]
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80178a6:	697a      	ldr	r2, [r7, #20]
 80178a8:	4b84      	ldr	r3, [pc, #528]	; (8017abc <HAL_DMA_Init+0x424>)
 80178aa:	4013      	ands	r3, r2
 80178ac:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80178ae:	687b      	ldr	r3, [r7, #4]
 80178b0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80178b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	691b      	ldr	r3, [r3, #16]
 80178bc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80178c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	699b      	ldr	r3, [r3, #24]
 80178c8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80178ce:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6a1b      	ldr	r3, [r3, #32]
 80178d4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80178d6:	697a      	ldr	r2, [r7, #20]
 80178d8:	4313      	orrs	r3, r2
 80178da:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80178e0:	2b04      	cmp	r3, #4
 80178e2:	d107      	bne.n	80178f4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178ec:	4313      	orrs	r3, r2
 80178ee:	697a      	ldr	r2, [r7, #20]
 80178f0:	4313      	orrs	r3, r2
 80178f2:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	685b      	ldr	r3, [r3, #4]
 80178f8:	2b28      	cmp	r3, #40	; 0x28
 80178fa:	d903      	bls.n	8017904 <HAL_DMA_Init+0x26c>
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	2b2e      	cmp	r3, #46	; 0x2e
 8017902:	d91f      	bls.n	8017944 <HAL_DMA_Init+0x2ac>
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	685b      	ldr	r3, [r3, #4]
 8017908:	2b3e      	cmp	r3, #62	; 0x3e
 801790a:	d903      	bls.n	8017914 <HAL_DMA_Init+0x27c>
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	685b      	ldr	r3, [r3, #4]
 8017910:	2b42      	cmp	r3, #66	; 0x42
 8017912:	d917      	bls.n	8017944 <HAL_DMA_Init+0x2ac>
 8017914:	687b      	ldr	r3, [r7, #4]
 8017916:	685b      	ldr	r3, [r3, #4]
 8017918:	2b46      	cmp	r3, #70	; 0x46
 801791a:	d903      	bls.n	8017924 <HAL_DMA_Init+0x28c>
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	685b      	ldr	r3, [r3, #4]
 8017920:	2b48      	cmp	r3, #72	; 0x48
 8017922:	d90f      	bls.n	8017944 <HAL_DMA_Init+0x2ac>
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	685b      	ldr	r3, [r3, #4]
 8017928:	2b4e      	cmp	r3, #78	; 0x4e
 801792a:	d903      	bls.n	8017934 <HAL_DMA_Init+0x29c>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	685b      	ldr	r3, [r3, #4]
 8017930:	2b52      	cmp	r3, #82	; 0x52
 8017932:	d907      	bls.n	8017944 <HAL_DMA_Init+0x2ac>
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	685b      	ldr	r3, [r3, #4]
 8017938:	2b73      	cmp	r3, #115	; 0x73
 801793a:	d905      	bls.n	8017948 <HAL_DMA_Init+0x2b0>
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	685b      	ldr	r3, [r3, #4]
 8017940:	2b77      	cmp	r3, #119	; 0x77
 8017942:	d801      	bhi.n	8017948 <HAL_DMA_Init+0x2b0>
 8017944:	2301      	movs	r3, #1
 8017946:	e000      	b.n	801794a <HAL_DMA_Init+0x2b2>
 8017948:	2300      	movs	r3, #0
 801794a:	2b00      	cmp	r3, #0
 801794c:	d003      	beq.n	8017956 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801794e:	697b      	ldr	r3, [r7, #20]
 8017950:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017954:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8017956:	687b      	ldr	r3, [r7, #4]
 8017958:	681b      	ldr	r3, [r3, #0]
 801795a:	697a      	ldr	r2, [r7, #20]
 801795c:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	681b      	ldr	r3, [r3, #0]
 8017962:	695b      	ldr	r3, [r3, #20]
 8017964:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	f023 0307 	bic.w	r3, r3, #7
 801796c:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017972:	697a      	ldr	r2, [r7, #20]
 8017974:	4313      	orrs	r3, r2
 8017976:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801797c:	2b04      	cmp	r3, #4
 801797e:	d117      	bne.n	80179b0 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8017980:	687b      	ldr	r3, [r7, #4]
 8017982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017984:	697a      	ldr	r2, [r7, #20]
 8017986:	4313      	orrs	r3, r2
 8017988:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801798e:	2b00      	cmp	r3, #0
 8017990:	d00e      	beq.n	80179b0 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8017992:	6878      	ldr	r0, [r7, #4]
 8017994:	f001 fdcc 	bl	8019530 <DMA_CheckFifoParam>
 8017998:	4603      	mov	r3, r0
 801799a:	2b00      	cmp	r3, #0
 801799c:	d008      	beq.n	80179b0 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	2240      	movs	r2, #64	; 0x40
 80179a2:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2201      	movs	r2, #1
 80179a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80179ac:	2301      	movs	r3, #1
 80179ae:	e194      	b.n	8017cda <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	697a      	ldr	r2, [r7, #20]
 80179b6:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80179b8:	6878      	ldr	r0, [r7, #4]
 80179ba:	f001 fd07 	bl	80193cc <DMA_CalcBaseAndBitshift>
 80179be:	4603      	mov	r3, r0
 80179c0:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80179c2:	687b      	ldr	r3, [r7, #4]
 80179c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80179c6:	f003 031f 	and.w	r3, r3, #31
 80179ca:	223f      	movs	r2, #63	; 0x3f
 80179cc:	409a      	lsls	r2, r3
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	609a      	str	r2, [r3, #8]
 80179d2:	e0ca      	b.n	8017b6a <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	681b      	ldr	r3, [r3, #0]
 80179d8:	4a39      	ldr	r2, [pc, #228]	; (8017ac0 <HAL_DMA_Init+0x428>)
 80179da:	4293      	cmp	r3, r2
 80179dc:	d022      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 80179de:	687b      	ldr	r3, [r7, #4]
 80179e0:	681b      	ldr	r3, [r3, #0]
 80179e2:	4a38      	ldr	r2, [pc, #224]	; (8017ac4 <HAL_DMA_Init+0x42c>)
 80179e4:	4293      	cmp	r3, r2
 80179e6:	d01d      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 80179e8:	687b      	ldr	r3, [r7, #4]
 80179ea:	681b      	ldr	r3, [r3, #0]
 80179ec:	4a36      	ldr	r2, [pc, #216]	; (8017ac8 <HAL_DMA_Init+0x430>)
 80179ee:	4293      	cmp	r3, r2
 80179f0:	d018      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	4a35      	ldr	r2, [pc, #212]	; (8017acc <HAL_DMA_Init+0x434>)
 80179f8:	4293      	cmp	r3, r2
 80179fa:	d013      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 80179fc:	687b      	ldr	r3, [r7, #4]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	4a33      	ldr	r2, [pc, #204]	; (8017ad0 <HAL_DMA_Init+0x438>)
 8017a02:	4293      	cmp	r3, r2
 8017a04:	d00e      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	4a32      	ldr	r2, [pc, #200]	; (8017ad4 <HAL_DMA_Init+0x43c>)
 8017a0c:	4293      	cmp	r3, r2
 8017a0e:	d009      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 8017a10:	687b      	ldr	r3, [r7, #4]
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	4a30      	ldr	r2, [pc, #192]	; (8017ad8 <HAL_DMA_Init+0x440>)
 8017a16:	4293      	cmp	r3, r2
 8017a18:	d004      	beq.n	8017a24 <HAL_DMA_Init+0x38c>
 8017a1a:	687b      	ldr	r3, [r7, #4]
 8017a1c:	681b      	ldr	r3, [r3, #0]
 8017a1e:	4a2f      	ldr	r2, [pc, #188]	; (8017adc <HAL_DMA_Init+0x444>)
 8017a20:	4293      	cmp	r3, r2
 8017a22:	d101      	bne.n	8017a28 <HAL_DMA_Init+0x390>
 8017a24:	2301      	movs	r3, #1
 8017a26:	e000      	b.n	8017a2a <HAL_DMA_Init+0x392>
 8017a28:	2300      	movs	r3, #0
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	f000 8094 	beq.w	8017b58 <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8017a30:	687b      	ldr	r3, [r7, #4]
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	4a22      	ldr	r2, [pc, #136]	; (8017ac0 <HAL_DMA_Init+0x428>)
 8017a36:	4293      	cmp	r3, r2
 8017a38:	d021      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a3a:	687b      	ldr	r3, [r7, #4]
 8017a3c:	681b      	ldr	r3, [r3, #0]
 8017a3e:	4a21      	ldr	r2, [pc, #132]	; (8017ac4 <HAL_DMA_Init+0x42c>)
 8017a40:	4293      	cmp	r3, r2
 8017a42:	d01c      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a44:	687b      	ldr	r3, [r7, #4]
 8017a46:	681b      	ldr	r3, [r3, #0]
 8017a48:	4a1f      	ldr	r2, [pc, #124]	; (8017ac8 <HAL_DMA_Init+0x430>)
 8017a4a:	4293      	cmp	r3, r2
 8017a4c:	d017      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	4a1e      	ldr	r2, [pc, #120]	; (8017acc <HAL_DMA_Init+0x434>)
 8017a54:	4293      	cmp	r3, r2
 8017a56:	d012      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	681b      	ldr	r3, [r3, #0]
 8017a5c:	4a1c      	ldr	r2, [pc, #112]	; (8017ad0 <HAL_DMA_Init+0x438>)
 8017a5e:	4293      	cmp	r3, r2
 8017a60:	d00d      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	4a1b      	ldr	r2, [pc, #108]	; (8017ad4 <HAL_DMA_Init+0x43c>)
 8017a68:	4293      	cmp	r3, r2
 8017a6a:	d008      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	681b      	ldr	r3, [r3, #0]
 8017a70:	4a19      	ldr	r2, [pc, #100]	; (8017ad8 <HAL_DMA_Init+0x440>)
 8017a72:	4293      	cmp	r3, r2
 8017a74:	d003      	beq.n	8017a7e <HAL_DMA_Init+0x3e6>
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	4a18      	ldr	r2, [pc, #96]	; (8017adc <HAL_DMA_Init+0x444>)
 8017a7c:	4293      	cmp	r3, r2
 8017a7e:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2202      	movs	r2, #2
 8017a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	2200      	movs	r2, #0
 8017a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8017a98:	697a      	ldr	r2, [r7, #20]
 8017a9a:	4b11      	ldr	r3, [pc, #68]	; (8017ae0 <HAL_DMA_Init+0x448>)
 8017a9c:	4013      	ands	r3, r2
 8017a9e:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	689b      	ldr	r3, [r3, #8]
 8017aa4:	2b40      	cmp	r3, #64	; 0x40
 8017aa6:	d01d      	beq.n	8017ae4 <HAL_DMA_Init+0x44c>
 8017aa8:	687b      	ldr	r3, [r7, #4]
 8017aaa:	689b      	ldr	r3, [r3, #8]
 8017aac:	2b80      	cmp	r3, #128	; 0x80
 8017aae:	d102      	bne.n	8017ab6 <HAL_DMA_Init+0x41e>
 8017ab0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017ab4:	e017      	b.n	8017ae6 <HAL_DMA_Init+0x44e>
 8017ab6:	2300      	movs	r3, #0
 8017ab8:	e015      	b.n	8017ae6 <HAL_DMA_Init+0x44e>
 8017aba:	bf00      	nop
 8017abc:	fe10803f 	.word	0xfe10803f
 8017ac0:	58025408 	.word	0x58025408
 8017ac4:	5802541c 	.word	0x5802541c
 8017ac8:	58025430 	.word	0x58025430
 8017acc:	58025444 	.word	0x58025444
 8017ad0:	58025458 	.word	0x58025458
 8017ad4:	5802546c 	.word	0x5802546c
 8017ad8:	58025480 	.word	0x58025480
 8017adc:	58025494 	.word	0x58025494
 8017ae0:	fffe000f 	.word	0xfffe000f
 8017ae4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017ae6:	687a      	ldr	r2, [r7, #4]
 8017ae8:	68d2      	ldr	r2, [r2, #12]
 8017aea:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017aec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017aee:	687b      	ldr	r3, [r7, #4]
 8017af0:	691b      	ldr	r3, [r3, #16]
 8017af2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8017af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	695b      	ldr	r3, [r3, #20]
 8017afa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8017afc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	699b      	ldr	r3, [r3, #24]
 8017b02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8017b04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017b06:	687b      	ldr	r3, [r7, #4]
 8017b08:	69db      	ldr	r3, [r3, #28]
 8017b0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8017b0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	6a1b      	ldr	r3, [r3, #32]
 8017b12:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8017b14:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8017b16:	697a      	ldr	r2, [r7, #20]
 8017b18:	4313      	orrs	r3, r2
 8017b1a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	681b      	ldr	r3, [r3, #0]
 8017b20:	697a      	ldr	r2, [r7, #20]
 8017b22:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	681b      	ldr	r3, [r3, #0]
 8017b28:	461a      	mov	r2, r3
 8017b2a:	4b6e      	ldr	r3, [pc, #440]	; (8017ce4 <HAL_DMA_Init+0x64c>)
 8017b2c:	4413      	add	r3, r2
 8017b2e:	4a6e      	ldr	r2, [pc, #440]	; (8017ce8 <HAL_DMA_Init+0x650>)
 8017b30:	fba2 2303 	umull	r2, r3, r2, r3
 8017b34:	091b      	lsrs	r3, r3, #4
 8017b36:	009a      	lsls	r2, r3, #2
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8017b3c:	6878      	ldr	r0, [r7, #4]
 8017b3e:	f001 fc45 	bl	80193cc <DMA_CalcBaseAndBitshift>
 8017b42:	4603      	mov	r3, r0
 8017b44:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017b4a:	f003 031f 	and.w	r3, r3, #31
 8017b4e:	2201      	movs	r2, #1
 8017b50:	409a      	lsls	r2, r3
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	605a      	str	r2, [r3, #4]
 8017b56:	e008      	b.n	8017b6a <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8017b58:	687b      	ldr	r3, [r7, #4]
 8017b5a:	2240      	movs	r2, #64	; 0x40
 8017b5c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2203      	movs	r2, #3
 8017b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8017b66:	2301      	movs	r3, #1
 8017b68:	e0b7      	b.n	8017cda <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	4a5f      	ldr	r2, [pc, #380]	; (8017cec <HAL_DMA_Init+0x654>)
 8017b70:	4293      	cmp	r3, r2
 8017b72:	d072      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	4a5d      	ldr	r2, [pc, #372]	; (8017cf0 <HAL_DMA_Init+0x658>)
 8017b7a:	4293      	cmp	r3, r2
 8017b7c:	d06d      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b7e:	687b      	ldr	r3, [r7, #4]
 8017b80:	681b      	ldr	r3, [r3, #0]
 8017b82:	4a5c      	ldr	r2, [pc, #368]	; (8017cf4 <HAL_DMA_Init+0x65c>)
 8017b84:	4293      	cmp	r3, r2
 8017b86:	d068      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	4a5a      	ldr	r2, [pc, #360]	; (8017cf8 <HAL_DMA_Init+0x660>)
 8017b8e:	4293      	cmp	r3, r2
 8017b90:	d063      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b92:	687b      	ldr	r3, [r7, #4]
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	4a59      	ldr	r2, [pc, #356]	; (8017cfc <HAL_DMA_Init+0x664>)
 8017b98:	4293      	cmp	r3, r2
 8017b9a:	d05e      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	4a57      	ldr	r2, [pc, #348]	; (8017d00 <HAL_DMA_Init+0x668>)
 8017ba2:	4293      	cmp	r3, r2
 8017ba4:	d059      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017ba6:	687b      	ldr	r3, [r7, #4]
 8017ba8:	681b      	ldr	r3, [r3, #0]
 8017baa:	4a56      	ldr	r2, [pc, #344]	; (8017d04 <HAL_DMA_Init+0x66c>)
 8017bac:	4293      	cmp	r3, r2
 8017bae:	d054      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	681b      	ldr	r3, [r3, #0]
 8017bb4:	4a54      	ldr	r2, [pc, #336]	; (8017d08 <HAL_DMA_Init+0x670>)
 8017bb6:	4293      	cmp	r3, r2
 8017bb8:	d04f      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	4a53      	ldr	r2, [pc, #332]	; (8017d0c <HAL_DMA_Init+0x674>)
 8017bc0:	4293      	cmp	r3, r2
 8017bc2:	d04a      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	4a51      	ldr	r2, [pc, #324]	; (8017d10 <HAL_DMA_Init+0x678>)
 8017bca:	4293      	cmp	r3, r2
 8017bcc:	d045      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	4a50      	ldr	r2, [pc, #320]	; (8017d14 <HAL_DMA_Init+0x67c>)
 8017bd4:	4293      	cmp	r3, r2
 8017bd6:	d040      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	681b      	ldr	r3, [r3, #0]
 8017bdc:	4a4e      	ldr	r2, [pc, #312]	; (8017d18 <HAL_DMA_Init+0x680>)
 8017bde:	4293      	cmp	r3, r2
 8017be0:	d03b      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017be2:	687b      	ldr	r3, [r7, #4]
 8017be4:	681b      	ldr	r3, [r3, #0]
 8017be6:	4a4d      	ldr	r2, [pc, #308]	; (8017d1c <HAL_DMA_Init+0x684>)
 8017be8:	4293      	cmp	r3, r2
 8017bea:	d036      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	4a4b      	ldr	r2, [pc, #300]	; (8017d20 <HAL_DMA_Init+0x688>)
 8017bf2:	4293      	cmp	r3, r2
 8017bf4:	d031      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017bf6:	687b      	ldr	r3, [r7, #4]
 8017bf8:	681b      	ldr	r3, [r3, #0]
 8017bfa:	4a4a      	ldr	r2, [pc, #296]	; (8017d24 <HAL_DMA_Init+0x68c>)
 8017bfc:	4293      	cmp	r3, r2
 8017bfe:	d02c      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c00:	687b      	ldr	r3, [r7, #4]
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	4a48      	ldr	r2, [pc, #288]	; (8017d28 <HAL_DMA_Init+0x690>)
 8017c06:	4293      	cmp	r3, r2
 8017c08:	d027      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	4a47      	ldr	r2, [pc, #284]	; (8017d2c <HAL_DMA_Init+0x694>)
 8017c10:	4293      	cmp	r3, r2
 8017c12:	d022      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	681b      	ldr	r3, [r3, #0]
 8017c18:	4a45      	ldr	r2, [pc, #276]	; (8017d30 <HAL_DMA_Init+0x698>)
 8017c1a:	4293      	cmp	r3, r2
 8017c1c:	d01d      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	4a44      	ldr	r2, [pc, #272]	; (8017d34 <HAL_DMA_Init+0x69c>)
 8017c24:	4293      	cmp	r3, r2
 8017c26:	d018      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	4a42      	ldr	r2, [pc, #264]	; (8017d38 <HAL_DMA_Init+0x6a0>)
 8017c2e:	4293      	cmp	r3, r2
 8017c30:	d013      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	4a41      	ldr	r2, [pc, #260]	; (8017d3c <HAL_DMA_Init+0x6a4>)
 8017c38:	4293      	cmp	r3, r2
 8017c3a:	d00e      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c3c:	687b      	ldr	r3, [r7, #4]
 8017c3e:	681b      	ldr	r3, [r3, #0]
 8017c40:	4a3f      	ldr	r2, [pc, #252]	; (8017d40 <HAL_DMA_Init+0x6a8>)
 8017c42:	4293      	cmp	r3, r2
 8017c44:	d009      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	4a3e      	ldr	r2, [pc, #248]	; (8017d44 <HAL_DMA_Init+0x6ac>)
 8017c4c:	4293      	cmp	r3, r2
 8017c4e:	d004      	beq.n	8017c5a <HAL_DMA_Init+0x5c2>
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	681b      	ldr	r3, [r3, #0]
 8017c54:	4a3c      	ldr	r2, [pc, #240]	; (8017d48 <HAL_DMA_Init+0x6b0>)
 8017c56:	4293      	cmp	r3, r2
 8017c58:	d101      	bne.n	8017c5e <HAL_DMA_Init+0x5c6>
 8017c5a:	2301      	movs	r3, #1
 8017c5c:	e000      	b.n	8017c60 <HAL_DMA_Init+0x5c8>
 8017c5e:	2300      	movs	r3, #0
 8017c60:	2b00      	cmp	r3, #0
 8017c62:	d032      	beq.n	8017cca <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8017c64:	6878      	ldr	r0, [r7, #4]
 8017c66:	f001 fcdf 	bl	8019628 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8017c6a:	687b      	ldr	r3, [r7, #4]
 8017c6c:	689b      	ldr	r3, [r3, #8]
 8017c6e:	2b80      	cmp	r3, #128	; 0x80
 8017c70:	d102      	bne.n	8017c78 <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	2200      	movs	r2, #0
 8017c76:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	685a      	ldr	r2, [r3, #4]
 8017c7c:	687b      	ldr	r3, [r7, #4]
 8017c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8017c80:	b2d2      	uxtb	r2, r2
 8017c82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8017c88:	687a      	ldr	r2, [r7, #4]
 8017c8a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8017c8c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	685b      	ldr	r3, [r3, #4]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d010      	beq.n	8017cb8 <HAL_DMA_Init+0x620>
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	685b      	ldr	r3, [r3, #4]
 8017c9a:	2b08      	cmp	r3, #8
 8017c9c:	d80c      	bhi.n	8017cb8 <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8017c9e:	6878      	ldr	r0, [r7, #4]
 8017ca0:	f001 fd5c 	bl	801975c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017ca8:	2200      	movs	r2, #0
 8017caa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017cb0:	687a      	ldr	r2, [r7, #4]
 8017cb2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8017cb4:	605a      	str	r2, [r3, #4]
 8017cb6:	e008      	b.n	8017cca <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	2200      	movs	r2, #0
 8017cbc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	2200      	movs	r2, #0
 8017cc8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	2200      	movs	r2, #0
 8017cce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	2201      	movs	r2, #1
 8017cd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8017cd8:	2300      	movs	r3, #0
}
 8017cda:	4618      	mov	r0, r3
 8017cdc:	3718      	adds	r7, #24
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	bd80      	pop	{r7, pc}
 8017ce2:	bf00      	nop
 8017ce4:	a7fdabf8 	.word	0xa7fdabf8
 8017ce8:	cccccccd 	.word	0xcccccccd
 8017cec:	40020010 	.word	0x40020010
 8017cf0:	40020028 	.word	0x40020028
 8017cf4:	40020040 	.word	0x40020040
 8017cf8:	40020058 	.word	0x40020058
 8017cfc:	40020070 	.word	0x40020070
 8017d00:	40020088 	.word	0x40020088
 8017d04:	400200a0 	.word	0x400200a0
 8017d08:	400200b8 	.word	0x400200b8
 8017d0c:	40020410 	.word	0x40020410
 8017d10:	40020428 	.word	0x40020428
 8017d14:	40020440 	.word	0x40020440
 8017d18:	40020458 	.word	0x40020458
 8017d1c:	40020470 	.word	0x40020470
 8017d20:	40020488 	.word	0x40020488
 8017d24:	400204a0 	.word	0x400204a0
 8017d28:	400204b8 	.word	0x400204b8
 8017d2c:	58025408 	.word	0x58025408
 8017d30:	5802541c 	.word	0x5802541c
 8017d34:	58025430 	.word	0x58025430
 8017d38:	58025444 	.word	0x58025444
 8017d3c:	58025458 	.word	0x58025458
 8017d40:	5802546c 	.word	0x5802546c
 8017d44:	58025480 	.word	0x58025480
 8017d48:	58025494 	.word	0x58025494

08017d4c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8017d4c:	b580      	push	{r7, lr}
 8017d4e:	b086      	sub	sp, #24
 8017d50:	af00      	add	r7, sp, #0
 8017d52:	60f8      	str	r0, [r7, #12]
 8017d54:	60b9      	str	r1, [r7, #8]
 8017d56:	607a      	str	r2, [r7, #4]
 8017d58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8017d5a:	2300      	movs	r3, #0
 8017d5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8017d5e:	68fb      	ldr	r3, [r7, #12]
 8017d60:	2b00      	cmp	r3, #0
 8017d62:	d101      	bne.n	8017d68 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8017d64:	2301      	movs	r3, #1
 8017d66:	e226      	b.n	80181b6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8017d68:	68fb      	ldr	r3, [r7, #12]
 8017d6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8017d6e:	2b01      	cmp	r3, #1
 8017d70:	d101      	bne.n	8017d76 <HAL_DMA_Start_IT+0x2a>
 8017d72:	2302      	movs	r3, #2
 8017d74:	e21f      	b.n	80181b6 <HAL_DMA_Start_IT+0x46a>
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	2201      	movs	r2, #1
 8017d7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8017d7e:	68fb      	ldr	r3, [r7, #12]
 8017d80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8017d84:	b2db      	uxtb	r3, r3
 8017d86:	2b01      	cmp	r3, #1
 8017d88:	f040 820a 	bne.w	80181a0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8017d8c:	68fb      	ldr	r3, [r7, #12]
 8017d8e:	2202      	movs	r2, #2
 8017d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8017d94:	68fb      	ldr	r3, [r7, #12]
 8017d96:	2200      	movs	r2, #0
 8017d98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	4a68      	ldr	r2, [pc, #416]	; (8017f40 <HAL_DMA_Start_IT+0x1f4>)
 8017da0:	4293      	cmp	r3, r2
 8017da2:	d04a      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017da4:	68fb      	ldr	r3, [r7, #12]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	4a66      	ldr	r2, [pc, #408]	; (8017f44 <HAL_DMA_Start_IT+0x1f8>)
 8017daa:	4293      	cmp	r3, r2
 8017dac:	d045      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dae:	68fb      	ldr	r3, [r7, #12]
 8017db0:	681b      	ldr	r3, [r3, #0]
 8017db2:	4a65      	ldr	r2, [pc, #404]	; (8017f48 <HAL_DMA_Start_IT+0x1fc>)
 8017db4:	4293      	cmp	r3, r2
 8017db6:	d040      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017db8:	68fb      	ldr	r3, [r7, #12]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	4a63      	ldr	r2, [pc, #396]	; (8017f4c <HAL_DMA_Start_IT+0x200>)
 8017dbe:	4293      	cmp	r3, r2
 8017dc0:	d03b      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dc2:	68fb      	ldr	r3, [r7, #12]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	4a62      	ldr	r2, [pc, #392]	; (8017f50 <HAL_DMA_Start_IT+0x204>)
 8017dc8:	4293      	cmp	r3, r2
 8017dca:	d036      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	4a60      	ldr	r2, [pc, #384]	; (8017f54 <HAL_DMA_Start_IT+0x208>)
 8017dd2:	4293      	cmp	r3, r2
 8017dd4:	d031      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dd6:	68fb      	ldr	r3, [r7, #12]
 8017dd8:	681b      	ldr	r3, [r3, #0]
 8017dda:	4a5f      	ldr	r2, [pc, #380]	; (8017f58 <HAL_DMA_Start_IT+0x20c>)
 8017ddc:	4293      	cmp	r3, r2
 8017dde:	d02c      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017de0:	68fb      	ldr	r3, [r7, #12]
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	4a5d      	ldr	r2, [pc, #372]	; (8017f5c <HAL_DMA_Start_IT+0x210>)
 8017de6:	4293      	cmp	r3, r2
 8017de8:	d027      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dea:	68fb      	ldr	r3, [r7, #12]
 8017dec:	681b      	ldr	r3, [r3, #0]
 8017dee:	4a5c      	ldr	r2, [pc, #368]	; (8017f60 <HAL_DMA_Start_IT+0x214>)
 8017df0:	4293      	cmp	r3, r2
 8017df2:	d022      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017df4:	68fb      	ldr	r3, [r7, #12]
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	4a5a      	ldr	r2, [pc, #360]	; (8017f64 <HAL_DMA_Start_IT+0x218>)
 8017dfa:	4293      	cmp	r3, r2
 8017dfc:	d01d      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017dfe:	68fb      	ldr	r3, [r7, #12]
 8017e00:	681b      	ldr	r3, [r3, #0]
 8017e02:	4a59      	ldr	r2, [pc, #356]	; (8017f68 <HAL_DMA_Start_IT+0x21c>)
 8017e04:	4293      	cmp	r3, r2
 8017e06:	d018      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e08:	68fb      	ldr	r3, [r7, #12]
 8017e0a:	681b      	ldr	r3, [r3, #0]
 8017e0c:	4a57      	ldr	r2, [pc, #348]	; (8017f6c <HAL_DMA_Start_IT+0x220>)
 8017e0e:	4293      	cmp	r3, r2
 8017e10:	d013      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	4a56      	ldr	r2, [pc, #344]	; (8017f70 <HAL_DMA_Start_IT+0x224>)
 8017e18:	4293      	cmp	r3, r2
 8017e1a:	d00e      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	4a54      	ldr	r2, [pc, #336]	; (8017f74 <HAL_DMA_Start_IT+0x228>)
 8017e22:	4293      	cmp	r3, r2
 8017e24:	d009      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	4a53      	ldr	r2, [pc, #332]	; (8017f78 <HAL_DMA_Start_IT+0x22c>)
 8017e2c:	4293      	cmp	r3, r2
 8017e2e:	d004      	beq.n	8017e3a <HAL_DMA_Start_IT+0xee>
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	4a51      	ldr	r2, [pc, #324]	; (8017f7c <HAL_DMA_Start_IT+0x230>)
 8017e36:	4293      	cmp	r3, r2
 8017e38:	d108      	bne.n	8017e4c <HAL_DMA_Start_IT+0x100>
 8017e3a:	68fb      	ldr	r3, [r7, #12]
 8017e3c:	681b      	ldr	r3, [r3, #0]
 8017e3e:	681a      	ldr	r2, [r3, #0]
 8017e40:	68fb      	ldr	r3, [r7, #12]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	f022 0201 	bic.w	r2, r2, #1
 8017e48:	601a      	str	r2, [r3, #0]
 8017e4a:	e007      	b.n	8017e5c <HAL_DMA_Start_IT+0x110>
 8017e4c:	68fb      	ldr	r3, [r7, #12]
 8017e4e:	681b      	ldr	r3, [r3, #0]
 8017e50:	681a      	ldr	r2, [r3, #0]
 8017e52:	68fb      	ldr	r3, [r7, #12]
 8017e54:	681b      	ldr	r3, [r3, #0]
 8017e56:	f022 0201 	bic.w	r2, r2, #1
 8017e5a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8017e5c:	683b      	ldr	r3, [r7, #0]
 8017e5e:	687a      	ldr	r2, [r7, #4]
 8017e60:	68b9      	ldr	r1, [r7, #8]
 8017e62:	68f8      	ldr	r0, [r7, #12]
 8017e64:	f001 f906 	bl	8019074 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	4a34      	ldr	r2, [pc, #208]	; (8017f40 <HAL_DMA_Start_IT+0x1f4>)
 8017e6e:	4293      	cmp	r3, r2
 8017e70:	d04a      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	681b      	ldr	r3, [r3, #0]
 8017e76:	4a33      	ldr	r2, [pc, #204]	; (8017f44 <HAL_DMA_Start_IT+0x1f8>)
 8017e78:	4293      	cmp	r3, r2
 8017e7a:	d045      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e7c:	68fb      	ldr	r3, [r7, #12]
 8017e7e:	681b      	ldr	r3, [r3, #0]
 8017e80:	4a31      	ldr	r2, [pc, #196]	; (8017f48 <HAL_DMA_Start_IT+0x1fc>)
 8017e82:	4293      	cmp	r3, r2
 8017e84:	d040      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e86:	68fb      	ldr	r3, [r7, #12]
 8017e88:	681b      	ldr	r3, [r3, #0]
 8017e8a:	4a30      	ldr	r2, [pc, #192]	; (8017f4c <HAL_DMA_Start_IT+0x200>)
 8017e8c:	4293      	cmp	r3, r2
 8017e8e:	d03b      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	681b      	ldr	r3, [r3, #0]
 8017e94:	4a2e      	ldr	r2, [pc, #184]	; (8017f50 <HAL_DMA_Start_IT+0x204>)
 8017e96:	4293      	cmp	r3, r2
 8017e98:	d036      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017e9a:	68fb      	ldr	r3, [r7, #12]
 8017e9c:	681b      	ldr	r3, [r3, #0]
 8017e9e:	4a2d      	ldr	r2, [pc, #180]	; (8017f54 <HAL_DMA_Start_IT+0x208>)
 8017ea0:	4293      	cmp	r3, r2
 8017ea2:	d031      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ea4:	68fb      	ldr	r3, [r7, #12]
 8017ea6:	681b      	ldr	r3, [r3, #0]
 8017ea8:	4a2b      	ldr	r2, [pc, #172]	; (8017f58 <HAL_DMA_Start_IT+0x20c>)
 8017eaa:	4293      	cmp	r3, r2
 8017eac:	d02c      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017eae:	68fb      	ldr	r3, [r7, #12]
 8017eb0:	681b      	ldr	r3, [r3, #0]
 8017eb2:	4a2a      	ldr	r2, [pc, #168]	; (8017f5c <HAL_DMA_Start_IT+0x210>)
 8017eb4:	4293      	cmp	r3, r2
 8017eb6:	d027      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017eb8:	68fb      	ldr	r3, [r7, #12]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	4a28      	ldr	r2, [pc, #160]	; (8017f60 <HAL_DMA_Start_IT+0x214>)
 8017ebe:	4293      	cmp	r3, r2
 8017ec0:	d022      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	681b      	ldr	r3, [r3, #0]
 8017ec6:	4a27      	ldr	r2, [pc, #156]	; (8017f64 <HAL_DMA_Start_IT+0x218>)
 8017ec8:	4293      	cmp	r3, r2
 8017eca:	d01d      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ecc:	68fb      	ldr	r3, [r7, #12]
 8017ece:	681b      	ldr	r3, [r3, #0]
 8017ed0:	4a25      	ldr	r2, [pc, #148]	; (8017f68 <HAL_DMA_Start_IT+0x21c>)
 8017ed2:	4293      	cmp	r3, r2
 8017ed4:	d018      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	681b      	ldr	r3, [r3, #0]
 8017eda:	4a24      	ldr	r2, [pc, #144]	; (8017f6c <HAL_DMA_Start_IT+0x220>)
 8017edc:	4293      	cmp	r3, r2
 8017ede:	d013      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	4a22      	ldr	r2, [pc, #136]	; (8017f70 <HAL_DMA_Start_IT+0x224>)
 8017ee6:	4293      	cmp	r3, r2
 8017ee8:	d00e      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017eea:	68fb      	ldr	r3, [r7, #12]
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	4a21      	ldr	r2, [pc, #132]	; (8017f74 <HAL_DMA_Start_IT+0x228>)
 8017ef0:	4293      	cmp	r3, r2
 8017ef2:	d009      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017ef4:	68fb      	ldr	r3, [r7, #12]
 8017ef6:	681b      	ldr	r3, [r3, #0]
 8017ef8:	4a1f      	ldr	r2, [pc, #124]	; (8017f78 <HAL_DMA_Start_IT+0x22c>)
 8017efa:	4293      	cmp	r3, r2
 8017efc:	d004      	beq.n	8017f08 <HAL_DMA_Start_IT+0x1bc>
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	681b      	ldr	r3, [r3, #0]
 8017f02:	4a1e      	ldr	r2, [pc, #120]	; (8017f7c <HAL_DMA_Start_IT+0x230>)
 8017f04:	4293      	cmp	r3, r2
 8017f06:	d101      	bne.n	8017f0c <HAL_DMA_Start_IT+0x1c0>
 8017f08:	2301      	movs	r3, #1
 8017f0a:	e000      	b.n	8017f0e <HAL_DMA_Start_IT+0x1c2>
 8017f0c:	2300      	movs	r3, #0
 8017f0e:	2b00      	cmp	r3, #0
 8017f10:	d036      	beq.n	8017f80 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	f023 021e 	bic.w	r2, r3, #30
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	681b      	ldr	r3, [r3, #0]
 8017f20:	f042 0216 	orr.w	r2, r2, #22
 8017f24:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017f26:	68fb      	ldr	r3, [r7, #12]
 8017f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d03e      	beq.n	8017fac <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8017f2e:	68fb      	ldr	r3, [r7, #12]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	681a      	ldr	r2, [r3, #0]
 8017f34:	68fb      	ldr	r3, [r7, #12]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	f042 0208 	orr.w	r2, r2, #8
 8017f3c:	601a      	str	r2, [r3, #0]
 8017f3e:	e035      	b.n	8017fac <HAL_DMA_Start_IT+0x260>
 8017f40:	40020010 	.word	0x40020010
 8017f44:	40020028 	.word	0x40020028
 8017f48:	40020040 	.word	0x40020040
 8017f4c:	40020058 	.word	0x40020058
 8017f50:	40020070 	.word	0x40020070
 8017f54:	40020088 	.word	0x40020088
 8017f58:	400200a0 	.word	0x400200a0
 8017f5c:	400200b8 	.word	0x400200b8
 8017f60:	40020410 	.word	0x40020410
 8017f64:	40020428 	.word	0x40020428
 8017f68:	40020440 	.word	0x40020440
 8017f6c:	40020458 	.word	0x40020458
 8017f70:	40020470 	.word	0x40020470
 8017f74:	40020488 	.word	0x40020488
 8017f78:	400204a0 	.word	0x400204a0
 8017f7c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8017f80:	68fb      	ldr	r3, [r7, #12]
 8017f82:	681b      	ldr	r3, [r3, #0]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	f023 020e 	bic.w	r2, r3, #14
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f042 020a 	orr.w	r2, r2, #10
 8017f92:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8017f94:	68fb      	ldr	r3, [r7, #12]
 8017f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	d007      	beq.n	8017fac <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	681a      	ldr	r2, [r3, #0]
 8017fa2:	68fb      	ldr	r3, [r7, #12]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	f042 0204 	orr.w	r2, r2, #4
 8017faa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	681b      	ldr	r3, [r3, #0]
 8017fb0:	4a83      	ldr	r2, [pc, #524]	; (80181c0 <HAL_DMA_Start_IT+0x474>)
 8017fb2:	4293      	cmp	r3, r2
 8017fb4:	d072      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	4a82      	ldr	r2, [pc, #520]	; (80181c4 <HAL_DMA_Start_IT+0x478>)
 8017fbc:	4293      	cmp	r3, r2
 8017fbe:	d06d      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	681b      	ldr	r3, [r3, #0]
 8017fc4:	4a80      	ldr	r2, [pc, #512]	; (80181c8 <HAL_DMA_Start_IT+0x47c>)
 8017fc6:	4293      	cmp	r3, r2
 8017fc8:	d068      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fca:	68fb      	ldr	r3, [r7, #12]
 8017fcc:	681b      	ldr	r3, [r3, #0]
 8017fce:	4a7f      	ldr	r2, [pc, #508]	; (80181cc <HAL_DMA_Start_IT+0x480>)
 8017fd0:	4293      	cmp	r3, r2
 8017fd2:	d063      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fd4:	68fb      	ldr	r3, [r7, #12]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	4a7d      	ldr	r2, [pc, #500]	; (80181d0 <HAL_DMA_Start_IT+0x484>)
 8017fda:	4293      	cmp	r3, r2
 8017fdc:	d05e      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fde:	68fb      	ldr	r3, [r7, #12]
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	4a7c      	ldr	r2, [pc, #496]	; (80181d4 <HAL_DMA_Start_IT+0x488>)
 8017fe4:	4293      	cmp	r3, r2
 8017fe6:	d059      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017fe8:	68fb      	ldr	r3, [r7, #12]
 8017fea:	681b      	ldr	r3, [r3, #0]
 8017fec:	4a7a      	ldr	r2, [pc, #488]	; (80181d8 <HAL_DMA_Start_IT+0x48c>)
 8017fee:	4293      	cmp	r3, r2
 8017ff0:	d054      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	681b      	ldr	r3, [r3, #0]
 8017ff6:	4a79      	ldr	r2, [pc, #484]	; (80181dc <HAL_DMA_Start_IT+0x490>)
 8017ff8:	4293      	cmp	r3, r2
 8017ffa:	d04f      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	4a77      	ldr	r2, [pc, #476]	; (80181e0 <HAL_DMA_Start_IT+0x494>)
 8018002:	4293      	cmp	r3, r2
 8018004:	d04a      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	681b      	ldr	r3, [r3, #0]
 801800a:	4a76      	ldr	r2, [pc, #472]	; (80181e4 <HAL_DMA_Start_IT+0x498>)
 801800c:	4293      	cmp	r3, r2
 801800e:	d045      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018010:	68fb      	ldr	r3, [r7, #12]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	4a74      	ldr	r2, [pc, #464]	; (80181e8 <HAL_DMA_Start_IT+0x49c>)
 8018016:	4293      	cmp	r3, r2
 8018018:	d040      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	4a73      	ldr	r2, [pc, #460]	; (80181ec <HAL_DMA_Start_IT+0x4a0>)
 8018020:	4293      	cmp	r3, r2
 8018022:	d03b      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	4a71      	ldr	r2, [pc, #452]	; (80181f0 <HAL_DMA_Start_IT+0x4a4>)
 801802a:	4293      	cmp	r3, r2
 801802c:	d036      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	4a70      	ldr	r2, [pc, #448]	; (80181f4 <HAL_DMA_Start_IT+0x4a8>)
 8018034:	4293      	cmp	r3, r2
 8018036:	d031      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018038:	68fb      	ldr	r3, [r7, #12]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	4a6e      	ldr	r2, [pc, #440]	; (80181f8 <HAL_DMA_Start_IT+0x4ac>)
 801803e:	4293      	cmp	r3, r2
 8018040:	d02c      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018042:	68fb      	ldr	r3, [r7, #12]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4a6d      	ldr	r2, [pc, #436]	; (80181fc <HAL_DMA_Start_IT+0x4b0>)
 8018048:	4293      	cmp	r3, r2
 801804a:	d027      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801804c:	68fb      	ldr	r3, [r7, #12]
 801804e:	681b      	ldr	r3, [r3, #0]
 8018050:	4a6b      	ldr	r2, [pc, #428]	; (8018200 <HAL_DMA_Start_IT+0x4b4>)
 8018052:	4293      	cmp	r3, r2
 8018054:	d022      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018056:	68fb      	ldr	r3, [r7, #12]
 8018058:	681b      	ldr	r3, [r3, #0]
 801805a:	4a6a      	ldr	r2, [pc, #424]	; (8018204 <HAL_DMA_Start_IT+0x4b8>)
 801805c:	4293      	cmp	r3, r2
 801805e:	d01d      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018060:	68fb      	ldr	r3, [r7, #12]
 8018062:	681b      	ldr	r3, [r3, #0]
 8018064:	4a68      	ldr	r2, [pc, #416]	; (8018208 <HAL_DMA_Start_IT+0x4bc>)
 8018066:	4293      	cmp	r3, r2
 8018068:	d018      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	4a67      	ldr	r2, [pc, #412]	; (801820c <HAL_DMA_Start_IT+0x4c0>)
 8018070:	4293      	cmp	r3, r2
 8018072:	d013      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018074:	68fb      	ldr	r3, [r7, #12]
 8018076:	681b      	ldr	r3, [r3, #0]
 8018078:	4a65      	ldr	r2, [pc, #404]	; (8018210 <HAL_DMA_Start_IT+0x4c4>)
 801807a:	4293      	cmp	r3, r2
 801807c:	d00e      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	681b      	ldr	r3, [r3, #0]
 8018082:	4a64      	ldr	r2, [pc, #400]	; (8018214 <HAL_DMA_Start_IT+0x4c8>)
 8018084:	4293      	cmp	r3, r2
 8018086:	d009      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018088:	68fb      	ldr	r3, [r7, #12]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	4a62      	ldr	r2, [pc, #392]	; (8018218 <HAL_DMA_Start_IT+0x4cc>)
 801808e:	4293      	cmp	r3, r2
 8018090:	d004      	beq.n	801809c <HAL_DMA_Start_IT+0x350>
 8018092:	68fb      	ldr	r3, [r7, #12]
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	4a61      	ldr	r2, [pc, #388]	; (801821c <HAL_DMA_Start_IT+0x4d0>)
 8018098:	4293      	cmp	r3, r2
 801809a:	d101      	bne.n	80180a0 <HAL_DMA_Start_IT+0x354>
 801809c:	2301      	movs	r3, #1
 801809e:	e000      	b.n	80180a2 <HAL_DMA_Start_IT+0x356>
 80180a0:	2300      	movs	r3, #0
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	d01a      	beq.n	80180dc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d007      	beq.n	80180c4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80180b4:	68fb      	ldr	r3, [r7, #12]
 80180b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180b8:	681a      	ldr	r2, [r3, #0]
 80180ba:	68fb      	ldr	r3, [r7, #12]
 80180bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80180be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80180c2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d007      	beq.n	80180dc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180d0:	681a      	ldr	r2, [r3, #0]
 80180d2:	68fb      	ldr	r3, [r7, #12]
 80180d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80180d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80180da:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80180dc:	68fb      	ldr	r3, [r7, #12]
 80180de:	681b      	ldr	r3, [r3, #0]
 80180e0:	4a37      	ldr	r2, [pc, #220]	; (80181c0 <HAL_DMA_Start_IT+0x474>)
 80180e2:	4293      	cmp	r3, r2
 80180e4:	d04a      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 80180e6:	68fb      	ldr	r3, [r7, #12]
 80180e8:	681b      	ldr	r3, [r3, #0]
 80180ea:	4a36      	ldr	r2, [pc, #216]	; (80181c4 <HAL_DMA_Start_IT+0x478>)
 80180ec:	4293      	cmp	r3, r2
 80180ee:	d045      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 80180f0:	68fb      	ldr	r3, [r7, #12]
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	4a34      	ldr	r2, [pc, #208]	; (80181c8 <HAL_DMA_Start_IT+0x47c>)
 80180f6:	4293      	cmp	r3, r2
 80180f8:	d040      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	4a33      	ldr	r2, [pc, #204]	; (80181cc <HAL_DMA_Start_IT+0x480>)
 8018100:	4293      	cmp	r3, r2
 8018102:	d03b      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	681b      	ldr	r3, [r3, #0]
 8018108:	4a31      	ldr	r2, [pc, #196]	; (80181d0 <HAL_DMA_Start_IT+0x484>)
 801810a:	4293      	cmp	r3, r2
 801810c:	d036      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	4a30      	ldr	r2, [pc, #192]	; (80181d4 <HAL_DMA_Start_IT+0x488>)
 8018114:	4293      	cmp	r3, r2
 8018116:	d031      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	4a2e      	ldr	r2, [pc, #184]	; (80181d8 <HAL_DMA_Start_IT+0x48c>)
 801811e:	4293      	cmp	r3, r2
 8018120:	d02c      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	4a2d      	ldr	r2, [pc, #180]	; (80181dc <HAL_DMA_Start_IT+0x490>)
 8018128:	4293      	cmp	r3, r2
 801812a:	d027      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	4a2b      	ldr	r2, [pc, #172]	; (80181e0 <HAL_DMA_Start_IT+0x494>)
 8018132:	4293      	cmp	r3, r2
 8018134:	d022      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	4a2a      	ldr	r2, [pc, #168]	; (80181e4 <HAL_DMA_Start_IT+0x498>)
 801813c:	4293      	cmp	r3, r2
 801813e:	d01d      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018140:	68fb      	ldr	r3, [r7, #12]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4a28      	ldr	r2, [pc, #160]	; (80181e8 <HAL_DMA_Start_IT+0x49c>)
 8018146:	4293      	cmp	r3, r2
 8018148:	d018      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	4a27      	ldr	r2, [pc, #156]	; (80181ec <HAL_DMA_Start_IT+0x4a0>)
 8018150:	4293      	cmp	r3, r2
 8018152:	d013      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	681b      	ldr	r3, [r3, #0]
 8018158:	4a25      	ldr	r2, [pc, #148]	; (80181f0 <HAL_DMA_Start_IT+0x4a4>)
 801815a:	4293      	cmp	r3, r2
 801815c:	d00e      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 801815e:	68fb      	ldr	r3, [r7, #12]
 8018160:	681b      	ldr	r3, [r3, #0]
 8018162:	4a24      	ldr	r2, [pc, #144]	; (80181f4 <HAL_DMA_Start_IT+0x4a8>)
 8018164:	4293      	cmp	r3, r2
 8018166:	d009      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	681b      	ldr	r3, [r3, #0]
 801816c:	4a22      	ldr	r2, [pc, #136]	; (80181f8 <HAL_DMA_Start_IT+0x4ac>)
 801816e:	4293      	cmp	r3, r2
 8018170:	d004      	beq.n	801817c <HAL_DMA_Start_IT+0x430>
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	681b      	ldr	r3, [r3, #0]
 8018176:	4a21      	ldr	r2, [pc, #132]	; (80181fc <HAL_DMA_Start_IT+0x4b0>)
 8018178:	4293      	cmp	r3, r2
 801817a:	d108      	bne.n	801818e <HAL_DMA_Start_IT+0x442>
 801817c:	68fb      	ldr	r3, [r7, #12]
 801817e:	681b      	ldr	r3, [r3, #0]
 8018180:	681a      	ldr	r2, [r3, #0]
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	681b      	ldr	r3, [r3, #0]
 8018186:	f042 0201 	orr.w	r2, r2, #1
 801818a:	601a      	str	r2, [r3, #0]
 801818c:	e012      	b.n	80181b4 <HAL_DMA_Start_IT+0x468>
 801818e:	68fb      	ldr	r3, [r7, #12]
 8018190:	681b      	ldr	r3, [r3, #0]
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	f042 0201 	orr.w	r2, r2, #1
 801819c:	601a      	str	r2, [r3, #0]
 801819e:	e009      	b.n	80181b4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80181a0:	68fb      	ldr	r3, [r7, #12]
 80181a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80181a6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80181a8:	68fb      	ldr	r3, [r7, #12]
 80181aa:	2200      	movs	r2, #0
 80181ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80181b0:	2301      	movs	r3, #1
 80181b2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80181b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80181b6:	4618      	mov	r0, r3
 80181b8:	3718      	adds	r7, #24
 80181ba:	46bd      	mov	sp, r7
 80181bc:	bd80      	pop	{r7, pc}
 80181be:	bf00      	nop
 80181c0:	40020010 	.word	0x40020010
 80181c4:	40020028 	.word	0x40020028
 80181c8:	40020040 	.word	0x40020040
 80181cc:	40020058 	.word	0x40020058
 80181d0:	40020070 	.word	0x40020070
 80181d4:	40020088 	.word	0x40020088
 80181d8:	400200a0 	.word	0x400200a0
 80181dc:	400200b8 	.word	0x400200b8
 80181e0:	40020410 	.word	0x40020410
 80181e4:	40020428 	.word	0x40020428
 80181e8:	40020440 	.word	0x40020440
 80181ec:	40020458 	.word	0x40020458
 80181f0:	40020470 	.word	0x40020470
 80181f4:	40020488 	.word	0x40020488
 80181f8:	400204a0 	.word	0x400204a0
 80181fc:	400204b8 	.word	0x400204b8
 8018200:	58025408 	.word	0x58025408
 8018204:	5802541c 	.word	0x5802541c
 8018208:	58025430 	.word	0x58025430
 801820c:	58025444 	.word	0x58025444
 8018210:	58025458 	.word	0x58025458
 8018214:	5802546c 	.word	0x5802546c
 8018218:	58025480 	.word	0x58025480
 801821c:	58025494 	.word	0x58025494

08018220 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b08a      	sub	sp, #40	; 0x28
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8018228:	2300      	movs	r3, #0
 801822a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801822c:	4b67      	ldr	r3, [pc, #412]	; (80183cc <HAL_DMA_IRQHandler+0x1ac>)
 801822e:	681b      	ldr	r3, [r3, #0]
 8018230:	4a67      	ldr	r2, [pc, #412]	; (80183d0 <HAL_DMA_IRQHandler+0x1b0>)
 8018232:	fba2 2303 	umull	r2, r3, r2, r3
 8018236:	0a9b      	lsrs	r3, r3, #10
 8018238:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801823e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8018244:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8018246:	6a3b      	ldr	r3, [r7, #32]
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801824c:	69fb      	ldr	r3, [r7, #28]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8018252:	687b      	ldr	r3, [r7, #4]
 8018254:	681b      	ldr	r3, [r3, #0]
 8018256:	4a5f      	ldr	r2, [pc, #380]	; (80183d4 <HAL_DMA_IRQHandler+0x1b4>)
 8018258:	4293      	cmp	r3, r2
 801825a:	d04a      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	681b      	ldr	r3, [r3, #0]
 8018260:	4a5d      	ldr	r2, [pc, #372]	; (80183d8 <HAL_DMA_IRQHandler+0x1b8>)
 8018262:	4293      	cmp	r3, r2
 8018264:	d045      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	4a5c      	ldr	r2, [pc, #368]	; (80183dc <HAL_DMA_IRQHandler+0x1bc>)
 801826c:	4293      	cmp	r3, r2
 801826e:	d040      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 8018270:	687b      	ldr	r3, [r7, #4]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	4a5a      	ldr	r2, [pc, #360]	; (80183e0 <HAL_DMA_IRQHandler+0x1c0>)
 8018276:	4293      	cmp	r3, r2
 8018278:	d03b      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 801827a:	687b      	ldr	r3, [r7, #4]
 801827c:	681b      	ldr	r3, [r3, #0]
 801827e:	4a59      	ldr	r2, [pc, #356]	; (80183e4 <HAL_DMA_IRQHandler+0x1c4>)
 8018280:	4293      	cmp	r3, r2
 8018282:	d036      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	681b      	ldr	r3, [r3, #0]
 8018288:	4a57      	ldr	r2, [pc, #348]	; (80183e8 <HAL_DMA_IRQHandler+0x1c8>)
 801828a:	4293      	cmp	r3, r2
 801828c:	d031      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	4a56      	ldr	r2, [pc, #344]	; (80183ec <HAL_DMA_IRQHandler+0x1cc>)
 8018294:	4293      	cmp	r3, r2
 8018296:	d02c      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	681b      	ldr	r3, [r3, #0]
 801829c:	4a54      	ldr	r2, [pc, #336]	; (80183f0 <HAL_DMA_IRQHandler+0x1d0>)
 801829e:	4293      	cmp	r3, r2
 80182a0:	d027      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	4a53      	ldr	r2, [pc, #332]	; (80183f4 <HAL_DMA_IRQHandler+0x1d4>)
 80182a8:	4293      	cmp	r3, r2
 80182aa:	d022      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182ac:	687b      	ldr	r3, [r7, #4]
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	4a51      	ldr	r2, [pc, #324]	; (80183f8 <HAL_DMA_IRQHandler+0x1d8>)
 80182b2:	4293      	cmp	r3, r2
 80182b4:	d01d      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	681b      	ldr	r3, [r3, #0]
 80182ba:	4a50      	ldr	r2, [pc, #320]	; (80183fc <HAL_DMA_IRQHandler+0x1dc>)
 80182bc:	4293      	cmp	r3, r2
 80182be:	d018      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	4a4e      	ldr	r2, [pc, #312]	; (8018400 <HAL_DMA_IRQHandler+0x1e0>)
 80182c6:	4293      	cmp	r3, r2
 80182c8:	d013      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182ca:	687b      	ldr	r3, [r7, #4]
 80182cc:	681b      	ldr	r3, [r3, #0]
 80182ce:	4a4d      	ldr	r2, [pc, #308]	; (8018404 <HAL_DMA_IRQHandler+0x1e4>)
 80182d0:	4293      	cmp	r3, r2
 80182d2:	d00e      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	681b      	ldr	r3, [r3, #0]
 80182d8:	4a4b      	ldr	r2, [pc, #300]	; (8018408 <HAL_DMA_IRQHandler+0x1e8>)
 80182da:	4293      	cmp	r3, r2
 80182dc:	d009      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	4a4a      	ldr	r2, [pc, #296]	; (801840c <HAL_DMA_IRQHandler+0x1ec>)
 80182e4:	4293      	cmp	r3, r2
 80182e6:	d004      	beq.n	80182f2 <HAL_DMA_IRQHandler+0xd2>
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	681b      	ldr	r3, [r3, #0]
 80182ec:	4a48      	ldr	r2, [pc, #288]	; (8018410 <HAL_DMA_IRQHandler+0x1f0>)
 80182ee:	4293      	cmp	r3, r2
 80182f0:	d101      	bne.n	80182f6 <HAL_DMA_IRQHandler+0xd6>
 80182f2:	2301      	movs	r3, #1
 80182f4:	e000      	b.n	80182f8 <HAL_DMA_IRQHandler+0xd8>
 80182f6:	2300      	movs	r3, #0
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	f000 842b 	beq.w	8018b54 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80182fe:	687b      	ldr	r3, [r7, #4]
 8018300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018302:	f003 031f 	and.w	r3, r3, #31
 8018306:	2208      	movs	r2, #8
 8018308:	409a      	lsls	r2, r3
 801830a:	69bb      	ldr	r3, [r7, #24]
 801830c:	4013      	ands	r3, r2
 801830e:	2b00      	cmp	r3, #0
 8018310:	f000 80a2 	beq.w	8018458 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	4a2e      	ldr	r2, [pc, #184]	; (80183d4 <HAL_DMA_IRQHandler+0x1b4>)
 801831a:	4293      	cmp	r3, r2
 801831c:	d04a      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	4a2d      	ldr	r2, [pc, #180]	; (80183d8 <HAL_DMA_IRQHandler+0x1b8>)
 8018324:	4293      	cmp	r3, r2
 8018326:	d045      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	681b      	ldr	r3, [r3, #0]
 801832c:	4a2b      	ldr	r2, [pc, #172]	; (80183dc <HAL_DMA_IRQHandler+0x1bc>)
 801832e:	4293      	cmp	r3, r2
 8018330:	d040      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	4a2a      	ldr	r2, [pc, #168]	; (80183e0 <HAL_DMA_IRQHandler+0x1c0>)
 8018338:	4293      	cmp	r3, r2
 801833a:	d03b      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	681b      	ldr	r3, [r3, #0]
 8018340:	4a28      	ldr	r2, [pc, #160]	; (80183e4 <HAL_DMA_IRQHandler+0x1c4>)
 8018342:	4293      	cmp	r3, r2
 8018344:	d036      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018346:	687b      	ldr	r3, [r7, #4]
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	4a27      	ldr	r2, [pc, #156]	; (80183e8 <HAL_DMA_IRQHandler+0x1c8>)
 801834c:	4293      	cmp	r3, r2
 801834e:	d031      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	4a25      	ldr	r2, [pc, #148]	; (80183ec <HAL_DMA_IRQHandler+0x1cc>)
 8018356:	4293      	cmp	r3, r2
 8018358:	d02c      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801835a:	687b      	ldr	r3, [r7, #4]
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	4a24      	ldr	r2, [pc, #144]	; (80183f0 <HAL_DMA_IRQHandler+0x1d0>)
 8018360:	4293      	cmp	r3, r2
 8018362:	d027      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018364:	687b      	ldr	r3, [r7, #4]
 8018366:	681b      	ldr	r3, [r3, #0]
 8018368:	4a22      	ldr	r2, [pc, #136]	; (80183f4 <HAL_DMA_IRQHandler+0x1d4>)
 801836a:	4293      	cmp	r3, r2
 801836c:	d022      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	681b      	ldr	r3, [r3, #0]
 8018372:	4a21      	ldr	r2, [pc, #132]	; (80183f8 <HAL_DMA_IRQHandler+0x1d8>)
 8018374:	4293      	cmp	r3, r2
 8018376:	d01d      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	4a1f      	ldr	r2, [pc, #124]	; (80183fc <HAL_DMA_IRQHandler+0x1dc>)
 801837e:	4293      	cmp	r3, r2
 8018380:	d018      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	681b      	ldr	r3, [r3, #0]
 8018386:	4a1e      	ldr	r2, [pc, #120]	; (8018400 <HAL_DMA_IRQHandler+0x1e0>)
 8018388:	4293      	cmp	r3, r2
 801838a:	d013      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	681b      	ldr	r3, [r3, #0]
 8018390:	4a1c      	ldr	r2, [pc, #112]	; (8018404 <HAL_DMA_IRQHandler+0x1e4>)
 8018392:	4293      	cmp	r3, r2
 8018394:	d00e      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	4a1b      	ldr	r2, [pc, #108]	; (8018408 <HAL_DMA_IRQHandler+0x1e8>)
 801839c:	4293      	cmp	r3, r2
 801839e:	d009      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	4a19      	ldr	r2, [pc, #100]	; (801840c <HAL_DMA_IRQHandler+0x1ec>)
 80183a6:	4293      	cmp	r3, r2
 80183a8:	d004      	beq.n	80183b4 <HAL_DMA_IRQHandler+0x194>
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	4a18      	ldr	r2, [pc, #96]	; (8018410 <HAL_DMA_IRQHandler+0x1f0>)
 80183b0:	4293      	cmp	r3, r2
 80183b2:	d12f      	bne.n	8018414 <HAL_DMA_IRQHandler+0x1f4>
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	f003 0304 	and.w	r3, r3, #4
 80183be:	2b00      	cmp	r3, #0
 80183c0:	bf14      	ite	ne
 80183c2:	2301      	movne	r3, #1
 80183c4:	2300      	moveq	r3, #0
 80183c6:	b2db      	uxtb	r3, r3
 80183c8:	e02e      	b.n	8018428 <HAL_DMA_IRQHandler+0x208>
 80183ca:	bf00      	nop
 80183cc:	24000004 	.word	0x24000004
 80183d0:	1b4e81b5 	.word	0x1b4e81b5
 80183d4:	40020010 	.word	0x40020010
 80183d8:	40020028 	.word	0x40020028
 80183dc:	40020040 	.word	0x40020040
 80183e0:	40020058 	.word	0x40020058
 80183e4:	40020070 	.word	0x40020070
 80183e8:	40020088 	.word	0x40020088
 80183ec:	400200a0 	.word	0x400200a0
 80183f0:	400200b8 	.word	0x400200b8
 80183f4:	40020410 	.word	0x40020410
 80183f8:	40020428 	.word	0x40020428
 80183fc:	40020440 	.word	0x40020440
 8018400:	40020458 	.word	0x40020458
 8018404:	40020470 	.word	0x40020470
 8018408:	40020488 	.word	0x40020488
 801840c:	400204a0 	.word	0x400204a0
 8018410:	400204b8 	.word	0x400204b8
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	681b      	ldr	r3, [r3, #0]
 801841a:	f003 0308 	and.w	r3, r3, #8
 801841e:	2b00      	cmp	r3, #0
 8018420:	bf14      	ite	ne
 8018422:	2301      	movne	r3, #1
 8018424:	2300      	moveq	r3, #0
 8018426:	b2db      	uxtb	r3, r3
 8018428:	2b00      	cmp	r3, #0
 801842a:	d015      	beq.n	8018458 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	681b      	ldr	r3, [r3, #0]
 8018430:	681a      	ldr	r2, [r3, #0]
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	f022 0204 	bic.w	r2, r2, #4
 801843a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018440:	f003 031f 	and.w	r3, r3, #31
 8018444:	2208      	movs	r2, #8
 8018446:	409a      	lsls	r2, r3
 8018448:	6a3b      	ldr	r3, [r7, #32]
 801844a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801844c:	687b      	ldr	r3, [r7, #4]
 801844e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018450:	f043 0201 	orr.w	r2, r3, #1
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801845c:	f003 031f 	and.w	r3, r3, #31
 8018460:	69ba      	ldr	r2, [r7, #24]
 8018462:	fa22 f303 	lsr.w	r3, r2, r3
 8018466:	f003 0301 	and.w	r3, r3, #1
 801846a:	2b00      	cmp	r3, #0
 801846c:	d06e      	beq.n	801854c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	4a69      	ldr	r2, [pc, #420]	; (8018618 <HAL_DMA_IRQHandler+0x3f8>)
 8018474:	4293      	cmp	r3, r2
 8018476:	d04a      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 8018478:	687b      	ldr	r3, [r7, #4]
 801847a:	681b      	ldr	r3, [r3, #0]
 801847c:	4a67      	ldr	r2, [pc, #412]	; (801861c <HAL_DMA_IRQHandler+0x3fc>)
 801847e:	4293      	cmp	r3, r2
 8018480:	d045      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 8018482:	687b      	ldr	r3, [r7, #4]
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	4a66      	ldr	r2, [pc, #408]	; (8018620 <HAL_DMA_IRQHandler+0x400>)
 8018488:	4293      	cmp	r3, r2
 801848a:	d040      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	681b      	ldr	r3, [r3, #0]
 8018490:	4a64      	ldr	r2, [pc, #400]	; (8018624 <HAL_DMA_IRQHandler+0x404>)
 8018492:	4293      	cmp	r3, r2
 8018494:	d03b      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 8018496:	687b      	ldr	r3, [r7, #4]
 8018498:	681b      	ldr	r3, [r3, #0]
 801849a:	4a63      	ldr	r2, [pc, #396]	; (8018628 <HAL_DMA_IRQHandler+0x408>)
 801849c:	4293      	cmp	r3, r2
 801849e:	d036      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	4a61      	ldr	r2, [pc, #388]	; (801862c <HAL_DMA_IRQHandler+0x40c>)
 80184a6:	4293      	cmp	r3, r2
 80184a8:	d031      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	681b      	ldr	r3, [r3, #0]
 80184ae:	4a60      	ldr	r2, [pc, #384]	; (8018630 <HAL_DMA_IRQHandler+0x410>)
 80184b0:	4293      	cmp	r3, r2
 80184b2:	d02c      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184b4:	687b      	ldr	r3, [r7, #4]
 80184b6:	681b      	ldr	r3, [r3, #0]
 80184b8:	4a5e      	ldr	r2, [pc, #376]	; (8018634 <HAL_DMA_IRQHandler+0x414>)
 80184ba:	4293      	cmp	r3, r2
 80184bc:	d027      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184be:	687b      	ldr	r3, [r7, #4]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	4a5d      	ldr	r2, [pc, #372]	; (8018638 <HAL_DMA_IRQHandler+0x418>)
 80184c4:	4293      	cmp	r3, r2
 80184c6:	d022      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	681b      	ldr	r3, [r3, #0]
 80184cc:	4a5b      	ldr	r2, [pc, #364]	; (801863c <HAL_DMA_IRQHandler+0x41c>)
 80184ce:	4293      	cmp	r3, r2
 80184d0:	d01d      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184d2:	687b      	ldr	r3, [r7, #4]
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	4a5a      	ldr	r2, [pc, #360]	; (8018640 <HAL_DMA_IRQHandler+0x420>)
 80184d8:	4293      	cmp	r3, r2
 80184da:	d018      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184dc:	687b      	ldr	r3, [r7, #4]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	4a58      	ldr	r2, [pc, #352]	; (8018644 <HAL_DMA_IRQHandler+0x424>)
 80184e2:	4293      	cmp	r3, r2
 80184e4:	d013      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4a57      	ldr	r2, [pc, #348]	; (8018648 <HAL_DMA_IRQHandler+0x428>)
 80184ec:	4293      	cmp	r3, r2
 80184ee:	d00e      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	4a55      	ldr	r2, [pc, #340]	; (801864c <HAL_DMA_IRQHandler+0x42c>)
 80184f6:	4293      	cmp	r3, r2
 80184f8:	d009      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 80184fa:	687b      	ldr	r3, [r7, #4]
 80184fc:	681b      	ldr	r3, [r3, #0]
 80184fe:	4a54      	ldr	r2, [pc, #336]	; (8018650 <HAL_DMA_IRQHandler+0x430>)
 8018500:	4293      	cmp	r3, r2
 8018502:	d004      	beq.n	801850e <HAL_DMA_IRQHandler+0x2ee>
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	681b      	ldr	r3, [r3, #0]
 8018508:	4a52      	ldr	r2, [pc, #328]	; (8018654 <HAL_DMA_IRQHandler+0x434>)
 801850a:	4293      	cmp	r3, r2
 801850c:	d10a      	bne.n	8018524 <HAL_DMA_IRQHandler+0x304>
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	695b      	ldr	r3, [r3, #20]
 8018514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018518:	2b00      	cmp	r3, #0
 801851a:	bf14      	ite	ne
 801851c:	2301      	movne	r3, #1
 801851e:	2300      	moveq	r3, #0
 8018520:	b2db      	uxtb	r3, r3
 8018522:	e003      	b.n	801852c <HAL_DMA_IRQHandler+0x30c>
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	2300      	movs	r3, #0
 801852c:	2b00      	cmp	r3, #0
 801852e:	d00d      	beq.n	801854c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018534:	f003 031f 	and.w	r3, r3, #31
 8018538:	2201      	movs	r2, #1
 801853a:	409a      	lsls	r2, r3
 801853c:	6a3b      	ldr	r3, [r7, #32]
 801853e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8018540:	687b      	ldr	r3, [r7, #4]
 8018542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018544:	f043 0202 	orr.w	r2, r3, #2
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018550:	f003 031f 	and.w	r3, r3, #31
 8018554:	2204      	movs	r2, #4
 8018556:	409a      	lsls	r2, r3
 8018558:	69bb      	ldr	r3, [r7, #24]
 801855a:	4013      	ands	r3, r2
 801855c:	2b00      	cmp	r3, #0
 801855e:	f000 808f 	beq.w	8018680 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	4a2c      	ldr	r2, [pc, #176]	; (8018618 <HAL_DMA_IRQHandler+0x3f8>)
 8018568:	4293      	cmp	r3, r2
 801856a:	d04a      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	681b      	ldr	r3, [r3, #0]
 8018570:	4a2a      	ldr	r2, [pc, #168]	; (801861c <HAL_DMA_IRQHandler+0x3fc>)
 8018572:	4293      	cmp	r3, r2
 8018574:	d045      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	4a29      	ldr	r2, [pc, #164]	; (8018620 <HAL_DMA_IRQHandler+0x400>)
 801857c:	4293      	cmp	r3, r2
 801857e:	d040      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	4a27      	ldr	r2, [pc, #156]	; (8018624 <HAL_DMA_IRQHandler+0x404>)
 8018586:	4293      	cmp	r3, r2
 8018588:	d03b      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	681b      	ldr	r3, [r3, #0]
 801858e:	4a26      	ldr	r2, [pc, #152]	; (8018628 <HAL_DMA_IRQHandler+0x408>)
 8018590:	4293      	cmp	r3, r2
 8018592:	d036      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	681b      	ldr	r3, [r3, #0]
 8018598:	4a24      	ldr	r2, [pc, #144]	; (801862c <HAL_DMA_IRQHandler+0x40c>)
 801859a:	4293      	cmp	r3, r2
 801859c:	d031      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	681b      	ldr	r3, [r3, #0]
 80185a2:	4a23      	ldr	r2, [pc, #140]	; (8018630 <HAL_DMA_IRQHandler+0x410>)
 80185a4:	4293      	cmp	r3, r2
 80185a6:	d02c      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	4a21      	ldr	r2, [pc, #132]	; (8018634 <HAL_DMA_IRQHandler+0x414>)
 80185ae:	4293      	cmp	r3, r2
 80185b0:	d027      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185b2:	687b      	ldr	r3, [r7, #4]
 80185b4:	681b      	ldr	r3, [r3, #0]
 80185b6:	4a20      	ldr	r2, [pc, #128]	; (8018638 <HAL_DMA_IRQHandler+0x418>)
 80185b8:	4293      	cmp	r3, r2
 80185ba:	d022      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185bc:	687b      	ldr	r3, [r7, #4]
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4a1e      	ldr	r2, [pc, #120]	; (801863c <HAL_DMA_IRQHandler+0x41c>)
 80185c2:	4293      	cmp	r3, r2
 80185c4:	d01d      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185c6:	687b      	ldr	r3, [r7, #4]
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	4a1d      	ldr	r2, [pc, #116]	; (8018640 <HAL_DMA_IRQHandler+0x420>)
 80185cc:	4293      	cmp	r3, r2
 80185ce:	d018      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	4a1b      	ldr	r2, [pc, #108]	; (8018644 <HAL_DMA_IRQHandler+0x424>)
 80185d6:	4293      	cmp	r3, r2
 80185d8:	d013      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185da:	687b      	ldr	r3, [r7, #4]
 80185dc:	681b      	ldr	r3, [r3, #0]
 80185de:	4a1a      	ldr	r2, [pc, #104]	; (8018648 <HAL_DMA_IRQHandler+0x428>)
 80185e0:	4293      	cmp	r3, r2
 80185e2:	d00e      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185e4:	687b      	ldr	r3, [r7, #4]
 80185e6:	681b      	ldr	r3, [r3, #0]
 80185e8:	4a18      	ldr	r2, [pc, #96]	; (801864c <HAL_DMA_IRQHandler+0x42c>)
 80185ea:	4293      	cmp	r3, r2
 80185ec:	d009      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	4a17      	ldr	r2, [pc, #92]	; (8018650 <HAL_DMA_IRQHandler+0x430>)
 80185f4:	4293      	cmp	r3, r2
 80185f6:	d004      	beq.n	8018602 <HAL_DMA_IRQHandler+0x3e2>
 80185f8:	687b      	ldr	r3, [r7, #4]
 80185fa:	681b      	ldr	r3, [r3, #0]
 80185fc:	4a15      	ldr	r2, [pc, #84]	; (8018654 <HAL_DMA_IRQHandler+0x434>)
 80185fe:	4293      	cmp	r3, r2
 8018600:	d12a      	bne.n	8018658 <HAL_DMA_IRQHandler+0x438>
 8018602:	687b      	ldr	r3, [r7, #4]
 8018604:	681b      	ldr	r3, [r3, #0]
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	f003 0302 	and.w	r3, r3, #2
 801860c:	2b00      	cmp	r3, #0
 801860e:	bf14      	ite	ne
 8018610:	2301      	movne	r3, #1
 8018612:	2300      	moveq	r3, #0
 8018614:	b2db      	uxtb	r3, r3
 8018616:	e023      	b.n	8018660 <HAL_DMA_IRQHandler+0x440>
 8018618:	40020010 	.word	0x40020010
 801861c:	40020028 	.word	0x40020028
 8018620:	40020040 	.word	0x40020040
 8018624:	40020058 	.word	0x40020058
 8018628:	40020070 	.word	0x40020070
 801862c:	40020088 	.word	0x40020088
 8018630:	400200a0 	.word	0x400200a0
 8018634:	400200b8 	.word	0x400200b8
 8018638:	40020410 	.word	0x40020410
 801863c:	40020428 	.word	0x40020428
 8018640:	40020440 	.word	0x40020440
 8018644:	40020458 	.word	0x40020458
 8018648:	40020470 	.word	0x40020470
 801864c:	40020488 	.word	0x40020488
 8018650:	400204a0 	.word	0x400204a0
 8018654:	400204b8 	.word	0x400204b8
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	2300      	movs	r3, #0
 8018660:	2b00      	cmp	r3, #0
 8018662:	d00d      	beq.n	8018680 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018668:	f003 031f 	and.w	r3, r3, #31
 801866c:	2204      	movs	r2, #4
 801866e:	409a      	lsls	r2, r3
 8018670:	6a3b      	ldr	r3, [r7, #32]
 8018672:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018678:	f043 0204 	orr.w	r2, r3, #4
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8018680:	687b      	ldr	r3, [r7, #4]
 8018682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018684:	f003 031f 	and.w	r3, r3, #31
 8018688:	2210      	movs	r2, #16
 801868a:	409a      	lsls	r2, r3
 801868c:	69bb      	ldr	r3, [r7, #24]
 801868e:	4013      	ands	r3, r2
 8018690:	2b00      	cmp	r3, #0
 8018692:	f000 80a6 	beq.w	80187e2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	4a85      	ldr	r2, [pc, #532]	; (80188b0 <HAL_DMA_IRQHandler+0x690>)
 801869c:	4293      	cmp	r3, r2
 801869e:	d04a      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	4a83      	ldr	r2, [pc, #524]	; (80188b4 <HAL_DMA_IRQHandler+0x694>)
 80186a6:	4293      	cmp	r3, r2
 80186a8:	d045      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	4a82      	ldr	r2, [pc, #520]	; (80188b8 <HAL_DMA_IRQHandler+0x698>)
 80186b0:	4293      	cmp	r3, r2
 80186b2:	d040      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	4a80      	ldr	r2, [pc, #512]	; (80188bc <HAL_DMA_IRQHandler+0x69c>)
 80186ba:	4293      	cmp	r3, r2
 80186bc:	d03b      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186be:	687b      	ldr	r3, [r7, #4]
 80186c0:	681b      	ldr	r3, [r3, #0]
 80186c2:	4a7f      	ldr	r2, [pc, #508]	; (80188c0 <HAL_DMA_IRQHandler+0x6a0>)
 80186c4:	4293      	cmp	r3, r2
 80186c6:	d036      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	681b      	ldr	r3, [r3, #0]
 80186cc:	4a7d      	ldr	r2, [pc, #500]	; (80188c4 <HAL_DMA_IRQHandler+0x6a4>)
 80186ce:	4293      	cmp	r3, r2
 80186d0:	d031      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	4a7c      	ldr	r2, [pc, #496]	; (80188c8 <HAL_DMA_IRQHandler+0x6a8>)
 80186d8:	4293      	cmp	r3, r2
 80186da:	d02c      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186dc:	687b      	ldr	r3, [r7, #4]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	4a7a      	ldr	r2, [pc, #488]	; (80188cc <HAL_DMA_IRQHandler+0x6ac>)
 80186e2:	4293      	cmp	r3, r2
 80186e4:	d027      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	4a79      	ldr	r2, [pc, #484]	; (80188d0 <HAL_DMA_IRQHandler+0x6b0>)
 80186ec:	4293      	cmp	r3, r2
 80186ee:	d022      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	4a77      	ldr	r2, [pc, #476]	; (80188d4 <HAL_DMA_IRQHandler+0x6b4>)
 80186f6:	4293      	cmp	r3, r2
 80186f8:	d01d      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 80186fa:	687b      	ldr	r3, [r7, #4]
 80186fc:	681b      	ldr	r3, [r3, #0]
 80186fe:	4a76      	ldr	r2, [pc, #472]	; (80188d8 <HAL_DMA_IRQHandler+0x6b8>)
 8018700:	4293      	cmp	r3, r2
 8018702:	d018      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	4a74      	ldr	r2, [pc, #464]	; (80188dc <HAL_DMA_IRQHandler+0x6bc>)
 801870a:	4293      	cmp	r3, r2
 801870c:	d013      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	4a73      	ldr	r2, [pc, #460]	; (80188e0 <HAL_DMA_IRQHandler+0x6c0>)
 8018714:	4293      	cmp	r3, r2
 8018716:	d00e      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	681b      	ldr	r3, [r3, #0]
 801871c:	4a71      	ldr	r2, [pc, #452]	; (80188e4 <HAL_DMA_IRQHandler+0x6c4>)
 801871e:	4293      	cmp	r3, r2
 8018720:	d009      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 8018722:	687b      	ldr	r3, [r7, #4]
 8018724:	681b      	ldr	r3, [r3, #0]
 8018726:	4a70      	ldr	r2, [pc, #448]	; (80188e8 <HAL_DMA_IRQHandler+0x6c8>)
 8018728:	4293      	cmp	r3, r2
 801872a:	d004      	beq.n	8018736 <HAL_DMA_IRQHandler+0x516>
 801872c:	687b      	ldr	r3, [r7, #4]
 801872e:	681b      	ldr	r3, [r3, #0]
 8018730:	4a6e      	ldr	r2, [pc, #440]	; (80188ec <HAL_DMA_IRQHandler+0x6cc>)
 8018732:	4293      	cmp	r3, r2
 8018734:	d10a      	bne.n	801874c <HAL_DMA_IRQHandler+0x52c>
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	681b      	ldr	r3, [r3, #0]
 801873c:	f003 0308 	and.w	r3, r3, #8
 8018740:	2b00      	cmp	r3, #0
 8018742:	bf14      	ite	ne
 8018744:	2301      	movne	r3, #1
 8018746:	2300      	moveq	r3, #0
 8018748:	b2db      	uxtb	r3, r3
 801874a:	e009      	b.n	8018760 <HAL_DMA_IRQHandler+0x540>
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	f003 0304 	and.w	r3, r3, #4
 8018756:	2b00      	cmp	r3, #0
 8018758:	bf14      	ite	ne
 801875a:	2301      	movne	r3, #1
 801875c:	2300      	moveq	r3, #0
 801875e:	b2db      	uxtb	r3, r3
 8018760:	2b00      	cmp	r3, #0
 8018762:	d03e      	beq.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8018764:	687b      	ldr	r3, [r7, #4]
 8018766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018768:	f003 031f 	and.w	r3, r3, #31
 801876c:	2210      	movs	r2, #16
 801876e:	409a      	lsls	r2, r3
 8018770:	6a3b      	ldr	r3, [r7, #32]
 8018772:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	681b      	ldr	r3, [r3, #0]
 8018778:	681b      	ldr	r3, [r3, #0]
 801877a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801877e:	2b00      	cmp	r3, #0
 8018780:	d018      	beq.n	80187b4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	681b      	ldr	r3, [r3, #0]
 8018786:	681b      	ldr	r3, [r3, #0]
 8018788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801878c:	2b00      	cmp	r3, #0
 801878e:	d108      	bne.n	80187a2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8018790:	687b      	ldr	r3, [r7, #4]
 8018792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018794:	2b00      	cmp	r3, #0
 8018796:	d024      	beq.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8018798:	687b      	ldr	r3, [r7, #4]
 801879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	4798      	blx	r3
 80187a0:	e01f      	b.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80187a6:	2b00      	cmp	r3, #0
 80187a8:	d01b      	beq.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	4798      	blx	r3
 80187b2:	e016      	b.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	681b      	ldr	r3, [r3, #0]
 80187b8:	681b      	ldr	r3, [r3, #0]
 80187ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80187be:	2b00      	cmp	r3, #0
 80187c0:	d107      	bne.n	80187d2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	681a      	ldr	r2, [r3, #0]
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	f022 0208 	bic.w	r2, r2, #8
 80187d0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187d6:	2b00      	cmp	r3, #0
 80187d8:	d003      	beq.n	80187e2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80187de:	6878      	ldr	r0, [r7, #4]
 80187e0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80187e6:	f003 031f 	and.w	r3, r3, #31
 80187ea:	2220      	movs	r2, #32
 80187ec:	409a      	lsls	r2, r3
 80187ee:	69bb      	ldr	r3, [r7, #24]
 80187f0:	4013      	ands	r3, r2
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	f000 8110 	beq.w	8018a18 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80187f8:	687b      	ldr	r3, [r7, #4]
 80187fa:	681b      	ldr	r3, [r3, #0]
 80187fc:	4a2c      	ldr	r2, [pc, #176]	; (80188b0 <HAL_DMA_IRQHandler+0x690>)
 80187fe:	4293      	cmp	r3, r2
 8018800:	d04a      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	4a2b      	ldr	r2, [pc, #172]	; (80188b4 <HAL_DMA_IRQHandler+0x694>)
 8018808:	4293      	cmp	r3, r2
 801880a:	d045      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	4a29      	ldr	r2, [pc, #164]	; (80188b8 <HAL_DMA_IRQHandler+0x698>)
 8018812:	4293      	cmp	r3, r2
 8018814:	d040      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	4a28      	ldr	r2, [pc, #160]	; (80188bc <HAL_DMA_IRQHandler+0x69c>)
 801881c:	4293      	cmp	r3, r2
 801881e:	d03b      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	4a26      	ldr	r2, [pc, #152]	; (80188c0 <HAL_DMA_IRQHandler+0x6a0>)
 8018826:	4293      	cmp	r3, r2
 8018828:	d036      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	4a25      	ldr	r2, [pc, #148]	; (80188c4 <HAL_DMA_IRQHandler+0x6a4>)
 8018830:	4293      	cmp	r3, r2
 8018832:	d031      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	681b      	ldr	r3, [r3, #0]
 8018838:	4a23      	ldr	r2, [pc, #140]	; (80188c8 <HAL_DMA_IRQHandler+0x6a8>)
 801883a:	4293      	cmp	r3, r2
 801883c:	d02c      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	681b      	ldr	r3, [r3, #0]
 8018842:	4a22      	ldr	r2, [pc, #136]	; (80188cc <HAL_DMA_IRQHandler+0x6ac>)
 8018844:	4293      	cmp	r3, r2
 8018846:	d027      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	4a20      	ldr	r2, [pc, #128]	; (80188d0 <HAL_DMA_IRQHandler+0x6b0>)
 801884e:	4293      	cmp	r3, r2
 8018850:	d022      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	4a1f      	ldr	r2, [pc, #124]	; (80188d4 <HAL_DMA_IRQHandler+0x6b4>)
 8018858:	4293      	cmp	r3, r2
 801885a:	d01d      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801885c:	687b      	ldr	r3, [r7, #4]
 801885e:	681b      	ldr	r3, [r3, #0]
 8018860:	4a1d      	ldr	r2, [pc, #116]	; (80188d8 <HAL_DMA_IRQHandler+0x6b8>)
 8018862:	4293      	cmp	r3, r2
 8018864:	d018      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018866:	687b      	ldr	r3, [r7, #4]
 8018868:	681b      	ldr	r3, [r3, #0]
 801886a:	4a1c      	ldr	r2, [pc, #112]	; (80188dc <HAL_DMA_IRQHandler+0x6bc>)
 801886c:	4293      	cmp	r3, r2
 801886e:	d013      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	681b      	ldr	r3, [r3, #0]
 8018874:	4a1a      	ldr	r2, [pc, #104]	; (80188e0 <HAL_DMA_IRQHandler+0x6c0>)
 8018876:	4293      	cmp	r3, r2
 8018878:	d00e      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	681b      	ldr	r3, [r3, #0]
 801887e:	4a19      	ldr	r2, [pc, #100]	; (80188e4 <HAL_DMA_IRQHandler+0x6c4>)
 8018880:	4293      	cmp	r3, r2
 8018882:	d009      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 8018884:	687b      	ldr	r3, [r7, #4]
 8018886:	681b      	ldr	r3, [r3, #0]
 8018888:	4a17      	ldr	r2, [pc, #92]	; (80188e8 <HAL_DMA_IRQHandler+0x6c8>)
 801888a:	4293      	cmp	r3, r2
 801888c:	d004      	beq.n	8018898 <HAL_DMA_IRQHandler+0x678>
 801888e:	687b      	ldr	r3, [r7, #4]
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	4a16      	ldr	r2, [pc, #88]	; (80188ec <HAL_DMA_IRQHandler+0x6cc>)
 8018894:	4293      	cmp	r3, r2
 8018896:	d12b      	bne.n	80188f0 <HAL_DMA_IRQHandler+0x6d0>
 8018898:	687b      	ldr	r3, [r7, #4]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f003 0310 	and.w	r3, r3, #16
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	bf14      	ite	ne
 80188a6:	2301      	movne	r3, #1
 80188a8:	2300      	moveq	r3, #0
 80188aa:	b2db      	uxtb	r3, r3
 80188ac:	e02a      	b.n	8018904 <HAL_DMA_IRQHandler+0x6e4>
 80188ae:	bf00      	nop
 80188b0:	40020010 	.word	0x40020010
 80188b4:	40020028 	.word	0x40020028
 80188b8:	40020040 	.word	0x40020040
 80188bc:	40020058 	.word	0x40020058
 80188c0:	40020070 	.word	0x40020070
 80188c4:	40020088 	.word	0x40020088
 80188c8:	400200a0 	.word	0x400200a0
 80188cc:	400200b8 	.word	0x400200b8
 80188d0:	40020410 	.word	0x40020410
 80188d4:	40020428 	.word	0x40020428
 80188d8:	40020440 	.word	0x40020440
 80188dc:	40020458 	.word	0x40020458
 80188e0:	40020470 	.word	0x40020470
 80188e4:	40020488 	.word	0x40020488
 80188e8:	400204a0 	.word	0x400204a0
 80188ec:	400204b8 	.word	0x400204b8
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	f003 0302 	and.w	r3, r3, #2
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	bf14      	ite	ne
 80188fe:	2301      	movne	r3, #1
 8018900:	2300      	moveq	r3, #0
 8018902:	b2db      	uxtb	r3, r3
 8018904:	2b00      	cmp	r3, #0
 8018906:	f000 8087 	beq.w	8018a18 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801890a:	687b      	ldr	r3, [r7, #4]
 801890c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801890e:	f003 031f 	and.w	r3, r3, #31
 8018912:	2220      	movs	r2, #32
 8018914:	409a      	lsls	r2, r3
 8018916:	6a3b      	ldr	r3, [r7, #32]
 8018918:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8018920:	b2db      	uxtb	r3, r3
 8018922:	2b04      	cmp	r3, #4
 8018924:	d139      	bne.n	801899a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8018926:	687b      	ldr	r3, [r7, #4]
 8018928:	681b      	ldr	r3, [r3, #0]
 801892a:	681a      	ldr	r2, [r3, #0]
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	f022 0216 	bic.w	r2, r2, #22
 8018934:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	695a      	ldr	r2, [r3, #20]
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	681b      	ldr	r3, [r3, #0]
 8018940:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8018944:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801894a:	2b00      	cmp	r3, #0
 801894c:	d103      	bne.n	8018956 <HAL_DMA_IRQHandler+0x736>
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018952:	2b00      	cmp	r3, #0
 8018954:	d007      	beq.n	8018966 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	687b      	ldr	r3, [r7, #4]
 801895e:	681b      	ldr	r3, [r3, #0]
 8018960:	f022 0208 	bic.w	r2, r2, #8
 8018964:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801896a:	f003 031f 	and.w	r3, r3, #31
 801896e:	223f      	movs	r2, #63	; 0x3f
 8018970:	409a      	lsls	r2, r3
 8018972:	6a3b      	ldr	r3, [r7, #32]
 8018974:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	2201      	movs	r2, #1
 801897a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	2200      	movs	r2, #0
 8018982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801898a:	2b00      	cmp	r3, #0
 801898c:	f000 834a 	beq.w	8019024 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018994:	6878      	ldr	r0, [r7, #4]
 8018996:	4798      	blx	r3
          }
          return;
 8018998:	e344      	b.n	8019024 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	681b      	ldr	r3, [r3, #0]
 80189a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80189a4:	2b00      	cmp	r3, #0
 80189a6:	d018      	beq.n	80189da <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80189a8:	687b      	ldr	r3, [r7, #4]
 80189aa:	681b      	ldr	r3, [r3, #0]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80189b2:	2b00      	cmp	r3, #0
 80189b4:	d108      	bne.n	80189c8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80189b6:	687b      	ldr	r3, [r7, #4]
 80189b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189ba:	2b00      	cmp	r3, #0
 80189bc:	d02c      	beq.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80189be:	687b      	ldr	r3, [r7, #4]
 80189c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	4798      	blx	r3
 80189c6:	e027      	b.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80189c8:	687b      	ldr	r3, [r7, #4]
 80189ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189cc:	2b00      	cmp	r3, #0
 80189ce:	d023      	beq.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	4798      	blx	r3
 80189d8:	e01e      	b.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d10f      	bne.n	8018a08 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	681a      	ldr	r2, [r3, #0]
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	f022 0210 	bic.w	r2, r2, #16
 80189f6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80189f8:	687b      	ldr	r3, [r7, #4]
 80189fa:	2201      	movs	r2, #1
 80189fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8018a00:	687b      	ldr	r3, [r7, #4]
 8018a02:	2200      	movs	r2, #0
 8018a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8018a08:	687b      	ldr	r3, [r7, #4]
 8018a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	d003      	beq.n	8018a18 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8018a10:	687b      	ldr	r3, [r7, #4]
 8018a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018a14:	6878      	ldr	r0, [r7, #4]
 8018a16:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	f000 8306 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a26:	f003 0301 	and.w	r3, r3, #1
 8018a2a:	2b00      	cmp	r3, #0
 8018a2c:	f000 8088 	beq.w	8018b40 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8018a30:	687b      	ldr	r3, [r7, #4]
 8018a32:	2204      	movs	r2, #4
 8018a34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	681b      	ldr	r3, [r3, #0]
 8018a3c:	4a7a      	ldr	r2, [pc, #488]	; (8018c28 <HAL_DMA_IRQHandler+0xa08>)
 8018a3e:	4293      	cmp	r3, r2
 8018a40:	d04a      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a42:	687b      	ldr	r3, [r7, #4]
 8018a44:	681b      	ldr	r3, [r3, #0]
 8018a46:	4a79      	ldr	r2, [pc, #484]	; (8018c2c <HAL_DMA_IRQHandler+0xa0c>)
 8018a48:	4293      	cmp	r3, r2
 8018a4a:	d045      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	4a77      	ldr	r2, [pc, #476]	; (8018c30 <HAL_DMA_IRQHandler+0xa10>)
 8018a52:	4293      	cmp	r3, r2
 8018a54:	d040      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	4a76      	ldr	r2, [pc, #472]	; (8018c34 <HAL_DMA_IRQHandler+0xa14>)
 8018a5c:	4293      	cmp	r3, r2
 8018a5e:	d03b      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a60:	687b      	ldr	r3, [r7, #4]
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	4a74      	ldr	r2, [pc, #464]	; (8018c38 <HAL_DMA_IRQHandler+0xa18>)
 8018a66:	4293      	cmp	r3, r2
 8018a68:	d036      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	681b      	ldr	r3, [r3, #0]
 8018a6e:	4a73      	ldr	r2, [pc, #460]	; (8018c3c <HAL_DMA_IRQHandler+0xa1c>)
 8018a70:	4293      	cmp	r3, r2
 8018a72:	d031      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a74:	687b      	ldr	r3, [r7, #4]
 8018a76:	681b      	ldr	r3, [r3, #0]
 8018a78:	4a71      	ldr	r2, [pc, #452]	; (8018c40 <HAL_DMA_IRQHandler+0xa20>)
 8018a7a:	4293      	cmp	r3, r2
 8018a7c:	d02c      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	4a70      	ldr	r2, [pc, #448]	; (8018c44 <HAL_DMA_IRQHandler+0xa24>)
 8018a84:	4293      	cmp	r3, r2
 8018a86:	d027      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	4a6e      	ldr	r2, [pc, #440]	; (8018c48 <HAL_DMA_IRQHandler+0xa28>)
 8018a8e:	4293      	cmp	r3, r2
 8018a90:	d022      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a92:	687b      	ldr	r3, [r7, #4]
 8018a94:	681b      	ldr	r3, [r3, #0]
 8018a96:	4a6d      	ldr	r2, [pc, #436]	; (8018c4c <HAL_DMA_IRQHandler+0xa2c>)
 8018a98:	4293      	cmp	r3, r2
 8018a9a:	d01d      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	681b      	ldr	r3, [r3, #0]
 8018aa0:	4a6b      	ldr	r2, [pc, #428]	; (8018c50 <HAL_DMA_IRQHandler+0xa30>)
 8018aa2:	4293      	cmp	r3, r2
 8018aa4:	d018      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	4a6a      	ldr	r2, [pc, #424]	; (8018c54 <HAL_DMA_IRQHandler+0xa34>)
 8018aac:	4293      	cmp	r3, r2
 8018aae:	d013      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	4a68      	ldr	r2, [pc, #416]	; (8018c58 <HAL_DMA_IRQHandler+0xa38>)
 8018ab6:	4293      	cmp	r3, r2
 8018ab8:	d00e      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	681b      	ldr	r3, [r3, #0]
 8018abe:	4a67      	ldr	r2, [pc, #412]	; (8018c5c <HAL_DMA_IRQHandler+0xa3c>)
 8018ac0:	4293      	cmp	r3, r2
 8018ac2:	d009      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	4a65      	ldr	r2, [pc, #404]	; (8018c60 <HAL_DMA_IRQHandler+0xa40>)
 8018aca:	4293      	cmp	r3, r2
 8018acc:	d004      	beq.n	8018ad8 <HAL_DMA_IRQHandler+0x8b8>
 8018ace:	687b      	ldr	r3, [r7, #4]
 8018ad0:	681b      	ldr	r3, [r3, #0]
 8018ad2:	4a64      	ldr	r2, [pc, #400]	; (8018c64 <HAL_DMA_IRQHandler+0xa44>)
 8018ad4:	4293      	cmp	r3, r2
 8018ad6:	d108      	bne.n	8018aea <HAL_DMA_IRQHandler+0x8ca>
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	681a      	ldr	r2, [r3, #0]
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	681b      	ldr	r3, [r3, #0]
 8018ae2:	f022 0201 	bic.w	r2, r2, #1
 8018ae6:	601a      	str	r2, [r3, #0]
 8018ae8:	e007      	b.n	8018afa <HAL_DMA_IRQHandler+0x8da>
 8018aea:	687b      	ldr	r3, [r7, #4]
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	681a      	ldr	r2, [r3, #0]
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	681b      	ldr	r3, [r3, #0]
 8018af4:	f022 0201 	bic.w	r2, r2, #1
 8018af8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	3301      	adds	r3, #1
 8018afe:	60fb      	str	r3, [r7, #12]
 8018b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018b02:	429a      	cmp	r2, r3
 8018b04:	d307      	bcc.n	8018b16 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	681b      	ldr	r3, [r3, #0]
 8018b0c:	f003 0301 	and.w	r3, r3, #1
 8018b10:	2b00      	cmp	r3, #0
 8018b12:	d1f2      	bne.n	8018afa <HAL_DMA_IRQHandler+0x8da>
 8018b14:	e000      	b.n	8018b18 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8018b16:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8018b18:	687b      	ldr	r3, [r7, #4]
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	681b      	ldr	r3, [r3, #0]
 8018b1e:	f003 0301 	and.w	r3, r3, #1
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d004      	beq.n	8018b30 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8018b26:	687b      	ldr	r3, [r7, #4]
 8018b28:	2203      	movs	r2, #3
 8018b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8018b2e:	e003      	b.n	8018b38 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	2201      	movs	r2, #1
 8018b34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8018b38:	687b      	ldr	r3, [r7, #4]
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8018b40:	687b      	ldr	r3, [r7, #4]
 8018b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	f000 8272 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8018b4a:	687b      	ldr	r3, [r7, #4]
 8018b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018b4e:	6878      	ldr	r0, [r7, #4]
 8018b50:	4798      	blx	r3
 8018b52:	e26c      	b.n	801902e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8018b54:	687b      	ldr	r3, [r7, #4]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	4a43      	ldr	r2, [pc, #268]	; (8018c68 <HAL_DMA_IRQHandler+0xa48>)
 8018b5a:	4293      	cmp	r3, r2
 8018b5c:	d022      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b5e:	687b      	ldr	r3, [r7, #4]
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	4a42      	ldr	r2, [pc, #264]	; (8018c6c <HAL_DMA_IRQHandler+0xa4c>)
 8018b64:	4293      	cmp	r3, r2
 8018b66:	d01d      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b68:	687b      	ldr	r3, [r7, #4]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	4a40      	ldr	r2, [pc, #256]	; (8018c70 <HAL_DMA_IRQHandler+0xa50>)
 8018b6e:	4293      	cmp	r3, r2
 8018b70:	d018      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b72:	687b      	ldr	r3, [r7, #4]
 8018b74:	681b      	ldr	r3, [r3, #0]
 8018b76:	4a3f      	ldr	r2, [pc, #252]	; (8018c74 <HAL_DMA_IRQHandler+0xa54>)
 8018b78:	4293      	cmp	r3, r2
 8018b7a:	d013      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	4a3d      	ldr	r2, [pc, #244]	; (8018c78 <HAL_DMA_IRQHandler+0xa58>)
 8018b82:	4293      	cmp	r3, r2
 8018b84:	d00e      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b86:	687b      	ldr	r3, [r7, #4]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	4a3c      	ldr	r2, [pc, #240]	; (8018c7c <HAL_DMA_IRQHandler+0xa5c>)
 8018b8c:	4293      	cmp	r3, r2
 8018b8e:	d009      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b90:	687b      	ldr	r3, [r7, #4]
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	4a3a      	ldr	r2, [pc, #232]	; (8018c80 <HAL_DMA_IRQHandler+0xa60>)
 8018b96:	4293      	cmp	r3, r2
 8018b98:	d004      	beq.n	8018ba4 <HAL_DMA_IRQHandler+0x984>
 8018b9a:	687b      	ldr	r3, [r7, #4]
 8018b9c:	681b      	ldr	r3, [r3, #0]
 8018b9e:	4a39      	ldr	r2, [pc, #228]	; (8018c84 <HAL_DMA_IRQHandler+0xa64>)
 8018ba0:	4293      	cmp	r3, r2
 8018ba2:	d101      	bne.n	8018ba8 <HAL_DMA_IRQHandler+0x988>
 8018ba4:	2301      	movs	r3, #1
 8018ba6:	e000      	b.n	8018baa <HAL_DMA_IRQHandler+0x98a>
 8018ba8:	2300      	movs	r3, #0
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	f000 823f 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8018bb0:	687b      	ldr	r3, [r7, #4]
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bbc:	f003 031f 	and.w	r3, r3, #31
 8018bc0:	2204      	movs	r2, #4
 8018bc2:	409a      	lsls	r2, r3
 8018bc4:	697b      	ldr	r3, [r7, #20]
 8018bc6:	4013      	ands	r3, r2
 8018bc8:	2b00      	cmp	r3, #0
 8018bca:	f000 80cd 	beq.w	8018d68 <HAL_DMA_IRQHandler+0xb48>
 8018bce:	693b      	ldr	r3, [r7, #16]
 8018bd0:	f003 0304 	and.w	r3, r3, #4
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	f000 80c7 	beq.w	8018d68 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018bde:	f003 031f 	and.w	r3, r3, #31
 8018be2:	2204      	movs	r2, #4
 8018be4:	409a      	lsls	r2, r3
 8018be6:	69fb      	ldr	r3, [r7, #28]
 8018be8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018bea:	693b      	ldr	r3, [r7, #16]
 8018bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d049      	beq.n	8018c88 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018bf4:	693b      	ldr	r3, [r7, #16]
 8018bf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018bfa:	2b00      	cmp	r3, #0
 8018bfc:	d109      	bne.n	8018c12 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8018bfe:	687b      	ldr	r3, [r7, #4]
 8018c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	f000 8210 	beq.w	8019028 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8018c08:	687b      	ldr	r3, [r7, #4]
 8018c0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8018c0c:	6878      	ldr	r0, [r7, #4]
 8018c0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018c10:	e20a      	b.n	8019028 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	f000 8206 	beq.w	8019028 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c20:	6878      	ldr	r0, [r7, #4]
 8018c22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018c24:	e200      	b.n	8019028 <HAL_DMA_IRQHandler+0xe08>
 8018c26:	bf00      	nop
 8018c28:	40020010 	.word	0x40020010
 8018c2c:	40020028 	.word	0x40020028
 8018c30:	40020040 	.word	0x40020040
 8018c34:	40020058 	.word	0x40020058
 8018c38:	40020070 	.word	0x40020070
 8018c3c:	40020088 	.word	0x40020088
 8018c40:	400200a0 	.word	0x400200a0
 8018c44:	400200b8 	.word	0x400200b8
 8018c48:	40020410 	.word	0x40020410
 8018c4c:	40020428 	.word	0x40020428
 8018c50:	40020440 	.word	0x40020440
 8018c54:	40020458 	.word	0x40020458
 8018c58:	40020470 	.word	0x40020470
 8018c5c:	40020488 	.word	0x40020488
 8018c60:	400204a0 	.word	0x400204a0
 8018c64:	400204b8 	.word	0x400204b8
 8018c68:	58025408 	.word	0x58025408
 8018c6c:	5802541c 	.word	0x5802541c
 8018c70:	58025430 	.word	0x58025430
 8018c74:	58025444 	.word	0x58025444
 8018c78:	58025458 	.word	0x58025458
 8018c7c:	5802546c 	.word	0x5802546c
 8018c80:	58025480 	.word	0x58025480
 8018c84:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018c88:	693b      	ldr	r3, [r7, #16]
 8018c8a:	f003 0320 	and.w	r3, r3, #32
 8018c8e:	2b00      	cmp	r3, #0
 8018c90:	d160      	bne.n	8018d54 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8018c92:	687b      	ldr	r3, [r7, #4]
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	4a7f      	ldr	r2, [pc, #508]	; (8018e94 <HAL_DMA_IRQHandler+0xc74>)
 8018c98:	4293      	cmp	r3, r2
 8018c9a:	d04a      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	4a7d      	ldr	r2, [pc, #500]	; (8018e98 <HAL_DMA_IRQHandler+0xc78>)
 8018ca2:	4293      	cmp	r3, r2
 8018ca4:	d045      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018ca6:	687b      	ldr	r3, [r7, #4]
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	4a7c      	ldr	r2, [pc, #496]	; (8018e9c <HAL_DMA_IRQHandler+0xc7c>)
 8018cac:	4293      	cmp	r3, r2
 8018cae:	d040      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	4a7a      	ldr	r2, [pc, #488]	; (8018ea0 <HAL_DMA_IRQHandler+0xc80>)
 8018cb6:	4293      	cmp	r3, r2
 8018cb8:	d03b      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	4a79      	ldr	r2, [pc, #484]	; (8018ea4 <HAL_DMA_IRQHandler+0xc84>)
 8018cc0:	4293      	cmp	r3, r2
 8018cc2:	d036      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cc4:	687b      	ldr	r3, [r7, #4]
 8018cc6:	681b      	ldr	r3, [r3, #0]
 8018cc8:	4a77      	ldr	r2, [pc, #476]	; (8018ea8 <HAL_DMA_IRQHandler+0xc88>)
 8018cca:	4293      	cmp	r3, r2
 8018ccc:	d031      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cce:	687b      	ldr	r3, [r7, #4]
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	4a76      	ldr	r2, [pc, #472]	; (8018eac <HAL_DMA_IRQHandler+0xc8c>)
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	d02c      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	4a74      	ldr	r2, [pc, #464]	; (8018eb0 <HAL_DMA_IRQHandler+0xc90>)
 8018cde:	4293      	cmp	r3, r2
 8018ce0:	d027      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	681b      	ldr	r3, [r3, #0]
 8018ce6:	4a73      	ldr	r2, [pc, #460]	; (8018eb4 <HAL_DMA_IRQHandler+0xc94>)
 8018ce8:	4293      	cmp	r3, r2
 8018cea:	d022      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cec:	687b      	ldr	r3, [r7, #4]
 8018cee:	681b      	ldr	r3, [r3, #0]
 8018cf0:	4a71      	ldr	r2, [pc, #452]	; (8018eb8 <HAL_DMA_IRQHandler+0xc98>)
 8018cf2:	4293      	cmp	r3, r2
 8018cf4:	d01d      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018cf6:	687b      	ldr	r3, [r7, #4]
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	4a70      	ldr	r2, [pc, #448]	; (8018ebc <HAL_DMA_IRQHandler+0xc9c>)
 8018cfc:	4293      	cmp	r3, r2
 8018cfe:	d018      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	681b      	ldr	r3, [r3, #0]
 8018d04:	4a6e      	ldr	r2, [pc, #440]	; (8018ec0 <HAL_DMA_IRQHandler+0xca0>)
 8018d06:	4293      	cmp	r3, r2
 8018d08:	d013      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d0a:	687b      	ldr	r3, [r7, #4]
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	4a6d      	ldr	r2, [pc, #436]	; (8018ec4 <HAL_DMA_IRQHandler+0xca4>)
 8018d10:	4293      	cmp	r3, r2
 8018d12:	d00e      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	681b      	ldr	r3, [r3, #0]
 8018d18:	4a6b      	ldr	r2, [pc, #428]	; (8018ec8 <HAL_DMA_IRQHandler+0xca8>)
 8018d1a:	4293      	cmp	r3, r2
 8018d1c:	d009      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	681b      	ldr	r3, [r3, #0]
 8018d22:	4a6a      	ldr	r2, [pc, #424]	; (8018ecc <HAL_DMA_IRQHandler+0xcac>)
 8018d24:	4293      	cmp	r3, r2
 8018d26:	d004      	beq.n	8018d32 <HAL_DMA_IRQHandler+0xb12>
 8018d28:	687b      	ldr	r3, [r7, #4]
 8018d2a:	681b      	ldr	r3, [r3, #0]
 8018d2c:	4a68      	ldr	r2, [pc, #416]	; (8018ed0 <HAL_DMA_IRQHandler+0xcb0>)
 8018d2e:	4293      	cmp	r3, r2
 8018d30:	d108      	bne.n	8018d44 <HAL_DMA_IRQHandler+0xb24>
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	681b      	ldr	r3, [r3, #0]
 8018d36:	681a      	ldr	r2, [r3, #0]
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	f022 0208 	bic.w	r2, r2, #8
 8018d40:	601a      	str	r2, [r3, #0]
 8018d42:	e007      	b.n	8018d54 <HAL_DMA_IRQHandler+0xb34>
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	681a      	ldr	r2, [r3, #0]
 8018d4a:	687b      	ldr	r3, [r7, #4]
 8018d4c:	681b      	ldr	r3, [r3, #0]
 8018d4e:	f022 0204 	bic.w	r2, r2, #4
 8018d52:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8018d54:	687b      	ldr	r3, [r7, #4]
 8018d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d58:	2b00      	cmp	r3, #0
 8018d5a:	f000 8165 	beq.w	8019028 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d62:	6878      	ldr	r0, [r7, #4]
 8018d64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018d66:	e15f      	b.n	8019028 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d6c:	f003 031f 	and.w	r3, r3, #31
 8018d70:	2202      	movs	r2, #2
 8018d72:	409a      	lsls	r2, r3
 8018d74:	697b      	ldr	r3, [r7, #20]
 8018d76:	4013      	ands	r3, r2
 8018d78:	2b00      	cmp	r3, #0
 8018d7a:	f000 80c5 	beq.w	8018f08 <HAL_DMA_IRQHandler+0xce8>
 8018d7e:	693b      	ldr	r3, [r7, #16]
 8018d80:	f003 0302 	and.w	r3, r3, #2
 8018d84:	2b00      	cmp	r3, #0
 8018d86:	f000 80bf 	beq.w	8018f08 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018d8e:	f003 031f 	and.w	r3, r3, #31
 8018d92:	2202      	movs	r2, #2
 8018d94:	409a      	lsls	r2, r3
 8018d96:	69fb      	ldr	r3, [r7, #28]
 8018d98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018d9a:	693b      	ldr	r3, [r7, #16]
 8018d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d018      	beq.n	8018dd6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8018da4:	693b      	ldr	r3, [r7, #16]
 8018da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d109      	bne.n	8018dc2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8018dae:	687b      	ldr	r3, [r7, #4]
 8018db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018db2:	2b00      	cmp	r3, #0
 8018db4:	f000 813a 	beq.w	801902c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8018db8:	687b      	ldr	r3, [r7, #4]
 8018dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018dbc:	6878      	ldr	r0, [r7, #4]
 8018dbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018dc0:	e134      	b.n	801902c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	f000 8130 	beq.w	801902c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018dd0:	6878      	ldr	r0, [r7, #4]
 8018dd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018dd4:	e12a      	b.n	801902c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8018dd6:	693b      	ldr	r3, [r7, #16]
 8018dd8:	f003 0320 	and.w	r3, r3, #32
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	f040 8089 	bne.w	8018ef4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	4a2b      	ldr	r2, [pc, #172]	; (8018e94 <HAL_DMA_IRQHandler+0xc74>)
 8018de8:	4293      	cmp	r3, r2
 8018dea:	d04a      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018dec:	687b      	ldr	r3, [r7, #4]
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	4a29      	ldr	r2, [pc, #164]	; (8018e98 <HAL_DMA_IRQHandler+0xc78>)
 8018df2:	4293      	cmp	r3, r2
 8018df4:	d045      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	681b      	ldr	r3, [r3, #0]
 8018dfa:	4a28      	ldr	r2, [pc, #160]	; (8018e9c <HAL_DMA_IRQHandler+0xc7c>)
 8018dfc:	4293      	cmp	r3, r2
 8018dfe:	d040      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	4a26      	ldr	r2, [pc, #152]	; (8018ea0 <HAL_DMA_IRQHandler+0xc80>)
 8018e06:	4293      	cmp	r3, r2
 8018e08:	d03b      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	681b      	ldr	r3, [r3, #0]
 8018e0e:	4a25      	ldr	r2, [pc, #148]	; (8018ea4 <HAL_DMA_IRQHandler+0xc84>)
 8018e10:	4293      	cmp	r3, r2
 8018e12:	d036      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e14:	687b      	ldr	r3, [r7, #4]
 8018e16:	681b      	ldr	r3, [r3, #0]
 8018e18:	4a23      	ldr	r2, [pc, #140]	; (8018ea8 <HAL_DMA_IRQHandler+0xc88>)
 8018e1a:	4293      	cmp	r3, r2
 8018e1c:	d031      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	4a22      	ldr	r2, [pc, #136]	; (8018eac <HAL_DMA_IRQHandler+0xc8c>)
 8018e24:	4293      	cmp	r3, r2
 8018e26:	d02c      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	4a20      	ldr	r2, [pc, #128]	; (8018eb0 <HAL_DMA_IRQHandler+0xc90>)
 8018e2e:	4293      	cmp	r3, r2
 8018e30:	d027      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	4a1f      	ldr	r2, [pc, #124]	; (8018eb4 <HAL_DMA_IRQHandler+0xc94>)
 8018e38:	4293      	cmp	r3, r2
 8018e3a:	d022      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e3c:	687b      	ldr	r3, [r7, #4]
 8018e3e:	681b      	ldr	r3, [r3, #0]
 8018e40:	4a1d      	ldr	r2, [pc, #116]	; (8018eb8 <HAL_DMA_IRQHandler+0xc98>)
 8018e42:	4293      	cmp	r3, r2
 8018e44:	d01d      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e46:	687b      	ldr	r3, [r7, #4]
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	4a1c      	ldr	r2, [pc, #112]	; (8018ebc <HAL_DMA_IRQHandler+0xc9c>)
 8018e4c:	4293      	cmp	r3, r2
 8018e4e:	d018      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	681b      	ldr	r3, [r3, #0]
 8018e54:	4a1a      	ldr	r2, [pc, #104]	; (8018ec0 <HAL_DMA_IRQHandler+0xca0>)
 8018e56:	4293      	cmp	r3, r2
 8018e58:	d013      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	681b      	ldr	r3, [r3, #0]
 8018e5e:	4a19      	ldr	r2, [pc, #100]	; (8018ec4 <HAL_DMA_IRQHandler+0xca4>)
 8018e60:	4293      	cmp	r3, r2
 8018e62:	d00e      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	4a17      	ldr	r2, [pc, #92]	; (8018ec8 <HAL_DMA_IRQHandler+0xca8>)
 8018e6a:	4293      	cmp	r3, r2
 8018e6c:	d009      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	4a16      	ldr	r2, [pc, #88]	; (8018ecc <HAL_DMA_IRQHandler+0xcac>)
 8018e74:	4293      	cmp	r3, r2
 8018e76:	d004      	beq.n	8018e82 <HAL_DMA_IRQHandler+0xc62>
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	4a14      	ldr	r2, [pc, #80]	; (8018ed0 <HAL_DMA_IRQHandler+0xcb0>)
 8018e7e:	4293      	cmp	r3, r2
 8018e80:	d128      	bne.n	8018ed4 <HAL_DMA_IRQHandler+0xcb4>
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	681a      	ldr	r2, [r3, #0]
 8018e88:	687b      	ldr	r3, [r7, #4]
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	f022 0214 	bic.w	r2, r2, #20
 8018e90:	601a      	str	r2, [r3, #0]
 8018e92:	e027      	b.n	8018ee4 <HAL_DMA_IRQHandler+0xcc4>
 8018e94:	40020010 	.word	0x40020010
 8018e98:	40020028 	.word	0x40020028
 8018e9c:	40020040 	.word	0x40020040
 8018ea0:	40020058 	.word	0x40020058
 8018ea4:	40020070 	.word	0x40020070
 8018ea8:	40020088 	.word	0x40020088
 8018eac:	400200a0 	.word	0x400200a0
 8018eb0:	400200b8 	.word	0x400200b8
 8018eb4:	40020410 	.word	0x40020410
 8018eb8:	40020428 	.word	0x40020428
 8018ebc:	40020440 	.word	0x40020440
 8018ec0:	40020458 	.word	0x40020458
 8018ec4:	40020470 	.word	0x40020470
 8018ec8:	40020488 	.word	0x40020488
 8018ecc:	400204a0 	.word	0x400204a0
 8018ed0:	400204b8 	.word	0x400204b8
 8018ed4:	687b      	ldr	r3, [r7, #4]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	681a      	ldr	r2, [r3, #0]
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	681b      	ldr	r3, [r3, #0]
 8018ede:	f022 020a 	bic.w	r2, r2, #10
 8018ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8018ee4:	687b      	ldr	r3, [r7, #4]
 8018ee6:	2201      	movs	r2, #1
 8018ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8018eec:	687b      	ldr	r3, [r7, #4]
 8018eee:	2200      	movs	r2, #0
 8018ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8018ef4:	687b      	ldr	r3, [r7, #4]
 8018ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	f000 8097 	beq.w	801902c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8018efe:	687b      	ldr	r3, [r7, #4]
 8018f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f02:	6878      	ldr	r0, [r7, #4]
 8018f04:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8018f06:	e091      	b.n	801902c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018f0c:	f003 031f 	and.w	r3, r3, #31
 8018f10:	2208      	movs	r2, #8
 8018f12:	409a      	lsls	r2, r3
 8018f14:	697b      	ldr	r3, [r7, #20]
 8018f16:	4013      	ands	r3, r2
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	f000 8088 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
 8018f1e:	693b      	ldr	r3, [r7, #16]
 8018f20:	f003 0308 	and.w	r3, r3, #8
 8018f24:	2b00      	cmp	r3, #0
 8018f26:	f000 8082 	beq.w	801902e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	4a41      	ldr	r2, [pc, #260]	; (8019034 <HAL_DMA_IRQHandler+0xe14>)
 8018f30:	4293      	cmp	r3, r2
 8018f32:	d04a      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	4a3f      	ldr	r2, [pc, #252]	; (8019038 <HAL_DMA_IRQHandler+0xe18>)
 8018f3a:	4293      	cmp	r3, r2
 8018f3c:	d045      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f3e:	687b      	ldr	r3, [r7, #4]
 8018f40:	681b      	ldr	r3, [r3, #0]
 8018f42:	4a3e      	ldr	r2, [pc, #248]	; (801903c <HAL_DMA_IRQHandler+0xe1c>)
 8018f44:	4293      	cmp	r3, r2
 8018f46:	d040      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f48:	687b      	ldr	r3, [r7, #4]
 8018f4a:	681b      	ldr	r3, [r3, #0]
 8018f4c:	4a3c      	ldr	r2, [pc, #240]	; (8019040 <HAL_DMA_IRQHandler+0xe20>)
 8018f4e:	4293      	cmp	r3, r2
 8018f50:	d03b      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	681b      	ldr	r3, [r3, #0]
 8018f56:	4a3b      	ldr	r2, [pc, #236]	; (8019044 <HAL_DMA_IRQHandler+0xe24>)
 8018f58:	4293      	cmp	r3, r2
 8018f5a:	d036      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	681b      	ldr	r3, [r3, #0]
 8018f60:	4a39      	ldr	r2, [pc, #228]	; (8019048 <HAL_DMA_IRQHandler+0xe28>)
 8018f62:	4293      	cmp	r3, r2
 8018f64:	d031      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	4a38      	ldr	r2, [pc, #224]	; (801904c <HAL_DMA_IRQHandler+0xe2c>)
 8018f6c:	4293      	cmp	r3, r2
 8018f6e:	d02c      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	681b      	ldr	r3, [r3, #0]
 8018f74:	4a36      	ldr	r2, [pc, #216]	; (8019050 <HAL_DMA_IRQHandler+0xe30>)
 8018f76:	4293      	cmp	r3, r2
 8018f78:	d027      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	681b      	ldr	r3, [r3, #0]
 8018f7e:	4a35      	ldr	r2, [pc, #212]	; (8019054 <HAL_DMA_IRQHandler+0xe34>)
 8018f80:	4293      	cmp	r3, r2
 8018f82:	d022      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	4a33      	ldr	r2, [pc, #204]	; (8019058 <HAL_DMA_IRQHandler+0xe38>)
 8018f8a:	4293      	cmp	r3, r2
 8018f8c:	d01d      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	681b      	ldr	r3, [r3, #0]
 8018f92:	4a32      	ldr	r2, [pc, #200]	; (801905c <HAL_DMA_IRQHandler+0xe3c>)
 8018f94:	4293      	cmp	r3, r2
 8018f96:	d018      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	4a30      	ldr	r2, [pc, #192]	; (8019060 <HAL_DMA_IRQHandler+0xe40>)
 8018f9e:	4293      	cmp	r3, r2
 8018fa0:	d013      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018fa2:	687b      	ldr	r3, [r7, #4]
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	4a2f      	ldr	r2, [pc, #188]	; (8019064 <HAL_DMA_IRQHandler+0xe44>)
 8018fa8:	4293      	cmp	r3, r2
 8018faa:	d00e      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	681b      	ldr	r3, [r3, #0]
 8018fb0:	4a2d      	ldr	r2, [pc, #180]	; (8019068 <HAL_DMA_IRQHandler+0xe48>)
 8018fb2:	4293      	cmp	r3, r2
 8018fb4:	d009      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018fb6:	687b      	ldr	r3, [r7, #4]
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	4a2c      	ldr	r2, [pc, #176]	; (801906c <HAL_DMA_IRQHandler+0xe4c>)
 8018fbc:	4293      	cmp	r3, r2
 8018fbe:	d004      	beq.n	8018fca <HAL_DMA_IRQHandler+0xdaa>
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	681b      	ldr	r3, [r3, #0]
 8018fc4:	4a2a      	ldr	r2, [pc, #168]	; (8019070 <HAL_DMA_IRQHandler+0xe50>)
 8018fc6:	4293      	cmp	r3, r2
 8018fc8:	d108      	bne.n	8018fdc <HAL_DMA_IRQHandler+0xdbc>
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	681b      	ldr	r3, [r3, #0]
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	687b      	ldr	r3, [r7, #4]
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	f022 021c 	bic.w	r2, r2, #28
 8018fd8:	601a      	str	r2, [r3, #0]
 8018fda:	e007      	b.n	8018fec <HAL_DMA_IRQHandler+0xdcc>
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	681a      	ldr	r2, [r3, #0]
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	681b      	ldr	r3, [r3, #0]
 8018fe6:	f022 020e 	bic.w	r2, r2, #14
 8018fea:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018ff0:	f003 031f 	and.w	r3, r3, #31
 8018ff4:	2201      	movs	r2, #1
 8018ff6:	409a      	lsls	r2, r3
 8018ff8:	69fb      	ldr	r3, [r7, #28]
 8018ffa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8018ffc:	687b      	ldr	r3, [r7, #4]
 8018ffe:	2201      	movs	r2, #1
 8019000:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019002:	687b      	ldr	r3, [r7, #4]
 8019004:	2201      	movs	r2, #1
 8019006:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801900a:	687b      	ldr	r3, [r7, #4]
 801900c:	2200      	movs	r2, #0
 801900e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019016:	2b00      	cmp	r3, #0
 8019018:	d009      	beq.n	801902e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801901a:	687b      	ldr	r3, [r7, #4]
 801901c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801901e:	6878      	ldr	r0, [r7, #4]
 8019020:	4798      	blx	r3
 8019022:	e004      	b.n	801902e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8019024:	bf00      	nop
 8019026:	e002      	b.n	801902e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8019028:	bf00      	nop
 801902a:	e000      	b.n	801902e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801902c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801902e:	3728      	adds	r7, #40	; 0x28
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}
 8019034:	40020010 	.word	0x40020010
 8019038:	40020028 	.word	0x40020028
 801903c:	40020040 	.word	0x40020040
 8019040:	40020058 	.word	0x40020058
 8019044:	40020070 	.word	0x40020070
 8019048:	40020088 	.word	0x40020088
 801904c:	400200a0 	.word	0x400200a0
 8019050:	400200b8 	.word	0x400200b8
 8019054:	40020410 	.word	0x40020410
 8019058:	40020428 	.word	0x40020428
 801905c:	40020440 	.word	0x40020440
 8019060:	40020458 	.word	0x40020458
 8019064:	40020470 	.word	0x40020470
 8019068:	40020488 	.word	0x40020488
 801906c:	400204a0 	.word	0x400204a0
 8019070:	400204b8 	.word	0x400204b8

08019074 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8019074:	b480      	push	{r7}
 8019076:	b087      	sub	sp, #28
 8019078:	af00      	add	r7, sp, #0
 801907a:	60f8      	str	r0, [r7, #12]
 801907c:	60b9      	str	r1, [r7, #8]
 801907e:	607a      	str	r2, [r7, #4]
 8019080:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019082:	68fb      	ldr	r3, [r7, #12]
 8019084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019086:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019088:	68fb      	ldr	r3, [r7, #12]
 801908a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801908c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	4a7f      	ldr	r2, [pc, #508]	; (8019290 <DMA_SetConfig+0x21c>)
 8019094:	4293      	cmp	r3, r2
 8019096:	d072      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019098:	68fb      	ldr	r3, [r7, #12]
 801909a:	681b      	ldr	r3, [r3, #0]
 801909c:	4a7d      	ldr	r2, [pc, #500]	; (8019294 <DMA_SetConfig+0x220>)
 801909e:	4293      	cmp	r3, r2
 80190a0:	d06d      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	681b      	ldr	r3, [r3, #0]
 80190a6:	4a7c      	ldr	r2, [pc, #496]	; (8019298 <DMA_SetConfig+0x224>)
 80190a8:	4293      	cmp	r3, r2
 80190aa:	d068      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	681b      	ldr	r3, [r3, #0]
 80190b0:	4a7a      	ldr	r2, [pc, #488]	; (801929c <DMA_SetConfig+0x228>)
 80190b2:	4293      	cmp	r3, r2
 80190b4:	d063      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190b6:	68fb      	ldr	r3, [r7, #12]
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	4a79      	ldr	r2, [pc, #484]	; (80192a0 <DMA_SetConfig+0x22c>)
 80190bc:	4293      	cmp	r3, r2
 80190be:	d05e      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	681b      	ldr	r3, [r3, #0]
 80190c4:	4a77      	ldr	r2, [pc, #476]	; (80192a4 <DMA_SetConfig+0x230>)
 80190c6:	4293      	cmp	r3, r2
 80190c8:	d059      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	4a76      	ldr	r2, [pc, #472]	; (80192a8 <DMA_SetConfig+0x234>)
 80190d0:	4293      	cmp	r3, r2
 80190d2:	d054      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190d4:	68fb      	ldr	r3, [r7, #12]
 80190d6:	681b      	ldr	r3, [r3, #0]
 80190d8:	4a74      	ldr	r2, [pc, #464]	; (80192ac <DMA_SetConfig+0x238>)
 80190da:	4293      	cmp	r3, r2
 80190dc:	d04f      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	4a73      	ldr	r2, [pc, #460]	; (80192b0 <DMA_SetConfig+0x23c>)
 80190e4:	4293      	cmp	r3, r2
 80190e6:	d04a      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	681b      	ldr	r3, [r3, #0]
 80190ec:	4a71      	ldr	r2, [pc, #452]	; (80192b4 <DMA_SetConfig+0x240>)
 80190ee:	4293      	cmp	r3, r2
 80190f0:	d045      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190f2:	68fb      	ldr	r3, [r7, #12]
 80190f4:	681b      	ldr	r3, [r3, #0]
 80190f6:	4a70      	ldr	r2, [pc, #448]	; (80192b8 <DMA_SetConfig+0x244>)
 80190f8:	4293      	cmp	r3, r2
 80190fa:	d040      	beq.n	801917e <DMA_SetConfig+0x10a>
 80190fc:	68fb      	ldr	r3, [r7, #12]
 80190fe:	681b      	ldr	r3, [r3, #0]
 8019100:	4a6e      	ldr	r2, [pc, #440]	; (80192bc <DMA_SetConfig+0x248>)
 8019102:	4293      	cmp	r3, r2
 8019104:	d03b      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	681b      	ldr	r3, [r3, #0]
 801910a:	4a6d      	ldr	r2, [pc, #436]	; (80192c0 <DMA_SetConfig+0x24c>)
 801910c:	4293      	cmp	r3, r2
 801910e:	d036      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019110:	68fb      	ldr	r3, [r7, #12]
 8019112:	681b      	ldr	r3, [r3, #0]
 8019114:	4a6b      	ldr	r2, [pc, #428]	; (80192c4 <DMA_SetConfig+0x250>)
 8019116:	4293      	cmp	r3, r2
 8019118:	d031      	beq.n	801917e <DMA_SetConfig+0x10a>
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	681b      	ldr	r3, [r3, #0]
 801911e:	4a6a      	ldr	r2, [pc, #424]	; (80192c8 <DMA_SetConfig+0x254>)
 8019120:	4293      	cmp	r3, r2
 8019122:	d02c      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019124:	68fb      	ldr	r3, [r7, #12]
 8019126:	681b      	ldr	r3, [r3, #0]
 8019128:	4a68      	ldr	r2, [pc, #416]	; (80192cc <DMA_SetConfig+0x258>)
 801912a:	4293      	cmp	r3, r2
 801912c:	d027      	beq.n	801917e <DMA_SetConfig+0x10a>
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	681b      	ldr	r3, [r3, #0]
 8019132:	4a67      	ldr	r2, [pc, #412]	; (80192d0 <DMA_SetConfig+0x25c>)
 8019134:	4293      	cmp	r3, r2
 8019136:	d022      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	681b      	ldr	r3, [r3, #0]
 801913c:	4a65      	ldr	r2, [pc, #404]	; (80192d4 <DMA_SetConfig+0x260>)
 801913e:	4293      	cmp	r3, r2
 8019140:	d01d      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	681b      	ldr	r3, [r3, #0]
 8019146:	4a64      	ldr	r2, [pc, #400]	; (80192d8 <DMA_SetConfig+0x264>)
 8019148:	4293      	cmp	r3, r2
 801914a:	d018      	beq.n	801917e <DMA_SetConfig+0x10a>
 801914c:	68fb      	ldr	r3, [r7, #12]
 801914e:	681b      	ldr	r3, [r3, #0]
 8019150:	4a62      	ldr	r2, [pc, #392]	; (80192dc <DMA_SetConfig+0x268>)
 8019152:	4293      	cmp	r3, r2
 8019154:	d013      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019156:	68fb      	ldr	r3, [r7, #12]
 8019158:	681b      	ldr	r3, [r3, #0]
 801915a:	4a61      	ldr	r2, [pc, #388]	; (80192e0 <DMA_SetConfig+0x26c>)
 801915c:	4293      	cmp	r3, r2
 801915e:	d00e      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	681b      	ldr	r3, [r3, #0]
 8019164:	4a5f      	ldr	r2, [pc, #380]	; (80192e4 <DMA_SetConfig+0x270>)
 8019166:	4293      	cmp	r3, r2
 8019168:	d009      	beq.n	801917e <DMA_SetConfig+0x10a>
 801916a:	68fb      	ldr	r3, [r7, #12]
 801916c:	681b      	ldr	r3, [r3, #0]
 801916e:	4a5e      	ldr	r2, [pc, #376]	; (80192e8 <DMA_SetConfig+0x274>)
 8019170:	4293      	cmp	r3, r2
 8019172:	d004      	beq.n	801917e <DMA_SetConfig+0x10a>
 8019174:	68fb      	ldr	r3, [r7, #12]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	4a5c      	ldr	r2, [pc, #368]	; (80192ec <DMA_SetConfig+0x278>)
 801917a:	4293      	cmp	r3, r2
 801917c:	d101      	bne.n	8019182 <DMA_SetConfig+0x10e>
 801917e:	2301      	movs	r3, #1
 8019180:	e000      	b.n	8019184 <DMA_SetConfig+0x110>
 8019182:	2300      	movs	r3, #0
 8019184:	2b00      	cmp	r3, #0
 8019186:	d00d      	beq.n	80191a4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019188:	68fb      	ldr	r3, [r7, #12]
 801918a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801918c:	68fa      	ldr	r2, [r7, #12]
 801918e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8019190:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8019192:	68fb      	ldr	r3, [r7, #12]
 8019194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019196:	2b00      	cmp	r3, #0
 8019198:	d004      	beq.n	80191a4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801919a:	68fb      	ldr	r3, [r7, #12]
 801919c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801919e:	68fa      	ldr	r2, [r7, #12]
 80191a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80191a2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80191a4:	68fb      	ldr	r3, [r7, #12]
 80191a6:	681b      	ldr	r3, [r3, #0]
 80191a8:	4a39      	ldr	r2, [pc, #228]	; (8019290 <DMA_SetConfig+0x21c>)
 80191aa:	4293      	cmp	r3, r2
 80191ac:	d04a      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191ae:	68fb      	ldr	r3, [r7, #12]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	4a38      	ldr	r2, [pc, #224]	; (8019294 <DMA_SetConfig+0x220>)
 80191b4:	4293      	cmp	r3, r2
 80191b6:	d045      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191b8:	68fb      	ldr	r3, [r7, #12]
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	4a36      	ldr	r2, [pc, #216]	; (8019298 <DMA_SetConfig+0x224>)
 80191be:	4293      	cmp	r3, r2
 80191c0:	d040      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191c2:	68fb      	ldr	r3, [r7, #12]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	4a35      	ldr	r2, [pc, #212]	; (801929c <DMA_SetConfig+0x228>)
 80191c8:	4293      	cmp	r3, r2
 80191ca:	d03b      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191cc:	68fb      	ldr	r3, [r7, #12]
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	4a33      	ldr	r2, [pc, #204]	; (80192a0 <DMA_SetConfig+0x22c>)
 80191d2:	4293      	cmp	r3, r2
 80191d4:	d036      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191d6:	68fb      	ldr	r3, [r7, #12]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	4a32      	ldr	r2, [pc, #200]	; (80192a4 <DMA_SetConfig+0x230>)
 80191dc:	4293      	cmp	r3, r2
 80191de:	d031      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191e0:	68fb      	ldr	r3, [r7, #12]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	4a30      	ldr	r2, [pc, #192]	; (80192a8 <DMA_SetConfig+0x234>)
 80191e6:	4293      	cmp	r3, r2
 80191e8:	d02c      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191ea:	68fb      	ldr	r3, [r7, #12]
 80191ec:	681b      	ldr	r3, [r3, #0]
 80191ee:	4a2f      	ldr	r2, [pc, #188]	; (80192ac <DMA_SetConfig+0x238>)
 80191f0:	4293      	cmp	r3, r2
 80191f2:	d027      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191f4:	68fb      	ldr	r3, [r7, #12]
 80191f6:	681b      	ldr	r3, [r3, #0]
 80191f8:	4a2d      	ldr	r2, [pc, #180]	; (80192b0 <DMA_SetConfig+0x23c>)
 80191fa:	4293      	cmp	r3, r2
 80191fc:	d022      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 80191fe:	68fb      	ldr	r3, [r7, #12]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	4a2c      	ldr	r2, [pc, #176]	; (80192b4 <DMA_SetConfig+0x240>)
 8019204:	4293      	cmp	r3, r2
 8019206:	d01d      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 8019208:	68fb      	ldr	r3, [r7, #12]
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	4a2a      	ldr	r2, [pc, #168]	; (80192b8 <DMA_SetConfig+0x244>)
 801920e:	4293      	cmp	r3, r2
 8019210:	d018      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	4a29      	ldr	r2, [pc, #164]	; (80192bc <DMA_SetConfig+0x248>)
 8019218:	4293      	cmp	r3, r2
 801921a:	d013      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	681b      	ldr	r3, [r3, #0]
 8019220:	4a27      	ldr	r2, [pc, #156]	; (80192c0 <DMA_SetConfig+0x24c>)
 8019222:	4293      	cmp	r3, r2
 8019224:	d00e      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	4a26      	ldr	r2, [pc, #152]	; (80192c4 <DMA_SetConfig+0x250>)
 801922c:	4293      	cmp	r3, r2
 801922e:	d009      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	681b      	ldr	r3, [r3, #0]
 8019234:	4a24      	ldr	r2, [pc, #144]	; (80192c8 <DMA_SetConfig+0x254>)
 8019236:	4293      	cmp	r3, r2
 8019238:	d004      	beq.n	8019244 <DMA_SetConfig+0x1d0>
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	681b      	ldr	r3, [r3, #0]
 801923e:	4a23      	ldr	r2, [pc, #140]	; (80192cc <DMA_SetConfig+0x258>)
 8019240:	4293      	cmp	r3, r2
 8019242:	d101      	bne.n	8019248 <DMA_SetConfig+0x1d4>
 8019244:	2301      	movs	r3, #1
 8019246:	e000      	b.n	801924a <DMA_SetConfig+0x1d6>
 8019248:	2300      	movs	r3, #0
 801924a:	2b00      	cmp	r3, #0
 801924c:	d059      	beq.n	8019302 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019252:	f003 031f 	and.w	r3, r3, #31
 8019256:	223f      	movs	r2, #63	; 0x3f
 8019258:	409a      	lsls	r2, r3
 801925a:	697b      	ldr	r3, [r7, #20]
 801925c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 801925e:	68fb      	ldr	r3, [r7, #12]
 8019260:	681b      	ldr	r3, [r3, #0]
 8019262:	681a      	ldr	r2, [r3, #0]
 8019264:	68fb      	ldr	r3, [r7, #12]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 801926c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 801926e:	68fb      	ldr	r3, [r7, #12]
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	683a      	ldr	r2, [r7, #0]
 8019274:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019276:	68fb      	ldr	r3, [r7, #12]
 8019278:	689b      	ldr	r3, [r3, #8]
 801927a:	2b40      	cmp	r3, #64	; 0x40
 801927c:	d138      	bne.n	80192f0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 801927e:	68fb      	ldr	r3, [r7, #12]
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	687a      	ldr	r2, [r7, #4]
 8019284:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	681b      	ldr	r3, [r3, #0]
 801928a:	68ba      	ldr	r2, [r7, #8]
 801928c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 801928e:	e086      	b.n	801939e <DMA_SetConfig+0x32a>
 8019290:	40020010 	.word	0x40020010
 8019294:	40020028 	.word	0x40020028
 8019298:	40020040 	.word	0x40020040
 801929c:	40020058 	.word	0x40020058
 80192a0:	40020070 	.word	0x40020070
 80192a4:	40020088 	.word	0x40020088
 80192a8:	400200a0 	.word	0x400200a0
 80192ac:	400200b8 	.word	0x400200b8
 80192b0:	40020410 	.word	0x40020410
 80192b4:	40020428 	.word	0x40020428
 80192b8:	40020440 	.word	0x40020440
 80192bc:	40020458 	.word	0x40020458
 80192c0:	40020470 	.word	0x40020470
 80192c4:	40020488 	.word	0x40020488
 80192c8:	400204a0 	.word	0x400204a0
 80192cc:	400204b8 	.word	0x400204b8
 80192d0:	58025408 	.word	0x58025408
 80192d4:	5802541c 	.word	0x5802541c
 80192d8:	58025430 	.word	0x58025430
 80192dc:	58025444 	.word	0x58025444
 80192e0:	58025458 	.word	0x58025458
 80192e4:	5802546c 	.word	0x5802546c
 80192e8:	58025480 	.word	0x58025480
 80192ec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80192f0:	68fb      	ldr	r3, [r7, #12]
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	68ba      	ldr	r2, [r7, #8]
 80192f6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80192f8:	68fb      	ldr	r3, [r7, #12]
 80192fa:	681b      	ldr	r3, [r3, #0]
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	60da      	str	r2, [r3, #12]
}
 8019300:	e04d      	b.n	801939e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8019302:	68fb      	ldr	r3, [r7, #12]
 8019304:	681b      	ldr	r3, [r3, #0]
 8019306:	4a29      	ldr	r2, [pc, #164]	; (80193ac <DMA_SetConfig+0x338>)
 8019308:	4293      	cmp	r3, r2
 801930a:	d022      	beq.n	8019352 <DMA_SetConfig+0x2de>
 801930c:	68fb      	ldr	r3, [r7, #12]
 801930e:	681b      	ldr	r3, [r3, #0]
 8019310:	4a27      	ldr	r2, [pc, #156]	; (80193b0 <DMA_SetConfig+0x33c>)
 8019312:	4293      	cmp	r3, r2
 8019314:	d01d      	beq.n	8019352 <DMA_SetConfig+0x2de>
 8019316:	68fb      	ldr	r3, [r7, #12]
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	4a26      	ldr	r2, [pc, #152]	; (80193b4 <DMA_SetConfig+0x340>)
 801931c:	4293      	cmp	r3, r2
 801931e:	d018      	beq.n	8019352 <DMA_SetConfig+0x2de>
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	681b      	ldr	r3, [r3, #0]
 8019324:	4a24      	ldr	r2, [pc, #144]	; (80193b8 <DMA_SetConfig+0x344>)
 8019326:	4293      	cmp	r3, r2
 8019328:	d013      	beq.n	8019352 <DMA_SetConfig+0x2de>
 801932a:	68fb      	ldr	r3, [r7, #12]
 801932c:	681b      	ldr	r3, [r3, #0]
 801932e:	4a23      	ldr	r2, [pc, #140]	; (80193bc <DMA_SetConfig+0x348>)
 8019330:	4293      	cmp	r3, r2
 8019332:	d00e      	beq.n	8019352 <DMA_SetConfig+0x2de>
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	4a21      	ldr	r2, [pc, #132]	; (80193c0 <DMA_SetConfig+0x34c>)
 801933a:	4293      	cmp	r3, r2
 801933c:	d009      	beq.n	8019352 <DMA_SetConfig+0x2de>
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	681b      	ldr	r3, [r3, #0]
 8019342:	4a20      	ldr	r2, [pc, #128]	; (80193c4 <DMA_SetConfig+0x350>)
 8019344:	4293      	cmp	r3, r2
 8019346:	d004      	beq.n	8019352 <DMA_SetConfig+0x2de>
 8019348:	68fb      	ldr	r3, [r7, #12]
 801934a:	681b      	ldr	r3, [r3, #0]
 801934c:	4a1e      	ldr	r2, [pc, #120]	; (80193c8 <DMA_SetConfig+0x354>)
 801934e:	4293      	cmp	r3, r2
 8019350:	d101      	bne.n	8019356 <DMA_SetConfig+0x2e2>
 8019352:	2301      	movs	r3, #1
 8019354:	e000      	b.n	8019358 <DMA_SetConfig+0x2e4>
 8019356:	2300      	movs	r3, #0
 8019358:	2b00      	cmp	r3, #0
 801935a:	d020      	beq.n	801939e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019360:	f003 031f 	and.w	r3, r3, #31
 8019364:	2201      	movs	r2, #1
 8019366:	409a      	lsls	r2, r3
 8019368:	693b      	ldr	r3, [r7, #16]
 801936a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 801936c:	68fb      	ldr	r3, [r7, #12]
 801936e:	681b      	ldr	r3, [r3, #0]
 8019370:	683a      	ldr	r2, [r7, #0]
 8019372:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8019374:	68fb      	ldr	r3, [r7, #12]
 8019376:	689b      	ldr	r3, [r3, #8]
 8019378:	2b40      	cmp	r3, #64	; 0x40
 801937a:	d108      	bne.n	801938e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	687a      	ldr	r2, [r7, #4]
 8019382:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8019384:	68fb      	ldr	r3, [r7, #12]
 8019386:	681b      	ldr	r3, [r3, #0]
 8019388:	68ba      	ldr	r2, [r7, #8]
 801938a:	60da      	str	r2, [r3, #12]
}
 801938c:	e007      	b.n	801939e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	681b      	ldr	r3, [r3, #0]
 8019392:	68ba      	ldr	r2, [r7, #8]
 8019394:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8019396:	68fb      	ldr	r3, [r7, #12]
 8019398:	681b      	ldr	r3, [r3, #0]
 801939a:	687a      	ldr	r2, [r7, #4]
 801939c:	60da      	str	r2, [r3, #12]
}
 801939e:	bf00      	nop
 80193a0:	371c      	adds	r7, #28
 80193a2:	46bd      	mov	sp, r7
 80193a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop
 80193ac:	58025408 	.word	0x58025408
 80193b0:	5802541c 	.word	0x5802541c
 80193b4:	58025430 	.word	0x58025430
 80193b8:	58025444 	.word	0x58025444
 80193bc:	58025458 	.word	0x58025458
 80193c0:	5802546c 	.word	0x5802546c
 80193c4:	58025480 	.word	0x58025480
 80193c8:	58025494 	.word	0x58025494

080193cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80193cc:	b480      	push	{r7}
 80193ce:	b085      	sub	sp, #20
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	4a42      	ldr	r2, [pc, #264]	; (80194e4 <DMA_CalcBaseAndBitshift+0x118>)
 80193da:	4293      	cmp	r3, r2
 80193dc:	d04a      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	4a41      	ldr	r2, [pc, #260]	; (80194e8 <DMA_CalcBaseAndBitshift+0x11c>)
 80193e4:	4293      	cmp	r3, r2
 80193e6:	d045      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	681b      	ldr	r3, [r3, #0]
 80193ec:	4a3f      	ldr	r2, [pc, #252]	; (80194ec <DMA_CalcBaseAndBitshift+0x120>)
 80193ee:	4293      	cmp	r3, r2
 80193f0:	d040      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 80193f2:	687b      	ldr	r3, [r7, #4]
 80193f4:	681b      	ldr	r3, [r3, #0]
 80193f6:	4a3e      	ldr	r2, [pc, #248]	; (80194f0 <DMA_CalcBaseAndBitshift+0x124>)
 80193f8:	4293      	cmp	r3, r2
 80193fa:	d03b      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	4a3c      	ldr	r2, [pc, #240]	; (80194f4 <DMA_CalcBaseAndBitshift+0x128>)
 8019402:	4293      	cmp	r3, r2
 8019404:	d036      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	681b      	ldr	r3, [r3, #0]
 801940a:	4a3b      	ldr	r2, [pc, #236]	; (80194f8 <DMA_CalcBaseAndBitshift+0x12c>)
 801940c:	4293      	cmp	r3, r2
 801940e:	d031      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019410:	687b      	ldr	r3, [r7, #4]
 8019412:	681b      	ldr	r3, [r3, #0]
 8019414:	4a39      	ldr	r2, [pc, #228]	; (80194fc <DMA_CalcBaseAndBitshift+0x130>)
 8019416:	4293      	cmp	r3, r2
 8019418:	d02c      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	681b      	ldr	r3, [r3, #0]
 801941e:	4a38      	ldr	r2, [pc, #224]	; (8019500 <DMA_CalcBaseAndBitshift+0x134>)
 8019420:	4293      	cmp	r3, r2
 8019422:	d027      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019424:	687b      	ldr	r3, [r7, #4]
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	4a36      	ldr	r2, [pc, #216]	; (8019504 <DMA_CalcBaseAndBitshift+0x138>)
 801942a:	4293      	cmp	r3, r2
 801942c:	d022      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	4a35      	ldr	r2, [pc, #212]	; (8019508 <DMA_CalcBaseAndBitshift+0x13c>)
 8019434:	4293      	cmp	r3, r2
 8019436:	d01d      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019438:	687b      	ldr	r3, [r7, #4]
 801943a:	681b      	ldr	r3, [r3, #0]
 801943c:	4a33      	ldr	r2, [pc, #204]	; (801950c <DMA_CalcBaseAndBitshift+0x140>)
 801943e:	4293      	cmp	r3, r2
 8019440:	d018      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019442:	687b      	ldr	r3, [r7, #4]
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	4a32      	ldr	r2, [pc, #200]	; (8019510 <DMA_CalcBaseAndBitshift+0x144>)
 8019448:	4293      	cmp	r3, r2
 801944a:	d013      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 801944c:	687b      	ldr	r3, [r7, #4]
 801944e:	681b      	ldr	r3, [r3, #0]
 8019450:	4a30      	ldr	r2, [pc, #192]	; (8019514 <DMA_CalcBaseAndBitshift+0x148>)
 8019452:	4293      	cmp	r3, r2
 8019454:	d00e      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	681b      	ldr	r3, [r3, #0]
 801945a:	4a2f      	ldr	r2, [pc, #188]	; (8019518 <DMA_CalcBaseAndBitshift+0x14c>)
 801945c:	4293      	cmp	r3, r2
 801945e:	d009      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 8019460:	687b      	ldr	r3, [r7, #4]
 8019462:	681b      	ldr	r3, [r3, #0]
 8019464:	4a2d      	ldr	r2, [pc, #180]	; (801951c <DMA_CalcBaseAndBitshift+0x150>)
 8019466:	4293      	cmp	r3, r2
 8019468:	d004      	beq.n	8019474 <DMA_CalcBaseAndBitshift+0xa8>
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	681b      	ldr	r3, [r3, #0]
 801946e:	4a2c      	ldr	r2, [pc, #176]	; (8019520 <DMA_CalcBaseAndBitshift+0x154>)
 8019470:	4293      	cmp	r3, r2
 8019472:	d101      	bne.n	8019478 <DMA_CalcBaseAndBitshift+0xac>
 8019474:	2301      	movs	r3, #1
 8019476:	e000      	b.n	801947a <DMA_CalcBaseAndBitshift+0xae>
 8019478:	2300      	movs	r3, #0
 801947a:	2b00      	cmp	r3, #0
 801947c:	d024      	beq.n	80194c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801947e:	687b      	ldr	r3, [r7, #4]
 8019480:	681b      	ldr	r3, [r3, #0]
 8019482:	b2db      	uxtb	r3, r3
 8019484:	3b10      	subs	r3, #16
 8019486:	4a27      	ldr	r2, [pc, #156]	; (8019524 <DMA_CalcBaseAndBitshift+0x158>)
 8019488:	fba2 2303 	umull	r2, r3, r2, r3
 801948c:	091b      	lsrs	r3, r3, #4
 801948e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	f003 0307 	and.w	r3, r3, #7
 8019496:	4a24      	ldr	r2, [pc, #144]	; (8019528 <DMA_CalcBaseAndBitshift+0x15c>)
 8019498:	5cd3      	ldrb	r3, [r2, r3]
 801949a:	461a      	mov	r2, r3
 801949c:	687b      	ldr	r3, [r7, #4]
 801949e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	2b03      	cmp	r3, #3
 80194a4:	d908      	bls.n	80194b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	461a      	mov	r2, r3
 80194ac:	4b1f      	ldr	r3, [pc, #124]	; (801952c <DMA_CalcBaseAndBitshift+0x160>)
 80194ae:	4013      	ands	r3, r2
 80194b0:	1d1a      	adds	r2, r3, #4
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	659a      	str	r2, [r3, #88]	; 0x58
 80194b6:	e00d      	b.n	80194d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	461a      	mov	r2, r3
 80194be:	4b1b      	ldr	r3, [pc, #108]	; (801952c <DMA_CalcBaseAndBitshift+0x160>)
 80194c0:	4013      	ands	r3, r2
 80194c2:	687a      	ldr	r2, [r7, #4]
 80194c4:	6593      	str	r3, [r2, #88]	; 0x58
 80194c6:	e005      	b.n	80194d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80194d8:	4618      	mov	r0, r3
 80194da:	3714      	adds	r7, #20
 80194dc:	46bd      	mov	sp, r7
 80194de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e2:	4770      	bx	lr
 80194e4:	40020010 	.word	0x40020010
 80194e8:	40020028 	.word	0x40020028
 80194ec:	40020040 	.word	0x40020040
 80194f0:	40020058 	.word	0x40020058
 80194f4:	40020070 	.word	0x40020070
 80194f8:	40020088 	.word	0x40020088
 80194fc:	400200a0 	.word	0x400200a0
 8019500:	400200b8 	.word	0x400200b8
 8019504:	40020410 	.word	0x40020410
 8019508:	40020428 	.word	0x40020428
 801950c:	40020440 	.word	0x40020440
 8019510:	40020458 	.word	0x40020458
 8019514:	40020470 	.word	0x40020470
 8019518:	40020488 	.word	0x40020488
 801951c:	400204a0 	.word	0x400204a0
 8019520:	400204b8 	.word	0x400204b8
 8019524:	aaaaaaab 	.word	0xaaaaaaab
 8019528:	08020d20 	.word	0x08020d20
 801952c:	fffffc00 	.word	0xfffffc00

08019530 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8019530:	b480      	push	{r7}
 8019532:	b085      	sub	sp, #20
 8019534:	af00      	add	r7, sp, #0
 8019536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019538:	2300      	movs	r3, #0
 801953a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801953c:	687b      	ldr	r3, [r7, #4]
 801953e:	699b      	ldr	r3, [r3, #24]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d120      	bne.n	8019586 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019548:	2b03      	cmp	r3, #3
 801954a:	d858      	bhi.n	80195fe <DMA_CheckFifoParam+0xce>
 801954c:	a201      	add	r2, pc, #4	; (adr r2, 8019554 <DMA_CheckFifoParam+0x24>)
 801954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019552:	bf00      	nop
 8019554:	08019565 	.word	0x08019565
 8019558:	08019577 	.word	0x08019577
 801955c:	08019565 	.word	0x08019565
 8019560:	080195ff 	.word	0x080195ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8019564:	687b      	ldr	r3, [r7, #4]
 8019566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019568:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801956c:	2b00      	cmp	r3, #0
 801956e:	d048      	beq.n	8019602 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8019570:	2301      	movs	r3, #1
 8019572:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019574:	e045      	b.n	8019602 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8019576:	687b      	ldr	r3, [r7, #4]
 8019578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801957a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 801957e:	d142      	bne.n	8019606 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8019580:	2301      	movs	r3, #1
 8019582:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8019584:	e03f      	b.n	8019606 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	699b      	ldr	r3, [r3, #24]
 801958a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801958e:	d123      	bne.n	80195d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019594:	2b03      	cmp	r3, #3
 8019596:	d838      	bhi.n	801960a <DMA_CheckFifoParam+0xda>
 8019598:	a201      	add	r2, pc, #4	; (adr r2, 80195a0 <DMA_CheckFifoParam+0x70>)
 801959a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801959e:	bf00      	nop
 80195a0:	080195b1 	.word	0x080195b1
 80195a4:	080195b7 	.word	0x080195b7
 80195a8:	080195b1 	.word	0x080195b1
 80195ac:	080195c9 	.word	0x080195c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80195b0:	2301      	movs	r3, #1
 80195b2:	73fb      	strb	r3, [r7, #15]
        break;
 80195b4:	e030      	b.n	8019618 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80195be:	2b00      	cmp	r3, #0
 80195c0:	d025      	beq.n	801960e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80195c2:	2301      	movs	r3, #1
 80195c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80195c6:	e022      	b.n	801960e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80195c8:	687b      	ldr	r3, [r7, #4]
 80195ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80195d0:	d11f      	bne.n	8019612 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80195d2:	2301      	movs	r3, #1
 80195d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80195d6:	e01c      	b.n	8019612 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80195dc:	2b02      	cmp	r3, #2
 80195de:	d902      	bls.n	80195e6 <DMA_CheckFifoParam+0xb6>
 80195e0:	2b03      	cmp	r3, #3
 80195e2:	d003      	beq.n	80195ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80195e4:	e018      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80195e6:	2301      	movs	r3, #1
 80195e8:	73fb      	strb	r3, [r7, #15]
        break;
 80195ea:	e015      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80195f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	d00e      	beq.n	8019616 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80195f8:	2301      	movs	r3, #1
 80195fa:	73fb      	strb	r3, [r7, #15]
    break;
 80195fc:	e00b      	b.n	8019616 <DMA_CheckFifoParam+0xe6>
        break;
 80195fe:	bf00      	nop
 8019600:	e00a      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 8019602:	bf00      	nop
 8019604:	e008      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 8019606:	bf00      	nop
 8019608:	e006      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 801960a:	bf00      	nop
 801960c:	e004      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 801960e:	bf00      	nop
 8019610:	e002      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
        break;
 8019612:	bf00      	nop
 8019614:	e000      	b.n	8019618 <DMA_CheckFifoParam+0xe8>
    break;
 8019616:	bf00      	nop
    }
  }

  return status;
 8019618:	7bfb      	ldrb	r3, [r7, #15]
}
 801961a:	4618      	mov	r0, r3
 801961c:	3714      	adds	r7, #20
 801961e:	46bd      	mov	sp, r7
 8019620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019624:	4770      	bx	lr
 8019626:	bf00      	nop

08019628 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8019628:	b480      	push	{r7}
 801962a:	b085      	sub	sp, #20
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	681b      	ldr	r3, [r3, #0]
 8019634:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	681b      	ldr	r3, [r3, #0]
 801963a:	4a38      	ldr	r2, [pc, #224]	; (801971c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801963c:	4293      	cmp	r3, r2
 801963e:	d022      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019640:	687b      	ldr	r3, [r7, #4]
 8019642:	681b      	ldr	r3, [r3, #0]
 8019644:	4a36      	ldr	r2, [pc, #216]	; (8019720 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8019646:	4293      	cmp	r3, r2
 8019648:	d01d      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	4a35      	ldr	r2, [pc, #212]	; (8019724 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8019650:	4293      	cmp	r3, r2
 8019652:	d018      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019654:	687b      	ldr	r3, [r7, #4]
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	4a33      	ldr	r2, [pc, #204]	; (8019728 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801965a:	4293      	cmp	r3, r2
 801965c:	d013      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801965e:	687b      	ldr	r3, [r7, #4]
 8019660:	681b      	ldr	r3, [r3, #0]
 8019662:	4a32      	ldr	r2, [pc, #200]	; (801972c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8019664:	4293      	cmp	r3, r2
 8019666:	d00e      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	681b      	ldr	r3, [r3, #0]
 801966c:	4a30      	ldr	r2, [pc, #192]	; (8019730 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801966e:	4293      	cmp	r3, r2
 8019670:	d009      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	681b      	ldr	r3, [r3, #0]
 8019676:	4a2f      	ldr	r2, [pc, #188]	; (8019734 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8019678:	4293      	cmp	r3, r2
 801967a:	d004      	beq.n	8019686 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	4a2d      	ldr	r2, [pc, #180]	; (8019738 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8019682:	4293      	cmp	r3, r2
 8019684:	d101      	bne.n	801968a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8019686:	2301      	movs	r3, #1
 8019688:	e000      	b.n	801968c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801968a:	2300      	movs	r3, #0
 801968c:	2b00      	cmp	r3, #0
 801968e:	d01a      	beq.n	80196c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	681b      	ldr	r3, [r3, #0]
 8019694:	b2db      	uxtb	r3, r3
 8019696:	3b08      	subs	r3, #8
 8019698:	4a28      	ldr	r2, [pc, #160]	; (801973c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801969a:	fba2 2303 	umull	r2, r3, r2, r3
 801969e:	091b      	lsrs	r3, r3, #4
 80196a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80196a2:	68fa      	ldr	r2, [r7, #12]
 80196a4:	4b26      	ldr	r3, [pc, #152]	; (8019740 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80196a6:	4413      	add	r3, r2
 80196a8:	009b      	lsls	r3, r3, #2
 80196aa:	461a      	mov	r2, r3
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	4a24      	ldr	r2, [pc, #144]	; (8019744 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80196b4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80196b6:	68fb      	ldr	r3, [r7, #12]
 80196b8:	f003 031f 	and.w	r3, r3, #31
 80196bc:	2201      	movs	r2, #1
 80196be:	409a      	lsls	r2, r3
 80196c0:	687b      	ldr	r3, [r7, #4]
 80196c2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80196c4:	e024      	b.n	8019710 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80196c6:	687b      	ldr	r3, [r7, #4]
 80196c8:	681b      	ldr	r3, [r3, #0]
 80196ca:	b2db      	uxtb	r3, r3
 80196cc:	3b10      	subs	r3, #16
 80196ce:	4a1e      	ldr	r2, [pc, #120]	; (8019748 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80196d0:	fba2 2303 	umull	r2, r3, r2, r3
 80196d4:	091b      	lsrs	r3, r3, #4
 80196d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80196d8:	68bb      	ldr	r3, [r7, #8]
 80196da:	4a1c      	ldr	r2, [pc, #112]	; (801974c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80196dc:	4293      	cmp	r3, r2
 80196de:	d806      	bhi.n	80196ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80196e0:	68bb      	ldr	r3, [r7, #8]
 80196e2:	4a1b      	ldr	r2, [pc, #108]	; (8019750 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80196e4:	4293      	cmp	r3, r2
 80196e6:	d902      	bls.n	80196ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80196e8:	68fb      	ldr	r3, [r7, #12]
 80196ea:	3308      	adds	r3, #8
 80196ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80196ee:	68fa      	ldr	r2, [r7, #12]
 80196f0:	4b18      	ldr	r3, [pc, #96]	; (8019754 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80196f2:	4413      	add	r3, r2
 80196f4:	009b      	lsls	r3, r3, #2
 80196f6:	461a      	mov	r2, r3
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	4a16      	ldr	r2, [pc, #88]	; (8019758 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8019700:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8019702:	68fb      	ldr	r3, [r7, #12]
 8019704:	f003 031f 	and.w	r3, r3, #31
 8019708:	2201      	movs	r2, #1
 801970a:	409a      	lsls	r2, r3
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8019710:	bf00      	nop
 8019712:	3714      	adds	r7, #20
 8019714:	46bd      	mov	sp, r7
 8019716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971a:	4770      	bx	lr
 801971c:	58025408 	.word	0x58025408
 8019720:	5802541c 	.word	0x5802541c
 8019724:	58025430 	.word	0x58025430
 8019728:	58025444 	.word	0x58025444
 801972c:	58025458 	.word	0x58025458
 8019730:	5802546c 	.word	0x5802546c
 8019734:	58025480 	.word	0x58025480
 8019738:	58025494 	.word	0x58025494
 801973c:	cccccccd 	.word	0xcccccccd
 8019740:	16009600 	.word	0x16009600
 8019744:	58025880 	.word	0x58025880
 8019748:	aaaaaaab 	.word	0xaaaaaaab
 801974c:	400204b8 	.word	0x400204b8
 8019750:	4002040f 	.word	0x4002040f
 8019754:	10008200 	.word	0x10008200
 8019758:	40020880 	.word	0x40020880

0801975c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801975c:	b480      	push	{r7}
 801975e:	b085      	sub	sp, #20
 8019760:	af00      	add	r7, sp, #0
 8019762:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	685b      	ldr	r3, [r3, #4]
 8019768:	b2db      	uxtb	r3, r3
 801976a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801976c:	68fb      	ldr	r3, [r7, #12]
 801976e:	2b00      	cmp	r3, #0
 8019770:	d04a      	beq.n	8019808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8019772:	68fb      	ldr	r3, [r7, #12]
 8019774:	2b08      	cmp	r3, #8
 8019776:	d847      	bhi.n	8019808 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	4a25      	ldr	r2, [pc, #148]	; (8019814 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801977e:	4293      	cmp	r3, r2
 8019780:	d022      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019782:	687b      	ldr	r3, [r7, #4]
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	4a24      	ldr	r2, [pc, #144]	; (8019818 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8019788:	4293      	cmp	r3, r2
 801978a:	d01d      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	4a22      	ldr	r2, [pc, #136]	; (801981c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8019792:	4293      	cmp	r3, r2
 8019794:	d018      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	681b      	ldr	r3, [r3, #0]
 801979a:	4a21      	ldr	r2, [pc, #132]	; (8019820 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801979c:	4293      	cmp	r3, r2
 801979e:	d013      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80197a0:	687b      	ldr	r3, [r7, #4]
 80197a2:	681b      	ldr	r3, [r3, #0]
 80197a4:	4a1f      	ldr	r2, [pc, #124]	; (8019824 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80197a6:	4293      	cmp	r3, r2
 80197a8:	d00e      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	4a1e      	ldr	r2, [pc, #120]	; (8019828 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80197b0:	4293      	cmp	r3, r2
 80197b2:	d009      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	4a1c      	ldr	r2, [pc, #112]	; (801982c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80197ba:	4293      	cmp	r3, r2
 80197bc:	d004      	beq.n	80197c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	681b      	ldr	r3, [r3, #0]
 80197c2:	4a1b      	ldr	r2, [pc, #108]	; (8019830 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80197c4:	4293      	cmp	r3, r2
 80197c6:	d101      	bne.n	80197cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80197c8:	2301      	movs	r3, #1
 80197ca:	e000      	b.n	80197ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80197cc:	2300      	movs	r3, #0
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d00a      	beq.n	80197e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80197d2:	68fa      	ldr	r2, [r7, #12]
 80197d4:	4b17      	ldr	r3, [pc, #92]	; (8019834 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80197d6:	4413      	add	r3, r2
 80197d8:	009b      	lsls	r3, r3, #2
 80197da:	461a      	mov	r2, r3
 80197dc:	687b      	ldr	r3, [r7, #4]
 80197de:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	4a15      	ldr	r2, [pc, #84]	; (8019838 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80197e4:	671a      	str	r2, [r3, #112]	; 0x70
 80197e6:	e009      	b.n	80197fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80197e8:	68fa      	ldr	r2, [r7, #12]
 80197ea:	4b14      	ldr	r3, [pc, #80]	; (801983c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80197ec:	4413      	add	r3, r2
 80197ee:	009b      	lsls	r3, r3, #2
 80197f0:	461a      	mov	r2, r3
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80197f6:	687b      	ldr	r3, [r7, #4]
 80197f8:	4a11      	ldr	r2, [pc, #68]	; (8019840 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80197fa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80197fc:	68fb      	ldr	r3, [r7, #12]
 80197fe:	3b01      	subs	r3, #1
 8019800:	2201      	movs	r2, #1
 8019802:	409a      	lsls	r2, r3
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8019808:	bf00      	nop
 801980a:	3714      	adds	r7, #20
 801980c:	46bd      	mov	sp, r7
 801980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019812:	4770      	bx	lr
 8019814:	58025408 	.word	0x58025408
 8019818:	5802541c 	.word	0x5802541c
 801981c:	58025430 	.word	0x58025430
 8019820:	58025444 	.word	0x58025444
 8019824:	58025458 	.word	0x58025458
 8019828:	5802546c 	.word	0x5802546c
 801982c:	58025480 	.word	0x58025480
 8019830:	58025494 	.word	0x58025494
 8019834:	1600963f 	.word	0x1600963f
 8019838:	58025940 	.word	0x58025940
 801983c:	1000823f 	.word	0x1000823f
 8019840:	40020940 	.word	0x40020940

08019844 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8019844:	b580      	push	{r7, lr}
 8019846:	b098      	sub	sp, #96	; 0x60
 8019848:	af00      	add	r7, sp, #0
 801984a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 801984c:	4a84      	ldr	r2, [pc, #528]	; (8019a60 <HAL_FDCAN_Init+0x21c>)
 801984e:	f107 030c 	add.w	r3, r7, #12
 8019852:	4611      	mov	r1, r2
 8019854:	224c      	movs	r2, #76	; 0x4c
 8019856:	4618      	mov	r0, r3
 8019858:	f006 ffa4 	bl	80207a4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	2b00      	cmp	r3, #0
 8019860:	d101      	bne.n	8019866 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8019862:	2301      	movs	r3, #1
 8019864:	e1c6      	b.n	8019bf4 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	681b      	ldr	r3, [r3, #0]
 801986a:	4a7e      	ldr	r2, [pc, #504]	; (8019a64 <HAL_FDCAN_Init+0x220>)
 801986c:	4293      	cmp	r3, r2
 801986e:	d106      	bne.n	801987e <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019878:	461a      	mov	r2, r3
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019884:	b2db      	uxtb	r3, r3
 8019886:	2b00      	cmp	r3, #0
 8019888:	d106      	bne.n	8019898 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2200      	movs	r2, #0
 801988e:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8019892:	6878      	ldr	r0, [r7, #4]
 8019894:	f7fa feda 	bl	801464c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	681b      	ldr	r3, [r3, #0]
 801989c:	699a      	ldr	r2, [r3, #24]
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	f022 0210 	bic.w	r2, r2, #16
 80198a6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80198a8:	f7fb fd26 	bl	80152f8 <HAL_GetTick>
 80198ac:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80198ae:	e014      	b.n	80198da <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80198b0:	f7fb fd22 	bl	80152f8 <HAL_GetTick>
 80198b4:	4602      	mov	r2, r0
 80198b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80198b8:	1ad3      	subs	r3, r2, r3
 80198ba:	2b0a      	cmp	r3, #10
 80198bc:	d90d      	bls.n	80198da <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80198be:	687b      	ldr	r3, [r7, #4]
 80198c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80198c4:	f043 0201 	orr.w	r2, r3, #1
 80198c8:	687b      	ldr	r3, [r7, #4]
 80198ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	2203      	movs	r2, #3
 80198d2:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80198d6:	2301      	movs	r3, #1
 80198d8:	e18c      	b.n	8019bf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	699b      	ldr	r3, [r3, #24]
 80198e0:	f003 0308 	and.w	r3, r3, #8
 80198e4:	2b08      	cmp	r3, #8
 80198e6:	d0e3      	beq.n	80198b0 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	699a      	ldr	r2, [r3, #24]
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	f042 0201 	orr.w	r2, r2, #1
 80198f6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80198f8:	f7fb fcfe 	bl	80152f8 <HAL_GetTick>
 80198fc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80198fe:	e014      	b.n	801992a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8019900:	f7fb fcfa 	bl	80152f8 <HAL_GetTick>
 8019904:	4602      	mov	r2, r0
 8019906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019908:	1ad3      	subs	r3, r2, r3
 801990a:	2b0a      	cmp	r3, #10
 801990c:	d90d      	bls.n	801992a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019914:	f043 0201 	orr.w	r2, r3, #1
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801991e:	687b      	ldr	r3, [r7, #4]
 8019920:	2203      	movs	r2, #3
 8019922:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8019926:	2301      	movs	r3, #1
 8019928:	e164      	b.n	8019bf4 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 801992a:	687b      	ldr	r3, [r7, #4]
 801992c:	681b      	ldr	r3, [r3, #0]
 801992e:	699b      	ldr	r3, [r3, #24]
 8019930:	f003 0301 	and.w	r3, r3, #1
 8019934:	2b00      	cmp	r3, #0
 8019936:	d0e3      	beq.n	8019900 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	699a      	ldr	r2, [r3, #24]
 801993e:	687b      	ldr	r3, [r7, #4]
 8019940:	681b      	ldr	r3, [r3, #0]
 8019942:	f042 0202 	orr.w	r2, r2, #2
 8019946:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8019948:	687b      	ldr	r3, [r7, #4]
 801994a:	7c1b      	ldrb	r3, [r3, #16]
 801994c:	2b01      	cmp	r3, #1
 801994e:	d108      	bne.n	8019962 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8019950:	687b      	ldr	r3, [r7, #4]
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	699a      	ldr	r2, [r3, #24]
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801995e:	619a      	str	r2, [r3, #24]
 8019960:	e007      	b.n	8019972 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	699a      	ldr	r2, [r3, #24]
 8019968:	687b      	ldr	r3, [r7, #4]
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019970:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8019972:	687b      	ldr	r3, [r7, #4]
 8019974:	7c5b      	ldrb	r3, [r3, #17]
 8019976:	2b01      	cmp	r3, #1
 8019978:	d108      	bne.n	801998c <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 801997a:	687b      	ldr	r3, [r7, #4]
 801997c:	681b      	ldr	r3, [r3, #0]
 801997e:	699a      	ldr	r2, [r3, #24]
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019988:	619a      	str	r2, [r3, #24]
 801998a:	e007      	b.n	801999c <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	699a      	ldr	r2, [r3, #24]
 8019992:	687b      	ldr	r3, [r7, #4]
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801999a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	7c9b      	ldrb	r3, [r3, #18]
 80199a0:	2b01      	cmp	r3, #1
 80199a2:	d108      	bne.n	80199b6 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	699a      	ldr	r2, [r3, #24]
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80199b2:	619a      	str	r2, [r3, #24]
 80199b4:	e007      	b.n	80199c6 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80199b6:	687b      	ldr	r3, [r7, #4]
 80199b8:	681b      	ldr	r3, [r3, #0]
 80199ba:	699a      	ldr	r2, [r3, #24]
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80199c4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	699b      	ldr	r3, [r3, #24]
 80199cc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	689a      	ldr	r2, [r3, #8]
 80199d4:	687b      	ldr	r3, [r7, #4]
 80199d6:	681b      	ldr	r3, [r3, #0]
 80199d8:	430a      	orrs	r2, r1
 80199da:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	681b      	ldr	r3, [r3, #0]
 80199e0:	699a      	ldr	r2, [r3, #24]
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	681b      	ldr	r3, [r3, #0]
 80199e6:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80199ea:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80199ec:	687b      	ldr	r3, [r7, #4]
 80199ee:	681b      	ldr	r3, [r3, #0]
 80199f0:	691a      	ldr	r2, [r3, #16]
 80199f2:	687b      	ldr	r3, [r7, #4]
 80199f4:	681b      	ldr	r3, [r3, #0]
 80199f6:	f022 0210 	bic.w	r2, r2, #16
 80199fa:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	68db      	ldr	r3, [r3, #12]
 8019a00:	2b01      	cmp	r3, #1
 8019a02:	d108      	bne.n	8019a16 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	681b      	ldr	r3, [r3, #0]
 8019a08:	699a      	ldr	r2, [r3, #24]
 8019a0a:	687b      	ldr	r3, [r7, #4]
 8019a0c:	681b      	ldr	r3, [r3, #0]
 8019a0e:	f042 0204 	orr.w	r2, r2, #4
 8019a12:	619a      	str	r2, [r3, #24]
 8019a14:	e030      	b.n	8019a78 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	68db      	ldr	r3, [r3, #12]
 8019a1a:	2b00      	cmp	r3, #0
 8019a1c:	d02c      	beq.n	8019a78 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8019a1e:	687b      	ldr	r3, [r7, #4]
 8019a20:	68db      	ldr	r3, [r3, #12]
 8019a22:	2b02      	cmp	r3, #2
 8019a24:	d020      	beq.n	8019a68 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	699a      	ldr	r2, [r3, #24]
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	681b      	ldr	r3, [r3, #0]
 8019a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8019a34:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	681b      	ldr	r3, [r3, #0]
 8019a3a:	691a      	ldr	r2, [r3, #16]
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	681b      	ldr	r3, [r3, #0]
 8019a40:	f042 0210 	orr.w	r2, r2, #16
 8019a44:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	68db      	ldr	r3, [r3, #12]
 8019a4a:	2b03      	cmp	r3, #3
 8019a4c:	d114      	bne.n	8019a78 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	699a      	ldr	r2, [r3, #24]
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	681b      	ldr	r3, [r3, #0]
 8019a58:	f042 0220 	orr.w	r2, r2, #32
 8019a5c:	619a      	str	r2, [r3, #24]
 8019a5e:	e00b      	b.n	8019a78 <HAL_FDCAN_Init+0x234>
 8019a60:	08020c70 	.word	0x08020c70
 8019a64:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	681b      	ldr	r3, [r3, #0]
 8019a6c:	699a      	ldr	r2, [r3, #24]
 8019a6e:	687b      	ldr	r3, [r7, #4]
 8019a70:	681b      	ldr	r3, [r3, #0]
 8019a72:	f042 0220 	orr.w	r2, r2, #32
 8019a76:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a78:	687b      	ldr	r3, [r7, #4]
 8019a7a:	699b      	ldr	r3, [r3, #24]
 8019a7c:	3b01      	subs	r3, #1
 8019a7e:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	69db      	ldr	r3, [r3, #28]
 8019a84:	3b01      	subs	r3, #1
 8019a86:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a88:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019a8a:	687b      	ldr	r3, [r7, #4]
 8019a8c:	6a1b      	ldr	r3, [r3, #32]
 8019a8e:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8019a90:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	695b      	ldr	r3, [r3, #20]
 8019a98:	3b01      	subs	r3, #1
 8019a9a:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019a9c:	687b      	ldr	r3, [r7, #4]
 8019a9e:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8019aa0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8019aa2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	689b      	ldr	r3, [r3, #8]
 8019aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019aac:	d115      	bne.n	8019ada <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ab2:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ab8:	3b01      	subs	r3, #1
 8019aba:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019abc:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019ac2:	3b01      	subs	r3, #1
 8019ac4:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8019ac6:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ace:	3b01      	subs	r3, #1
 8019ad0:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8019ad6:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8019ad8:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019ade:	2b00      	cmp	r3, #0
 8019ae0:	d00a      	beq.n	8019af8 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8019ae2:	687b      	ldr	r3, [r7, #4]
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	430a      	orrs	r2, r1
 8019af4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019b00:	4413      	add	r3, r2
 8019b02:	2b00      	cmp	r3, #0
 8019b04:	d011      	beq.n	8019b2a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8019b06:	687b      	ldr	r3, [r7, #4]
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8019b0e:	f023 0107 	bic.w	r1, r3, #7
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019b16:	009b      	lsls	r3, r3, #2
 8019b18:	3360      	adds	r3, #96	; 0x60
 8019b1a:	443b      	add	r3, r7
 8019b1c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	681b      	ldr	r3, [r3, #0]
 8019b24:	430a      	orrs	r2, r1
 8019b26:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d011      	beq.n	8019b56 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019b3a:	f023 0107 	bic.w	r1, r3, #7
 8019b3e:	687b      	ldr	r3, [r7, #4]
 8019b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b42:	009b      	lsls	r3, r3, #2
 8019b44:	3360      	adds	r3, #96	; 0x60
 8019b46:	443b      	add	r3, r7
 8019b48:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8019b4c:	687b      	ldr	r3, [r7, #4]
 8019b4e:	681b      	ldr	r3, [r3, #0]
 8019b50:	430a      	orrs	r2, r1
 8019b52:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b5a:	2b00      	cmp	r3, #0
 8019b5c:	d012      	beq.n	8019b84 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019b66:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b6e:	009b      	lsls	r3, r3, #2
 8019b70:	3360      	adds	r3, #96	; 0x60
 8019b72:	443b      	add	r3, r7
 8019b74:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019b78:	011a      	lsls	r2, r3, #4
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	681b      	ldr	r3, [r3, #0]
 8019b7e:	430a      	orrs	r2, r1
 8019b80:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8019b84:	687b      	ldr	r3, [r7, #4]
 8019b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b88:	2b00      	cmp	r3, #0
 8019b8a:	d012      	beq.n	8019bb2 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8019b8c:	687b      	ldr	r3, [r7, #4]
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8019b94:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b9c:	009b      	lsls	r3, r3, #2
 8019b9e:	3360      	adds	r3, #96	; 0x60
 8019ba0:	443b      	add	r3, r7
 8019ba2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8019ba6:	021a      	lsls	r2, r3, #8
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	430a      	orrs	r2, r1
 8019bae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	4a11      	ldr	r2, [pc, #68]	; (8019bfc <HAL_FDCAN_Init+0x3b8>)
 8019bb8:	4293      	cmp	r3, r2
 8019bba:	d107      	bne.n	8019bcc <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	685b      	ldr	r3, [r3, #4]
 8019bc0:	689a      	ldr	r2, [r3, #8]
 8019bc2:	687b      	ldr	r3, [r7, #4]
 8019bc4:	685b      	ldr	r3, [r3, #4]
 8019bc6:	f022 0203 	bic.w	r2, r2, #3
 8019bca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8019bcc:	687b      	ldr	r3, [r7, #4]
 8019bce:	2200      	movs	r2, #0
 8019bd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019bd4:	687b      	ldr	r3, [r7, #4]
 8019bd6:	2200      	movs	r2, #0
 8019bd8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2201      	movs	r2, #1
 8019be0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8019be4:	6878      	ldr	r0, [r7, #4]
 8019be6:	f000 fd83 	bl	801a6f0 <FDCAN_CalcultateRamBlockAddresses>
 8019bea:	4603      	mov	r3, r0
 8019bec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8019bf0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	3760      	adds	r7, #96	; 0x60
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}
 8019bfc:	4000a000 	.word	0x4000a000

08019c00 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8019c00:	b480      	push	{r7}
 8019c02:	b083      	sub	sp, #12
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8019c08:	687b      	ldr	r3, [r7, #4]
 8019c0a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019c0e:	b2db      	uxtb	r3, r3
 8019c10:	2b01      	cmp	r3, #1
 8019c12:	d111      	bne.n	8019c38 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	2202      	movs	r2, #2
 8019c18:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8019c1c:	687b      	ldr	r3, [r7, #4]
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	699a      	ldr	r2, [r3, #24]
 8019c22:	687b      	ldr	r3, [r7, #4]
 8019c24:	681b      	ldr	r3, [r3, #0]
 8019c26:	f022 0201 	bic.w	r2, r2, #1
 8019c2a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8019c2c:	687b      	ldr	r3, [r7, #4]
 8019c2e:	2200      	movs	r2, #0
 8019c30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8019c34:	2300      	movs	r3, #0
 8019c36:	e008      	b.n	8019c4a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c3e:	f043 0204 	orr.w	r2, r3, #4
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019c48:	2301      	movs	r3, #1
  }
}
 8019c4a:	4618      	mov	r0, r3
 8019c4c:	370c      	adds	r7, #12
 8019c4e:	46bd      	mov	sp, r7
 8019c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c54:	4770      	bx	lr

08019c56 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8019c56:	b580      	push	{r7, lr}
 8019c58:	b086      	sub	sp, #24
 8019c5a:	af00      	add	r7, sp, #0
 8019c5c:	60f8      	str	r0, [r7, #12]
 8019c5e:	60b9      	str	r1, [r7, #8]
 8019c60:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8019c62:	68fb      	ldr	r3, [r7, #12]
 8019c64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019c68:	b2db      	uxtb	r3, r3
 8019c6a:	2b02      	cmp	r3, #2
 8019c6c:	d141      	bne.n	8019cf2 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8019c6e:	68fb      	ldr	r3, [r7, #12]
 8019c70:	681b      	ldr	r3, [r3, #0]
 8019c72:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8019c76:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8019c7a:	2b00      	cmp	r3, #0
 8019c7c:	d109      	bne.n	8019c92 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019c7e:	68fb      	ldr	r3, [r7, #12]
 8019c80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019c84:	f043 0220 	orr.w	r2, r3, #32
 8019c88:	68fb      	ldr	r3, [r7, #12]
 8019c8a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019c8e:	2301      	movs	r3, #1
 8019c90:	e038      	b.n	8019d04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8019c92:	68fb      	ldr	r3, [r7, #12]
 8019c94:	681b      	ldr	r3, [r3, #0]
 8019c96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019c9e:	2b00      	cmp	r3, #0
 8019ca0:	d009      	beq.n	8019cb6 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8019ca2:	68fb      	ldr	r3, [r7, #12]
 8019ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019ca8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8019cb2:	2301      	movs	r3, #1
 8019cb4:	e026      	b.n	8019d04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8019cb6:	68fb      	ldr	r3, [r7, #12]
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8019cbe:	0c1b      	lsrs	r3, r3, #16
 8019cc0:	f003 031f 	and.w	r3, r3, #31
 8019cc4:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	687a      	ldr	r2, [r7, #4]
 8019cca:	68b9      	ldr	r1, [r7, #8]
 8019ccc:	68f8      	ldr	r0, [r7, #12]
 8019cce:	f000 fe95 	bl	801a9fc <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8019cd2:	68fb      	ldr	r3, [r7, #12]
 8019cd4:	681b      	ldr	r3, [r3, #0]
 8019cd6:	2101      	movs	r1, #1
 8019cd8:	697a      	ldr	r2, [r7, #20]
 8019cda:	fa01 f202 	lsl.w	r2, r1, r2
 8019cde:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8019ce2:	2201      	movs	r2, #1
 8019ce4:	697b      	ldr	r3, [r7, #20]
 8019ce6:	409a      	lsls	r2, r3
 8019ce8:	68fb      	ldr	r3, [r7, #12]
 8019cea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8019cee:	2300      	movs	r3, #0
 8019cf0:	e008      	b.n	8019d04 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019cf2:	68fb      	ldr	r3, [r7, #12]
 8019cf4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019cf8:	f043 0208 	orr.w	r2, r3, #8
 8019cfc:	68fb      	ldr	r3, [r7, #12]
 8019cfe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019d02:	2301      	movs	r3, #1
  }
}
 8019d04:	4618      	mov	r0, r3
 8019d06:	3718      	adds	r7, #24
 8019d08:	46bd      	mov	sp, r7
 8019d0a:	bd80      	pop	{r7, pc}

08019d0c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8019d0c:	b480      	push	{r7}
 8019d0e:	b08b      	sub	sp, #44	; 0x2c
 8019d10:	af00      	add	r7, sp, #0
 8019d12:	60f8      	str	r0, [r7, #12]
 8019d14:	60b9      	str	r1, [r7, #8]
 8019d16:	607a      	str	r2, [r7, #4]
 8019d18:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8019d1a:	2300      	movs	r3, #0
 8019d1c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019d1e:	68fb      	ldr	r3, [r7, #12]
 8019d20:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019d24:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8019d26:	7efb      	ldrb	r3, [r7, #27]
 8019d28:	2b02      	cmp	r3, #2
 8019d2a:	f040 814b 	bne.w	8019fc4 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019d2e:	68bb      	ldr	r3, [r7, #8]
 8019d30:	2b40      	cmp	r3, #64	; 0x40
 8019d32:	d14d      	bne.n	8019dd0 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019d3c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d109      	bne.n	8019d58 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019d44:	68fb      	ldr	r3, [r7, #12]
 8019d46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d4a:	f043 0220 	orr.w	r2, r3, #32
 8019d4e:	68fb      	ldr	r3, [r7, #12]
 8019d50:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019d54:	2301      	movs	r3, #1
 8019d56:	e13e      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8019d58:	68fb      	ldr	r3, [r7, #12]
 8019d5a:	681b      	ldr	r3, [r3, #0]
 8019d5c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d109      	bne.n	8019d7c <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019d68:	68fb      	ldr	r3, [r7, #12]
 8019d6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019d6e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019d72:	68fb      	ldr	r3, [r7, #12]
 8019d74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019d78:	2301      	movs	r3, #1
 8019d7a:	e12c      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8019d7c:	68fb      	ldr	r3, [r7, #12]
 8019d7e:	681b      	ldr	r3, [r3, #0]
 8019d80:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019d84:	0e1b      	lsrs	r3, r3, #24
 8019d86:	f003 0301 	and.w	r3, r3, #1
 8019d8a:	2b01      	cmp	r3, #1
 8019d8c:	d10b      	bne.n	8019da6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019d8e:	68fb      	ldr	r3, [r7, #12]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8019d96:	0fdb      	lsrs	r3, r3, #31
 8019d98:	f003 0301 	and.w	r3, r3, #1
 8019d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019da0:	d101      	bne.n	8019da6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019da2:	2301      	movs	r3, #1
 8019da4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8019da6:	68fb      	ldr	r3, [r7, #12]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8019dae:	0a1b      	lsrs	r3, r3, #8
 8019db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019db4:	69fa      	ldr	r2, [r7, #28]
 8019db6:	4413      	add	r3, r2
 8019db8:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019dc2:	69f9      	ldr	r1, [r7, #28]
 8019dc4:	fb01 f303 	mul.w	r3, r1, r3
 8019dc8:	009b      	lsls	r3, r3, #2
 8019dca:	4413      	add	r3, r2
 8019dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8019dce:	e069      	b.n	8019ea4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019dd0:	68bb      	ldr	r3, [r7, #8]
 8019dd2:	2b41      	cmp	r3, #65	; 0x41
 8019dd4:	d14d      	bne.n	8019e72 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8019dd6:	68fb      	ldr	r3, [r7, #12]
 8019dd8:	681b      	ldr	r3, [r3, #0]
 8019dda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019dde:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8019de2:	2b00      	cmp	r3, #0
 8019de4:	d109      	bne.n	8019dfa <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019de6:	68fb      	ldr	r3, [r7, #12]
 8019de8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019dec:	f043 0220 	orr.w	r2, r3, #32
 8019df0:	68fb      	ldr	r3, [r7, #12]
 8019df2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019df6:	2301      	movs	r3, #1
 8019df8:	e0ed      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	681b      	ldr	r3, [r3, #0]
 8019dfe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019e02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	d109      	bne.n	8019e1e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019e1a:	2301      	movs	r3, #1
 8019e1c:	e0db      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8019e1e:	68fb      	ldr	r3, [r7, #12]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019e26:	0e1b      	lsrs	r3, r3, #24
 8019e28:	f003 0301 	and.w	r3, r3, #1
 8019e2c:	2b01      	cmp	r3, #1
 8019e2e:	d10b      	bne.n	8019e48 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8019e38:	0fdb      	lsrs	r3, r3, #31
 8019e3a:	f003 0301 	and.w	r3, r3, #1
 8019e3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8019e42:	d101      	bne.n	8019e48 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8019e44:	2301      	movs	r3, #1
 8019e46:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	681b      	ldr	r3, [r3, #0]
 8019e4c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8019e50:	0a1b      	lsrs	r3, r3, #8
 8019e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e56:	69fa      	ldr	r2, [r7, #28]
 8019e58:	4413      	add	r3, r2
 8019e5a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8019e60:	68fb      	ldr	r3, [r7, #12]
 8019e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019e64:	69f9      	ldr	r1, [r7, #28]
 8019e66:	fb01 f303 	mul.w	r3, r1, r3
 8019e6a:	009b      	lsls	r3, r3, #2
 8019e6c:	4413      	add	r3, r2
 8019e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8019e70:	e018      	b.n	8019ea4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8019e72:	68fb      	ldr	r3, [r7, #12]
 8019e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019e76:	68ba      	ldr	r2, [r7, #8]
 8019e78:	429a      	cmp	r2, r3
 8019e7a:	d309      	bcc.n	8019e90 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019e82:	f043 0220 	orr.w	r2, r3, #32
 8019e86:	68fb      	ldr	r3, [r7, #12]
 8019e88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	e0a2      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8019e90:	68fb      	ldr	r3, [r7, #12]
 8019e92:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8019e94:	68fb      	ldr	r3, [r7, #12]
 8019e96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e98:	68b9      	ldr	r1, [r7, #8]
 8019e9a:	fb01 f303 	mul.w	r3, r1, r3
 8019e9e:	009b      	lsls	r3, r3, #2
 8019ea0:	4413      	add	r3, r2
 8019ea2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8019ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8019eac:	687b      	ldr	r3, [r7, #4]
 8019eae:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8019eb0:	687b      	ldr	r3, [r7, #4]
 8019eb2:	685b      	ldr	r3, [r3, #4]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d107      	bne.n	8019ec8 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8019eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eba:	681b      	ldr	r3, [r3, #0]
 8019ebc:	0c9b      	lsrs	r3, r3, #18
 8019ebe:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8019ec2:	687b      	ldr	r3, [r7, #4]
 8019ec4:	601a      	str	r2, [r3, #0]
 8019ec6:	e005      	b.n	8019ed4 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8019ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8019ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed6:	681b      	ldr	r3, [r3, #0]
 8019ed8:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8019ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ee2:	681b      	ldr	r3, [r3, #0]
 8019ee4:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8019ee8:	687b      	ldr	r3, [r7, #4]
 8019eea:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8019eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eee:	3304      	adds	r3, #4
 8019ef0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8019ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef4:	681b      	ldr	r3, [r3, #0]
 8019ef6:	b29a      	uxth	r2, r3
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8019efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019efe:	681b      	ldr	r3, [r3, #0]
 8019f00:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8019f04:	687b      	ldr	r3, [r7, #4]
 8019f06:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8019f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8019f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f16:	681b      	ldr	r3, [r3, #0]
 8019f18:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8019f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f22:	681b      	ldr	r3, [r3, #0]
 8019f24:	0e1b      	lsrs	r3, r3, #24
 8019f26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8019f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f30:	681b      	ldr	r3, [r3, #0]
 8019f32:	0fda      	lsrs	r2, r3, #31
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8019f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f3a:	3304      	adds	r3, #4
 8019f3c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8019f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f40:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019f42:	2300      	movs	r3, #0
 8019f44:	623b      	str	r3, [r7, #32]
 8019f46:	e00a      	b.n	8019f5e <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8019f48:	697a      	ldr	r2, [r7, #20]
 8019f4a:	6a3b      	ldr	r3, [r7, #32]
 8019f4c:	441a      	add	r2, r3
 8019f4e:	6839      	ldr	r1, [r7, #0]
 8019f50:	6a3b      	ldr	r3, [r7, #32]
 8019f52:	440b      	add	r3, r1
 8019f54:	7812      	ldrb	r2, [r2, #0]
 8019f56:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8019f58:	6a3b      	ldr	r3, [r7, #32]
 8019f5a:	3301      	adds	r3, #1
 8019f5c:	623b      	str	r3, [r7, #32]
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	68db      	ldr	r3, [r3, #12]
 8019f62:	0c1b      	lsrs	r3, r3, #16
 8019f64:	4a1f      	ldr	r2, [pc, #124]	; (8019fe4 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8019f66:	5cd3      	ldrb	r3, [r2, r3]
 8019f68:	461a      	mov	r2, r3
 8019f6a:	6a3b      	ldr	r3, [r7, #32]
 8019f6c:	4293      	cmp	r3, r2
 8019f6e:	d3eb      	bcc.n	8019f48 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8019f70:	68bb      	ldr	r3, [r7, #8]
 8019f72:	2b40      	cmp	r3, #64	; 0x40
 8019f74:	d105      	bne.n	8019f82 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8019f76:	68fb      	ldr	r3, [r7, #12]
 8019f78:	681b      	ldr	r3, [r3, #0]
 8019f7a:	69fa      	ldr	r2, [r7, #28]
 8019f7c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8019f80:	e01e      	b.n	8019fc0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8019f82:	68bb      	ldr	r3, [r7, #8]
 8019f84:	2b41      	cmp	r3, #65	; 0x41
 8019f86:	d105      	bne.n	8019f94 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8019f88:	68fb      	ldr	r3, [r7, #12]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	69fa      	ldr	r2, [r7, #28]
 8019f8e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8019f92:	e015      	b.n	8019fc0 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8019f94:	68bb      	ldr	r3, [r7, #8]
 8019f96:	2b1f      	cmp	r3, #31
 8019f98:	d808      	bhi.n	8019fac <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8019f9a:	68fb      	ldr	r3, [r7, #12]
 8019f9c:	681b      	ldr	r3, [r3, #0]
 8019f9e:	2101      	movs	r1, #1
 8019fa0:	68ba      	ldr	r2, [r7, #8]
 8019fa2:	fa01 f202 	lsl.w	r2, r1, r2
 8019fa6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8019faa:	e009      	b.n	8019fc0 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8019fac:	68bb      	ldr	r3, [r7, #8]
 8019fae:	f003 021f 	and.w	r2, r3, #31
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	681b      	ldr	r3, [r3, #0]
 8019fb6:	2101      	movs	r1, #1
 8019fb8:	fa01 f202 	lsl.w	r2, r1, r2
 8019fbc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8019fc0:	2300      	movs	r3, #0
 8019fc2:	e008      	b.n	8019fd6 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8019fc4:	68fb      	ldr	r3, [r7, #12]
 8019fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8019fca:	f043 0208 	orr.w	r2, r3, #8
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8019fd4:	2301      	movs	r3, #1
  }
}
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	372c      	adds	r7, #44	; 0x2c
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe0:	4770      	bx	lr
 8019fe2:	bf00      	nop
 8019fe4:	08020d28 	.word	0x08020d28

08019fe8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8019fe8:	b480      	push	{r7}
 8019fea:	b087      	sub	sp, #28
 8019fec:	af00      	add	r7, sp, #0
 8019fee:	60f8      	str	r0, [r7, #12]
 8019ff0:	60b9      	str	r1, [r7, #8]
 8019ff2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8019ffa:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8019ffc:	7dfb      	ldrb	r3, [r7, #23]
 8019ffe:	2b01      	cmp	r3, #1
 801a000:	d002      	beq.n	801a008 <HAL_FDCAN_ActivateNotification+0x20>
 801a002:	7dfb      	ldrb	r3, [r7, #23]
 801a004:	2b02      	cmp	r3, #2
 801a006:	d155      	bne.n	801a0b4 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	681b      	ldr	r3, [r3, #0]
 801a00c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	4013      	ands	r3, r2
 801a012:	2b00      	cmp	r3, #0
 801a014:	d108      	bne.n	801a028 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 801a016:	68fb      	ldr	r3, [r7, #12]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	f042 0201 	orr.w	r2, r2, #1
 801a024:	65da      	str	r2, [r3, #92]	; 0x5c
 801a026:	e014      	b.n	801a052 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 801a028:	68fb      	ldr	r3, [r7, #12]
 801a02a:	681b      	ldr	r3, [r3, #0]
 801a02c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801a02e:	68bb      	ldr	r3, [r7, #8]
 801a030:	4013      	ands	r3, r2
 801a032:	68ba      	ldr	r2, [r7, #8]
 801a034:	429a      	cmp	r2, r3
 801a036:	d108      	bne.n	801a04a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 801a038:	68fb      	ldr	r3, [r7, #12]
 801a03a:	681b      	ldr	r3, [r3, #0]
 801a03c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	f042 0202 	orr.w	r2, r2, #2
 801a046:	65da      	str	r2, [r3, #92]	; 0x5c
 801a048:	e003      	b.n	801a052 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	2203      	movs	r2, #3
 801a050:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d009      	beq.n	801a070 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 801a064:	68fb      	ldr	r3, [r7, #12]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	687a      	ldr	r2, [r7, #4]
 801a06a:	430a      	orrs	r2, r1
 801a06c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 801a070:	68bb      	ldr	r3, [r7, #8]
 801a072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801a076:	2b00      	cmp	r3, #0
 801a078:	d009      	beq.n	801a08e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 801a07a:	68fb      	ldr	r3, [r7, #12]
 801a07c:	681b      	ldr	r3, [r3, #0]
 801a07e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 801a082:	68fb      	ldr	r3, [r7, #12]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	687a      	ldr	r2, [r7, #4]
 801a088:	430a      	orrs	r2, r1
 801a08a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 801a08e:	68fb      	ldr	r3, [r7, #12]
 801a090:	681b      	ldr	r3, [r3, #0]
 801a092:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801a094:	68ba      	ldr	r2, [r7, #8]
 801a096:	4b0f      	ldr	r3, [pc, #60]	; (801a0d4 <HAL_FDCAN_ActivateNotification+0xec>)
 801a098:	4013      	ands	r3, r2
 801a09a:	68fa      	ldr	r2, [r7, #12]
 801a09c:	6812      	ldr	r2, [r2, #0]
 801a09e:	430b      	orrs	r3, r1
 801a0a0:	6553      	str	r3, [r2, #84]	; 0x54
 801a0a2:	4b0d      	ldr	r3, [pc, #52]	; (801a0d8 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a0a4:	695a      	ldr	r2, [r3, #20]
 801a0a6:	68bb      	ldr	r3, [r7, #8]
 801a0a8:	0f9b      	lsrs	r3, r3, #30
 801a0aa:	490b      	ldr	r1, [pc, #44]	; (801a0d8 <HAL_FDCAN_ActivateNotification+0xf0>)
 801a0ac:	4313      	orrs	r3, r2
 801a0ae:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 801a0b0:	2300      	movs	r3, #0
 801a0b2:	e008      	b.n	801a0c6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 801a0b4:	68fb      	ldr	r3, [r7, #12]
 801a0b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a0ba:	f043 0202 	orr.w	r2, r3, #2
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 801a0c4:	2301      	movs	r3, #1
  }
}
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	371c      	adds	r7, #28
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0d0:	4770      	bx	lr
 801a0d2:	bf00      	nop
 801a0d4:	3fcfffff 	.word	0x3fcfffff
 801a0d8:	4000a800 	.word	0x4000a800

0801a0dc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b096      	sub	sp, #88	; 0x58
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 801a0e4:	4b9a      	ldr	r3, [pc, #616]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a0e6:	691b      	ldr	r3, [r3, #16]
 801a0e8:	079b      	lsls	r3, r3, #30
 801a0ea:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 801a0ec:	4b98      	ldr	r3, [pc, #608]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a0ee:	695b      	ldr	r3, [r3, #20]
 801a0f0:	079b      	lsls	r3, r3, #30
 801a0f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801a0f4:	4013      	ands	r3, r2
 801a0f6:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	681b      	ldr	r3, [r3, #0]
 801a0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a0fe:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 801a102:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 801a104:	687b      	ldr	r3, [r7, #4]
 801a106:	681b      	ldr	r3, [r3, #0]
 801a108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a10a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801a10c:	4013      	ands	r3, r2
 801a10e:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 801a110:	687b      	ldr	r3, [r7, #4]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a116:	f003 030f 	and.w	r3, r3, #15
 801a11a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 801a11c:	687b      	ldr	r3, [r7, #4]
 801a11e:	681b      	ldr	r3, [r3, #0]
 801a120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a122:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801a124:	4013      	ands	r3, r2
 801a126:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a12e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a132:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 801a134:	687b      	ldr	r3, [r7, #4]
 801a136:	681b      	ldr	r3, [r3, #0]
 801a138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a13a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801a13c:	4013      	ands	r3, r2
 801a13e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a146:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 801a14a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 801a14c:	687b      	ldr	r3, [r7, #4]
 801a14e:	681b      	ldr	r3, [r3, #0]
 801a150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a152:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801a154:	4013      	ands	r3, r2
 801a156:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	681b      	ldr	r3, [r3, #0]
 801a15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a15e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 801a162:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a16a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801a16c:	4013      	ands	r3, r2
 801a16e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	681b      	ldr	r3, [r3, #0]
 801a174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a176:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a17e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 801a180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a182:	0a1b      	lsrs	r3, r3, #8
 801a184:	f003 0301 	and.w	r3, r3, #1
 801a188:	2b00      	cmp	r3, #0
 801a18a:	d010      	beq.n	801a1ae <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 801a18c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a18e:	0a1b      	lsrs	r3, r3, #8
 801a190:	f003 0301 	and.w	r3, r3, #1
 801a194:	2b00      	cmp	r3, #0
 801a196:	d00a      	beq.n	801a1ae <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	f44f 7280 	mov.w	r2, #256	; 0x100
 801a1a0:	651a      	str	r2, [r3, #80]	; 0x50
 801a1a2:	4b6b      	ldr	r3, [pc, #428]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a1a4:	2200      	movs	r2, #0
 801a1a6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 801a1a8:	6878      	ldr	r0, [r7, #4]
 801a1aa:	f000 fa54 	bl	801a656 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 801a1ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a1b0:	0a9b      	lsrs	r3, r3, #10
 801a1b2:	f003 0301 	and.w	r3, r3, #1
 801a1b6:	2b00      	cmp	r3, #0
 801a1b8:	d01d      	beq.n	801a1f6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 801a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1bc:	0a9b      	lsrs	r3, r3, #10
 801a1be:	f003 0301 	and.w	r3, r3, #1
 801a1c2:	2b00      	cmp	r3, #0
 801a1c4:	d017      	beq.n	801a1f6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	681b      	ldr	r3, [r3, #0]
 801a1ca:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 801a1ce:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 801a1d0:	687b      	ldr	r3, [r7, #4]
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 801a1d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801a1da:	4013      	ands	r3, r2
 801a1dc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801a1e6:	651a      	str	r2, [r3, #80]	; 0x50
 801a1e8:	4b59      	ldr	r3, [pc, #356]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 801a1ee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a1f0:	6878      	ldr	r0, [r7, #4]
 801a1f2:	f000 fa07 	bl	801a604 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 801a1f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d00d      	beq.n	801a218 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	681a      	ldr	r2, [r3, #0]
 801a200:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a202:	4b54      	ldr	r3, [pc, #336]	; (801a354 <HAL_FDCAN_IRQHandler+0x278>)
 801a204:	400b      	ands	r3, r1
 801a206:	6513      	str	r3, [r2, #80]	; 0x50
 801a208:	4a51      	ldr	r2, [pc, #324]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a20a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801a20c:	0f9b      	lsrs	r3, r3, #30
 801a20e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 801a210:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801a212:	6878      	ldr	r0, [r7, #4]
 801a214:	f000 f9c0 	bl	801a598 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 801a218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a21a:	2b00      	cmp	r3, #0
 801a21c:	d00d      	beq.n	801a23a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681a      	ldr	r2, [r3, #0]
 801a222:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a224:	4b4b      	ldr	r3, [pc, #300]	; (801a354 <HAL_FDCAN_IRQHandler+0x278>)
 801a226:	400b      	ands	r3, r1
 801a228:	6513      	str	r3, [r2, #80]	; 0x50
 801a22a:	4a49      	ldr	r2, [pc, #292]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a22c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801a22e:	0f9b      	lsrs	r3, r3, #30
 801a230:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 801a232:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801a234:	6878      	ldr	r0, [r7, #4]
 801a236:	f000 f9ba 	bl	801a5ae <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 801a23a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a23c:	2b00      	cmp	r3, #0
 801a23e:	d00d      	beq.n	801a25c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 801a240:	687b      	ldr	r3, [r7, #4]
 801a242:	681a      	ldr	r2, [r3, #0]
 801a244:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a246:	4b43      	ldr	r3, [pc, #268]	; (801a354 <HAL_FDCAN_IRQHandler+0x278>)
 801a248:	400b      	ands	r3, r1
 801a24a:	6513      	str	r3, [r2, #80]	; 0x50
 801a24c:	4a40      	ldr	r2, [pc, #256]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a24e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801a250:	0f9b      	lsrs	r3, r3, #30
 801a252:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 801a254:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801a256:	6878      	ldr	r0, [r7, #4]
 801a258:	f7f3 ffda 	bl	800e210 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 801a25c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a25e:	2b00      	cmp	r3, #0
 801a260:	d00d      	beq.n	801a27e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681a      	ldr	r2, [r3, #0]
 801a266:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a268:	4b3a      	ldr	r3, [pc, #232]	; (801a354 <HAL_FDCAN_IRQHandler+0x278>)
 801a26a:	400b      	ands	r3, r1
 801a26c:	6513      	str	r3, [r2, #80]	; 0x50
 801a26e:	4a38      	ldr	r2, [pc, #224]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801a272:	0f9b      	lsrs	r3, r3, #30
 801a274:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 801a276:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 801a278:	6878      	ldr	r0, [r7, #4]
 801a27a:	f000 f9a3 	bl	801a5c4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 801a27e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a280:	0adb      	lsrs	r3, r3, #11
 801a282:	f003 0301 	and.w	r3, r3, #1
 801a286:	2b00      	cmp	r3, #0
 801a288:	d010      	beq.n	801a2ac <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 801a28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a28c:	0adb      	lsrs	r3, r3, #11
 801a28e:	f003 0301 	and.w	r3, r3, #1
 801a292:	2b00      	cmp	r3, #0
 801a294:	d00a      	beq.n	801a2ac <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	681b      	ldr	r3, [r3, #0]
 801a29a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a29e:	651a      	str	r2, [r3, #80]	; 0x50
 801a2a0:	4b2b      	ldr	r3, [pc, #172]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a2a2:	2200      	movs	r2, #0
 801a2a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 801a2a6:	6878      	ldr	r0, [r7, #4]
 801a2a8:	f000 f997 	bl	801a5da <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 801a2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2ae:	0a5b      	lsrs	r3, r3, #9
 801a2b0:	f003 0301 	and.w	r3, r3, #1
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d01d      	beq.n	801a2f4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 801a2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a2ba:	0a5b      	lsrs	r3, r3, #9
 801a2bc:	f003 0301 	and.w	r3, r3, #1
 801a2c0:	2b00      	cmp	r3, #0
 801a2c2:	d017      	beq.n	801a2f4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 801a2cc:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 801a2ce:	687b      	ldr	r3, [r7, #4]
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801a2d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a2d8:	4013      	ands	r3, r2
 801a2da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 801a2e4:	651a      	str	r2, [r3, #80]	; 0x50
 801a2e6:	4b1a      	ldr	r3, [pc, #104]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a2e8:	2200      	movs	r2, #0
 801a2ea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 801a2ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a2ee:	6878      	ldr	r0, [r7, #4]
 801a2f0:	f000 f97d 	bl	801a5ee <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a2f6:	0cdb      	lsrs	r3, r3, #19
 801a2f8:	f003 0301 	and.w	r3, r3, #1
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	d010      	beq.n	801a322 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 801a300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a302:	0cdb      	lsrs	r3, r3, #19
 801a304:	f003 0301 	and.w	r3, r3, #1
 801a308:	2b00      	cmp	r3, #0
 801a30a:	d00a      	beq.n	801a322 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	681b      	ldr	r3, [r3, #0]
 801a310:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 801a314:	651a      	str	r2, [r3, #80]	; 0x50
 801a316:	4b0e      	ldr	r3, [pc, #56]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a318:	2200      	movs	r2, #0
 801a31a:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	f000 f97c 	bl	801a61a <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 801a322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a324:	0c1b      	lsrs	r3, r3, #16
 801a326:	f003 0301 	and.w	r3, r3, #1
 801a32a:	2b00      	cmp	r3, #0
 801a32c:	d016      	beq.n	801a35c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 801a32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a330:	0c1b      	lsrs	r3, r3, #16
 801a332:	f003 0301 	and.w	r3, r3, #1
 801a336:	2b00      	cmp	r3, #0
 801a338:	d010      	beq.n	801a35c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801a342:	651a      	str	r2, [r3, #80]	; 0x50
 801a344:	4b02      	ldr	r3, [pc, #8]	; (801a350 <HAL_FDCAN_IRQHandler+0x274>)
 801a346:	2200      	movs	r2, #0
 801a348:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 801a34a:	6878      	ldr	r0, [r7, #4]
 801a34c:	e004      	b.n	801a358 <HAL_FDCAN_IRQHandler+0x27c>
 801a34e:	bf00      	nop
 801a350:	4000a800 	.word	0x4000a800
 801a354:	3fcfffff 	.word	0x3fcfffff
 801a358:	f000 f969 	bl	801a62e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 801a35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a35e:	0c9b      	lsrs	r3, r3, #18
 801a360:	f003 0301 	and.w	r3, r3, #1
 801a364:	2b00      	cmp	r3, #0
 801a366:	d010      	beq.n	801a38a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 801a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a36a:	0c9b      	lsrs	r3, r3, #18
 801a36c:	f003 0301 	and.w	r3, r3, #1
 801a370:	2b00      	cmp	r3, #0
 801a372:	d00a      	beq.n	801a38a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	681b      	ldr	r3, [r3, #0]
 801a378:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801a37c:	651a      	str	r2, [r3, #80]	; 0x50
 801a37e:	4b83      	ldr	r3, [pc, #524]	; (801a58c <HAL_FDCAN_IRQHandler+0x4b0>)
 801a380:	2200      	movs	r2, #0
 801a382:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 801a384:	6878      	ldr	r0, [r7, #4]
 801a386:	f000 f95c 	bl	801a642 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 801a38a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801a38c:	0c5b      	lsrs	r3, r3, #17
 801a38e:	f003 0301 	and.w	r3, r3, #1
 801a392:	2b00      	cmp	r3, #0
 801a394:	d015      	beq.n	801a3c2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 801a396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a398:	0c5b      	lsrs	r3, r3, #17
 801a39a:	f003 0301 	and.w	r3, r3, #1
 801a39e:	2b00      	cmp	r3, #0
 801a3a0:	d00f      	beq.n	801a3c2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	681b      	ldr	r3, [r3, #0]
 801a3a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 801a3aa:	651a      	str	r2, [r3, #80]	; 0x50
 801a3ac:	4b77      	ldr	r3, [pc, #476]	; (801a58c <HAL_FDCAN_IRQHandler+0x4b0>)
 801a3ae:	2200      	movs	r2, #0
 801a3b0:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a3b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 801a3bc:	687b      	ldr	r3, [r7, #4]
 801a3be:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 801a3c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d00d      	beq.n	801a3e4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	681a      	ldr	r2, [r3, #0]
 801a3cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a3ce:	4b70      	ldr	r3, [pc, #448]	; (801a590 <HAL_FDCAN_IRQHandler+0x4b4>)
 801a3d0:	400b      	ands	r3, r1
 801a3d2:	6513      	str	r3, [r2, #80]	; 0x50
 801a3d4:	4a6d      	ldr	r2, [pc, #436]	; (801a58c <HAL_FDCAN_IRQHandler+0x4b0>)
 801a3d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801a3d8:	0f9b      	lsrs	r3, r3, #30
 801a3da:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 801a3dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801a3de:	6878      	ldr	r0, [r7, #4]
 801a3e0:	f000 f94d 	bl	801a67e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 801a3e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d011      	beq.n	801a40e <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 801a3ea:	687b      	ldr	r3, [r7, #4]
 801a3ec:	681a      	ldr	r2, [r3, #0]
 801a3ee:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801a3f0:	4b67      	ldr	r3, [pc, #412]	; (801a590 <HAL_FDCAN_IRQHandler+0x4b4>)
 801a3f2:	400b      	ands	r3, r1
 801a3f4:	6513      	str	r3, [r2, #80]	; 0x50
 801a3f6:	4a65      	ldr	r2, [pc, #404]	; (801a58c <HAL_FDCAN_IRQHandler+0x4b0>)
 801a3f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a3fa:	0f9b      	lsrs	r3, r3, #30
 801a3fc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801a406:	431a      	orrs	r2, r3
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 801a40e:	687b      	ldr	r3, [r7, #4]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	4a60      	ldr	r2, [pc, #384]	; (801a594 <HAL_FDCAN_IRQHandler+0x4b8>)
 801a414:	4293      	cmp	r3, r2
 801a416:	f040 80ac 	bne.w	801a572 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	685b      	ldr	r3, [r3, #4]
 801a41e:	689b      	ldr	r3, [r3, #8]
 801a420:	f003 0303 	and.w	r3, r3, #3
 801a424:	2b00      	cmp	r3, #0
 801a426:	f000 80a4 	beq.w	801a572 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	685b      	ldr	r3, [r3, #4]
 801a42e:	6a1b      	ldr	r3, [r3, #32]
 801a430:	f003 030f 	and.w	r3, r3, #15
 801a434:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 801a436:	687b      	ldr	r3, [r7, #4]
 801a438:	685b      	ldr	r3, [r3, #4]
 801a43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a43e:	4013      	ands	r3, r2
 801a440:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	685b      	ldr	r3, [r3, #4]
 801a446:	6a1b      	ldr	r3, [r3, #32]
 801a448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801a44c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 801a44e:	687b      	ldr	r3, [r7, #4]
 801a450:	685b      	ldr	r3, [r3, #4]
 801a452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a454:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a456:	4013      	ands	r3, r2
 801a458:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	685b      	ldr	r3, [r3, #4]
 801a45e:	6a1b      	ldr	r3, [r3, #32]
 801a460:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 801a464:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 801a466:	687b      	ldr	r3, [r7, #4]
 801a468:	685b      	ldr	r3, [r3, #4]
 801a46a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a46c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a46e:	4013      	ands	r3, r2
 801a470:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 801a472:	687b      	ldr	r3, [r7, #4]
 801a474:	685b      	ldr	r3, [r3, #4]
 801a476:	6a1b      	ldr	r3, [r3, #32]
 801a478:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 801a47c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	685b      	ldr	r3, [r3, #4]
 801a482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a484:	6a3a      	ldr	r2, [r7, #32]
 801a486:	4013      	ands	r3, r2
 801a488:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	685b      	ldr	r3, [r3, #4]
 801a48e:	6a1b      	ldr	r3, [r3, #32]
 801a490:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 801a494:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	685b      	ldr	r3, [r3, #4]
 801a49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a49c:	69fa      	ldr	r2, [r7, #28]
 801a49e:	4013      	ands	r3, r2
 801a4a0:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 801a4a2:	687b      	ldr	r3, [r7, #4]
 801a4a4:	685b      	ldr	r3, [r3, #4]
 801a4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a4a8:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	685b      	ldr	r3, [r3, #4]
 801a4ae:	6a1b      	ldr	r3, [r3, #32]
 801a4b0:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 801a4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d007      	beq.n	801a4c8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 801a4b8:	687b      	ldr	r3, [r7, #4]
 801a4ba:	685b      	ldr	r3, [r3, #4]
 801a4bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a4be:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 801a4c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a4c2:	6878      	ldr	r0, [r7, #4]
 801a4c4:	f000 f8e6 	bl	801a694 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 801a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d007      	beq.n	801a4de <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 801a4ce:	687b      	ldr	r3, [r7, #4]
 801a4d0:	685b      	ldr	r3, [r3, #4]
 801a4d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a4d4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 801a4d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a4d8:	6878      	ldr	r0, [r7, #4]
 801a4da:	f000 f8e6 	bl	801a6aa <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 801a4de:	69bb      	ldr	r3, [r7, #24]
 801a4e0:	099b      	lsrs	r3, r3, #6
 801a4e2:	f003 0301 	and.w	r3, r3, #1
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d01a      	beq.n	801a520 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 801a4ea:	697b      	ldr	r3, [r7, #20]
 801a4ec:	099b      	lsrs	r3, r3, #6
 801a4ee:	f003 0301 	and.w	r3, r3, #1
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d014      	beq.n	801a520 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	685b      	ldr	r3, [r3, #4]
 801a4fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a4fc:	0c1b      	lsrs	r3, r3, #16
 801a4fe:	b29b      	uxth	r3, r3
 801a500:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	685b      	ldr	r3, [r3, #4]
 801a506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a50c:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 801a50e:	687b      	ldr	r3, [r7, #4]
 801a510:	685b      	ldr	r3, [r3, #4]
 801a512:	2240      	movs	r2, #64	; 0x40
 801a514:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 801a516:	68fa      	ldr	r2, [r7, #12]
 801a518:	6939      	ldr	r1, [r7, #16]
 801a51a:	6878      	ldr	r0, [r7, #4]
 801a51c:	f000 f8d0 	bl	801a6c0 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 801a520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a522:	2b00      	cmp	r3, #0
 801a524:	d007      	beq.n	801a536 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	685b      	ldr	r3, [r3, #4]
 801a52a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a52c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 801a52e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a530:	6878      	ldr	r0, [r7, #4]
 801a532:	f000 f8d1 	bl	801a6d8 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 801a536:	6a3b      	ldr	r3, [r7, #32]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d00b      	beq.n	801a554 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	685b      	ldr	r3, [r3, #4]
 801a540:	6a3a      	ldr	r2, [r7, #32]
 801a542:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a54a:	6a3b      	ldr	r3, [r7, #32]
 801a54c:	431a      	orrs	r2, r3
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 801a554:	69fb      	ldr	r3, [r7, #28]
 801a556:	2b00      	cmp	r3, #0
 801a558:	d00b      	beq.n	801a572 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 801a55a:	687b      	ldr	r3, [r7, #4]
 801a55c:	685b      	ldr	r3, [r3, #4]
 801a55e:	69fa      	ldr	r2, [r7, #28]
 801a560:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 801a568:	69fb      	ldr	r3, [r7, #28]
 801a56a:	431a      	orrs	r2, r3
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 801a572:	687b      	ldr	r3, [r7, #4]
 801a574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a578:	2b00      	cmp	r3, #0
 801a57a:	d002      	beq.n	801a582 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 801a57c:	6878      	ldr	r0, [r7, #4]
 801a57e:	f000 f874 	bl	801a66a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 801a582:	bf00      	nop
 801a584:	3758      	adds	r7, #88	; 0x58
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	4000a800 	.word	0x4000a800
 801a590:	3fcfffff 	.word	0x3fcfffff
 801a594:	4000a000 	.word	0x4000a000

0801a598 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 801a598:	b480      	push	{r7}
 801a59a:	b083      	sub	sp, #12
 801a59c:	af00      	add	r7, sp, #0
 801a59e:	6078      	str	r0, [r7, #4]
 801a5a0:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 801a5a2:	bf00      	nop
 801a5a4:	370c      	adds	r7, #12
 801a5a6:	46bd      	mov	sp, r7
 801a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ac:	4770      	bx	lr

0801a5ae <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 801a5ae:	b480      	push	{r7}
 801a5b0:	b083      	sub	sp, #12
 801a5b2:	af00      	add	r7, sp, #0
 801a5b4:	6078      	str	r0, [r7, #4]
 801a5b6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 801a5b8:	bf00      	nop
 801a5ba:	370c      	adds	r7, #12
 801a5bc:	46bd      	mov	sp, r7
 801a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5c2:	4770      	bx	lr

0801a5c4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 801a5c4:	b480      	push	{r7}
 801a5c6:	b083      	sub	sp, #12
 801a5c8:	af00      	add	r7, sp, #0
 801a5ca:	6078      	str	r0, [r7, #4]
 801a5cc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 801a5ce:	bf00      	nop
 801a5d0:	370c      	adds	r7, #12
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d8:	4770      	bx	lr

0801a5da <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a5da:	b480      	push	{r7}
 801a5dc:	b083      	sub	sp, #12
 801a5de:	af00      	add	r7, sp, #0
 801a5e0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 801a5e2:	bf00      	nop
 801a5e4:	370c      	adds	r7, #12
 801a5e6:	46bd      	mov	sp, r7
 801a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5ec:	4770      	bx	lr

0801a5ee <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a5ee:	b480      	push	{r7}
 801a5f0:	b083      	sub	sp, #12
 801a5f2:	af00      	add	r7, sp, #0
 801a5f4:	6078      	str	r0, [r7, #4]
 801a5f6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 801a5f8:	bf00      	nop
 801a5fa:	370c      	adds	r7, #12
 801a5fc:	46bd      	mov	sp, r7
 801a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a602:	4770      	bx	lr

0801a604 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 801a604:	b480      	push	{r7}
 801a606:	b083      	sub	sp, #12
 801a608:	af00      	add	r7, sp, #0
 801a60a:	6078      	str	r0, [r7, #4]
 801a60c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 801a60e:	bf00      	nop
 801a610:	370c      	adds	r7, #12
 801a612:	46bd      	mov	sp, r7
 801a614:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a618:	4770      	bx	lr

0801a61a <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a61a:	b480      	push	{r7}
 801a61c:	b083      	sub	sp, #12
 801a61e:	af00      	add	r7, sp, #0
 801a620:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 801a622:	bf00      	nop
 801a624:	370c      	adds	r7, #12
 801a626:	46bd      	mov	sp, r7
 801a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a62c:	4770      	bx	lr

0801a62e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a62e:	b480      	push	{r7}
 801a630:	b083      	sub	sp, #12
 801a632:	af00      	add	r7, sp, #0
 801a634:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 801a636:	bf00      	nop
 801a638:	370c      	adds	r7, #12
 801a63a:	46bd      	mov	sp, r7
 801a63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a640:	4770      	bx	lr

0801a642 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a642:	b480      	push	{r7}
 801a644:	b083      	sub	sp, #12
 801a646:	af00      	add	r7, sp, #0
 801a648:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 801a64a:	bf00      	nop
 801a64c:	370c      	adds	r7, #12
 801a64e:	46bd      	mov	sp, r7
 801a650:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a654:	4770      	bx	lr

0801a656 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a656:	b480      	push	{r7}
 801a658:	b083      	sub	sp, #12
 801a65a:	af00      	add	r7, sp, #0
 801a65c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 801a65e:	bf00      	nop
 801a660:	370c      	adds	r7, #12
 801a662:	46bd      	mov	sp, r7
 801a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a668:	4770      	bx	lr

0801a66a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 801a66a:	b480      	push	{r7}
 801a66c:	b083      	sub	sp, #12
 801a66e:	af00      	add	r7, sp, #0
 801a670:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 801a672:	bf00      	nop
 801a674:	370c      	adds	r7, #12
 801a676:	46bd      	mov	sp, r7
 801a678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a67c:	4770      	bx	lr

0801a67e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 801a67e:	b480      	push	{r7}
 801a680:	b083      	sub	sp, #12
 801a682:	af00      	add	r7, sp, #0
 801a684:	6078      	str	r0, [r7, #4]
 801a686:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 801a688:	bf00      	nop
 801a68a:	370c      	adds	r7, #12
 801a68c:	46bd      	mov	sp, r7
 801a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a692:	4770      	bx	lr

0801a694 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 801a694:	b480      	push	{r7}
 801a696:	b083      	sub	sp, #12
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
 801a69c:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 801a69e:	bf00      	nop
 801a6a0:	370c      	adds	r7, #12
 801a6a2:	46bd      	mov	sp, r7
 801a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6a8:	4770      	bx	lr

0801a6aa <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 801a6aa:	b480      	push	{r7}
 801a6ac:	b083      	sub	sp, #12
 801a6ae:	af00      	add	r7, sp, #0
 801a6b0:	6078      	str	r0, [r7, #4]
 801a6b2:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 801a6b4:	bf00      	nop
 801a6b6:	370c      	adds	r7, #12
 801a6b8:	46bd      	mov	sp, r7
 801a6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6be:	4770      	bx	lr

0801a6c0 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 801a6c0:	b480      	push	{r7}
 801a6c2:	b085      	sub	sp, #20
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	60f8      	str	r0, [r7, #12]
 801a6c8:	60b9      	str	r1, [r7, #8]
 801a6ca:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 801a6cc:	bf00      	nop
 801a6ce:	3714      	adds	r7, #20
 801a6d0:	46bd      	mov	sp, r7
 801a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6d6:	4770      	bx	lr

0801a6d8 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 801a6d8:	b480      	push	{r7}
 801a6da:	b083      	sub	sp, #12
 801a6dc:	af00      	add	r7, sp, #0
 801a6de:	6078      	str	r0, [r7, #4]
 801a6e0:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 801a6e2:	bf00      	nop
 801a6e4:	370c      	adds	r7, #12
 801a6e6:	46bd      	mov	sp, r7
 801a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6ec:	4770      	bx	lr
	...

0801a6f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 801a6f0:	b480      	push	{r7}
 801a6f2:	b085      	sub	sp, #20
 801a6f4:	af00      	add	r7, sp, #0
 801a6f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 801a6f8:	687b      	ldr	r3, [r7, #4]
 801a6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a6fc:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 801a6fe:	687b      	ldr	r3, [r7, #4]
 801a700:	681b      	ldr	r3, [r3, #0]
 801a702:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a706:	4ba7      	ldr	r3, [pc, #668]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a708:	4013      	ands	r3, r2
 801a70a:	68ba      	ldr	r2, [r7, #8]
 801a70c:	0091      	lsls	r1, r2, #2
 801a70e:	687a      	ldr	r2, [r7, #4]
 801a710:	6812      	ldr	r2, [r2, #0]
 801a712:	430b      	orrs	r3, r1
 801a714:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	681b      	ldr	r3, [r3, #0]
 801a71c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a720:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 801a724:	687b      	ldr	r3, [r7, #4]
 801a726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a728:	041a      	lsls	r2, r3, #16
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	430a      	orrs	r2, r1
 801a730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 801a734:	687b      	ldr	r3, [r7, #4]
 801a736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a738:	68ba      	ldr	r2, [r7, #8]
 801a73a:	4413      	add	r3, r2
 801a73c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 801a73e:	687b      	ldr	r3, [r7, #4]
 801a740:	681b      	ldr	r3, [r3, #0]
 801a742:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a746:	4b97      	ldr	r3, [pc, #604]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a748:	4013      	ands	r3, r2
 801a74a:	68ba      	ldr	r2, [r7, #8]
 801a74c:	0091      	lsls	r1, r2, #2
 801a74e:	687a      	ldr	r2, [r7, #4]
 801a750:	6812      	ldr	r2, [r2, #0]
 801a752:	430b      	orrs	r3, r1
 801a754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 801a758:	687b      	ldr	r3, [r7, #4]
 801a75a:	681b      	ldr	r3, [r3, #0]
 801a75c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a760:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a764:	687b      	ldr	r3, [r7, #4]
 801a766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a768:	041a      	lsls	r2, r3, #16
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	430a      	orrs	r2, r1
 801a770:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a778:	005b      	lsls	r3, r3, #1
 801a77a:	68ba      	ldr	r2, [r7, #8]
 801a77c:	4413      	add	r3, r2
 801a77e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	681b      	ldr	r3, [r3, #0]
 801a784:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 801a788:	4b86      	ldr	r3, [pc, #536]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a78a:	4013      	ands	r3, r2
 801a78c:	68ba      	ldr	r2, [r7, #8]
 801a78e:	0091      	lsls	r1, r2, #2
 801a790:	687a      	ldr	r2, [r7, #4]
 801a792:	6812      	ldr	r2, [r2, #0]
 801a794:	430b      	orrs	r3, r1
 801a796:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801a7a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7aa:	041a      	lsls	r2, r3, #16
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	430a      	orrs	r2, r1
 801a7b2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7ba:	687a      	ldr	r2, [r7, #4]
 801a7bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 801a7be:	fb02 f303 	mul.w	r3, r2, r3
 801a7c2:	68ba      	ldr	r2, [r7, #8]
 801a7c4:	4413      	add	r3, r2
 801a7c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	681b      	ldr	r3, [r3, #0]
 801a7cc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 801a7d0:	4b74      	ldr	r3, [pc, #464]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a7d2:	4013      	ands	r3, r2
 801a7d4:	68ba      	ldr	r2, [r7, #8]
 801a7d6:	0091      	lsls	r1, r2, #2
 801a7d8:	687a      	ldr	r2, [r7, #4]
 801a7da:	6812      	ldr	r2, [r2, #0]
 801a7dc:	430b      	orrs	r3, r1
 801a7de:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 801a7e2:	687b      	ldr	r3, [r7, #4]
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801a7ea:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 801a7ee:	687b      	ldr	r3, [r7, #4]
 801a7f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a7f2:	041a      	lsls	r2, r3, #16
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	430a      	orrs	r2, r1
 801a7fa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a802:	687a      	ldr	r2, [r7, #4]
 801a804:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 801a806:	fb02 f303 	mul.w	r3, r2, r3
 801a80a:	68ba      	ldr	r2, [r7, #8]
 801a80c:	4413      	add	r3, r2
 801a80e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801a818:	4b62      	ldr	r3, [pc, #392]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a81a:	4013      	ands	r3, r2
 801a81c:	68ba      	ldr	r2, [r7, #8]
 801a81e:	0091      	lsls	r1, r2, #2
 801a820:	687a      	ldr	r2, [r7, #4]
 801a822:	6812      	ldr	r2, [r2, #0]
 801a824:	430b      	orrs	r3, r1
 801a826:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a82e:	687a      	ldr	r2, [r7, #4]
 801a830:	6d52      	ldr	r2, [r2, #84]	; 0x54
 801a832:	fb02 f303 	mul.w	r3, r2, r3
 801a836:	68ba      	ldr	r2, [r7, #8]
 801a838:	4413      	add	r3, r2
 801a83a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 801a83c:	687b      	ldr	r3, [r7, #4]
 801a83e:	681b      	ldr	r3, [r3, #0]
 801a840:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 801a844:	4b57      	ldr	r3, [pc, #348]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a846:	4013      	ands	r3, r2
 801a848:	68ba      	ldr	r2, [r7, #8]
 801a84a:	0091      	lsls	r1, r2, #2
 801a84c:	687a      	ldr	r2, [r7, #4]
 801a84e:	6812      	ldr	r2, [r2, #0]
 801a850:	430b      	orrs	r3, r1
 801a852:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 801a856:	687b      	ldr	r3, [r7, #4]
 801a858:	681b      	ldr	r3, [r3, #0]
 801a85a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 801a85e:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a866:	041a      	lsls	r2, r3, #16
 801a868:	687b      	ldr	r3, [r7, #4]
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	430a      	orrs	r2, r1
 801a86e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 801a872:	687b      	ldr	r3, [r7, #4]
 801a874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a876:	005b      	lsls	r3, r3, #1
 801a878:	68ba      	ldr	r2, [r7, #8]
 801a87a:	4413      	add	r3, r2
 801a87c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 801a886:	4b47      	ldr	r3, [pc, #284]	; (801a9a4 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 801a888:	4013      	ands	r3, r2
 801a88a:	68ba      	ldr	r2, [r7, #8]
 801a88c:	0091      	lsls	r1, r2, #2
 801a88e:	687a      	ldr	r2, [r7, #4]
 801a890:	6812      	ldr	r2, [r2, #0]
 801a892:	430b      	orrs	r3, r1
 801a894:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a8a0:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a8a8:	041a      	lsls	r2, r3, #16
 801a8aa:	687b      	ldr	r3, [r7, #4]
 801a8ac:	681b      	ldr	r3, [r3, #0]
 801a8ae:	430a      	orrs	r2, r1
 801a8b0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	681b      	ldr	r3, [r3, #0]
 801a8b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 801a8bc:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 801a8c0:	687b      	ldr	r3, [r7, #4]
 801a8c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a8c4:	061a      	lsls	r2, r3, #24
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	430a      	orrs	r2, r1
 801a8cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801a8d4:	4b34      	ldr	r3, [pc, #208]	; (801a9a8 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 801a8d6:	4413      	add	r3, r2
 801a8d8:	009a      	lsls	r2, r3, #2
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 801a8de:	687b      	ldr	r3, [r7, #4]
 801a8e0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a8e2:	687b      	ldr	r3, [r7, #4]
 801a8e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a8e6:	009b      	lsls	r3, r3, #2
 801a8e8:	441a      	add	r2, r3
 801a8ea:	687b      	ldr	r3, [r7, #4]
 801a8ec:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a8f2:	687b      	ldr	r3, [r7, #4]
 801a8f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801a8f6:	00db      	lsls	r3, r3, #3
 801a8f8:	441a      	add	r2, r3
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a906:	6879      	ldr	r1, [r7, #4]
 801a908:	6c49      	ldr	r1, [r1, #68]	; 0x44
 801a90a:	fb01 f303 	mul.w	r3, r1, r3
 801a90e:	009b      	lsls	r3, r3, #2
 801a910:	441a      	add	r2, r3
 801a912:	687b      	ldr	r3, [r7, #4]
 801a914:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 801a916:	687b      	ldr	r3, [r7, #4]
 801a918:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 801a91a:	687b      	ldr	r3, [r7, #4]
 801a91c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801a91e:	6879      	ldr	r1, [r7, #4]
 801a920:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 801a922:	fb01 f303 	mul.w	r3, r1, r3
 801a926:	009b      	lsls	r3, r3, #2
 801a928:	441a      	add	r2, r3
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a936:	6879      	ldr	r1, [r7, #4]
 801a938:	6d49      	ldr	r1, [r1, #84]	; 0x54
 801a93a:	fb01 f303 	mul.w	r3, r1, r3
 801a93e:	009b      	lsls	r3, r3, #2
 801a940:	441a      	add	r2, r3
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 801a948:	687b      	ldr	r3, [r7, #4]
 801a94a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801a952:	00db      	lsls	r3, r3, #3
 801a954:	441a      	add	r2, r3
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801a966:	6879      	ldr	r1, [r7, #4]
 801a968:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801a96a:	fb01 f303 	mul.w	r3, r1, r3
 801a96e:	009b      	lsls	r3, r3, #2
 801a970:	441a      	add	r2, r3
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 801a978:	687b      	ldr	r3, [r7, #4]
 801a97a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a982:	6879      	ldr	r1, [r7, #4]
 801a984:	6e89      	ldr	r1, [r1, #104]	; 0x68
 801a986:	fb01 f303 	mul.w	r3, r1, r3
 801a98a:	009b      	lsls	r3, r3, #2
 801a98c:	441a      	add	r2, r3
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a99a:	4a04      	ldr	r2, [pc, #16]	; (801a9ac <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 801a99c:	4293      	cmp	r3, r2
 801a99e:	d915      	bls.n	801a9cc <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 801a9a0:	e006      	b.n	801a9b0 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 801a9a2:	bf00      	nop
 801a9a4:	ffff0003 	.word	0xffff0003
 801a9a8:	10002b00 	.word	0x10002b00
 801a9ac:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801a9b6:	f043 0220 	orr.w	r2, r3, #32
 801a9ba:	687b      	ldr	r3, [r7, #4]
 801a9bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 801a9c0:	687b      	ldr	r3, [r7, #4]
 801a9c2:	2203      	movs	r2, #3
 801a9c4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 801a9c8:	2301      	movs	r3, #1
 801a9ca:	e010      	b.n	801a9ee <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a9d0:	60fb      	str	r3, [r7, #12]
 801a9d2:	e005      	b.n	801a9e0 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	2200      	movs	r2, #0
 801a9d8:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 801a9da:	68fb      	ldr	r3, [r7, #12]
 801a9dc:	3304      	adds	r3, #4
 801a9de:	60fb      	str	r3, [r7, #12]
 801a9e0:	687b      	ldr	r3, [r7, #4]
 801a9e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a9e6:	68fa      	ldr	r2, [r7, #12]
 801a9e8:	429a      	cmp	r2, r3
 801a9ea:	d3f3      	bcc.n	801a9d4 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 801a9ec:	2300      	movs	r3, #0
}
 801a9ee:	4618      	mov	r0, r3
 801a9f0:	3714      	adds	r7, #20
 801a9f2:	46bd      	mov	sp, r7
 801a9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a9f8:	4770      	bx	lr
 801a9fa:	bf00      	nop

0801a9fc <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 801a9fc:	b480      	push	{r7}
 801a9fe:	b089      	sub	sp, #36	; 0x24
 801aa00:	af00      	add	r7, sp, #0
 801aa02:	60f8      	str	r0, [r7, #12]
 801aa04:	60b9      	str	r1, [r7, #8]
 801aa06:	607a      	str	r2, [r7, #4]
 801aa08:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 801aa0a:	68bb      	ldr	r3, [r7, #8]
 801aa0c:	685b      	ldr	r3, [r3, #4]
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d10a      	bne.n	801aa28 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aa12:	68bb      	ldr	r3, [r7, #8]
 801aa14:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 801aa16:	68bb      	ldr	r3, [r7, #8]
 801aa18:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 801aa1a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 801aa1c:	68bb      	ldr	r3, [r7, #8]
 801aa1e:	681b      	ldr	r3, [r3, #0]
 801aa20:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aa22:	4313      	orrs	r3, r2
 801aa24:	61fb      	str	r3, [r7, #28]
 801aa26:	e00a      	b.n	801aa3e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aa28:	68bb      	ldr	r3, [r7, #8]
 801aa2a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 801aa30:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 801aa32:	68bb      	ldr	r3, [r7, #8]
 801aa34:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 801aa36:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 801aa38:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801aa3c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801aa3e:	68bb      	ldr	r3, [r7, #8]
 801aa40:	6a1b      	ldr	r3, [r3, #32]
 801aa42:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 801aa44:	68bb      	ldr	r3, [r7, #8]
 801aa46:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801aa48:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 801aa4a:	68bb      	ldr	r3, [r7, #8]
 801aa4c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 801aa4e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 801aa50:	68bb      	ldr	r3, [r7, #8]
 801aa52:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 801aa54:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 801aa56:	68bb      	ldr	r3, [r7, #8]
 801aa58:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 801aa5a:	4313      	orrs	r3, r2
 801aa5c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 801aa64:	68fb      	ldr	r3, [r7, #12]
 801aa66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801aa68:	6839      	ldr	r1, [r7, #0]
 801aa6a:	fb01 f303 	mul.w	r3, r1, r3
 801aa6e:	009b      	lsls	r3, r3, #2
 801aa70:	4413      	add	r3, r2
 801aa72:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 801aa74:	69bb      	ldr	r3, [r7, #24]
 801aa76:	69fa      	ldr	r2, [r7, #28]
 801aa78:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801aa7a:	69bb      	ldr	r3, [r7, #24]
 801aa7c:	3304      	adds	r3, #4
 801aa7e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 801aa80:	69bb      	ldr	r3, [r7, #24]
 801aa82:	693a      	ldr	r2, [r7, #16]
 801aa84:	601a      	str	r2, [r3, #0]
  TxAddress++;
 801aa86:	69bb      	ldr	r3, [r7, #24]
 801aa88:	3304      	adds	r3, #4
 801aa8a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801aa8c:	2300      	movs	r3, #0
 801aa8e:	617b      	str	r3, [r7, #20]
 801aa90:	e020      	b.n	801aad4 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aa92:	697b      	ldr	r3, [r7, #20]
 801aa94:	3303      	adds	r3, #3
 801aa96:	687a      	ldr	r2, [r7, #4]
 801aa98:	4413      	add	r3, r2
 801aa9a:	781b      	ldrb	r3, [r3, #0]
 801aa9c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801aa9e:	697b      	ldr	r3, [r7, #20]
 801aaa0:	3302      	adds	r3, #2
 801aaa2:	6879      	ldr	r1, [r7, #4]
 801aaa4:	440b      	add	r3, r1
 801aaa6:	781b      	ldrb	r3, [r3, #0]
 801aaa8:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aaaa:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801aaac:	697b      	ldr	r3, [r7, #20]
 801aaae:	3301      	adds	r3, #1
 801aab0:	6879      	ldr	r1, [r7, #4]
 801aab2:	440b      	add	r3, r1
 801aab4:	781b      	ldrb	r3, [r3, #0]
 801aab6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 801aab8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 801aaba:	6879      	ldr	r1, [r7, #4]
 801aabc:	697a      	ldr	r2, [r7, #20]
 801aabe:	440a      	add	r2, r1
 801aac0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 801aac2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 801aac4:	69bb      	ldr	r3, [r7, #24]
 801aac6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 801aac8:	69bb      	ldr	r3, [r7, #24]
 801aaca:	3304      	adds	r3, #4
 801aacc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 801aace:	697b      	ldr	r3, [r7, #20]
 801aad0:	3304      	adds	r3, #4
 801aad2:	617b      	str	r3, [r7, #20]
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	68db      	ldr	r3, [r3, #12]
 801aad8:	0c1b      	lsrs	r3, r3, #16
 801aada:	4a06      	ldr	r2, [pc, #24]	; (801aaf4 <FDCAN_CopyMessageToRAM+0xf8>)
 801aadc:	5cd3      	ldrb	r3, [r2, r3]
 801aade:	461a      	mov	r2, r3
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	4293      	cmp	r3, r2
 801aae4:	d3d5      	bcc.n	801aa92 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 801aae6:	bf00      	nop
 801aae8:	bf00      	nop
 801aaea:	3724      	adds	r7, #36	; 0x24
 801aaec:	46bd      	mov	sp, r7
 801aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaf2:	4770      	bx	lr
 801aaf4:	08020d28 	.word	0x08020d28

0801aaf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801aaf8:	b480      	push	{r7}
 801aafa:	b089      	sub	sp, #36	; 0x24
 801aafc:	af00      	add	r7, sp, #0
 801aafe:	6078      	str	r0, [r7, #4]
 801ab00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801ab02:	2300      	movs	r3, #0
 801ab04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801ab06:	4b86      	ldr	r3, [pc, #536]	; (801ad20 <HAL_GPIO_Init+0x228>)
 801ab08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ab0a:	e18c      	b.n	801ae26 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801ab0c:	683b      	ldr	r3, [r7, #0]
 801ab0e:	681a      	ldr	r2, [r3, #0]
 801ab10:	2101      	movs	r1, #1
 801ab12:	69fb      	ldr	r3, [r7, #28]
 801ab14:	fa01 f303 	lsl.w	r3, r1, r3
 801ab18:	4013      	ands	r3, r2
 801ab1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801ab1c:	693b      	ldr	r3, [r7, #16]
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	f000 817e 	beq.w	801ae20 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801ab24:	683b      	ldr	r3, [r7, #0]
 801ab26:	685b      	ldr	r3, [r3, #4]
 801ab28:	f003 0303 	and.w	r3, r3, #3
 801ab2c:	2b01      	cmp	r3, #1
 801ab2e:	d005      	beq.n	801ab3c <HAL_GPIO_Init+0x44>
 801ab30:	683b      	ldr	r3, [r7, #0]
 801ab32:	685b      	ldr	r3, [r3, #4]
 801ab34:	f003 0303 	and.w	r3, r3, #3
 801ab38:	2b02      	cmp	r3, #2
 801ab3a:	d130      	bne.n	801ab9e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801ab3c:	687b      	ldr	r3, [r7, #4]
 801ab3e:	689b      	ldr	r3, [r3, #8]
 801ab40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801ab42:	69fb      	ldr	r3, [r7, #28]
 801ab44:	005b      	lsls	r3, r3, #1
 801ab46:	2203      	movs	r2, #3
 801ab48:	fa02 f303 	lsl.w	r3, r2, r3
 801ab4c:	43db      	mvns	r3, r3
 801ab4e:	69ba      	ldr	r2, [r7, #24]
 801ab50:	4013      	ands	r3, r2
 801ab52:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801ab54:	683b      	ldr	r3, [r7, #0]
 801ab56:	68da      	ldr	r2, [r3, #12]
 801ab58:	69fb      	ldr	r3, [r7, #28]
 801ab5a:	005b      	lsls	r3, r3, #1
 801ab5c:	fa02 f303 	lsl.w	r3, r2, r3
 801ab60:	69ba      	ldr	r2, [r7, #24]
 801ab62:	4313      	orrs	r3, r2
 801ab64:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	69ba      	ldr	r2, [r7, #24]
 801ab6a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801ab72:	2201      	movs	r2, #1
 801ab74:	69fb      	ldr	r3, [r7, #28]
 801ab76:	fa02 f303 	lsl.w	r3, r2, r3
 801ab7a:	43db      	mvns	r3, r3
 801ab7c:	69ba      	ldr	r2, [r7, #24]
 801ab7e:	4013      	ands	r3, r2
 801ab80:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801ab82:	683b      	ldr	r3, [r7, #0]
 801ab84:	685b      	ldr	r3, [r3, #4]
 801ab86:	091b      	lsrs	r3, r3, #4
 801ab88:	f003 0201 	and.w	r2, r3, #1
 801ab8c:	69fb      	ldr	r3, [r7, #28]
 801ab8e:	fa02 f303 	lsl.w	r3, r2, r3
 801ab92:	69ba      	ldr	r2, [r7, #24]
 801ab94:	4313      	orrs	r3, r2
 801ab96:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801ab98:	687b      	ldr	r3, [r7, #4]
 801ab9a:	69ba      	ldr	r2, [r7, #24]
 801ab9c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801ab9e:	683b      	ldr	r3, [r7, #0]
 801aba0:	685b      	ldr	r3, [r3, #4]
 801aba2:	f003 0303 	and.w	r3, r3, #3
 801aba6:	2b03      	cmp	r3, #3
 801aba8:	d017      	beq.n	801abda <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	68db      	ldr	r3, [r3, #12]
 801abae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801abb0:	69fb      	ldr	r3, [r7, #28]
 801abb2:	005b      	lsls	r3, r3, #1
 801abb4:	2203      	movs	r2, #3
 801abb6:	fa02 f303 	lsl.w	r3, r2, r3
 801abba:	43db      	mvns	r3, r3
 801abbc:	69ba      	ldr	r2, [r7, #24]
 801abbe:	4013      	ands	r3, r2
 801abc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801abc2:	683b      	ldr	r3, [r7, #0]
 801abc4:	689a      	ldr	r2, [r3, #8]
 801abc6:	69fb      	ldr	r3, [r7, #28]
 801abc8:	005b      	lsls	r3, r3, #1
 801abca:	fa02 f303 	lsl.w	r3, r2, r3
 801abce:	69ba      	ldr	r2, [r7, #24]
 801abd0:	4313      	orrs	r3, r2
 801abd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	69ba      	ldr	r2, [r7, #24]
 801abd8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801abda:	683b      	ldr	r3, [r7, #0]
 801abdc:	685b      	ldr	r3, [r3, #4]
 801abde:	f003 0303 	and.w	r3, r3, #3
 801abe2:	2b02      	cmp	r3, #2
 801abe4:	d123      	bne.n	801ac2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801abe6:	69fb      	ldr	r3, [r7, #28]
 801abe8:	08da      	lsrs	r2, r3, #3
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	3208      	adds	r2, #8
 801abee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801abf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801abf4:	69fb      	ldr	r3, [r7, #28]
 801abf6:	f003 0307 	and.w	r3, r3, #7
 801abfa:	009b      	lsls	r3, r3, #2
 801abfc:	220f      	movs	r2, #15
 801abfe:	fa02 f303 	lsl.w	r3, r2, r3
 801ac02:	43db      	mvns	r3, r3
 801ac04:	69ba      	ldr	r2, [r7, #24]
 801ac06:	4013      	ands	r3, r2
 801ac08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	691a      	ldr	r2, [r3, #16]
 801ac0e:	69fb      	ldr	r3, [r7, #28]
 801ac10:	f003 0307 	and.w	r3, r3, #7
 801ac14:	009b      	lsls	r3, r3, #2
 801ac16:	fa02 f303 	lsl.w	r3, r2, r3
 801ac1a:	69ba      	ldr	r2, [r7, #24]
 801ac1c:	4313      	orrs	r3, r2
 801ac1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801ac20:	69fb      	ldr	r3, [r7, #28]
 801ac22:	08da      	lsrs	r2, r3, #3
 801ac24:	687b      	ldr	r3, [r7, #4]
 801ac26:	3208      	adds	r2, #8
 801ac28:	69b9      	ldr	r1, [r7, #24]
 801ac2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801ac2e:	687b      	ldr	r3, [r7, #4]
 801ac30:	681b      	ldr	r3, [r3, #0]
 801ac32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801ac34:	69fb      	ldr	r3, [r7, #28]
 801ac36:	005b      	lsls	r3, r3, #1
 801ac38:	2203      	movs	r2, #3
 801ac3a:	fa02 f303 	lsl.w	r3, r2, r3
 801ac3e:	43db      	mvns	r3, r3
 801ac40:	69ba      	ldr	r2, [r7, #24]
 801ac42:	4013      	ands	r3, r2
 801ac44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801ac46:	683b      	ldr	r3, [r7, #0]
 801ac48:	685b      	ldr	r3, [r3, #4]
 801ac4a:	f003 0203 	and.w	r2, r3, #3
 801ac4e:	69fb      	ldr	r3, [r7, #28]
 801ac50:	005b      	lsls	r3, r3, #1
 801ac52:	fa02 f303 	lsl.w	r3, r2, r3
 801ac56:	69ba      	ldr	r2, [r7, #24]
 801ac58:	4313      	orrs	r3, r2
 801ac5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801ac5c:	687b      	ldr	r3, [r7, #4]
 801ac5e:	69ba      	ldr	r2, [r7, #24]
 801ac60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801ac62:	683b      	ldr	r3, [r7, #0]
 801ac64:	685b      	ldr	r3, [r3, #4]
 801ac66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	f000 80d8 	beq.w	801ae20 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801ac70:	4b2c      	ldr	r3, [pc, #176]	; (801ad24 <HAL_GPIO_Init+0x22c>)
 801ac72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ac76:	4a2b      	ldr	r2, [pc, #172]	; (801ad24 <HAL_GPIO_Init+0x22c>)
 801ac78:	f043 0302 	orr.w	r3, r3, #2
 801ac7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 801ac80:	4b28      	ldr	r3, [pc, #160]	; (801ad24 <HAL_GPIO_Init+0x22c>)
 801ac82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 801ac86:	f003 0302 	and.w	r3, r3, #2
 801ac8a:	60fb      	str	r3, [r7, #12]
 801ac8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801ac8e:	4a26      	ldr	r2, [pc, #152]	; (801ad28 <HAL_GPIO_Init+0x230>)
 801ac90:	69fb      	ldr	r3, [r7, #28]
 801ac92:	089b      	lsrs	r3, r3, #2
 801ac94:	3302      	adds	r3, #2
 801ac96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ac9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801ac9c:	69fb      	ldr	r3, [r7, #28]
 801ac9e:	f003 0303 	and.w	r3, r3, #3
 801aca2:	009b      	lsls	r3, r3, #2
 801aca4:	220f      	movs	r2, #15
 801aca6:	fa02 f303 	lsl.w	r3, r2, r3
 801acaa:	43db      	mvns	r3, r3
 801acac:	69ba      	ldr	r2, [r7, #24]
 801acae:	4013      	ands	r3, r2
 801acb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	4a1d      	ldr	r2, [pc, #116]	; (801ad2c <HAL_GPIO_Init+0x234>)
 801acb6:	4293      	cmp	r3, r2
 801acb8:	d04a      	beq.n	801ad50 <HAL_GPIO_Init+0x258>
 801acba:	687b      	ldr	r3, [r7, #4]
 801acbc:	4a1c      	ldr	r2, [pc, #112]	; (801ad30 <HAL_GPIO_Init+0x238>)
 801acbe:	4293      	cmp	r3, r2
 801acc0:	d02b      	beq.n	801ad1a <HAL_GPIO_Init+0x222>
 801acc2:	687b      	ldr	r3, [r7, #4]
 801acc4:	4a1b      	ldr	r2, [pc, #108]	; (801ad34 <HAL_GPIO_Init+0x23c>)
 801acc6:	4293      	cmp	r3, r2
 801acc8:	d025      	beq.n	801ad16 <HAL_GPIO_Init+0x21e>
 801acca:	687b      	ldr	r3, [r7, #4]
 801accc:	4a1a      	ldr	r2, [pc, #104]	; (801ad38 <HAL_GPIO_Init+0x240>)
 801acce:	4293      	cmp	r3, r2
 801acd0:	d01f      	beq.n	801ad12 <HAL_GPIO_Init+0x21a>
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	4a19      	ldr	r2, [pc, #100]	; (801ad3c <HAL_GPIO_Init+0x244>)
 801acd6:	4293      	cmp	r3, r2
 801acd8:	d019      	beq.n	801ad0e <HAL_GPIO_Init+0x216>
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	4a18      	ldr	r2, [pc, #96]	; (801ad40 <HAL_GPIO_Init+0x248>)
 801acde:	4293      	cmp	r3, r2
 801ace0:	d013      	beq.n	801ad0a <HAL_GPIO_Init+0x212>
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	4a17      	ldr	r2, [pc, #92]	; (801ad44 <HAL_GPIO_Init+0x24c>)
 801ace6:	4293      	cmp	r3, r2
 801ace8:	d00d      	beq.n	801ad06 <HAL_GPIO_Init+0x20e>
 801acea:	687b      	ldr	r3, [r7, #4]
 801acec:	4a16      	ldr	r2, [pc, #88]	; (801ad48 <HAL_GPIO_Init+0x250>)
 801acee:	4293      	cmp	r3, r2
 801acf0:	d007      	beq.n	801ad02 <HAL_GPIO_Init+0x20a>
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	4a15      	ldr	r2, [pc, #84]	; (801ad4c <HAL_GPIO_Init+0x254>)
 801acf6:	4293      	cmp	r3, r2
 801acf8:	d101      	bne.n	801acfe <HAL_GPIO_Init+0x206>
 801acfa:	2309      	movs	r3, #9
 801acfc:	e029      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801acfe:	230a      	movs	r3, #10
 801ad00:	e027      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad02:	2307      	movs	r3, #7
 801ad04:	e025      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad06:	2306      	movs	r3, #6
 801ad08:	e023      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad0a:	2305      	movs	r3, #5
 801ad0c:	e021      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad0e:	2304      	movs	r3, #4
 801ad10:	e01f      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad12:	2303      	movs	r3, #3
 801ad14:	e01d      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad16:	2302      	movs	r3, #2
 801ad18:	e01b      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad1a:	2301      	movs	r3, #1
 801ad1c:	e019      	b.n	801ad52 <HAL_GPIO_Init+0x25a>
 801ad1e:	bf00      	nop
 801ad20:	58000080 	.word	0x58000080
 801ad24:	58024400 	.word	0x58024400
 801ad28:	58000400 	.word	0x58000400
 801ad2c:	58020000 	.word	0x58020000
 801ad30:	58020400 	.word	0x58020400
 801ad34:	58020800 	.word	0x58020800
 801ad38:	58020c00 	.word	0x58020c00
 801ad3c:	58021000 	.word	0x58021000
 801ad40:	58021400 	.word	0x58021400
 801ad44:	58021800 	.word	0x58021800
 801ad48:	58021c00 	.word	0x58021c00
 801ad4c:	58022400 	.word	0x58022400
 801ad50:	2300      	movs	r3, #0
 801ad52:	69fa      	ldr	r2, [r7, #28]
 801ad54:	f002 0203 	and.w	r2, r2, #3
 801ad58:	0092      	lsls	r2, r2, #2
 801ad5a:	4093      	lsls	r3, r2
 801ad5c:	69ba      	ldr	r2, [r7, #24]
 801ad5e:	4313      	orrs	r3, r2
 801ad60:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801ad62:	4938      	ldr	r1, [pc, #224]	; (801ae44 <HAL_GPIO_Init+0x34c>)
 801ad64:	69fb      	ldr	r3, [r7, #28]
 801ad66:	089b      	lsrs	r3, r3, #2
 801ad68:	3302      	adds	r3, #2
 801ad6a:	69ba      	ldr	r2, [r7, #24]
 801ad6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801ad70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ad78:	693b      	ldr	r3, [r7, #16]
 801ad7a:	43db      	mvns	r3, r3
 801ad7c:	69ba      	ldr	r2, [r7, #24]
 801ad7e:	4013      	ands	r3, r2
 801ad80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801ad82:	683b      	ldr	r3, [r7, #0]
 801ad84:	685b      	ldr	r3, [r3, #4]
 801ad86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d003      	beq.n	801ad96 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 801ad8e:	69ba      	ldr	r2, [r7, #24]
 801ad90:	693b      	ldr	r3, [r7, #16]
 801ad92:	4313      	orrs	r3, r2
 801ad94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801ad96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801ad9a:	69bb      	ldr	r3, [r7, #24]
 801ad9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801ad9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 801ada2:	685b      	ldr	r3, [r3, #4]
 801ada4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	43db      	mvns	r3, r3
 801adaa:	69ba      	ldr	r2, [r7, #24]
 801adac:	4013      	ands	r3, r2
 801adae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801adb0:	683b      	ldr	r3, [r7, #0]
 801adb2:	685b      	ldr	r3, [r3, #4]
 801adb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d003      	beq.n	801adc4 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 801adbc:	69ba      	ldr	r2, [r7, #24]
 801adbe:	693b      	ldr	r3, [r7, #16]
 801adc0:	4313      	orrs	r3, r2
 801adc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801adc4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 801adc8:	69bb      	ldr	r3, [r7, #24]
 801adca:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801adcc:	697b      	ldr	r3, [r7, #20]
 801adce:	685b      	ldr	r3, [r3, #4]
 801add0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801add2:	693b      	ldr	r3, [r7, #16]
 801add4:	43db      	mvns	r3, r3
 801add6:	69ba      	ldr	r2, [r7, #24]
 801add8:	4013      	ands	r3, r2
 801adda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801addc:	683b      	ldr	r3, [r7, #0]
 801adde:	685b      	ldr	r3, [r3, #4]
 801ade0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801ade4:	2b00      	cmp	r3, #0
 801ade6:	d003      	beq.n	801adf0 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 801ade8:	69ba      	ldr	r2, [r7, #24]
 801adea:	693b      	ldr	r3, [r7, #16]
 801adec:	4313      	orrs	r3, r2
 801adee:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801adf0:	697b      	ldr	r3, [r7, #20]
 801adf2:	69ba      	ldr	r2, [r7, #24]
 801adf4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801adf6:	697b      	ldr	r3, [r7, #20]
 801adf8:	681b      	ldr	r3, [r3, #0]
 801adfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801adfc:	693b      	ldr	r3, [r7, #16]
 801adfe:	43db      	mvns	r3, r3
 801ae00:	69ba      	ldr	r2, [r7, #24]
 801ae02:	4013      	ands	r3, r2
 801ae04:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801ae06:	683b      	ldr	r3, [r7, #0]
 801ae08:	685b      	ldr	r3, [r3, #4]
 801ae0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801ae0e:	2b00      	cmp	r3, #0
 801ae10:	d003      	beq.n	801ae1a <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 801ae12:	69ba      	ldr	r2, [r7, #24]
 801ae14:	693b      	ldr	r3, [r7, #16]
 801ae16:	4313      	orrs	r3, r2
 801ae18:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801ae1a:	697b      	ldr	r3, [r7, #20]
 801ae1c:	69ba      	ldr	r2, [r7, #24]
 801ae1e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801ae20:	69fb      	ldr	r3, [r7, #28]
 801ae22:	3301      	adds	r3, #1
 801ae24:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801ae26:	683b      	ldr	r3, [r7, #0]
 801ae28:	681a      	ldr	r2, [r3, #0]
 801ae2a:	69fb      	ldr	r3, [r7, #28]
 801ae2c:	fa22 f303 	lsr.w	r3, r2, r3
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	f47f ae6b 	bne.w	801ab0c <HAL_GPIO_Init+0x14>
  }
}
 801ae36:	bf00      	nop
 801ae38:	bf00      	nop
 801ae3a:	3724      	adds	r7, #36	; 0x24
 801ae3c:	46bd      	mov	sp, r7
 801ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae42:	4770      	bx	lr
 801ae44:	58000400 	.word	0x58000400

0801ae48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801ae48:	b480      	push	{r7}
 801ae4a:	b085      	sub	sp, #20
 801ae4c:	af00      	add	r7, sp, #0
 801ae4e:	6078      	str	r0, [r7, #4]
 801ae50:	460b      	mov	r3, r1
 801ae52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	691a      	ldr	r2, [r3, #16]
 801ae58:	887b      	ldrh	r3, [r7, #2]
 801ae5a:	4013      	ands	r3, r2
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	d002      	beq.n	801ae66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 801ae60:	2301      	movs	r3, #1
 801ae62:	73fb      	strb	r3, [r7, #15]
 801ae64:	e001      	b.n	801ae6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 801ae66:	2300      	movs	r3, #0
 801ae68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 801ae6a:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae6c:	4618      	mov	r0, r3
 801ae6e:	3714      	adds	r7, #20
 801ae70:	46bd      	mov	sp, r7
 801ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae76:	4770      	bx	lr

0801ae78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ae78:	b480      	push	{r7}
 801ae7a:	b083      	sub	sp, #12
 801ae7c:	af00      	add	r7, sp, #0
 801ae7e:	6078      	str	r0, [r7, #4]
 801ae80:	460b      	mov	r3, r1
 801ae82:	807b      	strh	r3, [r7, #2]
 801ae84:	4613      	mov	r3, r2
 801ae86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ae88:	787b      	ldrb	r3, [r7, #1]
 801ae8a:	2b00      	cmp	r3, #0
 801ae8c:	d003      	beq.n	801ae96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ae8e:	887a      	ldrh	r2, [r7, #2]
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ae94:	e003      	b.n	801ae9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ae96:	887b      	ldrh	r3, [r7, #2]
 801ae98:	041a      	lsls	r2, r3, #16
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	619a      	str	r2, [r3, #24]
}
 801ae9e:	bf00      	nop
 801aea0:	370c      	adds	r7, #12
 801aea2:	46bd      	mov	sp, r7
 801aea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aea8:	4770      	bx	lr

0801aeaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 801aeaa:	b480      	push	{r7}
 801aeac:	b085      	sub	sp, #20
 801aeae:	af00      	add	r7, sp, #0
 801aeb0:	6078      	str	r0, [r7, #4]
 801aeb2:	460b      	mov	r3, r1
 801aeb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 801aeb6:	687b      	ldr	r3, [r7, #4]
 801aeb8:	695b      	ldr	r3, [r3, #20]
 801aeba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 801aebc:	887a      	ldrh	r2, [r7, #2]
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	4013      	ands	r3, r2
 801aec2:	041a      	lsls	r2, r3, #16
 801aec4:	68fb      	ldr	r3, [r7, #12]
 801aec6:	43d9      	mvns	r1, r3
 801aec8:	887b      	ldrh	r3, [r7, #2]
 801aeca:	400b      	ands	r3, r1
 801aecc:	431a      	orrs	r2, r3
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	619a      	str	r2, [r3, #24]
}
 801aed2:	bf00      	nop
 801aed4:	3714      	adds	r7, #20
 801aed6:	46bd      	mov	sp, r7
 801aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aedc:	4770      	bx	lr
	...

0801aee0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801aee0:	b580      	push	{r7, lr}
 801aee2:	b084      	sub	sp, #16
 801aee4:	af00      	add	r7, sp, #0
 801aee6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801aee8:	4b19      	ldr	r3, [pc, #100]	; (801af50 <HAL_PWREx_ConfigSupply+0x70>)
 801aeea:	68db      	ldr	r3, [r3, #12]
 801aeec:	f003 0304 	and.w	r3, r3, #4
 801aef0:	2b04      	cmp	r3, #4
 801aef2:	d00a      	beq.n	801af0a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801aef4:	4b16      	ldr	r3, [pc, #88]	; (801af50 <HAL_PWREx_ConfigSupply+0x70>)
 801aef6:	68db      	ldr	r3, [r3, #12]
 801aef8:	f003 0307 	and.w	r3, r3, #7
 801aefc:	687a      	ldr	r2, [r7, #4]
 801aefe:	429a      	cmp	r2, r3
 801af00:	d001      	beq.n	801af06 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801af02:	2301      	movs	r3, #1
 801af04:	e01f      	b.n	801af46 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801af06:	2300      	movs	r3, #0
 801af08:	e01d      	b.n	801af46 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801af0a:	4b11      	ldr	r3, [pc, #68]	; (801af50 <HAL_PWREx_ConfigSupply+0x70>)
 801af0c:	68db      	ldr	r3, [r3, #12]
 801af0e:	f023 0207 	bic.w	r2, r3, #7
 801af12:	490f      	ldr	r1, [pc, #60]	; (801af50 <HAL_PWREx_ConfigSupply+0x70>)
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	4313      	orrs	r3, r2
 801af18:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801af1a:	f7fa f9ed 	bl	80152f8 <HAL_GetTick>
 801af1e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801af20:	e009      	b.n	801af36 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801af22:	f7fa f9e9 	bl	80152f8 <HAL_GetTick>
 801af26:	4602      	mov	r2, r0
 801af28:	68fb      	ldr	r3, [r7, #12]
 801af2a:	1ad3      	subs	r3, r2, r3
 801af2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801af30:	d901      	bls.n	801af36 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801af32:	2301      	movs	r3, #1
 801af34:	e007      	b.n	801af46 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801af36:	4b06      	ldr	r3, [pc, #24]	; (801af50 <HAL_PWREx_ConfigSupply+0x70>)
 801af38:	685b      	ldr	r3, [r3, #4]
 801af3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801af3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801af42:	d1ee      	bne.n	801af22 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801af44:	2300      	movs	r3, #0
}
 801af46:	4618      	mov	r0, r3
 801af48:	3710      	adds	r7, #16
 801af4a:	46bd      	mov	sp, r7
 801af4c:	bd80      	pop	{r7, pc}
 801af4e:	bf00      	nop
 801af50:	58024800 	.word	0x58024800

0801af54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b08c      	sub	sp, #48	; 0x30
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d101      	bne.n	801af66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801af62:	2301      	movs	r3, #1
 801af64:	e3c8      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	f003 0301 	and.w	r3, r3, #1
 801af6e:	2b00      	cmp	r3, #0
 801af70:	f000 8087 	beq.w	801b082 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801af74:	4b88      	ldr	r3, [pc, #544]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801af76:	691b      	ldr	r3, [r3, #16]
 801af78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801af7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801af7e:	4b86      	ldr	r3, [pc, #536]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801af80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801af82:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af86:	2b10      	cmp	r3, #16
 801af88:	d007      	beq.n	801af9a <HAL_RCC_OscConfig+0x46>
 801af8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801af8c:	2b18      	cmp	r3, #24
 801af8e:	d110      	bne.n	801afb2 <HAL_RCC_OscConfig+0x5e>
 801af90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801af92:	f003 0303 	and.w	r3, r3, #3
 801af96:	2b02      	cmp	r3, #2
 801af98:	d10b      	bne.n	801afb2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801af9a:	4b7f      	ldr	r3, [pc, #508]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801af9c:	681b      	ldr	r3, [r3, #0]
 801af9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d06c      	beq.n	801b080 <HAL_RCC_OscConfig+0x12c>
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	685b      	ldr	r3, [r3, #4]
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d168      	bne.n	801b080 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 801afae:	2301      	movs	r3, #1
 801afb0:	e3a2      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	685b      	ldr	r3, [r3, #4]
 801afb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801afba:	d106      	bne.n	801afca <HAL_RCC_OscConfig+0x76>
 801afbc:	4b76      	ldr	r3, [pc, #472]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801afbe:	681b      	ldr	r3, [r3, #0]
 801afc0:	4a75      	ldr	r2, [pc, #468]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801afc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afc6:	6013      	str	r3, [r2, #0]
 801afc8:	e02e      	b.n	801b028 <HAL_RCC_OscConfig+0xd4>
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	685b      	ldr	r3, [r3, #4]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d10c      	bne.n	801afec <HAL_RCC_OscConfig+0x98>
 801afd2:	4b71      	ldr	r3, [pc, #452]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801afd4:	681b      	ldr	r3, [r3, #0]
 801afd6:	4a70      	ldr	r2, [pc, #448]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801afd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801afdc:	6013      	str	r3, [r2, #0]
 801afde:	4b6e      	ldr	r3, [pc, #440]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	4a6d      	ldr	r2, [pc, #436]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801afe4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801afe8:	6013      	str	r3, [r2, #0]
 801afea:	e01d      	b.n	801b028 <HAL_RCC_OscConfig+0xd4>
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	685b      	ldr	r3, [r3, #4]
 801aff0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801aff4:	d10c      	bne.n	801b010 <HAL_RCC_OscConfig+0xbc>
 801aff6:	4b68      	ldr	r3, [pc, #416]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801aff8:	681b      	ldr	r3, [r3, #0]
 801affa:	4a67      	ldr	r2, [pc, #412]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801affc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b000:	6013      	str	r3, [r2, #0]
 801b002:	4b65      	ldr	r3, [pc, #404]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b004:	681b      	ldr	r3, [r3, #0]
 801b006:	4a64      	ldr	r2, [pc, #400]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b00c:	6013      	str	r3, [r2, #0]
 801b00e:	e00b      	b.n	801b028 <HAL_RCC_OscConfig+0xd4>
 801b010:	4b61      	ldr	r3, [pc, #388]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b012:	681b      	ldr	r3, [r3, #0]
 801b014:	4a60      	ldr	r2, [pc, #384]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b016:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801b01a:	6013      	str	r3, [r2, #0]
 801b01c:	4b5e      	ldr	r3, [pc, #376]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	4a5d      	ldr	r2, [pc, #372]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b022:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801b026:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	685b      	ldr	r3, [r3, #4]
 801b02c:	2b00      	cmp	r3, #0
 801b02e:	d013      	beq.n	801b058 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b030:	f7fa f962 	bl	80152f8 <HAL_GetTick>
 801b034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b036:	e008      	b.n	801b04a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b038:	f7fa f95e 	bl	80152f8 <HAL_GetTick>
 801b03c:	4602      	mov	r2, r0
 801b03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b040:	1ad3      	subs	r3, r2, r3
 801b042:	2b64      	cmp	r3, #100	; 0x64
 801b044:	d901      	bls.n	801b04a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 801b046:	2303      	movs	r3, #3
 801b048:	e356      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b04a:	4b53      	ldr	r3, [pc, #332]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b052:	2b00      	cmp	r3, #0
 801b054:	d0f0      	beq.n	801b038 <HAL_RCC_OscConfig+0xe4>
 801b056:	e014      	b.n	801b082 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b058:	f7fa f94e 	bl	80152f8 <HAL_GetTick>
 801b05c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b05e:	e008      	b.n	801b072 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b060:	f7fa f94a 	bl	80152f8 <HAL_GetTick>
 801b064:	4602      	mov	r2, r0
 801b066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b068:	1ad3      	subs	r3, r2, r3
 801b06a:	2b64      	cmp	r3, #100	; 0x64
 801b06c:	d901      	bls.n	801b072 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 801b06e:	2303      	movs	r3, #3
 801b070:	e342      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b072:	4b49      	ldr	r3, [pc, #292]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b074:	681b      	ldr	r3, [r3, #0]
 801b076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b07a:	2b00      	cmp	r3, #0
 801b07c:	d1f0      	bne.n	801b060 <HAL_RCC_OscConfig+0x10c>
 801b07e:	e000      	b.n	801b082 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b080:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	681b      	ldr	r3, [r3, #0]
 801b086:	f003 0302 	and.w	r3, r3, #2
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	f000 808c 	beq.w	801b1a8 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b090:	4b41      	ldr	r3, [pc, #260]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b092:	691b      	ldr	r3, [r3, #16]
 801b094:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b098:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b09a:	4b3f      	ldr	r3, [pc, #252]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b09c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b09e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801b0a0:	6a3b      	ldr	r3, [r7, #32]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d007      	beq.n	801b0b6 <HAL_RCC_OscConfig+0x162>
 801b0a6:	6a3b      	ldr	r3, [r7, #32]
 801b0a8:	2b18      	cmp	r3, #24
 801b0aa:	d137      	bne.n	801b11c <HAL_RCC_OscConfig+0x1c8>
 801b0ac:	69fb      	ldr	r3, [r7, #28]
 801b0ae:	f003 0303 	and.w	r3, r3, #3
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d132      	bne.n	801b11c <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b0b6:	4b38      	ldr	r3, [pc, #224]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	f003 0304 	and.w	r3, r3, #4
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d005      	beq.n	801b0ce <HAL_RCC_OscConfig+0x17a>
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	68db      	ldr	r3, [r3, #12]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d101      	bne.n	801b0ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 801b0ca:	2301      	movs	r3, #1
 801b0cc:	e314      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b0ce:	4b32      	ldr	r3, [pc, #200]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	f023 0219 	bic.w	r2, r3, #25
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	68db      	ldr	r3, [r3, #12]
 801b0da:	492f      	ldr	r1, [pc, #188]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b0dc:	4313      	orrs	r3, r2
 801b0de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b0e0:	f7fa f90a 	bl	80152f8 <HAL_GetTick>
 801b0e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b0e6:	e008      	b.n	801b0fa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b0e8:	f7fa f906 	bl	80152f8 <HAL_GetTick>
 801b0ec:	4602      	mov	r2, r0
 801b0ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b0f0:	1ad3      	subs	r3, r2, r3
 801b0f2:	2b02      	cmp	r3, #2
 801b0f4:	d901      	bls.n	801b0fa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 801b0f6:	2303      	movs	r3, #3
 801b0f8:	e2fe      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b0fa:	4b27      	ldr	r3, [pc, #156]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b0fc:	681b      	ldr	r3, [r3, #0]
 801b0fe:	f003 0304 	and.w	r3, r3, #4
 801b102:	2b00      	cmp	r3, #0
 801b104:	d0f0      	beq.n	801b0e8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b106:	4b24      	ldr	r3, [pc, #144]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b108:	685b      	ldr	r3, [r3, #4]
 801b10a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	691b      	ldr	r3, [r3, #16]
 801b112:	061b      	lsls	r3, r3, #24
 801b114:	4920      	ldr	r1, [pc, #128]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b116:	4313      	orrs	r3, r2
 801b118:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b11a:	e045      	b.n	801b1a8 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	68db      	ldr	r3, [r3, #12]
 801b120:	2b00      	cmp	r3, #0
 801b122:	d026      	beq.n	801b172 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b124:	4b1c      	ldr	r3, [pc, #112]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b126:	681b      	ldr	r3, [r3, #0]
 801b128:	f023 0219 	bic.w	r2, r3, #25
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	68db      	ldr	r3, [r3, #12]
 801b130:	4919      	ldr	r1, [pc, #100]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b132:	4313      	orrs	r3, r2
 801b134:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b136:	f7fa f8df 	bl	80152f8 <HAL_GetTick>
 801b13a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b13c:	e008      	b.n	801b150 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b13e:	f7fa f8db 	bl	80152f8 <HAL_GetTick>
 801b142:	4602      	mov	r2, r0
 801b144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b146:	1ad3      	subs	r3, r2, r3
 801b148:	2b02      	cmp	r3, #2
 801b14a:	d901      	bls.n	801b150 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 801b14c:	2303      	movs	r3, #3
 801b14e:	e2d3      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b150:	4b11      	ldr	r3, [pc, #68]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	f003 0304 	and.w	r3, r3, #4
 801b158:	2b00      	cmp	r3, #0
 801b15a:	d0f0      	beq.n	801b13e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b15c:	4b0e      	ldr	r3, [pc, #56]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b15e:	685b      	ldr	r3, [r3, #4]
 801b160:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	691b      	ldr	r3, [r3, #16]
 801b168:	061b      	lsls	r3, r3, #24
 801b16a:	490b      	ldr	r1, [pc, #44]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b16c:	4313      	orrs	r3, r2
 801b16e:	604b      	str	r3, [r1, #4]
 801b170:	e01a      	b.n	801b1a8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b172:	4b09      	ldr	r3, [pc, #36]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	4a08      	ldr	r2, [pc, #32]	; (801b198 <HAL_RCC_OscConfig+0x244>)
 801b178:	f023 0301 	bic.w	r3, r3, #1
 801b17c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b17e:	f7fa f8bb 	bl	80152f8 <HAL_GetTick>
 801b182:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b184:	e00a      	b.n	801b19c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b186:	f7fa f8b7 	bl	80152f8 <HAL_GetTick>
 801b18a:	4602      	mov	r2, r0
 801b18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b18e:	1ad3      	subs	r3, r2, r3
 801b190:	2b02      	cmp	r3, #2
 801b192:	d903      	bls.n	801b19c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 801b194:	2303      	movs	r3, #3
 801b196:	e2af      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
 801b198:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b19c:	4b96      	ldr	r3, [pc, #600]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	f003 0304 	and.w	r3, r3, #4
 801b1a4:	2b00      	cmp	r3, #0
 801b1a6:	d1ee      	bne.n	801b186 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	f003 0310 	and.w	r3, r3, #16
 801b1b0:	2b00      	cmp	r3, #0
 801b1b2:	d06a      	beq.n	801b28a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b1b4:	4b90      	ldr	r3, [pc, #576]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b1b6:	691b      	ldr	r3, [r3, #16]
 801b1b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b1bc:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b1be:	4b8e      	ldr	r3, [pc, #568]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b1c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b1c2:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b1c4:	69bb      	ldr	r3, [r7, #24]
 801b1c6:	2b08      	cmp	r3, #8
 801b1c8:	d007      	beq.n	801b1da <HAL_RCC_OscConfig+0x286>
 801b1ca:	69bb      	ldr	r3, [r7, #24]
 801b1cc:	2b18      	cmp	r3, #24
 801b1ce:	d11b      	bne.n	801b208 <HAL_RCC_OscConfig+0x2b4>
 801b1d0:	697b      	ldr	r3, [r7, #20]
 801b1d2:	f003 0303 	and.w	r3, r3, #3
 801b1d6:	2b01      	cmp	r3, #1
 801b1d8:	d116      	bne.n	801b208 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b1da:	4b87      	ldr	r3, [pc, #540]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d005      	beq.n	801b1f2 <HAL_RCC_OscConfig+0x29e>
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	69db      	ldr	r3, [r3, #28]
 801b1ea:	2b80      	cmp	r3, #128	; 0x80
 801b1ec:	d001      	beq.n	801b1f2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 801b1ee:	2301      	movs	r3, #1
 801b1f0:	e282      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b1f2:	4b81      	ldr	r3, [pc, #516]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b1f4:	68db      	ldr	r3, [r3, #12]
 801b1f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b1fa:	687b      	ldr	r3, [r7, #4]
 801b1fc:	6a1b      	ldr	r3, [r3, #32]
 801b1fe:	061b      	lsls	r3, r3, #24
 801b200:	497d      	ldr	r1, [pc, #500]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b202:	4313      	orrs	r3, r2
 801b204:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b206:	e040      	b.n	801b28a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801b208:	687b      	ldr	r3, [r7, #4]
 801b20a:	69db      	ldr	r3, [r3, #28]
 801b20c:	2b00      	cmp	r3, #0
 801b20e:	d023      	beq.n	801b258 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b210:	4b79      	ldr	r3, [pc, #484]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b212:	681b      	ldr	r3, [r3, #0]
 801b214:	4a78      	ldr	r2, [pc, #480]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b21a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b21c:	f7fa f86c 	bl	80152f8 <HAL_GetTick>
 801b220:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b222:	e008      	b.n	801b236 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b224:	f7fa f868 	bl	80152f8 <HAL_GetTick>
 801b228:	4602      	mov	r2, r0
 801b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b22c:	1ad3      	subs	r3, r2, r3
 801b22e:	2b02      	cmp	r3, #2
 801b230:	d901      	bls.n	801b236 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 801b232:	2303      	movs	r3, #3
 801b234:	e260      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b236:	4b70      	ldr	r3, [pc, #448]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b238:	681b      	ldr	r3, [r3, #0]
 801b23a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d0f0      	beq.n	801b224 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b242:	4b6d      	ldr	r3, [pc, #436]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b244:	68db      	ldr	r3, [r3, #12]
 801b246:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	6a1b      	ldr	r3, [r3, #32]
 801b24e:	061b      	lsls	r3, r3, #24
 801b250:	4969      	ldr	r1, [pc, #420]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b252:	4313      	orrs	r3, r2
 801b254:	60cb      	str	r3, [r1, #12]
 801b256:	e018      	b.n	801b28a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801b258:	4b67      	ldr	r3, [pc, #412]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	4a66      	ldr	r2, [pc, #408]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b25e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801b262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b264:	f7fa f848 	bl	80152f8 <HAL_GetTick>
 801b268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b26a:	e008      	b.n	801b27e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b26c:	f7fa f844 	bl	80152f8 <HAL_GetTick>
 801b270:	4602      	mov	r2, r0
 801b272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b274:	1ad3      	subs	r3, r2, r3
 801b276:	2b02      	cmp	r3, #2
 801b278:	d901      	bls.n	801b27e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 801b27a:	2303      	movs	r3, #3
 801b27c:	e23c      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801b27e:	4b5e      	ldr	r3, [pc, #376]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b280:	681b      	ldr	r3, [r3, #0]
 801b282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b286:	2b00      	cmp	r3, #0
 801b288:	d1f0      	bne.n	801b26c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	f003 0308 	and.w	r3, r3, #8
 801b292:	2b00      	cmp	r3, #0
 801b294:	d036      	beq.n	801b304 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801b296:	687b      	ldr	r3, [r7, #4]
 801b298:	695b      	ldr	r3, [r3, #20]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d019      	beq.n	801b2d2 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801b29e:	4b56      	ldr	r3, [pc, #344]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b2a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2a2:	4a55      	ldr	r2, [pc, #340]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b2a4:	f043 0301 	orr.w	r3, r3, #1
 801b2a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b2aa:	f7fa f825 	bl	80152f8 <HAL_GetTick>
 801b2ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b2b0:	e008      	b.n	801b2c4 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b2b2:	f7fa f821 	bl	80152f8 <HAL_GetTick>
 801b2b6:	4602      	mov	r2, r0
 801b2b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ba:	1ad3      	subs	r3, r2, r3
 801b2bc:	2b02      	cmp	r3, #2
 801b2be:	d901      	bls.n	801b2c4 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 801b2c0:	2303      	movs	r3, #3
 801b2c2:	e219      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801b2c4:	4b4c      	ldr	r3, [pc, #304]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b2c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2c8:	f003 0302 	and.w	r3, r3, #2
 801b2cc:	2b00      	cmp	r3, #0
 801b2ce:	d0f0      	beq.n	801b2b2 <HAL_RCC_OscConfig+0x35e>
 801b2d0:	e018      	b.n	801b304 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801b2d2:	4b49      	ldr	r3, [pc, #292]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b2d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2d6:	4a48      	ldr	r2, [pc, #288]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b2d8:	f023 0301 	bic.w	r3, r3, #1
 801b2dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b2de:	f7fa f80b 	bl	80152f8 <HAL_GetTick>
 801b2e2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b2e4:	e008      	b.n	801b2f8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801b2e6:	f7fa f807 	bl	80152f8 <HAL_GetTick>
 801b2ea:	4602      	mov	r2, r0
 801b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2ee:	1ad3      	subs	r3, r2, r3
 801b2f0:	2b02      	cmp	r3, #2
 801b2f2:	d901      	bls.n	801b2f8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 801b2f4:	2303      	movs	r3, #3
 801b2f6:	e1ff      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801b2f8:	4b3f      	ldr	r3, [pc, #252]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b2fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b2fc:	f003 0302 	and.w	r3, r3, #2
 801b300:	2b00      	cmp	r3, #0
 801b302:	d1f0      	bne.n	801b2e6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801b304:	687b      	ldr	r3, [r7, #4]
 801b306:	681b      	ldr	r3, [r3, #0]
 801b308:	f003 0320 	and.w	r3, r3, #32
 801b30c:	2b00      	cmp	r3, #0
 801b30e:	d036      	beq.n	801b37e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	699b      	ldr	r3, [r3, #24]
 801b314:	2b00      	cmp	r3, #0
 801b316:	d019      	beq.n	801b34c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801b318:	4b37      	ldr	r3, [pc, #220]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b31a:	681b      	ldr	r3, [r3, #0]
 801b31c:	4a36      	ldr	r2, [pc, #216]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b31e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801b322:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b324:	f7f9 ffe8 	bl	80152f8 <HAL_GetTick>
 801b328:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b32a:	e008      	b.n	801b33e <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b32c:	f7f9 ffe4 	bl	80152f8 <HAL_GetTick>
 801b330:	4602      	mov	r2, r0
 801b332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b334:	1ad3      	subs	r3, r2, r3
 801b336:	2b02      	cmp	r3, #2
 801b338:	d901      	bls.n	801b33e <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 801b33a:	2303      	movs	r3, #3
 801b33c:	e1dc      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801b33e:	4b2e      	ldr	r3, [pc, #184]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b340:	681b      	ldr	r3, [r3, #0]
 801b342:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b346:	2b00      	cmp	r3, #0
 801b348:	d0f0      	beq.n	801b32c <HAL_RCC_OscConfig+0x3d8>
 801b34a:	e018      	b.n	801b37e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801b34c:	4b2a      	ldr	r3, [pc, #168]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	4a29      	ldr	r2, [pc, #164]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b356:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801b358:	f7f9 ffce 	bl	80152f8 <HAL_GetTick>
 801b35c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b35e:	e008      	b.n	801b372 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801b360:	f7f9 ffca 	bl	80152f8 <HAL_GetTick>
 801b364:	4602      	mov	r2, r0
 801b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b368:	1ad3      	subs	r3, r2, r3
 801b36a:	2b02      	cmp	r3, #2
 801b36c:	d901      	bls.n	801b372 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801b36e:	2303      	movs	r3, #3
 801b370:	e1c2      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801b372:	4b21      	ldr	r3, [pc, #132]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b374:	681b      	ldr	r3, [r3, #0]
 801b376:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d1f0      	bne.n	801b360 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801b37e:	687b      	ldr	r3, [r7, #4]
 801b380:	681b      	ldr	r3, [r3, #0]
 801b382:	f003 0304 	and.w	r3, r3, #4
 801b386:	2b00      	cmp	r3, #0
 801b388:	f000 8086 	beq.w	801b498 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801b38c:	4b1b      	ldr	r3, [pc, #108]	; (801b3fc <HAL_RCC_OscConfig+0x4a8>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	4a1a      	ldr	r2, [pc, #104]	; (801b3fc <HAL_RCC_OscConfig+0x4a8>)
 801b392:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801b396:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b398:	f7f9 ffae 	bl	80152f8 <HAL_GetTick>
 801b39c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b39e:	e008      	b.n	801b3b2 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b3a0:	f7f9 ffaa 	bl	80152f8 <HAL_GetTick>
 801b3a4:	4602      	mov	r2, r0
 801b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3a8:	1ad3      	subs	r3, r2, r3
 801b3aa:	2b64      	cmp	r3, #100	; 0x64
 801b3ac:	d901      	bls.n	801b3b2 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 801b3ae:	2303      	movs	r3, #3
 801b3b0:	e1a2      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b3b2:	4b12      	ldr	r3, [pc, #72]	; (801b3fc <HAL_RCC_OscConfig+0x4a8>)
 801b3b4:	681b      	ldr	r3, [r3, #0]
 801b3b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b3ba:	2b00      	cmp	r3, #0
 801b3bc:	d0f0      	beq.n	801b3a0 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801b3be:	687b      	ldr	r3, [r7, #4]
 801b3c0:	689b      	ldr	r3, [r3, #8]
 801b3c2:	2b01      	cmp	r3, #1
 801b3c4:	d106      	bne.n	801b3d4 <HAL_RCC_OscConfig+0x480>
 801b3c6:	4b0c      	ldr	r3, [pc, #48]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b3c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3ca:	4a0b      	ldr	r2, [pc, #44]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b3cc:	f043 0301 	orr.w	r3, r3, #1
 801b3d0:	6713      	str	r3, [r2, #112]	; 0x70
 801b3d2:	e032      	b.n	801b43a <HAL_RCC_OscConfig+0x4e6>
 801b3d4:	687b      	ldr	r3, [r7, #4]
 801b3d6:	689b      	ldr	r3, [r3, #8]
 801b3d8:	2b00      	cmp	r3, #0
 801b3da:	d111      	bne.n	801b400 <HAL_RCC_OscConfig+0x4ac>
 801b3dc:	4b06      	ldr	r3, [pc, #24]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b3de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3e0:	4a05      	ldr	r2, [pc, #20]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b3e2:	f023 0301 	bic.w	r3, r3, #1
 801b3e6:	6713      	str	r3, [r2, #112]	; 0x70
 801b3e8:	4b03      	ldr	r3, [pc, #12]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b3ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b3ec:	4a02      	ldr	r2, [pc, #8]	; (801b3f8 <HAL_RCC_OscConfig+0x4a4>)
 801b3ee:	f023 0304 	bic.w	r3, r3, #4
 801b3f2:	6713      	str	r3, [r2, #112]	; 0x70
 801b3f4:	e021      	b.n	801b43a <HAL_RCC_OscConfig+0x4e6>
 801b3f6:	bf00      	nop
 801b3f8:	58024400 	.word	0x58024400
 801b3fc:	58024800 	.word	0x58024800
 801b400:	687b      	ldr	r3, [r7, #4]
 801b402:	689b      	ldr	r3, [r3, #8]
 801b404:	2b05      	cmp	r3, #5
 801b406:	d10c      	bne.n	801b422 <HAL_RCC_OscConfig+0x4ce>
 801b408:	4b83      	ldr	r3, [pc, #524]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b40a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b40c:	4a82      	ldr	r2, [pc, #520]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b40e:	f043 0304 	orr.w	r3, r3, #4
 801b412:	6713      	str	r3, [r2, #112]	; 0x70
 801b414:	4b80      	ldr	r3, [pc, #512]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b418:	4a7f      	ldr	r2, [pc, #508]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b41a:	f043 0301 	orr.w	r3, r3, #1
 801b41e:	6713      	str	r3, [r2, #112]	; 0x70
 801b420:	e00b      	b.n	801b43a <HAL_RCC_OscConfig+0x4e6>
 801b422:	4b7d      	ldr	r3, [pc, #500]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b426:	4a7c      	ldr	r2, [pc, #496]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b428:	f023 0301 	bic.w	r3, r3, #1
 801b42c:	6713      	str	r3, [r2, #112]	; 0x70
 801b42e:	4b7a      	ldr	r3, [pc, #488]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b432:	4a79      	ldr	r2, [pc, #484]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b434:	f023 0304 	bic.w	r3, r3, #4
 801b438:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	689b      	ldr	r3, [r3, #8]
 801b43e:	2b00      	cmp	r3, #0
 801b440:	d015      	beq.n	801b46e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b442:	f7f9 ff59 	bl	80152f8 <HAL_GetTick>
 801b446:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b448:	e00a      	b.n	801b460 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b44a:	f7f9 ff55 	bl	80152f8 <HAL_GetTick>
 801b44e:	4602      	mov	r2, r0
 801b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b452:	1ad3      	subs	r3, r2, r3
 801b454:	f241 3288 	movw	r2, #5000	; 0x1388
 801b458:	4293      	cmp	r3, r2
 801b45a:	d901      	bls.n	801b460 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 801b45c:	2303      	movs	r3, #3
 801b45e:	e14b      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801b460:	4b6d      	ldr	r3, [pc, #436]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b464:	f003 0302 	and.w	r3, r3, #2
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d0ee      	beq.n	801b44a <HAL_RCC_OscConfig+0x4f6>
 801b46c:	e014      	b.n	801b498 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801b46e:	f7f9 ff43 	bl	80152f8 <HAL_GetTick>
 801b472:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b474:	e00a      	b.n	801b48c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801b476:	f7f9 ff3f 	bl	80152f8 <HAL_GetTick>
 801b47a:	4602      	mov	r2, r0
 801b47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b47e:	1ad3      	subs	r3, r2, r3
 801b480:	f241 3288 	movw	r2, #5000	; 0x1388
 801b484:	4293      	cmp	r3, r2
 801b486:	d901      	bls.n	801b48c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 801b488:	2303      	movs	r3, #3
 801b48a:	e135      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801b48c:	4b62      	ldr	r3, [pc, #392]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b48e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b490:	f003 0302 	and.w	r3, r3, #2
 801b494:	2b00      	cmp	r3, #0
 801b496:	d1ee      	bne.n	801b476 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801b498:	687b      	ldr	r3, [r7, #4]
 801b49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	f000 812a 	beq.w	801b6f6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801b4a2:	4b5d      	ldr	r3, [pc, #372]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b4a4:	691b      	ldr	r3, [r3, #16]
 801b4a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801b4aa:	2b18      	cmp	r3, #24
 801b4ac:	f000 80ba 	beq.w	801b624 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801b4b0:	687b      	ldr	r3, [r7, #4]
 801b4b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b4b4:	2b02      	cmp	r3, #2
 801b4b6:	f040 8095 	bne.w	801b5e4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b4ba:	4b57      	ldr	r3, [pc, #348]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b4bc:	681b      	ldr	r3, [r3, #0]
 801b4be:	4a56      	ldr	r2, [pc, #344]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b4c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b4c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b4c6:	f7f9 ff17 	bl	80152f8 <HAL_GetTick>
 801b4ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b4cc:	e008      	b.n	801b4e0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b4ce:	f7f9 ff13 	bl	80152f8 <HAL_GetTick>
 801b4d2:	4602      	mov	r2, r0
 801b4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4d6:	1ad3      	subs	r3, r2, r3
 801b4d8:	2b02      	cmp	r3, #2
 801b4da:	d901      	bls.n	801b4e0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 801b4dc:	2303      	movs	r3, #3
 801b4de:	e10b      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b4e0:	4b4d      	ldr	r3, [pc, #308]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b4e2:	681b      	ldr	r3, [r3, #0]
 801b4e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b4e8:	2b00      	cmp	r3, #0
 801b4ea:	d1f0      	bne.n	801b4ce <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801b4ec:	4b4a      	ldr	r3, [pc, #296]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b4ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801b4f0:	4b4a      	ldr	r3, [pc, #296]	; (801b61c <HAL_RCC_OscConfig+0x6c8>)
 801b4f2:	4013      	ands	r3, r2
 801b4f4:	687a      	ldr	r2, [r7, #4]
 801b4f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 801b4f8:	687a      	ldr	r2, [r7, #4]
 801b4fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801b4fc:	0112      	lsls	r2, r2, #4
 801b4fe:	430a      	orrs	r2, r1
 801b500:	4945      	ldr	r1, [pc, #276]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b502:	4313      	orrs	r3, r2
 801b504:	628b      	str	r3, [r1, #40]	; 0x28
 801b506:	687b      	ldr	r3, [r7, #4]
 801b508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b50a:	3b01      	subs	r3, #1
 801b50c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b514:	3b01      	subs	r3, #1
 801b516:	025b      	lsls	r3, r3, #9
 801b518:	b29b      	uxth	r3, r3
 801b51a:	431a      	orrs	r2, r3
 801b51c:	687b      	ldr	r3, [r7, #4]
 801b51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b520:	3b01      	subs	r3, #1
 801b522:	041b      	lsls	r3, r3, #16
 801b524:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801b528:	431a      	orrs	r2, r3
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b52e:	3b01      	subs	r3, #1
 801b530:	061b      	lsls	r3, r3, #24
 801b532:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801b536:	4938      	ldr	r1, [pc, #224]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b538:	4313      	orrs	r3, r2
 801b53a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801b53c:	4b36      	ldr	r3, [pc, #216]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b540:	4a35      	ldr	r2, [pc, #212]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b542:	f023 0301 	bic.w	r3, r3, #1
 801b546:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b548:	4b33      	ldr	r3, [pc, #204]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b54a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b54c:	4b34      	ldr	r3, [pc, #208]	; (801b620 <HAL_RCC_OscConfig+0x6cc>)
 801b54e:	4013      	ands	r3, r2
 801b550:	687a      	ldr	r2, [r7, #4]
 801b552:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b554:	00d2      	lsls	r2, r2, #3
 801b556:	4930      	ldr	r1, [pc, #192]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b558:	4313      	orrs	r3, r2
 801b55a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801b55c:	4b2e      	ldr	r3, [pc, #184]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b55e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b560:	f023 020c 	bic.w	r2, r3, #12
 801b564:	687b      	ldr	r3, [r7, #4]
 801b566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801b568:	492b      	ldr	r1, [pc, #172]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b56a:	4313      	orrs	r3, r2
 801b56c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801b56e:	4b2a      	ldr	r3, [pc, #168]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b572:	f023 0202 	bic.w	r2, r3, #2
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801b57a:	4927      	ldr	r1, [pc, #156]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b57c:	4313      	orrs	r3, r2
 801b57e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801b580:	4b25      	ldr	r3, [pc, #148]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b584:	4a24      	ldr	r2, [pc, #144]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b586:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801b58a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b58c:	4b22      	ldr	r3, [pc, #136]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b590:	4a21      	ldr	r2, [pc, #132]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801b596:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801b598:	4b1f      	ldr	r3, [pc, #124]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b59c:	4a1e      	ldr	r2, [pc, #120]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b59e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b5a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801b5a4:	4b1c      	ldr	r3, [pc, #112]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b5a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b5a8:	4a1b      	ldr	r2, [pc, #108]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b5aa:	f043 0301 	orr.w	r3, r3, #1
 801b5ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801b5b0:	4b19      	ldr	r3, [pc, #100]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	4a18      	ldr	r2, [pc, #96]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b5b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801b5ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5bc:	f7f9 fe9c 	bl	80152f8 <HAL_GetTick>
 801b5c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b5c2:	e008      	b.n	801b5d6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b5c4:	f7f9 fe98 	bl	80152f8 <HAL_GetTick>
 801b5c8:	4602      	mov	r2, r0
 801b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5cc:	1ad3      	subs	r3, r2, r3
 801b5ce:	2b02      	cmp	r3, #2
 801b5d0:	d901      	bls.n	801b5d6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 801b5d2:	2303      	movs	r3, #3
 801b5d4:	e090      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b5d6:	4b10      	ldr	r3, [pc, #64]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b5d8:	681b      	ldr	r3, [r3, #0]
 801b5da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d0f0      	beq.n	801b5c4 <HAL_RCC_OscConfig+0x670>
 801b5e2:	e088      	b.n	801b6f6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801b5e4:	4b0c      	ldr	r3, [pc, #48]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b5e6:	681b      	ldr	r3, [r3, #0]
 801b5e8:	4a0b      	ldr	r2, [pc, #44]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b5ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801b5ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b5f0:	f7f9 fe82 	bl	80152f8 <HAL_GetTick>
 801b5f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b5f6:	e008      	b.n	801b60a <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801b5f8:	f7f9 fe7e 	bl	80152f8 <HAL_GetTick>
 801b5fc:	4602      	mov	r2, r0
 801b5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b600:	1ad3      	subs	r3, r2, r3
 801b602:	2b02      	cmp	r3, #2
 801b604:	d901      	bls.n	801b60a <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 801b606:	2303      	movs	r3, #3
 801b608:	e076      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801b60a:	4b03      	ldr	r3, [pc, #12]	; (801b618 <HAL_RCC_OscConfig+0x6c4>)
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b612:	2b00      	cmp	r3, #0
 801b614:	d1f0      	bne.n	801b5f8 <HAL_RCC_OscConfig+0x6a4>
 801b616:	e06e      	b.n	801b6f6 <HAL_RCC_OscConfig+0x7a2>
 801b618:	58024400 	.word	0x58024400
 801b61c:	fffffc0c 	.word	0xfffffc0c
 801b620:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801b624:	4b36      	ldr	r3, [pc, #216]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801b628:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801b62a:	4b35      	ldr	r3, [pc, #212]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b62e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b630:	687b      	ldr	r3, [r7, #4]
 801b632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b634:	2b01      	cmp	r3, #1
 801b636:	d031      	beq.n	801b69c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b638:	693b      	ldr	r3, [r7, #16]
 801b63a:	f003 0203 	and.w	r2, r3, #3
 801b63e:	687b      	ldr	r3, [r7, #4]
 801b640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801b642:	429a      	cmp	r2, r3
 801b644:	d12a      	bne.n	801b69c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b646:	693b      	ldr	r3, [r7, #16]
 801b648:	091b      	lsrs	r3, r3, #4
 801b64a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801b652:	429a      	cmp	r2, r3
 801b654:	d122      	bne.n	801b69c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b656:	68fb      	ldr	r3, [r7, #12]
 801b658:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801b660:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801b662:	429a      	cmp	r2, r3
 801b664:	d11a      	bne.n	801b69c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b666:	68fb      	ldr	r3, [r7, #12]
 801b668:	0a5b      	lsrs	r3, r3, #9
 801b66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b672:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801b674:	429a      	cmp	r2, r3
 801b676:	d111      	bne.n	801b69c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	0c1b      	lsrs	r3, r3, #16
 801b67c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b680:	687b      	ldr	r3, [r7, #4]
 801b682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801b684:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801b686:	429a      	cmp	r2, r3
 801b688:	d108      	bne.n	801b69c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801b68a:	68fb      	ldr	r3, [r7, #12]
 801b68c:	0e1b      	lsrs	r3, r3, #24
 801b68e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801b692:	687b      	ldr	r3, [r7, #4]
 801b694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801b696:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801b698:	429a      	cmp	r2, r3
 801b69a:	d001      	beq.n	801b6a0 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 801b69c:	2301      	movs	r3, #1
 801b69e:	e02b      	b.n	801b6f8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801b6a0:	4b17      	ldr	r3, [pc, #92]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b6a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801b6a4:	08db      	lsrs	r3, r3, #3
 801b6a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b6aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801b6b0:	693a      	ldr	r2, [r7, #16]
 801b6b2:	429a      	cmp	r2, r3
 801b6b4:	d01f      	beq.n	801b6f6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801b6b6:	4b12      	ldr	r3, [pc, #72]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b6b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6ba:	4a11      	ldr	r2, [pc, #68]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b6bc:	f023 0301 	bic.w	r3, r3, #1
 801b6c0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801b6c2:	f7f9 fe19 	bl	80152f8 <HAL_GetTick>
 801b6c6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801b6c8:	bf00      	nop
 801b6ca:	f7f9 fe15 	bl	80152f8 <HAL_GetTick>
 801b6ce:	4602      	mov	r2, r0
 801b6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b6d2:	4293      	cmp	r3, r2
 801b6d4:	d0f9      	beq.n	801b6ca <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801b6d6:	4b0a      	ldr	r3, [pc, #40]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b6d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801b6da:	4b0a      	ldr	r3, [pc, #40]	; (801b704 <HAL_RCC_OscConfig+0x7b0>)
 801b6dc:	4013      	ands	r3, r2
 801b6de:	687a      	ldr	r2, [r7, #4]
 801b6e0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801b6e2:	00d2      	lsls	r2, r2, #3
 801b6e4:	4906      	ldr	r1, [pc, #24]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b6e6:	4313      	orrs	r3, r2
 801b6e8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801b6ea:	4b05      	ldr	r3, [pc, #20]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801b6ee:	4a04      	ldr	r2, [pc, #16]	; (801b700 <HAL_RCC_OscConfig+0x7ac>)
 801b6f0:	f043 0301 	orr.w	r3, r3, #1
 801b6f4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801b6f6:	2300      	movs	r3, #0
}
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	3730      	adds	r7, #48	; 0x30
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}
 801b700:	58024400 	.word	0x58024400
 801b704:	ffff0007 	.word	0xffff0007

0801b708 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801b708:	b580      	push	{r7, lr}
 801b70a:	b086      	sub	sp, #24
 801b70c:	af00      	add	r7, sp, #0
 801b70e:	6078      	str	r0, [r7, #4]
 801b710:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801b712:	687b      	ldr	r3, [r7, #4]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d101      	bne.n	801b71c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801b718:	2301      	movs	r3, #1
 801b71a:	e19c      	b.n	801ba56 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801b71c:	4b8a      	ldr	r3, [pc, #552]	; (801b948 <HAL_RCC_ClockConfig+0x240>)
 801b71e:	681b      	ldr	r3, [r3, #0]
 801b720:	f003 030f 	and.w	r3, r3, #15
 801b724:	683a      	ldr	r2, [r7, #0]
 801b726:	429a      	cmp	r2, r3
 801b728:	d910      	bls.n	801b74c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b72a:	4b87      	ldr	r3, [pc, #540]	; (801b948 <HAL_RCC_ClockConfig+0x240>)
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	f023 020f 	bic.w	r2, r3, #15
 801b732:	4985      	ldr	r1, [pc, #532]	; (801b948 <HAL_RCC_ClockConfig+0x240>)
 801b734:	683b      	ldr	r3, [r7, #0]
 801b736:	4313      	orrs	r3, r2
 801b738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b73a:	4b83      	ldr	r3, [pc, #524]	; (801b948 <HAL_RCC_ClockConfig+0x240>)
 801b73c:	681b      	ldr	r3, [r3, #0]
 801b73e:	f003 030f 	and.w	r3, r3, #15
 801b742:	683a      	ldr	r2, [r7, #0]
 801b744:	429a      	cmp	r2, r3
 801b746:	d001      	beq.n	801b74c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801b748:	2301      	movs	r3, #1
 801b74a:	e184      	b.n	801ba56 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	f003 0304 	and.w	r3, r3, #4
 801b754:	2b00      	cmp	r3, #0
 801b756:	d010      	beq.n	801b77a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	691a      	ldr	r2, [r3, #16]
 801b75c:	4b7b      	ldr	r3, [pc, #492]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b75e:	699b      	ldr	r3, [r3, #24]
 801b760:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b764:	429a      	cmp	r2, r3
 801b766:	d908      	bls.n	801b77a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b768:	4b78      	ldr	r3, [pc, #480]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b76a:	699b      	ldr	r3, [r3, #24]
 801b76c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b770:	687b      	ldr	r3, [r7, #4]
 801b772:	691b      	ldr	r3, [r3, #16]
 801b774:	4975      	ldr	r1, [pc, #468]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b776:	4313      	orrs	r3, r2
 801b778:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	681b      	ldr	r3, [r3, #0]
 801b77e:	f003 0308 	and.w	r3, r3, #8
 801b782:	2b00      	cmp	r3, #0
 801b784:	d010      	beq.n	801b7a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	695a      	ldr	r2, [r3, #20]
 801b78a:	4b70      	ldr	r3, [pc, #448]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b78c:	69db      	ldr	r3, [r3, #28]
 801b78e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b792:	429a      	cmp	r2, r3
 801b794:	d908      	bls.n	801b7a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b796:	4b6d      	ldr	r3, [pc, #436]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b798:	69db      	ldr	r3, [r3, #28]
 801b79a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b79e:	687b      	ldr	r3, [r7, #4]
 801b7a0:	695b      	ldr	r3, [r3, #20]
 801b7a2:	496a      	ldr	r1, [pc, #424]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b7a4:	4313      	orrs	r3, r2
 801b7a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	f003 0310 	and.w	r3, r3, #16
 801b7b0:	2b00      	cmp	r3, #0
 801b7b2:	d010      	beq.n	801b7d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b7b4:	687b      	ldr	r3, [r7, #4]
 801b7b6:	699a      	ldr	r2, [r3, #24]
 801b7b8:	4b64      	ldr	r3, [pc, #400]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b7ba:	69db      	ldr	r3, [r3, #28]
 801b7bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b7c0:	429a      	cmp	r2, r3
 801b7c2:	d908      	bls.n	801b7d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b7c4:	4b61      	ldr	r3, [pc, #388]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b7c6:	69db      	ldr	r3, [r3, #28]
 801b7c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	699b      	ldr	r3, [r3, #24]
 801b7d0:	495e      	ldr	r1, [pc, #376]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b7d2:	4313      	orrs	r3, r2
 801b7d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	f003 0320 	and.w	r3, r3, #32
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d010      	beq.n	801b804 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b7e2:	687b      	ldr	r3, [r7, #4]
 801b7e4:	69da      	ldr	r2, [r3, #28]
 801b7e6:	4b59      	ldr	r3, [pc, #356]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b7e8:	6a1b      	ldr	r3, [r3, #32]
 801b7ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b7ee:	429a      	cmp	r2, r3
 801b7f0:	d908      	bls.n	801b804 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b7f2:	4b56      	ldr	r3, [pc, #344]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b7f4:	6a1b      	ldr	r3, [r3, #32]
 801b7f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	69db      	ldr	r3, [r3, #28]
 801b7fe:	4953      	ldr	r1, [pc, #332]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b800:	4313      	orrs	r3, r2
 801b802:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	f003 0302 	and.w	r3, r3, #2
 801b80c:	2b00      	cmp	r3, #0
 801b80e:	d010      	beq.n	801b832 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b810:	687b      	ldr	r3, [r7, #4]
 801b812:	68da      	ldr	r2, [r3, #12]
 801b814:	4b4d      	ldr	r3, [pc, #308]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b816:	699b      	ldr	r3, [r3, #24]
 801b818:	f003 030f 	and.w	r3, r3, #15
 801b81c:	429a      	cmp	r2, r3
 801b81e:	d908      	bls.n	801b832 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b820:	4b4a      	ldr	r3, [pc, #296]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b822:	699b      	ldr	r3, [r3, #24]
 801b824:	f023 020f 	bic.w	r2, r3, #15
 801b828:	687b      	ldr	r3, [r7, #4]
 801b82a:	68db      	ldr	r3, [r3, #12]
 801b82c:	4947      	ldr	r1, [pc, #284]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b82e:	4313      	orrs	r3, r2
 801b830:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801b832:	687b      	ldr	r3, [r7, #4]
 801b834:	681b      	ldr	r3, [r3, #0]
 801b836:	f003 0301 	and.w	r3, r3, #1
 801b83a:	2b00      	cmp	r3, #0
 801b83c:	d055      	beq.n	801b8ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801b83e:	4b43      	ldr	r3, [pc, #268]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b840:	699b      	ldr	r3, [r3, #24]
 801b842:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 801b846:	687b      	ldr	r3, [r7, #4]
 801b848:	689b      	ldr	r3, [r3, #8]
 801b84a:	4940      	ldr	r1, [pc, #256]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b84c:	4313      	orrs	r3, r2
 801b84e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801b850:	687b      	ldr	r3, [r7, #4]
 801b852:	685b      	ldr	r3, [r3, #4]
 801b854:	2b02      	cmp	r3, #2
 801b856:	d107      	bne.n	801b868 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b858:	4b3c      	ldr	r3, [pc, #240]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801b860:	2b00      	cmp	r3, #0
 801b862:	d121      	bne.n	801b8a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b864:	2301      	movs	r3, #1
 801b866:	e0f6      	b.n	801ba56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801b868:	687b      	ldr	r3, [r7, #4]
 801b86a:	685b      	ldr	r3, [r3, #4]
 801b86c:	2b03      	cmp	r3, #3
 801b86e:	d107      	bne.n	801b880 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801b870:	4b36      	ldr	r3, [pc, #216]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801b878:	2b00      	cmp	r3, #0
 801b87a:	d115      	bne.n	801b8a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b87c:	2301      	movs	r3, #1
 801b87e:	e0ea      	b.n	801ba56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801b880:	687b      	ldr	r3, [r7, #4]
 801b882:	685b      	ldr	r3, [r3, #4]
 801b884:	2b01      	cmp	r3, #1
 801b886:	d107      	bne.n	801b898 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b888:	4b30      	ldr	r3, [pc, #192]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b88a:	681b      	ldr	r3, [r3, #0]
 801b88c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b890:	2b00      	cmp	r3, #0
 801b892:	d109      	bne.n	801b8a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b894:	2301      	movs	r3, #1
 801b896:	e0de      	b.n	801ba56 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b898:	4b2c      	ldr	r3, [pc, #176]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b89a:	681b      	ldr	r3, [r3, #0]
 801b89c:	f003 0304 	and.w	r3, r3, #4
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d101      	bne.n	801b8a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801b8a4:	2301      	movs	r3, #1
 801b8a6:	e0d6      	b.n	801ba56 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801b8a8:	4b28      	ldr	r3, [pc, #160]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b8aa:	691b      	ldr	r3, [r3, #16]
 801b8ac:	f023 0207 	bic.w	r2, r3, #7
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	685b      	ldr	r3, [r3, #4]
 801b8b4:	4925      	ldr	r1, [pc, #148]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b8b6:	4313      	orrs	r3, r2
 801b8b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801b8ba:	f7f9 fd1d 	bl	80152f8 <HAL_GetTick>
 801b8be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b8c0:	e00a      	b.n	801b8d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801b8c2:	f7f9 fd19 	bl	80152f8 <HAL_GetTick>
 801b8c6:	4602      	mov	r2, r0
 801b8c8:	697b      	ldr	r3, [r7, #20]
 801b8ca:	1ad3      	subs	r3, r2, r3
 801b8cc:	f241 3288 	movw	r2, #5000	; 0x1388
 801b8d0:	4293      	cmp	r3, r2
 801b8d2:	d901      	bls.n	801b8d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801b8d4:	2303      	movs	r3, #3
 801b8d6:	e0be      	b.n	801ba56 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801b8d8:	4b1c      	ldr	r3, [pc, #112]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b8da:	691b      	ldr	r3, [r3, #16]
 801b8dc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801b8e0:	687b      	ldr	r3, [r7, #4]
 801b8e2:	685b      	ldr	r3, [r3, #4]
 801b8e4:	00db      	lsls	r3, r3, #3
 801b8e6:	429a      	cmp	r2, r3
 801b8e8:	d1eb      	bne.n	801b8c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	681b      	ldr	r3, [r3, #0]
 801b8ee:	f003 0302 	and.w	r3, r3, #2
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d010      	beq.n	801b918 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	68da      	ldr	r2, [r3, #12]
 801b8fa:	4b14      	ldr	r3, [pc, #80]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b8fc:	699b      	ldr	r3, [r3, #24]
 801b8fe:	f003 030f 	and.w	r3, r3, #15
 801b902:	429a      	cmp	r2, r3
 801b904:	d208      	bcs.n	801b918 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801b906:	4b11      	ldr	r3, [pc, #68]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b908:	699b      	ldr	r3, [r3, #24]
 801b90a:	f023 020f 	bic.w	r2, r3, #15
 801b90e:	687b      	ldr	r3, [r7, #4]
 801b910:	68db      	ldr	r3, [r3, #12]
 801b912:	490e      	ldr	r1, [pc, #56]	; (801b94c <HAL_RCC_ClockConfig+0x244>)
 801b914:	4313      	orrs	r3, r2
 801b916:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801b918:	4b0b      	ldr	r3, [pc, #44]	; (801b948 <HAL_RCC_ClockConfig+0x240>)
 801b91a:	681b      	ldr	r3, [r3, #0]
 801b91c:	f003 030f 	and.w	r3, r3, #15
 801b920:	683a      	ldr	r2, [r7, #0]
 801b922:	429a      	cmp	r2, r3
 801b924:	d214      	bcs.n	801b950 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801b926:	4b08      	ldr	r3, [pc, #32]	; (801b948 <HAL_RCC_ClockConfig+0x240>)
 801b928:	681b      	ldr	r3, [r3, #0]
 801b92a:	f023 020f 	bic.w	r2, r3, #15
 801b92e:	4906      	ldr	r1, [pc, #24]	; (801b948 <HAL_RCC_ClockConfig+0x240>)
 801b930:	683b      	ldr	r3, [r7, #0]
 801b932:	4313      	orrs	r3, r2
 801b934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801b936:	4b04      	ldr	r3, [pc, #16]	; (801b948 <HAL_RCC_ClockConfig+0x240>)
 801b938:	681b      	ldr	r3, [r3, #0]
 801b93a:	f003 030f 	and.w	r3, r3, #15
 801b93e:	683a      	ldr	r2, [r7, #0]
 801b940:	429a      	cmp	r2, r3
 801b942:	d005      	beq.n	801b950 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801b944:	2301      	movs	r3, #1
 801b946:	e086      	b.n	801ba56 <HAL_RCC_ClockConfig+0x34e>
 801b948:	52002000 	.word	0x52002000
 801b94c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	f003 0304 	and.w	r3, r3, #4
 801b958:	2b00      	cmp	r3, #0
 801b95a:	d010      	beq.n	801b97e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801b95c:	687b      	ldr	r3, [r7, #4]
 801b95e:	691a      	ldr	r2, [r3, #16]
 801b960:	4b3f      	ldr	r3, [pc, #252]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b962:	699b      	ldr	r3, [r3, #24]
 801b964:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b968:	429a      	cmp	r2, r3
 801b96a:	d208      	bcs.n	801b97e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801b96c:	4b3c      	ldr	r3, [pc, #240]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b96e:	699b      	ldr	r3, [r3, #24]
 801b970:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	691b      	ldr	r3, [r3, #16]
 801b978:	4939      	ldr	r1, [pc, #228]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b97a:	4313      	orrs	r3, r2
 801b97c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	681b      	ldr	r3, [r3, #0]
 801b982:	f003 0308 	and.w	r3, r3, #8
 801b986:	2b00      	cmp	r3, #0
 801b988:	d010      	beq.n	801b9ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801b98a:	687b      	ldr	r3, [r7, #4]
 801b98c:	695a      	ldr	r2, [r3, #20]
 801b98e:	4b34      	ldr	r3, [pc, #208]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b990:	69db      	ldr	r3, [r3, #28]
 801b992:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b996:	429a      	cmp	r2, r3
 801b998:	d208      	bcs.n	801b9ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801b99a:	4b31      	ldr	r3, [pc, #196]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b99c:	69db      	ldr	r3, [r3, #28]
 801b99e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	695b      	ldr	r3, [r3, #20]
 801b9a6:	492e      	ldr	r1, [pc, #184]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b9a8:	4313      	orrs	r3, r2
 801b9aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801b9ac:	687b      	ldr	r3, [r7, #4]
 801b9ae:	681b      	ldr	r3, [r3, #0]
 801b9b0:	f003 0310 	and.w	r3, r3, #16
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d010      	beq.n	801b9da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	699a      	ldr	r2, [r3, #24]
 801b9bc:	4b28      	ldr	r3, [pc, #160]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b9be:	69db      	ldr	r3, [r3, #28]
 801b9c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b9c4:	429a      	cmp	r2, r3
 801b9c6:	d208      	bcs.n	801b9da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801b9c8:	4b25      	ldr	r3, [pc, #148]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b9ca:	69db      	ldr	r3, [r3, #28]
 801b9cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 801b9d0:	687b      	ldr	r3, [r7, #4]
 801b9d2:	699b      	ldr	r3, [r3, #24]
 801b9d4:	4922      	ldr	r1, [pc, #136]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b9d6:	4313      	orrs	r3, r2
 801b9d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	681b      	ldr	r3, [r3, #0]
 801b9de:	f003 0320 	and.w	r3, r3, #32
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d010      	beq.n	801ba08 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801b9e6:	687b      	ldr	r3, [r7, #4]
 801b9e8:	69da      	ldr	r2, [r3, #28]
 801b9ea:	4b1d      	ldr	r3, [pc, #116]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b9ec:	6a1b      	ldr	r3, [r3, #32]
 801b9ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801b9f2:	429a      	cmp	r2, r3
 801b9f4:	d208      	bcs.n	801ba08 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801b9f6:	4b1a      	ldr	r3, [pc, #104]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801b9f8:	6a1b      	ldr	r3, [r3, #32]
 801b9fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	69db      	ldr	r3, [r3, #28]
 801ba02:	4917      	ldr	r1, [pc, #92]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801ba04:	4313      	orrs	r3, r2
 801ba06:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801ba08:	f000 f834 	bl	801ba74 <HAL_RCC_GetSysClockFreq>
 801ba0c:	4602      	mov	r2, r0
 801ba0e:	4b14      	ldr	r3, [pc, #80]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801ba10:	699b      	ldr	r3, [r3, #24]
 801ba12:	0a1b      	lsrs	r3, r3, #8
 801ba14:	f003 030f 	and.w	r3, r3, #15
 801ba18:	4912      	ldr	r1, [pc, #72]	; (801ba64 <HAL_RCC_ClockConfig+0x35c>)
 801ba1a:	5ccb      	ldrb	r3, [r1, r3]
 801ba1c:	f003 031f 	and.w	r3, r3, #31
 801ba20:	fa22 f303 	lsr.w	r3, r2, r3
 801ba24:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801ba26:	4b0e      	ldr	r3, [pc, #56]	; (801ba60 <HAL_RCC_ClockConfig+0x358>)
 801ba28:	699b      	ldr	r3, [r3, #24]
 801ba2a:	f003 030f 	and.w	r3, r3, #15
 801ba2e:	4a0d      	ldr	r2, [pc, #52]	; (801ba64 <HAL_RCC_ClockConfig+0x35c>)
 801ba30:	5cd3      	ldrb	r3, [r2, r3]
 801ba32:	f003 031f 	and.w	r3, r3, #31
 801ba36:	693a      	ldr	r2, [r7, #16]
 801ba38:	fa22 f303 	lsr.w	r3, r2, r3
 801ba3c:	4a0a      	ldr	r2, [pc, #40]	; (801ba68 <HAL_RCC_ClockConfig+0x360>)
 801ba3e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801ba40:	4a0a      	ldr	r2, [pc, #40]	; (801ba6c <HAL_RCC_ClockConfig+0x364>)
 801ba42:	693b      	ldr	r3, [r7, #16]
 801ba44:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801ba46:	4b0a      	ldr	r3, [pc, #40]	; (801ba70 <HAL_RCC_ClockConfig+0x368>)
 801ba48:	681b      	ldr	r3, [r3, #0]
 801ba4a:	4618      	mov	r0, r3
 801ba4c:	f7f9 fc0a 	bl	8015264 <HAL_InitTick>
 801ba50:	4603      	mov	r3, r0
 801ba52:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801ba54:	7bfb      	ldrb	r3, [r7, #15]
}
 801ba56:	4618      	mov	r0, r3
 801ba58:	3718      	adds	r7, #24
 801ba5a:	46bd      	mov	sp, r7
 801ba5c:	bd80      	pop	{r7, pc}
 801ba5e:	bf00      	nop
 801ba60:	58024400 	.word	0x58024400
 801ba64:	08020d10 	.word	0x08020d10
 801ba68:	24000008 	.word	0x24000008
 801ba6c:	24000004 	.word	0x24000004
 801ba70:	2400000c 	.word	0x2400000c

0801ba74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ba74:	b480      	push	{r7}
 801ba76:	b089      	sub	sp, #36	; 0x24
 801ba78:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ba7a:	4bb3      	ldr	r3, [pc, #716]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ba7c:	691b      	ldr	r3, [r3, #16]
 801ba7e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801ba82:	2b18      	cmp	r3, #24
 801ba84:	f200 8155 	bhi.w	801bd32 <HAL_RCC_GetSysClockFreq+0x2be>
 801ba88:	a201      	add	r2, pc, #4	; (adr r2, 801ba90 <HAL_RCC_GetSysClockFreq+0x1c>)
 801ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba8e:	bf00      	nop
 801ba90:	0801baf5 	.word	0x0801baf5
 801ba94:	0801bd33 	.word	0x0801bd33
 801ba98:	0801bd33 	.word	0x0801bd33
 801ba9c:	0801bd33 	.word	0x0801bd33
 801baa0:	0801bd33 	.word	0x0801bd33
 801baa4:	0801bd33 	.word	0x0801bd33
 801baa8:	0801bd33 	.word	0x0801bd33
 801baac:	0801bd33 	.word	0x0801bd33
 801bab0:	0801bb1b 	.word	0x0801bb1b
 801bab4:	0801bd33 	.word	0x0801bd33
 801bab8:	0801bd33 	.word	0x0801bd33
 801babc:	0801bd33 	.word	0x0801bd33
 801bac0:	0801bd33 	.word	0x0801bd33
 801bac4:	0801bd33 	.word	0x0801bd33
 801bac8:	0801bd33 	.word	0x0801bd33
 801bacc:	0801bd33 	.word	0x0801bd33
 801bad0:	0801bb21 	.word	0x0801bb21
 801bad4:	0801bd33 	.word	0x0801bd33
 801bad8:	0801bd33 	.word	0x0801bd33
 801badc:	0801bd33 	.word	0x0801bd33
 801bae0:	0801bd33 	.word	0x0801bd33
 801bae4:	0801bd33 	.word	0x0801bd33
 801bae8:	0801bd33 	.word	0x0801bd33
 801baec:	0801bd33 	.word	0x0801bd33
 801baf0:	0801bb27 	.word	0x0801bb27
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801baf4:	4b94      	ldr	r3, [pc, #592]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	f003 0320 	and.w	r3, r3, #32
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d009      	beq.n	801bb14 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bb00:	4b91      	ldr	r3, [pc, #580]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb02:	681b      	ldr	r3, [r3, #0]
 801bb04:	08db      	lsrs	r3, r3, #3
 801bb06:	f003 0303 	and.w	r3, r3, #3
 801bb0a:	4a90      	ldr	r2, [pc, #576]	; (801bd4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bb0c:	fa22 f303 	lsr.w	r3, r2, r3
 801bb10:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801bb12:	e111      	b.n	801bd38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801bb14:	4b8d      	ldr	r3, [pc, #564]	; (801bd4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bb16:	61bb      	str	r3, [r7, #24]
      break;
 801bb18:	e10e      	b.n	801bd38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801bb1a:	4b8d      	ldr	r3, [pc, #564]	; (801bd50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bb1c:	61bb      	str	r3, [r7, #24]
      break;
 801bb1e:	e10b      	b.n	801bd38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801bb20:	4b8c      	ldr	r3, [pc, #560]	; (801bd54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801bb22:	61bb      	str	r3, [r7, #24]
      break;
 801bb24:	e108      	b.n	801bd38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801bb26:	4b88      	ldr	r3, [pc, #544]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb2a:	f003 0303 	and.w	r3, r3, #3
 801bb2e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801bb30:	4b85      	ldr	r3, [pc, #532]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801bb34:	091b      	lsrs	r3, r3, #4
 801bb36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bb3a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801bb3c:	4b82      	ldr	r3, [pc, #520]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bb40:	f003 0301 	and.w	r3, r3, #1
 801bb44:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801bb46:	4b80      	ldr	r3, [pc, #512]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801bb4a:	08db      	lsrs	r3, r3, #3
 801bb4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bb50:	68fa      	ldr	r2, [r7, #12]
 801bb52:	fb02 f303 	mul.w	r3, r2, r3
 801bb56:	ee07 3a90 	vmov	s15, r3
 801bb5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bb5e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801bb62:	693b      	ldr	r3, [r7, #16]
 801bb64:	2b00      	cmp	r3, #0
 801bb66:	f000 80e1 	beq.w	801bd2c <HAL_RCC_GetSysClockFreq+0x2b8>
 801bb6a:	697b      	ldr	r3, [r7, #20]
 801bb6c:	2b02      	cmp	r3, #2
 801bb6e:	f000 8083 	beq.w	801bc78 <HAL_RCC_GetSysClockFreq+0x204>
 801bb72:	697b      	ldr	r3, [r7, #20]
 801bb74:	2b02      	cmp	r3, #2
 801bb76:	f200 80a1 	bhi.w	801bcbc <HAL_RCC_GetSysClockFreq+0x248>
 801bb7a:	697b      	ldr	r3, [r7, #20]
 801bb7c:	2b00      	cmp	r3, #0
 801bb7e:	d003      	beq.n	801bb88 <HAL_RCC_GetSysClockFreq+0x114>
 801bb80:	697b      	ldr	r3, [r7, #20]
 801bb82:	2b01      	cmp	r3, #1
 801bb84:	d056      	beq.n	801bc34 <HAL_RCC_GetSysClockFreq+0x1c0>
 801bb86:	e099      	b.n	801bcbc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801bb88:	4b6f      	ldr	r3, [pc, #444]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb8a:	681b      	ldr	r3, [r3, #0]
 801bb8c:	f003 0320 	and.w	r3, r3, #32
 801bb90:	2b00      	cmp	r3, #0
 801bb92:	d02d      	beq.n	801bbf0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801bb94:	4b6c      	ldr	r3, [pc, #432]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bb96:	681b      	ldr	r3, [r3, #0]
 801bb98:	08db      	lsrs	r3, r3, #3
 801bb9a:	f003 0303 	and.w	r3, r3, #3
 801bb9e:	4a6b      	ldr	r2, [pc, #428]	; (801bd4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801bba0:	fa22 f303 	lsr.w	r3, r2, r3
 801bba4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	ee07 3a90 	vmov	s15, r3
 801bbac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bbb0:	693b      	ldr	r3, [r7, #16]
 801bbb2:	ee07 3a90 	vmov	s15, r3
 801bbb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bbba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bbbe:	4b62      	ldr	r3, [pc, #392]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bbc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bbc6:	ee07 3a90 	vmov	s15, r3
 801bbca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bbce:	ed97 6a02 	vldr	s12, [r7, #8]
 801bbd2:	eddf 5a61 	vldr	s11, [pc, #388]	; 801bd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bbd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bbda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bbde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bbe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bbea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801bbee:	e087      	b.n	801bd00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bbf0:	693b      	ldr	r3, [r7, #16]
 801bbf2:	ee07 3a90 	vmov	s15, r3
 801bbf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bbfa:	eddf 6a58 	vldr	s13, [pc, #352]	; 801bd5c <HAL_RCC_GetSysClockFreq+0x2e8>
 801bbfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc02:	4b51      	ldr	r3, [pc, #324]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc0a:	ee07 3a90 	vmov	s15, r3
 801bc0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc12:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc16:	eddf 5a50 	vldr	s11, [pc, #320]	; 801bd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bc1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bc32:	e065      	b.n	801bd00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc34:	693b      	ldr	r3, [r7, #16]
 801bc36:	ee07 3a90 	vmov	s15, r3
 801bc3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc3e:	eddf 6a48 	vldr	s13, [pc, #288]	; 801bd60 <HAL_RCC_GetSysClockFreq+0x2ec>
 801bc42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc46:	4b40      	ldr	r3, [pc, #256]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc4e:	ee07 3a90 	vmov	s15, r3
 801bc52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc56:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc5a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801bd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bc5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bc62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bc66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bc6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bc6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bc72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bc76:	e043      	b.n	801bd00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bc78:	693b      	ldr	r3, [r7, #16]
 801bc7a:	ee07 3a90 	vmov	s15, r3
 801bc7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bc82:	eddf 6a38 	vldr	s13, [pc, #224]	; 801bd64 <HAL_RCC_GetSysClockFreq+0x2f0>
 801bc86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bc8a:	4b2f      	ldr	r3, [pc, #188]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bc8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bc8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bc92:	ee07 3a90 	vmov	s15, r3
 801bc96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bc9a:	ed97 6a02 	vldr	s12, [r7, #8]
 801bc9e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 801bd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bcaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bcae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bcb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bcb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bcba:	e021      	b.n	801bd00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801bcbc:	693b      	ldr	r3, [r7, #16]
 801bcbe:	ee07 3a90 	vmov	s15, r3
 801bcc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801bcc6:	eddf 6a26 	vldr	s13, [pc, #152]	; 801bd60 <HAL_RCC_GetSysClockFreq+0x2ec>
 801bcca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801bcce:	4b1e      	ldr	r3, [pc, #120]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bcd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801bcd6:	ee07 3a90 	vmov	s15, r3
 801bcda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801bcde:	ed97 6a02 	vldr	s12, [r7, #8]
 801bce2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801bd58 <HAL_RCC_GetSysClockFreq+0x2e4>
 801bce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801bcea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801bcee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801bcf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801bcf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801bcfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801bcfe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801bd00:	4b11      	ldr	r3, [pc, #68]	; (801bd48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801bd02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bd04:	0a5b      	lsrs	r3, r3, #9
 801bd06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801bd0a:	3301      	adds	r3, #1
 801bd0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801bd0e:	683b      	ldr	r3, [r7, #0]
 801bd10:	ee07 3a90 	vmov	s15, r3
 801bd14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801bd18:	edd7 6a07 	vldr	s13, [r7, #28]
 801bd1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801bd20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bd24:	ee17 3a90 	vmov	r3, s15
 801bd28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801bd2a:	e005      	b.n	801bd38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801bd2c:	2300      	movs	r3, #0
 801bd2e:	61bb      	str	r3, [r7, #24]
      break;
 801bd30:	e002      	b.n	801bd38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801bd32:	4b07      	ldr	r3, [pc, #28]	; (801bd50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801bd34:	61bb      	str	r3, [r7, #24]
      break;
 801bd36:	bf00      	nop
  }

  return sysclockfreq;
 801bd38:	69bb      	ldr	r3, [r7, #24]
}
 801bd3a:	4618      	mov	r0, r3
 801bd3c:	3724      	adds	r7, #36	; 0x24
 801bd3e:	46bd      	mov	sp, r7
 801bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd44:	4770      	bx	lr
 801bd46:	bf00      	nop
 801bd48:	58024400 	.word	0x58024400
 801bd4c:	03d09000 	.word	0x03d09000
 801bd50:	003d0900 	.word	0x003d0900
 801bd54:	007a1200 	.word	0x007a1200
 801bd58:	46000000 	.word	0x46000000
 801bd5c:	4c742400 	.word	0x4c742400
 801bd60:	4a742400 	.word	0x4a742400
 801bd64:	4af42400 	.word	0x4af42400

0801bd68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	b082      	sub	sp, #8
 801bd6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801bd6e:	f7ff fe81 	bl	801ba74 <HAL_RCC_GetSysClockFreq>
 801bd72:	4602      	mov	r2, r0
 801bd74:	4b10      	ldr	r3, [pc, #64]	; (801bdb8 <HAL_RCC_GetHCLKFreq+0x50>)
 801bd76:	699b      	ldr	r3, [r3, #24]
 801bd78:	0a1b      	lsrs	r3, r3, #8
 801bd7a:	f003 030f 	and.w	r3, r3, #15
 801bd7e:	490f      	ldr	r1, [pc, #60]	; (801bdbc <HAL_RCC_GetHCLKFreq+0x54>)
 801bd80:	5ccb      	ldrb	r3, [r1, r3]
 801bd82:	f003 031f 	and.w	r3, r3, #31
 801bd86:	fa22 f303 	lsr.w	r3, r2, r3
 801bd8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801bd8c:	4b0a      	ldr	r3, [pc, #40]	; (801bdb8 <HAL_RCC_GetHCLKFreq+0x50>)
 801bd8e:	699b      	ldr	r3, [r3, #24]
 801bd90:	f003 030f 	and.w	r3, r3, #15
 801bd94:	4a09      	ldr	r2, [pc, #36]	; (801bdbc <HAL_RCC_GetHCLKFreq+0x54>)
 801bd96:	5cd3      	ldrb	r3, [r2, r3]
 801bd98:	f003 031f 	and.w	r3, r3, #31
 801bd9c:	687a      	ldr	r2, [r7, #4]
 801bd9e:	fa22 f303 	lsr.w	r3, r2, r3
 801bda2:	4a07      	ldr	r2, [pc, #28]	; (801bdc0 <HAL_RCC_GetHCLKFreq+0x58>)
 801bda4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801bda6:	4a07      	ldr	r2, [pc, #28]	; (801bdc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 801bda8:	687b      	ldr	r3, [r7, #4]
 801bdaa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801bdac:	4b04      	ldr	r3, [pc, #16]	; (801bdc0 <HAL_RCC_GetHCLKFreq+0x58>)
 801bdae:	681b      	ldr	r3, [r3, #0]
}
 801bdb0:	4618      	mov	r0, r3
 801bdb2:	3708      	adds	r7, #8
 801bdb4:	46bd      	mov	sp, r7
 801bdb6:	bd80      	pop	{r7, pc}
 801bdb8:	58024400 	.word	0x58024400
 801bdbc:	08020d10 	.word	0x08020d10
 801bdc0:	24000008 	.word	0x24000008
 801bdc4:	24000004 	.word	0x24000004

0801bdc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801bdcc:	f7ff ffcc 	bl	801bd68 <HAL_RCC_GetHCLKFreq>
 801bdd0:	4602      	mov	r2, r0
 801bdd2:	4b06      	ldr	r3, [pc, #24]	; (801bdec <HAL_RCC_GetPCLK1Freq+0x24>)
 801bdd4:	69db      	ldr	r3, [r3, #28]
 801bdd6:	091b      	lsrs	r3, r3, #4
 801bdd8:	f003 0307 	and.w	r3, r3, #7
 801bddc:	4904      	ldr	r1, [pc, #16]	; (801bdf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801bdde:	5ccb      	ldrb	r3, [r1, r3]
 801bde0:	f003 031f 	and.w	r3, r3, #31
 801bde4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801bde8:	4618      	mov	r0, r3
 801bdea:	bd80      	pop	{r7, pc}
 801bdec:	58024400 	.word	0x58024400
 801bdf0:	08020d10 	.word	0x08020d10

0801bdf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801bdf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801bdf8:	b0c6      	sub	sp, #280	; 0x118
 801bdfa:	af00      	add	r7, sp, #0
 801bdfc:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801be00:	2300      	movs	r3, #0
 801be02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801be06:	2300      	movs	r3, #0
 801be08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801be0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be14:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 801be18:	2500      	movs	r5, #0
 801be1a:	ea54 0305 	orrs.w	r3, r4, r5
 801be1e:	d049      	beq.n	801beb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801be20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801be26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801be2a:	d02f      	beq.n	801be8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801be2c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801be30:	d828      	bhi.n	801be84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801be32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801be36:	d01a      	beq.n	801be6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801be38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801be3c:	d822      	bhi.n	801be84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801be3e:	2b00      	cmp	r3, #0
 801be40:	d003      	beq.n	801be4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801be42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801be46:	d007      	beq.n	801be58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801be48:	e01c      	b.n	801be84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801be4a:	4bab      	ldr	r3, [pc, #684]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801be4e:	4aaa      	ldr	r2, [pc, #680]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801be54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801be56:	e01a      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801be58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be5c:	3308      	adds	r3, #8
 801be5e:	2102      	movs	r1, #2
 801be60:	4618      	mov	r0, r3
 801be62:	f002 fa49 	bl	801e2f8 <RCCEx_PLL2_Config>
 801be66:	4603      	mov	r3, r0
 801be68:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801be6c:	e00f      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801be6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801be72:	3328      	adds	r3, #40	; 0x28
 801be74:	2102      	movs	r1, #2
 801be76:	4618      	mov	r0, r3
 801be78:	f002 faf0 	bl	801e45c <RCCEx_PLL3_Config>
 801be7c:	4603      	mov	r3, r0
 801be7e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801be82:	e004      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801be84:	2301      	movs	r3, #1
 801be86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801be8a:	e000      	b.n	801be8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801be8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801be8e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801be92:	2b00      	cmp	r3, #0
 801be94:	d10a      	bne.n	801beac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801be96:	4b98      	ldr	r3, [pc, #608]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801be98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801be9a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801be9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801bea4:	4a94      	ldr	r2, [pc, #592]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bea6:	430b      	orrs	r3, r1
 801bea8:	6513      	str	r3, [r2, #80]	; 0x50
 801beaa:	e003      	b.n	801beb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801beac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801beb0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801beb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801beb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bebc:	f402 7880 	and.w	r8, r2, #256	; 0x100
 801bec0:	f04f 0900 	mov.w	r9, #0
 801bec4:	ea58 0309 	orrs.w	r3, r8, r9
 801bec8:	d047      	beq.n	801bf5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801beca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bed0:	2b04      	cmp	r3, #4
 801bed2:	d82a      	bhi.n	801bf2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801bed4:	a201      	add	r2, pc, #4	; (adr r2, 801bedc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801bed6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801beda:	bf00      	nop
 801bedc:	0801bef1 	.word	0x0801bef1
 801bee0:	0801beff 	.word	0x0801beff
 801bee4:	0801bf15 	.word	0x0801bf15
 801bee8:	0801bf33 	.word	0x0801bf33
 801beec:	0801bf33 	.word	0x0801bf33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bef0:	4b81      	ldr	r3, [pc, #516]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bef4:	4a80      	ldr	r2, [pc, #512]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801befa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801befc:	e01a      	b.n	801bf34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801befe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf02:	3308      	adds	r3, #8
 801bf04:	2100      	movs	r1, #0
 801bf06:	4618      	mov	r0, r3
 801bf08:	f002 f9f6 	bl	801e2f8 <RCCEx_PLL2_Config>
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf12:	e00f      	b.n	801bf34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bf14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf18:	3328      	adds	r3, #40	; 0x28
 801bf1a:	2100      	movs	r1, #0
 801bf1c:	4618      	mov	r0, r3
 801bf1e:	f002 fa9d 	bl	801e45c <RCCEx_PLL3_Config>
 801bf22:	4603      	mov	r3, r0
 801bf24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bf28:	e004      	b.n	801bf34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bf2a:	2301      	movs	r3, #1
 801bf2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bf30:	e000      	b.n	801bf34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801bf32:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf34:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bf38:	2b00      	cmp	r3, #0
 801bf3a:	d10a      	bne.n	801bf52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801bf3c:	4b6e      	ldr	r3, [pc, #440]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801bf40:	f023 0107 	bic.w	r1, r3, #7
 801bf44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801bf4a:	4a6b      	ldr	r2, [pc, #428]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bf4c:	430b      	orrs	r3, r1
 801bf4e:	6513      	str	r3, [r2, #80]	; 0x50
 801bf50:	e003      	b.n	801bf5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bf52:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801bf56:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801bf5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf62:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 801bf66:	f04f 0b00 	mov.w	fp, #0
 801bf6a:	ea5a 030b 	orrs.w	r3, sl, fp
 801bf6e:	d05b      	beq.n	801c028 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801bf70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bf74:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801bf78:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801bf7c:	d03b      	beq.n	801bff6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 801bf7e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 801bf82:	d834      	bhi.n	801bfee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bf88:	d037      	beq.n	801bffa <HAL_RCCEx_PeriphCLKConfig+0x206>
 801bf8a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801bf8e:	d82e      	bhi.n	801bfee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf90:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801bf94:	d033      	beq.n	801bffe <HAL_RCCEx_PeriphCLKConfig+0x20a>
 801bf96:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801bf9a:	d828      	bhi.n	801bfee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bf9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bfa0:	d01a      	beq.n	801bfd8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 801bfa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801bfa6:	d822      	bhi.n	801bfee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 801bfa8:	2b00      	cmp	r3, #0
 801bfaa:	d003      	beq.n	801bfb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 801bfac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801bfb0:	d007      	beq.n	801bfc2 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 801bfb2:	e01c      	b.n	801bfee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bfb4:	4b50      	ldr	r3, [pc, #320]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bfb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801bfb8:	4a4f      	ldr	r2, [pc, #316]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801bfba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801bfbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bfc0:	e01e      	b.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bfc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfc6:	3308      	adds	r3, #8
 801bfc8:	2100      	movs	r1, #0
 801bfca:	4618      	mov	r0, r3
 801bfcc:	f002 f994 	bl	801e2f8 <RCCEx_PLL2_Config>
 801bfd0:	4603      	mov	r3, r0
 801bfd2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801bfd6:	e013      	b.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801bfd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801bfdc:	3328      	adds	r3, #40	; 0x28
 801bfde:	2100      	movs	r1, #0
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	f002 fa3b 	bl	801e45c <RCCEx_PLL3_Config>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801bfec:	e008      	b.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801bfee:	2301      	movs	r3, #1
 801bff0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801bff4:	e004      	b.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bff6:	bf00      	nop
 801bff8:	e002      	b.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bffa:	bf00      	nop
 801bffc:	e000      	b.n	801c000 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 801bffe:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c000:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c004:	2b00      	cmp	r3, #0
 801c006:	d10b      	bne.n	801c020 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801c008:	4b3b      	ldr	r3, [pc, #236]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c00a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c00c:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801c010:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c014:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801c018:	4a37      	ldr	r2, [pc, #220]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c01a:	430b      	orrs	r3, r1
 801c01c:	6593      	str	r3, [r2, #88]	; 0x58
 801c01e:	e003      	b.n	801c028 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c020:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c024:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c028:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c030:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801c034:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801c038:	2300      	movs	r3, #0
 801c03a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801c03e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801c042:	460b      	mov	r3, r1
 801c044:	4313      	orrs	r3, r2
 801c046:	d05d      	beq.n	801c104 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801c048:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c04c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c050:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801c054:	d03b      	beq.n	801c0ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
 801c056:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 801c05a:	d834      	bhi.n	801c0c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c05c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c060:	d037      	beq.n	801c0d2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 801c062:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801c066:	d82e      	bhi.n	801c0c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c068:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c06c:	d033      	beq.n	801c0d6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 801c06e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801c072:	d828      	bhi.n	801c0c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c074:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c078:	d01a      	beq.n	801c0b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 801c07a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801c07e:	d822      	bhi.n	801c0c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 801c080:	2b00      	cmp	r3, #0
 801c082:	d003      	beq.n	801c08c <HAL_RCCEx_PeriphCLKConfig+0x298>
 801c084:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801c088:	d007      	beq.n	801c09a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 801c08a:	e01c      	b.n	801c0c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c08c:	4b1a      	ldr	r3, [pc, #104]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c090:	4a19      	ldr	r2, [pc, #100]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c096:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c098:	e01e      	b.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c09e:	3308      	adds	r3, #8
 801c0a0:	2100      	movs	r1, #0
 801c0a2:	4618      	mov	r0, r3
 801c0a4:	f002 f928 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c0a8:	4603      	mov	r3, r0
 801c0aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c0ae:	e013      	b.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0b4:	3328      	adds	r3, #40	; 0x28
 801c0b6:	2100      	movs	r1, #0
 801c0b8:	4618      	mov	r0, r3
 801c0ba:	f002 f9cf 	bl	801e45c <RCCEx_PLL3_Config>
 801c0be:	4603      	mov	r3, r0
 801c0c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c0c4:	e008      	b.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c0c6:	2301      	movs	r3, #1
 801c0c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c0cc:	e004      	b.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c0ce:	bf00      	nop
 801c0d0:	e002      	b.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c0d2:	bf00      	nop
 801c0d4:	e000      	b.n	801c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 801c0d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c0d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c0dc:	2b00      	cmp	r3, #0
 801c0de:	d10d      	bne.n	801c0fc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c0e0:	4b05      	ldr	r3, [pc, #20]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c0e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c0e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 801c0e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c0ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801c0f0:	4a01      	ldr	r2, [pc, #4]	; (801c0f8 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 801c0f2:	430b      	orrs	r3, r1
 801c0f4:	6593      	str	r3, [r2, #88]	; 0x58
 801c0f6:	e005      	b.n	801c104 <HAL_RCCEx_PeriphCLKConfig+0x310>
 801c0f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c0fc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c100:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 801c104:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c10c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 801c110:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 801c114:	2300      	movs	r3, #0
 801c116:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801c11a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 801c11e:	460b      	mov	r3, r1
 801c120:	4313      	orrs	r3, r2
 801c122:	d03a      	beq.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 801c124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c12a:	2b30      	cmp	r3, #48	; 0x30
 801c12c:	d01f      	beq.n	801c16e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 801c12e:	2b30      	cmp	r3, #48	; 0x30
 801c130:	d819      	bhi.n	801c166 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c132:	2b20      	cmp	r3, #32
 801c134:	d00c      	beq.n	801c150 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 801c136:	2b20      	cmp	r3, #32
 801c138:	d815      	bhi.n	801c166 <HAL_RCCEx_PeriphCLKConfig+0x372>
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d019      	beq.n	801c172 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801c13e:	2b10      	cmp	r3, #16
 801c140:	d111      	bne.n	801c166 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c142:	4baa      	ldr	r3, [pc, #680]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c146:	4aa9      	ldr	r2, [pc, #676]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c14c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c14e:	e011      	b.n	801c174 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c154:	3308      	adds	r3, #8
 801c156:	2102      	movs	r1, #2
 801c158:	4618      	mov	r0, r3
 801c15a:	f002 f8cd 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c15e:	4603      	mov	r3, r0
 801c160:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 801c164:	e006      	b.n	801c174 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c166:	2301      	movs	r3, #1
 801c168:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c16c:	e002      	b.n	801c174 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c16e:	bf00      	nop
 801c170:	e000      	b.n	801c174 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 801c172:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c174:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d10a      	bne.n	801c192 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 801c17c:	4b9b      	ldr	r3, [pc, #620]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c17e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c180:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 801c184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c18a:	4a98      	ldr	r2, [pc, #608]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c18c:	430b      	orrs	r3, r1
 801c18e:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c190:	e003      	b.n	801c19a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c192:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c196:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801c19a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1a2:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 801c1a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801c1b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 801c1b4:	460b      	mov	r3, r1
 801c1b6:	4313      	orrs	r3, r2
 801c1b8:	d051      	beq.n	801c25e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801c1ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c1be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c1c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c1c4:	d035      	beq.n	801c232 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801c1c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801c1ca:	d82e      	bhi.n	801c22a <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c1cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c1d0:	d031      	beq.n	801c236 <HAL_RCCEx_PeriphCLKConfig+0x442>
 801c1d2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801c1d6:	d828      	bhi.n	801c22a <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c1d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c1dc:	d01a      	beq.n	801c214 <HAL_RCCEx_PeriphCLKConfig+0x420>
 801c1de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c1e2:	d822      	bhi.n	801c22a <HAL_RCCEx_PeriphCLKConfig+0x436>
 801c1e4:	2b00      	cmp	r3, #0
 801c1e6:	d003      	beq.n	801c1f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 801c1e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c1ec:	d007      	beq.n	801c1fe <HAL_RCCEx_PeriphCLKConfig+0x40a>
 801c1ee:	e01c      	b.n	801c22a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c1f0:	4b7e      	ldr	r3, [pc, #504]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c1f4:	4a7d      	ldr	r2, [pc, #500]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c1f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c1fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c1fc:	e01c      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c1fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c202:	3308      	adds	r3, #8
 801c204:	2100      	movs	r1, #0
 801c206:	4618      	mov	r0, r3
 801c208:	f002 f876 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c20c:	4603      	mov	r3, r0
 801c20e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c212:	e011      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c218:	3328      	adds	r3, #40	; 0x28
 801c21a:	2100      	movs	r1, #0
 801c21c:	4618      	mov	r0, r3
 801c21e:	f002 f91d 	bl	801e45c <RCCEx_PLL3_Config>
 801c222:	4603      	mov	r3, r0
 801c224:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801c228:	e006      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c22a:	2301      	movs	r3, #1
 801c22c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c230:	e002      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c232:	bf00      	nop
 801c234:	e000      	b.n	801c238 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 801c236:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c238:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c23c:	2b00      	cmp	r3, #0
 801c23e:	d10a      	bne.n	801c256 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801c240:	4b6a      	ldr	r3, [pc, #424]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c244:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 801c248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801c24e:	4a67      	ldr	r2, [pc, #412]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c250:	430b      	orrs	r3, r1
 801c252:	6513      	str	r3, [r2, #80]	; 0x50
 801c254:	e003      	b.n	801c25e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c256:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c25a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801c25e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c262:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c266:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 801c26a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801c26e:	2300      	movs	r3, #0
 801c270:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801c274:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 801c278:	460b      	mov	r3, r1
 801c27a:	4313      	orrs	r3, r2
 801c27c:	d053      	beq.n	801c326 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801c27e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c288:	d033      	beq.n	801c2f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 801c28a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801c28e:	d82c      	bhi.n	801c2ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c290:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c294:	d02f      	beq.n	801c2f6 <HAL_RCCEx_PeriphCLKConfig+0x502>
 801c296:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801c29a:	d826      	bhi.n	801c2ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c29c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c2a0:	d02b      	beq.n	801c2fa <HAL_RCCEx_PeriphCLKConfig+0x506>
 801c2a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801c2a6:	d820      	bhi.n	801c2ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c2a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c2ac:	d012      	beq.n	801c2d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 801c2ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801c2b2:	d81a      	bhi.n	801c2ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801c2b4:	2b00      	cmp	r3, #0
 801c2b6:	d022      	beq.n	801c2fe <HAL_RCCEx_PeriphCLKConfig+0x50a>
 801c2b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c2bc:	d115      	bne.n	801c2ea <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c2be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2c2:	3308      	adds	r3, #8
 801c2c4:	2101      	movs	r1, #1
 801c2c6:	4618      	mov	r0, r3
 801c2c8:	f002 f816 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c2cc:	4603      	mov	r3, r0
 801c2ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c2d2:	e015      	b.n	801c300 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c2d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c2d8:	3328      	adds	r3, #40	; 0x28
 801c2da:	2101      	movs	r1, #1
 801c2dc:	4618      	mov	r0, r3
 801c2de:	f002 f8bd 	bl	801e45c <RCCEx_PLL3_Config>
 801c2e2:	4603      	mov	r3, r0
 801c2e4:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801c2e8:	e00a      	b.n	801c300 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c2ea:	2301      	movs	r3, #1
 801c2ec:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c2f0:	e006      	b.n	801c300 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c2f2:	bf00      	nop
 801c2f4:	e004      	b.n	801c300 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c2f6:	bf00      	nop
 801c2f8:	e002      	b.n	801c300 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c2fa:	bf00      	nop
 801c2fc:	e000      	b.n	801c300 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801c2fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c300:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c304:	2b00      	cmp	r3, #0
 801c306:	d10a      	bne.n	801c31e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801c308:	4b38      	ldr	r3, [pc, #224]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c30c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 801c310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c316:	4a35      	ldr	r2, [pc, #212]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c318:	430b      	orrs	r3, r1
 801c31a:	6513      	str	r3, [r2, #80]	; 0x50
 801c31c:	e003      	b.n	801c326 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c31e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c322:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801c326:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c32a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c32e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801c332:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801c336:	2300      	movs	r3, #0
 801c338:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801c33c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 801c340:	460b      	mov	r3, r1
 801c342:	4313      	orrs	r3, r2
 801c344:	d058      	beq.n	801c3f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801c346:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c34a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c34e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c352:	d033      	beq.n	801c3bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 801c354:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c358:	d82c      	bhi.n	801c3b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c35a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c35e:	d02f      	beq.n	801c3c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 801c360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c364:	d826      	bhi.n	801c3b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c366:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c36a:	d02b      	beq.n	801c3c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 801c36c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c370:	d820      	bhi.n	801c3b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c372:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c376:	d012      	beq.n	801c39e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 801c378:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c37c:	d81a      	bhi.n	801c3b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 801c37e:	2b00      	cmp	r3, #0
 801c380:	d022      	beq.n	801c3c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801c382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c386:	d115      	bne.n	801c3b4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c388:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c38c:	3308      	adds	r3, #8
 801c38e:	2101      	movs	r1, #1
 801c390:	4618      	mov	r0, r3
 801c392:	f001 ffb1 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c396:	4603      	mov	r3, r0
 801c398:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c39c:	e015      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c39e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3a2:	3328      	adds	r3, #40	; 0x28
 801c3a4:	2101      	movs	r1, #1
 801c3a6:	4618      	mov	r0, r3
 801c3a8:	f002 f858 	bl	801e45c <RCCEx_PLL3_Config>
 801c3ac:	4603      	mov	r3, r0
 801c3ae:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801c3b2:	e00a      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801c3b4:	2301      	movs	r3, #1
 801c3b6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c3ba:	e006      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c3bc:	bf00      	nop
 801c3be:	e004      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c3c0:	bf00      	nop
 801c3c2:	e002      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c3c4:	bf00      	nop
 801c3c6:	e000      	b.n	801c3ca <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801c3c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c3ca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d10e      	bne.n	801c3f0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801c3d2:	4b06      	ldr	r3, [pc, #24]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c3d6:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c3da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c3e2:	4a02      	ldr	r2, [pc, #8]	; (801c3ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801c3e4:	430b      	orrs	r3, r1
 801c3e6:	6593      	str	r3, [r2, #88]	; 0x58
 801c3e8:	e006      	b.n	801c3f8 <HAL_RCCEx_PeriphCLKConfig+0x604>
 801c3ea:	bf00      	nop
 801c3ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c3f0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c3f4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801c3f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c400:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801c404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801c408:	2300      	movs	r3, #0
 801c40a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801c40e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801c412:	460b      	mov	r3, r1
 801c414:	4313      	orrs	r3, r2
 801c416:	d037      	beq.n	801c488 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801c418:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c41c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c41e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c422:	d00e      	beq.n	801c442 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801c424:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c428:	d816      	bhi.n	801c458 <HAL_RCCEx_PeriphCLKConfig+0x664>
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	d018      	beq.n	801c460 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 801c42e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c432:	d111      	bne.n	801c458 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c434:	4bc4      	ldr	r3, [pc, #784]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c438:	4ac3      	ldr	r2, [pc, #780]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c43a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c43e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c440:	e00f      	b.n	801c462 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c446:	3308      	adds	r3, #8
 801c448:	2101      	movs	r1, #1
 801c44a:	4618      	mov	r0, r3
 801c44c:	f001 ff54 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c450:	4603      	mov	r3, r0
 801c452:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801c456:	e004      	b.n	801c462 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c458:	2301      	movs	r3, #1
 801c45a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c45e:	e000      	b.n	801c462 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 801c460:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c462:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c466:	2b00      	cmp	r3, #0
 801c468:	d10a      	bne.n	801c480 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801c46a:	4bb7      	ldr	r3, [pc, #732]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c46c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c46e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801c472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c476:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c478:	4ab3      	ldr	r2, [pc, #716]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c47a:	430b      	orrs	r3, r1
 801c47c:	6513      	str	r3, [r2, #80]	; 0x50
 801c47e:	e003      	b.n	801c488 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c480:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c484:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801c488:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c490:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 801c494:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801c498:	2300      	movs	r3, #0
 801c49a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801c49e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 801c4a2:	460b      	mov	r3, r1
 801c4a4:	4313      	orrs	r3, r2
 801c4a6:	d039      	beq.n	801c51c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801c4a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c4ae:	2b03      	cmp	r3, #3
 801c4b0:	d81c      	bhi.n	801c4ec <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801c4b2:	a201      	add	r2, pc, #4	; (adr r2, 801c4b8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801c4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c4b8:	0801c4f5 	.word	0x0801c4f5
 801c4bc:	0801c4c9 	.word	0x0801c4c9
 801c4c0:	0801c4d7 	.word	0x0801c4d7
 801c4c4:	0801c4f5 	.word	0x0801c4f5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c4c8:	4b9f      	ldr	r3, [pc, #636]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4cc:	4a9e      	ldr	r2, [pc, #632]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c4ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801c4d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c4d4:	e00f      	b.n	801c4f6 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c4d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c4da:	3308      	adds	r3, #8
 801c4dc:	2102      	movs	r1, #2
 801c4de:	4618      	mov	r0, r3
 801c4e0:	f001 ff0a 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c4e4:	4603      	mov	r3, r0
 801c4e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 801c4ea:	e004      	b.n	801c4f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801c4ec:	2301      	movs	r3, #1
 801c4ee:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c4f2:	e000      	b.n	801c4f6 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801c4f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c4f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c4fa:	2b00      	cmp	r3, #0
 801c4fc:	d10a      	bne.n	801c514 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801c4fe:	4b92      	ldr	r3, [pc, #584]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c502:	f023 0103 	bic.w	r1, r3, #3
 801c506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c50a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c50c:	4a8e      	ldr	r2, [pc, #568]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c50e:	430b      	orrs	r3, r1
 801c510:	64d3      	str	r3, [r2, #76]	; 0x4c
 801c512:	e003      	b.n	801c51c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c514:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c518:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801c51c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c524:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 801c528:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801c52c:	2300      	movs	r3, #0
 801c52e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801c532:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801c536:	460b      	mov	r3, r1
 801c538:	4313      	orrs	r3, r2
 801c53a:	f000 8099 	beq.w	801c670 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801c53e:	4b83      	ldr	r3, [pc, #524]	; (801c74c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	4a82      	ldr	r2, [pc, #520]	; (801c74c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801c548:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c54a:	f7f8 fed5 	bl	80152f8 <HAL_GetTick>
 801c54e:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c552:	e00b      	b.n	801c56c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c554:	f7f8 fed0 	bl	80152f8 <HAL_GetTick>
 801c558:	4602      	mov	r2, r0
 801c55a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c55e:	1ad3      	subs	r3, r2, r3
 801c560:	2b64      	cmp	r3, #100	; 0x64
 801c562:	d903      	bls.n	801c56c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 801c564:	2303      	movs	r3, #3
 801c566:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c56a:	e005      	b.n	801c578 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c56c:	4b77      	ldr	r3, [pc, #476]	; (801c74c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801c56e:	681b      	ldr	r3, [r3, #0]
 801c570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801c574:	2b00      	cmp	r3, #0
 801c576:	d0ed      	beq.n	801c554 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 801c578:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d173      	bne.n	801c668 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801c580:	4b71      	ldr	r3, [pc, #452]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801c584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c588:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c58c:	4053      	eors	r3, r2
 801c58e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c592:	2b00      	cmp	r3, #0
 801c594:	d015      	beq.n	801c5c2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801c596:	4b6c      	ldr	r3, [pc, #432]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c59a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801c59e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801c5a2:	4b69      	ldr	r3, [pc, #420]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5a6:	4a68      	ldr	r2, [pc, #416]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801c5ac:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801c5ae:	4b66      	ldr	r3, [pc, #408]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5b2:	4a65      	ldr	r2, [pc, #404]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801c5b8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801c5ba:	4a63      	ldr	r2, [pc, #396]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801c5c0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801c5c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c5c6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c5ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c5ce:	d118      	bne.n	801c602 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c5d0:	f7f8 fe92 	bl	80152f8 <HAL_GetTick>
 801c5d4:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c5d8:	e00d      	b.n	801c5f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c5da:	f7f8 fe8d 	bl	80152f8 <HAL_GetTick>
 801c5de:	4602      	mov	r2, r0
 801c5e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801c5e4:	1ad2      	subs	r2, r2, r3
 801c5e6:	f241 3388 	movw	r3, #5000	; 0x1388
 801c5ea:	429a      	cmp	r2, r3
 801c5ec:	d903      	bls.n	801c5f6 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 801c5ee:	2303      	movs	r3, #3
 801c5f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 801c5f4:	e005      	b.n	801c602 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c5f6:	4b54      	ldr	r3, [pc, #336]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c5f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c5fa:	f003 0302 	and.w	r3, r3, #2
 801c5fe:	2b00      	cmp	r3, #0
 801c600:	d0eb      	beq.n	801c5da <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801c602:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c606:	2b00      	cmp	r3, #0
 801c608:	d129      	bne.n	801c65e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801c60a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c60e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801c616:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801c61a:	d10e      	bne.n	801c63a <HAL_RCCEx_PeriphCLKConfig+0x846>
 801c61c:	4b4a      	ldr	r3, [pc, #296]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c61e:	691b      	ldr	r3, [r3, #16]
 801c620:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801c624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c628:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c62c:	091a      	lsrs	r2, r3, #4
 801c62e:	4b48      	ldr	r3, [pc, #288]	; (801c750 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801c630:	4013      	ands	r3, r2
 801c632:	4a45      	ldr	r2, [pc, #276]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c634:	430b      	orrs	r3, r1
 801c636:	6113      	str	r3, [r2, #16]
 801c638:	e005      	b.n	801c646 <HAL_RCCEx_PeriphCLKConfig+0x852>
 801c63a:	4b43      	ldr	r3, [pc, #268]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c63c:	691b      	ldr	r3, [r3, #16]
 801c63e:	4a42      	ldr	r2, [pc, #264]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c640:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801c644:	6113      	str	r3, [r2, #16]
 801c646:	4b40      	ldr	r3, [pc, #256]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c648:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801c64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c64e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801c652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c656:	4a3c      	ldr	r2, [pc, #240]	; (801c748 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801c658:	430b      	orrs	r3, r1
 801c65a:	6713      	str	r3, [r2, #112]	; 0x70
 801c65c:	e008      	b.n	801c670 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801c65e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c662:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 801c666:	e003      	b.n	801c670 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c668:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c66c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801c670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c674:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c678:	f002 0301 	and.w	r3, r2, #1
 801c67c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801c680:	2300      	movs	r3, #0
 801c682:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 801c686:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 801c68a:	460b      	mov	r3, r1
 801c68c:	4313      	orrs	r3, r2
 801c68e:	f000 808f 	beq.w	801c7b0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801c692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c696:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c698:	2b28      	cmp	r3, #40	; 0x28
 801c69a:	d871      	bhi.n	801c780 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 801c69c:	a201      	add	r2, pc, #4	; (adr r2, 801c6a4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 801c69e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6a2:	bf00      	nop
 801c6a4:	0801c789 	.word	0x0801c789
 801c6a8:	0801c781 	.word	0x0801c781
 801c6ac:	0801c781 	.word	0x0801c781
 801c6b0:	0801c781 	.word	0x0801c781
 801c6b4:	0801c781 	.word	0x0801c781
 801c6b8:	0801c781 	.word	0x0801c781
 801c6bc:	0801c781 	.word	0x0801c781
 801c6c0:	0801c781 	.word	0x0801c781
 801c6c4:	0801c755 	.word	0x0801c755
 801c6c8:	0801c781 	.word	0x0801c781
 801c6cc:	0801c781 	.word	0x0801c781
 801c6d0:	0801c781 	.word	0x0801c781
 801c6d4:	0801c781 	.word	0x0801c781
 801c6d8:	0801c781 	.word	0x0801c781
 801c6dc:	0801c781 	.word	0x0801c781
 801c6e0:	0801c781 	.word	0x0801c781
 801c6e4:	0801c76b 	.word	0x0801c76b
 801c6e8:	0801c781 	.word	0x0801c781
 801c6ec:	0801c781 	.word	0x0801c781
 801c6f0:	0801c781 	.word	0x0801c781
 801c6f4:	0801c781 	.word	0x0801c781
 801c6f8:	0801c781 	.word	0x0801c781
 801c6fc:	0801c781 	.word	0x0801c781
 801c700:	0801c781 	.word	0x0801c781
 801c704:	0801c789 	.word	0x0801c789
 801c708:	0801c781 	.word	0x0801c781
 801c70c:	0801c781 	.word	0x0801c781
 801c710:	0801c781 	.word	0x0801c781
 801c714:	0801c781 	.word	0x0801c781
 801c718:	0801c781 	.word	0x0801c781
 801c71c:	0801c781 	.word	0x0801c781
 801c720:	0801c781 	.word	0x0801c781
 801c724:	0801c789 	.word	0x0801c789
 801c728:	0801c781 	.word	0x0801c781
 801c72c:	0801c781 	.word	0x0801c781
 801c730:	0801c781 	.word	0x0801c781
 801c734:	0801c781 	.word	0x0801c781
 801c738:	0801c781 	.word	0x0801c781
 801c73c:	0801c781 	.word	0x0801c781
 801c740:	0801c781 	.word	0x0801c781
 801c744:	0801c789 	.word	0x0801c789
 801c748:	58024400 	.word	0x58024400
 801c74c:	58024800 	.word	0x58024800
 801c750:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c754:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c758:	3308      	adds	r3, #8
 801c75a:	2101      	movs	r1, #1
 801c75c:	4618      	mov	r0, r3
 801c75e:	f001 fdcb 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c762:	4603      	mov	r3, r0
 801c764:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c768:	e00f      	b.n	801c78a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c76a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c76e:	3328      	adds	r3, #40	; 0x28
 801c770:	2101      	movs	r1, #1
 801c772:	4618      	mov	r0, r3
 801c774:	f001 fe72 	bl	801e45c <RCCEx_PLL3_Config>
 801c778:	4603      	mov	r3, r0
 801c77a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801c77e:	e004      	b.n	801c78a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c780:	2301      	movs	r3, #1
 801c782:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c786:	e000      	b.n	801c78a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 801c788:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c78a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c78e:	2b00      	cmp	r3, #0
 801c790:	d10a      	bne.n	801c7a8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801c792:	4bbf      	ldr	r3, [pc, #764]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c796:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 801c79a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c79e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801c7a0:	4abb      	ldr	r2, [pc, #748]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c7a2:	430b      	orrs	r3, r1
 801c7a4:	6553      	str	r3, [r2, #84]	; 0x54
 801c7a6:	e003      	b.n	801c7b0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c7a8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c7ac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801c7b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c7b8:	f002 0302 	and.w	r3, r2, #2
 801c7bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801c7c0:	2300      	movs	r3, #0
 801c7c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801c7c6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 801c7ca:	460b      	mov	r3, r1
 801c7cc:	4313      	orrs	r3, r2
 801c7ce:	d041      	beq.n	801c854 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801c7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c7d6:	2b05      	cmp	r3, #5
 801c7d8:	d824      	bhi.n	801c824 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 801c7da:	a201      	add	r2, pc, #4	; (adr r2, 801c7e0 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 801c7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c7e0:	0801c82d 	.word	0x0801c82d
 801c7e4:	0801c7f9 	.word	0x0801c7f9
 801c7e8:	0801c80f 	.word	0x0801c80f
 801c7ec:	0801c82d 	.word	0x0801c82d
 801c7f0:	0801c82d 	.word	0x0801c82d
 801c7f4:	0801c82d 	.word	0x0801c82d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c7fc:	3308      	adds	r3, #8
 801c7fe:	2101      	movs	r1, #1
 801c800:	4618      	mov	r0, r3
 801c802:	f001 fd79 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c806:	4603      	mov	r3, r0
 801c808:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c80c:	e00f      	b.n	801c82e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c80e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c812:	3328      	adds	r3, #40	; 0x28
 801c814:	2101      	movs	r1, #1
 801c816:	4618      	mov	r0, r3
 801c818:	f001 fe20 	bl	801e45c <RCCEx_PLL3_Config>
 801c81c:	4603      	mov	r3, r0
 801c81e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801c822:	e004      	b.n	801c82e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c824:	2301      	movs	r3, #1
 801c826:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c82a:	e000      	b.n	801c82e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 801c82c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c82e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c832:	2b00      	cmp	r3, #0
 801c834:	d10a      	bne.n	801c84c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801c836:	4b96      	ldr	r3, [pc, #600]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c83a:	f023 0107 	bic.w	r1, r3, #7
 801c83e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c842:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801c844:	4a92      	ldr	r2, [pc, #584]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c846:	430b      	orrs	r3, r1
 801c848:	6553      	str	r3, [r2, #84]	; 0x54
 801c84a:	e003      	b.n	801c854 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c84c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c850:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801c854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c858:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c85c:	f002 0304 	and.w	r3, r2, #4
 801c860:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 801c864:	2300      	movs	r3, #0
 801c866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801c86a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 801c86e:	460b      	mov	r3, r1
 801c870:	4313      	orrs	r3, r2
 801c872:	d044      	beq.n	801c8fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801c874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c87c:	2b05      	cmp	r3, #5
 801c87e:	d825      	bhi.n	801c8cc <HAL_RCCEx_PeriphCLKConfig+0xad8>
 801c880:	a201      	add	r2, pc, #4	; (adr r2, 801c888 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 801c882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c886:	bf00      	nop
 801c888:	0801c8d5 	.word	0x0801c8d5
 801c88c:	0801c8a1 	.word	0x0801c8a1
 801c890:	0801c8b7 	.word	0x0801c8b7
 801c894:	0801c8d5 	.word	0x0801c8d5
 801c898:	0801c8d5 	.word	0x0801c8d5
 801c89c:	0801c8d5 	.word	0x0801c8d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c8a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8a4:	3308      	adds	r3, #8
 801c8a6:	2101      	movs	r1, #1
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	f001 fd25 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c8ae:	4603      	mov	r3, r0
 801c8b0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c8b4:	e00f      	b.n	801c8d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8ba:	3328      	adds	r3, #40	; 0x28
 801c8bc:	2101      	movs	r1, #1
 801c8be:	4618      	mov	r0, r3
 801c8c0:	f001 fdcc 	bl	801e45c <RCCEx_PLL3_Config>
 801c8c4:	4603      	mov	r3, r0
 801c8c6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801c8ca:	e004      	b.n	801c8d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c8cc:	2301      	movs	r3, #1
 801c8ce:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c8d2:	e000      	b.n	801c8d6 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801c8d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c8d6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c8da:	2b00      	cmp	r3, #0
 801c8dc:	d10b      	bne.n	801c8f6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801c8de:	4b6c      	ldr	r3, [pc, #432]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8e2:	f023 0107 	bic.w	r1, r3, #7
 801c8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c8ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801c8ee:	4a68      	ldr	r2, [pc, #416]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c8f0:	430b      	orrs	r3, r1
 801c8f2:	6593      	str	r3, [r2, #88]	; 0x58
 801c8f4:	e003      	b.n	801c8fe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c8f6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c8fa:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801c8fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c902:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c906:	f002 0320 	and.w	r3, r2, #32
 801c90a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801c90e:	2300      	movs	r3, #0
 801c910:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801c914:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 801c918:	460b      	mov	r3, r1
 801c91a:	4313      	orrs	r3, r2
 801c91c:	d055      	beq.n	801c9ca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801c91e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c92a:	d033      	beq.n	801c994 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 801c92c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801c930:	d82c      	bhi.n	801c98c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c932:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c936:	d02f      	beq.n	801c998 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 801c938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801c93c:	d826      	bhi.n	801c98c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c93e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c942:	d02b      	beq.n	801c99c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 801c944:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801c948:	d820      	bhi.n	801c98c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c94a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c94e:	d012      	beq.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 801c950:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801c954:	d81a      	bhi.n	801c98c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801c956:	2b00      	cmp	r3, #0
 801c958:	d022      	beq.n	801c9a0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 801c95a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c95e:	d115      	bne.n	801c98c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c964:	3308      	adds	r3, #8
 801c966:	2100      	movs	r1, #0
 801c968:	4618      	mov	r0, r3
 801c96a:	f001 fcc5 	bl	801e2f8 <RCCEx_PLL2_Config>
 801c96e:	4603      	mov	r3, r0
 801c970:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c974:	e015      	b.n	801c9a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c976:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c97a:	3328      	adds	r3, #40	; 0x28
 801c97c:	2102      	movs	r1, #2
 801c97e:	4618      	mov	r0, r3
 801c980:	f001 fd6c 	bl	801e45c <RCCEx_PLL3_Config>
 801c984:	4603      	mov	r3, r0
 801c986:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801c98a:	e00a      	b.n	801c9a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c98c:	2301      	movs	r3, #1
 801c98e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801c992:	e006      	b.n	801c9a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c994:	bf00      	nop
 801c996:	e004      	b.n	801c9a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c998:	bf00      	nop
 801c99a:	e002      	b.n	801c9a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c99c:	bf00      	nop
 801c99e:	e000      	b.n	801c9a2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 801c9a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c9a2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c9a6:	2b00      	cmp	r3, #0
 801c9a8:	d10b      	bne.n	801c9c2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801c9aa:	4b39      	ldr	r3, [pc, #228]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c9ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c9ae:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801c9b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c9ba:	4a35      	ldr	r2, [pc, #212]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801c9bc:	430b      	orrs	r3, r1
 801c9be:	6553      	str	r3, [r2, #84]	; 0x54
 801c9c0:	e003      	b.n	801c9ca <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c9c2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801c9c6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801c9ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9d2:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801c9d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801c9da:	2300      	movs	r3, #0
 801c9dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801c9e0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801c9e4:	460b      	mov	r3, r1
 801c9e6:	4313      	orrs	r3, r2
 801c9e8:	d058      	beq.n	801ca9c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801c9ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801c9ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c9f2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c9f6:	d033      	beq.n	801ca60 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 801c9f8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801c9fc:	d82c      	bhi.n	801ca58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801c9fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ca02:	d02f      	beq.n	801ca64 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801ca04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ca08:	d826      	bhi.n	801ca58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801ca0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801ca0e:	d02b      	beq.n	801ca68 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 801ca10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801ca14:	d820      	bhi.n	801ca58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801ca16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ca1a:	d012      	beq.n	801ca42 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 801ca1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801ca20:	d81a      	bhi.n	801ca58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801ca22:	2b00      	cmp	r3, #0
 801ca24:	d022      	beq.n	801ca6c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801ca26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ca2a:	d115      	bne.n	801ca58 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ca2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca30:	3308      	adds	r3, #8
 801ca32:	2100      	movs	r1, #0
 801ca34:	4618      	mov	r0, r3
 801ca36:	f001 fc5f 	bl	801e2f8 <RCCEx_PLL2_Config>
 801ca3a:	4603      	mov	r3, r0
 801ca3c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ca40:	e015      	b.n	801ca6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801ca42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca46:	3328      	adds	r3, #40	; 0x28
 801ca48:	2102      	movs	r1, #2
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	f001 fd06 	bl	801e45c <RCCEx_PLL3_Config>
 801ca50:	4603      	mov	r3, r0
 801ca52:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801ca56:	e00a      	b.n	801ca6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ca58:	2301      	movs	r3, #1
 801ca5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ca5e:	e006      	b.n	801ca6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801ca60:	bf00      	nop
 801ca62:	e004      	b.n	801ca6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801ca64:	bf00      	nop
 801ca66:	e002      	b.n	801ca6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801ca68:	bf00      	nop
 801ca6a:	e000      	b.n	801ca6e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 801ca6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ca6e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d10e      	bne.n	801ca94 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801ca76:	4b06      	ldr	r3, [pc, #24]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ca78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801ca7a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 801ca7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ca82:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801ca86:	4a02      	ldr	r2, [pc, #8]	; (801ca90 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801ca88:	430b      	orrs	r3, r1
 801ca8a:	6593      	str	r3, [r2, #88]	; 0x58
 801ca8c:	e006      	b.n	801ca9c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 801ca8e:	bf00      	nop
 801ca90:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca94:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ca98:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801ca9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801caa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801caa4:	f002 0380 	and.w	r3, r2, #128	; 0x80
 801caa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801caac:	2300      	movs	r3, #0
 801caae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801cab2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801cab6:	460b      	mov	r3, r1
 801cab8:	4313      	orrs	r3, r2
 801caba:	d055      	beq.n	801cb68 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801cabc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cac4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801cac8:	d033      	beq.n	801cb32 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 801caca:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 801cace:	d82c      	bhi.n	801cb2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cad4:	d02f      	beq.n	801cb36 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801cad6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801cada:	d826      	bhi.n	801cb2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cadc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801cae0:	d02b      	beq.n	801cb3a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801cae2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801cae6:	d820      	bhi.n	801cb2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801cae8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801caec:	d012      	beq.n	801cb14 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 801caee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801caf2:	d81a      	bhi.n	801cb2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d022      	beq.n	801cb3e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 801caf8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801cafc:	d115      	bne.n	801cb2a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cafe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb02:	3308      	adds	r3, #8
 801cb04:	2100      	movs	r1, #0
 801cb06:	4618      	mov	r0, r3
 801cb08:	f001 fbf6 	bl	801e2f8 <RCCEx_PLL2_Config>
 801cb0c:	4603      	mov	r3, r0
 801cb0e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801cb12:	e015      	b.n	801cb40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cb14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb18:	3328      	adds	r3, #40	; 0x28
 801cb1a:	2102      	movs	r1, #2
 801cb1c:	4618      	mov	r0, r3
 801cb1e:	f001 fc9d 	bl	801e45c <RCCEx_PLL3_Config>
 801cb22:	4603      	mov	r3, r0
 801cb24:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801cb28:	e00a      	b.n	801cb40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cb2a:	2301      	movs	r3, #1
 801cb2c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cb30:	e006      	b.n	801cb40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cb32:	bf00      	nop
 801cb34:	e004      	b.n	801cb40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cb36:	bf00      	nop
 801cb38:	e002      	b.n	801cb40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cb3a:	bf00      	nop
 801cb3c:	e000      	b.n	801cb40 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801cb3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cb40:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb44:	2b00      	cmp	r3, #0
 801cb46:	d10b      	bne.n	801cb60 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801cb48:	4ba0      	ldr	r3, [pc, #640]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cb4c:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 801cb50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb54:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cb58:	4a9c      	ldr	r2, [pc, #624]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cb5a:	430b      	orrs	r3, r1
 801cb5c:	6593      	str	r3, [r2, #88]	; 0x58
 801cb5e:	e003      	b.n	801cb68 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cb60:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cb64:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 801cb68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb70:	f002 0308 	and.w	r3, r2, #8
 801cb74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801cb78:	2300      	movs	r3, #0
 801cb7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801cb7e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 801cb82:	460b      	mov	r3, r1
 801cb84:	4313      	orrs	r3, r2
 801cb86:	d01e      	beq.n	801cbc6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 801cb88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cb90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801cb94:	d10c      	bne.n	801cbb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cb96:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cb9a:	3328      	adds	r3, #40	; 0x28
 801cb9c:	2102      	movs	r1, #2
 801cb9e:	4618      	mov	r0, r3
 801cba0:	f001 fc5c 	bl	801e45c <RCCEx_PLL3_Config>
 801cba4:	4603      	mov	r3, r0
 801cba6:	2b00      	cmp	r3, #0
 801cba8:	d002      	beq.n	801cbb0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 801cbaa:	2301      	movs	r3, #1
 801cbac:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 801cbb0:	4b86      	ldr	r3, [pc, #536]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cbb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cbb4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801cbb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801cbc0:	4a82      	ldr	r2, [pc, #520]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cbc2:	430b      	orrs	r3, r1
 801cbc4:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801cbc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbce:	f002 0310 	and.w	r3, r2, #16
 801cbd2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801cbd6:	2300      	movs	r3, #0
 801cbd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801cbdc:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801cbe0:	460b      	mov	r3, r1
 801cbe2:	4313      	orrs	r3, r2
 801cbe4:	d01e      	beq.n	801cc24 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801cbe6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cbee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cbf2:	d10c      	bne.n	801cc0e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cbf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cbf8:	3328      	adds	r3, #40	; 0x28
 801cbfa:	2102      	movs	r1, #2
 801cbfc:	4618      	mov	r0, r3
 801cbfe:	f001 fc2d 	bl	801e45c <RCCEx_PLL3_Config>
 801cc02:	4603      	mov	r3, r0
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d002      	beq.n	801cc0e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 801cc08:	2301      	movs	r3, #1
 801cc0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801cc0e:	4b6f      	ldr	r3, [pc, #444]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cc12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801cc16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801cc1e:	4a6b      	ldr	r2, [pc, #428]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cc20:	430b      	orrs	r3, r1
 801cc22:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801cc24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cc2c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801cc30:	67bb      	str	r3, [r7, #120]	; 0x78
 801cc32:	2300      	movs	r3, #0
 801cc34:	67fb      	str	r3, [r7, #124]	; 0x7c
 801cc36:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 801cc3a:	460b      	mov	r3, r1
 801cc3c:	4313      	orrs	r3, r2
 801cc3e:	d03e      	beq.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801cc40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc44:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801cc48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cc4c:	d022      	beq.n	801cc94 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 801cc4e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801cc52:	d81b      	bhi.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 801cc54:	2b00      	cmp	r3, #0
 801cc56:	d003      	beq.n	801cc60 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 801cc58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc5c:	d00b      	beq.n	801cc76 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 801cc5e:	e015      	b.n	801cc8c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cc60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc64:	3308      	adds	r3, #8
 801cc66:	2100      	movs	r1, #0
 801cc68:	4618      	mov	r0, r3
 801cc6a:	f001 fb45 	bl	801e2f8 <RCCEx_PLL2_Config>
 801cc6e:	4603      	mov	r3, r0
 801cc70:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cc74:	e00f      	b.n	801cc96 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cc76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cc7a:	3328      	adds	r3, #40	; 0x28
 801cc7c:	2102      	movs	r1, #2
 801cc7e:	4618      	mov	r0, r3
 801cc80:	f001 fbec 	bl	801e45c <RCCEx_PLL3_Config>
 801cc84:	4603      	mov	r3, r0
 801cc86:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 801cc8a:	e004      	b.n	801cc96 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cc8c:	2301      	movs	r3, #1
 801cc8e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cc92:	e000      	b.n	801cc96 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 801cc94:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc96:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d10b      	bne.n	801ccb6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801cc9e:	4b4b      	ldr	r3, [pc, #300]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801cca2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801cca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccaa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ccae:	4a47      	ldr	r2, [pc, #284]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ccb0:	430b      	orrs	r3, r1
 801ccb2:	6593      	str	r3, [r2, #88]	; 0x58
 801ccb4:	e003      	b.n	801ccbe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ccb6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ccba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801ccbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ccc6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 801ccca:	673b      	str	r3, [r7, #112]	; 0x70
 801cccc:	2300      	movs	r3, #0
 801ccce:	677b      	str	r3, [r7, #116]	; 0x74
 801ccd0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 801ccd4:	460b      	mov	r3, r1
 801ccd6:	4313      	orrs	r3, r2
 801ccd8:	d03b      	beq.n	801cd52 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801ccda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ccde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cce2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801cce6:	d01f      	beq.n	801cd28 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 801cce8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801ccec:	d818      	bhi.n	801cd20 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 801ccee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801ccf2:	d003      	beq.n	801ccfc <HAL_RCCEx_PeriphCLKConfig+0xf08>
 801ccf4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801ccf8:	d007      	beq.n	801cd0a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 801ccfa:	e011      	b.n	801cd20 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ccfc:	4b33      	ldr	r3, [pc, #204]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801ccfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd00:	4a32      	ldr	r2, [pc, #200]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cd06:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801cd08:	e00f      	b.n	801cd2a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cd0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd0e:	3328      	adds	r3, #40	; 0x28
 801cd10:	2101      	movs	r1, #1
 801cd12:	4618      	mov	r0, r3
 801cd14:	f001 fba2 	bl	801e45c <RCCEx_PLL3_Config>
 801cd18:	4603      	mov	r3, r0
 801cd1a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 801cd1e:	e004      	b.n	801cd2a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cd20:	2301      	movs	r3, #1
 801cd22:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cd26:	e000      	b.n	801cd2a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 801cd28:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd2a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d10b      	bne.n	801cd4a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801cd32:	4b26      	ldr	r3, [pc, #152]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cd36:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801cd3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801cd42:	4a22      	ldr	r2, [pc, #136]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd44:	430b      	orrs	r3, r1
 801cd46:	6553      	str	r3, [r2, #84]	; 0x54
 801cd48:	e003      	b.n	801cd52 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd4a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cd4e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801cd52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd5a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801cd5e:	66bb      	str	r3, [r7, #104]	; 0x68
 801cd60:	2300      	movs	r3, #0
 801cd62:	66fb      	str	r3, [r7, #108]	; 0x6c
 801cd64:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 801cd68:	460b      	mov	r3, r1
 801cd6a:	4313      	orrs	r3, r2
 801cd6c:	d034      	beq.n	801cdd8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801cd6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cd74:	2b00      	cmp	r3, #0
 801cd76:	d003      	beq.n	801cd80 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 801cd78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cd7c:	d007      	beq.n	801cd8e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 801cd7e:	e011      	b.n	801cda4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd80:	4b12      	ldr	r3, [pc, #72]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cd84:	4a11      	ldr	r2, [pc, #68]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cd86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801cd8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cd8c:	e00e      	b.n	801cdac <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cd8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cd92:	3308      	adds	r3, #8
 801cd94:	2102      	movs	r1, #2
 801cd96:	4618      	mov	r0, r3
 801cd98:	f001 faae 	bl	801e2f8 <RCCEx_PLL2_Config>
 801cd9c:	4603      	mov	r3, r0
 801cd9e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801cda2:	e003      	b.n	801cdac <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 801cda4:	2301      	movs	r3, #1
 801cda6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801cdaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cdac:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cdb0:	2b00      	cmp	r3, #0
 801cdb2:	d10d      	bne.n	801cdd0 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801cdb4:	4b05      	ldr	r3, [pc, #20]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cdb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cdb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801cdbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cdc2:	4a02      	ldr	r2, [pc, #8]	; (801cdcc <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801cdc4:	430b      	orrs	r3, r1
 801cdc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 801cdc8:	e006      	b.n	801cdd8 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 801cdca:	bf00      	nop
 801cdcc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cdd0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cdd4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801cdd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cde0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 801cde4:	663b      	str	r3, [r7, #96]	; 0x60
 801cde6:	2300      	movs	r3, #0
 801cde8:	667b      	str	r3, [r7, #100]	; 0x64
 801cdea:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 801cdee:	460b      	mov	r3, r1
 801cdf0:	4313      	orrs	r3, r2
 801cdf2:	d00c      	beq.n	801ce0e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801cdf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cdf8:	3328      	adds	r3, #40	; 0x28
 801cdfa:	2102      	movs	r1, #2
 801cdfc:	4618      	mov	r0, r3
 801cdfe:	f001 fb2d 	bl	801e45c <RCCEx_PLL3_Config>
 801ce02:	4603      	mov	r3, r0
 801ce04:	2b00      	cmp	r3, #0
 801ce06:	d002      	beq.n	801ce0e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 801ce08:	2301      	movs	r3, #1
 801ce0a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801ce0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce16:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801ce1a:	65bb      	str	r3, [r7, #88]	; 0x58
 801ce1c:	2300      	movs	r3, #0
 801ce1e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801ce20:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 801ce24:	460b      	mov	r3, r1
 801ce26:	4313      	orrs	r3, r2
 801ce28:	d036      	beq.n	801ce98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 801ce2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ce30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ce34:	d018      	beq.n	801ce68 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 801ce36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801ce3a:	d811      	bhi.n	801ce60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801ce3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce40:	d014      	beq.n	801ce6c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 801ce42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ce46:	d80b      	bhi.n	801ce60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 801ce48:	2b00      	cmp	r3, #0
 801ce4a:	d011      	beq.n	801ce70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 801ce4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ce50:	d106      	bne.n	801ce60 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ce52:	4bb7      	ldr	r3, [pc, #732]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ce56:	4ab6      	ldr	r2, [pc, #728]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801ce5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801ce5e:	e008      	b.n	801ce72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ce60:	2301      	movs	r3, #1
 801ce62:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801ce66:	e004      	b.n	801ce72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801ce68:	bf00      	nop
 801ce6a:	e002      	b.n	801ce72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801ce6c:	bf00      	nop
 801ce6e:	e000      	b.n	801ce72 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 801ce70:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ce72:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d10a      	bne.n	801ce90 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801ce7a:	4bad      	ldr	r3, [pc, #692]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ce7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801ce82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ce88:	4aa9      	ldr	r2, [pc, #676]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ce8a:	430b      	orrs	r3, r1
 801ce8c:	6553      	str	r3, [r2, #84]	; 0x54
 801ce8e:	e003      	b.n	801ce98 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801ce94:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801ce98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ce9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cea0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 801cea4:	653b      	str	r3, [r7, #80]	; 0x50
 801cea6:	2300      	movs	r3, #0
 801cea8:	657b      	str	r3, [r7, #84]	; 0x54
 801ceaa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 801ceae:	460b      	mov	r3, r1
 801ceb0:	4313      	orrs	r3, r2
 801ceb2:	d009      	beq.n	801cec8 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801ceb4:	4b9e      	ldr	r3, [pc, #632]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801ceb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801ceb8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801cebc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cec2:	4a9b      	ldr	r2, [pc, #620]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cec4:	430b      	orrs	r3, r1
 801cec6:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801cec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ced0:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 801ced4:	64bb      	str	r3, [r7, #72]	; 0x48
 801ced6:	2300      	movs	r3, #0
 801ced8:	64fb      	str	r3, [r7, #76]	; 0x4c
 801ceda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 801cede:	460b      	mov	r3, r1
 801cee0:	4313      	orrs	r3, r2
 801cee2:	d009      	beq.n	801cef8 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801cee4:	4b92      	ldr	r3, [pc, #584]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801cee8:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 801ceec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cef0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801cef2:	4a8f      	ldr	r2, [pc, #572]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cef4:	430b      	orrs	r3, r1
 801cef6:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801cef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cefc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf00:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801cf04:	643b      	str	r3, [r7, #64]	; 0x40
 801cf06:	2300      	movs	r3, #0
 801cf08:	647b      	str	r3, [r7, #68]	; 0x44
 801cf0a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 801cf0e:	460b      	mov	r3, r1
 801cf10:	4313      	orrs	r3, r2
 801cf12:	d00e      	beq.n	801cf32 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801cf14:	4b86      	ldr	r3, [pc, #536]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf16:	691b      	ldr	r3, [r3, #16]
 801cf18:	4a85      	ldr	r2, [pc, #532]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 801cf1e:	6113      	str	r3, [r2, #16]
 801cf20:	4b83      	ldr	r3, [pc, #524]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf22:	6919      	ldr	r1, [r3, #16]
 801cf24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801cf2c:	4a80      	ldr	r2, [pc, #512]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf2e:	430b      	orrs	r3, r1
 801cf30:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801cf32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf3a:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 801cf3e:	63bb      	str	r3, [r7, #56]	; 0x38
 801cf40:	2300      	movs	r3, #0
 801cf42:	63fb      	str	r3, [r7, #60]	; 0x3c
 801cf44:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801cf48:	460b      	mov	r3, r1
 801cf4a:	4313      	orrs	r3, r2
 801cf4c:	d009      	beq.n	801cf62 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801cf4e:	4b78      	ldr	r3, [pc, #480]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cf52:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801cf56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf5c:	4a74      	ldr	r2, [pc, #464]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf5e:	430b      	orrs	r3, r1
 801cf60:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801cf62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf6a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 801cf6e:	633b      	str	r3, [r7, #48]	; 0x30
 801cf70:	2300      	movs	r3, #0
 801cf72:	637b      	str	r3, [r7, #52]	; 0x34
 801cf74:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801cf78:	460b      	mov	r3, r1
 801cf7a:	4313      	orrs	r3, r2
 801cf7c:	d00a      	beq.n	801cf94 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801cf7e:	4b6c      	ldr	r3, [pc, #432]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801cf82:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 801cf86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801cf8e:	4a68      	ldr	r2, [pc, #416]	; (801d130 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 801cf90:	430b      	orrs	r3, r1
 801cf92:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801cf94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf9c:	2100      	movs	r1, #0
 801cf9e:	62b9      	str	r1, [r7, #40]	; 0x28
 801cfa0:	f003 0301 	and.w	r3, r3, #1
 801cfa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801cfa6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 801cfaa:	460b      	mov	r3, r1
 801cfac:	4313      	orrs	r3, r2
 801cfae:	d011      	beq.n	801cfd4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cfb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfb4:	3308      	adds	r3, #8
 801cfb6:	2100      	movs	r1, #0
 801cfb8:	4618      	mov	r0, r3
 801cfba:	f001 f99d 	bl	801e2f8 <RCCEx_PLL2_Config>
 801cfbe:	4603      	mov	r3, r0
 801cfc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801cfc4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfc8:	2b00      	cmp	r3, #0
 801cfca:	d003      	beq.n	801cfd4 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfcc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801cfd0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801cfd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cfd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfdc:	2100      	movs	r1, #0
 801cfde:	6239      	str	r1, [r7, #32]
 801cfe0:	f003 0302 	and.w	r3, r3, #2
 801cfe4:	627b      	str	r3, [r7, #36]	; 0x24
 801cfe6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801cfea:	460b      	mov	r3, r1
 801cfec:	4313      	orrs	r3, r2
 801cfee:	d011      	beq.n	801d014 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cff0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801cff4:	3308      	adds	r3, #8
 801cff6:	2101      	movs	r1, #1
 801cff8:	4618      	mov	r0, r3
 801cffa:	f001 f97d 	bl	801e2f8 <RCCEx_PLL2_Config>
 801cffe:	4603      	mov	r3, r0
 801d000:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d004:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d008:	2b00      	cmp	r3, #0
 801d00a:	d003      	beq.n	801d014 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d00c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d010:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801d014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d018:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d01c:	2100      	movs	r1, #0
 801d01e:	61b9      	str	r1, [r7, #24]
 801d020:	f003 0304 	and.w	r3, r3, #4
 801d024:	61fb      	str	r3, [r7, #28]
 801d026:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d02a:	460b      	mov	r3, r1
 801d02c:	4313      	orrs	r3, r2
 801d02e:	d011      	beq.n	801d054 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d034:	3308      	adds	r3, #8
 801d036:	2102      	movs	r1, #2
 801d038:	4618      	mov	r0, r3
 801d03a:	f001 f95d 	bl	801e2f8 <RCCEx_PLL2_Config>
 801d03e:	4603      	mov	r3, r0
 801d040:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d044:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d048:	2b00      	cmp	r3, #0
 801d04a:	d003      	beq.n	801d054 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d04c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d050:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801d054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d058:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d05c:	2100      	movs	r1, #0
 801d05e:	6139      	str	r1, [r7, #16]
 801d060:	f003 0308 	and.w	r3, r3, #8
 801d064:	617b      	str	r3, [r7, #20]
 801d066:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d06a:	460b      	mov	r3, r1
 801d06c:	4313      	orrs	r3, r2
 801d06e:	d011      	beq.n	801d094 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d070:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d074:	3328      	adds	r3, #40	; 0x28
 801d076:	2100      	movs	r1, #0
 801d078:	4618      	mov	r0, r3
 801d07a:	f001 f9ef 	bl	801e45c <RCCEx_PLL3_Config>
 801d07e:	4603      	mov	r3, r0
 801d080:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 801d084:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d088:	2b00      	cmp	r3, #0
 801d08a:	d003      	beq.n	801d094 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d08c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d090:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801d094:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d09c:	2100      	movs	r1, #0
 801d09e:	60b9      	str	r1, [r7, #8]
 801d0a0:	f003 0310 	and.w	r3, r3, #16
 801d0a4:	60fb      	str	r3, [r7, #12]
 801d0a6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d0aa:	460b      	mov	r3, r1
 801d0ac:	4313      	orrs	r3, r2
 801d0ae:	d011      	beq.n	801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d0b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0b4:	3328      	adds	r3, #40	; 0x28
 801d0b6:	2101      	movs	r1, #1
 801d0b8:	4618      	mov	r0, r3
 801d0ba:	f001 f9cf 	bl	801e45c <RCCEx_PLL3_Config>
 801d0be:	4603      	mov	r3, r0
 801d0c0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d0c4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d0c8:	2b00      	cmp	r3, #0
 801d0ca:	d003      	beq.n	801d0d4 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d0cc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d0d0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d0d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0dc:	2100      	movs	r1, #0
 801d0de:	6039      	str	r1, [r7, #0]
 801d0e0:	f003 0320 	and.w	r3, r3, #32
 801d0e4:	607b      	str	r3, [r7, #4]
 801d0e6:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d0ea:	460b      	mov	r3, r1
 801d0ec:	4313      	orrs	r3, r2
 801d0ee:	d011      	beq.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d0f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801d0f4:	3328      	adds	r3, #40	; 0x28
 801d0f6:	2102      	movs	r1, #2
 801d0f8:	4618      	mov	r0, r3
 801d0fa:	f001 f9af 	bl	801e45c <RCCEx_PLL3_Config>
 801d0fe:	4603      	mov	r3, r0
 801d100:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 801d104:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d108:	2b00      	cmp	r3, #0
 801d10a:	d003      	beq.n	801d114 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d10c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801d110:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 801d114:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 801d118:	2b00      	cmp	r3, #0
 801d11a:	d101      	bne.n	801d120 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 801d11c:	2300      	movs	r3, #0
 801d11e:	e000      	b.n	801d122 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 801d120:	2301      	movs	r3, #1
}
 801d122:	4618      	mov	r0, r3
 801d124:	f507 778c 	add.w	r7, r7, #280	; 0x118
 801d128:	46bd      	mov	sp, r7
 801d12a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801d12e:	bf00      	nop
 801d130:	58024400 	.word	0x58024400

0801d134 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801d134:	b580      	push	{r7, lr}
 801d136:	b090      	sub	sp, #64	; 0x40
 801d138:	af00      	add	r7, sp, #0
 801d13a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801d13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d142:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801d146:	430b      	orrs	r3, r1
 801d148:	f040 8094 	bne.w	801d274 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801d14c:	4b9b      	ldr	r3, [pc, #620]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d14e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d150:	f003 0307 	and.w	r3, r3, #7
 801d154:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d158:	2b04      	cmp	r3, #4
 801d15a:	f200 8087 	bhi.w	801d26c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801d15e:	a201      	add	r2, pc, #4	; (adr r2, 801d164 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801d160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d164:	0801d179 	.word	0x0801d179
 801d168:	0801d1a1 	.word	0x0801d1a1
 801d16c:	0801d1c9 	.word	0x0801d1c9
 801d170:	0801d265 	.word	0x0801d265
 801d174:	0801d1f1 	.word	0x0801d1f1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d178:	4b90      	ldr	r3, [pc, #576]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d17a:	681b      	ldr	r3, [r3, #0]
 801d17c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d180:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d184:	d108      	bne.n	801d198 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d18a:	4618      	mov	r0, r3
 801d18c:	f000 ff62 	bl	801e054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d192:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d194:	f000 bc93 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d198:	2300      	movs	r3, #0
 801d19a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d19c:	f000 bc8f 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d1a0:	4b86      	ldr	r3, [pc, #536]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1a2:	681b      	ldr	r3, [r3, #0]
 801d1a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d1a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d1ac:	d108      	bne.n	801d1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d1ae:	f107 0318 	add.w	r3, r7, #24
 801d1b2:	4618      	mov	r0, r3
 801d1b4:	f000 fca6 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d1b8:	69bb      	ldr	r3, [r7, #24]
 801d1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d1bc:	f000 bc7f 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d1c0:	2300      	movs	r3, #0
 801d1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d1c4:	f000 bc7b 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d1c8:	4b7c      	ldr	r3, [pc, #496]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1ca:	681b      	ldr	r3, [r3, #0]
 801d1cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d1d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d1d4:	d108      	bne.n	801d1e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d1d6:	f107 030c 	add.w	r3, r7, #12
 801d1da:	4618      	mov	r0, r3
 801d1dc:	f000 fde6 	bl	801ddac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d1e0:	68fb      	ldr	r3, [r7, #12]
 801d1e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d1e4:	f000 bc6b 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d1e8:	2300      	movs	r3, #0
 801d1ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d1ec:	f000 bc67 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d1f0:	4b72      	ldr	r3, [pc, #456]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d1f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d1f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d1fa:	4b70      	ldr	r3, [pc, #448]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d1fc:	681b      	ldr	r3, [r3, #0]
 801d1fe:	f003 0304 	and.w	r3, r3, #4
 801d202:	2b04      	cmp	r3, #4
 801d204:	d10c      	bne.n	801d220 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801d206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d208:	2b00      	cmp	r3, #0
 801d20a:	d109      	bne.n	801d220 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d20c:	4b6b      	ldr	r3, [pc, #428]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d20e:	681b      	ldr	r3, [r3, #0]
 801d210:	08db      	lsrs	r3, r3, #3
 801d212:	f003 0303 	and.w	r3, r3, #3
 801d216:	4a6a      	ldr	r2, [pc, #424]	; (801d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d218:	fa22 f303 	lsr.w	r3, r2, r3
 801d21c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d21e:	e01f      	b.n	801d260 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d220:	4b66      	ldr	r3, [pc, #408]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d222:	681b      	ldr	r3, [r3, #0]
 801d224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d228:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d22c:	d106      	bne.n	801d23c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801d22e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d230:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d234:	d102      	bne.n	801d23c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d236:	4b63      	ldr	r3, [pc, #396]	; (801d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d238:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d23a:	e011      	b.n	801d260 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d23c:	4b5f      	ldr	r3, [pc, #380]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d23e:	681b      	ldr	r3, [r3, #0]
 801d240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d248:	d106      	bne.n	801d258 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801d24a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d24c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d250:	d102      	bne.n	801d258 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d252:	4b5d      	ldr	r3, [pc, #372]	; (801d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d254:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d256:	e003      	b.n	801d260 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d258:	2300      	movs	r3, #0
 801d25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d25c:	f000 bc2f 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d260:	f000 bc2d 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d264:	4b59      	ldr	r3, [pc, #356]	; (801d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d268:	f000 bc29 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d26c:	2300      	movs	r3, #0
 801d26e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d270:	f000 bc25 	b.w	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801d274:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d278:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 801d27c:	430b      	orrs	r3, r1
 801d27e:	f040 80a7 	bne.w	801d3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801d282:	4b4e      	ldr	r3, [pc, #312]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d286:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 801d28a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d28c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d28e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d292:	d054      	beq.n	801d33e <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 801d294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d296:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801d29a:	f200 808b 	bhi.w	801d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d29e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d2a4:	f000 8083 	beq.w	801d3ae <HAL_RCCEx_GetPeriphCLKFreq+0x27a>
 801d2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801d2ae:	f200 8081 	bhi.w	801d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d2b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d2b8:	d02f      	beq.n	801d31a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801d2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801d2c0:	d878      	bhi.n	801d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
 801d2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d004      	beq.n	801d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x19e>
 801d2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d2ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801d2ce:	d012      	beq.n	801d2f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1c2>
 801d2d0:	e070      	b.n	801d3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x280>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d2d2:	4b3a      	ldr	r3, [pc, #232]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2d4:	681b      	ldr	r3, [r3, #0]
 801d2d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d2da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d2de:	d107      	bne.n	801d2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d2e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d2e4:	4618      	mov	r0, r3
 801d2e6:	f000 feb5 	bl	801e054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d2ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d2ee:	e3e6      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d2f0:	2300      	movs	r3, #0
 801d2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d2f4:	e3e3      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d2f6:	4b31      	ldr	r3, [pc, #196]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d2f8:	681b      	ldr	r3, [r3, #0]
 801d2fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d2fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d302:	d107      	bne.n	801d314 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d304:	f107 0318 	add.w	r3, r7, #24
 801d308:	4618      	mov	r0, r3
 801d30a:	f000 fbfb 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d30e:	69bb      	ldr	r3, [r7, #24]
 801d310:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d312:	e3d4      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d314:	2300      	movs	r3, #0
 801d316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d318:	e3d1      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d31a:	4b28      	ldr	r3, [pc, #160]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d31c:	681b      	ldr	r3, [r3, #0]
 801d31e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d326:	d107      	bne.n	801d338 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d328:	f107 030c 	add.w	r3, r7, #12
 801d32c:	4618      	mov	r0, r3
 801d32e:	f000 fd3d 	bl	801ddac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d332:	68fb      	ldr	r3, [r7, #12]
 801d334:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d336:	e3c2      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d338:	2300      	movs	r3, #0
 801d33a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d33c:	e3bf      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d33e:	4b1f      	ldr	r3, [pc, #124]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d342:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d346:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d348:	4b1c      	ldr	r3, [pc, #112]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d34a:	681b      	ldr	r3, [r3, #0]
 801d34c:	f003 0304 	and.w	r3, r3, #4
 801d350:	2b04      	cmp	r3, #4
 801d352:	d10c      	bne.n	801d36e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
 801d354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d356:	2b00      	cmp	r3, #0
 801d358:	d109      	bne.n	801d36e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d35a:	4b18      	ldr	r3, [pc, #96]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d35c:	681b      	ldr	r3, [r3, #0]
 801d35e:	08db      	lsrs	r3, r3, #3
 801d360:	f003 0303 	and.w	r3, r3, #3
 801d364:	4a16      	ldr	r2, [pc, #88]	; (801d3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 801d366:	fa22 f303 	lsr.w	r3, r2, r3
 801d36a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d36c:	e01e      	b.n	801d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d36e:	4b13      	ldr	r3, [pc, #76]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d37a:	d106      	bne.n	801d38a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
 801d37c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d37e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d382:	d102      	bne.n	801d38a <HAL_RCCEx_GetPeriphCLKFreq+0x256>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d384:	4b0f      	ldr	r3, [pc, #60]	; (801d3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x290>)
 801d386:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d388:	e010      	b.n	801d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d38a:	4b0c      	ldr	r3, [pc, #48]	; (801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0x288>)
 801d38c:	681b      	ldr	r3, [r3, #0]
 801d38e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d392:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d396:	d106      	bne.n	801d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
 801d398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d39a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d39e:	d102      	bne.n	801d3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x272>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d3a0:	4b09      	ldr	r3, [pc, #36]	; (801d3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801d3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d3a4:	e002      	b.n	801d3ac <HAL_RCCEx_GetPeriphCLKFreq+0x278>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d3aa:	e388      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d3ac:	e387      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d3ae:	4b07      	ldr	r3, [pc, #28]	; (801d3cc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801d3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3b2:	e384      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d3b4:	2300      	movs	r3, #0
 801d3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d3b8:	e381      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d3ba:	bf00      	nop
 801d3bc:	58024400 	.word	0x58024400
 801d3c0:	03d09000 	.word	0x03d09000
 801d3c4:	003d0900 	.word	0x003d0900
 801d3c8:	007a1200 	.word	0x007a1200
 801d3cc:	00bb8000 	.word	0x00bb8000
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801d3d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d3d4:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801d3d8:	430b      	orrs	r3, r1
 801d3da:	f040 809c 	bne.w	801d516 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801d3de:	4b9e      	ldr	r3, [pc, #632]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d3e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d3e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801d3e6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801d3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d3ee:	d054      	beq.n	801d49a <HAL_RCCEx_GetPeriphCLKFreq+0x366>
 801d3f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801d3f6:	f200 808b 	bhi.w	801d510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d3fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d400:	f000 8083 	beq.w	801d50a <HAL_RCCEx_GetPeriphCLKFreq+0x3d6>
 801d404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d406:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801d40a:	f200 8081 	bhi.w	801d510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d40e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d414:	d02f      	beq.n	801d476 <HAL_RCCEx_GetPeriphCLKFreq+0x342>
 801d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d418:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d41c:	d878      	bhi.n	801d510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 801d41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d420:	2b00      	cmp	r3, #0
 801d422:	d004      	beq.n	801d42e <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 801d424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d426:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801d42a:	d012      	beq.n	801d452 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 801d42c:	e070      	b.n	801d510 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d42e:	4b8a      	ldr	r3, [pc, #552]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d430:	681b      	ldr	r3, [r3, #0]
 801d432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d436:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d43a:	d107      	bne.n	801d44c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d43c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d440:	4618      	mov	r0, r3
 801d442:	f000 fe07 	bl	801e054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d448:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d44a:	e338      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d44c:	2300      	movs	r3, #0
 801d44e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d450:	e335      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d452:	4b81      	ldr	r3, [pc, #516]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d454:	681b      	ldr	r3, [r3, #0]
 801d456:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d45a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d45e:	d107      	bne.n	801d470 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d460:	f107 0318 	add.w	r3, r7, #24
 801d464:	4618      	mov	r0, r3
 801d466:	f000 fb4d 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d46a:	69bb      	ldr	r3, [r7, #24]
 801d46c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d46e:	e326      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d470:	2300      	movs	r3, #0
 801d472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d474:	e323      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d476:	4b78      	ldr	r3, [pc, #480]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d478:	681b      	ldr	r3, [r3, #0]
 801d47a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d47e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d482:	d107      	bne.n	801d494 <HAL_RCCEx_GetPeriphCLKFreq+0x360>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d484:	f107 030c 	add.w	r3, r7, #12
 801d488:	4618      	mov	r0, r3
 801d48a:	f000 fc8f 	bl	801ddac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d48e:	68fb      	ldr	r3, [r7, #12]
 801d490:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d492:	e314      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d494:	2300      	movs	r3, #0
 801d496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d498:	e311      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d49a:	4b6f      	ldr	r3, [pc, #444]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d49e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d4a2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d4a4:	4b6c      	ldr	r3, [pc, #432]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	f003 0304 	and.w	r3, r3, #4
 801d4ac:	2b04      	cmp	r3, #4
 801d4ae:	d10c      	bne.n	801d4ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
 801d4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d109      	bne.n	801d4ca <HAL_RCCEx_GetPeriphCLKFreq+0x396>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d4b6:	4b68      	ldr	r3, [pc, #416]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4b8:	681b      	ldr	r3, [r3, #0]
 801d4ba:	08db      	lsrs	r3, r3, #3
 801d4bc:	f003 0303 	and.w	r3, r3, #3
 801d4c0:	4a66      	ldr	r2, [pc, #408]	; (801d65c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d4c2:	fa22 f303 	lsr.w	r3, r2, r3
 801d4c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4c8:	e01e      	b.n	801d508 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d4ca:	4b63      	ldr	r3, [pc, #396]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4cc:	681b      	ldr	r3, [r3, #0]
 801d4ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d4d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d4d6:	d106      	bne.n	801d4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 801d4d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d4de:	d102      	bne.n	801d4e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d4e0:	4b5f      	ldr	r3, [pc, #380]	; (801d660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d4e4:	e010      	b.n	801d508 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d4e6:	4b5c      	ldr	r3, [pc, #368]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d4e8:	681b      	ldr	r3, [r3, #0]
 801d4ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d4ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d4f2:	d106      	bne.n	801d502 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
 801d4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d4fa:	d102      	bne.n	801d502 <HAL_RCCEx_GetPeriphCLKFreq+0x3ce>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d4fc:	4b59      	ldr	r3, [pc, #356]	; (801d664 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d4fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d500:	e002      	b.n	801d508 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d502:	2300      	movs	r3, #0
 801d504:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d506:	e2da      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d508:	e2d9      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d50a:	4b57      	ldr	r3, [pc, #348]	; (801d668 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d50e:	e2d6      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d510:	2300      	movs	r3, #0
 801d512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d514:	e2d3      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801d516:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d51a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 801d51e:	430b      	orrs	r3, r1
 801d520:	f040 80a7 	bne.w	801d672 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801d524:	4b4c      	ldr	r3, [pc, #304]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d526:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d528:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 801d52c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d534:	d055      	beq.n	801d5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ae>
 801d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d538:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801d53c:	f200 8096 	bhi.w	801d66c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d542:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d546:	f000 8084 	beq.w	801d652 <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
 801d54a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d54c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801d550:	f200 808c 	bhi.w	801d66c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d556:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d55a:	d030      	beq.n	801d5be <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 801d55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d55e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801d562:	f200 8083 	bhi.w	801d66c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
 801d566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d568:	2b00      	cmp	r3, #0
 801d56a:	d004      	beq.n	801d576 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
 801d56c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d56e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801d572:	d012      	beq.n	801d59a <HAL_RCCEx_GetPeriphCLKFreq+0x466>
 801d574:	e07a      	b.n	801d66c <HAL_RCCEx_GetPeriphCLKFreq+0x538>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d576:	4b38      	ldr	r3, [pc, #224]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d57e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d582:	d107      	bne.n	801d594 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d584:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d588:	4618      	mov	r0, r3
 801d58a:	f000 fd63 	bl	801e054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d58e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d590:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d592:	e294      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d594:	2300      	movs	r3, #0
 801d596:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d598:	e291      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d59a:	4b2f      	ldr	r3, [pc, #188]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d59c:	681b      	ldr	r3, [r3, #0]
 801d59e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d5a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d5a6:	d107      	bne.n	801d5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d5a8:	f107 0318 	add.w	r3, r7, #24
 801d5ac:	4618      	mov	r0, r3
 801d5ae:	f000 faa9 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d5b2:	69bb      	ldr	r3, [r7, #24]
 801d5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d5b6:	e282      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d5b8:	2300      	movs	r3, #0
 801d5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5bc:	e27f      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d5be:	4b26      	ldr	r3, [pc, #152]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d5c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d5ca:	d107      	bne.n	801d5dc <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d5cc:	f107 030c 	add.w	r3, r7, #12
 801d5d0:	4618      	mov	r0, r3
 801d5d2:	f000 fbeb 	bl	801ddac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801d5d6:	68fb      	ldr	r3, [r7, #12]
 801d5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d5da:	e270      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d5dc:	2300      	movs	r3, #0
 801d5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d5e0:	e26d      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d5e2:	4b1d      	ldr	r3, [pc, #116]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d5e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d5ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d5ec:	4b1a      	ldr	r3, [pc, #104]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d5ee:	681b      	ldr	r3, [r3, #0]
 801d5f0:	f003 0304 	and.w	r3, r3, #4
 801d5f4:	2b04      	cmp	r3, #4
 801d5f6:	d10c      	bne.n	801d612 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
 801d5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d109      	bne.n	801d612 <HAL_RCCEx_GetPeriphCLKFreq+0x4de>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d5fe:	4b16      	ldr	r3, [pc, #88]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d600:	681b      	ldr	r3, [r3, #0]
 801d602:	08db      	lsrs	r3, r3, #3
 801d604:	f003 0303 	and.w	r3, r3, #3
 801d608:	4a14      	ldr	r2, [pc, #80]	; (801d65c <HAL_RCCEx_GetPeriphCLKFreq+0x528>)
 801d60a:	fa22 f303 	lsr.w	r3, r2, r3
 801d60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d610:	e01e      	b.n	801d650 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d612:	4b11      	ldr	r3, [pc, #68]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d614:	681b      	ldr	r3, [r3, #0]
 801d616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d61e:	d106      	bne.n	801d62e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
 801d620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d626:	d102      	bne.n	801d62e <HAL_RCCEx_GetPeriphCLKFreq+0x4fa>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d628:	4b0d      	ldr	r3, [pc, #52]	; (801d660 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>)
 801d62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d62c:	e010      	b.n	801d650 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d62e:	4b0a      	ldr	r3, [pc, #40]	; (801d658 <HAL_RCCEx_GetPeriphCLKFreq+0x524>)
 801d630:	681b      	ldr	r3, [r3, #0]
 801d632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d63a:	d106      	bne.n	801d64a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 801d63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d642:	d102      	bne.n	801d64a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d644:	4b07      	ldr	r3, [pc, #28]	; (801d664 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801d646:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d648:	e002      	b.n	801d650 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d64a:	2300      	movs	r3, #0
 801d64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d64e:	e236      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d650:	e235      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801d652:	4b05      	ldr	r3, [pc, #20]	; (801d668 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801d654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d656:	e232      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d658:	58024400 	.word	0x58024400
 801d65c:	03d09000 	.word	0x03d09000
 801d660:	003d0900 	.word	0x003d0900
 801d664:	007a1200 	.word	0x007a1200
 801d668:	00bb8000 	.word	0x00bb8000
      }
      default :
      {
        frequency = 0;
 801d66c:	2300      	movs	r3, #0
 801d66e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d670:	e225      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801d672:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d676:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 801d67a:	430b      	orrs	r3, r1
 801d67c:	f040 8085 	bne.w	801d78a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801d680:	4b9c      	ldr	r3, [pc, #624]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801d684:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 801d688:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 801d68a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d68c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d690:	d06b      	beq.n	801d76a <HAL_RCCEx_GetPeriphCLKFreq+0x636>
 801d692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801d698:	d874      	bhi.n	801d784 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d69c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d6a0:	d056      	beq.n	801d750 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
 801d6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 801d6a8:	d86c      	bhi.n	801d784 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6ac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d6b0:	d03b      	beq.n	801d72a <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
 801d6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6b4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801d6b8:	d864      	bhi.n	801d784 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d6c0:	d021      	beq.n	801d706 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 801d6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d6c8:	d85c      	bhi.n	801d784 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 801d6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6cc:	2b00      	cmp	r3, #0
 801d6ce:	d004      	beq.n	801d6da <HAL_RCCEx_GetPeriphCLKFreq+0x5a6>
 801d6d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d6d6:	d004      	beq.n	801d6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ae>
 801d6d8:	e054      	b.n	801d784 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801d6da:	f7fe fb75 	bl	801bdc8 <HAL_RCC_GetPCLK1Freq>
 801d6de:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d6e0:	e1ed      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d6e2:	4b84      	ldr	r3, [pc, #528]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d6e4:	681b      	ldr	r3, [r3, #0]
 801d6e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d6ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d6ee:	d107      	bne.n	801d700 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d6f0:	f107 0318 	add.w	r3, r7, #24
 801d6f4:	4618      	mov	r0, r3
 801d6f6:	f000 fa05 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d6fa:	69fb      	ldr	r3, [r7, #28]
 801d6fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d6fe:	e1de      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d700:	2300      	movs	r3, #0
 801d702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d704:	e1db      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d706:	4b7b      	ldr	r3, [pc, #492]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d70e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d712:	d107      	bne.n	801d724 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d714:	f107 030c 	add.w	r3, r7, #12
 801d718:	4618      	mov	r0, r3
 801d71a:	f000 fb47 	bl	801ddac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d71e:	693b      	ldr	r3, [r7, #16]
 801d720:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d722:	e1cc      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d724:	2300      	movs	r3, #0
 801d726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d728:	e1c9      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d72a:	4b72      	ldr	r3, [pc, #456]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	f003 0304 	and.w	r3, r3, #4
 801d732:	2b04      	cmp	r3, #4
 801d734:	d109      	bne.n	801d74a <HAL_RCCEx_GetPeriphCLKFreq+0x616>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d736:	4b6f      	ldr	r3, [pc, #444]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d738:	681b      	ldr	r3, [r3, #0]
 801d73a:	08db      	lsrs	r3, r3, #3
 801d73c:	f003 0303 	and.w	r3, r3, #3
 801d740:	4a6d      	ldr	r2, [pc, #436]	; (801d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d742:	fa22 f303 	lsr.w	r3, r2, r3
 801d746:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d748:	e1b9      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d74a:	2300      	movs	r3, #0
 801d74c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d74e:	e1b6      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d750:	4b68      	ldr	r3, [pc, #416]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d752:	681b      	ldr	r3, [r3, #0]
 801d754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d758:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d75c:	d102      	bne.n	801d764 <HAL_RCCEx_GetPeriphCLKFreq+0x630>
        {
          frequency = CSI_VALUE;
 801d75e:	4b67      	ldr	r3, [pc, #412]	; (801d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d760:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d762:	e1ac      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d764:	2300      	movs	r3, #0
 801d766:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d768:	e1a9      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d76a:	4b62      	ldr	r3, [pc, #392]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d76c:	681b      	ldr	r3, [r3, #0]
 801d76e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d772:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d776:	d102      	bne.n	801d77e <HAL_RCCEx_GetPeriphCLKFreq+0x64a>
        {
          frequency = HSE_VALUE;
 801d778:	4b61      	ldr	r3, [pc, #388]	; (801d900 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d77c:	e19f      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d77e:	2300      	movs	r3, #0
 801d780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d782:	e19c      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801d784:	2300      	movs	r3, #0
 801d786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d788:	e199      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801d78a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d78e:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 801d792:	430b      	orrs	r3, r1
 801d794:	d173      	bne.n	801d87e <HAL_RCCEx_GetPeriphCLKFreq+0x74a>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801d796:	4b57      	ldr	r3, [pc, #348]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d79a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 801d79e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d7a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d7a6:	d02f      	beq.n	801d808 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
 801d7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d7ae:	d863      	bhi.n	801d878 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
 801d7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7b2:	2b00      	cmp	r3, #0
 801d7b4:	d004      	beq.n	801d7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 801d7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d7b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d7bc:	d012      	beq.n	801d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6b0>
 801d7be:	e05b      	b.n	801d878 <HAL_RCCEx_GetPeriphCLKFreq+0x744>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d7c0:	4b4c      	ldr	r3, [pc, #304]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7c2:	681b      	ldr	r3, [r3, #0]
 801d7c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d7c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d7cc:	d107      	bne.n	801d7de <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d7ce:	f107 0318 	add.w	r3, r7, #24
 801d7d2:	4618      	mov	r0, r3
 801d7d4:	f000 f996 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d7d8:	69bb      	ldr	r3, [r7, #24]
 801d7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d7dc:	e16f      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d7de:	2300      	movs	r3, #0
 801d7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d7e2:	e16c      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d7e4:	4b43      	ldr	r3, [pc, #268]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d7e6:	681b      	ldr	r3, [r3, #0]
 801d7e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d7ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d7f0:	d107      	bne.n	801d802 <HAL_RCCEx_GetPeriphCLKFreq+0x6ce>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d7f2:	f107 030c 	add.w	r3, r7, #12
 801d7f6:	4618      	mov	r0, r3
 801d7f8:	f000 fad8 	bl	801ddac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801d7fc:	697b      	ldr	r3, [r7, #20]
 801d7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d800:	e15d      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d802:	2300      	movs	r3, #0
 801d804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d806:	e15a      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d808:	4b3a      	ldr	r3, [pc, #232]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d80a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d80c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801d810:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d812:	4b38      	ldr	r3, [pc, #224]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d814:	681b      	ldr	r3, [r3, #0]
 801d816:	f003 0304 	and.w	r3, r3, #4
 801d81a:	2b04      	cmp	r3, #4
 801d81c:	d10c      	bne.n	801d838 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 801d81e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d820:	2b00      	cmp	r3, #0
 801d822:	d109      	bne.n	801d838 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d824:	4b33      	ldr	r3, [pc, #204]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d826:	681b      	ldr	r3, [r3, #0]
 801d828:	08db      	lsrs	r3, r3, #3
 801d82a:	f003 0303 	and.w	r3, r3, #3
 801d82e:	4a32      	ldr	r2, [pc, #200]	; (801d8f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>)
 801d830:	fa22 f303 	lsr.w	r3, r2, r3
 801d834:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d836:	e01e      	b.n	801d876 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d838:	4b2e      	ldr	r3, [pc, #184]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d83a:	681b      	ldr	r3, [r3, #0]
 801d83c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d844:	d106      	bne.n	801d854 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
 801d846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d84c:	d102      	bne.n	801d854 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d84e:	4b2b      	ldr	r3, [pc, #172]	; (801d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>)
 801d850:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d852:	e010      	b.n	801d876 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d854:	4b27      	ldr	r3, [pc, #156]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d856:	681b      	ldr	r3, [r3, #0]
 801d858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801d85c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801d860:	d106      	bne.n	801d870 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
 801d862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d868:	d102      	bne.n	801d870 <HAL_RCCEx_GetPeriphCLKFreq+0x73c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d86a:	4b25      	ldr	r3, [pc, #148]	; (801d900 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>)
 801d86c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d86e:	e002      	b.n	801d876 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d870:	2300      	movs	r3, #0
 801d872:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 801d874:	e123      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d876:	e122      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d878:	2300      	movs	r3, #0
 801d87a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d87c:	e11f      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801d87e:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d882:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 801d886:	430b      	orrs	r3, r1
 801d888:	d13c      	bne.n	801d904 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801d88a:	4b1a      	ldr	r3, [pc, #104]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d88c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801d88e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801d892:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d896:	2b00      	cmp	r3, #0
 801d898:	d004      	beq.n	801d8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 801d89a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d89c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801d8a0:	d012      	beq.n	801d8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 801d8a2:	e023      	b.n	801d8ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d8a4:	4b13      	ldr	r3, [pc, #76]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d8a6:	681b      	ldr	r3, [r3, #0]
 801d8a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d8ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801d8b0:	d107      	bne.n	801d8c2 <HAL_RCCEx_GetPeriphCLKFreq+0x78e>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d8b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d8b6:	4618      	mov	r0, r3
 801d8b8:	f000 fbcc 	bl	801e054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d8be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d8c0:	e0fd      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d8c2:	2300      	movs	r3, #0
 801d8c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8c6:	e0fa      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d8c8:	4b0a      	ldr	r3, [pc, #40]	; (801d8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>)
 801d8ca:	681b      	ldr	r3, [r3, #0]
 801d8cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d8d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d8d4:	d107      	bne.n	801d8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d8d6:	f107 0318 	add.w	r3, r7, #24
 801d8da:	4618      	mov	r0, r3
 801d8dc:	f000 f912 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801d8e0:	6a3b      	ldr	r3, [r7, #32]
 801d8e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d8e4:	e0eb      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d8e6:	2300      	movs	r3, #0
 801d8e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8ea:	e0e8      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }

      default :
      {
        frequency = 0;
 801d8ec:	2300      	movs	r3, #0
 801d8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d8f0:	e0e5      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 801d8f2:	bf00      	nop
 801d8f4:	58024400 	.word	0x58024400
 801d8f8:	03d09000 	.word	0x03d09000
 801d8fc:	003d0900 	.word	0x003d0900
 801d900:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801d904:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d908:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 801d90c:	430b      	orrs	r3, r1
 801d90e:	f040 8085 	bne.w	801da1c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801d912:	4b6d      	ldr	r3, [pc, #436]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d916:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 801d91a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801d91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d91e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d922:	d06b      	beq.n	801d9fc <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 801d924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d926:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801d92a:	d874      	bhi.n	801da16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d92e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d932:	d056      	beq.n	801d9e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ae>
 801d934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801d93a:	d86c      	bhi.n	801da16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d93c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d93e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d942:	d03b      	beq.n	801d9bc <HAL_RCCEx_GetPeriphCLKFreq+0x888>
 801d944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d946:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801d94a:	d864      	bhi.n	801da16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d94e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d952:	d021      	beq.n	801d998 <HAL_RCCEx_GetPeriphCLKFreq+0x864>
 801d954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d956:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d95a:	d85c      	bhi.n	801da16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 801d95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d95e:	2b00      	cmp	r3, #0
 801d960:	d004      	beq.n	801d96c <HAL_RCCEx_GetPeriphCLKFreq+0x838>
 801d962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d964:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801d968:	d004      	beq.n	801d974 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
 801d96a:	e054      	b.n	801da16 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801d96c:	f000 f8b4 	bl	801dad8 <HAL_RCCEx_GetD3PCLK1Freq>
 801d970:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801d972:	e0a4      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d974:	4b54      	ldr	r3, [pc, #336]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d976:	681b      	ldr	r3, [r3, #0]
 801d978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d97c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801d980:	d107      	bne.n	801d992 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d982:	f107 0318 	add.w	r3, r7, #24
 801d986:	4618      	mov	r0, r3
 801d988:	f000 f8bc 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d98c:	69fb      	ldr	r3, [r7, #28]
 801d98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d990:	e095      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d992:	2300      	movs	r3, #0
 801d994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d996:	e092      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d998:	4b4b      	ldr	r3, [pc, #300]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d99a:	681b      	ldr	r3, [r3, #0]
 801d99c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801d9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801d9a4:	d107      	bne.n	801d9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d9a6:	f107 030c 	add.w	r3, r7, #12
 801d9aa:	4618      	mov	r0, r3
 801d9ac:	f000 f9fe 	bl	801ddac <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d9b0:	693b      	ldr	r3, [r7, #16]
 801d9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d9b4:	e083      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d9b6:	2300      	movs	r3, #0
 801d9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9ba:	e080      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d9bc:	4b42      	ldr	r3, [pc, #264]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9be:	681b      	ldr	r3, [r3, #0]
 801d9c0:	f003 0304 	and.w	r3, r3, #4
 801d9c4:	2b04      	cmp	r3, #4
 801d9c6:	d109      	bne.n	801d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d9c8:	4b3f      	ldr	r3, [pc, #252]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9ca:	681b      	ldr	r3, [r3, #0]
 801d9cc:	08db      	lsrs	r3, r3, #3
 801d9ce:	f003 0303 	and.w	r3, r3, #3
 801d9d2:	4a3e      	ldr	r2, [pc, #248]	; (801dacc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 801d9d4:	fa22 f303 	lsr.w	r3, r2, r3
 801d9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d9da:	e070      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d9dc:	2300      	movs	r3, #0
 801d9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9e0:	e06d      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d9e2:	4b39      	ldr	r3, [pc, #228]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801d9ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d9ee:	d102      	bne.n	801d9f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
        {
          frequency = CSI_VALUE;
 801d9f0:	4b37      	ldr	r3, [pc, #220]	; (801dad0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 801d9f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d9f4:	e063      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801d9f6:	2300      	movs	r3, #0
 801d9f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801d9fa:	e060      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d9fc:	4b32      	ldr	r3, [pc, #200]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801d9fe:	681b      	ldr	r3, [r3, #0]
 801da00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801da04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801da08:	d102      	bne.n	801da10 <HAL_RCCEx_GetPeriphCLKFreq+0x8dc>
        {
          frequency = HSE_VALUE;
 801da0a:	4b32      	ldr	r3, [pc, #200]	; (801dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801da0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da0e:	e056      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da10:	2300      	movs	r3, #0
 801da12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da14:	e053      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801da16:	2300      	movs	r3, #0
 801da18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da1a:	e050      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801da1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801da20:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 801da24:	430b      	orrs	r3, r1
 801da26:	d148      	bne.n	801daba <HAL_RCCEx_GetPeriphCLKFreq+0x986>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801da28:	4b27      	ldr	r3, [pc, #156]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801da2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801da30:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 801da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801da38:	d02a      	beq.n	801da90 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 801da3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801da40:	d838      	bhi.n	801dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 801da42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da44:	2b00      	cmp	r3, #0
 801da46:	d004      	beq.n	801da52 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 801da48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801da4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801da4e:	d00d      	beq.n	801da6c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 801da50:	e030      	b.n	801dab4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801da52:	4b1d      	ldr	r3, [pc, #116]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da54:	681b      	ldr	r3, [r3, #0]
 801da56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801da5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801da5e:	d102      	bne.n	801da66 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = HSE_VALUE;
 801da60:	4b1c      	ldr	r3, [pc, #112]	; (801dad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 801da62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da64:	e02b      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da66:	2300      	movs	r3, #0
 801da68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da6a:	e028      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801da6c:	4b16      	ldr	r3, [pc, #88]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da6e:	681b      	ldr	r3, [r3, #0]
 801da70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801da74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801da78:	d107      	bne.n	801da8a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801da7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801da7e:	4618      	mov	r0, r3
 801da80:	f000 fae8 	bl	801e054 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801da84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801da86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801da88:	e019      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801da8a:	2300      	movs	r3, #0
 801da8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801da8e:	e016      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801da90:	4b0d      	ldr	r3, [pc, #52]	; (801dac8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 801da92:	681b      	ldr	r3, [r3, #0]
 801da94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801da98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801da9c:	d107      	bne.n	801daae <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801da9e:	f107 0318 	add.w	r3, r7, #24
 801daa2:	4618      	mov	r0, r3
 801daa4:	f000 f82e 	bl	801db04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801daa8:	69fb      	ldr	r3, [r7, #28]
 801daaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801daac:	e007      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 801daae:	2300      	movs	r3, #0
 801dab0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dab2:	e004      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
      default :
      {
        frequency = 0;
 801dab4:	2300      	movs	r3, #0
 801dab6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801dab8:	e001      	b.n	801dabe <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
  }
  else
  {
    frequency = 0;
 801daba:	2300      	movs	r3, #0
 801dabc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 801dabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 801dac0:	4618      	mov	r0, r3
 801dac2:	3740      	adds	r7, #64	; 0x40
 801dac4:	46bd      	mov	sp, r7
 801dac6:	bd80      	pop	{r7, pc}
 801dac8:	58024400 	.word	0x58024400
 801dacc:	03d09000 	.word	0x03d09000
 801dad0:	003d0900 	.word	0x003d0900
 801dad4:	007a1200 	.word	0x007a1200

0801dad8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801dad8:	b580      	push	{r7, lr}
 801dada:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801dadc:	f7fe f944 	bl	801bd68 <HAL_RCC_GetHCLKFreq>
 801dae0:	4602      	mov	r2, r0
 801dae2:	4b06      	ldr	r3, [pc, #24]	; (801dafc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801dae4:	6a1b      	ldr	r3, [r3, #32]
 801dae6:	091b      	lsrs	r3, r3, #4
 801dae8:	f003 0307 	and.w	r3, r3, #7
 801daec:	4904      	ldr	r1, [pc, #16]	; (801db00 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801daee:	5ccb      	ldrb	r3, [r1, r3]
 801daf0:	f003 031f 	and.w	r3, r3, #31
 801daf4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801daf8:	4618      	mov	r0, r3
 801dafa:	bd80      	pop	{r7, pc}
 801dafc:	58024400 	.word	0x58024400
 801db00:	08020d10 	.word	0x08020d10

0801db04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801db04:	b480      	push	{r7}
 801db06:	b089      	sub	sp, #36	; 0x24
 801db08:	af00      	add	r7, sp, #0
 801db0a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801db0c:	4ba1      	ldr	r3, [pc, #644]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db10:	f003 0303 	and.w	r3, r3, #3
 801db14:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801db16:	4b9f      	ldr	r3, [pc, #636]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db1a:	0b1b      	lsrs	r3, r3, #12
 801db1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801db20:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801db22:	4b9c      	ldr	r3, [pc, #624]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801db26:	091b      	lsrs	r3, r3, #4
 801db28:	f003 0301 	and.w	r3, r3, #1
 801db2c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801db2e:	4b99      	ldr	r3, [pc, #612]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801db32:	08db      	lsrs	r3, r3, #3
 801db34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801db38:	693a      	ldr	r2, [r7, #16]
 801db3a:	fb02 f303 	mul.w	r3, r2, r3
 801db3e:	ee07 3a90 	vmov	s15, r3
 801db42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801db4a:	697b      	ldr	r3, [r7, #20]
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	f000 8111 	beq.w	801dd74 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801db52:	69bb      	ldr	r3, [r7, #24]
 801db54:	2b02      	cmp	r3, #2
 801db56:	f000 8083 	beq.w	801dc60 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801db5a:	69bb      	ldr	r3, [r7, #24]
 801db5c:	2b02      	cmp	r3, #2
 801db5e:	f200 80a1 	bhi.w	801dca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801db62:	69bb      	ldr	r3, [r7, #24]
 801db64:	2b00      	cmp	r3, #0
 801db66:	d003      	beq.n	801db70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801db68:	69bb      	ldr	r3, [r7, #24]
 801db6a:	2b01      	cmp	r3, #1
 801db6c:	d056      	beq.n	801dc1c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801db6e:	e099      	b.n	801dca4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801db70:	4b88      	ldr	r3, [pc, #544]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	f003 0320 	and.w	r3, r3, #32
 801db78:	2b00      	cmp	r3, #0
 801db7a:	d02d      	beq.n	801dbd8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801db7c:	4b85      	ldr	r3, [pc, #532]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db7e:	681b      	ldr	r3, [r3, #0]
 801db80:	08db      	lsrs	r3, r3, #3
 801db82:	f003 0303 	and.w	r3, r3, #3
 801db86:	4a84      	ldr	r2, [pc, #528]	; (801dd98 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801db88:	fa22 f303 	lsr.w	r3, r2, r3
 801db8c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db8e:	68bb      	ldr	r3, [r7, #8]
 801db90:	ee07 3a90 	vmov	s15, r3
 801db94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db98:	697b      	ldr	r3, [r7, #20]
 801db9a:	ee07 3a90 	vmov	s15, r3
 801db9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dba6:	4b7b      	ldr	r3, [pc, #492]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dbae:	ee07 3a90 	vmov	s15, r3
 801dbb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dbb6:	ed97 6a03 	vldr	s12, [r7, #12]
 801dbba:	eddf 5a78 	vldr	s11, [pc, #480]	; 801dd9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dbbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dbc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dbc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dbca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbce:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dbd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801dbd6:	e087      	b.n	801dce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dbd8:	697b      	ldr	r3, [r7, #20]
 801dbda:	ee07 3a90 	vmov	s15, r3
 801dbde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbe2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801dda0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801dbe6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dbea:	4b6a      	ldr	r3, [pc, #424]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dbf2:	ee07 3a90 	vmov	s15, r3
 801dbf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dbfa:	ed97 6a03 	vldr	s12, [r7, #12]
 801dbfe:	eddf 5a67 	vldr	s11, [pc, #412]	; 801dd9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc12:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dc1a:	e065      	b.n	801dce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dc1c:	697b      	ldr	r3, [r7, #20]
 801dc1e:	ee07 3a90 	vmov	s15, r3
 801dc22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc26:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801dda4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dc2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc2e:	4b59      	ldr	r3, [pc, #356]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc36:	ee07 3a90 	vmov	s15, r3
 801dc3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc3e:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc42:	eddf 5a56 	vldr	s11, [pc, #344]	; 801dd9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc56:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dc5e:	e043      	b.n	801dce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dc60:	697b      	ldr	r3, [r7, #20]
 801dc62:	ee07 3a90 	vmov	s15, r3
 801dc66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc6a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801dda8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801dc6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dc72:	4b48      	ldr	r3, [pc, #288]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dc76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dc7a:	ee07 3a90 	vmov	s15, r3
 801dc7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc82:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc86:	eddf 5a45 	vldr	s11, [pc, #276]	; 801dd9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dc96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dca2:	e021      	b.n	801dce8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dca4:	697b      	ldr	r3, [r7, #20]
 801dca6:	ee07 3a90 	vmov	s15, r3
 801dcaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcae:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801dda4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dcb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dcb6:	4b37      	ldr	r3, [pc, #220]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dcb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dcbe:	ee07 3a90 	vmov	s15, r3
 801dcc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dcc6:	ed97 6a03 	vldr	s12, [r7, #12]
 801dcca:	eddf 5a34 	vldr	s11, [pc, #208]	; 801dd9c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dcce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dcd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dcd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801dcda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dcde:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dce2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dce6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801dce8:	4b2a      	ldr	r3, [pc, #168]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dcec:	0a5b      	lsrs	r3, r3, #9
 801dcee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dcf2:	ee07 3a90 	vmov	s15, r3
 801dcf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dcfa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dcfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dd02:	edd7 6a07 	vldr	s13, [r7, #28]
 801dd06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dd0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dd0e:	ee17 2a90 	vmov	r2, s15
 801dd12:	687b      	ldr	r3, [r7, #4]
 801dd14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801dd16:	4b1f      	ldr	r3, [pc, #124]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dd18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd1a:	0c1b      	lsrs	r3, r3, #16
 801dd1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dd20:	ee07 3a90 	vmov	s15, r3
 801dd24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd28:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dd2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dd30:	edd7 6a07 	vldr	s13, [r7, #28]
 801dd34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dd38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dd3c:	ee17 2a90 	vmov	r2, s15
 801dd40:	687b      	ldr	r3, [r7, #4]
 801dd42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801dd44:	4b13      	ldr	r3, [pc, #76]	; (801dd94 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dd46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd48:	0e1b      	lsrs	r3, r3, #24
 801dd4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dd4e:	ee07 3a90 	vmov	s15, r3
 801dd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dd5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dd5e:	edd7 6a07 	vldr	s13, [r7, #28]
 801dd62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dd66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dd6a:	ee17 2a90 	vmov	r2, s15
 801dd6e:	687b      	ldr	r3, [r7, #4]
 801dd70:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801dd72:	e008      	b.n	801dd86 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801dd74:	687b      	ldr	r3, [r7, #4]
 801dd76:	2200      	movs	r2, #0
 801dd78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801dd7a:	687b      	ldr	r3, [r7, #4]
 801dd7c:	2200      	movs	r2, #0
 801dd7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801dd80:	687b      	ldr	r3, [r7, #4]
 801dd82:	2200      	movs	r2, #0
 801dd84:	609a      	str	r2, [r3, #8]
}
 801dd86:	bf00      	nop
 801dd88:	3724      	adds	r7, #36	; 0x24
 801dd8a:	46bd      	mov	sp, r7
 801dd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dd90:	4770      	bx	lr
 801dd92:	bf00      	nop
 801dd94:	58024400 	.word	0x58024400
 801dd98:	03d09000 	.word	0x03d09000
 801dd9c:	46000000 	.word	0x46000000
 801dda0:	4c742400 	.word	0x4c742400
 801dda4:	4a742400 	.word	0x4a742400
 801dda8:	4af42400 	.word	0x4af42400

0801ddac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801ddac:	b480      	push	{r7}
 801ddae:	b089      	sub	sp, #36	; 0x24
 801ddb0:	af00      	add	r7, sp, #0
 801ddb2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ddb4:	4ba1      	ldr	r3, [pc, #644]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddb8:	f003 0303 	and.w	r3, r3, #3
 801ddbc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801ddbe:	4b9f      	ldr	r3, [pc, #636]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ddc2:	0d1b      	lsrs	r3, r3, #20
 801ddc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ddc8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801ddca:	4b9c      	ldr	r3, [pc, #624]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ddce:	0a1b      	lsrs	r3, r3, #8
 801ddd0:	f003 0301 	and.w	r3, r3, #1
 801ddd4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801ddd6:	4b99      	ldr	r3, [pc, #612]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ddda:	08db      	lsrs	r3, r3, #3
 801dddc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dde0:	693a      	ldr	r2, [r7, #16]
 801dde2:	fb02 f303 	mul.w	r3, r2, r3
 801dde6:	ee07 3a90 	vmov	s15, r3
 801ddea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801ddf2:	697b      	ldr	r3, [r7, #20]
 801ddf4:	2b00      	cmp	r3, #0
 801ddf6:	f000 8111 	beq.w	801e01c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801ddfa:	69bb      	ldr	r3, [r7, #24]
 801ddfc:	2b02      	cmp	r3, #2
 801ddfe:	f000 8083 	beq.w	801df08 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801de02:	69bb      	ldr	r3, [r7, #24]
 801de04:	2b02      	cmp	r3, #2
 801de06:	f200 80a1 	bhi.w	801df4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801de0a:	69bb      	ldr	r3, [r7, #24]
 801de0c:	2b00      	cmp	r3, #0
 801de0e:	d003      	beq.n	801de18 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801de10:	69bb      	ldr	r3, [r7, #24]
 801de12:	2b01      	cmp	r3, #1
 801de14:	d056      	beq.n	801dec4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801de16:	e099      	b.n	801df4c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801de18:	4b88      	ldr	r3, [pc, #544]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de1a:	681b      	ldr	r3, [r3, #0]
 801de1c:	f003 0320 	and.w	r3, r3, #32
 801de20:	2b00      	cmp	r3, #0
 801de22:	d02d      	beq.n	801de80 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801de24:	4b85      	ldr	r3, [pc, #532]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de26:	681b      	ldr	r3, [r3, #0]
 801de28:	08db      	lsrs	r3, r3, #3
 801de2a:	f003 0303 	and.w	r3, r3, #3
 801de2e:	4a84      	ldr	r2, [pc, #528]	; (801e040 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801de30:	fa22 f303 	lsr.w	r3, r2, r3
 801de34:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de36:	68bb      	ldr	r3, [r7, #8]
 801de38:	ee07 3a90 	vmov	s15, r3
 801de3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de40:	697b      	ldr	r3, [r7, #20]
 801de42:	ee07 3a90 	vmov	s15, r3
 801de46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de4e:	4b7b      	ldr	r3, [pc, #492]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de56:	ee07 3a90 	vmov	s15, r3
 801de5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de5e:	ed97 6a03 	vldr	s12, [r7, #12]
 801de62:	eddf 5a78 	vldr	s11, [pc, #480]	; 801e044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801de72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de76:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801de7e:	e087      	b.n	801df90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de80:	697b      	ldr	r3, [r7, #20]
 801de82:	ee07 3a90 	vmov	s15, r3
 801de86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de8a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 801e048 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801de8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de92:	4b6a      	ldr	r3, [pc, #424]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801de96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de9a:	ee07 3a90 	vmov	s15, r3
 801de9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dea2:	ed97 6a03 	vldr	s12, [r7, #12]
 801dea6:	eddf 5a67 	vldr	s11, [pc, #412]	; 801e044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801deaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801deae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801deb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801deb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801deba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801debe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dec2:	e065      	b.n	801df90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dec4:	697b      	ldr	r3, [r7, #20]
 801dec6:	ee07 3a90 	vmov	s15, r3
 801deca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dece:	eddf 6a5f 	vldr	s13, [pc, #380]	; 801e04c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801ded2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ded6:	4b59      	ldr	r3, [pc, #356]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ded8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801deda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dede:	ee07 3a90 	vmov	s15, r3
 801dee2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dee6:	ed97 6a03 	vldr	s12, [r7, #12]
 801deea:	eddf 5a56 	vldr	s11, [pc, #344]	; 801e044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801deee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801def2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801def6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801defa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801defe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801df06:	e043      	b.n	801df90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801df08:	697b      	ldr	r3, [r7, #20]
 801df0a:	ee07 3a90 	vmov	s15, r3
 801df0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df12:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801e050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801df16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df1a:	4b48      	ldr	r3, [pc, #288]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df22:	ee07 3a90 	vmov	s15, r3
 801df26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df2a:	ed97 6a03 	vldr	s12, [r7, #12]
 801df2e:	eddf 5a45 	vldr	s11, [pc, #276]	; 801e044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801df32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df42:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801df4a:	e021      	b.n	801df90 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801df4c:	697b      	ldr	r3, [r7, #20]
 801df4e:	ee07 3a90 	vmov	s15, r3
 801df52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df56:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801e04c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801df5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801df5e:	4b37      	ldr	r3, [pc, #220]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801df66:	ee07 3a90 	vmov	s15, r3
 801df6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801df6e:	ed97 6a03 	vldr	s12, [r7, #12]
 801df72:	eddf 5a34 	vldr	s11, [pc, #208]	; 801e044 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801df76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801df7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801df7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801df82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801df86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801df8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801df8e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801df90:	4b2a      	ldr	r3, [pc, #168]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801df94:	0a5b      	lsrs	r3, r3, #9
 801df96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801df9a:	ee07 3a90 	vmov	s15, r3
 801df9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dfa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dfa6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dfaa:	edd7 6a07 	vldr	s13, [r7, #28]
 801dfae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dfb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dfb6:	ee17 2a90 	vmov	r2, s15
 801dfba:	687b      	ldr	r3, [r7, #4]
 801dfbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801dfbe:	4b1f      	ldr	r3, [pc, #124]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dfc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dfc2:	0c1b      	lsrs	r3, r3, #16
 801dfc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dfc8:	ee07 3a90 	vmov	s15, r3
 801dfcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dfd0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801dfd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dfd8:	edd7 6a07 	vldr	s13, [r7, #28]
 801dfdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dfe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dfe4:	ee17 2a90 	vmov	r2, s15
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801dfec:	4b13      	ldr	r3, [pc, #76]	; (801e03c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dfee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801dff0:	0e1b      	lsrs	r3, r3, #24
 801dff2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801dff6:	ee07 3a90 	vmov	s15, r3
 801dffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dffe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e002:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e006:	edd7 6a07 	vldr	s13, [r7, #28]
 801e00a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e00e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e012:	ee17 2a90 	vmov	r2, s15
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801e01a:	e008      	b.n	801e02e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801e01c:	687b      	ldr	r3, [r7, #4]
 801e01e:	2200      	movs	r2, #0
 801e020:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	2200      	movs	r2, #0
 801e026:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801e028:	687b      	ldr	r3, [r7, #4]
 801e02a:	2200      	movs	r2, #0
 801e02c:	609a      	str	r2, [r3, #8]
}
 801e02e:	bf00      	nop
 801e030:	3724      	adds	r7, #36	; 0x24
 801e032:	46bd      	mov	sp, r7
 801e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e038:	4770      	bx	lr
 801e03a:	bf00      	nop
 801e03c:	58024400 	.word	0x58024400
 801e040:	03d09000 	.word	0x03d09000
 801e044:	46000000 	.word	0x46000000
 801e048:	4c742400 	.word	0x4c742400
 801e04c:	4a742400 	.word	0x4a742400
 801e050:	4af42400 	.word	0x4af42400

0801e054 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801e054:	b480      	push	{r7}
 801e056:	b089      	sub	sp, #36	; 0x24
 801e058:	af00      	add	r7, sp, #0
 801e05a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e05c:	4ba0      	ldr	r3, [pc, #640]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e060:	f003 0303 	and.w	r3, r3, #3
 801e064:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801e066:	4b9e      	ldr	r3, [pc, #632]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e06a:	091b      	lsrs	r3, r3, #4
 801e06c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e070:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801e072:	4b9b      	ldr	r3, [pc, #620]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e076:	f003 0301 	and.w	r3, r3, #1
 801e07a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801e07c:	4b98      	ldr	r3, [pc, #608]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e07e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801e080:	08db      	lsrs	r3, r3, #3
 801e082:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e086:	693a      	ldr	r2, [r7, #16]
 801e088:	fb02 f303 	mul.w	r3, r2, r3
 801e08c:	ee07 3a90 	vmov	s15, r3
 801e090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e094:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801e098:	697b      	ldr	r3, [r7, #20]
 801e09a:	2b00      	cmp	r3, #0
 801e09c:	f000 8111 	beq.w	801e2c2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801e0a0:	69bb      	ldr	r3, [r7, #24]
 801e0a2:	2b02      	cmp	r3, #2
 801e0a4:	f000 8083 	beq.w	801e1ae <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801e0a8:	69bb      	ldr	r3, [r7, #24]
 801e0aa:	2b02      	cmp	r3, #2
 801e0ac:	f200 80a1 	bhi.w	801e1f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801e0b0:	69bb      	ldr	r3, [r7, #24]
 801e0b2:	2b00      	cmp	r3, #0
 801e0b4:	d003      	beq.n	801e0be <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801e0b6:	69bb      	ldr	r3, [r7, #24]
 801e0b8:	2b01      	cmp	r3, #1
 801e0ba:	d056      	beq.n	801e16a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801e0bc:	e099      	b.n	801e1f2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e0be:	4b88      	ldr	r3, [pc, #544]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e0c0:	681b      	ldr	r3, [r3, #0]
 801e0c2:	f003 0320 	and.w	r3, r3, #32
 801e0c6:	2b00      	cmp	r3, #0
 801e0c8:	d02d      	beq.n	801e126 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e0ca:	4b85      	ldr	r3, [pc, #532]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	08db      	lsrs	r3, r3, #3
 801e0d0:	f003 0303 	and.w	r3, r3, #3
 801e0d4:	4a83      	ldr	r2, [pc, #524]	; (801e2e4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801e0d6:	fa22 f303 	lsr.w	r3, r2, r3
 801e0da:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e0dc:	68bb      	ldr	r3, [r7, #8]
 801e0de:	ee07 3a90 	vmov	s15, r3
 801e0e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e0e6:	697b      	ldr	r3, [r7, #20]
 801e0e8:	ee07 3a90 	vmov	s15, r3
 801e0ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e0f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e0f4:	4b7a      	ldr	r3, [pc, #488]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e0f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e0f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e0fc:	ee07 3a90 	vmov	s15, r3
 801e100:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e104:	ed97 6a03 	vldr	s12, [r7, #12]
 801e108:	eddf 5a77 	vldr	s11, [pc, #476]	; 801e2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e10c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e110:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e114:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e118:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e120:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e124:	e087      	b.n	801e236 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e126:	697b      	ldr	r3, [r7, #20]
 801e128:	ee07 3a90 	vmov	s15, r3
 801e12c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e130:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801e2ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e134:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e138:	4b69      	ldr	r3, [pc, #420]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e13a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e140:	ee07 3a90 	vmov	s15, r3
 801e144:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e148:	ed97 6a03 	vldr	s12, [r7, #12]
 801e14c:	eddf 5a66 	vldr	s11, [pc, #408]	; 801e2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e150:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e154:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e158:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e15c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e160:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e164:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e168:	e065      	b.n	801e236 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e16a:	697b      	ldr	r3, [r7, #20]
 801e16c:	ee07 3a90 	vmov	s15, r3
 801e170:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e174:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801e2f0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801e178:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e17c:	4b58      	ldr	r3, [pc, #352]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e17e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e180:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e184:	ee07 3a90 	vmov	s15, r3
 801e188:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e18c:	ed97 6a03 	vldr	s12, [r7, #12]
 801e190:	eddf 5a55 	vldr	s11, [pc, #340]	; 801e2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e194:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e198:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e19c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e1ac:	e043      	b.n	801e236 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e1ae:	697b      	ldr	r3, [r7, #20]
 801e1b0:	ee07 3a90 	vmov	s15, r3
 801e1b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1b8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 801e2f4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801e1bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e1c0:	4b47      	ldr	r3, [pc, #284]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e1c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e1c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e1c8:	ee07 3a90 	vmov	s15, r3
 801e1cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e1d0:	ed97 6a03 	vldr	s12, [r7, #12]
 801e1d4:	eddf 5a44 	vldr	s11, [pc, #272]	; 801e2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e1d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e1dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e1e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e1e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e1ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e1f0:	e021      	b.n	801e236 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801e1f2:	697b      	ldr	r3, [r7, #20]
 801e1f4:	ee07 3a90 	vmov	s15, r3
 801e1f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1fc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801e2ec <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801e200:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e204:	4b36      	ldr	r3, [pc, #216]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e206:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e20c:	ee07 3a90 	vmov	s15, r3
 801e210:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e214:	ed97 6a03 	vldr	s12, [r7, #12]
 801e218:	eddf 5a33 	vldr	s11, [pc, #204]	; 801e2e8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801e21c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e220:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801e228:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e230:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e234:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801e236:	4b2a      	ldr	r3, [pc, #168]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e23a:	0a5b      	lsrs	r3, r3, #9
 801e23c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e240:	ee07 3a90 	vmov	s15, r3
 801e244:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e24c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e250:	edd7 6a07 	vldr	s13, [r7, #28]
 801e254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e25c:	ee17 2a90 	vmov	r2, s15
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801e264:	4b1e      	ldr	r3, [pc, #120]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e268:	0c1b      	lsrs	r3, r3, #16
 801e26a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e26e:	ee07 3a90 	vmov	s15, r3
 801e272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e276:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e27a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e27e:	edd7 6a07 	vldr	s13, [r7, #28]
 801e282:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e286:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e28a:	ee17 2a90 	vmov	r2, s15
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801e292:	4b13      	ldr	r3, [pc, #76]	; (801e2e0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801e294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e296:	0e1b      	lsrs	r3, r3, #24
 801e298:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801e29c:	ee07 3a90 	vmov	s15, r3
 801e2a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e2a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e2ac:	edd7 6a07 	vldr	s13, [r7, #28]
 801e2b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e2b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e2b8:	ee17 2a90 	vmov	r2, s15
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801e2c0:	e008      	b.n	801e2d4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	2200      	movs	r2, #0
 801e2c6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801e2c8:	687b      	ldr	r3, [r7, #4]
 801e2ca:	2200      	movs	r2, #0
 801e2cc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801e2ce:	687b      	ldr	r3, [r7, #4]
 801e2d0:	2200      	movs	r2, #0
 801e2d2:	609a      	str	r2, [r3, #8]
}
 801e2d4:	bf00      	nop
 801e2d6:	3724      	adds	r7, #36	; 0x24
 801e2d8:	46bd      	mov	sp, r7
 801e2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e2de:	4770      	bx	lr
 801e2e0:	58024400 	.word	0x58024400
 801e2e4:	03d09000 	.word	0x03d09000
 801e2e8:	46000000 	.word	0x46000000
 801e2ec:	4c742400 	.word	0x4c742400
 801e2f0:	4a742400 	.word	0x4a742400
 801e2f4:	4af42400 	.word	0x4af42400

0801e2f8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801e2f8:	b580      	push	{r7, lr}
 801e2fa:	b084      	sub	sp, #16
 801e2fc:	af00      	add	r7, sp, #0
 801e2fe:	6078      	str	r0, [r7, #4]
 801e300:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e302:	2300      	movs	r3, #0
 801e304:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e306:	4b53      	ldr	r3, [pc, #332]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e30a:	f003 0303 	and.w	r3, r3, #3
 801e30e:	2b03      	cmp	r3, #3
 801e310:	d101      	bne.n	801e316 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801e312:	2301      	movs	r3, #1
 801e314:	e099      	b.n	801e44a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801e316:	4b4f      	ldr	r3, [pc, #316]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	4a4e      	ldr	r2, [pc, #312]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e31c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801e320:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e322:	f7f6 ffe9 	bl	80152f8 <HAL_GetTick>
 801e326:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e328:	e008      	b.n	801e33c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e32a:	f7f6 ffe5 	bl	80152f8 <HAL_GetTick>
 801e32e:	4602      	mov	r2, r0
 801e330:	68bb      	ldr	r3, [r7, #8]
 801e332:	1ad3      	subs	r3, r2, r3
 801e334:	2b02      	cmp	r3, #2
 801e336:	d901      	bls.n	801e33c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e338:	2303      	movs	r3, #3
 801e33a:	e086      	b.n	801e44a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e33c:	4b45      	ldr	r3, [pc, #276]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e33e:	681b      	ldr	r3, [r3, #0]
 801e340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e344:	2b00      	cmp	r3, #0
 801e346:	d1f0      	bne.n	801e32a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801e348:	4b42      	ldr	r3, [pc, #264]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e34c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	681b      	ldr	r3, [r3, #0]
 801e354:	031b      	lsls	r3, r3, #12
 801e356:	493f      	ldr	r1, [pc, #252]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e358:	4313      	orrs	r3, r2
 801e35a:	628b      	str	r3, [r1, #40]	; 0x28
 801e35c:	687b      	ldr	r3, [r7, #4]
 801e35e:	685b      	ldr	r3, [r3, #4]
 801e360:	3b01      	subs	r3, #1
 801e362:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e366:	687b      	ldr	r3, [r7, #4]
 801e368:	689b      	ldr	r3, [r3, #8]
 801e36a:	3b01      	subs	r3, #1
 801e36c:	025b      	lsls	r3, r3, #9
 801e36e:	b29b      	uxth	r3, r3
 801e370:	431a      	orrs	r2, r3
 801e372:	687b      	ldr	r3, [r7, #4]
 801e374:	68db      	ldr	r3, [r3, #12]
 801e376:	3b01      	subs	r3, #1
 801e378:	041b      	lsls	r3, r3, #16
 801e37a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e37e:	431a      	orrs	r2, r3
 801e380:	687b      	ldr	r3, [r7, #4]
 801e382:	691b      	ldr	r3, [r3, #16]
 801e384:	3b01      	subs	r3, #1
 801e386:	061b      	lsls	r3, r3, #24
 801e388:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e38c:	4931      	ldr	r1, [pc, #196]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e38e:	4313      	orrs	r3, r2
 801e390:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801e392:	4b30      	ldr	r3, [pc, #192]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e396:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801e39a:	687b      	ldr	r3, [r7, #4]
 801e39c:	695b      	ldr	r3, [r3, #20]
 801e39e:	492d      	ldr	r1, [pc, #180]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3a0:	4313      	orrs	r3, r2
 801e3a2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801e3a4:	4b2b      	ldr	r3, [pc, #172]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3a8:	f023 0220 	bic.w	r2, r3, #32
 801e3ac:	687b      	ldr	r3, [r7, #4]
 801e3ae:	699b      	ldr	r3, [r3, #24]
 801e3b0:	4928      	ldr	r1, [pc, #160]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3b2:	4313      	orrs	r3, r2
 801e3b4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801e3b6:	4b27      	ldr	r3, [pc, #156]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3ba:	4a26      	ldr	r2, [pc, #152]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3bc:	f023 0310 	bic.w	r3, r3, #16
 801e3c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801e3c2:	4b24      	ldr	r3, [pc, #144]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801e3c6:	4b24      	ldr	r3, [pc, #144]	; (801e458 <RCCEx_PLL2_Config+0x160>)
 801e3c8:	4013      	ands	r3, r2
 801e3ca:	687a      	ldr	r2, [r7, #4]
 801e3cc:	69d2      	ldr	r2, [r2, #28]
 801e3ce:	00d2      	lsls	r2, r2, #3
 801e3d0:	4920      	ldr	r1, [pc, #128]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3d2:	4313      	orrs	r3, r2
 801e3d4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e3d6:	4b1f      	ldr	r3, [pc, #124]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3da:	4a1e      	ldr	r2, [pc, #120]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3dc:	f043 0310 	orr.w	r3, r3, #16
 801e3e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e3e2:	683b      	ldr	r3, [r7, #0]
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d106      	bne.n	801e3f6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e3e8:	4b1a      	ldr	r3, [pc, #104]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e3ec:	4a19      	ldr	r2, [pc, #100]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3ee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801e3f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e3f4:	e00f      	b.n	801e416 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e3f6:	683b      	ldr	r3, [r7, #0]
 801e3f8:	2b01      	cmp	r3, #1
 801e3fa:	d106      	bne.n	801e40a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e3fc:	4b15      	ldr	r3, [pc, #84]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e400:	4a14      	ldr	r2, [pc, #80]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801e406:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e408:	e005      	b.n	801e416 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e40a:	4b12      	ldr	r3, [pc, #72]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e40e:	4a11      	ldr	r2, [pc, #68]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e410:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801e414:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e416:	4b0f      	ldr	r3, [pc, #60]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e418:	681b      	ldr	r3, [r3, #0]
 801e41a:	4a0e      	ldr	r2, [pc, #56]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e41c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801e420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e422:	f7f6 ff69 	bl	80152f8 <HAL_GetTick>
 801e426:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e428:	e008      	b.n	801e43c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e42a:	f7f6 ff65 	bl	80152f8 <HAL_GetTick>
 801e42e:	4602      	mov	r2, r0
 801e430:	68bb      	ldr	r3, [r7, #8]
 801e432:	1ad3      	subs	r3, r2, r3
 801e434:	2b02      	cmp	r3, #2
 801e436:	d901      	bls.n	801e43c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e438:	2303      	movs	r3, #3
 801e43a:	e006      	b.n	801e44a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e43c:	4b05      	ldr	r3, [pc, #20]	; (801e454 <RCCEx_PLL2_Config+0x15c>)
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801e444:	2b00      	cmp	r3, #0
 801e446:	d0f0      	beq.n	801e42a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e448:	7bfb      	ldrb	r3, [r7, #15]
}
 801e44a:	4618      	mov	r0, r3
 801e44c:	3710      	adds	r7, #16
 801e44e:	46bd      	mov	sp, r7
 801e450:	bd80      	pop	{r7, pc}
 801e452:	bf00      	nop
 801e454:	58024400 	.word	0x58024400
 801e458:	ffff0007 	.word	0xffff0007

0801e45c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801e45c:	b580      	push	{r7, lr}
 801e45e:	b084      	sub	sp, #16
 801e460:	af00      	add	r7, sp, #0
 801e462:	6078      	str	r0, [r7, #4]
 801e464:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e466:	2300      	movs	r3, #0
 801e468:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e46a:	4b53      	ldr	r3, [pc, #332]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e46c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e46e:	f003 0303 	and.w	r3, r3, #3
 801e472:	2b03      	cmp	r3, #3
 801e474:	d101      	bne.n	801e47a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801e476:	2301      	movs	r3, #1
 801e478:	e099      	b.n	801e5ae <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801e47a:	4b4f      	ldr	r3, [pc, #316]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	4a4e      	ldr	r2, [pc, #312]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801e484:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e486:	f7f6 ff37 	bl	80152f8 <HAL_GetTick>
 801e48a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e48c:	e008      	b.n	801e4a0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e48e:	f7f6 ff33 	bl	80152f8 <HAL_GetTick>
 801e492:	4602      	mov	r2, r0
 801e494:	68bb      	ldr	r3, [r7, #8]
 801e496:	1ad3      	subs	r3, r2, r3
 801e498:	2b02      	cmp	r3, #2
 801e49a:	d901      	bls.n	801e4a0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e49c:	2303      	movs	r3, #3
 801e49e:	e086      	b.n	801e5ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e4a0:	4b45      	ldr	r3, [pc, #276]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e4a2:	681b      	ldr	r3, [r3, #0]
 801e4a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e4a8:	2b00      	cmp	r3, #0
 801e4aa:	d1f0      	bne.n	801e48e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e4ac:	4b42      	ldr	r3, [pc, #264]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e4ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e4b0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 801e4b4:	687b      	ldr	r3, [r7, #4]
 801e4b6:	681b      	ldr	r3, [r3, #0]
 801e4b8:	051b      	lsls	r3, r3, #20
 801e4ba:	493f      	ldr	r1, [pc, #252]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e4bc:	4313      	orrs	r3, r2
 801e4be:	628b      	str	r3, [r1, #40]	; 0x28
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	685b      	ldr	r3, [r3, #4]
 801e4c4:	3b01      	subs	r3, #1
 801e4c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e4ca:	687b      	ldr	r3, [r7, #4]
 801e4cc:	689b      	ldr	r3, [r3, #8]
 801e4ce:	3b01      	subs	r3, #1
 801e4d0:	025b      	lsls	r3, r3, #9
 801e4d2:	b29b      	uxth	r3, r3
 801e4d4:	431a      	orrs	r2, r3
 801e4d6:	687b      	ldr	r3, [r7, #4]
 801e4d8:	68db      	ldr	r3, [r3, #12]
 801e4da:	3b01      	subs	r3, #1
 801e4dc:	041b      	lsls	r3, r3, #16
 801e4de:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801e4e2:	431a      	orrs	r2, r3
 801e4e4:	687b      	ldr	r3, [r7, #4]
 801e4e6:	691b      	ldr	r3, [r3, #16]
 801e4e8:	3b01      	subs	r3, #1
 801e4ea:	061b      	lsls	r3, r3, #24
 801e4ec:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801e4f0:	4931      	ldr	r1, [pc, #196]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e4f2:	4313      	orrs	r3, r2
 801e4f4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e4f6:	4b30      	ldr	r3, [pc, #192]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e4f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e4fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801e4fe:	687b      	ldr	r3, [r7, #4]
 801e500:	695b      	ldr	r3, [r3, #20]
 801e502:	492d      	ldr	r1, [pc, #180]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e504:	4313      	orrs	r3, r2
 801e506:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e508:	4b2b      	ldr	r3, [pc, #172]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e50a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e50c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 801e510:	687b      	ldr	r3, [r7, #4]
 801e512:	699b      	ldr	r3, [r3, #24]
 801e514:	4928      	ldr	r1, [pc, #160]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e516:	4313      	orrs	r3, r2
 801e518:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e51a:	4b27      	ldr	r3, [pc, #156]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e51e:	4a26      	ldr	r2, [pc, #152]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e520:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801e524:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e526:	4b24      	ldr	r3, [pc, #144]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e528:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801e52a:	4b24      	ldr	r3, [pc, #144]	; (801e5bc <RCCEx_PLL3_Config+0x160>)
 801e52c:	4013      	ands	r3, r2
 801e52e:	687a      	ldr	r2, [r7, #4]
 801e530:	69d2      	ldr	r2, [r2, #28]
 801e532:	00d2      	lsls	r2, r2, #3
 801e534:	4920      	ldr	r1, [pc, #128]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e536:	4313      	orrs	r3, r2
 801e538:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e53a:	4b1f      	ldr	r3, [pc, #124]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e53c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e53e:	4a1e      	ldr	r2, [pc, #120]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801e544:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e546:	683b      	ldr	r3, [r7, #0]
 801e548:	2b00      	cmp	r3, #0
 801e54a:	d106      	bne.n	801e55a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e54c:	4b1a      	ldr	r3, [pc, #104]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e550:	4a19      	ldr	r2, [pc, #100]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e552:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 801e556:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e558:	e00f      	b.n	801e57a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e55a:	683b      	ldr	r3, [r7, #0]
 801e55c:	2b01      	cmp	r3, #1
 801e55e:	d106      	bne.n	801e56e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e560:	4b15      	ldr	r3, [pc, #84]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e564:	4a14      	ldr	r2, [pc, #80]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e566:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801e56a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801e56c:	e005      	b.n	801e57a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e56e:	4b12      	ldr	r3, [pc, #72]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e572:	4a11      	ldr	r2, [pc, #68]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e574:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801e578:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e57a:	4b0f      	ldr	r3, [pc, #60]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	4a0e      	ldr	r2, [pc, #56]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801e584:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e586:	f7f6 feb7 	bl	80152f8 <HAL_GetTick>
 801e58a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e58c:	e008      	b.n	801e5a0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e58e:	f7f6 feb3 	bl	80152f8 <HAL_GetTick>
 801e592:	4602      	mov	r2, r0
 801e594:	68bb      	ldr	r3, [r7, #8]
 801e596:	1ad3      	subs	r3, r2, r3
 801e598:	2b02      	cmp	r3, #2
 801e59a:	d901      	bls.n	801e5a0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e59c:	2303      	movs	r3, #3
 801e59e:	e006      	b.n	801e5ae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e5a0:	4b05      	ldr	r3, [pc, #20]	; (801e5b8 <RCCEx_PLL3_Config+0x15c>)
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d0f0      	beq.n	801e58e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 801e5ae:	4618      	mov	r0, r3
 801e5b0:	3710      	adds	r7, #16
 801e5b2:	46bd      	mov	sp, r7
 801e5b4:	bd80      	pop	{r7, pc}
 801e5b6:	bf00      	nop
 801e5b8:	58024400 	.word	0x58024400
 801e5bc:	ffff0007 	.word	0xffff0007

0801e5c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801e5c0:	b580      	push	{r7, lr}
 801e5c2:	b082      	sub	sp, #8
 801e5c4:	af00      	add	r7, sp, #0
 801e5c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	d101      	bne.n	801e5d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801e5ce:	2301      	movs	r3, #1
 801e5d0:	e049      	b.n	801e666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e5d8:	b2db      	uxtb	r3, r3
 801e5da:	2b00      	cmp	r3, #0
 801e5dc:	d106      	bne.n	801e5ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	2200      	movs	r2, #0
 801e5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801e5e6:	6878      	ldr	r0, [r7, #4]
 801e5e8:	f7f6 f88a 	bl	8014700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	2202      	movs	r2, #2
 801e5f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	681a      	ldr	r2, [r3, #0]
 801e5f8:	687b      	ldr	r3, [r7, #4]
 801e5fa:	3304      	adds	r3, #4
 801e5fc:	4619      	mov	r1, r3
 801e5fe:	4610      	mov	r0, r2
 801e600:	f001 f8d0 	bl	801f7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	2201      	movs	r2, #1
 801e608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e60c:	687b      	ldr	r3, [r7, #4]
 801e60e:	2201      	movs	r2, #1
 801e610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	2201      	movs	r2, #1
 801e618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e61c:	687b      	ldr	r3, [r7, #4]
 801e61e:	2201      	movs	r2, #1
 801e620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e624:	687b      	ldr	r3, [r7, #4]
 801e626:	2201      	movs	r2, #1
 801e628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	2201      	movs	r2, #1
 801e630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e634:	687b      	ldr	r3, [r7, #4]
 801e636:	2201      	movs	r2, #1
 801e638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	2201      	movs	r2, #1
 801e640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	2201      	movs	r2, #1
 801e648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	2201      	movs	r2, #1
 801e650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e654:	687b      	ldr	r3, [r7, #4]
 801e656:	2201      	movs	r2, #1
 801e658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	2201      	movs	r2, #1
 801e660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e664:	2300      	movs	r3, #0
}
 801e666:	4618      	mov	r0, r3
 801e668:	3708      	adds	r7, #8
 801e66a:	46bd      	mov	sp, r7
 801e66c:	bd80      	pop	{r7, pc}
	...

0801e670 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 801e670:	b480      	push	{r7}
 801e672:	b085      	sub	sp, #20
 801e674:	af00      	add	r7, sp, #0
 801e676:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e678:	687b      	ldr	r3, [r7, #4]
 801e67a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e67e:	b2db      	uxtb	r3, r3
 801e680:	2b01      	cmp	r3, #1
 801e682:	d001      	beq.n	801e688 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 801e684:	2301      	movs	r3, #1
 801e686:	e056      	b.n	801e736 <HAL_TIM_Base_Start+0xc6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	2202      	movs	r2, #2
 801e68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e690:	687b      	ldr	r3, [r7, #4]
 801e692:	681b      	ldr	r3, [r3, #0]
 801e694:	4a2b      	ldr	r2, [pc, #172]	; (801e744 <HAL_TIM_Base_Start+0xd4>)
 801e696:	4293      	cmp	r3, r2
 801e698:	d02c      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e69a:	687b      	ldr	r3, [r7, #4]
 801e69c:	681b      	ldr	r3, [r3, #0]
 801e69e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e6a2:	d027      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	4a27      	ldr	r2, [pc, #156]	; (801e748 <HAL_TIM_Base_Start+0xd8>)
 801e6aa:	4293      	cmp	r3, r2
 801e6ac:	d022      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	681b      	ldr	r3, [r3, #0]
 801e6b2:	4a26      	ldr	r2, [pc, #152]	; (801e74c <HAL_TIM_Base_Start+0xdc>)
 801e6b4:	4293      	cmp	r3, r2
 801e6b6:	d01d      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e6b8:	687b      	ldr	r3, [r7, #4]
 801e6ba:	681b      	ldr	r3, [r3, #0]
 801e6bc:	4a24      	ldr	r2, [pc, #144]	; (801e750 <HAL_TIM_Base_Start+0xe0>)
 801e6be:	4293      	cmp	r3, r2
 801e6c0:	d018      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e6c2:	687b      	ldr	r3, [r7, #4]
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	4a23      	ldr	r2, [pc, #140]	; (801e754 <HAL_TIM_Base_Start+0xe4>)
 801e6c8:	4293      	cmp	r3, r2
 801e6ca:	d013      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e6cc:	687b      	ldr	r3, [r7, #4]
 801e6ce:	681b      	ldr	r3, [r3, #0]
 801e6d0:	4a21      	ldr	r2, [pc, #132]	; (801e758 <HAL_TIM_Base_Start+0xe8>)
 801e6d2:	4293      	cmp	r3, r2
 801e6d4:	d00e      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e6d6:	687b      	ldr	r3, [r7, #4]
 801e6d8:	681b      	ldr	r3, [r3, #0]
 801e6da:	4a20      	ldr	r2, [pc, #128]	; (801e75c <HAL_TIM_Base_Start+0xec>)
 801e6dc:	4293      	cmp	r3, r2
 801e6de:	d009      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e6e0:	687b      	ldr	r3, [r7, #4]
 801e6e2:	681b      	ldr	r3, [r3, #0]
 801e6e4:	4a1e      	ldr	r2, [pc, #120]	; (801e760 <HAL_TIM_Base_Start+0xf0>)
 801e6e6:	4293      	cmp	r3, r2
 801e6e8:	d004      	beq.n	801e6f4 <HAL_TIM_Base_Start+0x84>
 801e6ea:	687b      	ldr	r3, [r7, #4]
 801e6ec:	681b      	ldr	r3, [r3, #0]
 801e6ee:	4a1d      	ldr	r2, [pc, #116]	; (801e764 <HAL_TIM_Base_Start+0xf4>)
 801e6f0:	4293      	cmp	r3, r2
 801e6f2:	d115      	bne.n	801e720 <HAL_TIM_Base_Start+0xb0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e6f4:	687b      	ldr	r3, [r7, #4]
 801e6f6:	681b      	ldr	r3, [r3, #0]
 801e6f8:	689a      	ldr	r2, [r3, #8]
 801e6fa:	4b1b      	ldr	r3, [pc, #108]	; (801e768 <HAL_TIM_Base_Start+0xf8>)
 801e6fc:	4013      	ands	r3, r2
 801e6fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e700:	68fb      	ldr	r3, [r7, #12]
 801e702:	2b06      	cmp	r3, #6
 801e704:	d015      	beq.n	801e732 <HAL_TIM_Base_Start+0xc2>
 801e706:	68fb      	ldr	r3, [r7, #12]
 801e708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e70c:	d011      	beq.n	801e732 <HAL_TIM_Base_Start+0xc2>
    {
      __HAL_TIM_ENABLE(htim);
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	681a      	ldr	r2, [r3, #0]
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	681b      	ldr	r3, [r3, #0]
 801e718:	f042 0201 	orr.w	r2, r2, #1
 801e71c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e71e:	e008      	b.n	801e732 <HAL_TIM_Base_Start+0xc2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e720:	687b      	ldr	r3, [r7, #4]
 801e722:	681b      	ldr	r3, [r3, #0]
 801e724:	681a      	ldr	r2, [r3, #0]
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	681b      	ldr	r3, [r3, #0]
 801e72a:	f042 0201 	orr.w	r2, r2, #1
 801e72e:	601a      	str	r2, [r3, #0]
 801e730:	e000      	b.n	801e734 <HAL_TIM_Base_Start+0xc4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e732:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e734:	2300      	movs	r3, #0
}
 801e736:	4618      	mov	r0, r3
 801e738:	3714      	adds	r7, #20
 801e73a:	46bd      	mov	sp, r7
 801e73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e740:	4770      	bx	lr
 801e742:	bf00      	nop
 801e744:	40010000 	.word	0x40010000
 801e748:	40000400 	.word	0x40000400
 801e74c:	40000800 	.word	0x40000800
 801e750:	40000c00 	.word	0x40000c00
 801e754:	40010400 	.word	0x40010400
 801e758:	40001800 	.word	0x40001800
 801e75c:	40014000 	.word	0x40014000
 801e760:	4000e000 	.word	0x4000e000
 801e764:	4000e400 	.word	0x4000e400
 801e768:	00010007 	.word	0x00010007

0801e76c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801e76c:	b480      	push	{r7}
 801e76e:	b085      	sub	sp, #20
 801e770:	af00      	add	r7, sp, #0
 801e772:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801e774:	687b      	ldr	r3, [r7, #4]
 801e776:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e77a:	b2db      	uxtb	r3, r3
 801e77c:	2b01      	cmp	r3, #1
 801e77e:	d001      	beq.n	801e784 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801e780:	2301      	movs	r3, #1
 801e782:	e05e      	b.n	801e842 <HAL_TIM_Base_Start_IT+0xd6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e784:	687b      	ldr	r3, [r7, #4]
 801e786:	2202      	movs	r2, #2
 801e788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	681b      	ldr	r3, [r3, #0]
 801e790:	68da      	ldr	r2, [r3, #12]
 801e792:	687b      	ldr	r3, [r7, #4]
 801e794:	681b      	ldr	r3, [r3, #0]
 801e796:	f042 0201 	orr.w	r2, r2, #1
 801e79a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	681b      	ldr	r3, [r3, #0]
 801e7a0:	4a2b      	ldr	r2, [pc, #172]	; (801e850 <HAL_TIM_Base_Start_IT+0xe4>)
 801e7a2:	4293      	cmp	r3, r2
 801e7a4:	d02c      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801e7ae:	d027      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7b0:	687b      	ldr	r3, [r7, #4]
 801e7b2:	681b      	ldr	r3, [r3, #0]
 801e7b4:	4a27      	ldr	r2, [pc, #156]	; (801e854 <HAL_TIM_Base_Start_IT+0xe8>)
 801e7b6:	4293      	cmp	r3, r2
 801e7b8:	d022      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	4a26      	ldr	r2, [pc, #152]	; (801e858 <HAL_TIM_Base_Start_IT+0xec>)
 801e7c0:	4293      	cmp	r3, r2
 801e7c2:	d01d      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7c4:	687b      	ldr	r3, [r7, #4]
 801e7c6:	681b      	ldr	r3, [r3, #0]
 801e7c8:	4a24      	ldr	r2, [pc, #144]	; (801e85c <HAL_TIM_Base_Start_IT+0xf0>)
 801e7ca:	4293      	cmp	r3, r2
 801e7cc:	d018      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7ce:	687b      	ldr	r3, [r7, #4]
 801e7d0:	681b      	ldr	r3, [r3, #0]
 801e7d2:	4a23      	ldr	r2, [pc, #140]	; (801e860 <HAL_TIM_Base_Start_IT+0xf4>)
 801e7d4:	4293      	cmp	r3, r2
 801e7d6:	d013      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7d8:	687b      	ldr	r3, [r7, #4]
 801e7da:	681b      	ldr	r3, [r3, #0]
 801e7dc:	4a21      	ldr	r2, [pc, #132]	; (801e864 <HAL_TIM_Base_Start_IT+0xf8>)
 801e7de:	4293      	cmp	r3, r2
 801e7e0:	d00e      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	681b      	ldr	r3, [r3, #0]
 801e7e6:	4a20      	ldr	r2, [pc, #128]	; (801e868 <HAL_TIM_Base_Start_IT+0xfc>)
 801e7e8:	4293      	cmp	r3, r2
 801e7ea:	d009      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7ec:	687b      	ldr	r3, [r7, #4]
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	4a1e      	ldr	r2, [pc, #120]	; (801e86c <HAL_TIM_Base_Start_IT+0x100>)
 801e7f2:	4293      	cmp	r3, r2
 801e7f4:	d004      	beq.n	801e800 <HAL_TIM_Base_Start_IT+0x94>
 801e7f6:	687b      	ldr	r3, [r7, #4]
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	4a1d      	ldr	r2, [pc, #116]	; (801e870 <HAL_TIM_Base_Start_IT+0x104>)
 801e7fc:	4293      	cmp	r3, r2
 801e7fe:	d115      	bne.n	801e82c <HAL_TIM_Base_Start_IT+0xc0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801e800:	687b      	ldr	r3, [r7, #4]
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	689a      	ldr	r2, [r3, #8]
 801e806:	4b1b      	ldr	r3, [pc, #108]	; (801e874 <HAL_TIM_Base_Start_IT+0x108>)
 801e808:	4013      	ands	r3, r2
 801e80a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e80c:	68fb      	ldr	r3, [r7, #12]
 801e80e:	2b06      	cmp	r3, #6
 801e810:	d015      	beq.n	801e83e <HAL_TIM_Base_Start_IT+0xd2>
 801e812:	68fb      	ldr	r3, [r7, #12]
 801e814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e818:	d011      	beq.n	801e83e <HAL_TIM_Base_Start_IT+0xd2>
    {
      __HAL_TIM_ENABLE(htim);
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	681b      	ldr	r3, [r3, #0]
 801e81e:	681a      	ldr	r2, [r3, #0]
 801e820:	687b      	ldr	r3, [r7, #4]
 801e822:	681b      	ldr	r3, [r3, #0]
 801e824:	f042 0201 	orr.w	r2, r2, #1
 801e828:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e82a:	e008      	b.n	801e83e <HAL_TIM_Base_Start_IT+0xd2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801e82c:	687b      	ldr	r3, [r7, #4]
 801e82e:	681b      	ldr	r3, [r3, #0]
 801e830:	681a      	ldr	r2, [r3, #0]
 801e832:	687b      	ldr	r3, [r7, #4]
 801e834:	681b      	ldr	r3, [r3, #0]
 801e836:	f042 0201 	orr.w	r2, r2, #1
 801e83a:	601a      	str	r2, [r3, #0]
 801e83c:	e000      	b.n	801e840 <HAL_TIM_Base_Start_IT+0xd4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801e83e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801e840:	2300      	movs	r3, #0
}
 801e842:	4618      	mov	r0, r3
 801e844:	3714      	adds	r7, #20
 801e846:	46bd      	mov	sp, r7
 801e848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e84c:	4770      	bx	lr
 801e84e:	bf00      	nop
 801e850:	40010000 	.word	0x40010000
 801e854:	40000400 	.word	0x40000400
 801e858:	40000800 	.word	0x40000800
 801e85c:	40000c00 	.word	0x40000c00
 801e860:	40010400 	.word	0x40010400
 801e864:	40001800 	.word	0x40001800
 801e868:	40014000 	.word	0x40014000
 801e86c:	4000e000 	.word	0x4000e000
 801e870:	4000e400 	.word	0x4000e400
 801e874:	00010007 	.word	0x00010007

0801e878 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 801e878:	b480      	push	{r7}
 801e87a:	b083      	sub	sp, #12
 801e87c:	af00      	add	r7, sp, #0
 801e87e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 801e880:	687b      	ldr	r3, [r7, #4]
 801e882:	681b      	ldr	r3, [r3, #0]
 801e884:	68da      	ldr	r2, [r3, #12]
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	681b      	ldr	r3, [r3, #0]
 801e88a:	f022 0201 	bic.w	r2, r2, #1
 801e88e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 801e890:	687b      	ldr	r3, [r7, #4]
 801e892:	681b      	ldr	r3, [r3, #0]
 801e894:	6a1a      	ldr	r2, [r3, #32]
 801e896:	f241 1311 	movw	r3, #4369	; 0x1111
 801e89a:	4013      	ands	r3, r2
 801e89c:	2b00      	cmp	r3, #0
 801e89e:	d10f      	bne.n	801e8c0 <HAL_TIM_Base_Stop_IT+0x48>
 801e8a0:	687b      	ldr	r3, [r7, #4]
 801e8a2:	681b      	ldr	r3, [r3, #0]
 801e8a4:	6a1a      	ldr	r2, [r3, #32]
 801e8a6:	f240 4344 	movw	r3, #1092	; 0x444
 801e8aa:	4013      	ands	r3, r2
 801e8ac:	2b00      	cmp	r3, #0
 801e8ae:	d107      	bne.n	801e8c0 <HAL_TIM_Base_Stop_IT+0x48>
 801e8b0:	687b      	ldr	r3, [r7, #4]
 801e8b2:	681b      	ldr	r3, [r3, #0]
 801e8b4:	681a      	ldr	r2, [r3, #0]
 801e8b6:	687b      	ldr	r3, [r7, #4]
 801e8b8:	681b      	ldr	r3, [r3, #0]
 801e8ba:	f022 0201 	bic.w	r2, r2, #1
 801e8be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 801e8c0:	687b      	ldr	r3, [r7, #4]
 801e8c2:	2201      	movs	r2, #1
 801e8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 801e8c8:	2300      	movs	r3, #0
}
 801e8ca:	4618      	mov	r0, r3
 801e8cc:	370c      	adds	r7, #12
 801e8ce:	46bd      	mov	sp, r7
 801e8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e8d4:	4770      	bx	lr

0801e8d6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 801e8d6:	b580      	push	{r7, lr}
 801e8d8:	b082      	sub	sp, #8
 801e8da:	af00      	add	r7, sp, #0
 801e8dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801e8de:	687b      	ldr	r3, [r7, #4]
 801e8e0:	2b00      	cmp	r3, #0
 801e8e2:	d101      	bne.n	801e8e8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 801e8e4:	2301      	movs	r3, #1
 801e8e6:	e049      	b.n	801e97c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801e8e8:	687b      	ldr	r3, [r7, #4]
 801e8ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801e8ee:	b2db      	uxtb	r3, r3
 801e8f0:	2b00      	cmp	r3, #0
 801e8f2:	d106      	bne.n	801e902 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	2200      	movs	r2, #0
 801e8f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 801e8fc:	6878      	ldr	r0, [r7, #4]
 801e8fe:	f000 f841 	bl	801e984 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801e902:	687b      	ldr	r3, [r7, #4]
 801e904:	2202      	movs	r2, #2
 801e906:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	681a      	ldr	r2, [r3, #0]
 801e90e:	687b      	ldr	r3, [r7, #4]
 801e910:	3304      	adds	r3, #4
 801e912:	4619      	mov	r1, r3
 801e914:	4610      	mov	r0, r2
 801e916:	f000 ff45 	bl	801f7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	2201      	movs	r2, #1
 801e91e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	2201      	movs	r2, #1
 801e926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	2201      	movs	r2, #1
 801e92e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801e932:	687b      	ldr	r3, [r7, #4]
 801e934:	2201      	movs	r2, #1
 801e936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801e93a:	687b      	ldr	r3, [r7, #4]
 801e93c:	2201      	movs	r2, #1
 801e93e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801e942:	687b      	ldr	r3, [r7, #4]
 801e944:	2201      	movs	r2, #1
 801e946:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	2201      	movs	r2, #1
 801e94e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801e952:	687b      	ldr	r3, [r7, #4]
 801e954:	2201      	movs	r2, #1
 801e956:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	2201      	movs	r2, #1
 801e95e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801e962:	687b      	ldr	r3, [r7, #4]
 801e964:	2201      	movs	r2, #1
 801e966:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	2201      	movs	r2, #1
 801e96e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801e972:	687b      	ldr	r3, [r7, #4]
 801e974:	2201      	movs	r2, #1
 801e976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801e97a:	2300      	movs	r3, #0
}
 801e97c:	4618      	mov	r0, r3
 801e97e:	3708      	adds	r7, #8
 801e980:	46bd      	mov	sp, r7
 801e982:	bd80      	pop	{r7, pc}

0801e984 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801e984:	b480      	push	{r7}
 801e986:	b083      	sub	sp, #12
 801e988:	af00      	add	r7, sp, #0
 801e98a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 801e98c:	bf00      	nop
 801e98e:	370c      	adds	r7, #12
 801e990:	46bd      	mov	sp, r7
 801e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e996:	4770      	bx	lr

0801e998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801e998:	b580      	push	{r7, lr}
 801e99a:	b084      	sub	sp, #16
 801e99c:	af00      	add	r7, sp, #0
 801e99e:	6078      	str	r0, [r7, #4]
 801e9a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 801e9a2:	683b      	ldr	r3, [r7, #0]
 801e9a4:	2b00      	cmp	r3, #0
 801e9a6:	d109      	bne.n	801e9bc <HAL_TIM_PWM_Start+0x24>
 801e9a8:	687b      	ldr	r3, [r7, #4]
 801e9aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801e9ae:	b2db      	uxtb	r3, r3
 801e9b0:	2b01      	cmp	r3, #1
 801e9b2:	bf14      	ite	ne
 801e9b4:	2301      	movne	r3, #1
 801e9b6:	2300      	moveq	r3, #0
 801e9b8:	b2db      	uxtb	r3, r3
 801e9ba:	e03c      	b.n	801ea36 <HAL_TIM_PWM_Start+0x9e>
 801e9bc:	683b      	ldr	r3, [r7, #0]
 801e9be:	2b04      	cmp	r3, #4
 801e9c0:	d109      	bne.n	801e9d6 <HAL_TIM_PWM_Start+0x3e>
 801e9c2:	687b      	ldr	r3, [r7, #4]
 801e9c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801e9c8:	b2db      	uxtb	r3, r3
 801e9ca:	2b01      	cmp	r3, #1
 801e9cc:	bf14      	ite	ne
 801e9ce:	2301      	movne	r3, #1
 801e9d0:	2300      	moveq	r3, #0
 801e9d2:	b2db      	uxtb	r3, r3
 801e9d4:	e02f      	b.n	801ea36 <HAL_TIM_PWM_Start+0x9e>
 801e9d6:	683b      	ldr	r3, [r7, #0]
 801e9d8:	2b08      	cmp	r3, #8
 801e9da:	d109      	bne.n	801e9f0 <HAL_TIM_PWM_Start+0x58>
 801e9dc:	687b      	ldr	r3, [r7, #4]
 801e9de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801e9e2:	b2db      	uxtb	r3, r3
 801e9e4:	2b01      	cmp	r3, #1
 801e9e6:	bf14      	ite	ne
 801e9e8:	2301      	movne	r3, #1
 801e9ea:	2300      	moveq	r3, #0
 801e9ec:	b2db      	uxtb	r3, r3
 801e9ee:	e022      	b.n	801ea36 <HAL_TIM_PWM_Start+0x9e>
 801e9f0:	683b      	ldr	r3, [r7, #0]
 801e9f2:	2b0c      	cmp	r3, #12
 801e9f4:	d109      	bne.n	801ea0a <HAL_TIM_PWM_Start+0x72>
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801e9fc:	b2db      	uxtb	r3, r3
 801e9fe:	2b01      	cmp	r3, #1
 801ea00:	bf14      	ite	ne
 801ea02:	2301      	movne	r3, #1
 801ea04:	2300      	moveq	r3, #0
 801ea06:	b2db      	uxtb	r3, r3
 801ea08:	e015      	b.n	801ea36 <HAL_TIM_PWM_Start+0x9e>
 801ea0a:	683b      	ldr	r3, [r7, #0]
 801ea0c:	2b10      	cmp	r3, #16
 801ea0e:	d109      	bne.n	801ea24 <HAL_TIM_PWM_Start+0x8c>
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ea16:	b2db      	uxtb	r3, r3
 801ea18:	2b01      	cmp	r3, #1
 801ea1a:	bf14      	ite	ne
 801ea1c:	2301      	movne	r3, #1
 801ea1e:	2300      	moveq	r3, #0
 801ea20:	b2db      	uxtb	r3, r3
 801ea22:	e008      	b.n	801ea36 <HAL_TIM_PWM_Start+0x9e>
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ea2a:	b2db      	uxtb	r3, r3
 801ea2c:	2b01      	cmp	r3, #1
 801ea2e:	bf14      	ite	ne
 801ea30:	2301      	movne	r3, #1
 801ea32:	2300      	moveq	r3, #0
 801ea34:	b2db      	uxtb	r3, r3
 801ea36:	2b00      	cmp	r3, #0
 801ea38:	d001      	beq.n	801ea3e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 801ea3a:	2301      	movs	r3, #1
 801ea3c:	e0ab      	b.n	801eb96 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	d104      	bne.n	801ea4e <HAL_TIM_PWM_Start+0xb6>
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	2202      	movs	r2, #2
 801ea48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ea4c:	e023      	b.n	801ea96 <HAL_TIM_PWM_Start+0xfe>
 801ea4e:	683b      	ldr	r3, [r7, #0]
 801ea50:	2b04      	cmp	r3, #4
 801ea52:	d104      	bne.n	801ea5e <HAL_TIM_PWM_Start+0xc6>
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	2202      	movs	r2, #2
 801ea58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ea5c:	e01b      	b.n	801ea96 <HAL_TIM_PWM_Start+0xfe>
 801ea5e:	683b      	ldr	r3, [r7, #0]
 801ea60:	2b08      	cmp	r3, #8
 801ea62:	d104      	bne.n	801ea6e <HAL_TIM_PWM_Start+0xd6>
 801ea64:	687b      	ldr	r3, [r7, #4]
 801ea66:	2202      	movs	r2, #2
 801ea68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ea6c:	e013      	b.n	801ea96 <HAL_TIM_PWM_Start+0xfe>
 801ea6e:	683b      	ldr	r3, [r7, #0]
 801ea70:	2b0c      	cmp	r3, #12
 801ea72:	d104      	bne.n	801ea7e <HAL_TIM_PWM_Start+0xe6>
 801ea74:	687b      	ldr	r3, [r7, #4]
 801ea76:	2202      	movs	r2, #2
 801ea78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ea7c:	e00b      	b.n	801ea96 <HAL_TIM_PWM_Start+0xfe>
 801ea7e:	683b      	ldr	r3, [r7, #0]
 801ea80:	2b10      	cmp	r3, #16
 801ea82:	d104      	bne.n	801ea8e <HAL_TIM_PWM_Start+0xf6>
 801ea84:	687b      	ldr	r3, [r7, #4]
 801ea86:	2202      	movs	r2, #2
 801ea88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ea8c:	e003      	b.n	801ea96 <HAL_TIM_PWM_Start+0xfe>
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	2202      	movs	r2, #2
 801ea92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	681b      	ldr	r3, [r3, #0]
 801ea9a:	2201      	movs	r2, #1
 801ea9c:	6839      	ldr	r1, [r7, #0]
 801ea9e:	4618      	mov	r0, r3
 801eaa0:	f001 fbd0 	bl	8020244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 801eaa4:	687b      	ldr	r3, [r7, #4]
 801eaa6:	681b      	ldr	r3, [r3, #0]
 801eaa8:	4a3d      	ldr	r2, [pc, #244]	; (801eba0 <HAL_TIM_PWM_Start+0x208>)
 801eaaa:	4293      	cmp	r3, r2
 801eaac:	d013      	beq.n	801ead6 <HAL_TIM_PWM_Start+0x13e>
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	681b      	ldr	r3, [r3, #0]
 801eab2:	4a3c      	ldr	r2, [pc, #240]	; (801eba4 <HAL_TIM_PWM_Start+0x20c>)
 801eab4:	4293      	cmp	r3, r2
 801eab6:	d00e      	beq.n	801ead6 <HAL_TIM_PWM_Start+0x13e>
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	681b      	ldr	r3, [r3, #0]
 801eabc:	4a3a      	ldr	r2, [pc, #232]	; (801eba8 <HAL_TIM_PWM_Start+0x210>)
 801eabe:	4293      	cmp	r3, r2
 801eac0:	d009      	beq.n	801ead6 <HAL_TIM_PWM_Start+0x13e>
 801eac2:	687b      	ldr	r3, [r7, #4]
 801eac4:	681b      	ldr	r3, [r3, #0]
 801eac6:	4a39      	ldr	r2, [pc, #228]	; (801ebac <HAL_TIM_PWM_Start+0x214>)
 801eac8:	4293      	cmp	r3, r2
 801eaca:	d004      	beq.n	801ead6 <HAL_TIM_PWM_Start+0x13e>
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	681b      	ldr	r3, [r3, #0]
 801ead0:	4a37      	ldr	r2, [pc, #220]	; (801ebb0 <HAL_TIM_PWM_Start+0x218>)
 801ead2:	4293      	cmp	r3, r2
 801ead4:	d101      	bne.n	801eada <HAL_TIM_PWM_Start+0x142>
 801ead6:	2301      	movs	r3, #1
 801ead8:	e000      	b.n	801eadc <HAL_TIM_PWM_Start+0x144>
 801eada:	2300      	movs	r3, #0
 801eadc:	2b00      	cmp	r3, #0
 801eade:	d007      	beq.n	801eaf0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 801eae0:	687b      	ldr	r3, [r7, #4]
 801eae2:	681b      	ldr	r3, [r3, #0]
 801eae4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	681b      	ldr	r3, [r3, #0]
 801eaea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 801eaee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	4a2a      	ldr	r2, [pc, #168]	; (801eba0 <HAL_TIM_PWM_Start+0x208>)
 801eaf6:	4293      	cmp	r3, r2
 801eaf8:	d02c      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eafa:	687b      	ldr	r3, [r7, #4]
 801eafc:	681b      	ldr	r3, [r3, #0]
 801eafe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801eb02:	d027      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eb04:	687b      	ldr	r3, [r7, #4]
 801eb06:	681b      	ldr	r3, [r3, #0]
 801eb08:	4a2a      	ldr	r2, [pc, #168]	; (801ebb4 <HAL_TIM_PWM_Start+0x21c>)
 801eb0a:	4293      	cmp	r3, r2
 801eb0c:	d022      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eb0e:	687b      	ldr	r3, [r7, #4]
 801eb10:	681b      	ldr	r3, [r3, #0]
 801eb12:	4a29      	ldr	r2, [pc, #164]	; (801ebb8 <HAL_TIM_PWM_Start+0x220>)
 801eb14:	4293      	cmp	r3, r2
 801eb16:	d01d      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	4a27      	ldr	r2, [pc, #156]	; (801ebbc <HAL_TIM_PWM_Start+0x224>)
 801eb1e:	4293      	cmp	r3, r2
 801eb20:	d018      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eb22:	687b      	ldr	r3, [r7, #4]
 801eb24:	681b      	ldr	r3, [r3, #0]
 801eb26:	4a1f      	ldr	r2, [pc, #124]	; (801eba4 <HAL_TIM_PWM_Start+0x20c>)
 801eb28:	4293      	cmp	r3, r2
 801eb2a:	d013      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	681b      	ldr	r3, [r3, #0]
 801eb30:	4a23      	ldr	r2, [pc, #140]	; (801ebc0 <HAL_TIM_PWM_Start+0x228>)
 801eb32:	4293      	cmp	r3, r2
 801eb34:	d00e      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eb36:	687b      	ldr	r3, [r7, #4]
 801eb38:	681b      	ldr	r3, [r3, #0]
 801eb3a:	4a1b      	ldr	r2, [pc, #108]	; (801eba8 <HAL_TIM_PWM_Start+0x210>)
 801eb3c:	4293      	cmp	r3, r2
 801eb3e:	d009      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	4a1f      	ldr	r2, [pc, #124]	; (801ebc4 <HAL_TIM_PWM_Start+0x22c>)
 801eb46:	4293      	cmp	r3, r2
 801eb48:	d004      	beq.n	801eb54 <HAL_TIM_PWM_Start+0x1bc>
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	681b      	ldr	r3, [r3, #0]
 801eb4e:	4a1e      	ldr	r2, [pc, #120]	; (801ebc8 <HAL_TIM_PWM_Start+0x230>)
 801eb50:	4293      	cmp	r3, r2
 801eb52:	d115      	bne.n	801eb80 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eb54:	687b      	ldr	r3, [r7, #4]
 801eb56:	681b      	ldr	r3, [r3, #0]
 801eb58:	689a      	ldr	r2, [r3, #8]
 801eb5a:	4b1c      	ldr	r3, [pc, #112]	; (801ebcc <HAL_TIM_PWM_Start+0x234>)
 801eb5c:	4013      	ands	r3, r2
 801eb5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb60:	68fb      	ldr	r3, [r7, #12]
 801eb62:	2b06      	cmp	r3, #6
 801eb64:	d015      	beq.n	801eb92 <HAL_TIM_PWM_Start+0x1fa>
 801eb66:	68fb      	ldr	r3, [r7, #12]
 801eb68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eb6c:	d011      	beq.n	801eb92 <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	681b      	ldr	r3, [r3, #0]
 801eb72:	681a      	ldr	r2, [r3, #0]
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	681b      	ldr	r3, [r3, #0]
 801eb78:	f042 0201 	orr.w	r2, r2, #1
 801eb7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb7e:	e008      	b.n	801eb92 <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801eb80:	687b      	ldr	r3, [r7, #4]
 801eb82:	681b      	ldr	r3, [r3, #0]
 801eb84:	681a      	ldr	r2, [r3, #0]
 801eb86:	687b      	ldr	r3, [r7, #4]
 801eb88:	681b      	ldr	r3, [r3, #0]
 801eb8a:	f042 0201 	orr.w	r2, r2, #1
 801eb8e:	601a      	str	r2, [r3, #0]
 801eb90:	e000      	b.n	801eb94 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801eb94:	2300      	movs	r3, #0
}
 801eb96:	4618      	mov	r0, r3
 801eb98:	3710      	adds	r7, #16
 801eb9a:	46bd      	mov	sp, r7
 801eb9c:	bd80      	pop	{r7, pc}
 801eb9e:	bf00      	nop
 801eba0:	40010000 	.word	0x40010000
 801eba4:	40010400 	.word	0x40010400
 801eba8:	40014000 	.word	0x40014000
 801ebac:	40014400 	.word	0x40014400
 801ebb0:	40014800 	.word	0x40014800
 801ebb4:	40000400 	.word	0x40000400
 801ebb8:	40000800 	.word	0x40000800
 801ebbc:	40000c00 	.word	0x40000c00
 801ebc0:	40001800 	.word	0x40001800
 801ebc4:	4000e000 	.word	0x4000e000
 801ebc8:	4000e400 	.word	0x4000e400
 801ebcc:	00010007 	.word	0x00010007

0801ebd0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 801ebd0:	b580      	push	{r7, lr}
 801ebd2:	b082      	sub	sp, #8
 801ebd4:	af00      	add	r7, sp, #0
 801ebd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	2b00      	cmp	r3, #0
 801ebdc:	d101      	bne.n	801ebe2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 801ebde:	2301      	movs	r3, #1
 801ebe0:	e049      	b.n	801ec76 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ebe2:	687b      	ldr	r3, [r7, #4]
 801ebe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801ebe8:	b2db      	uxtb	r3, r3
 801ebea:	2b00      	cmp	r3, #0
 801ebec:	d106      	bne.n	801ebfc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ebee:	687b      	ldr	r3, [r7, #4]
 801ebf0:	2200      	movs	r2, #0
 801ebf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 801ebf6:	6878      	ldr	r0, [r7, #4]
 801ebf8:	f000 f841 	bl	801ec7e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ebfc:	687b      	ldr	r3, [r7, #4]
 801ebfe:	2202      	movs	r2, #2
 801ec00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	681a      	ldr	r2, [r3, #0]
 801ec08:	687b      	ldr	r3, [r7, #4]
 801ec0a:	3304      	adds	r3, #4
 801ec0c:	4619      	mov	r1, r3
 801ec0e:	4610      	mov	r0, r2
 801ec10:	f000 fdc8 	bl	801f7a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	2201      	movs	r2, #1
 801ec18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ec1c:	687b      	ldr	r3, [r7, #4]
 801ec1e:	2201      	movs	r2, #1
 801ec20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ec24:	687b      	ldr	r3, [r7, #4]
 801ec26:	2201      	movs	r2, #1
 801ec28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	2201      	movs	r2, #1
 801ec30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ec34:	687b      	ldr	r3, [r7, #4]
 801ec36:	2201      	movs	r2, #1
 801ec38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ec3c:	687b      	ldr	r3, [r7, #4]
 801ec3e:	2201      	movs	r2, #1
 801ec40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ec44:	687b      	ldr	r3, [r7, #4]
 801ec46:	2201      	movs	r2, #1
 801ec48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	2201      	movs	r2, #1
 801ec50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801ec54:	687b      	ldr	r3, [r7, #4]
 801ec56:	2201      	movs	r2, #1
 801ec58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801ec5c:	687b      	ldr	r3, [r7, #4]
 801ec5e:	2201      	movs	r2, #1
 801ec60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801ec64:	687b      	ldr	r3, [r7, #4]
 801ec66:	2201      	movs	r2, #1
 801ec68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801ec6c:	687b      	ldr	r3, [r7, #4]
 801ec6e:	2201      	movs	r2, #1
 801ec70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801ec74:	2300      	movs	r3, #0
}
 801ec76:	4618      	mov	r0, r3
 801ec78:	3708      	adds	r7, #8
 801ec7a:	46bd      	mov	sp, r7
 801ec7c:	bd80      	pop	{r7, pc}

0801ec7e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 801ec7e:	b480      	push	{r7}
 801ec80:	b083      	sub	sp, #12
 801ec82:	af00      	add	r7, sp, #0
 801ec84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 801ec86:	bf00      	nop
 801ec88:	370c      	adds	r7, #12
 801ec8a:	46bd      	mov	sp, r7
 801ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ec90:	4770      	bx	lr
	...

0801ec94 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801ec94:	b580      	push	{r7, lr}
 801ec96:	b084      	sub	sp, #16
 801ec98:	af00      	add	r7, sp, #0
 801ec9a:	6078      	str	r0, [r7, #4]
 801ec9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ec9e:	2300      	movs	r3, #0
 801eca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801eca2:	683b      	ldr	r3, [r7, #0]
 801eca4:	2b00      	cmp	r3, #0
 801eca6:	d104      	bne.n	801ecb2 <HAL_TIM_IC_Start_IT+0x1e>
 801eca8:	687b      	ldr	r3, [r7, #4]
 801ecaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801ecae:	b2db      	uxtb	r3, r3
 801ecb0:	e023      	b.n	801ecfa <HAL_TIM_IC_Start_IT+0x66>
 801ecb2:	683b      	ldr	r3, [r7, #0]
 801ecb4:	2b04      	cmp	r3, #4
 801ecb6:	d104      	bne.n	801ecc2 <HAL_TIM_IC_Start_IT+0x2e>
 801ecb8:	687b      	ldr	r3, [r7, #4]
 801ecba:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 801ecbe:	b2db      	uxtb	r3, r3
 801ecc0:	e01b      	b.n	801ecfa <HAL_TIM_IC_Start_IT+0x66>
 801ecc2:	683b      	ldr	r3, [r7, #0]
 801ecc4:	2b08      	cmp	r3, #8
 801ecc6:	d104      	bne.n	801ecd2 <HAL_TIM_IC_Start_IT+0x3e>
 801ecc8:	687b      	ldr	r3, [r7, #4]
 801ecca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801ecce:	b2db      	uxtb	r3, r3
 801ecd0:	e013      	b.n	801ecfa <HAL_TIM_IC_Start_IT+0x66>
 801ecd2:	683b      	ldr	r3, [r7, #0]
 801ecd4:	2b0c      	cmp	r3, #12
 801ecd6:	d104      	bne.n	801ece2 <HAL_TIM_IC_Start_IT+0x4e>
 801ecd8:	687b      	ldr	r3, [r7, #4]
 801ecda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801ecde:	b2db      	uxtb	r3, r3
 801ece0:	e00b      	b.n	801ecfa <HAL_TIM_IC_Start_IT+0x66>
 801ece2:	683b      	ldr	r3, [r7, #0]
 801ece4:	2b10      	cmp	r3, #16
 801ece6:	d104      	bne.n	801ecf2 <HAL_TIM_IC_Start_IT+0x5e>
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801ecee:	b2db      	uxtb	r3, r3
 801ecf0:	e003      	b.n	801ecfa <HAL_TIM_IC_Start_IT+0x66>
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801ecf8:	b2db      	uxtb	r3, r3
 801ecfa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801ecfc:	683b      	ldr	r3, [r7, #0]
 801ecfe:	2b00      	cmp	r3, #0
 801ed00:	d104      	bne.n	801ed0c <HAL_TIM_IC_Start_IT+0x78>
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ed08:	b2db      	uxtb	r3, r3
 801ed0a:	e013      	b.n	801ed34 <HAL_TIM_IC_Start_IT+0xa0>
 801ed0c:	683b      	ldr	r3, [r7, #0]
 801ed0e:	2b04      	cmp	r3, #4
 801ed10:	d104      	bne.n	801ed1c <HAL_TIM_IC_Start_IT+0x88>
 801ed12:	687b      	ldr	r3, [r7, #4]
 801ed14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801ed18:	b2db      	uxtb	r3, r3
 801ed1a:	e00b      	b.n	801ed34 <HAL_TIM_IC_Start_IT+0xa0>
 801ed1c:	683b      	ldr	r3, [r7, #0]
 801ed1e:	2b08      	cmp	r3, #8
 801ed20:	d104      	bne.n	801ed2c <HAL_TIM_IC_Start_IT+0x98>
 801ed22:	687b      	ldr	r3, [r7, #4]
 801ed24:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 801ed28:	b2db      	uxtb	r3, r3
 801ed2a:	e003      	b.n	801ed34 <HAL_TIM_IC_Start_IT+0xa0>
 801ed2c:	687b      	ldr	r3, [r7, #4]
 801ed2e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 801ed32:	b2db      	uxtb	r3, r3
 801ed34:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 801ed36:	7bbb      	ldrb	r3, [r7, #14]
 801ed38:	2b01      	cmp	r3, #1
 801ed3a:	d102      	bne.n	801ed42 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 801ed3c:	7b7b      	ldrb	r3, [r7, #13]
 801ed3e:	2b01      	cmp	r3, #1
 801ed40:	d001      	beq.n	801ed46 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 801ed42:	2301      	movs	r3, #1
 801ed44:	e0ec      	b.n	801ef20 <HAL_TIM_IC_Start_IT+0x28c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ed46:	683b      	ldr	r3, [r7, #0]
 801ed48:	2b00      	cmp	r3, #0
 801ed4a:	d104      	bne.n	801ed56 <HAL_TIM_IC_Start_IT+0xc2>
 801ed4c:	687b      	ldr	r3, [r7, #4]
 801ed4e:	2202      	movs	r2, #2
 801ed50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801ed54:	e023      	b.n	801ed9e <HAL_TIM_IC_Start_IT+0x10a>
 801ed56:	683b      	ldr	r3, [r7, #0]
 801ed58:	2b04      	cmp	r3, #4
 801ed5a:	d104      	bne.n	801ed66 <HAL_TIM_IC_Start_IT+0xd2>
 801ed5c:	687b      	ldr	r3, [r7, #4]
 801ed5e:	2202      	movs	r2, #2
 801ed60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 801ed64:	e01b      	b.n	801ed9e <HAL_TIM_IC_Start_IT+0x10a>
 801ed66:	683b      	ldr	r3, [r7, #0]
 801ed68:	2b08      	cmp	r3, #8
 801ed6a:	d104      	bne.n	801ed76 <HAL_TIM_IC_Start_IT+0xe2>
 801ed6c:	687b      	ldr	r3, [r7, #4]
 801ed6e:	2202      	movs	r2, #2
 801ed70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801ed74:	e013      	b.n	801ed9e <HAL_TIM_IC_Start_IT+0x10a>
 801ed76:	683b      	ldr	r3, [r7, #0]
 801ed78:	2b0c      	cmp	r3, #12
 801ed7a:	d104      	bne.n	801ed86 <HAL_TIM_IC_Start_IT+0xf2>
 801ed7c:	687b      	ldr	r3, [r7, #4]
 801ed7e:	2202      	movs	r2, #2
 801ed80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 801ed84:	e00b      	b.n	801ed9e <HAL_TIM_IC_Start_IT+0x10a>
 801ed86:	683b      	ldr	r3, [r7, #0]
 801ed88:	2b10      	cmp	r3, #16
 801ed8a:	d104      	bne.n	801ed96 <HAL_TIM_IC_Start_IT+0x102>
 801ed8c:	687b      	ldr	r3, [r7, #4]
 801ed8e:	2202      	movs	r2, #2
 801ed90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801ed94:	e003      	b.n	801ed9e <HAL_TIM_IC_Start_IT+0x10a>
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	2202      	movs	r2, #2
 801ed9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801ed9e:	683b      	ldr	r3, [r7, #0]
 801eda0:	2b00      	cmp	r3, #0
 801eda2:	d104      	bne.n	801edae <HAL_TIM_IC_Start_IT+0x11a>
 801eda4:	687b      	ldr	r3, [r7, #4]
 801eda6:	2202      	movs	r2, #2
 801eda8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801edac:	e013      	b.n	801edd6 <HAL_TIM_IC_Start_IT+0x142>
 801edae:	683b      	ldr	r3, [r7, #0]
 801edb0:	2b04      	cmp	r3, #4
 801edb2:	d104      	bne.n	801edbe <HAL_TIM_IC_Start_IT+0x12a>
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	2202      	movs	r2, #2
 801edb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801edbc:	e00b      	b.n	801edd6 <HAL_TIM_IC_Start_IT+0x142>
 801edbe:	683b      	ldr	r3, [r7, #0]
 801edc0:	2b08      	cmp	r3, #8
 801edc2:	d104      	bne.n	801edce <HAL_TIM_IC_Start_IT+0x13a>
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	2202      	movs	r2, #2
 801edc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 801edcc:	e003      	b.n	801edd6 <HAL_TIM_IC_Start_IT+0x142>
 801edce:	687b      	ldr	r3, [r7, #4]
 801edd0:	2202      	movs	r2, #2
 801edd2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 801edd6:	683b      	ldr	r3, [r7, #0]
 801edd8:	2b0c      	cmp	r3, #12
 801edda:	d841      	bhi.n	801ee60 <HAL_TIM_IC_Start_IT+0x1cc>
 801eddc:	a201      	add	r2, pc, #4	; (adr r2, 801ede4 <HAL_TIM_IC_Start_IT+0x150>)
 801edde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ede2:	bf00      	nop
 801ede4:	0801ee19 	.word	0x0801ee19
 801ede8:	0801ee61 	.word	0x0801ee61
 801edec:	0801ee61 	.word	0x0801ee61
 801edf0:	0801ee61 	.word	0x0801ee61
 801edf4:	0801ee2b 	.word	0x0801ee2b
 801edf8:	0801ee61 	.word	0x0801ee61
 801edfc:	0801ee61 	.word	0x0801ee61
 801ee00:	0801ee61 	.word	0x0801ee61
 801ee04:	0801ee3d 	.word	0x0801ee3d
 801ee08:	0801ee61 	.word	0x0801ee61
 801ee0c:	0801ee61 	.word	0x0801ee61
 801ee10:	0801ee61 	.word	0x0801ee61
 801ee14:	0801ee4f 	.word	0x0801ee4f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	681b      	ldr	r3, [r3, #0]
 801ee1c:	68da      	ldr	r2, [r3, #12]
 801ee1e:	687b      	ldr	r3, [r7, #4]
 801ee20:	681b      	ldr	r3, [r3, #0]
 801ee22:	f042 0202 	orr.w	r2, r2, #2
 801ee26:	60da      	str	r2, [r3, #12]
      break;
 801ee28:	e01d      	b.n	801ee66 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	681b      	ldr	r3, [r3, #0]
 801ee2e:	68da      	ldr	r2, [r3, #12]
 801ee30:	687b      	ldr	r3, [r7, #4]
 801ee32:	681b      	ldr	r3, [r3, #0]
 801ee34:	f042 0204 	orr.w	r2, r2, #4
 801ee38:	60da      	str	r2, [r3, #12]
      break;
 801ee3a:	e014      	b.n	801ee66 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 801ee3c:	687b      	ldr	r3, [r7, #4]
 801ee3e:	681b      	ldr	r3, [r3, #0]
 801ee40:	68da      	ldr	r2, [r3, #12]
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	681b      	ldr	r3, [r3, #0]
 801ee46:	f042 0208 	orr.w	r2, r2, #8
 801ee4a:	60da      	str	r2, [r3, #12]
      break;
 801ee4c:	e00b      	b.n	801ee66 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 801ee4e:	687b      	ldr	r3, [r7, #4]
 801ee50:	681b      	ldr	r3, [r3, #0]
 801ee52:	68da      	ldr	r2, [r3, #12]
 801ee54:	687b      	ldr	r3, [r7, #4]
 801ee56:	681b      	ldr	r3, [r3, #0]
 801ee58:	f042 0210 	orr.w	r2, r2, #16
 801ee5c:	60da      	str	r2, [r3, #12]
      break;
 801ee5e:	e002      	b.n	801ee66 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 801ee60:	2301      	movs	r3, #1
 801ee62:	73fb      	strb	r3, [r7, #15]
      break;
 801ee64:	bf00      	nop
  }

  if (status == HAL_OK)
 801ee66:	7bfb      	ldrb	r3, [r7, #15]
 801ee68:	2b00      	cmp	r3, #0
 801ee6a:	d158      	bne.n	801ef1e <HAL_TIM_IC_Start_IT+0x28a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	681b      	ldr	r3, [r3, #0]
 801ee70:	2201      	movs	r2, #1
 801ee72:	6839      	ldr	r1, [r7, #0]
 801ee74:	4618      	mov	r0, r3
 801ee76:	f001 f9e5 	bl	8020244 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	4a2a      	ldr	r2, [pc, #168]	; (801ef28 <HAL_TIM_IC_Start_IT+0x294>)
 801ee80:	4293      	cmp	r3, r2
 801ee82:	d02c      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801ee84:	687b      	ldr	r3, [r7, #4]
 801ee86:	681b      	ldr	r3, [r3, #0]
 801ee88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ee8c:	d027      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801ee8e:	687b      	ldr	r3, [r7, #4]
 801ee90:	681b      	ldr	r3, [r3, #0]
 801ee92:	4a26      	ldr	r2, [pc, #152]	; (801ef2c <HAL_TIM_IC_Start_IT+0x298>)
 801ee94:	4293      	cmp	r3, r2
 801ee96:	d022      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801ee98:	687b      	ldr	r3, [r7, #4]
 801ee9a:	681b      	ldr	r3, [r3, #0]
 801ee9c:	4a24      	ldr	r2, [pc, #144]	; (801ef30 <HAL_TIM_IC_Start_IT+0x29c>)
 801ee9e:	4293      	cmp	r3, r2
 801eea0:	d01d      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801eea2:	687b      	ldr	r3, [r7, #4]
 801eea4:	681b      	ldr	r3, [r3, #0]
 801eea6:	4a23      	ldr	r2, [pc, #140]	; (801ef34 <HAL_TIM_IC_Start_IT+0x2a0>)
 801eea8:	4293      	cmp	r3, r2
 801eeaa:	d018      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801eeac:	687b      	ldr	r3, [r7, #4]
 801eeae:	681b      	ldr	r3, [r3, #0]
 801eeb0:	4a21      	ldr	r2, [pc, #132]	; (801ef38 <HAL_TIM_IC_Start_IT+0x2a4>)
 801eeb2:	4293      	cmp	r3, r2
 801eeb4:	d013      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	681b      	ldr	r3, [r3, #0]
 801eeba:	4a20      	ldr	r2, [pc, #128]	; (801ef3c <HAL_TIM_IC_Start_IT+0x2a8>)
 801eebc:	4293      	cmp	r3, r2
 801eebe:	d00e      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	4a1e      	ldr	r2, [pc, #120]	; (801ef40 <HAL_TIM_IC_Start_IT+0x2ac>)
 801eec6:	4293      	cmp	r3, r2
 801eec8:	d009      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801eeca:	687b      	ldr	r3, [r7, #4]
 801eecc:	681b      	ldr	r3, [r3, #0]
 801eece:	4a1d      	ldr	r2, [pc, #116]	; (801ef44 <HAL_TIM_IC_Start_IT+0x2b0>)
 801eed0:	4293      	cmp	r3, r2
 801eed2:	d004      	beq.n	801eede <HAL_TIM_IC_Start_IT+0x24a>
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	681b      	ldr	r3, [r3, #0]
 801eed8:	4a1b      	ldr	r2, [pc, #108]	; (801ef48 <HAL_TIM_IC_Start_IT+0x2b4>)
 801eeda:	4293      	cmp	r3, r2
 801eedc:	d115      	bne.n	801ef0a <HAL_TIM_IC_Start_IT+0x276>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	681b      	ldr	r3, [r3, #0]
 801eee2:	689a      	ldr	r2, [r3, #8]
 801eee4:	4b19      	ldr	r3, [pc, #100]	; (801ef4c <HAL_TIM_IC_Start_IT+0x2b8>)
 801eee6:	4013      	ands	r3, r2
 801eee8:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eeea:	68bb      	ldr	r3, [r7, #8]
 801eeec:	2b06      	cmp	r3, #6
 801eeee:	d015      	beq.n	801ef1c <HAL_TIM_IC_Start_IT+0x288>
 801eef0:	68bb      	ldr	r3, [r7, #8]
 801eef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801eef6:	d011      	beq.n	801ef1c <HAL_TIM_IC_Start_IT+0x288>
      {
        __HAL_TIM_ENABLE(htim);
 801eef8:	687b      	ldr	r3, [r7, #4]
 801eefa:	681b      	ldr	r3, [r3, #0]
 801eefc:	681a      	ldr	r2, [r3, #0]
 801eefe:	687b      	ldr	r3, [r7, #4]
 801ef00:	681b      	ldr	r3, [r3, #0]
 801ef02:	f042 0201 	orr.w	r2, r2, #1
 801ef06:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ef08:	e008      	b.n	801ef1c <HAL_TIM_IC_Start_IT+0x288>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 801ef0a:	687b      	ldr	r3, [r7, #4]
 801ef0c:	681b      	ldr	r3, [r3, #0]
 801ef0e:	681a      	ldr	r2, [r3, #0]
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	681b      	ldr	r3, [r3, #0]
 801ef14:	f042 0201 	orr.w	r2, r2, #1
 801ef18:	601a      	str	r2, [r3, #0]
 801ef1a:	e000      	b.n	801ef1e <HAL_TIM_IC_Start_IT+0x28a>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ef1c:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 801ef1e:	7bfb      	ldrb	r3, [r7, #15]
}
 801ef20:	4618      	mov	r0, r3
 801ef22:	3710      	adds	r7, #16
 801ef24:	46bd      	mov	sp, r7
 801ef26:	bd80      	pop	{r7, pc}
 801ef28:	40010000 	.word	0x40010000
 801ef2c:	40000400 	.word	0x40000400
 801ef30:	40000800 	.word	0x40000800
 801ef34:	40000c00 	.word	0x40000c00
 801ef38:	40010400 	.word	0x40010400
 801ef3c:	40001800 	.word	0x40001800
 801ef40:	40014000 	.word	0x40014000
 801ef44:	4000e000 	.word	0x4000e000
 801ef48:	4000e400 	.word	0x4000e400
 801ef4c:	00010007 	.word	0x00010007

0801ef50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801ef50:	b580      	push	{r7, lr}
 801ef52:	b082      	sub	sp, #8
 801ef54:	af00      	add	r7, sp, #0
 801ef56:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801ef58:	687b      	ldr	r3, [r7, #4]
 801ef5a:	681b      	ldr	r3, [r3, #0]
 801ef5c:	691b      	ldr	r3, [r3, #16]
 801ef5e:	f003 0302 	and.w	r3, r3, #2
 801ef62:	2b02      	cmp	r3, #2
 801ef64:	d122      	bne.n	801efac <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	681b      	ldr	r3, [r3, #0]
 801ef6a:	68db      	ldr	r3, [r3, #12]
 801ef6c:	f003 0302 	and.w	r3, r3, #2
 801ef70:	2b02      	cmp	r3, #2
 801ef72:	d11b      	bne.n	801efac <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ef74:	687b      	ldr	r3, [r7, #4]
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	f06f 0202 	mvn.w	r2, #2
 801ef7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ef7e:	687b      	ldr	r3, [r7, #4]
 801ef80:	2201      	movs	r2, #1
 801ef82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ef84:	687b      	ldr	r3, [r7, #4]
 801ef86:	681b      	ldr	r3, [r3, #0]
 801ef88:	699b      	ldr	r3, [r3, #24]
 801ef8a:	f003 0303 	and.w	r3, r3, #3
 801ef8e:	2b00      	cmp	r3, #0
 801ef90:	d003      	beq.n	801ef9a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801ef92:	6878      	ldr	r0, [r7, #4]
 801ef94:	f7ef f91c 	bl	800e1d0 <HAL_TIM_IC_CaptureCallback>
 801ef98:	e005      	b.n	801efa6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801ef9a:	6878      	ldr	r0, [r7, #4]
 801ef9c:	f000 fbe4 	bl	801f768 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801efa0:	6878      	ldr	r0, [r7, #4]
 801efa2:	f000 fbeb 	bl	801f77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801efa6:	687b      	ldr	r3, [r7, #4]
 801efa8:	2200      	movs	r2, #0
 801efaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	681b      	ldr	r3, [r3, #0]
 801efb0:	691b      	ldr	r3, [r3, #16]
 801efb2:	f003 0304 	and.w	r3, r3, #4
 801efb6:	2b04      	cmp	r3, #4
 801efb8:	d122      	bne.n	801f000 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801efba:	687b      	ldr	r3, [r7, #4]
 801efbc:	681b      	ldr	r3, [r3, #0]
 801efbe:	68db      	ldr	r3, [r3, #12]
 801efc0:	f003 0304 	and.w	r3, r3, #4
 801efc4:	2b04      	cmp	r3, #4
 801efc6:	d11b      	bne.n	801f000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	681b      	ldr	r3, [r3, #0]
 801efcc:	f06f 0204 	mvn.w	r2, #4
 801efd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	2202      	movs	r2, #2
 801efd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	699b      	ldr	r3, [r3, #24]
 801efde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801efe2:	2b00      	cmp	r3, #0
 801efe4:	d003      	beq.n	801efee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801efe6:	6878      	ldr	r0, [r7, #4]
 801efe8:	f7ef f8f2 	bl	800e1d0 <HAL_TIM_IC_CaptureCallback>
 801efec:	e005      	b.n	801effa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801efee:	6878      	ldr	r0, [r7, #4]
 801eff0:	f000 fbba 	bl	801f768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801eff4:	6878      	ldr	r0, [r7, #4]
 801eff6:	f000 fbc1 	bl	801f77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801effa:	687b      	ldr	r3, [r7, #4]
 801effc:	2200      	movs	r2, #0
 801effe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801f000:	687b      	ldr	r3, [r7, #4]
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	691b      	ldr	r3, [r3, #16]
 801f006:	f003 0308 	and.w	r3, r3, #8
 801f00a:	2b08      	cmp	r3, #8
 801f00c:	d122      	bne.n	801f054 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	681b      	ldr	r3, [r3, #0]
 801f012:	68db      	ldr	r3, [r3, #12]
 801f014:	f003 0308 	and.w	r3, r3, #8
 801f018:	2b08      	cmp	r3, #8
 801f01a:	d11b      	bne.n	801f054 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801f01c:	687b      	ldr	r3, [r7, #4]
 801f01e:	681b      	ldr	r3, [r3, #0]
 801f020:	f06f 0208 	mvn.w	r2, #8
 801f024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	2204      	movs	r2, #4
 801f02a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801f02c:	687b      	ldr	r3, [r7, #4]
 801f02e:	681b      	ldr	r3, [r3, #0]
 801f030:	69db      	ldr	r3, [r3, #28]
 801f032:	f003 0303 	and.w	r3, r3, #3
 801f036:	2b00      	cmp	r3, #0
 801f038:	d003      	beq.n	801f042 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f03a:	6878      	ldr	r0, [r7, #4]
 801f03c:	f7ef f8c8 	bl	800e1d0 <HAL_TIM_IC_CaptureCallback>
 801f040:	e005      	b.n	801f04e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f042:	6878      	ldr	r0, [r7, #4]
 801f044:	f000 fb90 	bl	801f768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f048:	6878      	ldr	r0, [r7, #4]
 801f04a:	f000 fb97 	bl	801f77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	2200      	movs	r2, #0
 801f052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	691b      	ldr	r3, [r3, #16]
 801f05a:	f003 0310 	and.w	r3, r3, #16
 801f05e:	2b10      	cmp	r3, #16
 801f060:	d122      	bne.n	801f0a8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801f062:	687b      	ldr	r3, [r7, #4]
 801f064:	681b      	ldr	r3, [r3, #0]
 801f066:	68db      	ldr	r3, [r3, #12]
 801f068:	f003 0310 	and.w	r3, r3, #16
 801f06c:	2b10      	cmp	r3, #16
 801f06e:	d11b      	bne.n	801f0a8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801f070:	687b      	ldr	r3, [r7, #4]
 801f072:	681b      	ldr	r3, [r3, #0]
 801f074:	f06f 0210 	mvn.w	r2, #16
 801f078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	2208      	movs	r2, #8
 801f07e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	681b      	ldr	r3, [r3, #0]
 801f084:	69db      	ldr	r3, [r3, #28]
 801f086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d003      	beq.n	801f096 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801f08e:	6878      	ldr	r0, [r7, #4]
 801f090:	f7ef f89e 	bl	800e1d0 <HAL_TIM_IC_CaptureCallback>
 801f094:	e005      	b.n	801f0a2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801f096:	6878      	ldr	r0, [r7, #4]
 801f098:	f000 fb66 	bl	801f768 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801f09c:	6878      	ldr	r0, [r7, #4]
 801f09e:	f000 fb6d 	bl	801f77c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	2200      	movs	r2, #0
 801f0a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	681b      	ldr	r3, [r3, #0]
 801f0ac:	691b      	ldr	r3, [r3, #16]
 801f0ae:	f003 0301 	and.w	r3, r3, #1
 801f0b2:	2b01      	cmp	r3, #1
 801f0b4:	d10e      	bne.n	801f0d4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801f0b6:	687b      	ldr	r3, [r7, #4]
 801f0b8:	681b      	ldr	r3, [r3, #0]
 801f0ba:	68db      	ldr	r3, [r3, #12]
 801f0bc:	f003 0301 	and.w	r3, r3, #1
 801f0c0:	2b01      	cmp	r3, #1
 801f0c2:	d107      	bne.n	801f0d4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801f0c4:	687b      	ldr	r3, [r7, #4]
 801f0c6:	681b      	ldr	r3, [r3, #0]
 801f0c8:	f06f 0201 	mvn.w	r2, #1
 801f0cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801f0ce:	6878      	ldr	r0, [r7, #4]
 801f0d0:	f7ef f893 	bl	800e1fa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801f0d4:	687b      	ldr	r3, [r7, #4]
 801f0d6:	681b      	ldr	r3, [r3, #0]
 801f0d8:	691b      	ldr	r3, [r3, #16]
 801f0da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f0de:	2b80      	cmp	r3, #128	; 0x80
 801f0e0:	d10e      	bne.n	801f100 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	68db      	ldr	r3, [r3, #12]
 801f0e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f0ec:	2b80      	cmp	r3, #128	; 0x80
 801f0ee:	d107      	bne.n	801f100 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	681b      	ldr	r3, [r3, #0]
 801f0f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801f0f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 801f0fa:	6878      	ldr	r0, [r7, #4]
 801f0fc:	f001 fa0e 	bl	802051c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	691b      	ldr	r3, [r3, #16]
 801f106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801f10a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f10e:	d10e      	bne.n	801f12e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	681b      	ldr	r3, [r3, #0]
 801f114:	68db      	ldr	r3, [r3, #12]
 801f116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801f11a:	2b80      	cmp	r3, #128	; 0x80
 801f11c:	d107      	bne.n	801f12e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801f126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801f128:	6878      	ldr	r0, [r7, #4]
 801f12a:	f001 fa01 	bl	8020530 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801f12e:	687b      	ldr	r3, [r7, #4]
 801f130:	681b      	ldr	r3, [r3, #0]
 801f132:	691b      	ldr	r3, [r3, #16]
 801f134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f138:	2b40      	cmp	r3, #64	; 0x40
 801f13a:	d10e      	bne.n	801f15a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801f13c:	687b      	ldr	r3, [r7, #4]
 801f13e:	681b      	ldr	r3, [r3, #0]
 801f140:	68db      	ldr	r3, [r3, #12]
 801f142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801f146:	2b40      	cmp	r3, #64	; 0x40
 801f148:	d107      	bne.n	801f15a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	681b      	ldr	r3, [r3, #0]
 801f14e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801f152:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801f154:	6878      	ldr	r0, [r7, #4]
 801f156:	f000 fb1b 	bl	801f790 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801f15a:	687b      	ldr	r3, [r7, #4]
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	691b      	ldr	r3, [r3, #16]
 801f160:	f003 0320 	and.w	r3, r3, #32
 801f164:	2b20      	cmp	r3, #32
 801f166:	d10e      	bne.n	801f186 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	681b      	ldr	r3, [r3, #0]
 801f16c:	68db      	ldr	r3, [r3, #12]
 801f16e:	f003 0320 	and.w	r3, r3, #32
 801f172:	2b20      	cmp	r3, #32
 801f174:	d107      	bne.n	801f186 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	681b      	ldr	r3, [r3, #0]
 801f17a:	f06f 0220 	mvn.w	r2, #32
 801f17e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801f180:	6878      	ldr	r0, [r7, #4]
 801f182:	f001 f9c1 	bl	8020508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801f186:	bf00      	nop
 801f188:	3708      	adds	r7, #8
 801f18a:	46bd      	mov	sp, r7
 801f18c:	bd80      	pop	{r7, pc}

0801f18e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 801f18e:	b580      	push	{r7, lr}
 801f190:	b086      	sub	sp, #24
 801f192:	af00      	add	r7, sp, #0
 801f194:	60f8      	str	r0, [r7, #12]
 801f196:	60b9      	str	r1, [r7, #8]
 801f198:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f19a:	2300      	movs	r3, #0
 801f19c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f19e:	68fb      	ldr	r3, [r7, #12]
 801f1a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f1a4:	2b01      	cmp	r3, #1
 801f1a6:	d101      	bne.n	801f1ac <HAL_TIM_IC_ConfigChannel+0x1e>
 801f1a8:	2302      	movs	r3, #2
 801f1aa:	e088      	b.n	801f2be <HAL_TIM_IC_ConfigChannel+0x130>
 801f1ac:	68fb      	ldr	r3, [r7, #12]
 801f1ae:	2201      	movs	r2, #1
 801f1b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	2b00      	cmp	r3, #0
 801f1b8:	d11b      	bne.n	801f1f2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 801f1ba:	68fb      	ldr	r3, [r7, #12]
 801f1bc:	6818      	ldr	r0, [r3, #0]
 801f1be:	68bb      	ldr	r3, [r7, #8]
 801f1c0:	6819      	ldr	r1, [r3, #0]
 801f1c2:	68bb      	ldr	r3, [r7, #8]
 801f1c4:	685a      	ldr	r2, [r3, #4]
 801f1c6:	68bb      	ldr	r3, [r7, #8]
 801f1c8:	68db      	ldr	r3, [r3, #12]
 801f1ca:	f000 fe67 	bl	801fe9c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 801f1ce:	68fb      	ldr	r3, [r7, #12]
 801f1d0:	681b      	ldr	r3, [r3, #0]
 801f1d2:	699a      	ldr	r2, [r3, #24]
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	f022 020c 	bic.w	r2, r2, #12
 801f1dc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 801f1de:	68fb      	ldr	r3, [r7, #12]
 801f1e0:	681b      	ldr	r3, [r3, #0]
 801f1e2:	6999      	ldr	r1, [r3, #24]
 801f1e4:	68bb      	ldr	r3, [r7, #8]
 801f1e6:	689a      	ldr	r2, [r3, #8]
 801f1e8:	68fb      	ldr	r3, [r7, #12]
 801f1ea:	681b      	ldr	r3, [r3, #0]
 801f1ec:	430a      	orrs	r2, r1
 801f1ee:	619a      	str	r2, [r3, #24]
 801f1f0:	e060      	b.n	801f2b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	2b04      	cmp	r3, #4
 801f1f6:	d11c      	bne.n	801f232 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 801f1f8:	68fb      	ldr	r3, [r7, #12]
 801f1fa:	6818      	ldr	r0, [r3, #0]
 801f1fc:	68bb      	ldr	r3, [r7, #8]
 801f1fe:	6819      	ldr	r1, [r3, #0]
 801f200:	68bb      	ldr	r3, [r7, #8]
 801f202:	685a      	ldr	r2, [r3, #4]
 801f204:	68bb      	ldr	r3, [r7, #8]
 801f206:	68db      	ldr	r3, [r3, #12]
 801f208:	f000 fef7 	bl	801fffa <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 801f20c:	68fb      	ldr	r3, [r7, #12]
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	699a      	ldr	r2, [r3, #24]
 801f212:	68fb      	ldr	r3, [r7, #12]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f21a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	6999      	ldr	r1, [r3, #24]
 801f222:	68bb      	ldr	r3, [r7, #8]
 801f224:	689b      	ldr	r3, [r3, #8]
 801f226:	021a      	lsls	r2, r3, #8
 801f228:	68fb      	ldr	r3, [r7, #12]
 801f22a:	681b      	ldr	r3, [r3, #0]
 801f22c:	430a      	orrs	r2, r1
 801f22e:	619a      	str	r2, [r3, #24]
 801f230:	e040      	b.n	801f2b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 801f232:	687b      	ldr	r3, [r7, #4]
 801f234:	2b08      	cmp	r3, #8
 801f236:	d11b      	bne.n	801f270 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 801f238:	68fb      	ldr	r3, [r7, #12]
 801f23a:	6818      	ldr	r0, [r3, #0]
 801f23c:	68bb      	ldr	r3, [r7, #8]
 801f23e:	6819      	ldr	r1, [r3, #0]
 801f240:	68bb      	ldr	r3, [r7, #8]
 801f242:	685a      	ldr	r2, [r3, #4]
 801f244:	68bb      	ldr	r3, [r7, #8]
 801f246:	68db      	ldr	r3, [r3, #12]
 801f248:	f000 ff44 	bl	80200d4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 801f24c:	68fb      	ldr	r3, [r7, #12]
 801f24e:	681b      	ldr	r3, [r3, #0]
 801f250:	69da      	ldr	r2, [r3, #28]
 801f252:	68fb      	ldr	r3, [r7, #12]
 801f254:	681b      	ldr	r3, [r3, #0]
 801f256:	f022 020c 	bic.w	r2, r2, #12
 801f25a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	69d9      	ldr	r1, [r3, #28]
 801f262:	68bb      	ldr	r3, [r7, #8]
 801f264:	689a      	ldr	r2, [r3, #8]
 801f266:	68fb      	ldr	r3, [r7, #12]
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	430a      	orrs	r2, r1
 801f26c:	61da      	str	r2, [r3, #28]
 801f26e:	e021      	b.n	801f2b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 801f270:	687b      	ldr	r3, [r7, #4]
 801f272:	2b0c      	cmp	r3, #12
 801f274:	d11c      	bne.n	801f2b0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 801f276:	68fb      	ldr	r3, [r7, #12]
 801f278:	6818      	ldr	r0, [r3, #0]
 801f27a:	68bb      	ldr	r3, [r7, #8]
 801f27c:	6819      	ldr	r1, [r3, #0]
 801f27e:	68bb      	ldr	r3, [r7, #8]
 801f280:	685a      	ldr	r2, [r3, #4]
 801f282:	68bb      	ldr	r3, [r7, #8]
 801f284:	68db      	ldr	r3, [r3, #12]
 801f286:	f000 ff61 	bl	802014c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 801f28a:	68fb      	ldr	r3, [r7, #12]
 801f28c:	681b      	ldr	r3, [r3, #0]
 801f28e:	69da      	ldr	r2, [r3, #28]
 801f290:	68fb      	ldr	r3, [r7, #12]
 801f292:	681b      	ldr	r3, [r3, #0]
 801f294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 801f298:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 801f29a:	68fb      	ldr	r3, [r7, #12]
 801f29c:	681b      	ldr	r3, [r3, #0]
 801f29e:	69d9      	ldr	r1, [r3, #28]
 801f2a0:	68bb      	ldr	r3, [r7, #8]
 801f2a2:	689b      	ldr	r3, [r3, #8]
 801f2a4:	021a      	lsls	r2, r3, #8
 801f2a6:	68fb      	ldr	r3, [r7, #12]
 801f2a8:	681b      	ldr	r3, [r3, #0]
 801f2aa:	430a      	orrs	r2, r1
 801f2ac:	61da      	str	r2, [r3, #28]
 801f2ae:	e001      	b.n	801f2b4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 801f2b0:	2301      	movs	r3, #1
 801f2b2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 801f2b4:	68fb      	ldr	r3, [r7, #12]
 801f2b6:	2200      	movs	r2, #0
 801f2b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f2bc:	7dfb      	ldrb	r3, [r7, #23]
}
 801f2be:	4618      	mov	r0, r3
 801f2c0:	3718      	adds	r7, #24
 801f2c2:	46bd      	mov	sp, r7
 801f2c4:	bd80      	pop	{r7, pc}
	...

0801f2c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 801f2c8:	b580      	push	{r7, lr}
 801f2ca:	b086      	sub	sp, #24
 801f2cc:	af00      	add	r7, sp, #0
 801f2ce:	60f8      	str	r0, [r7, #12]
 801f2d0:	60b9      	str	r1, [r7, #8]
 801f2d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801f2d4:	2300      	movs	r3, #0
 801f2d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 801f2d8:	68fb      	ldr	r3, [r7, #12]
 801f2da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f2de:	2b01      	cmp	r3, #1
 801f2e0:	d101      	bne.n	801f2e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 801f2e2:	2302      	movs	r3, #2
 801f2e4:	e0ff      	b.n	801f4e6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 801f2e6:	68fb      	ldr	r3, [r7, #12]
 801f2e8:	2201      	movs	r2, #1
 801f2ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 801f2ee:	687b      	ldr	r3, [r7, #4]
 801f2f0:	2b14      	cmp	r3, #20
 801f2f2:	f200 80f0 	bhi.w	801f4d6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 801f2f6:	a201      	add	r2, pc, #4	; (adr r2, 801f2fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 801f2f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f2fc:	0801f351 	.word	0x0801f351
 801f300:	0801f4d7 	.word	0x0801f4d7
 801f304:	0801f4d7 	.word	0x0801f4d7
 801f308:	0801f4d7 	.word	0x0801f4d7
 801f30c:	0801f391 	.word	0x0801f391
 801f310:	0801f4d7 	.word	0x0801f4d7
 801f314:	0801f4d7 	.word	0x0801f4d7
 801f318:	0801f4d7 	.word	0x0801f4d7
 801f31c:	0801f3d3 	.word	0x0801f3d3
 801f320:	0801f4d7 	.word	0x0801f4d7
 801f324:	0801f4d7 	.word	0x0801f4d7
 801f328:	0801f4d7 	.word	0x0801f4d7
 801f32c:	0801f413 	.word	0x0801f413
 801f330:	0801f4d7 	.word	0x0801f4d7
 801f334:	0801f4d7 	.word	0x0801f4d7
 801f338:	0801f4d7 	.word	0x0801f4d7
 801f33c:	0801f455 	.word	0x0801f455
 801f340:	0801f4d7 	.word	0x0801f4d7
 801f344:	0801f4d7 	.word	0x0801f4d7
 801f348:	0801f4d7 	.word	0x0801f4d7
 801f34c:	0801f495 	.word	0x0801f495
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	68b9      	ldr	r1, [r7, #8]
 801f356:	4618      	mov	r0, r3
 801f358:	f000 faca 	bl	801f8f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 801f35c:	68fb      	ldr	r3, [r7, #12]
 801f35e:	681b      	ldr	r3, [r3, #0]
 801f360:	699a      	ldr	r2, [r3, #24]
 801f362:	68fb      	ldr	r3, [r7, #12]
 801f364:	681b      	ldr	r3, [r3, #0]
 801f366:	f042 0208 	orr.w	r2, r2, #8
 801f36a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 801f36c:	68fb      	ldr	r3, [r7, #12]
 801f36e:	681b      	ldr	r3, [r3, #0]
 801f370:	699a      	ldr	r2, [r3, #24]
 801f372:	68fb      	ldr	r3, [r7, #12]
 801f374:	681b      	ldr	r3, [r3, #0]
 801f376:	f022 0204 	bic.w	r2, r2, #4
 801f37a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 801f37c:	68fb      	ldr	r3, [r7, #12]
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	6999      	ldr	r1, [r3, #24]
 801f382:	68bb      	ldr	r3, [r7, #8]
 801f384:	691a      	ldr	r2, [r3, #16]
 801f386:	68fb      	ldr	r3, [r7, #12]
 801f388:	681b      	ldr	r3, [r3, #0]
 801f38a:	430a      	orrs	r2, r1
 801f38c:	619a      	str	r2, [r3, #24]
      break;
 801f38e:	e0a5      	b.n	801f4dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801f390:	68fb      	ldr	r3, [r7, #12]
 801f392:	681b      	ldr	r3, [r3, #0]
 801f394:	68b9      	ldr	r1, [r7, #8]
 801f396:	4618      	mov	r0, r3
 801f398:	f000 fb3a 	bl	801fa10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 801f39c:	68fb      	ldr	r3, [r7, #12]
 801f39e:	681b      	ldr	r3, [r3, #0]
 801f3a0:	699a      	ldr	r2, [r3, #24]
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	681b      	ldr	r3, [r3, #0]
 801f3a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f3aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 801f3ac:	68fb      	ldr	r3, [r7, #12]
 801f3ae:	681b      	ldr	r3, [r3, #0]
 801f3b0:	699a      	ldr	r2, [r3, #24]
 801f3b2:	68fb      	ldr	r3, [r7, #12]
 801f3b4:	681b      	ldr	r3, [r3, #0]
 801f3b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f3ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 801f3bc:	68fb      	ldr	r3, [r7, #12]
 801f3be:	681b      	ldr	r3, [r3, #0]
 801f3c0:	6999      	ldr	r1, [r3, #24]
 801f3c2:	68bb      	ldr	r3, [r7, #8]
 801f3c4:	691b      	ldr	r3, [r3, #16]
 801f3c6:	021a      	lsls	r2, r3, #8
 801f3c8:	68fb      	ldr	r3, [r7, #12]
 801f3ca:	681b      	ldr	r3, [r3, #0]
 801f3cc:	430a      	orrs	r2, r1
 801f3ce:	619a      	str	r2, [r3, #24]
      break;
 801f3d0:	e084      	b.n	801f4dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	681b      	ldr	r3, [r3, #0]
 801f3d6:	68b9      	ldr	r1, [r7, #8]
 801f3d8:	4618      	mov	r0, r3
 801f3da:	f000 fba3 	bl	801fb24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 801f3de:	68fb      	ldr	r3, [r7, #12]
 801f3e0:	681b      	ldr	r3, [r3, #0]
 801f3e2:	69da      	ldr	r2, [r3, #28]
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	681b      	ldr	r3, [r3, #0]
 801f3e8:	f042 0208 	orr.w	r2, r2, #8
 801f3ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 801f3ee:	68fb      	ldr	r3, [r7, #12]
 801f3f0:	681b      	ldr	r3, [r3, #0]
 801f3f2:	69da      	ldr	r2, [r3, #28]
 801f3f4:	68fb      	ldr	r3, [r7, #12]
 801f3f6:	681b      	ldr	r3, [r3, #0]
 801f3f8:	f022 0204 	bic.w	r2, r2, #4
 801f3fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 801f3fe:	68fb      	ldr	r3, [r7, #12]
 801f400:	681b      	ldr	r3, [r3, #0]
 801f402:	69d9      	ldr	r1, [r3, #28]
 801f404:	68bb      	ldr	r3, [r7, #8]
 801f406:	691a      	ldr	r2, [r3, #16]
 801f408:	68fb      	ldr	r3, [r7, #12]
 801f40a:	681b      	ldr	r3, [r3, #0]
 801f40c:	430a      	orrs	r2, r1
 801f40e:	61da      	str	r2, [r3, #28]
      break;
 801f410:	e064      	b.n	801f4dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 801f412:	68fb      	ldr	r3, [r7, #12]
 801f414:	681b      	ldr	r3, [r3, #0]
 801f416:	68b9      	ldr	r1, [r7, #8]
 801f418:	4618      	mov	r0, r3
 801f41a:	f000 fc0b 	bl	801fc34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801f41e:	68fb      	ldr	r3, [r7, #12]
 801f420:	681b      	ldr	r3, [r3, #0]
 801f422:	69da      	ldr	r2, [r3, #28]
 801f424:	68fb      	ldr	r3, [r7, #12]
 801f426:	681b      	ldr	r3, [r3, #0]
 801f428:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f42c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 801f42e:	68fb      	ldr	r3, [r7, #12]
 801f430:	681b      	ldr	r3, [r3, #0]
 801f432:	69da      	ldr	r2, [r3, #28]
 801f434:	68fb      	ldr	r3, [r7, #12]
 801f436:	681b      	ldr	r3, [r3, #0]
 801f438:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f43c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	681b      	ldr	r3, [r3, #0]
 801f442:	69d9      	ldr	r1, [r3, #28]
 801f444:	68bb      	ldr	r3, [r7, #8]
 801f446:	691b      	ldr	r3, [r3, #16]
 801f448:	021a      	lsls	r2, r3, #8
 801f44a:	68fb      	ldr	r3, [r7, #12]
 801f44c:	681b      	ldr	r3, [r3, #0]
 801f44e:	430a      	orrs	r2, r1
 801f450:	61da      	str	r2, [r3, #28]
      break;
 801f452:	e043      	b.n	801f4dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 801f454:	68fb      	ldr	r3, [r7, #12]
 801f456:	681b      	ldr	r3, [r3, #0]
 801f458:	68b9      	ldr	r1, [r7, #8]
 801f45a:	4618      	mov	r0, r3
 801f45c:	f000 fc54 	bl	801fd08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 801f460:	68fb      	ldr	r3, [r7, #12]
 801f462:	681b      	ldr	r3, [r3, #0]
 801f464:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f466:	68fb      	ldr	r3, [r7, #12]
 801f468:	681b      	ldr	r3, [r3, #0]
 801f46a:	f042 0208 	orr.w	r2, r2, #8
 801f46e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 801f470:	68fb      	ldr	r3, [r7, #12]
 801f472:	681b      	ldr	r3, [r3, #0]
 801f474:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f476:	68fb      	ldr	r3, [r7, #12]
 801f478:	681b      	ldr	r3, [r3, #0]
 801f47a:	f022 0204 	bic.w	r2, r2, #4
 801f47e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 801f480:	68fb      	ldr	r3, [r7, #12]
 801f482:	681b      	ldr	r3, [r3, #0]
 801f484:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f486:	68bb      	ldr	r3, [r7, #8]
 801f488:	691a      	ldr	r2, [r3, #16]
 801f48a:	68fb      	ldr	r3, [r7, #12]
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	430a      	orrs	r2, r1
 801f490:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f492:	e023      	b.n	801f4dc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 801f494:	68fb      	ldr	r3, [r7, #12]
 801f496:	681b      	ldr	r3, [r3, #0]
 801f498:	68b9      	ldr	r1, [r7, #8]
 801f49a:	4618      	mov	r0, r3
 801f49c:	f000 fc98 	bl	801fdd0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801f4a0:	68fb      	ldr	r3, [r7, #12]
 801f4a2:	681b      	ldr	r3, [r3, #0]
 801f4a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f4a6:	68fb      	ldr	r3, [r7, #12]
 801f4a8:	681b      	ldr	r3, [r3, #0]
 801f4aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801f4ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 801f4b0:	68fb      	ldr	r3, [r7, #12]
 801f4b2:	681b      	ldr	r3, [r3, #0]
 801f4b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801f4b6:	68fb      	ldr	r3, [r7, #12]
 801f4b8:	681b      	ldr	r3, [r3, #0]
 801f4ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801f4be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801f4c0:	68fb      	ldr	r3, [r7, #12]
 801f4c2:	681b      	ldr	r3, [r3, #0]
 801f4c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801f4c6:	68bb      	ldr	r3, [r7, #8]
 801f4c8:	691b      	ldr	r3, [r3, #16]
 801f4ca:	021a      	lsls	r2, r3, #8
 801f4cc:	68fb      	ldr	r3, [r7, #12]
 801f4ce:	681b      	ldr	r3, [r3, #0]
 801f4d0:	430a      	orrs	r2, r1
 801f4d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801f4d4:	e002      	b.n	801f4dc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 801f4d6:	2301      	movs	r3, #1
 801f4d8:	75fb      	strb	r3, [r7, #23]
      break;
 801f4da:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 801f4dc:	68fb      	ldr	r3, [r7, #12]
 801f4de:	2200      	movs	r2, #0
 801f4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f4e4:	7dfb      	ldrb	r3, [r7, #23]
}
 801f4e6:	4618      	mov	r0, r3
 801f4e8:	3718      	adds	r7, #24
 801f4ea:	46bd      	mov	sp, r7
 801f4ec:	bd80      	pop	{r7, pc}
 801f4ee:	bf00      	nop

0801f4f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f4f0:	b580      	push	{r7, lr}
 801f4f2:	b084      	sub	sp, #16
 801f4f4:	af00      	add	r7, sp, #0
 801f4f6:	6078      	str	r0, [r7, #4]
 801f4f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f4fa:	2300      	movs	r3, #0
 801f4fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f4fe:	687b      	ldr	r3, [r7, #4]
 801f500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801f504:	2b01      	cmp	r3, #1
 801f506:	d101      	bne.n	801f50c <HAL_TIM_ConfigClockSource+0x1c>
 801f508:	2302      	movs	r3, #2
 801f50a:	e0dc      	b.n	801f6c6 <HAL_TIM_ConfigClockSource+0x1d6>
 801f50c:	687b      	ldr	r3, [r7, #4]
 801f50e:	2201      	movs	r2, #1
 801f510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f514:	687b      	ldr	r3, [r7, #4]
 801f516:	2202      	movs	r2, #2
 801f518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f51c:	687b      	ldr	r3, [r7, #4]
 801f51e:	681b      	ldr	r3, [r3, #0]
 801f520:	689b      	ldr	r3, [r3, #8]
 801f522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f524:	68ba      	ldr	r2, [r7, #8]
 801f526:	4b6a      	ldr	r3, [pc, #424]	; (801f6d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 801f528:	4013      	ands	r3, r2
 801f52a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f52c:	68bb      	ldr	r3, [r7, #8]
 801f52e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801f532:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f534:	687b      	ldr	r3, [r7, #4]
 801f536:	681b      	ldr	r3, [r3, #0]
 801f538:	68ba      	ldr	r2, [r7, #8]
 801f53a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f53c:	683b      	ldr	r3, [r7, #0]
 801f53e:	681b      	ldr	r3, [r3, #0]
 801f540:	4a64      	ldr	r2, [pc, #400]	; (801f6d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f542:	4293      	cmp	r3, r2
 801f544:	f000 80a9 	beq.w	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f548:	4a62      	ldr	r2, [pc, #392]	; (801f6d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f54a:	4293      	cmp	r3, r2
 801f54c:	f200 80ae 	bhi.w	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f550:	4a61      	ldr	r2, [pc, #388]	; (801f6d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f552:	4293      	cmp	r3, r2
 801f554:	f000 80a1 	beq.w	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f558:	4a5f      	ldr	r2, [pc, #380]	; (801f6d8 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f55a:	4293      	cmp	r3, r2
 801f55c:	f200 80a6 	bhi.w	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f560:	4a5e      	ldr	r2, [pc, #376]	; (801f6dc <HAL_TIM_ConfigClockSource+0x1ec>)
 801f562:	4293      	cmp	r3, r2
 801f564:	f000 8099 	beq.w	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f568:	4a5c      	ldr	r2, [pc, #368]	; (801f6dc <HAL_TIM_ConfigClockSource+0x1ec>)
 801f56a:	4293      	cmp	r3, r2
 801f56c:	f200 809e 	bhi.w	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f570:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f574:	f000 8091 	beq.w	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f578:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 801f57c:	f200 8096 	bhi.w	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f584:	f000 8089 	beq.w	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f588:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801f58c:	f200 808e 	bhi.w	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f590:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f594:	d03e      	beq.n	801f614 <HAL_TIM_ConfigClockSource+0x124>
 801f596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801f59a:	f200 8087 	bhi.w	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f5a2:	f000 8086 	beq.w	801f6b2 <HAL_TIM_ConfigClockSource+0x1c2>
 801f5a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801f5aa:	d87f      	bhi.n	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f5ac:	2b70      	cmp	r3, #112	; 0x70
 801f5ae:	d01a      	beq.n	801f5e6 <HAL_TIM_ConfigClockSource+0xf6>
 801f5b0:	2b70      	cmp	r3, #112	; 0x70
 801f5b2:	d87b      	bhi.n	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f5b4:	2b60      	cmp	r3, #96	; 0x60
 801f5b6:	d050      	beq.n	801f65a <HAL_TIM_ConfigClockSource+0x16a>
 801f5b8:	2b60      	cmp	r3, #96	; 0x60
 801f5ba:	d877      	bhi.n	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f5bc:	2b50      	cmp	r3, #80	; 0x50
 801f5be:	d03c      	beq.n	801f63a <HAL_TIM_ConfigClockSource+0x14a>
 801f5c0:	2b50      	cmp	r3, #80	; 0x50
 801f5c2:	d873      	bhi.n	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f5c4:	2b40      	cmp	r3, #64	; 0x40
 801f5c6:	d058      	beq.n	801f67a <HAL_TIM_ConfigClockSource+0x18a>
 801f5c8:	2b40      	cmp	r3, #64	; 0x40
 801f5ca:	d86f      	bhi.n	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f5cc:	2b30      	cmp	r3, #48	; 0x30
 801f5ce:	d064      	beq.n	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f5d0:	2b30      	cmp	r3, #48	; 0x30
 801f5d2:	d86b      	bhi.n	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f5d4:	2b20      	cmp	r3, #32
 801f5d6:	d060      	beq.n	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f5d8:	2b20      	cmp	r3, #32
 801f5da:	d867      	bhi.n	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
 801f5dc:	2b00      	cmp	r3, #0
 801f5de:	d05c      	beq.n	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f5e0:	2b10      	cmp	r3, #16
 801f5e2:	d05a      	beq.n	801f69a <HAL_TIM_ConfigClockSource+0x1aa>
 801f5e4:	e062      	b.n	801f6ac <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	6818      	ldr	r0, [r3, #0]
 801f5ea:	683b      	ldr	r3, [r7, #0]
 801f5ec:	6899      	ldr	r1, [r3, #8]
 801f5ee:	683b      	ldr	r3, [r7, #0]
 801f5f0:	685a      	ldr	r2, [r3, #4]
 801f5f2:	683b      	ldr	r3, [r7, #0]
 801f5f4:	68db      	ldr	r3, [r3, #12]
 801f5f6:	f000 fe05 	bl	8020204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801f5fa:	687b      	ldr	r3, [r7, #4]
 801f5fc:	681b      	ldr	r3, [r3, #0]
 801f5fe:	689b      	ldr	r3, [r3, #8]
 801f600:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801f602:	68bb      	ldr	r3, [r7, #8]
 801f604:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801f608:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801f60a:	687b      	ldr	r3, [r7, #4]
 801f60c:	681b      	ldr	r3, [r3, #0]
 801f60e:	68ba      	ldr	r2, [r7, #8]
 801f610:	609a      	str	r2, [r3, #8]
      break;
 801f612:	e04f      	b.n	801f6b4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f614:	687b      	ldr	r3, [r7, #4]
 801f616:	6818      	ldr	r0, [r3, #0]
 801f618:	683b      	ldr	r3, [r7, #0]
 801f61a:	6899      	ldr	r1, [r3, #8]
 801f61c:	683b      	ldr	r3, [r7, #0]
 801f61e:	685a      	ldr	r2, [r3, #4]
 801f620:	683b      	ldr	r3, [r7, #0]
 801f622:	68db      	ldr	r3, [r3, #12]
 801f624:	f000 fdee 	bl	8020204 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801f628:	687b      	ldr	r3, [r7, #4]
 801f62a:	681b      	ldr	r3, [r3, #0]
 801f62c:	689a      	ldr	r2, [r3, #8]
 801f62e:	687b      	ldr	r3, [r7, #4]
 801f630:	681b      	ldr	r3, [r3, #0]
 801f632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801f636:	609a      	str	r2, [r3, #8]
      break;
 801f638:	e03c      	b.n	801f6b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f63a:	687b      	ldr	r3, [r7, #4]
 801f63c:	6818      	ldr	r0, [r3, #0]
 801f63e:	683b      	ldr	r3, [r7, #0]
 801f640:	6859      	ldr	r1, [r3, #4]
 801f642:	683b      	ldr	r3, [r7, #0]
 801f644:	68db      	ldr	r3, [r3, #12]
 801f646:	461a      	mov	r2, r3
 801f648:	f000 fca8 	bl	801ff9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801f64c:	687b      	ldr	r3, [r7, #4]
 801f64e:	681b      	ldr	r3, [r3, #0]
 801f650:	2150      	movs	r1, #80	; 0x50
 801f652:	4618      	mov	r0, r3
 801f654:	f000 fdb8 	bl	80201c8 <TIM_ITRx_SetConfig>
      break;
 801f658:	e02c      	b.n	801f6b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801f65a:	687b      	ldr	r3, [r7, #4]
 801f65c:	6818      	ldr	r0, [r3, #0]
 801f65e:	683b      	ldr	r3, [r7, #0]
 801f660:	6859      	ldr	r1, [r3, #4]
 801f662:	683b      	ldr	r3, [r7, #0]
 801f664:	68db      	ldr	r3, [r3, #12]
 801f666:	461a      	mov	r2, r3
 801f668:	f000 fd04 	bl	8020074 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801f66c:	687b      	ldr	r3, [r7, #4]
 801f66e:	681b      	ldr	r3, [r3, #0]
 801f670:	2160      	movs	r1, #96	; 0x60
 801f672:	4618      	mov	r0, r3
 801f674:	f000 fda8 	bl	80201c8 <TIM_ITRx_SetConfig>
      break;
 801f678:	e01c      	b.n	801f6b4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f67a:	687b      	ldr	r3, [r7, #4]
 801f67c:	6818      	ldr	r0, [r3, #0]
 801f67e:	683b      	ldr	r3, [r7, #0]
 801f680:	6859      	ldr	r1, [r3, #4]
 801f682:	683b      	ldr	r3, [r7, #0]
 801f684:	68db      	ldr	r3, [r3, #12]
 801f686:	461a      	mov	r2, r3
 801f688:	f000 fc88 	bl	801ff9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801f68c:	687b      	ldr	r3, [r7, #4]
 801f68e:	681b      	ldr	r3, [r3, #0]
 801f690:	2140      	movs	r1, #64	; 0x40
 801f692:	4618      	mov	r0, r3
 801f694:	f000 fd98 	bl	80201c8 <TIM_ITRx_SetConfig>
      break;
 801f698:	e00c      	b.n	801f6b4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801f69a:	687b      	ldr	r3, [r7, #4]
 801f69c:	681a      	ldr	r2, [r3, #0]
 801f69e:	683b      	ldr	r3, [r7, #0]
 801f6a0:	681b      	ldr	r3, [r3, #0]
 801f6a2:	4619      	mov	r1, r3
 801f6a4:	4610      	mov	r0, r2
 801f6a6:	f000 fd8f 	bl	80201c8 <TIM_ITRx_SetConfig>
      break;
 801f6aa:	e003      	b.n	801f6b4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801f6ac:	2301      	movs	r3, #1
 801f6ae:	73fb      	strb	r3, [r7, #15]
      break;
 801f6b0:	e000      	b.n	801f6b4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801f6b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801f6b4:	687b      	ldr	r3, [r7, #4]
 801f6b6:	2201      	movs	r2, #1
 801f6b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801f6bc:	687b      	ldr	r3, [r7, #4]
 801f6be:	2200      	movs	r2, #0
 801f6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801f6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801f6c6:	4618      	mov	r0, r3
 801f6c8:	3710      	adds	r7, #16
 801f6ca:	46bd      	mov	sp, r7
 801f6cc:	bd80      	pop	{r7, pc}
 801f6ce:	bf00      	nop
 801f6d0:	ffceff88 	.word	0xffceff88
 801f6d4:	00100040 	.word	0x00100040
 801f6d8:	00100030 	.word	0x00100030
 801f6dc:	00100020 	.word	0x00100020

0801f6e0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 801f6e0:	b480      	push	{r7}
 801f6e2:	b085      	sub	sp, #20
 801f6e4:	af00      	add	r7, sp, #0
 801f6e6:	6078      	str	r0, [r7, #4]
 801f6e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 801f6ea:	2300      	movs	r3, #0
 801f6ec:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 801f6ee:	683b      	ldr	r3, [r7, #0]
 801f6f0:	2b0c      	cmp	r3, #12
 801f6f2:	d831      	bhi.n	801f758 <HAL_TIM_ReadCapturedValue+0x78>
 801f6f4:	a201      	add	r2, pc, #4	; (adr r2, 801f6fc <HAL_TIM_ReadCapturedValue+0x1c>)
 801f6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f6fa:	bf00      	nop
 801f6fc:	0801f731 	.word	0x0801f731
 801f700:	0801f759 	.word	0x0801f759
 801f704:	0801f759 	.word	0x0801f759
 801f708:	0801f759 	.word	0x0801f759
 801f70c:	0801f73b 	.word	0x0801f73b
 801f710:	0801f759 	.word	0x0801f759
 801f714:	0801f759 	.word	0x0801f759
 801f718:	0801f759 	.word	0x0801f759
 801f71c:	0801f745 	.word	0x0801f745
 801f720:	0801f759 	.word	0x0801f759
 801f724:	0801f759 	.word	0x0801f759
 801f728:	0801f759 	.word	0x0801f759
 801f72c:	0801f74f 	.word	0x0801f74f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 801f730:	687b      	ldr	r3, [r7, #4]
 801f732:	681b      	ldr	r3, [r3, #0]
 801f734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f736:	60fb      	str	r3, [r7, #12]

      break;
 801f738:	e00f      	b.n	801f75a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 801f73a:	687b      	ldr	r3, [r7, #4]
 801f73c:	681b      	ldr	r3, [r3, #0]
 801f73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f740:	60fb      	str	r3, [r7, #12]

      break;
 801f742:	e00a      	b.n	801f75a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 801f744:	687b      	ldr	r3, [r7, #4]
 801f746:	681b      	ldr	r3, [r3, #0]
 801f748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801f74a:	60fb      	str	r3, [r7, #12]

      break;
 801f74c:	e005      	b.n	801f75a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 801f74e:	687b      	ldr	r3, [r7, #4]
 801f750:	681b      	ldr	r3, [r3, #0]
 801f752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f754:	60fb      	str	r3, [r7, #12]

      break;
 801f756:	e000      	b.n	801f75a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 801f758:	bf00      	nop
  }

  return tmpreg;
 801f75a:	68fb      	ldr	r3, [r7, #12]
}
 801f75c:	4618      	mov	r0, r3
 801f75e:	3714      	adds	r7, #20
 801f760:	46bd      	mov	sp, r7
 801f762:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f766:	4770      	bx	lr

0801f768 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801f768:	b480      	push	{r7}
 801f76a:	b083      	sub	sp, #12
 801f76c:	af00      	add	r7, sp, #0
 801f76e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801f770:	bf00      	nop
 801f772:	370c      	adds	r7, #12
 801f774:	46bd      	mov	sp, r7
 801f776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f77a:	4770      	bx	lr

0801f77c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801f77c:	b480      	push	{r7}
 801f77e:	b083      	sub	sp, #12
 801f780:	af00      	add	r7, sp, #0
 801f782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 801f784:	bf00      	nop
 801f786:	370c      	adds	r7, #12
 801f788:	46bd      	mov	sp, r7
 801f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f78e:	4770      	bx	lr

0801f790 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801f790:	b480      	push	{r7}
 801f792:	b083      	sub	sp, #12
 801f794:	af00      	add	r7, sp, #0
 801f796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801f798:	bf00      	nop
 801f79a:	370c      	adds	r7, #12
 801f79c:	46bd      	mov	sp, r7
 801f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f7a2:	4770      	bx	lr

0801f7a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f7a4:	b480      	push	{r7}
 801f7a6:	b085      	sub	sp, #20
 801f7a8:	af00      	add	r7, sp, #0
 801f7aa:	6078      	str	r0, [r7, #4]
 801f7ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f7ae:	687b      	ldr	r3, [r7, #4]
 801f7b0:	681b      	ldr	r3, [r3, #0]
 801f7b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f7b4:	687b      	ldr	r3, [r7, #4]
 801f7b6:	4a44      	ldr	r2, [pc, #272]	; (801f8c8 <TIM_Base_SetConfig+0x124>)
 801f7b8:	4293      	cmp	r3, r2
 801f7ba:	d013      	beq.n	801f7e4 <TIM_Base_SetConfig+0x40>
 801f7bc:	687b      	ldr	r3, [r7, #4]
 801f7be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f7c2:	d00f      	beq.n	801f7e4 <TIM_Base_SetConfig+0x40>
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	4a41      	ldr	r2, [pc, #260]	; (801f8cc <TIM_Base_SetConfig+0x128>)
 801f7c8:	4293      	cmp	r3, r2
 801f7ca:	d00b      	beq.n	801f7e4 <TIM_Base_SetConfig+0x40>
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	4a40      	ldr	r2, [pc, #256]	; (801f8d0 <TIM_Base_SetConfig+0x12c>)
 801f7d0:	4293      	cmp	r3, r2
 801f7d2:	d007      	beq.n	801f7e4 <TIM_Base_SetConfig+0x40>
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	4a3f      	ldr	r2, [pc, #252]	; (801f8d4 <TIM_Base_SetConfig+0x130>)
 801f7d8:	4293      	cmp	r3, r2
 801f7da:	d003      	beq.n	801f7e4 <TIM_Base_SetConfig+0x40>
 801f7dc:	687b      	ldr	r3, [r7, #4]
 801f7de:	4a3e      	ldr	r2, [pc, #248]	; (801f8d8 <TIM_Base_SetConfig+0x134>)
 801f7e0:	4293      	cmp	r3, r2
 801f7e2:	d108      	bne.n	801f7f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f7e4:	68fb      	ldr	r3, [r7, #12]
 801f7e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801f7ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f7ec:	683b      	ldr	r3, [r7, #0]
 801f7ee:	685b      	ldr	r3, [r3, #4]
 801f7f0:	68fa      	ldr	r2, [r7, #12]
 801f7f2:	4313      	orrs	r3, r2
 801f7f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f7f6:	687b      	ldr	r3, [r7, #4]
 801f7f8:	4a33      	ldr	r2, [pc, #204]	; (801f8c8 <TIM_Base_SetConfig+0x124>)
 801f7fa:	4293      	cmp	r3, r2
 801f7fc:	d027      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f804:	d023      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f806:	687b      	ldr	r3, [r7, #4]
 801f808:	4a30      	ldr	r2, [pc, #192]	; (801f8cc <TIM_Base_SetConfig+0x128>)
 801f80a:	4293      	cmp	r3, r2
 801f80c:	d01f      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f80e:	687b      	ldr	r3, [r7, #4]
 801f810:	4a2f      	ldr	r2, [pc, #188]	; (801f8d0 <TIM_Base_SetConfig+0x12c>)
 801f812:	4293      	cmp	r3, r2
 801f814:	d01b      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f816:	687b      	ldr	r3, [r7, #4]
 801f818:	4a2e      	ldr	r2, [pc, #184]	; (801f8d4 <TIM_Base_SetConfig+0x130>)
 801f81a:	4293      	cmp	r3, r2
 801f81c:	d017      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f81e:	687b      	ldr	r3, [r7, #4]
 801f820:	4a2d      	ldr	r2, [pc, #180]	; (801f8d8 <TIM_Base_SetConfig+0x134>)
 801f822:	4293      	cmp	r3, r2
 801f824:	d013      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f826:	687b      	ldr	r3, [r7, #4]
 801f828:	4a2c      	ldr	r2, [pc, #176]	; (801f8dc <TIM_Base_SetConfig+0x138>)
 801f82a:	4293      	cmp	r3, r2
 801f82c:	d00f      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	4a2b      	ldr	r2, [pc, #172]	; (801f8e0 <TIM_Base_SetConfig+0x13c>)
 801f832:	4293      	cmp	r3, r2
 801f834:	d00b      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	4a2a      	ldr	r2, [pc, #168]	; (801f8e4 <TIM_Base_SetConfig+0x140>)
 801f83a:	4293      	cmp	r3, r2
 801f83c:	d007      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	4a29      	ldr	r2, [pc, #164]	; (801f8e8 <TIM_Base_SetConfig+0x144>)
 801f842:	4293      	cmp	r3, r2
 801f844:	d003      	beq.n	801f84e <TIM_Base_SetConfig+0xaa>
 801f846:	687b      	ldr	r3, [r7, #4]
 801f848:	4a28      	ldr	r2, [pc, #160]	; (801f8ec <TIM_Base_SetConfig+0x148>)
 801f84a:	4293      	cmp	r3, r2
 801f84c:	d108      	bne.n	801f860 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f84e:	68fb      	ldr	r3, [r7, #12]
 801f850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801f854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f856:	683b      	ldr	r3, [r7, #0]
 801f858:	68db      	ldr	r3, [r3, #12]
 801f85a:	68fa      	ldr	r2, [r7, #12]
 801f85c:	4313      	orrs	r3, r2
 801f85e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f860:	68fb      	ldr	r3, [r7, #12]
 801f862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 801f866:	683b      	ldr	r3, [r7, #0]
 801f868:	695b      	ldr	r3, [r3, #20]
 801f86a:	4313      	orrs	r3, r2
 801f86c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f86e:	687b      	ldr	r3, [r7, #4]
 801f870:	68fa      	ldr	r2, [r7, #12]
 801f872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f874:	683b      	ldr	r3, [r7, #0]
 801f876:	689a      	ldr	r2, [r3, #8]
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f87c:	683b      	ldr	r3, [r7, #0]
 801f87e:	681a      	ldr	r2, [r3, #0]
 801f880:	687b      	ldr	r3, [r7, #4]
 801f882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f884:	687b      	ldr	r3, [r7, #4]
 801f886:	4a10      	ldr	r2, [pc, #64]	; (801f8c8 <TIM_Base_SetConfig+0x124>)
 801f888:	4293      	cmp	r3, r2
 801f88a:	d00f      	beq.n	801f8ac <TIM_Base_SetConfig+0x108>
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	4a12      	ldr	r2, [pc, #72]	; (801f8d8 <TIM_Base_SetConfig+0x134>)
 801f890:	4293      	cmp	r3, r2
 801f892:	d00b      	beq.n	801f8ac <TIM_Base_SetConfig+0x108>
 801f894:	687b      	ldr	r3, [r7, #4]
 801f896:	4a11      	ldr	r2, [pc, #68]	; (801f8dc <TIM_Base_SetConfig+0x138>)
 801f898:	4293      	cmp	r3, r2
 801f89a:	d007      	beq.n	801f8ac <TIM_Base_SetConfig+0x108>
 801f89c:	687b      	ldr	r3, [r7, #4]
 801f89e:	4a10      	ldr	r2, [pc, #64]	; (801f8e0 <TIM_Base_SetConfig+0x13c>)
 801f8a0:	4293      	cmp	r3, r2
 801f8a2:	d003      	beq.n	801f8ac <TIM_Base_SetConfig+0x108>
 801f8a4:	687b      	ldr	r3, [r7, #4]
 801f8a6:	4a0f      	ldr	r2, [pc, #60]	; (801f8e4 <TIM_Base_SetConfig+0x140>)
 801f8a8:	4293      	cmp	r3, r2
 801f8aa:	d103      	bne.n	801f8b4 <TIM_Base_SetConfig+0x110>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f8ac:	683b      	ldr	r3, [r7, #0]
 801f8ae:	691a      	ldr	r2, [r3, #16]
 801f8b0:	687b      	ldr	r3, [r7, #4]
 801f8b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f8b4:	687b      	ldr	r3, [r7, #4]
 801f8b6:	2201      	movs	r2, #1
 801f8b8:	615a      	str	r2, [r3, #20]
}
 801f8ba:	bf00      	nop
 801f8bc:	3714      	adds	r7, #20
 801f8be:	46bd      	mov	sp, r7
 801f8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f8c4:	4770      	bx	lr
 801f8c6:	bf00      	nop
 801f8c8:	40010000 	.word	0x40010000
 801f8cc:	40000400 	.word	0x40000400
 801f8d0:	40000800 	.word	0x40000800
 801f8d4:	40000c00 	.word	0x40000c00
 801f8d8:	40010400 	.word	0x40010400
 801f8dc:	40014000 	.word	0x40014000
 801f8e0:	40014400 	.word	0x40014400
 801f8e4:	40014800 	.word	0x40014800
 801f8e8:	4000e000 	.word	0x4000e000
 801f8ec:	4000e400 	.word	0x4000e400

0801f8f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801f8f0:	b480      	push	{r7}
 801f8f2:	b087      	sub	sp, #28
 801f8f4:	af00      	add	r7, sp, #0
 801f8f6:	6078      	str	r0, [r7, #4]
 801f8f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	6a1b      	ldr	r3, [r3, #32]
 801f8fe:	f023 0201 	bic.w	r2, r3, #1
 801f902:	687b      	ldr	r3, [r7, #4]
 801f904:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801f906:	687b      	ldr	r3, [r7, #4]
 801f908:	6a1b      	ldr	r3, [r3, #32]
 801f90a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801f90c:	687b      	ldr	r3, [r7, #4]
 801f90e:	685b      	ldr	r3, [r3, #4]
 801f910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801f912:	687b      	ldr	r3, [r7, #4]
 801f914:	699b      	ldr	r3, [r3, #24]
 801f916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 801f918:	68fa      	ldr	r2, [r7, #12]
 801f91a:	4b37      	ldr	r3, [pc, #220]	; (801f9f8 <TIM_OC1_SetConfig+0x108>)
 801f91c:	4013      	ands	r3, r2
 801f91e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801f920:	68fb      	ldr	r3, [r7, #12]
 801f922:	f023 0303 	bic.w	r3, r3, #3
 801f926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801f928:	683b      	ldr	r3, [r7, #0]
 801f92a:	681b      	ldr	r3, [r3, #0]
 801f92c:	68fa      	ldr	r2, [r7, #12]
 801f92e:	4313      	orrs	r3, r2
 801f930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 801f932:	697b      	ldr	r3, [r7, #20]
 801f934:	f023 0302 	bic.w	r3, r3, #2
 801f938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 801f93a:	683b      	ldr	r3, [r7, #0]
 801f93c:	689b      	ldr	r3, [r3, #8]
 801f93e:	697a      	ldr	r2, [r7, #20]
 801f940:	4313      	orrs	r3, r2
 801f942:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 801f944:	687b      	ldr	r3, [r7, #4]
 801f946:	4a2d      	ldr	r2, [pc, #180]	; (801f9fc <TIM_OC1_SetConfig+0x10c>)
 801f948:	4293      	cmp	r3, r2
 801f94a:	d00f      	beq.n	801f96c <TIM_OC1_SetConfig+0x7c>
 801f94c:	687b      	ldr	r3, [r7, #4]
 801f94e:	4a2c      	ldr	r2, [pc, #176]	; (801fa00 <TIM_OC1_SetConfig+0x110>)
 801f950:	4293      	cmp	r3, r2
 801f952:	d00b      	beq.n	801f96c <TIM_OC1_SetConfig+0x7c>
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	4a2b      	ldr	r2, [pc, #172]	; (801fa04 <TIM_OC1_SetConfig+0x114>)
 801f958:	4293      	cmp	r3, r2
 801f95a:	d007      	beq.n	801f96c <TIM_OC1_SetConfig+0x7c>
 801f95c:	687b      	ldr	r3, [r7, #4]
 801f95e:	4a2a      	ldr	r2, [pc, #168]	; (801fa08 <TIM_OC1_SetConfig+0x118>)
 801f960:	4293      	cmp	r3, r2
 801f962:	d003      	beq.n	801f96c <TIM_OC1_SetConfig+0x7c>
 801f964:	687b      	ldr	r3, [r7, #4]
 801f966:	4a29      	ldr	r2, [pc, #164]	; (801fa0c <TIM_OC1_SetConfig+0x11c>)
 801f968:	4293      	cmp	r3, r2
 801f96a:	d10c      	bne.n	801f986 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 801f96c:	697b      	ldr	r3, [r7, #20]
 801f96e:	f023 0308 	bic.w	r3, r3, #8
 801f972:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 801f974:	683b      	ldr	r3, [r7, #0]
 801f976:	68db      	ldr	r3, [r3, #12]
 801f978:	697a      	ldr	r2, [r7, #20]
 801f97a:	4313      	orrs	r3, r2
 801f97c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 801f97e:	697b      	ldr	r3, [r7, #20]
 801f980:	f023 0304 	bic.w	r3, r3, #4
 801f984:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801f986:	687b      	ldr	r3, [r7, #4]
 801f988:	4a1c      	ldr	r2, [pc, #112]	; (801f9fc <TIM_OC1_SetConfig+0x10c>)
 801f98a:	4293      	cmp	r3, r2
 801f98c:	d00f      	beq.n	801f9ae <TIM_OC1_SetConfig+0xbe>
 801f98e:	687b      	ldr	r3, [r7, #4]
 801f990:	4a1b      	ldr	r2, [pc, #108]	; (801fa00 <TIM_OC1_SetConfig+0x110>)
 801f992:	4293      	cmp	r3, r2
 801f994:	d00b      	beq.n	801f9ae <TIM_OC1_SetConfig+0xbe>
 801f996:	687b      	ldr	r3, [r7, #4]
 801f998:	4a1a      	ldr	r2, [pc, #104]	; (801fa04 <TIM_OC1_SetConfig+0x114>)
 801f99a:	4293      	cmp	r3, r2
 801f99c:	d007      	beq.n	801f9ae <TIM_OC1_SetConfig+0xbe>
 801f99e:	687b      	ldr	r3, [r7, #4]
 801f9a0:	4a19      	ldr	r2, [pc, #100]	; (801fa08 <TIM_OC1_SetConfig+0x118>)
 801f9a2:	4293      	cmp	r3, r2
 801f9a4:	d003      	beq.n	801f9ae <TIM_OC1_SetConfig+0xbe>
 801f9a6:	687b      	ldr	r3, [r7, #4]
 801f9a8:	4a18      	ldr	r2, [pc, #96]	; (801fa0c <TIM_OC1_SetConfig+0x11c>)
 801f9aa:	4293      	cmp	r3, r2
 801f9ac:	d111      	bne.n	801f9d2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 801f9ae:	693b      	ldr	r3, [r7, #16]
 801f9b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801f9b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 801f9b6:	693b      	ldr	r3, [r7, #16]
 801f9b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801f9bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 801f9be:	683b      	ldr	r3, [r7, #0]
 801f9c0:	695b      	ldr	r3, [r3, #20]
 801f9c2:	693a      	ldr	r2, [r7, #16]
 801f9c4:	4313      	orrs	r3, r2
 801f9c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 801f9c8:	683b      	ldr	r3, [r7, #0]
 801f9ca:	699b      	ldr	r3, [r3, #24]
 801f9cc:	693a      	ldr	r2, [r7, #16]
 801f9ce:	4313      	orrs	r3, r2
 801f9d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801f9d2:	687b      	ldr	r3, [r7, #4]
 801f9d4:	693a      	ldr	r2, [r7, #16]
 801f9d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801f9d8:	687b      	ldr	r3, [r7, #4]
 801f9da:	68fa      	ldr	r2, [r7, #12]
 801f9dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 801f9de:	683b      	ldr	r3, [r7, #0]
 801f9e0:	685a      	ldr	r2, [r3, #4]
 801f9e2:	687b      	ldr	r3, [r7, #4]
 801f9e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801f9e6:	687b      	ldr	r3, [r7, #4]
 801f9e8:	697a      	ldr	r2, [r7, #20]
 801f9ea:	621a      	str	r2, [r3, #32]
}
 801f9ec:	bf00      	nop
 801f9ee:	371c      	adds	r7, #28
 801f9f0:	46bd      	mov	sp, r7
 801f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f9f6:	4770      	bx	lr
 801f9f8:	fffeff8f 	.word	0xfffeff8f
 801f9fc:	40010000 	.word	0x40010000
 801fa00:	40010400 	.word	0x40010400
 801fa04:	40014000 	.word	0x40014000
 801fa08:	40014400 	.word	0x40014400
 801fa0c:	40014800 	.word	0x40014800

0801fa10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fa10:	b480      	push	{r7}
 801fa12:	b087      	sub	sp, #28
 801fa14:	af00      	add	r7, sp, #0
 801fa16:	6078      	str	r0, [r7, #4]
 801fa18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801fa1a:	687b      	ldr	r3, [r7, #4]
 801fa1c:	6a1b      	ldr	r3, [r3, #32]
 801fa1e:	f023 0210 	bic.w	r2, r3, #16
 801fa22:	687b      	ldr	r3, [r7, #4]
 801fa24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fa26:	687b      	ldr	r3, [r7, #4]
 801fa28:	6a1b      	ldr	r3, [r3, #32]
 801fa2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fa2c:	687b      	ldr	r3, [r7, #4]
 801fa2e:	685b      	ldr	r3, [r3, #4]
 801fa30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 801fa32:	687b      	ldr	r3, [r7, #4]
 801fa34:	699b      	ldr	r3, [r3, #24]
 801fa36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 801fa38:	68fa      	ldr	r2, [r7, #12]
 801fa3a:	4b34      	ldr	r3, [pc, #208]	; (801fb0c <TIM_OC2_SetConfig+0xfc>)
 801fa3c:	4013      	ands	r3, r2
 801fa3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 801fa40:	68fb      	ldr	r3, [r7, #12]
 801fa42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fa46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fa48:	683b      	ldr	r3, [r7, #0]
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	021b      	lsls	r3, r3, #8
 801fa4e:	68fa      	ldr	r2, [r7, #12]
 801fa50:	4313      	orrs	r3, r2
 801fa52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801fa54:	697b      	ldr	r3, [r7, #20]
 801fa56:	f023 0320 	bic.w	r3, r3, #32
 801fa5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 801fa5c:	683b      	ldr	r3, [r7, #0]
 801fa5e:	689b      	ldr	r3, [r3, #8]
 801fa60:	011b      	lsls	r3, r3, #4
 801fa62:	697a      	ldr	r2, [r7, #20]
 801fa64:	4313      	orrs	r3, r2
 801fa66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 801fa68:	687b      	ldr	r3, [r7, #4]
 801fa6a:	4a29      	ldr	r2, [pc, #164]	; (801fb10 <TIM_OC2_SetConfig+0x100>)
 801fa6c:	4293      	cmp	r3, r2
 801fa6e:	d003      	beq.n	801fa78 <TIM_OC2_SetConfig+0x68>
 801fa70:	687b      	ldr	r3, [r7, #4]
 801fa72:	4a28      	ldr	r2, [pc, #160]	; (801fb14 <TIM_OC2_SetConfig+0x104>)
 801fa74:	4293      	cmp	r3, r2
 801fa76:	d10d      	bne.n	801fa94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 801fa78:	697b      	ldr	r3, [r7, #20]
 801fa7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801fa7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 801fa80:	683b      	ldr	r3, [r7, #0]
 801fa82:	68db      	ldr	r3, [r3, #12]
 801fa84:	011b      	lsls	r3, r3, #4
 801fa86:	697a      	ldr	r2, [r7, #20]
 801fa88:	4313      	orrs	r3, r2
 801fa8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 801fa8c:	697b      	ldr	r3, [r7, #20]
 801fa8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801fa92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fa94:	687b      	ldr	r3, [r7, #4]
 801fa96:	4a1e      	ldr	r2, [pc, #120]	; (801fb10 <TIM_OC2_SetConfig+0x100>)
 801fa98:	4293      	cmp	r3, r2
 801fa9a:	d00f      	beq.n	801fabc <TIM_OC2_SetConfig+0xac>
 801fa9c:	687b      	ldr	r3, [r7, #4]
 801fa9e:	4a1d      	ldr	r2, [pc, #116]	; (801fb14 <TIM_OC2_SetConfig+0x104>)
 801faa0:	4293      	cmp	r3, r2
 801faa2:	d00b      	beq.n	801fabc <TIM_OC2_SetConfig+0xac>
 801faa4:	687b      	ldr	r3, [r7, #4]
 801faa6:	4a1c      	ldr	r2, [pc, #112]	; (801fb18 <TIM_OC2_SetConfig+0x108>)
 801faa8:	4293      	cmp	r3, r2
 801faaa:	d007      	beq.n	801fabc <TIM_OC2_SetConfig+0xac>
 801faac:	687b      	ldr	r3, [r7, #4]
 801faae:	4a1b      	ldr	r2, [pc, #108]	; (801fb1c <TIM_OC2_SetConfig+0x10c>)
 801fab0:	4293      	cmp	r3, r2
 801fab2:	d003      	beq.n	801fabc <TIM_OC2_SetConfig+0xac>
 801fab4:	687b      	ldr	r3, [r7, #4]
 801fab6:	4a1a      	ldr	r2, [pc, #104]	; (801fb20 <TIM_OC2_SetConfig+0x110>)
 801fab8:	4293      	cmp	r3, r2
 801faba:	d113      	bne.n	801fae4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 801fabc:	693b      	ldr	r3, [r7, #16]
 801fabe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fac2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 801fac4:	693b      	ldr	r3, [r7, #16]
 801fac6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801faca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801facc:	683b      	ldr	r3, [r7, #0]
 801face:	695b      	ldr	r3, [r3, #20]
 801fad0:	009b      	lsls	r3, r3, #2
 801fad2:	693a      	ldr	r2, [r7, #16]
 801fad4:	4313      	orrs	r3, r2
 801fad6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801fad8:	683b      	ldr	r3, [r7, #0]
 801fada:	699b      	ldr	r3, [r3, #24]
 801fadc:	009b      	lsls	r3, r3, #2
 801fade:	693a      	ldr	r2, [r7, #16]
 801fae0:	4313      	orrs	r3, r2
 801fae2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fae4:	687b      	ldr	r3, [r7, #4]
 801fae6:	693a      	ldr	r2, [r7, #16]
 801fae8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 801faea:	687b      	ldr	r3, [r7, #4]
 801faec:	68fa      	ldr	r2, [r7, #12]
 801faee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801faf0:	683b      	ldr	r3, [r7, #0]
 801faf2:	685a      	ldr	r2, [r3, #4]
 801faf4:	687b      	ldr	r3, [r7, #4]
 801faf6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801faf8:	687b      	ldr	r3, [r7, #4]
 801fafa:	697a      	ldr	r2, [r7, #20]
 801fafc:	621a      	str	r2, [r3, #32]
}
 801fafe:	bf00      	nop
 801fb00:	371c      	adds	r7, #28
 801fb02:	46bd      	mov	sp, r7
 801fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fb08:	4770      	bx	lr
 801fb0a:	bf00      	nop
 801fb0c:	feff8fff 	.word	0xfeff8fff
 801fb10:	40010000 	.word	0x40010000
 801fb14:	40010400 	.word	0x40010400
 801fb18:	40014000 	.word	0x40014000
 801fb1c:	40014400 	.word	0x40014400
 801fb20:	40014800 	.word	0x40014800

0801fb24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fb24:	b480      	push	{r7}
 801fb26:	b087      	sub	sp, #28
 801fb28:	af00      	add	r7, sp, #0
 801fb2a:	6078      	str	r0, [r7, #4]
 801fb2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 801fb2e:	687b      	ldr	r3, [r7, #4]
 801fb30:	6a1b      	ldr	r3, [r3, #32]
 801fb32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 801fb36:	687b      	ldr	r3, [r7, #4]
 801fb38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fb3a:	687b      	ldr	r3, [r7, #4]
 801fb3c:	6a1b      	ldr	r3, [r3, #32]
 801fb3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fb40:	687b      	ldr	r3, [r7, #4]
 801fb42:	685b      	ldr	r3, [r3, #4]
 801fb44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fb46:	687b      	ldr	r3, [r7, #4]
 801fb48:	69db      	ldr	r3, [r3, #28]
 801fb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 801fb4c:	68fa      	ldr	r2, [r7, #12]
 801fb4e:	4b33      	ldr	r3, [pc, #204]	; (801fc1c <TIM_OC3_SetConfig+0xf8>)
 801fb50:	4013      	ands	r3, r2
 801fb52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 801fb54:	68fb      	ldr	r3, [r7, #12]
 801fb56:	f023 0303 	bic.w	r3, r3, #3
 801fb5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fb5c:	683b      	ldr	r3, [r7, #0]
 801fb5e:	681b      	ldr	r3, [r3, #0]
 801fb60:	68fa      	ldr	r2, [r7, #12]
 801fb62:	4313      	orrs	r3, r2
 801fb64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801fb66:	697b      	ldr	r3, [r7, #20]
 801fb68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 801fb6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 801fb6e:	683b      	ldr	r3, [r7, #0]
 801fb70:	689b      	ldr	r3, [r3, #8]
 801fb72:	021b      	lsls	r3, r3, #8
 801fb74:	697a      	ldr	r2, [r7, #20]
 801fb76:	4313      	orrs	r3, r2
 801fb78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	4a28      	ldr	r2, [pc, #160]	; (801fc20 <TIM_OC3_SetConfig+0xfc>)
 801fb7e:	4293      	cmp	r3, r2
 801fb80:	d003      	beq.n	801fb8a <TIM_OC3_SetConfig+0x66>
 801fb82:	687b      	ldr	r3, [r7, #4]
 801fb84:	4a27      	ldr	r2, [pc, #156]	; (801fc24 <TIM_OC3_SetConfig+0x100>)
 801fb86:	4293      	cmp	r3, r2
 801fb88:	d10d      	bne.n	801fba6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 801fb8a:	697b      	ldr	r3, [r7, #20]
 801fb8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801fb90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 801fb92:	683b      	ldr	r3, [r7, #0]
 801fb94:	68db      	ldr	r3, [r3, #12]
 801fb96:	021b      	lsls	r3, r3, #8
 801fb98:	697a      	ldr	r2, [r7, #20]
 801fb9a:	4313      	orrs	r3, r2
 801fb9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 801fb9e:	697b      	ldr	r3, [r7, #20]
 801fba0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801fba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	4a1d      	ldr	r2, [pc, #116]	; (801fc20 <TIM_OC3_SetConfig+0xfc>)
 801fbaa:	4293      	cmp	r3, r2
 801fbac:	d00f      	beq.n	801fbce <TIM_OC3_SetConfig+0xaa>
 801fbae:	687b      	ldr	r3, [r7, #4]
 801fbb0:	4a1c      	ldr	r2, [pc, #112]	; (801fc24 <TIM_OC3_SetConfig+0x100>)
 801fbb2:	4293      	cmp	r3, r2
 801fbb4:	d00b      	beq.n	801fbce <TIM_OC3_SetConfig+0xaa>
 801fbb6:	687b      	ldr	r3, [r7, #4]
 801fbb8:	4a1b      	ldr	r2, [pc, #108]	; (801fc28 <TIM_OC3_SetConfig+0x104>)
 801fbba:	4293      	cmp	r3, r2
 801fbbc:	d007      	beq.n	801fbce <TIM_OC3_SetConfig+0xaa>
 801fbbe:	687b      	ldr	r3, [r7, #4]
 801fbc0:	4a1a      	ldr	r2, [pc, #104]	; (801fc2c <TIM_OC3_SetConfig+0x108>)
 801fbc2:	4293      	cmp	r3, r2
 801fbc4:	d003      	beq.n	801fbce <TIM_OC3_SetConfig+0xaa>
 801fbc6:	687b      	ldr	r3, [r7, #4]
 801fbc8:	4a19      	ldr	r2, [pc, #100]	; (801fc30 <TIM_OC3_SetConfig+0x10c>)
 801fbca:	4293      	cmp	r3, r2
 801fbcc:	d113      	bne.n	801fbf6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 801fbce:	693b      	ldr	r3, [r7, #16]
 801fbd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801fbd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 801fbd6:	693b      	ldr	r3, [r7, #16]
 801fbd8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fbdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 801fbde:	683b      	ldr	r3, [r7, #0]
 801fbe0:	695b      	ldr	r3, [r3, #20]
 801fbe2:	011b      	lsls	r3, r3, #4
 801fbe4:	693a      	ldr	r2, [r7, #16]
 801fbe6:	4313      	orrs	r3, r2
 801fbe8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 801fbea:	683b      	ldr	r3, [r7, #0]
 801fbec:	699b      	ldr	r3, [r3, #24]
 801fbee:	011b      	lsls	r3, r3, #4
 801fbf0:	693a      	ldr	r2, [r7, #16]
 801fbf2:	4313      	orrs	r3, r2
 801fbf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	693a      	ldr	r2, [r7, #16]
 801fbfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fbfc:	687b      	ldr	r3, [r7, #4]
 801fbfe:	68fa      	ldr	r2, [r7, #12]
 801fc00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 801fc02:	683b      	ldr	r3, [r7, #0]
 801fc04:	685a      	ldr	r2, [r3, #4]
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fc0a:	687b      	ldr	r3, [r7, #4]
 801fc0c:	697a      	ldr	r2, [r7, #20]
 801fc0e:	621a      	str	r2, [r3, #32]
}
 801fc10:	bf00      	nop
 801fc12:	371c      	adds	r7, #28
 801fc14:	46bd      	mov	sp, r7
 801fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fc1a:	4770      	bx	lr
 801fc1c:	fffeff8f 	.word	0xfffeff8f
 801fc20:	40010000 	.word	0x40010000
 801fc24:	40010400 	.word	0x40010400
 801fc28:	40014000 	.word	0x40014000
 801fc2c:	40014400 	.word	0x40014400
 801fc30:	40014800 	.word	0x40014800

0801fc34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801fc34:	b480      	push	{r7}
 801fc36:	b087      	sub	sp, #28
 801fc38:	af00      	add	r7, sp, #0
 801fc3a:	6078      	str	r0, [r7, #4]
 801fc3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 801fc3e:	687b      	ldr	r3, [r7, #4]
 801fc40:	6a1b      	ldr	r3, [r3, #32]
 801fc42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 801fc46:	687b      	ldr	r3, [r7, #4]
 801fc48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fc4a:	687b      	ldr	r3, [r7, #4]
 801fc4c:	6a1b      	ldr	r3, [r3, #32]
 801fc4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fc50:	687b      	ldr	r3, [r7, #4]
 801fc52:	685b      	ldr	r3, [r3, #4]
 801fc54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801fc56:	687b      	ldr	r3, [r7, #4]
 801fc58:	69db      	ldr	r3, [r3, #28]
 801fc5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 801fc5c:	68fa      	ldr	r2, [r7, #12]
 801fc5e:	4b24      	ldr	r3, [pc, #144]	; (801fcf0 <TIM_OC4_SetConfig+0xbc>)
 801fc60:	4013      	ands	r3, r2
 801fc62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 801fc64:	68fb      	ldr	r3, [r7, #12]
 801fc66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801fc6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fc6c:	683b      	ldr	r3, [r7, #0]
 801fc6e:	681b      	ldr	r3, [r3, #0]
 801fc70:	021b      	lsls	r3, r3, #8
 801fc72:	68fa      	ldr	r2, [r7, #12]
 801fc74:	4313      	orrs	r3, r2
 801fc76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801fc78:	693b      	ldr	r3, [r7, #16]
 801fc7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 801fc7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 801fc80:	683b      	ldr	r3, [r7, #0]
 801fc82:	689b      	ldr	r3, [r3, #8]
 801fc84:	031b      	lsls	r3, r3, #12
 801fc86:	693a      	ldr	r2, [r7, #16]
 801fc88:	4313      	orrs	r3, r2
 801fc8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fc8c:	687b      	ldr	r3, [r7, #4]
 801fc8e:	4a19      	ldr	r2, [pc, #100]	; (801fcf4 <TIM_OC4_SetConfig+0xc0>)
 801fc90:	4293      	cmp	r3, r2
 801fc92:	d00f      	beq.n	801fcb4 <TIM_OC4_SetConfig+0x80>
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	4a18      	ldr	r2, [pc, #96]	; (801fcf8 <TIM_OC4_SetConfig+0xc4>)
 801fc98:	4293      	cmp	r3, r2
 801fc9a:	d00b      	beq.n	801fcb4 <TIM_OC4_SetConfig+0x80>
 801fc9c:	687b      	ldr	r3, [r7, #4]
 801fc9e:	4a17      	ldr	r2, [pc, #92]	; (801fcfc <TIM_OC4_SetConfig+0xc8>)
 801fca0:	4293      	cmp	r3, r2
 801fca2:	d007      	beq.n	801fcb4 <TIM_OC4_SetConfig+0x80>
 801fca4:	687b      	ldr	r3, [r7, #4]
 801fca6:	4a16      	ldr	r2, [pc, #88]	; (801fd00 <TIM_OC4_SetConfig+0xcc>)
 801fca8:	4293      	cmp	r3, r2
 801fcaa:	d003      	beq.n	801fcb4 <TIM_OC4_SetConfig+0x80>
 801fcac:	687b      	ldr	r3, [r7, #4]
 801fcae:	4a15      	ldr	r2, [pc, #84]	; (801fd04 <TIM_OC4_SetConfig+0xd0>)
 801fcb0:	4293      	cmp	r3, r2
 801fcb2:	d109      	bne.n	801fcc8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 801fcb4:	697b      	ldr	r3, [r7, #20]
 801fcb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 801fcba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 801fcbc:	683b      	ldr	r3, [r7, #0]
 801fcbe:	695b      	ldr	r3, [r3, #20]
 801fcc0:	019b      	lsls	r3, r3, #6
 801fcc2:	697a      	ldr	r2, [r7, #20]
 801fcc4:	4313      	orrs	r3, r2
 801fcc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fcc8:	687b      	ldr	r3, [r7, #4]
 801fcca:	697a      	ldr	r2, [r7, #20]
 801fccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 801fcce:	687b      	ldr	r3, [r7, #4]
 801fcd0:	68fa      	ldr	r2, [r7, #12]
 801fcd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801fcd4:	683b      	ldr	r3, [r7, #0]
 801fcd6:	685a      	ldr	r2, [r3, #4]
 801fcd8:	687b      	ldr	r3, [r7, #4]
 801fcda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fcdc:	687b      	ldr	r3, [r7, #4]
 801fcde:	693a      	ldr	r2, [r7, #16]
 801fce0:	621a      	str	r2, [r3, #32]
}
 801fce2:	bf00      	nop
 801fce4:	371c      	adds	r7, #28
 801fce6:	46bd      	mov	sp, r7
 801fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fcec:	4770      	bx	lr
 801fcee:	bf00      	nop
 801fcf0:	feff8fff 	.word	0xfeff8fff
 801fcf4:	40010000 	.word	0x40010000
 801fcf8:	40010400 	.word	0x40010400
 801fcfc:	40014000 	.word	0x40014000
 801fd00:	40014400 	.word	0x40014400
 801fd04:	40014800 	.word	0x40014800

0801fd08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801fd08:	b480      	push	{r7}
 801fd0a:	b087      	sub	sp, #28
 801fd0c:	af00      	add	r7, sp, #0
 801fd0e:	6078      	str	r0, [r7, #4]
 801fd10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 801fd12:	687b      	ldr	r3, [r7, #4]
 801fd14:	6a1b      	ldr	r3, [r3, #32]
 801fd16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fd1e:	687b      	ldr	r3, [r7, #4]
 801fd20:	6a1b      	ldr	r3, [r3, #32]
 801fd22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fd24:	687b      	ldr	r3, [r7, #4]
 801fd26:	685b      	ldr	r3, [r3, #4]
 801fd28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fd2a:	687b      	ldr	r3, [r7, #4]
 801fd2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fd2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 801fd30:	68fa      	ldr	r2, [r7, #12]
 801fd32:	4b21      	ldr	r3, [pc, #132]	; (801fdb8 <TIM_OC5_SetConfig+0xb0>)
 801fd34:	4013      	ands	r3, r2
 801fd36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 801fd38:	683b      	ldr	r3, [r7, #0]
 801fd3a:	681b      	ldr	r3, [r3, #0]
 801fd3c:	68fa      	ldr	r2, [r7, #12]
 801fd3e:	4313      	orrs	r3, r2
 801fd40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 801fd42:	693b      	ldr	r3, [r7, #16]
 801fd44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 801fd48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 801fd4a:	683b      	ldr	r3, [r7, #0]
 801fd4c:	689b      	ldr	r3, [r3, #8]
 801fd4e:	041b      	lsls	r3, r3, #16
 801fd50:	693a      	ldr	r2, [r7, #16]
 801fd52:	4313      	orrs	r3, r2
 801fd54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	4a18      	ldr	r2, [pc, #96]	; (801fdbc <TIM_OC5_SetConfig+0xb4>)
 801fd5a:	4293      	cmp	r3, r2
 801fd5c:	d00f      	beq.n	801fd7e <TIM_OC5_SetConfig+0x76>
 801fd5e:	687b      	ldr	r3, [r7, #4]
 801fd60:	4a17      	ldr	r2, [pc, #92]	; (801fdc0 <TIM_OC5_SetConfig+0xb8>)
 801fd62:	4293      	cmp	r3, r2
 801fd64:	d00b      	beq.n	801fd7e <TIM_OC5_SetConfig+0x76>
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	4a16      	ldr	r2, [pc, #88]	; (801fdc4 <TIM_OC5_SetConfig+0xbc>)
 801fd6a:	4293      	cmp	r3, r2
 801fd6c:	d007      	beq.n	801fd7e <TIM_OC5_SetConfig+0x76>
 801fd6e:	687b      	ldr	r3, [r7, #4]
 801fd70:	4a15      	ldr	r2, [pc, #84]	; (801fdc8 <TIM_OC5_SetConfig+0xc0>)
 801fd72:	4293      	cmp	r3, r2
 801fd74:	d003      	beq.n	801fd7e <TIM_OC5_SetConfig+0x76>
 801fd76:	687b      	ldr	r3, [r7, #4]
 801fd78:	4a14      	ldr	r2, [pc, #80]	; (801fdcc <TIM_OC5_SetConfig+0xc4>)
 801fd7a:	4293      	cmp	r3, r2
 801fd7c:	d109      	bne.n	801fd92 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 801fd7e:	697b      	ldr	r3, [r7, #20]
 801fd80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 801fd84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 801fd86:	683b      	ldr	r3, [r7, #0]
 801fd88:	695b      	ldr	r3, [r3, #20]
 801fd8a:	021b      	lsls	r3, r3, #8
 801fd8c:	697a      	ldr	r2, [r7, #20]
 801fd8e:	4313      	orrs	r3, r2
 801fd90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	697a      	ldr	r2, [r7, #20]
 801fd96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fd98:	687b      	ldr	r3, [r7, #4]
 801fd9a:	68fa      	ldr	r2, [r7, #12]
 801fd9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 801fd9e:	683b      	ldr	r3, [r7, #0]
 801fda0:	685a      	ldr	r2, [r3, #4]
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fda6:	687b      	ldr	r3, [r7, #4]
 801fda8:	693a      	ldr	r2, [r7, #16]
 801fdaa:	621a      	str	r2, [r3, #32]
}
 801fdac:	bf00      	nop
 801fdae:	371c      	adds	r7, #28
 801fdb0:	46bd      	mov	sp, r7
 801fdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fdb6:	4770      	bx	lr
 801fdb8:	fffeff8f 	.word	0xfffeff8f
 801fdbc:	40010000 	.word	0x40010000
 801fdc0:	40010400 	.word	0x40010400
 801fdc4:	40014000 	.word	0x40014000
 801fdc8:	40014400 	.word	0x40014400
 801fdcc:	40014800 	.word	0x40014800

0801fdd0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801fdd0:	b480      	push	{r7}
 801fdd2:	b087      	sub	sp, #28
 801fdd4:	af00      	add	r7, sp, #0
 801fdd6:	6078      	str	r0, [r7, #4]
 801fdd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	6a1b      	ldr	r3, [r3, #32]
 801fdde:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801fde6:	687b      	ldr	r3, [r7, #4]
 801fde8:	6a1b      	ldr	r3, [r3, #32]
 801fdea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	685b      	ldr	r3, [r3, #4]
 801fdf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801fdf2:	687b      	ldr	r3, [r7, #4]
 801fdf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801fdf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 801fdf8:	68fa      	ldr	r2, [r7, #12]
 801fdfa:	4b22      	ldr	r3, [pc, #136]	; (801fe84 <TIM_OC6_SetConfig+0xb4>)
 801fdfc:	4013      	ands	r3, r2
 801fdfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801fe00:	683b      	ldr	r3, [r7, #0]
 801fe02:	681b      	ldr	r3, [r3, #0]
 801fe04:	021b      	lsls	r3, r3, #8
 801fe06:	68fa      	ldr	r2, [r7, #12]
 801fe08:	4313      	orrs	r3, r2
 801fe0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 801fe0c:	693b      	ldr	r3, [r7, #16]
 801fe0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801fe12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 801fe14:	683b      	ldr	r3, [r7, #0]
 801fe16:	689b      	ldr	r3, [r3, #8]
 801fe18:	051b      	lsls	r3, r3, #20
 801fe1a:	693a      	ldr	r2, [r7, #16]
 801fe1c:	4313      	orrs	r3, r2
 801fe1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801fe20:	687b      	ldr	r3, [r7, #4]
 801fe22:	4a19      	ldr	r2, [pc, #100]	; (801fe88 <TIM_OC6_SetConfig+0xb8>)
 801fe24:	4293      	cmp	r3, r2
 801fe26:	d00f      	beq.n	801fe48 <TIM_OC6_SetConfig+0x78>
 801fe28:	687b      	ldr	r3, [r7, #4]
 801fe2a:	4a18      	ldr	r2, [pc, #96]	; (801fe8c <TIM_OC6_SetConfig+0xbc>)
 801fe2c:	4293      	cmp	r3, r2
 801fe2e:	d00b      	beq.n	801fe48 <TIM_OC6_SetConfig+0x78>
 801fe30:	687b      	ldr	r3, [r7, #4]
 801fe32:	4a17      	ldr	r2, [pc, #92]	; (801fe90 <TIM_OC6_SetConfig+0xc0>)
 801fe34:	4293      	cmp	r3, r2
 801fe36:	d007      	beq.n	801fe48 <TIM_OC6_SetConfig+0x78>
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	4a16      	ldr	r2, [pc, #88]	; (801fe94 <TIM_OC6_SetConfig+0xc4>)
 801fe3c:	4293      	cmp	r3, r2
 801fe3e:	d003      	beq.n	801fe48 <TIM_OC6_SetConfig+0x78>
 801fe40:	687b      	ldr	r3, [r7, #4]
 801fe42:	4a15      	ldr	r2, [pc, #84]	; (801fe98 <TIM_OC6_SetConfig+0xc8>)
 801fe44:	4293      	cmp	r3, r2
 801fe46:	d109      	bne.n	801fe5c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 801fe48:	697b      	ldr	r3, [r7, #20]
 801fe4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801fe4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 801fe50:	683b      	ldr	r3, [r7, #0]
 801fe52:	695b      	ldr	r3, [r3, #20]
 801fe54:	029b      	lsls	r3, r3, #10
 801fe56:	697a      	ldr	r2, [r7, #20]
 801fe58:	4313      	orrs	r3, r2
 801fe5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801fe5c:	687b      	ldr	r3, [r7, #4]
 801fe5e:	697a      	ldr	r2, [r7, #20]
 801fe60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 801fe62:	687b      	ldr	r3, [r7, #4]
 801fe64:	68fa      	ldr	r2, [r7, #12]
 801fe66:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 801fe68:	683b      	ldr	r3, [r7, #0]
 801fe6a:	685a      	ldr	r2, [r3, #4]
 801fe6c:	687b      	ldr	r3, [r7, #4]
 801fe6e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 801fe70:	687b      	ldr	r3, [r7, #4]
 801fe72:	693a      	ldr	r2, [r7, #16]
 801fe74:	621a      	str	r2, [r3, #32]
}
 801fe76:	bf00      	nop
 801fe78:	371c      	adds	r7, #28
 801fe7a:	46bd      	mov	sp, r7
 801fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe80:	4770      	bx	lr
 801fe82:	bf00      	nop
 801fe84:	feff8fff 	.word	0xfeff8fff
 801fe88:	40010000 	.word	0x40010000
 801fe8c:	40010400 	.word	0x40010400
 801fe90:	40014000 	.word	0x40014000
 801fe94:	40014400 	.word	0x40014400
 801fe98:	40014800 	.word	0x40014800

0801fe9c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 801fe9c:	b480      	push	{r7}
 801fe9e:	b087      	sub	sp, #28
 801fea0:	af00      	add	r7, sp, #0
 801fea2:	60f8      	str	r0, [r7, #12]
 801fea4:	60b9      	str	r1, [r7, #8]
 801fea6:	607a      	str	r2, [r7, #4]
 801fea8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801feaa:	68fb      	ldr	r3, [r7, #12]
 801feac:	6a1b      	ldr	r3, [r3, #32]
 801feae:	f023 0201 	bic.w	r2, r3, #1
 801feb2:	68fb      	ldr	r3, [r7, #12]
 801feb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801feb6:	68fb      	ldr	r3, [r7, #12]
 801feb8:	699b      	ldr	r3, [r3, #24]
 801feba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 801febc:	68fb      	ldr	r3, [r7, #12]
 801febe:	6a1b      	ldr	r3, [r3, #32]
 801fec0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 801fec2:	68fb      	ldr	r3, [r7, #12]
 801fec4:	4a2c      	ldr	r2, [pc, #176]	; (801ff78 <TIM_TI1_SetConfig+0xdc>)
 801fec6:	4293      	cmp	r3, r2
 801fec8:	d023      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801feca:	68fb      	ldr	r3, [r7, #12]
 801fecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801fed0:	d01f      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801fed2:	68fb      	ldr	r3, [r7, #12]
 801fed4:	4a29      	ldr	r2, [pc, #164]	; (801ff7c <TIM_TI1_SetConfig+0xe0>)
 801fed6:	4293      	cmp	r3, r2
 801fed8:	d01b      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801feda:	68fb      	ldr	r3, [r7, #12]
 801fedc:	4a28      	ldr	r2, [pc, #160]	; (801ff80 <TIM_TI1_SetConfig+0xe4>)
 801fede:	4293      	cmp	r3, r2
 801fee0:	d017      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801fee2:	68fb      	ldr	r3, [r7, #12]
 801fee4:	4a27      	ldr	r2, [pc, #156]	; (801ff84 <TIM_TI1_SetConfig+0xe8>)
 801fee6:	4293      	cmp	r3, r2
 801fee8:	d013      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801feea:	68fb      	ldr	r3, [r7, #12]
 801feec:	4a26      	ldr	r2, [pc, #152]	; (801ff88 <TIM_TI1_SetConfig+0xec>)
 801feee:	4293      	cmp	r3, r2
 801fef0:	d00f      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801fef2:	68fb      	ldr	r3, [r7, #12]
 801fef4:	4a25      	ldr	r2, [pc, #148]	; (801ff8c <TIM_TI1_SetConfig+0xf0>)
 801fef6:	4293      	cmp	r3, r2
 801fef8:	d00b      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801fefa:	68fb      	ldr	r3, [r7, #12]
 801fefc:	4a24      	ldr	r2, [pc, #144]	; (801ff90 <TIM_TI1_SetConfig+0xf4>)
 801fefe:	4293      	cmp	r3, r2
 801ff00:	d007      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801ff02:	68fb      	ldr	r3, [r7, #12]
 801ff04:	4a23      	ldr	r2, [pc, #140]	; (801ff94 <TIM_TI1_SetConfig+0xf8>)
 801ff06:	4293      	cmp	r3, r2
 801ff08:	d003      	beq.n	801ff12 <TIM_TI1_SetConfig+0x76>
 801ff0a:	68fb      	ldr	r3, [r7, #12]
 801ff0c:	4a22      	ldr	r2, [pc, #136]	; (801ff98 <TIM_TI1_SetConfig+0xfc>)
 801ff0e:	4293      	cmp	r3, r2
 801ff10:	d101      	bne.n	801ff16 <TIM_TI1_SetConfig+0x7a>
 801ff12:	2301      	movs	r3, #1
 801ff14:	e000      	b.n	801ff18 <TIM_TI1_SetConfig+0x7c>
 801ff16:	2300      	movs	r3, #0
 801ff18:	2b00      	cmp	r3, #0
 801ff1a:	d008      	beq.n	801ff2e <TIM_TI1_SetConfig+0x92>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 801ff1c:	697b      	ldr	r3, [r7, #20]
 801ff1e:	f023 0303 	bic.w	r3, r3, #3
 801ff22:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 801ff24:	697a      	ldr	r2, [r7, #20]
 801ff26:	687b      	ldr	r3, [r7, #4]
 801ff28:	4313      	orrs	r3, r2
 801ff2a:	617b      	str	r3, [r7, #20]
 801ff2c:	e003      	b.n	801ff36 <TIM_TI1_SetConfig+0x9a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 801ff2e:	697b      	ldr	r3, [r7, #20]
 801ff30:	f043 0301 	orr.w	r3, r3, #1
 801ff34:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ff36:	697b      	ldr	r3, [r7, #20]
 801ff38:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ff3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 801ff3e:	683b      	ldr	r3, [r7, #0]
 801ff40:	011b      	lsls	r3, r3, #4
 801ff42:	b2db      	uxtb	r3, r3
 801ff44:	697a      	ldr	r2, [r7, #20]
 801ff46:	4313      	orrs	r3, r2
 801ff48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ff4a:	693b      	ldr	r3, [r7, #16]
 801ff4c:	f023 030a 	bic.w	r3, r3, #10
 801ff50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 801ff52:	68bb      	ldr	r3, [r7, #8]
 801ff54:	f003 030a 	and.w	r3, r3, #10
 801ff58:	693a      	ldr	r2, [r7, #16]
 801ff5a:	4313      	orrs	r3, r2
 801ff5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ff5e:	68fb      	ldr	r3, [r7, #12]
 801ff60:	697a      	ldr	r2, [r7, #20]
 801ff62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ff64:	68fb      	ldr	r3, [r7, #12]
 801ff66:	693a      	ldr	r2, [r7, #16]
 801ff68:	621a      	str	r2, [r3, #32]
}
 801ff6a:	bf00      	nop
 801ff6c:	371c      	adds	r7, #28
 801ff6e:	46bd      	mov	sp, r7
 801ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ff74:	4770      	bx	lr
 801ff76:	bf00      	nop
 801ff78:	40010000 	.word	0x40010000
 801ff7c:	40000400 	.word	0x40000400
 801ff80:	40000800 	.word	0x40000800
 801ff84:	40000c00 	.word	0x40000c00
 801ff88:	40010400 	.word	0x40010400
 801ff8c:	40001800 	.word	0x40001800
 801ff90:	40014000 	.word	0x40014000
 801ff94:	4000e000 	.word	0x4000e000
 801ff98:	4000e400 	.word	0x4000e400

0801ff9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ff9c:	b480      	push	{r7}
 801ff9e:	b087      	sub	sp, #28
 801ffa0:	af00      	add	r7, sp, #0
 801ffa2:	60f8      	str	r0, [r7, #12]
 801ffa4:	60b9      	str	r1, [r7, #8]
 801ffa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ffa8:	68fb      	ldr	r3, [r7, #12]
 801ffaa:	6a1b      	ldr	r3, [r3, #32]
 801ffac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ffae:	68fb      	ldr	r3, [r7, #12]
 801ffb0:	6a1b      	ldr	r3, [r3, #32]
 801ffb2:	f023 0201 	bic.w	r2, r3, #1
 801ffb6:	68fb      	ldr	r3, [r7, #12]
 801ffb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ffba:	68fb      	ldr	r3, [r7, #12]
 801ffbc:	699b      	ldr	r3, [r3, #24]
 801ffbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ffc0:	693b      	ldr	r3, [r7, #16]
 801ffc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 801ffc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ffc8:	687b      	ldr	r3, [r7, #4]
 801ffca:	011b      	lsls	r3, r3, #4
 801ffcc:	693a      	ldr	r2, [r7, #16]
 801ffce:	4313      	orrs	r3, r2
 801ffd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ffd2:	697b      	ldr	r3, [r7, #20]
 801ffd4:	f023 030a 	bic.w	r3, r3, #10
 801ffd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801ffda:	697a      	ldr	r2, [r7, #20]
 801ffdc:	68bb      	ldr	r3, [r7, #8]
 801ffde:	4313      	orrs	r3, r2
 801ffe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ffe2:	68fb      	ldr	r3, [r7, #12]
 801ffe4:	693a      	ldr	r2, [r7, #16]
 801ffe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ffe8:	68fb      	ldr	r3, [r7, #12]
 801ffea:	697a      	ldr	r2, [r7, #20]
 801ffec:	621a      	str	r2, [r3, #32]
}
 801ffee:	bf00      	nop
 801fff0:	371c      	adds	r7, #28
 801fff2:	46bd      	mov	sp, r7
 801fff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fff8:	4770      	bx	lr

0801fffa <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 801fffa:	b480      	push	{r7}
 801fffc:	b087      	sub	sp, #28
 801fffe:	af00      	add	r7, sp, #0
 8020000:	60f8      	str	r0, [r7, #12]
 8020002:	60b9      	str	r1, [r7, #8]
 8020004:	607a      	str	r2, [r7, #4]
 8020006:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020008:	68fb      	ldr	r3, [r7, #12]
 802000a:	6a1b      	ldr	r3, [r3, #32]
 802000c:	f023 0210 	bic.w	r2, r3, #16
 8020010:	68fb      	ldr	r3, [r7, #12]
 8020012:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8020014:	68fb      	ldr	r3, [r7, #12]
 8020016:	699b      	ldr	r3, [r3, #24]
 8020018:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802001a:	68fb      	ldr	r3, [r7, #12]
 802001c:	6a1b      	ldr	r3, [r3, #32]
 802001e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8020020:	697b      	ldr	r3, [r7, #20]
 8020022:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020026:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8020028:	687b      	ldr	r3, [r7, #4]
 802002a:	021b      	lsls	r3, r3, #8
 802002c:	697a      	ldr	r2, [r7, #20]
 802002e:	4313      	orrs	r3, r2
 8020030:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020032:	697b      	ldr	r3, [r7, #20]
 8020034:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8020038:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 802003a:	683b      	ldr	r3, [r7, #0]
 802003c:	031b      	lsls	r3, r3, #12
 802003e:	b29b      	uxth	r3, r3
 8020040:	697a      	ldr	r2, [r7, #20]
 8020042:	4313      	orrs	r3, r2
 8020044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8020046:	693b      	ldr	r3, [r7, #16]
 8020048:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 802004c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 802004e:	68bb      	ldr	r3, [r7, #8]
 8020050:	011b      	lsls	r3, r3, #4
 8020052:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8020056:	693a      	ldr	r2, [r7, #16]
 8020058:	4313      	orrs	r3, r2
 802005a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 802005c:	68fb      	ldr	r3, [r7, #12]
 802005e:	697a      	ldr	r2, [r7, #20]
 8020060:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8020062:	68fb      	ldr	r3, [r7, #12]
 8020064:	693a      	ldr	r2, [r7, #16]
 8020066:	621a      	str	r2, [r3, #32]
}
 8020068:	bf00      	nop
 802006a:	371c      	adds	r7, #28
 802006c:	46bd      	mov	sp, r7
 802006e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020072:	4770      	bx	lr

08020074 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8020074:	b480      	push	{r7}
 8020076:	b087      	sub	sp, #28
 8020078:	af00      	add	r7, sp, #0
 802007a:	60f8      	str	r0, [r7, #12]
 802007c:	60b9      	str	r1, [r7, #8]
 802007e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8020080:	68fb      	ldr	r3, [r7, #12]
 8020082:	6a1b      	ldr	r3, [r3, #32]
 8020084:	f023 0210 	bic.w	r2, r3, #16
 8020088:	68fb      	ldr	r3, [r7, #12]
 802008a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 802008c:	68fb      	ldr	r3, [r7, #12]
 802008e:	699b      	ldr	r3, [r3, #24]
 8020090:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8020092:	68fb      	ldr	r3, [r7, #12]
 8020094:	6a1b      	ldr	r3, [r3, #32]
 8020096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8020098:	697b      	ldr	r3, [r7, #20]
 802009a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802009e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80200a0:	687b      	ldr	r3, [r7, #4]
 80200a2:	031b      	lsls	r3, r3, #12
 80200a4:	697a      	ldr	r2, [r7, #20]
 80200a6:	4313      	orrs	r3, r2
 80200a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80200aa:	693b      	ldr	r3, [r7, #16]
 80200ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80200b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80200b2:	68bb      	ldr	r3, [r7, #8]
 80200b4:	011b      	lsls	r3, r3, #4
 80200b6:	693a      	ldr	r2, [r7, #16]
 80200b8:	4313      	orrs	r3, r2
 80200ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80200bc:	68fb      	ldr	r3, [r7, #12]
 80200be:	697a      	ldr	r2, [r7, #20]
 80200c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80200c2:	68fb      	ldr	r3, [r7, #12]
 80200c4:	693a      	ldr	r2, [r7, #16]
 80200c6:	621a      	str	r2, [r3, #32]
}
 80200c8:	bf00      	nop
 80200ca:	371c      	adds	r7, #28
 80200cc:	46bd      	mov	sp, r7
 80200ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80200d2:	4770      	bx	lr

080200d4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80200d4:	b480      	push	{r7}
 80200d6:	b087      	sub	sp, #28
 80200d8:	af00      	add	r7, sp, #0
 80200da:	60f8      	str	r0, [r7, #12]
 80200dc:	60b9      	str	r1, [r7, #8]
 80200de:	607a      	str	r2, [r7, #4]
 80200e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80200e2:	68fb      	ldr	r3, [r7, #12]
 80200e4:	6a1b      	ldr	r3, [r3, #32]
 80200e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80200ea:	68fb      	ldr	r3, [r7, #12]
 80200ec:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80200ee:	68fb      	ldr	r3, [r7, #12]
 80200f0:	69db      	ldr	r3, [r3, #28]
 80200f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80200f4:	68fb      	ldr	r3, [r7, #12]
 80200f6:	6a1b      	ldr	r3, [r3, #32]
 80200f8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80200fa:	697b      	ldr	r3, [r7, #20]
 80200fc:	f023 0303 	bic.w	r3, r3, #3
 8020100:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8020102:	697a      	ldr	r2, [r7, #20]
 8020104:	687b      	ldr	r3, [r7, #4]
 8020106:	4313      	orrs	r3, r2
 8020108:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 802010a:	697b      	ldr	r3, [r7, #20]
 802010c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8020110:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8020112:	683b      	ldr	r3, [r7, #0]
 8020114:	011b      	lsls	r3, r3, #4
 8020116:	b2db      	uxtb	r3, r3
 8020118:	697a      	ldr	r2, [r7, #20]
 802011a:	4313      	orrs	r3, r2
 802011c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 802011e:	693b      	ldr	r3, [r7, #16]
 8020120:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8020124:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8020126:	68bb      	ldr	r3, [r7, #8]
 8020128:	021b      	lsls	r3, r3, #8
 802012a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 802012e:	693a      	ldr	r2, [r7, #16]
 8020130:	4313      	orrs	r3, r2
 8020132:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8020134:	68fb      	ldr	r3, [r7, #12]
 8020136:	697a      	ldr	r2, [r7, #20]
 8020138:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 802013a:	68fb      	ldr	r3, [r7, #12]
 802013c:	693a      	ldr	r2, [r7, #16]
 802013e:	621a      	str	r2, [r3, #32]
}
 8020140:	bf00      	nop
 8020142:	371c      	adds	r7, #28
 8020144:	46bd      	mov	sp, r7
 8020146:	f85d 7b04 	ldr.w	r7, [sp], #4
 802014a:	4770      	bx	lr

0802014c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 802014c:	b480      	push	{r7}
 802014e:	b087      	sub	sp, #28
 8020150:	af00      	add	r7, sp, #0
 8020152:	60f8      	str	r0, [r7, #12]
 8020154:	60b9      	str	r1, [r7, #8]
 8020156:	607a      	str	r2, [r7, #4]
 8020158:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 802015a:	68fb      	ldr	r3, [r7, #12]
 802015c:	6a1b      	ldr	r3, [r3, #32]
 802015e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8020162:	68fb      	ldr	r3, [r7, #12]
 8020164:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8020166:	68fb      	ldr	r3, [r7, #12]
 8020168:	69db      	ldr	r3, [r3, #28]
 802016a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 802016c:	68fb      	ldr	r3, [r7, #12]
 802016e:	6a1b      	ldr	r3, [r3, #32]
 8020170:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8020172:	697b      	ldr	r3, [r7, #20]
 8020174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8020178:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 802017a:	687b      	ldr	r3, [r7, #4]
 802017c:	021b      	lsls	r3, r3, #8
 802017e:	697a      	ldr	r2, [r7, #20]
 8020180:	4313      	orrs	r3, r2
 8020182:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8020184:	697b      	ldr	r3, [r7, #20]
 8020186:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 802018a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 802018c:	683b      	ldr	r3, [r7, #0]
 802018e:	031b      	lsls	r3, r3, #12
 8020190:	b29b      	uxth	r3, r3
 8020192:	697a      	ldr	r2, [r7, #20]
 8020194:	4313      	orrs	r3, r2
 8020196:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8020198:	693b      	ldr	r3, [r7, #16]
 802019a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 802019e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80201a0:	68bb      	ldr	r3, [r7, #8]
 80201a2:	031b      	lsls	r3, r3, #12
 80201a4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80201a8:	693a      	ldr	r2, [r7, #16]
 80201aa:	4313      	orrs	r3, r2
 80201ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80201ae:	68fb      	ldr	r3, [r7, #12]
 80201b0:	697a      	ldr	r2, [r7, #20]
 80201b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80201b4:	68fb      	ldr	r3, [r7, #12]
 80201b6:	693a      	ldr	r2, [r7, #16]
 80201b8:	621a      	str	r2, [r3, #32]
}
 80201ba:	bf00      	nop
 80201bc:	371c      	adds	r7, #28
 80201be:	46bd      	mov	sp, r7
 80201c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201c4:	4770      	bx	lr
	...

080201c8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80201c8:	b480      	push	{r7}
 80201ca:	b085      	sub	sp, #20
 80201cc:	af00      	add	r7, sp, #0
 80201ce:	6078      	str	r0, [r7, #4]
 80201d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80201d2:	687b      	ldr	r3, [r7, #4]
 80201d4:	689b      	ldr	r3, [r3, #8]
 80201d6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80201d8:	68fa      	ldr	r2, [r7, #12]
 80201da:	4b09      	ldr	r3, [pc, #36]	; (8020200 <TIM_ITRx_SetConfig+0x38>)
 80201dc:	4013      	ands	r3, r2
 80201de:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80201e0:	683a      	ldr	r2, [r7, #0]
 80201e2:	68fb      	ldr	r3, [r7, #12]
 80201e4:	4313      	orrs	r3, r2
 80201e6:	f043 0307 	orr.w	r3, r3, #7
 80201ea:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80201ec:	687b      	ldr	r3, [r7, #4]
 80201ee:	68fa      	ldr	r2, [r7, #12]
 80201f0:	609a      	str	r2, [r3, #8]
}
 80201f2:	bf00      	nop
 80201f4:	3714      	adds	r7, #20
 80201f6:	46bd      	mov	sp, r7
 80201f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80201fc:	4770      	bx	lr
 80201fe:	bf00      	nop
 8020200:	ffcfff8f 	.word	0xffcfff8f

08020204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8020204:	b480      	push	{r7}
 8020206:	b087      	sub	sp, #28
 8020208:	af00      	add	r7, sp, #0
 802020a:	60f8      	str	r0, [r7, #12]
 802020c:	60b9      	str	r1, [r7, #8]
 802020e:	607a      	str	r2, [r7, #4]
 8020210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8020212:	68fb      	ldr	r3, [r7, #12]
 8020214:	689b      	ldr	r3, [r3, #8]
 8020216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8020218:	697b      	ldr	r3, [r7, #20]
 802021a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 802021e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8020220:	683b      	ldr	r3, [r7, #0]
 8020222:	021a      	lsls	r2, r3, #8
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	431a      	orrs	r2, r3
 8020228:	68bb      	ldr	r3, [r7, #8]
 802022a:	4313      	orrs	r3, r2
 802022c:	697a      	ldr	r2, [r7, #20]
 802022e:	4313      	orrs	r3, r2
 8020230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8020232:	68fb      	ldr	r3, [r7, #12]
 8020234:	697a      	ldr	r2, [r7, #20]
 8020236:	609a      	str	r2, [r3, #8]
}
 8020238:	bf00      	nop
 802023a:	371c      	adds	r7, #28
 802023c:	46bd      	mov	sp, r7
 802023e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020242:	4770      	bx	lr

08020244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8020244:	b480      	push	{r7}
 8020246:	b087      	sub	sp, #28
 8020248:	af00      	add	r7, sp, #0
 802024a:	60f8      	str	r0, [r7, #12]
 802024c:	60b9      	str	r1, [r7, #8]
 802024e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8020250:	68bb      	ldr	r3, [r7, #8]
 8020252:	f003 031f 	and.w	r3, r3, #31
 8020256:	2201      	movs	r2, #1
 8020258:	fa02 f303 	lsl.w	r3, r2, r3
 802025c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 802025e:	68fb      	ldr	r3, [r7, #12]
 8020260:	6a1a      	ldr	r2, [r3, #32]
 8020262:	697b      	ldr	r3, [r7, #20]
 8020264:	43db      	mvns	r3, r3
 8020266:	401a      	ands	r2, r3
 8020268:	68fb      	ldr	r3, [r7, #12]
 802026a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 802026c:	68fb      	ldr	r3, [r7, #12]
 802026e:	6a1a      	ldr	r2, [r3, #32]
 8020270:	68bb      	ldr	r3, [r7, #8]
 8020272:	f003 031f 	and.w	r3, r3, #31
 8020276:	6879      	ldr	r1, [r7, #4]
 8020278:	fa01 f303 	lsl.w	r3, r1, r3
 802027c:	431a      	orrs	r2, r3
 802027e:	68fb      	ldr	r3, [r7, #12]
 8020280:	621a      	str	r2, [r3, #32]
}
 8020282:	bf00      	nop
 8020284:	371c      	adds	r7, #28
 8020286:	46bd      	mov	sp, r7
 8020288:	f85d 7b04 	ldr.w	r7, [sp], #4
 802028c:	4770      	bx	lr
	...

08020290 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8020290:	b480      	push	{r7}
 8020292:	b085      	sub	sp, #20
 8020294:	af00      	add	r7, sp, #0
 8020296:	6078      	str	r0, [r7, #4]
 8020298:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 802029a:	687b      	ldr	r3, [r7, #4]
 802029c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80202a0:	2b01      	cmp	r3, #1
 80202a2:	d101      	bne.n	80202a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80202a4:	2302      	movs	r3, #2
 80202a6:	e077      	b.n	8020398 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	2201      	movs	r2, #1
 80202ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	2202      	movs	r2, #2
 80202b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80202b8:	687b      	ldr	r3, [r7, #4]
 80202ba:	681b      	ldr	r3, [r3, #0]
 80202bc:	685b      	ldr	r3, [r3, #4]
 80202be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80202c0:	687b      	ldr	r3, [r7, #4]
 80202c2:	681b      	ldr	r3, [r3, #0]
 80202c4:	689b      	ldr	r3, [r3, #8]
 80202c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80202c8:	687b      	ldr	r3, [r7, #4]
 80202ca:	681b      	ldr	r3, [r3, #0]
 80202cc:	4a35      	ldr	r2, [pc, #212]	; (80203a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80202ce:	4293      	cmp	r3, r2
 80202d0:	d004      	beq.n	80202dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	4a34      	ldr	r2, [pc, #208]	; (80203a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80202d8:	4293      	cmp	r3, r2
 80202da:	d108      	bne.n	80202ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80202dc:	68fb      	ldr	r3, [r7, #12]
 80202de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80202e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80202e4:	683b      	ldr	r3, [r7, #0]
 80202e6:	685b      	ldr	r3, [r3, #4]
 80202e8:	68fa      	ldr	r2, [r7, #12]
 80202ea:	4313      	orrs	r3, r2
 80202ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80202ee:	68fb      	ldr	r3, [r7, #12]
 80202f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80202f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80202f6:	683b      	ldr	r3, [r7, #0]
 80202f8:	681b      	ldr	r3, [r3, #0]
 80202fa:	68fa      	ldr	r2, [r7, #12]
 80202fc:	4313      	orrs	r3, r2
 80202fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8020300:	687b      	ldr	r3, [r7, #4]
 8020302:	681b      	ldr	r3, [r3, #0]
 8020304:	68fa      	ldr	r2, [r7, #12]
 8020306:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8020308:	687b      	ldr	r3, [r7, #4]
 802030a:	681b      	ldr	r3, [r3, #0]
 802030c:	4a25      	ldr	r2, [pc, #148]	; (80203a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 802030e:	4293      	cmp	r3, r2
 8020310:	d02c      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020312:	687b      	ldr	r3, [r7, #4]
 8020314:	681b      	ldr	r3, [r3, #0]
 8020316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 802031a:	d027      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802031c:	687b      	ldr	r3, [r7, #4]
 802031e:	681b      	ldr	r3, [r3, #0]
 8020320:	4a22      	ldr	r2, [pc, #136]	; (80203ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8020322:	4293      	cmp	r3, r2
 8020324:	d022      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020326:	687b      	ldr	r3, [r7, #4]
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	4a21      	ldr	r2, [pc, #132]	; (80203b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 802032c:	4293      	cmp	r3, r2
 802032e:	d01d      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	681b      	ldr	r3, [r3, #0]
 8020334:	4a1f      	ldr	r2, [pc, #124]	; (80203b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8020336:	4293      	cmp	r3, r2
 8020338:	d018      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802033a:	687b      	ldr	r3, [r7, #4]
 802033c:	681b      	ldr	r3, [r3, #0]
 802033e:	4a1a      	ldr	r2, [pc, #104]	; (80203a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8020340:	4293      	cmp	r3, r2
 8020342:	d013      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020344:	687b      	ldr	r3, [r7, #4]
 8020346:	681b      	ldr	r3, [r3, #0]
 8020348:	4a1b      	ldr	r2, [pc, #108]	; (80203b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 802034a:	4293      	cmp	r3, r2
 802034c:	d00e      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 802034e:	687b      	ldr	r3, [r7, #4]
 8020350:	681b      	ldr	r3, [r3, #0]
 8020352:	4a1a      	ldr	r2, [pc, #104]	; (80203bc <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8020354:	4293      	cmp	r3, r2
 8020356:	d009      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	681b      	ldr	r3, [r3, #0]
 802035c:	4a18      	ldr	r2, [pc, #96]	; (80203c0 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 802035e:	4293      	cmp	r3, r2
 8020360:	d004      	beq.n	802036c <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8020362:	687b      	ldr	r3, [r7, #4]
 8020364:	681b      	ldr	r3, [r3, #0]
 8020366:	4a17      	ldr	r2, [pc, #92]	; (80203c4 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8020368:	4293      	cmp	r3, r2
 802036a:	d10c      	bne.n	8020386 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 802036c:	68bb      	ldr	r3, [r7, #8]
 802036e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8020372:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8020374:	683b      	ldr	r3, [r7, #0]
 8020376:	689b      	ldr	r3, [r3, #8]
 8020378:	68ba      	ldr	r2, [r7, #8]
 802037a:	4313      	orrs	r3, r2
 802037c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 802037e:	687b      	ldr	r3, [r7, #4]
 8020380:	681b      	ldr	r3, [r3, #0]
 8020382:	68ba      	ldr	r2, [r7, #8]
 8020384:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8020386:	687b      	ldr	r3, [r7, #4]
 8020388:	2201      	movs	r2, #1
 802038a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 802038e:	687b      	ldr	r3, [r7, #4]
 8020390:	2200      	movs	r2, #0
 8020392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8020396:	2300      	movs	r3, #0
}
 8020398:	4618      	mov	r0, r3
 802039a:	3714      	adds	r7, #20
 802039c:	46bd      	mov	sp, r7
 802039e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80203a2:	4770      	bx	lr
 80203a4:	40010000 	.word	0x40010000
 80203a8:	40010400 	.word	0x40010400
 80203ac:	40000400 	.word	0x40000400
 80203b0:	40000800 	.word	0x40000800
 80203b4:	40000c00 	.word	0x40000c00
 80203b8:	40001800 	.word	0x40001800
 80203bc:	40014000 	.word	0x40014000
 80203c0:	4000e000 	.word	0x4000e000
 80203c4:	4000e400 	.word	0x4000e400

080203c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80203c8:	b480      	push	{r7}
 80203ca:	b085      	sub	sp, #20
 80203cc:	af00      	add	r7, sp, #0
 80203ce:	6078      	str	r0, [r7, #4]
 80203d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80203d2:	2300      	movs	r3, #0
 80203d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80203d6:	687b      	ldr	r3, [r7, #4]
 80203d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80203dc:	2b01      	cmp	r3, #1
 80203de:	d101      	bne.n	80203e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80203e0:	2302      	movs	r3, #2
 80203e2:	e087      	b.n	80204f4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80203e4:	687b      	ldr	r3, [r7, #4]
 80203e6:	2201      	movs	r2, #1
 80203e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80203ec:	68fb      	ldr	r3, [r7, #12]
 80203ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80203f2:	683b      	ldr	r3, [r7, #0]
 80203f4:	68db      	ldr	r3, [r3, #12]
 80203f6:	4313      	orrs	r3, r2
 80203f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80203fa:	68fb      	ldr	r3, [r7, #12]
 80203fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8020400:	683b      	ldr	r3, [r7, #0]
 8020402:	689b      	ldr	r3, [r3, #8]
 8020404:	4313      	orrs	r3, r2
 8020406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8020408:	68fb      	ldr	r3, [r7, #12]
 802040a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 802040e:	683b      	ldr	r3, [r7, #0]
 8020410:	685b      	ldr	r3, [r3, #4]
 8020412:	4313      	orrs	r3, r2
 8020414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8020416:	68fb      	ldr	r3, [r7, #12]
 8020418:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 802041c:	683b      	ldr	r3, [r7, #0]
 802041e:	681b      	ldr	r3, [r3, #0]
 8020420:	4313      	orrs	r3, r2
 8020422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8020424:	68fb      	ldr	r3, [r7, #12]
 8020426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 802042a:	683b      	ldr	r3, [r7, #0]
 802042c:	691b      	ldr	r3, [r3, #16]
 802042e:	4313      	orrs	r3, r2
 8020430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8020438:	683b      	ldr	r3, [r7, #0]
 802043a:	695b      	ldr	r3, [r3, #20]
 802043c:	4313      	orrs	r3, r2
 802043e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8020440:	68fb      	ldr	r3, [r7, #12]
 8020442:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8020446:	683b      	ldr	r3, [r7, #0]
 8020448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802044a:	4313      	orrs	r3, r2
 802044c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 802044e:	68fb      	ldr	r3, [r7, #12]
 8020450:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8020454:	683b      	ldr	r3, [r7, #0]
 8020456:	699b      	ldr	r3, [r3, #24]
 8020458:	041b      	lsls	r3, r3, #16
 802045a:	4313      	orrs	r3, r2
 802045c:	60fb      	str	r3, [r7, #12]

#if defined(TIM_BDTR_BKBID)
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 802045e:	687b      	ldr	r3, [r7, #4]
 8020460:	681b      	ldr	r3, [r3, #0]
 8020462:	4a27      	ldr	r2, [pc, #156]	; (8020500 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020464:	4293      	cmp	r3, r2
 8020466:	d004      	beq.n	8020472 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	681b      	ldr	r3, [r3, #0]
 802046c:	4a25      	ldr	r2, [pc, #148]	; (8020504 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 802046e:	4293      	cmp	r3, r2
 8020470:	d106      	bne.n	8020480 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8020472:	68fb      	ldr	r3, [r7, #12]
 8020474:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8020478:	683b      	ldr	r3, [r7, #0]
 802047a:	69db      	ldr	r3, [r3, #28]
 802047c:	4313      	orrs	r3, r2
 802047e:	60fb      	str	r3, [r7, #12]
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8020480:	687b      	ldr	r3, [r7, #4]
 8020482:	681b      	ldr	r3, [r3, #0]
 8020484:	4a1e      	ldr	r2, [pc, #120]	; (8020500 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8020486:	4293      	cmp	r3, r2
 8020488:	d004      	beq.n	8020494 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	681b      	ldr	r3, [r3, #0]
 802048e:	4a1d      	ldr	r2, [pc, #116]	; (8020504 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8020490:	4293      	cmp	r3, r2
 8020492:	d126      	bne.n	80204e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8020494:	68fb      	ldr	r3, [r7, #12]
 8020496:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 802049a:	683b      	ldr	r3, [r7, #0]
 802049c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802049e:	051b      	lsls	r3, r3, #20
 80204a0:	4313      	orrs	r3, r2
 80204a2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80204a4:	68fb      	ldr	r3, [r7, #12]
 80204a6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80204aa:	683b      	ldr	r3, [r7, #0]
 80204ac:	6a1b      	ldr	r3, [r3, #32]
 80204ae:	4313      	orrs	r3, r2
 80204b0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80204b2:	68fb      	ldr	r3, [r7, #12]
 80204b4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80204b8:	683b      	ldr	r3, [r7, #0]
 80204ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80204bc:	4313      	orrs	r3, r2
 80204be:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	681b      	ldr	r3, [r3, #0]
 80204c4:	4a0e      	ldr	r2, [pc, #56]	; (8020500 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80204c6:	4293      	cmp	r3, r2
 80204c8:	d004      	beq.n	80204d4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	681b      	ldr	r3, [r3, #0]
 80204ce:	4a0d      	ldr	r2, [pc, #52]	; (8020504 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80204d0:	4293      	cmp	r3, r2
 80204d2:	d106      	bne.n	80204e2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80204d4:	68fb      	ldr	r3, [r7, #12]
 80204d6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80204da:	683b      	ldr	r3, [r7, #0]
 80204dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80204de:	4313      	orrs	r3, r2
 80204e0:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80204e2:	687b      	ldr	r3, [r7, #4]
 80204e4:	681b      	ldr	r3, [r3, #0]
 80204e6:	68fa      	ldr	r2, [r7, #12]
 80204e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	2200      	movs	r2, #0
 80204ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80204f2:	2300      	movs	r3, #0
}
 80204f4:	4618      	mov	r0, r3
 80204f6:	3714      	adds	r7, #20
 80204f8:	46bd      	mov	sp, r7
 80204fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80204fe:	4770      	bx	lr
 8020500:	40010000 	.word	0x40010000
 8020504:	40010400 	.word	0x40010400

08020508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8020508:	b480      	push	{r7}
 802050a:	b083      	sub	sp, #12
 802050c:	af00      	add	r7, sp, #0
 802050e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8020510:	bf00      	nop
 8020512:	370c      	adds	r7, #12
 8020514:	46bd      	mov	sp, r7
 8020516:	f85d 7b04 	ldr.w	r7, [sp], #4
 802051a:	4770      	bx	lr

0802051c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 802051c:	b480      	push	{r7}
 802051e:	b083      	sub	sp, #12
 8020520:	af00      	add	r7, sp, #0
 8020522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8020524:	bf00      	nop
 8020526:	370c      	adds	r7, #12
 8020528:	46bd      	mov	sp, r7
 802052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802052e:	4770      	bx	lr

08020530 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8020530:	b480      	push	{r7}
 8020532:	b083      	sub	sp, #12
 8020534:	af00      	add	r7, sp, #0
 8020536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8020538:	bf00      	nop
 802053a:	370c      	adds	r7, #12
 802053c:	46bd      	mov	sp, r7
 802053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020542:	4770      	bx	lr

08020544 <_ZdlPv>:
 8020544:	f000 b926 	b.w	8020794 <free>

08020548 <_ZdlPvj>:
 8020548:	f7ff bffc 	b.w	8020544 <_ZdlPv>

0802054c <_Znwj>:
 802054c:	2801      	cmp	r0, #1
 802054e:	bf38      	it	cc
 8020550:	2001      	movcc	r0, #1
 8020552:	b510      	push	{r4, lr}
 8020554:	4604      	mov	r4, r0
 8020556:	4620      	mov	r0, r4
 8020558:	f000 f914 	bl	8020784 <malloc>
 802055c:	b930      	cbnz	r0, 802056c <_Znwj+0x20>
 802055e:	f000 f8d7 	bl	8020710 <_ZSt15get_new_handlerv>
 8020562:	b908      	cbnz	r0, 8020568 <_Znwj+0x1c>
 8020564:	f000 f8dc 	bl	8020720 <abort>
 8020568:	4780      	blx	r0
 802056a:	e7f4      	b.n	8020556 <_Znwj+0xa>
 802056c:	bd10      	pop	{r4, pc}

0802056e <__cxa_pure_virtual>:
 802056e:	b508      	push	{r3, lr}
 8020570:	f000 f8c8 	bl	8020704 <_ZSt9terminatev>

08020574 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8020574:	68c3      	ldr	r3, [r0, #12]
 8020576:	689a      	ldr	r2, [r3, #8]
 8020578:	60c2      	str	r2, [r0, #12]
 802057a:	b510      	push	{r4, lr}
 802057c:	b102      	cbz	r2, 8020580 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xc>
 802057e:	6050      	str	r0, [r2, #4]
 8020580:	6842      	ldr	r2, [r0, #4]
 8020582:	605a      	str	r2, [r3, #4]
 8020584:	680c      	ldr	r4, [r1, #0]
 8020586:	4284      	cmp	r4, r0
 8020588:	d103      	bne.n	8020592 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1e>
 802058a:	600b      	str	r3, [r1, #0]
 802058c:	6098      	str	r0, [r3, #8]
 802058e:	6043      	str	r3, [r0, #4]
 8020590:	bd10      	pop	{r4, pc}
 8020592:	6891      	ldr	r1, [r2, #8]
 8020594:	4281      	cmp	r1, r0
 8020596:	bf0c      	ite	eq
 8020598:	6093      	streq	r3, [r2, #8]
 802059a:	60d3      	strne	r3, [r2, #12]
 802059c:	e7f6      	b.n	802058c <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x18>

0802059e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 802059e:	6883      	ldr	r3, [r0, #8]
 80205a0:	68da      	ldr	r2, [r3, #12]
 80205a2:	6082      	str	r2, [r0, #8]
 80205a4:	b510      	push	{r4, lr}
 80205a6:	b102      	cbz	r2, 80205aa <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xc>
 80205a8:	6050      	str	r0, [r2, #4]
 80205aa:	6842      	ldr	r2, [r0, #4]
 80205ac:	605a      	str	r2, [r3, #4]
 80205ae:	680c      	ldr	r4, [r1, #0]
 80205b0:	4284      	cmp	r4, r0
 80205b2:	d103      	bne.n	80205bc <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1e>
 80205b4:	600b      	str	r3, [r1, #0]
 80205b6:	60d8      	str	r0, [r3, #12]
 80205b8:	6043      	str	r3, [r0, #4]
 80205ba:	bd10      	pop	{r4, pc}
 80205bc:	68d1      	ldr	r1, [r2, #12]
 80205be:	4281      	cmp	r1, r0
 80205c0:	bf0c      	ite	eq
 80205c2:	60d3      	streq	r3, [r2, #12]
 80205c4:	6093      	strne	r3, [r2, #8]
 80205c6:	e7f6      	b.n	80205b6 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x18>

080205c8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80205c8:	68c3      	ldr	r3, [r0, #12]
 80205ca:	b123      	cbz	r3, 80205d6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80205cc:	4618      	mov	r0, r3
 80205ce:	689b      	ldr	r3, [r3, #8]
 80205d0:	2b00      	cmp	r3, #0
 80205d2:	d1fb      	bne.n	80205cc <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x4>
 80205d4:	4770      	bx	lr
 80205d6:	6843      	ldr	r3, [r0, #4]
 80205d8:	68da      	ldr	r2, [r3, #12]
 80205da:	4282      	cmp	r2, r0
 80205dc:	d102      	bne.n	80205e4 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x1c>
 80205de:	4618      	mov	r0, r3
 80205e0:	685b      	ldr	r3, [r3, #4]
 80205e2:	e7f9      	b.n	80205d8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80205e4:	68c2      	ldr	r2, [r0, #12]
 80205e6:	4293      	cmp	r3, r2
 80205e8:	bf18      	it	ne
 80205ea:	4618      	movne	r0, r3
 80205ec:	4770      	bx	lr

080205ee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80205ee:	7803      	ldrb	r3, [r0, #0]
 80205f0:	b933      	cbnz	r3, 8020600 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80205f2:	6843      	ldr	r3, [r0, #4]
 80205f4:	685b      	ldr	r3, [r3, #4]
 80205f6:	4283      	cmp	r3, r0
 80205f8:	d102      	bne.n	8020600 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80205fa:	68db      	ldr	r3, [r3, #12]
 80205fc:	4618      	mov	r0, r3
 80205fe:	4770      	bx	lr
 8020600:	6882      	ldr	r2, [r0, #8]
 8020602:	b122      	cbz	r2, 802060e <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x20>
 8020604:	4613      	mov	r3, r2
 8020606:	68d2      	ldr	r2, [r2, #12]
 8020608:	2a00      	cmp	r2, #0
 802060a:	d1fb      	bne.n	8020604 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x16>
 802060c:	e7f6      	b.n	80205fc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 802060e:	6843      	ldr	r3, [r0, #4]
 8020610:	689a      	ldr	r2, [r3, #8]
 8020612:	4282      	cmp	r2, r0
 8020614:	d1f2      	bne.n	80205fc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0xe>
 8020616:	4618      	mov	r0, r3
 8020618:	685b      	ldr	r3, [r3, #4]
 802061a:	e7f9      	b.n	8020610 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x22>

0802061c <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 802061c:	f7ff bfd4 	b.w	80205c8 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>

08020620 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8020620:	f7ff bfe5 	b.w	80205ee <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>

08020624 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 8020624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020628:	461e      	mov	r6, r3
 802062a:	f103 0804 	add.w	r8, r3, #4
 802062e:	2300      	movs	r3, #0
 8020630:	e9c1 3302 	strd	r3, r3, [r1, #8]
 8020634:	460c      	mov	r4, r1
 8020636:	604a      	str	r2, [r1, #4]
 8020638:	700b      	strb	r3, [r1, #0]
 802063a:	b300      	cbz	r0, 802067e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x5a>
 802063c:	4296      	cmp	r6, r2
 802063e:	6091      	str	r1, [r2, #8]
 8020640:	d118      	bne.n	8020674 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x50>
 8020642:	6071      	str	r1, [r6, #4]
 8020644:	60f4      	str	r4, [r6, #12]
 8020646:	2701      	movs	r7, #1
 8020648:	f04f 0900 	mov.w	r9, #0
 802064c:	6873      	ldr	r3, [r6, #4]
 802064e:	42a3      	cmp	r3, r4
 8020650:	d03f      	beq.n	80206d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 8020652:	6860      	ldr	r0, [r4, #4]
 8020654:	7802      	ldrb	r2, [r0, #0]
 8020656:	2a00      	cmp	r2, #0
 8020658:	d13b      	bne.n	80206d2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xae>
 802065a:	6845      	ldr	r5, [r0, #4]
 802065c:	68ab      	ldr	r3, [r5, #8]
 802065e:	4298      	cmp	r0, r3
 8020660:	d123      	bne.n	80206aa <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x86>
 8020662:	68eb      	ldr	r3, [r5, #12]
 8020664:	b183      	cbz	r3, 8020688 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 8020666:	781a      	ldrb	r2, [r3, #0]
 8020668:	b972      	cbnz	r2, 8020688 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x64>
 802066a:	7007      	strb	r7, [r0, #0]
 802066c:	701f      	strb	r7, [r3, #0]
 802066e:	702a      	strb	r2, [r5, #0]
 8020670:	462c      	mov	r4, r5
 8020672:	e7eb      	b.n	802064c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x28>
 8020674:	68b3      	ldr	r3, [r6, #8]
 8020676:	4293      	cmp	r3, r2
 8020678:	d1e5      	bne.n	8020646 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802067a:	60b1      	str	r1, [r6, #8]
 802067c:	e7e3      	b.n	8020646 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 802067e:	60d1      	str	r1, [r2, #12]
 8020680:	68f3      	ldr	r3, [r6, #12]
 8020682:	4293      	cmp	r3, r2
 8020684:	d1df      	bne.n	8020646 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x22>
 8020686:	e7dd      	b.n	8020644 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 8020688:	68c3      	ldr	r3, [r0, #12]
 802068a:	42a3      	cmp	r3, r4
 802068c:	d103      	bne.n	8020696 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x72>
 802068e:	4641      	mov	r1, r8
 8020690:	f7ff ff70 	bl	8020574 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 8020694:	4604      	mov	r4, r0
 8020696:	6863      	ldr	r3, [r4, #4]
 8020698:	4641      	mov	r1, r8
 802069a:	701f      	strb	r7, [r3, #0]
 802069c:	4628      	mov	r0, r5
 802069e:	f885 9000 	strb.w	r9, [r5]
 80206a2:	f7ff ff7c 	bl	802059e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80206a6:	4625      	mov	r5, r4
 80206a8:	e7e2      	b.n	8020670 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x4c>
 80206aa:	b113      	cbz	r3, 80206b2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x8e>
 80206ac:	781a      	ldrb	r2, [r3, #0]
 80206ae:	2a00      	cmp	r2, #0
 80206b0:	d0db      	beq.n	802066a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x46>
 80206b2:	6883      	ldr	r3, [r0, #8]
 80206b4:	42a3      	cmp	r3, r4
 80206b6:	d103      	bne.n	80206c0 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 80206b8:	4641      	mov	r1, r8
 80206ba:	f7ff ff70 	bl	802059e <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80206be:	4604      	mov	r4, r0
 80206c0:	6863      	ldr	r3, [r4, #4]
 80206c2:	4641      	mov	r1, r8
 80206c4:	701f      	strb	r7, [r3, #0]
 80206c6:	4628      	mov	r0, r5
 80206c8:	f885 9000 	strb.w	r9, [r5]
 80206cc:	f7ff ff52 	bl	8020574 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80206d0:	e7e9      	b.n	80206a6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x82>
 80206d2:	2201      	movs	r2, #1
 80206d4:	701a      	strb	r2, [r3, #0]
 80206d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080206da <_ZSt17__throw_bad_allocv>:
 80206da:	b508      	push	{r3, lr}
 80206dc:	f000 f820 	bl	8020720 <abort>

080206e0 <_ZSt20__throw_length_errorPKc>:
 80206e0:	b508      	push	{r3, lr}
 80206e2:	f000 f81d 	bl	8020720 <abort>

080206e6 <_ZSt25__throw_bad_function_callv>:
 80206e6:	b508      	push	{r3, lr}
 80206e8:	f000 f81a 	bl	8020720 <abort>

080206ec <_ZN10__cxxabiv111__terminateEPFvvE>:
 80206ec:	b508      	push	{r3, lr}
 80206ee:	4780      	blx	r0
 80206f0:	f000 f816 	bl	8020720 <abort>

080206f4 <_ZSt13get_terminatev>:
 80206f4:	4b02      	ldr	r3, [pc, #8]	; (8020700 <_ZSt13get_terminatev+0xc>)
 80206f6:	6818      	ldr	r0, [r3, #0]
 80206f8:	f3bf 8f5b 	dmb	ish
 80206fc:	4770      	bx	lr
 80206fe:	bf00      	nop
 8020700:	24000014 	.word	0x24000014

08020704 <_ZSt9terminatev>:
 8020704:	b508      	push	{r3, lr}
 8020706:	f7ff fff5 	bl	80206f4 <_ZSt13get_terminatev>
 802070a:	f7ff ffef 	bl	80206ec <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08020710 <_ZSt15get_new_handlerv>:
 8020710:	4b02      	ldr	r3, [pc, #8]	; (802071c <_ZSt15get_new_handlerv+0xc>)
 8020712:	6818      	ldr	r0, [r3, #0]
 8020714:	f3bf 8f5b 	dmb	ish
 8020718:	4770      	bx	lr
 802071a:	bf00      	nop
 802071c:	24001304 	.word	0x24001304

08020720 <abort>:
 8020720:	b508      	push	{r3, lr}
 8020722:	2006      	movs	r0, #6
 8020724:	f000 f986 	bl	8020a34 <raise>
 8020728:	2001      	movs	r0, #1
 802072a:	f7f4 fc7d 	bl	8015028 <_exit>
	...

08020730 <__errno>:
 8020730:	4b01      	ldr	r3, [pc, #4]	; (8020738 <__errno+0x8>)
 8020732:	6818      	ldr	r0, [r3, #0]
 8020734:	4770      	bx	lr
 8020736:	bf00      	nop
 8020738:	24000018 	.word	0x24000018

0802073c <__libc_init_array>:
 802073c:	b570      	push	{r4, r5, r6, lr}
 802073e:	4d0d      	ldr	r5, [pc, #52]	; (8020774 <__libc_init_array+0x38>)
 8020740:	4c0d      	ldr	r4, [pc, #52]	; (8020778 <__libc_init_array+0x3c>)
 8020742:	1b64      	subs	r4, r4, r5
 8020744:	10a4      	asrs	r4, r4, #2
 8020746:	2600      	movs	r6, #0
 8020748:	42a6      	cmp	r6, r4
 802074a:	d109      	bne.n	8020760 <__libc_init_array+0x24>
 802074c:	4d0b      	ldr	r5, [pc, #44]	; (802077c <__libc_init_array+0x40>)
 802074e:	4c0c      	ldr	r4, [pc, #48]	; (8020780 <__libc_init_array+0x44>)
 8020750:	f000 f99a 	bl	8020a88 <_init>
 8020754:	1b64      	subs	r4, r4, r5
 8020756:	10a4      	asrs	r4, r4, #2
 8020758:	2600      	movs	r6, #0
 802075a:	42a6      	cmp	r6, r4
 802075c:	d105      	bne.n	802076a <__libc_init_array+0x2e>
 802075e:	bd70      	pop	{r4, r5, r6, pc}
 8020760:	f855 3b04 	ldr.w	r3, [r5], #4
 8020764:	4798      	blx	r3
 8020766:	3601      	adds	r6, #1
 8020768:	e7ee      	b.n	8020748 <__libc_init_array+0xc>
 802076a:	f855 3b04 	ldr.w	r3, [r5], #4
 802076e:	4798      	blx	r3
 8020770:	3601      	adds	r6, #1
 8020772:	e7f2      	b.n	802075a <__libc_init_array+0x1e>
 8020774:	08020d38 	.word	0x08020d38
 8020778:	08020d38 	.word	0x08020d38
 802077c:	08020d38 	.word	0x08020d38
 8020780:	08020d68 	.word	0x08020d68

08020784 <malloc>:
 8020784:	4b02      	ldr	r3, [pc, #8]	; (8020790 <malloc+0xc>)
 8020786:	4601      	mov	r1, r0
 8020788:	6818      	ldr	r0, [r3, #0]
 802078a:	f000 b8a7 	b.w	80208dc <_malloc_r>
 802078e:	bf00      	nop
 8020790:	24000018 	.word	0x24000018

08020794 <free>:
 8020794:	4b02      	ldr	r3, [pc, #8]	; (80207a0 <free+0xc>)
 8020796:	4601      	mov	r1, r0
 8020798:	6818      	ldr	r0, [r3, #0]
 802079a:	f000 b833 	b.w	8020804 <_free_r>
 802079e:	bf00      	nop
 80207a0:	24000018 	.word	0x24000018

080207a4 <memcpy>:
 80207a4:	440a      	add	r2, r1
 80207a6:	4291      	cmp	r1, r2
 80207a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80207ac:	d100      	bne.n	80207b0 <memcpy+0xc>
 80207ae:	4770      	bx	lr
 80207b0:	b510      	push	{r4, lr}
 80207b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80207b6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80207ba:	4291      	cmp	r1, r2
 80207bc:	d1f9      	bne.n	80207b2 <memcpy+0xe>
 80207be:	bd10      	pop	{r4, pc}

080207c0 <memmove>:
 80207c0:	4288      	cmp	r0, r1
 80207c2:	b510      	push	{r4, lr}
 80207c4:	eb01 0402 	add.w	r4, r1, r2
 80207c8:	d902      	bls.n	80207d0 <memmove+0x10>
 80207ca:	4284      	cmp	r4, r0
 80207cc:	4623      	mov	r3, r4
 80207ce:	d807      	bhi.n	80207e0 <memmove+0x20>
 80207d0:	1e43      	subs	r3, r0, #1
 80207d2:	42a1      	cmp	r1, r4
 80207d4:	d008      	beq.n	80207e8 <memmove+0x28>
 80207d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80207da:	f803 2f01 	strb.w	r2, [r3, #1]!
 80207de:	e7f8      	b.n	80207d2 <memmove+0x12>
 80207e0:	4402      	add	r2, r0
 80207e2:	4601      	mov	r1, r0
 80207e4:	428a      	cmp	r2, r1
 80207e6:	d100      	bne.n	80207ea <memmove+0x2a>
 80207e8:	bd10      	pop	{r4, pc}
 80207ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80207ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80207f2:	e7f7      	b.n	80207e4 <memmove+0x24>

080207f4 <memset>:
 80207f4:	4402      	add	r2, r0
 80207f6:	4603      	mov	r3, r0
 80207f8:	4293      	cmp	r3, r2
 80207fa:	d100      	bne.n	80207fe <memset+0xa>
 80207fc:	4770      	bx	lr
 80207fe:	f803 1b01 	strb.w	r1, [r3], #1
 8020802:	e7f9      	b.n	80207f8 <memset+0x4>

08020804 <_free_r>:
 8020804:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8020806:	2900      	cmp	r1, #0
 8020808:	d044      	beq.n	8020894 <_free_r+0x90>
 802080a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802080e:	9001      	str	r0, [sp, #4]
 8020810:	2b00      	cmp	r3, #0
 8020812:	f1a1 0404 	sub.w	r4, r1, #4
 8020816:	bfb8      	it	lt
 8020818:	18e4      	addlt	r4, r4, r3
 802081a:	f000 f927 	bl	8020a6c <__malloc_lock>
 802081e:	4a1e      	ldr	r2, [pc, #120]	; (8020898 <_free_r+0x94>)
 8020820:	9801      	ldr	r0, [sp, #4]
 8020822:	6813      	ldr	r3, [r2, #0]
 8020824:	b933      	cbnz	r3, 8020834 <_free_r+0x30>
 8020826:	6063      	str	r3, [r4, #4]
 8020828:	6014      	str	r4, [r2, #0]
 802082a:	b003      	add	sp, #12
 802082c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020830:	f000 b922 	b.w	8020a78 <__malloc_unlock>
 8020834:	42a3      	cmp	r3, r4
 8020836:	d908      	bls.n	802084a <_free_r+0x46>
 8020838:	6825      	ldr	r5, [r4, #0]
 802083a:	1961      	adds	r1, r4, r5
 802083c:	428b      	cmp	r3, r1
 802083e:	bf01      	itttt	eq
 8020840:	6819      	ldreq	r1, [r3, #0]
 8020842:	685b      	ldreq	r3, [r3, #4]
 8020844:	1949      	addeq	r1, r1, r5
 8020846:	6021      	streq	r1, [r4, #0]
 8020848:	e7ed      	b.n	8020826 <_free_r+0x22>
 802084a:	461a      	mov	r2, r3
 802084c:	685b      	ldr	r3, [r3, #4]
 802084e:	b10b      	cbz	r3, 8020854 <_free_r+0x50>
 8020850:	42a3      	cmp	r3, r4
 8020852:	d9fa      	bls.n	802084a <_free_r+0x46>
 8020854:	6811      	ldr	r1, [r2, #0]
 8020856:	1855      	adds	r5, r2, r1
 8020858:	42a5      	cmp	r5, r4
 802085a:	d10b      	bne.n	8020874 <_free_r+0x70>
 802085c:	6824      	ldr	r4, [r4, #0]
 802085e:	4421      	add	r1, r4
 8020860:	1854      	adds	r4, r2, r1
 8020862:	42a3      	cmp	r3, r4
 8020864:	6011      	str	r1, [r2, #0]
 8020866:	d1e0      	bne.n	802082a <_free_r+0x26>
 8020868:	681c      	ldr	r4, [r3, #0]
 802086a:	685b      	ldr	r3, [r3, #4]
 802086c:	6053      	str	r3, [r2, #4]
 802086e:	4421      	add	r1, r4
 8020870:	6011      	str	r1, [r2, #0]
 8020872:	e7da      	b.n	802082a <_free_r+0x26>
 8020874:	d902      	bls.n	802087c <_free_r+0x78>
 8020876:	230c      	movs	r3, #12
 8020878:	6003      	str	r3, [r0, #0]
 802087a:	e7d6      	b.n	802082a <_free_r+0x26>
 802087c:	6825      	ldr	r5, [r4, #0]
 802087e:	1961      	adds	r1, r4, r5
 8020880:	428b      	cmp	r3, r1
 8020882:	bf04      	itt	eq
 8020884:	6819      	ldreq	r1, [r3, #0]
 8020886:	685b      	ldreq	r3, [r3, #4]
 8020888:	6063      	str	r3, [r4, #4]
 802088a:	bf04      	itt	eq
 802088c:	1949      	addeq	r1, r1, r5
 802088e:	6021      	streq	r1, [r4, #0]
 8020890:	6054      	str	r4, [r2, #4]
 8020892:	e7ca      	b.n	802082a <_free_r+0x26>
 8020894:	b003      	add	sp, #12
 8020896:	bd30      	pop	{r4, r5, pc}
 8020898:	24001308 	.word	0x24001308

0802089c <sbrk_aligned>:
 802089c:	b570      	push	{r4, r5, r6, lr}
 802089e:	4e0e      	ldr	r6, [pc, #56]	; (80208d8 <sbrk_aligned+0x3c>)
 80208a0:	460c      	mov	r4, r1
 80208a2:	6831      	ldr	r1, [r6, #0]
 80208a4:	4605      	mov	r5, r0
 80208a6:	b911      	cbnz	r1, 80208ae <sbrk_aligned+0x12>
 80208a8:	f000 f88c 	bl	80209c4 <_sbrk_r>
 80208ac:	6030      	str	r0, [r6, #0]
 80208ae:	4621      	mov	r1, r4
 80208b0:	4628      	mov	r0, r5
 80208b2:	f000 f887 	bl	80209c4 <_sbrk_r>
 80208b6:	1c43      	adds	r3, r0, #1
 80208b8:	d00a      	beq.n	80208d0 <sbrk_aligned+0x34>
 80208ba:	1cc4      	adds	r4, r0, #3
 80208bc:	f024 0403 	bic.w	r4, r4, #3
 80208c0:	42a0      	cmp	r0, r4
 80208c2:	d007      	beq.n	80208d4 <sbrk_aligned+0x38>
 80208c4:	1a21      	subs	r1, r4, r0
 80208c6:	4628      	mov	r0, r5
 80208c8:	f000 f87c 	bl	80209c4 <_sbrk_r>
 80208cc:	3001      	adds	r0, #1
 80208ce:	d101      	bne.n	80208d4 <sbrk_aligned+0x38>
 80208d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80208d4:	4620      	mov	r0, r4
 80208d6:	bd70      	pop	{r4, r5, r6, pc}
 80208d8:	2400130c 	.word	0x2400130c

080208dc <_malloc_r>:
 80208dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80208e0:	1ccd      	adds	r5, r1, #3
 80208e2:	f025 0503 	bic.w	r5, r5, #3
 80208e6:	3508      	adds	r5, #8
 80208e8:	2d0c      	cmp	r5, #12
 80208ea:	bf38      	it	cc
 80208ec:	250c      	movcc	r5, #12
 80208ee:	2d00      	cmp	r5, #0
 80208f0:	4607      	mov	r7, r0
 80208f2:	db01      	blt.n	80208f8 <_malloc_r+0x1c>
 80208f4:	42a9      	cmp	r1, r5
 80208f6:	d905      	bls.n	8020904 <_malloc_r+0x28>
 80208f8:	230c      	movs	r3, #12
 80208fa:	603b      	str	r3, [r7, #0]
 80208fc:	2600      	movs	r6, #0
 80208fe:	4630      	mov	r0, r6
 8020900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020904:	4e2e      	ldr	r6, [pc, #184]	; (80209c0 <_malloc_r+0xe4>)
 8020906:	f000 f8b1 	bl	8020a6c <__malloc_lock>
 802090a:	6833      	ldr	r3, [r6, #0]
 802090c:	461c      	mov	r4, r3
 802090e:	bb34      	cbnz	r4, 802095e <_malloc_r+0x82>
 8020910:	4629      	mov	r1, r5
 8020912:	4638      	mov	r0, r7
 8020914:	f7ff ffc2 	bl	802089c <sbrk_aligned>
 8020918:	1c43      	adds	r3, r0, #1
 802091a:	4604      	mov	r4, r0
 802091c:	d14d      	bne.n	80209ba <_malloc_r+0xde>
 802091e:	6834      	ldr	r4, [r6, #0]
 8020920:	4626      	mov	r6, r4
 8020922:	2e00      	cmp	r6, #0
 8020924:	d140      	bne.n	80209a8 <_malloc_r+0xcc>
 8020926:	6823      	ldr	r3, [r4, #0]
 8020928:	4631      	mov	r1, r6
 802092a:	4638      	mov	r0, r7
 802092c:	eb04 0803 	add.w	r8, r4, r3
 8020930:	f000 f848 	bl	80209c4 <_sbrk_r>
 8020934:	4580      	cmp	r8, r0
 8020936:	d13a      	bne.n	80209ae <_malloc_r+0xd2>
 8020938:	6821      	ldr	r1, [r4, #0]
 802093a:	3503      	adds	r5, #3
 802093c:	1a6d      	subs	r5, r5, r1
 802093e:	f025 0503 	bic.w	r5, r5, #3
 8020942:	3508      	adds	r5, #8
 8020944:	2d0c      	cmp	r5, #12
 8020946:	bf38      	it	cc
 8020948:	250c      	movcc	r5, #12
 802094a:	4629      	mov	r1, r5
 802094c:	4638      	mov	r0, r7
 802094e:	f7ff ffa5 	bl	802089c <sbrk_aligned>
 8020952:	3001      	adds	r0, #1
 8020954:	d02b      	beq.n	80209ae <_malloc_r+0xd2>
 8020956:	6823      	ldr	r3, [r4, #0]
 8020958:	442b      	add	r3, r5
 802095a:	6023      	str	r3, [r4, #0]
 802095c:	e00e      	b.n	802097c <_malloc_r+0xa0>
 802095e:	6822      	ldr	r2, [r4, #0]
 8020960:	1b52      	subs	r2, r2, r5
 8020962:	d41e      	bmi.n	80209a2 <_malloc_r+0xc6>
 8020964:	2a0b      	cmp	r2, #11
 8020966:	d916      	bls.n	8020996 <_malloc_r+0xba>
 8020968:	1961      	adds	r1, r4, r5
 802096a:	42a3      	cmp	r3, r4
 802096c:	6025      	str	r5, [r4, #0]
 802096e:	bf18      	it	ne
 8020970:	6059      	strne	r1, [r3, #4]
 8020972:	6863      	ldr	r3, [r4, #4]
 8020974:	bf08      	it	eq
 8020976:	6031      	streq	r1, [r6, #0]
 8020978:	5162      	str	r2, [r4, r5]
 802097a:	604b      	str	r3, [r1, #4]
 802097c:	4638      	mov	r0, r7
 802097e:	f104 060b 	add.w	r6, r4, #11
 8020982:	f000 f879 	bl	8020a78 <__malloc_unlock>
 8020986:	f026 0607 	bic.w	r6, r6, #7
 802098a:	1d23      	adds	r3, r4, #4
 802098c:	1af2      	subs	r2, r6, r3
 802098e:	d0b6      	beq.n	80208fe <_malloc_r+0x22>
 8020990:	1b9b      	subs	r3, r3, r6
 8020992:	50a3      	str	r3, [r4, r2]
 8020994:	e7b3      	b.n	80208fe <_malloc_r+0x22>
 8020996:	6862      	ldr	r2, [r4, #4]
 8020998:	42a3      	cmp	r3, r4
 802099a:	bf0c      	ite	eq
 802099c:	6032      	streq	r2, [r6, #0]
 802099e:	605a      	strne	r2, [r3, #4]
 80209a0:	e7ec      	b.n	802097c <_malloc_r+0xa0>
 80209a2:	4623      	mov	r3, r4
 80209a4:	6864      	ldr	r4, [r4, #4]
 80209a6:	e7b2      	b.n	802090e <_malloc_r+0x32>
 80209a8:	4634      	mov	r4, r6
 80209aa:	6876      	ldr	r6, [r6, #4]
 80209ac:	e7b9      	b.n	8020922 <_malloc_r+0x46>
 80209ae:	230c      	movs	r3, #12
 80209b0:	603b      	str	r3, [r7, #0]
 80209b2:	4638      	mov	r0, r7
 80209b4:	f000 f860 	bl	8020a78 <__malloc_unlock>
 80209b8:	e7a1      	b.n	80208fe <_malloc_r+0x22>
 80209ba:	6025      	str	r5, [r4, #0]
 80209bc:	e7de      	b.n	802097c <_malloc_r+0xa0>
 80209be:	bf00      	nop
 80209c0:	24001308 	.word	0x24001308

080209c4 <_sbrk_r>:
 80209c4:	b538      	push	{r3, r4, r5, lr}
 80209c6:	4d06      	ldr	r5, [pc, #24]	; (80209e0 <_sbrk_r+0x1c>)
 80209c8:	2300      	movs	r3, #0
 80209ca:	4604      	mov	r4, r0
 80209cc:	4608      	mov	r0, r1
 80209ce:	602b      	str	r3, [r5, #0]
 80209d0:	f7f4 fb34 	bl	801503c <_sbrk>
 80209d4:	1c43      	adds	r3, r0, #1
 80209d6:	d102      	bne.n	80209de <_sbrk_r+0x1a>
 80209d8:	682b      	ldr	r3, [r5, #0]
 80209da:	b103      	cbz	r3, 80209de <_sbrk_r+0x1a>
 80209dc:	6023      	str	r3, [r4, #0]
 80209de:	bd38      	pop	{r3, r4, r5, pc}
 80209e0:	24001310 	.word	0x24001310

080209e4 <_raise_r>:
 80209e4:	291f      	cmp	r1, #31
 80209e6:	b538      	push	{r3, r4, r5, lr}
 80209e8:	4604      	mov	r4, r0
 80209ea:	460d      	mov	r5, r1
 80209ec:	d904      	bls.n	80209f8 <_raise_r+0x14>
 80209ee:	2316      	movs	r3, #22
 80209f0:	6003      	str	r3, [r0, #0]
 80209f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80209f6:	bd38      	pop	{r3, r4, r5, pc}
 80209f8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80209fa:	b112      	cbz	r2, 8020a02 <_raise_r+0x1e>
 80209fc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020a00:	b94b      	cbnz	r3, 8020a16 <_raise_r+0x32>
 8020a02:	4620      	mov	r0, r4
 8020a04:	f000 f830 	bl	8020a68 <_getpid_r>
 8020a08:	462a      	mov	r2, r5
 8020a0a:	4601      	mov	r1, r0
 8020a0c:	4620      	mov	r0, r4
 8020a0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020a12:	f000 b817 	b.w	8020a44 <_kill_r>
 8020a16:	2b01      	cmp	r3, #1
 8020a18:	d00a      	beq.n	8020a30 <_raise_r+0x4c>
 8020a1a:	1c59      	adds	r1, r3, #1
 8020a1c:	d103      	bne.n	8020a26 <_raise_r+0x42>
 8020a1e:	2316      	movs	r3, #22
 8020a20:	6003      	str	r3, [r0, #0]
 8020a22:	2001      	movs	r0, #1
 8020a24:	e7e7      	b.n	80209f6 <_raise_r+0x12>
 8020a26:	2400      	movs	r4, #0
 8020a28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8020a2c:	4628      	mov	r0, r5
 8020a2e:	4798      	blx	r3
 8020a30:	2000      	movs	r0, #0
 8020a32:	e7e0      	b.n	80209f6 <_raise_r+0x12>

08020a34 <raise>:
 8020a34:	4b02      	ldr	r3, [pc, #8]	; (8020a40 <raise+0xc>)
 8020a36:	4601      	mov	r1, r0
 8020a38:	6818      	ldr	r0, [r3, #0]
 8020a3a:	f7ff bfd3 	b.w	80209e4 <_raise_r>
 8020a3e:	bf00      	nop
 8020a40:	24000018 	.word	0x24000018

08020a44 <_kill_r>:
 8020a44:	b538      	push	{r3, r4, r5, lr}
 8020a46:	4d07      	ldr	r5, [pc, #28]	; (8020a64 <_kill_r+0x20>)
 8020a48:	2300      	movs	r3, #0
 8020a4a:	4604      	mov	r4, r0
 8020a4c:	4608      	mov	r0, r1
 8020a4e:	4611      	mov	r1, r2
 8020a50:	602b      	str	r3, [r5, #0]
 8020a52:	f7f4 fad9 	bl	8015008 <_kill>
 8020a56:	1c43      	adds	r3, r0, #1
 8020a58:	d102      	bne.n	8020a60 <_kill_r+0x1c>
 8020a5a:	682b      	ldr	r3, [r5, #0]
 8020a5c:	b103      	cbz	r3, 8020a60 <_kill_r+0x1c>
 8020a5e:	6023      	str	r3, [r4, #0]
 8020a60:	bd38      	pop	{r3, r4, r5, pc}
 8020a62:	bf00      	nop
 8020a64:	24001310 	.word	0x24001310

08020a68 <_getpid_r>:
 8020a68:	f7f4 bac6 	b.w	8014ff8 <_getpid>

08020a6c <__malloc_lock>:
 8020a6c:	4801      	ldr	r0, [pc, #4]	; (8020a74 <__malloc_lock+0x8>)
 8020a6e:	f000 b809 	b.w	8020a84 <__retarget_lock_acquire_recursive>
 8020a72:	bf00      	nop
 8020a74:	24001314 	.word	0x24001314

08020a78 <__malloc_unlock>:
 8020a78:	4801      	ldr	r0, [pc, #4]	; (8020a80 <__malloc_unlock+0x8>)
 8020a7a:	f000 b804 	b.w	8020a86 <__retarget_lock_release_recursive>
 8020a7e:	bf00      	nop
 8020a80:	24001314 	.word	0x24001314

08020a84 <__retarget_lock_acquire_recursive>:
 8020a84:	4770      	bx	lr

08020a86 <__retarget_lock_release_recursive>:
 8020a86:	4770      	bx	lr

08020a88 <_init>:
 8020a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a8a:	bf00      	nop
 8020a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020a8e:	bc08      	pop	{r3}
 8020a90:	469e      	mov	lr, r3
 8020a92:	4770      	bx	lr

08020a94 <_fini>:
 8020a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020a96:	bf00      	nop
 8020a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8020a9a:	bc08      	pop	{r3}
 8020a9c:	469e      	mov	lr, r3
 8020a9e:	4770      	bx	lr
